OBJECT Codeunit 144078 Jobs Field Validation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobPostingGroup@1500007 : Record 208;
      LibraryJob@1500006 : Codeunit 131920;
      LibrarySales@1500000 : Codeunit 130509;
      Assert@1500001 : Codeunit 130000;
      isInitialized@1500004 : Boolean;
      CustomerValidateErr@1500002 : TextConst '@@@="%1 and %2 = Job Code and Customer Code";ENU="Bill-to Customer No. must be equal to ''''  in Job: No.=%1. Current value is ''%2''.";ENN=You cannot change %1 because one or more entries are associated with this %2.';
      WIPMethodValidateErr@1500003 : TextConst '@@@="%1 and %2 = Job code and Job Type";ENU="WIP Method must only be Completed Contract in Job No.=%1 with Job Type=%2";ENN=The selected %1 requires the %2 to have %3 enabled.';
      StatusValidateErr@1500005 : TextConst '@@@="%1 and %2 = Job Status and Job Code";ENU="Status must not be %1 in Job No.=''%2''."';

    [Test]
    PROCEDURE NewJobWithCustomerValidation@1500002();
    VAR
      Job@1500001 : Record 167;
      CustomerNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 164067] Tests if the system is allowing selecting the Customer Code in Bill-to Customer No. field in Job Card
      // if the Job Type is "Capital WIP".
      // [FEATURE] [Jobs]

      // [GIVEN] Created Job and Customer
      Initialize;
      CreateJob(Job);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [WHEN] Update Bill to customer field
      ASSERTERROR Job.VALIDATE("Bill-to Customer No.",CustomerNo);

      // [THEN] Verfied Bill to Customer No field
      Assert.ExpectedError(STRSUBSTNO(CustomerValidateErr,Job."No.",CustomerNo));
    END;

    [Test]
    PROCEDURE NewJobWithWIPMethodValidation@1500006();
    VAR
      JobWIPMethod@1500000 : Record 1006;
      Job@1500001 : Record 167;
    BEGIN
      // [SCENARIO 164067] Tests if the system is allowing the WIP Method if the Job Type is "Capital WIP".
      // [FEATURE] [Jobs]

      // [GIVEN] Created Job and Customer
      Initialize;
      CreateJobWIPMethod(JobWIPMethod);
      CreateJob(Job);

      // [WHEN] Update WIP Method field
      ASSERTERROR Job.VALIDATE("WIP Method",JobWIPMethod.Code);

      // [THEN] Verified WIP Method field
      Assert.ExpectedError(STRSUBSTNO(WIPMethodValidateErr,Job."No.",Job."Job Type"));
    END;

    [Test]
    PROCEDURE NewJobWithQuoteStatusValidation@1500016();
    VAR
      Job@1500001 : Record 167;
    BEGIN
      // [SCENARIO 164067] Tests if the system is allowing the Status as Quote in Job Card if the Job Type is "Capital WIP".
      // [FEATURE] [Jobs]

      // [GIVEN] Created Job and Customer
      Initialize;
      CreateJob(Job);

      // [WHEN] Update Status field with the value as Quote
      ASSERTERROR Job.VALIDATE(Status,Job.Status::Quote);

      // [THEN] Verified Status field with the value as Quote
      Assert.ExpectedError(STRSUBSTNO(StatusValidateErr,Job.Status::Quote,Job."No."));
    END;

    [Test]
    PROCEDURE NewJobWithOrderStatusValidation@1500017();
    VAR
      Job@1500001 : Record 167;
    BEGIN
      // [SCENARIO 164067] Tests if the system is allowing the Status as Order in Job Card if the Job Type is "Capital WIP".
      // [FEATURE] [Jobs]

      // [GIVEN] Job and Customer
      Initialize;
      CreateJob(Job);

      // [WHEN] pdate Status field with the value as Order
      ASSERTERROR Job.VALIDATE(Status,Job.Status::Order);

      // [THEN] Verified Status field with the value as Order
      Assert.ExpectedError(STRSUBSTNO(StatusValidateErr,Job.Status::Order,Job."No."));
    END;

    [Test]
    PROCEDURE NewJobWithCompeletedStatusValidation@1500018();
    VAR
      Job@1500001 : Record 167;
    BEGIN
      // [SCENARIO 164067] Tests if the system is allowing the Status as Completed in Job Card if the Job Type is "Capital WIP".
      // [FEATURE] [Jobs]

      // [GIVEN] Job and Customer
      Initialize;
      CreateJob(Job);

      // [WHEN] pdate Status field with the value as Completed
      ASSERTERROR Job.VALIDATE(Status,Job.Status::Completed);

      // [THEN] Verified Status field with the value as Completed
      Assert.ExpectedError(STRSUBSTNO(StatusValidateErr,Job.Status::Completed,Job."No."));
    END;

    [Test]
    PROCEDURE TestJobPostingGroupResourceCard@1500000();
    VAR
      Resource@1500000 : Record 156;
    BEGIN
      // [SCENARIO 164068] Check if the system is allowing selecting the G/L Account
      // of CWIP in Jobs Posting Group, and allowing creating a new Resource in Resource Card.
      // [FEATURE] [Jobs]

      // [GIVEN] Created Initialize
      Initialize;

      // [WHEN] Create Resource
      CreateResource(Resource);

      // [THEN] Verified Resource Created
      Assert.RecordIsNotEmpty(Resource);
    END;

    LOCAL PROCEDURE Initialize@1500039();
    VAR
      LibrarySetupStorage@1500000 : Codeunit 131009;
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryJob.CreateJobPostingGroup(JobPostingGroup);

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateJob@1500014(VAR Job@1500000 : Record 167);
    VAR
      JobsSetup@1500001 : Record 315;
      LibraryUtility@1500003 : Codeunit 131000;
    BEGIN
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Jobs Setup",JobsSetup.FIELDNO("Job Nos."));
      Job.INSERT(TRUE);
      Job.VALIDATE(Description,LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Job.VALIDATE("Job Type",Job."Job Type"::"Capital WIP");
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@1500013(VAR Resource@1500003 : Record 156);
    VAR
      UnitOfMeasure@1500000 : Record 204;
      LibraryInventory@1500001 : Codeunit 132201;
      LibraryResource@1500002 : Codeunit 130511;
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      Resource.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWIPMethod@1500001(VAR JobWIPMethod@1500000 : Record 1006);
    BEGIN
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);
      JobWIPMethod.VALIDATE("Recognized Costs",JobWIPMethod."Recognized Costs"::"Cost of Sales");
      JobWIPMethod.VALIDATE("Recognized Sales",JobWIPMethod."Recognized Sales"::"Sales Value");
      JobWIPMethod.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

