OBJECT Codeunit 136503 RES Time Sheets Creation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TimeSheetApprovalMgt@1041 : Codeunit 951;
      LibraryRandom@1049 : Codeunit 130440;
      LibraryTimeSheet@1001 : Codeunit 131904;
      Assert@1000 : Codeunit 130000;
      Text001@1003 : TextConst 'ENU=Rolling back changes...';
      NonExistentUser@1004 : TextConst 'ENU=NON EXISTENT USER ID';
      ErrorGeneratedIncorrect@1008 : TextConst 'ENU=Incorrect Error Message';
      NewUserID@1007 : TextConst 'ENU=NEWUSERID';
      SameUserIDMessage@1005 : TextConst 'ENU=User ID should be modified';
      ResourceIsNotDeleted@1009 : TextConst 'ENU=Resource is not deleted';
      YouCannotDeleteResource@1010 : TextConst 'ENU=You cannot delete Resource %1 because unprocessed time sheet lines exist for this resource.';
      FirstWeekDayCannotBeChangedErr@1012 : TextConst 'ENU=Time Sheet First Weekday cannot be changed, because there is at least one time sheet.';
      DynamicDayCaptionIsNotCorrect@1013 : TextConst 'ENU=Dynamic Day Caption Is No Correct';
      TypeMustBeEqualToJobError@1014 : TextConst 'ENU="Type must be equal to ''Job''  in Time Sheet Line: Time Sheet No.=%1, Line No.=0."';
      TimesheetDetailValueIncorrect@1015 : TextConst 'ENU=Time Sheet Day Time Allocation incorrect';
      StatusMustBeOpenOrRejected@1038 : TextConst '@@@="Status must be Open or Rejected in Time Sheet Line Time Sheet No.=''xxx'', Line No.=''xxx''.";ENU="Status must be Open or Rejected in line with Time Sheet No.=''%1'', Line No.=''10000''."';
      StatusShouldBeSumbitted@1017 : TextConst 'ENU=Status field value should be Submitted';
      StatusShouldBeOpen@1029 : TextConst 'ENU=Status Should be Open';
      TimesheetLineTypeIsIncorrect@1019 : TextConst 'ENU=Time Sheet Line Type is incorrect';
      TimesheetLineStatusIncorrect@1021 : TextConst 'ENU=Time Sheet Line Status is incorrect';
      ThereIsNothingToSubmit@1020 : TextConst 'ENU="There is nothing to submit for line with Time Sheet No.=%1, Line No.=10000."';
      LibraryResource@1022 : Codeunit 130511;
      IncorrectPostingDate@1023 : TextConst 'ENU=Incorrect Posting Date';
      IncorrectEntryType@1024 : TextConst 'ENU=Incorrect Entry Type';
      IncorrectUserID@1025 : TextConst 'ENU=Incorrect User ID';
      IncorrectCostValue@1027 : TextConst 'ENU=Incorrect Cost Value';
      UserIDisAlreadyDefAsTSOwner@1028 : TextConst 'ENU=%1 is already defined as Time Sheet Owner User ID for Resource No. %2 with type Person.';
      LibraryHumanResource@1032 : Codeunit 131901;
      RecRef@1030 : RecordRef;
      ThereIsNoEmployeeLinkedWithRes@1031 : TextConst 'ENU=There is no employee linked with resource %1.';
      DayTimeAllocation@1002 : ARRAY [7] OF Decimal;
      UseTimeSheetCannotBeChanged@1033 : TextConst 'ENU=Use Time Sheet cannot be changed since unprocessed time sheet lines exist for this resource.';
      TimeSheetsHaveBeenMovedtoArch@1034 : TextConst 'ENU=%1 time sheets have been moved to archive.';
      YouHaveChangedADimension@1035 : TextConst 'ENU=You have changed a dimension';
      DoYouWantToUpdateTheLines@1036 : TextConst 'ENU=Do you want to update the lines?';
      GlobalJobNo@1018 : Code[20];
      GlobalJobTaskNo@1039 : Code[20];
      GlobalTSAllocationValues@1043 : ARRAY [9] OF Decimal;
      GlobalTimeSheetNo@1042 : Code[20];
      GlobalTextVariable@1011 : Code[20];
      TSLineType@1016 : ' ,Resource,Job,Service,Absence,Assembly Order';
      TimeSheetDoesNotExist@1040 : TextConst 'ENU=Time Sheet does not exist';
      IncorrectTimeSheetNoOpened@1044 : TextConst 'ENU=Incorrect Time Sheet No. opened';
      IncorrectTSArchiveNoOpened@1045 : TextConst 'ENU=Incorrect Manager Time Sheet Archive No. opened';
      IncorrectPostingEntryOpened@1046 : TextConst 'ENU=Incorrect Posting Entry No. page opened';
      IncorrectPostingEntryQuantity@1047 : TextConst 'ENU=Incorrect Posting Entry Quantity';
      IncorrectAllocationQuantity@1048 : TextConst 'ENU=Incorrect Allocation Quantity';
      IsInitialized@1006 : Boolean;
      LineCountErr@1026 : TextConst 'ENU=Number of %1 entries is wrong';

    LOCAL PROCEDURE Initialize@27();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE SetUp@2();
    VAR
      ResourcesSetup@1000 : Record 314;
      Resource@1001 : Record 156;
      UserSetup@1002 : Record 91;
    BEGIN
      LibraryTimeSheet.Initialize;
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      ResourcesSetup.GET;
      // clear "Time Sheet Owner User ID"
      Resource.MODIFYALL("Time Sheet Owner User ID",'');
    END;

    LOCAL PROCEDURE TearDown@3();
    BEGIN
      ASSERTERROR ERROR(Text001);
    END;

    [Test]
    PROCEDURE LinkResourceToNonExistUser@9();
    VAR
      Resource@1001 : Record 156;
    BEGIN
      // Test case checks that Resource cannot be linked with non-existent USER ID
      Initialize;
      SetUp;
      // 1. Create User ID, Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 2. Fill 'User ID' field with non-existent User ID
      ASSERTERROR Resource.VALIDATE("Time Sheet Owner User ID",NonExistentUser);
      // 3. Verify: Verify User does not exist error message.
      Assert.AssertPrimRecordNotFound;

      TearDown;
    END;

    [Test]
    PROCEDURE LinkResourceToNonExistManager@10();
    VAR
      Resource@1001 : Record 156;
    BEGIN
      // Test case checks that Resource cannot be linked with non-existent Time Sheet Owner USER ID
      Initialize;
      SetUp;
      // 1. Create User ID, Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 2. Fill 'Manager User ID' field with non-existent User ID
      ASSERTERROR Resource.VALIDATE("Time Sheet Approver User ID",NonExistentUser);
      // 3. Verify: Verify User does not exist error message.
      Assert.AssertPrimRecordNotFound;

      TearDown;
    END;

    [Test]
    PROCEDURE ChangeResourceUserIDNoTS@39();
    VAR
      UserSetup@1000 : Record 91;
      Resource@1004 : Record 156;
    BEGIN
      // Test case checks that Resource field Time Sheet Owner User ID can be changed
      Initialize;
      SetUp;
      // 1. Create User ID, Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 2. Add new User ID
      IF NOT UserSetup.GET(NewUserID) THEN BEGIN
        UserSetup."User ID" := NewUserID;
        UserSetup.INSERT;
      END;
      // 3. Modify Time Sheet Owner User ID field
      Resource.VALIDATE("Time Sheet Owner User ID",NewUserID);
      // 4. Check that Time Sheet Owner User ID was modified
      Assert.IsTrue(Resource."Time Sheet Owner User ID" = NewUserID,SameUserIDMessage);
      TearDown;
    END;

    [Test]
    PROCEDURE DeleteResourceLinkedWithUserID@12();
    VAR
      UserSetup@1000 : Record 91;
      Resource@1004 : Record 156;
      ResourceNo@1001 : Text[30];
    BEGIN
      // Test case checks that Resource cannot be linked with non-existent USER ID
      Initialize;
      SetUp;
      // 1. Create User Setup (User ID)
      LibraryTimeSheet.CreateUserSetup(UserSetup,FALSE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 3. Setup Time Sheet functionality for Resource
      SetupTSResourceUserID(Resource,UserSetup);
      // 4. Delete Resource
      ResourceNo := Resource."No.";
      Resource.DELETE;

      Resource.RESET;
      Resource.SETRANGE("No.",ResourceNo);
      // 5. Check that Resource was deleted
      Assert.IsFalse(Resource.FINDFIRST,ResourceIsNotDeleted);

      TearDown;
    END;

    [Test]
    PROCEDURE DeleteResourceWithUseTimesheet@14();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1011 : Record 950;
      TimeSheetLine@1001 : Record 951;
    BEGIN
      // Test case check that Resource with non-posted Timesheets cannot be deleted
      Initialize;
      SetUp;
      // 1. Create User Setup, Resource, Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 2. Try to Delete Resource
      ASSERTERROR Resource.DELETE(TRUE);
      // 3. Verify: Verify User cannot be deleted error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(YouCannotDeleteResource,Resource."No.")) > 0,ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetFuncRemoveWithUseTS@24();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1011 : Record 950;
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // Test case check that "Use Time Sheet" option cannot be unchecked when not posted Time Sheet exists
      Initialize;
      SetUp;
      // 1. Create User Setup, Resource, Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 2. Try to set Use Time Sheet = False (Turn off Time Sheet functionality for Resource)
      ASSERTERROR Resource.VALIDATE("Use Time Sheet",FALSE);
      // 3. Verify: Verify Field cannot be changed error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,UseTimeSheetCannotBeChanged) > 0,ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetUserIDtoManyResources@47();
    VAR
      UserSetup1@1005 : Record 91;
      Resource1@1004 : Record 156;
      Resource2@1006 : Record 156;
    BEGIN
      // Test case check that possibility to set the same Time Sheet Owner User ID for >1 Resources (Person)
      // is impossible
      Initialize;
      SetUp;
      // 1. Create user setup (User ID)
      LibraryTimeSheet.CreateUserSetup(UserSetup1,FALSE);
      // 2. Create Resource 1
      LibraryTimeSheet.CreateTimeSheetResource(Resource1);
      // 3. Setup Time Sheet functionality for Resource
      SetupTSResourceUserID(Resource1,UserSetup1);
      // 4. Create Resource 2
      LibraryTimeSheet.CreateTimeSheetResource(Resource2);
      // 5. Try to setup Time Sheet (Same Time Sheet Owner User ID)
      ASSERTERROR SetupTSResourceUserID(Resource2,UserSetup1);
      // 6. Verify error
      Assert.AreEqual(STRSUBSTNO(UserIDisAlreadyDefAsTSOwner,UserSetup1."User ID",Resource1."No."),GETLASTERRORTEXT,
        ErrorGeneratedIncorrect);
      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetForMultipleResource@11();
    VAR
      UserSetup1@1005 : Record 91;
      UserSetup2@1008 : Record 91;
      Resource1@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      Resource2@1006 : Record 156;
      ResourcesSetup@1000 : Record 314;
      CreateTimeSheets@1009 : Report 950;
    BEGIN
      // Test case check creation of Time Sheets for multiple Resources
      Initialize;
      SetUp;
      // 1. Create user setup (User ID1, User ID2)
      LibraryTimeSheet.CreateUserSetup(UserSetup1,FALSE);
      LibraryTimeSheet.CreateUserSetup(UserSetup2,FALSE);
      // 2. Create Resource 1 and setup Time Sheet functionality
      LibraryTimeSheet.CreateTimeSheetResource(Resource1);
      SetupTSResourceUserID(Resource1,UserSetup1);
      // 3. Create Resource 2 and setup Time Sheet functionality
      LibraryTimeSheet.CreateTimeSheetResource(Resource2);
      SetupTSResourceUserID(Resource2,UserSetup2);

      // 4. find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // 5. find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);

      // 6. Create 1 Time Sheet
      CreateTimeSheets.InitParameters(Date."Period Start",1,STRSUBSTNO('%1|%2',Resource1."No.",Resource2."No."),FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;

      // 7. Verify that time sheet is created for both Resources
      TimeSheetHeader.SETRANGE("Resource No.",Resource1."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,TimeSheetDoesNotExist);
      TimeSheetHeader.SETRANGE("Resource No.",Resource2."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,TimeSheetDoesNotExist);

      TearDown;
    END;

    [Test]
    PROCEDURE TimeSheetResourceNoUseTS@23();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
      CreateTimeSheets@1006 : Report 950;
    BEGIN
      // Test case checks that Time Sheets are not created for Resource with Use Time Sheet = false
      Initialize;
      SetUp;
      // 1. Create user setup (User ID1)
      LibraryTimeSheet.CreateUserSetup(UserSetup,FALSE);

      // 2. Create Resource and setup Time Sheet functionality
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. Set Use Time Sheet = false for Resource
      Resource.VALIDATE("Use Time Sheet",FALSE);
      Resource.MODIFY;

      // 4. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // 5. Find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);

      // 6. Create Time sheet
      CreateTimeSheets.InitParameters(Date."Period Start",1,Resource."No.",FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;
      // 7. Verify that time sheet is not created as Use Time Sheet = false for Resource
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      Assert.IsFalse(TimeSheetHeader.FINDFIRST,'Time sheet is created, but should not.');

      TearDown;
    END;

    [Test]
    PROCEDURE SamePeriodTimesheet@63();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
    BEGIN
      // Test case checks that Time Sheets cannot be created twice for the same period
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create 1 extra time sheet for the same period
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 3. Verify that extra time sheet was not created
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      Assert.IsTrue(TimeSheetHeader.COUNT = 1,'Time Sheet is not created');

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetRandomFirstWeekDay@78();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
    BEGIN
      // Test case checks that if Time Sheet First Weekday = Any Day of week, created time sheets begin from the same day
      Initialize;
      SetUp;
      // 1. Create User Setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,FALSE);
      // 2. Create new Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 3. Setup Time Sheet functionality for Resource
      SetupTSResourceUserID(Resource,UserSetup);
      // 4. Set Time Sheet First Weekday = random day of week in Resources Setup
      ResourcesSetup.FINDFIRST;
      ResourcesSetup."Time Sheet First Weekday" := RANDOM(6);
      ResourcesSetup.MODIFY;
      // 5. find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 6. find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 7. Create 1 Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 8. Verify time sheet was created and Start Date = First Weekday
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,TimeSheetDoesNotExist);
      Assert.IsTrue(
        DATE2DWY(TimeSheetHeader."Starting Date",1) = ResourcesSetup."Time Sheet First Weekday" + 1,
        'Time Sheet first weekday differs from Resources Setup');

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetChangeFWeekDayError@94();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
      TempInt1@1006 : Integer;
      TempInt2@1007 : Integer;
    BEGIN
      // Test case checks error appears when trying to change Time Sheet First Weekday with already created Time Sheets
      Initialize;
      SetUp;
      // 1. Create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,FALSE);
      // 2. Create new Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      // 3. Setup Time Sheet functionality for Resource
      SetupTSResourceUserID(Resource,UserSetup);
      TempInt1 := RANDOM(6);
      // 4. Set Time Sheet First Weekday = any day of week in Resources Setup
      ResourcesSetup.FINDFIRST;
      ResourcesSetup."Time Sheet First Weekday" := TempInt1;
      ResourcesSetup.MODIFY;
      // 5. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 6. Find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 7. Create 1 Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 8. Verify time sheet was created
      ValidateTimeSheetCreated(TimeSheetHeader,Resource);
      // 9. Select another random day of week that differs from defined in setup
      REPEAT
        TempInt2 := RANDOM(6);
      UNTIL TempInt2 <> TempInt1;
      // 10. Try to change Time Sheet First Weekday
      ASSERTERROR ResourcesSetup.VALIDATE("Time Sheet First Weekday",TempInt2);
      // 11. check that correct error message appears
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,FirstWeekDayCannotBeChangedErr) > 0,ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetLineJobDetailHandler)]
    PROCEDURE TimesheetJobTaskLine@19();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1008 : Record 167;
      JobTask@1011 : Record 1001;
      LibraryJob@1007 : Codeunit 131920;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that Time Sheet fields Job No./Job Task No. can be filled in lines
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Job
      LibraryJob.CreateJob(Job);
      // 3. Set Person Responsible = created Resource
      Job.VALIDATE("Person Responsible",Resource."No.");
      Job.MODIFY;
      // 4. Create Job Task
      LibraryJob.CreateJobTask(Job,JobTask);
      // 5. Add Job Task Custom Description
      JobTask.VALIDATE(Description,'Job Task Description Test');
      JobTask.MODIFY;
      // 6. Open Time Sheet and create Job type line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TimeSheet.Type.VALUE := GetTSLineTypeOption(TSLineType::Job);

      GlobalJobNo := Job."No.";
      GlobalJobTaskNo := JobTask."Job Task No.";
      TimeSheet.Description.ASSISTEDIT;

      // 7. Validate Description, Job No., Job Task No. fields
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDLAST;
      TimeSheetLine.TESTFIELD("Job No.",Job."No.");
      TimeSheetLine.TESTFIELD("Job Task No.",JobTask."Job Task No.");
      TimeSheetLine.TESTFIELD(Description,JobTask.Description);

      TimeSheet.OK.INVOKE;
      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetCheckLeapYear@38();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
      TimeSheet@1006 : TestPage 950;
      YearMod@1007 : Decimal;
      TempDate@1008 : Date;
      TempText@1003 : Text[30];
    BEGIN
      // Test case checks that Days represented in one Timesheet for Leap Year are correct
      Initialize;
      SetUp;
      // 1. Create User Setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. Find next leap year
      ResourcesSetup.INIT;
      TempDate := WORKDATE;
      REPEAT
        TempDate := CALCDATE('<+1Y>',TempDate);
        YearMod := DATE2DMY(TempDate,3) MOD 4;
      UNTIL YearMod = 0;
      TempDate := DMY2DATE(29,2,DATE2DMY(TempDate,3));
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      TempDate := CALCDATE('<-6D>',TempDate);
      Date.SETFILTER("Period Start",'%1..',TempDate);
      Date.SETRANGE("Period No.",ResourcesSetup."Time Sheet First Weekday" + 1);
      Date.FINDFIRST;
      // 4. Create 1 new Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 5. Open Time Sheet and create line of Resource Type
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      // 6. Verify Time Sheet table captions are correct
      TempDate := Date."Period Start";
      TempText := COPYSTR(TimeSheet.Field1.CAPTION,1,STRLEN(TimeSheet.Field1.CAPTION) - 4);
      Assert.AreEqual(FORMAT(DATE2DMY(TempDate,1)),TempText,DynamicDayCaptionIsNotCorrect);
      TempDate := CALCDATE('<+1D>',TempDate);
      TempText := COPYSTR(TimeSheet.Field2.CAPTION,1,STRLEN(TimeSheet.Field2.CAPTION) - 4);
      Assert.AreEqual(FORMAT(DATE2DMY(TempDate,1)),TempText,DynamicDayCaptionIsNotCorrect);
      TempDate := CALCDATE('<+1D>',TempDate);
      TempText := COPYSTR(TimeSheet.Field3.CAPTION,1,STRLEN(TimeSheet.Field3.CAPTION) - 4);
      Assert.AreEqual(FORMAT(DATE2DMY(TempDate,1)),TempText,DynamicDayCaptionIsNotCorrect);
      TempDate := CALCDATE('<+1D>',TempDate);
      TempText := COPYSTR(TimeSheet.Field4.CAPTION,1,STRLEN(TimeSheet.Field4.CAPTION) - 4);
      Assert.AreEqual(FORMAT(DATE2DMY(TempDate,1)),TempText,DynamicDayCaptionIsNotCorrect);
      TempDate := CALCDATE('<+1D>',TempDate);
      TempText := COPYSTR(TimeSheet.Field5.CAPTION,1,STRLEN(TimeSheet.Field5.CAPTION) - 4);
      Assert.AreEqual(FORMAT(DATE2DMY(TempDate,1)),TempText,DynamicDayCaptionIsNotCorrect);
      TempDate := CALCDATE('<+1D>',TempDate);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetResourceLine@33();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1000 : TestPage 950;
    BEGIN
      // Verify that Time Sheet Line with Type = Resource can be created
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and create Resource Type line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      // 3. Validate Description, Type fields
      TimeSheet.Type.ASSERTEQUALS(GetTSLineTypeOption(TSLineType::Resource));
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetJobTaskforResource@37();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1012 : Record 167;
      JobTask@1010 : Record 1001;
      LibraryJob@1007 : Codeunit 131920;
    BEGIN
      // Verify that Time Sheet fields Job No./Job Task No. cannot be filled for line of Resource type
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Job
      LibraryJob.CreateJob(Job);
      // 3. Set Person Responsible = created Resource
      Job.VALIDATE("Person Responsible",Resource."No.");
      Job.MODIFY;
      // 4. Create Job Task
      LibraryJob.CreateJobTask(Job,JobTask);
      // 5. Set custom Job Task Description
      JobTask.VALIDATE(Description,'Job Task Description Test');
      JobTask.MODIFY;
      // 6. Open Time Sheet and add line with type Resource but fill Job No.
      TimeSheetLine.INIT;
      TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
      ASSERTERROR TimeSheetLine.VALIDATE("Job No.",Job."No.");
      // 7. Validate correct error message appeared
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(TypeMustBeEqualToJobError,TimeSheetHeader."No.")) > 0,
        ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetLineEveryDayModify@50();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1003 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
      TimeSheet2@1007 : TestPage 950;
      TimeSheet3@1010 : TestPage 950;
    BEGIN
      // Test case to check that values for Time distribution can be modified
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and add Time Sheet line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Reopen Time Sheet, check time allocation and modify time allocation
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet2);
      ValidateTimeAllocation(DayTimeAllocation,TimeSheet2);
      // to check trigger for zero value;
      DayTimeAllocation[3] := 0;
      GenerateTimeAllocation(DayTimeAllocation,TimeSheet2);
      TimeSheet2.Field3.VALUE := FORMAT(DayTimeAllocation[3]);
      TimeSheet2.OK.INVOKE;
      // 4. Reopen Time Sheet, validate changed values
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet3);
      ValidateTimeAllocation(DayTimeAllocation,TimeSheet3);
      TimeSheet3.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetSwitchBetween@75();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheet@1006 : TestPage 950;
      DayTimeAllocation1@1010 : ARRAY [5] OF Decimal;
      DayTimeAllocation2@1009 : ARRAY [5] OF Decimal;
    BEGIN
      // Test case to check that user can switch between Time Sheets directly from Time Sheet page
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      // 2. Create Time Sheets lines
      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 3. Add Time Sheet line
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      GenerateTimeAllocation(DayTimeAllocation1,TimeSheet);
      // 4. Press Next Period
      TimeSheet.NextPeriod.INVOKE;
      // 5. Validate correct Time Sheet opened
      TimeSheetHeader.FINDLAST;
      Assert.AreEqual(TimeSheet.CurrTimeSheetNo.VALUE,TimeSheetHeader."No.",'Time Sheet No. is not correct');
      // 6. Add Time Sheet Line
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      GenerateTimeAllocation(DayTimeAllocation2,TimeSheet);
      // 7. Press Previous Period
      TimeSheet.PreviousPeriod.INVOKE;
      // 8. Verify values on different Time Sheet pages
      TimeSheetHeader.FINDFIRST;
      Assert.AreEqual(TimeSheet.CurrTimeSheetNo.VALUE,TimeSheetHeader."No.",'Time Sheet No. is not correct');
      // 9. Validate time allocation values are correct
      ValidateTimeAllocation(DayTimeAllocation1,TimeSheet);
      // 10. Press Next Period
      TimeSheet.NextPeriod.INVOKE;
      TimeSheetHeader.FINDLAST;
      Assert.AreEqual(TimeSheet.CurrTimeSheetNo.VALUE,TimeSheetHeader."No.",'Time Sheet No. is not correct');
      // 11. Validate time allocation values are correct
      ValidateTimeAllocation(DayTimeAllocation2,TimeSheet);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetModifySubmittedLine@105();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that user cannot modify sumbitted Time Sheet lines
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and fill Time allocation
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit Time Sheet
      TimeSheet.Submit.INVOKE;
      // 4. Verify Time Sheet line values cannot be changed
      ASSERTERROR TimeSheet.Field1.VALUE := FORMAT(GetRandomDecimal);
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(StatusMustBeOpenOrRejected,TimeSheet.CurrTimeSheetNo.VALUE)) > 0,
        ErrorGeneratedIncorrect);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetModifyApprovedLine@18();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet1@1008 : TestPage 950;
      TimeSheetNo@1000 : Code[20];
    BEGIN
      // Verify that Time Sheet line cannot be edited in Approved state
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and fill Time allocation
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit Time Sheet
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;
      // 4. Open Manager Time Sheet and Validate correct Time Sheet opened
      ApproveTimeSheet(TimeSheetNo,1);
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      // 6. Validate Manager Time Sheet line Status has been changed to 'Approved'
      Assert.AreEqual(GetTSLineStatusOption(3),ManagerTimeSheet.Status.VALUE,TimesheetLineStatusIncorrect);
      ManagerTimeSheet.OK.INVOKE;
      // 7. Open created Time Sheet
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet1);
      // 8. Try to modify Time allocation for first day of week
      ASSERTERROR TimeSheet1.Field1.VALUE := FORMAT(GetRandomDecimal);
      // 9. Expecting there was 'Status must not be Approved in Time Sheet Line ...' error message
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(StatusMustBeOpenOrRejected,TimeSheet1.CurrTimeSheetNo.VALUE)) > 0,
        ErrorGeneratedIncorrect);
      TimeSheet1.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetSubmitLine@117();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that after Time Sheet line was submitted - status has changed
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and add line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit Time Sheet
      TimeSheet.Submit.INVOKE;
      // 4. Validate Status = Submitted
      Assert.AreEqual(GetTSLineStatusOption(1),TimeSheet.Status.VALUE,StatusShouldBeSumbitted);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetSubmitEmptyLine@41();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that line with non-distributed time cannot be submitted
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Ppen Time Sheet and add line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      // 3. Submit Time Sheet
      ASSERTERROR TimeSheet.Submit.INVOKE;
      // 4. Verify error message 'There is nothing to submit...'
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ThereIsNothingToSubmit,TimeSheet.CurrTimeSheetNo.VALUE)) > 0,
        ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetSubmitReopenLine@45();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that after Time Sheet line was submitted, user can Reopen it
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and create line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit Time Sheet
      TimeSheet.Submit.INVOKE;
      // 4. Reopen Time Sheet
      TimeSheet.Reopen.INVOKE;
      // 5. Validate Status = Open value
      Assert.AreEqual(GetTSLineStatusOption(0),TimeSheet.Status.VALUE,StatusShouldBeOpen);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetLineResDetailHndl,StrMenuHandler)]
    PROCEDURE TimesheetManagerValidateFields@1();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
      ManagerTimeSheet@1007 : TestPage 952;
      TempDate@1008 : Date;
      TimeSheetNo@1000 : Code[20];
    BEGIN
      // Verify that after Time Sheet line was submitted all the fields values are the same in Manager Time Sheet
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and fill the fields
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      GlobalTextVariable := TimeSheetNo + FORMAT(GetRandomDecimal);
      TimeSheet.Description.ASSISTEDIT;

      TimeSheet.Submit.INVOKE;
      // 4. Open Manager Time Sheet and Validate common fields
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      Assert.AreEqual(TimeSheetHeader."No.",ManagerTimeSheet.CurrTimeSheetNo.VALUE,
        'Time Sheet No. field is incorrect');
      Assert.AreEqual(TimeSheetHeader."Resource No.",ManagerTimeSheet.ResourceNo.VALUE,
        'Time Sheet Resource No. field is incorrect');
      EVALUATE(TempDate,ManagerTimeSheet.StartingDate.VALUE);
      Assert.AreEqual(TimeSheetHeader."Starting Date",TempDate,'Time Sheet Starting Date field is incorrect');
      EVALUATE(TempDate,ManagerTimeSheet.EndingDate.VALUE);
      Assert.AreEqual(TimeSheetHeader."Ending Date",TempDate,'Time Sheet Ending Date field is incorrect');
      Assert.AreEqual(GlobalTextVariable,ManagerTimeSheet.Description.VALUE,
        'Time Sheet line Description is incorrect');
      Assert.AreEqual(TimeSheet.Status.VALUE,ManagerTimeSheet.Status.VALUE,
        TimesheetLineTypeIsIncorrect);
      Assert.AreEqual(TimeSheet.Field1.VALUE,ManagerTimeSheet.Field1.VALUE,
        'Time Sheet line field value is incorrect');
      Assert.AreEqual(TimeSheet.Field2.VALUE,ManagerTimeSheet.Field2.VALUE,
        'Time Sheet line field value is incorrect');
      Assert.AreEqual(TimeSheet.Field3.VALUE,ManagerTimeSheet.Field3.VALUE,
        'Time Sheet line field value is incorrect');
      Assert.AreEqual(TimeSheet.Field4.VALUE,ManagerTimeSheet.Field4.VALUE,
        'Time Sheet line field value is incorrect');
      Assert.AreEqual(TimeSheet.Field5.VALUE,ManagerTimeSheet.Field5.VALUE,
        'Time Sheet line field value is incorrect');

      ManagerTimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetManagerRejectLines@29();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet1@1008 : TestPage 950;
      TimeSheetNo@1000 : Code[20];
    BEGIN
      // Verify that Time Sheet line can be Rejected from Manager Time Sheet
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and create line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;
      // 4. Open Manager Time Sheet and Reject Time Sheet
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      Assert.AreEqual(TimeSheetHeader."No.",ManagerTimeSheet.CurrTimeSheetNo.VALUE,
        'Time Sheet No. is incorrect');
      ManagerTimeSheet.Reject.INVOKE;
      Assert.AreEqual(GetTSLineStatusOption(2),ManagerTimeSheet.Status.VALUE,TimesheetLineStatusIncorrect);
      ManagerTimeSheet.OK.INVOKE;
      // 5. Open Time Sheet
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet1);
      // 6. Validate that Time Sheet line Status has been changed to 'Rejected'
      Assert.AreEqual(GetTSLineStatusOption(2),TimeSheet1.Status.VALUE,TimesheetLineStatusIncorrect);
      TimeSheet1.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetManagerApproveLines@51();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1003 : Record 951;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet1@1008 : TestPage 950;
    BEGIN
      // Verify that Time Sheet line can be Approved from Manager Time Sheet, validate Time Sheet page line status
      Initialize;
      SetUp;
      // 1. Create User Setup, Resource, Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 2. Open Manager Time Sheet
      ApproveTimeSheet(TimeSheetHeader."No.",1);
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      // 3. Validate Manager Time Sheet line Status has been changed to 'Approved'
      Assert.AreEqual(GetTSLineStatusOption(3),ManagerTimeSheet.Status.VALUE,TimesheetLineStatusIncorrect);
      ManagerTimeSheet.OK.INVOKE;
      // 4. Open Time Sheet
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet1);
      // 5.Validate Time Sheet line Status has been changed to 'Approved'
      Assert.AreEqual(GetTSLineStatusOption(3),TimeSheet1.Status.VALUE,TimesheetLineStatusIncorrect);
      TimeSheet1.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetManagerApproveReopen@62();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1003 : Record 951;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet@1008 : TestPage 950;
    BEGIN
      // Verify that Time Sheet line can be Reopened from Manager Time Sheet, validate Time Sheet page line status
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 2. Open Manager Time Sheet
      ApproveTimeSheet(TimeSheetHeader."No.",1);
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      Assert.AreEqual(GetTSLineStatusOption(3),ManagerTimeSheet.Status.VALUE,TimesheetLineTypeIsIncorrect);
      // 3. Reopen
      ManagerTimeSheet.Reopen.INVOKE;
      // 4. Validate that Manager Time Sheet line Status has been changed to 'Submitted'
      Assert.AreEqual(GetTSLineStatusOption(1),ManagerTimeSheet.Status.VALUE,TimesheetLineTypeIsIncorrect);
      ManagerTimeSheet.OK.INVOKE;
      // 5. Open Time Sheet
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 6. Validate that Time Sheet line Status has been changed to 'Submitted'
      Assert.AreEqual(GetTSLineStatusOption(1),TimeSheet.Status.VALUE,TimesheetLineTypeIsIncorrect);
      TimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetManagerSwitchBetween@4();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheet@1006 : TestPage 950;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet1No@1008 : Code[20];
      TimeSheet2No@1009 : Code[20];
      DayTimeAllocation1@1012 : ARRAY [5] OF Decimal;
      DayTimeAllocation2@1011 : ARRAY [5] OF Decimal;
      TimeSheetNo@1010 : Code[20];
    BEGIN
      // Test case to check that user can switch between Time Sheets directly from Manager Time Sheet page
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      TimeSheetHeader.FINDFIRST;
      TimeSheet1No := TimeSheetHeader."No.";
      TimeSheetHeader.FINDLAST;
      TimeSheet2No := TimeSheetHeader."No.";
      // 2. Open Time Sheet 1 and fill line
      TimeSheet.OPENEDIT;
      TimeSheet.CurrTimeSheetNo.VALUE := TimeSheet1No;
      TimeSheet.ResourceNo.ASSERTEQUALS(Resource."No.");
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      GenerateTimeAllocation(DayTimeAllocation1,TimeSheet);
      // 8. Switch to Next Time Sheet and fill lines
      TimeSheet.NextPeriod.INVOKE;
      TimeSheetHeader.FINDLAST;
      Assert.AreEqual(TimeSheet2No,TimeSheet.CurrTimeSheetNo.VALUE,'Time Sheet No. is not correct');
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      GenerateTimeAllocation(DayTimeAllocation2,TimeSheet);
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.OK.INVOKE;
      // 9. Open Manager Time Sheet
      ManagerTimeSheet.OPENEDIT;
      // 10. Switch to Previous Period Time Sheet and Validate values
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      ManagerTimeSheet.PreviousPeriod.INVOKE;
      Assert.AreEqual(TimeSheet1No,ManagerTimeSheet.CurrTimeSheetNo.VALUE,
        'Time Sheet No. is incorrect');
      ValidateManagerTimeAllocation(DayTimeAllocation1,ManagerTimeSheet);
      // 11. Switch to Next Period Time Sheet and Validate values
      ManagerTimeSheet.NextPeriod.INVOKE;
      Assert.AreEqual(TimeSheet2No,ManagerTimeSheet.CurrTimeSheetNo.VALUE,
        'Time Sheet No. is incorrect');
      ValidateManagerTimeAllocation(DayTimeAllocation2,ManagerTimeSheet);
      ManagerTimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetManagerDeclineApprove@48();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1003 : Record 951;
      ManagerTimeSheet@1007 : TestPage 952;
      TimeSheet@1008 : TestPage 950;
    BEGIN
      // Verify that Time Sheet line can be Rejected, then Submitted and approved
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 2. Open Manager Time Sheet, Reject
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      ManagerTimeSheet.Reject.INVOKE;
      ManagerTimeSheet.OK.INVOKE;
      // 3. Open Time Sheet and Submit again
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;
      // 4. Open Manager Time Sheet, approve and validate 'Approved' status
      ApproveTimeSheet(TimeSheetHeader."No.",1);
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      Assert.AreEqual(GetTSLineStatusOption(3),ManagerTimeSheet.Status.VALUE,TimesheetLineStatusIncorrect);
      ManagerTimeSheet.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetResourcePosting@5();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1002 : Record 951;
      ResJnlLine@1009 : Record 207;
    BEGIN
      // Verify that Approved Time Sheet line with Type = Resource can be suggested to Resource Journal
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      // 5. Clean Resource Journal and run Suggest Lines from Time Sheet batch Job
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 6. Validate Resource Journal lines and values
      ValidateResourceJournal(TimeSheetHeader."Starting Date",DayTimeAllocation,Resource,5);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetResourceSuggestByDate@35();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1003 : Record 950;
      Date@1004 : Record 2000000007;
      ResJnlLine@1009 : Record 207;
      TimeSheet@1007 : TestPage 950;
      TimeSheetNo@1000 : Code[20];
    BEGIN
      // Verify that Approved Time Sheet line with Type = Resource can be suggested to Resource Journal,
      // filtering by Date
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and create Time Sheet line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Submit
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      // 4. Open Manager Time Sheet and Approve line
      ApproveTimeSheet(TimeSheetNo,1);
      // 5. Clean Resource Journal and run Suggest Lines from Time Sheet batch Job -
      // Ending Date = Time Sheet."Ending Date" - 5 days
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,
        CALCDATE('<-5D>',TimeSheetHeader."Ending Date"));
      // 6. Validate Resource Journal lines and values
      ValidateResourceJournal(TimeSheetHeader."Starting Date",DayTimeAllocation,Resource,2);
      // 7. Validate lines not included in Suggest Lines job filter are not created
      ResJnlLine.RESET;
      ResJnlLine.SETFILTER(Quantity,FORMAT(DayTimeAllocation[3]));
      Assert.IsFalse(ResJnlLine.FINDSET,'This line should not be suggested');
      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetResMultipleSuggest@17();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1003 : Record 950;
      ResJnlLine@1009 : Record 207;
      TimeSheetLine@1010 : Record 951;
      TimeSheet@1007 : TestPage 950;
      DayTimeAllocation1@1014 : ARRAY [11] OF Decimal;
      DayTimeAllocation2@1012 : ARRAY [5] OF Decimal;
      Counter@1008 : Integer;
    BEGIN
      // Verify that Approved Time Sheets with can be suggested to Resource Journal,
      // Multiple Time Sheets
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      // 2. Open Time Sheet and add Time Sheet line with time allocation
      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      GenerateTimeAllocation2(DayTimeAllocation1,TimeSheetHeader,TimeSheetLine);
      // 3. Submit
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TimeSheet.Submit.INVOKE;
      // 4. Switch to Next Time Sheet and add Time Sheet line with time allocation
      TimeSheet.NextPeriod.INVOKE;
      TimeSheetHeader.FINDLAST;
      Assert.AreEqual(TimeSheet.CurrTimeSheetNo.VALUE,TimeSheetHeader."No.",'Time Sheet No. is not correct');
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      GenerateTimeAllocation(DayTimeAllocation2,TimeSheet);
      // 5. Submit
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;
      // 6. Approve both Time Sheets
      ApproveTimeSheet(TimeSheetHeader."No.",1);
      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      ApproveTimeSheet(TimeSheetHeader."No.",1);

      // 7. Delete all exisiting Resource Journal lines
      PrepareResourceJournal(ResJnlLine);
      // 8. Create resource journal lines based on approved time sheet line
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,
        CALCDATE('<+10D>',TimeSheetHeader."Starting Date"));

      FOR Counter := 1 TO 4 DO
        DayTimeAllocation1[Counter + 7] := DayTimeAllocation2[Counter];

      // 9. Validate lines and fields values for both Time Sheets
      ValidateResourceJournal(TimeSheetHeader."Starting Date",DayTimeAllocation1,Resource,11);
      // 10. Validate that line out of period was not created
      ResJnlLine.RESET;
      ResJnlLine.SETFILTER(Quantity,FORMAT(DayTimeAllocation2[5]));
      Assert.IsFalse(ResJnlLine.FINDSET,'This line should not be suggested');

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetResPartApproved@55();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1003 : Record 950;
      ResJnlLine@1009 : Record 207;
      TimeSheet@1007 : TestPage 950;
      TempDate@1015 : Date;
      TempDayAllocation@1008 : ARRAY [2] OF Decimal;
      TimeSheetNo@1005 : Code[20];
    BEGIN
      // Verify that Approved Time Sheets can be suggested to Resource Journal,
      // Partialy approved
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      // 2. Open Time Sheet and add line
      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);

      TempDayAllocation[1] := GetRandomDecimal;
      TimeSheet.Field1.VALUE := FORMAT(TempDayAllocation[1]);
      // 3. Submit
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;

      // 4. Open next period Time Sheet and add line
      TimeSheet.NextPeriod.INVOKE;
      TimeSheetHeader.FINDLAST;
      Assert.AreEqual(TimeSheet.CurrTimeSheetNo.VALUE,TimeSheetHeader."No.",'Time Sheet No. is not correct');
      TimeSheet.NEW;
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      TempDayAllocation[2] := GetRandomDecimal;
      TimeSheet.Field1.VALUE := FORMAT(TempDayAllocation[2]);
      TimeSheet.Submit.INVOKE;

      // 5. Open Manager Time Sheet and Approve line
      ApproveTimeSheet(TimeSheetNo,1);

      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      // 6. Create resource journal lines based on approved time sheet line
      TempDate := TimeSheetHeader."Starting Date";
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,
        CALCDATE('<+10D>',TimeSheetHeader."Starting Date"));
      // 7. Set Filter to show only one line and Validate that
      ResJnlLine.RESET;
      ResJnlLine.SETFILTER(Quantity,FORMAT(TempDayAllocation[1]));
      ResJnlLine.FINDFIRST;
      Assert.AreEqual(TempDate,ResJnlLine."Posting Date",IncorrectPostingDate);
      Assert.AreEqual(Resource."Unit Price" * TempDayAllocation[1],
        ResJnlLine."Total Price",IncorrectCostValue);
      ResJnlLine.RESET;
      ResJnlLine.SETFILTER(Quantity,FORMAT(DayTimeAllocation[3]));
      Assert.IsFalse(ResJnlLine.FINDSET,'This line should not be suggested');
      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetJobPosting@81();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      Job1@1008 : Record 167;
      JobTask1@1011 : Record 1001;
      Job2@1015 : Record 167;
      JobTask2@1014 : Record 1001;
      JobJnlLine@1013 : Record 210;
      TempDec1@1019 : Decimal;
      TempDec2@1020 : Decimal;
    BEGIN
      // Verify that approved Job Time Sheet lines are correctly suggested for Multiple Jobs

      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Job, Job Task, Job Planning Lines
      CreateJobPlanning(Resource,Job1,JobTask1,Date);
      CreateJobPlanning(Resource,Job2,JobTask2,Date);

      // 3. create and approve 2 Job type lines
      TempDec1 := GetRandomDecimal;
      CreateJobTSLineApprove(TimeSheetHeader,Job1."No.",JobTask1."Job Task No.",TimeSheetHeader."Starting Date",TempDec1);

      TempDec2 := GetRandomDecimal;
      CreateJobTSLineApprove(TimeSheetHeader,Job2."No.",JobTask2."Job Task No.",TimeSheetHeader."Starting Date",TempDec2);

      // 5. Open Job Journal and suggest lines from Time Sheet
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,STRSUBSTNO('%1|%2',Job1."No.",Job2."No."),
        STRSUBSTNO('%1|%2',JobTask1."Job Task No.",JobTask2."Job Task No."));
      // 6. Validate Lines for Job 1
      ValidateJobJournal(TimeSheetHeader,JobTask1,TempDec1);
      ValidateJobJournal(TimeSheetHeader,JobTask2,TempDec2);
      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE FactBoxActivityDetails@84();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheet@1006 : TestPage 950;
      TimeSheet1@1000 : TestPage 950;
      ManagerTimeSheet@1007 : TestPage 952;
      PageFieldValue@1010 : Decimal;
      SumFieldValue@1009 : Decimal;
      TempDec@1011 : ARRAY [4] OF Decimal;
      TimeSheetNo@1012 : Code[20];
    BEGIN
      // Verify that Time Sheet page Activity Factbox shows correct values
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,1);
      // 2. Open Time Sheet and add line, which will be submitted
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      TempDec[1] := CreateCustomTimeSheetLine(TimeSheet,TSLineType::Resource,'To submit');
      // 3. Submit
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      // 4. Open Time Sheet and add line, which will be rejected later
      TempDec[2] := CreateCustomTimeSheetLine(TimeSheet,TSLineType::Resource,'To Reject');
      // 5. Submit
      TimeSheet.Submit.INVOKE;
      // 6. Open Time Sheet and add line, which will be approved later
      TempDec[3] := CreateCustomTimeSheetLine(TimeSheet,TSLineType::Resource,'To Approve');
      // 7. Submit
      TimeSheet.Submit.INVOKE;
      // 8. Open Time Sheet and add line, which will stay opened
      TempDec[4] := CreateCustomTimeSheetLine(TimeSheet,TSLineType::Resource,'To be Opened');
      TimeSheet.OK.INVOKE;
      // 9. Open Manager Time Sheet
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      ManagerTimeSheet.FILTER.SETFILTER(Description,'To Reject');
      // 10. Reject line
      ManagerTimeSheet.Reject.INVOKE;
      ManagerTimeSheet.FILTER.SETFILTER(Description,'To Approve');
      // 11. Approve line
      ManagerTimeSheet.Approve.INVOKE;
      ManagerTimeSheet.OK.INVOKE;
      // 12. Open Time Sheet page and validate field values of Fact box
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet1);
      EVALUATE(PageFieldValue,TimeSheet1.TimeSheetStatusFactBox.OpenQty.VALUE);
      SumFieldValue := PageFieldValue;
      Assert.AreEqual(TempDec[4],PageFieldValue,'Open field has wrong value');
      EVALUATE(PageFieldValue,TimeSheet1.TimeSheetStatusFactBox.SubmittedQty.VALUE);
      SumFieldValue := SumFieldValue + PageFieldValue;
      Assert.AreEqual(TempDec[1],PageFieldValue,'Submitted field has wrong value');
      EVALUATE(PageFieldValue,TimeSheet1.TimeSheetStatusFactBox.RejectedQty.VALUE);
      SumFieldValue := SumFieldValue + PageFieldValue;
      Assert.AreEqual(TempDec[2],PageFieldValue,'Rejected field has wrong value');
      EVALUATE(PageFieldValue,TimeSheet1.TimeSheetStatusFactBox.ApprovedQty.VALUE);
      SumFieldValue := SumFieldValue + PageFieldValue;
      Assert.AreEqual(TempDec[3],PageFieldValue,'Approved field has wrong value');
      EVALUATE(PageFieldValue,TimeSheet1.TimeSheetStatusFactBox.TotalQuantity.VALUE);
      Assert.AreEqual(SumFieldValue,PageFieldValue,'Total field has wrong value');
      TimeSheet1.OK.INVOKE;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetAbsenceWOutEmployee@7();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1008 : Record 951;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
      CauseOfAbsence@1007 : Record 5206;
    BEGIN
      // Verify that Time Sheet line with Type Absence cannot be created when no Employee is linked with Resource
      Initialize;
      SetUp;
      // 1. Create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create new Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. Find random Cause of Absence
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      // 4. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 5. Find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 6. Create 1 Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 7. Try to create line with Cause of Absence Code
      ASSERTERROR
        LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Absence,'','','',CauseOfAbsence.Code);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ThereIsNoEmployeeLinkedWithRes,TimeSheetHeader."Resource No.")) > 0,
        ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetLineAbsDetailHndl)]
    PROCEDURE TimesheetAbsenceApprovePost@21();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1015 : Record 951;
      Date@1001 : Record 2000000007;
      ResourcesSetup@1000 : Record 314;
      Employee@1007 : Record 5200;
      CauseOfAbsence@1008 : Record 5206;
      EmployeeAbsence@1012 : Record 5207;
      TimeSheet@1006 : TestPage 950;
      DayTimeAllocation@1013 : ARRAY [7] OF Decimal;
      Counter@1010 : Integer;
      TempDate@1009 : Date;
    BEGIN
      // Verify that Time Sheet line with Type Absence can be posted. Validate fields.
      Initialize;
      SetUp;
      // 1. Create User Setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 4. Create new Employee
      LibraryHumanResource.CreateEmployee(Employee);
      // 5. Find random Cause of Absence
      FindCauseOfAbsence(CauseOfAbsence);
      // 6. Link Resource to Employee
      Employee.VALIDATE("Resource No.",Resource."No.");
      Employee.MODIFY;
      // 7. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 8. Find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 9. Create 1 Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 10. Open Time Sheet and create Absence type line

      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Absence,'','','',CauseOfAbsence.Code);
      GenerateTimeAllocation2(DayTimeAllocation,TimeSheetHeader,TimeSheetLine);
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      GlobalTextVariable := CauseOfAbsence.Code;
      TimeSheet.Description.ASSISTEDIT;

      // 11. Submit and approve
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
      TempDate := CALCDATE('<-1D>',Date."Period Start");
      // 12. Open Employee Absences and validate all lines created
      EmployeeAbsence.RESET;
      EmployeeAbsence.SETRANGE("Employee No.",Employee."No.");
      FOR Counter := 1 TO 7 DO BEGIN
        TempDate := CALCDATE('<+1D>',TempDate);
        EmployeeAbsence.SETFILTER("From Date",FORMAT(TempDate));
        EmployeeAbsence.FINDFIRST;
        Assert.AreEqual(CauseOfAbsence.Code,EmployeeAbsence."Cause of Absence Code",
          'Employee Absences incorrect Cause of Absence Code');
        Assert.AreEqual(CauseOfAbsence.Description,EmployeeAbsence.Description,'Employee Absences incorrect Description');
        Assert.AreEqual(DayTimeAllocation[Counter],EmployeeAbsence.Quantity,'Employee Absences incorrect Quantity');
        Assert.AreEqual(Resource."Base Unit of Measure",EmployeeAbsence."Unit of Measure Code",
          'Employee Absences incorrect Unit of Measure Code');
      END;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetJobPlanningReport@68();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1007 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1008 : Record 167;
      JobTask@1011 : Record 1001;
      ResourcesSetup@1000 : Record 314;
      CreateTimeSheets@1010 : Report 950;
    BEGIN
      // Verify that Time Sheet fields Job No./Job Task No. are suggested by report if option Create lines from Job Planning is On
      Initialize;
      SetUp;
      // 1. Create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 4. find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 5. Create Job, Job Task and Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      // 6. Create time sheet
      CreateTimeSheets.InitParameters(Date."Period Start",1,Resource."No.",TRUE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;
      // 7. Validate Time Sheet was created
      ValidateTimeSheetCreated(TimeSheetHeader,Resource);
      // 8. Validate that lines were successfully suggested by report with correct Job No./Job Task No.
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDLAST;
      TimeSheetLine.TESTFIELD(Type,TimeSheetLine.Type::Job);
      TimeSheetLine.TESTFIELD("Job No.",Job."No.");
      TimeSheetLine.TESTFIELD("Job Task No.",JobTask."Job Task No.");

      TearDown;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TimesheetJobPlanningTSPage@90();
    VAR
      UserSetup@1005 : Record 91;
      Resource@1004 : Record 156;
      AccountingPeriod@1003 : Record 50;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1007 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1008 : Record 167;
      JobTask@1011 : Record 1001;
      ResourcesSetup@1000 : Record 314;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Verify that Time Sheet fields Job No./Job Task No. are suggested by report if option Create lines from Job Planning is On
      Initialize;
      SetUp;
      // 1. Create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 4. find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 5. Create Job, Job Task, Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      // 6. Create 1 Time Sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
      // 7. Open Time Sheet and create Job type line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 8. Run CreateLinesFromJobPlanning action
      TimeSheet.CreateLinesFromJobPlanning.INVOKE;
      // 9. Validate that lines were successfully suggested by report with correct Job No./Job Task No.
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDLAST;
      TimeSheetLine.TESTFIELD(Type,TimeSheetLine.Type::Job);
      TimeSheetLine.TESTFIELD("Job No.",Job."No.");
      TimeSheetLine.TESTFIELD("Job Task No.",JobTask."Job Task No.");

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TSArchiveHandlMSG)]
    PROCEDURE TimesheetMoveToArchive@44();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1005 : Record 951;
      TimeSheetHeaderArchive@1008 : Record 954;
      TimeSheetLineArchive@1010 : Record 955;
      Date@1001 : Record 2000000007;
      Job@1012 : Record 167;
      JobTask@1011 : Record 1001;
      JobJnlLine@1007 : Record 210;
      ResJnlLine@1014 : Record 207;
      MoveTimeSheetsToArchive@1000 : Report 953;
      TimeSheet@1006 : TestPage 950;
      DayTimeAllocation1@1009 : ARRAY [7] OF Decimal;
      DayTimeAllocation2@1016 : ARRAY [7] OF Decimal;
      TimeSheet1No@1017 : Code[20];
      TimeSheetStartingDate@1018 : Date;
      TimeSheetNo@1003 : Code[20];
    BEGIN
      // Test case to check that Time Sheet can be moved to Archive
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Job, Job Task, Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      // 3. Remember values
      TimeSheet1No := TimeSheetHeader."No.";
      TimeSheetStartingDate := TimeSheetHeader."Starting Date";
      // 4. Create Time Sheets lines
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      // 5. Add Time Sheet line with Type = Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      GenerateTimeAllocation2(DayTimeAllocation1,TimeSheetHeader,TimeSheetLine);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // 6. Add Time Sheet line with Type = Job
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",JobTask."Job Task No.",'','');
      GenerateTimeAllocation2(DayTimeAllocation2,TimeSheetHeader,TimeSheetLine);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
      // 8. Suggest Job Journal Lines
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,Job."No.",JobTask."Job Task No.");
      // 9. Post Job Journal Lines
      PostJobJournal(JobJnlLine,TimeSheetHeader);
      // 10. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 11. Post Resource Journal lines
      PostResourceJournal(ResJnlLine,TimeSheetHeader);
      // 12. Move Time Sheets to Archive
      TimeSheetHeader.SETRANGE("No.",TimeSheetNo);
      MoveTimeSheetsToArchive.SETTABLEVIEW(TimeSheetHeader);
      MoveTimeSheetsToArchive.USEREQUESTPAGE(FALSE);
      MoveTimeSheetsToArchive.RUN;
      // 13. Validate Time Sheet Archive fields values
      TimeSheetHeaderArchive.GET(TimeSheet1No);
      TimeSheetHeaderArchive.TESTFIELD("Starting Date",TimeSheetStartingDate);
      TimeSheetHeaderArchive.TESTFIELD("Ending Date",CALCDATE('<+6d>',TimeSheetStartingDate));
      TimeSheetHeaderArchive.TESTFIELD("Resource No.",Resource."No.");

      TimeSheetLineArchive.SETRANGE("Time Sheet No.",TimeSheetHeaderArchive."No.");
      TimeSheetLineArchive.FINDSET;
      TimeSheetLineArchive.TESTFIELD(Type,TimeSheetLineArchive.Type::Resource);
      ValidateArchiveTimeAllocation(DayTimeAllocation1,TimeSheetHeaderArchive,TimeSheetLineArchive);

      TimeSheetLineArchive.NEXT;
      TimeSheetLineArchive.TESTFIELD(Type,TimeSheetLineArchive.Type::Job);
      TimeSheetLineArchive.TESTFIELD("Job No.",Job."No.");
      TimeSheetLineArchive.TESTFIELD("Job Task No.",JobTask."Job Task No.");
      ValidateArchiveTimeAllocation(DayTimeAllocation2,TimeSheetHeaderArchive,TimeSheetLineArchive);

      // 14. Check that Time Sheet moved to Archive no longer exist
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETRANGE("No.",TimeSheet1No);
      Assert.IsFalse(TimeSheetHeader.FINDSET,'Time Sheet Header exist but it should not');

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetModifyAfterPost@129();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResJnlLine@1014 : Record 207;
      TimeSheet@1006 : TestPage 950;
      TimeSheetNo@1000 : Code[20];
    BEGIN
      // Test case to check that Time Sheet cannot be modified after posting lines
      Initialize;
      SetUp;

      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Time Sheets lines
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 3. Add Time Sheet line with Type = Resource
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 4. Submit Time Sheet
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      TimeSheet.CLOSE;
      // 5. Approve Time Sheet
      ApproveTimeSheet(TimeSheetNo,1);
      // 6. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 7. Post Resource Journal lines
      PostResourceJournal(ResJnlLine,TimeSheetHeader);
      // 8. Try to Modify Time Sheet line and Validate Error message
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      ASSERTERROR TimeSheet.Field1.VALUE := FORMAT(GetRandomDecimal);
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(StatusMustBeOpenOrRejected,TimeSheetHeader."No.")) > 0,
        ErrorGeneratedIncorrect);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE TimesheetResourceDimCheck@146();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      ResJnlLine@1014 : Record 207;
      Dimension@1003 : Record 348;
      DimensionValue@1005 : Record 349;
      DefaultDimension@1008 : Record 352;
      LibraryDimension@1000 : Codeunit 131001;
      TimeSheet@1006 : TestPage 950;
      DimensionSetID@1009 : Integer;
      Counter@1010 : Integer;
      TimeSheetNo@1007 : Code[20];
    BEGIN
      // Test case to check that suggested Resource Journal line has Dimension the same as for Resource Card
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Dimension and Dimension Value for Resource
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionResource(DefaultDimension,Resource."No.",Dimension.Code,DimensionValue.Code);
      // 3. Create Time Sheets lines
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 4. Add Time Sheet line with Type = Resource
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 5. Submit Time Sheet
      TimeSheetNo := TimeSheet.CurrTimeSheetNo.VALUE;
      TimeSheet.Submit.INVOKE;
      // 6. Approve Time Sheet
      ApproveTimeSheet(TimeSheetNo,1);
      // 7. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 8. Verify Resource Journal Lines have Dimension Code and Dimension value the same as for Resource
      ResJnlLine.RESET;
      ResJnlLine.SETRANGE("Resource No.",Resource."No.");
      FOR Counter := 1 TO 5 DO BEGIN
        ResJnlLine.NEXT;
        DimensionSetID := ResJnlLine."Dimension Set ID";
        VerifyDimInJournalDimSet(Dimension.Code,DimensionValue.Code,DimensionSetID);
      END;
      TearDown;
    END;

    [Test]
    [HandlerFunctions(JobDimHandlMSG)]
    PROCEDURE TimesheetJobDimensionCheck@167();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1014 : Record 951;
      Date@1001 : Record 2000000007;
      Dimension@1003 : Record 348;
      DimensionValue@1005 : Record 349;
      DefaultDimension@1008 : Record 352;
      Job@1011 : Record 167;
      JobTask@1012 : Record 1001;
      JobJnlLine@1013 : Record 210;
      LibraryDimension@1000 : Codeunit 131001;
      TimeSheet@1006 : TestPage 950;
      DimensionSetID@1009 : Integer;
    BEGIN
      // Test case to check that suggested Job Journal line has Dimension the same as for Job Card
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Dimension and Dimension Value for Resource
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      // 3. Create Job, Job Task, Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Job,Job."No.",
        Dimension.Code,DimensionValue.Code);
      // 4. Create Time Sheets lines
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      // 5. Add Time Sheet line with Type = Job
      AddJobTimeSheetLine(TimeSheetHeader,Job,JobTask);
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDFIRST;
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // 8. Suggest Resource Journal Lines
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,Job."No.",JobTask."Job Task No.");
      // 9. Verify Job Journal Lines have Dimension Code and Dimension value the same as for Job
      JobJnlLine.RESET;
      JobJnlLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      JobJnlLine.FINDFIRST;
      DimensionSetID := JobJnlLine."Dimension Set ID";
      VerifyDimInJournalDimSet(Dimension.Code,DimensionValue.Code,DimensionSetID);
      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetPostedStatus@201();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1005 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1012 : Record 167;
      JobTask@1011 : Record 1001;
      JobJnlLine@1007 : Record 210;
      ResJnlLine@1014 : Record 207;
      DayTimeAllocation1@1009 : ARRAY [7] OF Decimal;
      DayTimeAllocation2@1016 : ARRAY [7] OF Decimal;
    BEGIN
      // Test case to check that Time Sheet line after posting has Posted = True value
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Create Job, Job Task, Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      // 3. Add Time Sheet line with Type = Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      TimeSheetLine.Description := FORMAT(CREATEGUID);
      TimeSheetLine.MODIFY;
      GenerateTimeAllocation2(DayTimeAllocation1,TimeSheetHeader,TimeSheetLine);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // 4. Add Time Sheet line with Type = Job
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",JobTask."Job Task No.",'','');
      GenerateTimeAllocation2(DayTimeAllocation2,TimeSheetHeader,TimeSheetLine);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
      // 5. Suggest Job Journal Lines
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,Job."No.",JobTask."Job Task No.");
      // 6. Post Job Journal Lines
      PostJobJournal(JobJnlLine,TimeSheetHeader);
      // 7. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 8. Post Resource Journal lines
      PostResourceJournal(ResJnlLine,TimeSheetHeader);
      // 9. Validate both Time Sheet lines have Posted = True
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDSET;
      REPEAT
        TimeSheetLine.TESTFIELD(Posted,TRUE);
      UNTIL TimeSheetLine.NEXT = 0;

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetActualScheduledSummary@231();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      Date@1001 : Record 2000000007;
      Job@1012 : Record 167;
      JobTask@1011 : Record 1001;
      TimeSheet@1006 : TestPage 950;
      DayTimeAllocation1@1009 : ARRAY [7] OF Decimal;
      DayTimeAllocation2@1016 : ARRAY [7] OF Decimal;
      DayTimeAllocationSched@1003 : ARRAY [7] OF Decimal;
    BEGIN
      // Test case to check Period Summary Fact box in Time Sheet page
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2.1 Create Job, Job Task, Job Planning lines
      CreateJobPlanning(Resource,Job,JobTask,Date);
      // 2.2 Generate Resource Capacity values for 5 days, beginning from Time Sheet 1st day
      GenerateResourceCapacity(Resource,Date."Period Start",5,DayTimeAllocationSched);
      // 3. Add Time Sheet line with Type = Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      GenerateTimeAllocation2(DayTimeAllocation1,TimeSheetHeader,TimeSheetLine);

      // 4. Add Time Sheet line with Type = Job
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",JobTask."Job Task No.",'','');
      GenerateTimeAllocation2(DayTimeAllocation2,TimeSheetHeader,TimeSheetLine);
      // 5. Validate values on Period Summary FactBox
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      ValidateActualSchedSummaryFactBox(TimeSheet,DayTimeAllocation1,DayTimeAllocation2,DayTimeAllocationSched);
      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetAllocationHandler)]
    PROCEDURE TimesheetTimeAllocationPage@31();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1005 : Record 951;
      Date@1001 : Record 2000000007;
      ResJnlLine@1014 : Record 207;
      TimeSheetPage@1000 : TestPage 950;
      DayTimeAllocation@1009 : ARRAY [7] OF Decimal;
    BEGIN
      // Test case to check that Time Sheet line after posting has Posted = True value
      Initialize;
      SetUp;
      // 1. Create Resource and 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 3. Add Time Sheet line with Type = Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      GenerateTimeAllocation2(DayTimeAllocation,TimeSheetHeader,TimeSheetLine);
      // 4. Submit and Approve
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
      // 7. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 8. Post Resource Journal lines
      PostResourceJournal(ResJnlLine,TimeSheetHeader);
      // 9. Open Time Sheet and Time Sheet Allocation page
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheetPage);
      TimeSheetPage.Action24.INVOKE;
      // 10. Validate values on Time Sheet Allocation page
      ValidateTSAllocationPageValues(DayTimeAllocation);
      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetOpenFromTSList@54();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheet@1006 : TestPage 950;
      TimeSheetList@1007 : TestPage 951;
    BEGIN
      // Test case to check that user can switch between Time Sheets directly from Time Sheet page
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      // 6. Open Time Sheet List page
      TimeSheetList.OPENVIEW;
      // 7. Set filter to only one Time Sheet
      TimeSheetList.FILTER.SETFILTER("No.",TimeSheetHeader."No.");
      TimeSheet.TRAP;
      // 8. Run Edit Time Sheet
      TimeSheetList.EditTimeSheet.INVOKE;
      // 9. Validate Correct Time Sheet was opened
      Assert.AreEqual(TimeSheetHeader."No.",TimeSheet.CurrTimeSheetNo.VALUE,IncorrectTimeSheetNoOpened);

      TearDown;
    END;

    [Test]
    PROCEDURE ManagerTimeSheetOpenFromList@43();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1009 : Record 951;
      TimeSheetApprovalMgt@1000 : Codeunit 951;
      ManagerTimeSheet@1007 : TestPage 952;
      ManagerTimeSheetList@1008 : TestPage 953;
      Counter@1014 : Integer;
    BEGIN
      // Test case to check that user can switch between Time Sheets directly from Manager Time Sheet page
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      // 2. Generate Line for both Time Sheets
      FindFirstTimeSheet(TimeSheetHeader,Resource."No.");
      FOR Counter := 1 TO 2 DO BEGIN
        LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
        GenerateTimeAllocation2(DayTimeAllocation,TimeSheetHeader,TimeSheetLine);
        TimeSheetApprovalMgt.Submit(TimeSheetLine);
        TimeSheetHeader.NEXT;
      END;
      // 3. Open Manager Time Sheet from Manager Time Sheet List
      ManagerTimeSheetList.OPENVIEW;
      ManagerTimeSheetList.FILTER.SETFILTER("No.",TimeSheetHeader."No.");
      ManagerTimeSheet.TRAP;
      ManagerTimeSheetList.Action5.INVOKE;
      // 4. Validate opened Manager Time Sheet list No. is correct
      Assert.AreEqual(TimeSheetHeader."No.",ManagerTimeSheet.CurrTimeSheetNo.VALUE,IncorrectTimeSheetNoOpened);

      TearDown;
    END;

    [Test]
    PROCEDURE TimesheetTimeAllocModify@72();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1003 : Record 2000000007;
      TimeSheet@1006 : TestPage 950;
    BEGIN
      // Test case to check that values for Time distribution can be modified
      Initialize;
      SetUp;
      // 1. Create User setup, Resource, 1 Time Sheet
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      // 2. Open Time Sheet and add Time Sheet line
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,TRUE);
      // 3. Modify Time Sheet Allocation for Random day
      DayTimeAllocation[3] := GetRandomDecimal;
      TimeSheet.Field3.VALUE := FORMAT(DayTimeAllocation[3]);
      TimeSheet.CLOSE;
      // 4. Reopen Time Sheet, validate changed values
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      ValidateTimeAllocation(DayTimeAllocation,TimeSheet);
      TimeSheet.CLOSE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetPostingEntryHandler)]
    PROCEDURE TimesheetPostingEntriesValidate@34();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1005 : Record 951;
      ResJnlLine@1014 : Record 207;
      ManagerTimeSheet@1003 : TestPage 952;
    BEGIN
      // Test case to validate Posting Entries page values
      Initialize;
      SetUp;
      CLEAR(GlobalTimeSheetNo);
      // 1. Create Time Sheet with Resource Type Line
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,TRUE);
      Resource.GET(TimeSheetHeader."Resource No.");
      GlobalTimeSheetNo := TimeSheetHeader."No.";
      // 6. Suggest Resource Journal Lines
      SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
      // 7. Post Resource Journal lines
      PostResourceJournal(ResJnlLine,TimeSheetHeader);
      // 8. Open Posting Entries page from Manager Time Sheet and validate values
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := GlobalTimeSheetNo;
      ManagerTimeSheet.Action24.INVOKE;

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TSArchiveHandlMSG,TimeSheetPostingEntryHandler)]
    PROCEDURE TimesheetManagerArchivePage@40();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1007 : Record 950;
      TimeSheetLine@1005 : Record 951;
      ResJnlLine@1014 : Record 207;
      MoveTimeSheetsToArchive@1000 : Report 953;
      ManagerTimeSheetArchive@1001 : TestPage 961;
      ManagerTSArchiveList@1009 : TestPage 962;
      TimeSheet2No@1003 : Code[20];
      Counter@1008 : Integer;
    BEGIN
      // Test case to check that Manager can overview archived Time Sheets
      Initialize;
      SetUp;
      // 1. Create Resource and 2 Time Sheets, Submit, Approve, Suggest and post Resource Lines
      CreateMultipleTimeSheet(Resource,TimeSheetHeader,2);
      GlobalTimeSheetNo := TimeSheetHeader."No.";
      FOR Counter := 1 TO 2 DO BEGIN
        LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
        GenerateTimeAllocation2(DayTimeAllocation,TimeSheetHeader,TimeSheetLine);
        TimeSheetApprovalMgt.Submit(TimeSheetLine);
        TimeSheetApprovalMgt.Approve(TimeSheetLine);
        ResJnlLine.RESET;
        SuggestResourceJnlLines(ResJnlLine,TimeSheetHeader,TimeSheetHeader."Ending Date");
        PostResourceJournal(ResJnlLine,TimeSheetHeader);
        TimeSheetHeader.NEXT;
      END;
      TimeSheet2No := TimeSheetHeader."No.";
      // 2. Move Time Sheets to Archive
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      MoveTimeSheetsToArchive.SETTABLEVIEW(TimeSheetHeader);
      MoveTimeSheetsToArchive.USEREQUESTPAGE(FALSE);
      MoveTimeSheetsToArchive.RUN;
      // 3. Open Manager Time Sheet Archive List, then open Manager Time Sheet and validate No.
      ManagerTSArchiveList.OPENVIEW;
      ManagerTSArchiveList.FILTER.SETFILTER("No.",GlobalTimeSheetNo);
      ManagerTimeSheetArchive.TRAP;
      ManagerTSArchiveList.Action5.INVOKE;
      Assert.AreEqual(ManagerTimeSheetArchive.CurrTimeSheetNo.VALUE,GlobalTimeSheetNo,IncorrectTSArchiveNoOpened);
      // 4. Validate Previous/Next Period works correctly
      ManagerTimeSheetArchive.CurrTimeSheetNo.VALUE := GlobalTimeSheetNo;
      ManagerTimeSheetArchive.Action35.INVOKE;

      Assert.AreEqual(ManagerTimeSheetArchive.CurrTimeSheetNo.VALUE,TimeSheet2No,IncorrectTSArchiveNoOpened);
      ManagerTimeSheetArchive.Action34.INVOKE;
      Assert.AreEqual(ManagerTimeSheetArchive.CurrTimeSheetNo.VALUE,GlobalTimeSheetNo,IncorrectTSArchiveNoOpened);
      // 5. Open Posting Entries and validate
      ManagerTimeSheetArchive.Action28.INVOKE;
      TearDown;
    END;

    [Test]
    PROCEDURE TimeSheetDetailNotCreatedForZeroDayAmount@49();
    VAR
      Resource@1004 : Record 156;
      TimeSheetHeader@1002 : Record 950;
      Date@1001 : Record 2000000007;
      TimeSheet@1000 : TestPage 950;
      TimeAllocation@1003 : ARRAY [5] OF Decimal;
    BEGIN
      // [SCENARIO 360297] Check Time Sheet Detail Lines are not created for columns(dates) with zero value
      Initialize;
      SetUp;
      // [GIVEN] Time Sheet Document
      GenerateResourceTimeSheet(Resource,Date,TimeSheetHeader);
      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      AddTimeSheetLine(TSLineType::Resource,TimeSheet,FALSE);
      // [WHEN] User set values in columns(dates) of zero/non-zero values on Time Sheet Page
      TimeAllocation[1] := LibraryRandom.RandInt(8);
      TimeAllocation[2] := 0;
      TimeAllocation[3] := LibraryRandom.RandInt(8);
      TimeAllocation[4] := 0;
      TimeAllocation[5] := LibraryRandom.RandInt(8);

      AssignTimeSheetDayValues(TimeSheet,TimeAllocation);
      TimeSheet.OK.INVOKE;
      // [THEN] Time Sheet Detail Lines are not generated for dates with zero values in columns
      VerifyTimeSheetDetailLinesCount(TimeSheetHeader."No.",3);

      TearDown;
    END;

    LOCAL PROCEDURE FindResourceJournalBatch@20(VAR ResJournalBatch@1000 : Record 236);
    VAR
      ResJournalTemplate@1001 : Record 206;
    BEGIN
      ResJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryResource.FindResJournalTemplate(ResJournalTemplate);
      LibraryResource.FindResJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
    END;

    LOCAL PROCEDURE SetupTSResourceUserID@6(VAR Resource@1000 : Record 156;UserSetup@1001 : Record 91);
    BEGIN
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.VALIDATE("Time Sheet Approver User ID",UserSetup."User ID");
      Resource.MODIFY;
    END;

    LOCAL PROCEDURE TimeSheetCreate@53(Date@1000 : Date;NoOfPeriods@1001 : Integer;VAR Resource@1002 : Record 156;VAR TimeSheetHeader@1005 : Record 950);
    VAR
      CreateTimeSheets@1004 : Report 950;
    BEGIN
      // Create time sheet
      CreateTimeSheets.InitParameters(Date,NoOfPeriods,Resource."No.",FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;
      // Validate Time Sheet was created
      ValidateTimeSheetCreated(TimeSheetHeader,Resource);
    END;

    [Normal]
    LOCAL PROCEDURE ValidateTimeSheetCreated@149(VAR TimeSheetHeader@1000 : Record 950;Resource@1001 : Record 156);
    BEGIN
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETFILTER("Resource No.",Resource."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,'Time Sheet is not created');
    END;

    LOCAL PROCEDURE FindFirstDOW@96(AccountingPeriod@1000 : Record 50;VAR Date@1002 : Record 2000000007;VAR ResourcesSetup@1003 : Record 314);
    BEGIN
      // find first DOW after accounting period starting date
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETFILTER("Period Start",'%1..',AccountingPeriod."Starting Date");
      Date.SETRANGE("Period No.",ResourcesSetup."Time Sheet First Weekday" + 1);
      Date.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobJournalBatch@22(VAR JobJournalBatch@1000 : Record 237);
    VAR
      JobJournalTemplate@1001 : Record 209;
    BEGIN
      JobJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryTimeSheet.FindJobJournalTemplate(JobJournalTemplate);
      LibraryTimeSheet.FindJobJournalBatch(JobJournalBatch,JobJournalTemplate.Name);
    END;

    LOCAL PROCEDURE GenerateTimeAllocation@8(VAR DayTimeAllocation@1009 : ARRAY [5] OF Decimal;VAR TimeSheet@1001 : TestPage 950);
    VAR
      Counter@1000 : Integer;
    BEGIN
      FOR Counter := 1 TO 5 DO
        DayTimeAllocation[Counter] := GetRandomDecimal;

      AssignTimeSheetDayValues(TimeSheet,DayTimeAllocation);
    END;

    LOCAL PROCEDURE GenerateTimeAllocation2@102(VAR DayTimeAllocation@1009 : ARRAY [7] OF Decimal;TimeSheetHeader@1003 : Record 950;TimeSheetLine@1001 : Record 951);
    VAR
      Counter@1000 : Integer;
    BEGIN
      FOR Counter := 1 TO 7 DO BEGIN
        DayTimeAllocation[Counter] := GetRandomDecimal;
        LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date" + Counter - 1,DayTimeAllocation[Counter]);
      END;
    END;

    LOCAL PROCEDURE ValidateTimeAllocation@26(DayTimeAllocation@1001 : ARRAY [5] OF Decimal;VAR TimeSheet@1002 : TestPage 950);
    VAR
      PageFieldValue@1000 : Decimal;
    BEGIN
      EVALUATE(PageFieldValue,TimeSheet.Field1.VALUE);
      Assert.AreEqual(DayTimeAllocation[1],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,TimeSheet.Field2.VALUE);
      Assert.AreEqual(DayTimeAllocation[2],PageFieldValue,TimesheetDetailValueIncorrect);
      IF TimeSheet.Field3.VALUE <> '' THEN BEGIN
        EVALUATE(PageFieldValue,TimeSheet.Field3.VALUE);
        Assert.AreEqual(DayTimeAllocation[3],PageFieldValue,TimesheetDetailValueIncorrect);
      END;
      EVALUATE(PageFieldValue,TimeSheet.Field4.VALUE);
      Assert.AreEqual(DayTimeAllocation[4],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,TimeSheet.Field5.VALUE);
      Assert.AreEqual(DayTimeAllocation[5],PageFieldValue,TimesheetDetailValueIncorrect);
    END;

    LOCAL PROCEDURE ValidateManagerTimeAllocation@67(DayTimeAllocation@1001 : ARRAY [5] OF Decimal;VAR ManagerTimeSheet@1002 : TestPage 952);
    VAR
      PageFieldValue@1000 : Decimal;
    BEGIN
      EVALUATE(PageFieldValue,ManagerTimeSheet.Field1.VALUE);
      Assert.AreEqual(DayTimeAllocation[1],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,ManagerTimeSheet.Field2.VALUE);
      Assert.AreEqual(DayTimeAllocation[2],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,ManagerTimeSheet.Field3.VALUE);
      Assert.AreEqual(DayTimeAllocation[3],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,ManagerTimeSheet.Field4.VALUE);
      Assert.AreEqual(DayTimeAllocation[4],PageFieldValue,TimesheetDetailValueIncorrect);
      EVALUATE(PageFieldValue,ManagerTimeSheet.Field5.VALUE);
      Assert.AreEqual(DayTimeAllocation[5],PageFieldValue,TimesheetDetailValueIncorrect);
    END;

    LOCAL PROCEDURE ValidateArchiveTimeAllocation@57(DayTimeAllocation@1001 : ARRAY [5] OF Decimal;TimeSheetHeaderArchive@1004 : Record 954;TimeSheetLineArchive@1002 : Record 955);
    VAR
      TimeSheetDetailArchive@1003 : Record 956;
      i@1005 : Integer;
    BEGIN
      FOR i := 1 TO 5 DO BEGIN
        TimeSheetDetailArchive.GET(
          TimeSheetHeaderArchive."No.",TimeSheetLineArchive."Line No.",TimeSheetHeaderArchive."Starting Date" + i - 1);
        TimeSheetDetailArchive.TESTFIELD(Quantity,DayTimeAllocation[i]);
      END;
    END;

    LOCAL PROCEDURE ValidateCostPrice@25(Resource@1001 : Record 156;DayAllocation@1003 : Decimal;ResJournalLine@1000 : Record 207);
    BEGIN
      Assert.AreEqual(Resource."Direct Unit Cost",ResJournalLine."Direct Unit Cost",
        IncorrectCostValue);
      Assert.AreEqual(Resource."Unit Cost",ResJournalLine."Unit Cost",
        IncorrectCostValue);
      Assert.AreEqual(Resource."Unit Cost" * DayAllocation,
        ResJournalLine."Total Cost",IncorrectCostValue);
      Assert.AreEqual(Resource."Unit Price",
        ResJournalLine."Unit Price",IncorrectCostValue);
      Assert.AreEqual(Resource."Unit Price" * DayAllocation,
        ResJournalLine."Total Price",IncorrectCostValue);
    END;

    LOCAL PROCEDURE GetOptionValue@77(OptionString@1000 : Text[1024];OptionNumber@1001 : Integer) : Text[250];
    VAR
      I@1002 : Integer;
    BEGIN
      FOR I := 1 TO OptionNumber DO
        OptionString := DELSTR(OptionString,1,STRPOS(OptionString,','));

      IF STRPOS(OptionString,',') = 0 THEN
        EXIT(OptionString);

      EXIT(COPYSTR(OptionString,1,STRPOS(OptionString,',') - 1));
    END;

    LOCAL PROCEDURE OptionValueToText@93(InputInteger@1000 : Integer;OptionString@1001 : Text[1024]) OutputText : Text[250];
    BEGIN
      IF (InputInteger >= 0) AND (InputInteger <= GetOptionsQuantity(OptionString)) THEN BEGIN
        OutputText := GetOptionValue(OptionString,InputInteger);
        IF STRPOS(OutputText,'-') <> 0 THEN
          OutputText := COPYSTR(OutputText,1,STRPOS(OutputText,'-') - 1);
      END;
    END;

    LOCAL PROCEDURE GetOptionsQuantity@52(OptionString@1000 : Text[1024]) : Integer;
    VAR
      Counter@1001 : Integer;
      CommaPosition@1002 : Integer;
    BEGIN
      IF STRPOS(OptionString,',') = 0 THEN
        EXIT(0);

      REPEAT
        CommaPosition := STRPOS(OptionString,',');
        OptionString := DELSTR(OptionString,1,CommaPosition);
        Counter := Counter + 1;
      UNTIL CommaPosition = 0;

      EXIT(Counter - 1);
    END;

    LOCAL PROCEDURE GetTSLineTypeOption@124(TimeSheetLineOption@1000 : Integer) OptionText : Text[250];
    VAR
      FieldRef@1001 : FieldRef;
    BEGIN
      RecRef.CLOSE;
      RecRef.OPEN(DATABASE::"Time Sheet Line");
      FieldRef := RecRef.FIELD(5);
      OptionText := OptionValueToText(TimeSheetLineOption,FieldRef.OPTIONCAPTION);
    END;

    LOCAL PROCEDURE GetTSLineStatusOption@13(TimeSheetLineOption@1000 : Integer) OptionText : Text[250];
    VAR
      FieldRef@1001 : FieldRef;
    BEGIN
      RecRef.CLOSE;
      RecRef.OPEN(DATABASE::"Time Sheet Line");
      FieldRef := RecRef.FIELD(20);
      OptionText := OptionValueToText(TimeSheetLineOption,FieldRef.OPTIONCAPTION);
    END;

    LOCAL PROCEDURE FindCauseOfAbsence@30(VAR CauseOfAbsence@1000 : Record 5206);
    VAR
      HumanResourceUnitOfMeasure@1001 : Record 5220;
    BEGIN
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      WITH CauseOfAbsence DO
        IF "Unit of Measure Code" = '' THEN BEGIN
          HumanResourceUnitOfMeasure.FINDFIRST;
          VALIDATE("Unit of Measure Code",HumanResourceUnitOfMeasure.Code);
          MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE TimeSheetPageOpen@15(Resource@1000 : Record 156;TimeSheetHeader@1001 : Record 950;VAR TimeSheet@1002 : TestPage 950);
    BEGIN
      TimeSheet.OPENEDIT;
      TimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      TimeSheet.ResourceNo.ASSERTEQUALS(Resource."No.");
    END;

    LOCAL PROCEDURE GenerateResourceTimeSheet@65(VAR Resource@1000 : Record 156;VAR Date@1001 : Record 2000000007;VAR TimeSheetHeader@1002 : Record 950);
    VAR
      UserSetup@1003 : Record 91;
      AccountingPeriod@1004 : Record 50;
      ResourcesSetup@1005 : Record 314;
    BEGIN
      // create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);

      // find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);

      // create time sheet
      TimeSheetCreate(Date."Period Start",1,Resource,TimeSheetHeader);
    END;

    LOCAL PROCEDURE SuggestResourceJnlLines@95(VAR ResJnlLine@1000 : Record 207;TimeSheetHeader@1001 : Record 950;EndDate@1003 : Date);
    VAR
      SuggestResJnlLines@1002 : Report 951;
    BEGIN
      PrepareResourceJournal(ResJnlLine);
      SuggestResJnlLines.InitParameters(
        ResJnlLine,
        TimeSheetHeader."Resource No.",
        TimeSheetHeader."Starting Date",
        EndDate);
      SuggestResJnlLines.USEREQUESTPAGE(FALSE);
      SuggestResJnlLines.RUN;
    END;

    LOCAL PROCEDURE PrepareResourceJournal@136(VAR ResJnlLine@1001 : Record 207);
    VAR
      ResJnlBatch@1000 : Record 236;
    BEGIN
      // Empty Resource Journal Line table
      FindResourceJournalBatch(ResJnlBatch);
      ResJnlLine.RESET;
      ResJnlLine.DELETEALL;

      ResJnlLine."Journal Template Name" := ResJnlBatch."Journal Template Name";
      ResJnlLine."Journal Batch Name" := ResJnlBatch.Name;
    END;

    LOCAL PROCEDURE ValidateResourceJournal@143(Date@1002 : Date;DayTimeAllocation@1004 : ARRAY [5] OF Decimal;Resource@1008 : Record 156;ExtCount@1009 : Integer);
    VAR
      TimeSheetHeader@1007 : Record 950;
      ResJournalLine@1001 : Record 207;
      TimeSheet@1000 : TestPage 950;
      Counter@1005 : Integer;
      TempDate@1003 : Date;
    BEGIN
      // Set Filter to show only one line and validate fields
      ValidateTimeSheetCreated(TimeSheetHeader,Resource);

      TimeSheetPageOpen(Resource,TimeSheetHeader,TimeSheet);
      TempDate := CALCDATE('<-1D>',Date);
      FOR Counter := 1 TO ExtCount DO BEGIN
        ResJournalLine.RESET;
        ResJournalLine.SETFILTER(Quantity,FORMAT(DayTimeAllocation[Counter]));
        IF ResJournalLine.FINDFIRST THEN BEGIN
          TempDate := CALCDATE('<+1D>',TempDate);
          Assert.AreEqual(TempDate,ResJournalLine."Posting Date",IncorrectPostingDate);
          Assert.AreEqual(ResJournalLine."Entry Type"::Usage,ResJournalLine."Entry Type",IncorrectEntryType);
          Assert.AreEqual(TimeSheetHeader."Resource No.",ResJournalLine."Resource No.",IncorrectUserID);
          ValidateCostPrice(Resource,DayTimeAllocation[Counter],ResJournalLine);
        END
      END;
    END;

    LOCAL PROCEDURE PostResourceJournal@118(ResJnlLine@1000 : Record 207;TimeSheetHeader@1001 : Record 950);
    VAR
      ResJnlPostLine@1002 : Codeunit 212;
    BEGIN
      // find and post created journal lines
      ResJnlLine.RESET;
      ResJnlLine.SETRANGE("Journal Template Name",ResJnlLine."Journal Template Name");
      ResJnlLine.SETRANGE("Journal Batch Name",ResJnlLine."Journal Batch Name");
      ResJnlLine.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      Assert.IsTrue(ResJnlLine.FINDSET,'Resource journal lines have not been found');
      CLEAR(ResJnlPostLine);
      REPEAT
        ResJnlPostLine.RUN(ResJnlLine);
      UNTIL ResJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateJobPlanning@168(Resource@1000 : Record 156;VAR Job@1001 : Record 167;VAR JobTask@1002 : Record 1001;Date@1005 : Record 2000000007);
    VAR
      JobPlanningLine@1004 : Record 1003;
      LibraryJob@1003 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Person Responsible",Resource."No.");
      Job.MODIFY;
      LibraryJob.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE(Description,'Job Task Description Test');
      JobTask.MODIFY;

      JobPlanningLine.INIT;
      JobPlanningLine."Job No." := Job."No.";
      JobPlanningLine."Job Task No." := JobTask."Job Task No.";
      JobPlanningLine."Planning Date" := Date."Period Start";
      JobPlanningLine."No." := Resource."No.";
      JobPlanningLine.Quantity := GetRandomDecimal;
      JobPlanningLine."Unit Cost" := GetRandomDecimal;
      JobPlanningLine.INSERT;
    END;

    LOCAL PROCEDURE SuggestJobJournalLines@46(VAR JobJnlLine@1000 : Record 210;TimeSheetHeader@1001 : Record 950;JobNo@1002 : Text[30];JobTaskNo@1003 : Text[30]);
    VAR
      SuggestJobJnlLines@1004 : Report 952;
    BEGIN
      PrepareJobJournal(JobJnlLine);
      SuggestJobJnlLines.InitParameters(
        JobJnlLine,
        TimeSheetHeader."Resource No.",
        JobNo,
        JobTaskNo,
        TimeSheetHeader."Starting Date",
        TimeSheetHeader."Ending Date");
      SuggestJobJnlLines.USEREQUESTPAGE(FALSE);
      SuggestJobJnlLines.RUN;
    END;

    LOCAL PROCEDURE PrepareJobJournal@184(VAR JobJnlLine@1000 : Record 210);
    VAR
      JobJnlBatch@1001 : Record 237;
    BEGIN
      JobJnlLine.RESET;
      JobJnlLine.DELETEALL;

      FindJobJournalBatch(JobJnlBatch);
      JobJnlLine."Journal Template Name" := JobJnlBatch."Journal Template Name";
      JobJnlLine."Journal Batch Name" := JobJnlBatch.Name;
    END;

    LOCAL PROCEDURE ValidateJobJournal@188(TimeSheetHeader@1002 : Record 950;JobTask@1004 : Record 1001;Qty@1005 : Decimal);
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      JobJournalLine.RESET;
      JobJournalLine.SETFILTER("Time Sheet No.",TimeSheetHeader."No.");
      JobJournalLine.SETRANGE("Job No.",JobTask."Job No.");
      JobJournalLine.SETRANGE(Type,JobJournalLine.Type::Resource);
      JobJournalLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      JobJournalLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      Assert.IsTrue(JobJournalLine.FINDFIRST,STRSUBSTNO('Job journal line %1 is not found',JobJournalLine.GETFILTERS));
      Assert.AreEqual(Qty,JobJournalLine.Quantity,'Incorrect Quantity field value');
    END;

    LOCAL PROCEDURE PostJobJournal@127(JobJnlLine@1000 : Record 210;TimeSheetHeader@1001 : Record 950);
    VAR
      JobJnlPostLine@1002 : Codeunit 1012;
    BEGIN
      // find and post created journal lines
      JobJnlLine.SETRANGE("Journal Template Name",JobJnlLine."Journal Template Name");
      JobJnlLine.SETRANGE("Journal Batch Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.SETRANGE(Type,JobJnlLine.Type::Resource);
      JobJnlLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      Assert.IsTrue(JobJnlLine.FINDSET,'Job journal lines have not been found');
      CLEAR(JobJnlPostLine);
      REPEAT
        JobJnlPostLine.RUN(JobJnlLine);
      UNTIL JobJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddTimeSheetLine@69(LineType@1000 : Integer;VAR TimeSheet@1001 : TestPage 950;GenerateTimeAlloc@1002 : Boolean);
    BEGIN
      TimeSheet.Type.VALUE := GetTSLineTypeOption(LineType);
      TimeSheet.Description.VALUE := 'Time Sheet Line Description';
      IF GenerateTimeAlloc THEN
        GenerateTimeAllocation(DayTimeAllocation,TimeSheet);
    END;

    LOCAL PROCEDURE AddJobTimeSheetLine@138(TimeSheetHeader@1002 : Record 950;Job@1000 : Record 167;JobTask@1001 : Record 1001) : Decimal;
    VAR
      TimeSheetLine@1003 : Record 951;
      TempDec@1004 : Decimal;
    BEGIN
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",JobTask."Job Task No.",'','');
      TempDec := GetRandomDecimal;
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",TempDec);
      EXIT(TempDec);
    END;

    LOCAL PROCEDURE GetRandomDecimal@83() : Decimal;
    BEGIN
      EXIT(RANDOM(9999) / 100);
    END;

    LOCAL PROCEDURE ApproveTimeSheet@60(TimeSheetNo@1001 : Code[20];Count@1004 : Integer);
    VAR
      ManagerTimeSheet@1000 : TestPage 952;
      Counter@1002 : Integer;
      FilterValue@1003 : Text[250];
    BEGIN
      // This function opens Manager Time and approves number of lines defined as parameter.
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetNo;
      FOR Counter := 1 TO Count DO BEGIN
        FilterValue := STRSUBSTNO('%1|%2',GetTSLineStatusOption(1),GetTSLineStatusOption(2));
        ManagerTimeSheet.FILTER.SETFILTER(Status,FilterValue);
        ManagerTimeSheet.Approve.INVOKE;
      END;
    END;

    [MessageHandler]
    PROCEDURE TSArchiveHandlMSG@134(Message@1000 : Text[1024]);
    BEGIN
      IF STRPOS(Message,STRSUBSTNO(TimeSheetsHaveBeenMovedtoArch,1)) < 0 THEN
        Assert.Fail(COPYSTR('Incorrect message: ' + Message,1,MAXSTRLEN(Message)));
    END;

    [ConfirmHandler]
    PROCEDURE JobDimHandlMSG@181(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      CASE TRUE OF
        STRPOS(Message,YouHaveChangedADimension) > 0,
        STRPOS(Message,DoYouWantToUpdateTheLines) > 0:
          Reply := TRUE;
        ELSE
          Assert.Fail(COPYSTR('Incorrect confirm question: ' + Message,1,MAXSTRLEN(Message)));
      END;
    END;

    LOCAL PROCEDURE VerifyDimInJournalDimSet@157(ShortcutDimCode@1000 : Code[20];ShortcutDimValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimCode);
      DimensionSetEntry.FINDFIRST;
      Assert.AreEqual(DimensionSetEntry."Dimension Value Code",ShortcutDimValueCode,
        'Wrong Dimension value on gen. Jnl. line dimension');
    END;

    LOCAL PROCEDURE ValidateActualSchedSummaryFactBox@108(TimeSheet@1000 : TestPage 950;DayTimeAllocation1@1002 : ARRAY [5] OF Decimal;DayTimeAllocation2@1003 : ARRAY [5] OF Decimal;DayTimeAllocationSched@1005 : ARRAY [5] OF Decimal);
    VAR
      TimeSheetMgt@1006 : Codeunit 950;
    BEGIN
      Assert.AreEqual(
        TimeSheetMgt.FormatActualSched(DayTimeAllocation1[1] + DayTimeAllocation2[1],DayTimeAllocationSched[1]),
        FORMAT(TimeSheet.ActualSchedSummaryFactBox.FirstDaySummary),
        'Incorrect Period Summary day value');
      Assert.AreEqual(
        TimeSheetMgt.FormatActualSched(DayTimeAllocation1[2] + DayTimeAllocation2[2],DayTimeAllocationSched[2]),
        FORMAT(TimeSheet.ActualSchedSummaryFactBox.SecondDaySummary),
        'Incorrect Period Summary day value');
      Assert.AreEqual(
        TimeSheetMgt.FormatActualSched(DayTimeAllocation1[3] + DayTimeAllocation2[3],DayTimeAllocationSched[3]),
        FORMAT(TimeSheet.ActualSchedSummaryFactBox.ThirdDaySummary),
        'Incorrect Period Summary day value');
      Assert.AreEqual(
        TimeSheetMgt.FormatActualSched(DayTimeAllocation1[4] + DayTimeAllocation2[4],DayTimeAllocationSched[4]),
        FORMAT(TimeSheet.ActualSchedSummaryFactBox.ForthDaySummary),
        'Incorrect Period Summary day value');
      Assert.AreEqual(
        TimeSheetMgt.FormatActualSched(DayTimeAllocation1[5] + DayTimeAllocation2[5],DayTimeAllocationSched[5]),
        FORMAT(TimeSheet.ActualSchedSummaryFactBox.FifthDaySummary),
        'Incorrect Period Summary day value');
    END;

    LOCAL PROCEDURE CreateCustomTimeSheetLine@16(TimeSheet@1000 : TestPage 950;TypeValue@1001 : Integer;Description@1002 : Text[30]) : Decimal;
    VAR
      TempDec@1003 : Decimal;
    BEGIN
      TimeSheet.FILTER.SETFILTER(Status,GetTSLineStatusOption(0));
      TimeSheet.Type.VALUE := GetTSLineTypeOption(TypeValue);
      TimeSheet.Description.VALUE := Description;
      TempDec := GetRandomDecimal;
      TimeSheet.Field1.VALUE := FORMAT(TempDec);
      EXIT(TempDec);
    END;

    LOCAL PROCEDURE GenerateResourceCapacity@42(Resource@1000 : Record 156;PeriodStart@1001 : Date;DaysToGenerate@1002 : Integer;VAR GenerateAllocation@1003 : ARRAY [14] OF Decimal);
    VAR
      ResCapacityEntry@1004 : Record 160;
      Counter@1005 : Integer;
      NextEntryNo@1006 : Integer;
    BEGIN
      ResCapacityEntry.RESET;
      ResCapacityEntry.FINDLAST;
      NextEntryNo := ResCapacityEntry."Entry No.";
      FOR Counter := 1 TO DaysToGenerate DO BEGIN
        NextEntryNo := NextEntryNo + 1;
        ResCapacityEntry.INIT;
        ResCapacityEntry."Entry No." := NextEntryNo;
        ResCapacityEntry."Resource No." := Resource."No.";
        ResCapacityEntry.Date := PeriodStart;
        ResCapacityEntry.Capacity := RANDOM(800) / 100;
        ResCapacityEntry.INSERT;
        GenerateAllocation[Counter] := ResCapacityEntry.Capacity;
        PeriodStart := CALCDATE('<+1D>',PeriodStart);
      END;
    END;

    LOCAL PROCEDURE FindFirstTimeSheet@116(VAR TimeSheetHeader@1001 : Record 950;ResourceNo@1000 : Code[20]);
    BEGIN
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETRANGE("Resource No.",ResourceNo);
      TimeSheetHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE AssignTimeSheetDayValues@71(VAR TimeSheet@1000 : TestPage 950;TimeAllocation@1001 : ARRAY [5] OF Decimal);
    BEGIN
      TimeSheet.Field1.VALUE := FORMAT(TimeAllocation[1]);
      TimeSheet.Field2.VALUE := FORMAT(TimeAllocation[2]);
      TimeSheet.Field3.VALUE := FORMAT(TimeAllocation[3]);
      TimeSheet.Field4.VALUE := FORMAT(TimeAllocation[4]);
      TimeSheet.Field5.VALUE := FORMAT(TimeAllocation[5]);
    END;

    LOCAL PROCEDURE VerifyTimeSheetDetailLinesCount@103(TimeSheetHeaderNo@1002 : Code[20];NoOfLines@1004 : Integer);
    VAR
      TimeSheetDetail@1000 : Record 952;
    BEGIN
      // Verify No of Time Sheet Detail Lines
      TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetHeaderNo);
      Assert.AreEqual(NoOfLines,TimeSheetDetail.COUNT,STRSUBSTNO(LineCountErr,TimeSheetDetail.TABLECAPTION));
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetLineJobDetailHandler@36(VAR TimeSheetLineJobDetail@1000 : TestPage 966);
    BEGIN
      TimeSheetLineJobDetail."Job No.".VALUE := GlobalJobNo;
      TimeSheetLineJobDetail."Job Task No.".VALUE := GlobalJobTaskNo;
      TimeSheetLineJobDetail.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetAllocationHandler@59(VAR TimeSheetAllocation@1000 : TestPage 970);
    BEGIN
      // Handles Time Sheet Allocation page and fills Global values for verification
      EVALUATE(GlobalTSAllocationValues[1],TimeSheetAllocation.TotalQty.VALUE);
      EVALUATE(GlobalTSAllocationValues[2],TimeSheetAllocation.AllocatedQty.VALUE);
      EVALUATE(GlobalTSAllocationValues[3],TimeSheetAllocation.DateQuantity1.VALUE);
      EVALUATE(GlobalTSAllocationValues[4],TimeSheetAllocation.DateQuantity2.VALUE);
      EVALUATE(GlobalTSAllocationValues[5],TimeSheetAllocation.DateQuantity3.VALUE);
      EVALUATE(GlobalTSAllocationValues[6],TimeSheetAllocation.DateQuantity4.VALUE);
      EVALUATE(GlobalTSAllocationValues[7],TimeSheetAllocation.DateQuantity5.VALUE);
      EVALUATE(GlobalTSAllocationValues[8],TimeSheetAllocation.DateQuantity6.VALUE);
      EVALUATE(GlobalTSAllocationValues[9],TimeSheetAllocation.DateQuantity7.VALUE);
      TimeSheetAllocation.OK.INVOKE;
    END;

    LOCAL PROCEDURE ValidateTSAllocationPageValues@56(DayTimeAllocation@1000 : ARRAY [7] OF Decimal);
    VAR
      Counter@1001 : Integer;
      Sum@1002 : Decimal;
    BEGIN
      CLEAR(Sum);
      FOR Counter := 1 TO 7 DO BEGIN
        Assert.AreEqual(DayTimeAllocation[Counter],GlobalTSAllocationValues[Counter + 2],IncorrectAllocationQuantity);
        Sum := Sum + DayTimeAllocation[Counter];
      END;
      Assert.AreEqual(Sum,GlobalTSAllocationValues[1],IncorrectAllocationQuantity);
      Assert.AreEqual(Sum,GlobalTSAllocationValues[2],IncorrectAllocationQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetPostingEntryHandler@61(VAR TSPostingEntriesPage@1000 : TestPage 958);
    VAR
      TimeSheetPostingEntry@1001 : Record 958;
      Navigate@1002 : TestPage 344;
      TempDecimal@1003 : Decimal;
    BEGIN
      // Handles Time Sheet Allocation page and validates
      TimeSheetPostingEntry.RESET;
      TimeSheetPostingEntry.SETRANGE("Time Sheet No.",GlobalTimeSheetNo);
      TimeSheetPostingEntry.FINDFIRST;
      EVALUATE(TempDecimal,TSPostingEntriesPage.Quantity.VALUE);
      Assert.AreEqual(GlobalTimeSheetNo,FORMAT(TSPostingEntriesPage."Time Sheet No.".VALUE),IncorrectPostingEntryOpened);
      Assert.AreEqual(TimeSheetPostingEntry.Quantity,TempDecimal,IncorrectPostingEntryQuantity);
      // Validate Navigate can be opened from the page
      Navigate.TRAP;
      TSPostingEntriesPage.Action11.INVOKE;
      Navigate.CLOSE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetLineResDetailHndl@101(VAR TimeSheetLineResDetail@1000 : TestPage 965);
    BEGIN
      TimeSheetLineResDetail.Description.VALUE := GlobalTextVariable;
      TimeSheetLineResDetail.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetLineAbsDetailHndl@73(VAR TimeSheetLineAbsDetail@1000 : TestPage 969);
    BEGIN
      TimeSheetLineAbsDetail.Description.VALUE := GlobalTextVariable;
      TimeSheetLineAbsDetail.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateJobTSLineApprove@79(TimeSheetHeader@1000 : Record 950;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];Date@1003 : Date;Qty@1004 : Decimal);
    VAR
      TimeSheetLine@1005 : Record 951;
    BEGIN
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,JobNo,JobTaskNo,'','');
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,Date,Qty);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
    END;

    LOCAL PROCEDURE CreateMultipleTimeSheet@104(VAR Resource@1000 : Record 156;VAR TimeSheetHeader@1005 : Record 950;NoOfTimeSheets@1001 : Integer);
    VAR
      UserSetup@1002 : Record 91;
      AccountingPeriod@1003 : Record 50;
      Date@1004 : Record 2000000007;
      ResourcesSetup@1006 : Record 314;
    BEGIN
      // 1. Create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      // 2. Create Resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      SetupTSResourceUserID(Resource,UserSetup);
      // 3. Find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);
      // 4. Find first DOW after accounting period starting date
      FindFirstDOW(AccountingPeriod,Date,ResourcesSetup);
      // 5. Create 2 Time Sheets
      TimeSheetCreate(Date."Period Start",NoOfTimeSheets,Resource,TimeSheetHeader);
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@32(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@28(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    [HandlerFunctions(NavigateHandler)]
    PROCEDURE NavigateHandler@97(VAR Navigate@1000 : TestPage 344);
    BEGIN
      // Handles Navigate Page
      Navigate.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Time Sheet]
      Tests now can run even if the database is not clear (for example, after other tests).

      Tests edited (added lines to find start point - filter lines):
        TimesheetRandomFirstWeekDay
        TimesheetChangeFWeekDayError
        TimesheetManagerValidateFields
        TimesheetManagerRejectLines
        TimesheetManagerApproveLines
        TimesheetManagerApproveReopen
        TimesheetManagerSwitchBetween
        TimesheetManagerDeclineApprove
        TimesheetResPartApproved
        TimesheetJobPosting
        TimesheetExactJobPosting
        FactBoxActivityDetails
        TimesheetAbsenceApprovePost
        TimesheetMoveToArchive
        TimesheetModifyAfterPost
        TimesheetResourceDimCheck
        TimesheetJobDimensionCheck
        TimesheetPostedStatus
        TimesheetModifyApprovedLine

      Added new function:
        1. ApproveTimeSheet(TimeSheetNo,Count) - this function is used instead of ApproveDefaultTimeSheet
            Parameters:
              TimeSheetNo - Time Sheet ID (No.).
              Count - quantity of lines to approve.
    }
    END.
  }
}

