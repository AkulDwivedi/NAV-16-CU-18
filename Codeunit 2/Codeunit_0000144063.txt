OBJECT Codeunit 144063 e TCS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500015 : Record 98;
      AssesseeCode@1500018 : Record 13727;
      NodNocHeader@1500023 : Record 13786;
      TcsNatureOfCollection@1500022 : Record 16507;
      TCSSetup@1500021 : Record 16508;
      LibraryRandom@1500004 : Codeunit 130440;
      LibraryERM@1500002 : Codeunit 131300;
      LibrarySales@1500001 : Codeunit 130509;
      LibraryTDS@1500006 : Codeunit 143000;
      LibraryUtility@1500007 : Codeunit 131000;
      LibraryInventory@1500000 : Codeunit 132201;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      LibraryWarehouse@1500011 : Codeunit 132204;
      LibrarySetupStorage@1500013 : Codeunit 131009;
      LibraryTCS@1500010 : Codeunit 143008;
      Assert@1500003 : Codeunit 130000;
      CreditAmountErr@1500005 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The Amount in GL Entry is %1 and the actual value is %2.';
      AmountErr@1500008 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      AddReportingCurrencyConfirmMsg@1500012 : TextConst 'ENU=If you change the additional reporting currency, future general ledger entries will be posted in the new reporting currency (and in LCY)';
      isInitialized@1500014 : Boolean;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuHandler)]
    PROCEDURE MultipleChargeItemSalesLineWithoutThreshold@1500000();
    VAR
      SalesHeader@1500005 : Record 36;
      SalesInvHeader@1500000 : Record 112;
      PostedDocNo@1500003 : Code[20];
    BEGIN
      //[SCENARIO 65583] Verify program creates correct G\L Entry after posting the sales invoice with multiple Charge(Item) invoice line when Threshold Overlook is uncheck on  NOD\NOC Line
      //[FEATURE] [TCS] [SALES ORDER]

      //[GIVEN] Created TCS Setup
      Initialize;

      //[WHEN] Post Sales Invoice
      CreateSalesOrderItemChargeAssignment(SalesHeader,TCSSetup,TcsNatureOfCollection.Code,NodNocHeader."No.");
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      //[THEN] GL Entry has been created
      SalesInvHeader.SETRANGE("No.",PostedDocNo);
      SalesInvHeader.FINDFIRST;
      SalesInvHeader.CALCFIELDS("Amount to Customer");
      VerifyGLEntry(PostedDocNo,SalesInvHeader."Amount to Customer");
    END;

    [Test]
    [HandlerFunctions(AdjustAddReportingCurrencyRequestPageHandler)]
    PROCEDURE GeneralJournalWithTCSAndAdditionalCurrency@1500007();
    VAR
      Currency@1500005 : Record 4;
      GenJnlLine@1500007 : Record 81;
      GenJnlTemplate@1500008 : Record 80;
      TCSAmount@1500002 : Decimal;
    BEGIN
      //[SCENARIO 64616] Check if the system is handling Additional Reporting Currency while calculating TCS from General Journal
      //[FEATURE] [TCS] [GENERAL JOURNAL]

      //[GIVEN] Created TCS Setup and Currency
      Initialize;
      TCSAmount := LibraryRandom.RandDec(15000,0);
      LibraryTCS.CreateCurrencyAndExchangeRate(Currency);

      //[WHEN] Update Additional Currency in GL Setup and Post General Journal Line
      LibraryVariableStorage.Enqueue(AddReportingCurrencyConfirmMsg);
      RestoreGeneralLedgerSetup(Currency.Code);
      CreateJournalLineDocuments(GenJnlLine,GenJnlLine."Document Type"::Invoice,GenJnlTemplate."Sub Type"::" ",
        NodNocHeader."No.",TCSAmount,GenJnlLine."Bal. Account Type"::"G/L Account",TcsNatureOfCollection.Code);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      //[GIVEN] GL Entry has been created
      VerifyGLEntryCount(GenJnlLine."Document No.",3);
    END;

    [Test]
    PROCEDURE SalesReturnOrderRcptAndInvoiceWithTCS@1500010();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      DummyTCSEntry@1500005 : Record 16514;
      InvoiceDocNo@1500002 : Code[20];
      SalesReturnDocNo@1500003 : Code[20];
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64679] Check if system is calculating TCS in case of creating Sales Return Order involving receipt and invoicing before depositing tax to Government
      // [FEATURE] [TCS] [SALES RETURN ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,2);

      // [WHEN] Create and Post Sales Order, Apply and Post Sales Return Order
      CreateSalesDocWithTCS(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Amount,10);
      InvoiceDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateSalesDocAndApplyDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Amount,InvoiceDocNo,10);
      SalesReturnDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] No TCS entry is created
      DummyTCSEntry.SETRANGE("Document No.",SalesReturnDocNo);
      Assert.RecordCount(DummyTCSEntry,0);
    END;

    [Test]
    PROCEDURE SalesReturnOrderPartialRcptAndInvoiceWithTCS@1500008();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      DummyTCSEntry@1500005 : Record 16514;
      InvoiceDocNo@1500002 : Code[20];
      SalesReturnDocNo@1500003 : Code[20];
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64680] Check if system is calculating TCS in case of creating Sales Return Order involving partial receipt and invoicing before depositing tax to Government
      // [FEATURE] [TCS] [SALES RETURN ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,2);

      // [WHEN] Create and Post Sales Order, Apply and Post Sales Return Order
      CreateSalesDocWithTCS(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Amount,10);
      InvoiceDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateSalesDocAndApplyDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Amount,InvoiceDocNo,10);
      SalesLine.VALIDATE("Qty. to Invoice",5);
      SalesLine.MODIFY(TRUE);
      SalesReturnDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS entry is created
      DummyTCSEntry.SETRANGE("Document No.",SalesReturnDocNo);
      Assert.RecordCount(DummyTCSEntry,1);
    END;

    [Test]
    PROCEDURE ApplyingMultiplePaymentAndCrMemotoInvoiceWithTCS@1500029();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      GenJnlLine@1500006 : Record 81;
      SalesCrMemoLine@1500009 : Record 115;
      CustLedgEntry@1500007 : Record 21;
      InvoiceDocNo@1500002 : Code[20];
      SalesReturnDocNo@1500003 : Code[20];
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64681] Check if the system is calculating TCS in case of applying multiple payments and credit memo to single invoice
      // [FEATURE] [TCS] [SALES CREDIT MEMO]

      // [GIVEN] Created TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,0);

      // [WHEN] Step 1: Create and Post Sales Invoice
      CreateSalesDocWithTCS(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,Amount,100);
      InvoiceDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // Step 2: Create and Post Sales Credit Memo
      CreateSalesDocWithTCS(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",Amount,50);
      SalesReturnDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      // Step 3: Create and Post Cash Receipt Journal
      SalesCrMemoLine.SETRANGE("Document No.",SalesReturnDocNo);
      SalesCrMemoLine.FINDFIRST;
      CreateAndPostCashReceiptJournal(GenJnlLine,SalesCrMemoLine."Amount To Customer");
      // Step 4: Apply Invoice with both Credit Memo and Payment
      ApplyMultipleCustomerLedgerEntries(InvoiceDocNo,SalesReturnDocNo,GenJnlLine."Document No.");

      // [THEN] Detailed Cust. Ledger Entry Created
      CustLedgEntry.SETRANGE("Document No.",InvoiceDocNo);
      CustLedgEntry.FINDFIRST;
      CustLedgEntry.CALCFIELDS(Amount);
      VerifyDetailedCLE(InvoiceDocNo,CustLedgEntry.Amount,CustLedgEntry."Entry No.");
    END;

    [Test]
    PROCEDURE SalesOrderStatisticsWithTCS@1500009();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      ExpectedSalesLine@1500004 : Record 37;
      SalesOrderStatistics@1500003 : TestPage 402;
      Amount@1500002 : Decimal;
    BEGIN
      // [SCENARIO 64700] Verify that the TCS amount is shown in Statistics while creating Sales Order
      // [FEATURE] [TCS] [SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,0);

      // [WHEN] Create Sales Order
      CreateSalesDocWithTCS(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Amount,1);
      SalesLine.CalculateTCS(SalesHeader);
      CalculateTCSForVerificationSalesLine(ExpectedSalesLine,Amount,TCSSetup);

      // [THEN] TCS Amount verified from Sales Order Statistice Page
      SalesOrderStatistics.OPENVIEW;
      SalesOrderStatistics.GOTORECORD(SalesHeader);
      SalesOrderStatistics.Control1500015.ASSERTEQUALS(ExpectedSalesLine."Total TDS/TCS Incl. SHE CESS");
    END;

    LOCAL PROCEDURE Initialize@123();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      GLSetup.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,CreateCustomerWithTaxDetails,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE AssignAndSuggestItemCharge@1500041(SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      IF SalesLine.FINDSET THEN
        REPEAT
          LibraryVariableStorage.Enqueue(2);
          SalesLine.ShowItemChargeAssgnt;
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyMultipleCustomerLedgerEntries@1500100(InvoicedocNo@1500000 : Code[20];CreditMemoDocNo@1500001 : Code[20];CashRcptDocNo@1500002 : Code[20]);
    VAR
      ApplyingCustLedgerEntry@1500101 : Record 21;
      CustLedgerEntry@1500102 : Record 21;
    BEGIN
      FindCustomerLedgerEntryApplyingDoc(ApplyingCustLedgerEntry,InvoicedocNo);
      ApplyingCustLedgerEntry.CALCFIELDS("Remaining Amount");
      SetApplyCustomerEntry(ApplyingCustLedgerEntry,ApplyingCustLedgerEntry."Remaining Amount");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      FindCustomerLedgerEntryAppliedDoc(CustLedgerEntry,CreditMemoDocNo,CashRcptDocNo);
      WITH CustLedgerEntry DO BEGIN
        CALCFIELDS("Remaining Amount");
        VALIDATE("Amount to Apply","Remaining Amount");
        MODIFY(TRUE);
      END;
      SetAppliestoIdCustomer(CustLedgerEntry);
      CODEUNIT.RUN(CODEUNIT::"CustEntry-Apply Posted Entries",ApplyingCustLedgerEntry);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500748();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithTaxDetails@1500458() : Code[20];
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. No.",'ACFPH4256B');
      Customer.VALIDATE("Tax Liable",TRUE);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CalculateTCSForVerificationSalesLine@1500001(VAR ExpectedSalesLine@1500006 : Record 37;Amt@1500001 : Decimal;TCSSetup@1500000 : Record 16508);
    BEGIN
      WITH ExpectedSalesLine DO BEGIN
        "TDS/TCS Base Amount" := Amt;
        "TDS/TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" * Amt / 100);
        "Surcharge Amount" := LibraryTDS.RoundTCSAmount((TCSSetup."TCS %" * Amt / 100) * (TCSSetup."Surcharge %" / 100));
        "eCess Amount" := LibraryTDS.RoundTCSAmount(("TDS/TCS Amount" + "Surcharge Amount") * TCSSetup."eCESS %" / 100);
        "SHE Cess Amount" := LibraryTDS.RoundTCSAmount(("TDS/TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TDS/TCS Incl. SHE CESS" := LibraryTDS.RoundTCSAmount(
          "TDS/TCS Amount" + "Surcharge Amount" + "eCess Amount" + "SHE Cess Amount");
      END;
    END;

    LOCAL PROCEDURE CreateJournalLineDocuments@1500012(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : Option;SubType@1500004 : Option;CustomerNo@1500002 : Code[20];Amount@1500001 : Decimal;BalAccType@1500006 : Option;CodeContractor@1500000 : Code[10]);
    BEGIN
      CreateGeneralJournalLineWithBatch(
        GenJournalLine,DocumentType,SubType,CustomerNo,Amount,BalAccType,CodeContractor);
    END;

    LOCAL PROCEDURE CreateSalesDocWithTCS@1500003(VAR SalesHdr@1500000 : Record 36;VAR SalesLine@1500002 : Record 37;DocType@1500005 : Option;Amount@1500007 : Decimal;Qty@1500001 : Decimal);
    VAR
      Item@1500003 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHdr,DocType,NodNocHeader."No.");
      SalesHdr.VALIDATE("Posting Date",WORKDATE);
      SalesHdr.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHdr,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),Qty);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocAndApplyDocument@1500016(VAR SalesHeader@1500000 : Record 36;VAR SalesLine@1500007 : Record 37;DocType@1500006 : Option;Amount@1500001 : Decimal;ApplyDocNo@1500002 : Code[20];Qty@1500004 : Decimal);
    BEGIN
      CreateSalesDocWithTCS(
        SalesHeader,SalesLine,DocType,Amount,Qty);
      SalesHeader.VALIDATE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Invoice);
      SalesHeader.VALIDATE("Applies-to Doc. No.",ApplyDocNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBatch@1500005(VAR GenJournalLine@1033 : Record 81;DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';SubType@1500000 : Option;CustomerNo@1034 : Code[20];Amount@1035 : Decimal;BalAccType@1500003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';CodeContractor@1036 : Code[10]);
    VAR
      GenJnlTemplate@1500004 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE("Sub Type",SubType);
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJnlTemplate.Name,GenJournalBatch.Name,DocumentType,GenJournalLine."Account Type"::Customer,CustomerNo,
        Amount);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Customer);
      GenJournalLine.VALIDATE("Party Code",CustomerNo);
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("T.C.A.N. No.",LibraryTCS.CreateTCANNo);
      GenJournalLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleChargeItem@1500004(VAR SalesHeader@1500000 : Record 36;TCSSetup@1500011 : Record 16508;TCSCode@1500008 : Code[20];CustomerNo@1500009 : Code[20]);
    VAR
      StructureHdr@1500016 : Record 13792;
      Location@1500019 : Record 14;
      TaxArea@1500024 : Record 318;
      TaxGroup@1500025 : Record 321;
    BEGIN
      //Create Sales Tax Structure and Setup
      CreateSalesTaxStructure(StructureHdr,Location,TaxArea,TaxGroup,CustomerNo);

      //Create Sales Invoice
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.VALIDATE(Structure,StructureHdr.Code);
      SalesHeader.VALIDATE("Location Code",Location.Code);
      SalesHeader.MODIFY(TRUE);
      CreateSaleLineWithMultipleChargeItem(SalesHeader,TaxGroup,TaxArea,TCSCode);

      //Calculate Structure and TCS
      CalculateStatistics(SalesHeader);
      //Item Charge Assignment Suggestion
      AssignAndSuggestItemCharge(SalesHeader);
      //Verify TCS amount calculated for each Sales Line
      VerifyTCSForChargeItem(SalesHeader."No.",TCSSetup);
    END;

    LOCAL PROCEDURE CreateSaleLineWithMultipleChargeItem@1500069(SalesHeader@1500000 : Record 36;TaxGroup@1500003 : Record 321;TaxArea@1500004 : Record 318;TCSCode@1500005 : Code[20]);
    VAR
      SalesLine@1500002 : Record 37;
      i@1500001 : Integer;
    BEGIN
      //Create Sales Line with Item
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(200,2));
      SalesLine.MODIFY;
      //Create 1st Item Charge, update Tax Group Code in Item Charge and Create Sales Line
      FOR i := 1 TO 2 DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,1);
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        SalesLine.MODIFY(TRUE);
      END;
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          SalesLine.VALIDATE("Tax Area Code",TaxArea.Code);
          SalesLine.VALIDATE("Tax Group Code",TaxGroup.Code);
          SalesLine.VALIDATE("TCS Nature of Collection",TCSCode);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateSalesTaxStructure@1500026(VAR StructureHeader@1500000 : Record 13792;VAR Location@1500014 : Record 14;VAR TaxArea@1500015 : Record 318;VAR TaxGroup@1500016 : Record 321;CustomerNo@1500017 : Code[20]);
    VAR
      StructureLines@1500002 : Record 13793;
      TaxJurisdiction@1500011 : Record 320;
      TaxAreaLine@1500009 : Record 319;
      TaxDetail@1500008 : Record 322;
      TaxAreaLoc@1500006 : Record 13761;
      State@1500005 : Record 13762;
      TINNos@1500004 : Record 13701;
      Customer@1500001 : Record 18;
      ServiceTaxAsExciseHelper@1500007 : Codeunit 143003;
    BEGIN
      StructureHeader.INIT;
      StructureHeader.VALIDATE(Code,LibraryUtility.GenerateRandomCode(StructureHeader.FIELDNO(Code),DATABASE::"Structure Header"));
      StructureHeader.VALIDATE(Description,StructureHeader.Code);
      StructureHeader.INSERT(TRUE);

      StructureLines.INIT;
      StructureLines.VALIDATE(Code,StructureHeader.Code);
      StructureLines.VALIDATE(Type,StructureLines.Type::"Sales Tax");
      StructureLines.VALIDATE("Header/Line",StructureLines."Header/Line"::Line);
      StructureLines.VALIDATE("Include Base",TRUE);
      StructureLines.VALIDATE("Include Line Discount",TRUE);
      StructureLines.VALIDATE("Include Invoice Discount",TRUE);
      StructureLines.INSERT(TRUE);

      LibraryERM.CreateTINNo(TINNos);

      LibraryERM.CreateState(State);
      State.VALIDATE("Tax Account (Sales)",LibraryERM.CreateGLAccountNo);
      State.MODIFY(TRUE);

      Customer.GET(CustomerNo);
      Customer.VALIDATE("State Code",State.Code);
      Customer.MODIFY(TRUE);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("State Code",State.Code);
      Location."T.I.N. No." := TINNos.Code;
      Location.VALIDATE("T.C.A.N. No.",LibraryTCS.CreateTCANNo);
      Location.MODIFY(TRUE);

      LibraryERM.CreateTaxGroup(TaxGroup);

      LibraryERM.CreateTaxJurisdiction(TaxJurisdiction);
      TaxJurisdiction.VALIDATE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
      TaxJurisdiction.VALIDATE("State Code",State.Code);
      TaxJurisdiction.MODIFY(TRUE);

      LibraryERM.CreateTaxArea(TaxArea);
      LibraryERM.CreateTaxAreaLine(TaxAreaLine,TaxArea.Code,TaxJurisdiction.Code);
      TaxAreaLine.VALIDATE("Include Tax Base",TRUE);
      TaxAreaLine.MODIFY(TRUE);

      ServiceTaxAsExciseHelper.CreateTaxAreaLocations(Location.Code,State.Code,TaxArea.Code,TaxAreaLoc.Type::Customer);

      LibraryERM.CreateTaxDetail(TaxDetail,TaxJurisdiction.Code,TaxGroup.Code,TaxDetail."Tax Type"::"Sales Tax",WORKDATE);
      TaxDetail.VALIDATE("Tax Below Maximum",LibraryRandom.RandDec(10,2));
      TaxDetail.VALIDATE("Creditable Goods",TRUE);
      TaxDetail.VALIDATE("Capital Goods",TRUE);
      TaxDetail.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateStatistics@1500038(SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      SalesLine.CalculateStructures(SalesHeader);
      SalesLine.AdjustStructureAmounts(SalesHeader);
      SalesLine.UpdateSalesLines(SalesHeader);
      SalesLine.CalculateTCS(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderItemChargeAssignment@138(VAR SalesHeader@1500000 : Record 36;TCSSetup@1500001 : Record 16508;TCSCode@1500002 : Code[10];CustomerNo@1500003 : Code[20]);
    VAR
      SalesLine@1500006 : Record 37;
    BEGIN
      CreateSalesOrderWithMultipleChargeItem(SalesHeader,TCSSetup,TCSCode,CustomerNo);
      FindSalesLineWithType(SalesLine,SalesHeader."No.",SalesHeader."Document Type",SalesLine.Type::"Charge (Item)");
    END;

    LOCAL PROCEDURE CreateAndPostCashReceiptJournal@1500031(VAR GenJournalLine@1500003 : Record 81;Amount@1500002 : Decimal);
    VAR
      GenJnlTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,GenJnlTemplate.Type::"Cash Receipts");
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJnlTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,NodNocHeader."No.",-Amount);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE FindSalesLineWithType@258(VAR SalesLine@1000 : Record 37;DocumentNo@1002 : Code[20];DocumentType@1001 : Option;LineType@1003 : Option);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,LineType);
      SalesLine.FINDSET;
    END;

    LOCAL PROCEDURE FindCustomerLedgerEntryApplyingDoc@1500105(VAR CustLedgerEntry@1500106 : Record 21;InvoiceDocNo@1500000 : Code[20]);
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        SETRANGE("Document No.",InvoiceDocNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindCustomerLedgerEntryAppliedDoc@1500022(VAR CustLedgerEntry@1500002 : Record 21;CreditMemoDocNo@1500000 : Code[20];CashRcptDocNo@1500001 : Code[20]);
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        SETFILTER("Document No.",'%1|%2',CreditMemoDocNo,CashRcptDocNo);
        FINDSET;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentHandler@104(VAR ItemChargeAssignmentSales@1000 : TestPage 5814);
    BEGIN
      ItemChargeAssignmentSales.SuggestItemChargeAssignment.INVOKE;
      ItemChargeAssignmentSales.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ItemChargeAssignMenuHandler@352(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := LibraryVariableStorage.DequeueInteger;
    END;

    LOCAL PROCEDURE SetApplyCustomerEntry@1500110(VAR CustLedgerEntry@1500111 : Record 21;AmountToApply@1500112 : Decimal);
    VAR
      CustLedgerEntry2@1500113 : Record 21;
    BEGIN
      // Clear any existing applying entries.
      CustLedgerEntry2.SETRANGE("Applying Entry",TRUE);
      CustLedgerEntry2.SETFILTER("Entry No.",'<>%1',CustLedgerEntry."Entry No.");
      IF CustLedgerEntry2.FINDSET THEN
        REPEAT
          CustLedgerEntry2.VALIDATE("Applying Entry",FALSE);
          CustLedgerEntry2.MODIFY(TRUE);
        UNTIL CustLedgerEntry2.NEXT = 0;

      // Clear Applies-to IDs
      CustLedgerEntry2.RESET;
      CustLedgerEntry2.SETFILTER("Applies-to ID",'<>%1','');
      IF CustLedgerEntry2.FINDSET THEN
        REPEAT
          CustLedgerEntry2.VALIDATE("Applies-to ID",'');
          CustLedgerEntry2.MODIFY(TRUE);
        UNTIL CustLedgerEntry2.NEXT = 0;

      // Apply Payment Entry on Posted Invoice.
      WITH CustLedgerEntry DO BEGIN
        VALIDATE("Applying Entry",TRUE);
        VALIDATE("Applies-to ID",USERID);
        VALIDATE("Amount to Apply",AmountToApply);
        MODIFY(TRUE);
      END;
      CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry);
      COMMIT;
    END;

    LOCAL PROCEDURE SetAppliestoIdCustomer@1500120(VAR CustLedgerEntry@1500000 : Record 21);
    BEGIN
      // Set Applies-to ID.
      CustLedgerEntry.LOCKTABLE;
      CustLedgerEntry.FINDFIRST;
      REPEAT
        CustLedgerEntry.TESTFIELD(Open,TRUE);
        CustLedgerEntry.VALIDATE("Applies-to ID",USERID);
        IF CustLedgerEntry."Amount to Apply" = 0 THEN BEGIN
          CustLedgerEntry.CALCFIELDS("Remaining Amount");
          CustLedgerEntry.VALIDATE("Amount to Apply",CustLedgerEntry."Remaining Amount");
        END;
        CustLedgerEntry.MODIFY(TRUE);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTCSSalesLine@1500006(ExpectedSalesLine@1500005 : Record 37;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;LineNo@1500007 : Integer;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      SalesLine@1500002 : Record 37;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Line No.",LineNo);
      SalesLine.FINDFIRST;

      RoundingPrecision := GLSetup."TCS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedSalesLine."TDS/TCS Amount",SalesLine."TDS/TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,SalesLine.FIELDNAME("TDS/TCS Amount"),SalesLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedSalesLine."eCess Amount",SalesLine."eCess Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,SalesLine.FIELDNAME("eCess Amount"),SalesLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedSalesLine."SHE Cess Amount",SalesLine."SHE Cess Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,SalesLine.FIELDNAME("SHE Cess Amount"),SalesLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedSalesLine."Surcharge Amount",SalesLine."Surcharge Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,SalesLine.FIELDNAME("Surcharge Amount"),SalesLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500225(DocumentNo@1500002 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'>%1',0);
      GLEntry.FINDFIRST;
      Assert.AreEqual(ABS(GLEntry.Amount),Amount,STRSUBSTNO(CreditAmountErr,GLEntry.Amount,Amount));
    END;

    LOCAL PROCEDURE VerifyTCSForChargeItem@1500035(SalesOrderNo@1500003 : Code[20];TCSSetup@1500004 : Record 16508);
    VAR
      ExpectdSalesLineItem@1500005 : Record 37;
      SalesLine@1500007 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesOrderNo);
      IF SalesLine.FINDSET THEN
        REPEAT
          CLEAR(ExpectdSalesLineItem);
          CalculateTCSForVerificationSalesLine(ExpectdSalesLineItem,SalesLine."Line Amount"+SalesLine."Tax Amount",TCSSetup);
          VerifyTCSSalesLine(ExpectdSalesLineItem,SalesLine."Document No.",SalesLine."Document Type",SalesLine."Line No.",FALSE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@32(DocumentNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyDetailedCLE@1500043(DocumentNo@1500000 : Code[20];Amt@1500001 : Decimal;CLEEntryNo@1500004 : Integer);
    VAR
      DetailedCustLedgEntry1@1500002 : Record 379;
      DetailedCustLedgEntry2@1500003 : Record 379;
    BEGIN
      DetailedCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CLEEntryNo);
      DetailedCustLedgEntry1.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry1.SETRANGE("Entry Type",DetailedCustLedgEntry1."Entry Type"::"Initial Entry");
      DetailedCustLedgEntry1.FINDFIRST;
      DetailedCustLedgEntry1.TESTFIELD(Amount,Amt);
      DetailedCustLedgEntry2.SETRANGE("Cust. Ledger Entry No.",CLEEntryNo);
      DetailedCustLedgEntry2.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry2.SETRANGE("Entry Type",DetailedCustLedgEntry2."Entry Type"::Application);
      DetailedCustLedgEntry2.FINDFIRST;
      DetailedCustLedgEntry2.TESTFIELD(Amount,-Amt);
    END;

    LOCAL PROCEDURE RestoreGeneralLedgerSetup@1500081(AdditionalReportingCurrency@1500002 : Code[10]);
    BEGIN
      COMMIT;
      GLSetup.VALIDATE("Additional Reporting Currency",AdditionalReportingCurrency);
      GLSetup.MODIFY(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE AdjustAddReportingCurrencyRequestPageHandler@1500002(VAR AdjustAddReportingCurrency@1500000 : TestRequestPage 86);
    VAR
      GLAccount@1500001 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      AdjustAddReportingCurrency.DocumentNo.SETVALUE(LibraryUtility.GetGlobalNoSeriesCode);
      AdjustAddReportingCurrency.RetainedEarningsAcc.SETVALUE(GLAccount."No.");
      AdjustAddReportingCurrency.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

