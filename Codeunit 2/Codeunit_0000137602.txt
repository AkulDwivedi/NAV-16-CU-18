OBJECT Codeunit 137602 SCM CETAF Sales-Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryCosting@1002 : Codeunit 132200;
      LibraryERM@1000 : Codeunit 131300;
      LibraryInventory@1007 : Codeunit 132201;
      LibrarySales@1003 : Codeunit 130509;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryPatterns@1006 : Codeunit 132212;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1008 : Boolean;
      CalculatePer@1009 : 'Item Ledger Entry,Item';
      CalculationBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';

    LOCAL PROCEDURE Initialize@13();
    VAR
      ItemJournalLine@1000 : Record 83;
      InventorySetup@1002 : Record 313;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ItemJournalLine.DELETEALL;

      IF IsInitialized THEN
        EXIT;

      LibraryPatterns.SETNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      InventorySetup.GET;
      InventorySetup."Automatic Cost Posting" := FALSE;
      InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Never;
      InventorySetup."Average Cost Calc. Type" := InventorySetup."Average Cost Calc. Type"::Item;
      InventorySetup.MODIFY;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE SplitApplication_ValidateAll_Standard@66();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      ValueEntry@1005 : Record 5802;
      TempItemJournalLine@1006 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 51
      // Costing: Standard; Inventory: Several splits; Modifications: None
      Initialize;

      StandardItem(Item);
      LibraryPatterns.GRPHSeveralSplitApplication(Item,SalesLine,TempItemJournalLine);

      // Execute: Run adjust cost batch job
      Adjust(Item);

      // Validate
      COMMIT;
      GetEntries(Item,ItemLedgerEntry,ValueEntry);

      ValidateValueEntry_StandardInbound(Item,ItemLedgerEntry,ValueEntry,TempItemJournalLine);
      ValidateValueEntry_StandardInbound(Item,ItemLedgerEntry,ValueEntry,TempItemJournalLine);
      ValidateValueEntry_StandardInbound(Item,ItemLedgerEntry,ValueEntry,TempItemJournalLine);

      ValidateValueEntry_StandardOutbound(Item,ItemLedgerEntry,ValueEntry);
      ValidateValueEntry_StandardOutbound(Item,ItemLedgerEntry,ValueEntry);
      ValidateValueEntry_StandardOutboundExpected(Item,ItemLedgerEntry,ValueEntry);

      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SplitApplication_ValidateAll_Average@82();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      TempItemJournalLine@1005 : TEMPORARY Record 83;
      ValueEntry@1006 : Record 5802;
      AverageCost@1007 : Decimal;
    BEGIN
      // From: Costing suite - CETAF 52
      // Costing: Average; Inventory: Several splits; Modifications: None
      Initialize;

      AverageItem(Item);
      LibraryPatterns.GRPHSeveralSplitApplication(Item,SalesLine,TempItemJournalLine);

      // Execute
      Adjust(Item);

      // Validate
      GetEntries(Item,ItemLedgerEntry,ValueEntry);
      AverageCost := GetAverageCost(TempItemJournalLine);

      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);
      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);
      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);

      TempItemJournalLine.FINDFIRST;
      ValidateValueEntry_Outbound(ItemLedgerEntry,ValueEntry,AverageCost,TempItemJournalLine."Unit Amount",ACTUALCOST);
      ValidateValueEntry_Outbound(ItemLedgerEntry,ValueEntry,AverageCost,TempItemJournalLine."Unit Amount",ACTUALCOST);

      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SplitApplication_ValidateAll_FIFO@2();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      TempItemJournalLine@1005 : TEMPORARY Record 83;
      ValueEntry@1006 : Record 5802;
      FIFOCost1@1008 : Decimal;
      FIFOCost2@1009 : Decimal;
      FIFOCost3@1010 : Decimal;
    BEGIN
      // From: Costing suite - CETAF 53
      // Costing: FIFO; Inventory: Several splits; Modifications: None
      Initialize;

      FIFOItem(Item);

      LibraryPatterns.GRPHSeveralSplitApplicationWithCosts(Item,SalesLine,TempItemJournalLine,FIFOCost1,FIFOCost2,FIFOCost3);

      // Execute
      Adjust(Item);

      // Validate
      GetEntries(Item,ItemLedgerEntry,ValueEntry);

      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);
      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);
      ValidateValueEntry_Inbound(TempItemJournalLine,ItemLedgerEntry,ValueEntry,ACTUALCOST);

      TempItemJournalLine.FINDFIRST;
      ValidateValueEntry_Outbound(ItemLedgerEntry,ValueEntry,FIFOCost1,TempItemJournalLine."Unit Amount",ACTUALCOST);
      ValidateValueEntry_Outbound(ItemLedgerEntry,ValueEntry,FIFOCost2,TempItemJournalLine."Unit Amount",ACTUALCOST);
      ValidateValueEntry_Outbound(ItemLedgerEntry,ValueEntry,FIFOCost3,TempItemJournalLine."Unit Amount",EXPECTEDCOST);

      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SplitApplication_LIFO@3();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      TempItemJournalLine@1005 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 53
      // Costing: LIFO; Inventory: Several splits; Modifications: None
      Initialize;

      LIFOItem(Item);
      LibraryPatterns.GRPHSeveralSplitApplication(Item,SalesLine,TempItemJournalLine);

      // Execute
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SimpleApplication_Standard@18();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 54
      // Costing: Standard; Inventory: Simple application; Modifications: None
      Initialize;
      StandardItem(Item);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);
      Invoice(SalesLine);

      // Execute
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SimpleApplication_Average@17();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 54
      // Costing: Average; nventory: Simple application; Modifications: None
      Initialize;
      AverageItem(Item);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);
      Invoice(SalesLine);

      // Execute
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SimpleApplication_FIFO@10();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 54
      // Costing: FIFO; Inventory: Simple application; Modifications: None
      Initialize;
      FIFOItem(Item);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);
      Invoice(SalesLine);

      // Execute
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SplitJoinApplication_Standard@44();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLineReturn@1002 : Record 37;
      TempItemJournalLine@1003 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 55
      // Costing: Standard; Inventory: Sales Return Split/Join application; Modifications: Sales Item Charge
      Initialize;
      StandardItem(Item);
      LibraryPatterns.GRPHSplitJoinApplication(Item,SalesLine,SalesLineReturn,TempItemJournalLine);

      // Execute: Assign Sales Item Charge
      GetSalesHeader(SalesLine,SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      AssignItemChargeReturn(SalesHeader,SalesLineReturn);

      Invoice(SalesLineReturn);
      Invoice(SalesLine); // Also posts item charge
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SplitJoinApplication_Average@49();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLineReturn@1002 : Record 37;
      TempItemJournalLine@1003 : TEMPORARY Record 83;
    BEGIN
      // From: Costing suite - CETAF 55
      // Costing: Standard; Inventory: Sales Return Split/Join application; Modifications: Sales Item Charge
      Initialize;
      AverageItem(Item);
      LibraryPatterns.GRPHSplitJoinApplication(Item,SalesLine,SalesLineReturn,TempItemJournalLine);

      // Execute: Assign Sales Item Charge
      GetSalesHeader(SalesLineReturn,SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      AssignItemCharge(SalesHeader,SalesLineReturn);
      Invoice(SalesLineReturn); // Also posts item charge
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE CredeitMemo_SalesItemCharge_Average@54();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      SalesShptLine@1003 : Record 111;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
      Customer@1005 : Record 18;
    BEGIN
      // From: Costing suite - CETAF 56
      // Costing: Average; Inventory: Simple Application; Modifications: Sales Shipment Item Charge
      Initialize;

      AverageItem(Item);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);

      Invoice(SalesLine);
      GetShipmentLine(SalesLine,SalesShptLine);
      Customer.GET(SalesLine."Sell-to Customer No.");

      // Execute: Assign Sales Item Charge
      CreateCreditMemo(SalesHeader,Customer,WORKDATE);
      AssignItemChargeShipment(SalesHeader,SalesShptLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SimpleApplication_ByLocation_Average@4();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      SalesLine2@1005 : Record 37;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
      Location@1006 : Record 14;
      Location2@1007 : Record 14;
    BEGIN
      // From: Costing suite - CETAF 57
      // Costing: Average; Inventory: Simple Application on two locations;
      Initialize;

      AverageItem(Item);

      LibraryWarehouse.CreateLocation(Location);
      LibraryWarehouse.CreateLocation(Location2);

      Item.SETFILTER("Location Filter",Location.Code);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);
      Item.SETFILTER("Location Filter",Location2.Code);
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine2,TempItemJournalLine);

      // Execute: Assign Sales Item Charge
      Invoice(SalesLine);
      Invoice(SalesLine2);
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    LOCAL PROCEDURE FullyShipped_ItemCharge@16(CostingMethod@1003 : Option);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup
      Initialize;

      LibraryPatterns.MAKEItemSimple(Item,CostingMethod,LibraryPatterns.RandCost(Item));
      LibraryPatterns.GRPHApplyInboundToUnappliedOutbound(Item,SalesLine);

      GetSalesHeader(SalesLine,SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      AssignItemCharge(SalesHeader,SalesLine);
      Invoice(SalesLine);

      // Execute
      Adjust(Item);

      // Validate
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FullyShipped_ItemCharge_Standard@32();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 59
      FullyShipped_ItemCharge(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE FullyShipped_ItemCharge_Average@31();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 59
      FullyShipped_ItemCharge(Item."Costing Method"::Average);
    END;

    LOCAL PROCEDURE PartiallyShipped_ItemCharge@22(CostingMethod@1003 : Option);
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      ItemLedgerEntry@1005 : Record 32;
      ItemApplicationEntry@1004 : Record 339;
    BEGIN
      // Setup
      Initialize;

      LibraryPatterns.MAKEItemSimple(Item,CostingMethod,LibraryPatterns.RandCost(Item));
      LibraryPatterns.GRPHSalesOnly(Item,SalesLine);

      GetSalesHeader(SalesLine,SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      AssignItemCharge(SalesHeader,SalesLine);
      Invoice(SalesLine);

      // Execute
      Adjust(Item);

      // Validate
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDFIRST;
      Assert.AreEqual(1,ItemLedgerEntry.COUNT,
        'Expected exactly one item ledger entry after posting sales order');

      ItemApplicationEntry.SETRANGE("Outbound Item Entry No.",ItemLedgerEntry."Entry No.");
      Assert.IsTrue(ItemApplicationEntry.ISEMPTY,
        'Expected no application entries after posting sales order only.');
    END;

    [Test]
    PROCEDURE PartiallyShipped_ItemCharge_Standard@21();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 60
      PartiallyShipped_ItemCharge(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE PartiallyShipped_ItemCharge_Average@20();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 60
      PartiallyShipped_ItemCharge(Item."Costing Method"::Average);
    END;

    LOCAL PROCEDURE ChangeSalesDate_AfterReval@48(CostingMethod@1007 : Option);
    VAR
      Item@1004 : Record 27;
      SalesLine@1005 : Record 37;
      ValueEntry@1000 : Record 5802;
      TempItemJournalLine@1010 : TEMPORARY Record 83;
      RevaluationDate@1009 : Date;
      Factor@1008 : Decimal;
      Amount@1001 : Decimal;
    BEGIN
      // Setup
      Initialize;

      LibraryPatterns.MAKEItemSimple(Item,CostingMethod,LibraryPatterns.RandCost(Item));
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);
      IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
        Amount := TempItemJournalLine.Amount
      ELSE
        Amount := Item."Standard Cost" * TempItemJournalLine.Quantity;

      // Execute
      RevaluationDate := SalesLine."Shipment Date" + 1;
      RevaluateAndAdjust(Item,Factor,RevaluationDate);
      CheckRevaluation(Item,ValueEntry,Factor,SalesLine,TempItemJournalLine.Quantity,Amount);

      SetShipmentDate(SalesLine,RevaluationDate + 1);
      Adjust(Item);

      // Validate
      CheckRevaluation(Item,ValueEntry,Factor,SalesLine,TempItemJournalLine.Quantity,Amount);
      LibraryCosting.CheckAdjustment(Item);
    END;

    LOCAL PROCEDURE ChangeSalesDate_BeforeReval@46(CostingMethod@1007 : Option);
    VAR
      Item@1004 : Record 27;
      SalesLine@1005 : Record 37;
      ValueEntry@1000 : Record 5802;
      TempItemJournalLine@1010 : TEMPORARY Record 83;
      RevaluationDate@1009 : Date;
      Factor@1008 : Decimal;
      Amount@1001 : Decimal;
    BEGIN
      // Setup
      Initialize;

      LibraryPatterns.MAKEItemSimple(Item,CostingMethod,LibraryPatterns.RandCost(Item));
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);

      IF CostingMethod <> Item."Costing Method"::Standard THEN
        Amount := TempItemJournalLine.Amount
      ELSE
        Amount := Item."Standard Cost" * TempItemJournalLine.Quantity;

      // Execute
      RevaluationDate := SalesLine."Shipment Date" + 2;
      RevaluateAndAdjust(Item,Factor,RevaluationDate);
      CheckRevaluation(Item,ValueEntry,Factor,SalesLine,TempItemJournalLine.Quantity,Amount);

      SetShipmentDate(SalesLine,RevaluationDate - 1);
      Adjust(Item);

      // Validate
      CheckRevaluation(Item,ValueEntry,Factor,SalesLine,TempItemJournalLine.Quantity,Amount);
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_AfterReval_FIFO@74();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_AfterReval(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_AfterReval_Average@70();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_AfterReval(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_AfterReval_Standard@84();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_AfterReval(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_BeforeReval_FIFO@72();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_BeforeReval(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_BeforeReval_Average@69();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_BeforeReval(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE ChangeSalesDate_BeforeReval_Standard@85();
    VAR
      Item@1004 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 61
      ChangeSalesDate_BeforeReval(Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE ReturnOnly@58(CostingMethod@1000 : Option);
    VAR
      Item@1001 : Record 27;
      ReturnReceiptLine@1002 : Record 6661;
    BEGIN
      Initialize;

      LibraryPatterns.MAKEItem(Item,CostingMethod,LibraryPatterns.RandCost(Item),0,0,'');
      LibraryPatterns.GRPHSalesReturnOnly(Item,ReturnReceiptLine);

      Adjust(Item);
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE ReturnOnly_FIFO@57();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      ReturnOnly(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ReturnOnly_LIFO@53();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      ReturnOnly(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE ReturnOnly_Average@52();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      ReturnOnly(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE ReturnOnly_Standard@50();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      ReturnOnly(Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE PartiallyInvoiced@45(CostingMethod@1003 : Option);
    VAR
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
      TempItemJournalLine@1000 : TEMPORARY Record 83;
    BEGIN
      Initialize;

      LibraryPatterns.MAKEItem(Item,CostingMethod,LibraryPatterns.RandCost(Item),0,0,'');
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);

      InvoicePartially(SalesLine);

      Adjust(Item);
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE PartiallyInvoiced_FIFO@43();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      PartiallyInvoiced(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE PartiallyInvoiced_LIFO@39();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      PartiallyInvoiced(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE PartiallyInvoiced_Average@38();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      PartiallyInvoiced(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE PartiallyInvoiced_Standard@37();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 65
      PartiallyInvoiced(Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE FullyInvoiced@36(CostingMethod@1003 : Option);
    VAR
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
      TempItemJournalLine@1000 : TEMPORARY Record 83;
    BEGIN
      Initialize;

      LibraryPatterns.MAKEItem(Item,CostingMethod,LibraryPatterns.RandCost(Item),0,0,'');
      LibraryPatterns.GRPHSimpleApplication(Item,SalesLine,TempItemJournalLine);

      Invoice(SalesLine);

      Adjust(Item);
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FullyInvoiced_FIFO@35();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 66
      FullyInvoiced(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE FullyInvoiced_LIFO@34();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 66
      FullyInvoiced(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE FullyInvoiced_Average@33();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 66
      FullyInvoiced(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE FullyInvoiced_Standard@29();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 66
      FullyInvoiced(Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE SalesFromReturns@27(CostingMethod@1000 : Option);
    VAR
      Item@1003 : Record 27;
      SalesLine@1002 : Record 37;
    BEGIN
      Initialize;

      LibraryPatterns.MAKEItem(Item,CostingMethod,LibraryPatterns.RandCost(Item),0,0,'');
      LibraryPatterns.GRPHSalesFromReturnReceipts(Item,SalesLine);

      Invoice(SalesLine);

      Adjust(Item);
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE SalesFromReturns_FIFO@26();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 68
      SalesFromReturns(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE SalesFromReturns_LIFO@25();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 68
      SalesFromReturns(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE SalesFromReturns_Average@23();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 68
      SalesFromReturns(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE SalesFromReturns_Standard@19();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // From: Costing suite - CETAF 68
      SalesFromReturns(Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE AssignItemCharge@30(VAR SalesHeader@1001 : Record 36;VAR SalesLineApplyTo@1000 : Record 37);
    BEGIN
      LibraryPatterns.ASSIGNSalesChargeToSalesLine(
        SalesHeader,SalesLineApplyTo,LibraryPatterns.RandDec(0,SalesLineApplyTo.Quantity,5),LibraryPatterns.RandDec(0,100,5));
    END;

    LOCAL PROCEDURE AssignItemChargeReturn@14(VAR SalesHeader@1001 : Record 36;VAR SalesLineApplyTo@1000 : Record 37);
    BEGIN
      LibraryPatterns.ASSIGNSalesChargeToSalesReturnLine(
        SalesHeader,SalesLineApplyTo,LibraryPatterns.RandDec(0,SalesLineApplyTo.Quantity,5),LibraryPatterns.RandDec(0,100,5));
    END;

    LOCAL PROCEDURE AssignItemChargeShipment@65(VAR SalesHeader@1007 : Record 36;VAR SalesShptLineApplyTo@1000 : Record 111);
    BEGIN
      LibraryPatterns.ASSIGNSalesChargeToSalesShptLine(
        SalesHeader,SalesShptLineApplyTo,LibraryPatterns.RandDec(0,SalesShptLineApplyTo.Quantity,5),LibraryPatterns.RandDec(0,100,5));
    END;

    LOCAL PROCEDURE GetShipmentLine@64(SalesLine@1000 : Record 37;VAR SalesShptLine@1001 : Record 111);
    BEGIN
      SalesShptLine.SETRANGE("Order No.",SalesLine."Document No.");
      SalesShptLine.SETRANGE(Type,SalesLine.Type);
      Assert.AreEqual(1,SalesShptLine.COUNT,'Couldn''t match Sales Line to Sales Shipment Line');
      SalesShptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateCreditMemo@28(VAR SalesHeader@1000 : Record 36;Customer@1002 : Record 18;PostingDate@1001 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE Invoice@56(VAR SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      GetSalesHeader(SalesLine,SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE Adjust@5(VAR Item@1000 : Record 27);
    BEGIN
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      COMMIT;
    END;

    LOCAL PROCEDURE GetSalesHeader@12(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CostFor@24(VAR ItemLedgerEntry@1000 : Record 32;VAR TempItemJournalLine@1001 : TEMPORARY Record 83) : Decimal;
    BEGIN
      EXIT(ItemLedgerEntry.Quantity * TempItemJournalLine."Unit Amount");
    END;

    LOCAL PROCEDURE StdCostFor@11(VAR ItemLedgerEntry@1000 : Record 32;VAR Item@1001 : Record 27) : Decimal;
    BEGIN
      EXIT(ItemLedgerEntry.Quantity * Item."Standard Cost");
    END;

    LOCAL PROCEDURE UnitCostFor@101(VAR ItemLedgerEntry@1000 : Record 32;UnitCost@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(ItemLedgerEntry.Quantity * UnitCost);
    END;

    LOCAL PROCEDURE GetAverageCost@71(VAR TempItemJournalLine@1000 : TEMPORARY Record 83) : Decimal;
    VAR
      TotalQuantity@1001 : Decimal;
      TotalCost@1002 : Decimal;
    BEGIN
      TempItemJournalLine.SETRANGE("Entry Type",TempItemJournalLine."Entry Type"::Purchase);

      REPEAT
        TotalCost += TempItemJournalLine.Amount;
        TotalQuantity += TempItemJournalLine.Quantity;
      UNTIL TempItemJournalLine.NEXT = 0;

      TempItemJournalLine.SETRANGE("Entry Type");
      TempItemJournalLine.FINDSET;

      EXIT(TotalCost / TotalQuantity);
    END;

    LOCAL PROCEDURE GetEntries@73(VAR Item@1002 : Record 27;VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1000 : Record 5802);
    BEGIN
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.FINDSET;

      ItemLedgerEntry.SETCURRENTKEY("Entry No.");
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE ModifyPostRevaluation@15(ItemJnlBatch@1000 : Record 233;Factor@1004 : Decimal);
    VAR
      ItemJnlLine@1001 : Record 83;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlBatch.Name);
      IF ItemJnlLine.FINDSET THEN
        REPEAT
          ItemJnlLine.VALIDATE(
            "Inventory Value (Revalued)",ROUND(ItemJnlLine."Inventory Value (Revalued)" * Factor,LibraryERM.GetAmountRoundingPrecision));
          ItemJnlLine.MODIFY;
        UNTIL (ItemJnlLine.NEXT = 0);
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
    END;

    LOCAL PROCEDURE ValidateValueEntry_Inbound@75(VAR TempItemJournalLine@1002 : TEMPORARY Record 83;VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1000 : Record 5802;Actual@1004 : Boolean);
    BEGIN
      NearlyEqual(CostFor(ItemLedgerEntry,TempItemJournalLine),EntryCost(ValueEntry,Actual),
        'Unexpected cost amount actual on value entry.');
      NextValueEntry(ValueEntry);
      ItemLedgerEntry.NEXT;
      TempItemJournalLine.NEXT;
    END;

    LOCAL PROCEDURE ValidateValueEntry_Outbound@83(VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1000 : Record 5802;AverageCost@1005 : Decimal;InitialUnitCost@1004 : Decimal;Actual@1007 : Boolean);
    BEGIN
      NearlyEqual(UnitCostFor(ItemLedgerEntry,InitialUnitCost),EntryCost(ValueEntry,Actual),
        'Unexpected cost amount actual on value entry.');

      NextValueEntry(ValueEntry);

      NearlyEqual(ItemLedgerEntry.Quantity * (AverageCost - InitialUnitCost),EntryCost(ValueEntry,Actual),
        'Unexpected cost amount actual on value entry.');

      NextValueEntry(ValueEntry);
      ItemLedgerEntry.NEXT;
    END;

    LOCAL PROCEDURE ValidateValueEntry_StandardInbound@47(VAR Item@1000 : Record 27;VAR ItemLedgerEntry@1002 : Record 32;VAR ValueEntry@1003 : Record 5802;VAR TempItemJournalLine@1001 : TEMPORARY Record 83);
    BEGIN
      NearlyEqual(CostFor(ItemLedgerEntry,TempItemJournalLine),ValueEntry."Cost Amount (Actual)",
        'Unexpected cost amount actual on inbound value entry.');
      NextValueEntry(ValueEntry);
      Assert.AreEqual(ValueEntry."Entry Type",ValueEntry."Entry Type"::Variance,
        'Expected variance entry after adjusting std. costed item.');
      NearlyEqual(CostFor(ItemLedgerEntry,TempItemJournalLine) - StdCostFor(ItemLedgerEntry,Item),-ValueEntry."Cost Amount (Actual)",
        'Unexpected cost amount actual on inbound variance value entry after adjusting.');

      ItemLedgerEntry.NEXT;
      NextValueEntry(ValueEntry);
      TempItemJournalLine.NEXT;
    END;

    LOCAL PROCEDURE ValidateValueEntry_StandardOutbound@62(VAR Item@1003 : Record 27;VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1000 : Record 5802);
    BEGIN
      NearlyEqual(StdCostFor(ItemLedgerEntry,Item),ValueEntry."Cost Amount (Actual)",
        'Unexpected cost amount actual on outbound value entry, standard cost.');
      ItemLedgerEntry.NEXT;
      NextValueEntry(ValueEntry);
    END;

    LOCAL PROCEDURE ValidateValueEntry_StandardOutboundExpected@59(VAR Item@1003 : Record 27;VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1000 : Record 5802);
    BEGIN
      NearlyEqual(StdCostFor(ItemLedgerEntry,Item),ValueEntry."Cost Amount (Expected)",
        'Unexpected cost amount expected on outbound value entry, standard cost.');
      ItemLedgerEntry.NEXT;
      NextValueEntry(ValueEntry);
    END;

    LOCAL PROCEDURE NearlyEqual@79(d1@1000 : Decimal;d2@1001 : Decimal;Message@1002 : Text);
    VAR
      Close@1003 : Boolean;
    BEGIN
      // Check that _either_ the relative/absolute error is within an error margin of 10E2/10E3
      IF ABS(d1 - d2) <= 0.02 THEN
        EXIT;

      IF d1 <> 0 THEN
        Close := ABS((d2 - d1) / d1) <= 0.001
      ELSE
        IF d2 <> 0 THEN
          Close := ABS((d1 - d2) / d2) <= 0.001;

      Assert.IsTrue(Close,Message + STRSUBSTNO(': Expected %1. Was %2.',d1,d2));
    END;

    LOCAL PROCEDURE NextValueEntry@127(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      IF ValueEntry.NEXT = 0 THEN
        EXIT;

      IF ValueEntry.Adjustment THEN
        IF (ABS(ValueEntry."Cost Amount (Actual)") <= 0.02) AND (ABS(ValueEntry."Cost Amount (Expected)") <= 0.02) THEN
          NextValueEntry(ValueEntry);
    END;

    LOCAL PROCEDURE EntryCost@40(VAR ValueEntry@1000 : Record 5802;Actual@1001 : Boolean) : Decimal;
    BEGIN
      IF Actual THEN
        EXIT(ValueEntry."Cost Amount (Actual)");
      EXIT(ValueEntry."Cost Amount (Expected)");
    END;

    LOCAL PROCEDURE ACTUALCOST@41() : Boolean;
    BEGIN
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE EXPECTEDCOST@42() : Boolean;
    BEGIN
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE StandardItem@6(VAR Item@1000 : Record 27);
    BEGIN
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::Standard,LibraryPatterns.RandCost(Item),0,0,'');
    END;

    LOCAL PROCEDURE AverageItem@7(VAR Item@1000 : Record 27);
    BEGIN
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::Average,LibraryPatterns.RandCost(Item),0,0,'');
    END;

    LOCAL PROCEDURE FIFOItem@8(VAR Item@1000 : Record 27);
    BEGIN
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,LibraryPatterns.RandCost(Item),0,0,'');
    END;

    LOCAL PROCEDURE LIFOItem@9(VAR Item@1000 : Record 27);
    BEGIN
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::LIFO,LibraryPatterns.RandCost(Item),0,0,'');
    END;

    LOCAL PROCEDURE RevaluateAndAdjust@63(VAR Item@1004 : Record 27;VAR Factor@1002 : Decimal;RevaluationDate@1003 : Date);
    VAR
      ItemJournalBatch@1011 : Record 233;
    BEGIN
      Factor := 1 + LibraryPatterns.RandDec(0,1,5);

      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      LibraryPatterns.CalculateInventoryValueRun(ItemJournalBatch,Item,RevaluationDate,CalculatePer::Item,
        Item."Costing Method" <> Item."Costing Method"::Average,Item."Costing Method" <> Item."Costing Method"::Average,
        FALSE,CalculationBase::" ",FALSE,'','');
      ModifyPostRevaluation(ItemJournalBatch,Factor);
      Adjust(Item);
    END;

    LOCAL PROCEDURE CheckRevaluation@80(Item@1000 : Record 27;VAR ValueEntry@1001 : Record 5802;Factor@1002 : Decimal;VAR SalesLine@1004 : Record 37;Quantity@1005 : Decimal;Amount@1003 : Decimal);
    VAR
      ShippedQuantity@1006 : Decimal;
    BEGIN
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::Revaluation);
      Assert.AreEqual(1,ValueEntry.COUNT,
        'Expected exactly one revaluation entry');
      ValueEntry.FINDFIRST;

      ShippedQuantity := SalesLine.Quantity;
      NearlyEqual(Amount * (Factor - 1) * (Quantity - ShippedQuantity) / Quantity,ValueEntry."Cost Amount (Actual)",
        'Unexpected cost amount actual on revaluation entry');
    END;

    LOCAL PROCEDURE SetShipmentDate@91(VAR SalesLine@1000 : Record 37;ShipmentDate@1001 : Date);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      GetSalesHeader(SalesLine,SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);

      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InvoicePartially@60(VAR SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Qty. to Invoice",LibraryPatterns.RandDec(0,SalesLine.Quantity / 2,2));
      Invoice(SalesLine);
    END;

    [Test]
    PROCEDURE VSTF310507FIFO@1();
    VAR
      Item@1003 : Record 27;
      InventorySetup@1010 : Record 313;
      SalesHeader@1004 : Record 36;
      PurchaseHeader@1007 : Record 38;
      Day1@1008 : Date;
      Variant@1009 : Code[10];
      Loc@1000 : Code[10];
    BEGIN
      Initialize;

      InventorySetup.GET;
      InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Always;
      InventorySetup.MODIFY;

      IsInitialized := FALSE;

      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,0,0,0,'');
      Day1 := WORKDATE;
      Loc := '';
      Variant := '';

      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,Item,Loc,Variant,2,Day1,10,TRUE,TRUE);
      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,Item,Loc,Variant,2,Day1,20,TRUE,TRUE);

      LibraryPatterns.POSTSalesOrderPartially(SalesHeader,Item,Loc,Variant,2,Day1,100,TRUE,1,TRUE,0.5);

      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // Adjustment is done automatic

      // verify
      LibraryCosting.CheckAdjustment(Item);
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Cost Item Entries] [SCM]
    }
    END.
  }
}

