OBJECT Codeunit 144056 TDS - Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServiceTaxWithTDSHelper@1500010 : Codeunit 143005;
      LibraryERM@1500012 : Codeunit 131300;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryRandom@1500013 : Codeunit 130440;
      LibrarySales@1500008 : Codeunit 130509;
      LibraryTDS@1500000 : Codeunit 143000;
      LibraryUtility@1500016 : Codeunit 131000;
      LibraryReportDataset@1500007 : Codeunit 131007;
      LibraryInventory@1500011 : Codeunit 132201;
      Assert@1500014 : Codeunit 130000;
      CreditAmountErr@1500015 : TextConst 'ENU=The expected value is %1 and the actual value is %2.';
      BalAccCustErr@1500003 : TextConst 'ENU=Bal. Account Type should not be Customer for TDS transactions when Account Type is G/L Account.';
      BalAccVendErr@1500004 : TextConst 'ENU=Bal. Account Type should not be Vendor for TDS transactions when Account Type is G/L Account.';
      ShouldMatchErr@1500005 : TextConst 'ENU=Balance Account Type Error is Expected';
      LibraryVariableStorage@1500006 : Codeunit 131004;
      AmountErr@1500009 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      isInitialized@1500001 : Boolean;
      AccountErr@1500017 : TextConst 'ENU=There are no TDS entries for Account No. %1.;ENN=There are no TDS entries for Account No. %1.';

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE PurchaseInvoiceWithMultipleLinesInclTDS@1500021();
    VAR
      AssesseeCode@1500001 : Record 13727;
      TDSNatureDeduction@1500003 : Record 13726;
      TDSSetup@1500009 : Record 13728;
      NODNOCHeader@1500008 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      ExpectedTDSEntry@1500002 : Record 13729;
      Quantity@1500006 : Decimal;
      Amount@1500007 : Decimal;
      Amount2@1500010 : Decimal;
      DocumentNo@1500005 : Code[20];
    BEGIN
      //[SCENARIO 65668] Calculating TDS Related Amount Successfully With Multiple G/L Accounts In Purchase Invoice
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setups For Purchase Invoice
      InitializePurchaseInvSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup,TRUE,TRUE);
      Quantity := LibraryRandom.RandDec(2,1);

      //[WHEN] Create & Post Purchase Invoice With TDS With Multiple Lines In Purchase Invoice And Post Invoice
      CreatePurchaseInvoiceWithMultipleLines(
        PurchaseHeader,LibraryERM.CreateGLAccountWithPurchSetup,NODNOCHeader."No.",Quantity,TDSNatureDeduction.Code,
        LibraryRandom.RandDec(100,2));
      CalcTDSAmountsFromBaseInv(ExpectedTDSEntry,PurchaseHeader,Amount,TDSSetup,Amount2);
      VerifyPurchaseOrderStatistics(PurchaseHeader,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] G/l Entries created,TDS Entries are calculated by using TDS Setup
      VerifyGLEntryCount(DocumentNo,6);
      VerifyGLEntryforTDS(DocumentNo,Amount2);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE PurchaseInvoiceWithMultipleLinesInclThreshold@1500008();
    VAR
      AssesseeCode@1500024 : Record 13727;
      TDSNatureDeduction@1500023 : Record 13726;
      TDSSetup@1500022 : Record 13728;
      NODNOCHeader@1500021 : Record 13786;
      PurchaseHeader@1500020 : Record 38;
      ExpectedTDSEntry@1500019 : Record 13729;
      StructureDetails@1500018 : Record 13793;
      Amount@1500017 : Decimal;
      ThresholdAmt@1500016 : Decimal;
      Percontract@1500015 : Decimal;
      Amount2@1500014 : Decimal;
      Quantity@1500012 : Decimal;
      DocumentNo@1500001 : Code[20];
    BEGIN
      //[SCENARIO 65678] Calculating TDS related amount successfully with Threshold Limit
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setups For Purchase Invoice
      InitializePurchaseInvSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup,FALSE,FALSE);
      GetThresholdAmountInv(TDSNatureDeduction."TDS Group",ThresholdAmt,Percontract);
      Quantity := LibraryRandom.RandDec(2,1);

      //[WHEN] Create Purchase Invoice With TDS With Multiple Lines In Purchase Invoice And Post Invoice With Threshold
      CreatePurchaseInvoiceWithMultipleLines(
          PurchaseHeader,LibraryERM.CreateGLAccountWithPurchSetup,NODNOCHeader."No.",Quantity,TDSNatureDeduction.Code,Percontract);
      StructureDetails.SETRANGE(Code,PurchaseHeader.Structure);
      StructureDetails.FINDFIRST;
      StructureDetails.VALIDATE("Include in TDS Base",TRUE);
      StructureDetails.MODIFY;
      CalcTDSAmountsFromBaseInv(ExpectedTDSEntry,PurchaseHeader,Amount,TDSSetup,Amount2);
      VerifyPurchaseOrderStatistics(PurchaseHeader,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] G/l Entries created,TDS Entries are calculated by using TDS Setup
      VerifyGLEntryCount(DocumentNo,6);
      VerifyGLEntryforTDS(DocumentNo,Amount2);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsPartial)]
    PROCEDURE PurchaseOrderWithPartialPostingsInclTDS@1500089();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      TDSSetup@1500009 : Record 13728;
      NODNOCHeader@1011 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      ExpectedTDSEntry@1500002 : Record 13729;
      ExpectedTDSEntry2@1500003 : Record 13729;
      PurchInvHeader@1500012 : Record 122;
      Quantity@1500006 : Decimal;
      Amount@1500007 : Decimal;
      Amount1@1500008 : Decimal;
      Amount2@1500010 : Decimal;
      Amount3@1500011 : Decimal;
      DocumentNo@1500005 : Code[20];
      DocumentNo2@1500001 : Code[20];
    BEGIN
      //[SCENARIO 164360] Withholding-Partial purchase invoice with multiple lines posts TDS for unposted lines
      //[FEATURE] [Purchase Order]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setups For Purchase Invoice
      InitializePurchaseInvSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup,TRUE,TRUE);
      Quantity := LibraryRandom.RandDec(2,1);

      //[WHEN] Create & Post Purchase Invoice With TDS With Multiple Lines In Purchase Invoice And Post Invoice
      CreatePurchaseOrderWithMultipleLines(
        PurchaseHeader,LibraryERM.CreateGLAccountWithPurchSetup,NODNOCHeader."No.",LibraryRandom.RandDec(10,0),TDSNatureDeduction.Code,
        LibraryRandom.RandDec(100,0));
      ChangeQtyToReceive(PurchaseHeader,LibraryRandom.RandDec(5,0));
      CalcTDSAmountsFromBaseInv(ExpectedTDSEntry,PurchaseHeader,Amount,TDSSetup,Amount2);
      VerifyPurchaseOrderStatistics(PurchaseHeader,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      ChangeQtyToReceive(PurchaseHeader,0);
      PurchaseHeader."Vendor Invoice No." :=
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header");
      PurchaseHeader.MODIFY(TRUE);
      CalcTDSAmountsFromBaseInv(ExpectedTDSEntry2,PurchaseHeader,Amount1,TDSSetup,Amount3);
      VerifyPurchaseOrderStatistics(PurchaseHeader,Amount1);
      DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] G/l Entries and vendor Ledger Entries created,TDS Entries are calculated by using TDS Setup
      VerifyGLEntryforTDS(DocumentNo,Amount2);
      VerifyGLEntryforTDS(DocumentNo2,Amount3);
      VerifylPostedInvoiceWithInvoice(DocumentNo,Amount);
      VerifylPostedInvoiceWithInvoice(DocumentNo2,Amount1);
      VerifyTDSEntry(DocumentNo,Amount);
      VerifyTDSEntry(DocumentNo2,Amount1);

      PurchInvHeader.SETRANGE("No.",DocumentNo);
      PurchInvHeader.FINDFIRST;
      PurchInvHeader.CALCFIELDS("Amount to Vendor");
      VerifyVendorLedgerEntryWithRemainingAmount(DocumentNo,PurchInvHeader."Amount to Vendor");
    END;

    [Test]
    PROCEDURE JournalVoucherWithTDSBalAccountVendor@1500002();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500010 : Record 13726;
      NODNOCHeader@1500011 : Record 13786;
      GenJournalLine@1500000 : Record 81;
      TDSSetup@1500002 : Record 13728;
      GenJournalTemplate@1500003 : Record 80;
      Party@1500004 : Record 13730;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 65676] Create Setup, Post Journal voucher with balance account vendor and Verify Weather It Is Posting or Not.
      // [FEATURE] [TDS][Journal Voucher]

      // [GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setups  For Journal Voucher
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateParty(Party);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Party,Party.Code,AssesseeCode.Code,TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Journal Voucher With Balance Account Vendor.
      CreateCashBankPaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::Vendor,
        GenJournalTemplate."Sub Type"::"Journal Voucher",GenJournalLine."Party Type"::Party);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Calculated TDS Values in Journal voucher by using TDS Setup and checked the balancing account as Vendor
      Assert.AreEqual(STRSUBSTNO(BalAccVendErr),GETLASTERRORTEXT,ShouldMatchErr);
    END;

    [Test]
    PROCEDURE JournalVoucherWithTDSBalAccountCustomer@1500011();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500010 : Record 13726;
      NODNOCHeader@1500011 : Record 13786;
      GenJournalLine@1500000 : Record 81;
      TDSSetup@1500002 : Record 13728;
      GenJournalTemplate@1500003 : Record 80;
      Party@1500004 : Record 13730;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 65676] Create Setup, Post Journal voucher with balance account Customer and Verify Weather It Is Posting or Not.
      // [FEATURE] [TDS][Journal Voucher]

      // [GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setup For Journal Voucher
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateParty(Party);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Party,Party.Code,AssesseeCode.Code,TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      // [WHEN] Create Journal Voucher With Balance Account Customer.
      CreateCashBankPaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::Customer,
        GenJournalTemplate."Sub Type"::"Journal Voucher",GenJournalLine."Party Type"::Party);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // [THEN] Calculated TDS Values in Journal voucher by using TDS Setup and checked the balancing account as Customer
      Assert.AreEqual(STRSUBSTNO(BalAccCustErr),GETLASTERRORTEXT,ShouldMatchErr);
    END;

    [Test]
    PROCEDURE VerifyGeneralJournalsForForeignCurrencyInclTDS@1500015();
    VAR
      ExpectedTDSEntry@1500002 : Record 13729;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Vendor@1500012 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500015 : Record 13728;
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      GenJournalBatch@1500003 : Record 232;
      Amount@1500008 : Decimal;
    BEGIN
      //[SCENARIO 164267] Posting of General journal with TDS & Foreign currency after executing additional Currency report .
      //[FEATURE] [General Journal]

      // [GIVEN] Create Setup for NODNOC,Assessee Setup and Vendor with Country &foreign currency For General Journals
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Vendor.VALIDATE("Country/Region Code",CountryRegion.Code);
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,
        CountryRegion.Code,Vendor."No.",NODNOCHeader.Type::Vendor,WORKDATE);
      Amount := LibraryRandom.RandDec(1000,2);

      //[WHEN] Create General Journals With Foreign Currency and Creating Balance account along with this line
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",Vendor."No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",TDSNatureDeduction.Code);
      GenJournalLine.MODIFY(TRUE);
      LibraryTDS.CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine."Amount (LCY)");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[THEN] G/l entries and TDS Entries are created,which are calculated using tds setup defined
      VerifyGLEntryCount(GenJournalLine."Document No.",3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",GenJournalLine."Amount (LCY)");
      ServiceTaxWithTDSHelper.VerifyTDSEntry(
        ExpectedTDSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerTCSEntries)]
    PROCEDURE VerifyTCSEntryReportAfterPaymentAppliedtoInvoice@1500035();
    VAR
      TCSNatureCollection@1500007 : Record 16507;
      NODNOCHeader@1500008 : Record 13786;
      GenJournalLine@1500006 : Record 81;
      SalesHeader@1500000 : Record 36;
      TCSSetup@1500005 : Record 16508;
      SalesLine@1500001 : Record 37;
      Amount@1500003 : Decimal;
      DocumentNo@1500002 : Code[20];
      GLAccountNo@1500004 : Code[20];
    BEGIN
      //[SCENARIO 163755] TCS - Tax Collection at Source - Check if the system is generating `TCS Entries' report
      //[FEATURE] [Sales Order, Payment Journals]

      //[GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order
      InitializeSalesSetup(NODNOCHeader,TCSNatureCollection,TCSSetup,GLAccountNo);

      //[WHEN] Create & Post Sales order With Line Item Type Including TCS and update  the challan register with Details
      Amount := LibraryRandom.RandDec(1000,2);
      DocumentNo :=
        CreateAndPostSalesDocumentforTCS(
          SalesHeader,SalesLine,NODNOCHeader."No.",Amount,TCSNatureCollection.Code);
      SaveTCSEntries(DocumentNo);
      CreateJournalDocument(GenJournalLine,GLAccountNo);
      PayTCS(GenJournalLine,DocumentNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateChallanDetails(GenJournalLine."Document No.");
      GenerateCertificateNos(DocumentNo,TCSSetup);

      //[THEN] Created TCS Entries and G/L entries
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TCS_Entry__Party_Code_',SalesHeader."Sell-to Customer No.");
      LibraryReportDataset.AssertElementWithValueExists(
        'TCS_Amount___eCESS_Amount___SHE_Cess_Amount___Surcharge_Amount_',GenJournalLine.Amount);
      LibraryReportDataset.AssertElementWithValueExists('TCS_Entry__TCS_Base_Amount_',SalesLine.Amount);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE VerifyTDSEntryAfterPaymentAppliedtoInvoice@1500045();
    VAR
      AssesseeCode@1500000 : Record 13727;
      NODNOCHeader@1500001 : Record 13786;
      TDSNatureDeduction@1500002 : Record 13726;
      TDSSetup@1500003 : Record 13728;
      TDSGroup@1500010 : Record 13731;
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500006 : Record 39;
      GenJournalLine@1500008 : Record 81;
      Amount@1500004 : Decimal;
      Amount1@1500011 : Decimal;
      DocumentNo@1500007 : Code[20];
    BEGIN
      //[SCENARIO 164269] Verify program populates correct pay Document No on Update TDS Register after TDS amount is paid
      //[FEATURE] [Purchase Invoice, Bank Payment Voucher]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setups For Purchase Invoice
      InitializePurchaseInvSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup,TRUE,TRUE);
      Amount := LibraryRandom.RandDec(1000,2);
      UpdateAccountNumberInTDSGroup(TDSNatureDeduction."TDS Group",TDSGroup);

      //[WHEN] Create & Post Purchase Invoice With Line Item Type Including TDS and paying TDS Amount through Bank Payment Voucher
      DocumentNo :=
        CreateAndPostPurchaseDocumentforTDS(PurchaseHeader,PurchaseLine,TDSSetup,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code);
      CreateBankPaymentVoucherWithBalanceBankAcc(GenJournalLine,TDSGroup."TDS Account");
      PayTDS(GenJournalLine);
      GetTaxEntry(GenJournalLine."Document No.",TDSGroup."TDS Account",Amount1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[THEN]Calculated TDS Amount Using TDS Setup and G/L Entries Created with the same payment applied amount
      VerifyGLEntry(GenJournalLine."Document Type",GenJournalLine."Document No.",Amount1);
      VerifyGLEntryforTDS(DocumentNo,PurchaseLine.Amount);
    END;

    [Test]
    PROCEDURE BankPaymentVoucherWithMultipleLinesInclTDSWithThreshold@1500003();
    VAR
      AssesseeCode@1500002 : Record 13727;
      NODNOCHeader@1500013 : Record 13786;
      TDSNatureDeduction@1500009 : Record 13726;
      TDSSetup@1500008 : Record 13728;
      GenJournalLine@1500000 : Record 81;
      ExpectedTDSAmounts2@1500005 : Record 13729;
    BEGIN
      // [SCENARIO 64273] Verify the TDS entry when threshold limit defined in the TDS setup
      // [FEATURE] [Bank Payment Voucher]

      // [GIVEN] Created  NODNOC,TDSNatureofDeduction,Assesse Code Setup For Bank Payment Voucher
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',FALSE,FALSE);// ThresholdOverlook=FALSE,SurchargeOverlook=FALSE
      GetThresholdAmount(TDSNatureDeduction."TDS Group");

      // [WHEN] Create Bank Payment voucher with Multiple Payment lines and balancing account as bank account and calculated expected tds amounts with threshold amount
      CreateBankPaymentMultiLines(GenJournalLine,NODNOCHeader,TDSNatureDeduction,TDSSetup,FALSE,FALSE);// ThresholdOverlook=FALSE,SurchargeOverlook=FALSE
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ExpectedTDSAmounts2.SETRANGE("Document No.",GenJournalLine."Document No.");
      ExpectedTDSAmounts2.FINDLAST;

      // [THEN] Calculated TDS Amounts in TDS Entry and created G/l Entries
      VerifyGLEntryCount(GenJournalLine."Document No.",4);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",-GenJournalLine.Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(
        ExpectedTDSAmounts2,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerTDSEntries)]
    PROCEDURE BankPaymentVoucherWithMultipleLinesInclTDS@1500013();
    VAR
      AssesseeCode@1500002 : Record 13727;
      NODNOCHeader@1500013 : Record 13786;
      TDSNatureDeduction@1500009 : Record 13726;
      TDSSetup@1500008 : Record 13728;
      GenJournalLine@1500000 : Record 81;
      ExpectedTDSAmounts2@1500005 : Record 13729;
      ExpectedTDSEntry@1500001 : Record 13729;
    BEGIN
      // [SCENARIO 64272] Verify the TDS entry when more than one vendor is involved in one transaction.
      // [FEATURE] [Bank Payment Voucher]

      // [GIVEN] Created  NODNOC,TDSNatureofDeduction,Assesse Code Setup For Bank Payment Voucher
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      // [WHEN] Create Bank Payment voucher with Multiple Payment lines and balancing account as bank account and calculated expected tds amounts
      CreateBankPaymentMultiLines(GenJournalLine,NODNOCHeader,TDSNatureDeduction,TDSSetup,TRUE,TRUE);
      LibraryTDS.CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,-GenJournalLine.Amount);
      REPORT.RUN(REPORT::"General Journal - Test");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ExpectedTDSAmounts2.SETRANGE("Document No.",GenJournalLine."Document No.");
      ExpectedTDSAmounts2.FINDLAST;

      // [THEN] Calculated TDS values in TDS Entry by using TDS Setup and created G/l Entries along with this
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TDSAmount',-ExpectedTDSEntry."Total TDS Including SHE CESS");
      VerifyGLEntryCount(GenJournalLine."Document No.",4);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",-GenJournalLine.Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(
        ExpectedTDSAmounts2,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,FALSE);
    END;

    [Test]
    PROCEDURE BankPaymentVoucherWithMultipleLinesInclWorkTax@1500056();
    VAR
      AssesseeCode@1500001 : Record 13727;
      TDSNatureDeduction@1500002 : Record 13726;
      TDSSetup@1500003 : Record 13728;
      NODNOCHeader@1500004 : Record 13786;
      ExpectedTDSEntry@1500005 : Record 13729;
      GenJournalLine@1500006 : Record 81;
    BEGIN
      //[SCENARIO 164425] Tax - Service - Verify the work contract tax amount in TDS entry when transaction is entered in multiple journal line.
      //[FEATURE] [Bank Payment Voucher]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction as Work Tax related ,Assesse Code Setup for Bank Payment Voucher
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSNatureDeduction."TDS Group"::Others,AssesseeCode.Code,TDSSetup);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,TDSNatureDeduction.Code,'',
        TRUE,TRUE);

      //[WHEN]  Create Bank Payment Voucher With Work Tax Setup
      CreateAndPostBankPaymentVoucher(NODNOCHeader,TDSNatureDeduction,GenJournalLine);
      CalculateExpectedWorkTaxFromBase(ExpectedTDSEntry,TDSSetup,-GenJournalLine.Amount);

      //[WHEN]  Calculated Work Tax Base Amount,Work Taxamount  With Work Tax defined in the TDS Setup
      VerifyGLEntryCount(GenJournalLine."Document No.",3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",-GenJournalLine.Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(
        ExpectedTDSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseInvoiceWithLineItem@1500019();
    VAR
      AssesseeCode@1500004 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
      Amount@1500003 : Decimal;
    BEGIN
      //[SCENARIO 64532] calculating TDS related amount successfully normally in the following forms:Invoice received from vendor in Purchase Invoice
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setup for Purchase Invoice
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      //[WHEN] Create Purchase Invoice With Line Item Type Including TDS
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::Item,Amount,
        TDSNatureDeduction.Code,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      //[THEN] Calculated TDS Amounts By Using TDS Setup And verified  the results
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseInvoiceWithLineGLAcc@1500026();
    VAR
      AssesseeCode@1500004 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
      Amount@1500003 : Decimal;
    BEGIN
      //[SCENARIO 64532] calculating TDS related amount successfully normally in the following forms:Invoice received from vendor in Purchase Invoice
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setup for Purchase Invoice
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      //[WHEN] Create Purchase Invoice With Line G/L Account Type Including TDS
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"G/L Account",Amount,
        TDSNatureDeduction.Code,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      //[THEN] Calculated TDS Amounts By Using TDS Setup And verified  the results
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseInvoiceWithLineFixedAsset@1500007();
    VAR
      AssesseeCode@1500003 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      //[SCENARIO 64532] calculating TDS related amount successfully normally in the following forms:Invoice received from vendor in Purchase Invoice
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setup for Purchase Invoice
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      //[WHEN] Create Purchase Invoice With Line Fixed asset including TDS
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"Fixed Asset",Amount,
        TDSNatureDeduction.Code,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      //[THEN] Calculated TDS Amounts By Using TDS Setup And verified  the results
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseInvoiceWithLineChargeItem@1500005();
    VAR
      AssesseeCode@1500003 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      TDSSetup@1500005 : Record 13728;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      //[SCENARIO 64532] calculating TDS related amount successfully normally in the following forms:Invoice received from vendor in Purchase Invoice
      //[FEATURE] [Purchase Invoice]

      //[GIVEN] Created NODNOC,TDSNatureofDeduction,Assesse Code Setup for Purchase Invoice
      IntializeSetup(AssesseeCode,NODNOCHeader,TDSNatureDeduction,TDSSetup);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TDSNatureDeduction.Code,'',TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE

      //[WHEN]  Create Purchase Invoice With Line Charge(Item) Type Including TDS
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"Charge (Item)",
        Amount,TDSNatureDeduction.Code,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      //[THEN] Calculated TDS Amounts By Using TDS Setup And verified  the results
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    LOCAL PROCEDURE Initialize@1500001();
    BEGIN
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE IntializeSetup@1500022(VAR AssesseeCode@1500002 : Record 13727;VAR NODNOCHeader@1500001 : Record 13786;VAR TDSNatureDeduction@1500004 : Record 13726;VAR TDSSetup@1500007 : Record 13728);
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code,TDSSetup);
    END;

    LOCAL PROCEDURE InitializePurchaseInvSetup@1500010(VAR AssesseeCode@1500008 : Record 13727;VAR NODNOCHeader@1500007 : Record 13786;VAR TDSNatureDeduction@1500006 : Record 13726;VAR TDSSetup@1500003 : Record 13728;ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean);
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code,TDSSetup);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,TDSNatureDeduction.Code,'',
          ThresholdOverlook,SurchargeOverlook);
    END;

    LOCAL PROCEDURE InitializeSalesSetup@1170000023(VAR NODNOCHeader@1170000002 : Record 13786;VAR TCSNatureOfCollection@1170000003 : Record 16507;VAR TCSSetup@1170000001 : Record 16508;VAR GLAccountNo@1500002 : Code[20]);
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      GLAccountNo:= LibraryERM.CreateGLAccountWithSalesSetup;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTCSNatureCollectionAndTCSSetup(
        TCSNatureOfCollection,TCSNatureOfCollection."TCS Type"::E,AssesseeCode.Code,TCSSetup,GLAccountNo);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Customer,CreateCustomer,AssesseeCode.Code,TCSNatureOfCollection.Code,'',
        TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateTCSNatureCollectionAndTCSSetup@1170000031(VAR TCSNatureOfCollection@1170000004 : Record 16507;TCSType@1170000002 : Option;AssesseeCode@1170000001 : Code[10];VAR TCSSetup@1170000000 : Record 16508;GLAccountNo@1500000 : Code[20]);
    BEGIN
      CreateTCSNatureCollection(TCSNatureOfCollection);
      TCSNatureOfCollection.VALIDATE("TCS Type",TCSType);
      TCSNatureOfCollection.MODIFY(TRUE);
      CreateTCSSetup(TCSSetup,AssesseeCode,TCSNatureOfCollection.Code);
      TCSSetup.VALIDATE("TCS Account No.",GLAccountNo);
      TCSSetup.VALIDATE("No. Series",LibraryERM.CreateNoSeriesCode);
      TCSSetup.VALIDATE("TCS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TCSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentforTCS@1170000024(VAR SalesHeader@1170000000 : Record 36;VAR SalesLine@1170000001 : Record 37;CustomerNo@1170000003 : Code[20];Amount@1170000005 : Decimal;CodeContractor@1170000006 : Code[10]) : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocumentforTDS@1500059(VAR PurchaseHeader@1170000000 : Record 38;VAR PurchaseLine@1170000001 : Record 39;TDSSetup@1500001 : Record 13728;VendorNo@1170000003 : Code[20];Amount@1170000005 : Decimal;CodeContractor@1170000006 : Code[10]) : Code[20];
    VAR
      ExpetedTDSEntry@1500000 : Record 13729;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(2,0));
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
      LibraryTDS.CalcTDSAmountsFromBase(ExpetedTDSEntry,TDSSetup,PurchaseLine.Amount);
      VerifyPurchaseOrderStatistics(PurchaseHeader,ExpetedTDSEntry."Total TDS Including SHE CESS");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE));
    END;

    LOCAL PROCEDURE SaveTCSEntries@13(DocumentNo@1002 : Code[20]);
    VAR
      TCSEntry@1500000 : Record 16514;
      TCSEntries@1500001 : Report 16514;
    BEGIN
      CLEAR(TCSEntries);
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntries.SETTABLEVIEW(TCSEntry);
      TCSEntries.RUN;
    END;

    LOCAL PROCEDURE CreateJournalDocument@1500046(VAR GenJournalLine@1500009 : Record 81;GLAccountNo@1500003 : Code[20]);
    VAR
      GenJournalBatch@1500007 : Record 232;
      GenJournalTemplate@1500006 : Record 80;
      CompanyInformation@1500000 : Record 79;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",GLAccountNo,0);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      CompanyInformation.GET;
      GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.MODIFY(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerTCSEntries@77(VAR TCSEntries@1500000 : TestRequestPage 16514);
    BEGIN
      TCSEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    PROCEDURE PayTCS@1500053(VAR GenJnlLine@1280000 : Record 81;DocumentNo@1500002 : Code[20]);
    VAR
      TCSEntry@1500000 : Record 16514;
    BEGIN
      WITH GenJnlLine DO BEGIN
        TESTFIELD("Document No.");
        TESTFIELD("Account No.");
        TESTFIELD("T.C.A.N. No.");
        "Pay TCS" := TRUE;
        MODIFY;

        TCSEntry.SETRANGE("Account No.","Account No.");
        TCSEntry.SETRANGE("T.C.A.N. No.","T.C.A.N. No.");
        TCSEntry.SETFILTER("Total TCS Including SHE CESS",'<>%1',0);
        TCSEntry.SETRANGE("TCS Paid",FALSE);
        TCSEntry.SETRANGE(Reversed,FALSE);
        IF TCSEntry.FINDFIRST THEN
          UpdatePayTCS(GenJnlLine,DocumentNo);
      END;
    END;

    LOCAL PROCEDURE UpdatePayTCS@1500052(VAR GenJnlLine@1500001 : Record 81;DocumentNo@1500004 : Code[20]);
    VAR
      TCSEntry@1500002 : Record 16514;
      TCSEntry1@1500003 : Record 16514;
      TotalTCSAmount@1500000 : Decimal;
    BEGIN
      TotalTCSAmount := 0;
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("TCS Paid",FALSE);
      IF TCSEntry.FINDSET THEN
        REPEAT
          TCSEntry."Pay TCS Document No." := ' ';
          TCSEntry.MODIFY;
        UNTIL TCSEntry.NEXT = 0;
      TCSEntry1.COPY(TCSEntry);
      IF TCSEntry1.FINDSET THEN
        REPEAT
          TotalTCSAmount := TotalTCSAmount + TCSEntry1."Bal. TCS Including SHE CESS";
          TCSEntry1."Pay TCS Document No." := GenJnlLine."Document No.";
          TCSEntry1.MODIFY;
        UNTIL TCSEntry.NEXT = 0;
      GenJnlLine.Amount := TotalTCSAmount;
      GenJnlLine.VALIDATE("Debit Amount",TotalTCSAmount);
      GenJnlLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500050(PayTCSDocNo@1500001 : Code[20]);
    VAR
      TCSEntry@1500000 : Record 16514;
      TCSChallanDetails@1500002 : Report 16520;
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSEntry.FINDSET;
      REPEAT
        IF TCSChallanDetails.FilingStatus(TCSEntry."Entry No.") THEN BEGIN
          TCSEntry."Challan No." := FORMAT(LibraryRandom.RandInt(1000));
          TCSEntry."Challan Date" := WORKDATE;
          TCSEntry."Bank Name" := LibraryUtility.GenerateGUID;
          TCSEntry."BSR Code" := COPYSTR(LibraryUtility.GenerateGUID,1,7);
          TCSEntry."Check/DD No." := LibraryUtility.GenerateGUID;
          TCSEntry."Check Date" := WORKDATE;
          TCSChallanDetails.UpdateForm27QEntry;
          TCSEntry.MODIFY;
        END;
      UNTIL TCSEntry.NEXT = 0;
      TCSChallanDetails.UpdateTCSChallanRegister;
    END;

    LOCAL PROCEDURE GenerateCertificateNos@1500047(DocumentNo@1500000 : Code[20];TCSSetup@1500001 : Record 16508);
    VAR
      TCSEntry@1500002 : Record 16514;
      NoSeriesMgt@1500003 : Codeunit 396;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDSET;
      TCSSetup.TESTFIELD("No. Series");
      REPEAT
        TCSEntry."TCS Certificate No." := NoSeriesMgt.GetNextNo(TCSSetup."No. Series",WORKDATE,TRUE);
        TCSEntry."Certificate Period" := FORMAT(WORKDATE) +'..' + FORMAT(GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
        TCSEntry."Receipt Number" := LibraryUtility.GenerateRandomCode(TCSEntry.FIELDNO("Receipt Number"),DATABASE::"TCS Entry") ;
        TCSEntry.MODIFY;
      UNTIL TCSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCustomer@1170000032() : Code[20];
    VAR
      Customer@1170000000 : Record 18;
      LibrarySales@1500000 : Codeunit 130509;
      LibraryUtility@1500001 : Codeunit 131000;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Customer.FIELDNO("P.A.N. No."),DATABASE::Customer));
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateTCSNatureCollection@1170000035(VAR TCSNatureOfCollection@1170000000 : Record 16507);
    VAR
      LibraryUtility@1500000 : Codeunit 131000;
    BEGIN
      TCSNatureOfCollection.INIT;
      TCSNatureOfCollection.VALIDATE(
        Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(TCSNatureOfCollection.FIELDNO(Code),DATABASE::"TCS Nature Of Collection"),
        1,
        LibraryUtility.GetFieldLength(DATABASE::"TCS Nature Of Collection",TCSNatureOfCollection.FIELDNO(Code))));
      TCSNatureOfCollection.VALIDATE(Description,TCSNatureOfCollection.Code);
      TCSNatureOfCollection.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateTCSSetup@1500054(VAR TCSSetup@1170000000 : Record 16508;AssesseeCode@1170000002 : Code[10];TCSNatureCollectionCode@1170000001 : Code[10]);
    BEGIN
      WITH TCSSetup DO BEGIN
        VALIDATE("TCS Nature of Collection",TCSNatureCollectionCode);
        VALIDATE("Assessee Code",AssesseeCode);
        VALIDATE("Effective Date",WORKDATE);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithMultipleLines@1500049(VAR PurchaseHeader@1500000 : Record 38;GLAccNo@1500004 : Code[20];VendorNo@1500001 : Code[20];Quantity@1500005 : Decimal;TDSNature@1500002 : Code[20];Amount@1500006 : Decimal);
    VAR
      PurchaseLine@1500003 : Record 39;
      I@1500007 : Integer;
    BEGIN
      CreatePurchaseHeaderWithStructure(PurchaseHeader,VendorNo,PurchaseHeader."Document Type"::Invoice);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccNo,Quantity,Amount,TDSNature);
      FOR I := 1 TO 3 DO
        CreateMultiplePurchaseLineForGLAcc(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",Quantity,TDSNature,Amount);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleLines@1500017(VAR PurchaseHeader@1500000 : Record 38;GLAccNo@1500004 : Code[20];VendorNo@1500001 : Code[20];Quantity@1500005 : Decimal;TDSNature@1500002 : Code[20];Amount@1500006 : Decimal);
    VAR
      PurchaseLine@1500003 : Record 39;
      I@1500007 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      FOR I := 1 TO 3 DO
        CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,Amount,TDSNature);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithStructure@1500032(VAR PurchaseHeader@1500000 : Record 38;VendorNo@1500004 : Code[20];DocType@1500005 : Option);
    VAR
      StructureDetails@1500001 : Record 13793;
      ServiceTaxAsExciseHelper@1500002 : Codeunit 143003;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE(
        Structure,ServiceTaxAsExciseHelper.CreateStructure(StructureDetails.Type::"Service Tax"));
      PurchaseHeader.VALIDATE(PoT,TRUE);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500033(VAR PurchaseLine@1500000 : Record 39;VAR PurchaseHeader@1500001 : Record 38;Type@1500008 : Option;ItemNo@1500002 : Code[20];Quantity@1500003 : Decimal;DirectUnitCost@1500004 : Decimal;TDSNaturecode@1500005 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNaturecode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLineForGLAcc@1500037(VAR PurchaseLine@1500001 : Record 39;VAR PurchaseHeader@1500002 : Record 38;Type@1500005 : Option;Quantity@1500000 : Decimal;TDSNature@1500004 : Code[20];Amount@1500003 : Decimal);
    BEGIN
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,Type,LibraryERM.CreateGLAccountWithPurchSetup,Quantity,Amount,TDSNature);
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBaseInv@1500024(VAR ExpectedTDSEntry@1500001 : Record 13729;PurchaseHeader@1500004 : Record 38;VAR TaxBaseAmount@1500003 : Decimal;TDSSetup@1500005 : Record 13728;VAR TotalAmount@1500007 : Decimal);
    VAR
      PurchaseLine@1500000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
      REPEAT
        WITH ExpectedTDSEntry DO BEGIN
          "TDS Base Amount" := PurchaseLine."Qty. to Invoice"* PurchaseLine."Direct Unit Cost";
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
          "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
          "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
          TaxBaseAmount += "Total TDS Including SHE CESS";
          IF PurchaseLine."Qty. to Invoice" <> PurchaseLine.Quantity THEN
            TotalAmount += PurchaseLine."Qty. to Invoice"* PurchaseLine."Direct Unit Cost"
          ELSE
            TotalAmount += PurchaseLine.Amount;
        END;
      UNTIL PurchaseLine.NEXT=0;
    END;

    LOCAL PROCEDURE CreateBalanceaccount@1500014(BalAccType@1500000 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';VAR GenJournalLine@1500001 : Record 81);
    BEGIN
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
          BalAccType::Customer:
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::Customer);
            GenJournalLine.VALIDATE("Bal. Account No.",LibrarySales.CreateCustomerNo);
          END;
          BalAccType::Vendor:
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::Vendor);
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryTDS.CreateVendorWithPostingSetup);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateCashBankPaymentLines@1500004(VAR GenJournalLine@1500008 : Record 81;VendorNo@1500004 : Code[20];Amount@1500005 : Decimal;CodeContractor@1500006 : Code[10];BalAccType@1500002 : Option;Subtype@1500001 : Option;PartyType@1500003 : ' ,Party,Customer,Vendor');
    VAR
      GenJournalBatch@1500007 : Record 232;
      GenJournalTemplate@1500000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",Subtype);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CASE PartyType OF
        PartyType::Party:
          BEGIN
            LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",
              GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",
              LibraryERM.CreateGLAccountNo,Amount);
            GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Party);
          END;
        PartyType::Vendor:
          BEGIN
            LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",
              GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,
              VendorNo,Amount);
            GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
          END;
      END;
      CreateBalanceaccount(BalAccType,GenJournalLine);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentMultiLines@1500012(VAR GenJournalLine@1500005 : Record 81;NODNOCHeader@1500006 : Record 13786;TDSNatureDeduction@1500007 : Record 13726;TDSSetup@1500009 : Record 13728;ThresholdOverlook@1500016 : Boolean;SurchargeOverlook@1500015 : Boolean);
    VAR
      GenJournalBatch@1500001 : Record 232;
      GenJournalTemplate@1500000 : Record 80;
      NODNOCHeader2@1500004 : Record 13786;
      Amount1@1500002 : Decimal;
      Amount2@1500003 : Decimal;
      DocumentNo@1500010 : Code[20];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      Amount1  :=   LibraryRandom.RandDec(500,2);
      Amount2 :=   LibraryRandom.RandDec(1500,2);

      CreateNODNOCSetup(
        NODNOCHeader2,NODNOCHeader2.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,TDSSetup."Assessee Code",
        TDSNatureDeduction.Code,'',ThresholdOverlook,SurchargeOverlook);
      DocumentNo := CreatePaymentLines(GenJournalLine,NODNOCHeader."No.",Amount1,TDSNatureDeduction.Code,GenJournalBatch,'','');
      CreatePaymentLines(GenJournalLine,NODNOCHeader2."No.",Amount2,TDSNatureDeduction.Code,GenJournalBatch,DocumentNo,'');
      CreateBankLines(GenJournalLine,-(Amount1+Amount2),GenJournalBatch,DocumentNo);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500018();
    VAR
      DeductorCategory@1500001 : Record 16498;
      CompanyInformation@1500000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentLines@1500020(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500002 : Code[20];Amount@1500003 : Decimal;CodeContractor@1500005 : Code[10];GenJournalBatch@1500004 : Record 232;DocumentNo@1500001 : Code[20];CodeOthers@1500006 : Code[20]) : Code[20];
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      IF DocumentNo <> '' THEN
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Work Tax Nature Of Deduction",CodeOthers);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateBankLines@1500006(VAR GenJournalLine@1500002 : Record 81;Amount@1500000 : Decimal;GenJournalBatch@1500004 : Record 232;DocumentNo@1500001 : Code[20]) DocNo : Code[20];
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,Amount);
      IF DocumentNo <> '' THEN
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      DocNo := GenJournalLine."Document No.";
      EXIT(DocNo);
    END;

    LOCAL PROCEDURE CreateAndPostBankPaymentVoucher@1500038(NODNOCHeader@1500005 : Record 13786;TDSNatureDeduction@1500006 : Record 13726;VAR GenJournalLine@1500004 : Record 81);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
      Amount@1500002 : Decimal;
      DocumentNo@1500003 : Code[20];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount  :=   LibraryRandom.RandDec(1000,2);
      DocumentNo := CreatePaymentLines(GenJournalLine,NODNOCHeader."No.",Amount,'',GenJournalBatch,'',TDSNatureDeduction.Code);
      CreateBankLines(GenJournalLine,-Amount,GenJournalBatch,DocumentNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@1500029(VAR PurchaseHeader@1500007 : Record 38;VAR PurchaseLine@1500006 : Record 39;DocumentType@1500005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';VendorNo@1500004 : Code[20];LineType@1500003 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';Amount@1500002 : Decimal;CodeContractor@1500001 : Code[10];CodeOthers@1500000 : Code[10]);
    VAR
      FixedAsset@1500008 : Record 5600;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      IF LineType =LineType::"G/L Account" THEN
        PurchaseLine.VALIDATE("No.",LibraryERM.CreateGLAccountWithPurchSetup);
      IF LineType = LineType::"Fixed Asset" THEN BEGIN
        LibraryERM.CreateFixedAsset(FixedAsset);
        PurchaseLine.VALIDATE("No.",FixedAsset."No.");
      END;
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500000(VAR ExpectedTDSAmtPurchaseLine@1500000 : Record 39;PurchaseLine@1500003 : Record 39;TDSSetup@1500002 : Record 13728);
    BEGIN
      WITH ExpectedTDSAmtPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := PurchaseLine.Amount;
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * "TDS Base Amount"));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@1500036(VAR NODNOCHeader@1500008 : Record 13786;Type@1500007 : Option;No@1500006 : Code[20];AssesseeCode@1500005 : Code[10];CodeContractor@1500004 : Code[10];CodeOthers@1500003 : Code[10];ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean);
    VAR
      NODNOCLines@1500009 : Record 13785;
      MonthlyCert@1500010 : Boolean;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor);
      IF CodeOthers <> '' THEN
        LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeOthers);
      LibraryTDS.UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type,ThresholdOverlook,SurchargeOverlook,MonthlyCert);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@150099();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500040(IncomeTaxAccountingPeriodNo@1500000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetup@1500043(VAR TDSNatureDeduction@1500003 : Record 13726;TDSGroup@1500002 : Option;AssesseeCode@1500001 : Code[10];VAR TDSSetup@1500000 : Record 13728);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      CreateTDSSetUp(TDSSetup,TDSNatureDeduction.Code,AssesseeCode);
    END;

    LOCAL PROCEDURE CalculateExpectedWorkTaxFromBase@1500042(VAR ExpectedTDSEntry@1500000 : Record 13729;TDSSetup@1500002 : Record 13728;WorkTaxBaseAmount@1500001 : Decimal);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "Work Tax Base Amount" := WorkTaxBaseAmount;
        "Work Tax Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "Work Tax Base Amount");
      END;
    END;

    LOCAL PROCEDURE CreateTDSSetUp@1500016(VAR TDSSetup@1500002 : Record 13728;TDSNatureDeductionCode@1500001 : Code[10];AssesseeCode@1500000 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,WORKDATE,'');
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLEntry@1500041(VAR GLEntry@1500002 : Record 17;DocumentType@1500001 : Option;DocumentNo@1500000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE GetRequiredDateFromWorkDate@1500044(Days@1500000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500048(DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      CreditAmount@1500003 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500051(DocumentNo@1500001 : Code[20];ExpectedCount@1500000 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryforTDS@1500030(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
      CreditAmount@1500002 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(VAR ExpectedPurchaseLineTDSValue@1500005 : Record 39;PurchaseLine@1500007 : Record 39;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      GLSetup@1500003 : Record 98;
      PurchLine@1500002 : Record 39;
      RoundingPrecision@1500000 : Decimal;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchLine.FINDFIRST;

      GLSetup.GET;
      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."TDS %",PurchLine."TDS %",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS %"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Amount",PurchLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Base Amount",PurchLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Base Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."eCESS % on TDS",PurchLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS % on TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."eCESS on TDS Amount",PurchLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess % On TDS",PurchLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess % On TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess on TDS Amount",PurchLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."Total TDS Including SHE CESS",PurchLine."Total TDS Including SHE CESS",
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("Total TDS Including SHE CESS"),PurchLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE GetThresholdAmount@1500427(TDSGroupCode@1500198 : Option) : Decimal;
    VAR
      TDSGroup@1500199 : Record 13731;
    BEGIN
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TDSGroupCode);
        FINDFIRST;
        VALIDATE("TDS Threshold Amount",LibraryRandom.RandDecInRange(1000,1500,2));
        MODIFY(TRUE);
        EXIT("TDS Threshold Amount");
      END;
    END;

    LOCAL PROCEDURE GetThresholdAmountInv@1500031(TDSGroupCode@1500198 : Option;VAR ThresholdValue@1500000 : Decimal;VAR PerContract@1500001 : Decimal) : Decimal;
    VAR
      TDSGroup@1500199 : Record 13731;
    BEGIN
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TDSGroupCode);
        FINDLAST;
        VALIDATE("Per Contract Value",LibraryRandom.RandDec(100,2));
        VALIDATE("TDS Threshold Amount",LibraryRandom.RandDec(1000,2));
        ThresholdValue := "TDS Threshold Amount" ;
        PerContract := "Per Contract Value";
        MODIFY(TRUE);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500027(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsPartial@1500034(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500028.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500025(PurchaseHeader@1500000 : Record 38;Amount@1500001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(Amount);
      OpenPurchaseOrderStatistics(PurchaseHeader);
    END;

    PROCEDURE OpenPurchaseOrderStatistics@1500028(PurchaseHeader@1500001 : Record 38);
    VAR
      PurchasesPayablesSetup@1500000 : Record 312;
      PurchaseLine@1500002 : Record 39;
    BEGIN
      PurchasesPayablesSetup.GET;
      WITH PurchaseHeader DO BEGIN
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.FINDSET;
        IF PurchasesPayablesSetup."Calc. Inv. Discount" THEN
          CalcInvDiscForHeader;
        REPEAT
          IF Structure <> '' THEN BEGIN
            PurchaseLine.CalculateStructures(PurchaseHeader);
            PurchaseLine.AdjustStructureAmounts(PurchaseHeader);
            PurchaseLine.UpdatePurchLines(PurchaseHeader);
          END;
          PurchaseLine.CalculateTDS(PurchaseHeader);
        UNTIL PurchaseLine.NEXT =0;
        PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",PurchaseHeader);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerTDSEntries@1500055(VAR GeneralJournalTest@1500000 : TestRequestPage 2);
    BEGIN
      GeneralJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE ChangeQtyToReceive@1500023(PurchaseHeader@1500000 : Record 38;Qty@1500002 : Decimal);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
      REPEAT
        IF Qty <>0 THEN
          PurchaseLine.VALIDATE("Qty. to Receive",Qty)
        ELSE
          PurchaseLine.VALIDATE("Qty. to Receive",(PurchaseLine.Quantity-PurchaseLine."Quantity Received"));
        PurchaseLine.MODIFY(TRUE);
      UNTIL PurchaseLine.NEXT=0;
    END;

    LOCAL PROCEDURE VerifylPostedInvoiceWithInvoice@1500057(DocumentNo@1500000 : Code[20];ExpectedAmount@1500002 : Decimal);
    VAR
      PurchInvLine@1500001 : Record 123;
      Amount@1500003 : Decimal;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDSET;
      REPEAT
        Amount += PurchInvLine."Total TDS Including SHE CESS";
      UNTIL PurchInvLine.NEXT=0;
      Assert.AreEqual(ExpectedAmount,Amount,STRSUBSTNO(CreditAmountErr,ExpectedAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntryWithRemainingAmount@1500072(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)","Remaining Amount","Original Amount");
      VendorLedgerEntry.TESTFIELD(Open,TRUE);
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Remaining Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Original Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Original Amount"),Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Amount (LCY)"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),Amount,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500039(DocumentNo@1500002 : Code[20];ExpectedAmount@1500000 : Decimal);
    VAR
      TDSEntry@1500001 : Record 13729;
      TotalTDSAmount@1500003 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.FINDSET;
      REPEAT
        TotalTDSAmount += TDSEntry."Total TDS Including SHE CESS";
      UNTIL TDSEntry.NEXT=0;
      Assert.AreEqual(ExpectedAmount,TotalTDSAmount,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Total TDS Including SHE CESS"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherWithBalanceBankAcc@1500064(VAR GenJournalLine@1500002 : Record 81;GLAccountNo@1500003 : Code[20]);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
      CompanyInformation@1500004 : Record 79;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",GLAccountNo,GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,0);
      CompanyInformation.GET;
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAccountNumberInTDSGroup@1500075(TDSGroup@1500001 : Option;VAR TDSGroups@1500000 : Record 13731);
    BEGIN
      TDSGroups.SETRANGE("TDS Group",TDSGroup);
      TDSGroups.FINDFIRST;
      TDSGroups.VALIDATE("TDS Account",LibraryERM.CreateGLAccountNo);
      TDSGroups.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PayTDS@1500061(VAR GenJournalLine@1500000 : Record 81);
    VAR
      PayTDS1@1500001 : Page 13788;
      TDSEntry@1500002 : Record 13729;
    BEGIN
      WITH GenJournalLine DO BEGIN
        TESTFIELD("Document No.");
        TESTFIELD("Account No.");
        TESTFIELD("T.A.N. No.");
        "Pay TDS" := TRUE;
        MODIFY;
        TDSEntry.RESET;
        TDSEntry.SETRANGE("Account No.","Account No.");
        TDSEntry.SETRANGE("T.A.N. No.","T.A.N. No.");
        TDSEntry.SETFILTER("Total TDS Including SHE CESS",'<>%1',0);
        TDSEntry.SETRANGE("TDS Paid",FALSE);
        TDSEntry.SETRANGE(Reversed,FALSE);
        IF TDSEntry.FINDFIRST THEN BEGIN
          PayTDS1.SetBatch("Journal Batch Name","Journal Template Name","Line No.");
          PayTDS1.PayTDS(TDSEntry)
        END ELSE
          ERROR(AccountErr,"Account No.");
      END;
    END;

    LOCAL PROCEDURE GetTaxEntry@1500058(DocumentNo@1500001 : Code[20];GLAccNo@1500003 : Code[20];VAR Amount@1500000 : Decimal) : Decimal;
    VAR
      TDSEntry@1500002 : Record 13729;
    BEGIN
      TDSEntry.SETRANGE("Pay TDS Document No.",DocumentNo);
      TDSEntry.SETRANGE("Account No.",GLAccNo);
      TDSEntry.SETRANGE("TDS Paid",FALSE);
      IF TDSEntry.FINDSET THEN
        REPEAT
          Amount := Amount + TDSEntry."Bal. TDS Including SHE CESS";
        UNTIL TDSEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

