OBJECT Codeunit 134138 ERM Reverse Blocked Customer
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE InvoiceWithShipBlocked@42();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Invoice with Random Amount, Block Customer with Ship and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Invoice,Customer.Blocked::Ship,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PaymentWithInvoiceBlocked@5();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Payment with Random Amount, Block Customer with Invoice and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Payment,Customer.Blocked::Invoice,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PaymentWithShipBlocked@40();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Payment with Random Amount, Block Customer with Ship and Reverse posted entries.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Payment,Customer.Blocked::Ship,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CreditMemoWithInvoiceBlocked@10();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Credit Memo with Random Amount, Block Customer with Invoice and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::"Credit Memo",Customer.Blocked::Invoice,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CreditMemoWithShipBlocked@41();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Credit Memo with Random Amount, Block Customer with Ship and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::"Credit Memo",Customer.Blocked::Ship,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE FinChargeMemoInvoiceBlocked@31();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Fin. Charge Memo with Random Amount, Block Customer with Invoice, Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::"Finance Charge Memo",Customer.Blocked::Invoice,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE FinChargeMemoShipBlocked@37();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Fin. Charge Memo with Random Amount, Block Customer with Ship, Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::"Finance Charge Memo",Customer.Blocked::Ship,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReminderWithInvoiceBlocked@32();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Reminder with Random Amount, Block Customer with Invoice and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Reminder,Customer.Blocked::Invoice,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReminderWithShipBlocked@36();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Reminder with Random Amount, Block Customer with Ship and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Reminder,Customer.Blocked::Ship,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE RefundWithInvoiceBlocked@33();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Refund with Random Amount, Block Customer with Invoice and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Refund,Customer.Blocked::Invoice,LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE RefundWithShipBlocked@35();
    VAR
      Customer@1007 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Customer after Posting Refund with Random Amount, Block Customer with Ship and Reverse posted entry.
      Initialize;
      ReverseBlockedCustomerDocument(
        GenJournalLine."Document Type"::Refund,Customer.Blocked::Ship,LibraryRandom.RandDec(50,2));
    END;

    LOCAL PROCEDURE ReverseBlockedCustomerDocument@2(DocumentType@1010 : Option;BlockedType@1009 : Option;Amount@1011 : Decimal);
    VAR
      Customer@1003 : Record 18;
      GLRegister@1001 : Record 45;
      ReversalEntry@1000 : Record 179;
      LibrarySales@1006 : Codeunit 130509;
    BEGIN
      // Setup: Create a Customer. Create and Post General Journal Line. Change Value of Blocked field as per the option for Customer.
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostGenJournalLine(Customer."No.",DocumentType,Amount);
      BlockCustomerByOption(Customer,BlockedType);

      // Exercise: Reverse the posted Transaction and clear Customer Blocked field after Reversing Entries.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");
      BlockCustomerByOption(Customer,Customer.Blocked::" ");

      // Verify: Verify that Balance is Zero for the Customer after Reversing the posted entry.
      Customer.CALCFIELDS(Balance);
      Customer.TESTFIELD(Balance,0);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@13(CustomerNo@1009 : Code[20];DocumentType@1000 : Option;Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1002 : Record 81;
      LibraryERM@1003 : Codeunit 131300;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE BlockCustomerByOption@22(VAR Customer@1000 : Record 18;Blocked@1001 : Option);
    BEGIN
      // Modify value of Blocked field for Customer as per Option selected.
      Customer.VALIDATE(Blocked,Blocked);
      Customer.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Blocked] [Customer]
      Test Customer Balance after posting multiple documents and different Block Options on Customer.
         1. Test Customer Balance after Posting Invoice, Block Customer with Ship and Reversing posted entry.
         2. Test Customer Balance after Posting Payment, Block Customer with Invoice and Reversing posted entry.
         3. Test Customer Balance after Posting Payment, Block Customer with Ship and Reversing posted entry.
         4. Test Customer Balance after Posting Credit Memo, Block Customer with Invoice and Reversing posted entry.
         5. Test Customer Balance after Posting Credit Memo, Block Customer with Ship and Reversing posted entry.
         6. Test Customer Balance after Posting Finance Charge Memo, Block Customer with Invoice and Reversing posted entry.
         7. Test Customer Balance after Posting Finance Charge Memo, Block Customer with Ship and Reversing posted entry.
         8. Test Customer Balance after Posting Reminder, Block Customer with Invoice and Reversing posted entry.
         9. Test Customer Balance after Posting Reminder, Block Customer with Ship and Reversing posted entry.
        10. Test Customer Balance after Posting Refund, Block Customer with Invoice and Reversing posted entry.
        11. Test Customer Balance after Posting Refund, Block Customer with Ship and Reversing posted entry.

      Covers Test Case:
        -------------------------------------------------------------
          Test Function Name                        TFS ID
        -------------------------------------------------------------
          InvoiceWithShipBlocked            126211, 126214, 126215.
          PaymentWithInvoiceBlocked         126211, 126212, 126213.
          PaymentWithShipBlocked            126211, 126214, 126215.
          CreditMemoWithInvoiceBlocked      126211, 126212, 126213.
          CreditMemoWithShipBlocked         126211, 126214, 126215.
          FinChargeMemoInvoiceBlocked       126211, 126212, 126213.
          FinChargeMemoShipBlocked          126211, 126214, 126215.
          ReminderWithInvoiceBlocked        126211, 126212, 126213.
          ReminderWithShipBlocked           126211, 126214, 126215.
          RefundWithInvoiceBlocked          126211, 126212, 126213.
          RefundWithShipBlocked             126211, 126214, 126215.
    }
    END.
  }
}

