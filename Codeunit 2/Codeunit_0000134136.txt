OBJECT Codeunit 134136 ERM Reverse Customer Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1005 : Codeunit 131300;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountError@1004 : TextConst 'ENU="%1 must be %2 in %3, %4=%5."';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseInvoice@7();
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Invoice Entry for a Customer.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFinanceChargeMemo@11();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Finance Charge Memo Entry for a Customer.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::"Finance Charge Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseReminder@13();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Reminder Entry for a Customer.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::Reminder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRefund@12();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Refund Entry for a Customer.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::Refund);
    END;

    LOCAL PROCEDURE ReverseDebitDocument@17(DocumentType@1007 : Option);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
      GeneralLedgerSetup@1001 : Record 98;
      DebitAmountLCY@1000 : Decimal;
    BEGIN
      // Create a Customer, Currency and Post General Journal Line with a Random Positive Amount. Reverse the Posted Entry.
      GeneralLedgerSetup.GET;
      DebitAmountLCY := ReverseDocument(DetailedCustLedgEntry,DocumentType,LibraryRandom.RandDec(10,2));

      // Verify: Verify Debit Amount LCY in Detailed Customer Ledger Entries.
      Assert.AreNearlyEqual(
        DebitAmountLCY,DetailedCustLedgEntry."Debit Amount (LCY)",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(AmountError,DetailedCustLedgEntry.FIELDCAPTION("Debit Amount (LCY)"),DebitAmountLCY,
          DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReversePayment@8();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Payment Entry for a Customer.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseCreditMemo@10();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Credit Memo Entry for a Customer.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE ReverseCreditDocument@16(DocumentType@1007 : Option);
    VAR
      DetailedCustLedgEntry@1003 : Record 379;
      GeneralLedgerSetup@1002 : Record 98;
      CreditAmountLCY@1000 : Decimal;
    BEGIN
      // Create a Customer, Currency and Post General Journal Line with a Random Negative Amount. Reverse the Posted Entry.
      GeneralLedgerSetup.GET;
      CreditAmountLCY := -ReverseDocument(DetailedCustLedgEntry,DocumentType,-LibraryRandom.RandDec(10,2));

      // Verify: Verify Credit Amount LCY in Detailed Customer Ledger Entries.
      Assert.AreNearlyEqual(
        CreditAmountLCY,DetailedCustLedgEntry."Credit Amount (LCY)",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(AmountError,DetailedCustLedgEntry.FIELDCAPTION("Credit Amount (LCY)"),CreditAmountLCY,
          DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ReverseDocument@3(VAR DetailedCustLedgEntry@1005 : Record 379;DocumentType@1007 : Option;Amount@1008 : Decimal) AmountLCY : Decimal;
    VAR
      GenJournalLine@1000 : Record 81;
      GLRegister@1004 : Record 45;
      ReversalEntry@1003 : Record 179;
    BEGIN
      // Setup: Create Customer, Create Genenral Journal Line with different Document Types, new Currency and Post it.
      CreateGeneralJournalLine(GenJournalLine,DocumentType,Amount,CreateCurrency);
      AmountLCY := LibraryERM.ConvertCurrency(Amount,GenJournalLine."Currency Code",'',WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Reverse posted Transaction.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");

      // Find Detailed Customer Ledger Entry to verify Debit Amount(LCY) or Credit Amount (LCY).
      FindDtldCustomerLedgerEntries(DetailedCustLedgEntry,GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@23(VAR GenJournalLine@1007 : Record 81;DocumentType@1000 : Option;Amount@1003 : Decimal;CurrencyCode@1005 : Code[10]);
    VAR
      GenJournalBatch@1001 : Record 232;
      Customer@1004 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,Customer."No.",Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDtldCustomerLedgerEntries@14(VAR DetailedCustLedgEntry@1000 : Record 379;DocumentNo@1001 : Code[20]);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::Application);
      DetailedCustLedgEntry.FINDLAST;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Detailed Ledger Entry] [Sales]
      Test Reversal of different Documents for Customer after posting General Journal Line.
        1. Test Detailed Customer Ledger Entries after Reversing Posted Invoice Entry for a Customer.
        2. Test Detailed Customer Ledger Entries after Reversing Posted Finance Charge Memo Entry for a Customer.
        3. Test Detailed Customer Ledger Entries after Reversing Posted Reminder Entry for a Customer.
        4. Test Detailed Customer Ledger Entries after Reversing Posted Refund Entry for a Customer.
        5. Test Detailed Customer Ledger Entries after Reversing Posted Payment Entry for a Customer.
        6. Test Detailed Customer Ledger Entries after Reversing Posted Credit Memo Entry for a Customer.

      Covers Test Case:
        --------------------------------------------------------------------------------------------
          Test Function Name                                    TFS ID
        --------------------------------------------------------------------------------------------
          ReverseInvoice                     126216, 126217, 126218, 126219, 126220, 126226, 126229.
          ReverseFinanceChargeMemo           126216, 126217, 126218, 126219, 126223, 126232.
          ReverseReminder                    126216, 126217, 126218, 126219, 126224, 122933.
          ReverseRefund                      126216, 126217, 126218, 126219, 126225, 122934.
          ReversePayment                     126216, 126217, 126218, 126219, 126221, 122930.
          ReverseCreditMemo                  126216, 126217, 126218, 126219, 126222, 122931.
    }
    END.
  }
}

