OBJECT Codeunit 132202 Library - Manufacturing
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ManufacturingSetup@1002 : Record 99000765;
      LibraryUtility@1001 : Codeunit 131000;
      LibraryInventory@1006 : Codeunit 132201;
      TemplateName@1007 : TextConst 'ENU=FOR. LABOR';
      BatchName@1005 : TextConst '@@@=Default Batch;ENU=DEFAULT';
      LibraryERM@1000 : Codeunit 131300;

    PROCEDURE CalculateConsumption@39(ProductionOrderNo@1001 : Code[20];ItemJournalTemplateName@1004 : Code[10];ItemJournalBatchName@1005 : Code[10]);
    VAR
      ProductionOrder@1002 : Record 5405;
      CalcConsumption@1000 : Report 5405;
      CalcBasedOn@1003 : 'Actual Output,Expected Output';
    BEGIN
      CalcConsumption.InitializeRequest(WORKDATE,CalcBasedOn::"Expected Output");
      CalcConsumption.SetTemplateAndBatchName(ItemJournalTemplateName,ItemJournalBatchName);
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("No.",ProductionOrderNo);
      CalcConsumption.SETTABLEVIEW(ProductionOrder);
      CalcConsumption.USEREQUESTPAGE(FALSE);
      CalcConsumption.RUNMODAL;
    END;

    PROCEDURE CalculateConsumptionForJournal@29(VAR ProductionOrder@1005 : Record 5405;VAR ProdOrderComponent@1006 : Record 5407;PostingDate@1000 : Date;ActualOutput@1001 : Boolean);
    VAR
      TmpProductionOrder@1007 : Record 5405;
      TmpProdOrderComponent@1002 : Record 5407;
      ItemJournalTemplate@1008 : Record 82;
      ItemJournalBatch@1009 : Record 233;
      CalcConsumption@1004 : Report 5405;
      CalcBasedOn@1003 : 'Actual Output,Expected Output';
    BEGIN
      COMMIT;
      IF ActualOutput THEN
        CalcBasedOn := CalcBasedOn::"Actual Output"
      ELSE
        CalcBasedOn := CalcBasedOn::"Expected Output";
      CalcConsumption.InitializeRequest(PostingDate,CalcBasedOn);
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Consumption);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      CalcConsumption.SetTemplateAndBatchName(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      IF ProductionOrder.HASFILTER THEN
        TmpProductionOrder.COPYFILTERS(ProductionOrder)
      ELSE BEGIN
        ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
        TmpProductionOrder.SETRANGE(Status,ProductionOrder.Status);
        TmpProductionOrder.SETRANGE("No.",ProductionOrder."No.");
      END;
      CalcConsumption.SETTABLEVIEW(TmpProductionOrder);
      IF ProdOrderComponent.HASFILTER THEN
        TmpProdOrderComponent.COPYFILTERS(ProdOrderComponent)
      ELSE BEGIN
        ProdOrderComponent.GET(ProdOrderComponent.Status,ProdOrderComponent."Prod. Order No.",
          ProdOrderComponent."Prod. Order Line No.",ProdOrderComponent."Line No.");
        TmpProdOrderComponent.SETRANGE(Status,ProdOrderComponent.Status);
        TmpProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderComponent."Prod. Order No.");
        TmpProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderComponent."Prod. Order Line No.");
        TmpProdOrderComponent.SETRANGE("Line No.",ProdOrderComponent."Line No.");
      END;
      CalcConsumption.SETTABLEVIEW(TmpProdOrderComponent);
      CalcConsumption.USEREQUESTPAGE(FALSE);
      CalcConsumption.RUNMODAL;
    END;

    PROCEDURE CalculateMachCenterCalendar@19(VAR MachineCenter@1000 : Record 99000758;StartingDate@1001 : Date;EndingDate@1002 : Date);
    VAR
      TmpMachineCenter@1004 : Record 99000758;
      CalcMachineCenterCalendar@1003 : Report 99001045;
    BEGIN
      COMMIT;
      CalcMachineCenterCalendar.InitializeRequest(StartingDate,EndingDate);
      IF MachineCenter.HASFILTER THEN
        TmpMachineCenter.COPYFILTERS(MachineCenter)
      ELSE BEGIN
        MachineCenter.GET(MachineCenter."No.");
        TmpMachineCenter.SETRANGE("No.",MachineCenter."No.");
      END;
      CalcMachineCenterCalendar.SETTABLEVIEW(TmpMachineCenter);
      CalcMachineCenterCalendar.USEREQUESTPAGE(FALSE);
      CalcMachineCenterCalendar.RUNMODAL;
    END;

    PROCEDURE CalculateWorksheetPlan@32(VAR Item@1002 : Record 27;OrderDate@1001 : Date;ToDate@1000 : Date);
    VAR
      TempItem@1004 : TEMPORARY Record 27;
      ReqWkshTemplate@1005 : Record 244;
      RequisitionWkshName@1006 : Record 245;
      CalculatePlanPlanWksh@1007 : Report 99001017;
    BEGIN
      COMMIT;
      CalculatePlanPlanWksh.InitializeRequest(OrderDate,ToDate,FALSE);
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::Planning);
      ReqWkshTemplate.FINDFIRST;
      RequisitionWkshName.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
      RequisitionWkshName.FINDFIRST;
      CalculatePlanPlanWksh.SetTemplAndWorksheet(RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,TRUE);
      IF Item.HASFILTER THEN
        TempItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TempItem.SETRANGE("No.",Item."No.");
      END;
      CalculatePlanPlanWksh.SETTABLEVIEW(TempItem);
      CalculatePlanPlanWksh.USEREQUESTPAGE(FALSE);
      CalculatePlanPlanWksh.RUNMODAL;
    END;

    PROCEDURE CalculateSubcontractOrder@36(VAR WorkCenter@1000 : Record 99000754);
    VAR
      RequisitionLine@1002 : Record 246;
      CalculateSubcontracts@1001 : Report 99001015;
    BEGIN
      RequisitionLineForSubcontractOrder(RequisitionLine);
      CalculateSubcontracts.SetWkShLine(RequisitionLine);
      CalculateSubcontracts.SETTABLEVIEW(WorkCenter);
      CalculateSubcontracts.USEREQUESTPAGE(FALSE);
      CalculateSubcontracts.RUNMODAL;
    END;

    PROCEDURE CalculateWorkCenterCalendar@12(VAR WorkCenter@1000 : Record 99000754;StartingDate@1001 : Date;EndingDate@1002 : Date);
    VAR
      TmpWorkCenter@1004 : Record 99000754;
      CalculateWorkCenterCalendar@1003 : Report 99001046;
    BEGIN
      COMMIT;
      CalculateWorkCenterCalendar.InitializeRequest(StartingDate,EndingDate);
      IF WorkCenter.HASFILTER THEN
        TmpWorkCenter.COPYFILTERS(WorkCenter)
      ELSE BEGIN
        WorkCenter.GET(WorkCenter."No.");
        TmpWorkCenter.SETRANGE("No.",WorkCenter."No.");
      END;
      CalculateWorkCenterCalendar.SETTABLEVIEW(TmpWorkCenter);
      CalculateWorkCenterCalendar.USEREQUESTPAGE(FALSE);
      CalculateWorkCenterCalendar.RUNMODAL;
    END;

    PROCEDURE CalculateSubcontractOrderWithProdOrderRoutingLine@17(VAR ProdOrderRoutingLine@1003 : Record 5409);
    VAR
      RequisitionLine@1002 : Record 246;
      TmpProdOrderRoutingLine@1005 : Record 5409;
      CalculateSubcontracts@1000 : Report 99001015;
    BEGIN
      IF ProdOrderRoutingLine.HASFILTER THEN
        TmpProdOrderRoutingLine.COPYFILTERS(ProdOrderRoutingLine)
      ELSE BEGIN
        ProdOrderRoutingLine.GET(ProdOrderRoutingLine."No.");
        TmpProdOrderRoutingLine.SETRANGE("No.",ProdOrderRoutingLine."No.");
      END;

      RequisitionLineForSubcontractOrder(RequisitionLine);
      CalculateSubcontracts.SetWkShLine(RequisitionLine);
      CalculateSubcontracts.SETTABLEVIEW(TmpProdOrderRoutingLine);
      CalculateSubcontracts.USEREQUESTPAGE(FALSE);
      CalculateSubcontracts.RUNMODAL;
    END;

    PROCEDURE ChangeProdOrderStatus@35(VAR ProductionOrder@1000 : Record 5405;NewStatus@1001 : Option;PostingDate@1002 : Date;UpdateUnitCost@1003 : Boolean);
    VAR
      ProdOrderStatusMgt@1004 : Codeunit 5407;
    BEGIN
      ProdOrderStatusMgt.ChangeStatusOnProdOrder(ProductionOrder,NewStatus,PostingDate,UpdateUnitCost);
    END;

    PROCEDURE ChangeStatusPlannedToFinished@30(ProductionOrderNo@1000 : Code[20]) : Code[20];
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderStatusManagement@1002 : Codeunit 5407;
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status::Planned,ProductionOrderNo);
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,ProductionOrder.Status::Released,WORKDATE,FALSE);
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("Source No.",ProductionOrder."Source No.");
      ProductionOrder.FINDFIRST;
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,ProductionOrder.Status::Finished,WORKDATE,FALSE);
      EXIT(ProductionOrder."No.");
    END;

    PROCEDURE ChangeStatusReleasedToFinished@48(ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderStatusManagement@1002 : Codeunit 5407;
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status::Released,ProductionOrderNo);
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,ProductionOrder.Status::Finished,WORKDATE,FALSE);
    END;

    PROCEDURE ChangeStatusFirmPlanToReleased@124(ProductionOrderNo@1003 : Code[20];FromStatus@1001 : Option;ToStatus@1004 : Option) : Code[20];
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderStatusManagement@1002 : Codeunit 5407;
    BEGIN
      ProductionOrder.GET(FromStatus,ProductionOrderNo);
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,ToStatus,WORKDATE,TRUE);
      ProductionOrder.SETRANGE(Status,ToStatus);
      ProductionOrder.SETRANGE("Source No.",ProductionOrder."Source No.");
      ProductionOrder.FINDFIRST;
      EXIT(ProductionOrder."No.");
    END;

    PROCEDURE ChangeStatusSimulatedToReleased@18(ProductionOrderNo@1003 : Code[20]) : Code[20];
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      EXIT(ChangeStatusFirmPlanToReleased(ProductionOrderNo,ProductionOrder.Status::Simulated,ProductionOrder.Status::Released));
    END;

    PROCEDURE CreateBOMComponent@1(VAR BOMComponent@1000 : Record 90;ParentItemNo@1001 : Code[20];Type@1003 : Option;No@1004 : Code[20];QuantityPer@1006 : Decimal;UnitOfMeasureCode@1005 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      BOMComponent.INIT;
      BOMComponent.VALIDATE("Parent Item No.",ParentItemNo);
      RecRef.GETTABLE(BOMComponent);
      BOMComponent.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,BOMComponent.FIELDNO("Line No.")));
      BOMComponent.INSERT(TRUE);
      BOMComponent.VALIDATE(Type,Type);
      IF BOMComponent.Type <> BOMComponent.Type::" " THEN BEGIN
        BOMComponent.VALIDATE("No.",No);
        BOMComponent.VALIDATE("Quantity per",QuantityPer);
        IF UnitOfMeasureCode <> '' THEN
          BOMComponent.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      END;
      BOMComponent.MODIFY(TRUE);
    END;

    PROCEDURE CreateCalendarAbsenceEntry@9(VAR CalendarAbsenceEntry@1000 : Record 99000760;CapacityType@1001 : 'Work Center,Machine Center';No@1002 : Code[20];Date@1003 : Date;StartingTime@1004 : Time;EndingTime@1005 : Time;Capacity@1006 : Decimal);
    BEGIN
      CalendarAbsenceEntry.INIT;
      CalendarAbsenceEntry.VALIDATE("Capacity Type",CapacityType);
      CalendarAbsenceEntry.VALIDATE("No.",No);
      CalendarAbsenceEntry.VALIDATE(Date,Date);
      CalendarAbsenceEntry.VALIDATE("Starting Time",StartingTime);
      CalendarAbsenceEntry.VALIDATE("Ending Time",EndingTime);
      CalendarAbsenceEntry.INSERT(TRUE);
      CalendarAbsenceEntry.VALIDATE(Capacity,Capacity);
      CalendarAbsenceEntry.MODIFY(TRUE);
    END;

    PROCEDURE CreateCapacityConstrainedResource@131(VAR CapacityConstrainedResource@1000 : Record 99000866;CapacityType@1001 : Option;CapacityNo@1002 : Code[20]);
    BEGIN
      CLEAR(CapacityConstrainedResource);
      CapacityConstrainedResource.INIT;
      CapacityConstrainedResource.VALIDATE("Capacity Type",CapacityType);
      CapacityConstrainedResource.VALIDATE("Capacity No.",CapacityNo);
      CapacityConstrainedResource.INSERT(TRUE);
    END;

    PROCEDURE CreateCapacityUnitOfMeasure@28(VAR CapacityUnitOfMeasure@1000 : Record 99000780;Type@1001 : Integer);
    BEGIN
      CapacityUnitOfMeasure.INIT;
      CapacityUnitOfMeasure.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(CapacityUnitOfMeasure.FIELDNO(Code),DATABASE::"Capacity Unit of Measure"));
      CapacityUnitOfMeasure.INSERT(TRUE);
      CapacityUnitOfMeasure.VALIDATE(Type,Type);
      CapacityUnitOfMeasure.MODIFY(TRUE);
    END;

    PROCEDURE CreateFamily@115(VAR Family@1000 : Record 99000773);
    BEGIN
      Family.INIT;
      Family.VALIDATE("No.",LibraryUtility.GenerateRandomCode(Family.FIELDNO("No."),DATABASE::Family));
      Family.INSERT(TRUE);
      Family.VALIDATE(Description,Family."No.");
      Family.MODIFY(TRUE);
    END;

    PROCEDURE CreateFamilyLine@113(VAR FamilyLine@1001 : Record 99000774;FamilyNo@1000 : Code[20];ItemNo@1002 : Code[20];Qty@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      FamilyLine.INIT;
      FamilyLine.VALIDATE("Family No.",FamilyNo);
      RecRef.GETTABLE(FamilyLine);
      FamilyLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FamilyLine.FIELDNO("Line No.")));
      FamilyLine.INSERT(TRUE);
      FamilyLine.VALIDATE("Item No.",ItemNo);
      FamilyLine.VALIDATE(Quantity,Qty);
      FamilyLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemManufacturing@10(VAR Item@1008 : Record 27;CostingMethod@1001 : Option;UnitCost@1000 : Decimal;ReorderPolicy@1002 : Option;FlushingMethod@1003 : Option;RoutingNo@1004 : Code[20];ProductionBOMNo@1005 : Code[20]);
    VAR
      InventoryPostingSetup@1007 : Record 5813;
    BEGIN
      // Create Item extended for Manufacturing.
      LibraryInventory.CreateItemManufacturing(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      IF Item."Costing Method" = Item."Costing Method"::Standard THEN
        Item.VALIDATE("Standard Cost",UnitCost)
      ELSE BEGIN
        Item.VALIDATE("Unit Cost",UnitCost);
        Item.VALIDATE("Last Direct Cost",Item."Unit Cost");
      END;

      Item.VALIDATE("Reordering Policy",ReorderPolicy);
      Item.VALIDATE("Flushing Method",FlushingMethod);

      IF ProductionBOMNo <> '' THEN BEGIN
        InventoryPostingSetup.FINDLAST;
        Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
        Item.VALIDATE("Routing No.",RoutingNo);
        Item.VALIDATE("Production BOM No.",ProductionBOMNo);
        Item.VALIDATE("Inventory Posting Group",InventoryPostingSetup."Invt. Posting Group Code");
      END;
      Item.MODIFY(TRUE);
    END;

    PROCEDURE CreateMachineCenter@38(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20];Capacity@1008 : Decimal);
    VAR
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetupInvtToGL(GeneralPostingSetup);
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Machine Center Nos."));

      CLEAR(MachineCenter);
      MachineCenter.INSERT(TRUE);
      MachineCenter.VALIDATE("Work Center No.",WorkCenterNo);
      MachineCenter.VALIDATE(Capacity,Capacity);
      MachineCenter.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      MachineCenter.MODIFY(TRUE);
    END;

    PROCEDURE CreateMachineCenterWithCalendar@37(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20];Capacity@1001 : Decimal);
    BEGIN
      CreateMachineCenter(MachineCenter,WorkCenterNo,Capacity);
      CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
    END;

    PROCEDURE CreateOutputJournal@51(VAR ItemJournalLine@1002 : Record 83;ItemJournalTemplate@1004 : Record 82;ItemJournalBatch@1000 : Record 233;ItemNo@1003 : Code[20];ProductionOrderNo@1006 : Code[20]);
    BEGIN
      // Create Output Journal.
      IF ItemJournalTemplate.Type <> ItemJournalTemplate.Type::Output THEN
        EXIT;
      ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::Output;

      LibraryInventory.CreateItemJnlLineWithNoItem(
        ItemJournalLine,ItemJournalBatch,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type");
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrderNo);
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.MODIFY(TRUE);
      COMMIT;
    END;

    PROCEDURE CreateProductionBOMCommentLine@152(ProductionBOMLine@1000 : Record 99000772);
    VAR
      ProductionBOMCommentLine@1001 : Record 99000776;
    BEGIN
      ProductionBOMCommentLine.INIT;
      ProductionBOMCommentLine.VALIDATE("Production BOM No.",ProductionBOMLine."Production BOM No.");
      ProductionBOMCommentLine.VALIDATE("BOM Line No.",ProductionBOMLine."Line No.");
      ProductionBOMCommentLine.VALIDATE("Version Code",ProductionBOMLine."Version Code");
      ProductionBOMCommentLine.VALIDATE(Comment,ProductionBOMLine."Version Code");
      ProductionBOMCommentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateProductionBOMHeader@40(VAR ProductionBOMHeader@1000 : Record 99000771;UnitOfMeasureCode@1002 : Code[10]) : Code[20];
    BEGIN
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Production BOM Nos."));

      CLEAR(ProductionBOMHeader);
      ProductionBOMHeader.INSERT(TRUE);
      ProductionBOMHeader.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::New);
      ProductionBOMHeader.MODIFY(TRUE);
      EXIT(ProductionBOMHeader."No.");
    END;

    PROCEDURE CreateProductionBOMLine@60(VAR ProductionBOMHeader@1002 : Record 99000771;VAR ProductionBOMLine@1000 : Record 99000772;VersionCode@1003 : Code[20];Type@1001 : Option;No@1004 : Code[20];QuantityPer@1006 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      ProductionBOMLine.INIT;
      ProductionBOMLine.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ProductionBOMLine.VALIDATE("Version Code",VersionCode);
      RecRef.GETTABLE(ProductionBOMLine);
      ProductionBOMLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ProductionBOMLine.FIELDNO("Line No.")));
      ProductionBOMLine.INSERT(TRUE);
      ProductionBOMLine.VALIDATE(Type,Type);
      ProductionBOMLine.VALIDATE("No.",No);
      ProductionBOMLine.VALIDATE("Quantity per",QuantityPer);
      ProductionBOMLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateCertifiedProductionBOM@139(VAR ProductionBOMHeader@1006 : Record 99000771;ItemNo@1000 : Code[20];QuantityPer@1004 : Decimal) : Code[20];
    VAR
      Item@1001 : Record 27;
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      Item.GET(ItemNo);
      CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QuantityPer);
      UpdateProductionBOMStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
      EXIT(ProductionBOMHeader."No.");
    END;

    PROCEDURE CreateCertifProdBOMWithTwoComp@11(VAR ProductionBOMHeader@1001 : Record 99000771;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];QuantityPer@1005 : Decimal) : Code[20];
    VAR
      Item@1007 : Record 27;
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      // Create Production BOM.
      Item.GET(ItemNo);
      CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QuantityPer);
      CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo2,QuantityPer);
      UpdateProductionBOMStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
      EXIT(ProductionBOMHeader."No.");
    END;

    PROCEDURE CreateProductionBOMVersion@31(VAR ProductionBomVersion@1000 : Record 99000779;BomNo@1001 : Code[20];Version@1002 : Code[20];UOMCode@1003 : Code[10]);
    BEGIN
      ProductionBomVersion.INIT;
      ProductionBomVersion.VALIDATE("Production BOM No.",BomNo);
      ProductionBomVersion.VALIDATE("Version Code",Version);
      ProductionBomVersion.INSERT(TRUE);
      ProductionBomVersion.VALIDATE("Unit of Measure Code",UOMCode);
      ProductionBomVersion.MODIFY(TRUE);
    END;

    PROCEDURE CreateProductionForecastEntry@140(VAR ProductionForecastEntry@1000 : Record 99000852;ProductionForecastName@1001 : Code[10];ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];ForecastDate@1004 : Date;ComponentForecast@1005 : Boolean);
    BEGIN
      ProductionForecastEntry.INIT;
      ProductionForecastEntry.VALIDATE("Production Forecast Name",ProductionForecastName);
      ProductionForecastEntry.VALIDATE("Item No.",ItemNo);
      ProductionForecastEntry.VALIDATE("Location Code",LocationCode);
      ProductionForecastEntry.VALIDATE("Forecast Date",ForecastDate);
      ProductionForecastEntry.VALIDATE("Component Forecast",ComponentForecast);
      ProductionForecastEntry.INSERT(TRUE);
    END;

    PROCEDURE CreateProductionForecastName@71(VAR ProductionForecastName@1000 : Record 99000851);
    BEGIN
      CLEAR(ProductionForecastName);
      ProductionForecastName.INIT;
      ProductionForecastName.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(ProductionForecastName.FIELDNO(Name),DATABASE::"Production Forecast Name"));
      ProductionForecastName.VALIDATE(Description,ProductionForecastName.Name);
      ProductionForecastName.INSERT(TRUE);
    END;

    PROCEDURE CreateProductionOrder@86(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceType@1004 : Option;SourceNo@1003 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      CASE Status OF
        ProductionOrder.Status::Simulated:
          LibraryUtility.UpdateSetupNoSeriesCode(
            DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Simulated Order Nos."));
        ProductionOrder.Status::Planned:
          LibraryUtility.UpdateSetupNoSeriesCode(
            DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Planned Order Nos."));
        ProductionOrder.Status::"Firm Planned":
          LibraryUtility.UpdateSetupNoSeriesCode(
            DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Firm Planned Order Nos."));
        ProductionOrder.Status::Released:
          LibraryUtility.UpdateSetupNoSeriesCode(
            DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Released Order Nos."));
      END;

      CLEAR(ProductionOrder);
      ProductionOrder.INIT;
      ProductionOrder.VALIDATE(Status,Status);
      ProductionOrder.INSERT(TRUE);
      ProductionOrder.VALIDATE("Source Type",SourceType);
      ProductionOrder.VALIDATE("Source No.",SourceNo);
      ProductionOrder.VALIDATE(Quantity,Quantity);
      ProductionOrder.MODIFY(TRUE);
    END;

    PROCEDURE CreateProductionOrderComponent@109(VAR ProdOrderComponent@1000 : Record 5407;Status@1003 : Option;ProdOrderNo@1001 : Code[20];ProdOrderLineNo@1002 : Integer);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      ProdOrderComponent.INIT;
      ProdOrderComponent.VALIDATE(Status,Status);
      ProdOrderComponent.VALIDATE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.VALIDATE("Prod. Order Line No.",ProdOrderLineNo);
      RecRef.GETTABLE(ProdOrderComponent);
      ProdOrderComponent.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ProdOrderComponent.FIELDNO("Line No.")));
      ProdOrderComponent.INSERT(TRUE);
    END;

    PROCEDURE CreateProductionOrderFromSalesOrder@59(SalesHeader@1002 : Record 36;ProdOrderStatus@1001 : Option;OrderType@1000 : 'ItemOrder,ProjectOrder');
    VAR
      SalesLine@1004 : Record 37;
      CreateProdOrderFromSale@1003 : Codeunit 99000792;
      EndLoop@1005 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      REPEAT
        CreateProdOrderFromSale.CreateProdOrder(SalesLine,ProdOrderStatus,OrderType);
        IF OrderType = OrderType::ProjectOrder THEN
          EndLoop := TRUE;
      UNTIL (SalesLine.NEXT = 0) OR EndLoop;
    END;

    PROCEDURE CreateRegisteredAbsence@8(VAR RegisteredAbsence@1001 : Record 99000848;CapacityType@1002 : Option;No@1000 : Code[20];Date@1003 : Date;StartingTime@1004 : Time;EndingTime@1005 : Time);
    BEGIN
      RegisteredAbsence.INIT;
      RegisteredAbsence.VALIDATE("Capacity Type",CapacityType);
      RegisteredAbsence.VALIDATE("No.",No);
      RegisteredAbsence.VALIDATE(Date,Date);
      RegisteredAbsence.VALIDATE("Starting Time",StartingTime);
      RegisteredAbsence.VALIDATE("Ending Time",EndingTime);
      RegisteredAbsence.INSERT(TRUE);
    END;

    PROCEDURE CreateRoutingHeader@77(VAR RoutingHeader@1000 : Record 99000763;Type@1002 : Option);
    BEGIN
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Routing Nos."));

      CLEAR(RoutingHeader);
      RoutingHeader.INSERT(TRUE);
      RoutingHeader.VALIDATE(Type,Type);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::New);
      RoutingHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateRoutingLine@72(VAR RoutingHeader@1003 : Record 99000763;VAR RoutingLine@1002 : Record 99000764;VersionCode@1001 : Code[20];OperationNo@1000 : Code[10];Type@1005 : Option;No@1004 : Code[20]);
    BEGIN
      RoutingLine.INIT;
      RoutingLine.VALIDATE("Routing No.",RoutingHeader."No.");
      RoutingLine.VALIDATE("Version Code",VersionCode);
      IF OperationNo = '' THEN
        OperationNo := LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line");
      RoutingLine.VALIDATE("Operation No.",OperationNo);
      RoutingLine.INSERT(TRUE);
      RoutingLine.VALIDATE(Type,Type);
      RoutingLine.VALIDATE("No.",No);
      RoutingLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateRoutingLineSetup@4(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20];OperationNo@1005 : Code[10];SetupTime@1004 : Decimal;RunTime@1001 : Decimal);
    BEGIN
      // Create Routing Lines with required fields.
      CreateRoutingLine(
        RoutingHeader,RoutingLine,'',OperationNo,RoutingLine.Type,CenterNo);
      RoutingLine.VALIDATE("Setup Time",SetupTime);
      RoutingLine.VALIDATE("Run Time",RunTime);
      RoutingLine.VALIDATE("Concurrent Capacities",1);
      RoutingLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateRoutingLink@79(VAR RoutingLink@1000 : Record 99000777);
    BEGIN
      RoutingLink.INIT;
      RoutingLink.VALIDATE(Code,LibraryUtility.GenerateRandomCode(RoutingLink.FIELDNO(Code),DATABASE::"Routing Link"));
      RoutingLink.INSERT(TRUE);
    END;

    PROCEDURE CreateRoutingVersion@7(VAR RoutingVersion@1000 : Record 99000786;RoutingNo@1001 : Code[20];VersionCode@1002 : Code[20]);
    BEGIN
      RoutingVersion.INIT;
      RoutingVersion.VALIDATE("Routing No.",RoutingNo);
      RoutingVersion.VALIDATE("Version Code",VersionCode);
      RoutingVersion.INSERT(TRUE);
    END;

    PROCEDURE CreateShopCalendarCode@6(VAR ShopCalendar@1000 : Record 99000751) : Code[10];
    BEGIN
      ShopCalendar.INIT;
      ShopCalendar.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ShopCalendar.FIELDNO(Code),DATABASE::"Shop Calendar"));
      ShopCalendar.INSERT(TRUE);
      EXIT(ShopCalendar.Code);
    END;

    LOCAL PROCEDURE CreateShopCalendarCustomTime@42(FromDay@1000 : Option;ToDay@1001 : Option;FromTime@1002 : Time;ToTime@1003 : Time) : Code[10];
    VAR
      ShopCalendarWorkingDays@1009 : Record 99000752;
      ShopCalendar@1008 : Record 99000751;
      WorkShift@1007 : Record 99000750;
      ShopCalendarCode@1006 : Code[10];
      WorkShiftCode@1005 : Code[10];
      Day@1004 : Integer;
    BEGIN
      // Create Shop Calendar Working Days.
      ShopCalendarCode := CreateShopCalendarCode(ShopCalendar);
      WorkShiftCode := CreateWorkShiftCode(WorkShift);
      ShopCalendarWorkingDays.SETRANGE("Shop Calendar Code",ShopCalendarCode);

      FOR Day := FromDay TO ToDay DO
        CreateShopCalendarWorkingDays(
          ShopCalendarWorkingDays,ShopCalendarCode,Day,WorkShiftCode,FromTime,ToTime);

      EXIT(ShopCalendarCode);
    END;

    PROCEDURE CreateShopCalendarWorkingDays@3(VAR ShopCalendarWorkingDays@1000 : Record 99000752;ShopCalendarCode@1001 : Code[10];Day@1002 : Option;WorkShiftCode@1003 : Code[10];StartingTime@1004 : Time;EndingTime@1005 : Time);
    BEGIN
      ShopCalendarWorkingDays.INIT;
      ShopCalendarWorkingDays.VALIDATE("Shop Calendar Code",ShopCalendarCode);
      ShopCalendarWorkingDays.VALIDATE(Day,Day);
      ShopCalendarWorkingDays.VALIDATE("Starting Time",StartingTime);
      ShopCalendarWorkingDays.VALIDATE("Ending Time",EndingTime);
      ShopCalendarWorkingDays.VALIDATE("Work Shift Code",WorkShiftCode);
      ShopCalendarWorkingDays.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardTask@23(VAR StandardTask@1000 : Record 99000778);
    BEGIN
      StandardTask.INIT;
      StandardTask.VALIDATE(Code,LibraryUtility.GenerateRandomCode(StandardTask.FIELDNO(Code),DATABASE::"Standard Task"));
      StandardTask.INSERT(TRUE);
    END;

    PROCEDURE CreateWorkCenter@5(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      CreateWorkCenterCustomTime(WorkCenter,080000T,160000T);
    END;

    PROCEDURE CreateWorkCenterCustomTime@105(VAR WorkCenter@1000 : Record 99000754;FromTime@1007 : Time;ToTime@1008 : Time);
    BEGIN
      CreateWorkCenterWithoutShopCalendar(WorkCenter);
      WorkCenter.VALIDATE(
        "Shop Calendar Code",UpdateShopCalendarWorkingDaysCustomTime(FromTime,ToTime));
      WorkCenter.MODIFY(TRUE);
    END;

    PROCEDURE CreateWorkCenterFullWorkingWeek@14(VAR WorkCenter@1002 : Record 99000754;FromTime@1001 : Time;ToTime@1000 : Time);
    BEGIN
      CreateWorkCenterWithoutShopCalendar(WorkCenter);
      WorkCenter.VALIDATE(
        "Shop Calendar Code",UpdateShopCalendarFullWorkingWeekCustomTime(FromTime,ToTime));
      WorkCenter.MODIFY(TRUE);
    END;

    PROCEDURE CreateWorkCenterGroup@16(VAR WorkCenterGroup@1000 : Record 99000756);
    BEGIN
      WorkCenterGroup.INIT;
      WorkCenterGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(WorkCenterGroup.FIELDNO(Code),DATABASE::"Work Center Group"));
      WorkCenterGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateWorkCenterWithCalendar@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      CreateWorkCenter(WorkCenter);
      CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateWorkCenterWithoutShopCalendar@43(VAR WorkCenter@1000 : Record 99000754);
    VAR
      GeneralPostingSetup@1003 : Record 252;
      CapacityUnitOfMeasure@1002 : Record 99000780;
      WorkCenterGroup@1001 : Record 99000756;
    BEGIN
      CreateWorkCenterGroup(WorkCenterGroup);
      CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Minutes);
      LibraryERM.FindGeneralPostingSetupInvtToGL(GeneralPostingSetup);
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Manufacturing Setup",ManufacturingSetup.FIELDNO("Work Center Nos."));

      CLEAR(WorkCenter);
      WorkCenter.INSERT(TRUE);
      WorkCenter.VALIDATE("Work Center Group Code",WorkCenterGroup.Code);
      WorkCenter.VALIDATE("Unit of Measure Code",CapacityUnitOfMeasure.Code);
      WorkCenter.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      WorkCenter.MODIFY(TRUE);
    END;

    PROCEDURE CreateWorkShiftCode@27(VAR WorkShift@1000 : Record 99000750) : Code[10];
    BEGIN
      WorkShift.INIT;
      WorkShift.VALIDATE(Code,LibraryUtility.GenerateRandomCode(WorkShift.FIELDNO(Code),DATABASE::"Work Shift"));
      WorkShift.INSERT(TRUE);
      EXIT(WorkShift.Code);
    END;

    PROCEDURE OpenProductionJournal@20(ProductionOrder@1001 : Record 5405;ProductionOrderLineNo@1002 : Integer);
    VAR
      ProductionJournalMgt@1000 : Codeunit 5510;
    BEGIN
      ProductionJournalMgt.Handling(ProductionOrder,ProductionOrderLineNo);
    END;

    PROCEDURE OutputJournalExplodeRouting@34(ProductionOrder@1000 : Record 5405);
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalTemplate@1003 : Record 82;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Output);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Output,'',0);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrder."No.");
      ItemJournalLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Output Jnl.-Expl. Route",ItemJournalLine);
    END;

    PROCEDURE OutputJournalExplodeOrderLineRouting@33(VAR ItemJournalBatch@1000 : Record 233;ProdOrderLine@1003 : Record 5406;PostingDate@1006 : Date);
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Output);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Output,'',0);
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      ItemJournalLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Output Jnl.-Expl. Route",ItemJournalLine);
    END;

    PROCEDURE PostConsumptionJournal@26();
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Consumption);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    PROCEDURE PostOutputJournal@25();
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Output);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    PROCEDURE RefreshProdOrder@24(VAR ProductionOrder@1000 : Record 5405;Forward@1002 : Boolean;CalcLines@1009 : Boolean;CalcRoutings@1006 : Boolean;CalcComponents@1007 : Boolean;CreateInbRqst@1008 : Boolean);
    VAR
      TmpProductionOrder@1005 : Record 5405;
      RefreshProductionOrder@1001 : Report 99001025;
      TempTransactionType@1004 : TransactionType;
      Direction@1003 : 'Forward,Backward';
    BEGIN
      COMMIT;
      TempTransactionType := CURRENTTRANSACTIONTYPE;
      CURRENTTRANSACTIONTYPE(TRANSACTIONTYPE::Update);

      IF Forward THEN
        Direction := Direction::Forward
      ELSE
        Direction := Direction::Backward;
      IF ProductionOrder.HASFILTER THEN
        TmpProductionOrder.COPYFILTERS(ProductionOrder)
      ELSE BEGIN
        ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
        TmpProductionOrder.SETRANGE(Status,ProductionOrder.Status);
        TmpProductionOrder.SETRANGE("No.",ProductionOrder."No.");
      END;
      RefreshProductionOrder.InitializeRequest(Direction,CalcLines,CalcRoutings,CalcComponents,CreateInbRqst);
      RefreshProductionOrder.SETTABLEVIEW(TmpProductionOrder);
      RefreshProductionOrder.USEREQUESTPAGE := FALSE;
      RefreshProductionOrder.RUNMODAL;

      COMMIT;
      CURRENTTRANSACTIONTYPE(TempTransactionType);
    END;

    PROCEDURE RunReplanProductionOrder@141(VAR ProductionOrder@1000 : Record 5405;NewDirection@1002 : Option;NewCalcMethod@1003 : Option);
    VAR
      TmpProductionOrder@1004 : Record 5405;
      ReplanProductionOrder@1001 : Report 99001026;
    BEGIN
      COMMIT;
      ReplanProductionOrder.InitializeRequest(NewDirection,NewCalcMethod);
      IF ProductionOrder.HASFILTER THEN
        TmpProductionOrder.COPYFILTERS(ProductionOrder)
      ELSE BEGIN
        ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
        TmpProductionOrder.SETRANGE(Status,ProductionOrder.Status);
        TmpProductionOrder.SETRANGE("No.",ProductionOrder."No.");
      END;
      ReplanProductionOrder.SETTABLEVIEW(TmpProductionOrder);
      ReplanProductionOrder.USEREQUESTPAGE(FALSE);
      ReplanProductionOrder.RUNMODAL;
    END;

    PROCEDURE RunRollUpStandardCost@22(VAR Item@1001 : Record 27;StandardCostWorksheetName@1002 : Code[10]);
    VAR
      Item2@1003 : Record 27;
      RollUpStandardCost@1000 : Report 5854;
    BEGIN
      COMMIT;
      IF Item.HASFILTER THEN
        Item2.COPYFILTERS(Item)
      ELSE BEGIN
        Item2.GET(Item."No.");
        Item2.SETRANGE("No.",Item."No.");
      END;
      RollUpStandardCost.SETTABLEVIEW(Item2);
      RollUpStandardCost.SetStdCostWksh(StandardCostWorksheetName);
      RollUpStandardCost.USEREQUESTPAGE(FALSE);
      RollUpStandardCost.RUNMODAL;
    END;

    LOCAL PROCEDURE RequisitionLineForSubcontractOrder@21(VAR RequisitionLine@1000 : Record 246);
    VAR
      ReqJnlManagement@1002 : Codeunit 330;
      JnlSelected@1001 : Boolean;
    BEGIN
      ReqJnlManagement.TemplateSelection(PAGE::"Subcontracting Worksheet",FALSE,1,RequisitionLine,JnlSelected);
      IF NOT JnlSelected THEN
        ERROR('');
      RequisitionLine."Worksheet Template Name" := TemplateName;
      RequisitionLine."Journal Batch Name" := BatchName;
      ReqJnlManagement.OpenJnl(RequisitionLine."Journal Batch Name",RequisitionLine);
    END;

    PROCEDURE UpdateManufacturingSetup@2(VAR ManufacturingSetup@1000 : Record 99000765;ShowCapacityIn@1002 : Code[10];ComponentsAtLocation@1001 : Code[10];DocNoIsProdOrderNo@1004 : Boolean;CostInclSetup@1005 : Boolean;DynamicLowLevelCode@1008 : Boolean);
    BEGIN
      // Update Manufacturing Setup.
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Doc. No. Is Prod. Order No.",DocNoIsProdOrderNo);
      ManufacturingSetup.VALIDATE("Cost Incl. Setup",CostInclSetup);
      ManufacturingSetup.VALIDATE("Show Capacity In",ShowCapacityIn);
      ManufacturingSetup.VALIDATE("Components at Location",ComponentsAtLocation);
      ManufacturingSetup.VALIDATE("Dynamic Low-Level Code",DynamicLowLevelCode);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    PROCEDURE UpdateOutputJournal@13(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrderNo);
      ItemJournalLine.FINDSET;
      REPEAT
        ProdOrderRoutingLine.SETRANGE("Routing No.",ItemJournalLine."Routing No.");
        CASE ItemJournalLine.Type OF
          ItemJournalLine.Type::"Work Center":
            ProdOrderRoutingLine.SETRANGE(Type,ProdOrderRoutingLine.Type::"Work Center");
          ItemJournalLine.Type::"Machine Center":
            ProdOrderRoutingLine.SETRANGE(Type,ProdOrderRoutingLine.Type::"Machine Center");
        END;
        ProdOrderRoutingLine.SETRANGE("No.",ItemJournalLine."No.");
        ProdOrderRoutingLine.FINDFIRST;
        ItemJournalLine.VALIDATE("Setup Time",ProdOrderRoutingLine."Setup Time");
        ItemJournalLine.VALIDATE("Run Time",ProdOrderRoutingLine."Run Time");
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    PROCEDURE UpdateProductionBOMStatus@44(VAR ProductionBOMHeader@1000 : Record 99000771;NewStatus@1001 : Option);
    BEGIN
      ProductionBOMHeader.VALIDATE(Status,NewStatus);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    PROCEDURE UpdateShopCalendarFullWorkingWeekCustomTime@41(FromTime@1001 : Time;ToTime@1000 : Time) : Code[10];
    VAR
      ShopCalendarWorkingDays@1002 : Record 99000752;
    BEGIN
      EXIT(CreateShopCalendarCustomTime(ShopCalendarWorkingDays.Day::Monday,ShopCalendarWorkingDays.Day::Sunday,FromTime,ToTime));
    END;

    PROCEDURE UpdateShopCalendarWorkingDays@15() : Code[10];
    BEGIN
      // Create Shop Calendar Working Days using 8 hrs daily work shift.
      EXIT(UpdateShopCalendarWorkingDaysCustomTime(080000T,160000T));
    END;

    PROCEDURE UpdateShopCalendarWorkingDaysCustomTime@125(FromTime@1005 : Time;ToTime@1006 : Time) : Code[10];
    VAR
      ShopCalendarWorkingDays@1002 : Record 99000752;
    BEGIN
      EXIT(CreateShopCalendarCustomTime(ShopCalendarWorkingDays.Day::Monday,ShopCalendarWorkingDays.Day::Friday,FromTime,ToTime));
    END;

    [Normal]
    PROCEDURE UpdateProdOrderLine@58(VAR ProdOrderLine@1000 : Record 5406;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(ProdOrderLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ProdOrderLine);
      ProdOrderLine.MODIFY(TRUE);
    END;

    [Normal]
    PROCEDURE UpdateProdOrderComp@57(VAR ProdOrderComponent@1000 : Record 5407;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(ProdOrderComponent);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ProdOrderComponent);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    BEGIN
    {
      Unsupported version tags:

      Contains all utility functions related to Manufacturing.
    }
    END.
  }
}

