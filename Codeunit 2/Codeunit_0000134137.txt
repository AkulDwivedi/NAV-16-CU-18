OBJECT Codeunit 134137 ERM Reverse Vendor Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1005 : Codeunit 131300;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountError@1004 : TextConst 'ENU="%1 must be %2 in %3, %4=%5."';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseInvoice@7();
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Invoice Entry for a Vendor.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFinanceChargeMemo@11();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Finance Charge Memo Entry for a Vendor.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::"Finance Charge Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseReminder@13();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Reminder Entry for a Vendor.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::Reminder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRefund@12();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Credit Amount LCY in Ledger Entries after Reversing Posted Refund Entry for a Vendor.
      Initialize;
      ReverseCreditDocument(GenJournalLine."Document Type"::Refund);
    END;

    LOCAL PROCEDURE ReverseCreditDocument@1(DocumentType@1007 : Option);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
      GeneralLedgerSetup@1001 : Record 98;
      CreditAmountLCY@1000 : Decimal;
    BEGIN
      // Create a Vendor, Currency and Post General Journal Line with a Random Negative Amount. Reverse the Posted Entry.
      GeneralLedgerSetup.GET;
      CreditAmountLCY := -ReverseDocument(DetailedVendorLedgEntry,DocumentType,-LibraryRandom.RandDec(10,2));

      // Verify: Verify Credit Amount LCY in Detailed Vendor Ledger Entries.
      Assert.AreNearlyEqual(
        CreditAmountLCY,DetailedVendorLedgEntry."Credit Amount (LCY)",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(AmountError,DetailedVendorLedgEntry.FIELDCAPTION("Credit Amount (LCY)"),CreditAmountLCY,
          DetailedVendorLedgEntry.TABLECAPTION,DetailedVendorLedgEntry.FIELDCAPTION("Entry No."),DetailedVendorLedgEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReversePayment@8();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Payment Entry for a Vendor.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseCreditMemo@10();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Debit Amount LCY in Ledger Entries after Reversing Posted Credit Memo Entry for a Vendor.
      Initialize;
      ReverseDebitDocument(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE ReverseDebitDocument@17(DocumentType@1007 : Option);
    VAR
      DetailedVendorLedgEntry@1003 : Record 380;
      GeneralLedgerSetup@1001 : Record 98;
      DebitAmountLCY@1000 : Decimal;
    BEGIN
      // Create a Vendor, Currency and Post General Journal Line with a Random Positive Amount. Reverse the Posted Entry.
      GeneralLedgerSetup.GET;
      DebitAmountLCY := ReverseDocument(DetailedVendorLedgEntry,DocumentType,LibraryRandom.RandDec(10,2));

      // Verify: Verify Debit Amount LCY in Detailed Vendor Ledger Entries.
      Assert.AreNearlyEqual(
        DebitAmountLCY,DetailedVendorLedgEntry."Debit Amount (LCY)",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(AmountError,DetailedVendorLedgEntry.FIELDCAPTION("Debit Amount (LCY)"),DebitAmountLCY,
          DetailedVendorLedgEntry.TABLECAPTION,DetailedVendorLedgEntry.FIELDCAPTION("Entry No."),DetailedVendorLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ReverseDocument@3(VAR DetailedVendorLedgEntry@1001 : Record 380;DocumentType@1007 : Option;Amount@1008 : Decimal) AmountLCY : Decimal;
    VAR
      GenJournalLine@1000 : Record 81;
      GLRegister@1004 : Record 45;
      ReversalEntry@1003 : Record 179;
    BEGIN
      // Setup: Create General Journal Line as per the Document Types, new Currency and Post it.
      CreateGeneralJournalLine(GenJournalLine,DocumentType,Amount,CreateCurrency);
      AmountLCY := LibraryERM.ConvertCurrency(Amount,GenJournalLine."Currency Code",'',WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Reverse posted Transaction.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");

      // Find Detailed Vendor Ledger Entry to verify Debit Amount(LCY) or Credit Amount (LCY).
      FindDetailedVendorLedgerEntry(DetailedVendorLedgEntry,GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@23(VAR GenJournalLine@1007 : Record 81;DocumentType@1000 : Option;Amount@1003 : Decimal;CurrencyCode@1005 : Code[10]);
    VAR
      GenJournalBatch@1001 : Record 232;
      Vendor@1004 : Record 23;
      LibraryPurchase@1002 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDetailedVendorLedgerEntry@14(VAR DetailedVendorLedgEntry@1000 : Record 380;DocumentNo@1001 : Code[20]);
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Entry Type",DetailedVendorLedgEntry."Entry Type"::Application);
      DetailedVendorLedgEntry.FINDLAST;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@2(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Detailed Ledger Entry] [Purchase]
      Test Reversal of different Documents for Vendor after posting General Journal Line.
        1. Test Detailed Vendor Ledger Entries after Reversing Posted Invoice for a Vendor.
        2. Test Detailed Vendor Ledger Entries after Reversing Posted Finance Charge Memo for a Vendor.
        3. Test Detailed Vendor Ledger Entries after Reversing Posted Reminder for a Vendor.
        4. Test Detailed Vendor Ledger Entries after Reversing Posted Refund for a Vendor.
        5. Test Detailed Vendor Ledger Entries after Reversing Posted Payment for a Vendor.
        6. Test Detailed Vendor Ledger Entries after Reversing Posted Credit Memo for a Vendor.

      Covers Test Case:
        -------------------------------------------------------------------------------------
          Test Function Name                                  TFS ID
        -------------------------------------------------------------------------------------
          ReverseInvoice                     125713, 125714, 125715, 125716, 125717, 124127.
          ReverseFinanceChargeMemo           125713, 125714, 125715, 125716, 124124, 124130.
          ReverseReminder                    125713, 125714, 125715, 125716, 124125, 124131.
          ReverseRefund                      125713, 125714, 125715, 125716, 124126, 124132.
          ReversePayment                     125713, 125714, 125715, 125716, 125718, 124128.
          ReverseCreditMemo                  125713, 125714, 125715, 125716, 125719, 124129.
    }
    END.
  }
}

