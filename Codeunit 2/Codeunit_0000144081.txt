OBJECT Codeunit 144081 TDS Form 27Q
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TDSAmountErr@1500022 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=TDS Amount is not matching';
      ValueNotFoundErr@1500010 : TextConst 'ENU=Value Not Found.';
      CorrErr@1500016 : TextConst '@@@="%1 and %2 = Quarter and Financial year";ENU=No corrections have been made for Quarter %1, Financial Year %2.';
      ReportFrequencyErr@1500041 : TextConst 'ENU=Select Report Frequency.';
      FinancialYearErr@1500040 : TextConst 'ENU=Select Financial Year.';
      FullNameErr@1500039 : TextConst 'ENU=Enter Person Name.';
      DesignationErr@1500038 : TextConst 'ENU=Enter Designation.';
      PrintDateErr@1500037 : TextConst 'ENU=Enter Printing Date.';
      TANErr@1500042 : TextConst 'ENU=Select T.A.N. No.';
      CompanyInformation@1500021 : Record 79;
      GeneralLedgerSetup@1500018 : Record 98;
      IncomeTaxAccountingPeriod@1500020 : Record 13724;
      TdsNatureOfDeduction@1500019 : Record 13726;
      NodNocHeader@1500015 : Record 13786;
      TDSSetup@1500013 : Record 13728;
      LibraryReportDataset@1500012 : Codeunit 131007;
      LibrarySetupStorage@1500011 : Codeunit 131009;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      LibraryRandom@1500008 : Codeunit 130440;
      LibraryERM@1500007 : Codeunit 131300;
      LibraryTDS@1500006 : Codeunit 143000;
      LibraryPurchase@1500023 : Codeunit 130512;
      LibraryUtility@1500005 : Codeunit 131000;
      Assert@1500004 : Codeunit 130000;
      CurrencyCode@1500003 : Code[10];
      Challanno@1500002 : Code[10];
      TDSAccountNo@1500001 : Code[20];
      isInitialized@1500000 : Boolean;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSReportFrequencyValidation@1500026();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with Report Frequency Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(1);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(ReportFrequencyErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSFinanciaYearValidation@1500005();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with Financial Year Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(2);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(FinancialYearErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSPrintingDateValidation@1500029();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with Printing Date Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(5);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(PrintDateErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSDesignationValidation@1500031();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with Designation Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(4);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(DesignationErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSFullNameValidation@1500027();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with full Name Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(3);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(FullNameErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDSTANValidation@1500004();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q with TAN Validation
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(7);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error has been thrown
      Assert.ExpectedError(TANErr);
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QforInvoicewithTDS@1500023();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164303] Invoice posting with TDS from General Journal and Verification of Form 27Q
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(0);
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Verified report values with the values in the TDS Challan Register
      VerifyValuesOnForm27QPreview;
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE VerifyForm27QAfterGeneratingTDS@1500000();
    VAR
      GenJournalLine@1500000 : Record 81;
      FormNo@1500002 : '26Q,27Q';
    BEGIN
      // [SCENARIO 164306] Invoice posting with TDS from General Journal , Generaion of eTDS and Verification of Form 27Q
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details , Form 27Q , Generation of eTDS
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      GenerateForm27AndeTDSeFileTDS;
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(100000,2));
      GenerateForm27AndeTDSeFileTDS;

      // [THEN] Verified report values with the values in the TDS Challan Register
      VerifyValuesOnBatchHeader(FormNo::"27Q",CompanyInformation."T.A.N. No.");
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler)]
    PROCEDURE VerifyeTDSFilingandReturnStatus@1500002();
    VAR
      GenJournalLine@1500002 : Record 81;
      FormNo@1500001 : '26Q,27Q';
      RRRNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 164307] Invoice posting with TDS from General Journal , GeneraTion of eTDS , Filing eTDS and Return Status
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment , Update Challan Details , Form 27Q , Generation of eTDS ,Filing eTDS & Return status
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      GenerateForm27AndeTDSeFileTDS;
      GenerateeTDSUsingPagefor27QFileeTDS(FALSE,RRRNo);
      VerifyGenerateReturnStatus(FormNo::"27Q",RRRNo);
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(100000,2));

      // [THEN] Verified report values with the values in the TDS Challan Register
      ASSERTERROR GenerateForm27AndeTDSeFileTDS;
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler,RevisedForm27QRequestPageHandler,GenerateRevisedeTDSRequestPageHandler)]
    PROCEDURE VerifyGenerateRevisedeTDS@1500003();
    VAR
      GenJournalLine@1500003 : Record 81;
      RRRNo@1500002 : Code[20];
      FormNo@1500001 : '26Q,27Q';
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 164314] Invoice posting with TDS from General Journal , GeneraTion of eTDS , Filing eTDS and Return Status , Revision of eTDS
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice ,Apply the TDS Payment ,Update Challan Details ,Form 27Q ,Generation of eTDS ,Filing eTDS ,Correction in Form
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      GenerateForm27AndeTDSeFileTDS;
      GenerateeTDSUsingPagefor27QFileeTDS(FALSE,RRRNo);
      VerifyGenerateReturnStatus(FormNo::"27Q",RRRNo);
      REPORT.RUN(REPORT::"Revised Form 27Q");
      ASSERTERROR GenerateRevisedeTDSUsingPagefor27QeTDS(TRUE);

      // [THEN] Expected Error has been thrown i.e. No corrections have been made for Quarter %1, Financial Year %2.
      Assert.ExpectedError(STRSUBSTNO(CorrErr,ReportFrequency::Q1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS"));
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QPreviewforInvoicewithTDS@1500001();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 164333] Invoice posting with TDS from General Journal and Verification Preview of Form 27Q
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create & Post General Journals Invoice , Apply the TDS Payment through Journals , Update Challan Details
      CreateAndPostGeneralLinesPayTDSAndUpdateChallan(GenJournalLine,LibraryRandom.RandDec(10000,2));
      COMMIT;
      UpdateForm27QandeTDSFieldValues(0);
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Verified the Form 27Q values with the values in the TDS Challan Register
      VerifyValuesOnForm27QPreview;
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseOrder@1500013();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
    BEGIN
      // [SCENARIO 164281] Checking the TDS Amount in Purchase order with TDS Nature of Deduction
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create PO with Item with TDS Nature of Deduction
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,LibraryRandom.RandDec(10000,2),
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount);

      // [THEN] Verified TDS amount Calculated
      Assert.AreNearlyEqual(ExpectedPurchaseLine."Total TDS Including SHE CESS",
        LibraryTDS.RoundTDS(GetPurchaseDocumentTDSAmount(PurchaseLine)),GeneralLedgerSetup."TDS Rounding Precision",TDSAmountErr);
    END;

    [Test]
    PROCEDURE VerifyTDSGLEntryForPostedPurchaseOrderWithTDS@1500012();
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      PostedPurchaseOrderDoc@1500001 : Code[20];
    BEGIN
      // [SCENARIO 164281] Checking the GL Entries for Posted Purchase order with TDS Nature of Deduction
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create PO with Item with TDS Nature of Deduction
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,LibraryRandom.RandDec(10000,2),
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      PostedPurchaseOrderDoc := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified TDS amount Posted in GL Entry
      VerifyTDSAmountInGL(PostedPurchaseOrderDoc,-GetPostedTDSAmount(PostedPurchaseOrderDoc));
    END;

    [Test]
    PROCEDURE VerifyPayTDSGLEntryForBankPaymentVoucher@1500010();
    VAR
      PayTDSDocNo@1500001 : Code[20];
      InvoiceNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 164281] Checking the Pay TDS GL Entries for Bank Payment Voucher
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo);

      // [THEN] Verified TDS amount Posted in GL Entry
      VerifyTDSAmountInGL(PayTDSDocNo,GetPostedTDSAmount(InvoiceNo));
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QAfterPayTDSViaBankPaymentVoucher@1500009();
    VAR
      PayTDSDocNo@1500001 : Code[20];
      InvoiceNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 164281] Verifying Form 27Q Deductee Column for PANAPPLIED after Pay TDS
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo);
      LibraryTDS.RunUpdateChallanRegister(
        LibraryTDS.UpdateChallanDetails(InvoiceNo,PayTDSDocNo,IncomeTaxAccountingPeriod."Starting Date"),
        LibraryRandom.RandInt(2000));
      UpdateForm27QandeTDSFieldValues(0);
      COMMIT;
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Verified PAN status in the Form 27Q
      VerifyValuesOnForm27QPreview;
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE VerifyForm27QAfterPayTDSAndGeneratingeTDSViaBankPaymentVoucher@1500030();
    VAR
      PayTDSDocNo@1500002 : Code[20];
      InvoiceNo@1500004 : Code[20];
    BEGIN
      // [SCENARIO 164281] Verifying Form 27Q Deductee Column for PANAPPLIED after generation of eTDS
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo);
      LibraryTDS.RunUpdateChallanRegister(
        LibraryTDS.UpdateChallanDetails(InvoiceNo,PayTDSDocNo,IncomeTaxAccountingPeriod."Starting Date"),
        LibraryRandom.RandInt(2000));
      UpdateForm27QandeTDSFieldValues(0);
      COMMIT;
      REPORT.RUN(REPORT::"Form 27Q");
      GenerateeTDSUsingPagefor27QeTDS(FALSE);

      // [THEN] Verified PAN status in the Form 27Q
      VerifyValuesOnForm27QPreview;
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      RollbackChangesMadeToDataBase;
      IF isInitialized THEN
        EXIT;
      CompanyInformation.GET;
      GeneralLedgerSetup.GET;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      InitialSetup;
      isInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitialSetup@1500011();
    VAR
      CountryRegion@1500000 : Record 9;
      Vendor@1500001 : Record 23;
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriodQuarters(IncomeTaxAccountingPeriod."No.");
      LibraryERM.CreateCountryRegion(CountryRegion);
      CurrencyCode :=
        LibraryERM.CreateCurrencyWithExchangeRate(
          IncomeTaxAccountingPeriod."Starting Date",LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2));
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
      TDSAccountNo := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTDS@1500077(VAR PurchaseHeader@1500006 : Record 38;VAR PurchaseLine@1500005 : Record 39;Amount@1500002 : Decimal;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';LineType@1500000 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,NodNocHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
      PurchaseLine.MODIFY(TRUE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithPayTDS@1500014(VAR PayTDSDocNo@1500001 : Code[20];VAR InvDocNo@1500005 : Code[20]);
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,
        LibraryRandom.RandDec(10000,2),PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      InvDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralLinesWithPayTDS(GenJournalLine);
      PayTDSDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLinesPayTDSAndUpdateChallan@1500052(VAR GenJournalLine@1500000 : Record 81;InvAmount@1500002 : Decimal);
    VAR
      GenJnlLine@1500001 : Record 81;
      PayTDSDocNo@1500003 : Code[20];
    BEGIN
      CreateAndPostGeneralLinesWithForeignCurrency(
        GenJournalLine,-InvAmount,GenJournalLine."Document Type"::Invoice,CurrencyCode);
      CreateGeneralLinesWithPayTDS(GenJnlLine);
      VerifyTDSAmtInPaymentJournal(GenJnlLine);
      PayTDSDocNo := GenJnlLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      Challanno :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",PayTDSDocNo,IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(Challanno,LibraryRandom.RandInt(2000));
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLinesWithForeignCurrency@1500006(VAR GenJournalLine@1500007 : Record 81;Amount@1500002 : Decimal;DocumentType@1500001 : Option;CurrencyCode@1500000 : Code[10]);
    VAR
      GenJournalTemplate@1500005 : Record 80;
      GenJournalBatch@1500006 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"G/L Account",'',GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,Amount);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
        VALIDATE("Party Type","Party Type"::Vendor);
        VALIDATE("Party Code",NodNocHeader."No.");
        VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE GenerateRevisedeTDSUsingPagefor27QeTDS@1500017(Resident@1500000 : Boolean);
    VAR
      GenerateRevisedeTDS@1500003 : TestPage 16509;
    BEGIN
      GenerateRevisedeTDS.OPENEDIT;
      GenerateRevisedeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateRevisedeTDS.Action1500006.INVOKE;
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPagefor27QFileeTDS@1500016(Resident@1500001 : Boolean;VAR RRRNo@1500000 : Code[20]);
    VAR
      GenerateeTDS@1500002 : TestPage 16507;
    BEGIN
      RRRNo := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      LibraryVariableStorage.Enqueue(RRRNo);
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE UpdateForm27QandeTDSFieldValues@1500024(FieldNumber@1500000 : Integer);
    VAR
      FinancialYear@1500007 : Code[10];
      TANNo@1500006 : Code[10];
      PANNo@1500005 : Code[10];
      FullName@1500004 : Text;
      Designation@1500003 : Text;
      ReportFrequency@1500002 : ' ,Q1,Q2,Q3,Q4';
      PrintingDate@1500001 : Date;
    BEGIN
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
      ReportFrequency := ReportFrequency::Q1;
      FullName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      Designation := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10);
      PrintingDate := WORKDATE;
      TANNo := CompanyInformation."T.A.N. No.";
      CASE FieldNumber OF
        1:
          ReportFrequency := ReportFrequency::" ";
        2:
          FinancialYear := '';
        3:
          FullName := '';
        4:
          Designation := '';
        5:
          PrintingDate := 0D;
        6:
          PANNo := '';
        7:
          TANNo := '';
      END;
      LibraryVariableStorage.Enqueue(FinancialYear);
      LibraryVariableStorage.Enqueue(ReportFrequency);
      LibraryVariableStorage.Enqueue(FullName);
      LibraryVariableStorage.Enqueue(Designation);
      LibraryVariableStorage.Enqueue(PrintingDate);
      LibraryVariableStorage.Enqueue(TANNo);
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPagefor27QeTDS@1500015(Resident@1500000 : Boolean);
    VAR
      GenerateeTDS@1500003 : TestPage 16507;
    BEGIN
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GenerateForm27AndeTDSeFileTDS@1500051();
    BEGIN
      UpdateForm27QandeTDSFieldValues(0);
      COMMIT;
      REPORT.RUN(REPORT::"Form 27Q");
      GenerateeTDSUsingPagefor27QeTDS(FALSE);
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500040();
    VAR
      ChallanRegister@1500003 : Record 16504;
      TDSEntry@1500002 : Record 13729;
      BatchHeader@1500001 : Record 16503;
      Form26Q27QEntry@1500000 : Record 16505;
    BEGIN
      ChallanRegister.DELETEALL;
      BatchHeader.DELETEALL;
      Form26Q27QEntry.DELETEALL;
      TDSEntry.DELETEALL;
    END;

    LOCAL PROCEDURE CreateGeneralLinesWithPayTDS@1500007(VAR GenJournalLine@1500000 : Record 81);
    VAR
      GenJournalTemplate@1500002 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",TDSAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryTDS.PayTDS(GenJournalLine);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500059(VAR ExpectedPurchaseLine@1500002 : Record 39;TDSBaseAmt@1500000 : Decimal);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := TDSBaseAmt;
        "TDS Amount" := TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount";
        "Surcharge Amount" := TDSSetup."Surcharge %" / 100 * "TDS Amount";
        "eCESS on TDS Amount" := TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "SHE Cess on TDS Amount" := TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE VerifyTDSAmountInGL@1500049(PostedDocNo@1500001 : Code[20];TDSAmount@1500000 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",PostedDocNo);
      GLEntry.SETRANGE("G/L Account No.",TDSAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(GLEntry.Amount,TDSAmount,
        GeneralLedgerSetup."TDS Rounding Precision",TDSAmountErr);
    END;

    LOCAL PROCEDURE GetPurchaseDocumentTDSAmount@1500039(PurchaseLine@1500000 : Record 39) : Decimal;
    VAR
      PurchaseLineTDS@1500001 : Record 39;
    BEGIN
      PurchaseLineTDS.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLineTDS.SETRANGE("No.",PurchaseLine."No.");
      PurchaseLineTDS.FINDFIRST;
      EXIT(PurchaseLineTDS."Total TDS Including SHE CESS");
    END;

    PROCEDURE GetPostedTDSAmount@1500032(DocumentNo@1500001 : Code[20]) : Decimal;
    VAR
      TDSEntry@1500002 : Record 13729;
      Amount@1500003 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Account No.",TDSAccountNo);
      IF TDSEntry.FINDSET THEN
        REPEAT
          Amount := Amount + TDSEntry."Bal. TDS Including SHE CESS";
        UNTIL TDSEntry.NEXT = 0;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE VerifyValuesOnForm27QPreview@1500025();
    VAR
      Form27QEntry@1500001 : Record 16505;
      ChallanRegister@1500000 : Record 16504;
      Vendor@1500002 : Record 23;
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",Challanno);
      ChallanRegister.FINDFIRST;
      Form27QEntry.SETRANGE("Pay TDS Document No.",ChallanRegister."Pay TDS Document No.");
      Form27QEntry.FINDFIRST;
      ChallanRegister.CALCFIELDS("Total Surcharge Amount","Total TDS Amount","Total eCess Amount","Total SHE Cess Amount");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__TDS_Amount_',Form27QEntry."TDS Amount");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__TDS_Interest_Amount_'
        ,ChallanRegister."TDS Interest Amount");
      LibraryReportDataset.AssertElementWithValueExists(
        'Total_eCess_Amount_____Total_SHE_Cess_Amount_',
        ChallanRegister."Total eCess Amount" + ChallanRegister."Total SHE Cess Amount");
      LibraryReportDataset.AssertElementWithValueExists(
        'Challan_Register__Total_Surcharge_Amount_',ChallanRegister."Total Surcharge Amount");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__TDS_Fee_',ChallanRegister."TDS Fee");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__TDS_Others_',ChallanRegister."TDS Others");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__BSR_Code_',ChallanRegister."BSR Code");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__Challan_No__',ChallanRegister."Challan No.");
      Vendor.GET(NodNocHeader."No.");
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Deductee_P_A_N__No__',Vendor."P.A.N. No.");
    END;

    LOCAL PROCEDURE VerifyTDSAmtInPaymentJournal@1500022(GenJnlLine@1500000 : Record 81);
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      GenJournalLine.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
      GenJournalLine.TESTFIELD(Amount,LibraryTDS.GetPostedTDSAmount(GenJnlLine."Document No.",TDSAccountNo));
    END;

    LOCAL PROCEDURE VerifyValuesOnBatchHeader@1500038(FormNo@1500001 : '26Q,27Q';TANNo@1500000 : Code[10]);
    VAR
      BatchHeader@1500002 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Form No.",FormNo);
      BatchHeader.FINDLAST;
      Assert.AreEqual(
        TANNo,BatchHeader."Deductor T.A.N. No.",STRSUBSTNO(
          TANNo,BatchHeader."Deductor T.A.N. No.",ValueNotFoundErr));
    END;

    LOCAL PROCEDURE VerifyGenerateReturnStatus@1500008(FormNo@1500003 : '26Q,27Q';RRRNo@1500001 : Code[20]);
    VAR
      BatchHeader@1500000 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Form No.",FormNo);
      BatchHeader.FINDLAST;
      BatchHeader.TESTFIELD("Original RRR No.",RRRNo);
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500018(VAR Form27Q@1500000 : TestRequestPage 16511);
    VAR
      FinancialYear@1500006 : Variant;
      FullName@1500005 : Variant;
      Designation@1500004 : Variant;
      ReportFrequency@1500003 : Variant;
      PrintingDate@1500002 : Variant;
      TANNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(ReportFrequency);
      LibraryVariableStorage.Dequeue(FullName);
      LibraryVariableStorage.Dequeue(Designation);
      LibraryVariableStorage.Dequeue(PrintingDate);
      LibraryVariableStorage.Dequeue(TANNo);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form27Q.TANLocation.SETVALUE(TANNo);
      Form27Q.FullName.SETVALUE(FullName);
      Form27Q.PrintingDate.SETVALUE(PrintingDate);
      Form27Q.Designation.SETVALUE(Designation);
      Form27Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500019(VAR GenerateeTDS@1500003 : TestRequestPage 16508);
    VAR
      FileManagement@1500002 : Codeunit 419;
      ReportFrequency@1500001 : ' ,Q1,Q2,Q3,Q4';
      FileName@1500000 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('txt');
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateeTDS.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      GenerateeTDS.FinancialYear.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      GenerateeTDS.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,3));
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateFileeTDSRequestPageHandler@1500020(VAR UpdateFilingStatus@1500000 : TestRequestPage 16501);
    VAR
      RRRNo@1500002 : Variant;
      ReportFrequency@1500001 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      LibraryVariableStorage.Dequeue(RRRNo);
      UpdateFilingStatus.Control1500009.SETVALUE(CompanyInformation."T.A.N. No.");
      UpdateFilingStatus.Control1500000.SETVALUE(ReportFrequency::Q1);
      UpdateFilingStatus.Control1500002.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      UpdateFilingStatus.Control1500004.SETVALUE(WORKDATE);
      UpdateFilingStatus.Control1500006.SETVALUE(RRRNo);
      UpdateFilingStatus.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedeTDSRequestPageHandler@1500028(VAR GenerateRevisedeTDS@1500001 : TestRequestPage 16509);
    VAR
      FileManagement@1500003 : Codeunit 419;
      ReportFrequency@1500002 : ' ,Q1,Q2,Q3,Q4';
      FileName@1500000 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('txt');
      GenerateRevisedeTDS.FileName.SETVALUE(FileName);
      GenerateRevisedeTDS.Control1500012.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateRevisedeTDS.Control1500006.SETVALUE(ReportFrequency::Q1);
      GenerateRevisedeTDS.Control1500004.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      GenerateRevisedeTDS.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateRevisedeTDS.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateRevisedeTDS.PANNo.SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateRevisedeTDS.Control1500010.SETVALUE(WORKDATE);
      GenerateRevisedeTDS.Control1.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,3));
      GenerateRevisedeTDS.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateRevisedeTDS.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateRevisedeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RevisedForm27QRequestPageHandler@1500021(VAR RevisedForm27Q@1500000 : TestRequestPage 16504);
    VAR
      ReportFrequency@1500001 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      RevisedForm27Q.Control1500008.SETVALUE(CompanyInformation."T.A.N. No.");
      RevisedForm27Q.Control1500015.SETVALUE(ReportFrequency::Q1);
      RevisedForm27Q.Control1500002.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      RevisedForm27Q.Control1500006.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      RevisedForm27Q.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      RevisedForm27Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      RevisedForm27Q.Control1500000.SETVALUE(WORKDATE);
      RevisedForm27Q.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      RevisedForm27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    END.
  }
}

