OBJECT Codeunit 134902 ERM Account Schedule
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryAccSchedule@1012 : Codeunit 131304;
      LibraryCostAccounting@1011 : Codeunit 131340;
      LibraryCashFlow@1002 : Codeunit 131331;
      LibraryERM@1000 : Codeunit 131300;
      LibrarySales@1020 : Codeunit 130509;
      LibrarySetupStorage@1055 : Codeunit 131009;
      LibraryReportDataset@1023 : Codeunit 131007;
      LibraryUtility@1025 : Codeunit 131000;
      LibraryDimension@1029 : Codeunit 131001;
      LibraryVariableStorage@1006 : Codeunit 131004;
      LibraryRandom@1010 : Codeunit 130440;
      CalcFormulaTok@1026 : TextConst 'ENU=%1 %2';
      ExistErr@1005 : TextConst 'ENU=The %1 does not exist.';
      ExpectedErr@1021 : TextConst 'ENU="AssertEquals for Field: ColumnValues1 Expected = ''%1'', Actual = ''%2''"';
      DivisionByZeroErr@1028 : TextConst 'ENU=* ERROR *';
      LineSkippedTok@1044 : TextConst 'ENU=LineSkipped';
      UnknownErr@1003 : TextConst 'ENU=Unknown error.';
      DateFormulaErr@1007 : TextConst 'ENU=should include a number.';
      OperatorErr@1001 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position 2.';
      NextPageGroupNoTok@1042 : TextConst 'ENU=NextPageGroupNo';
      NonexistentErr@1047 : TextConst 'ENU=You have entered an illegal value or a nonexistent';
      ParenthesesErr@1009 : TextConst 'ENU=The parenthesis at position 1 is misplaced.';
      ParenthesisFormulaTok@1045 : TextConst 'ENU=(%1%2%3)*%4';
      FormulaErr@1008 : TextConst 'ENU=There are more left parentheses than right parentheses.';
      ViewByRef@1017 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      ErrorTypeRef@1053 : 'None,Division by Zero,Period Error,Both';
      ValueMustMatchErr@1019 : TextConst 'ENU=Column Header Caption must match.';
      AccSchOverviewAmountsErr@1024 : TextConst 'ENU=Unexpected Account Schedule amount in Account Schedule Line %1, Column Layout  %2';
      ArthimaticFormulaTok@1041 : TextConst 'ENU=(%1 %2 0)+%3';
      FractionFormulaTok@1040 : TextConst 'ENU=((%1/%1)%2%3)+%4';
      CalcFormulaTxt@1039 : TextConst 'ENU=%1* (%2+%1)/(-%1)';
      DecimalSeparatorTok@1038 : TextConst 'ENU=%1*%2+%3';
      ConsecutiveOperatorsTok@1037 : TextConst 'ENU=%1*-10';
      RangeFormulaTok@1036 : TextConst 'ENU=%1..%2';
      ConsecutiveOperatorsErr@1035 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position';
      ParenthesisTok@1034 : TextConst 'ENU={)}{)}';
      ParenthesisErr@1033 : TextConst 'ENU=The parenthesis at position 2 is misplaced.';
      MoreLeftParenthesisTok@1032 : TextConst 'ENU=10*{(}%1/10';
      MoreLeftParenthesisErr@1031 : TextConst 'ENU=There are more left parentheses than right parentheses.';
      AvoidBlankTok@1014 : TextConst 'ENU="+ %1 "';
      CircularRefErr@1030 : TextConst 'ENU=Because of circular references, the program cannot calculate a formula.';
      IsInitialized@1022 : Boolean;
      RowVisibleErr@1043 : TextConst 'ENU="Row no %1 with property Show = No is visible in Account Schedule Overview."';
      DivisionFormulaTok@1046 : TextConst 'ENU=%1/%2';
      ResponseRef@1050 : 'None,OK,Cancel,LookupOK,LookupCancel,Yes,No,RunObject,RunSystem';
      LookupCostCenterFilterErr@1048 : TextConst 'ENU=Function LookupCostCenterFilter returned wrong value.';
      LookupCostObjectFilterErr@1049 : TextConst 'ENU=Function LookupCostObjectFilter returned wrong value.';
      IncorrectValueInAccScheduleErr@1051 : TextConst 'ENU=Incorrect Value in Account Schedule';
      ColumnFormulaMsg@1052 : TextConst 'ENU=Column formula: %1.';
      ColumnFormulaErrorMsg@1054 : TextConst 'ENU=Error: %1.';
      IncorrectExpectedMessageErr@1027 : TextConst 'ENU=Incorrect Expected Message';
      IncorrectCalcCellValueErr@1056 : TextConst 'ENU=Incorrect CalcCell Value';
      Dim1FilterErr@1013 : TextConst 'ENU=Incorrect Dimension 1 Filter was created.';

    [Test]
    PROCEDURE AccountScheduleFormulaError@9();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1004 : Record 334;
    BEGIN
      // Test error occurs on running Account Schedule Report with wrong Formula on Column Layout.

      // 1. Setup: Create Column Layout Name, Column Layout and Account Schedule with Account Schedule Line.
      Initialize;
      CreateColumnLayoutAndLine(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");

      // 2. Exercise: Run Account Schedule Report.
      ASSERTERROR RunAccountScheduleReport(AccScheduleLine."Schedule Name",ColumnLayout."Column Layout Name");

      // 3. Verify: Verify error occurs on running Account Schedule Report with wrong Formula on Column Layout.
      Assert.ExpectedError(NonexistentErr);
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByAccountingPeriod@38();
    BEGIN
      // Check that correct values updated in the newly created column on Account Schedule Overview Page when View By Period is Accounting Period.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::"Accounting Period");
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByDay@61();
    BEGIN
      // Check that Account Schedule Overview shows correct Amount under the newly created column when View By Period is Day.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::Day);
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByMonth@105();
    BEGIN
      // Check that correct values updated in the newly created column on Account Schedule Overview Page when View By Period is Month.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::Month);
    END;

    LOCAL PROCEDURE AccountScheduleOverviewByPeriod@70(ViewByPeriod@1011 : Option);
    VAR
      AccScheduleName@1001 : Record 84;
      AccScheduleLine@1000 : Record 85;
      ColumnLayoutName@1002 : Record 333;
      Customer@1008 : Record 18;
      GLAccount@1003 : Record 15;
      Amount@1004 : Decimal;
      LayoutName@1005 : Code[10];
      HeaderCaption@1006 : Text[30];
    BEGIN
      // Setup: Create Account Schedule, Account Schedule Line, Column Layout. Take random amount for General Journal Line.
      Amount := LibraryRandom.RandDec(100,2);
      HeaderCaption := LibraryUtility.GenerateGUID;
      LayoutName := CreateColumnLayoutWithName(HeaderCaption);
      LibraryVariableStorage.Enqueue(LayoutName);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GLAccount."No.");
      LibraryVariableStorage.Enqueue(AccScheduleLine."Schedule Name");
      LibraryVariableStorage.Enqueue(AccScheduleLine."Row No.");
      LibraryVariableStorage.Enqueue(ViewByPeriod);
      LibrarySales.CreateCustomer(Customer);

      // Exercise: Create and Post General Journal Lines on different dates.
      CreateAndPostJournal(Customer."No.",GLAccount."No.",Amount);
      CreateAndPostJournal(Customer."No.",GLAccount."No.",Amount);
      Amount := 2 * Amount;  // Multiplying Amount by two because of 2 General Journal Line Creation.
      LibraryVariableStorage.Enqueue(-Amount); // to dequeue in ValuesOnOverviewPageHandler

      // Verify: Verify that posted Amount updated under correct column. Verification done in CFVdler.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // Tear Down: Delete earlier created Column Layout and Account Schedule.
      ColumnLayoutName.GET(LayoutName);
      ColumnLayoutName.DELETE(TRUE);
      AccScheduleName.GET(AccScheduleLine."Schedule Name");
      AccScheduleName.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByQuarter@47();
    BEGIN
      // Check that correct values updated in the newly created column on Account Schedule Overview Page when View By Period is Quarter.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::Quarter);
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByWeek@142();
    BEGIN
      // Check that correct values updated in the newly created column on Account Schedule Overview Page when View By Period is Week.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::Week);
    END;

    [Test]
    [HandlerFunctions(ValuesOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewByYear@58();
    BEGIN
      // Check that correct values updated in the newly created column on Account Schedule Overview Page when View By Period is Year.
      Initialize;
      AccountScheduleOverviewByPeriod(ViewByRef::Year);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccountScheduleOverviewCA@15();
    VAR
      CostCenter@1006 : Record 1112;
      CostType@1000 : Record 1103;
      ColumnLayout@1005 : Record 334;
      AccScheduleLine@1003 : Record 85;
      CostAccountingSetup@1002 : Record 1108;
      Amount@1001 : Decimal;
    BEGIN
      // Test Value on Account Schedule Overview for Cost Accounting

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      LibraryCostAccounting.CreateCostType(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",'','');
      Amount := LibraryRandom.RandDec(10,2);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',Amount);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      Assert.AreEqual(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);

      // 4. Tear Down: Reset Cost Accounting alignment.
      LibraryCostAccounting.SetAlignment(
        CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::"No Alignment");
    END;

    [Test]
    PROCEDURE AccountScheduleOverviewMatrix@16();
    VAR
      ColumnLayout@1001 : Record 334;
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1003 : Record 85;
      GLAccount@1004 : Record 15;
      Customer@1008 : Record 18;
      Amount@1010 : Decimal;
    BEGIN
      // Test Value on Account Schedule Matrix.

      // 1. Setup: Create Customer, G/L Account, Column Layout Name, Column Layout and Account Schedule Lines with created G/L Account.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateColumnLayout(ColumnLayout);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      CreateAccountSchedulePosting(AccScheduleLine,AccScheduleName.Name,GLAccount."No.");
      Amount := LibraryRandom.RandDec(10,2);  // Use Random because value is not important.

      // 2. Exercise: Create and Post General Journal.
      CreateAndPostJournal(Customer."No.",GLAccount."No.",Amount);

      // 3. Verify: Verify Account Schedule Matrix cell value with the Amount posted on General Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      Assert.AreEqual(-Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(ColumnLayoutOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewWithChangeLayoutName@45();
    VAR
      AccScheduleName@1001 : Record 84;
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      // Check that Program allows to change the column layout name on Account Schedule Overview window.

      // 1. Setup: Create Account Schedule Name and Column Layout Name.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryVariableStorage.Enqueue(ColumnLayoutName.Name);

      // 2. Exercise: Open Account Schedule Overview Page. Change of Column Layout Name done in ColumnLayoutOnOverviewPageHandler.
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);

      // 3. Verify: Verify "Column Layout Name" has been changed on Account Schedule Overview Page. Verification has been done in ColumnLayoutOnOverviewPageHandler.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleOverviewPageHandler)]
    [TransactionModel(AutoRollback)]
    PROCEDURE AccountScheduleOverviewDoesNotDependOnCostAccSetup@136();
    VAR
      AccScheduleName@1000 : Record 84;
      CostAccountingSetup@1001 : Record 1108;
    BEGIN
      Initialize;

      CostAccountingSetup.DELETEALL;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryVariableStorage.Enqueue(AccScheduleName.Name);

      // 2. Exercise: Open Account Schedule Overview Page.
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);
    END;

    [Test]
    [HandlerFunctions(ColumnValueOnOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewDoesNotValueInColumn@241();
    VAR
      AccScheduleLine@1004 : Record 85;
      GLAccount@1003 : Record 15;
      Customer@1002 : Record 18;
      Amount@1001 : Decimal;
    BEGIN
      // Check that Program allows to change the column layout name on Account Schedule Overview window.

      Initialize;
      // 1. Setup: Create Account Schedule Name and Column Layout Name.
      Amount := LibraryRandom.RandDec(100,2);

      // Exercise: Create G/L Account, Create and Post General Journal Lines.
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GLAccount."No.");
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostJournal(Customer."No.",GLAccount."No.",Amount);

      // Verify: Verify that there is no value in 3d column on OverviewPage after Column Layout was changed.
      LibraryVariableStorage.Enqueue(FALSE);
      OpenAccScheduleOverviewPageCheckValues(AccScheduleLine."Schedule Name",CreateColumnLayoutLinesWithName(3));

      LibraryVariableStorage.Enqueue(TRUE);
      OpenAccScheduleOverviewPageCheckValues(AccScheduleLine."Schedule Name",CreateColumnLayoutLinesWithName(2));
    END;

    [Test]
    PROCEDURE AccountScheduleTotalingError@43();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1004 : Record 334;
    BEGIN
      // Test error occurs on running Account Schedule Report with wrong Totaling on Account Schedule Line.

      // 1. Setup: Create Column Layout Name, Column Layout and Account Schedule with Account Schedule Line.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");

      // 2. Exercise: Run Account Schedule Report.
      ASSERTERROR RunAccountScheduleReport(AccScheduleLine."Schedule Name",ColumnLayout."Column Layout Name");

      // 3. Verify: Verify error occurs on running Account Schedule Report.
      Assert.ExpectedError(NonexistentErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccSchedulCCAndCOFilters@31();
    VAR
      CostCenter@1007 : Record 1112;
      CostObject@1006 : Record 1113;
      CostType@1005 : Record 1103;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
    BEGIN
      // Test Cost Center and Cost Object filters on Account Schedule Overview
      // The filtered result is always empty since a cost entry canot have both a Cost Center and a Cost Object defined

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",'','');

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',LibraryRandom.RandDec(10,2));
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,LibraryRandom.RandDec(10,2));

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETRANGE("Cost Center Filter",CostCenter.Code);
      AccScheduleLine.SETRANGE("Cost Object Filter",CostObject.Code);
      Assert.AreEqual(0,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccScheduleCCAndCOTotaling@34();
    VAR
      CostCenter@1007 : Record 1112;
      CostObject@1006 : Record 1113;
      CostType@1005 : Record 1103;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
    BEGIN
      // Test Cost Center Totaling and Cost Object Totaling fields on Account Schedule Line
      // The result in Acc Schedule Overview is always empty since a cost entry canot have both a Cost Center and a Cost Object defined

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",CostCenter.Code,CostObject.Code);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',LibraryRandom.RandDec(10,2));
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,LibraryRandom.RandDec(10,2));

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      Assert.AreEqual(0,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccScheduleCostCenterFilter@14();
    VAR
      CostCenter@1006 : Record 1112;
      CostObject@1007 : Record 1113;
      CostType@1005 : Record 1103;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // Test Cost Center filter on Account Schedule Overview

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",'','');
      Amount := LibraryRandom.RandDec(10,2);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',Amount);
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,LibraryRandom.RandDec(10,2));

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETRANGE("Cost Center Filter",CostCenter.Code);
      Assert.AreEqual(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccScheduleCostCenterTotaling@32();
    VAR
      CostCenter@1006 : Record 1112;
      CostObject@1005 : Record 1113;
      CostType@1004 : Record 1103;
      ColumnLayout@1003 : Record 334;
      AccScheduleLine@1001 : Record 85;
      Amount@1007 : Decimal;
    BEGIN
      // Test Cost Center Totaling field from Account Schedule Line and the result in Acc Schedule Overview

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",CostCenter.Code,'');
      Amount := LibraryRandom.RandDec(10,2);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',Amount);
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,LibraryRandom.RandDec(10,2));

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      Assert.AreEqual(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AccScheduleOverviewPageDrillDownHandler)]
    PROCEDURE AccScheduleCostCenterTotalingDrillDown@170();
    VAR
      CostCenter@1006 : Record 1112;
      CostObject@1005 : Record 1113;
      CostType@1004 : Record 1103;
      ColumnLayout@1003 : Record 334;
      AccScheduleLine@1001 : Record 85;
      AccScheduleName@1008 : Record 84;
      AccountScheduleNames@1002 : TestPage 103;
      AccountSchedule@1000 : TestPage 104;
      Amount@1007 : Decimal;
    BEGIN
      // Test Cost Center Totaling field from Account Schedule Line and the result in Acc Schedule Overview

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);

      CreateAccountScheduleAndLineWithCostType(AccScheduleName,AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",CostCenter.Code,'');

      // 2. Exercise.
      Amount := LibraryRandom.RandDec(10,2);
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',Amount);
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,LibraryRandom.RandDec(10,2));
      LibraryVariableStorage.Enqueue(Amount);

      AccountScheduleNames.OPENVIEW;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccountSchedule.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;
      AccountSchedule.Overview.INVOKE;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccScheduleCostObjectFilter@25();
    VAR
      CostCenter@1007 : Record 1112;
      CostObject@1006 : Record 1113;
      CostType@1005 : Record 1103;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // Test Cost Object filter on Account Schedule Overview

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",'','');
      Amount := LibraryRandom.RandDec(10,2);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',LibraryRandom.RandDec(10,2));
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,Amount);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETRANGE("Cost Object Filter",CostObject.Code);
      Assert.AreEqual(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AccScheduleCostObjectTotaling@33();
    VAR
      CostCenter@1007 : Record 1112;
      CostObject@1006 : Record 1113;
      CostType@1005 : Record 1103;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // Test Cost Object Totaling field from Account Schedule Line and the result in Acc Schedule Overview

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type.
      Initialize;
      SetupCostAccObjects(CostType,CostCenter,CostObject);
      CreateColumnLayout(ColumnLayout);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostType."No.",'',CostObject.Code);
      Amount := LibraryRandom.RandDec(10,2);

      // 2. Exercise:
      CreateAndPostCostJournal(CostType."No.",CostCenter.Code,'',LibraryRandom.RandDec(10,2));
      CreateAndPostCostJournal(CostType."No.",'',CostObject.Code,Amount);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column)  with the Amount posted on Cost Journal.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      Assert.AreEqual(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),UnknownErr);
    END;

    [Test]
    PROCEDURE AccScheduleWithTypeAsCostType@113();
    VAR
      AccScheduleLine@1009 : Record 85;
      CostType@1008 : Record 1103;
      CostCenter@1007 : Record 1112;
      ColumnLayout@1006 : Record 334;
      CostTypeNo@1005 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify amounts for created cost type on Account Schedule Overview.

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type as Cost type.
      Initialize;
      Amount := LibraryRandom.RandDec(10,2);
      CostTypeNo := CreateCostType(CostType.Type::"Cost Type",FALSE);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(AccScheduleLine,CostTypeNo,AccScheduleLine."Totaling Type"::"Cost Type");

      // 2. Exercise:
      CreateAndPostCostJournal(CostTypeNo,CostCenter.Code,'',Amount);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount);
    END;

    [Test]
    PROCEDURE AccScheduleWithTypeAsTotal@117();
    VAR
      AccScheduleLine@1005 : Record 85;
      CostType@1004 : Record 1103;
      CostCenter@1003 : Record 1112;
      ColumnLayout@1002 : Record 334;
      CostTypeNo1@1001 : Code[10];
      CostTypeNo2@1007 : Code[10];
      CostTypeNo3@1008 : Code[10];
      Amount1@1000 : Decimal;
      Amount2@1006 : Decimal;
    BEGIN
      // Verify amounts for created cost type on Account Schedule Overview.

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type as Total.
      Initialize;
      Amount1 := LibraryRandom.RandDec(10,2) + 10;  // To test with different amount.
      Amount2 := LibraryRandom.RandDec(10,2);
      CostTypeNo1 := CreateCostType(CostType.Type::"Cost Type",FALSE);
      CostTypeNo2 := CreateCostType(CostType.Type::"Cost Type",FALSE);
      CostTypeNo3 := CreateCostType(CostType.Type::Total,TRUE);
      CostType.GET(CostTypeNo3);
      UpdateTotalingInCostType(CostType,CostTypeNo1 + '..' + CostTypeNo2);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(AccScheduleLine,CostTypeNo3,AccScheduleLine."Totaling Type"::"Cost Type Total");

      // 2. Exercise:
      CreateAndPostCostJournal(CostTypeNo1,CostCenter.Code,'',Amount1);
      CreateAndPostCostJournal(CostTypeNo2,CostCenter.Code,'',Amount2);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount1 + Amount2);
    END;

    [Test]
    PROCEDURE AccScheduleWithTypeAsEndTotal@185();
    VAR
      AccScheduleLine@1002 : Record 85;
      CostType@1000 : Record 1103;
      CostCenter@1007 : Record 1112;
      ColumnLayout@1004 : Record 334;
      CostTypeNo1@1011 : Code[10];
      CostTypeNo2@1008 : Code[10];
      CostTypeNo3@1006 : Code[10];
      CostTypeNo4@1005 : Code[10];
      CostTypeNo5@1001 : Code[10];
      Amount1@1003 : Decimal;
      Amount2@1009 : Decimal;
      Amount3@1010 : Decimal;
    BEGIN
      // Verify amounts for created cost type on Account Schedule Overview.

      // 1. Setup: Create Cost Type and Account Schedule Lines with created Cost Type as End-Total.
      Initialize;
      Amount1 := LibraryRandom.RandDec(10,2) + 10;  // To test with different amount.
      Amount2 := LibraryRandom.RandDec(10,2) + 20;  // To test with different amount.
      Amount3 := LibraryRandom.RandDec(10,2);
      CostTypeNo1 := CreateCostType(CostType.Type::"Begin-Total",TRUE);
      CostTypeNo2 := CreateCostType(CostType.Type::"Cost Type",FALSE);
      CostTypeNo3 := CreateCostType(CostType.Type::"Cost Type",FALSE);
      CostTypeNo4 := CreateCostType(CostType.Type::"Cost Type",FALSE);
      CostTypeNo5 := CreateCostType(CostType.Type::"End-Total",TRUE);
      CostType.GET(CostTypeNo5);
      UpdateTotalingInCostType(CostType,CostTypeNo1 + '..' + CostTypeNo5);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(AccScheduleLine,CostTypeNo5,AccScheduleLine."Totaling Type"::"Cost Type Total");

      // 2. Exercise:
      CreateAndPostCostJournal(CostTypeNo2,CostCenter.Code,'',Amount1);
      CreateAndPostCostJournal(CostTypeNo3,CostCenter.Code,'',Amount2);
      CreateAndPostCostJournal(CostTypeNo4,CostCenter.Code,'',Amount3);

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount1 + Amount2 + Amount3);
    END;

    [Test]
    PROCEDURE AccScheduleWithCashFlowAsEntry@109();
    VAR
      AccScheduleLine@1002 : Record 85;
      CashFlowAccount@1000 : Record 841;
      ColumnLayout@1009 : Record 334;
      CashFlowAccountNo@1001 : Code[10];
      Amount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO] Verify amounts for created Cash Flow Account as Entry Account Type on Account Schedule Overview.

      // [GIVEN] Create Cash Flow Account as Entry Account Type and Account Schedule Lines with created Cash Flow Account as Entry Account Type.
      Initialize;
      Amount := LibraryRandom.RandDec(10,2);
      CashFlowAccountNo := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(
        AccScheduleLine,CashFlowAccountNo,AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");

      // [WHEN] Post Cash Flow Journal
      CreateAndPostCashFlowJournal(CashFlowAccountNo,Amount,WORKDATE);

      // [THEN] Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount);
    END;

    [Test]
    PROCEDURE AccScheduleWithCashFlowAsTotal@155();
    VAR
      AccScheduleLine@1002 : Record 85;
      CashFlowAccount@1005 : Record 841;
      ColumnLayout@1003 : Record 334;
      CashFlowAccountNo1@1010 : Code[10];
      CashFlowAccountNo2@1011 : Code[10];
      CashFlowAccountNo3@1012 : Code[10];
      Amount1@1004 : Decimal;
      Amount2@1000 : Decimal;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO] Verify amounts for created Cash Flow Account as Total Account Type on Account Schedule Overview.

      // [GIVEN] Create Cash Flow Account as Total Account Type and Account Schedule Lines with created Cash Flow Account as Total Account Type.
      Initialize;
      Amount1 := LibraryRandom.RandDec(10,2) + 10;  // To test with different amount.
      Amount2 := LibraryRandom.RandDec(10,2);
      CashFlowAccountNo1 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CashFlowAccountNo2 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CashFlowAccountNo3 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Total);
      CashFlowAccount.GET(CashFlowAccountNo3);
      UpdateTotalingInCashFlowAccount(CashFlowAccount,CashFlowAccountNo1 + '..' + CashFlowAccountNo2);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(
        AccScheduleLine,CashFlowAccountNo3,AccScheduleLine."Totaling Type"::"Cash Flow Total Accounts");

      // [WHEN] Post Cash Flow Journal
      CreateAndPostCashFlowJournal(CashFlowAccountNo1,Amount1,WORKDATE);
      CreateAndPostCashFlowJournal(CashFlowAccountNo2,Amount2,WORKDATE);

      // [THEN] Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount1 + Amount2);
    END;

    [Test]
    PROCEDURE AccScheduleWithCashFlowAsEndTotal@156();
    VAR
      AccScheduleLine@1002 : Record 85;
      CashFlowAccount@1005 : Record 841;
      ColumnLayout@1009 : Record 334;
      CashFlowAccountNo1@1015 : Code[10];
      CashFlowAccountNo2@1014 : Code[10];
      CashFlowAccountNo3@1013 : Code[10];
      CashFlowAccountNo4@1016 : Code[10];
      CashFlowAccountNo5@1017 : Code[10];
      Amount1@1004 : Decimal;
      Amount2@1003 : Decimal;
      Amount3@1011 : Decimal;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO] Verify amounts for created Cash Flow Account as End Total Account Type on Account Schedule Overview.

      // [GIVEN] Create Cash Flow Account as End Total Account Type and Account Schedule Lines with created Cash Flow Account as End Total Account Type.
      Amount1 := LibraryRandom.RandDec(10,2) + 10;  // To test with different amount.
      Amount2 := LibraryRandom.RandDec(10,2) + 20;  // To test with different amount.
      Amount3 := LibraryRandom.RandDec(10,2);
      CashFlowAccountNo1 := CreateCashFlowAccount(CashFlowAccount."Account Type"::"Begin-Total");
      CashFlowAccountNo2 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CashFlowAccountNo3 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CashFlowAccountNo4 := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CashFlowAccountNo5 := CreateCashFlowAccount(CashFlowAccount."Account Type"::"End-Total");
      CashFlowAccount.GET(CashFlowAccountNo5);
      UpdateTotalingInCashFlowAccount(CashFlowAccount,CashFlowAccountNo1 + '..' + CashFlowAccountNo5);
      CreateColumnLayout(ColumnLayout);
      SetupAccountSchedule(
        AccScheduleLine,CashFlowAccountNo5,AccScheduleLine."Totaling Type"::"Cash Flow Total Accounts");

      // [WHEN] Post Cash Flow Journal
      CreateAndPostCashFlowJournal(CashFlowAccountNo2,Amount1,WORKDATE);
      CreateAndPostCashFlowJournal(CashFlowAccountNo3,Amount2,WORKDATE);
      CreateAndPostCashFlowJournal(CashFlowAccountNo4,Amount3,WORKDATE);

      // [THEN] Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount1 + Amount2 + Amount3);
    END;

    [Test]
    PROCEDURE AccScheduleWithCashFlowForPeriodWithDateFormula@226();
    VAR
      AccScheduleLine@1002 : Record 85;
      CashFlowAccount@1000 : Record 841;
      ColumnLayout@1009 : Record 334;
      CashFlowAccountNo@1001 : Code[10];
      Amount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO 378872] Calculation of amount in Column with Comparision Date Formula when Account Schedule Overview is filtered with period.

      // [GIVEN] Column Layout with Comparision Date Formula <-1Y> for Account Schedule Line with Cash Flow Account
      Initialize;
      CashFlowAccountNo := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CreateColumnLayout(ColumnLayout);
      EVALUATE(ColumnLayout."Comparison Date Formula",'<-1Y>');
      ColumnLayout.MODIFY;
      SetupAccountSchedule(
        AccScheduleLine,CashFlowAccountNo,AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");

      // [GIVEN] Cash Flow Entry on 25.01.18 with Amount = 20
      CreateAndPostCashFlowJournal(CashFlowAccountNo,LibraryRandom.RandDec(10,2),WORKDATE);

      // [WHEN] Post Cash Flow Entry on 25.01.17 with Amount = 100
      Amount := LibraryRandom.RandDec(10,2);
      CreateAndPostCashFlowJournal(CashFlowAccountNo,Amount,CALCDATE('<-1Y>',WORKDATE));

      // [THEN] Column with Date Formula has Cell Amount = 100 for Account Schedule Overview period = 01.01.18..31.01.18
      VerifyAccScheduleLineAmountWithDateFilter(
        AccScheduleLine,ColumnLayout,Amount,
        STRSUBSTNO('%1..%2',CALCDATE('<-CM>',WORKDATE),CALCDATE('<CM>',WORKDATE)));
    END;

    [Test]
    PROCEDURE AccScheduleWithTotalingTypeAsFormula@111();
    VAR
      AccScheduleLine@1011 : Record 85;
      ColumnLayout@1004 : Record 334;
      Amount1@1002 : Decimal;
      Amount2@1001 : Decimal;
    BEGIN
      // Verify amounts for Totaling Type as Formula and Totaling contains % operator on Account Schedule Overview.

      // 1. Setup: Create Account Schedule Lines with Totaling Type as Formula and Totaling contains % operator.
      Initialize;
      Amount1 := LibraryRandom.RandDec(100,2) + 100;  // To test with different amount.
      Amount2 := LibraryRandom.RandDec(100,2);

      // 2. Exercise:
      CreateColumnLayout(ColumnLayout);
      SetupAccountScheduleWithFormula(AccScheduleLine,FORMAT(Amount1) + '%' + FORMAT(Amount2));

      // 3. Verify: Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,Amount1 / Amount2 * 100);  // To calculate percentage of Amount1 on Amount2.
    END;

    [Test]
    PROCEDURE BlankAccountScheduleName@1();
    VAR
      AccScheduleName@1002 : Record 84;
      AccSchedManagement@1001 : Codeunit 8;
    BEGIN
      // Test error occurs on running Account Schedule form with Blank Account Schedule Name.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Update Blank Account Schedule Name on Account Schedule Form.
      ASSERTERROR AccSchedManagement.CheckName('');

      // 3. Verify: Verify error occurs "Account Schedule Name cannot blank" on running Account Schedule form with Blank
      // Account Schedule Name.
      Assert.ExpectedError(STRSUBSTNO(ExistErr,AccScheduleName.TABLECAPTION));
    END;

    [Test]
    PROCEDURE BlankColumnName@4();
    VAR
      ColumnLayoutName@1001 : Record 333;
      AccSchedManagement@1002 : Codeunit 8;
    BEGIN
      // Test error occurs on running Column Layout form with Blank Column Layout Name.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Update Blank Column Layout Name on Column Layout Form.
      ASSERTERROR AccSchedManagement.CheckColumnName('');

      // 3. Verify: Verify error occurs "Column Layout Name cannot blank" on running Column Layout form with Blank Column Layout Name.
      Assert.ExpectedError(STRSUBSTNO(ExistErr,ColumnLayoutName.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewPageHandler)]
    PROCEDURE ColumnLayoutColumnCaption@39();
    VAR
      AccScheduleName@1000 : Record 84;
      ColumnLayoutName@1002 : Record 333;
      LayoutName@1001 : Code[10];
      HeaderCaption@1003 : Text[30];
    BEGIN
      // Check that correct caption header updated on Account Schedule Overview Page.

      // Setup: Create Account Schedule.
      Initialize;
      HeaderCaption := LibraryUtility.GenerateGUID;
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      // Exercise: Create Column Layout with a column having column header.
      LayoutName := CreateColumnLayoutWithName(HeaderCaption);
      LibraryVariableStorage.Enqueue(LayoutName);
      LibraryVariableStorage.Enqueue(HeaderCaption);

      // Verify: Verify Column Caption updated according to Column Layout on Account Schedule Overview Page.
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);

      // Tear Down: Delete earlier created Column Layout and Account Schedule.
      ColumnLayoutName.GET(LayoutName);
      ColumnLayoutName.DELETE(TRUE);
      AccScheduleName.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE ColumnLayoutError@6();
    BEGIN
      // Test error occurs on updating wrong formula on Column Layout.
      ColumnLayoutFormulaError('(',FormulaErr);
    END;

    LOCAL PROCEDURE ColumnLayoutFormulaError@54(Formula@1003 : Code[80];ExpectedError@1004 : Text[1024]);
    VAR
      AccScheduleLine@1002 : Record 85;
    BEGIN
      // 1. Setup.
      Initialize;

      // 2. Exercise: Update formula on Column Layout.
      ASSERTERROR AccScheduleLine.CheckFormula(Formula);

      // 3. Verify: Verify error occurs on formula updation on Column Layout.
      Assert.AreEqual(STRSUBSTNO(ExpectedError),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE ColumnLayoutShowNegative@7();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test Creation of Column Layout with When Negative.
      ColumnLayoutWithShow(ColumnLayout.Show::"When Negative");
    END;

    [Test]
    PROCEDURE ColumnLayoutShowNever@30();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test Creation of Column Layout with Show Never.
      ColumnLayoutWithShow(ColumnLayout.Show::Never);
    END;

    [Test]
    PROCEDURE ColumnLayoutShowPositive@29();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test Creation of Column Layout with When Positive.
      ColumnLayoutWithShow(ColumnLayout.Show::"When Positive");
    END;

    [Test]
    PROCEDURE ColumnLayoutTwiceOperator@26();
    BEGIN
      // Test Error occurs on updating Multiple Operators formula on Column Layout.
      ColumnLayoutFormulaError('++',OperatorErr);
    END;

    [Test]
    PROCEDURE ColumnLayoutWithChangeLayoutName@40();
    VAR
      ColumnLayoutName@1000 : Record 333;
      ColumnLayout@1001 : TestPage 489;
    BEGIN
      // Check that Program allows to change the column layout name on Column layout window.

      // 1. Setup: Create Column Layout Name.
      Initialize;
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);

      // 2. Exercise: Open Column Layout Page and change the Column Layout Name.
      ColumnLayout.OPENEDIT;
      ColumnLayout.CurrentColumnName.SETVALUE(ColumnLayoutName.Name);

      // 3. Verify: Verify "Column Layout Name" has been changed on Column Layout Page without any confirmation message.
      ColumnLayout.CurrentColumnName.ASSERTEQUALS(ColumnLayoutName);
    END;

    LOCAL PROCEDURE ColumnLayoutWithShow@17(Show@1002 : Option);
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // 1. Setup: Create Column Layout Name and Column Layout.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // 2. Exercise: Update Show as per parameter.
      ColumnLayout.VALIDATE(Show,Show);
      ColumnLayout.MODIFY(TRUE);

      // 3. Verify: Verify Column Layout successfully created.
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
      ColumnLayout.FINDFIRST;
      ColumnLayout.TESTFIELD(Show,Show);
    END;

    [Test]
    PROCEDURE ColumnLayoutWithShowError@42();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test error occurs on update Show other than the available options.

      // 1. Setup: Create Column Layout Name.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // 2. Exercise: Create Column Layout and update Show value as Column Layout Name.
      ASSERTERROR EVALUATE(ColumnLayout.Show,ColumnLayout."Column Layout Name");

      // 3. Verify: Verify error occurs on update Show other than the available options.
      Assert.AreNotEqual(
        0,STRPOS(GETLASTERRORTEXT,ColumnLayout."Column Layout Name"),
        STRSUBSTNO(ExistErr,ColumnLayout.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ColumnLayoutWrongParentheses@5();
    BEGIN
      // Test error occurs on updating wrong parentheses formula on Column Layout.
      ColumnLayoutFormulaError(')',ParenthesesErr);
    END;

    [Test]
    PROCEDURE CreationOfAccountSchedule@11();
    VAR
      AccScheduleName@1000 : Record 84;
    BEGIN
      // Test Creation of Account Schedule Name.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Account Schedule Name.
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      // 3. Verify: Verify Account Schedule Name successfully created.
      AccScheduleName.GET(AccScheduleName.Name);
    END;

    [Test]
    PROCEDURE CreationOfAccountScheduleLine@2();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
    BEGIN
      // Test Creation of Account Schedule Line.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Account Schedule Name and Account Schedule Line.
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);

      // 3. Verify: Verify Account Schedule Line successfully created.
      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDFIRST;
    END;

    [Test]
    PROCEDURE CreationOfColumnLayout@24();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test Creation of Column Layout.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Column Layout Name and Column Layout.
      CreateColumnLayout(ColumnLayout);

      // 3. Verify: Verify Column Layout successfully created.
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
      ColumnLayout.FINDFIRST;
    END;

    [Test]
    PROCEDURE CreationOfColumnLayoutName@23();
    VAR
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      // Test Creation of Column Layout Name.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Column Layout Name.
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);

      // 3. Verify: Verify Column Layout Name successfully created.
      ColumnLayoutName.GET(ColumnLayoutName.Name);
    END;

    [Test]
    PROCEDURE DateFormulaWithoutNumber@28();
    VAR
      ColumnLayout@1001 : Record 334;
    BEGIN
      // Test error occurs on updating Comparison Date Formula without any Numerical value.

      // 1. Setup: Create Column Layout Name and Column Layout.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // 2. Exercise: Update Comparison Date Formula without any Numerical value.
      ASSERTERROR EVALUATE(ColumnLayout."Comparison Date Formula",'<Y>');

      // 3. Verify: Verify error occurs on Comparison Date Formula updation.
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,DateFormulaErr),UnknownErr);
    END;

    [Test]
    PROCEDURE DeleteAccountSchedule@10();
    VAR
      AccScheduleName@1000 : Record 84;
    BEGIN
      // Test Account Schedule Name successfully deleted.

      // 1. Setup: Create Account Schedule Name.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      // 2. Exercise: Delete Account Schedule Name.
      AccScheduleName.DELETE(TRUE);

      // 3. Verify: Verify Account Schedule Name successfully deleted.
      Assert.IsFalse(
        AccScheduleName.GET(AccScheduleName.Name),STRSUBSTNO(ExistErr,AccScheduleName.TABLECAPTION));
    END;

    [Test]
    PROCEDURE DeleteAccountScheduleLine@20();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
    BEGIN
      // Test Account Schedule Line Successfully deleted.

      // 1. Setup: Create Account Schedule Name and Account Schedule Line.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);

      // 2. Exercise: Delete Account Schedule Line.
      AccScheduleLine.DELETE(TRUE);

      // 3. Verify: Verify Account Schedule Line successfully deleted.
      Assert.IsFalse(
        AccScheduleLine.GET(AccScheduleLine."Schedule Name",AccScheduleLine."Line No."),
        STRSUBSTNO(ExistErr,AccScheduleLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE DeleteColumnLayoutName@3();
    VAR
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      // Test Column Layout Name Successfully deleted.

      // 1. Setup: Create Column Layout Name.
      Initialize;
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);

      // 2. Exercise: Delete Column Layout Name.
      ColumnLayoutName.DELETE(TRUE);

      // 3. Verify: Verify Column Layout Name successfully deleted.
      Assert.IsFalse(
        ColumnLayoutName.GET(ColumnLayoutName.Name),STRSUBSTNO(ExistErr,ColumnLayoutName.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ValuesOnAccScheduleLineCorrespondingCostBudgetFilter@84();
    VAR
      CostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
      ColumnLayout@1002 : Record 334;
      AccScheduleLine@1000 : Record 85;
    BEGIN
      // Unit Test - Check Account Schedule Line Amount for corresponding Cost Budget Filter.

      // 1.Setup: Create Column Layout and Cost Budget Entry.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      UpdateColumnLayout(ColumnLayout);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);

      // 2.Exercise: Create Account Schedule Line with Cost Type No. in Totaling Field.
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleForCA(AccScheduleLine,CostBudgetEntry."Cost Type No.",CostBudgetEntry."Cost Center Code",'');

      // 3.Verify: To verify Cost Budget Entry Amount in Account Schedule line is correct for corresponding Cost Budget Filter.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETRANGE("Cost Budget Filter",CostBudgetEntry."Budget Name");
      CostBudgetEntry.TESTFIELD(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE));
    END;

    [Test]
    PROCEDURE ValuesOnAccScheduleLineCorrespondingDateFilter@85();
    VAR
      GenJournalLine@1000 : Record 81;
      ColumnLayout@1001 : Record 334;
      AccScheduleLine@1004 : Record 85;
      TotalingType@1005 : 'Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts';
      GLAccountNo@1002 : Code[20];
      Amount@1003 : Decimal;
    BEGIN
      // Unit test - Check Account Schedule Line Amount for corresponding Date Filter.

      // 1.Setup: Create and Post General Journal Line.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      CreateGeneralLineWithGLAccount(GenJournalLine,LibraryRandom.RandDec(100,2));  // Take random for Amount.
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      GLAccountNo := GenJournalLine."Account No.";
      Amount := GenJournalLine.Amount;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Create Account Schedule Line.
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleLine(
        AccScheduleLine,GLAccountNo,TotalingType::"Posting Accounts",FORMAT(LibraryRandom.RandInt(5)));

      // 3.Verify: Verify Amount is correct on Account Schedule Line.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETFILTER("Row No.",AccScheduleLine."Row No.");
      Assert.AreEqual(
        Amount,
        LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),
        STRSUBSTNO(AccSchOverviewAmountsErr,AccScheduleLine,ColumnLayout));
    END;

    [Test]
    PROCEDURE ValuesAccScheduleLineCorrespondingGLBudgetFilter@81();
    VAR
      GLAccount@1000 : Record 15;
      GLBudgetName@1001 : Record 95;
      GLBudgetEntry@1003 : Record 96;
      ColumnLayout@1002 : Record 334;
      AccScheduleLine@1008 : Record 85;
      TotalingType@1005 : 'Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts';
    BEGIN
      // Unit test - Check Account Schedule Line Amount for corresponding G/L Budget Filter.

      // 1.Setup: Create Column Layout and Cost Budget Entry.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      UpdateColumnLayout(ColumnLayout);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,GLAccount."No.",GLBudgetName.Name);
      UpdateGLBudgetEntry(GLBudgetEntry);

      // 2.Exercise: Create Account Schedule Line with G/L Account No. in Totaling Field.
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleLine(
        AccScheduleLine,GLAccount."No.",TotalingType::"Posting Accounts",FORMAT(LibraryRandom.RandInt(5)));

      // 3.Verify: To verify G/L Budget Entry Amount Schedule line is correct for corresponding G/L Budget Filter.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.SETRANGE("G/L Budget Filter",GLBudgetName.Name);
      GLBudgetEntry.TESTFIELD(Amount,LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE));
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewWithCostBudgetFilterHandler)]
    PROCEDURE VerifyAccScheduleOverviewCostBudgetFilter@82();
    VAR
      CostType@1000 : Record 1103;
      CostCenter@1001 : Record 1112;
      CostBudgetName@1002 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
      AccScheduleLine@1004 : Record 85;
    BEGIN
      // Unit test - Check Cost Budget Filter is set correctly on Account Schedule Overview Matrix.

      // 1.Setup: Create Cost Budget Entry.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);
      UpdateCostBudgetEntry(CostBudgetEntry,CostType."No.",CostCenter.Code,'');

      // 2.Exercise: Create Account Schedule Line.
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,CostType."No.");

      // 3.Verify: Verify Cost Budget Filter is set correctly through AccScheduleOverviewWithCostBudgetFilterHandler.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewWithDateFilterHandler)]
    PROCEDURE VerifyAccScheduleOverviewDateFilter@86();
    VAR
      GenJournalLine@1000 : Record 81;
      AccScheduleLine@1004 : Record 85;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // Unit test - Check Date Filter is set correctly on Account Schedule Overview.

      // 1.Setup: Create and Post General Journal Line.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine,LibraryRandom.RandDec(100,2));  // Take random Amount.
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      GLAccountNo := GenJournalLine."Account No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Create Account Schedule Line.
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GLAccountNo);

      // 3.Verify: Verify Date Filter is set correctly through AccScheduleOverviewWithDateFilterHandler.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewWithDateFilterIntervalHandler)]
    PROCEDURE AccScheduleOverviewComparFormulaDateFilter@191();
    VAR
      GenJournalLine@1000 : Record 81;
      AccScheduleLine@1004 : Record 85;
    BEGIN
      // 1.Setup: Create and Post General Journal Line.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine,LibraryRandom.RandDec(100,2));  // Take random Amount.
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Create Account Schedule Line.
      CreateAccountScheduleWithComparisonFormula(AccScheduleLine,GenJournalLine."Account No.");

      // 3.Verify: Verify Date Filter is set correctly through AccScheduleOverviewWithDateFilterHandler.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewWithGLBudgetFilterHandler)]
    PROCEDURE VerifyAccScheduleOverviewGLBudgetFilter@68();
    VAR
      GLAccount@1000 : Record 15;
      GLBudgetName@1001 : Record 95;
      GLBudgetEntry@1002 : Record 96;
      AccScheduleLine@1008 : Record 85;
    BEGIN
      // Unit test - Check G/L Budget Filter is set correctly on Account Schedule Overview Page.

      // 1.Setup: Create G/L Budget Entry.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,GLAccount."No.",GLBudgetName.Name);
      UpdateGLBudgetEntry(GLBudgetEntry);

      // 2.Exercise: Create Account Schedule Line.
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GLAccount."No.");

      // 3.Verify: Verify G/L Budget Filter is set correctly AccScheduleOverviewWithGLBudgetFilterHandler.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    [Test]
    [HandlerFunctions(GLAccountListPageHandler)]
    PROCEDURE VerifyAccountScheduleInsertGLAccount@49();
    VAR
      AccScheduleName@1000 : Record 84;
      GLAccount@1003 : Record 15;
      AccScheduleLine@1001 : Record 85;
      AccSchedManagement@1005 : Codeunit 8;
    BEGIN
      // Test that system inserts the row in the next line while using the function InsertGLAccounts in Acc. Schedule Line.

      // Setup: Create Acc. Schedule name and Acc. Schedule line.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.FindGLAccountDataSet(GLAccount);
      LibraryVariableStorage.Enqueue(GLAccount."No.");
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);

      // Exercise: Insert second row in Acc. Schedule Line by using InsertGLAccounts function.
      AccSchedManagement.InsertGLAccounts(AccScheduleLine);

      // Verify that system insert the record in the next line.
      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDLAST;
      AccScheduleLine.TESTFIELD("Row No.",GLAccount."No.");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler)]
    PROCEDURE AccountScheduleOverviewShowOptionNegative@57();
    VAR
      ColumnLayout@1002 : Record 334;
    BEGIN
      // Verify Account Schedule Overview Page with Column Layout Show option "When Negative".
      Initialize;
      AccountScheduleOverviewShowOption(ColumnLayout.Show::"When Negative",-1);  // Take -1 for sign factor.
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler)]
    PROCEDURE AccountScheduleOverviewShowOptionPositive@55();
    VAR
      ColumnLayout@1002 : Record 334;
    BEGIN
      // Verify Account Schedule Overview Page with Column Layout Show option "When Positive".
      Initialize;
      AccountScheduleOverviewShowOption(ColumnLayout.Show::"When Positive",1);  // Take 1 for sign factor.
    END;

    LOCAL PROCEDURE AccountScheduleOverviewShowOption@64(Show@1004 : Option;SignFactor@1005 : Integer);
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1002 : Record 334;
      Amount@1000 : Decimal;
    BEGIN
      // Setup: Create and modify Column Layout Name, create and post General Line, create Account Schedule Line.
      Amount := SignFactor * LibraryRandom.RandInt(100) + LibraryERM.GetAmountRoundingPrecision;  // Required random value for Amount upto 2 decimal precision.
      SetupForAccountScheduleOverviewPage(
        AccScheduleLine,Show,Amount,ColumnLayout."Rounding Factor"::None,'');
      LibraryVariableStorage.Enqueue(-Amount);  // Enqueue for AccScheduleOverviewHandler.

      // Exercise.
      ASSERTERROR OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // Verify: Verify error while validating Amount on Account Schedule Overview page.
      Assert.ExpectedError(STRSUBSTNO(ExpectedErr,-Amount,Amount));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportShowOptionNever@50();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout Show option "Never".

      // Setup: Create and modify Column Layout Name, create and post General Line, create Account Schedule Line.
      SetupForAccountScheduleOverviewPage(
        AccScheduleLine,
        ColumnLayout.Show::Never,
        LibraryRandom.RandDec(100,2),
        ColumnLayout."Rounding Factor"::None,
        '');  // Take random for Amount.
      LibraryVariableStorage.Enqueue(AccScheduleLine."Schedule Name");
      COMMIT;  // Commit required for running the Report.

      // Exercise: Run Account Schedule report.
      REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify Column not found on report when Column Layout Show option is "Never"
      LibraryReportDataset.LoadDataSetFile;
      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('',AccScheduleLine.Totaling);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportRoundingOptionNone@92();
    VAR
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout Rounding Factor option "None".
      AccountScheduleReportRoundingOption(ColumnLayout."Rounding Factor"::None,1,0.01);  // 1 for Rounding Factor Amount and 0.01 for Precision.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportRoundingOption1@91();
    VAR
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout Rounding Factor option "1".
      AccountScheduleReportRoundingOption(ColumnLayout."Rounding Factor"::"1",1,1);  // 1 for Rounding Factor Amount and Precision.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportRoundingOption1000@90();
    VAR
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout Rounding Factor option "1000".
      AccountScheduleReportRoundingOption(ColumnLayout."Rounding Factor"::"1000",1000,0.1);  // 1000 for Rounding Factor Amount and 1 for Precision.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportRoundingOption1000000@89();
    VAR
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout Rounding Factor option "1000000".
      AccountScheduleReportRoundingOption(ColumnLayout."Rounding Factor"::"1000000",1000000,0.1);  // 1000000 for Rounding Factor Amount and 1 for Precision.
    END;

    LOCAL PROCEDURE AccountScheduleReportRoundingOption@87(RoundingFactor@1005 : Option;RoundingFactorAmount@1006 : Integer;Precision@1007 : Decimal);
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
      Amount@1002 : Decimal;
    BEGIN
      // Setup: Create and modify Column Layout Name, create and post General Line, create Account Schedule Line.
      Initialize;
      Amount := LibraryRandom.RandDec(10000000,2);  // Take large random value for Amount.
      SetupForAccountScheduleOverviewPage(AccScheduleLine,ColumnLayout.Show::Always,Amount,RoundingFactor,'');
      LibraryVariableStorage.Enqueue(AccScheduleLine."Schedule Name");
      COMMIT;  // Commit required for running the Report.

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(FORMAT(ROUND(Amount / RoundingFactorAmount,Precision)));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportRoundingOptionNoneSmallNumber@166();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
      MaxAmount@1004 : Decimal;
      Amount@1002 : Decimal;
    BEGIN
      // Setup: Create and modify Column Layout Name, create and post General Line, create Account Schedule Line.
      Initialize;
      MaxAmount := 1000; // any random 1..1000 number will be divided by 10000000 thus we will have quite smal number
      Amount := LibraryRandom.RandDec(MaxAmount,2);
      SetupForAccountScheduleOverviewPage(
        AccScheduleLine,
        ColumnLayout.Show::Always,
        Amount,
        ColumnLayout."Rounding Factor"::None,
        STRSUBSTNO(DivisionFormulaTok,Amount,POWER(MaxAmount,2)));
      LibraryVariableStorage.Enqueue(AccScheduleLine."Schedule Name");
      COMMIT;  // Commit required for running the Report.

      RunAndVerifyAccSheduleReport(FORMAT(Amount / POWER(MaxAmount,2),0,LibraryAccSchedule.GetAutoFormatString));
    END;

    [Test]
    [HandlerFunctions(BlankCellOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewPageRoundingOptionNone@299();
    VAR
      ColumnLayout@1000 : Record 334;
      Factor@1005 : Decimal;
      Amount@1002 : Decimal;
    BEGIN
      Factor := LibraryERM.GetAmountRoundingPrecision;
      Amount := LibraryRandom.RandDecInRange(100,200,2) * Factor;
      AccountScheduleOverviewPageRoundingOption(
        FORMAT(Amount,0,LibraryAccSchedule.GetAutoFormatString),
        ColumnLayout."Rounding Factor"::None,'',
        Amount);
    END;

    [Test]
    [HandlerFunctions(BlankCellOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewPageRoundingOption1@298();
    VAR
      ColumnLayout@1000 : Record 334;
      Factor@1005 : Decimal;
      Amount@1001 : Decimal;
    BEGIN
      Factor := POWER(10,3 * (ColumnLayout."Rounding Factor"::"1" - 1));
      Amount := LibraryRandom.RandDecInRange(Factor,10 * Factor,2);
      AccountScheduleOverviewPageRoundingOption(
        FORMAT(ROUND(Amount,1)),
        ColumnLayout."Rounding Factor"::"1",'',Amount);
    END;

    [Test]
    [HandlerFunctions(BlankCellOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewPageRoundingOption1000@297();
    VAR
      ColumnLayout@1000 : Record 334;
      Factor@1005 : Decimal;
      Amount@1001 : Decimal;
    BEGIN
      Factor := POWER(10,3 * (ColumnLayout."Rounding Factor"::"1000" - 1));
      Amount := LibraryRandom.RandDecInRange(Factor,10 * Factor,2);
      AccountScheduleOverviewPageRoundingOption(
        FORMAT(Amount / 1000,0,LibraryAccSchedule.GetCustomFormatString('1')),
        ColumnLayout."Rounding Factor"::"1000",'',Amount);
    END;

    [Test]
    [HandlerFunctions(BlankCellOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewPageRoundingOption1000000@296();
    VAR
      ColumnLayout@1000 : Record 334;
      Factor@1002 : Decimal;
      Amount@1001 : Decimal;
    BEGIN
      Factor := POWER(10,3 * (ColumnLayout."Rounding Factor"::"1000000" - 1));
      Amount := LibraryRandom.RandDecInRange(Factor,10 * Factor,2);
      AccountScheduleOverviewPageRoundingOption(
        FORMAT(Amount / 1000000,0,LibraryAccSchedule.GetCustomFormatString('1')),
        ColumnLayout."Rounding Factor"::"1000000",'',Amount);
    END;

    [Test]
    [HandlerFunctions(BlankCellOverviewPageHandler)]
    PROCEDURE AccountScheduleOverviewPageRoundingOptionNoneSmallNumber@277();
    VAR
      ColumnLayout@1000 : Record 334;
      MaxAmount@1004 : Decimal;
      Factor@1005 : Decimal;
    BEGIN
      MaxAmount := 1000;
      Factor := POWER(MaxAmount,2);

      AccountScheduleOverviewPageRoundingOption('',
        ColumnLayout."Rounding Factor"::None,
        STRSUBSTNO(DivisionFormulaTok,LibraryRandom.RandDec(MaxAmount,2),Factor),
        MaxAmount);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccountScheduleReportDivisionByZero@65();
    BEGIN
      // Verify Account Schedule Report with Show Error "Division By Zero".
      AccountScheduleReportWithFormula(
        LibraryRandom.RandDec(1000,2),STRSUBSTNO(CalcFormulaTok,'/',0),DivisionByZeroErr);
    END;

    [Test]
    PROCEDURE AccountScheduleOverviewWithACY@115();
    VAR
      AccScheduleLine@1000 : Record 85;
      ColumnLayout@1001 : Record 334;
      Customer@1005 : Record 18;
      Currency@1004 : Record 4;
      GLAccount@1006 : Record 15;
      Amount@1002 : Decimal;
    BEGIN
      // Verifies that Account Schedule Overview show Amounts in Additional Report Currency correctly for all Column Values with ACY.
      // Setup: Update Add. Reporting currency on general ledger setup and create acc. schedule line.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      LibraryERM.FindCurrency(Currency);
      UpdateCurrencyWithResidualAccount(Currency);
      LibraryERM.SetAddReportingCurrency(Currency.Code);
      LibraryERM.CreateGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostJournal(Customer."No.",GLAccount."No.",Amount);
      CreateColumnLayout(ColumnLayout);
      CreateAndUpdateAccountSchedule(
        AccScheduleLine,ColumnLayout."Column Layout Name",GLAccount."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");

      // Exercise.
      SetAddCurrencyOnAccScheduleOverview(AccScheduleLine."Schedule Name");

      // Verify: Verify that correct values are updated on Account Schedule line.
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
      AccScheduleLine.FIND;
      Assert.AreEqual(
        -1 * CalculateAmtInAddCurrency(Currency.Code,Amount,WORKDATE),
        LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,TRUE,TRUE),
        STRSUBSTNO(AccSchOverviewAmountsErr,AccScheduleLine,ColumnLayout));

      // Tear Down: Update general ledger setup with old value.
      ResetAddCurrInAccScheduleOverview;
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForSmallMultiply@62();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for multiply by Small value.
      Amount := LibraryRandom.RandDec(100,2) * 1000;  // Take large random value for Amount.
      AccountScheduleReportWithFormula(Amount,STRSUBSTNO(CalcFormulaTok,'*',0.00001),FORMAT(ROUND(Amount * 0.00001)));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForSmallDivision@60();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for Divide by Small value.
      Amount := LibraryRandom.RandDec(100,2);  // Take random value for Amount.
      AccountScheduleReportWithFormula(
        Amount,STRSUBSTNO(CalcFormulaTok,'/',0.00001),FORMAT(Amount / 0.00001,0,LibraryAccSchedule.GetAutoFormatString));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForLargeMultiply@48();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for multiply by Large value.
      Amount := LibraryRandom.RandDec(100,2);  // Take random value for Amount.
      AccountScheduleReportWithFormula(Amount,STRSUBSTNO(CalcFormulaTok,'*',99999.99),FORMAT(ROUND(Amount * 99999.99)));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForLargeDivision@106();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for Divide by Large value.
      Amount := LibraryRandom.RandDec(100,2);  // Take random value for Amount.
      AccountScheduleReportWithFormula(
        Amount,STRSUBSTNO(CalcFormulaTok,'/',99999.99),FORMAT(Amount / 99999.99,0,LibraryAccSchedule.GetAutoFormatString));
    END;

    LOCAL PROCEDURE AccountScheduleReportWithFormula@41(Amount@1006 : Decimal;Formula@1004 : Text[50];Value@1005 : Text[50]);
    VAR
      ColumnLayout@1002 : Record 334;
    BEGIN
      // Setup: Create and post General Line.Create Account Schedule Line.
      Initialize;
      SetupForAccScheduleReportWithFormula(ColumnLayout,Amount);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayout."Column Layout Name",ColumnLayout."Column No." + Formula);
      COMMIT;  // Commit required for running the Report.

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(FORMAT(Value));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForCrossAddition@27();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for cross addition.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Amount := LibraryRandom.RandInt(10) + LibraryERM.GetAmountRoundingPrecision;  // Take random value for Amount.
      AccScheduleReportColumnForCrossCalculation(
        '+',Amount,FORMAT(Amount + Amount,0,LibraryAccSchedule.GetAutoFormatString),1);  // Take 1 for multiplying with fixed value.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForCrossMultiply@99();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for cross multiplication.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Amount := LibraryRandom.RandInt(10) + LibraryERM.GetAmountRoundingPrecision;  // Take random value for Amount.
      AccScheduleReportColumnForCrossCalculation(
        '*',Amount,FORMAT(Amount * Amount,0,LibraryAccSchedule.GetAutoFormatString),1);  // Take 1 for multiplying with fixed value.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForCrossDivision@100();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for cross division.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Amount := LibraryRandom.RandInt(10) + LibraryERM.GetAmountRoundingPrecision;  // Take random value for Amount.
      AccScheduleReportColumnForCrossCalculation(
        '/',Amount,FORMAT(Amount / Amount,0,LibraryAccSchedule.GetAutoFormatString),1);  // Take 1 for multiplying with fixed value.
    END;

    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    LOCAL PROCEDURE AccScheduleReportColumnForCrossCalculation@96(Formula@1005 : Text[10];Amount@1002 : Decimal;Value@1001 : Text[50];Value2@1006 : Integer);
    VAR
      ColumnLayout@1000 : Record 334;
      ColumnLayout2@1003 : Record 334;
      ColumnLayout3@1004 : Record 334;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for cross calculation.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Initialize;
      SetupForAccScheduleReportWithFormula(ColumnLayout,Amount);
      CreateColumnLayoutLine(
        ColumnLayout2,ColumnLayout."Column Layout Name",
        ColumnLayout."Column No.");
      CreateColumnLayoutLine(
        ColumnLayout3,ColumnLayout."Column Layout Name",
        STRSUBSTNO(ParenthesisFormulaTok,ColumnLayout."Column No.",Formula,ColumnLayout2."Column No.",Value2));
      CreateColumnLayoutLine(
        ColumnLayout3,ColumnLayout."Column Layout Name",
        ColumnLayout."Column No." + Formula + ColumnLayout2."Column No.");
      COMMIT;  // Commit required for running the Report.

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(FORMAT(Value));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForSumOfOddOrder@94();
    VAR
      ColumnLayout@1000 : Record 334;
      ColumnLayout2@1003 : Record 334;
      ColumnLayout3@1004 : Record 334;
      Amount@1001 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for sum with odd order.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Initialize;
      Amount := LibraryRandom.RandDec(10,2);  // Take random for Amount.
      SetupForAccScheduleReportWithFormula(ColumnLayout,Amount);
      CreateColumnLayoutLine(
        ColumnLayout2,ColumnLayout."Column Layout Name",
        ColumnLayout."Column No.");
      CreateColumnLayoutLine(
        ColumnLayout3,ColumnLayout."Column Layout Name",
        ColumnLayout."Column No.");
      CreateColumnLayoutLine(
        ColumnLayout2,ColumnLayout."Column Layout Name",
        STRSUBSTNO(RangeFormulaTok,ColumnLayout."Column No.",ColumnLayout3."Column No."));
      COMMIT;  // Commit required for running the Report.

      // Exercise and Verification: Using 3 for increasing the Amount value 3 times.
      RunAndVerifyAccSheduleReport(FORMAT(Amount * 3));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnForDecimalSeperator@97();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for Decimal Seperator.
      Amount := LibraryRandom.RandDec(100,2);  // Take random value for Amount.
      AccountScheduleReportWithFormula(
        Amount,STRSUBSTNO(CalcFormulaTok,'/',1.0005),FORMAT(Amount / 1.0005,0,LibraryAccSchedule.GetAutoFormatString));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForMultiplyByZeroFormula@108();
    VAR
      RowNo@1000 : Code[10];
      Amount@1002 : Decimal;
    BEGIN
      // Verify multiplication by zero formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(
        RowNo,STRSUBSTNO(ArthimaticFormulaTok,RowNo,'*',0.01),Amount,FORMAT(0.01));  // Using 0.01 in case of output is 0.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForDivisionByZeroFormula@107();
    VAR
      RowNo@1000 : Code[10];
      Amount@1001 : Decimal;
    BEGIN
      // Verify division by zero formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(
        RowNo,STRSUBSTNO(ArthimaticFormulaTok,RowNo,'/',0.01),Amount,DivisionByZeroErr);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForMultiplyWithShortDecimal@104();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify short decimal value multiply calculation formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(RowNo,
        STRSUBSTNO(FractionFormulaTok,RowNo,'*',0.00000000000001,0.01),Amount,FORMAT(0.01));  // Using 0.01 in case of output is 0.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForDivisionWithShortDecimal@110();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify short decimal value division calculation formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(
        RowNo,STRSUBSTNO(FractionFormulaTok,RowNo,'/',0.00000000000001,0.01),Amount,
        FORMAT(((Amount / Amount) / 0.00000000000001) + 0.01));  // Using 0.01 in case of output is 0.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForDivisionWithLongDecimal@128();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify long decimal value division calculation formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(RowNo,
        STRSUBSTNO(FractionFormulaTok,RowNo,'/',99999999999999.99,0.01),Amount,FORMAT(0.01));  // Using 0.01 in case of output is 0.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForAddition@134();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify addition formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(RowNo,RowNo + '+' + RowNo,Amount,FORMAT(Amount + Amount));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForLongCalculation@138();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify long calculation formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(
        RowNo,STRSUBSTNO(CalcFormulaTxt,100,RowNo),Amount,FORMAT(100 * (Amount + 100) / -100));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForDecimalSeprator@154();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify Decimal Seprator formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(RowNo,
        STRSUBSTNO(DecimalSeparatorTok,RowNo,1000,0.01),Amount,FORMAT((Amount * 1000) + 0.01));  // Using 0.01 in case of output is 0.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ValuesOnAccScheduleLineForRangeFormula@129();
    VAR
      RowNo@1001 : Code[10];
      Amount@1000 : Decimal;
    BEGIN
      // Verify range total formula value on Account Schedule report.
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random Integer value for Row No.
      Amount := LibraryRandom.RandDec(100,2);  // Using Random Decimal value for Amount.
      ValuesOnAccScheduleLineCorrespondingFormula(
        RowNo,STRSUBSTNO(RangeFormulaTok,RowNo,RowNo),Amount,FORMAT(Amount));
    END;

    LOCAL PROCEDURE ValuesOnAccScheduleLineCorrespondingFormula@103(RowNo@1008 : Code[10];FormulaValue@1007 : Text[50];Amount@1010 : Decimal;Value@1009 : Text);
    VAR
      ColumnLayout@1001 : Record 334;
      AccScheduleLine@1004 : Record 85;
    BEGIN
      // 1.Setup: Create Column Layout, create and Post General Journal Line.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      SetupForAccScheduleLinetWithFormula(AccScheduleLine,Amount,FormulaValue,ColumnLayout."Column Layout Name",RowNo,FALSE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(Value);
    END;

    [Test]
    PROCEDURE ErrorForConsecutiveOperatorsInFormula@102();
    VAR
      ColumnLayout@1001 : Record 334;
      AccScheduleLine@1000 : Record 85;
    BEGIN
      // Verify error while creating formula on Account Schedule Line with use of consecutive arithmetic operators.

      // Setup: Create Column Layout.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // Excercise. Create Account Schedule Line with Formula, using Random value for Amount and Row No.
      ASSERTERROR
        SetupForAccScheduleLinetWithFormula(
          AccScheduleLine,
          LibraryRandom.RandDec(100,2),
          ConsecutiveOperatorsTok,
          ColumnLayout."Column Layout Name",
          FORMAT(LibraryRandom.RandInt(5)),
          FALSE);

      // Verify: Verify error while creating formula on Account Schedule Line.
      Assert.ExpectedError(ConsecutiveOperatorsErr);
    END;

    [Test]
    PROCEDURE ErrorForParenthesisInFormula@101();
    VAR
      ColumnLayout@1002 : Record 334;
      AccScheduleLine@1001 : Record 85;
    BEGIN
      // Verify error while creating formula on Account Schedule Line with missing Parenthesis.

      // Setup: Create Column Layout.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // Excercise. Create Account Schedule Line with Formula.
      ASSERTERROR
        SetupForAccScheduleLinetWithFormula(
          AccScheduleLine,
          LibraryRandom.RandDec(100,2),
          ParenthesisTok,
          ColumnLayout."Column Layout Name",
          FORMAT(LibraryRandom.RandInt(5)),
          FALSE);  // Using Random value for Amount and Row No.

      // Verify: Verify error while creating formula on Account Schedule Line.
      Assert.ExpectedError(ParenthesisErr);
    END;

    [Test]
    PROCEDURE ErrorForMoreLeftParenthesisInFormula@95();
    VAR
      ColumnLayout@1001 : Record 334;
      AccScheduleLine@1000 : Record 85;
    BEGIN
      // Verify error while creating formula on Account Schedule Line with extra Left Parenthesis.

      // Setup: Create Column Layout.
      Initialize;
      CreateColumnLayout(ColumnLayout);

      // Excercise. Create Account Schedule Line with Formula, using Random value for Amount and Row No.
      ASSERTERROR
        SetupForAccScheduleLinetWithFormula(
          AccScheduleLine,
          LibraryRandom.RandDec(100,2),
          MoreLeftParenthesisTok,
          ColumnLayout."Column Layout Name",
          FORMAT(LibraryRandom.RandInt(5)),
          FALSE);

      // Verify: Verify error while creating formula on Account Schedule Line.
      Assert.ExpectedError(MoreLeftParenthesisErr);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE CrossAndSameRowNoInFormula@149();
    VAR
      RowNo@1000 : Code[10];
    BEGIN
      // Verify cross and same Row No used in Formula on Account Schedule.
      Initialize;
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random value for Row No.
      CrossRowsFormulaOnAccountSchedule(RowNo,RowNo + STRSUBSTNO(AvoidBlankTok,0.01),RowNo,FORMAT(0.01,0,1));  // Using 0.01 in case of output is 0 or blank.
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE CrossRowNoAndNumericValueInFormula@125();
    VAR
      RowNo@1000 : Code[10];
    BEGIN
      // Verify cross Row No and and numeric value used in Formula on Account Schedule.
      Initialize;
      RowNo := FORMAT(1 + LibraryRandom.RandInt(5));  // Using Random value for Row No.
      CrossRowsFormulaOnAccountSchedule(RowNo,FORMAT(1),INCSTR(RowNo),FORMAT(1.0,0,'<Sign><Integer Thousand><Decimals,3>'));
    END;

    LOCAL PROCEDURE CrossRowsFormulaOnAccountSchedule@144(RowNo@1000 : Code[10];FormulaValue@1002 : Text[50];FormulaValue2@1003 : Text[50];Value@1006 : Text[50]);
    VAR
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1005 : Record 85;
    BEGIN
      // Setup: Create Column Layout, create two Account Schedule Line with Totaling Type Formula.
      CreateColumnLayout(ColumnLayout);
      CreateMultiAccountScheduleLine(
        AccScheduleLine,
        ColumnLayout."Column Layout Name",
        RowNo,
        FormulaValue,
        FormulaValue2,AccScheduleLine."Totaling Type"::Formula,
        FALSE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(Value);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE ErrorOnCrossRowNoInFormula@163();
    VAR
      ColumnLayout@1000 : Record 334;
      AccScheduleLine@1001 : Record 85;
      RowNo@1002 : Code[10];
    BEGIN
      // Verify error while using cross row no in formula on Account Schedule Line.

      // Setup: Create Column Layout, create two Account Schedule Line with Totaling Type Formula.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      RowNo := FORMAT(LibraryRandom.RandInt(5));  // Using Random value for Row No.
      CreateMultiAccountScheduleLine(
        AccScheduleLine,
        ColumnLayout."Column Layout Name",
        RowNo,
        INCSTR(RowNo),
        RowNo,
        AccScheduleLine."Totaling Type"::Formula,
        FALSE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise:
      ASSERTERROR REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify error while using cross row no in formula on Account Schedule Line.
      Assert.ExpectedError(CircularRefErr);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnWithParenthesis@121();
    VAR
      Value@1000 : Integer;
      Amount@1001 : Decimal;
    BEGIN
      // Verify Account Schedule Report with Column Layout formula for cross addition with Parenthesis.

      // Setup: Create and post General Line.Create Account Schedule Line.
      Amount := LibraryRandom.RandDec(10,2);
      Value := LibraryRandom.RandInt(10);   // Take random value for multiplication.
      AccScheduleReportColumnForCrossCalculation('+',Amount,FORMAT(2 * Amount * Value),Value);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnWithCircularRefError@124();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
      ColumnLayout2@1004 : Record 334;
      ColumnLayoutName@1003 : Record 333;
    BEGIN
      // Verify error while running Account Schedule report with circular reference Column Layout.

      // Setup: Create Account Schedule Line.
      Initialize;
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,LibraryUtility.GenerateGUID);

      // Create and modify Column Layout.
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name,ColumnLayoutName.Name);
      CreateColumnLayoutLine(ColumnLayout2,ColumnLayout."Column Layout Name",ColumnLayout."Column No.");
      ColumnLayout.VALIDATE(Formula,ColumnLayout2."Column No.");
      ColumnLayout.MODIFY(TRUE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise:
      ASSERTERROR REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify error while running Account Schedule report with circular reference Column Layout.
      Assert.ExpectedError(CircularRefErr);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportIfColumnNotZero@112();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Verify no row found on Account Schedule Report when value in all Columns are zero and Account Schedule Line Show option is set If Any Column Not Zero.

      // Setup: Create and modify Account Schedule Line.
      Initialize;
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,LibraryUtility.GenerateGUID);
      AccScheduleLine.VALIDATE(Show,AccScheduleLine.Show::"If Any Column Not Zero");
      AccScheduleLine.MODIFY(TRUE);

      // Create Column Layout.
      ColumnLayout.SETRANGE("Column Layout Name",CreateColumnLayoutWithName(LibraryUtility.GenerateGUID));
      ColumnLayout.FINDFIRST;
      CreateColumnLayoutLine(
        ColumnLayout,ColumnLayout."Column Layout Name",FORMAT(LibraryRandom.RandDec(10,2)));  // Take random for formula value.
      EnqueueValuesForAccScheduleReport(
        ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise:
      REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify no row found on Account Schedule Report when value in all Columns are zero.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(LineSkippedTok,TRUE);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportWithNewPageTrue@120();
    VAR
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1005 : Record 85;
    BEGIN
      // Verify Account Schedule report with New Page True on Account Schedule Line.

      // Setup: Create Column Layout, create Account Schedule Line with New Page True, take random value for Amount and Row No.
      Initialize;
      CreateColumnLayout(ColumnLayout);
      SetupForAccScheduleLinetWithFormula(
        AccScheduleLine,
        LibraryRandom.RandDec(10,2),
        FORMAT(LibraryRandom.RandDec(10,2)),
        ColumnLayout."Column Layout Name",
        FORMAT(LibraryRandom.RandDec(10,2)),
        TRUE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");
      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleLine."Schedule Name");

      // Exercise.
      REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify two rows are printed on different pages.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(NextPageGroupNoTok,AccScheduleLine.COUNT);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleReportColumnWithCircularAdd@114();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
      ColumnLayout2@1004 : Record 334;
      ColumnLayoutName@1003 : Record 333;
      FormulaValue@1002 : Decimal;
      Value@1005 : Decimal;
    BEGIN
      // Verify Account Schedule report with Column Layout circular reference formula.

      // Setup: Create Account Schedule Line.
      Initialize;
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,LibraryUtility.GenerateGUID);

      // Create and modify Column Layout, take random Formula Value.
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      FormulaValue := LibraryRandom.RandDec(10,2);
      Value := LibraryRandom.RandDec(10,2);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name,ColumnLayoutName.Name);
      CreateColumnLayoutLine(ColumnLayout2,ColumnLayout."Column Layout Name",FORMAT(FormulaValue));
      ColumnLayout.VALIDATE(Formula,ColumnLayout2."Column No." + STRSUBSTNO(CalcFormulaTok,'+',FORMAT(Value)));
      ColumnLayout.MODIFY(TRUE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(FORMAT(FormulaValue + Value));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageHandler)]
    PROCEDURE AccScheduleComparisonDateFormula@123();
    VAR
      AccScheduleLine@1005 : Record 85;
      GenJournalLine@1000 : Record 81;
      ColumnLayout@1006 : Record 334;
      ComparisionDateFormula@1007 : DateFormula;
      Amount@1001 : Decimal;
    BEGIN
      // Verify Account Schedule report when Comparison Date Formula is defined for Column Layout.

      // Setup: Create and post General Journal Line.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine,LibraryRandom.RandDec(10,2));  // Take random Amount.
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EVALUATE(ComparisionDateFormula,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>');  // Take random value for Comparison Date Formula.
      Amount := LibraryRandom.RandDec(100,2);  // Take random for Amount.
      UpdateAndPostGeneralLine(CALCDATE(ComparisionDateFormula,WORKDATE),GenJournalLine."Account No.",Amount);

      // Create Account Schedule Line, create and modify Column Layout.
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GenJournalLine."Account No.");
      ColumnLayout.SETRANGE("Column Layout Name",CreateColumnLayoutWithName(GenJournalLine."Account No."));
      ColumnLayout.FINDFIRST;
      ColumnLayout.VALIDATE("Comparison Date Formula",ComparisionDateFormula);
      ColumnLayout.MODIFY(TRUE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // Exercise and Verification:
      RunAndVerifyAccSheduleReport(FORMAT(Amount,0,LibraryAccSchedule.GetAutoFormatString));
    END;

    [Test]
    [HandlerFunctions(GLAccountListPageHandler)]
    PROCEDURE AccScheduleWithGLAccountAsAmountTypeDebit@143();
    VAR
      GLAccount@1003 : Record 15;
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1006 : Record 334;
      GLAccountNo@1004 : Code[20];
    BEGIN
      // Verify Debit amount for created GL Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertGLAccounts function.
      Initialize;
      GLAccountNo := AccountScheduleInsertGLAccount(AccScheduleLine,ColumnLayout,ColumnLayout."Amount Type"::"Debit Amount");

      // Verify Debit amount on Account Schdule Line.
      GLAccount.GET(GLAccountNo);
      GLAccount.CALCFIELDS("Debit Amount");
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,GLAccount."Debit Amount");
    END;

    [Test]
    [HandlerFunctions(GLAccountListPageHandler)]
    PROCEDURE AccScheduleWithGLAccountAsAmountTypeCredit@140();
    VAR
      GLAccount@1003 : Record 15;
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1001 : Record 334;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify Credit amount for created GL Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertGLAccounts function.
      Initialize;
      GLAccountNo := AccountScheduleInsertGLAccount(AccScheduleLine,ColumnLayout,ColumnLayout."Amount Type"::"Credit Amount");

      // Verify Credit amount on Account Schdule Line.
      GLAccount.GET(GLAccountNo);
      GLAccount.CALCFIELDS("Credit Amount");
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,GLAccount."Credit Amount");
    END;

    [Test]
    [HandlerFunctions(GLAccountListPageHandler)]
    PROCEDURE AccScheduleWithGLAccountAsAmountTypeNet@148();
    VAR
      GLAccount@1003 : Record 15;
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1001 : Record 334;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify Net Amount for created GL Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertGLAccounts function
      Initialize;
      GLAccountNo := AccountScheduleInsertGLAccount(AccScheduleLine,ColumnLayout,ColumnLayout."Amount Type"::"Net Amount");

      // Verify Net amount on Account Schedule Line.
      GLAccount.GET(GLAccountNo);
      GLAccount.CALCFIELDS(Balance);
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,GLAccount.Balance);
    END;

    [Test]
    [HandlerFunctions(CashFlowListPageHandler)]
    PROCEDURE AccScheduleWithInsertCashFlow@164();
    VAR
      AccScheduleLine@1002 : Record 85;
      CashFlowAccount@1000 : Record 841;
      ColumnLayout@1009 : Record 334;
      AccSchedManagement@1003 : Codeunit 8;
      CashFlowAccountNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO] Verify Net Amount for created Ash Flow Account on Account Schedule Line.

      // [GIVEN] Create Cash Flow Account as Entry Account Type and Account Schedule Lines with created Cash Flow Account as Entry Account Type.
      Initialize;
      CashFlowAccountNo := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CreateColumnLayoutWithAmountType(ColumnLayout,ColumnLayout."Amount Type"::"Net Amount",CashFlowAccountNo);
      CreateAndPostCashFlowJournal(CashFlowAccountNo,LibraryRandom.RandDec(10,2),WORKDATE);
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,CashFlowAccountNo);
      LibraryVariableStorage.Enqueue(CashFlowAccountNo);

      // [WHEN] Insert row in Acc. Schedule Line by using InsertCFAccounts function.
      AccSchedManagement.InsertCFAccounts(AccScheduleLine);

      // [THEN] Verify Account Schedule Overview cell value (NetChange column) with the Amount posted on Cost Journal.
      CashFlowAccount.GET(CashFlowAccountNo);
      CashFlowAccount.CALCFIELDS(Amount);
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,CashFlowAccount.Amount);
    END;

    [Test]
    [HandlerFunctions(CostTypeListPageHandler)]
    PROCEDURE AccScheduleWithCostTypeAsAmountTypeDebit@146();
    VAR
      AccScheduleLine@1009 : Record 85;
      CostType@1002 : Record 1103;
      ColumnLayout@1006 : Record 334;
      CostTypeNo@1000 : Code[20];
    BEGIN
      // Verify Debit amount for created Cost type Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertCostType function
      Initialize;
      CostTypeNo := AccScheduleWithInsertCostType(AccScheduleLine,ColumnLayout,ColumnLayout."Amount Type"::"Debit Amount");

      // Verify Debit amount on Account Schedule Line.
      CostType.GET(CostTypeNo);
      CostType.CALCFIELDS("Debit Amount");
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,CostType."Debit Amount");
    END;

    [Test]
    [HandlerFunctions(CostTypeListPageHandler)]
    PROCEDURE AccScheduleWithCostTypeAsAmountTypeCredit@151();
    VAR
      AccScheduleLine@1009 : Record 85;
      CostType@1008 : Record 1103;
      ColumnLayout@1006 : Record 334;
      CostTypeNo@1005 : Code[20];
    BEGIN
      // Verify Credit amount for created Cost type Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertCostType function
      Initialize;
      CostTypeNo := AccScheduleWithInsertCostType(AccScheduleLine,ColumnLayout,ColumnLayout."Amount Type"::"Credit Amount");

      // Verify Credit amount on Account Schedule Line.
      CostType.GET(CostTypeNo);
      CostType.CALCFIELDS("Credit Amount");
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,CostType."Credit Amount");
    END;

    [Test]
    [HandlerFunctions(CostTypeListPageHandler)]
    PROCEDURE AccScheduleWithCostTypeAsAmountTypeNet@153();
    VAR
      AccScheduleLine@1009 : Record 85;
      CostType@1008 : Record 1103;
      ColumnLayout@1006 : Record 334;
      CostTypeNo@1005 : Code[20];
    BEGIN
      // Verify Net amount for created Cost type Account on Account Schedule Line.

      // Create Acc. Schedule Line by using InsertCostType function
      Initialize;
      CostTypeNo := AccScheduleWithInsertCostType(AccScheduleLine,ColumnLayout,CostType."Debit Amount");

      // Verify Net amount on Account Schedule Line.
      CostType.GET(CostTypeNo);
      CostType.CALCFIELDS(Balance);
      VerifyAccSchedulLIneAmount(AccScheduleLine,ColumnLayout,CostType.Balance);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageVerifyValuesHandler)]
    PROCEDURE RunReportForNonExistingAccSchedule@158();
    VAR
      AccScheduleName@1002 : Record 84;
      ColumnLayoutName@1003 : Record 333;
    BEGIN
      // Verify Account Schedule report can be run for account schedule which doesn't exist in current company,
      // but was used for printing in other company or deleted

      // Setup: create and print first account schedule. Delete it after that
      Initialize;

      CreateAndPrintAccountSchedule(AccScheduleName,ColumnLayoutName,FALSE);

      AccScheduleName.DELETE(TRUE);
      ColumnLayoutName.DELETE(TRUE);

      // Exercise and Verification: create and print second account schedule
      CreateAndPrintAccountSchedule(AccScheduleName,ColumnLayoutName,TRUE);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewColumnLayoutChangePageHandler)]
    PROCEDURE AccScheduleOverviewColumnLayoutChange@243();
    VAR
      AccScheduleLine@1004 : Record 85;
      GLAccount@1003 : Record 15;
      Customer@1002 : Record 18;
    BEGIN
      // Check column clean up on Column Layout switching

      // Setup
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);

      // Exercise
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GLAccount."No.");
      CreateAndPostJournal(Customer."No.",GLAccount."No.",LibraryRandom.RandDec(100,2));

      // Verify: Verify that there is no value in 3rd column on OverviewPage after Column Layout change.
      LibraryVariableStorage.Enqueue(CreateColumnLayoutLinesWithName(2));
      OpenAccScheduleOverviewPageCheckValues(AccScheduleLine."Schedule Name",CreateColumnLayoutLinesWithName(3));
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewDrillDownHandler,ChartOfAccountsPageHandler)]
    PROCEDURE DrillDownWithDimensionTotalingFromAccScheduleLine@169();
    BEGIN
      // Verify G/L Entries are filtered with correct Dimension filter defined in Acc. Schedule Line
      DrillDownWithDimensionTotaling(DATABASE::"Acc. Schedule Line");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewDrillDownHandler,ChartOfAccountsPageHandler)]
    PROCEDURE DrillDownWithDimensionTotalingFromColumnLayout@168();
    BEGIN
      // Verify G/L Entries are filtered with correct Dimension filter defined in Column Layout
      DrillDownWithDimensionTotaling(DATABASE::"Column Layout");
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewWithDisabledLinePageHandler)]
    PROCEDURE AccScheduleOverviewExcludeLinesWithShowNo@165();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1006 : Record 85;
      RowNo@1001 : ARRAY [2] OF Code[10];
      i@1003 : Integer;
    BEGIN
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      FOR i := 1 TO ARRAYLEN(RowNo) DO BEGIN
        RowNo[i] := FORMAT(i);
        LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
        AccScheduleLine.VALIDATE("Row No.",RowNo[i]);
        AccScheduleLine.MODIFY(TRUE);
      END;
      LibraryVariableStorage.Enqueue(RowNo[2]);
      AccScheduleLine.VALIDATE(Show,AccScheduleLine.Show::No);
      AccScheduleLine.MODIFY(TRUE);

      // Veirification done in AccScheduleOverviewWithDisabledLinePageHandler
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    [Test]
    PROCEDURE AccScheduleOverviewWithMultiplteCostCenterOnColumnLayout@369();
    VAR
      CostType@1002 : Record 1103;
      AccScheduleName@1013 : Record 84;
      CostBudgetName@1000 : Record 1110;
      AccountScheduleNames@1010 : TestPage 103;
      AccScheduleOverview@1011 : TestPage 490;
      CostTypeNo@1009 : Code[20];
      CostCenterAmount@1007 : ARRAY [2] OF Decimal;
      i@1008 : Integer;
    BEGIN
      // [SCENARIO 360737] Column values on Account Schedule Overview calculated based on Cost Center setup in Column Layout

      Initialize;
      // [GIVEN] Simple Budget and Cost Type
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CostTypeNo := CreateCostType(CostType.Type::"Cost Type",FALSE);
      // [GIVEN] Account Schedule with Default Column Layout and single line
      SetupAccountScheduleWithDefColumnAndLine(AccScheduleName,CostTypeNo);
      // [GIVEN] Multiple column layouts with different Cost Centers and associated Cost Budget Entry
      FOR i := 1 TO ARRAYLEN(CostCenterAmount) DO
        CostCenterAmount[i] :=
          SetupColumnLayoutWithBudgetEntryAndCA(AccScheduleName."Default Column Layout",CostBudgetName.Name,CostTypeNo);

      // [WHEN] Account Schedule Overview opened
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccScheduleOverview.TRAP;
      AccountScheduleNames.Overview.INVOKE;

      // [THEN] Column values calculated separately for different Cost Centers
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(CostCenterAmount[1]);
      AccScheduleOverview.ColumnValues2.ASSERTEQUALS(CostCenterAmount[2]);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewDrillDownHandler,RowMessageHandler)]
    PROCEDURE AccScheduleVerifyFormulaMessage@173();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1003 : Record 334;
    BEGIN
      // [SCENARIO 379134] Drill Down on Account Schedule cell with Formula in Acc. Schedule line shows message with row formula
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling Type = Formula
      CreateColumnLayout(ColumnLayout);
      CreateMultiAccountScheduleLine(AccScheduleLine,ColumnLayout."Column Layout Name",'',
        '','',AccScheduleLine."Totaling Type"::Formula,FALSE);
      EnqueueValuesForAccScheduleReport(ColumnLayout."Column Layout Name",AccScheduleLine."Schedule Name");

      // [WHEN] Drill Down on Cell with formula
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
      // AccScheduleOverviewDrillDownHandler will exercise drilldown.

      // [THEN] Message with row formula is displayed
      // Verification is done by RowMessageHandler
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewDrillDownHandler,ChartOfAccountsDrillDownPageHandler)]
    PROCEDURE AccScheduleVerifySourcePageDisplayed@203();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1003 : Record 334;
      CashFlowAccount@1002 : Record 841;
      CashFlowAccountNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 379134] Drill Down on Account Schedule cell without Formula in Acc. Schedule line opens Chart of Accounts page
      Initialize;

      // [GIVEN] Account Schedule for Cash Flow account
      CashFlowAccountNo := CreateCashFlowAccount(CashFlowAccount."Account Type"::Entry);
      CreateColumnLayoutWithAmountType(ColumnLayout,ColumnLayout."Amount Type"::"Net Amount",CashFlowAccountNo);
      CreateAndPostCashFlowJournal(CashFlowAccountNo,LibraryRandom.RandDec(10,2),WORKDATE);
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,CashFlowAccountNo);
      LibraryVariableStorage.Enqueue(CashFlowAccountNo);

      // [WHEN] Drill Down on Account Schedule Cell
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
      // AccScheduleOverviewDrillDownHandler will exercise drilldown.

      // [THEN] "Chart of Accounts (G/L)" page is opened
      // Verification is done by ChartOfAccountsDrillDownPageHandler - if a Message is shown instead this will error (for instance if this is treated as a formula).
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineNetChangeColumn@273();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [SCENARIO 361759] Calculate Balance at Date in G/L Account in Acc. Schedule Line with "Beginning Balance" as row type in "Net Change" column

      // [GIVEN] G/L Account with posted amount X
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      Amount := LibraryRandom.RandDec(100,2);
      PostGenJournalLine(GLAccount."No.",Amount,LibraryRandom.RandDate(-10));

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Net Change"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Net Change");

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to X
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(-Amount,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineYearToDateColumn@396();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [SCENARIO 361759] Calculate Balance at Date in G/L Account in Acc. Schedule Line with "Beginning Balance" as row type in "Year to Date" column

      // [GIVEN] G/L Account with posted amount X
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      Amount := LibraryRandom.RandDec(100,2);
      PostGenJournalLine(GLAccount."No.",Amount,LibraryRandom.RandDate(-10));

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Year to Date"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Year to Date");

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to X
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(0,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineEntireFiscalYearColumn@394();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [SCENARIO 361759] Calculate Balance at Date in G/L Account in Acc. Schedule Line with "Beginning Balance" as row type in "Entire Fiscal Year" column

      // [GIVEN] G/L Account with posted amount X
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      Amount := LibraryRandom.RandDec(100,2);
      PostGenJournalLine(GLAccount."No.",Amount,LibraryRandom.RandDate(-10));

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Entire Fiscal Year"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Entire Fiscal Year");

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to X
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(0,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    PROCEDURE VerifyDimensionWithTotallingSetup@199();
    VAR
      GLAccount@1000 : Record 15;
      ColumnLayout@1005 : Record 334;
      AccScheduleLine@1006 : Record 85;
      AccScheduleOverview@1007 : TestPage 490;
      TotalDimValue@1004 : Code[20];
      DimValues@1001 : ARRAY [2] OF Code[20];
      Amounts@1002 : ARRAY [2] OF Decimal;
      i@1003 : Integer;
    BEGIN
      // [SCENARIO 121895] Verify amount in Acc. Schedule Overview page is filtered by totalling dimension value
      Initialize;

      // [GIVEN] Create G/L Account
      LibraryERM.CreateGLAccount(GLAccount);

      // [GIVEN] Create new Acc. Schedule for the G/L Account
      CreateColumnLayout(ColumnLayout);
      CreateAndUpdateAccountSchedule(
        AccScheduleLine,ColumnLayout."Column Layout Name",GLAccount."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");

      // [GIVEN] Create post document with amount "A1" and dimension value "D1"
      // [GIVEN] Create post document with amount "A2" and dimension value "D2"
      FOR i := 1 TO 2 DO BEGIN
        Amounts[i] := LibraryRandom.RandDec(100,2);
        DimValues[i] := CreateAndPostJournalWithDimension(GLAccount."No.",Amounts[i]);
      END;

      // [GIVEN] Create new dim value "D3" with "Dimension Value Type"::Total and "Totaling" = "D1..D2"
      CreateTotallingDimValue(TotalDimValue,DimValues);

      // [WHEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [THEN] Acc. Schedule Overview Amount = "A1" for "Dimension 1 Filter" = "D1"
      // [THEN] Acc. Schedule Overview Amount = "A2" for "Dimension 1 Filter" = "D2"
      // [THEN] Acc. Schedule Overview Amount = (A1 + A2) for "Dimension 1 Filter" = "D3"
      VerifyAccScheduleOverviewAmountsWithTotalDimValue(
        AccScheduleOverview,ColumnLayout."Column Layout Name",DimValues,TotalDimValue,Amounts);
    END;

    [Test]
    [HandlerFunctions(VerifyMessageHandler)]
    PROCEDURE DrillDownFormulaWithDivisionByZero@188();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayoutName@1003 : Record 333;
      ColumnLayout@1000 : Record 334;
      AccountScheduleNames@1005 : TestPage 103;
      AccScheduleOverview@1002 : TestPage 490;
      Formula@1004 : Code[80];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO] Drill Down cell with Formula in Acc. Schedule Overview shows error message in case of division by zero
      Initialize;

      // [GIVEN] Account Schedule with "Formula" = "1 / 0" in Column Layuot
      Formula := '1/0';
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name,Formula);
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayoutName.Name);
      UpdateAccScheduleLine(
        AccScheduleLine,AccScheduleLine.Totaling,AccScheduleLine."Totaling Type"::"Posting Accounts",AccScheduleLine."Row No.");
      UpdateDefaultColumnLayoutOnAccSchName(AccScheduleLine."Schedule Name",ColumnLayoutName.Name);

      LibraryVariableStorage.Enqueue(STRSUBSTNO(ColumnFormulaMsg,Formula));
      LibraryVariableStorage.Enqueue(STRSUBSTNO(ColumnFormulaErrorMsg,ErrorTypeRef::"Division by Zero"));

      // [WHEN] Run Drill Down on Formula on Acc. Schedule Overview page
      AccountScheduleNames.OPENVIEW;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleLine."Schedule Name");
      AccScheduleOverview.TRAP;
      AccountScheduleNames.Overview.INVOKE;
      AccScheduleOverview.ColumnValues1.DRILLDOWN;

      // [THEN] Drill Down Message shows text of Formula
      // [THEN] Drill Down Message shows Error Type
      // Verification is done in VerifyMessageHandler
      ColumnLayoutName.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(ChartOfCostCentersHandler)]
    PROCEDURE CheckLookupCostCenterFilterLookupOK@238();
    VAR
      CostCenter@1000 : Record 1112;
      Text@1001 : Text;
      Result@1002 : Boolean;
    BEGIN
      // [SCENARIO 123662] Unit test checks function LookupCostCenterFilter from Cost Center Table, Action = LookupOK
      // [GIVEN] Cost Center "X"
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryVariableStorage.Enqueue(ResponseRef::LookupOK);
      LibraryVariableStorage.Enqueue(CostCenter.Code);
      // [WHEN] Lookup called and confirmed
      Result := CostCenter.LookupCostCenterFilter(Text);
      // [THEN] Result = True and Text = "X"
      Assert.IsTrue(Result,LookupCostCenterFilterErr);
      Assert.AreEqual(FORMAT(CostCenter.Code),Text,LookupCostCenterFilterErr);
    END;

    [Test]
    [HandlerFunctions(ChartOfCostCentersHandler)]
    PROCEDURE CheckLookupCostCenterFilterLookupCancel@236();
    VAR
      CostCenter@1000 : Record 1112;
      Text@1001 : Text;
      OldText@1003 : Text;
      Result@1002 : Boolean;
    BEGIN
      // [SCENARIO 123662] Unit test checks function LookupCostCenterFilter from Center Table, Action = LookupCancel
      // [GIVEN] Initial Text = "Y"
      OldText := LibraryUtility.GenerateGUID;
      Text := OldText;
      // [GIVEN] Cost Center "X"
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryVariableStorage.Enqueue(ResponseRef::LookupCancel);
      LibraryVariableStorage.Enqueue(CostCenter.Code);
      // [WHEN] Lookup called and canceled
      Result := CostCenter.LookupCostCenterFilter(Text);
      // [THEN] Result = False and Text = "Y"
      Assert.IsFalse(Result,LookupCostCenterFilterErr);
      Assert.AreEqual(OldText,Text,LookupCostCenterFilterErr);
    END;

    [Test]
    [HandlerFunctions(ChartOfCostObjectsHandler)]
    PROCEDURE CheckLookupCostObjectFilterLookupOK@239();
    VAR
      CostObject@1000 : Record 1113;
      Text@1001 : Text;
      Result@1002 : Boolean;
    BEGIN
      // [SCENARIO 123662] Unit test checks function LookupCostObjectFilter from Cost Object Table, Action = LookupOK
      // [GIVEN] Cost Object "X"
      LibraryCostAccounting.CreateCostObject(CostObject);
      LibraryVariableStorage.Enqueue(ResponseRef::LookupOK);
      LibraryVariableStorage.Enqueue(CostObject.Code);
      // [WHEN] Lookup called and confirmed
      Result := CostObject.LookupCostObjectFilter(Text);
      // [THEN] Result = True and Text = "X"
      Assert.IsTrue(Result,LookupCostObjectFilterErr);
      Assert.AreEqual(FORMAT(CostObject.Code),Text,LookupCostObjectFilterErr);
    END;

    [Test]
    [HandlerFunctions(ChartOfCostObjectsHandler)]
    PROCEDURE CheckLookupCostObjectFilterLookupCancel@237();
    VAR
      CostObject@1000 : Record 1113;
      Text@1001 : Text;
      OldText@1003 : Text;
      Result@1002 : Boolean;
    BEGIN
      // [SCENARIO 123662] Unit test checks function LookupCostObjectFilter from Cost Object Table, Action = LookupCancel
      // [GIVEN] Initial Text = "Y"
      OldText := LibraryUtility.GenerateGUID;
      Text := OldText;
      // [GIVEN] Cost Object "X"
      LibraryCostAccounting.CreateCostObject(CostObject);
      LibraryVariableStorage.Enqueue(ResponseRef::LookupCancel);
      LibraryVariableStorage.Enqueue(CostObject.Code);
      // [WHEN] Lookup called and canceled
      Result := CostObject.LookupCostObjectFilter(Text);
      // [THEN] Result = False and Text = "Y"
      Assert.IsFalse(Result,LookupCostObjectFilterErr);
      Assert.AreEqual(OldText,Text,LookupCostObjectFilterErr);
    END;

    [Test]
    PROCEDURE AccScheduleOverviewForceRefresh@201();
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1004 : Record 334;
      GLBudgetName@1006 : Record 95;
      GLBudgetEntry@1000 : Record 96;
      AccSchedManagement@1007 : Codeunit 8;
      GLAccountNo@1005 : Code[20];
      CellValue@1008 : Decimal;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 371849] Force Recalculate for CalcCell function on 'Acc. Schedule Overview' page when G/L Budget Entry is changed
      Initialize;

      // [GIVEN] Account Schedule for Budget Entries with G/L Account No. = "A"
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleLine(
        AccScheduleLine,GLAccountNo,AccScheduleLine."Totaling Type"::"Posting Accounts",FORMAT(LibraryRandom.RandInt(5)));

      // [GIVEN] G/L Budget Entry with Amount = "X" for G/L Account = "A"
      CreateColumnLayout(ColumnLayout);
      UpdateColumnLayout(ColumnLayout);
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,GLAccountNo,GLBudgetName.Name);
      UpdateGLBudgetEntry(GLBudgetEntry);

      // [GIVEN] Value of CalcCell function is equal to "X"
      AccScheduleLine.SETFILTER("Date Filter",FORMAT(WORKDATE));
      CellValue := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE);

      // [GIVEN] G/L Budget Entry Amount changed to value "Y"
      GLBudgetEntry.Amount += LibraryRandom.RandDec(100,2);
      GLBudgetEntry.MODIFY;

      // [GIVEN] CalcCell function keeps the same value = "X" with Recalculate = false
      Assert.AreEqual(
        CellValue,AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE),IncorrectCalcCellValueErr);
      // [WHEN] Set Recalculate flag = true in AccSchedManagement
      AccSchedManagement.ForceRecalculate(TRUE);
      // [THEN] Resulted value for CalcCell function is equal to "Y"
      Assert.AreEqual(
        GLBudgetEntry.Amount,AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE),IncorrectCalcCellValueErr);
    END;

    [Test]
    PROCEDURE CalcCellValueGLAccBudgetEntryForAdditionalReportCurrency@253();
    VAR
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1003 : Record 334;
      Currency@1004 : Record 4;
      AccSchedManagement@1000 : Codeunit 8;
      Amount@1005 : Decimal;
      Result@1001 : Decimal;
      ExchRate@1007 : Decimal;
    BEGIN
      // [FEATURE] [UT] [ACY]
      // [SCENARIO 380474] Cell value of Account Schedule Line for G/L Budget Entries should be calculated in Additional Report Currency
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling G/L Account
      MockAccScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Posting Accounts");

      // [GIVEN] Column Layout with "Ledger Entry Type" = "Budger Entries"
      MockColumnLayout(ColumnLayout,ColumnLayout."Ledger Entry Type"::"Budget Entries");

      // [GIVEN] G/L Budget Entry with Amount = 100
      Amount := MockGLBudgetEntry(COPYSTR(AccScheduleLine.Totaling,1,20));

      // [GIVEN] "G/L Setup"."Additional Reporting Currency" with Exchange Rate = 0.5
      ExchRate := LibraryRandom.RandDecInRange(2,10,2);
      Currency.GET(LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchRate,LibraryRandom.RandDecInRange(2,10,2)));
      UpdateGLSetupAddReportingCurrency(Currency.Code);

      // [WHEN] Invoke AccSchedManagement.CalcCell with CalcAddCurr = TRUE
      Result := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,TRUE);

      // [THEN] Result = 50
      Assert.AreEqual(ROUND(Amount * ExchRate,Currency."Amount Rounding Precision"),Result,IncorrectCalcCellValueErr);
    END;

    [Test]
    PROCEDURE CalcCellValueCostTypeBudgetEntryForAdditionalReportCurrency@247();
    VAR
      AccScheduleLine@1005 : Record 85;
      ColumnLayout@1004 : Record 334;
      Currency@1006 : Record 4;
      AccSchedManagement@1003 : Codeunit 8;
      Amount@1002 : Decimal;
      Result@1001 : Decimal;
      ExchRate@1007 : Decimal;
    BEGIN
      // [FEATURE] [UT] [ACY]
      // [SCENARIO 380474] Cell value of Account Schedule Line for Cost Budget Entries should be calculated in Additional Report Currency
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling G/L Account
      MockAccScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type");

      // [GIVEN] Column Layout with "Ledger Entry Type" = "Budger Entries"
      MockColumnLayout(ColumnLayout,ColumnLayout."Ledger Entry Type"::"Budget Entries");

      // [GIVEN] Cost Budget Entry with Amount = 100
      Amount := MockCostBudgetEntry(COPYSTR(AccScheduleLine.Totaling,1,20));

      // [GIVEN] "G/L Setup"."Additional Reporting Currency" with Exchange Rate = 0.5
      ExchRate := LibraryRandom.RandDecInRange(2,10,2);
      Currency.GET(LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchRate,LibraryRandom.RandDecInRange(2,10,2)));
      UpdateGLSetupAddReportingCurrency(Currency.Code);

      // [WHEN] Invoke AccSchedManagement.CalcCell with CalcAddCurr = TRUE
      Result := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,TRUE);

      // [THEN] Result = 50
      Assert.AreEqual(ROUND(Amount * ExchRate,Currency."Amount Rounding Precision"),Result,IncorrectCalcCellValueErr);
    END;

    [Test]
    PROCEDURE CalcCellValueGLAccEntryForAdditionalReportCurrency@254();
    VAR
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1003 : Record 334;
      AccSchedManagement@1000 : Codeunit 8;
      AdditionalCurrencyAmount@1005 : Decimal;
      Result@1001 : Decimal;
    BEGIN
      // [FEATURE] [UT] [ACY]
      // [SCENARIO 380474] Cell value of Account Schedule Line for G/L Entries should be calculated from "Additional-Currency Amount"
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling G/L Account
      MockAccScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Posting Accounts");

      // [GIVEN] Column Layout with "Ledger Entry Type" = "Entries"
      MockColumnLayout(ColumnLayout,ColumnLayout."Ledger Entry Type"::Entries);

      // [GIVEN] Record of G/L Entry with Amount = 50 and Additional-Currency Amount = 100
      AdditionalCurrencyAmount := MockGLEntryWithACYAmount(COPYSTR(AccScheduleLine.Totaling,1,20));

      // [WHEN] Invoke AccSchedManagement.CalcCell with CalcAddCurr = TRUE
      Result := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,TRUE);

      // [THEN] Result = 100
      Assert.AreEqual(AdditionalCurrencyAmount,Result,IncorrectCalcCellValueErr);
    END;

    [Test]
    PROCEDURE CalcCellValueCostTypeEntryForAdditionalReportCurrency@255();
    VAR
      AccScheduleLine@1005 : Record 85;
      ColumnLayout@1004 : Record 334;
      AccSchedManagement@1003 : Codeunit 8;
      AdditionalCurrencyAmount@1002 : Decimal;
      Result@1001 : Decimal;
    BEGIN
      // [FEATURE] [UT] [ACY]
      // [SCENARIO 380474] Cell value of Account Schedule Line for Cost Entries should be calculated from "Additional-Currency Amount"
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling G/L Account
      MockAccScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type");

      // [GIVEN] Column Layout with "Ledger Entry Type" = "Budger Entries"
      MockColumnLayout(ColumnLayout,ColumnLayout."Ledger Entry Type"::Entries);

      // [GIVEN] Record of Cost Entry with Amount = 50 and Additional-Currency Amount = 100
      AdditionalCurrencyAmount := MockCostEntryWithACYAmount(COPYSTR(AccScheduleLine.Totaling,1,20));

      // [WHEN] Invoke AccSchedManagement.CalcCell with CalcAddCurr = TRUE
      Result := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,TRUE);

      // [THEN] Result = 100
      Assert.AreEqual(AdditionalCurrencyAmount,Result,IncorrectCalcCellValueErr);
    END;

    [Test]
    [HandlerFunctions(GLAccountListModalPageHandler)]
    PROCEDURE InsertGLAccountAfterLastAccSchedLine@290();
    VAR
      AccScheduleName@1002 : Record 84;
      AccScheduleLine@1003 : Record 85;
      AccountSchedulePage@1001 : TestPage 104;
      GLAccNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 375287] G/L Account should be inserted in "Account Schedule" page as last acc. schedule line when cursor is set after the last line

      Initialize;
      // [GIVEN] Account Schedule with two lines
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      // [GIVEN] G/L Account = "X"
      GLAccNo := LibraryERM.CreateGLAccountNo;
      LibraryVariableStorage.Enqueue(GLAccNo);

      // [GIVEN] Account schedule page with cursor set after the last line
      OpenAccScheduleEditPage(AccountSchedulePage,AccScheduleName.Name);
      AccountSchedulePage.LAST;
      AccountSchedulePage.NEXT;

      // [WHEN] Press "Insert G/L Accounts" action and select G/L Account = "X"
      AccountSchedulePage.InsertGLAccounts.INVOKE;

      // [THEN] The last line on page "Account Schedule" is the line with G/L Account = "X"
      AccountSchedulePage.LAST;
      AccountSchedulePage.Description.ASSERTEQUALS(GLAccNo);
    END;

    [Test]
    [HandlerFunctions(GLAccountListModalPageHandler)]
    PROCEDURE InsertGLAccountOnEmptyAccSchedule@206();
    VAR
      AccScheduleName@1002 : Record 84;
      AccountSchedulePage@1001 : TestPage 104;
      GLAccNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 377023] G/L Account should be inserted in "Account Schedule" page when Acc. Schedule is empty

      Initialize;
      // [GIVEN] Account Schedule Name "A" without lines
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      // [GIVEN] New G/L Account = "X"
      GLAccNo := LibraryERM.CreateGLAccountNo;
      LibraryVariableStorage.Enqueue(GLAccNo);

      // [GIVEN] Account Schedule Page is opened for Account Schedule Name "A"
      OpenAccScheduleEditPage(AccountSchedulePage,AccScheduleName.Name);

      // [WHEN] Press "Insert G/L Accounts" action and select G/L Account = "X"
      AccountSchedulePage.InsertGLAccounts.INVOKE;

      // [THEN] Line on page "Account Schedule" is created  has G/L Account = "X"
      AccountSchedulePage.FIRST;
      AccountSchedulePage.Description.ASSERTEQUALS(GLAccNo);
    END;

    [Test]
    PROCEDURE UI_AccountScheduleOverviewPageDoesNotSaveShowAmountInAddCurrValue@150();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleOverview@1002 : TestPage 490;
      AccountScheduleNames@1001 : TestPage 103;
    BEGIN
      // [FEATURE] [UT] [ACY]
      // [SCENARIO 377318] The option "Show Amounts in Add. Reporting Currency" should not be saved on page "Account Schedule Overview"

      Initialize;
      // [GIVEN] "Additional Reporting Currency" is blank in General Ledger Setup
      LibraryERM.SetAddReportingCurrency('');

      // [GIVEN] Account Schedule
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      // [GIVEN] The option "Show Amounts in Add. Reporting Currency" is activated and page "Account Schedule Overview" is closed
      SetAddCurrencyOnAccScheduleOverview(AccScheduleName.Name);
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccScheduleOverview.TRAP;

      // [WHEN] Open "Account Schedule Overview" page second time
      AccountScheduleNames.Overview.INVOKE;

      // [THEN] The option "Show Amounts in Add. Reporting Currency" is off on "Account Schedule Overview" page
      AccScheduleOverview.UseAmtsInAddCurr.ASSERTEQUALS(FALSE);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleOverviewVerifyFormulaResultPageHandler)]
    PROCEDURE AccountScheduleLongFormula@205();
    VAR
      AccScheduleLine@1000 : Record 85;
      Formula@1001 : Text[250];
      Result@1002 : Integer;
    BEGIN
      // [SCENARIO 377447] Amount of Expression should be calculated if the expression has lenght is 250 symbols
      Initialize;

      // [GIVEN] Acc. Schedule Line with Totaling of length 250
      // [GIVEN] Result of totaling = "X"
      Formula := CreateLongFormula(Result);
      LibraryVariableStorage.Enqueue(Result);
      SetupAccountScheduleWithFormula(AccScheduleLine,Formula);

      // [WHEN] Invoke overview
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [THEN] Value of row should be equal "X"
      // Verification is done in AccountScheduleOverviewVerifyFormulaResultPageHandle
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineNetChangeColumnWithClosingDateGLEntry@310();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Date Filter] [Closing Date]
      // [SCENARIO 382434] The "G/L Entry" with closing posting date must be included into balance at date amount in case of Beginning Balance line and Net Change column

      // [GIVEN] "G/L Account" = "A"
      // [GIVEN] "G/L Entry" with Posting Date = "C31122017" and Amount = 200 for "A"
      // [GIVEN] "G/L Entry" with Posting Date = "01012018"  and Amount = 100 for "A"
      Initialize;
      MockGLAccountWithGLEntries(GLAccount,Amount);

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Net Change"
      // [GIVEN] View = "Year", "Date Filter" = "01012018..31122018"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Net Change");
      ResetComparisonFormulasOnColumnLayout(ColumnLayout);

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleLine.SETRANGE("Date Filter",CALCDATE('<-CY+1D>',WORKDATE),CALCDATE('<CY>',WORKDATE));
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to 200 (the only Closing Date amount involved)
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(Amount * 2,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineYearToDateColumnWithClosingDateGLEntry@311();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Date Filter] [Closing Date]
      // [SCENARIO 382434] The "G/L Entry" with closing posting date must be included into balance at date amount in case of Beginning Balance line and Year To Date column

      // [GIVEN] "G/L Account" = "A"
      // [GIVEN] "G/L Entry" with Posting Date = "C31122017" and Amount = 200 for "A"
      // [GIVEN] "G/L Entry" with Posting Date = "01012018"  and Amount = 100 for "A"
      Initialize;
      MockGLAccountWithGLEntries(GLAccount,Amount);

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Year to Date"
      // [GIVEN] View = "Year", "Date Filter" = "01012018..31122018"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Year to Date");
      ResetComparisonFormulasOnColumnLayout(ColumnLayout);

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleLine.SETRANGE("Date Filter",CALCDATE('<-CY+1D>',WORKDATE),CALCDATE('<CY>',WORKDATE));
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to 200 (the only Closing Date amount involved)
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(Amount * 2,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    PROCEDURE GLAcctBalanceAtDateInBeginnigBalanceAccScheduleLineEntireFiscalYearColumnWithClosingDateGLEntry@312();
    VAR
      GLAccount@1001 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1002 : Record 85;
      Amount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Date Filter] [Closing Date]
      // [SCENARIO 382434] The "G/L Entry" with closing posting date must be included into balance at date amount in case of Beginning Balance line and Entire Fiscal Year column

      // [GIVEN] "G/L Account" = "A"
      // [GIVEN] "G/L Entry" with Posting Date = "C31122017" and Amount = 200 for "A"
      // [GIVEN] "G/L Entry" with Posting Date = "01012018"  and Amount = 100 for "A"
      Initialize;
      MockGLAccountWithGLEntries(GLAccount,Amount);

      // [GIVEN] Account Schedule Line with Row Type = "Beginning Balance" and Column Layout with type "Entire Fiscal Year"
      // [GIVEN] View = "Year", "Date Filter" = "01012018..31122018"
      CreatePostingAccountsAccScheduleLine(
        ColumnLayout,AccScheduleLine,GLAccount."No.",ColumnLayout."Column Type"::"Entire Fiscal Year");
      ResetComparisonFormulasOnColumnLayout(ColumnLayout);

      // [WHEN] Account Schedule Management (Codeunit 8) applies filter on given G/L Account
      AccScheduleLine.SETRANGE("Date Filter",CALCDATE('<-CY+1D>',WORKDATE),CALCDATE('<CY>',WORKDATE));
      AccScheduleManagementApplyFiltersOnGLAccount(AccScheduleLine,ColumnLayout,GLAccount);

      // [THEN] Calculated amount must be equal to 200 (the only Closing Date amount involved)
      GLAccount.CALCFIELDS("Balance at Date");
      Assert.AreEqual(Amount * 2,GLAccount."Balance at Date",GLAccount.FIELDCAPTION("Balance at Date"));
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageVerifyValuesHandler)]
    PROCEDURE RunAccScheduleReqPageForNotDefaultColumnLayout@283();
    VAR
      AccScheduleName@1000 : Record 84;
      ColumnLayoutName@1001 : Record 333;
      ColumnLayoutName2@1002 : Record 333;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 201171] Request page of Account Schedule report should have column layout value according to the value set on Account Schedule Overview page
      Initialize;

      // [GIVEN] Account Schedule has "Col1" as default column layout name
      CreateAccountScheduleNameAndColumn(AccScheduleName,ColumnLayoutName);

      // [GIVEN] Set Column Layout as "Col2" on Account Schedule Overview page
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName2);
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);
      AccScheduleOverview.CurrentColumnName.SETVALUE(ColumnLayoutName2.Name);

      // [WHEN] Invoke Account Schedule report
      RunAccountScheduleReportFromOverviewPage(AccScheduleOverview,AccScheduleName.Name,ColumnLayoutName2.Name);

      // [THEN] Request page of Account Schedule report has "Col2" value as column layout
      // Verification is done in AccountScheduleRequestPageVerifyValuesHandler
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageVerifyValuesHandler)]
    PROCEDURE RunAccScheduleReqPageWhenChangeToEmptyScheduleName@178();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleName2@1003 : Record 84;
      ColumnLayoutName@1001 : Record 333;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 201171] Request page of Account Schedule report should have not changed column layout value when Account Schedule Name without setup is changed
      Initialize;

      // [GIVEN] Account Schedule "Acc1" has "Col1" as default column layout name, Account Schedule "Acc2" has not defined column layout name
      CreateAccountScheduleNameAndColumn(AccScheduleName,ColumnLayoutName);
      LibraryERM.CreateAccScheduleName(AccScheduleName2);

      // [GIVEN] Set Column Layout as "Col2" on Account Schedule "Acc1" Overview page
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);
      AccScheduleOverview.CurrentSchedName.SETVALUE(AccScheduleName2.Name);

      // [WHEN] Invoke Account Schedule report
      RunAccountScheduleReportFromOverviewPage(AccScheduleOverview,AccScheduleName2.Name,ColumnLayoutName.Name);

      // [THEN] Request page of Account Schedule report has not changed "Col1" value as column layout with "Acc2" schedule name
      // Verification is done in AccountScheduleRequestPageVerifyValuesHandler
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageVerifyValuesHandler)]
    PROCEDURE RunAccScheduleReqPageWhenChangeTocSheduleNameWithDefaultColumn@231();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleName2@1003 : Record 84;
      ColumnLayoutName@1001 : Record 333;
      ColumnLayoutName2@1002 : Record 333;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 201171] Request page of Account Schedule report should have column layout value according to the value of changed Account Schedule Name
      Initialize;

      // [GIVEN] Account Schedule "Acc1" has "Col1" as default column layout name, Account Schedule "Acc2" has "Col2" as default column layout name
      CreateAccountScheduleNameAndColumn(AccScheduleName,ColumnLayoutName);
      CreateAccountScheduleNameAndColumn(AccScheduleName2,ColumnLayoutName2);

      // [GIVEN] Set Column Layout as "Col2" on Account Schedule Overview page
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleName.Name);
      AccScheduleOverview.CurrentSchedName.SETVALUE(AccScheduleName2.Name);

      // [WHEN] Invoke Account Schedule report
      RunAccountScheduleReportFromOverviewPage(AccScheduleOverview,AccScheduleName2.Name,ColumnLayoutName2.Name);

      // [THEN] Request page of Account Schedule report has "Col2" value as column layout with "Acc2" schedule name
      // Verification is done in AccountScheduleRequestPageVerifyValuesHandler
    END;

    [Test]
    PROCEDURE Overview_ShowAmtInAddRepCurr_IsNotVisible_BlankedGLSetupAddRepCurr@194();
    VAR
      AccScheduleName@1002 : Record 84;
      AccountScheduleNames@1001 : TestPage 103;
      AccountSchedulePage@1003 : TestPage 104;
      AccScheduleOverview@1000 : TestPage 490;
    BEGIN
      // [FEATURE] [ACY] [UI]
      // [SCENARIO 221698] "Show Amounts in Add. Reporting Currency" is not visible on Page 490 "Acc. Schedule Overview"
      // [SCENARIO 221698] in case of blanked G/L Setup "Additional Reporting Currency"
      Initialize;

      // [GIVEN] blanked G/L Setup "Additional Reporting Currency"
      LibraryERM.SetAddReportingCurrency('');

      // [GIVEN] Account schedule name
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccountSchedulePage.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;

      // [WHEN] Invoke "Overview"
      AccScheduleOverview.TRAP;
      AccountSchedulePage.Overview.INVOKE;

      // [THEN] "Show Amounts in Add. Reporting Currency" is not visible
      Assert.IsFalse(AccScheduleOverview.UseAmtsInAddCurr.VISIBLE,'');

      AccScheduleOverview.CLOSE;
      AccountSchedulePage.CLOSE;
      AccountScheduleNames.CLOSE;
    END;

    [Test]
    PROCEDURE Overview_ShowAmtInAddRepCurr_IsVisible_GLSetupWithAddRepCurr@208();
    VAR
      AccScheduleName@1002 : Record 84;
      AccountScheduleNames@1001 : TestPage 103;
      AccountSchedulePage@1003 : TestPage 104;
      AccScheduleOverview@1000 : TestPage 490;
    BEGIN
      // [FEATURE] [ACY] [UI]
      // [SCENARIO 221698] "Show Amounts in Add. Reporting Currency" is visible on Page 490 "Acc. Schedule Overview"
      // [SCENARIO 221698] in case of G/L Setup "Additional Reporting Currency"
      Initialize;

      // [GIVEN] G/L Setup "Additional Reporting Currency"
      LibraryERM.SetAddReportingCurrency(LibraryERM.CreateCurrencyWithRandomExchRates);

      // [GIVEN] Account schedule name
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccountSchedulePage.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;

      // [WHEN] Invoke "Overview"
      AccScheduleOverview.TRAP;
      AccountSchedulePage.Overview.INVOKE;

      // [THEN] "Show Amounts in Add. Reporting Currency" is visible
      Assert.IsTrue(AccScheduleOverview.UseAmtsInAddCurr.VISIBLE,'');

      AccScheduleOverview.CLOSE;
      AccountSchedulePage.CLOSE;
      AccountScheduleNames.CLOSE;
    END;

    [Test]
    PROCEDURE VerifyDimensionFilterWithStandardDimValues@214();
    VAR
      AccScheduleLine@1006 : Record 85;
      StandardDimValue@1011 : ARRAY [2] OF Record 349;
      HeadingDimValue@1012 : ARRAY [2] OF Record 349;
      ResultDimValue@1001 : Record 349;
      AccScheduleOverview@1002 : TestPage 490;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 221835] Verify Dimension Filter created from range with only Standard and Heading Dimension Values
      Initialize;

      // [GIVEN] Create new Acc. Schedule for G/L Account
      CreateAccountScheduleWithGLAccount(AccScheduleLine);

      // [GIVEN] Create 4 Dimension Values without totalings, "D1","D2","D3" goes one after other, "D5" stands alone
      CreateDimValueWithCodeAndType(StandardDimValue[1],'D1',StandardDimValue[1]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(HeadingDimValue[1],'D2',HeadingDimValue[1]."Dimension Value Type"::Heading);
      CreateDimValueWithCodeAndType(StandardDimValue[2],'D3',StandardDimValue[2]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(HeadingDimValue[2],'D5',HeadingDimValue[2]."Dimension Value Type"::Heading);

      // [GIVEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [WHEN] Acc. Schedule Overview Dim1Filter is set to filter all dimension values starts with 'D'
      AccScheduleOverview.Dim1Filter.SETVALUE('D*');

      // [THEN] Acc. Schedule Overview "Dimension 1 Filter" filters only "D1","D2","D3" and "D5"
      ResultDimValue.SETFILTER(Code,AccScheduleOverview.FILTER.GETFILTER("Dimension 1 Filter"));
      Assert.AreEqual(4,ResultDimValue.COUNT,Dim1FilterErr);

      VerifyDimValueExistInFilteredTable(ResultDimValue,StandardDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,StandardDimValue[2].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,HeadingDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,HeadingDimValue[2].Code);

      AccScheduleOverview.OK.INVOKE;

      // Tear down
      ResultDimValue.RESET;
      ResultDimValue.DELETEALL;
    END;

    [Test]
    PROCEDURE VerifyDimensionFilterWithTotallingDimValues@250();
    VAR
      AccScheduleLine@1006 : Record 85;
      TotalDimValue@1003 : ARRAY [2] OF Record 349;
      FirstTotalingDimValue@1001 : ARRAY [2] OF Record 349;
      SecondTotalingDimValue@1009 : ARRAY [2] OF Record 349;
      ResultDimValue@1002 : Record 349;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 221835] Verify Dimension Filter created from range with multiple Total Dimension Values
      Initialize;

      // [GIVEN] Create new Acc. Schedule for G/L Account
      CreateAccountScheduleWithGLAccount(AccScheduleLine);

      // [GIVEN] Create 4 Dimension Values without totalings, "D1","D2","D3" and "D4"
      CreateDimValueWithCodeAndType(FirstTotalingDimValue[1],'D1',FirstTotalingDimValue[1]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(FirstTotalingDimValue[2],'D2',FirstTotalingDimValue[2]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(SecondTotalingDimValue[1],'D3',SecondTotalingDimValue[1]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(SecondTotalingDimValue[2],'D4',SecondTotalingDimValue[2]."Dimension Value Type"::Standard);

      // [GIVEN] Create new dim value "D5" with "Dimension Value Type"::Total and "Totaling" = "D1..D2"
      CreateTotallingDimValueWithCode(TotalDimValue[1],'D5',FirstTotalingDimValue[1].Code,FirstTotalingDimValue[2].Code);

      // [GIVEN] Create new dim value "D6" with "Dimension Value Type"::Total and "Totaling" = "D3..D4"
      CreateTotallingDimValueWithCode(TotalDimValue[2],'D6',SecondTotalingDimValue[1].Code,SecondTotalingDimValue[2].Code);

      // [GIVEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [WHEN] Acc. Schedule Overview Dim1Filter is set to filter "D5" and "D6"
      AccScheduleOverview.Dim1Filter.SETVALUE(STRSUBSTNO('%1|%2',TotalDimValue[1].Code,TotalDimValue[2].Code));

      // [THEN] Acc. Schedule Overview "Dimension 1 Filter" filters only "D1","D2","D3" and "D4"
      ResultDimValue.SETFILTER(Code,AccScheduleOverview.FILTER.GETFILTER("Dimension 1 Filter"));
      Assert.AreEqual(4,ResultDimValue.COUNT,Dim1FilterErr);

      VerifyDimValueExistInFilteredTable(ResultDimValue,FirstTotalingDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,FirstTotalingDimValue[2].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,SecondTotalingDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,SecondTotalingDimValue[2].Code);

      AccScheduleOverview.OK.INVOKE;

      // Tear down
      ResultDimValue.RESET;
      ResultDimValue.DELETEALL;
    END;

    [Test]
    PROCEDURE VerifyDimensionFilterWithNestedTotalingDimValues@284();
    VAR
      AccScheduleLine@1006 : Record 85;
      TotalDimValue@1003 : ARRAY [2] OF Record 349;
      TotalingDimValue@1001 : ARRAY [2] OF Record 349;
      ResultDimValue@1002 : Record 349;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 221835] Verify Dimension Filter created from range with nested Total Dimension Values
      Initialize;

      // [GIVEN] Create new Acc. Schedule for G/L Account
      CreateAccountScheduleWithGLAccount(AccScheduleLine);

      // [GIVEN] Create Dimension Values without totalings, "D1","D2"
      CreateDimValueWithCodeAndType(TotalingDimValue[1],'D1',TotalingDimValue[1]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(TotalingDimValue[2],'D2',TotalingDimValue[1]."Dimension Value Type"::Standard);

      // [GIVEN] Create new dim value "D3" with "Dimension Value Type"::Total and "Totaling" = "D1..D2"
      CreateTotallingDimValueWithCode(TotalDimValue[1],'D3',TotalingDimValue[1].Code,TotalingDimValue[2].Code);

      // [GIVEN] Create new dim value "D4" with "Dimension Value Type"::Total and "Totaling" = "D3..D3"
      CreateTotallingDimValueWithCode(TotalDimValue[2],'D4',TotalDimValue[1].Code,TotalDimValue[1].Code);

      // [GIVEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [WHEN] Acc. Schedule Overview Dim1Filter is set to filter "D4"
      AccScheduleOverview.Dim1Filter.SETVALUE(TotalDimValue[2].Code);

      // [THEN] Acc. Schedule Overview "Dimension 1 Filter" filters only "D1" and "D2"
      ResultDimValue.SETFILTER(Code,AccScheduleOverview.FILTER.GETFILTER("Dimension 1 Filter"));
      Assert.AreEqual(2,ResultDimValue.COUNT,Dim1FilterErr);

      VerifyDimValueExistInFilteredTable(ResultDimValue,TotalingDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,TotalingDimValue[2].Code);

      AccScheduleOverview.OK.INVOKE;

      // Tear down
      ResultDimValue.RESET;
      ResultDimValue.DELETEALL;
    END;

    [Test]
    PROCEDURE VerifyDimensionFilterWithLoopingTotalingDimValues@322();
    VAR
      AccScheduleLine@1006 : Record 85;
      TotalDimValue@1003 : ARRAY [2] OF Record 349;
      TotalingDimValue@1001 : Record 349;
      ResultDimValue@1002 : Record 349;
      AccScheduleOverview@1004 : TestPage 490;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 221835] Verify Dimension Filter created from range with looping Total Dimension Values
      Initialize;

      // [GIVEN] Create new Acc. Schedule for G/L Account
      CreateAccountScheduleWithGLAccount(AccScheduleLine);

      // [GIVEN] Create Dimension Value without totalings "D1"
      CreateDimValueWithCodeAndType(TotalingDimValue,'D1',TotalingDimValue."Dimension Value Type"::Standard);

      // [GIVEN] Create new dim value "D0" with "Dimension Value Type"::Total and "Totaling" = "D1..D2"
      CreateTotallingDimValueWithCode(TotalDimValue[1],'D0','D1','D2');

      // [GIVEN] Create new dim value "D2" with "Dimension Value Type"::Total and "Totaling" = "D0..D1"
      CreateTotallingDimValueWithCode(TotalDimValue[2],'D2','D0','D1');

      // [GIVEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [WHEN] Acc. Schedule Overview Dim1Filter is set to filter "D2"
      AccScheduleOverview.Dim1Filter.SETVALUE(TotalDimValue[2].Code);

      // [THEN] Acc. Schedule Overview "Dimension 1 Filter" filters only "D1"
      ResultDimValue.SETFILTER(Code,AccScheduleOverview.FILTER.GETFILTER("Dimension 1 Filter"));
      Assert.AreEqual(1,ResultDimValue.COUNT,Dim1FilterErr);

      VerifyDimValueExistInFilteredTable(ResultDimValue,TotalingDimValue.Code);

      AccScheduleOverview.OK.INVOKE;

      // Tear down
      ResultDimValue.RESET;
      ResultDimValue.DELETEALL;
    END;

    [Test]
    PROCEDURE VerifyDimensionFilterWithBeginEndTotallingDimValues@251();
    VAR
      AccScheduleLine@1003 : Record 85;
      BeginEndDimValue@1006 : ARRAY [2] OF Record 349;
      TotalingDimValue@1001 : ARRAY [2] OF Record 349;
      ResultDimValue@1000 : Record 349;
      AccScheduleOverview@1002 : TestPage 490;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 221835] Verify Dimension Filter created from range with Begin/End Total Dimension Values
      Initialize;

      // [GIVEN] Create new Acc. Schedule for G/L Account
      CreateAccountScheduleWithGLAccount(AccScheduleLine);

      // [GIVEN] Create Dimension Values without totalings, "D1","D2"
      CreateDimValueWithCodeAndType(TotalingDimValue[1],'D1',TotalingDimValue[1]."Dimension Value Type"::Standard);
      CreateDimValueWithCodeAndType(TotalingDimValue[2],'D2',TotalingDimValue[2]."Dimension Value Type"::Standard);

      // [GIVEN] Create new dim value "D0" with "Dimension Value Type"::"Begin-Total"
      CreateDimValueWithCodeAndType(BeginEndDimValue[1],'D0',BeginEndDimValue[1]."Dimension Value Type"::"Begin-Total");

      // [GIVEN] Create new dim value "D3" with "Dimension Value Type"::"End-Total" and "Totaling" = "D1..D2"
      CreateDimValueWithCodeAndType(BeginEndDimValue[2],'D3',BeginEndDimValue[2]."Dimension Value Type"::"End-Total");
      BeginEndDimValue[2].VALIDATE(Totaling,STRSUBSTNO('%1..%2',TotalingDimValue[1].Code,TotalingDimValue[2].Code));
      BeginEndDimValue[2].MODIFY(TRUE);

      // [GIVEN] Run Acc. Schedule Overview
      AccScheduleOverview.TRAP;
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // [WHEN] Acc. Schedule Overview Dim1Filter is set to filter "D0|D3"
      AccScheduleOverview.Dim1Filter.SETVALUE(STRSUBSTNO('%1|%2',BeginEndDimValue[1].Code,BeginEndDimValue[2].Code));

      // [THEN] Acc. Schedule Overview "Dimension 1 Filter" filters only "D1" and "D2"
      ResultDimValue.SETFILTER(Code,AccScheduleOverview.FILTER.GETFILTER("Dimension 1 Filter"));
      Assert.AreEqual(2,ResultDimValue.COUNT,Dim1FilterErr);

      VerifyDimValueExistInFilteredTable(ResultDimValue,TotalingDimValue[1].Code);
      VerifyDimValueExistInFilteredTable(ResultDimValue,TotalingDimValue[2].Code);

      AccScheduleOverview.OK.INVOKE;

      // Tear down
      ResultDimValue.RESET;
      ResultDimValue.DELETEALL;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;

      IsInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE AccountScheduleInsertGLAccount@176(VAR AccScheduleLine@1001 : Record 85;VAR ColumnLayout@1008 : Record 334;AmountType@1004 : Option) : Code[20];
    VAR
      GenJournalLine@1002 : Record 81;
      AccSchedManagement@1000 : Codeunit 8;
    BEGIN
      // Setup: Create Acc. Schedule name and Acc. Schedule line.
      CreateGeneralLineWithGLAccount(GenJournalLine,LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(GenJournalLine."Account No.");
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GenJournalLine."Account No.");
      CreateColumnLayoutWithAmountType(ColumnLayout,AmountType,GenJournalLine."Account No.");

      // Exercise: Insert row in Acc. Schedule Line by using InsertGLAccounts function.
      AccSchedManagement.InsertGLAccounts(AccScheduleLine);
      EXIT(GenJournalLine."Account No.");
    END;

    LOCAL PROCEDURE AccScheduleWithInsertCostType@220(VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1002 : Record 334;AmountType@1004 : Option) : Code[20];
    VAR
      CostType@1008 : Record 1103;
      CostCenter@1001 : Record 1112;
      AccSchedManagement@1000 : Codeunit 8;
      CostTypeNo@1005 : Code[20];
    BEGIN
      // Setup: Create Acc. Schedule name and Acc. Schedule line.
      CostTypeNo := CreateCostType(CostType.Type::"Cost Type",FALSE);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateColumnLayoutWithAmountType(ColumnLayout,AmountType,CostTypeNo);
      CreateAndPostCostJournal(CostTypeNo,CostCenter.Code,'',LibraryRandom.RandDec(10,2));
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,CostTypeNo);
      LibraryVariableStorage.Enqueue(CostTypeNo);

      // Exercise: Insert row in Acc. Schedule Line by using InsertCostTypes function.
      AccSchedManagement.InsertCostTypes(AccScheduleLine);
      EXIT(CostTypeNo);
    END;

    LOCAL PROCEDURE AccScheduleManagementApplyFiltersOnGLAccount@303(VAR AccScheduleLine@1001 : Record 85;VAR ColumnLayout@1002 : Record 334;VAR GLAccount@1003 : Record 15);
    VAR
      AccSchedManagement@1000 : Codeunit 8;
    BEGIN
      AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE);
      AccSchedManagement.SetGLAccColumnFilters(GLAccount,AccScheduleLine,ColumnLayout);
    END;

    LOCAL PROCEDURE CalculateAmtInAddCurrency@119(CurrencyCode@1001 : Code[10];Amount@1002 : Decimal;ConversionDate@1004 : Date) : Decimal;
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      LibraryERM.FindExchRate(CurrencyExchangeRate,CurrencyCode,ConversionDate);
      EXIT(
        ROUND(
          Amount * CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount",
          LibraryERM.GetAmountRoundingPrecision));
    END;

    LOCAL PROCEDURE CreateAccountScheduleAndLine@63(VAR AccScheduleLine@1000 : Record 85;RowNo@1002 : Code[10]);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      AccScheduleLine.VALIDATE("Row No.",RowNo);
      AccScheduleLine.VALIDATE("Totaling Type",AccScheduleLine."Totaling Type"::Formula);
      AccScheduleLine.VALIDATE(Totaling,AccScheduleName.Name);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAccountScheduleAndLineWithoutFormula@51(VAR AccScheduleLine@1000 : Record 85;Totaling@1002 : Text[250]);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      AccScheduleLine.VALIDATE("Row No.",FORMAT(LibraryRandom.RandInt(100)));
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAccountSchedulePosting@18(VAR AccScheduleLine@1000 : Record 85;ScheduleName@1003 : Code[10];Totaling@1002 : Text[250]);
    BEGIN
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,ScheduleName);
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAccountScheduleAndLineWithCostType@218(VAR AccScheduleName@1001 : Record 84;VAR AccScheduleLine@1000 : Record 85;RowNo@1002 : Code[10]);
    BEGIN
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      AccScheduleLine.VALIDATE("Row No.",RowNo);
      AccScheduleLine.VALIDATE("Totaling Type",AccScheduleLine."Totaling Type"::"Cost Type");
      AccScheduleLine.VALIDATE(Totaling,AccScheduleName.Name);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAccountScheduleWithComparisonFormula@187(VAR AccScheduleLine@1000 : Record 85;AccountNo@1001 : Code[20]);
    VAR
      ColumnLayout@1002 : Record 334;
      ComparisionDateFormula@1004 : DateFormula;
    BEGIN
      WITH ColumnLayout DO BEGIN
        CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,AccountNo);
        SETRANGE("Column Layout Name",CreateColumnLayoutWithName(AccountNo));
        FINDFIRST;
        EVALUATE(ComparisionDateFormula,'<-1Y>');
        VALIDATE("Comparison Date Formula",ComparisionDateFormula);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPrintAccountSchedule@162(VAR AccScheduleName@1000 : Record 84;VAR ColumnLayoutName@1002 : Record 333;Verify@1004 : Boolean);
    BEGIN
      CreateAccountScheduleNameAndColumn(AccScheduleName,ColumnLayoutName);

      LibraryVariableStorage.Enqueue(AccScheduleName."Default Column Layout");
      LibraryVariableStorage.Enqueue(AccScheduleName.Name);
      LibraryVariableStorage.Enqueue(Verify);

      OpenAccountScheduleEditPageAndPrint(AccScheduleName.Name);
    END;

    LOCAL PROCEDURE CreateAccountScheduleNameAndColumn@235(VAR AccScheduleName@1000 : Record 84;VAR ColumnLayoutName@1002 : Record 333);
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1003 : Record 334;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);

      UpdateDefaultColumnLayoutOnAccSchNameRec(AccScheduleName,ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE CreateCashFlowAccount@118(AccountType@1002 : 'Entry,Heading,Total,Begin-Total,End-Total') AccountNo : Code[10];
    VAR
      CashFlowAccount@1001 : Record 841;
    BEGIN
      AccountNo := LibraryUtility.GenerateGUID;
      CashFlowAccount.INIT;
      CashFlowAccount.VALIDATE("No.",AccountNo);
      CashFlowAccount.VALIDATE("Account Type",AccountType);
      CashFlowAccount.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(CashFlowAccount.FIELDNO(Name),DATABASE::"Cash Flow Account"));
      CashFlowAccount.INSERT(TRUE);
      LibraryCashFlow.CreateCashFlowAccount(CashFlowAccount,AccountType);
      EXIT(AccountNo);
    END;

    LOCAL PROCEDURE CreateCostType@147(Type@1006 : Option;Blocked@1007 : Boolean) : Code[10];
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      CostType.VALIDATE(Type,Type);
      CostType.VALIDATE(Blocked,Blocked);
      CostType.MODIFY(TRUE);
      EXIT(CostType."No.");
    END;

    LOCAL PROCEDURE CreateAndPostCashFlowJournal@126(CashFlowAccount@1003 : Code[20];Amount@1002 : Decimal;CashFlowDate@1001 : Date);
    VAR
      CashFlowWorksheetLine@1000 : Record 846;
      CashFlowForecast@1004 : Record 840;
    BEGIN
      LibraryCashFlow.CreateCashFlowCard(CashFlowForecast);
      LibraryCashFlow.CreateJournalLine(CashFlowWorksheetLine,CashFlowForecast."No.",CashFlowAccount);
      CashFlowWorksheetLine.VALIDATE("Amount (LCY)",Amount);
      CashFlowWorksheetLine.VALIDATE("Cash Flow Date",CashFlowDate);
      CashFlowWorksheetLine.MODIFY(TRUE);
      LibraryCashFlow.PostJournalLines(CashFlowWorksheetLine);
    END;

    LOCAL PROCEDURE CreateAndPostCostJournal@19(CostTypeNo@1002 : Code[20];CostCenterCode@1003 : Code[20];CostObjectCode@1004 : Code[20];Amount@1005 : Decimal);
    VAR
      CostJournalBatch@1000 : Record 1102;
      CostJournalTemplate@1006 : Record 1100;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      // Find Cost Journal and Template
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.FindCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.ClearCostJournalLines(CostJournalBatch);

      // Create Cost Journal Line
      LibraryCostAccounting.CreateCostJournalLine(
        CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Cost Type No.",CostTypeNo);
      CostJournalLine.VALIDATE("Cost Center Code",CostCenterCode);
      CostJournalLine.VALIDATE("Cost Object Code",CostObjectCode);
      CostJournalLine.VALIDATE(Amount,Amount);
      CostJournalLine.MODIFY(TRUE);

      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostJournal@21(AccountNo@1004 : Code[20];BalanceAccountNo@1005 : Code[20];Amount@1006 : Decimal);
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1001 : Record 81;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,
        GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,
        AccountNo,
        Amount);
      UpdateGenJournalLine(GenJournalLine,BalanceAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAccountScheduleWithGLAccount@344(VAR AccScheduleLine@1000 : Record 85);
    VAR
      GLAccount@1002 : Record 15;
      ColumnLayout@1001 : Record 334;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CreateColumnLayout(ColumnLayout);
      CreateAndUpdateAccountSchedule(
        AccScheduleLine,ColumnLayout."Column Layout Name",GLAccount."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");
    END;

    LOCAL PROCEDURE CreateAndUpdateAccountSchedule@127(VAR AccScheduleLine@1003 : Record 85;ColumnLayoutName@1000 : Code[10];GLAccountNo@1001 : Code[20];TotalingType@1004 : Option);
    BEGIN
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayoutName);
      UpdateAccScheduleLine(AccScheduleLine,GLAccountNo,TotalingType,FORMAT(LibraryRandom.RandInt(5)));
    END;

    LOCAL PROCEDURE CreateColumnLayout@122(VAR ColumnLayout@1001 : Record 334);
    VAR
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE CreateColumnLayoutAndLine@13(VAR ColumnLayout@1001 : Record 334);
    VAR
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name,ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE CreateColumnLayoutLine@22(VAR ColumnLayout@1001 : Record 334;ColumnLayoutName@1002 : Code[10];Formula@1000 : Code[80]);
    BEGIN
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName);
      ColumnLayout.VALIDATE("Column No.",FORMAT(LibraryUtility.GenerateGUID));
      ColumnLayout.VALIDATE("Column Type",ColumnLayout."Column Type"::Formula);
      ColumnLayout.VALIDATE(Formula,Formula);
      ColumnLayout.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateColumnLayoutWithName@52(ColumnHeader@1002 : Text[30]) : Code[10];
    VAR
      ColumnLayoutName@1001 : Record 333;
      ColumnLayout@1000 : Record 334;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      ColumnLayout.VALIDATE("Column No.",LibraryUtility.GenerateGUID);
      ColumnLayout.VALIDATE("Column Header",ColumnHeader);
      ColumnLayout.MODIFY(TRUE);
      EXIT(ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE CreateColumnLayoutLinesWithName@248(LinesCount@1000 : Integer) : Code[10];
    VAR
      ColumnLayoutName@1003 : Record 333;
      ColumnLayout@1002 : Record 334;
      i@1001 : Integer;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      FOR i := 1 TO LinesCount DO BEGIN
        LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
        ColumnLayout.VALIDATE("Column No.",FORMAT(i));
        ColumnLayout.VALIDATE("Column Header",FORMAT(i));
        ColumnLayout.MODIFY(TRUE);
      END;
      EXIT(ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE CreateGeneralLineWithGLAccount@80(VAR GenJournalLine@1000 : Record 81;Amount@1002 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      CreateGenJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",Amount);
    END;

    LOCAL PROCEDURE CreatePostingAccountsAccScheduleLine@278(VAR ColumnLayout@1001 : Record 334;VAR AccScheduleLine@1000 : Record 85;GLAccountNo@1002 : Code[20];ColumnType@1004 : Option);
    VAR
      ComparisionDateFormula@1003 : DateFormula;
    BEGIN
      CreateColumnLayout(ColumnLayout);
      EVALUATE(ComparisionDateFormula,'<-1D>');
      ColumnLayout.VALIDATE("Comparison Date Formula",ComparisionDateFormula);
      ColumnLayout.VALIDATE("Column Type",ColumnType);
      ColumnLayout.MODIFY(TRUE);

      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayout."Column Layout Name");
      UpdateAccScheduleLine(
        AccScheduleLine,GLAccountNo,AccScheduleLine."Totaling Type"::"Posting Accounts",FORMAT(LibraryRandom.RandInt(5)));
      AccScheduleLine.VALIDATE("Row Type",AccScheduleLine."Row Type"::"Beginning Balance");
      AccScheduleLine.MODIFY(TRUE);
      AccScheduleLine.SETRANGE("Date Filter",WORKDATE);
    END;

    LOCAL PROCEDURE CreateGenJournalLine@88(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;AccountType@1001 : Option;Amount@1000 : Decimal);
    VAR
      GLAccount@1004 : Record 15;
    BEGIN
      // Using Random Number Generator for Amount.
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,
        GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,
        AccountType,
        GLAccount."No.",
        Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Account No.",GLAccount."No.");
      UpdateGenJournalLine(GenJournalLine,GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateMultiAccountScheduleLine@145(VAR AccScheduleLine@1000 : Record 85;ColumnLayoutName@1001 : Code[10];RowNo@1004 : Code[10];FormulaValue@1002 : Text[50];FormulaValue2@1003 : Text[50];TotalingType@1005 : Option;NewPage@1006 : Boolean);
    BEGIN
      CreateAccountScheduleAndLine(AccScheduleLine,ColumnLayoutName);
      UpdateAccScheduleLine(AccScheduleLine,FormulaValue,TotalingType,RowNo);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleLine."Schedule Name");
      UpdateAccScheduleLine(AccScheduleLine,FormulaValue2,AccScheduleLine."Totaling Type"::Formula,INCSTR(RowNo));
      AccScheduleLine.VALIDATE("New Page",NewPage);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateColumnLayoutWithAmountType@197(VAR ColumnLayout@1000 : Record 334;AmountType@1002 : Option;AccountNo@1001 : Code[20]);
    BEGIN
      WITH ColumnLayout DO BEGIN
        SETRANGE("Column Layout Name",CreateColumnLayoutWithName(AccountNo));
        FINDFIRST;
        VALIDATE("Amount Type",AmountType);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTotallingDimValue@200(VAR DimTotalValue@1004 : Code[20];DimValue@1002 : ARRAY [2] OF Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      DimensionValue.VALIDATE("Dimension Value Type",DimensionValue."Dimension Value Type"::Total);
      DimensionValue.VALIDATE(Totaling,STRSUBSTNO('%1..%2',DimValue[1],DimValue[2]));
      DimensionValue.MODIFY;
      DimTotalValue := DimensionValue.Code;
    END;

    LOCAL PROCEDURE CreateTotallingDimValueWithCode@268(VAR TotalDimValue@1001 : Record 349;TotalDimValueCode@1003 : Code[20];FromDimValueCode@1000 : Code[20];ToDimValueCode@1002 : Code[20]);
    BEGIN
      LibraryDimension.CreateDimensionValueWithCode(TotalDimValue,TotalDimValueCode,LibraryERM.GetGlobalDimensionCode(1));
      TotalDimValue.VALIDATE("Dimension Value Type",TotalDimValue."Dimension Value Type"::Total);
      TotalDimValue.VALIDATE(Totaling,STRSUBSTNO('%1..%2',FromDimValueCode,ToDimValueCode));
      TotalDimValue.MODIFY;
    END;

    LOCAL PROCEDURE CreateDimValueWithCodeAndType@330(VAR DimValue@1000 : Record 349;DimValueCode@1003 : Code[20];DimValueType@1001 : Option);
    BEGIN
      LibraryDimension.CreateDimensionValueWithCode(DimValue,DimValueCode,LibraryERM.GetGlobalDimensionCode(1));
      DimValue.VALIDATE("Dimension Value Type",DimValueType);
      DimValue.MODIFY;
    END;

    LOCAL PROCEDURE CreateLongFormula@221(VAR Result@1000 : Integer) Formula : Text[250];
    VAR
      ValueOperand@1003 : Integer;
    BEGIN
      ValueOperand := LibraryRandom.RandInt(1000);
      Formula := FORMAT(ValueOperand,0,'<Integer,125><Filler Character,0>');
      Result := ValueOperand;
      ValueOperand := LibraryRandom.RandInt(1000);
      Formula += '+' + FORMAT(ValueOperand,0,'<Integer,124><Filler Character,0>');
      Result += ValueOperand;
      EXIT(Formula);
    END;

    LOCAL PROCEDURE EnqueueValuesForAccScheduleReport@116(ColumnLayoutName@1000 : Code[10];ScheduleName@1001 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(ColumnLayoutName);
      LibraryVariableStorage.Enqueue(ScheduleName);
      COMMIT;  // Commit required for running the Account Schedule Report.
    END;

    LOCAL PROCEDURE MockAccScheduleLine@196(VAR AccScheduleLine@1000 : Record 85;TotalingType@1001 : Option);
    BEGIN
      AccScheduleLine.INIT;
      AccScheduleLine.SETFILTER("Date Filter",FORMAT(WORKDATE));
      AccScheduleLine.Totaling := LibraryUtility.GenerateGUID;
      AccScheduleLine."Totaling Type" := TotalingType;
    END;

    LOCAL PROCEDURE MockColumnLayout@210(VAR ColumnLayout@1000 : Record 334;LedgerEntryType@1001 : Option);
    BEGIN
      ColumnLayout.INIT;
      ColumnLayout."Ledger Entry Type" := LedgerEntryType;
    END;

    LOCAL PROCEDURE MockGLBudgetEntry@211(GLAccountNo@1001 : Code[20]) : Decimal;
    VAR
      GLBudgetEntry@1000 : Record 96;
    BEGIN
      WITH GLBudgetEntry DO BEGIN
        INIT;
        Amount := LibraryRandom.RandDecInRange(10,100,2);
        "G/L Account No." := GLAccountNo;
        Date := WORKDATE;
        INSERT;
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE MockGLEntryWithACYAmount@228(GLAccountNo@1000 : Code[20]) : Decimal;
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        INIT;
        "Additional-Currency Amount" := LibraryRandom.RandDecInRange(10,100,2);
        "G/L Account No." := GLAccountNo;
        "Posting Date" := WORKDATE;
        INSERT;
        EXIT("Additional-Currency Amount");
      END;
    END;

    LOCAL PROCEDURE MockGLEntry@217(GLEntryAmount@1000 : Decimal;PostingDate@1001 : Date;GLAccountNo@1002 : Code[20]);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(GLEntry,FIELDNO("Entry No."));
        Amount := GLEntryAmount;
        "Posting Date" := PostingDate;
        "G/L Account No." := GLAccountNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockGLAccountWithGLEntries@135(VAR GLAccount@1000 : Record 15;VAR Amount@1001 : Decimal);
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      Amount := LibraryRandom.RandDec(100,2);

      MockGLEntry(Amount,WORKDATE,GLAccount."No.");
      MockGLEntry(Amount * 2,CLOSINGDATE(CALCDATE('<-1Y+CY>',WORKDATE)),GLAccount."No.");
    END;

    LOCAL PROCEDURE MockCostBudgetEntry@212(CostTypeNo@1001 : Code[20]) : Decimal;
    VAR
      CostBudgetEntry@1000 : Record 1109;
    BEGIN
      WITH CostBudgetEntry DO BEGIN
        INIT;
        Amount := LibraryRandom.RandDecInRange(10,100,2);
        "Cost Type No." := CostTypeNo;
        Date := WORKDATE;
        INSERT;
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE MockCostEntryWithACYAmount@225(CostTypeNo@1000 : Code[20]) : Decimal;
    VAR
      CostEntry@1001 : Record 1104;
    BEGIN
      WITH CostEntry DO BEGIN
        INIT;
        "Additional-Currency Amount" := LibraryRandom.RandDecInRange(10,100,2);
        "Cost Type No." := CostTypeNo;
        "Posting Date" := WORKDATE;
        INSERT;
        EXIT("Additional-Currency Amount");
      END;
    END;

    LOCAL PROCEDURE OpenAccountScheduleOverviewPage@46(Name@1002 : Code[10]);
    VAR
      AccountScheduleNames@1001 : TestPage 103;
      AccountSchedulePage@1000 : TestPage 104;
    BEGIN
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,Name);
      AccountSchedulePage.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;
      AccountSchedulePage.Overview.INVOKE;
    END;

    LOCAL PROCEDURE OpenAccScheduleOverviewPageCheckValues@198(Name@1000 : Code[10];ColumnLayoutName@1001 : Code[10]);
    VAR
      AccountScheduleNames@1002 : TestPage 103;
    BEGIN
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,Name);
      AccountScheduleNames."Default Column Layout".SETVALUE(ColumnLayoutName);
      AccountScheduleNames.Overview.INVOKE;
    END;

    LOCAL PROCEDURE OpenAccountScheduleEditPageAndPrint@159(Name@1002 : Code[10]);
    VAR
      AccountSchedulePage@1000 : TestPage 104;
    BEGIN
      OpenAccScheduleEditPage(AccountSchedulePage,Name);
      COMMIT;
      AccountSchedulePage.Action22.INVOKE;
    END;

    LOCAL PROCEDURE OpenAccScheduleEditPage@215(VAR AccountSchedulePage@1002 : TestPage 104;Name@1000 : Code[10]);
    VAR
      AccountScheduleNames@1001 : TestPage 103;
    BEGIN
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,Name);
      AccountSchedulePage.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;
    END;

    LOCAL PROCEDURE RunAndVerifyAccSheduleReport@98(Value@1000 : Variant);
    BEGIN
      // Exercise:
      REPORT.RUN(REPORT::"Account Schedule");

      // Verify: Verify Amount on Account Schedule report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ColumnValuesAsText',Value);
    END;

    LOCAL PROCEDURE RunAccountScheduleReport@12(ScheduleName@1000 : Code[10];ColumnLayoutName@1001 : Code[10]);
    VAR
      AccountSchedule@1002 : Report 25;
    BEGIN
      CLEAR(AccountSchedule);
      AccountSchedule.SetAccSchedName(ScheduleName);
      AccountSchedule.SetColumnLayoutName(ColumnLayoutName);
      AccountSchedule.SetFilters(FORMAT(WORKDATE),'','','','','','','');
      AccountSchedule.SAVEASEXCEL(ColumnLayoutName);
    END;

    LOCAL PROCEDURE RunAccountScheduleReportFromOverviewPage@249(VAR AccScheduleOverview@1000 : TestPage 490;ExpectedAccSchedName@1001 : Code[10];ExpectedColumnLayoutName@1002 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(ExpectedColumnLayoutName);
      LibraryVariableStorage.Enqueue(ExpectedAccSchedName);
      LibraryVariableStorage.Enqueue(TRUE);
      COMMIT;

      AccScheduleOverview.Print.INVOKE;
    END;

    LOCAL PROCEDURE PostGenJournalLine@389(GLAccountNo@1002 : Code[20];Amount@1001 : Decimal;PostingDate@1003 : Date);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      CreateGeneralLineWithGLAccount(GenJournalLine,Amount);  // Take random for Amount.
      UpdateGenJournalLine(GenJournalLine,GLAccountNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE ResetComparisonFormulasOnColumnLayout@83(VAR ColumnLayout@1000 : Record 334);
    BEGIN
      CLEAR(ColumnLayout."Comparison Date Formula");
      ColumnLayout."Comparison Period Formula" := '';
      ColumnLayout.MODIFY;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@67(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE SetupCostAccObjects@35(VAR CostType@1000 : Record 1103;VAR CostCenter@1002 : Record 1112;VAR CostObject@1001 : Record 1113);
    VAR
      CostAccountingSetup@1004 : Record 1108;
    BEGIN
      LibraryCostAccounting.CreateCostType(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Reset Cost Accounting alignment
      LibraryCostAccounting.SetAlignment(
        CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::"No Alignment");
    END;

    LOCAL PROCEDURE SetupForAccountScheduleOverviewPage@59(VAR AccScheduleLine@1005 : Record 85;Show@1000 : Option;Amount@1001 : Decimal;RoundingFactor@1004 : Option;Totaling@1006 : Text[250]);
    VAR
      ColumnLayout@1003 : Record 334;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Create and post General Line.
      CreateGeneralLineWithGLAccount(GenJournalLine,Amount);
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      IF Totaling = '' THEN
        CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GenJournalLine."Account No.")
      ELSE
        SetupAccountScheduleWithFormula(AccScheduleLine,Totaling);

      ColumnLayout.SETRANGE("Column Layout Name",CreateColumnLayoutWithName(GenJournalLine."Account No."));
      ColumnLayout.FINDFIRST;
      ColumnLayout.VALIDATE("Rounding Factor",RoundingFactor);
      ColumnLayout.VALIDATE(Show,Show);
      ColumnLayout.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ColumnLayout."Column Layout Name");
    END;

    LOCAL PROCEDURE SetupAccountSchedule@183(VAR AccScheduleLine@1001 : Record 85;AccountNo@1003 : Code[10];TotalingType@1002 : Option);
    BEGIN
      CreateAccountScheduleAndLine(AccScheduleLine,AccountNo);
      UpdateAccScheduleLine(AccScheduleLine,AccountNo,TotalingType,AccountNo);
    END;

    LOCAL PROCEDURE SetupAccountScheduleWithFormula@131(VAR AccScheduleLine@1001 : Record 85;Totaling@1002 : Text[250]);
    BEGIN
      CreateAccountScheduleAndLine(AccScheduleLine,FORMAT(LibraryRandom.RandInt(100)));
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetAddCurrencyOnAccScheduleOverview@130(ScheduleName@1002 : Code[10]);
    VAR
      AccScheduleOverview@1000 : TestPage 490;
      AccountScheduleNames@1001 : TestPage 103;
    BEGIN
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,ScheduleName);
      AccScheduleOverview.TRAP;
      AccountScheduleNames.Overview.INVOKE;
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(TRUE);
      AccScheduleOverview.OK.INVOKE;
    END;

    LOCAL PROCEDURE SetupForAccScheduleReportWithFormula@93(VAR ColumnLayout@1000 : Record 334;Amount@1001 : Decimal);
    VAR
      AccScheduleLine@1003 : Record 85;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Create and Post General Line.
      CreateGeneralLineWithGLAccount(GenJournalLine,Amount);
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create Account Schedule Line, create Column Layout Name,.
      CreateAccountScheduleAndLineWithoutFormula(AccScheduleLine,GenJournalLine."Account No.");
      ColumnLayout.SETRANGE("Column Layout Name",CreateColumnLayoutWithName(GenJournalLine."Account No."));
      ColumnLayout.FINDFIRST;

      // Enqueue for AccountScheduleRequestPageHandler.
      LibraryVariableStorage.Enqueue(ColumnLayout."Column Layout Name");
      LibraryVariableStorage.Enqueue(AccScheduleLine."Schedule Name");
    END;

    LOCAL PROCEDURE SetupForAccScheduleLinetWithFormula@161(VAR AccScheduleLine@1000 : Record 85;Amount@1001 : Decimal;FormulaValue@1002 : Text[50];ColumnLayoutName@1004 : Code[10];RowNo@1006 : Code[10];NewPage@1005 : Boolean);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      // 1.Create General Journal Line With GL Account and Post.
      CreateGeneralLineWithGLAccount(GenJournalLine,Amount);
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Create Account Schedule Line.
      CreateMultiAccountScheduleLine(
        AccScheduleLine,
        ColumnLayoutName,
        RowNo,
        GenJournalLine."Account No.",
        FormulaValue,
        AccScheduleLine."Totaling Type"::"Posting Accounts",
        NewPage);
    END;

    LOCAL PROCEDURE SetupAccountScheduleWithDefColumnAndLine@192(VAR AccScheduleName@1003 : Record 84;CostTypeNo@1002 : Code[20]);
    VAR
      ColumnLayoutName@1001 : Record 333;
      AccScheduleLine@1000 : Record 85;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      UpdateDefaultColumnLayoutOnAccSchNameRec(AccScheduleName,ColumnLayoutName.Name);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      UpdateAccScheduleLine(
        AccScheduleLine,CostTypeNo,AccScheduleLine."Totaling Type"::"Cost Type",FORMAT(LibraryRandom.RandInt(5)));
    END;

    LOCAL PROCEDURE SetupColumnLayoutWithBudgetEntryAndCA@195(DefColumnLayoutCode@1000 : Code[10];CostBudgetCode@1003 : Code[10];CostTypeNo@1005 : Code[20]) : Decimal;
    VAR
      CostCenter@1001 : Record 1112;
      CostBudgetEntry@1002 : Record 1109;
      ColumnLayout@1004 : Record 334;
    BEGIN
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryERM.CreateColumnLayout(ColumnLayout,DefColumnLayoutCode);
      UpdateColumnLayoutForBudgetAndCA(ColumnLayout,CostCenter.Code);
      CLEAR(CostBudgetEntry);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetCode);
      UpdateCostBudgetEntry(CostBudgetEntry,CostTypeNo,CostCenter.Code,'');
      EXIT(CostBudgetEntry.Amount);
    END;

    LOCAL PROCEDURE UpdateAccScheduleForCA@36(VAR AccScheduleLine@1002 : Record 85;CostTypeNo@1003 : Code[20];CostCenterTotaling@1000 : Code[20];CostObjectTotaling@1001 : Code[20]);
    BEGIN
      AccScheduleLine.VALIDATE("Totaling Type",AccScheduleLine."Totaling Type"::"Cost Type");
      AccScheduleLine.VALIDATE(Totaling,CostTypeNo);
      AccScheduleLine.VALIDATE("Cost Center Totaling",CostCenterTotaling);
      AccScheduleLine.VALIDATE("Cost Object Totaling",CostObjectTotaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAccScheduleLine@77(VAR AccScheduleLine@1000 : Record 85;Totalling@1001 : Text[250];TotalingType@1002 : Option;RowNo@1003 : Code[10]);
    BEGIN
      AccScheduleLine.VALIDATE("Row No.",RowNo);
      AccScheduleLine.VALIDATE("Totaling Type",TotalingType);
      AccScheduleLine.VALIDATE(Totaling,Totalling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateColumnLayoutForBudgetAndCA@181(VAR ColumnLayout@1003 : Record 334;CostCenterTotaling@1001 : Code[20]);
    BEGIN
      WITH ColumnLayout DO BEGIN
        VALIDATE("Cost Center Totaling",CostCenterTotaling);
        VALIDATE("Ledger Entry Type","Ledger Entry Type"::"Budget Entries");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateColumnLayout@76(VAR ColumnLayout@1000 : Record 334);
    VAR
      LedgerEntryType@1001 : 'Entries,Budget Entries';
    BEGIN
      ColumnLayout.VALIDATE("Ledger Entry Type",LedgerEntryType::"Budget Entries");
      ColumnLayout.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCostBudgetEntry@74(VAR CostBudgetEntry@1000 : Record 1109;CostTypeNo@1001 : Code[20];CostCenterCode@1002 : Code[20];CostObjectCode@1003 : Code[20]);
    BEGIN
      CostBudgetEntry.VALIDATE("Cost Type No.",CostTypeNo);
      CostBudgetEntry.VALIDATE("Cost Center Code",CostCenterCode);
      CostBudgetEntry.VALIDATE("Cost Object Code",CostObjectCode);
      CostBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCurrencyWithResidualAccount@132(Currency@1000 : Record 4);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",GLAccount."No.");
      Currency.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGenJournalLine@79(VAR GenJournalLine@1001 : Record 81;BalAccountNo@1000 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGLBudgetEntry@73(VAR GLBudgetEntry@1000 : Record 96);
    BEGIN
      GLBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(100,2));
      GLBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAndPostGeneralLine@152(PostingDate@1000 : Date;AccountNo@1001 : Code[20];Amount@1002 : Decimal);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      CreateGeneralLineWithGLAccount(GenJournalLine,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.MODIFY(TRUE);
      UpdateGenJournalLine(GenJournalLine,LibraryERM.CreateGLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE UpdateTotalingInCashFlowAccount@137(CashFlowAccount@1001 : Record 841;Totaling@1000 : Code[50]);
    BEGIN
      CashFlowAccount.VALIDATE(Totaling,Totaling);
      CashFlowAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTotalingInCostType@133(CostType@1001 : Record 1103;Totaling@1000 : Code[50]);
    BEGIN
      CostType.VALIDATE(Totaling,Totaling);
      CostType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultColumnLayoutOnAccSchName@223(AccScheduleNameCode@1000 : Code[10];ColumnLayoutName@1001 : Code[10]);
    VAR
      AccScheduleName@1002 : Record 84;
    BEGIN
      AccScheduleName.GET(AccScheduleNameCode);
      UpdateDefaultColumnLayoutOnAccSchNameRec(AccScheduleName,ColumnLayoutName);
    END;

    LOCAL PROCEDURE UpdateDefaultColumnLayoutOnAccSchNameRec@213(VAR AccScheduleName@1002 : Record 84;ColumnLayoutName@1001 : Code[10]);
    BEGIN
      AccScheduleName."Default Column Layout" := ColumnLayoutName;
      AccScheduleName.MODIFY;
    END;

    LOCAL PROCEDURE UpdateGLSetupAddReportingCurrency@216(CurrencyCode@1003 : Code[10]);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Additional Reporting Currency" := CurrencyCode;
      GeneralLedgerSetup.MODIFY;
    END;

    LOCAL PROCEDURE AccountScheduleOverviewPageRoundingOption@177(ExpectedValue@1002 : Text;RoundingOption@1009 : Option;Totaling@1008 : Text[250];Amount@1007 : Decimal);
    VAR
      AccScheduleLine@1001 : Record 85;
      ColumnLayout@1000 : Record 334;
    BEGIN
      // Setup: Create and modify Column Layout Name, create and post General Line, create Account Schedule Line.
      Initialize;
      SetupForAccountScheduleOverviewPage(
        AccScheduleLine,
        ColumnLayout.Show::Always,
        Amount,
        RoundingOption,
        Totaling);
      LibraryVariableStorage.Enqueue(AccScheduleLine."Row No.");
      LibraryVariableStorage.Enqueue(ExpectedValue);

      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");
    END;

    LOCAL PROCEDURE VerifyAccSchedulLIneAmount@184(AccScheduleLine@1000 : Record 85;ColumnLayout@1002 : Record 334;Amount@1001 : Decimal);
    BEGIN
      VerifyAccScheduleLineAmountWithDateFilter(
        AccScheduleLine,ColumnLayout,Amount,FORMAT(WORKDATE));
    END;

    LOCAL PROCEDURE VerifyAccScheduleLineAmountWithDateFilter@252(AccScheduleLine@1000 : Record 85;ColumnLayout@1002 : Record 334;Amount@1001 : Decimal;DateFilter@1003 : Text);
    BEGIN
      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleLine."Schedule Name");
      AccScheduleLine.SETFILTER("Date Filter",DateFilter);
      Assert.AreEqual(
        Amount,
        LibraryAccSchedule.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE),
        STRSUBSTNO(AccSchOverviewAmountsErr,AccScheduleLine,ColumnLayout));
    END;

    LOCAL PROCEDURE DrillDownWithDimensionTotaling@174(TableID@1000 : Integer);
    VAR
      GLAccount@1005 : Record 15;
      ColumnLayout@1004 : Record 334;
      AccScheduleLine@1003 : Record 85;
      Dimension1Value@1002 : Code[10];
      Amount@1001 : Decimal;
    BEGIN
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);

      // Create and post 2 documents for the same G/L Account with different Global Dimension 1 Code
      CreateAndPostJournalWithDimension(GLAccount."No.",LibraryRandom.RandDec(100,2));
      Amount := LibraryRandom.RandDec(100,2);
      Dimension1Value := CreateAndPostJournalWithDimension(GLAccount."No.",Amount);

      // Set Dimension 1 Totaling filter
      CreateColumnLayout(ColumnLayout);
      CreateAndUpdateAccountSchedule(
        AccScheduleLine,ColumnLayout."Column Layout Name",GLAccount."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");
      CASE TableID OF
        DATABASE::"Acc. Schedule Line":
          BEGIN
            AccScheduleLine.VALIDATE("Dimension 1 Totaling",Dimension1Value);
            AccScheduleLine.MODIFY(TRUE);
          END;
        DATABASE::"Column Layout":
          BEGIN
            ColumnLayout.VALIDATE("Dimension 1 Totaling",Dimension1Value);
            ColumnLayout.MODIFY;
          END;
      END;

      // Verify Chart of Accounts (G/L) shows Amount with defined dimension filter
      LibraryVariableStorage.Enqueue(-Amount);
      OpenAccScheduleOverviewPageCheckValues(AccScheduleLine."Schedule Name",ColumnLayout."Column Layout Name");
    END;

    LOCAL PROCEDURE CreateAndPostJournalWithDimension@167(GlAccountNo@1001 : Code[20];Amount@1002 : Decimal) Dimension1Value : Code[10];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Dimension1Value := UpdateGLAccountWithDefaultDimension(GlAccountNo);
      CreateAndPostJournal(Customer."No.",GlAccountNo,Amount);
    END;

    LOCAL PROCEDURE UpdateGLAccountWithDefaultDimension@171(GLAccountNo@1005 : Code[20]) : Code[10];
    VAR
      DimensionValue@1003 : Record 349;
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.ResetDefaultDimensions(DATABASE::"G/L Account",GLAccountNo);
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDefaultDimensionGLAcc(
        DefaultDimension,GLAccountNo,LibraryERM.GetGlobalDimensionCode(1),DimensionValue.Code);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE GenerateRandomLongFilterOnCODE10@172() Result : Text[250];
    BEGIN
      Result := FORMAT(LibraryUtility.GenerateGUID);
      WHILE STRLEN(Result) < LibraryRandom.RandIntInRange(100,200) DO
        Result += '|' + FORMAT(LibraryUtility.GenerateGUID);
    END;

    LOCAL PROCEDURE VerifyAccScheduleOverviewAmountsWithTotalDimValue@202(VAR AccScheduleOverview@1000 : TestPage 490;ColumnLayoutName@1002 : Code[10];DimValues@1004 : ARRAY [2] OF Code[20];TotalDimValue@1005 : Code[20];Amounts@1001 : ARRAY [2] OF Decimal);
    VAR
      i@1003 : Integer;
    BEGIN
      AccScheduleOverview.CurrentColumnName.SETVALUE(ColumnLayoutName);
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(FALSE);
      FOR i := 1 TO 2 DO BEGIN
        AccScheduleOverview.Dim1Filter.SETVALUE(DimValues[i]);
        AccScheduleOverview.ColumnValues1.ASSERTEQUALS(-Amounts[i]);
      END;
      AccScheduleOverview.Dim1Filter.SETVALUE(TotalDimValue);
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(-(Amounts[1] + Amounts[2]));
      AccScheduleOverview.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyDimValueExistInFilteredTable@307(FilteredDimValue@1000 : Record 349;SearchDimValueCode@1001 : Code[20]);
    BEGIN
      FilteredDimValue.SETRANGE(Code,SearchDimValueCode);
      Assert.IsFalse(FilteredDimValue.ISEMPTY,Dim1FilterErr);
    END;

    LOCAL PROCEDURE ResetAddCurrInAccScheduleOverview@282();
    VAR
      AccScheduleOverview@1000 : TestPage 490;
    BEGIN
      AccScheduleOverview.OPENEDIT;
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(FALSE);
      AccScheduleOverview.CLOSE;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewWithCostBudgetFilterHandler@71(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.DateFilter.SETVALUE(WORKDATE);
      AccScheduleOverview.CostBudgetFilter.SETVALUE(GenerateRandomLongFilterOnCODE10);
      AccScheduleOverview.CostBudgetFilter.ASSERTEQUALS(AccScheduleOverview.FILTER.GETFILTER("Cost Budget Filter"));
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewWithDateFilterHandler@72(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.DateFilter.SETVALUE(WORKDATE);
      AccScheduleOverview.DateFilter.ASSERTEQUALS(AccScheduleOverview.FILTER.GETFILTER("Date Filter"));
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewWithDateFilterIntervalHandler@175(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      DateFilter@1001 : Text[30];
    BEGIN
      DateFilter := FORMAT(CALCDATE('<-CY>',WORKDATE)) + '..' + FORMAT(CALCDATE('<CY>',WORKDATE));
      AccScheduleOverview.DateFilter.SETVALUE(DateFilter);
      AccScheduleOverview.DateFilter.ASSERTEQUALS(AccScheduleOverview.FILTER.GETFILTER("Date Filter"));
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewWithGLBudgetFilterHandler@66(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.DateFilter.SETVALUE(WORKDATE);
      AccScheduleOverview."G/LBudgetFilter".SETVALUE(GenerateRandomLongFilterOnCODE10);
      AccScheduleOverview."G/LBudgetFilter".ASSERTEQUALS(AccScheduleOverview.FILTER.GETFILTER("G/L Budget Filter"));
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewPageHandler@53(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.CurrentColumnName.SETVALUE(LibraryVariableStorage.DequeueText);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,AccScheduleOverview.ColumnValues1.CAPTION,STRSUBSTNO(ValueMustMatchErr));
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewHandler@78(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      Amount@1002 : Variant;
      LayoutName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LayoutName);
      LibraryVariableStorage.Dequeue(Amount);
      AccScheduleOverview.CurrentColumnName.SETVALUE(LayoutName);
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(Amount);
      AccScheduleOverview.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE AccountScheduleRequestPageHandler@69(VAR AccountSchedule@1000 : TestRequestPage 25);
    VAR
      ScheduleName@1002 : Variant;
      ColumnLayoutName@1001 : Variant;
      ShowError@1003 : 'None,Division by Zero,Period Error,Both';
    BEGIN
      LibraryVariableStorage.Dequeue(ColumnLayoutName);
      LibraryVariableStorage.Dequeue(ScheduleName);
      AccountSchedule.AccSchedNam.SETVALUE(ScheduleName);
      AccountSchedule.ColumnLayoutNames.SETVALUE(ColumnLayoutName);
      AccountSchedule.DateFilters.SETVALUE(WORKDATE);
      AccountSchedule.Control4.SETVALUE(ShowError::"Division by Zero");
      AccountSchedule.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AccountScheduleRequestPageVerifyValuesHandler@157(VAR AccountSchedule@1000 : TestRequestPage 25);
    VAR
      ScheduleName@1002 : Variant;
      ColumnLayoutName@1001 : Variant;
      VerifyParameters@1003 : Variant;
      Verify@1004 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(ColumnLayoutName);
      LibraryVariableStorage.Dequeue(ScheduleName);
      LibraryVariableStorage.Dequeue(VerifyParameters);
      Verify := VerifyParameters;
      IF Verify THEN BEGIN
        AccountSchedule.AccSchedNam.ASSERTEQUALS(ScheduleName);
        AccountSchedule.ColumnLayoutNames.ASSERTEQUALS(ColumnLayoutName);
      END ELSE BEGIN
        AccountSchedule.AccSchedNam.SETVALUE(ScheduleName);
        AccountSchedule.ColumnLayoutNames.SETVALUE(ColumnLayoutName);
        AccountSchedule.DateFilters.SETVALUE(WORKDATE);
        AccountSchedule.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
      END;
    END;

    [PageHandler]
    PROCEDURE ColumnLayoutOnOverviewPageHandler@56(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      LayoutName@1001 : Code[10];
    BEGIN
      LayoutName := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LayoutName));
      AccScheduleOverview.CurrentColumnName.SETVALUE(LayoutName);
      AccScheduleOverview.CurrentColumnName.ASSERTEQUALS(LayoutName);
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE BlankCellOverviewPageHandler@272(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      StoredColumnLayoutName@1002 : Variant;
      StoredRowNo@1001 : Variant;
      StoredExpectedValue@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StoredColumnLayoutName);
      AccScheduleOverview.CurrentColumnName.SETVALUE(StoredColumnLayoutName);

      LibraryVariableStorage.Dequeue(StoredRowNo);
      AccScheduleOverview."Row No.".ASSERTEQUALS(StoredRowNo);

      LibraryVariableStorage.Dequeue(StoredExpectedValue);
      Assert.AreEqual(StoredExpectedValue,AccScheduleOverview.ColumnValues1.VALUE,IncorrectValueInAccScheduleErr);
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AccountScheduleOverviewPageHandler@139(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.CurrentSchedName.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AccountScheduleOverviewVerifyFormulaResultPageHandler@240(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(LibraryVariableStorage.DequeueInteger);
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE ColumnValueOnOverviewPageHandler@190(VAR AccScheduleOverview@1001 : TestPage 490);
    VAR
      SavedVar@1002 : Variant;
      FirstCall@1000 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(SavedVar);
      FirstCall := SavedVar;
      IF FirstCall THEN
        AccScheduleOverview.ColumnValues3.ASSERTEQUALS('');
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewColumnLayoutChangePageHandler@193(VAR AccScheduleOverview@1001 : TestPage 490);
    VAR
      SavedVar@1002 : Variant;
    BEGIN
      // change to 2 columns layout check 3rd columns is cleared
      LibraryVariableStorage.Dequeue(SavedVar);
      AccScheduleOverview.CurrentColumnName.SETVALUE(SavedVar);
      AccScheduleOverview.ColumnValues3.ASSERTEQUALS('');
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewWithDisabledLinePageHandler@180(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      UnxpectedRowNo@1001 : Variant;
    BEGIN
      WITH AccScheduleOverview DO BEGIN
        LibraryVariableStorage.Dequeue(UnxpectedRowNo);
        FIRST;
        REPEAT
          Assert.AreNotEqual(UnxpectedRowNo,"Row No.".VALUE,STRSUBSTNO(RowVisibleErr,"Row No."));
        UNTIL NOT NEXT;
      END;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewPageDrillDownHandler@182(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      ChartOfCostTypes@1003 : TestPage 1100;
      Amount@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Amount);
      AccScheduleOverview.DateFilter.SETVALUE(WORKDATE);
      ChartOfCostTypes.TRAP;
      AccScheduleOverview.ColumnValues1.DRILLDOWN;
      ChartOfCostTypes.FIRST;
      ChartOfCostTypes."Net Change".ASSERTEQUALS(Amount);
      ChartOfCostTypes.OK.INVOKE;
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE ValuesOnOverviewPageHandler@75(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      RowNo@1001 : Variant;
    BEGIN
      AccScheduleOverview.CurrentColumnName.SETVALUE(LibraryVariableStorage.DequeueText);
      AccScheduleOverview.CurrentSchedName.SETVALUE(LibraryVariableStorage.DequeueText);
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(FALSE);
      LibraryVariableStorage.Dequeue(RowNo);
      AccScheduleOverview."Row No.".ASSERTEQUALS(RowNo);
      AccScheduleOverview.PeriodType.SETVALUE(LibraryVariableStorage.DequeueInteger);
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      AccScheduleOverview.PeriodType.SETVALUE(ViewByRef::Day);
      AccScheduleOverview.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GLAccountListPageHandler@44(VAR GLAccountList@1000 : TestPage 18);
    VAR
      GLAccountNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GLAccountNo);
      GLAccountList.FILTER.SETFILTER("No.",GLAccountNo);
      GLAccountList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CashFlowListPageHandler@141(VAR CashFlowAccountList@1000 : TestPage 855);
    VAR
      CashFlowAccountNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CashFlowAccountNo);
      CashFlowAccountList.FILTER.SETFILTER("No.",CashFlowAccountNo);
      CashFlowAccountList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CostTypeListPageHandler@160(VAR CostTypeList@1000 : TestPage 1124);
    VAR
      CostTypeAccountNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CostTypeAccountNo);
      CostTypeList.FILTER.SETFILTER("No.",CostTypeAccountNo);
      CostTypeList.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewDrillDownHandler@179(VAR AccScheduleOverview@1000 : TestPage 490);
    BEGIN
      AccScheduleOverview.DateFilter.SETVALUE(WORKDATE);
      AccScheduleOverview.ColumnValues1.DRILLDOWN;
    END;

    [PageHandler]
    PROCEDURE ChartOfAccountsPageHandler@186(VAR ChartOfAccountsGL@1000 : TestPage 570);
    VAR
      Amount@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Amount);
      ChartOfAccountsGL."Net Change".ASSERTEQUALS(Amount);
    END;

    [PageHandler]
    PROCEDURE ChartOfAccountsDrillDownPageHandler@189(VAR ChartOfAccountsGL@1000 : TestPage 570);
    VAR
      CashFlowAccountNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CashFlowAccountNo);
      Assert.AreEqual(CashFlowAccountNo,ChartOfAccountsGL.FILTER.GETFILTER("No."),'Filter no. does not match expected no.');
    END;

    [ModalPageHandler]
    PROCEDURE ChartOfCostCentersHandler@204(VAR ChartOfCostCenters@1000 : Page 1122;VAR Response@1003 : Action);
    VAR
      CostCenter@1004 : Record 1112;
      DequeueVar@1005 : Variant;
      ResponseOption@1006 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVar);
      ResponseOption := DequeueVar;
      LibraryVariableStorage.Dequeue(DequeueVar);
      CostCenter.SETRANGE(Code,DequeueVar);
      CostCenter.FINDFIRST;
      ChartOfCostCenters.SETRECORD(CostCenter);
      CASE ResponseOption OF
        ResponseRef::LookupOK:
          Response := ACTION::LookupOK;
        ResponseRef::LookupCancel:
          Response := ACTION::LookupCancel;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ChartOfCostObjectsHandler@209(VAR ChartOfCostObjects@1001 : Page 1123;VAR Response@1000 : Action);
    VAR
      CostObject@1004 : Record 1113;
      DequeueVar@1003 : Variant;
      ResponseOption@1002 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVar);
      ResponseOption := DequeueVar;
      LibraryVariableStorage.Dequeue(DequeueVar);
      CostObject.SETRANGE(Code,DequeueVar);
      CostObject.FINDFIRST;
      ChartOfCostObjects.SETRECORD(CostObject);
      CASE ResponseOption OF
        ResponseRef::LookupOK:
          Response := ACTION::LookupOK;
        ResponseRef::LookupCancel:
          Response := ACTION::LookupCancel;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@37(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    [MessageHandler]
    PROCEDURE RowMessageHandler@207(Message@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage('Row formula',Message);
    END;

    [MessageHandler]
    PROCEDURE VerifyMessageHandler@219(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,IncorrectExpectedMessageErr);
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,IncorrectExpectedMessageErr);
    END;

    [ModalPageHandler]
    PROCEDURE GLAccountListModalPageHandler@378(VAR GLAccountList@1000 : TestPage 18);
    BEGIN
      GLAccountList.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      GLAccountList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Account Schedule]
      Unsupported version tags:
      NA: Unable to Execute
      SE: Unable to Execute

      Test for Account Schedule:
        1. Test on running Column Layout form without Column Layout Name error occurs.
        2. Test Create Account Schedule Name.
        3. Test Create Column Layout Name and Column Layout.
        4. Test Delete Column Layout Name.
        5. Test on running Account Schedule form without Account Schedule Name error occurs.
        6. Test Create Account Schedule Line.
        7. Test Delete Account Schedule and Account Schedule Line.
        8. Test on Updating wrong Comparison Date Formula error occurs.
        9. Test on Updating wrong Formula error occurs.
       10. Test on updating wrong formula on Column Layout error occurs.
       11. Test error occurs on running Account Schedule Report with wrong Formula on Column Layout.
       12. Test Creation of Column Layout with different values of Show field and error occurs on update Show other than the available
           options.
       13. Test error occurs on running Account Schedule Report with wrong Totaling on Account Schedule Line.
       14. Test Value on Account Schedule Matrix.
       15. Test Column Caption for a Column created using Column Layout for Account Schedule Overview.
       16. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Day.
       17. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Week.
       18. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Month.
       19. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Quarter.
       20. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Year.
       21. Test Account Schedule Overview shows correct Amount under the newly created column when View By Period is Accounting Period.
       22. Test that Program allows to change the column layout name on Column layout window.
       23. Test that Program allows to change the column layout name on Account Schedule Overview window.
       24. Test that system inserts the row in the next line while using the function InsertGLAccounts in Acc. Schedule Line.
       25. Verify Account Schedule Overview Page with Column Layout Show option "When Negative".
       26. Verify Account Schedule Overview Page with Column Layout Show option "When Positive".
       27. Verify Account Schedule Report with Column Layout Show option "Never".
       28. Verify Account Schedule Report with Column Layout Rounding Factor option "None".
       29. Verify Account Schedule Report with Column Layout Rounding Factor option "1".
       30. Verify Account Schedule Report with Column Layout Rounding Factor option "1000".
       31. Verify Account Schedule Report with Column Layout Rounding Factor option "1000000".
       32. Verify Account Schedule Report with Show Error "Division By Zero".
       33. Verify Account Schedule Report with Column Layout formula for multiply by Small value.
       34. Verify Account Schedule Report with Column Layout formula for Divide by Small value.
       35. Verify Account Schedule Report with Column Layout formula for multiply by Large value.
       36. Verify Account Schedule Report with Column Layout formula for Divide by Large value.
       37. Verify Account Schedule Report with Column Layout formula for cross addition.
       38. Verify Account Schedule Report with Column Layout formula for cross multiplication.
       39. Verify Account Schedule Report with Column Layout formula for cross division.
       40. Verify Account Schedule Report with Column Layout formula for sum with odd order.
       41. Verify Account Schedule Report with Column Layout formula for Decimal Seperator.
       42. Verify multiplication by zero formula value on Account Schedule report.
       43. Verify division by zero formula value on Account Schedule report.
       44. Verify short decimal value multiply calculation formula value on Account Schedule report.
       45. Verify short decimal value division calculation formula value on Account Schedule report.
       46. Verify long decimal value division calculation formula value on Account Schedule report.
       47. Verify addition formula value on Account Schedule report.
       48. Verify long calculation formula value on Account Schedule report.
       49. Verify Decimal Seprator formula value on Account Schedule report.
       50. Verify range total formula value on Account Schedule report.
       51. Verify error while creating formula on Account Schedule Line with use of conscutive arthmatic operators.
       52. Verify error while creating formula on Account Schedule Line with missing Parenthesis.
       53. Verify error while creating formula on Account Schedule Line with extra Left Parenthesis.
       54. Verify cross and same Row No used in Formula on Account Schedule.
       55. Verify cross Row No and and numeric value used in Formula on Account Schedule.
       56. Verify error while using cross row no in formula on Account Schedule Line.
       57. Verify amounts for created cost type as Cost Type on Account Schedule Overview.
       58. Verify amounts for created cost type as Total on Account Schedule Overview.
       59. Verify amounts for created cost type as End Total on Account Schedule Overview.
       60. Verify amounts for created Cash Flow Account as Entry Account Type on Account Schedule Overview.
       61. Verify amounts for created Cash Flow Account as Total Account Type on Account Schedule Overview.
       62. Verify amounts for created Cash Flow Account as End Total Account Type on Account Schedule Overview.
       63. Verify amounts for Totaling Type as Formula and Totaling contains % operator on Account Schedule Overview.
       64. Verify that Account Schedule Overview shows Amounts in Additional Report Currency correctly for all Column Values with ACY.
       65. Verify Account Schedule Report with Column Layout formula for cross addition with Parenthesis.
       66. Verify error while running Account Schedule report with circular reference Column Layout.
       67. Verify no row found on Account Schedule Report when value in all Columns are zero and Account Schedule Line Show option is set If Any Column Not Zero.
       68. Verify Account Schedule report with New Page True on Account Schedule Line.
       69. Verify Account Schedule report with Column Layout circular reference formula.
       70. Verify Account Schedule report when Comparison Date Formula is defined for Column Layout.
       71. Verify Debit amount for created GL Account on Account Schedule Line.
       72. Verify Credit amount for created GL Account on Account Schedule Line.
       73. Verify Net amount for created GL Account on Account Schedule Line.
       74. Verify Net amount for created Cash flow Account on Account Schedule Line.
       75. Verify Debit amount for created Cost Type Account on Account Schedule Line.
       76. Verify Credit amount for created Cost Type Account on Account Schedule Line.
       77. Verify Net amount for created Cost Type Account on Account Schedule Line.
       78. Verify Column clean up after Column Layout change
       79. Verify Rounding and Formating small values on Overview Page and Report
       80. Verify Formula message is displayed when drilling down on a formula cell.
       81. Verify the relevant source page is shown when drilling down on a non-formula cell.

      TFS_TS_ID = 181654, 187730, 187794, 187747, 186326
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      BlankColumnName                                                                                        125472, 125473
      CreationOfAccountSchedule, CreationOfColumnLayoutName, CreationOfColumnLayout                          125472
      DeleteColumnLayoutName                                                                                 125476
      BlankAccountScheduleName                                                                               127777, 123925
      CreationOfAccountScheduleLine                                                                          127777
      DeleteAccountSchedule                                                                                  123928
      DateFormulaWithOutNumber, WrongDateFormula                                                             125489
      ColumnLayoutTwiceOperator, ColumnLayoutWrongParentheses                                                125503
      DeleteAccountScheduleLine                                                                              125492
      ColumnLayoutError                                                                                      125488
      AccountScheduleFormulaError                                                                            125490
      ColumnLayoutShowNever, ColumnLayoutShowPositive, ColumnLayoutShowNegative, ColumnLayoutWithShowError   121612
      AccountScheduleTotalingError                                                                           125506
      AccountScheduleOverviewMatrix                                                                          125498

      Cover Test cases: 267705
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      ColumnLayoutColumnCaption, AccountScheduleOverviewByDay, AccountScheduleOverviewByWeek                 127782
      AccountScheduleOverviewByMonth, AccountScheduleOverviewByQuarter, AccountScheduleOverviewByYear        127783
      AccountScheduleOverviewByAccountingPeriod                                                              127784

      Cover Test cases: 282613
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      ColumnLayoutWithChangeLayoutName                                                                        278165
      AccountScheduleOverviewWithChangeLayoutName                                                             278216

      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      ValuesOnAccScheduleLineCorrespondingCostBudgetFilter,                                                   284172
      ValuesOnAccScheduleLineCorrespondingDateFilter,
      ValuesAccScheduleLineCorrespondingGLBudgetFilter,
      VerifyAccScheduleOverviewCostBudgetFilter,
      VerifyAccScheduleOverviewDateFilter,
      VerifyAccScheduleOverviewGLBudgetFilter.

      Cover Test cases: 300997
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      VerifyAccountScheduleInsertGLAccount                                                                    298555

      Cover Test cases: 319613
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccountScheduleOverviewShowOptionNegative, AccountScheduleOverviewShowOptionPositive
      AccountScheduleReportShowOptionNever                                                                    125480

      Cover Test cases: 319622
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccountScheduleReportRoundingOptionNone, AccountScheduleReportRoundingOption1
      AccountScheduleReportRoundingOption1000, AccountScheduleReportRoundingOption1000000                     127778
      AccountScheduleReportDivisionByZero, AccScheduleReportColumnForSmallMultiply
      AccScheduleReportColumnForSmallDivision                                                                 127779
      AccScheduleReportColumnForLargeMultiply, AccScheduleReportColumnForLargeDivision                        127780
      AccScheduleReportColumnForCrossAddition                                                                 127781

      Cover Test cases: 319720
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleReportColumnForCrossMultiply, AccScheduleReportColumnForCrossDivision                        125483
      AccScheduleReportColumnForSumOfOddOrder                                                                 125478
      AccScheduleReportColumnForDecimalSeperator                                                              125484

      Cover Test cases: 319621
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      ValuesOnAccScheduleLineForMultiplyByZeroFormula, ValuesOnAccScheduleLineForDivisionByZeroFormula,
      ValuesOnAccScheduleLineForMultiplyWithShortDecimal, ValuesOnAccScheduleLineForDivisionWithShortDecimal,
      ValuesOnAccScheduleLineForDivisionWithLongDecimal, ValuesOnAccScheduleLineForAddition,
      ValuesOnAccScheduleLineForLongCalculation, ValuesOnAccScheduleLineForDecimalSeprator,
      ValuesOnAccScheduleLineForRangeFormula, ErrorForConsecutiveOperatorsInFormula,
      ErrorForParenthesisInFormula, ErrorForMoreLeftParenthesisInFormula                                      125502

      Cover Test cases: 323428
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      CrossAndSameRowNoInFormula                                                                              125500
      CrossRowNoAndNumericValueInFormula                                                                      125505
      ErrorOnCrossRowNoInFormula                                                                              125501

      Cover Test cases: 313711
      ---------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleWithTypeAsCostType
      AccScheduleWithTypeAsTotal
      AccScheduleWithTypeAsEndTotal
      AccScheduleWithCashFlowAsEntry
      AccScheduleWithCashFlowAsTotal
      AccScheduleWithCashFlowAsEndTotal
      AccScheduleWithTotalingTypeAsFormula
      AccountScheduleOverviewWithACY

      Cover Test cases: 319721
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleReportColumnWithParenthesis                                                                  125487
      AccScheduleReportColumnWithCircularRefError                                                             125486
      AccScheduleReportIfColumnNotZero                                                                        125493

      Cover Test cases: 319706
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleReportWithNewPageTrue                                                                        121615
      AccScheduleReportColumnWithCircularAdd                                                                  121614
      AccScheduleComparisonDateFormula                                                                        121613

      Cover Test cases for Bug Id: 50712
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleWithGLAccountAsAmountTypeDebit,AccScheduleWithGLAccountAsAmountTypeCredit,
      AccScheduleWithGLAccountAsAmountTypeNet,AccScheduleWithInsertCashFlow,
      AccScheduleWithCostTypeAsAmountTypeDebit,AccScheduleWithCostTypeAsAmountTypeCredit,
      AccScheduleWithCostTypeAsAmountTypeNet

      Cover BUG: 70421
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccScheduleOverviewColumnLayoutChange
      AccountScheduleOverviewDoesNotValueInColumn

      AccScheduleOverviewExcludeLinesWithShowNo                                                               74346

      AccScheduleOverviewExcludeLinesWithShowNo                                                               352510
      AccountScheduleOverviewSmallNumberFormulaCalculated                                                     354498

      AccScheduleOverviewWithMultiplteCostCenterOnColumnLayout                                                360737
      AccountScheduleReportRoundingOptionNoneSmallNumber,
      AccountScheduleOverviewPageRoundingOptionNone,
      AccountScheduleOverviewPageRoundingOption1,
      AccountScheduleOverviewPageRoundingOption1000,
      AccountScheduleOverviewPageRoundingOption1000000,
      AccountScheduleOverviewPageRoundingOptionNoneSmallNumber                                                91015
    }
    END.
  }
}

