OBJECT Codeunit 137046 SCM Order Planning - I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationRed@1011 : Record 14;
      LocationBlue@1010 : Record 14;
      LocationBlue2@1009 : Record 14;
      LocationIntransit@1008 : Record 14;
      SalesReceivablesSetup@1004 : Record 311;
      Assert@1005 : Codeunit 130000;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryPlanning@1002 : Codeunit 132203;
      LibraryPurchase@1015 : Codeunit 130512;
      LibraryInventory@1017 : Codeunit 132201;
      LibraryManufacturing@1018 : Codeunit 132202;
      LibrarySales@1022 : Codeunit 130509;
      LibraryWarehouse@1019 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      VerifyOnGlobal@1012 : 'RequisitionLine,Orders';
      DemandTypeGlobal@1013 : 'Sales,Production';
      IsInitialized@1000 : Boolean;
      ValidationError@1014 : TextConst 'ENU=%1  must be %2 in %3.';
      FinishOrderMessage@1006 : TextConst 'ENU=Do you still want to finish the order?';
      LineCountError@1032 : TextConst 'ENU="There should be '' %1 '' line(s) in the planning worksheet for item. "';
      CostIsAdjustedErr@1020 : TextConst 'ENU="""Cost Is Adjusted"" in Inventory Adjmt. Entry (Order) should be TRUE if Item was deleted"';
      UnitOfMeasureErr@1007 : TextConst 'ENU=Unit of Measure Code on Requisition Line doesn''t equal to the Purch. Unit of Measure of Item';

    [Test]
    PROCEDURE ProdWithLessConsumption@16();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      ProductionOrder@1024 : Record 5405;
      ParentItem@1001 : Record 27;
      RequisitionLine@1003 : Record 246;
      ChildItem@1005 : Record 27;
      BOMQuantity@1002 : Decimal;
    BEGIN
      // Setup : Create Manufacturing Item Setup, Create Production Order and consume less than required quantity
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      BOMQuantity := LibraryRandom.RandDec(10,2);
      CreateManufacturingSetup(ParentItem,ChildItem,BOMQuantity,FALSE);  // Child Item With Replenishment System Purchase.
      UpdateItemInventory(BOMQuantity,ChildItem."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",'',LibraryRandom.RandDec(5,2) + 1,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE));
      CreateAndPostConsumWithQty(ProductionOrder."No.",BOMQuantity);

      // Exercise : Run Order Planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify : Verify That Quantity on Requisition Line same as Remaining Quantity on ProdOrderComponent.
      VerifyDemandQtyAndLocation(ProductionOrder."No.",DemandTypeGlobal::Production,ProductionOrder.Status::Released);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ProdLessConsmpMakeSupplyOrder@22();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      ProductionOrder@1024 : Record 5405;
      ParentItem@1005 : Record 27;
      ChildItem@1003 : Record 27;
      RequisitionLine@1001 : Record 246;
      BOMQuantity@1004 : Decimal;
    BEGIN
      // Setup : Create Manufacturing Item Setup, Create Production Order and consume less than required quantity and run Order Planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      BOMQuantity := LibraryRandom.RandDec(10,2);
      CreateManufacturingSetup(ParentItem,ChildItem,BOMQuantity,FALSE);  // Child Item With Replenishment System Purchase.
      UpdateItemInventory(BOMQuantity,ChildItem."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",'',LibraryRandom.RandDec(5,2) + 1,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE));
      CreateAndPostConsumWithQty(ProductionOrder."No.",BOMQuantity);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise : Run Make order from Order Planning Worksheet.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Verify That Quantity on Purchase Order is same as Required quantity in Production BOM Component Line.
      VerifyPurchaseQtyAgainstProd(ProductionOrder);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ProdEqualsConsumption@77();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      ProductionOrder@1024 : Record 5405;
      ParentItem@1004 : Record 27;
      ChildItem@1005 : Record 27;
      RequisitionLine@1001 : Record 246;
      BOMQuantity@1003 : Decimal;
    BEGIN
      // Setup : Create Manufacturing Item Setup, Create Released Production Order and consume demand quantity.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      BOMQuantity := LibraryRandom.RandInt(10);
      CreateManufacturingSetup(ParentItem,ChildItem,BOMQuantity,FALSE);  // Child Item With Replenishment System Purchase.
      UpdateItemInventory(BOMQuantity,ChildItem."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",'',1,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE));  // Value Needed.

      CreateAndPostConsumWithQty(ProductionOrder."No.",BOMQuantity);

      // Exercise : Run Order Planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify : Verify That No Requisition Line Created if consumption for required quantity is posted.
      AssertNoLinesForItem(ProductionOrder."No.",ChildItem."No.",'',0);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RoutingOnInventoryAdjmtEntryOrder@11();
    VAR
      ProductionOrder@1005 : Record 5405;
      ParentItem@1004 : Record 27;
      InventoryAdjmtEntryOrder@1011 : Record 5896;
      RoutingNo@1000 : Code[20];
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO 378138] Finish Production Order Job should update "Routing No." of Inventory Adjmt Entry Order
      Initialize;

      // [GIVEN] Production Order Line with "Routing No." blank
      Qty := LibraryRandom.RandDec(10,2);
      CreateProdOrderForItem(ProductionOrder,ParentItem,Qty);
      RoutingNo := SetRoutingOnProdOrderLine(ProductionOrder."No.",'');

      // [GIVEN] Post Consumption. Inventory Adjmt Entry Order is created with "Routing No." blank
      CreateAndPostConsumWithQty(ProductionOrder."No.",Qty);

      // [GIVEN] Set "Routing No." on Production Order Line to "X"
      SetRoutingOnProdOrderLine(ProductionOrder."No.",RoutingNo);

      // [GIVEN] Post Output
      CreateAndPostOutputJournal(ProductionOrder."No.",ParentItem."No.");

      // [WHEN] Finish Production Order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [THEN] Inventory Adjmt Entry Order has "Routing No." = "X"
      InventoryAdjmtEntryOrder.FINDLAST;
      InventoryAdjmtEntryOrder.TESTFIELD("Routing No.",RoutingNo);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlanningForProdMakeSupplyOrder@2();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      ProductionOrder@1024 : Record 5405;
      ParentItem@1005 : Record 27;
      ChildItem@1004 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Release Production Order
      // and run Order Planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),FALSE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",'',LibraryRandom.RandDec(10,2) + 10,WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise : Run Make order from Order Planning Worksheet.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Verify That Quantity on Purchase Order and Quantity on Production Order is same as define in Production BOM and child item.
      VerifyPurchaseQtyAgainstProd(ProductionOrder);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE PlanningForSalesOrder@20();
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      Item@1001 : Record 27;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1005 : Record 36;
      RequisitionLine@1004 : Record 246;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Sales Order with Quantity greater than inventory Quantity and ship the inventory quantity.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity);
      CreateSalesOrder(SalesHeader,Item."No.",'',Quantity + LibraryRandom.RandDec(10,2),Quantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Verify That Requisition Line has same quantity as on outstanding on sales order.
      VerifyDemandQtyAndLocation(SalesHeader."No.",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlanningForSaleMakeSupplyOrder@41();
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      SalesHeader@1005 : Record 36;
      Item@1003 : Record 27;
      PurchaseHeader@1004 : Record 38;
      RequisitionLine@1001 : Record 246;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Sales Order with Quantity greater than inventory Quantity and ship the inventory quantity.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity);
      CreateSalesOrder(SalesHeader,Item."No.",LocationRed.Code,Quantity + LibraryRandom.RandDec(10,2),Quantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Run Make order from Order Planning Worksheet.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify : Verify That Quantity on Purchase Order is same as remaining demand quantity on Sales Order.
      VerifyDemandQtyWithPurchQty(SalesHeader."No.",Item."No.",LocationRed.Code);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE PlanningPurchaseEqualsSales@56();
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      SalesHeader@1005 : Record 36;
      RequisitionLine@1006 : Record 246;
      Item@1003 : Record 27;
      PurchaseHeader@1001 : Record 38;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Sales Order with Quantity as Quantity on inventory and ship the inventory quantity.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity);
      CreateSalesOrder(SalesHeader,Item."No.",'',Quantity,Quantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Verify That No Requisition Line has Created for Sales Order after posting total demand quantity.
      AssertNoLinesForItem(SalesHeader."No.",Item."No.",'',0);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MultipleSalesMakeOrderActLine@28();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1014 : Record 36;
      SalesHeader3@1015 : Record 36;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
      RequisitionLine@1000 : Record 246;
      ManufacturingUserTemplate@1001 : Record 5525;
    BEGIN
      // Setup : Create Two Item, Locations and Multiple Sales Order for multiple Location on Line.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','',Item."Vendor No.");
      CreateMultipleSalesOrder(SalesHeader,SalesHeader2,SalesHeader3,LocationBlue.Code,LocationRed.Code,Item."No.",Item2."No.");
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Make Supply Orders for Active Line on Requisition Line.
      MakeSupplyOrdersActiveLine(
        SalesHeader."No.",Item."No.",LocationBlue.Code,ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Verify : Verify That Purchase Order Quantity is same as demand quantity for sales order created by Make supply Order by
      // active Line.
      VerifyDemandQtyWithPurchQty(SalesHeader."No.",Item."No.",LocationBlue.Code);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MultipleSalesMakeOrderCalcPlan@44();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1014 : Record 36;
      SalesHeader3@1015 : Record 36;
      RequisitionLine@1001 : Record 246;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      // Setup : Create Two Item, Locations and Multiple Sales Order for multiple Location on Line And Make Supply Order For Active Line.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','',Item."Vendor No.");
      CreateMultipleSalesOrder(SalesHeader,SalesHeader2,SalesHeader3,LocationBlue.Code,LocationRed.Code,Item."No.",Item2."No.");
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      MakeSupplyOrdersActiveLine(
        SalesHeader."No.",Item."No.",LocationBlue.Code,ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Exercise: Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Check That No Requisition Line is created after Make Supply order by Active Line for the sales Order.
      AssertNoLinesForItem(SalesHeader."No.",Item."No.",LocationBlue.Code,0);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MultipleSalesMakeOrderAllLine@62();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1014 : Record 36;
      SalesHeader3@1015 : Record 36;
      RequisitionLine@1001 : Record 246;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
    BEGIN
      // Setup : Create Two Item, Locations and Multiple Sales Order for multiple Location on Line And Make Supply Order For Active Line.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','',Item."Vendor No.");
      CreateMultipleSalesOrder(SalesHeader,SalesHeader2,SalesHeader3,LocationBlue.Code,LocationRed.Code,Item."No.",Item2."No.");
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Make Supply Order for All line in Requisition Line.
      ClearRequisitionLines(SalesHeader."No.",SalesHeader2."No.",SalesHeader3."No.");
      MakeSupplyOrdersAllLine(RequisitionLine,SalesHeader."No.",SalesHeader2."No.",SalesHeader3."No.");

      // Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Verify That No requisition Line created for sales order after create Make Supply Order for All Line.
      RequisitionLine.SETFILTER("Demand Order No.",'%1|%2|%3',SalesHeader."No.",SalesHeader2."No.",SalesHeader3."No.");
      ASSERTERROR RequisitionLine.FINDFIRST;

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ChangeReplenishmentCalcPlan@75();
    VAR
      RequisitionLine@1003 : Record 246;
      ParentItem@1002 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1004 : Record 5405;
      TempSalesReceivablesSetup@1006 : TEMPORARY Record 311;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory and Replenishment System Production,
      // Create Firm Planned Production Order and run Order Planning Production.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",'',LibraryRandom.RandDec(10,2) + 10,WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise : Change Replenishment System on Requisition Line and calculate plan for sales.
      ChangeReplenishmentSystem(
        RequisitionLine,RequisitionLine."Replenishment System"::"Prod. Order",RequisitionLine."Replenishment System"::Purchase,
        ProductionOrder."No.",ParentItem."Vendor No.");
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Verify That Replenishment System is not change after calculating plan for sales.
      RequisitionLine.SETRANGE("Demand Order No.",ProductionOrder."No.");
      RequisitionLine.SETRANGE("No.",ChildItem."No.");
      RequisitionLine.FINDFIRST;
      Assert.AreEqual(
        RequisitionLine."Replenishment System"::Purchase,RequisitionLine."Replenishment System",
        STRSUBSTNO(ValidationError,RequisitionLine.FIELDCAPTION("Replenishment System"),
          RequisitionLine."Replenishment System"::Purchase,RequisitionLine.TABLECAPTION));

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ChangeReplenishmentMakeOrder@72();
    VAR
      ParentItem@1002 : Record 27;
      ChildItem@1009 : Record 27;
      ProductionOrder@1001 : Record 5405;
      RequisitionLine@1007 : Record 246;
      PurchaseLine@1006 : Record 39;
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Firm Planned Production Order
      // and run Order Planning Production And Change the Replenishment System.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) +
        10,WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      ChangeReplenishmentSystem(
        RequisitionLine,RequisitionLine."Replenishment System"::"Prod. Order",RequisitionLine."Replenishment System"::Purchase,
        ProductionOrder."No.",ParentItem."Vendor No.");

      // Exercise : Make Order for changed Replenishment System on Requisition Line.
      MakeSupplyOrdersActiveLine(
        ProductionOrder."No.",RequisitionLine."No.",LocationBlue.Code,
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Verify : Verify That Quantity on Purchase Line remain same after change Replenishment System on Requisition Line.
      PurchaseLine.SETRANGE("Buy-from Vendor No.",ParentItem."Vendor No.");
      PurchaseLine.SETRANGE("No.",ChildItem."No.");
      PurchaseLine.FINDFIRST;
      Assert.AreEqual(
        RequisitionLine.Quantity,PurchaseLine.Quantity,
        STRSUBSTNO(ValidationError,RequisitionLine.FIELDCAPTION(Quantity),PurchaseLine.Quantity,RequisitionLine.TABLECAPTION));

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ChangeReplMakeOrderCalcPlan@68();
    VAR
      ParentItem@1002 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RequisitionLine@1006 : Record 246;
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Firm Planned Production Order
      // and run Order Planning Production, Change the Replenishment System and Make Order.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) +
        10,WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      ChangeReplenishmentSystem(
        RequisitionLine,RequisitionLine."Replenishment System"::"Prod. Order",RequisitionLine."Replenishment System"::Purchase,
        ProductionOrder."No.",ParentItem."Vendor No.");
      MakeSupplyOrdersActiveLine(
        ProductionOrder."No.",RequisitionLine."No.",LocationBlue.Code,
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Exercise.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify : Check That No Requisition Line created after Make Supply Order of changed Replenishment System.
      AssertNoLinesForItem(ProductionOrder."No.",ChildItem."No.",LocationBlue.Code,0);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ChangeReplMakeOrderCreateProd@64();
    VAR
      ParentItem@1002 : Record 27;
      ChildItem@1009 : Record 27;
      RequisitionLine@1007 : Record 246;
      PurchaseLine@1006 : Record 39;
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      ProductionOrder@1004 : Record 5405;
      ManufacturingUserTemplate@1000 : Record 5525;
      PurchaseOrderNo@1003 : Code[20];
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Firm Planned Production Order
      // and run Order Planning Production, Change the Replenishment System and Make Order.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) +
        10,WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      ChangeReplenishmentSystem(
        RequisitionLine,RequisitionLine."Replenishment System"::"Prod. Order",RequisitionLine."Replenishment System"::Purchase,
        ProductionOrder."No.",ParentItem."Vendor No.");
      MakeSupplyOrdersActiveLine(
        ProductionOrder."No.",RequisitionLine."No.",LocationBlue.Code,
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Exercise : Create Firm Planned Production Order and again Change Replenishment System and Make Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2),
        WORKDATE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      ChangeReplenishmentSystem(
        RequisitionLine,RequisitionLine."Replenishment System"::"Prod. Order",RequisitionLine."Replenishment System"::Purchase,
        ProductionOrder."No.",ParentItem."Vendor No.");
      PurchaseOrderNo := FindPurchaseOrderNo;
      MakeSupplyOrdersActiveLine(
        ProductionOrder."No.",RequisitionLine."No.",LocationBlue.Code,
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Verify: Verify That Quantity on Purchase Line remain same after Change Replenishment System on Requisition Line.
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseOrderNo);
      PurchaseLine.SETRANGE("Buy-from Vendor No.",ParentItem."Vendor No.");
      PurchaseLine.SETRANGE("No.",ChildItem."No.");
      PurchaseLine.SETRANGE("Location Code",LocationBlue.Code);
      PurchaseLine.FINDFIRST;
      Assert.AreEqual(
        RequisitionLine.Quantity,PurchaseLine.Quantity,
        STRSUBSTNO(ValidationError,RequisitionLine.FIELDCAPTION(Quantity),PurchaseLine.Quantity,RequisitionLine.TABLECAPTION));

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE PlanningProdOrdWithItemVariant@39();
    VAR
      ProductionOrder@1017 : Record 5405;
    BEGIN
      // Check That Replenishment System is same as it define in Stock Keeping Unit for various Transfer Location after calculating plan
      // for Planned Production Order.
      Initialize;
      CreateProdOrderWithItemVariant(ProductionOrder.Status::Planned,FALSE);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlanningProdOrdMakeOrder@66();
    VAR
      ProductionOrder@1017 : Record 5405;
    BEGIN
      // Check That item and quantity is same as define on Replenishment System in Purchase Order, Production Order and Transfer Order
      // for Planned Production Order.
      Initialize;
      CreateProdOrderWithItemVariant(ProductionOrder.Status::Planned,TRUE);
    END;

    [Test]
    PROCEDURE PlanningFirmProdOrdWithVariant@60();
    VAR
      ProductionOrder@1017 : Record 5405;
    BEGIN
      // Check That Replenishment System is same as it define in Stock Keeping Unit for various Transfer Location after calculating plan
      // for Firm Planned Production Order.
      Initialize;
      CreateProdOrderWithItemVariant(ProductionOrder.Status::"Firm Planned",FALSE);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlanningFirmProdOrdMakeOrder@58();
    VAR
      ProductionOrder@1017 : Record 5405;
    BEGIN
      // Check That item and quantity is same as define on Replenishment System in Purchase Order, Production Order and Transfer Order
      // for Firm Planned Production Order.
      Initialize;
      CreateProdOrderWithItemVariant(ProductionOrder.Status::"Firm Planned",TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderWithItemVariant@53(Status@1000 : Option;MakeOrder@1001 : Boolean);
    VAR
      ParentItem@1021 : Record 27;
      ItemVariant@1020 : Record 5401;
      ChildItem@1019 : Record 27;
      ProductionOrder@1009 : Record 5405;
      ProductionOrder2@1008 : Record 5405;
      ProductionOrder3@1007 : Record 5405;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // Setup: Create Location, Work Center, Routing , Item , Item Variant, Transfer Routes, Stock Keeping Unit.
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','','');
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");
      CreateAndUpdateSKU(ChildItem,LocationRed,LocationBlue,LocationBlue2);
      CreateItemWithProductionBOM(ParentItem,ChildItem,ItemVariant.Code,LibraryRandom.RandDec(10,2));
      CreateAndRefreshProdOrder(
        ProductionOrder,Status,ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder2,Status,ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10) + 10) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder3,Status,ParentItem."No.",LocationBlue2.Code,LibraryRandom.RandDec(10,2),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10) + 10) + 'D>',WORKDATE));

      // Exercise: Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Make Order and Verify .
      IF MakeOrder THEN BEGIN
        ClearRequisitionLines(ProductionOrder."No.",ProductionOrder2."No.",ProductionOrder3."No.");
        MakeSupplyOrdersAllLine(RequisitionLine,ProductionOrder."No.",ProductionOrder2."No.",ProductionOrder3."No.");

        // Verify.
        VerifyQtyWithRequiredQtySKU(ProductionOrder."No.",VerifyOnGlobal::Orders,Status);
        VerifyQtyWithRequiredQtySKU(ProductionOrder2."No.",VerifyOnGlobal::Orders,Status);
        VerifyQtyWithRequiredQtySKU(ProductionOrder3."No.",VerifyOnGlobal::Orders,Status);
      END ELSE BEGIN
        VerifyDemandQtyAndLocation(ProductionOrder."No.",DemandTypeGlobal::Production,Status);
        VerifyDemandQtyAndLocation(ProductionOrder2."No.",DemandTypeGlobal::Production,Status);
        VerifyDemandQtyAndLocation(ProductionOrder3."No.",DemandTypeGlobal::Production,Status);

        // Verify: Replenishment System With SKU and Item Variant.
        VerifyQtyWithRequiredQtySKU(ProductionOrder."No.",VerifyOnGlobal::RequisitionLine,Status);
        VerifyQtyWithRequiredQtySKU(ProductionOrder2."No.",VerifyOnGlobal::RequisitionLine,Status);
        VerifyQtyWithRequiredQtySKU(ProductionOrder3."No.",VerifyOnGlobal::RequisitionLine,Status);
      END;
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE OnePurchOfTwoSalesLineDiffDate@17();
    BEGIN
      // Check That One Purchase Order Created for Two Sales Line Item with different Shipment Date.
      OnePurchOfTwoSalesLineWithDate(
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 3) + 'D>',WORKDATE),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 20) + 'D>',WORKDATE));
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE OnePurchOfTwoSalesLineSameDate@46();
    BEGIN
      // Check That One Purchase Order Created for Two Sales Line Item with Same Shipment Date.
      OnePurchOfTwoSalesLineWithDate(WORKDATE,WORKDATE);
    END;

    LOCAL PROCEDURE OnePurchOfTwoSalesLineWithDate@15(ShipmentDate@1013 : Date;ShipmentDate2@1014 : Date);
    VAR
      SalesHeader@1000 : Record 36;
      Item@1002 : Record 27;
      Item2@1003 : Record 27;
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      PurchaseLine@1007 : Record 39;
      RequisitionLine@1006 : Record 246;
      LibrarySales@1001 : Codeunit 130509;
      PurchaseOrderNo@1004 : Code[20];
      Quantity@1009 : Decimal;
    BEGIN
      // Setup : Create Two Item, Locations and Sales Order With two line having Shipment Date.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','',Item."Vendor No.");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      Quantity := LibraryRandom.RandDec(10,2);
      CreateSalesLine(SalesHeader,Item."No.",'',ShipmentDate,Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item2."No.",'',ShipmentDate2,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      PurchaseOrderNo := FindPurchaseOrderNo;

      // Exercise: Run Make Supply Order.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify: Check that Expected Receipt Date is equal Shipment Date and Purchase Quantity is equal to Quantity.
      FindPurchaseLine(PurchaseLine,PurchaseOrderNo);
      VerifyPurchaseLine(PurchaseLine,Item."No.",Quantity,ShipmentDate);
      PurchaseLine.NEXT;
      VerifyPurchaseLine(PurchaseLine,Item2."No.",Quantity,ShipmentDate2);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE GenerateRequisitionLine@8();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1010 : Record 27;
      Item2@1009 : Record 27;
      Item3@1013 : Record 27;
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      RequisitionLine@1015 : Record 246;
      RequisitionWkshName@1000 : Record 245;
      LibrarySales@1004 : Codeunit 130509;
      Quantity@1003 : Decimal;
      ShipmentDate@1016 : Date;
      ShipmentDate2@1017 : Date;
      ShipmentDate3@1018 : Date;
    BEGIN
      // Setup : Create Two Item, Locations and Multiple Sales Order for multiple Location on Line.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','',Item."Vendor No.");
      CreateItem(Item3,Item."Replenishment System"::"Prod. Order",'','',Item."Vendor No.");

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      Quantity := LibraryRandom.RandDec(10,2);
      ShipmentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      CreateSalesLine(SalesHeader,Item."No.",LocationRed.Code,ShipmentDate,Quantity,Quantity);
      ShipmentDate2 := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10) ) + 'D>',ShipmentDate);
      CreateSalesLine(SalesHeader,Item2."No.",LocationBlue.Code,ShipmentDate2,Quantity,Quantity);
      ShipmentDate3 := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',ShipmentDate2);
      CreateSalesLine(SalesHeader,Item3."No.",LocationBlue2.Code,ShipmentDate3,Quantity,Quantity);

      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Make supply order by changing option.
      MakeOrderWithChangeOption(SalesHeader."No.",RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);

      // Verify: Check That Requisition Worksheet is created after change option in make supply order request page.
      FilterRequisitionWorksheetLine(RequisitionLine,RequisitionWkshName);
      VerifyRequisitionWorksheet(RequisitionLine,Item."No.",ShipmentDate,LocationRed.Code,Quantity);
      VerifyRequisitionWorksheet(RequisitionLine,Item2."No.",ShipmentDate2,LocationBlue.Code,Quantity);
      VerifyRequisitionWorksheet(RequisitionLine,Item3."No.",ShipmentDate3,LocationBlue2.Code,Quantity);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DifferentProdOrderWithDueDate@6();
    VAR
      ParentItem@1010 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder2@1003 : Record 5405;
      ProductionOrder3@1002 : Record 5405;
      ProductionOrder4@1011 : Record 5405;
      RequisitionLine@1001 : Record 246;
      DueDate@1009 : Date;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create different Production Order with different Due Date.
      CreateManufacturingSetup(ParentItem,ChildItem,LibraryRandom.RandDec(10,2),FALSE);

      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Simulated,ParentItem."No.",'',LibraryRandom.RandDec(10,2),DueDate);
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',DueDate);
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::Planned,ParentItem."No.",'',LibraryRandom.RandDec(10,2),DueDate);
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',DueDate);
      CreateAndRefreshProdOrder(
        ProductionOrder3,ProductionOrder3.Status::"Firm Planned",ParentItem."No.",'',LibraryRandom.RandDec(10,2),DueDate);
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',DueDate);
      CreateAndRefreshProdOrder(
        ProductionOrder4,ProductionOrder4.Status::Released,ParentItem."No.",'',LibraryRandom.RandDec(10,2),DueDate);

      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder4."No.");

      // Exercise: Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify: Verify total line create for each Production Order after calculate Plan.
      AssertNoLinesForItem(ProductionOrder."No.",ChildItem."No.",'',0);  // Simulated Production Order.
      AssertNoLinesForItem(ProductionOrder2."No.",ChildItem."No.",'',1);  // Planned Production Order.
      AssertNoLinesForItem(ProductionOrder3."No.",ChildItem."No.",'',1);  // Firm Planned Production Order.
      AssertNoLinesForItem(ProductionOrder4."No.",ChildItem."No.",'',0);  // Finished Production order.
    END;

    [Test]
    PROCEDURE SeveralUnitOfMeasure@48();
    VAR
      Item@1011 : Record 27;
      RequisitionLine@1001 : Record 246;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      SalesHeader@1014 : Record 36;
      QuantityToShip@1003 : Decimal;
    BEGIN
      // Setup: Create Unit Of Measure, Item , Item Unit Of Measure and Sale Order.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItemWithPurchUnitOfMeasure(Item);

      QuantityToShip := LibraryRandom.RandDec(10,2);
      CreateSalesOrder(SalesHeader,Item."No.",'',QuantityToShip + LibraryRandom.RandDec(10,2),QuantityToShip);

      // Exercise: Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Check That Unit of measure is same as on Item Purchase Unit Of measure and Demand Unit of Measure is same as Item Base
      // Unit Of Measure.
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",'');
      Assert.AreEqual(
        Item."Purch. Unit of Measure",RequisitionLine."Unit of Measure Code",
        STRSUBSTNO(
          ValidationError,Item.FIELDCAPTION("Purch. Unit of Measure"),Item."Purch. Unit of Measure",
          RequisitionLine.FIELDCAPTION("Unit Of Measure Code (Demand)")));
      Assert.AreEqual(
        Item."Base Unit of Measure",RequisitionLine."Unit Of Measure Code (Demand)",
        STRSUBSTNO(
          ValidationError,Item.FIELDCAPTION("Purch. Unit of Measure"),Item."Base Unit of Measure",
          RequisitionLine.FIELDCAPTION("Unit of Measure Code")));

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE CreateRequisitionLineWithPurchUnitOfMeasure@9();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Verify Purch. Unit of Measure of Item will be filled on Req. Line when the Req. Line is manually inserted.

      // Setup: Create Item, create a new Item Unit of Measure, set Purch. Unit of Measure to the new Unit of Measure code.
      CreateItemWithPurchUnitOfMeasure(Item);

      // Exercise: Create a Requisition Line, fill the Item No.
      CreateRequisitionLine(RequisitionLine,Item."No.");

      // Verify.
      Assert.AreEqual(Item."Purch. Unit of Measure",RequisitionLine."Unit of Measure Code",UnitOfMeasureErr);
    END;

    [Test]
    PROCEDURE CostIsAdjustedIsSetToTrueAfterDeletingItem@14();
    VAR
      Item@1001 : Record 27;
      InvtAdjmtEntryOrder@1000 : Record 5896;
    BEGIN
      // [FEATURE] [UT] [Cost Adjustment] [Production]
      // [SCENARIO 361637] "Cost Is Adjusted" set to TRUE in Inventory Adjmt. Entry (Order) while Deleting Item

      // [GIVEN] Inventory Adjmt. Entry (Order) with Cost Is Adjusted "FALSE"
      LibraryInventory.CreateItem(Item);
      CreateInvtAdjmtEntryOrder(InvtAdjmtEntryOrder,Item."No.");

      // [WHEN] Delete Item
      Item.DELETE(TRUE);

      // [THEN] "Cost Is Adjusted" in Inventory Adjmt. Entry (Order) is TRUE
      InvtAdjmtEntryOrder.FIND;
      Assert.IsTrue(InvtAdjmtEntryOrder."Cost is Adjusted",CostIsAdjustedErr);
    END;

    [Test]
    PROCEDURE OverheadRateAndIndirCostOnSetProdOrderLine@25();
    VAR
      Item@1001 : Record 27;
      ProdOrderLine@1002 : Record 5406;
      InvtAdjmtEntryOrder@1000 : Record 5896;
    BEGIN
      // [FEATURE] [UT] [Cost Adjustment] [Production]
      // [SCENARIO 375357] "Overhead rate" and "Indirect Cost %" of "Inventory Adjmt. Entry (Order)" table are taken from Prod. Order Line by SetProdOrderLine

      // [GIVEN] Item with "Indirect Cost %" = "X1", "Overhead Rate" = "X2"
      MockItem(Item);

      // [GIVEN] Prod. Order Line for Item with "Indirect Cost %" = "Y1", "Overhead Rate" = "Y2"
      MockProdOrderLine(ProdOrderLine,Item."No.");

      // [GIVEN] Inventory Adjmt. Entry (Order) for Item
      CreateInvtAdjmtEntryOrder(InvtAdjmtEntryOrder,Item."No.");

      // [WHEN] Run SetProdOrderLine on Inventory Adjmt. Entry (Order)
      InvtAdjmtEntryOrder.SetProdOrderLine(ProdOrderLine);

      // [THEN] Inventory Adjmt. Entry (Order) has "Indirect Cost %" = "Y1", "Overhead Rate" = "Y2"
      InvtAdjmtEntryOrder.TESTFIELD("Indirect Cost %",ProdOrderLine."Indirect Cost %");
      InvtAdjmtEntryOrder.TESTFIELD("Overhead Rate",ProdOrderLine."Overhead Rate");
    END;

    LOCAL PROCEDURE Initialize@18();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobals;

      IF IsInitialized THEN
        EXIT;

      CreateLocationSetup;
      NoSeriesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobals@159();
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      CLEAR(VerifyOnGlobal);
      CLEAR(DemandTypeGlobal);
      RequisitionLine.DELETEALL;
      ClearManufacturingUserTemplate;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeReplenishmentSystem@74(VAR RequisitionLine@1004 : Record 246;OldReplenishmentSystem@1005 : Option;NewReplenishmentSystem@1002 : Option;DemandOrderNo@1000 : Code[20];VendorNo@1003 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("Replenishment System",OldReplenishmentSystem);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Replenishment System",NewReplenishmentSystem);
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeManufUserTemplate@57(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;ReqWkshTemplateName@1002 : Code[10];RequisitionWkshName@1003 : Code[10]);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Copy to Req. Wksh",
          ManufacturingUserTemplate."Create Production Order"::"Copy to Req. Wksh",
          ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders" );

      ManufacturingUserTemplate.VALIDATE("Purchase Req. Wksh. Template",ReqWkshTemplateName);
      ManufacturingUserTemplate.VALIDATE("Purchase Wksh. Name",RequisitionWkshName);
      ManufacturingUserTemplate.VALIDATE("Prod. Req. Wksh. Template",ReqWkshTemplateName);
      ManufacturingUserTemplate.VALIDATE("Prod. Wksh. Name",RequisitionWkshName);
      ManufacturingUserTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearRequisitionLines@78(OrderNo@1000 : Code[20];OrderNo2@1001 : Code[20];OrderNo3@1002 : Code[20]);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETFILTER("Demand Order No.",'<>%1&<>%2&<>%3',OrderNo,OrderNo2,OrderNo3);
      RequisitionLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingSetup@127(VAR Item@1000 : Record 27;VAR ChildItem@1008 : Record 27;BOMQuantity@1001 : Decimal;ChildWithBOM@1005 : Boolean);
    VAR
      ChildItem2@1007 : Record 27;
    BEGIN
      IF ChildWithBOM THEN
        CreateProdItem(ChildItem,ChildItem2) // Create Child Item with its own Production BOM hierarchy.
      ELSE
        CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','','');
      UpdateItem(ChildItem,ChildItem.Reserve::Optional);  // Child Item with Order Tracking - None.
      CreateItemWithProductionBOM(Item,ChildItem,'',BOMQuantity);
    END;

    LOCAL PROCEDURE CreateProdItem@5(VAR ParentItem@1001 : Record 27;VAR ChildItem@1008 : Record 27);
    BEGIN
      // Create Child Item.
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','','');

      // Create Parent Item.
      CreateItemWithProductionBOM(ParentItem,ChildItem,'',LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@237(VAR Item@1002 : Record 27;ChildItem@1003 : Record 27;VariantCode@1004 : Code[10];QuantityPer@1005 : Decimal);
    VAR
      RoutingHeader@1001 : Record 99000763;
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Production BOM and Routing.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem,VariantCode,QuantityPer);
      CreateRoutingSetup(RoutingHeader);

      // Create Parent Item.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",RoutingHeader."No.",ProductionBOMHeader."No.",'');
    END;

    LOCAL PROCEDURE CreateItem@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;RoutingHeaderNo@1006 : Code[20];ProductionBOMNo@1007 : Code[20];VendorNo@1002 : Code[20]);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      LibraryInventory.CreateItem(Item);
      GeneralLedgerSetup.GET;
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(20,2));
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Rounding Precision",GeneralLedgerSetup."Amount Rounding Precision");
      IF VendorNo = '' THEN
        VendorNo := LibraryPurchase.CreateVendorNo;
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.VALIDATE("Routing No.",RoutingHeaderNo);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockItem@103(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        "No." := LibraryUtility.GenerateGUID;
        "Indirect Cost %" := LibraryRandom.RandDec(10,2);
        "Overhead Rate" := LibraryRandom.RandDec(10,2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockProdOrderLine@113(VAR ProdOrderLine@1000 : Record 5406;ItemNo@1001 : Code[20]);
    BEGIN
      WITH ProdOrderLine DO BEGIN
        "Prod. Order No." := LibraryUtility.GenerateGUID;
        "Item No." := ItemNo;
        "Indirect Cost %" := LibraryRandom.RandDec(10,2);
        "Overhead Rate" := LibraryRandom.RandDec(10,2);
        INSERT;
      END ;
    END;

    LOCAL PROCEDURE UpdateItem@236(VAR Item@1000 : Record 27;Reserve@1001 : Option);
    BEGIN
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE(Reserve,Reserve);
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::None);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@202(VAR ProductionBOMHeader@1002 : Record 99000771;Item@1001 : Record 27;VariantCode@1000 : Code[10];QuantityPer@1005 : Decimal);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      // Create component lines in the BOM
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",QuantityPer);
      ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
      ProductionBOMLine.MODIFY(TRUE);

      // Certify BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::"Under Development");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@173(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@141(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@172(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
      MachineCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@73(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE ClearManufacturingUserTemplate@65();
    VAR
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      ManufacturingUserTemplate.SETRANGE("User ID",USERID);
      IF ManufacturingUserTemplate.FINDFIRST THEN
        ManufacturingUserTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostConsumWithQty@36(ProductionOrderNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournal(ItemJournalBatch,'',ItemJournalBatch."Template Type"::Consumption,ProductionOrderNo);
      UpdateQuantityOnConsmpJournal(ProductionOrderNo,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@55(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal;DueDate@1003 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@21(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,Quantity,LibraryRandom.RandDec(100,2));
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdateSKU@67(Item@1000 : Record 27;LocationBlue@1006 : Record 14;LocationRed@1005 : Record 14;LocationOrange@1004 : Record 14);
    VAR
      StockkeepingUnit@1002 : Record 5700;
      SKUCreationMethod@1001 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",Item."No.");
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::"Location & Variant",FALSE,FALSE);
      UpdatePurchReplenishmentOnSKU(
        StockkeepingUnit,Item,LocationOrange,StockkeepingUnit."Replenishment System"::Purchase,Item."Vendor No.");
      UpdatePurchReplenishmentOnSKU(StockkeepingUnit,Item,LocationRed,StockkeepingUnit."Replenishment System"::"Prod. Order",'');
      UpdateTransReplenishmentOnSKU(
        StockkeepingUnit,Item,LocationBlue,StockkeepingUnit."Replenishment System"::Transfer,LocationRed.Code);
    END;

    LOCAL PROCEDURE CreateLocationSetup@61();
    BEGIN
      CreateLocation(LocationRed,FALSE);
      CreateLocation(LocationBlue,FALSE);
      CreateLocation(LocationBlue2,FALSE);
      CreateLocation(LocationIntransit,TRUE);
      CreateTransferRoutesSetup(LocationRed,LocationBlue,LocationBlue2,LocationIntransit);
    END;

    LOCAL PROCEDURE CreateMultipleSalesOrder@88(VAR SalesHeader@1000 : Record 36;VAR SalesHeader2@1001 : Record 36;VAR SalesHeader3@1002 : Record 36;LocationCode@1003 : Code[10];LocationCode2@1004 : Code[10];ItemNo@1007 : Code[20];ItemNo2@1008 : Code[20]);
    VAR
      Quantity@1006 : Decimal;
      QuantityToShip@1005 : Decimal;
    BEGIN
      // Random values used are not important for test.
      Quantity := LibraryRandom.RandDec(100,2) + 10;
      QuantityToShip := LibraryRandom.RandDec(10,2);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,WORKDATE,Quantity,QuantityToShip);
      CreateSalesLine(SalesHeader,ItemNo2,LocationCode,WORKDATE,Quantity,QuantityToShip);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode2,WORKDATE,Quantity,QuantityToShip);

      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Order,SalesHeader."Sell-to Customer No.");
      CreateSalesLine(SalesHeader2,ItemNo,LocationCode,WORKDATE,Quantity,QuantityToShip);

      LibrarySales.CreateSalesHeader(SalesHeader3,SalesHeader3."Document Type"::Order,SalesHeader."Sell-to Customer No.");
      CreateSalesLine(SalesHeader3,ItemNo2,LocationCode2,WORKDATE,Quantity,QuantityToShip);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1001 : Decimal;DirectUnitCost@1002 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Order with One Item Line.Random values used are not important for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Qty. to Receive",Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderForItem@87(VAR ProductionOrder@1007 : Record 5405;VAR ParentItem@1006 : Record 27;Qty@1008 : Decimal);
    VAR
      ChildItem@1004 : Record 27;
    BEGIN
      CreateManufacturingSetup(ParentItem,ChildItem,Qty,FALSE);
      UpdateItemInventory(Qty,ChildItem."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",'',LibraryRandom.RandDec(5,2),WORKDATE);
    END;

    LOCAL PROCEDURE CreateSalesLine@1(SalesHeader@1000 : Record 36;ItemNo@1005 : Code[20];LocationCode@1001 : Code[10];ShipmentDate@1007 : Date;Quantity@1002 : Decimal;QuantityToShip@1006 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QuantityToShip);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1003 : Decimal;QtyToShip@1002 : Decimal);
    BEGIN
      // Random values used are not important for test.
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,WORKDATE,Quantity,QtyToShip);
    END;

    LOCAL PROCEDURE CreateLocation@34(VAR Location@1000 : Record 14;UseAsInTransit@1001 : Boolean);
    BEGIN
      CLEAR(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      IF UseAsInTransit THEN BEGIN
        Location.VALIDATE("Use As In-Transit",TRUE);
        Location.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTransferRoutesSetup@86(LocationRed@1001 : Record 14;LocationBlue@1002 : Record 14;LocationOrange@1000 : Record 14;TransitLocation@1003 : Record 14);
    BEGIN
      CreateTransferRoute(LocationRed.Code,LocationBlue.Code,TransitLocation.Code);
      CreateTransferRoute(LocationBlue.Code,LocationRed.Code,TransitLocation.Code);
      CreateTransferRoute(LocationBlue.Code,LocationOrange.Code,TransitLocation.Code);
      CreateTransferRoute(LocationOrange.Code,LocationRed.Code,TransitLocation.Code);
      CreateTransferRoute(LocationOrange.Code,LocationBlue.Code,TransitLocation.Code);
    END;

    LOCAL PROCEDURE CreateTransferRoute@49(LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10];TransitLocationCode@1003 : Code[10]);
    VAR
      TransferRoute@1000 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode,LocationCode2);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocationCode);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@40(VAR RequisitionWkshName@1002 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemWithPurchUnitOfMeasure@10(VAR Item@1000 : Record 27);
    VAR
      UnitOfMeasure@1001 : Record 204;
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','','');
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);
      Item.VALIDATE("Purch. Unit of Measure",UnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionLine@33(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    VAR
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",No);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@155(ProductionOrderNo@1002 : Code[20];ItemNo@1007 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalTemplate@1006 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate,ItemJournalBatch,ItemNo,ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateInvtAdjmtEntryOrder@42(VAR InvtAdjmtEntryOrder@1001 : Record 5896;ItemNo@1002 : Code[20]);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(InvtAdjmtEntryOrder);
      WITH InvtAdjmtEntryOrder DO BEGIN
        "Order Type" := "Order Type"::Production;
        "Order No." := LibraryUtility.GenerateGUID;
        "Order Line No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Order Line No."));
        "Item No." := ItemNo;
        "Cost is Adjusted" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CalculateExpectedQuantity@99(DocumentType@1000 : Option;OutStandingQuantity@1001 : Decimal) : Decimal;
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF DocumentType = SalesHeader."Document Type"::"Return Order" THEN
        OutStandingQuantity := -OutStandingQuantity;

      EXIT(OutStandingQuantity);
    END;

    LOCAL PROCEDURE SetRoutingOnProdOrderLine@45(ProdOrdeNo@1000 : Code[20];NewRoutingNo@1002 : Code[20]) OldRoutingNo : Code[20];
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETRANGE(Status,Status::Released);
        SETRANGE("Prod. Order No.",ProdOrdeNo);
        FINDFIRST;
        OldRoutingNo := "Routing No.";
        VALIDATE("Routing No.",NewRoutingNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindLastOperationNo@171(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindRequisitionLine@24(VAR RequisitionLine@1000 : Record 246;DemandOrderNo@1002 : Code[20];No@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrderNo@35() : Code[20];
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      PurchasesPayablesSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(PurchasesPayablesSetup."Order Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindPurchaseLine@109(VAR PurchaseLine@1001 : Record 39;DocumentNo@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterRequisitionWorksheetLine@118(VAR RequisitionLine@1000 : Record 246;RequisitionWkshName@1001 : Record 245);
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@3(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreateProductionOrder@1002 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
          CreateProductionOrder,ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@29(DemandOrderNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersAllLine@63(VAR RequisitionLine@1000 : Record 246;OrderNo@1001 : Code[20];OrderNo2@1003 : Code[20];OrderNo3@1004 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
    BEGIN
      RequisitionLine.SETFILTER("Demand Order No.",'%1|%2|%3',OrderNo,OrderNo2,OrderNo3);
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"All Lines",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveLine@37(DemandOrderNo@1000 : Code[20];ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];CreateProductionOrder@1001 : Option);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Line",CreateProductionOrder);
    END;

    LOCAL PROCEDURE MakeSupplyOrders@79(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;CreateProductionOrder@1002 : Option);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,CreateProductionOrder);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE MakeOrderWithChangeOption@43(DemandOrderNo@1000 : Code[20];ReqWkshTemplateName@1004 : Code[10];RequisitionWkshName@1001 : Code[10]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      ChangeManufUserTemplate(
        ManufacturingUserTemplate,ManufacturingUserTemplate."Make Orders"::"The Active Order",ReqWkshTemplateName,RequisitionWkshName);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(VAR SalesReceivablesSetup2@1001 : Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup2 := SalesReceivablesSetup;
      SalesReceivablesSetup2.INSERT;

      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@102(Quantity@1005 : Decimal;ItemNo@1004 : Code[20]);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
      ItemJournalTemplateType@1002 : 'Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order';
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateQuantityOnConsmpJournal@30(ProductionOrderNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrderNo);
      ItemJournalLine.FINDSET;
      REPEAT
        ItemJournalLine.VALIDATE(Quantity,Quantity);
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateTransReplenishmentOnSKU@69(VAR StockkeepingUnit@1004 : Record 5700;Item@1000 : Record 27;Location@1001 : Record 14;ReplenishmentSystem@1003 : Option;TransferFromCode@1005 : Code[10]);
    BEGIN
      // Update Replenishment System on Stock Keeping Unit.
      StockkeepingUnit.SETRANGE("Item No.",Item."No.");
      StockkeepingUnit.SETRANGE("Location Code",Location.Code);
      StockkeepingUnit.FINDFIRST;
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchReplenishmentOnSKU@32(VAR StockkeepingUnit@1004 : Record 5700;Item@1000 : Record 27;Location@1001 : Record 14;ReplenishmentSystem@1003 : Option;VendorNo@1005 : Code[20]);
    BEGIN
      // Update Replenishment System on Stock Keeping Unit.
      StockkeepingUnit.SETRANGE("Item No.",Item."No.");
      StockkeepingUnit.SETRANGE("Location Code",Location.Code);
      StockkeepingUnit.FINDFIRST;
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Vendor No.",VendorNo);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssertNoLinesForItem@83(DemandOrderNo@1000 : Code[20];No@1001 : Code[20];LocationCode@1002 : Code[10];NoOfLines@1004 : Integer);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      IF LocationCode <> '' THEN
        RequisitionLine.SETRANGE("Location Code",LocationCode);
      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,STRSUBSTNO(LineCountError,No));
    END;

    LOCAL PROCEDURE VerifyDemandQtyAndLocation@54(DemandOrderNo@1000 : Code[20];DemandType@1003 : Option;Status@1007 : Option);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
      RequisitionLine@1002 : Record 246;
      ProdOrderComponent@1004 : Record 5407;
      ExpectedOutstandingQuantity@1006 : Decimal;
    BEGIN
      CASE DemandType OF
        DemandTypeGlobal::Sales:
          BEGIN
            SalesLine.SETRANGE("Document No.",DemandOrderNo);
            SalesLine.FINDSET;
            REPEAT
              SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
              FindRequisitionLine(RequisitionLine,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code");
              RequisitionLine.SETRANGE("Location Code",SalesLine."Location Code");
              RequisitionLine.FINDFIRST;
              ExpectedOutstandingQuantity := CalculateExpectedQuantity(SalesHeader."Document Type",SalesLine."Outstanding Quantity");
              RequisitionLine.TESTFIELD("Demand Quantity",ExpectedOutstandingQuantity);
              RequisitionLine.TESTFIELD(Status,SalesHeader.Status);
              RequisitionLine.TESTFIELD("Location Code",SalesLine."Location Code");
              RequisitionLine.TESTFIELD("Due Date",SalesLine."Shipment Date");
            UNTIL SalesLine.NEXT = 0;
          END;
        DemandTypeGlobal::Production:
          BEGIN
            ProdOrderComponent.SETRANGE("Prod. Order No.",DemandOrderNo);
            ProdOrderComponent.SETRANGE(Status,Status);
            ProdOrderComponent.FINDSET;
            REPEAT
              FindRequisitionLine(
                RequisitionLine,ProdOrderComponent."Prod. Order No.",ProdOrderComponent."Item No.",ProdOrderComponent."Location Code");
              RequisitionLine.TESTFIELD("Demand Quantity",ProdOrderComponent."Remaining Quantity");
              RequisitionLine.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
              RequisitionLine.TESTFIELD("Due Date",ProdOrderComponent."Due Date");
            UNTIL ProdOrderComponent.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseQtyAgainstProd@23(ProductionOrder@1004 : Record 5405);
    VAR
      PurchaseLine@1000 : Record 39;
      ProdOrderComponent@1003 : Record 5407;
      Item@1001 : Record 27;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.FINDSET;
      CLEAR(ProductionOrder);
      REPEAT
        Item.GET(ProdOrderComponent."Item No.");
        CASE Item."Replenishment System" OF
          Item."Replenishment System"::Purchase:
            BEGIN
              PurchaseLine.SETRANGE("No.",ProdOrderComponent."Item No.");
              PurchaseLine.FINDFIRST;
              PurchaseLine.TESTFIELD("Buy-from Vendor No.",Item."Vendor No.");
              PurchaseLine.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
              PurchaseLine.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
            END;
          Item."Replenishment System"::"Prod. Order":
            BEGIN
              ProductionOrder.SETRANGE("Source No.",Item."No.");
              ProductionOrder.FINDFIRST;
              ProductionOrder.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
              ProductionOrder.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
            END;
        END;
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@51(PurchaseLine@1000 : Record 39;No@1001 : Code[20];Quantity@1002 : Decimal;ExpectedReceiptDate@1003 : Date);
    BEGIN
      PurchaseLine.TESTFIELD("No.",No);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
      PurchaseLine.TESTFIELD("Expected Receipt Date",ExpectedReceiptDate);
    END;

    LOCAL PROCEDURE VerifyDemandQtyWithPurchQty@12(SalesOrderNo@1001 : Code[20];ItemNo@1004 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
      PurchaseLine@1003 : Record 39;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesOrderNo);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.SETRANGE("Location Code",LocationCode);
      SalesLine.FINDFIRST;

      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.SETRANGE("Location Code",LocationCode);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Quantity,SalesLine."Outstanding Quantity");
    END;

    LOCAL PROCEDURE VerifyQtyWithRequiredQtySKU@70(ProductionOrderNo@1004 : Code[20];VerifyOn@1001 : Option;Status@1008 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
      ProdOrderComponent@1003 : Record 5407;
      ProductionOrder@1002 : Record 5405;
      StockkeepingUnit@1006 : Record 5700;
      TransferLine@1007 : Record 5741;
      RequisitionLine@1005 : Record 246;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.FINDSET;
      REPEAT
        StockkeepingUnit.SETRANGE("Location Code",ProdOrderComponent."Location Code");
        StockkeepingUnit.SETRANGE("Item No.",ProdOrderComponent."Item No.");
        StockkeepingUnit.SETRANGE("Variant Code",ProdOrderComponent."Variant Code");
        StockkeepingUnit.FINDFIRST;
        CASE StockkeepingUnit."Replenishment System" OF
          StockkeepingUnit."Replenishment System"::Purchase:
            CASE VerifyOn OF
              VerifyOnGlobal::Orders:
                BEGIN
                  PurchaseLine.SETRANGE("No.",ProdOrderComponent."Item No.");
                  PurchaseLine.FINDFIRST;
                  PurchaseLine.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
                  PurchaseLine.TESTFIELD("Expected Receipt Date",ProdOrderComponent."Due Date");
                END;
              VerifyOnGlobal::RequisitionLine:
                BEGIN
                  FindRequisitionLine(
                    RequisitionLine,ProdOrderComponent."Prod. Order No.",ProdOrderComponent."Item No.",
                    ProdOrderComponent."Location Code");
                  RequisitionLine.TESTFIELD("Replenishment System",StockkeepingUnit."Replenishment System");
                  RequisitionLine.TESTFIELD("Supply From",StockkeepingUnit."Vendor No.");
                  RequisitionLine.TESTFIELD("Due Date",ProdOrderComponent."Due Date");
                END;
            END;
          StockkeepingUnit."Replenishment System"::"Prod. Order":
            CASE VerifyOn OF
              VerifyOnGlobal::Orders:
                BEGIN
                  ProductionOrder.SETRANGE("Source No.",ProdOrderComponent."Item No.");
                  ProductionOrder.FINDFIRST;
                  ProductionOrder.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
                END;
              VerifyOnGlobal::RequisitionLine:
                BEGIN
                  FindRequisitionLine(
                    RequisitionLine,ProdOrderComponent."Prod. Order No.",ProdOrderComponent."Item No.",
                    ProdOrderComponent."Location Code");
                  RequisitionLine.TESTFIELD("Replenishment System",StockkeepingUnit."Replenishment System");
                  RequisitionLine.TESTFIELD("Due Date",ProdOrderComponent."Due Date");
                END;
            END;
          StockkeepingUnit."Replenishment System"::Transfer:
            CASE VerifyOn OF
              VerifyOnGlobal::Orders:
                BEGIN
                  TransferLine.SETRANGE("Item No.",ProdOrderComponent."Item No.");
                  TransferLine.FINDFIRST;
                  TransferLine.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
                END;
              VerifyOnGlobal::RequisitionLine:
                BEGIN
                  FindRequisitionLine(
                    RequisitionLine,ProdOrderComponent."Prod. Order No.",ProdOrderComponent."Item No.",
                    ProdOrderComponent."Location Code");
                  RequisitionLine.TESTFIELD("Replenishment System",StockkeepingUnit."Replenishment System");
                  RequisitionLine.TESTFIELD("Supply From",StockkeepingUnit."Transfer-from Code");
                  RequisitionLine.TESTFIELD("Due Date",ProdOrderComponent."Due Date");
                END;
            END;
        END;
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRequisitionWorksheet@38(VAR RequisitionLine@1000 : Record 246;No@1002 : Code[20];ShipmentDate@1003 : Date;LocationCode@1004 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      RequisitionLine.TESTFIELD("Due Date",ShipmentDate);
    END;

    LOCAL PROCEDURE RestoreSalesReceivableSetup@47(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@7(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@71(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.AreNotEqual(0,STRPOS(ConfirmMessage,FinishOrderMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test Order Planning:
       1.  Verify Quantity on Requisition Line same as Remaining Quantity on Production BOM Component Line after Consumption
           of all inventory of Child item quantity.
       2.  Verify Quantity on Purchase Order is same as Required quantity in Production BOM Component Line after Consumption
           of all inventory of Child item quantity.
       3.  Verify No Requisition Line Create if Consumption for required quantity is posted.
       4.  Verify Quantity on Purchase Order and Vendor No. is same as define in Production BOM and child item.
       5.  Verify Requisition Line has same quantity as on outstanding on sales Order.
       6.  Verify Quantity on Purchase Order is same as remaining demand quantity on Sales Order.
       7.  Verify No Requisition Line has Created for Sales Order after posting total demand quantity.
       8. Verify Quantity On Requisition Line has same as quantity as demand by multiple sales Order.
       9. Verify Quantity on Purchase Order and Vendor No. is same as define in item of multiple sales order after Make Supply Order
           by Active Line.
       10. Verify No Requisition Line has Created for Multiple Sales Order after Making Supply Order .
       11. Verify Quantity on Purchase Order and Vendor No. is same as define in item of multiple sales order after Make Supply Order
           by All Line.
       12. Verify the Replenishment System of Production Order remain same after calculating Planning for Sales.
       13. Verify the Purchase Order created with same quantity after change Replenishment System on Requisition Line and
           Make Supply Order.
       14. Verify Replenishment System is same as on item after change Replenishment System and Make supply order for same Item.
       15. Verify Replenishment System is same as it defined in Stock Keeping Unit for various Transfer Location after
           calculating plan for Plan Production Order.
       16. Verify item and quantity is same as define on Replenishment System in Purchase Order, Production Order and Transfer Order
           for Plan Production Order.
       17. Verify Replenishment System is same as it define in Stock Keeping Unit for various Transfer Location after
           calculating plan for Firm Production Order.
       18. Verify item and quantity is same as define on Replenishment System in Purchase Order, Production Order and
           Transfer Order for Firm Production Order.
       19. Verify that One Purchase Order Created for Two Sales Line Item with different Shipment Date.
       20. Verify that One Purchase Order Created for Two Sales Line Item with same Shipment Date.
       21. Verify that Requisition Worksheet is created after change option in make supply order request page.
       22. Verify total line create for Various Production Order after calculate Plan.
       23. Verify that Unit of measure is same as on Item Purchase Unit Of measure and Demand Unit of Measure is same as Item Base
           Unit Of Measure.
       24. Verify Purch. Unit of Measure of Item will be filled on Req. Line when the Req. Line is manually inserted.

        Covers Test Cases for WI - 242305,242306,242307
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
         ProdWithLessConsumption                         121687
         ProdLessConsmpMakeSupplyOrder                   121687
         ProdEqualsConsumption                           121687
         PlanningForProdMakeSupplyOrder                  121687
         PlanningForSalesOrder                           120963
         PlanningForSaleMakeSupplyOrder                  120963
         PlanningPurchaseEqualsSales                     120963
         MultipleSalesMakeOrderActLine                   120961
         MultipleSalesMakeOrderCalcPlan                  120961
         MultipleSalesMakeOrderAllLine                   120961
         ChangeReplenishmentCalcPlan                     121686
         ChangeReplenishmentMakeOrder                    121686
         ChangeReplMakeOrderCalcPlan                     121686
         ChangeReplMakeOrderCreateProd                   121686
         PlanningProdOrdWithItemVariant                  121684,120967
         PlanningProdOrdMakeOrder                        121684,120967
         PlanningFirmProdOrdWithVariant                  121685,120967
         PlanningFirmProdOrdMakeOrder                    121685,120967

        Covers Test Cases for WI - 242304
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        OnePurchOfTwoSalesLineDiffDate                   121679,129159
        OnePurchOfTwoSalesLineSameDate                   121679,129159
        GenerateRequisitionLine                          121681129154
        DifferentProdOrderWithDueDate                    121682
        SeveralUnitOfMeasure                             121683

        Covers Test Cases for Crete Merge Bug
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        CreateRequisitionLineWithPurchUnitOfMeasure      88545
    }
    END.
  }
}

