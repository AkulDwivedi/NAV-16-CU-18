OBJECT Codeunit 134906 ERM Finance Charge Memo Text
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryERM@1003 : Codeunit 131300;
      LibrarySales@1002 : Codeunit 130509;
      LibraryUtility@1013 : Codeunit 131000;
      LibraryFinanceChargeMemo@1004 : Codeunit 131350;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      BeginningTextNew@1011 : TextConst 'ENU=Posting Date must be %1.';
      EndingTextNew@1010 : TextConst 'ENU=Please pay the total of %1.';
      PrecisionText@1009 : TextConst 'ENU=<Precision,%1><Standard format,0>';
      DescriptionError@1012 : TextConst 'ENU=Wrong Description updated in Finance Charge Memo Line.';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE FinanceChargeMemoDescription@5();
    VAR
      Customer@1004 : Record 18;
      FinanceChargeMemoHeader@1012 : Record 302;
      FinanceChargeMemoLine@1006 : Record 303;
      FinanceChargeTerms@1000 : Record 5;
      DocumentDate@1002 : Date;
      Description@1005 : Text[100];
      EndingText@1001 : Text[100];
      PostedDocumentNo@1010 : Code[20];
    BEGIN
      // Check Line Description, Beginning Text and Ending Text after suggesting Lines for a Finance Charge Memo.

      // Setup: Create Finance Charge Terms with Beginning and Ending Texts, update it on Customer. Create and Post Sales Invoice.
      Initialize;
      LibraryFinanceChargeMemo.CreateFinanceChargeTermAndText(FinanceChargeTerms);
      CreateCustomer(Customer,FinanceChargeTerms.Code,CreateCurrency);
      PostedDocumentNo := CreateAndPostSalesInvoice(Customer."No.");
      LibraryFinanceChargeMemo.ComputeDescription(FinanceChargeTerms,Description,DocumentDate,PostedDocumentNo);

      // Exercise: Create Finance Charge Memo and Suggest Lines for Customer on Calculated Document Date.
      CreateSuggestFinanceChargeMemo(FinanceChargeMemoHeader,Customer."No.",DocumentDate);
      EndingText := ComputeEndingText(FinanceChargeMemoHeader."No.",Customer."Currency Code");

      // Verify: Verify Finance Charge Memo Line Description, Beginning and Ending Text.
      VerifyLineDescription(FinanceChargeMemoHeader."No.",Description);
      VerifyBeginningEndingText(
        FinanceChargeMemoHeader."No.",STRSUBSTNO(BeginningTextNew,FinanceChargeMemoHeader."Posting Date"),
        FinanceChargeMemoLine."Line Type"::"Beginning Text");
      VerifyBeginningEndingText(FinanceChargeMemoHeader."No.",EndingText,FinanceChargeMemoLine."Line Type"::"Ending Text");

      // Tear Down: Delete the earlier created Finance Charge Memo and Finance Charge Terms.
      FinanceChargeMemoHeader.FIND;
      FinanceChargeMemoHeader.DELETE(TRUE);
      FinanceChargeTerms.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE FinanceChargeMemoFromRefund@3();
    VAR
      Customer@1011 : Record 18;
      FinanceChargeMemoHeader@1010 : Record 302;
      FinanceChargeMemoLine@1009 : Record 303;
      FinanceChargeTerms@1008 : Record 5;
      Amount@1001 : Decimal;
      CalculatedAmount@1000 : Decimal;
    BEGIN
      // Test Finance Charge Memo Lines after Suggesting Lines for Finance Charge Memo.

      // 1. Setup: Create Finance Charge Terms, Create Customer, Create and Post General Journal Line for Refund.
      Initialize;
      LibraryFinanceChargeMemo.CreateFinanceChargeTermAndText(FinanceChargeTerms);
      CreateCustomer(Customer,FinanceChargeTerms.Code,'');
      Amount := CreateAndPostGeneralJournal(Customer."No.");

      // 2. Exercise: Create Finance Charge Memo Header and Suggest Lines.
      CreateSuggestFinanceChargeMemo(
        FinanceChargeMemoHeader,Customer."No.",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(3)) + 'Y>',CALCDATE(FinanceChargeTerms."Due Date Calculation",WORKDATE)));
      CalculatedAmount :=
        ROUND(Amount * (FinanceChargeMemoHeader."Document Date" - WORKDATE) /
          FinanceChargeTerms."Interest Period (Days)" * FinanceChargeTerms."Interest Rate" / 100);

      // 3. Verify: Verify Finance Charge Memo Lines.
      VerifyFinanceChargeMemoLine(
        FinanceChargeMemoHeader."No.",FinanceChargeMemoLine.Type::"Customer Ledger Entry",Amount,CalculatedAmount);
      VerifyFinanceChargeMemoLine(
        FinanceChargeMemoHeader."No.",FinanceChargeMemoLine.Type::"G/L Account",0,FinanceChargeTerms."Additional Fee (LCY)");
    END;

    [Test]
    PROCEDURE IssuedFinanceChargeMemo@15();
    VAR
      Customer@1011 : Record 18;
      FinanceChargeMemoHeader@1010 : Record 302;
      IssuedFinChargeMemoHeader@1002 : Record 304;
      IssuedFinChargeMemoLine@1009 : Record 305;
      FinanceChargeTerms@1008 : Record 5;
      Amount@1001 : Decimal;
      CalculatedAmount@1000 : Decimal;
    BEGIN
      // Test Issued Finance Charge Memo Lines after Issuing Finance Charge Memo.

      // 1. Setup: Create Finance Charge Terms, Create Customer, Create and Post General Journal Line for Refund, Create Finance Charge
      // Memo Header and Suggest Lines.
      Initialize;
      LibraryFinanceChargeMemo.CreateFinanceChargeTermAndText(FinanceChargeTerms);
      CreateCustomer(Customer,FinanceChargeTerms.Code,'');
      Amount := CreateAndPostGeneralJournal(Customer."No.");
      CreateSuggestFinanceChargeMemo(
        FinanceChargeMemoHeader,Customer."No.",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(3)) + 'Y>',CALCDATE(FinanceChargeTerms."Due Date Calculation",WORKDATE)));
      CalculatedAmount :=
        ROUND(Amount * (FinanceChargeMemoHeader."Document Date" - WORKDATE) /
          FinanceChargeTerms."Interest Period (Days)" * FinanceChargeTerms."Interest Rate" / 100);

      // 2. Exercise: Issue Finance Charge Memo.
      IssuingFinanceChargeMemos(FinanceChargeMemoHeader."No.");

      // 3. Verify: Verify Issued Finance Charge Memo Lines.
      IssuedFinChargeMemoHeader.SETRANGE("Pre-Assigned No.",FinanceChargeMemoHeader."No.");
      IssuedFinChargeMemoHeader.FINDFIRST;
      VerifyIssuedChargeMemoLine(
        IssuedFinChargeMemoHeader."No.",IssuedFinChargeMemoLine.Type::"Customer Ledger Entry",Amount,CalculatedAmount);
      VerifyIssuedChargeMemoLine(
        IssuedFinChargeMemoHeader."No.",IssuedFinChargeMemoLine.Type::"G/L Account",0,FinanceChargeTerms."Additional Fee (LCY)");
    END;

    LOCAL PROCEDURE ComputeEndingText@2(FinanceChargeMemoNo@1001 : Code[20];CurrencyCode@1004 : Code[10]) : Text[100];
    VAR
      FinChrgMemoHeader@1000 : Record 302;
      Currency@1005 : Record 4;
      FinChrgMemoTotal@1006 : Decimal;
    BEGIN
      // To fetch the Decimal Places from the computed Amount, used Format with Currency Decimal Precision.
      Currency.GET(CurrencyCode);

      FinChrgMemoHeader.GET(FinanceChargeMemoNo);
      FinChrgMemoHeader.CALCFIELDS(
        "Remaining Amount","Interest Amount","Additional Fee","VAT Amount");
      FinChrgMemoTotal :=
        FinChrgMemoHeader."Remaining Amount" + FinChrgMemoHeader."Interest Amount" +
        FinChrgMemoHeader."Additional Fee" + FinChrgMemoHeader."VAT Amount";

      EXIT(
        STRSUBSTNO(EndingTextNew,FORMAT(FinChrgMemoTotal,0,STRSUBSTNO(PrecisionText,Currency."Amount Decimal Places"))));
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournal@78(AccountNo@1003 : Code[20]) : Decimal;
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1000 : Record 232;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalBatch(GenJournalBatch);

      // Use Random because value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Refund,
        GenJournalLine."Account Type"::Customer,AccountNo,LibraryRandom.RandDec(1000,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@17(CustomerNo@1000 : Code[20]) PostedDocumentNo : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Take Random Quantity for Sales Invoice.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@1(VAR Customer@1000 : Record 18;FinChargeTermsCode@1001 : Code[10];CurrencyCode@1003 : Code[10]);
    VAR
      PaymentTerms@1002 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.VALIDATE("Fin. Charge Terms Code",FinChargeTermsCode);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@94(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@4() : Code[20];
    VAR
      Item@1000 : Record 27;
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      // Create an Item with Random Unit Price. Take Amount more than 2000 so that Finance Charge Memo Amount can be generated.
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",2000 + LibraryRandom.RandInt(100));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSuggestFinanceChargeMemo@10(VAR FinanceChargeMemoHeader@1002 : Record 302;CustomerNo@1004 : Code[20];DocumentDate@1001 : Date);
    BEGIN
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,CustomerNo);
      FinanceChargeMemoHeader.VALIDATE("Document Date",DocumentDate);
      FinanceChargeMemoHeader.MODIFY(TRUE);
      SuggestFinanceChargeMemoLines(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE FindFinanceChargeMemoLine@11(VAR FinanceChargeMemoLine@1000 : Record 303;FinanceChargeMemoNo@1001 : Code[20];Type@1002 : Option);
    BEGIN
      FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      FinanceChargeMemoLine.SETRANGE(Type,Type);
      FinanceChargeMemoLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLineDescription@16(FinanceChargeMemoNo@1000 : Code[20];LineType@1001 : Option) : Text[100];
    VAR
      FinanceChargeMemoLine@1002 : Record 303;
    BEGIN
      FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      FinanceChargeMemoLine.SETRANGE("Line Type",LineType);
      FinanceChargeMemoLine.SETFILTER(Description,'<>''''');
      FinanceChargeMemoLine.FINDFIRST;
      EXIT(FinanceChargeMemoLine.Description);
    END;

    LOCAL PROCEDURE IssuingFinanceChargeMemos@19(FinanceChargeMemoHeaderNo@1002 : Code[20]);
    VAR
      FinanceChargeMemoHeader@1001 : Record 302;
    BEGIN
      FinanceChargeMemoHeader.GET(FinanceChargeMemoHeaderNo);
      LibraryERM.IssueFinanceChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE SuggestFinanceChargeMemoLines@6(FinanceChargeMemoHeader@1000 : Record 302);
    VAR
      SuggestFinChargeMemoLines@1001 : Report 192;
    BEGIN
      FinanceChargeMemoHeader.SETRANGE("No.",FinanceChargeMemoHeader."No.");
      SuggestFinChargeMemoLines.SETTABLEVIEW(FinanceChargeMemoHeader);
      SuggestFinChargeMemoLines.USEREQUESTPAGE(FALSE);
      SuggestFinChargeMemoLines.RUN;
    END;

    LOCAL PROCEDURE VerifyLineDescription@7(FinanceChargeMemoNo@1001 : Code[20];Description@1004 : Text[100]);
    VAR
      FinanceChargeMemoLine@1002 : Record 303;
    BEGIN
      FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      FinanceChargeMemoLine.SETRANGE(Type,FinanceChargeMemoLine.Type::"Customer Ledger Entry");
      FinanceChargeMemoLine.FINDFIRST;
      Assert.AreEqual(Description,FinanceChargeMemoLine.Description,DescriptionError);
    END;

    LOCAL PROCEDURE VerifyBeginningEndingText@9(FinanceChargeMemoHeaderNo@1002 : Code[20];ExpectedText@1000 : Text[100];LineType@1001 : Option);
    BEGIN
      Assert.AreEqual(ExpectedText,GetLineDescription(FinanceChargeMemoHeaderNo,LineType),DescriptionError);
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemoLine@12(FinanceChargeMemoNo@1004 : Code[20];Type@1000 : Option;RemainingAmount@1001 : Decimal;Amount@1003 : Decimal);
    VAR
      FinanceChargeMemoLine@1002 : Record 303;
    BEGIN
      FindFinanceChargeMemoLine(FinanceChargeMemoLine,FinanceChargeMemoNo,Type);
      FinanceChargeMemoLine.TESTFIELD("Remaining Amount",RemainingAmount);
      FinanceChargeMemoLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyIssuedChargeMemoLine@28(FinanceChargeMemoNo@1004 : Code[20];Type@1000 : Option;RemainingAmount@1001 : Decimal;Amount@1003 : Decimal);
    VAR
      IssuedFinChargeMemoLine@1005 : Record 305;
    BEGIN
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      IssuedFinChargeMemoLine.SETRANGE(Type,Type);
      IssuedFinChargeMemoLine.FINDFIRST;
      IssuedFinChargeMemoLine.TESTFIELD("Remaining Amount",RemainingAmount);
      IssuedFinChargeMemoLine.TESTFIELD(Amount,Amount);
    END;

    BEGIN
    {
      // [FEATURE] [Finance Charge Memo]
      Unsupported version tags:
      NA: Unable to Compile
      SE: Unable to Execute
      NO: Unable to Execute (TFS ID: 47907)

      Test to verify different text after suggesting Finance Charge Memo Lines for a Customer.
        1. Verify Line Description, Beginning and Ending Text in Finance Charge Memo Lines for a Customer.
        2. Test Finance Charge Memo Lines after Suggesting Lines for Finance Charge Memo.
        3. Test Issued Finance Charge Memo Lines after Issuing Finance Charge Memo.

        Covers Test Cases
        ------------------------------------------------------------------------------------
        Test Function Name                  TFS ID
        ------------------------------------------------------------------------------------
        FinanceChargeMemoDescription        125697, 125698, 125699, 125700, 125701, 125702

      TFS_TS_ID = 216991
      Cover Test cases:
      --------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      --------------------------------------------------------------------------
      FinanceChargeMemoFromRefund, IssuedFinanceChargeMemo               124533
    }
    END.
  }
}

