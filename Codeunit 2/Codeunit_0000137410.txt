OBJECT Codeunit 137410 Extended Text Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialzied := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPatterns@1000 : Codeunit 132212;
      LibrarySales@1007 : Codeunit 130509;
      LibraryPurchase@1009 : Codeunit 130512;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibrarySetupStorage@1010 : Codeunit 131009;
      Assert@1002 : Codeunit 130000;
      NotFoundErr@1003 : TextConst 'ENU=Could not find an order line with the Extended Text.';
      TransferExtendedText@1004 : Codeunit 378;
      ExtendedTxt@1005 : TextConst 'ENU=Test Extended Text';
      IsInitialzied@1008 : Boolean;

    LOCAL PROCEDURE Initialize@15();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialzied THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      IsInitialzied := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE SalesQuoteToOrderWithExtText@2();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(1,10);
      CreateItemwithStock(Item,ExtendedTxt,Quantity);
      LibraryPatterns.MAKESalesQuote(SalesHeader,SalesLine,Item,'','',
        Quantity,WORKDATE,LibraryRandom.RandIntInRange(1,10));
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);

      // Exercise: Create Sales Order form Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order (Yes/No)",SalesHeader);

      // Verify
      VerifySalesOrder(SalesLine."No.",ExtendedTxt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE SalesBlanketOrderWithExtText@27();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(1,10);
      CreateItemwithStock(Item,ExtendedTxt,Quantity);
      LibraryPatterns.MAKESalesBlanketOrder(SalesHeader,SalesLine,Item,'','',
        Quantity,WORKDATE,LibraryRandom.RandIntInRange(1,10));
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);

      // Exercise: Create Sales Order form Sales Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blnkt Sales Ord. to Ord. (Y/N)",SalesHeader);

      // Verify
      VerifySalesOrder(SalesLine."No.",ExtendedTxt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE SalesOrderFromSalesBlanketOrderWithExtText@1();
    VAR
      ShippedItem@1000 : Record 27;
      NotShippedItem@1007 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ExtText@1006 : Text;
    BEGIN
      // [FEATURE] [Blanket Sales Order]
      // [SCENARIO 379977] Extended Text for Blanket Sales Order Line with "Qty. to Ship" = 0 should not be transferred to Sales Order Line.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      // [GIVEN] Items "I1" and "I2" with Extended Texts "ET1" and "ET2" respectively.
      ExtText := LibraryUtility.GenerateRandomText(30);
      LibraryPatterns.MAKEItemWithExtendedText(NotShippedItem,ExtText,0,0);
      LibraryPatterns.MAKEItemWithExtendedText(ShippedItem,LibraryUtility.GenerateRandomText(30),0,0);

      // [GIVEN] Blanket Sales Order for Items "I1" and "I2", in which "Qty. to Ship" for "I1" = 0.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",LibrarySales.CreateCustomerNo);
      CreateSalesLineWithExtText(SalesHeader,NotShippedItem."No.",LibraryRandom.RandInt(10),0);
      CreateSalesLineWithExtText(
        SalesHeader,ShippedItem."No.",LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5));

      // [WHEN] Make a Sales Order from the Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blnkt Sales Ord. to Ord. (Y/N)",SalesHeader);

      // [THEN] Extended Text "ET1" is not present in the Sales Order.
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE(Description,ExtText);
        Assert.RecordIsEmpty(SalesLine);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PurchQuoteToOrderWithExtText@32();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(1,10);
      LibraryPatterns.MAKEItemWithExtendedText(Item,ExtendedTxt,Item."Costing Method"::FIFO,0);
      LibraryPatterns.MAKEPurchaseQuote(PurchaseHeader,PurchaseLine,
        Item,'','',Quantity,WORKDATE,LibraryRandom.RandIntInRange(1,10));
      IF TransferExtendedText.PurchCheckIfAnyExtText(PurchaseLine,FALSE) THEN
        TransferExtendedText.InsertPurchExtText(PurchaseLine);

      // Exercise: Create Sales Order form Purchase Quote.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order (Yes/No)",PurchaseHeader);

      // Verify
      VerifyPurchOrder(PurchaseLine."No.",ExtendedTxt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PurchBlanketOrderWithExtText@33();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(1,10);
      LibraryPatterns.MAKEItemWithExtendedText(Item,ExtendedTxt,Item."Costing Method"::FIFO,0);
      LibraryPatterns.MAKEPurchaseBlanketOrder(PurchaseHeader,PurchaseLine,
        Item,'','',Quantity,WORKDATE,LibraryRandom.RandIntInRange(1,10));
      IF TransferExtendedText.PurchCheckIfAnyExtText(PurchaseLine,FALSE) THEN
        TransferExtendedText.InsertPurchExtText(PurchaseLine);

      // Exercise: Create Sales Order form Purchase Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blnkt Purch Ord. to Ord. (Y/N)",PurchaseHeader);

      // Verify
      VerifyPurchOrder(PurchaseLine."No.",ExtendedTxt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PurchOrderFromPurchBlanketOrderWithExtText@6();
    VAR
      ShippedItem@1000 : Record 27;
      NotShippedItem@1007 : Record 27;
      PurchHeader@1001 : Record 38;
      PurchLine@1002 : Record 39;
      ExtText@1006 : Text;
    BEGIN
      // [FEATURE] [Blanket Purchase Order]
      // [SCENARIO 379977] Extended Text for Blanket Purchase Order Line with "Qty. to Receive" = 0 should not be transferred to Purchase Order Line.
      Initialize;

      // [GIVEN] Items "I1" and "I2" with Extended Texts "ET1" and "ET2" respectively.
      ExtText := LibraryUtility.GenerateRandomText(30);
      LibraryPatterns.MAKEItemWithExtendedText(NotShippedItem,ExtText,0,0);
      LibraryPatterns.MAKEItemWithExtendedText(ShippedItem,LibraryUtility.GenerateRandomText(30),0,0);

      // [GIVEN] Blanket Purchase Order for Items "I1" and "I2", in which "Qty. to Receive" for "I1" = 0.
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::"Blanket Order",LibraryPurchase.CreateVendorNo);
      CreatePurchLineWithExtText(PurchHeader,NotShippedItem."No.",LibraryRandom.RandInt(10),0);
      CreatePurchLineWithExtText(
        PurchHeader,ShippedItem."No.",LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5));

      // [WHEN] Make a Purchase Order from the Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blnkt Purch Ord. to Ord. (Y/N)",PurchHeader);

      // [THEN] Extended Text "ET1" is not present in the Purchase Order.
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE(Description,ExtText);
        Assert.RecordIsEmpty(PurchLine);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@4(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE CreateItemwithStock@18(VAR Item@1001 : Record 27;ExtendedText@1003 : Text[50];Quantity@1002 : Decimal);
    BEGIN
      LibraryPatterns.MAKEItemWithExtendedText(Item,ExtendedText,Item."Costing Method"::FIFO,0);
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',Quantity,WORKDATE,0);
    END;

    LOCAL PROCEDURE CreateSalesLineWithExtText@3(SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];Quantity@1004 : Decimal;QtyToShip@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE CreatePurchLineWithExtText@7(PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];Quantity@1004 : Decimal;QtyToReceive@1003 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.MODIFY(TRUE);
      TransferExtendedText.InsertPurchExtText(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifySalesOrder@24(ItemNo@1000 : Code[20];ExtText@1001 : Text[50]);
    VAR
      SalesLine@1002 : Record 37;
      ItemSalesLine@1003 : Record 37;
    BEGIN
      ItemSalesLine.SETRANGE("Document Type",ItemSalesLine."Document Type"::Order);
      ItemSalesLine.SETRANGE("No.",ItemNo);
      ItemSalesLine.FINDFIRST;

      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",ItemSalesLine."Document No.");
      SalesLine.SETRANGE(Description,ExtText);
      Assert.IsFalse(SalesLine.ISEMPTY,NotFoundErr);
    END;

    LOCAL PROCEDURE VerifyPurchOrder@41(ItemNo@1000 : Code[20];ExtText@1001 : Text[50]);
    VAR
      PurchLine@1002 : Record 39;
      ItemPurchLine@1003 : Record 39;
    BEGIN
      ItemPurchLine.SETRANGE("Document Type",ItemPurchLine."Document Type"::Order);
      ItemPurchLine.SETRANGE("No.",ItemNo);
      ItemPurchLine.FINDFIRST;

      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE("Document No.",ItemPurchLine."Document No.");
      PurchLine.SETRANGE(Description,ExtText);
      Assert.IsFalse(PurchLine.ISEMPTY,NotFoundErr);
    END;

    BEGIN
    {
      // [FEATURE] [Extended Text]
    }
    END.
  }
}

