OBJECT Codeunit 136106 Service Response Time
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1003 : Codeunit 131902;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryRandom@1005 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      ServItemLineResponseTimeErr@1004 : TextConst 'ENU=Wrong Service Item Line "Response Time" value';

    [Test]
    PROCEDURE ResponseTimeFromServiceItem@17();
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time (Hours) on Service Item Line is equal to the value of Response Time (Hours) of Service Item.

      // 1. Setup: Create Service Item - validate any value for Response Time (Hours).
      Initialize;
      CreateServiceItemWithResponseTime(ServiceItem,RANDOM(100));

      // 2. Exercise: Create Service Order - Service Header and Service Item Line.
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",WORKDATE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 3. Verify: Verify that the Response Time (Hours) on Service Item Line is equal to value of Response Time (Hours) of Service Item.
      ServiceItemLine.TESTFIELD("Response Time (Hours)",ServiceItem."Response Time (Hours)");
    END;

    [Test]
    PROCEDURE ResponseTimeServiceItemGroup@20();
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
      ServiceItemGroup@1003 : Record 5904;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time (Hours) on Service Item Line is Response Time (Hours) of Service Item Group on Service Item Line.

      // 1. Setup: Create Service Item Group - validate any value for Default Response Time (Hours) and attach it to a new Service Item.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroup.VALIDATE("Default Response Time (Hours)",RANDOM(100));  // Required field - value is not important for test case.
      ServiceItemGroup.MODIFY(TRUE);

      CreateServiceItem(ServiceItem);
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItem.MODIFY(TRUE);

      // 2. Exercise: Create Service Order - Service Header and Service Item Line.
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",WORKDATE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 3. Verify: Verify that the value of the Response Time (Hours) on Service Item Line is equal to the value of Response Time
      // (Hours) of Service Item Group.
      ServiceItemLine.TESTFIELD("Response Time (Hours)",ServiceItemGroup."Default Response Time (Hours)");
    END;

    [Test]
    PROCEDURE ResponseTimeInSameWorkingDay@9();
    VAR
      ServiceItemLine@1004 : Record 5901;
      ServiceHour@1003 : Record 5910;
      OrderDate@1000 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is Ending Time of the relevant Service Hour minus the time subtracted, for a
      // Working Day and Response Time (Hours) as any time falling within the Service Hours on the same day.

      // 1. Setup: Create Service Order for a Working Day - Service Item, Service Header, Service Item Line.
      Initialize;
      OrderDate := LibraryService.GetFirstWorkingDay(WORKDATE);
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours) as any time falling within the Service
      // Hours on the same day.
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") - 1);
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is Ending Time of the relevant Service Hour minus the time
      // subtracted.
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Ending Time" - LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [Test]
    PROCEDURE ResponseTimeSameWorkingDayFull@3();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHour@1000 : Record 5910;
      OrderDate@1004 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is the Ending Time of the relevant Service Hour, for a Working Day and Response
      // Time (Hours) as full Shift Time (duration of Service Hours).

      // 1. Setup: Create Service Order for a Working Day - Service Item, Service Header, Service Item Line.
      Initialize;
      OrderDate := LibraryService.GetFirstWorkingDay(WORKDATE);
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours) on Service Item Line having boundary value
      // as full Shift Time (duration of Service Hours).
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time"));
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is the Ending Time of the relevant Service Hour.
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Ending Time");
    END;

    [Test]
    PROCEDURE ResponseTimeSameWorkingDayZero@18();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceItem@1002 : Record 5940;
      ServiceHeader@1004 : Record 5900;
      ServiceHour@1000 : Record 5910;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is the Order Time of the Service Header, for a Working Day and Response Time
      // (Hours) as 0.

      // 1. Setup: Create Service Order for a Working Day - Service Item, Service Header, Service Item Line.
      Initialize;
      CreateServiceItem(ServiceItem);
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",LibraryService.GetFirstWorkingDay(WORKDATE));
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours) on Service Item Line as boundary value 0.
      LibraryService.GetServiceHourForDate(ServiceHour,ServiceHeader."Order Date");
      ServiceItemLine.VALIDATE("Response Time (Hours)",0);  // The value 0 is important to the test case as boundary value.
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is the Order Time of the Service Header.
      ServiceItemLine.TESTFIELD("Response Time",ServiceHeader."Order Time");
    END;

    [Test]
    PROCEDURE ResponseTimeTwoSimulWorkingDay@5();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHour@1000 : Record 5910;
      OrderDate@1001 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day
      // plus the time added, for a Working Day that is followed by another working day.

      // 1. Setup: Create Service Order for a Working Day that is followed by another working day - Service Item, Service Header,
      // Service Item Line.
      Initialize;
      OrderDate := GetTwoSimultaneousWorkingDays;
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours) on Service Item Line as
      // time falling outside of the Service Hours.
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") + 1);
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day
      // plus the time added.
      LibraryService.GetServiceHourForDate(ServiceHour,CALCDATE('<1D>',OrderDate));
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Starting Time" + LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [Test]
    PROCEDURE ResponseTimeWorkingNonWorking@16();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHour@1000 : Record 5910;
      OrderDate@1001 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day
      // plus the time added, for a Working Day that is followed by non working day.

      // 1. Setup: Create Service Order for a Working Day that is followed by non working day - Service Item, Service Header,
      // Service Item Line.
      Initialize;
      OrderDate := GetWorkingFollowedByNonWorking;
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours)) on Service Item Line as time falling
      // outside of the Working Hours.
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") + 1);
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day
      // plus the time added.
      LibraryService.GetServiceHourForDate(ServiceHour,LibraryService.GetNextWorkingDay(OrderDate));
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Starting Time" + LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [Test]
    PROCEDURE ResponseTimeNonWorkingWorking@26();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHour@1000 : Record 5910;
      OrderDate@1001 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is Ending Time of the relevant Service Hour for next working day
      // minus the time subtracted, for a non working day that is followed by a working day.

      // 1. Setup: Create Service Order for a non working day that is followed by a working day - Service Item, Service Header,
      // Service Item Line.
      Initialize;
      OrderDate := LibraryService.GetNonWrkngDayFollwdByWrkngDay;
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date. Validate Response Time (Hours) on Service Item Line as
      // time falling inside the Service Hours of next working day.
      LibraryService.GetServiceHourForDate(ServiceHour,LibraryService.GetNextWorkingDay(OrderDate));
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") - 1);
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day
      // plus the time added.
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Ending Time" - LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [Test]
    PROCEDURE ResponseTimeValidOnHolidays@11();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHour@1000 : Record 5910;
      OrderDate@1001 : Date;
    BEGIN
      // Covers document number TC0120 - refer to TFS ID 21728.
      // Test that the Response Time on Service Item Line is Ending Time of the relevant Service Hour minus the time subtracted, for a non
      // working day that has Valid on Holidays checked.

      // 1. Setup: Create Service Order for a non working day that has Valid on Holidays checked.
      Initialize;
      OrderDate := CreateNonWorkingDayWithHoliday;
      CreateServiceHeaderGivenDate(ServiceItemLine,OrderDate);

      // 2. Exercise: Get Service Hour for the relevant Date and validate Response Time (Hours) on Service Item Line as a time
      // falling within the Service Hours on the same day.
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      ServiceItemLine.VALIDATE(
        "Response Time (Hours)",LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") - 1);
      ServiceItemLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Response Time on Service Item Line is Ending Time of the relevant Service Hour minus the
      // time subtracted.
      ServiceItemLine.TESTFIELD("Response Time",ServiceHour."Ending Time" - LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ResponseTimeLessThanServiceHoursOnServiceOrder@8();
    VAR
      ServiceHour@1002 : Record 5910;
      ServiceHeader@1003 : Record 5900;
      ServiceContractLine@1007 : Record 5964;
      OrderDate@1000 : Date;
    BEGIN
      // Verify Response Date and Time on a Service Order Line where Service Hours is less than Response Time (Hours) on Contract.

      // 1. Setup: Create Service Contract Header, Service Contract Line, Get Service Hour for the Working Day that is followed by another working day,
      // Validate Response Time (Hours) on Service Contract Line as time falling outside of the Service Hours and Sign Service Contract.
      Initialize;
      OrderDate := GetTwoSimultaneousWorkingDays;
      LibraryService.GetServiceHourForDate(ServiceHour,OrderDate);
      CreateAndSignServiceContract(
        ServiceContractLine,LibraryUtility.ConvertMilliSecToHours(ServiceHour."Ending Time" - ServiceHour."Starting Time") + 1);  // Value is important for test to have response time hours more than service hours.

      // 2. Exercise: Create Service Order for the relevant date - Service Item, Service Header, Service Item Line with the Contract No.
      CreateServiceHeader(ServiceHeader,ServiceContractLine."Customer No.",OrderDate);
      CreateServiceItemLineWithContractNo(ServiceHeader,ServiceContractLine);

      // 3. Verify: Verify that the Response Date is the Next Date from the Order Date and Response Time on Service Item Line is Starting Time of the relevant Service Hour for next working day plus the time added.
      VerifyServiceItemLine(
        ServiceHeader."No.",ServiceContractLine."Response Time (Hours)",CALCDATE('<1D>',OrderDate),ServiceHour."Starting Time");
    END;

    [Test]
    PROCEDURE ServItemLineResponseTime235959@21();
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
      Date@1003 : Date;
    BEGIN
      // Verify Service Item Line "Response Time" in case of Service Hour 23:59:59 Ending Time
      Initialize;
      Date := CALCDATE('<1M>',WORKDATE);
      UpdateDefaultServiceHours(Date);

      CreateServiceItemWithResponseTime(ServiceItem,24);
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",Date);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      Assert.AreEqual(ServiceHeader."Order Time",ServiceItemLine."Response Time",ServItemLineResponseTimeErr);

      // Tear Down
      DeleteServiceHours(Date);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryService.SetupServiceMgtNoSeries;
      COMMIT;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateAndSignServiceContract@7(VAR ServiceContractLine@1000 : Record 5964;ResponseTimeHours@1003 : Decimal);
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceContractHeader@1001 : Record 5965;
      SignServContractDoc@1004 : Codeunit 5944;
    BEGIN
      CreateServiceItem(ServiceItem);
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,ServiceItem."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ModifyServiceContractLine(ServiceContractLine,ResponseTimeHours);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceItem@2(VAR ServiceItem@1001 : Record 5940);
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
    END;

    LOCAL PROCEDURE CreateServiceItemWithResponseTime@36(VAR ServiceItem@1000 : Record 5940;ResponseHours@1001 : Integer);
    BEGIN
      CreateServiceItem(ServiceItem);
      ServiceItem.VALIDATE("Response Time (Hours)",ResponseHours);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeader@47(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];OrderDate@1002 : Date);
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      ServiceHeader.VALIDATE("Order Date",OrderDate);
      ServiceHeader.VALIDATE("Order Time",000001T);  // Value 000001T is important for test case.
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeaderGivenDate@50(VAR ServiceItemLine@1002 : Record 5901;OrderDate@1003 : Date);
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      CreateServiceItem(ServiceItem);
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",OrderDate);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateNonWorkingDayWithHoliday@12() : Date;
    VAR
      ServiceHour@1001 : Record 5910;
      Date@1002 : Record 2000000007;
      NonWorkingDate@1000 : Date;
    BEGIN
      NonWorkingDate := GetNonWorkingDay(WORKDATE);
      IF NOT LibraryService.GetServiceHourForDate(ServiceHour,NonWorkingDate) THEN BEGIN
        Date.GET(Date."Period Type"::Date,NonWorkingDate);
        EVALUATE(ServiceHour.Day,Date."Period Name");
        LibraryService.CreateDefaultServiceHour(ServiceHour,ServiceHour.Day);
        // Required field - value is not important for test case.
        ServiceHour.VALIDATE(
          "Ending Time",
          ServiceHour."Starting Time" + LibraryUtility.ConvertHoursToMilliSec(LibraryRandom.RandIntInRange(5,10)));
      END;
      ServiceHour.VALIDATE("Valid on Holidays",TRUE);
      ServiceHour.MODIFY(TRUE);
      EXIT(NonWorkingDate);
    END;

    LOCAL PROCEDURE CreateServiceItemLineWithContractNo@13(ServiceHeader@1000 : Record 5900;ServiceContractLine@1003 : Record 5964);
    VAR
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceContractLine."Service Item No.");
      ServiceItemLine.VALIDATE("Contract No.",ServiceContractLine."Contract No.");
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetNonWorkingDay@23(NonWorkingDate@1000 : Date) : Date;
    BEGIN
      WHILE LibraryService.IsWorking(NonWorkingDate) DO
        NonWorkingDate := CALCDATE('<1D>',NonWorkingDate);
      EXIT(NonWorkingDate);
    END;

    LOCAL PROCEDURE GetTwoSimultaneousWorkingDays@1() : Date;
    VAR
      ServiceHour@1000 : Record 5910;
      WorkingDate@1001 : Date;
    BEGIN
      WorkingDate := WORKDATE;
      REPEAT
        WorkingDate := CALCDATE('<1D>',WorkingDate);
      UNTIL
            (LibraryService.IsWorking(WorkingDate) AND LibraryService.GetServiceHourForDate(ServiceHour,WorkingDate)) AND
            (LibraryService.IsWorking(CALCDATE('<1D>',WorkingDate)) AND
             LibraryService.GetServiceHourForDate(ServiceHour,CALCDATE('<1D>',WorkingDate)));
      EXIT(WorkingDate);
    END;

    LOCAL PROCEDURE GetWorkingFollowedByNonWorking@14() : Date;
    VAR
      ServiceHour@1000 : Record 5910;
      WorkingDate@1001 : Date;
    BEGIN
      WorkingDate := WORKDATE;
      REPEAT
        WorkingDate := CALCDATE('<1D>',WorkingDate);
      UNTIL
            (LibraryService.IsWorking(WorkingDate) AND LibraryService.GetServiceHourForDate(ServiceHour,WorkingDate)) AND
            NOT (LibraryService.IsWorking(CALCDATE('<1D>',WorkingDate)) AND
                 LibraryService.IsValidOnHolidays(CALCDATE('<1D>',WorkingDate)));
      EXIT(WorkingDate);
    END;

    LOCAL PROCEDURE ModifyServiceContractHeader@29(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyServiceContractLine@15(VAR ServiceContractLine@1000 : Record 5964;ResponseTimeHours@1002 : Decimal);
    BEGIN
      ServiceContractLine.VALIDATE("Line Value",RANDOM(100));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Response Time (Hours)",ResponseTimeHours);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultServiceHours@28(StartingDate@1001 : Date);
    VAR
      ServiceHour@1000 : Record 5910;
      DoW@1002 : Option;
    BEGIN
      WITH ServiceHour DO BEGIN
        "Starting Date" := StartingDate;
        "Starting Time" := 000000T;
        "Ending Time" := 235959T;
        "Valid on Holidays" := TRUE;
        FOR DoW := Day::Monday TO Day::Sunday DO BEGIN
          Day := DoW;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteServiceHours@32(StartingDate@1001 : Date);
    VAR
      ServiceHour@1000 : Record 5910;
    BEGIN
      ServiceHour.SETRANGE("Starting Date",StartingDate);
      ServiceHour.DELETEALL;
    END;

    LOCAL PROCEDURE VerifyServiceItemLine@27(DocumentNo@1004 : Code[20];ResponseTimeHours@1000 : Decimal;OrderDate@1001 : Date;StartingTime@1002 : Time);
    VAR
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",DocumentNo);
      ServiceItemLine.FINDFIRST;
      ServiceItemLine.TESTFIELD("Response Time (Hours)",ResponseTimeHours);
      ServiceItemLine.TESTFIELD("Response Date",OrderDate);
      ServiceItemLine.TESTFIELD("Response Time",StartingTime + LibraryUtility.ConvertHoursToMilliSec(1));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@6(SignContractMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      Result := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceContractTemplateListHandler@19(VAR ServiceContractTemplateList@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@10(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Service] [Response Time]
      Test for CRM Service Response Time:
        1. Test that value of the Response Time (Hours) field is copied from the Response Time (Hours) specified on the Service Item Card.
           and test that if the Response Time (Hours) on the Service Item is empty, the value of the Response Time (Hours) is copied from
           the Service Item Group Default Response Time (Hours) and test that it is possible to create and
           modify the response time on the lines manually.
        2. Verify Response Date and Time on a Service Order Line where Service Hours is less than Response Time (Hours) on Contract.
        3. Verify Service Item Line "Response Time" in case of Service Hour 23:59:59 Ending Time
      This test code unit replaces test cases of Response time for Manual Test Suite (TS0007)

      TFS_TS_ID = 21728
      Cover Test cases:
        TC0120 TFS_TC_ID=12065 and 31866

      TFS_TS_ID = 278191
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      ResponseTimeLessThanServiceHoursOnServiceOrder                                     172953
      ServItemLineResponseTime235959                                                     103110
    }
    END.
  }
}

