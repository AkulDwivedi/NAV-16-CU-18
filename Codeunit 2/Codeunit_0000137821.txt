OBJECT Codeunit 137821 SCM - Inventory UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryUtility@1001 : Codeunit 131000;
      CannotChangeItemTrackingCodeErr@1002 : TextConst 'ENU=You cannot change Item Tracking Code because there is at least one outstanding Purchase Order that include this item.';
      AvailProblemOccursOnSNTrackingErr@1003 : TextConst 'ENU="No availability problem should occur if SN Specific Tracking = FALSE."';
      LibraryRandom@1004 : Codeunit 130440;
      isInitialized@1005 : Boolean;

    [Test]
    PROCEDURE WrongErrorMessageWhenDeletingITCodeFromItem@1();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 6816] Item Tracking Code in Item could not be changed if an outstanding Purchase Order including this Item exists.
      Initialize;

      // [GIVEN] Item with Item Tracking Code. "Lot Specific Tracking" := TRUE.
      MockItemTrackingCode(ItemTrackingCode,TRUE);
      MockItem(Item,LibraryUtility.GenerateGUID,ItemTrackingCode.Code);

      // [GIVEN] Purchase Line with Item.
      MockPurchaseLine(PurchaseLine,Item."No.");

      // [WHEN] Delete the Item Tracking Code from Item.
      ASSERTERROR Item.VALIDATE("Item Tracking Code",'');

      // [THEN] The error message refers to the purchase order line.
      Assert.ExpectedError(CannotChangeItemTrackingCodeErr);
    END;

    [Test]
    PROCEDURE FullSNAvailabilityWhenSNTrackingIsFalse@2();
    VAR
      ItemTrackingCode@1002 : Record 6502;
      ReservationEntry@1005 : Record 337;
      TrackingSpecification@1003 : Record 336;
      ItemTrackingDataCollection@1000 : Codeunit 6501;
      LookupMode@1001 : 'Serial No.,Lot No.';
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 6744] Check of Serial No. availability in Item Tracking should be passed successfully when "SN Specific Tracking" = FALSE in Item Tracking Code.
      Initialize;

      // [GIVEN] Item Tracking Code with "SN Specific Tracking" = FALSE.
      MockItemTrackingCode(ItemTrackingCode,FALSE);

      // [GIVEN] Demand Reservation Entry and Tracking Specification.
      MockReservationEntry(ReservationEntry,LibraryUtility.GenerateGUID);
      MockTrackingSpecification(TrackingSpecification,ReservationEntry);

      // [WHEN] Call LOTSNAvailable function checking whether any availability problem occurs.
      ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode('',ItemTrackingCode);
      Assert.IsTrue(
        ItemTrackingDataCollection.LotSNAvailable(TrackingSpecification,LookupMode::"Serial No."),
        AvailProblemOccursOnSNTrackingErr);

      // [THEN] LotSNAvailable function returns TRUE (no availability problem).
    END;

    [Test]
    PROCEDURE NoEntriesExistCheckSkippedOnEmptyItem@3();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [Item]
      // [SCENARIO 380565] Update of Costing Method for an Item with so far undefined "No.", should not check existence of Purchase Lines with "Item" Type and blank "No.".
      Initialize;

      // [GIVEN] Item with blank "No." and "Costing Method" = FIFO.
      MockItem(Item,'','');

      // [GIVEN] Purchase Line with "Type" = Item and blank "No.".
      MockPurchaseLine(PurchaseLine,Item."No.");

      // [WHEN] Validate "Costing Method" of Item to Standard.
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);

      // [THEN] No error is thrown.
      // [THEN] "Costing Method" is updated.
      Item.TESTFIELD("Costing Method",Item."Costing Method"::Standard);
    END;

    LOCAL PROCEDURE Initialize@5();
    BEGIN
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE MockItem@6(VAR Item@1000 : Record 27;No@1001 : Code[20];ItemTrackingCode@1002 : Code[10]);
    BEGIN
      WITH Item DO BEGIN
        INIT;
        "No." := No;
        "Item Tracking Code" := ItemTrackingCode;
        "Costing Method" := "Costing Method"::FIFO;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockItemTrackingCode@8(VAR ItemTrackingCode@1000 : Record 6502;IsSpecificTracking@1001 : Boolean);
    BEGIN
      WITH ItemTrackingCode DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateGUID;
        "Lot Specific Tracking" := IsSpecificTracking;
        "SN Specific Tracking" := IsSpecificTracking;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockPurchaseLine@7(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        "Document Type" := "Document Type"::Order;
        "Document No." := LibraryUtility.GenerateGUID;
        Type := Type::Item;
        "No." := ItemNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockReservationEntry@9(VAR ReservationEntry@1000 : Record 337;ItemNo@1001 : Code[20]);
    BEGIN
      WITH ReservationEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(ReservationEntry,FIELDNO("Entry No."));
        Positive := FALSE;
        "Item No." := ItemNo;
        Quantity := -LibraryRandom.RandInt(10);
        "Quantity (Base)" := Quantity;
        "Item Tracking" := "Item Tracking"::"Serial No.";
        "Serial No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockTrackingSpecification@10(VAR TrackingSpecification@1000 : Record 336;ReservationEntry@1002 : Record 337);
    BEGIN
      WITH TrackingSpecification DO BEGIN
        INIT;
        "Item No." := ReservationEntry."Item No.";
        "Quantity (Base)" := ReservationEntry."Quantity (Base)";
        "Serial No." := ReservationEntry."Serial No.";
        INSERT;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
    }
    END.
  }
}

