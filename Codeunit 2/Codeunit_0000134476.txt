OBJECT Codeunit 134476 ERM Dimension Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      StandardVendorPurchaseCode@1008 : Record 175;
      Assert@1004 : Codeunit 130000;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryPlanning@1016 : Codeunit 132203;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1014 : Codeunit 130509;
      LibrarySetupStorage@1017 : Codeunit 131009;
      LibraryVariableStorage@1019 : Codeunit 131004;
      LibraryDimension@1012 : Codeunit 131001;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryERM@1009 : Codeunit 131300;
      LibraryRandom@1010 : Codeunit 130440;
      IsInitialized@1002 : Boolean;
      UnknownError@1003 : TextConst 'ENU=Unknown error.';
      DimensionHeaderError@1001 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. Select %3 %4 for the %5 %6 for %7 %8.';
      DimensionLineError@1000 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. Select %4 %5 for the %6 %7 for %8 %9.';
      DimensionValueCodeError@1007 : TextConst 'ENU=%1 must be %2.';
      QuantityReceivedError@1011 : TextConst 'ENU=%1 must be %2 in %3.';
      VendorLedgerEntryErr@1013 : TextConst 'ENU="Field Open in Vendor Ledger Entries should be %1 for Document No. = %2"';
      UpdateFromHeaderLinesQst@1018 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateLineDimQst@1020 : TextConst 'ENU=You have changed one or more dimensions on the';

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE DimensionUpdateOnLine@16();
    VAR
      DimensionSetEntry@1004 : Record 480;
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimensionValueCode@1006 : Code[20];
      ShortcutDimensionCode@1002 : Code[20];
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Purchase Line updated successfully after updation of Dimension on Purchase Header.

      // 1. Create Vendor, Item, Purchase Header with Dimension and Purchase Line, Change Dimension Value for Purchase Header Dimension
      // and Select Yes on Confirmation message occurs for updating Dimension on Purchase Line.
      Initialize;
      CreateOrderWithDimension(TempDimensionSetEntry,DimensionValueCode,ShortcutDimensionCode,DimensionSetID);

      // 2. Verify: Verify Dimension Set Entry and Dimension on Purchase Line successfully updated.
      VerifyDimensionSetEntry(TempDimensionSetEntry,DimensionSetID);

      FindDimensionSetEntry(DimensionSetEntry,ShortcutDimensionCode,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE DimensionNotUpdateOnLine@2();
    VAR
      DimensionSetEntry@1004 : Record 480;
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimensionValueCode@1007 : Code[20];
      ShortcutDimensionCode@1002 : Code[20];
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Purchase Line not updated after updation of Dimension on Purchase Header.

      // 1. Create Vendor, Item, Purchase Header with Dimension and Purchase Line, Change Dimension Value for Purchase Header Dimension
      // and Select No on Confirmation message occurs for updating Dimension on Purchase Line.
      Initialize;
      CreateOrderWithDimension(TempDimensionSetEntry,DimensionValueCode,ShortcutDimensionCode,DimensionSetID);

      // 2. Verify: Verify Dimension Set Entry and Dimension on Purchase Line not updated.
      VerifyDimensionSetEntry(TempDimensionSetEntry,DimensionSetID);

      FindDimensionSetEntry(DimensionSetEntry,ShortcutDimensionCode,DimensionSetID);
      Assert.AreNotEqual(
        DimensionValueCode,
        DimensionSetEntry."Dimension Value Code",
        STRSUBSTNO(
          DimensionValueCodeError,DimensionSetEntry.FIELDCAPTION("Dimension Value Code"),DimensionSetEntry."Dimension Value Code"));
    END;

    [Test]
    PROCEDURE ValuePostingRuleOnHeader@3();
    VAR
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      Vendor@1001 : Record 23;
      Dimension@1000 : Record 348;
      DefaultDimension@1006 : Record 352;
    BEGIN
      // Test error occurs on Posting Purchase Invoice with Invalid Dimension On Purchase Header.

      // 1. Setup: Create Vendor with Default Dimension, Item, Purchase Header and Update value of Dimension on Purchase Header.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(PurchaseHeader,
        PurchaseLine,Dimension.Code,'',DefaultDimension."Value Posting"::"Same Code",
        PurchaseHeader."Document Type"::Invoice);
      UpdateDimensionPurchaseHeader(PurchaseHeader);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Vendor,PurchaseHeader."Buy-from Vendor No.");

      // 2. Exercise: Post Purchase Invoice.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Invalid Dimension" on Posting Purchase Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          DimensionHeaderError,PurchaseHeader."Document Type",PurchaseHeader."No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",Vendor.TABLECAPTION,
          DefaultDimension."No."),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE ValuePostingRuleOnLine@7();
    VAR
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      Dimension@1000 : Record 348;
      DefaultDimension@1007 : Record 352;
      Item@1002 : Record 27;
    BEGIN
      // Test error occurs on Posting Purchase Invoice with Invalid Dimension On Purchase Line.

      // 1. Setup: Create Vendor, Item with Default Dimension, Purchase Header and Update value of Dimension on Purchase Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Same Code",
        PurchaseHeader."Document Type"::Invoice);
      UpdateDimensionPurchaseLine(PurchaseLine);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,PurchaseLine."No.");

      // 2. Exercise: Post Purchase Invoice.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Invalid Dimension" on Posting Purchase Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          DimensionLineError,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",Item.TABLECAPTION,DefaultDimension."No."),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE OrderFromQuoteWithDimension@4();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Dimension@1004 : Record 348;
      DefaultDimension@1003 : Record 352;
      DimensionSetIdHeader@1015 : Integer;
      DimensionSetIdLine@1016 : Integer;
    BEGIN
      // Test Dimension on Purchase Order Created from Purchase Quote.

      // 1. Setup: Create Vendor and Item with Default Dimension, Purchase Quote.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Dimension.Code,FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" ",
        PurchaseHeader."Document Type"::Quote);
      DimensionSetIdHeader := PurchaseHeader."Dimension Set ID";
      DimensionSetIdLine := PurchaseLine."Dimension Set ID";

      // 2. Exercise: Convert Purchase Quote to Order.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);

      // 3. Verify: Verify Dimension on created Purchase Header and Purchase Line.
      FindPurchaseOrder(PurchaseHeader,PurchaseHeader."No.");
      PurchaseHeader.TESTFIELD("Dimension Set ID",DimensionSetIdHeader);

      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.TESTFIELD("Dimension Set ID",DimensionSetIdLine);
    END;

    [Test]
    PROCEDURE GLEntryDimension@22();
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchInvHeader@1001 : Record 122;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1000 : Record 39;
      Dimension@1005 : Record 348;
      DefaultDimension@1003 : Record 352;
    BEGIN
      // Test Dimension on G/L Entry after Posting Purchase Invoice.

      // 1. Setup: Create Vendor, Items and Purchase Invoice for different Items.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::" ",PurchaseHeader."Document Type"::Invoice);

      // Use Random because value is not important.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader,PurchaseLine2.Type::Item,
        CreateItemWithDimension(FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" "),
        LibraryRandom.RandDec(10,2));
      UpdateVendorInvoiceNo(PurchaseHeader);

      // 2. Exercise: Post the Purchase Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,FALSE);

      // 3. Verify: Verify Dimension on G/L Entry.
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseHeader."No.");
      PurchInvHeader.FINDFIRST;
      VerifyGLEntryDimension(PurchaseLine,PurchInvHeader."No.");
      VerifyGLEntryDimension(PurchaseLine2,PurchInvHeader."No.");
    END;

    [Test]
    PROCEDURE ChangeDimensionAfterPartial@29();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1002 : Record 39;
      Dimension@1005 : Record 348;
      DefaultDimension@1004 : Record 352;
      PurchInvHeader@1015 : Record 122;
    BEGIN
      // Test Dimension on G/L Entry after Posting Purchase Order in Multiple Steps with Change Dimension Value on Purchase Line.

      // 1. Setup: Create Vendor, Item, Create and Post Purchase Order Partially.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::" ",PurchaseHeader."Document Type"::Order);
      UpdatePartialQuantityToReceive(PurchaseLine);
      UpdateVendorInvoiceNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 2. Exercise: Update Dimension Value on Purchase Line Dimension and Post Purchase Order.
      UpdateDimensionPurchaseLine(PurchaseLine);
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      UpdateVendorInvoiceNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify Dimension on G/L Entry.
      PurchInvHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchInvHeader.FINDLAST;
      VerifyGLEntryDimension(PurchaseLine,PurchInvHeader."No.");
    END;

    [Test]
    PROCEDURE ChangeShortcutDimensionInvoice@24();
    VAR
      PurchaseHeader@1000 : Record 38;
      Vendor@1004 : Record 23;
      GeneralLedgerSetup@1003 : Record 98;
      DimensionValue@1002 : Record 349;
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Test Purchase Header Dimension after change Shortcut Dimension 2 Code on Purchase Invoice Header.

      // 1. Setup: Create Vendor.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Create Purchase Header and Update Shortcut Dimension 2 Code on Purchase Header.
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 2 Code");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      PurchaseHeader.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      PurchaseHeader.MODIFY(TRUE);

      // 3. Verify: Verify Purchase Header Dimension.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseHeader."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",GeneralLedgerSetup."Shortcut Dimension 2 Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",PurchaseHeader."Shortcut Dimension 2 Code");
    END;

    [Test]
    PROCEDURE CopyDocumentWithDimension@1();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Dimension@1003 : Record 348;
      DefaultDimension@1004 : Record 352;
      PurchRcptHeader@1007 : Record 120;
      PurchRcptLine@1002 : Record 121;
    BEGIN
      // Test Dimension on Purchase Invoice Created from Copy Document.

      // 1. Setup: Create Vendor with Default Dimension, Item, Create and Post Purchase Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Dimension.Code,FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" ",
        PurchaseHeader."Document Type"::Order);
      UpdatePartialQuantityToReceive(PurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      PurchRcptHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchRcptHeader.FINDFIRST;

      // 2. Exercise: Create Purchase Invoice through Copy Document.
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,PurchaseLine."Buy-from Vendor No.");
      RunCopyPurchaseDocument(PurchaseHeader,PurchRcptHeader."No.");

      // 3. Verify: Verify Dimension on Purchase Header and Purchase Line.
      PurchaseHeader.TESTFIELD("Dimension Set ID",PurchRcptHeader."Dimension Set ID");
      PurchaseLine.SETFILTER(Type,'<>''''');
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Dimension Set ID",PurchRcptLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE DimensionOnRequisitionLine@114();
    VAR
      RequisitionLine@1012 : Record 246;
      RequisitionWkshName@1013 : Record 245;
      DimensionSetID@1019 : Integer;
    BEGIN
      // Test Dimension on Requisition Line created from Get Sales Order.

      // 1. Setup, Exercise: Create Customer, Sales Order having Purchasing Code with Drop Shipment True, Create Dimension Set Entry for
      // Sales Line and Run Get Sales Order from Requisition Worksheet.
      Initialize;
      CreateRequisitionLine(RequisitionWkshName,DimensionSetID);

      // 2. Verify: Verify Dimension on Requisition Line.
      FindRequisitionLine(RequisitionLine,RequisitionWkshName);
      RequisitionLine.TESTFIELD("Dimension Set ID",DimensionSetID);

      // 3. Teardown: Delete created Requisition Line.
      RequisitionLine.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DropShipment@73();
    VAR
      SalesHeader@1003 : Record 36;
      DefaultDimension@1004 : Record 352;
      RequisitionLine@1012 : Record 246;
      PurchRcptHeader@1007 : Record 120;
      RequisitionWkshName@1013 : Record 245;
      DimensionSetID@1020 : Integer;
      DimensionCode@1021 : Code[20];
      OrderNo@1001 : Code[20];
    BEGIN
      // Test Dimension on Purchase Receipt created from Drop Shipment functionality.

      // 1. Setup: Create Customer, Sales Order having Purchasing Code with Drop Shipment True, Create Dimension Set Entry for Sales Line
      // and Run Get Sales Order from Requisition Worksheet.
      Initialize;
      DimensionCode := CreateRequisitionLine(RequisitionWkshName,DimensionSetID);
      UpdateVendorOnRequisitionLine(
        RequisitionLine,RequisitionWkshName,
        CreateVendorWithDimension(DefaultDimension,DefaultDimension."Value Posting"::" ",FindDifferentDimension(DimensionCode)));

      // 2. Exercise: Create Purcahse Order from Requisition Worksheet, Post Sales Order and Purchase Order.
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
      SalesHeader.GET(SalesHeader."Document Type"::Order,RequisitionLine."Sales Order No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      OrderNo := PostPurchaseOrder(RequisitionLine."Vendor No.");

      // 3. Verify: Verify Dimension on Purchase Receipt.
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
      PurchRcptHeader.TESTFIELD("Dimension Set ID",RequisitionLine."Dimension Set ID");
      VerifyDimensionOnReceiptLine(PurchRcptHeader."No.",RequisitionLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE DimensionOnInvoiceRounding@33();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Dimension@1002 : Record 348;
      DefaultDimension@1004 : Record 352;
      LibraryUtility@1012 : Codeunit 131000;
    BEGIN
      // Test Dimension on G/L Entry of Invoice Rounding.

      // 1. Setup: Update Inv. Rounding Precision (LCY) on General Ledger Setup, Create Vendor with Default Dimension, Item,
      // Create Purchase Invoice and Update Line Amount on Purchase Line.
      Initialize;
      LibraryPurchase.SetInvoiceRounding(TRUE);
      LibraryDimension.FindDimension(Dimension);

      // Add 0.01 to random fraction as 0.01 rounding precision means no rounding.
      LibraryERM.SetInvRoundingPrecisionLCY(LibraryUtility.GenerateRandomFraction + 0.01);

      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Dimension.Code,'',DefaultDimension."Value Posting"::" ",PurchaseHeader."Document Type"::Invoice);
      UpdateInvoiceAmountForRounding(PurchaseLine);

      // 2. Exercise: Post Purchase Invoice.
      UpdateVendorInvoiceNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,FALSE);

      // 3. Verify: Verify Dimension on G/L Entry of Invoice Rounding.
      VerifyDimensionOnRoundingEntry(PurchaseHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE ArchiveDocument@40();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Dimension@1003 : Record 348;
      DefaultDimension@1004 : Record 352;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // Test Dimension on Archive Purchase Order.

      // 1. Setup: Create Vendor with Default Dimension, Item, Purchase Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Dimension.Code,'',DefaultDimension."Value Posting"::" ",PurchaseHeader."Document Type"::Order);

      // 2. Exercise: Create Archive Purchase Order.
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);

      // 3. Verify: Verify Dimension on Archive Purchase Order.
      VerifyDimensionOnArchiveHeader(PurchaseHeader);
      VerifyDimensionOnArchiveLine(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(PurchaseCodePageHandler)]
    PROCEDURE DimensionStandardPurchaseCode@30();
    VAR
      Item@1005 : Record 27;
      Dimension@1003 : Record 348;
      StandardPurchaseLine@1009 : Record 174;
      Vendor@1013 : Record 23;
      PurchaseHeader@1015 : Record 38;
      DifferentDimensionCode@1012 : Code[20];
    BEGIN
      // Test Dimension on Standard Purchase Code.

      // 1. Setup : Create Item and find Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateItemWithExtendedText(Item,Dimension.Code);

      // 2. Excercise : Create Vendor, GL Account, Standard Purchase Code, Standard Purchase Line and Standard Vendor Purchase Code.
      DifferentDimensionCode :=
        CreateStandardPurchaseDocument(
          StandardPurchaseLine,Dimension.Code,Item."No.",CreateGLAccountWithDimension(Dimension.Code,Item."VAT Prod. Posting Group"));
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendorPurchaseCode(StandardVendorPurchaseCode,Vendor."No.",StandardPurchaseLine."Standard Purchase Code");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      StandardVendorPurchaseCode.InsertPurchLines(PurchaseHeader);

      // 3. Verify : Verify that Line Dimensions copied from Standard Purchase Line.
      VerifyDimensionCode(StandardPurchaseLine."Dimension Set ID",DifferentDimensionCode);
    END;

    [Test]
    PROCEDURE PurchaseLineDimension@56();
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      DefaultDimension@1000 : Record 352;
      DefaultDimension2@1001 : Record 352;
      PurchaseLine@1003 : Record 39;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      // Check Purchase Line Dimension.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Credit Memo.
      GeneralLedgerSetup.GET;
      CreatePurchaseDocument(PurchaseLine,SetGLAccountDefaultDimension(DefaultDimension,GeneralLedgerSetup."Global Dimension 1 Code"),
        CreateVendorWithDimension(DefaultDimension2,DefaultDimension."Value Posting",GeneralLedgerSetup."Global Dimension 1 Code"));

      // Verify: Verify Dimension Value on Purchase Line.
      DimensionSetEntry.GET(PurchaseLine."Dimension Set ID",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",PurchaseLine."Shortcut Dimension 1 Code");

      // Tear Down: Remove Default Dimension from G/L Account.
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    PROCEDURE GLEntryDimensionsForPurchase@55();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      DefaultDimension@1000 : Record 352;
      DefaultDimension2@1001 : Record 352;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PostedDocumentNo@1005 : Code[20];
    BEGIN
      // Test Dimension on G/L Entry after posting Purchase document with IC Partner.

      // Setup: Set Default Dimension for G/L Account and Create Purchase Credit Memo.
      Initialize;
      GeneralLedgerSetup.GET;
      CreatePurchaseDocument(PurchaseLine,SetGLAccountDefaultDimension(DefaultDimension,GeneralLedgerSetup."Global Dimension 1 Code"),
        CreateVendorWithDimension(DefaultDimension2,DefaultDimension."Value Posting",GeneralLedgerSetup."Global Dimension 1 Code"));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("IC Partner Code",FindICPartner);
      PurchaseLine.VALIDATE("IC Partner Reference",FindICGLAccount);
      PurchaseLine.MODIFY(TRUE);

      // Exercise: Post Purchase Credit Memo.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Dimension Value and IC Partner Code on GL Entry.
      VerifyGLEntryICPartner(PostedDocumentNo,PurchaseLine."IC Partner Code",DefaultDimension."Dimension Value Code");

      // Tear Down: Remove Default Dimension from G/L Account.
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    PROCEDURE DimensionAfterApplyForVendor@62();
    VAR
      Dimension@1001 : Record 348;
      DefaultDimension@1002 : Record 352;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Test Dimension on G/L Entry after Apply from Vendor Ledger Entry.

      // Setup: Find Dimension, Create and Post General Journal Line. Using Random value for Amount.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateAndPostGenJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,
        CreateVendorWithDimension(DefaultDimension,DefaultDimension."Value Posting"::" ",Dimension.Code),
        -LibraryRandom.RandDec(100,2));

      // Exercise: Apply Payment from Vendor Ledger Entry.
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document Type");

      // Verify: Verify Dimension on G/L Entry.
      VerifyGLEntry(GenJournalLine."Document No.",Dimension.Code);
    END;

    [Test]
    PROCEDURE DimensionOnPurchaseOrderLine@52();
    VAR
      Dimension@1000 : Record 348;
      DefaultDimension@1003 : Record 352;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test Dimension on Purchase Order Line.

      // 1. Setup: Find Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);

      // 2. Exercise: Create Purchase Order.
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Code Mandatory",
        PurchaseHeader."Document Type"::Order);

      // 3. Verify: Verify Dimension on Purchase Line.
      VerifyDimensionOnPurchaseOrderLine(PurchaseHeader."Document Type",PurchaseHeader."No.",Dimension.Code);
    END;

    [Test]
    PROCEDURE QuantityReceivedOnPurchaseLine@42();
    VAR
      Dimension@1000 : Record 348;
      DefaultDimension@1003 : Record 352;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      QtytoReceive@1004 : Decimal;
    BEGIN
      // Test "Quantity Received" on posting the Purchase Order as Receipt.

      // 1. Setup: Find Dimension And Create Purchase Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Code Mandatory",
        PurchaseHeader."Document Type"::Order);
      QtytoReceive := PurchaseLine."Qty. to Receive";

      // 2. Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Transfer "Quantity Received" on Purchase Line.
      VerifyQuantityReceivedOnPurchaseLine(PurchaseHeader."Document Type",PurchaseHeader."No.",QtytoReceive);
    END;

    [Test]
    PROCEDURE ReceiptLineOnPostedPurchaseReceipt@35();
    VAR
      Dimension@1000 : Record 348;
      DefaultDimension@1003 : Record 352;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test Receipt Line on Posted Purchase Receipt.

      // 1. Setup: Find Dimension And Create Purchase Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Code Mandatory",
        PurchaseHeader."Document Type"::Order);

      // 2. Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Verify Receipt Line on Posted Purchase Receipt.
      VerifyReceiptLineOnPostedPurchaseReceipt(PurchaseLine);
    END;

    [Test]
    PROCEDURE DimensionOnPurchaseReceipt@25();
    VAR
      Dimension@1000 : Record 348;
      DefaultDimension@1003 : Record 352;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test Dimension on Posted Purchase Receipt.

      // 1. Setup: Find Dimension And Create Purchase Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Code Mandatory",
        PurchaseHeader."Document Type"::Order);

      // 2. Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Verify Dimension on Posted Purchase Receipt.
      VerifyDimensionOnPurchaseReceipt(PurchaseLine."Document No.",Dimension.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE UndoPostedPurchaseReceipt@17();
    VAR
      Dimension@1000 : Record 348;
      DefaultDimension@1003 : Record 352;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1005 : Record 121;
    BEGIN
      // Test Quantity after Undo Receipt on Posted Purchase Receipt.

      // 1. Setup: Find Dimension, Create And Post Purchase Order, Find Purchase Receipt Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Code Mandatory",
        PurchaseHeader."Document Type"::Order);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchRcptLine.SETRANGE("Order No.",PurchaseLine."Document No.");
      PurchRcptLine.FINDFIRST;

      // 2. Exercise: Undo Purchase Receipt Line.
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // 3. Verify: Verify Quantity after Undo Receipt on Posted Purchase Receipt And Quantity to Receive on Purchase Line.
      VerifyUndoReceiptLineOnPostedReceipt(PurchaseLine."Document No.",PurchaseLine.Quantity);
      VerifyQuantitytoReceiveOnPurchaseLine(PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Quantity Received");
    END;

    [Test]
    PROCEDURE UnapplyVendorLedgerEntryWithDifferentDimensionSetID@74();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorLedgerEntry@1005 : Record 25;
      Vendor@1002 : Record 23;
      NewDimSetID@1006 : Integer;
      NewDimSetID2@1003 : Integer;
    BEGIN
      // Test Unapply Vendor Ledger Entries successfully when entries have different dimension set ID

      // Setup: Create Dimension with 2 Dimension Values, Create and Post General Journal Line with different Dimension Set ID.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateDimensionWithTwoDimensionValue(NewDimSetID,NewDimSetID2);
      CreateAndPostGenJournalLinesWithDimSetID(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",
        -LibraryRandom.RandDec(100,2),NewDimSetID,NewDimSetID2);

      // Exercise: Apply Payment from Vendor Ledger Entry.
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document Type");

      // Exercise: Unapply the entries
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");
      LibraryERM.UnapplyVendorLedgerEntry(VendorLedgerEntry);

      // Verify: Verify Unapply successfully. Vendor Ledger Entries are open again.
      VerifyVendorLedgerEntryOpen(GenJournalLine."Document No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForPurchHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmYes@76();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Purchase Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      PurchaseHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForPurchaseHeaderDimUpdate

      // [THEN] Purchase Line dimension set contains "NewDimValue"
      PurchaseLine.FIND;
      VerifyDimensionOnDimSet(PurchaseLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForPurchHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmNo@75();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      SavedDimSetID := PurchaseLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Purchase Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      ASSERTERROR PurchaseHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer No on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForPurchaseHeaderDimUpdate

      // [THEN] Purchase Line dimension set left "InitialDimSetID"
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForPurchHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmYes@80();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      PurchaseOrder@1003 : TestPage 50;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Header dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Purchase Header dimension set is being updated in Edit Dimension Set Entries page
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForPurchaseHeaderDimUpdate

      // [THEN] Purchase Line dimension set contains "NewDimValue"
      PurchaseLine.FIND;
      VerifyDimensionOnDimSet(PurchaseLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForPurchHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmNo@109();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      PurchaseOrder@1003 : TestPage 50;
      SavedDimSetID@1004 : Integer;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Header dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      SavedDimSetID := PurchaseLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Purchase Header dimension set is being updated in Edit Dimension Set Entries page
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      ASSERTERROR PurchaseOrder.Dimensions.INVOKE;

      // [WHEN] Answer No on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForPurchaseHeaderDimUpdate

      // [THEN] Purchase Line dimension set left "InitialDimSetID"
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmYes@115();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Line Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Purchase Line Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      PurchaseLine.FIND;
      PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Purchase Line dimension set contains "NewDimValue"
      VerifyDimensionOnDimSet(PurchaseLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmNo@69();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Line Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      SavedDimSetID := PurchaseLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Purchase Line Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      PurchaseLine.FIND;
      ASSERTERROR PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer No on shipped line update confirmation

      // [THEN] Purchase Line dimension set left "InitialDimSetID"
      PurchaseLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmYes@65();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      PurchaseOrder@1003 : TestPage 50;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Line dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Purchase Line dimension set is being updated in Edit Dimension Set Entries page
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines.FIRST;
      PurchaseOrder.PurchLines.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Purchase Line dimension set contains "NewDimValue"
      PurchaseLine.FIND;
      VerifyDimensionOnDimSet(PurchaseLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmNo@67();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DimensionValue@1002 : Record 349;
      PurchaseOrder@1003 : TestPage 50;
      SavedDimSetID@1004 : Integer;
    BEGIN
      // [FEATURE] [Purchase] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Purchase Line dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Purchase Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyReceiptPurchOrder(PurchaseHeader,PurchaseLine);
      SavedDimSetID := PurchaseLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Purchase Line dimension set is being updated in Edit Dimension Set Entries page
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines.FIRST;
      ASSERTERROR PurchaseOrder.PurchLines.Dimensions.INVOKE;

      // [WHEN] Answer No on shipped line update confirmation

      // [THEN] Purchase Line dimension set left "InitialDimSetID"
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
    END;

    LOCAL PROCEDURE ApplyAndPostVendorEntry@66(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentType@1001 : Option);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,VendorLedgerEntry2."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry2.FINDSET;
      REPEAT
        VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
        VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
        VendorLedgerEntry2.MODIFY(TRUE);
      UNTIL VendorLedgerEntry2.NEXT = 0;

      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE ChangeDimensionPurchaseHeader@13(VAR PurchaseHeader@1000 : Record 38;ShortcutDimensionCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Update Dimension value on Purchase Header.
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseHeader."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      DimensionSetEntry.FINDFIRST;
      PurchaseHeader.VALIDATE(
        "Shortcut Dimension 1 Code",
        FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyDimensionSetEntry@207(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;VAR DimensionSetEntry@1001 : Record 480);
    BEGIN
      REPEAT
        TempDimensionSetEntry := DimensionSetEntry;
        TempDimensionSetEntry.INSERT;
      UNTIL DimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateDimensionForSalesLine@236(VAR SalesLine@1000 : Record 37) : Code[20];
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      DimensionSetID@1005 : Integer;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      DimensionSetID := LibraryDimension.CreateDimSet(SalesLine."Dimension Set ID",Dimension.Code,DimensionValue.Code);
      SalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesLine.MODIFY(TRUE);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntry@21(VAR DimensionSetID@1000 : Integer;ShortcutDimensionCode@1005 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,FindDifferentDimension(ShortcutDimensionCode));
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);

      LibraryDimension.FindDimensionValue(DimensionValue,ShortcutDimensionCode);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,ShortcutDimensionCode,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntryHeader@157(VAR PurchaseHeader@1000 : Record 38;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := PurchaseHeader."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      PurchaseHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntryLine@165(VAR PurchaseLine@1000 : Record 39;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := PurchaseLine."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      PurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionWithTwoDimensionValue@77(VAR NewDimSetID@1005 : Integer;VAR NewDimSetID2@1006 : Integer);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      DimensionValue2@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue2,Dimension.Code);
      NewDimSetID := LibraryDimension.CreateDimSet(NewDimSetID,Dimension.Code,DimensionValue.Code);
      NewDimSetID2 := LibraryDimension.CreateDimSet(NewDimSetID2,Dimension.Code,DimensionValue2.Code);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@110(DimensionCode@1004 : Code[20];ValuePosting@1001 : Option) ItemNo : Code[20];
    VAR
      Item@1000 : Record 27;
      DefaultDimension@1003 : Record 352;
      DimensionValue@1006 : Record 349;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryUtility@1005 : Codeunit 131000;
    BEGIN
      LibraryInventory.CreateItem(Item);
      // Use Random because value is not important.
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateOrderWithDimension@12(VAR TempDimensionSetEntry@1001 : TEMPORARY Record 480;VAR DimensionValueCode@1006 : Code[20];VAR ShortcutDimensionCode@1004 : Code[20];VAR DimensionSetID@1005 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      GeneralLedgerSetup@1007 : Record 98;
      DefaultDimension@1008 : Record 352;
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      // Setup: Create Vendor, Item, Purchase Header and Purchase Line with Dimension.
      GeneralLedgerSetup.GET;
      ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code";
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'','',DefaultDimension."Value Posting"::" ",PurchaseHeader."Document Type"::Order);
      CreateDimensionSetEntryHeader(PurchaseHeader,ShortcutDimensionCode);
      CreateDimensionSetEntryLine(PurchaseLine,ShortcutDimensionCode);

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseLine."Dimension Set ID");
      CopyDimensionSetEntry(TempDimensionSetEntry,DimensionSetEntry);
      TempDimensionSetEntry.SETFILTER("Dimension Code",'<>%1',ShortcutDimensionCode);
      TempDimensionSetEntry.FINDSET;

      // Exercise: Change Dimension Value for Purchase Header Shortcut Dimension.
      ChangeDimensionPurchaseHeader(PurchaseHeader,ShortcutDimensionCode);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      DimensionValueCode := PurchaseHeader."Shortcut Dimension 1 Code";
      DimensionSetID := PurchaseLine."Dimension Set ID";
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@112(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1002 : Record 39;VendorDimensionCode@1000 : Code[20];ItemDimensionCode@1001 : Code[20];ValuePosting@1004 : Option;DocumentType@1005 : Option);
    VAR
      DefaultDimension@1008 : Record 352;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,DocumentType,CreateVendorWithDimension(DefaultDimension,ValuePosting,VendorDimensionCode));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithDimension(ItemDimensionCode,ValuePosting),
        LibraryRandom.RandDec(10,2));  // Take Random Value for Quantity.
    END;

    LOCAL PROCEDURE CreateRequisitionLine@311(VAR RequisitionWkshName@1000 : Record 245;VAR DimensionSetID@1002 : Integer) DimensionCode : Code[20];
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Customer, Sales Order having Purchasing Code with Drop Shipment True, Create Dimension Set Entry for Sales Line.
      CreateSalesOrderPurchasingCode(SalesLine);
      DimensionCode := CreateDimensionForSalesLine(SalesLine);
      DimensionSetID := SalesLine."Dimension Set ID";

      // Run get Sales Order from Requisition Worksheet.
      GetSalesOrder(RequisitionWkshName,SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesLinePurchasingCode@48(VAR SalesLine@1002 : Record 37;SalesHeader@1003 : Record 36);
    BEGIN
      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,
        SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Purchasing Code",FindPurchasingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderPurchasingCode@39(VAR SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLinePurchasingCode(SalesLine,SalesHeader);
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@88(VAR DefaultDimension@1000 : Record 352;ValuePosting@1004 : Option;DimensionCode@1001 : Code[20]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      IF DimensionCode = '' THEN
        EXIT(Vendor."No.");
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItemWithExtendedText@26(VAR Item@1005 : Record 27;DimensionCode@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1001 : Record 280;
      LibraryService@1006 : Codeunit 131902;
    BEGIN
      Item.GET(CreateItemWithDimension(DimensionCode,DefaultDimension."Value Posting"::" "));
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
    END;

    LOCAL PROCEDURE CreateGLAccountWithDimension@23(DimensionCode@1004 : Code[20];VATProdPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      GLAccount@1001 : Record 15;
      DefaultDimension@1003 : Record 352;
      DimensionValue@1006 : Record 349;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::" ");
      DefaultDimension.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateStandardPurchaseDocument@20(VAR StandardPurchaseLine@1000 : Record 174;DimensionCode@1004 : Code[20];ItemNo@1001 : Code[20];GLAccountNo@1005 : Code[20]) DifferentDimensionCode : Code[20];
    VAR
      StandardPurchaseCode@1002 : Record 173;
    BEGIN
      LibraryPurchase.CreateStandardPurchaseCode(StandardPurchaseCode);
      CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code,StandardPurchaseLine.Type::Item,ItemNo);
      DifferentDimensionCode := FindDifferentDimension(DimensionCode);
      UpdateDimensionSetID(StandardPurchaseLine,DifferentDimensionCode);
      CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code,StandardPurchaseLine.Type::"G/L Account",GLAccountNo);

      // Use Random because value is not important.
      StandardPurchaseLine.VALIDATE("Amount Excl. VAT",StandardPurchaseLine.Quantity * LibraryRandom.RandDec(10,2));
      StandardPurchaseLine.MODIFY(TRUE);
      UpdateDimensionSetID(StandardPurchaseLine,DifferentDimensionCode);
    END;

    LOCAL PROCEDURE CreateStandardPurchaseLine@28(VAR StandardPurchaseLine@1000 : Record 174;StandardPurchaseCode@1001 : Code[10];Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      LibraryPurchase.CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode);
      StandardPurchaseLine.VALIDATE(Type,Type);
      StandardPurchaseLine.VALIDATE("No.",No);
      // Use Random because value is not important.
      StandardPurchaseLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      StandardPurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@15(VAR GenJournalLine@1000 : Record 81;AccountType@1002 : Option;AccountNo@1003 : Code[20];Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,Amount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGenJournalLineWithDimSetID@72(GenJournalBatch@1001 : Record 232;VAR GenJournalLine@1000 : Record 81;DocumentType@1006 : Option;AccountType@1002 : Option;AccountNo@1003 : Code[20];Amount@1004 : Decimal;NewDimSetID@1005 : Integer);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Dimension Set ID",NewDimSetID);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLinesWithDimSetID@78(VAR GenJournalLine@1000 : Record 81;AccountType@1002 : Option;AccountNo@1003 : Code[20];Amount@1004 : Decimal;DimSetID@1005 : Integer;DimSetID2@1006 : Integer);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      CreateGenJournalLineWithDimSetID(
        GenJournalBatch,GenJournalLine,GenJournalLine."Document Type"::Invoice,AccountType,AccountNo,Amount,DimSetID);
      CreateGenJournalLineWithDimSetID(
        GenJournalBatch,GenJournalLine,GenJournalLine."Document Type"::Payment,AccountType,AccountNo,-GenJournalLine.Amount,DimSetID2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePartlyReceiptPurchOrder@86(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDecInDecimalRange(10,20,2));
      UpdatePartialQuantityToReceive(PurchaseLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateGlobal1DimensionValue@85(VAR DimensionValue@1000 : Record 349) : Code[20];
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GLSetup."Global Dimension 1 Code");
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDifferentDimension@19(Code@1002 : Code[20]) : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      Dimension.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE FindDifferentDimensionValue@126(DimensionCode@1001 : Code[20];Code@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDimensionSetEntry@63(VAR DimensionSetEntry@1000 : Record 480;ShortcutDimensionCode@1002 : Code[20];DimensionSetID@1001 : Integer);
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
    END;

    LOCAL PROCEDURE FindGLEntry@5(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@6(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrder@34(VAR PurchaseHeader@1000 : Record 38;QuoteNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("Quote No.",QuoteNo);
      PurchaseHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchasingCode@46() : Code[10];
    VAR
      Purchasing@1000 : Record 5721;
      RecordRef@1001 : RecordRef;
    BEGIN
      Purchasing.INIT;
      Purchasing.SETRANGE("Drop Shipment",TRUE);
      RecordRef.GETTABLE(Purchasing);
      LibraryUtility.FindRecord(RecordRef);
      RecordRef.SETTABLE(Purchasing);
      EXIT(Purchasing.Code);
    END;

    LOCAL PROCEDURE FindRequisitionLine@44(VAR RequisitionLine@1000 : Record 246;RequisitionWkshName@1001 : Record 245);
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetSalesOrder@93(VAR RequisitionWkshName@1003 : Record 245;SalesLine@1000 : Record 37);
    VAR
      ReqWkshTemplate@1005 : Record 244;
      RequisitionLine@1004 : Record 246;
      LibraryPlanning@1006 : Codeunit 132203;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,RequisitionWkshName."Template Type"::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      COMMIT;
      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);

      RunGetSalesOrders(SalesLine,RequisitionLine);
    END;

    LOCAL PROCEDURE PostPurchaseOrder@412(BuyFromVendorNo@1001 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      PurchaseHeader.FINDFIRST;
      UpdateVendorInvoiceNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE RunCopyPurchaseDocument@87(PurchaseHeader@1000 : Record 38;DocumentNo@1001 : Code[20]);
    VAR
      CopyPurchaseDocument@1002 : Report 492;
      DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      COMMIT;
      CLEAR(CopyPurchaseDocument);
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocumentType::"Posted Shipment",DocumentNo,TRUE,FALSE);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE RunGetSalesOrders@50(SalesLine@1000 : Record 37;RequisitionLine@1001 : Record 246);
    VAR
      GetSalesOrders@1003 : Report 698;
      RetrieveDimensions@1002 : 'Item,Sales Line';
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      CLEAR(GetSalesOrders);
      GetSalesOrders.SETTABLEVIEW(SalesLine);
      GetSalesOrders.InitializeRequest(RetrieveDimensions::"Sales Line");
      GetSalesOrders.SetReqWkshLine(RequisitionLine,0);
      GetSalesOrders.USEREQUESTPAGE(FALSE);
      GetSalesOrders.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@32(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and delete General Journal Lines before creating new General Journal Lines in the General Journal
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdateDimensionPurchaseHeader@18(PurchaseHeader@1000 : Record 38) DimensionSetID : Integer;
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Update Dimension value on Purchase Header Dimension.
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseHeader."Dimension Set ID");
      DimensionSetID :=
        LibraryDimension.EditDimSet(
          DimensionSetEntry."Dimension Set ID",DimensionSetEntry."Dimension Code",
          FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      PurchaseHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionPurchaseLine@36(VAR PurchaseLine@1000 : Record 39);
    VAR
      DimensionSetEntry@1001 : Record 480;
      DimensionSetID@1002 : Integer;
    BEGIN
      // Update Dimension value on Purchase Line Dimension.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseLine."Dimension Set ID");
      DimensionSetID :=
        LibraryDimension.EditDimSet(
          DimensionSetEntry."Dimension Set ID",DimensionSetEntry."Dimension Code",
          FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      PurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQuantityToReceive@64(PurchaseLine@1000 : Record 39);
    VAR
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity * LibraryUtility.GenerateRandomFraction);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNo@27(VAR PurchaseHeader@1000 : Record 38);
    VAR
      LibraryUtility@1001 : Codeunit 131000;
    BEGIN
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorOnRequisitionLine@272(VAR RequisitionLine@1000 : Record 246;RequisitionWkshName@1001 : Record 245;VendorNo@1002 : Code[20]);
    BEGIN
      FindRequisitionLine(RequisitionLine,RequisitionWkshName);
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionSetID@14(VAR StandardPurchaseLine@1003 : Record 174;DifferentDimension@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DimensionSetID@1002 : Integer;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DifferentDimension);
      DimensionSetID := LibraryDimension.CreateDimSet(StandardPurchaseLine."Dimension Set ID",DifferentDimension,DimensionValue.Code);
      StandardPurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
      StandardPurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInvoiceAmountForRounding@68(VAR PurchaseLine@1000 : Record 39);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Use Random because value is not important.
      GeneralLedgerSetup.FINDFIRST;
      PurchaseLine.VALIDATE("Line Amount",LibraryRandom.RandInt(100));

      // Make sure that Rounding G/L Entry will be created, in case Line Amount doesn't need rounding.
      IF PurchaseLine."Line Amount" MOD GeneralLedgerSetup."Inv. Rounding Precision (LCY)" = 0 THEN
        PurchaseLine.VALIDATE("Line Amount",PurchaseLine."Line Amount" + GeneralLedgerSetup."Inv. Rounding Precision (LCY)" / 2);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@54(VAR PurchaseLine@1003 : Record 39;GLAccountCode@1002 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Create Purchase Credit Memo and modify Purchase Line with Random values.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountCode,LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE SetGLAccountDefaultDimension@51(VAR DefaultDimension@1003 : Record 352;DimensionCode@1000 : Code[20]) : Code[20];
    VAR
      GLAccount@1004 : Record 15;
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindICPartner@49() : Code[20];
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      ICPartner.SETRANGE(Blocked,FALSE);
      ICPartner.FINDFIRST;
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE FindICGLAccount@47() : Code[20];
    VAR
      ICGLAccount@1000 : Record 410;
    BEGIN
      ICGLAccount.SETRANGE("Account Type",ICGLAccount."Account Type"::Posting);
      ICGLAccount.SETRANGE(Blocked,FALSE);
      ICGLAccount.FINDFIRST;
      EXIT(ICGLAccount."No.");
    END;

    LOCAL PROCEDURE DeleteDefaultDimension@38(DefaultDimension@1000 : Record 352);
    BEGIN
      DefaultDimension.GET(DefaultDimension."Table ID",DefaultDimension."No.",DefaultDimension."Dimension Code");
      DefaultDimension.DELETE(TRUE);
    END;

    LOCAL PROCEDURE VerifyDimensionOnArchiveHeader@53(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeaderArchive.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseHeaderArchive.FINDFIRST;
      PurchaseHeaderArchive.TESTFIELD("Dimension Set ID",PurchaseHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionOnArchiveLine@57(PurchaseLine@1000 : Record 39);
    VAR
      PurchaseLineArchive@1001 : Record 5110;
    BEGIN
      PurchaseLineArchive.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLineArchive.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLineArchive.FINDFIRST;
      PurchaseLineArchive.TESTFIELD("Dimension Set ID",PurchaseLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionOnReceiptLine@337(DocumentNo@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionOnRoundingEntry@290(PurchaseHeader@1004 : Record 38);
    VAR
      PurchInvHeader@1003 : Record 122;
      GLEntry@1001 : Record 17;
      VendorPostingGroup@1000 : Record 93;
    BEGIN
      VendorPostingGroup.GET(PurchaseHeader."Vendor Posting Group");

      PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseHeader."No.");
      PurchInvHeader.FINDFIRST;

      GLEntry.SETRANGE("G/L Account No.",VendorPostingGroup."Invoice Rounding Account");
      FindGLEntry(GLEntry,PurchInvHeader."No.");
      GLEntry.TESTFIELD("Dimension Set ID",PurchaseHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@220(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      REPEAT
        DimensionSetEntry.SETRANGE("Dimension Code",TempDimensionSetEntry."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        DimensionSetEntry.TESTFIELD("Dimension Value Code",TempDimensionSetEntry."Dimension Value Code");
      UNTIL TempDimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryDimension@82(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
      PurchInvLine@1003 : Record 123;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.SETRANGE("No.",PurchaseLine."No.");
      PurchInvLine.FINDFIRST;

      GLEntry.SETRANGE(Amount,PurchInvLine.Amount);
      FindGLEntry(GLEntry,DocumentNo);
      GLEntry.TESTFIELD("Dimension Set ID",PurchaseLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionCode@10(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Code",DimensionCode)
    END;

    LOCAL PROCEDURE VerifyGLEntryICPartner@41(DocumentNo@1003 : Code[20];ICPartnerCode@1001 : Code[20];GlobalDimensionCode@1004 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Bal. Account Type",GLEntry."Bal. Account Type"::"IC Partner");
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Global Dimension 1 Code",GlobalDimensionCode);
      GLEntry.TESTFIELD("IC Partner Code",ICPartnerCode);
    END;

    LOCAL PROCEDURE VerifyGLEntry@45(DocumentnNo@1001 : Code[20];DimensionCode@1005 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentnNo);
      GLEntry.FINDSET;
      REPEAT
        Assert.IsTrue(DimensionSetEntry.GET(GLEntry."Dimension Set ID",DimensionCode),'Dimension Set Entry must found');
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionOnPurchaseOrderLine@61(DocumentType@1005 : Option;DocumentNo@1004 : Code[20];DimensionCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1002 : Record 480;
      PurchaseLine@1000 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      DimensionSetEntry.SETRANGE("Dimension Set ID",PurchaseLine."Dimension Set ID");
      DimensionSetEntry.FINDFIRST;
      Assert.AreEqual(
        DimensionCode,DimensionSetEntry."Dimension Code",
        STRSUBSTNO(DimensionValueCodeError,DimensionSetEntry.FIELDCAPTION("Dimension Code"),DimensionCode));
    END;

    LOCAL PROCEDURE VerifyQuantityReceivedOnPurchaseLine@60(DocumentType@1001 : Option;DocumentNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      Assert.AreEqual(
        Quantity,PurchaseLine."Quantity Received",
        STRSUBSTNO(QuantityReceivedError,PurchaseLine.FIELDCAPTION("Quantity Received"),Quantity,PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyReceiptLineOnPostedPurchaseReceipt@59(PurchaseLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchaseLine."Document No.");
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD(Type,PurchaseLine.Type);
      PurchRcptLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchRcptLine.TESTFIELD("Location Code",PurchRcptLine."Location Code");
      PurchRcptLine.TESTFIELD(Quantity,PurchRcptLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyDimensionOnPurchaseReceipt@58(DocumentNo@1001 : Code[20];DimensionCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1002 : Record 480;
      PurchRcptLine@1000 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",DocumentNo);
      PurchRcptLine.FINDFIRST;
      DimensionSetEntry.SETRANGE("Dimension Set ID",PurchRcptLine."Dimension Set ID");
      DimensionSetEntry.FINDFIRST;
      Assert.AreEqual(
        DimensionCode,DimensionSetEntry."Dimension Code",
        STRSUBSTNO(DimensionValueCodeError,DimensionSetEntry.FIELDCAPTION("Dimension Code"),DimensionCode));
    END;

    LOCAL PROCEDURE VerifyUndoReceiptLineOnPostedReceipt@70(DocumentNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",DocumentNo);
      PurchRcptLine.FINDLAST;
      Assert.AreEqual(
        Quantity,-PurchRcptLine.Quantity,
        STRSUBSTNO(QuantityReceivedError,PurchRcptLine.FIELDCAPTION(Quantity),Quantity,PurchRcptLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyQuantitytoReceiveOnPurchaseLine@89(DocumentType@1003 : Option;DocumentNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      Assert.AreEqual(
        Quantity,PurchaseLine."Qty. to Receive",
        STRSUBSTNO(QuantityReceivedError,PurchaseLine.FIELDCAPTION("Qty. to Receive"),Quantity,PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntryOpen@71(DocumentNo@1000 : Code[20];Open@1003 : Boolean);
    VAR
      VendorLedgerEntry@1005 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDSET;
      REPEAT
        Assert.AreEqual(Open,VendorLedgerEntry.Open,STRSUBSTNO(VendorLedgerEntryErr,Open,DocumentNo));
      UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionOnDimSet@84(DimSetID@1001 : Integer;DimensionValue@1002 : Record 349);
    VAR
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimMgt@1003 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimensionSetEntry,DimSetID);
      TempDimensionSetEntry.SETRANGE("Dimension Code",DimensionValue."Dimension Code");
      TempDimensionSetEntry.FINDFIRST;
      TempDimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@43(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerForPurchHeaderDimUpdate@83(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      CASE TRUE OF
        Question = UpdateFromHeaderLinesQst:
          Reply := TRUE;
        STRPOS(Question,UpdateLineDimQst) <> 0:
          Reply := LibraryVariableStorage.DequeueBoolean;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseCodePageHandler@31(VAR StandardVendorPurchaseCodes@1000 : Page 178;VAR Response@1005 : Action);
    BEGIN
      // Modal Page Handler.
      StandardVendorPurchaseCodes.SETRECORD(StandardVendorPurchaseCode);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesHandler@96(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      EditDimensionSetEntries.NEW;
      EditDimensionSetEntries."Dimension Code".SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      DE: Unable to Execute

      Test for Dimension on Purchase Documents:
        1. Test Dimension updation on Purchase Line after updation of Dimension on Purchase Header.
        2. Test error occurs on Posting Purchase Invoice with Invalid Dimension.
        3. Test Dimension on Purchase Order Created from Purchase Quote.
        4. Test Dimension on G/L Entry after Posting Purchase Invoice.
        5. Test Dimension on G/L Entry after Posting Purchase Order in Multiple Steps with Change Dimension Value on Purchase Line.
        6. Test Purchase Header Dimension after change Shortcut Dimension 2 Code on Purchase Invoice Header.
        7. Test Dimension on Purchase Invoice Created from Copy Document.
        8. Test Dimension on Purchase Receipt created from Drop Shipment Functionality.
        9. Test Dimension on G/L Entry of Invoice Rounding.
       10. Test Dimension on Archive Purchase Order.
       11. Test Dimension on Standard Purchase Code.
       12. Test Dimension on G/L Entry after Apply And Unapply from Vendor Ledger Entry.
       13. Check Purchase Line Dimension.
       14. Test Dimension on G/L Entry after posting Purchase document with IC Partner.
       15. Test Dimension on G/L Entry after Apply from Vendor Ledger Entry.
       16. Test Dimension on Purchase Order Line.
       17. Test "Quantity Received" on posting the Purchase Order as Receipt.
       18. Test Receipt Line on Posted Purchase Receipt.
       19. Test Dimension on Posted Purchase Receipt.
       20. Test Quantity after Undo Receipt on Posted Purchase Receipt And Quantity to Receive on Purchase Line.
       21. Test Unapply Vendor Ledger Entries successfully when entries have different dimension set ID

      TFS_TS_ID = 198717, 198718
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      DimensionUpdateOnLine, DimensionNotUpdateOnLine                140807
      ValuePostingRuleOnHeader, ValuePostingRuleOnLine               140808
      OrderFromQuoteWithDimension                                    140809
      GLEntryDimension                                               140811
      ChangeDimensionAfterPartial                                    140812
      ChangeShortcutDimensionInvoice                                 140813
      CopyDocumentWithDimension                                      140814
      DimensionOnRequisitionLine, DropShipment                       140815
      DimensionOnInvoiceRounding                                     140816
      ArchiveDocument                                                140818

      TFS_TS_ID = 216988
      Cover Test cases:
      ------------------------------------
      Test Function Name            TFS ID
      ------------------------------------
      DimensionStandardPurchaseCode 121589

      TFS_TS_ID = 237429
      Cover Test cases:
      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      DimensionAfterApplyUnapply  123759

      TFS_TS_ID = 252921
      Covers Test cases:
      -----------------------------------------------------------
      Test Function Name                                   TFS ID
      -----------------------------------------------------------
      PurchaseLineDimension,GLEntryDimensionsForPurchase   237040

      TFS_TS_ID = 259855
      Covers Test cases:
      ------------------------------------------------------
      Test Function Name                             TFS ID
      ------------------------------------------------------
      DimensionAfterApplyForVendor                   122007

      TFS_TS_ID = 264161
      Covers Test cases:
      ----------------------------------------------------------------------------------
      Test Function Name                                                      TFS ID
      ----------------------------------------------------------------------------------
      DimensionOnPurchaseOrderLine, QuantityReceivedOnPurchaseLine                 259255
      ReceiptLineOnPostedPurchaseReceipt, DimensionOnPurchaseReceipt
      UndoPostedPurchaseReceipt

      TFS_TS_ID = 95206
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------------
      UnapplyVendorLedgerEntryWithDifferentDimensionSetID          95206
    }
    END.
  }
}

