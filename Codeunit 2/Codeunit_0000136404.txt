OBJECT Codeunit 136404 Resource Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1001 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryHumanResource@1003 : Codeunit 131901;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryResource@1007 : Codeunit 130511;
      LibrarySales@1005 : Codeunit 130509;
      LibraryRandom@1008 : Codeunit 130440;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibraryTimeSheet@1011 : Codeunit 131904;
      Assert@1012 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      TestValidationTxt@1013 : TextConst 'ENU=TestValidation';
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      ValueType@1004 : 'Net Change,Balance at Date';

    [Test]
    [HandlerFunctions(AbsencesByCategoriesMatrix)]
    PROCEDURE AbsencesByCategories@3();
    VAR
      Employee@1000 : Record 5200;
      EmployeeAbsence@1003 : Record 5207;
      EmployeeCard@1002 : TestPage 5200;
      EmplAbsencesByCategories@1001 : TestPage 5226;
    BEGIN
      // Test Employee Absences by Category Matrix after creation of Employee Absence for Employee.

      // 1. Setup: Create Employee and Employee Absence for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.");
      LibraryVariableStorage.Enqueue(EmployeeAbsence."Quantity (Base)");  // Assign variable for page handler.

      // 2. Exercise: Run Employee Absences By Categories page from Employee card page and run Show Matrix from it.
      EmployeeCard.OPENEDIT;
      EmployeeCard.FILTER.SETFILTER("No.",Employee."No.");
      EmplAbsencesByCategories.TRAP;
      EmployeeCard."Page Empl. Absences by Categories".INVOKE;
      COMMIT;
      EmplAbsencesByCategories.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Employee Absences by Category Matrix performed on Employee Absences by Category Matrix page handler.
    END;

    [Test]
    PROCEDURE EmployeeAbsences@5();
    VAR
      Employee@1000 : Record 5200;
      EmployeeAbsence@1003 : Record 5207;
      EmployeeCard@1002 : TestPage 5200;
      EmployeeAbsences@1001 : TestPage 5211;
    BEGIN
      // Test values on Employee Absences page after creation of Employee Absence for Employee.

      // 1. Setup: Create Employee and Employee Absence for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.");

      // 2. Exercise: Run Employee Absences page from Employee card page.
      EmployeeCard.OPENEDIT;
      EmployeeCard.FILTER.SETFILTER("No.",Employee."No.");
      EmployeeAbsences.TRAP;
      EmployeeCard."Page Employee Absences".INVOKE;

      // 3. Verify: Verify values on Employee Absences page.
      EmployeeAbsences."Employee No.".ASSERTEQUALS(EmployeeAbsence."Employee No.");
      EmployeeAbsences."From Date".ASSERTEQUALS(EmployeeAbsence."From Date");
      EmployeeAbsences."Cause of Absence Code".ASSERTEQUALS(EmployeeAbsence."Cause of Absence Code");
      EmployeeAbsences.Quantity.ASSERTEQUALS(EmployeeAbsence.Quantity);
    END;

    [Test]
    [HandlerFunctions(ArticlesOverviewMatrixHandler)]
    PROCEDURE MiscellaneousOverview@4();
    VAR
      Employee@1000 : Record 5200;
      MiscArticle@1003 : Record 5213;
      MiscArticleInformation@1004 : Record 5214;
      EmployeeCard@1002 : TestPage 5200;
      MiscArticlesOverview@1001 : TestPage 5228;
    BEGIN
      // Test Miscellaneous Articles Overview Matrix after creation of Miscellaneous Article Information for Employee.

      // 1. Setup: Create Employee and Miscellaneous Article Information for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      MiscArticle.FINDFIRST;
      LibraryHumanResource.CreateMiscArticleInformation(MiscArticleInformation,Employee."No.",MiscArticle.Code);
      LibraryVariableStorage.Enqueue(Employee."No.");  // Assign variable for page handler.

      // 2. Exercise: Run Miscellaneous Articles Overview page from Employee card page and run Show Matrix from it.
      EmployeeCard.OPENEDIT;
      EmployeeCard.FILTER.SETFILTER("No.",Employee."No.");
      MiscArticlesOverview.TRAP;
      EmployeeCard."Page Misc. Articles Overview".INVOKE;
      COMMIT;
      MiscArticlesOverview.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Miscellaneous Articles Overview Matrix performed on Miscellaneous Articles Overview Matrix
      // page handler.
    END;

    [Test]
    [HandlerFunctions(ConfidentialOverviewMatrix)]
    PROCEDURE ConfidentialOverview@7();
    VAR
      Employee@1000 : Record 5200;
      Confidential@1003 : Record 5215;
      ConfidentialInformation@1005 : Record 5216;
      EmployeeCard@1002 : TestPage 5200;
      ConfidentialInfoOverview@1001 : TestPage 5229;
    BEGIN
      // Test Confidential Information Overview Matrix after creation of Confidential Information for Employee.

      // 1. Setup: Create Employee and Confidential Information for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      Confidential.FINDFIRST;
      LibraryHumanResource.CreateConfidentialInformation(ConfidentialInformation,Employee."No.",Confidential.Code);
      LibraryVariableStorage.Enqueue(Employee."No.");  // Assign variable for page handler.

      // 2. Exercise: Run Confidential Information Overview page from Employee card page and run Show Matrix from it.
      EmployeeCard.OPENEDIT;
      EmployeeCard.FILTER.SETFILTER("No.",Employee."No.");
      ConfidentialInfoOverview.TRAP;
      EmployeeCard."Page Confidential Info. Overview".INVOKE;
      COMMIT;
      ConfidentialInfoOverview.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Confidential Information Overview Matrix performed on Confidential Information Overview Matrix
      // page handler.
    END;

    [Test]
    [HandlerFunctions(AbsenceOverviewByPeriodMatrix)]
    PROCEDURE AbsenceByPeriod@9();
    VAR
      Employee@1000 : Record 5200;
      EmployeeAbsence@1003 : Record 5207;
      AbsenceRegistration@1002 : TestPage 5212;
      AbsenceOverviewByPeriods@1001 : TestPage 5225;
    BEGIN
      // Test Absence Overview by Period Matrix after creation of Employee Absence for Employee.

      // 1. Setup: Create Employee and Employee Absence for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.");

      // Assign global variables for page handler.
      LibraryVariableStorage.Enqueue(Employee."No.");
      LibraryVariableStorage.Enqueue(EmployeeAbsence."Quantity (Base)");

      // 2. Exercise: Run Absence Overview by Periods page from Absence Registration page and run Show Matrix from it with
      // Cause Of Absence filter.
      AbsenceRegistration.OPENEDIT;
      AbsenceRegistration.FILTER.SETFILTER("Employee No.",Employee."No.");
      AbsenceOverviewByPeriods.TRAP;
      AbsenceRegistration."Page Absence Overview by Periods".INVOKE;
      COMMIT;
      AbsenceOverviewByPeriods."Cause Of Absence Filter".SETVALUE(EmployeeAbsence."Cause of Absence Code");
      AbsenceOverviewByPeriods.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Absence Overview by Period Matrix performed on Absence Overview by Period Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(QualificationOverviewMatrix)]
    PROCEDURE QualificationOverview@10();
    VAR
      Employee@1000 : Record 5200;
      EmployeeQualifications@1002 : TestPage 5206;
      QualificationOverview@1003 : TestPage 5230;
      QualificationCode@1001 : Code[10];
    BEGIN
      // Test Qualification Overview Matrix after creation of Employee Qualifications for Employee.

      // 1. Setup: Create Employee and Employee Qualification for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      QualificationCode := CreateEmployeeQualification(Employee."No.");
      LibraryVariableStorage.Enqueue(Employee."No.");  // Assign variable for page handler.

      // 2. Exercise: Run Qualification Overview page from Employee Qualifications page and run Show Matrix from it.
      EmployeeQualifications.OPENEDIT;
      EmployeeQualifications.FILTER.SETFILTER("Qualification Code",QualificationCode);
      QualificationOverview.TRAP;
      EmployeeQualifications."Page Qualification Overview".INVOKE;
      COMMIT;
      QualificationOverview.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Qualification Overview Matrix performed on Qualification Overview Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(AbsenceOverviewByMatrixHandler)]
    PROCEDURE AbsenceOverview@111();
    VAR
      Employee@1000 : Record 5200;
      EmployeeAbsence@1003 : Record 5207;
      AbsenceRegistration@1002 : TestPage 5212;
      AbsenceOverviewByCategories@1001 : TestPage 5231;
    BEGIN
      // Test Absence Overview by Category Matrix after creation of Employee Absence for Employee.

      // 1. Setup: Create Employee and Employee Absence for the Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.");
      LibraryVariableStorage.Enqueue(EmployeeAbsence."Quantity (Base)");  // Assign variable for page handler.

      // 2. Exercise: Run Absence Overview By Categories page from Absence Registration page and run Show Matrix from it with
      // Employee No. filter.
      AbsenceRegistration.OPENEDIT;
      AbsenceRegistration.FILTER.SETFILTER("Employee No.",Employee."No.");
      AbsenceOverviewByCategories.TRAP;
      AbsenceRegistration."Page Absence Overview by Categories".INVOKE;
      COMMIT;
      AbsenceOverviewByCategories.EmployeeNoFilter.SETVALUE(Employee."No.");
      AbsenceOverviewByCategories.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Absence Overview by Category Matrix performed on Absence Overview by Category Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ResourceAllocatedPerJobMatrixHandler)]
    PROCEDURE ResourceAllocatedPerJob@11();
    VAR
      Resource@1001 : Record 156;
      ResourceCard@1000 : TestPage 76;
      ResourceAllocatedPerJob@1004 : TestPage 221;
    BEGIN
      // Test the Resource Allocated Per Job Matrix after Resource allocation per Job from Resource Card.

      // 1. Setup: Find VAT Posting Setup, create Resource, create Job Planning Line.
      Initialize;
      LibraryResource.CreateResourceNew(Resource);
      CreateJobPlanningLine(Resource."No.");

      // 2. Exercise: Run Resource Allocated per Job page from Resource Card.
      ResourceCard.OPENEDIT;
      ResourceCard.FILTER.SETFILTER("No.",Resource."No.");
      ResourceAllocatedPerJob.TRAP;
      ResourceCard."Page Resource Allocated per Job".INVOKE;
      COMMIT;
      ResourceAllocatedPerJob.ShowMatrix.INVOKE;

      // 3. Verify: Verify the value on Resource Allocated Per Job Matrix in Resource Allocated Per Job Matrix Handler.
    END;

    [Test]
    [HandlerFunctions(ResourceGroupAllocatedPerJobMatrixHandler)]
    PROCEDURE ResourceGroupAllocatedPerJob@141();
    VAR
      ResourceGroup@1000 : Record 152;
      Resource@1007 : Record 156;
      LibraryResource@1002 : Codeunit 130511;
      ResourceGroups@1001 : TestPage 72;
      ResGrAllocatedPerJob@1004 : TestPage 228;
    BEGIN
      // Test Resource Group Allocated Per Job Matrix after Resource Group allocation per Job from Resource Group Card.

      // 1. Setup: Create Resource Group, create Resource with Resource Group, create Job Planning Line.
      Initialize;
      LibraryResource.CreateResourceGroup(ResourceGroup);
      CreateResourceWithResourceGroup(Resource,ResourceGroup."No.");
      CreateJobPlanningLine(Resource."No.");

      // 2. Exercise: Run Resource Group Allocated per Job page from Resource Group Card.
      ResourceGroups.OPENEDIT;
      ResourceGroups.FILTER.SETFILTER("No.",ResourceGroup."No.");
      ResGrAllocatedPerJob.TRAP;
      ResourceGroups."Page Res. Gr. Allocated per Job".INVOKE;
      COMMIT;
      ResGrAllocatedPerJob.ShowMatrix.INVOKE;

      // 3. Verify: Verify the value on Resource Group Allocated Per Job Matrix in Resource Group Allocated Per Job Matrix Handler.
    END;

    [Test]
    [HandlerFunctions(ResourceAllocatedPerServiceOrderMatrixHandler)]
    PROCEDURE ResourceAllocatedPerServiceOrder@198();
    VAR
      Resource@1004 : Record 156;
      ServiceItem@1009 : Record 5940;
      ResourceCard@1003 : TestPage 76;
      ResAllocPerServiceOrder@1005 : TestPage 6008;
      ServiceOrderNo@1000 : Code[20];
      AllocatedHours@1001 : Decimal;
    BEGIN
      // Test Resource Allocated Per Service Order Matrix after Resource allocation per Service Order from Resource Card.

      // 1. Setup: Create Resource, create Service Order and allocate Resource.
      Initialize;
      CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo,LibraryInventory.CreateItemNo);
      LibraryResource.CreateResourceNew(Resource);
      ServiceOrderNo := CreateServiceOrder(ServiceItem);
      LibraryVariableStorage.Enqueue(ServiceOrderNo);

      // Use the random value for AllocatedHours.
      AllocatedHours := LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction;
      LibraryVariableStorage.Enqueue(AllocatedHours);
      AllocateResource(Resource."No.",ServiceOrderNo,AllocatedHours);

      // 2. Exercise: Run Resource Allocated Per Service Order page from Resource Card.
      ResourceCard.OPENEDIT;
      ResourceCard.FILTER.SETFILTER("No.",Resource."No.");
      ResAllocPerServiceOrder.TRAP;
      ResourceCard."Page Res. Alloc. per Service Order".INVOKE;
      COMMIT;
      ResAllocPerServiceOrder.ShowMatrix.INVOKE;

      // 3. Verify: Verify the value on Resource Allocated Per Service Order Matrix in Resource Allocated Per Service Order Matrix Handler.
    END;

    [Test]
    [HandlerFunctions(ResourceGroupAllocatedPerServiceOrderMatrixHandler)]
    PROCEDURE ResourceGroupAllocatedPerServiceOrder@109();
    VAR
      Resource@1012 : Record 156;
      ResourceGroup@1013 : Record 152;
      ServiceItem@1009 : Record 5940;
      ResourceGroups@1000 : TestPage 72;
      ResGrAllocPerServOrder@1002 : TestPage 6009;
      ServiceOrderNo@1001 : Code[20];
      AllocatedHours@1003 : Decimal;
    BEGIN
      // Test Resource Group Allocated Per Service Order Matrix after Resource Group allocation per Service Order from Resource Group Card.

      // 1. Setup: Create Resource Group, create Resource with Resource Group, create Service Order and allocate Resource.
      Initialize;
      LibraryResource.CreateResourceGroup(ResourceGroup);
      CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo,LibraryInventory.CreateItemNo);
      CreateResourceWithResourceGroup(Resource,ResourceGroup."No.");
      ServiceOrderNo := CreateServiceOrder(ServiceItem);
      LibraryVariableStorage.Enqueue(ServiceOrderNo);

      // Use the random value for AllocatedHours.
      AllocatedHours := LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction;
      LibraryVariableStorage.Enqueue(AllocatedHours);
      AllocateResource(Resource."No.",ServiceOrderNo,AllocatedHours);

      // 2. Exercise: Run Resource Group Allocated per Service Order page from Resource Group Card.
      ResourceGroups.OPENEDIT;
      ResourceGroups.FILTER.SETFILTER("No.",ResourceGroup."No.");
      ResGrAllocPerServOrder.TRAP;
      ResourceGroups."Page Res. Gr. Alloc. per Serv Order".INVOKE;
      COMMIT;
      ResGrAllocPerServOrder.ShowMatrix.INVOKE;

      // 3. Verify: Verify the value on Resource Group Allocated Per Service Order Matrix in Resource Group Allocated Per Service Order Matrix Handler.
    END;

    [Test]
    PROCEDURE ResourceAvailabilityFromResource@203();
    VAR
      Resource@1004 : Record 156;
      ResourceCard@1003 : TestPage 76;
      ResourceAvailability@1006 : TestPage 225;
    BEGIN
      // Test Resource availability from Resource Card.

      // 1. Setup: Create Resource with Capacity.
      Initialize;
      CreateResourceWithCapacity(Resource);

      // 2. Exercise: Run Resource Availability page from Resource Card.
      ResourceCard.OPENEDIT;
      ResourceCard.FILTER.SETFILTER("No.",Resource."No.");
      ResourceAvailability.TRAP;
      ResourceCard."Page Resource Availability".INVOKE;

      // 3. Verify: Verify the values on Resource Availability page.
      ResourceAvailability.PeriodType.SETVALUE(PeriodType::"Accounting Period");
      ResourceAvailability.AmountType.SETVALUE(ValueType::"Balance at Date");
      ResourceAvailability.ResAvailLines.Capacity.ASSERTEQUALS(Resource.Capacity);
      ResourceAvailability.ResAvailLines.NetAvailability.ASSERTEQUALS(Resource.Capacity);
    END;

    [Test]
    PROCEDURE ResourceGroupAvailabilityFromResourceGroup@377();
    VAR
      Resource@1004 : Record 156;
      ResourceGroup@1009 : Record 152;
      ResourceGroups@1006 : TestPage 72;
      ResGroupAvailability@1003 : TestPage 226;
    BEGIN
      // Test Resource Group availability from Resource Group Card.

      // 1. Setup: Create Resource Group with Capacity and create Resource with Resource Group.
      Initialize;
      CreateResourceGroupWithCapacity(ResourceGroup);
      CreateResourceWithResourceGroup(Resource,ResourceGroup."No.");

      // 2. Exercise: Run Resource Group Availability page from Resource Group Card.
      ResourceGroups.OPENEDIT;
      ResourceGroups.FILTER.SETFILTER("No.",ResourceGroup."No.");
      ResGroupAvailability.TRAP;
      ResourceGroups."Page Res. Group Availability".INVOKE;

      // 3. Verify: Verify the values on Resource Group Availability page.
      ResGroupAvailability.PeriodType.SETVALUE(PeriodType::"Accounting Period");
      ResGroupAvailability.AmountType.SETVALUE(ValueType::"Balance at Date");
      ResGroupAvailability.ResGrAvailLines.Capacity.ASSERTEQUALS(ResourceGroup.Capacity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ResourceCapacityMatrixNetChange@8();
    VAR
      Resource@1002 : Record 156;
      WorkHourTemplate@1000 : ARRAY [2] OF Record 5954;
      Date@1007 : ARRAY [2] OF Date;
      i@1001 : Integer;
    BEGIN
      // [SCENARIO 377427] Resource Capacity "View by" = Week, "View as" = Net Change.
      Initialize;

      // [GIVEN] Resource Capacity.
      LibraryResource.CreateResourceNew(Resource);
      // [GIVEN] Set Capacity for the Resource: 4 for Date1, 6 for Date2 (Date2 > Date1).
      Date[2] := WORKDATE;
      Date[1] := LibraryRandom.RandDateFrom(CALCDATE('<-1M>',Date[2]),-10);
      FOR i := 1 TO ARRAYLEN(Date) DO BEGIN
        CreateWorkHourTemplate(WorkHourTemplate[i]);
        SetResourceCapacitySettingByPage(Resource."No.",Date[i],Date[i],WorkHourTemplate[i].Code);
      END;

      // [WHEN] Open Resource Capacity Matrix Page with "View by" = Week, "View as" = Net Change.
      // [THEN] Resource Capacity = 6 for Date2.
      VerifyResourceCapacity(Resource."No.",PeriodType::Week,ValueType::"Net Change",WorkHourTemplate[2].Monday);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ResourceCapacityMatrixBalanceAtDate@19();
    VAR
      Resource@1002 : Record 156;
      WorkHourTemplate@1001 : ARRAY [2] OF Record 5954;
      Date@1007 : ARRAY [2] OF Date;
      i@1000 : Integer;
    BEGIN
      // [SCENARIO 377427] Resource Capacity "View by" = Week, "View as" = Balance at Date.
      Initialize;

      // [GIVEN] Resource Capacity.
      LibraryResource.CreateResourceNew(Resource);
      // [GIVEN] Set Capacity for the Resource: 4 for Date1, 6 for Date2 (Date2 > Date1).
      Date[2] := WORKDATE;
      Date[1] := LibraryRandom.RandDateFrom(CALCDATE('<-1M>',Date[2]),-10);
      FOR i := 1 TO ARRAYLEN(Date) DO BEGIN
        CreateWorkHourTemplate(WorkHourTemplate[i]);
        SetResourceCapacitySettingByPage(Resource."No.",Date[i],Date[i],WorkHourTemplate[i].Code);
      END;

      // [WHEN] Open Resource Capacity Matrix Page with "View by" = Week, "View as" = Balance at Date.
      // [THEN] Resource Capacity = 10 for Date2.
      VerifyResourceCapacity(
        Resource."No.",PeriodType::Week,ValueType::"Balance at Date",WorkHourTemplate[1].Monday + WorkHourTemplate[2].Monday);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ResourceCapacityMatrixZeroWorkHourTemplate@52();
    VAR
      Resource@1002 : Record 156;
      WorkHourTemplate@1001 : Record 5954;
    BEGIN
      // [SCENARIO 377427] Resource Capacity "View by" = Week, "View as" = Net Change, zero Work-Hour Template
      Initialize;

      // [GIVEN] Resource Capacity.
      LibraryResource.CreateResourceNew(Resource);
      // [GIVEN] Set Capacity for the Resource: 4 for Date1.
      CreateWorkHourTemplate(WorkHourTemplate);
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);
      // [GIVEN] Set Capacity for the Resource for Date1 using zero Work-Hour Template (total week hours = 0).
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,CreateZeroWorkHourTemplate);

      // [WHEN] Open Resource Capacity Matrix Page with "View by" = Week, "View as" = Net Change.
      // [THEN] Resource Capacity = 0 for Date1.
      VerifyResourceCapacity(Resource."No.",PeriodType::Week,ValueType::"Net Change",0);
    END;

    [Test]
    [HandlerFunctions(ResourceAllocatedMatrixHandler,ResourceGroupAvailabilityMatrixHandler)]
    PROCEDURE ResourceGroupCapacityWithPositiveAmount@20();
    BEGIN
      // Test Allocated Hours, Date and "Availability after Orders" after doing Partial Allocation with Positive Capacity on Res. Group Availability page.
      AvailabilityOfOrdersOnResourceGroup(LibraryRandom.RandDec(1000,2));
    END;

    [Test]
    [HandlerFunctions(ResourceAllocatedMatrixHandler,ResourceGroupAvailabilityMatrixHandler)]
    PROCEDURE ResourceGroupCapacityWithZeroAmount@32();
    BEGIN
      // Test Allocated Hours, Date and "Availability after Orders" after doing Partial Allocation with Blank Capacity on Res. Group Availability page.
      AvailabilityOfOrdersOnResourceGroup(0);
    END;

    [Test]
    [HandlerFunctions(ResourceAllocatedMatrixHandler,ResourceGroupAvailabilityMatrixHandler)]
    PROCEDURE ResourceGroupCapacityWithNegativeAmount@35();
    BEGIN
      // Test Allocated Hours, Date and "Availability after Orders" after doing Partial Allocation with Negative Capacity on Res. Group Availability page.
      AvailabilityOfOrdersOnResourceGroup(-1 * LibraryRandom.RandDec(1000,2));
    END;

    [Test]
    PROCEDURE QtyOnAssemblyOrderOnResourceAvailabilityPage@38();
    VAR
      Resource@1000 : Record 156;
      ResourceAvailabilityPage@1003 : TestPage 225;
      ResourceCard@1004 : TestPage 76;
      Capacity@1001 : Decimal;
      AssemblyQuantity@1005 : Decimal;
    BEGIN
      // [FEATURE] [Resource Availability]
      // [SCENARIO 375919] Resource Availability Page should consider "Qty. on Assembly Order"
      Initialize;

      // [GIVEN] Resource "R" with Capacity = 12
      Capacity := LibraryRandom.RandDecInRange(10,100,2);
      LibraryResource.CreateResourceNew(Resource);
      MockResCapacityEntry(Resource."No.",Capacity);

      // [GIVEN] Assembly Order for "R" of Quantity = 3
      AssemblyQuantity := LibraryRandom.RandDec(10,2);
      MockAssemblyLine(Resource."No.",AssemblyQuantity);

      // [WHEN] Open Resource "R" Availability Page
      ResourceCard.OPENEDIT;
      ResourceCard.GOTORECORD(Resource);
      ResourceAvailabilityPage.TRAP;
      ResourceCard."Page Resource Availability".INVOKE;

      // [THEN] "Qty. on Assembly Order" = 3, "Net Availability" = 9
      ResourceAvailabilityPage.PeriodType.SETVALUE(PeriodType::"Accounting Period");
      ResourceAvailabilityPage.AmountType.SETVALUE(ValueType::"Balance at Date");
      ResourceAvailabilityPage.ResAvailLines.QtyOnAssemblyOrder.ASSERTEQUALS(AssemblyQuantity);
      ResourceAvailabilityPage.ResAvailLines.NetAvailability.ASSERTEQUALS(Capacity - AssemblyQuantity);
    END;

    [Test]
    PROCEDURE WorkHourTemplate_CapacityDayRange_UT@18();
    VAR
      WorkHourTemplate@1000 : Record 5954;
      WorkHourTemplates@1001 : TestPage 6017;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 377427] Check Work-Hour Template capacity day ranges: [0..24]
      LibraryResource.CreateWorkHourTemplate(WorkHourTemplate);
      WorkHourTemplates.OPENEDIT;
      WorkHourTemplates.GOTORECORD(WorkHourTemplate);

      ASSERTERROR WorkHourTemplates.Monday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Monday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Tuesday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Tuesday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Wednesday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Wednesday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Thursday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Thursday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Friday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Friday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Saturday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Saturday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Sunday.SETVALUE(-0.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);

      ASSERTERROR WorkHourTemplates.Sunday.SETVALUE(24.00001);
      Assert.ExpectedErrorCode(TestValidationTxt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_UpdateResourceCapacityTwice@39();
    VAR
      Resource@1002 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 377907] "Resource Capacity" should no be updated when run twice for the same day

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] Work Hour Template with Day = 1
      CreateWorkHourTemplate(WorkHourTemplate);

      // [GIVEN] Resource Capacity updated for Resource "X", capacity = 1
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [WHEN] Update Resource Capacity second time for Resource "X"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" is 1 for Resource "X"
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",WorkHourTemplate.Monday);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_IncreaseResourceCapacity@44();
    VAR
      Resource@1001 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 377907] "Resource Capacity" should be updated when increase work-hour template capacity for current date

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] Work Hour Template with Day = 1 for date "Y", capacity = 1
      CreateWorkHourTemplate(WorkHourTemplate);

      // [GIVEN] Resource Capacity updated for Resource "X"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [GIVEN] Increased capacity for date "Y", capacity = 2
      ModifyWorkHourTemplate(WorkHourTemplate,WorkHourTemplate.Monday + LibraryRandom.RandIntInRange(3,10));

      // [WHEN] Update Resource Capacity for Resource "X", date "Y"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" is 2 for Resource "X"
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",WorkHourTemplate.Monday);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_NoResourceCapacitySetForNonWorkingDay@40();
    VAR
      Resource@1001 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
      BaseCalendarChange@1002 : Record 7601;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 377907] "Resource Capacity" should not be updated for nonworking day

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] "Nonworking" day in Base Calendar Change for date "Y"
      CreateNonWorkingBaseCalendarChange(BaseCalendarChange,WORKDATE);

      // [GIVEN] Work Hour Template with Day = 1 for date "Y"
      CreateWorkHourTemplate(WorkHourTemplate);

      // [WHEN] Update Resource Capacity for Resource "X", date "Y"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" is 0 for Resource "X"
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",0);

      // Tear down
      BaseCalendarChange.DELETE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_UpdateCapacityAfterSwitchWorkingToNonWorking@41();
    VAR
      Resource@1001 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
      BaseCalendarChange@1002 : Record 7601;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 377907] "Resource Capacity" should be zero out when update capacity for non-working day after switch from working

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] Work Hour Template with Day = 1 for date "Y"
      CreateWorkHourTemplate(WorkHourTemplate);

      // [GIVEN] Resource Capacity updated for Resource "X"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [GIVEN] Change "Working" day to "Nonworking" day in Base Calendar Change for date "Y"
      CreateNonWorkingBaseCalendarChange(BaseCalendarChange,WORKDATE);

      // [WHEN] Update Resource Capacity for Resource "X", date "Y"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" is 0 for Resource "X"
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",0);

      // Tear down
      BaseCalendarChange.DELETE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_NotPossibleToReverseMoreCapacityThenSetAfterSwitchWorkingToNonWorking@43();
    VAR
      Resource@1001 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
      BaseCalendarChange@1002 : Record 7601;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 377907] It should be not possible to reverse more capacity then was set for Working day after switch to non-working

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] Work Hour Template with Day = 1 for date "Y", capacity = 1
      CreateWorkHourTemplate(WorkHourTemplate);

      // [GIVEN] Resource Capacity updated for Resource "X"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [GIVEN] Change "Working" day to "Nonworking" day in Base Calendar Change for date "Y"
      CreateNonWorkingBaseCalendarChange(BaseCalendarChange,WORKDATE);

      // [GIVEN] Increased capacity for date "Y", capacity = 2
      ModifyWorkHourTemplate(WorkHourTemplate,WorkHourTemplate.Monday + LibraryRandom.RandIntInRange(3,10));

      // [WHEN] Update Resource Capacity for Resource "X", date "Y"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" is 0 for Resource "X"
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",0);

      // Tear down
      BaseCalendarChange.DELETE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE UI_ResourceCapacityWithDecimals@50();
    VAR
      Resource@1001 : Record 156;
      WorkHourTemplate@1000 : Record 5954;
    BEGIN
      // [FEATURE] [Resource Capacity] [UI]
      // [SCENARIO 379406] "Resource Capacity" can be updated to the value with decimals

      // [GIVEN] Resource "X"
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // [GIVEN] New Work Hour Template
      CreateWorkHourTemplate(WorkHourTemplate);

      // [GIVEN] Resource Capacity updated for Resource "X"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [GIVEN] Work Hour Template for date "Y" has increased capacity with decimals
      ModifyWorkHourTemplate(WorkHourTemplate,WorkHourTemplate.Monday + LibraryRandom.RandIntInRange(3,10) + 0.5);

      // [WHEN] Update Resource Capacity for Resource "X", date "Y"
      SetResourceCapacitySettingByPage(Resource."No.",WORKDATE,WORKDATE,WorkHourTemplate.Code);

      // [THEN] "Resource Capacity" for Resource "X" is equal to that of Work Hour Template
      VerifyResourceCapacity(Resource."No.",PeriodType::Day,ValueType::"Net Change",WorkHourTemplate.Monday);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Clear global variables.
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AvailabilityOfOrdersOnResourceGroup@33(Capacity@1001 : Decimal);
    VAR
      ServiceHeader@1004 : Record 5900;
      ResourceGroupNo@1002 : Code[20];
      QtyToAllocate@1000 : Decimal;
    BEGIN
      // Test Allocated Hours, Date and "Availability after Orders" after doing Partial Allocation on Res. Group Availability page.
      // 1. Setup: Create Resource Group and Resource Group capacity.
      Initialize;
      QtyToAllocate := LibraryRandom.RandDec(100,2);  // For Partial Allocation Qty To Allocate is less than capacity.
      ResourceGroupNo := UpdateResourceGroupWithCapacity(Capacity);
      LibraryVariableStorage.Enqueue(ResourceGroupNo);
      LibraryVariableStorage.Enqueue(QtyToAllocate);

      // 2. Excercise: Create Service Order And Allocate Resource on Resource Allocation page.
      CreateServiceOrderWithServiceItemLine(ServiceHeader);
      SelectResourceGroupOnServiceOrder(ServiceHeader."No.",ResourceGroupNo);
      AllocateResourceOnResGroupAvailability(ServiceHeader."No.");

      // 3. Verify: Allocated Date and hours on Resource Allocation and Availability after Orders on Res. Group Availability.
      VerifyResourceAllocatedDateAndHours(ServiceHeader."No.",QtyToAllocate);
      VerifyResGroupAvailability(ResourceGroupNo,Capacity,QtyToAllocate);
    END;

    LOCAL PROCEDURE CreateEmployeeAbsence@70(VAR EmployeeAbsence@1000 : Record 5207;EmployeeNo@1001 : Code[20]);
    BEGIN
      LibraryHumanResource.CreateEmployeeAbsence(EmployeeAbsence);
      EmployeeAbsence.VALIDATE("Employee No.",EmployeeNo);
      EmployeeAbsence.VALIDATE("From Date",WORKDATE);
      EmployeeAbsence.VALIDATE("Cause of Absence Code",GetCauseOfAbsenceCode);

      // Use random for Quantity.
      EmployeeAbsence.VALIDATE(Quantity,LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction);
      EmployeeAbsence.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeQualification@137(EmployeeNo@1001 : Code[20]) : Code[10];
    VAR
      EmployeeQualification@1000 : Record 5203;
      Qualification@1002 : Record 5202;
    BEGIN
      Qualification.FINDFIRST;
      LibraryHumanResource.CreateEmployeeQualification(EmployeeQualification,EmployeeNo);
      EmployeeQualification.VALIDATE("Qualification Code",Qualification.Code);
      EmployeeQualification.MODIFY(TRUE);
      EXIT(Qualification.Code);
    END;

    LOCAL PROCEDURE AllocateResource@64(ResourceNo@1001 : Code[20];DocumentNo@1002 : Code[20];AllocatedHours2@1003 : Decimal);
    VAR
      ResourceAllocations@1000 : TestPage 6005;
    BEGIN
      ResourceAllocations.OPENEDIT;
      ResourceAllocations.FILTER.SETFILTER("Document No.",DocumentNo);
      ResourceAllocations."Resource No.".SETVALUE(ResourceNo);
      ResourceAllocations."Allocated Hours".SETVALUE(AllocatedHours2);
      ResourceAllocations."Allocation Date".SETVALUE(WORKDATE);
      ResourceAllocations.OK.INVOKE;
    END;

    LOCAL PROCEDURE AllocateResourceOnResGroupAvailability@36(DocumentNo@1000 : Code[20]);
    VAR
      ResourceAllocations@1003 : TestPage 6005;
    BEGIN
      ResourceAllocations.OPENEDIT;
      ResourceAllocations.FILTER.SETFILTER("Document No.",DocumentNo);
      ResourceAllocations.ResGroupAvailability.INVOKE;
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@45(No2@1004 : Code[20]);
    VAR
      Job@1002 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      LibraryJob@1003 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);

      // Assigning values to global variables. Use random value for Quantity.
      LibraryVariableStorage.Enqueue(Job."No.");
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No2);
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction);
      JobPlanningLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(JobPlanningLine.Quantity);
    END;

    LOCAL PROCEDURE CreateResourceGroupWithCapacity@24(VAR ResourceGroup@1000 : Record 152);
    BEGIN
      LibraryResource.CreateResourceGroup(ResourceGroup);
      // Use random value for the Capacity.
      ResourceGroup.VALIDATE(Capacity,LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction);
      ResourceGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceWithCapacity@23(VAR Resource@1000 : Record 156);
    BEGIN
      LibraryResource.CreateResourceNew(Resource);

      // Use random value for the Capacity.
      Resource.VALIDATE(Capacity,LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceWithResourceGroup@21(VAR Resource@1001 : Record 156;ResourceGroupNo@1004 : Code[20]);
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
      Resource.VALIDATE("Resource Group No.",ResourceGroupNo);
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItem@101(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@94(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItem@1001 : Record 5940);
    VAR
      Item@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItem."No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(100) + LibraryUtility.GenerateRandomFraction);
      ServiceLine.VALIDATE("Order Date",WORKDATE);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@220(ServiceItem@1003 : Record 5940) : Code[20];
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1000 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      EXIT(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithServiceItemLine@22(VAR ServiceHeader@1004 : Record 5900);
    VAR
      Customer@1006 : Record 18;
      Item@1005 : Record 27;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1000 : Record 5901;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateWorkHourTemplate@34(VAR WorkHourTemplate@1000 : Record 5954);
    BEGIN
      LibraryResource.CreateWorkHourTemplate(WorkHourTemplate);
      ModifyWorkHourTemplate(WorkHourTemplate,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateZeroWorkHourTemplate@47() : Code[10];
    VAR
      WorkHourTemplate@1000 : Record 5954;
    BEGIN
      LibraryResource.CreateWorkHourTemplate(WorkHourTemplate);
      EXIT(WorkHourTemplate.Code);
    END;

    LOCAL PROCEDURE CreateNonWorkingBaseCalendarChange@49(VAR BaseCalendarChange@1000 : Record 7601;Date@1001 : Date);
    BEGIN
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,'',BaseCalendarChange."Recurring System"::" ",Date,BaseCalendarChange.Day::" ");
      BaseCalendarChange.VALIDATE(Nonworking,TRUE);
      BaseCalendarChange.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockResCapacityEntry@77(ResourceNo@1000 : Code[20];NewCapacity@1001 : Decimal);
    VAR
      ResCapacityEntry@1002 : Record 160;
    BEGIN
      WITH ResCapacityEntry DO BEGIN
        FINDLAST;
        "Entry No." += 1;
        "Resource No." := ResourceNo;
        Capacity := NewCapacity;
        Date := WORKDATE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockAssemblyLine@61(ResourceNo@1001 : Code[20];NewQuantity@1000 : Decimal);
    VAR
      AssemblyLine@1002 : Record 901;
    BEGIN
      WITH AssemblyLine DO BEGIN
        "Document Type" := "Document Type"::Order;
        "Document No." := LibraryUtility.GenerateGUID;
        Type := Type::Resource;
        "No." := ResourceNo;
        "Remaining Quantity (Base)" := NewQuantity;
        "Due Date" := WORKDATE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCauseOfAbsenceCode@31() : Code[10];
    VAR
      CauseOfAbsence@1000 : Record 5206;
      HumanResourceUnitOfMeasure@1001 : Record 5220;
    BEGIN
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      WITH CauseOfAbsence DO BEGIN
        IF "Unit of Measure Code" = '' THEN BEGIN
          HumanResourceUnitOfMeasure.FINDFIRST;
          VALIDATE("Unit of Measure Code",HumanResourceUnitOfMeasure.Code);
          MODIFY(TRUE);
        END;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE ModifyWorkHourTemplate@15(VAR WorkHourTemplate@1000 : Record 5954;Capacity@1001 : Decimal);
    BEGIN
      // Create Work Hour Template for a Week using Random Values.

      WorkHourTemplate.VALIDATE(Monday,Capacity);
      WorkHourTemplate.VALIDATE(Tuesday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE(Wednesday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE(Thursday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE(Friday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE(Saturday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE(Sunday,WorkHourTemplate.Monday);
      WorkHourTemplate.VALIDATE("Total per Week",WorkHourTemplate.Monday * 7);  // Total Capacity for the Week.
      WorkHourTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateResourceGroupWithCapacity@25(Capacity@1003 : Decimal) : Code[20];
    VAR
      ResourceGroup@1002 : Record 152;
      ResourceGroups@1001 : TestPage 72;
      ResGroupCapacity@1000 : TestPage 214;
    BEGIN
      LibraryResource.CreateResourceGroup(ResourceGroup);
      ResourceGroups.OPENEDIT;
      ResourceGroups.FILTER.SETFILTER("No.",ResourceGroup."No.");
      ResGroupCapacity.TRAP;
      ResourceGroups.ResGroupCapacity.INVOKE;
      ResGroupCapacity.MatrixForm.FILTER.SETFILTER("No.",ResourceGroup."No.");
      ResGroupCapacity.MatrixForm.Field1.SETVALUE(Capacity);
      EXIT(ResourceGroup."No.");
    END;

    LOCAL PROCEDURE SetResourceCapacitySettingByPage@12(ResourceNo@1003 : Code[20];StartDate@1002 : Date;EndDate@1004 : Date;WorkHourTemplateCode@1005 : Code[10]);
    VAR
      ResourceCapacitySettings@1000 : TestPage 6013;
    BEGIN
      ResourceCapacitySettings.OPENNEW;
      ResourceCapacitySettings.FILTER.SETFILTER("No.",ResourceNo);
      ResourceCapacitySettings.StartDate.SETVALUE(StartDate);
      ResourceCapacitySettings.EndDate.SETVALUE(EndDate);
      ResourceCapacitySettings.WorkTemplateCode.SETVALUE(WorkHourTemplateCode);
      ResourceCapacitySettings.UpdateCapacity.INVOKE;
    END;

    LOCAL PROCEDURE SelectResourceGroupOnServiceOrder@37(DocumentNo@1003 : Code[20];ResourceGroupNo@1001 : Code[20]);
    VAR
      ServiceOrderAllocation@1002 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.VALIDATE("Resource Group No.",ResourceGroupNo);
      ServiceOrderAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyResourceAllocatedDateAndHours@27(DocumentNo@1000 : Code[20];AllocatedHours@1001 : Decimal);
    VAR
      ServiceOrderAllocation@1002 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.TESTFIELD("Allocated Hours",AllocatedHours);
      ServiceOrderAllocation.TESTFIELD("Allocation Date",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyResGroupAvailability@28(ResourceGroupNo@1000 : Code[20];Capacity@1003 : Decimal;QtyAllocated@1004 : Decimal);
    VAR
      ResGroupCapacity@1001 : TestPage 214;
      ResGroupAvailability@1002 : TestPage 226;
    BEGIN
      ResGroupCapacity.OPENEDIT;
      ResGroupCapacity.MatrixForm.FILTER.SETFILTER("No.",ResourceGroupNo);
      ResGroupAvailability.TRAP;
      ResGroupCapacity.MatrixForm.ResGroupAvailability.INVOKE;
      ResGroupAvailability.ResGrAvailLines.Capacity.ASSERTEQUALS(Capacity);
      ResGroupAvailability.ResGrAvailLines.CapacityAfterOrders.ASSERTEQUALS(Capacity - QtyAllocated);
    END;

    [ModalPageHandler]
    PROCEDURE AbsenceOverviewByPeriodMatrix@13(VAR AbsOverviewByPeriodMatrix@1000 : TestPage 9247);
    BEGIN
      AbsOverviewByPeriodMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      AbsOverviewByPeriodMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE AbsenceOverviewByMatrixHandler@118(VAR AbsOverByCatMatrix@1000 : TestPage 9273);
    BEGIN
      AbsOverByCatMatrix.FILTER.SETFILTER("Period Start",FORMAT(WORKDATE));
      AbsOverByCatMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE AbsencesByCategoriesMatrix@2(VAR EmplAbsencesByCatMatrix@1000 : TestPage 9269);
    BEGIN
      EmplAbsencesByCatMatrix.FILTER.SETFILTER("Period Start",FORMAT(WORKDATE));
      EmplAbsencesByCatMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ArticlesOverviewMatrixHandler@14(VAR MiscArticlesOverviewMatrix@1000 : TestPage 9281);
    BEGIN
      MiscArticlesOverviewMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      MiscArticlesOverviewMatrix.Field1.ASSERTEQUALS('Yes');
    END;

    [ModalPageHandler]
    PROCEDURE ConfidentialOverviewMatrix@30(VAR ConfInfoOverviewMatrix@1000 : TestPage 9283);
    BEGIN
      ConfInfoOverviewMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      ConfInfoOverviewMatrix.Field1.ASSERTEQUALS('Yes');
    END;

    [ModalPageHandler]
    PROCEDURE QualificationOverviewMatrix@46(VAR QualificationOverviewMatrix@1000 : TestPage 9271);
    BEGIN
      QualificationOverviewMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      QualificationOverviewMatrix.Field1.ASSERTEQUALS('Yes');
    END;

    [ModalPageHandler]
    PROCEDURE ResourceAllocatedPerJobMatrixHandler@1(VAR ResourceAllocPerJobMatrix@1000 : TestPage 9211);
    BEGIN
      ResourceAllocPerJobMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      ResourceAllocPerJobMatrix.Col1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ResourceAllocatedMatrixHandler@26(VAR ResGrAvailabilityService@1001 : TestPage 6010);
    BEGIN
      ResGrAvailabilityService.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ResourceGroupAvailabilityMatrixHandler@29(VAR ResGrAvailServMatrix@1000 : TestPage 9221);
    VAR
      ResourceGroupNo@1001 : Variant;
      QtyToAllocate@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ResourceGroupNo);
      LibraryVariableStorage.Dequeue(QtyToAllocate);
      ResGrAvailServMatrix.FILTER.SETFILTER("No.",ResourceGroupNo);
      ResGrAvailServMatrix.Qtytoallocate.SETVALUE(QtyToAllocate);
      ResGrAvailServMatrix.Allocate.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ResourceGroupAllocatedPerJobMatrixHandler@178(VAR ResGrpAllocPerJobMatrix@1000 : TestPage 9213);
    BEGIN
      ResGrpAllocPerJobMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      ResGrpAllocPerJobMatrix.Col1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ResourceAllocatedPerServiceOrderMatrixHandler@216(VAR ResAllPerServiceMatrix@1000 : TestPage 9215);
    BEGIN
      ResAllPerServiceMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      ResAllPerServiceMatrix.Col1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ResourceGroupAllocatedPerServiceOrderMatrixHandler@110(VAR ResGrpAllPerServMatrix@1000 : TestPage 9217);
    BEGIN
      ResGrpAllPerServMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      ResGrpAllPerServMatrix.Col1.SETVALUE(LibraryVariableStorage.DequeueDecimal);
    END;

    LOCAL PROCEDURE VerifyResourceCapacity@17(ResourceNo@1001 : Code[20];PeriodType@1003 : Option;ValueType@1000 : Option;Capacity@1004 : Decimal);
    VAR
      ResourceCapacity@1002 : TestPage 213;
    BEGIN
      ResourceCapacity.OPENEDIT;
      ResourceCapacity.PeriodType.SETVALUE(PeriodType);
      ResourceCapacity.QtyType.SETVALUE(ValueType);
      ResourceCapacity.MatrixForm.FILTER.SETFILTER("No.",ResourceNo);
      ResourceCapacity.MatrixForm.Field1.ASSERTEQUALS(Capacity);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@16(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Resource]
      Test for Resource Matrix Management:
        1. Test Employee Absences by Category Matrix after creation of Employee Absence for Employee.
        2. Test values on Employee Absences page after creation of Employee Absence for Employee.
        3. Test Miscellaneous Articles Overview Matrix after creation of Miscellaneous Article Information for Employee.
        4. Test Confidential Information Overview Matrix after creation of Confidential Information for Employee.
        5. Test Absence Overview by Period Matrix after creation of Employee Absence for Employee.
        6. Test Qualification Overview Matrix after creation of Employee Qualifications for Employee.
        7. Test Absence Overview by Category Matrix after creation of Employee Absence for Employee.
        8. Test the Resource Allocated Per Job Matrix after Resource allocation per Job from Resource Card.
        9. Test Resource Group Allocated Per Job Matrix after Resource Group allocation per Job from Resource Group Card.
       10. Test Resource Allocated Per Service Order Matrix after Resource allocation per Service Order from Resource Card.
       11. Test Resource Group Allocated Per Service Order Matrix after Resource Group allocation per Service Order from Resource Group Card.
       12. Test Resource availability from Resource Card.
       13. Test Resource Group availability from Resource Card.
       14. Verify Resource Capacity View by Week and View as Net Change.
       15. Verify Resource Capacity View by Week and View as Balance At Date.
       16. Verify Allocated Hours, Date and Availability after Orders after doing Partial Allocation with Positive Capacity.
       17. Verify Allocated Hours, Date and Availability after Orders after doing Partial Allocation with Blank Capacity.
       18. Verify Allocated Hours, Date and Availability after Orders after doing Partial Allocation with Negative Capacity.

      TFS_TS_ID = 258664
      Covers Test cases:
      ---------------------------------------------
      Test Function Name                TFS ID
      ---------------------------------------------
      AbsencesByCategories           122969, 128882
      EmployeeAbsences               122969
      MiscellaneousOverview          122970, 128886
      ConfidentialOverview           122970, 128887
      AbsenceByPeriod                128881
      QualificationOverview          128883
      AbsenceOverview                128884

      TFS_TS_ID = 263288
      Covers Test cases:
      ------------------------------------------------------------
      Test Function Name                                    TFS ID
      ------------------------------------------------------------
      ResourceAllocatedPerJob                               128870
      ResourceGroupAllocatedPerJob                          128871
      ResourceAllocatedPerServiceOrder                      128872
      ResourceGroupAllocatedPerServiceOrder                 128873
      ResourceAvailabilityFromResource                      128874
      ResourceGroupAvailabilityFromResourceGroup            128875

      TFS_TS_ID = 264275
      Covers Test cases:
      ------------------------------------------------------------
      Test Function Name                                    TFS ID
      ------------------------------------------------------------
      ResourceCapacityMatrixNetChange                       141153
      ResourceCapacityMatrixBalanceAtDate                   141153

      BUG ID 295130
      Covers Test cases:
      ------------------------------------------------------------
      Test Function Name                                    TFS ID
      ------------------------------------------------------------
      ResourceGroupCapacityWithPositiveAmount               300034
      ResourceGroupCapacityWithZeroAmount                   300034
      ResourceGroupCapacityWithNegativeAmount               300034
    }
    END.
  }
}

