OBJECT Codeunit 137910 SCM Calculate Standard Cost
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryKitting@1002 : Codeunit 132205;
      Assert@1004 : Codeunit 130000;
      LibraryInventory@2000 : Codeunit 132201;
      LibraryResource@1005 : Codeunit 130511;
      CalcRecursionLevel@1001 : Integer;
      RecursionInstruction@1000 : Text[1024];
      TEXT_PART1@1006 : TextConst 'ENU=Part 1';
      TEXT_PART2@1007 : TextConst 'ENU=Part 2';
      TEXT_PART3@1008 : TextConst 'ENU=Part 3';
      TEXT_SUB1@1009 : TextConst 'ENU=Sub 1';
      TEXT_SUB2@1010 : TextConst 'ENU=Sub 2';
      ITEM_DESC@1011 : TextConst 'ENU=Test Calculate Cost/Price';
      Initialized@1012 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@50();
    BEGIN
      IF Initialized THEN
        EXIT;

      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(PickCalcLevel,CalcProdBOM)]
    PROCEDURE AssemblyIncludesMfgItem@19();
    VAR
      asmTopItem@1002 : Record 27;
      asm1Item@1001 : Record 27;
      prod1Item@1000 : Record 27;
      BOMComponent@1003 : Record 90;
      childItem@2001 : Record 27;
    BEGIN
      Initialize;
      asmTopItem.GET(CreateItem('ASM TOP',0,0));
      childItem.GET(CreateItem(TEXT_PART1,1,2));
      LibraryKitting.CreateBOMComponentLine(
        asmTopItem,BOMComponent.Type::Item,childItem."No.",1,childItem."Base Unit of Measure",FALSE);
      asm1Item.GET(CreateItem('ASM 1',0,0));
      childItem.GET(CreateItem(TEXT_PART2,10,20));
      LibraryKitting.CreateBOMComponentLine(
        asm1Item,BOMComponent.Type::Item,childItem."No.",2,childItem."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(
        asmTopItem,BOMComponent.Type::Item,asm1Item."No.",3,asm1Item."Base Unit of Measure",FALSE);
      prod1Item.GET(CreateItem('PROD 1',0,0));

      LibraryKitting.AddProdBOMItem(prod1Item,CreateItem('PURCH 3',100,200),4);
      LibraryKitting.AddProdBOMItem(prod1Item,TEXT_PART1,5);
      LibraryKitting.CreateBOMComponentLine(
        asmTopItem,BOMComponent.Type::Item,prod1Item."No.",6,prod1Item."Base Unit of Measure",FALSE);

      TestCost('',asmTopItem,0,0,0,0,0,0,0,0);
      TestCost('',asmTopItem,1 * 1 + 3 * 0 + 6 * 0,1,1 + 0 + 0,0,0,1,0,0);
      TestCost('',asmTopItem,1 * 1 + 3 * 2 * 10 + 6 * (4 * 100 + 5 * 1),2,1 + 60 + 2430,0,0,2491,0,0);

      TestPrice('',asmTopItem,0,0);
      TestPrice('',asmTopItem,1 * 2 + 3 * 0 + 6 * 0,1);
      TestPrice('',asmTopItem,1 * 2 + 3 * 2 * 20 + 6 * 0,2); // Prod item price is not rolled up and stays 0

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(PickCalcLevel)]
    PROCEDURE MfgBOMIncludesAssemblyItem@20();
    VAR
      prodTopItem@1000 : Record 27;
      asm1Item@1001 : Record 27;
      childItem@2002 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      prodTopItem.GET(CreateItem('PROD TOP',0,0));
      childItem.GET(CreateItem(TEXT_PART1,1,2));
      LibraryKitting.AddProdBOMItem(prodTopItem,childItem."No.",1);
      asm1Item.GET(CreateItem('ASM 1',0,0));
      LibraryKitting.CreateBOMComponentLine(
        asm1Item,BOMComponent.Type::Item,childItem."No.",2,childItem."Base Unit of Measure",FALSE);
      childItem.GET(CreateItem(TEXT_PART3,10,20));
      LibraryKitting.CreateBOMComponentLine(
        asm1Item,BOMComponent.Type::Item,childItem."No.",3,childItem."Base Unit of Measure",FALSE);
      LibraryKitting.AddProdBOMItem(prodTopItem,asm1Item."No.",4);

      TestCost('',prodTopItem,0,0,0,0,0,0,0,0);
      TestCost('',prodTopItem,1 * 1 + 4 * 0,1,1 + 0,0,0,1,0,0);
      TestCost('',prodTopItem,1 * 1 + 4 * (2 * 1 + 3 * 10),2,1 + 128,0,0,129,0,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE NonBOMItem@10();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      Item.GET(CreateItem('NonBOM',500,700));
      ASSERTERROR TestCost('Cost',Item,0,0,0,0,0,0,0,0);
      ASSERTERROR TestPrice('Price',Item,0,0);
      // no roll back needed
    END;

    [Test]
    PROCEDURE BOMItem@11();
    VAR
      ParentItem@1000 : Record 27;
      childItem@2003 : Record 27;
      BOMComponent@1001 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem('Parent',0,0));
      childItem.GET(CreateItem(TEXT_PART1,300,400));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComponent.Type::Item,childItem."No.",1,childItem."Base Unit of Measure",FALSE);
      TestCost('One part',ParentItem,1 * 300,0,300,0,0,300,0,0);
      TestPrice('One part',ParentItem,1 * 400,0);

      childItem.GET(CreateItem(TEXT_PART2,300,400));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComponent.Type::Item,childItem."No.",3,childItem."Base Unit of Measure",FALSE);
      TestCost('Two parts',ParentItem,300 + 3 * 300,0,1200,0,0,1200,0,0);
      TestPrice('Two parts',ParentItem,400 + 3 * 400,0);

      childItem.GET(CreateItem(TEXT_PART3,200,360));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComponent.Type::Item,childItem."No.",2,childItem."Base Unit of Measure",FALSE);
      TestCost('Three parts',ParentItem,1200 + 2 * 200,0,1600,0,0,1600,0,0);
      TestPrice('Three parts',ParentItem,1600 + 2 * 360,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(PickCalcLevel)]
    PROCEDURE NestedBOMItem@7();
    VAR
      ParentItem@1000 : Record 27;
      childItem@2005 : Record 27;
      BOMComponentItem@1001 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem('Parent',0,0));
      childItem.GET(CreateItem(TEXT_PART1,300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,childItem."No.",1,
        childItem."Base Unit of Measure",FALSE);
      BOMComponentItem.GET(CreateItem('Component',300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,BOMComponentItem."No.",3,
        BOMComponentItem."Base Unit of Measure",FALSE);

      childItem.GET(CreateItem(TEXT_PART2,200,360));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,childItem."No.",2,
        childItem."Base Unit of Measure",FALSE);

      childItem.GET(CreateItem(TEXT_SUB1,2,3));
      LibraryKitting.CreateBOMComponentLine(BOMComponentItem,BOMComponent.Type::Item,childItem."No.",3,
        childItem."Base Unit of Measure",FALSE);
      TestCost('One Sub',ParentItem,0,0,0,0,0,0,0,0);
      ValidateCost('One Sub',BOMComponentItem,300,300,0,0,300,0,0);
      TestCost('One Sub',ParentItem,1600,1,1600,0,0,1600,0,0); // 1*300 + 3*300 + 2*200
      ValidateCost('One Sub',BOMComponentItem,300,300,0,0,300,0,0); // 300
      TestCost('One Sub',ParentItem,718,2,718,0,0,718,0,0); // 1*300 + 3 * 3 * 2 + 2*200
      ValidateCost('One Sub',BOMComponentItem,6,6,0,0,6,0,0); // 3 * 2
      TestPrice('One Sub',ParentItem,0,0);
      ValidatePrice('One Sub',BOMComponentItem,400);
      TestPrice('One Sub',ParentItem,2320,1);
      ValidatePrice('One Sub',BOMComponentItem,400);
      TestPrice('One Sub',ParentItem,1147,2);
      ValidatePrice('One Sub',BOMComponentItem,9);

      childItem.GET(CreateItem(TEXT_SUB2,11,23));
      LibraryKitting.CreateBOMComponentLine(BOMComponentItem,BOMComponent.Type::Item,childItem."No.",4,
        childItem."Base Unit of Measure",FALSE);
      TestCost('Two Subs',ParentItem,718,0,718,0,0,718,0,0);
      ValidateCost('Two Subs',BOMComponentItem,6,6,0,0,6,0,0);
      TestCost('Two Subs',ParentItem,718,1,718,0,0,718,0,0);
      ValidateCost('Two Subs',BOMComponentItem,6,6,0,0,6,0,0);
      TestCost('Two Subs',ParentItem,850,2,850,0,0,850,0,0);
      ValidateCost('Two Subs',BOMComponentItem,50,50,0,0,50,0,0);
      TestPrice('Two Subs',ParentItem,1147,0);
      ValidatePrice('Two Subs',BOMComponentItem,9);
      TestPrice('Two Subs',ParentItem,1147,1);
      ValidatePrice('Two Subs',BOMComponentItem,9);
      TestPrice('Two Subs',ParentItem,1423,2);
      ValidatePrice('Two Subs',BOMComponentItem,101);

      ASSERTERROR ERROR('') // roll back
    END;

    LOCAL PROCEDURE AssertContains@15(String@1000 : Text[1024];SubString@1001 : Text[1024]);
    BEGIN
      Assert.IsFalse(STRPOS(String,SubString) = 0,
        STRSUBSTNO('Text ''%1'' should contain ''%2''',String,SubString))
    END;

    LOCAL PROCEDURE AssertNotContains@14(String@1000 : Text[1024];SubString@1001 : Text[1024]);
    BEGIN
      Assert.IsFalse(STRPOS(String,SubString) <> 0,
        STRSUBSTNO('Text ''%1'' should not contain ''%2''',String,SubString))
    END;

    [Test]
    PROCEDURE ErrorTexts@4();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      Item.GET(CreateItem('NonAssemblyForCost',500,700));
      ASSERTERROR TestCost('',Item,0,0,0,0,0,0,0,0);
      AssertContains(GETLASTERRORTEXT,'does not use replenishment system Assembly');
      AssertContains(GETLASTERRORTEXT,FORMAT(Item."No."));
      AssertContains(GETLASTERRORTEXT,Item.Description);
      AssertContains(GETLASTERRORTEXT,'Standard Cost');

      Item.GET(CreateItem('NonAssemblyForPrice',500,700));
      ASSERTERROR TestPrice('',Item,0,0);
      AssertContains(GETLASTERRORTEXT,'does not use replenishment system Assembly');
      AssertContains(GETLASTERRORTEXT,FORMAT(Item."No."));
      AssertContains(GETLASTERRORTEXT,Item.Description);
      AssertContains(GETLASTERRORTEXT,'Unit Price');

      Item.GET(CreateItem('AssemblyForCost',500,700));
      Item."Replenishment System" := Item."Replenishment System"::Assembly;
      ASSERTERROR TestCost('',Item,0,0,0,0,0,0,0,0);
      AssertContains(GETLASTERRORTEXT,'has no assembly list');
      AssertContains(GETLASTERRORTEXT,FORMAT(Item."No."));
      AssertContains(GETLASTERRORTEXT,Item.Description);
      AssertContains(GETLASTERRORTEXT,'Standard Cost');

      Item.GET(CreateItem('AssemblyForPrice',500,700));
      Item."Replenishment System" := Item."Replenishment System"::Assembly;
      ASSERTERROR TestPrice('',Item,0,0);
      AssertContains(GETLASTERRORTEXT,'has no assembly list');
      AssertContains(GETLASTERRORTEXT,FORMAT(Item."No."));
      AssertContains(GETLASTERRORTEXT,Item.Description);
      AssertContains(GETLASTERRORTEXT,'Unit Price');
    END;

    [Test]
    [HandlerFunctions(CaptureInstruction)]
    PROCEDURE RecursionPrompt@6();
    VAR
      ParentItem@1000 : Record 27;
      childItem@2006 : Record 27;
      ComponentItem@1001 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem('Parent',0,0));
      ComponentItem.GET(CreateItem('Component',300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ComponentItem."No.",3,
        ComponentItem."Base Unit of Measure",FALSE);
      childItem.GET(CreateItem(TEXT_SUB1,200,360));
      LibraryKitting.CreateBOMComponentLine(ComponentItem,BOMComponent.Type::Item,childItem."No.",2,
        childItem."Base Unit of Measure",FALSE);

      RecursionInstruction := '';
      TestCost('',ParentItem,0,0,0,0,0,0,0,0);
      AssertContains(RecursionInstruction,'Calculate');
      AssertContains(RecursionInstruction,'rolling up the assembly list components');
      AssertContains(RecursionInstruction,FORMAT(ParentItem."No."));
      AssertContains(RecursionInstruction,ParentItem.Description);
      AssertContains(RecursionInstruction,'Standard Cost');
      AssertNotContains(RecursionInstruction,'Are you sure that you want to continue?');

      RecursionInstruction := '';
      TestPrice('',ParentItem,0,0);
      AssertContains(RecursionInstruction,'Calculate');
      AssertContains(RecursionInstruction,'rolling up the assembly list components');
      AssertContains(RecursionInstruction,FORMAT(ParentItem."No."));
      AssertContains(RecursionInstruction,ParentItem.Description);
      AssertContains(RecursionInstruction,'Unit Price');
      AssertNotContains(RecursionInstruction,'Are you sure that you want to continue?');

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(CaptureInstruction)]
    PROCEDURE NonAssemblyWithListWarning@12();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      childItem@2007 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem('Parent',0,0));
      ComponentItem.GET(CreateItem('Component1',300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ComponentItem."No.",3,
        ComponentItem."Base Unit of Measure",FALSE);
      childItem.GET(CreateItem(TEXT_SUB1,200,360));
      LibraryKitting.CreateBOMComponentLine(ComponentItem,BOMComponent.Type::Item,childItem."No.",2,
        childItem."Base Unit of Measure",FALSE);
      ComponentItem.GET(CreateItem('Component2',30,40));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ComponentItem."No.",7,
        ComponentItem."Base Unit of Measure",FALSE);
      childItem.GET(CreateItem(TEXT_SUB2,20,36));
      LibraryKitting.CreateBOMComponentLine(ComponentItem,BOMComponent.Type::Item,childItem."No.",2,
        childItem."Base Unit of Measure",FALSE);
      ComponentItem."Replenishment System" := ComponentItem."Replenishment System"::Purchase;
      ComponentItem.MODIFY(FALSE);

      RecursionInstruction := '';
      TestCost('',ParentItem,0,0,0,0,0,0,0,0);
      AssertContains(RecursionInstruction,'Calculate');
      AssertContains(RecursionInstruction,'rolling up the assembly list components');
      AssertContains(RecursionInstruction,FORMAT(ParentItem."No."));
      AssertContains(RecursionInstruction,ParentItem.Description);
      AssertContains(RecursionInstruction,'Standard Cost');
      AssertContains(RecursionInstruction,'Are you sure that you want to continue?');

      RecursionInstruction := '';
      TestPrice('',ParentItem,0,0);
      AssertContains(RecursionInstruction,'Calculate');
      AssertContains(RecursionInstruction,'rolling up the assembly list components');
      AssertContains(RecursionInstruction,FORMAT(ParentItem."No."));
      AssertContains(RecursionInstruction,ParentItem.Description);
      AssertContains(RecursionInstruction,'Unit Price');
      AssertContains(RecursionInstruction,'Are you sure that you want to continue?');

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE PurchaseAndNonAssemblyWithList@16();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem('Parent',0,0));
      ComponentItem.GET(CreateItem('Component1',300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ComponentItem."No.",3,
        ComponentItem."Base Unit of Measure",FALSE);
      ComponentItem."Replenishment System" := ComponentItem."Replenishment System"::Purchase;
      ComponentItem.MODIFY(FALSE);
      ComponentItem.GET(CreateItem('Component2',30,40));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ComponentItem."No.",7,
        ComponentItem."Base Unit of Measure",FALSE);
      ComponentItem."Replenishment System" := ComponentItem."Replenishment System"::Assembly;
      ComponentItem.MODIFY(FALSE);

      TestCost('',ParentItem,3 * 300 + 7 * 30,0,1110,0,0,1110,0,0);
      TestPrice('',ParentItem,3 * 400 + 7 * 40,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE CostSharesDocSample@17();
    VAR
      ItemA@1000 : Record 27;
      ResourceA@1004 : Record 156;
      ItemB@1001 : Record 27;
      ItemC@1002 : Record 27;
      BOMComponent@1003 : Record 90;
    BEGIN
      Initialize;
      ItemA.GET(CreateItem('ItemA',0,0));
      LibraryResource.CreateResourceNew(ResourceA);
      ResourceA."Unit Cost" := 11;
      ResourceA."Direct Unit Cost" := 5;
      ResourceA.MODIFY;
      LibraryKitting.CreateBOMComponentLine(
        ItemA,BOMComponent.Type::Resource,ResourceA."No.",1,ResourceA."Base Unit of Measure",FALSE);
      ItemB.GET(CreateAsmItem('ItemB',16,10,3,3,10,3,3));

      ItemC.GET(CreateAsmItem('ItemC',8,5,2,1,5,2,1));
      LibraryKitting.CreateBOMComponentLine(ItemA,BOMComponent.Type::Item,ItemB."No.",1,
        ItemB."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemA,BOMComponent.Type::Item,ItemC."No.",1,
        ItemC."Base Unit of Measure",FALSE);

      TestCost('',ItemA,16 + 8 + 5 + 6,1,16 + 8,5,6,10 + 5,3 + 2 + 5,3 + 1 + 6);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(PickCalcLevel)]
    PROCEDURE RollupCalculationScenario@23();
    VAR
      ItemA@1000 : Record 27;
      ItemB@1001 : Record 27;
      ItemC@1002 : Record 27;
      ItemD@1003 : Record 27;
      ItemE@1004 : Record 27;
      ResourceA@1005 : Record 156;
      ResourceB@1006 : Record 156;
      ResourceC@1007 : Record 156;
      BOMComponent@1009 : Record 90;
      CalculateStandardCost@1008 : Codeunit 5812;
    BEGIN
      Initialize;
      ItemA.GET(CreateItem('ITEM A',0,0));
      ItemA."Indirect Cost %" := 10;
      ItemA.MODIFY(TRUE);
      ItemB.GET(CreateItem('ITEM B',0,0));
      ItemB."Indirect Cost %" := 10;
      ItemB.MODIFY(TRUE);
      ItemC.GET(CreateItem('ITEM C',0,0));
      ItemC."Indirect Cost %" := 10;
      ItemC.MODIFY(TRUE);
      ItemD.GET(CreateItem('ITEM D',10,0));
      ItemD."Indirect Cost %" := 10;
      ItemD.MODIFY(TRUE);
      ItemE.GET(CreateItem('ITEM E',10,0));
      ItemE."Indirect Cost %" := 10;
      ItemE.MODIFY(TRUE);
      LibraryResource.CreateResourceNew(ResourceA);
      ResourceA."Unit Cost" := 11;
      ResourceA."Direct Unit Cost" := 10;
      ResourceA.MODIFY(TRUE);
      LibraryResource.CreateResourceNew(ResourceB);
      ResourceB."Unit Cost" := 11;
      ResourceB."Direct Unit Cost" := 10;
      ResourceB.MODIFY(TRUE);
      LibraryResource.CreateResourceNew(ResourceC);
      ResourceC."Unit Cost" := 11;
      ResourceC."Direct Unit Cost" := 10;
      ResourceC.MODIFY(TRUE);
      LibraryKitting.CreateBOMComponentLine(ItemA,BOMComponent.Type::Item,ItemB."No.",1,
        ItemB."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemA,BOMComponent.Type::Resource,ResourceA."No.",1,
        ResourceA."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemA,BOMComponent.Type::Item,ItemC."No.",2,
        ItemC."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemB,BOMComponent.Type::Item,ItemD."No.",1,
        ItemD."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemB,BOMComponent.Type::Resource,ResourceB."No.",2,
        ResourceB."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemC,BOMComponent.Type::Item,ItemE."No.",2,
        ItemE."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(ItemC,BOMComponent.Type::Resource,ResourceC."No.",3,
        ResourceC."Base Unit of Measure",FALSE);

      CalcRecursionLevel := 2;
      CalculateStandardCost.CalcItem('ITEM A',TRUE);
      ValidateCost('',ItemB,35.2,10,20,2,10,20,2);
      ValidateCost('',ItemC,58.3,20,30,3,20,30,3);
      ValidateCost('',ItemA,179.08,151.8,10,1,50,90,9);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE PriceOfResourceBUG173923@18();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      grandChildItem@1004 : Record 27;
      Res@1002 : Record 156;
      BOMComponent@1003 : Record 90;
    BEGIN
      Initialize;
      ParentItem.GET(CreateItem(TEXT_PART1,0,0));
      ChildItem.GET(CreateItem(TEXT_PART2,10,15));
      grandChildItem.GET(CreateItem(TEXT_SUB1,2,3));
      LibraryKitting.CreateBOMComponentLine(ChildItem,BOMComponent.Type::Item,grandChildItem."No.",4,
        grandChildItem."Base Unit of Measure",FALSE);
      ChildItem."Replenishment System" := ChildItem."Replenishment System"::Purchase;
      ChildItem.MODIFY(TRUE);
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Item,ChildItem."No.",1,
        ChildItem."Base Unit of Measure",FALSE);
      LibraryResource.CreateResourceNew(Res);
      Res."Direct Unit Cost" := 40;
      Res."Unit Cost" := 40;
      Res."Unit Price" := 50;
      Res.MODIFY;
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComponent.Type::Resource,Res."No.",1,
        Res."Base Unit of Measure",FALSE);

      // This was the old test before changing the resource overhead into resource cost
      // TestCost('',ParentItem,1*10 + 1*40,0, 10,0,40, 10,0,40);
      TestCost('',ParentItem,1 * 10 + 1 * 40,0,10,40,0,10,40,0);

      TestPrice('',ParentItem,1 * 65,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [StrMenuHandler]
    PROCEDURE PickCalcLevel@2(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := CalcRecursionLevel
    END;

    [StrMenuHandler]
    PROCEDURE CaptureInstruction@13(Options@1002 : Text[1024];VAR Choice@1001 : Integer;Instruction@1000 : Text[1024]);
    BEGIN
      RecursionInstruction := Instruction;
      Choice := 0
    END;

    [ConfirmHandler]
    PROCEDURE CalcProdBOM@22(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.AreNotEqual(
        STRPOS(Question,'Do you want to calculate standard cost for those subassemblies?'),0,
        'Unexpected CONFIRM');
      Reply := TRUE
    END;

    LOCAL PROCEDURE ValidateCost@3(TestCase@1009 : Text[250];VAR Item@1002 : Record 27;Cost@1001 : Decimal;SLMat@1000 : Decimal;SLRes@1004 : Decimal;SLResOvhd@1005 : Decimal;RUMat@1006 : Decimal;RURes@1007 : Decimal;RUResOvhd@1008 : Decimal);
    VAR
      errors@1010 : Text[1024];
    BEGIN
      Item.GET(Item."No.");
      IF Item."Standard Cost" <> Cost THEN
        errors += STRSUBSTNO('\Bad Standard Cost of %3. expected %1, got %2',Cost,Item."Standard Cost",Item."No.");
      IF (Item."Single-Level Material Cost" <> SLMat) OR
         (Item."Single-Level Capacity Cost" <> SLRes) OR
         (Item."Single-Level Cap. Ovhd Cost" <> SLResOvhd)
      THEN
        errors += STRSUBSTNO(
            '\Bad single-level cost structure [Material x Resource x Res. Overhead)] of %7. ' +
            'expected: [%1 x %2 x %3]  got: [%4 x %5 x %6]',
            SLMat,SLRes,SLResOvhd,
            Item."Single-Level Material Cost",Item."Single-Level Capacity Cost",Item."Single-Level Cap. Ovhd Cost",
            Item."No.");
      IF (Item."Rolled-up Material Cost" <> RUMat) OR
         (Item."Rolled-up Capacity Cost" <> RURes) OR
         (Item."Rolled-up Cap. Overhead Cost" <> RUResOvhd)
      THEN
        errors += STRSUBSTNO(
            '\Bad rolled-up cost structure [ (Material x Resource x Res. Overhead)]. of %7 ' +
            'expected: [%1 x %2 x %3]  got: [%4 x %5 x %6]',
            RUMat,RURes,RUResOvhd,
            Item."Rolled-up Material Cost",Item."Rolled-up Capacity Cost",Item."Rolled-up Cap. Overhead Cost",
            Item."No.");
      IF Item."Standard Cost" <>
         Item."Single-Level Material Cost" +
         Item."Single-Level Capacity Cost" +
         Item."Single-Level Cap. Ovhd Cost" +
         Item."Single-Level Mfg. Ovhd Cost" +
         Item."Single-Level Subcontrd. Cost"
      THEN
        errors += STRSUBSTNO(
            '\Standard Cost, %1, does not equal sum of single-level cost shares, %2',
            Item."Standard Cost",
            Item."Single-Level Material Cost" +
            Item."Single-Level Capacity Cost" +
            Item."Single-Level Cap. Ovhd Cost" +
            Item."Single-Level Mfg. Ovhd Cost" +
            Item."Single-Level Subcontrd. Cost");
      IF Item."Standard Cost" <>
         Item."Rolled-up Material Cost" +
         Item."Rolled-up Capacity Cost" +
         Item."Rolled-up Cap. Overhead Cost" +
         Item."Rolled-up Mfg. Ovhd Cost" +
         Item."Rolled-up Subcontracted Cost"
      THEN
        errors += STRSUBSTNO(
            '\Standard Cost, %1, does not equal sum of rolled-up cost shares, %2',
            Item."Standard Cost",
            Item."Rolled-up Material Cost" +
            Item."Rolled-up Capacity Cost" +
            Item."Rolled-up Cap. Overhead Cost" +
            Item."Rolled-up Mfg. Ovhd Cost" +
            Item."Rolled-up Subcontracted Cost");
      Assert.AreEqual(errors,'',TestCase + ':' + errors)
    END;

    LOCAL PROCEDURE TestCost@1(TestCase@1010 : Text[30];VAR Item@1005 : Record 27;Cost@1001 : Decimal;Recursion@1004 : Integer;SLMat@1009 : Decimal;SLRes@1008 : Decimal;SLResOvhd@1007 : Decimal;RUMat@1006 : Decimal;RURes@1002 : Decimal;RUResOvhd@1000 : Decimal);
    VAR
      CalculateStandardCost@1003 : Codeunit 5812;
    BEGIN
      Item.MODIFY(TRUE);
      CalcRecursionLevel := Recursion;
      CalculateStandardCost.CalcItem(Item."No.",NOT Item.IsMfgItem);
      ValidateCost(TestCase + ', recursion=' + FORMAT(Recursion),
        Item,Cost,SLMat,SLRes,SLResOvhd,RUMat,RURes,RUResOvhd);
      CalculateStandardCost.CalcItem(Item."No.",NOT Item.IsMfgItem);
      ValidateCost('2nd ' + TestCase + ', recursion=' + FORMAT(Recursion),
        Item,Cost,SLMat,SLRes,SLResOvhd,RUMat,RURes,RUResOvhd)
    END;

    LOCAL PROCEDURE ValidatePrice@8(TestCase@1000 : Text[250];VAR Item@1004 : Record 27;Price@1001 : Decimal);
    BEGIN
      Item.GET(Item."No.");
      Assert.AreEqual(Item."Unit Price",Price,
        STRSUBSTNO(TestCase + ': Bad Unit Price of %3. expected %1, got %2',Price,Item."Unit Price",Item."No."))
    END;

    LOCAL PROCEDURE TestPrice@9(TestCase@1000 : Text[30];VAR Item@1005 : Record 27;Price@1001 : Decimal;Recursion@1004 : Integer);
    VAR
      CalculateStandardCost@1003 : Codeunit 5812;
    BEGIN
      Item.MODIFY(TRUE);
      CalcRecursionLevel := Recursion;
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");
      ValidatePrice(TestCase + ', recursion=' + FORMAT(Recursion),Item,Price);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");
      ValidatePrice('2nd ' + TestCase + ', recursion=' + FORMAT(Recursion),Item,Price)
    END;

    LOCAL PROCEDURE CreateItem@5(No@1004 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal) : Code[20];
    VAR
      UOM@2008 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(LibraryKitting.ItemCreate(No,ITEM_DESC,UOM.Code,Price,Cost))
    END;

    LOCAL PROCEDURE CreateAsmItem@24(No@1004 : Code[20];Cost@1008 : Decimal;SLMat@1007 : Decimal;SLRes@1006 : Decimal;SLResOvhd@1005 : Decimal;RUMat@1002 : Decimal;RURes@1001 : Decimal;RUResOvhd@1000 : Decimal) : Code[20];
    VAR
      item@1003 : Record 27;
      UOM@2009 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      WITH item DO BEGIN
        LibraryKitting.ItemCreate(No,ITEM_DESC,UOM.Code,0,Cost);
        GET(No);
        "Standard Cost" := Cost;
        "Single-Level Material Cost" := SLMat;
        "Single-Level Capacity Cost" := SLRes;
        "Single-Level Cap. Ovhd Cost" := SLResOvhd;
        "Single-Level Mfg. Ovhd Cost" := Cost - SLMat - SLRes - SLResOvhd;
        "Rolled-up Material Cost" := RUMat;
        "Rolled-up Capacity Cost" := RURes;
        "Rolled-up Cap. Overhead Cost" := RUResOvhd;
        "Rolled-up Mfg. Ovhd Cost" := Cost - RUMat - RURes - RUResOvhd;
        "Replenishment System" := "Replenishment System"::Assembly;
        MODIFY(TRUE)
      END;
      ValidateCost('',item,Cost,SLMat,SLRes,SLResOvhd,RUMat,RURes,RUResOvhd);
      EXIT(No)
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [BOM Component] [SCM]
      Target:
        CalcItem (BOM standard cost) and CalcAssemblySalesPrice (BOM unit price)
        of Codeunit 5812 Calculate Standard Cost
      Approach:
        Syntesize test data (Item an BOM Component records) in each test method,
        end with a roll back leaving no trail in the DB.
      Assumption:
        Test target does *NOT* call COMMIT
      Demodata dependencies:
        a) UOM setup - 'PCS'
        b) Number Series 'ITEM1' and 'ITEM5'
      Test data BOM structure:
        (0 x 0) parent
          + 1 * ( 300 x 400 )
          + 3 * ( 300 x 400 ) component
              + 2 * (   2 x   3 )
              + 4 * (  11 x  23 )
          + 2 * ( 200 x 360 )
        legend:
          BOM Component = '+ <quantity> '* Item
          Item          = '(<cost> 'x <price>') [<name of variable>]

      TODO:
        add more costing methods and UOMs and combinations thereof
        consider a unit test of UOM Management
        lhammer 2010 04 16
    }
    END.
  }
}

