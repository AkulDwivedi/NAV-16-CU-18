OBJECT Codeunit 136113 Service Line Update Validation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1015 : Codeunit 131300;
      LibraryInventory@1012 : Codeunit 132201;
      LibraryResource@1013 : Codeunit 130511;
      LibrarySales@1014 : Codeunit 130509;
      LibraryService@1001 : Codeunit 131902;
      LibraryUtility@1009 : Codeunit 131000;
      Assert@1008 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      NegativeQuantityError@1002 : TextConst 'ENU="%1 must be positive in %2 %3=''%4'',%5=''%6'',%7=''%8''."';
      UnknownError@1003 : TextConst 'ENU=Unexpected Error';
      QuantityError@1004 : TextConst 'ENU="%1 must not be less than %2 in %3 %4=''%5'',%6=''%7'',%8=''%9''."';
      QtyToShipError@1005 : TextConst 'ENU=You cannot ship more than %1 units.';
      QtyToInvoiceError@1006 : TextConst 'ENU=You cannot invoice more than %1 units.';
      QtyToConsumeError@1007 : TextConst 'ENU=You cannot consume more than %1 units.';
      NothingToPostError@1010 : TextConst 'ENU=There is nothing to post.';
      ServiceShipmentLineError@1011 : TextConst 'ENU="%1 must be %2 on %3 %4=%5."';

    [Normal]
    LOCAL PROCEDURE Initialize@61();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      // Create Demonstration Database
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE NegativeQuantity@19();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceCost@1006 : Record 5905;
    BEGIN
      // Covers document number TC-PP-VR-1, TC-PP-VR-2, TC-PP-VR-3, TC-PP-VR-4 - refer to TFS ID 20884.
      // Test error occurs on Negative Quantity, Qty. to Ship, Qty. to Invoice and Qty. to Consume updation on Service Line.

      // 1. Create Service Order - Service Header, Service Item Line and Service Line with Type Item, Resource and Cost.
      CreateServiceOrder(ServiceHeader);
      LibraryService.FindServiceCost(ServiceCost);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);
      COMMIT;

      // 2. Verify: Verify error occurs "Quantity must be Positive" on updating Negative Quantity, Qty. to Ship, Qty. to Invoice
      // and Qty. to Consume on All Service Lines.
      // Use Random because value is not important.
      VerifyNegativeQuantity(ServiceLine,RANDOM(10));
      VerifyNegativeQtyToShip(ServiceLine,RANDOM(10));
      VerifyNegativeQtyToInvoice(ServiceLine,RANDOM(10));
      VerifyNegativeQtyToConsume(ServiceLine,RANDOM(10));
    END;

    [Test]
    PROCEDURE FractionQuantity@8();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceCost@1006 : Record 5905;
      Quantity@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-1 - refer to TFS ID 20884.
      // Test Fraction Quantity Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line and Service Line with Type Item, Resource and Cost.
      CreateServiceOrder(ServiceHeader);
      LibraryService.FindServiceCost(ServiceCost);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);

      // 2. Exercise: Update fraction Quantity on Service Line.
      Quantity := LibraryUtility.GenerateRandomFraction;
      UpdateFractionQuantity(ServiceLine,Quantity);

      // 3. Verify: Verify that Quantity Successfully updated with Fraction Value on All Service Lines.
      VerifyFractionQuantity(ServiceLine,Quantity);
    END;

    [Test]
    PROCEDURE FractionQuantityToShip@22();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceCost@1006 : Record 5905;
      Quantity@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-2 - refer to TFS ID 20884.
      // Test Fraction Quantity to Ship Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line and Service Line with Type Item, Resource and Cost.
      CreateServiceOrder(ServiceHeader);
      LibraryService.FindServiceCost(ServiceCost);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);

      // 2. Exercise: Update fraction Qty. to Ship on Service Line.
      Quantity := LibraryUtility.GenerateRandomFraction;
      UpdateFractionQtyToShip(ServiceLine,Quantity);

      // 3. Verify: Verify that Qty. to Ship Successfully updated with Fraction Value on All Service Lines.
      VerifyFractionQtyToShip(ServiceLine,Quantity);
    END;

    [Test]
    PROCEDURE FractionQuantityToInvoice@9();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceCost@1006 : Record 5905;
      Quantity@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-3 - refer to TFS ID 20884.
      // Test Fraction Quantity to Invoice Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line and Service Line with Type Item, Resource and Cost.
      CreateServiceOrder(ServiceHeader);
      LibraryService.FindServiceCost(ServiceCost);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);

      // 2. Exercise: Update fraction Qty. to Invoice on Service Line.
      Quantity := LibraryUtility.GenerateRandomFraction;
      UpdateFractionQtyToInvoice(ServiceLine,Quantity);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with Fraction Value on All Service Lines.
      VerifyFractionQtyToInvoice(ServiceLine,Quantity);
    END;

    [Test]
    PROCEDURE FractionQuantityToConsume@16();
    VAR
      ServiceHeader@1001 : Record 5900;
      Quantity@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-4 - refer to TFS ID 20884.
      // Test Fraction Quantity to Consume Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line and Service Line with Type Item, and Resource.
      CreateServiceOrder(ServiceHeader);

      // 2. Exercise: Update fraction Qty. to Consume on Service Line.
      Quantity := LibraryUtility.GenerateRandomFraction;
      UpdateFractionQtyToConsume(ServiceHeader,Quantity);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with Fraction Value on All Service Lines.
      VerifyFractionQtyToConsume(ServiceHeader,Quantity);
    END;

    [Test]
    PROCEDURE QtyLimitOnSameQty@10();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-5 - refer to TFS ID 20884.
      // Test same value of Quantity Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update same value of Quantity on Service Line.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateQtyOnServiceLine(ServiceHeader,0);  // Use 0 for same Quantity Updation.

      // 3. Verify: Verify that Quantity Successfully updated with Same Value of Quantity on All Service Lines.
      VerifyQuantityUpdation(TempServiceLine,0);  // Use 0 for same Quantity Updation.
    END;

    [Test]
    PROCEDURE QtyLimitGreaterThanQty@18();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      Quantity@1003 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-5 - refer to TFS ID 20884.
      // Test greater value of Quantity Successfully updated on Service Line.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update greater value of Quantity on Service Line.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      Quantity := RANDOM(10);  // Use Random because value is not important.
      UpdateQtyOnServiceLine(ServiceHeader,Quantity);

      // 3. Verify: Verify that Quantity Successfully updated with Greater value than Quantity on All Service Lines.
      VerifyQuantityUpdation(TempServiceLine,Quantity);
    END;

    [Test]
    PROCEDURE QtyLimitLessThanQtyShipped@25();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-5 - refer to TFS ID 20884.
      // Test error occurs on less value of Quantity updation on Service Line.

      // 1. Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Verify: Verify that error occurs "Quantity cannot be less than" on Updating Quantity less than Quantity Shipped on all Service
      // Lines.
      VerifyLessQuantityUpdation(ServiceHeader);
    END;

    [Test]
    PROCEDURE QtyToShipEqualRemainingQty@29();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-6 - refer to TFS ID 20884.
      // Test Qty. to Ship Successfully updated on Service Line equal Remaining Quantity.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Ship on Service Line equal Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateEqualQtyToShip(ServiceHeader);

      // 3. Verify: Verify that Qty. to Ship Successfully updated with Remaining Quantity on All Service Lines.
      VerifyEqualQtyToShip(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToShipGreaterRemainingQty@40();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-6 - refer to TFS ID 20884.
      // Test error occurs on Qty. to Ship updation on Service Line greater than Remaining Quantity.

      // 1. Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Verify: Verify that error occurs "Qty. to Ship must not be Greater" on updating Qty. to Ship with greater than Remaining
      // Quantity on All Service Lines.
      VerifyGreaterQtyToShip(ServiceHeader);
    END;

    [Test]
    PROCEDURE QtyToInvoiceEqualRemainingQty@33();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-7 - refer to TFS ID 20884.
      // Test Qty. to Invoice Successfully updated on Service Line equal Remaining Quantity.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Invoice on Service Line equal Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateSameQtyToInvoice(ServiceHeader);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with Remaining Quantity on All Service Lines.
      VerifySameQtyToInvoice(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToInvoiceLessRemainingQty@62();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      FractionFactor@1000 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-7 - refer to TFS ID 20884.
      // Test Qty. to Invoice Successfully updated on Service Line less than Remaining Quantity.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Invoice on Service Line less than Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      FractionFactor := LibraryUtility.GenerateRandomFraction;
      UpdateLessQtyToInvoice(ServiceHeader,FractionFactor);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with less than Remaining Quantity on All Service Lines.
      VerifyLessQtyToInvoice(TempServiceLine,FractionFactor);
    END;

    [Test]
    PROCEDURE QtyToInvoiceLargeRemainingQty@69();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-7 - refer to TFS ID 20884.
      // Test error occurs on Qty. to Invoice updation on Service Line with greater than Remaining Quantity.

      // 1. Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // Verify: Verify that error occurs "Qty. to Invoice must not be Greater" on updating Qty. to Invoice with greater than Remaining
      // Quantity on All Service Lines.
      VerifyGreaterQtyToInvoice(ServiceHeader);
    END;

    [Test]
    PROCEDURE QtyToConsumeEqualZero@30();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-8 - refer to TFS ID 20884.
      // Test Qty. to Consume Successfully updated on Service Line with zero.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Update Qty. to Consume on Service Line with Zero.
      UpdateZeroQtyToConsume(ServiceHeader);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with 0 on All Service Lines.
      VerifyZeroQtyToConsumeUpdation(ServiceHeader);
    END;

    [Test]
    PROCEDURE QtyToConsumeLessRemainQty@44();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-8 - refer to TFS ID 20884.
      // Test Qty. to Consume Successfully updated on Service Line less than Remaining Quantity.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Consume on Service Line less than Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateLessQtyToConsume(ServiceHeader);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with less than Remaining Quantity on All Service Lines.
      VerifyLessQtyToConsume(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToConsumeGreaterRemainQty@56();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-8 - refer to TFS ID 20884.
      // Test error occurs on Qty. to Consume updation on Service Line with greater than Remaining Quantity.

      // 1. Create Service Order - Service Header, Service Item Line, Service Line with Type Item and Post Order in Multiple Steps.
      CreateAndPostServiceOrder(ServiceHeader);

      // 2. Verify: Verify that error occurs "Qty. to Consume must not be Greater" on updating Qty. to Consume with greater than Remaining
      // Quantity on All Service Lines.
      VerifyGreaterQtyToConsume(ServiceHeader);
    END;

    [Test]
    PROCEDURE PostingAsShipWithCurrency@17();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Service Line values after Post Service Order as Ship with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship Partially.
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify the Values of Service Line after Posting.
      VerifyServiceLineAfterShip(ServiceHeader);
    END;

    [Test]
    PROCEDURE PostingAsConsumeWithCurrency@55();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Service Line values after Post Service Order as Ship and Consume with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Consume Partially.
      UpdateQtyToConsume(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Values of Service Line after Posting.
      VerifyServiceLineAfterConsume(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionWithCurrency@31();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceShipmentLine@1004 : Record 5991;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Service Line values after Undo Consumption with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code, Update Qty. to Consume on Service Line.
      CreateServiceOrderWithCurrency(ServiceHeader);

      UpdateQtyToConsume(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Consume Partially, Undo Consumption.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentLine.SETRANGE("Order No.",ServiceHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);

      // 3. Verify: Verify the Values of Service Line after Posting.
      VerifyUndoServiceLine(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoShipmentWithCurrency@79();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceShipmentLine@1004 : Record 5991;
    BEGIN
      // Covers document number TC-PP-SV-1, TC-PP-VR-17 - refer to TFS ID 20885.
      // Test Service Line values after Undo Shipment with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code, Update Qty. to Ship on Service line.
      CreateServiceOrderWithCurrency(ServiceHeader);

      UpdatePartQtyToShip(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Consume Partially, Undo Consumption.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceShipmentLine.SETRANGE("Order No.",ServiceHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);

      // Verify: Verify the Values of Service Line after Posting.
      VerifyUndoServiceLine(ServiceHeader);
    END;

    [Test]
    PROCEDURE PostingAsShipInvoiceCurrency@93();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Service Line values after Post Service Order as Ship and Invoice with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Invoice Partially.
      UpdateQtyToInvoice(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify the Values of Service Line after Posting.
      VerifyServiceLine(TempServiceLine);
    END;

    [Test]
    PROCEDURE PostingAsInvoiceWithCurrency@104();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Service Line values after Post Service Order as Invoice with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship Partially, Post Service Order as Invoice Partially.
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      UpdatePartQtyToInvoice(ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify the Values of Service Line after Posting.
      VerifyServiceLineAfterInvoice(TempServiceLine);
    END;

    [Test]
    PROCEDURE UnitPriceOnServiceLine@1();
    VAR
      ServiceHeader@1001 : Record 5900;
      UnitPrice@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Unit Price Updation on Service Line with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Update Unit Price on all Service Lines.
      UnitPrice := RANDOM(10);  // Use Random because value is not important.
      UpdateUnitPriceOnServiceLine(ServiceHeader,UnitPrice);

      // 3. Verify: Verify that Unit Price Successfully updated on all Service Lines.
      VerifyUnitPriceOnServiceLine(ServiceHeader,UnitPrice);
    END;

    [Test]
    PROCEDURE UnitCostOnServiceLine@127();
    VAR
      ServiceHeader@1001 : Record 5900;
      UnitCost@1002 : Decimal;
    BEGIN
      // Covers document number TC-PP-SV-1 - refer to TFS ID 20885.
      // Test Unit Cost Updation on Service Line with Currency Code.

      // 1. Setup: Create Service Order with Customer having Currency Code.
      CreateServiceOrderWithCurrency(ServiceHeader);

      // 2. Exercise: Update Unit Cost on all Service Lines.
      UnitCost := RANDOM(10);  // Use Random because value is not important.
      UpdateUnitCostOnServiceLine(ServiceHeader,UnitCost);

      // 3. Verify: Verify that Unit Cost Successfully updated on all Service Lines.
      VerifyUnitCostOnServiceLine(ServiceHeader,UnitCost);
    END;

    [Test]
    PROCEDURE QtyEqualSameQtyResource@83();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-9 - refer to TFS ID 20884.
      // Test same value of Quantity Successfully updated on Service Line with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update same value of Quantity on Service Line.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateQtyOnServiceLine(ServiceHeader,0);  // Use 0 for same Quantity Updation.

      // 3. Verify: Verify that Quantity Successfully updated with Same Value of Quantity on All Service Lines.
      VerifyQuantityUpdation(TempServiceLine,0);  // Use 0 for same Quantity Updation.
    END;

    [Test]
    PROCEDURE QtyGreaterThanQtyResource@105();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      Quantity@1003 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-9 - refer to TFS ID 20884.
      // Test greater value of Quantity Successfully updated on Service Line with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update greater value of Quantity on Service Line.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      Quantity := RANDOM(10);  // Use Random because value is not important.
      UpdateQtyOnServiceLine(ServiceHeader,Quantity);

      // 3. Verify: Verify that Quantity Successfully updated with Greater value than Quantity on All Service Lines.
      VerifyQuantityUpdation(TempServiceLine,Quantity);
    END;

    [Test]
    PROCEDURE QtyEqualQtyShippedResource@116();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1000 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-9 - refer to TFS ID 20884.
      // Test Quantity Successfully updated on Service Line equal Quantity Shipped with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Quantity equal Quantity Shipped on Service Line.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateQtyEqualQuantityShipped(ServiceHeader);

      // 3. Verify: Verify that Quantity Successfully updated with equal Quantity Shipped on All Service Lines.
      VerifyQtyToShipUpdation(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToShipRemainingQtyResource@27();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-10 - refer to TFS ID 20884.
      // Test Qty. to Ship Successfully updated on Service Line equal Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Ship on Service Line equal Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateEqualQtyToShip(ServiceHeader);

      // 3. Verify: Verify that Qty. to Ship Successfully updated with Remaining Quantity on All Service Lines.
      VerifyEqualQtyToShip(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToShipEqualZeroResource@35();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-10 - refer to TFS ID 20884.
      // Test Qty. to Ship Successfully updated on Service Line equal Zero with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Ship on Service Line equal Zero.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateZeroQtyToShip(ServiceHeader);

      // 3. Verify: Verify that Qty. to Ship Successfully updated with Zero on All Service Lines.
      VerifyZeroQtyToShip(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToShipLessRemainingResource@98();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      FractionFactor@1000 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-10 - refer to TFS ID 20884.
      // Test Qty. to Ship Successfully updated on Service Line less than Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Ship on Service Line less than Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      FractionFactor := LibraryUtility.GenerateRandomFraction;
      UpdateLessQtyToShip(ServiceHeader,FractionFactor);

      // 3. Verify: Verify that Qty. to Ship Successfully updated with less than Remaining Quantity on All Service Lines.
      VerifyLessQtyToShipUpdation(TempServiceLine,FractionFactor);
    END;

    [Test]
    PROCEDURE QtyToInvoiceRemainingResource@46();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-11 - refer to TFS ID 20884.
      // Test Qty. to Invoice Successfully updated on Service Line equal Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Invoice on Service Line equal Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateSameQtyToInvoice(ServiceHeader);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with Remaining Quantity on All Service Lines.
      VerifySameQtyToInvoice(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToInvoiceEqualZeroResource@76();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-11 - refer to TFS ID 20884.
      // Test Qty. to Invoice Successfully updated on Service Line equal Zero with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Invoice on Service Line equal Zero.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateZeroQtyToInvoice(ServiceHeader);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with Zero on All Service Lines.
      VerifyZeroQtyToInvoice(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToInvoiceLessResource@103();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      FractionFactor@1000 : Decimal;
    BEGIN
      // Covers document number TC-PP-VR-11 - refer to TFS ID 20884.
      // Test Qty. to Invoice Successfully updated on Service Line less than Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Invoice on Service Line less than Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      FractionFactor := LibraryUtility.GenerateRandomFraction;
      UpdateLessQtyToInvoice(ServiceHeader,FractionFactor);

      // 3. Verify: Verify that Qty. to Invoice Successfully updated with less than Remaining Quantity on All Service Lines.
      VerifyLessQtyToInvoice(TempServiceLine,FractionFactor);
    END;

    [Test]
    PROCEDURE QtyToConsumeEqualZeroResource@113();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-12 - refer to TFS ID 20884.
      // Test Qty. to Consume Successfully updated on Service Line equal zero with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Consume on Service Line with Zero.
      UpdateZeroQtyToConsume(ServiceHeader);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with Zero on All Service Lines.
      VerifyZeroQtyToConsumeUpdation(ServiceHeader);
    END;

    [Test]
    PROCEDURE QtyToConsumeLessResource@125();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-12 - refer to TFS ID 20884.
      // Test Qty. to Consume Successfully updated on Service Line less than Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Consume on Service Line less than Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateLessQtyToConsume(ServiceHeader);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with less than Remaining Quantity on All Service Lines.
      VerifyLessQtyToConsume(TempServiceLine);
    END;

    [Test]
    PROCEDURE QtyToConsumeRemainingResource@135();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-12 - refer to TFS ID 20884.
      // Test Qty. to Consume Successfully updated on Service Line equal Remaining Quantity with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Save Service Line in Temporary Table and Update Qty. to Consume on Service Line equal Remaining Quantity.
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      UpdateSameQtyToConsume(ServiceHeader);

      // 3. Verify: Verify that Qty. to Consume Successfully updated with Remaining Quantity on All Service Lines.
      VerifySameQtyToConsumeUpdation(TempServiceLine);
    END;

    [Test]
    PROCEDURE ShipEqualRemainingQty@65();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-13 - refer to TFS ID 20884.
      // Test Service Line values after Post Service Order as Ship having "Qty. to Ship" equal Remaining Quantity with Type Item
      // and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Ship on Service Line equal Remaining Quantity, Save Service Line in Temporary Table and Post Service
      // Order as Ship.
      UpdateEqualQtyToShip(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify Values of Service Line after Posting.
      VerifyServiceLine(TempServiceLine);
    END;

    [Test]
    PROCEDURE ShipZeroQtyToShip@100();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-13 - refer to TFS ID 20884.
      // Test error occurs on Posting Service Order as Ship having Zero "Qty. to Ship " with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Zero Qty. to Ship on Service Line.
      UpdateZeroQtyToShip(ServiceHeader);

      // 3. Verify: Verify error occurs "Nothing to Post" on Posting Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(STRSUBSTNO(NothingToPostError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE InvoiceEqualRemainingQty@120();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-14 - refer to TFS ID 20884.
      // Test Service Line values after Post Service Order as Invoice having "Qty. to Invoice" equal Remaining Quantity with Type Item and
      // Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Invoice on Service Line equal Remaining Quantity, Save Service Line in Temporary Table and Post
      // Service Order as Invoice.
      UpdateSameQtyToInvoice(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify Values of Service Line after Posting.
      VerifyServiceLineAfterPosting(TempServiceLine);
    END;

    [Test]
    PROCEDURE InvoiceZeroQtyToInvoice@51();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-14 - refer to TFS ID 20884.
      // Test error occurs on Posting Service Order as Invoice having Zero "Qty. to Invoice " with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Zero Qty. to Invoice on Service Line.
      UpdateZeroQtyToInvoice(ServiceHeader);

      // 3. Verify: Verify error occurs "Nothing to Post" on Posting Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);
      Assert.AreEqual(STRSUBSTNO(NothingToPostError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE ConsumeEqualRemainingQty@112();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1000 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-15 - refer to TFS ID 20884.
      // Test Service Line values after Post Service Order as Ship and Consume having "Qty. to Consume" equal Remaining Quantity with Type
      // Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Consume on Service Line equal Remaining Quantity, Save Service Line in Temporary Table and Post
      // Service Order as Ship and Consume.
      UpdateSameQtyToConsume(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Values of Service Line after Posting.
      VerifyServiceLine(TempServiceLine);
    END;

    [Test]
    PROCEDURE ConsumeZeroQtyToConsume@89();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-15 - refer to TFS ID 20884.
      // Test error occurs on Posting Service Order as Ship and Consume having Zero "Qty. to Consume" with Type Item and Resource.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Zero Qty. to Invoice on Service Line.
      UpdateZeroQtyToConsume(ServiceHeader);

      // 3. Verify: Verify error occurs "Nothing to Post" on Posting Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      Assert.AreEqual(STRSUBSTNO(NothingToPostError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE ShipAndInvoiceZeroQtyToInvoice@86();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1000 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-16 - refer to TFS ID 20885.
      // Test Service Line values after Post Service Order as Ship and Invoice with Zero "Qty. to Invoice".

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Ship equal Remaining Quantity and Qty. to Invoice Zero on Service Line Save Service Line in
      // Temporary Table and Post Service Order as Ship and Invoice.
      UpdateEqualQtyToShip(ServiceHeader);
      UpdateZeroQtyToInvoice(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Values of Service Line after Posting.
      VerifyServiceLine(TempServiceLine);
    END;

    [Test]
    PROCEDURE ShipAndInvoiceWithoutQuantity@87();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC-PP-VR-16 - refer to TFS ID 20884.
      // Test error occurs on Posting Service Order as Ship and Invoice with Zero "Qty. to Ship" and "Qty. to Invoice".

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Ship and Qty. to Invoice Zero on Service Line.
      UpdateZeroQtyToShip(ServiceHeader);
      UpdateZeroQtyToInvoice(ServiceHeader);

      // 3. Verify: Verify error occurs "Nothing to Post" on Posting Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      Assert.AreEqual(STRSUBSTNO(NothingToPostError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE ShipAndInvoiceZeroQtyToShip@91();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1000 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-VR-16 - refer to TFS ID 20884.
      // Test Service Line values after Post Service Order as Ship and Invoice with Zero "Qty. to Ship".

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item, Resource and Post Order in
      // Multiple Steps.
      CreateAndPostOrderResource(ServiceHeader);

      // 2. Exercise: Update Qty. to Ship Zero and Qty. to Invoice equal Remaining Quantity on Service Line Save Service Line in
      // Temporary Table and Post Service Order as Ship and Invoice.
      UpdateZeroQtyToShip(ServiceHeader);
      UpdateSameQtyToInvoice(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Values of Service Line after Posting.
      VerifyServiceLine(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoShipmentPostedTwiceAsShip@96();
    VAR
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1000 : TEMPORARY Record 5902;
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      // Covers document number TC-PP-VR-18 - refer to TFS ID 20884.
      // Test Service Line values after undo shipment Posted as Ship in Multiple Steps.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item. Update Qty. to Ship on Service
      // Line and Post Service Order as Ship two times.
      CreateServiceOrderWithItem(ServiceHeader);
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      UpdateLessQtyToShip(ServiceHeader,LibraryUtility.GenerateRandomFraction);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 2. Exercise: Undo Shipment Service Shipment Line.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);

      // 3. Verify: Verify Service Shipment Line and Service Line after Undo Shipment.
      VerifyShipmentLineAfterUndo(TempServiceLine);
      VerifyServiceLineAfterUndo(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPostedTwice@97();
    VAR
      ServiceHeader@1002 : Record 5900;
      TempServiceLine@1001 : TEMPORARY Record 5902;
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      // Covers document number TC-PP-VR-19 - refer to TFS ID 20884.
      // Test Service Line values after undo consumption Posted as Ship and Consume in Multiple Steps.

      // 1. Setup: Create Service Order - Service Header, Service Item Line, Service Line with Type Item. Update Qty. to Ship on Service
      // Line and Post Service Order as Ship, Update Qty. to consume on Service Line and Post Service Order as Ship and Consume.
      CreateServiceOrderWithItem(ServiceHeader);
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      UpdateLessQtyToConsume(ServiceHeader);
      SaveServiceLineInTempTable(TempServiceLine,ServiceHeader);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Undo Consumption from Service Shipment Line.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);

      // 3. Verify: Verify Service Shipment Line and Service Line after Undo Consumption.
      VerifyShipmentLineAfterUndo(TempServiceLine);
      VerifyServiceLineAfterUndo(TempServiceLine);
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndPostOrderResource@50(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      // Create Service Header with Document Type Order and Create Service Item Line, Create Service Line with Type Item, Resource, Update
      // Qty. to Ship and Post as Ship, Update Qty to Invoice and Post as Invoice, Update Qty. to Consume and Post as Ship and Consume.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceItemLine(ServiceHeader);
      CreateServiceLineForItem(ServiceHeader);
      CreateServiceLineForResource(ServiceHeader);
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      UpdatePartQtyToInvoice(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      UpdatePartQtyToConsume(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndPostServiceOrder@43(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      // 1. Setup: Create Service Header with Document Type Order and Create Service Item Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceItemLine(ServiceHeader);

      // 2. Exercise: Create Service Line with Type Item, Update Qty. to Ship and Post as Ship, Update Qty to Invoice and Post as Invoice,
      // Update Qty. to Consume and Post as Ship and Consume.
      CreateServiceLineForItem(ServiceHeader);
      UpdatePartQtyToShip(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      UpdatePartQtyToInvoice(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      UpdatePartQtyToConsume(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrder@5(VAR ServiceHeader@1005 : Record 5900);
    VAR
      Resource@1002 : Record 156;
      ServiceItemLine@1000 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // 1. Setup: Create Service Header with Document Type Order and Create Service Item Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      // 2. Exercise: Create Service Line with Type Item and Resource.
      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrderWithCurrency@82(VAR ServiceHeader@1005 : Record 5900);
    VAR
      Customer@1004 : Record 18;
    BEGIN
      // 1. Create Service Order - Service Header, Service Item Line and Service Line for Type Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Customer.MODIFY(TRUE);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      CreateServiceItemLine(ServiceHeader);
      CreateServiceLineForItem(ServiceHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrderWithItem@70(VAR ServiceHeader@1005 : Record 5900);
    BEGIN
      // Create Service Order - Service Header, Service Item Line and Service Line for Type Item.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceItemLine(ServiceHeader);
      CreateServiceLineForItem(ServiceHeader);
    END;

    LOCAL PROCEDURE CreateServiceItemLine@15(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      Counter@1003 : Integer;
    BEGIN
      // Create 2 to 10 Service Item Lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + RANDOM(8) DO BEGIN
        CLEAR(ServiceItem);
        LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      END;
    END;

    LOCAL PROCEDURE CreateServiceLineForItem@12(ServiceHeader@1004 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDSET;
      REPEAT
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,'');
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateServiceLineForResource@68(ServiceHeader@1004 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDSET;
      REPEAT
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,'');
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE SaveServiceLineInTempTable@42(VAR TempServiceLine@1000 : TEMPORARY Record 5902;ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE SelectOldServiceLine@66(VAR TempServiceLine@1000 : TEMPORARY Record 5902;VAR ServiceLine@1001 : Record 5902);
    BEGIN
      TempServiceLine.FINDSET;
      ServiceLine.SETRANGE("Document Type",TempServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",TempServiceLine."Document No.");
      ServiceLine.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE SelectServiceLine@52(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateEqualQtyToShip@124(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity - ServiceLine."Quantity Shipped");
        ServiceLine.VALIDATE("Qty. to Invoice",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateFractionQtyToShip@38(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE(Quantity,Quantity);
        ServiceLine.VALIDATE("Qty. to Ship",Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateFractionQtyToInvoice@63(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE(Quantity,Quantity);
        ServiceLine.VALIDATE("Qty. to Invoice",Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateFractionQtyToConsume@67(ServiceHeader@1001 : Record 5900;Quantity@1000 : Decimal);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(Quantity,Quantity);
        ServiceLine.VALIDATE("Qty. to Consume",Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateFractionQuantity@78(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE(Quantity,Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateLessQtyToConsume@101(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity - ServiceLine."Quantity Shipped");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateLessQtyToInvoice@80(ServiceHeader@1001 : Record 5900;FractionFactor@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(
          "Qty. to Invoice",
          (ServiceLine.Quantity - ServiceLine."Quantity Invoiced" - ServiceLine."Quantity Consumed") * FractionFactor);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateLessQtyToShip@53(ServiceHeader@1001 : Record 5900;FractionFactor@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",(ServiceLine.Quantity - ServiceLine."Quantity Shipped") * FractionFactor);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdatePartQtyToShip@39(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.VALIDATE("Qty. to Invoice",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdatePartQtyToConsume@45(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(
          "Qty. to Consume",(ServiceLine.Quantity - ServiceLine."Quantity Shipped") * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdatePartQtyToInvoice@54(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine."Quantity Shipped" * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateQtyEqualQuantityShipped@122(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE(Quantity,ServiceLine."Quantity Shipped");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateQtyOnServiceLine@92(ServiceHeader@1001 : Record 5900;Quantity@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(Quantity,ServiceLine.Quantity + Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateQtyToConsume@59(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateQtyToInvoice@95(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
        ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateSameQtyToConsume@141(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity - ServiceLine."Quantity Shipped");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateSameQtyToInvoice@60(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE(
          "Qty. to Invoice",ServiceLine."Quantity Shipped" - ServiceLine."Quantity Invoiced" - ServiceLine."Quantity Consumed");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateUnitCostOnServiceLine@129(ServiceHeader@1001 : Record 5900;UnitCost@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Unit Cost",UnitCost);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateUnitPriceOnServiceLine@118(ServiceHeader@1001 : Record 5900;UnitPrice@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Unit Price",UnitPrice);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateZeroQtyToConsume@94(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateZeroQtyToInvoice@85(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Invoice",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateZeroQtyToShip@48(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyEqualQtyToShip@32(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD("Qty. to Ship",TempServiceLine.Quantity - TempServiceLine."Quantity Shipped");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyFractionQuantity@20(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,Quantity);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyFractionQtyToConsume@26(ServiceHeader@1001 : Record 5900;Quantity@1000 : Decimal);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.TESTFIELD(Quantity,Quantity);
        ServiceLine.TESTFIELD("Qty. to Consume",Quantity);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyFractionQtyToInvoice@11(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,Quantity);
        ServiceLine.TESTFIELD("Qty. to Invoice",Quantity);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyFractionQtyToShip@13(ServiceLine@1001 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,Quantity);
        ServiceLine.TESTFIELD("Qty. to Ship",Quantity);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGreaterQtyToConsume@58(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        // Use Random to ensure Qty. to Consume greater than Remaining Quantity.
        ASSERTERROR ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity - ServiceLine."Quantity Shipped" + RANDOM(10));
        Assert.AreEqual(
          STRSUBSTNO(QtyToConsumeError,ServiceLine.Quantity - ServiceLine."Quantity Shipped"),GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGreaterQtyToInvoice@71(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        // Use Random to ensure Qty. to Invoice greater than Remaining Quantity.
        ASSERTERROR
          ServiceLine.VALIDATE(
            "Qty. to Invoice",ServiceLine.Quantity - ServiceLine."Quantity Invoiced" - ServiceLine."Quantity Consumed" + RANDOM(10));
        Assert.AreEqual(
          STRSUBSTNO(QtyToInvoiceError,ServiceLine.Quantity - ServiceLine."Quantity Invoiced" - ServiceLine."Quantity Consumed"),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGreaterQtyToShip@47(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        // Use Random to ensure Qty. to Ship greater than Remaining Quantity.
        ASSERTERROR ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity - ServiceLine."Quantity Shipped" + RANDOM(10));
        Assert.AreEqual(
          STRSUBSTNO(QtyToShipError,ServiceLine.Quantity - ServiceLine."Quantity Shipped"),GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLessQtyToConsume@49(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD("Qty. to Consume",TempServiceLine.Quantity - TempServiceLine."Quantity Shipped");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLessQtyToInvoice@64(VAR TempServiceLine@1002 : TEMPORARY Record 5902;FractionFactor@1001 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(
          "Qty. to Invoice",
          (TempServiceLine.Quantity - TempServiceLine."Quantity Invoiced" - TempServiceLine."Quantity Consumed") * FractionFactor);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLessQtyToShipUpdation@74(VAR TempServiceLine@1002 : TEMPORARY Record 5902;FractionFactor@1001 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD("Qty. to Ship",(TempServiceLine.Quantity - TempServiceLine."Quantity Shipped") * FractionFactor);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLessQuantityUpdation@28(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ASSERTERROR ServiceLine.VALIDATE(Quantity,ServiceLine."Quantity Shipped" * LibraryUtility.GenerateRandomFraction);
        Assert.AreEqual(
          STRSUBSTNO(
            QuantityError,ServiceLine.FIELDCAPTION(Quantity),ServiceLine.FIELDCAPTION("Quantity Shipped"),
            ServiceLine.TABLECAPTION,ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",
            ServiceLine.FIELDCAPTION("Document No."),ServiceLine."Document No.",
            ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNegativeQuantity@6(ServiceLine@1001 : Record 5902;Quantity@1002 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ASSERTERROR ServiceLine.VALIDATE(Quantity,-Quantity);
        Assert.AreEqual(
          STRSUBSTNO(
            NegativeQuantityError,ServiceLine.FIELDCAPTION(Quantity),ServiceLine.TABLECAPTION,
            ServiceLine.FIELDCAPTION("Document Type"),
            ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),ServiceLine."Document No.",
            ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNegativeQtyToConsume@4(ServiceLine@1001 : Record 5902;Quantity@1002 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ASSERTERROR ServiceLine.VALIDATE("Qty. to Consume",-Quantity);
        Assert.AreEqual(
          STRSUBSTNO(
            NegativeQuantityError,ServiceLine.FIELDCAPTION("Qty. to Consume"),ServiceLine.TABLECAPTION,
            ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
            ServiceLine."Document No.",ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNegativeQtyToInvoice@7(ServiceLine@1001 : Record 5902;Quantity@1002 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ASSERTERROR ServiceLine.VALIDATE("Qty. to Invoice",-Quantity);
        Assert.AreEqual(
          STRSUBSTNO(
            NegativeQuantityError,ServiceLine.FIELDCAPTION("Qty. to Invoice"),ServiceLine.TABLECAPTION,
            ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
            ServiceLine."Document No.",ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNegativeQtyToShip@14(ServiceLine@1001 : Record 5902;Quantity@1002 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        ASSERTERROR ServiceLine.VALIDATE("Qty. to Ship",-Quantity);
        Assert.AreEqual(
          STRSUBSTNO(
            NegativeQuantityError,ServiceLine.FIELDCAPTION("Qty. to Ship"),ServiceLine.TABLECAPTION,
            ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
            ServiceLine."Document No.",ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."),
          GETLASTERRORTEXT,UnknownError);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyQuantityUpdation@21(VAR TempServiceLine@1002 : TEMPORARY Record 5902;Quantity@1001 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity + Quantity);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyQtyToShipUpdation@138(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine."Quantity Shipped");
        ServiceLine.TESTFIELD("Qty. to Ship",0);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifySameQtyToConsumeUpdation@146(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD("Qty. to Consume",TempServiceLine.Quantity - TempServiceLine."Quantity Shipped");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifySameQtyToInvoice@36(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(
          "Qty. to Invoice",
          TempServiceLine."Quantity Shipped" - TempServiceLine."Quantity Invoiced" - TempServiceLine."Quantity Consumed");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyServiceLine@41(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Qty. to Ship" + TempServiceLine."Quantity Shipped");
        ServiceLine.TESTFIELD("Quantity Invoiced",TempServiceLine."Qty. to Invoice" + TempServiceLine."Quantity Invoiced");
        ServiceLine.TESTFIELD("Quantity Consumed",TempServiceLine."Qty. to Consume" + TempServiceLine."Quantity Consumed");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLineAfterConsume@145(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",ServiceLine.Quantity - ServiceLine."Qty. to Ship");
        ServiceLine.TESTFIELD("Quantity Consumed",ServiceLine.Quantity - ServiceLine."Qty. to Ship");
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyServiceLineAfterInvoice@37(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Quantity Shipped");
        ServiceLine.TESTFIELD("Quantity Invoiced",TempServiceLine."Qty. to Invoice");
        ServiceLine.TESTFIELD("Quantity Consumed",TempServiceLine."Qty. to Consume");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyServiceLineAfterPosting@90(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Quantity Shipped");
        ServiceLine.TESTFIELD("Quantity Invoiced",TempServiceLine."Qty. to Invoice" + TempServiceLine."Quantity Invoiced");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLineAfterShip@126(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",ServiceLine.Quantity - ServiceLine."Qty. to Ship");
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyServiceLineAfterUndo@57(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Quantity Shipped");
        ServiceLine.TESTFIELD("Quantity Consumed",TempServiceLine."Quantity Consumed");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyShipmentLineAfterUndo@99(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceShipmentHeader@1005 : Record 5990;
      ServiceShipmentLine@1002 : Record 5991;
      TotalQuantity@1003 : Decimal;
      TotalConsumedQuantity@1004 : Decimal;
      TotalInvoicedQuantity@1001 : Decimal;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceShipmentHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      REPEAT
        TotalQuantity := 0;
        TotalConsumedQuantity := 0;
        TotalInvoicedQuantity := 0;
        ServiceShipmentLine.SETRANGE("Order Line No.",TempServiceLine."Line No.");
        ServiceShipmentLine.FINDSET;
        REPEAT
          TotalQuantity += ServiceShipmentLine.Quantity;
          TotalConsumedQuantity += ServiceShipmentLine."Quantity Consumed";
          TotalInvoicedQuantity += ServiceShipmentLine."Quantity Invoiced";
        UNTIL ServiceShipmentLine.NEXT = 0;
        Assert.AreEqual(
          TotalQuantity,
          0,STRSUBSTNO(
            ServiceShipmentLineError,ServiceShipmentLine.FIELDCAPTION(Quantity),TotalQuantity,ServiceShipmentLine.TABLECAPTION,
            ServiceShipmentLine.FIELDCAPTION("Document No."),ServiceShipmentLine."Document No."));
        Assert.AreEqual(
          TotalConsumedQuantity,
          0,STRSUBSTNO(
            ServiceShipmentLineError,
            ServiceShipmentLine.FIELDCAPTION("Quantity Consumed"),TotalConsumedQuantity,ServiceShipmentLine.TABLECAPTION,
            ServiceShipmentLine.FIELDCAPTION("Document No."),ServiceShipmentLine."Document No."));
        Assert.AreEqual(
          TotalInvoicedQuantity,
          0,STRSUBSTNO(
            ServiceShipmentLineError,
            ServiceShipmentLine.FIELDCAPTION("Quantity Invoiced"),TotalInvoicedQuantity,ServiceShipmentLine.TABLECAPTION,
            ServiceShipmentLine.FIELDCAPTION("Document No."),ServiceShipmentLine."Document No."));
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyUndoServiceLine@150(ServiceHeader@1002 : Record 5900);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",0);
        ServiceLine.TESTFIELD("Quantity Consumed",0);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyZeroQtyToConsumeUpdation@34(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.TESTFIELD("Qty. to Consume",0);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyZeroQtyToInvoice@88(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Qty. to Invoice",0);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyZeroQtyToShip@81(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectOldServiceLine(TempServiceLine,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Qty. to Ship",0);
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyUnitCostOnServiceLine@134(ServiceHeader@1001 : Record 5900;UnitCost@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.TESTFIELD("Unit Cost",UnitCost);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyUnitPriceOnServiceLine@123(ServiceHeader@1001 : Record 5900;UnitPrice@1002 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      SelectServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        ServiceLine.TESTFIELD("Unit Price",UnitPrice);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@75(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Service Line] [Service]
      Unsupported version tags:
      NA: Unable to Execute

      Test for Service Posting Validation Rules:
        1. Test that Negative and Fractional Values Are Validated Correctly in the Quantity Fields.
           a. TC-PP-VR-1 - Test the Quantity Field in the Service Line.
           b. TC-PP-VR-2 - Test the Qty. to Ship Field in the Service Line.
           c. TC-PP-VR-3 - Test the Qty. to Invoice Field on the Service Line.
           d. TC-PP-VR-4 - Test the Qty. to Consume Field on the Service Line.
        2. Test the Quantity, Quantity to Ship, Quantity to Invoice and Quantity to Consume are Validated Correctly.
           a. TC-PP-VR-5 - Test the Quantity Field Is Validated Correctly.
           b. TC-PP-VR-6 - Test the Qty. to Ship Field Is Validated Correctly.
           c. TC-PP-VR-7 - Test the Qty. to Invoice Field Is Validated Correctly.
           d. TC-PP-VR-8 - Test the Qty. to Consume Field Is Validated Correctly.
        3. Test the service line fields with high and medium priority are validated correctly.
           a. TC-PP-SV-1 - Test the Service Line Fields with High and Medium Priority Are Validated Correctly.
        4. Test that Field Values Are Calculated Correctly After the Manual Modification of the Affected Fields.
           a. TC-PP-VR-9  - Test the Fields Are Validated Correctly After the Manual Modification of the Quantity Field.
           b. TC-PP-VR-10 - Test the Fields Are Validated Correctly After the Manual Modification of the Qty. to Ship Field.
           c. TC-PP-VR-11 - Test the Fields Are Validated Correctly After the Manual Modification of the Qty. to Invoice Field.
           d. TC-PP-VR-12 - Test the Fields Are Validated Correctly After Manual Modification of the Qty. to Consume Field.
        5. Test the Automatic Field Modification After Predefined Actions.
           a. TC-PP-VR-13 - Test the Automatic Fields Modification After "Ship" Action.
           b. TC-PP-VR-14 - Test the Automatic Fields Modification After "Invoice" Action.
           c. TC-PP-VR-15 - Test the Automatic Fields Modification After "Consume" Action.
           d. TC-PP-VR-16 - Test the Automatic Fields Modification After "Ship and Invoice" Action.
           e. TC-PP-VR-17 - Test the Automatic Fields Modification After "Undo Shipment" Action.
           f. TC-PP-VR-18 - Test the Automatic Fields Modification After "Undo Shipment" Action for the Service Order with Several
                            Partial Shipments.
           g. TC-PP-VR-19 - Test the Automatic Fields Modification After "Undo Consumption" Action.

      TFS_TS_ID = 20884 and 20885
      Covered Test cases:
        TFS_TC_ID=31889 and 12097
        TFS_TC_ID=31890 and 12098
        TFS_TC_ID=31893 and 12101
        TFS_TC_ID=31891 and 12099
        TFS_TC_ID=31892 and 12100
    }
    END.
  }
}

