OBJECT Codeunit 134254 Calc. Posting Date Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryERM@1008 : Codeunit 131300;
      LibraryERMCountryData@1005 : Codeunit 131305;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryRandom@1004 : Codeunit 130440;
      LibraryVariableStorage@1000 : Codeunit 131004;
      IsInitialized@1003 : Boolean;
      PaymentWarningMsg@1001 : TextConst 'ENU=This posting date will cause an overdue payment.';
      ReplacePostDateMsg@1002 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.';
      PmtDiscUnavailableErr@1010 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.';

    LOCAL PROCEDURE Initialize@25();
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      IsInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendFutureDueDatePostingDateBeforeDueDate@2();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := -LibraryRandom.RandIntInRange(1,VendorLedgerEntry."Due Date" - WORKDATE);
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",VendorLedgerEntry."Due Date" - ABS(DueDateOffset),'','',
        -VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendFutureDueDateOverduePostingDate@33();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := LibraryRandom.RandInt(10);
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",VendorLedgerEntry."Due Date" + DueDateOffset,'Unfavorable',PaymentWarningMsg,
        -VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendFutureDueDatePostingDateBeforeWorkDate@34();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := -(VendorLedgerEntry."Due Date" - WORKDATE + LibraryRandom.RandIntInRange(2,10));
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",WORKDATE,'','',-VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendPastDueDateFuturePostingDate@8();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",-LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := WORKDATE - VendorLedgerEntry."Due Date" + LibraryRandom.RandIntInRange(1,10);
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",VendorLedgerEntry."Due Date" + ABS(DueDateOffset),'Unfavorable',PaymentWarningMsg,
        -VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendPastDueDatePostingDateBeforeWorkDate@7();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",-LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := LibraryRandom.RandInt(WORKDATE - VendorLedgerEntry."Due Date");
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",WORKDATE,'Unfavorable',PaymentWarningMsg,-VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendPastDueDatePostingDateBeforeDueDate@6();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",-LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      DueDateOffset := -LibraryRandom.RandInt(10);
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",WORKDATE,'Unfavorable',PaymentWarningMsg,-VendorLedgerEntry."Purchase (LCY)");
    END;

    LOCAL PROCEDURE SuggVendMultipleMixedDates@3(DueDateRange@1006 : Integer;DueDateOffset@1007 : Integer;DiscDateOffset@1003 : Integer);
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",DueDateRange,DiscDateOffset);
      PostVendorInvoice(Vendor."No.",-DueDateRange,DiscDateOffset);
      PostVendorInvoice(Vendor."No.",0,DiscDateOffset);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,TRUE,FORMAT(DueDateOffset) + 'D',
        Vendor."No.");

      // Verify.
      VerifyMultipleGenJnlLines(GenJnlBatch,Vendor."No.",DueDateOffset,3);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendFutureMultipleMixedDatesLessThanDueDateRange@20();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := LibraryRandom.RandIntInRange(1,DueDateRange - 1);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,0);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendFutureMultipleMixedDatesMoreThanDueDateRange@17();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := DueDateRange + LibraryRandom.RandInt(10);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,0);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendPastMultipleMixedDatesLessThanDueDateRange@19();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := -LibraryRandom.RandIntInRange(1,DueDateRange - 1);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,0);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendPastMultipleMixedDatesMoreThanDueDateRange@18();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := -DueDateRange - LibraryRandom.RandInt(10);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,0);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendFuturePostDatePastDiscDate@28();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
      DiscDateOffset@1000 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := LibraryRandom.RandIntInRange(1,DueDateRange - 1);
      DiscDateOffset := LibraryRandom.RandIntInRange(1,DueDateRange - 1);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,DiscDateOffset);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,MsgHandler)]
    PROCEDURE SuggVendPastPostDateDiscountPossible@26();
    VAR
      DueDateOffset@1005 : Integer;
      DueDateRange@1003 : Integer;
      DiscDateOffset@1000 : Integer;
    BEGIN
      DueDateRange := LibraryRandom.RandIntInRange(5,10);
      DueDateOffset := -LibraryRandom.RandIntInRange(3,DueDateRange - 1);
      DiscDateOffset := LibraryRandom.RandIntInRange(1,ABS(DueDateOffset) - 1);
      SuggVendMultipleMixedDates(DueDateRange,DueDateOffset,DiscDateOffset);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendFindDiscountsErrorMsg@4();
    VAR
      GenJnlLine@1000 : Record 81;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      ASSERTERROR SuggestVendorPayments(GenJnlLine,GenJnlBatch,WORKDATE,TRUE,FALSE,TRUE,'0D','');

      // Verify.
      Assert.ExpectedError(PmtDiscUnavailableErr);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendSummarizePerVendErrorMsg@10();
    VAR
      GenJnlLine@1000 : Record 81;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      ASSERTERROR SuggestVendorPayments(GenJnlLine,GenJnlBatch,WORKDATE,FALSE,TRUE,TRUE,'0D','');

      // Verify.
      Assert.ExpectedError(PmtDiscUnavailableErr);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggVendLegacyPostingDate@16();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",LibraryRandom.RandIntInRange(5,10),0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry."Due Date",FALSE,FALSE,FALSE,'0D',Vendor."No.");

      // Verify.
      VerifyGenJnlLine(GenJnlBatch,Vendor."No.",WORKDATE,'','',-VendorLedgerEntry."Purchase (LCY)");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,ConfirmHandler,ModalPageHandler)]
    PROCEDURE SuggVendPostDateBeforeInvoiceDateExcluded@58();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      VendorLedgerEntry1@1003 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      WorkDateOffset@1005 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      PostVendorInvoice(Vendor."No.",0,0);
      FindLastInvoice(VendorLedgerEntry,Vendor."No.");
      PostVendorInvoice(Vendor."No.",LibraryRandom.RandInt(10),0);
      FindLastInvoice(VendorLedgerEntry1,Vendor."No.");
      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);

      // Exercise.
      WorkDateOffset := -LibraryRandom.RandInt(10);
      WORKDATE(WORKDATE + WorkDateOffset);
      SuggestVendorPayments(GenJnlLine,GenJnlBatch,VendorLedgerEntry1."Due Date",FALSE,FALSE,TRUE,'-1D',
        Vendor."No.");

      // Verify.
      VerifyMultipleGenJnlLines(GenJnlBatch,Vendor."No.",-1,1);
    END;

    [Test]
    PROCEDURE PmtJnlMultipleMixedDates@9();
    VAR
      Vendor@1000 : Record 23;
      VendorLedgerEntry1@1004 : Record 25;
      VendorLedgerEntry2@1005 : Record 25;
      VendorLedgerEntry3@1006 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
      DueDateRange@1003 : Integer;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      DueDateRange := LibraryRandom.RandInt(10);
      PostVendorInvoice(Vendor."No.",-DueDateRange,0);
      FindLastInvoice(VendorLedgerEntry1,Vendor."No.");
      PostVendorInvoice(Vendor."No.",0,0);
      FindLastInvoice(VendorLedgerEntry2,Vendor."No.");
      PostVendorInvoice(Vendor."No.",DueDateRange,0);
      FindLastInvoice(VendorLedgerEntry3,Vendor."No.");

      LibraryPurchase.SelectPmtJnlBatch(GenJnlBatch);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",-VendorLedgerEntry1."Purchase (LCY)");
      ApplyToVendLedgEntry(GenJnlLine,VendorLedgerEntry1);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",-VendorLedgerEntry2."Purchase (LCY)");
      ApplyToVendLedgEntry(GenJnlLine,VendorLedgerEntry2);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",-VendorLedgerEntry3."Purchase (LCY)");
      ApplyToVendLedgEntry(GenJnlLine,VendorLedgerEntry3);

      // Exercise.
      GenJnlLine.SETRANGE("Account Type",GenJnlLine."Account Type"::Vendor);
      GenJnlLine.SETRANGE("Account No.",Vendor."No.");
      GenJnlLine.CalculatePostingDate;

      // Verify.
      VerifyMultipleGenJnlLines(GenJnlBatch,Vendor."No.",0,3);
    END;

    LOCAL PROCEDURE SuggestVendorPayments@73(VAR GenJnlLine@1004 : Record 81;GenJnlBatch@1003 : Record 232;LastPaymentDate@1001 : Date;FindDiscounts@1006 : Boolean;SummarizePerVendor@1007 : Boolean;UseDueDateAsPostingDate@1008 : Boolean;DueDateOffset@1009 : Text;VendorNo@1002 : Code[20]);
    VAR
      SuggestVendorPayments@1000 : Report 393;
      DueDateOffsetDateFormula@1010 : DateFormula;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.VALIDATE("Journal Batch Name",GenJnlBatch.Name);
      SuggestVendorPayments.SetGenJnlLine(GenJnlLine);

      LibraryVariableStorage.Enqueue(LastPaymentDate);
      LibraryVariableStorage.Enqueue(FindDiscounts);
      LibraryVariableStorage.Enqueue(SummarizePerVendor);
      LibraryVariableStorage.Enqueue(UseDueDateAsPostingDate);
      EVALUATE(DueDateOffsetDateFormula,DueDateOffset);
      LibraryVariableStorage.Enqueue(DueDateOffsetDateFormula);
      LibraryVariableStorage.Enqueue(VendorNo);
      COMMIT;
      SuggestVendorPayments.RUNMODAL;
    END;

    LOCAL PROCEDURE PostVendorInvoice@5(VendorNo@1004 : Code[20];DateOffset@1003 : Integer;DiscDateOffset@1002 : Integer);
    VAR
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJnlBatch);
      LibraryERM.ClearGenJournalLines(GenJnlBatch);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Invoice,
        GenJnlLine."Account Type"::Vendor,VendorNo,-LibraryRandom.RandDec(1000,2));
      GenJnlLine.VALIDATE("Posting Date",WORKDATE);
      GenJnlLine.VALIDATE("Due Date",WORKDATE + DateOffset);
      IF DiscDateOffset <> 0 THEN BEGIN
        GenJnlLine.VALIDATE("Pmt. Discount Date",GenJnlLine."Due Date" - DiscDateOffset);
        GenJnlLine.VALIDATE("Payment Discount %",LibraryRandom.RandInt(10));
      END;
      GenJnlLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE FindLastInvoice@13(VAR VendLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20]);
    BEGIN
      VendLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
      VendLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
      VendLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE ApplyToVendLedgEntry@15(VAR GenJnlLine@1000 : Record 81;VendorLedgerEntry@1001 : Record 25);
    BEGIN
      GenJnlLine.VALIDATE("Applies-to Doc. Type",VendorLedgerEntry."Document Type");
      GenJnlLine.VALIDATE("Applies-to Doc. No.",VendorLedgerEntry."Document No.");
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyGenJnlLine@22(GenJnlBatch@1000 : Record 232;VendorNo@1007 : Code[20];ExpPostingDate@1001 : Date;ExpStyle@1002 : Text;ExpWarning@1004 : Text;ExpAmount@1008 : Decimal);
    VAR
      GenJnlLine@1003 : Record 81;
      ActualStyle@1005 : Text;
      ActualWarning@1006 : Text;
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.SETRANGE("Account Type",GenJnlLine."Account Type"::Vendor);
      GenJnlLine.SETRANGE("Account No.",VendorNo);
      GenJnlLine.FINDFIRST;
      Assert.AreEqual(ExpPostingDate,GenJnlLine."Posting Date",'Wrong posting date.');
      ActualStyle := GenJnlLine.GetOverdueDateInteractions(ActualWarning);
      Assert.AreEqual(ExpStyle,ActualStyle,'Wrong style for the record.');
      Assert.AreEqual(ExpWarning,ActualWarning,'Wrong warning for the record.');
      Assert.AreEqual(ExpAmount,GenJnlLine.Amount,'Wrong calculated amount');
    END;

    LOCAL PROCEDURE VerifyMultipleGenJnlLines@11(GenJnlBatch@1000 : Record 232;VendorNo@1001 : Code[20];DueDateOffset@1004 : Integer;ExpPaymentLines@1005 : Integer);
    VAR
      VendLedgEntry@1002 : Record 25;
      GenJnlLine@1003 : Record 81;
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.SETRANGE("Account Type",GenJnlLine."Account Type"::Vendor);
      GenJnlLine.SETRANGE("Account No.",VendorNo);

      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETFILTER("Applies-to Doc. No.",'<>%1','');
      Assert.AreEqual(ExpPaymentLines,GenJnlLine.COUNT,'Wrong number of payments.');
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          GenJnlLine.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
          GenJnlLine.FINDFIRST;
          IF VendLedgEntry."Due Date" + DueDateOffset < WORKDATE THEN
            Assert.AreEqual(WORKDATE,GenJnlLine."Posting Date",'Wrong posting date.')
          ELSE
            Assert.AreEqual(VendLedgEntry."Due Date" + DueDateOffset,GenJnlLine."Posting Date",'Wrong posting date.');
          IF VendLedgEntry."Pmt. Discount Date" >= GenJnlLine."Due Date" THEN
            Assert.AreEqual(VendLedgEntry."Purchase (LCY)" - VendLedgEntry."Original Pmt. Disc. Possible",-GenJnlLine."Amount (LCY)",
              'Wrong calculated discount.')
          ELSE
            Assert.AreEqual(VendLedgEntry."Purchase (LCY)",-GenJnlLine."Amount (LCY)",'Wrong calculated amount.');
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@1(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,ReplacePostDateMsg) > 0,'Unexpected message');
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsRequestPageHandler@76(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      LastPaymentDate@1001 : Variant;
      SummarizePerVendor@1002 : Variant;
      VendorNo@1003 : Variant;
      FindDiscounts@1004 : Variant;
      UseDueDateAsPostDate@1005 : Variant;
      DueDateOffset@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LastPaymentDate);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(LastPaymentDate);

      LibraryVariableStorage.Dequeue(FindDiscounts);
      SuggestVendorPayments.FindPaymentDiscounts.SETVALUE(FindDiscounts);

      LibraryVariableStorage.Dequeue(SummarizePerVendor);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(SummarizePerVendor);

      SuggestVendorPayments.PostingDate.SETVALUE(WORKDATE);
      LibraryVariableStorage.Dequeue(UseDueDateAsPostDate);
      SuggestVendorPayments.UseDueDateAsPostingDate.SETVALUE(UseDueDateAsPostDate);

      LibraryVariableStorage.Dequeue(DueDateOffset);
      SuggestVendorPayments.DueDateOffset.SETVALUE(DueDateOffset);
      SuggestVendorPayments.BalAccountNo.SETVALUE('');

      LibraryVariableStorage.Dequeue(VendorNo);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(VendorNo);
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNo);

      SuggestVendorPayments.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@65(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandler@68(VAR VendorLedgerEntries@1000 : TestPage 29);
    BEGIN
      VendorLedgerEntries.FIRST;
      Assert.AreEqual(FALSE,VendorLedgerEntries.NEXT,'More entries than expected on the vendor ledger entries page.');
    END;

    BEGIN
    {
      // [FEATURE] [Suggest Vendor Payments] [Posting Date]
    }
    END.
  }
}

