OBJECT Codeunit 132204 Library - Warehouse
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=Inbound Whse. Requests are created.';
      Text004@1000 : TextConst 'ENU=No Inbound Whse. Request is created.';
      Text005@1002 : TextConst 'ENU=Inbound Whse. Requests have already been created.';
      LibraryInventory@1005 : Codeunit 132201;
      LibraryAssembly@1006 : Codeunit 132207;
      LibraryUtility@1001 : Codeunit 131000;
      Assert@1004 : Codeunit 130000;

    LOCAL PROCEDURE AutoFillQtyHandleWhseActivity@84(WarehouseActivityHeaderRec@1000 : Record 5766);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CLEAR(WarehouseActivityLine);
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityHeaderRec.Type);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeaderRec."No.");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    PROCEDURE AutoFillQtyInventoryActivity@88(WarehouseActivityHeader@1000 : Record 5766);
    BEGIN
      AutoFillQtyHandleWhseActivity(WarehouseActivityHeader);
    END;

    PROCEDURE AutofillQtyToShipWhseShipment@51(VAR WarehouseShipmentHeader@1000 : Record 7320);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
      WarehouseShipmentLine2@1002 : Record 7321;
    BEGIN
      CLEAR(WarehouseShipmentLine);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDLAST;
      WarehouseShipmentLine2.COPY(WarehouseShipmentLine);
      WarehouseShipmentLine.AutofillQtyToHandle(WarehouseShipmentLine2);
    END;

    PROCEDURE AutofillQtyToRecvWhseReceipt@78(VAR WarehouseReceiptHeader@1000 : Record 7316);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
      WarehouseReceiptLine2@1002 : Record 7317;
    BEGIN
      CLEAR(WarehouseReceiptLine);
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptHeader."No.");
      WarehouseReceiptLine.FINDLAST;
      WarehouseReceiptLine2.COPY(WarehouseReceiptLine);
      WarehouseReceiptLine.AutofillQtyToReceive(WarehouseReceiptLine2);
    END;

    PROCEDURE CalculateCountingPeriodOnWarehousePhysicalInventoryJournal@18(VAR WarehouseJournalLine@1001 : Record 7311);
    VAR
      PhysInvtCountManagement@1000 : Codeunit 7380;
    BEGIN
      COMMIT;  // Commit is required.
      CLEAR(PhysInvtCountManagement);
      PhysInvtCountManagement.InitFromWhseJnl(WarehouseJournalLine);
      PhysInvtCountManagement.RUN;
    END;

    PROCEDURE CalculatePlannedDate@22(OrgDateExpression@1008 : Text[30];OrgDate@1007 : Date;FirstSourceType@1006 : 'Company,Customer,Vendor,Location,Shipping Agent';FirstSourceCode@1005 : Code[20];FirstAddCode@1004 : Code[20];SecondSourceType@1003 : 'Company,Customer,Vendor,Location,Shipping Agent';SecondSourceCode@1002 : Code[20];SecondAddCode@1001 : Code[20];CheckBothCalendars@1000 : Boolean) PlannedDate : Date;
    VAR
      CalendarManagement@1009 : Codeunit 7600;
    BEGIN
      PlannedDate :=
        CalendarManagement.CalcDateBOC(
          OrgDateExpression,OrgDate,FirstSourceType,FirstSourceCode,FirstAddCode,SecondSourceType,SecondSourceCode,SecondAddCode,
          CheckBothCalendars);
    END;

    [Normal]
    PROCEDURE CalculateWhseAdjustment@107(VAR Item@1001 : Record 27;ItemJournalBatch@1005 : Record 233);
    VAR
      ItemJournalLine@1008 : Record 83;
      TmpItem@1002 : Record 27;
      CalcWhseAdjmt@1000 : Report 7315;
      NoSeriesMgt@1004 : Codeunit 396;
      DocumentNo@1009 : Text[20];
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);

      COMMIT;
      CalcWhseAdjmt.SetItemJnlLine(ItemJournalLine);
      IF (DocumentNo = '') AND (ItemJournalBatch."No. Series" <> '') THEN
        DocumentNo := NoSeriesMgt.GetNextNo(ItemJournalBatch."No. Series",WORKDATE,FALSE);
      CalcWhseAdjmt.InitializeRequest(WORKDATE,DocumentNo);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;

      CalcWhseAdjmt.SETTABLEVIEW(TmpItem);
      CalcWhseAdjmt.USEREQUESTPAGE(FALSE);
      CalcWhseAdjmt.RUNMODAL;
    END;

    PROCEDURE CalculateWhseAdjustmentItemJournal@36(VAR Item@1004 : Record 27;NewPostingDate@1002 : Date;DocumentNo@1003 : Text[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
      TmpItem@1005 : Record 27;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalBatch@1007 : Record 233;
      CalculateWhseAdjustment@1000 : Report 7315;
      NoSeriesMgt@1008 : Codeunit 396;
    BEGIN
      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);

      COMMIT;
      CalculateWhseAdjustment.SetItemJnlLine(ItemJournalLine);
      IF DocumentNo = '' THEN
        DocumentNo := NoSeriesMgt.GetNextNo(ItemJournalBatch."No. Series",NewPostingDate,FALSE);
      CalculateWhseAdjustment.InitializeRequest(NewPostingDate,DocumentNo);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;

      CalculateWhseAdjustment.SETTABLEVIEW(TmpItem);
      CalculateWhseAdjustment.USEREQUESTPAGE(FALSE);
      CalculateWhseAdjustment.RUNMODAL;
    END;

    PROCEDURE CalculateBinReplenishment@156(BinContent@1002 : Record 7302;WhseWorksheetName@1001 : Record 7327;LocationCode@1003 : Code[10];AllowBreakBulk@1004 : Boolean;HideDialog@1005 : Boolean;DoNotFillQtyToHandle@1006 : Boolean);
    VAR
      CalculateBinReplenishment@1000 : Report 7300;
    BEGIN
      CalculateBinReplenishment.InitializeRequest(
        WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode,AllowBreakBulk,HideDialog,
        DoNotFillQtyToHandle);
      CalculateBinReplenishment.SETTABLEVIEW(BinContent);
      CalculateBinReplenishment.USEREQUESTPAGE(FALSE);
      CalculateBinReplenishment.RUN;
    END;

    PROCEDURE CalculateCrossDockLines@20(VAR WhseCrossDockOpportunity@1001 : Record 5768;NewTemplateName@1004 : Code[10];NewNameNo@1003 : Code[20];NewLocationCode@1002 : Code[10]);
    VAR
      WhseCrossDockManagement@1000 : Codeunit 5780;
    BEGIN
      WhseCrossDockManagement.CalculateCrossDockLines(WhseCrossDockOpportunity,NewTemplateName,NewNameNo,NewLocationCode);
    END;

    PROCEDURE CalculateInventory@19(VAR ItemJournalLine@1002 : Record 83;VAR Item@1001 : Record 27;NewPostingDate@1004 : Date;DocNo@1005 : Code[20];ItemsNotOnInvt@1006 : Boolean);
    VAR
      TmpItem@1003 : Record 27;
      CalculateInventory@1000 : Report 790;
    BEGIN
      COMMIT;  // Commit required before running this Report.
      CLEAR(CalculateInventory);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;
      CalculateInventory.SETTABLEVIEW(TmpItem);
      CalculateInventory.InitializeRequest(NewPostingDate,DocNo,ItemsNotOnInvt);
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.RUN;
    END;

    PROCEDURE ChangeUnitOfMeasure@12(VAR WarehouseActivityLine@1002 : Record 5767);
    VAR
      WarehouseActivityLine2@1000 : Record 5767;
      WhseChangeUnitOfMeasure@1001 : Report 7314;
    BEGIN
      COMMIT;
      CLEAR(WhseChangeUnitOfMeasure);
      WhseChangeUnitOfMeasure.DefWhseActLine(WarehouseActivityLine);
      WhseChangeUnitOfMeasure.RUNMODAL;
      IF WhseChangeUnitOfMeasure.ChangeUOMCode(WarehouseActivityLine2) THEN
        WarehouseActivityLine.ChangeUOMCode(WarehouseActivityLine,WarehouseActivityLine2);
    END;

    PROCEDURE CreateFullWMSLocation@118(VAR Location@1000 : Record 14;BinsPerZone@1004 : Integer);
    VAR
      PutAwayTemplateHeader@1001 : Record 7307;
      PutAwayTemplateLine@1002 : Record 7308;
      Zone@1003 : Record 7300;
      Bin@1005 : Record 7354;
    BEGIN
      CLEAR(Location);
      Location.INIT;

      CreateLocationWithInventoryPostingSetup(Location);
      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := TRUE;
      Location.VALIDATE("Directed Put-away and Pick",TRUE);
      Location.VALIDATE("Use Cross-Docking",TRUE);
      Location.MODIFY(TRUE);

      // Create Zones and bins
      // Fill in Bins fast tab
      // 1. Adjustment
      CreateZone(Zone,'ADJUSTMENT',Location.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),'','',0,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),BinsPerZone,FALSE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("Adjustment Bin Code",Bin.Code);

      // 2. Bulk zone
      CreateZone(Zone,'BULK',Location.Code,SelectBinType(FALSE,FALSE,TRUE,FALSE),'','',50,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,TRUE,FALSE),BinsPerZone,FALSE);

      // 3. Cross-dock zone
      CreateZone(Zone,'CROSS-DOCK',Location.Code,SelectBinType(FALSE,FALSE,TRUE,TRUE),'','',0,TRUE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,TRUE,TRUE),BinsPerZone,TRUE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("Cross-Dock Bin Code",Bin.Code);

      // 4. Pick zone
      CreateZone(Zone,'PICK',Location.Code,SelectBinType(FALSE,FALSE,TRUE,TRUE),'','',100,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,TRUE,TRUE),BinsPerZone,FALSE);

      // 5. Production zone
      CreateZone(Zone,'PRODUCTION',Location.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),'','',5,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),BinsPerZone,FALSE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("Open Shop Floor Bin Code",Bin.Code);
      FindBin(Bin,Location.Code,Zone.Code,2);
      Location.VALIDATE("To-Production Bin Code",Bin.Code);
      FindBin(Bin,Location.Code,Zone.Code,3);
      Location.VALIDATE("From-Production Bin Code",Bin.Code);

      // 6. QC zone
      CreateZone(Zone,'QC',Location.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),'','',0,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,FALSE,FALSE,FALSE),BinsPerZone,FALSE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("To-Assembly Bin Code",Bin.Code);
      FindBin(Bin,Location.Code,Zone.Code,2);
      Location.VALIDATE("From-Assembly Bin Code",Bin.Code);

      // 7. Receive Zone
      CreateZone(Zone,'RECEIVE',Location.Code,SelectBinType(TRUE,FALSE,FALSE,FALSE),'','',10,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(TRUE,FALSE,FALSE,FALSE),BinsPerZone,FALSE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("Receipt Bin Code",Bin.Code);

      // 8. Ship Zone
      CreateZone(Zone,'SHIP',Location.Code,SelectBinType(FALSE,TRUE,FALSE,FALSE),'','',200,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,TRUE,FALSE,FALSE),BinsPerZone,FALSE);
      FindBin(Bin,Location.Code,Zone.Code,1);
      Location.VALIDATE("Shipment Bin Code",Bin.Code);

      // 9. Stage zone
      CreateZone(Zone,'STAGE',Location.Code,SelectBinType(FALSE,TRUE,FALSE,FALSE),'','',5,FALSE);
      CreateNumberOfBins(Location.Code,Zone.Code,SelectBinType(FALSE,TRUE,FALSE,FALSE),BinsPerZone,FALSE);

      // Bin policies fast tab
      // Created the STD put-away template - same as the one in the demo data
      CreatePutAwayTemplateHeader(PutAwayTemplateHeader);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,FALSE,TRUE,TRUE,FALSE,FALSE,FALSE);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,FALSE,TRUE,FALSE,FALSE,FALSE,TRUE);
      CreatePutAwayTemplateLine(PutAwayTemplateHeader,PutAwayTemplateLine,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE);
      Location.VALIDATE("Put-away Template Code",PutAwayTemplateHeader.Code);

      Location.VALIDATE("Allow Breakbulk",TRUE);

      Location.MODIFY(TRUE);
    END;

    PROCEDURE CreateBin@67(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];BinCode@1002 : Code[20];ZoneCode@1003 : Code[10];BinTypeCode@1004 : Code[10]);
    BEGIN
      CLEAR(Bin);
      Bin.INIT;
      Bin.VALIDATE("Location Code",LocationCode);
      IF BinCode = '' THEN
        BinCode := LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin);
      Bin.VALIDATE(Code,BinCode);
      Bin.VALIDATE("Zone Code",ZoneCode);
      Bin.VALIDATE("Bin Type Code",BinTypeCode);
      Bin.INSERT(TRUE);
    END;

    PROCEDURE CreateBinContent@23(VAR BinContent@1004 : Record 7302;LocationCode@1000 : Code[10];ZoneCode@1006 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20];VariantCode@1001 : Code[10];UnitOfMeasureCode@1005 : Code[10]);
    VAR
      Bin@1007 : Record 7354;
    BEGIN
      BinContent.INIT;
      BinContent.VALIDATE("Location Code",LocationCode);
      BinContent.VALIDATE("Bin Code",BinCode);
      BinContent.VALIDATE("Item No.",ItemNo);
      BinContent.VALIDATE("Variant Code",VariantCode);
      BinContent.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      IF ZoneCode = '' THEN BEGIN
        Bin.GET(LocationCode,BinCode);
        ZoneCode := Bin."Zone Code";
      END;
      BinContent.VALIDATE("Zone Code",ZoneCode);
      BinContent.INSERT(TRUE);
    END;

    PROCEDURE CreateBinCreationWorksheetLine@130(VAR BinCreationWorksheetLine@1004 : Record 7338;WorksheetTemplateName@1000 : Code[10];Name@1001 : Code[10];LocationCode@1002 : Code[10];BinCode@1005 : Code[20]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      BinCreationWorksheetLine.INIT;
      BinCreationWorksheetLine.VALIDATE("Worksheet Template Name",WorksheetTemplateName);
      BinCreationWorksheetLine.VALIDATE(Name,Name);
      BinCreationWorksheetLine.VALIDATE("Location Code",LocationCode);
      BinCreationWorksheetLine.VALIDATE("Bin Code",BinCode);
      RecRef.GETTABLE(BinCreationWorksheetLine);
      BinCreationWorksheetLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,BinCreationWorksheetLine.FIELDNO("Line No.")));
      BinCreationWorksheetLine.INSERT(TRUE);
    END;

    PROCEDURE CreateBinTemplate@11(VAR BinTemplate@1002 : Record 7335;LocationCode@1000 : Code[10]);
    BEGIN
      BinTemplate.INIT;
      BinTemplate.VALIDATE(Code,LibraryUtility.GenerateRandomCode(BinTemplate.FIELDNO(Code),DATABASE::Location));
      BinTemplate.INSERT(TRUE);
      BinTemplate.VALIDATE("Location Code",LocationCode);
      BinTemplate.MODIFY(TRUE);
    END;

    PROCEDURE CreateBinType@98(VAR BinType@1000 : Record 7303;Receive@1001 : Boolean;Ship@1002 : Boolean;PutAway@1003 : Boolean;Pick@1004 : Boolean);
    BEGIN
      CLEAR(BinType);
      BinType.INIT;

      BinType.VALIDATE(Code,LibraryUtility.GenerateRandomCode(BinType.FIELDNO(Code),DATABASE::"Bin Type"));
      BinType.VALIDATE(Description,BinType.Code);
      BinType.VALIDATE(Receive,Receive);
      BinType.VALIDATE(Ship,Ship);
      BinType.VALIDATE("Put Away",PutAway);
      BinType.VALIDATE(Pick,Pick);
      BinType.INSERT(TRUE);
    END;

    PROCEDURE CreateInboundWhseReqFromProdO@139(ProductionOrder@1000 : Record 5405);
    VAR
      WhseOutputProdRelease@1001 : Codeunit 7325;
    BEGIN
      IF WhseOutputProdRelease.CheckWhseRqst(ProductionOrder) THEN
        MESSAGE(Text005)
      ELSE BEGIN
        CLEAR(WhseOutputProdRelease);
        IF WhseOutputProdRelease.Release(ProductionOrder) THEN
          MESSAGE(Text003)
        ELSE
          MESSAGE(Text004);
      END;
    END;

    PROCEDURE CreateInternalMovementHeader@75(VAR InternalMovementHeader@1000 : Record 7346;LocationCode@1001 : Code[10];ToBinCode@1002 : Code[20]);
    BEGIN
      CLEAR(InternalMovementHeader);
      InternalMovementHeader.VALIDATE("Location Code",LocationCode);
      InternalMovementHeader.VALIDATE("To Bin Code",ToBinCode);
      InternalMovementHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateInternalMovementLine@70(InternalMovementHeader@1000 : Record 7346;VAR InternalMovementLine@1002 : Record 7347;ItemNo@1001 : Code[20];FromBinCode@1005 : Code[20];ToBinCode@1006 : Code[20];Qty@1003 : Decimal);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      CLEAR(InternalMovementLine);
      InternalMovementLine.VALIDATE("No.",InternalMovementHeader."No.");
      RecRef.GETTABLE(InternalMovementLine);
      InternalMovementLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,InternalMovementLine.FIELDNO("Line No.")));
      InternalMovementLine.VALIDATE("Item No.",ItemNo);
      InternalMovementLine.VALIDATE("From Bin Code",FromBinCode);
      InternalMovementLine.VALIDATE("To Bin Code",ToBinCode);
      InternalMovementLine.VALIDATE(Quantity,Qty);
      InternalMovementLine.INSERT(TRUE);
    END;

    PROCEDURE CreateInTransitLocation@30(VAR Location@1000 : Record 14);
    BEGIN
      CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Use As In-Transit",TRUE);
      Location.MODIFY(TRUE);
    END;

    PROCEDURE CreateInventoryMovementHeader@87(VAR WarehouseActivityHeader@1000 : Record 5766;LocationCode@1001 : Code[10]);
    BEGIN
      CLEAR(WarehouseActivityHeader);
      WarehouseActivityHeader.VALIDATE("Location Code",LocationCode);
      WarehouseActivityHeader.VALIDATE(Type,WarehouseActivityHeader.Type::"Invt. Movement");
      WarehouseActivityHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateInvtMvmtFromInternalMvmt@82(VAR InternalMovementHeader@1001 : Record 7346);
    VAR
      CreateInvtPickMovement@1000 : Codeunit 7322;
    BEGIN
      CreateInvtPickMovement.CreateInvtMvntWithoutSource(InternalMovementHeader);
    END;

    PROCEDURE CreateInvtPutPickMovement@80(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];PutAway@1004 : Boolean;Pick@1005 : Boolean;Movement@1006 : Boolean);
    VAR
      WhseRequest@1000 : Record 5765;
      CreateInvtPutAwayPickMvmt@1003 : Report 7323;
    BEGIN
      WhseRequest.RESET;
      WhseRequest.INIT;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      WhseRequest.SETRANGE("Source Document",SourceDocument);
      WhseRequest.SETRANGE("Source No.",SourceNo);
      CreateInvtPutAwayPickMvmt.SETTABLEVIEW(WhseRequest);
      CreateInvtPutAwayPickMvmt.InitializeRequest(PutAway,Pick,Movement,FALSE,FALSE);
      CreateInvtPutAwayPickMvmt.USEREQUESTPAGE(FALSE);
      CreateInvtPutAwayPickMvmt.RUNMODAL;
    END;

    PROCEDURE CreateInvtPutPickPurchaseOrder@34(VAR PurchaseHeader@1001 : Record 38);
    VAR
      WhseRequest@1000 : Record 5765;
      CreateInvtPutPick@1002 : Report 7323;
    BEGIN
      PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        PurchaseHeader."Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.",PurchaseHeader."No.");
      CreateInvtPutPick.SETTABLEVIEW(WhseRequest);
      CreateInvtPutPick.InitializeRequest(TRUE,TRUE,FALSE,FALSE,FALSE);
      CreateInvtPutPick.USEREQUESTPAGE(FALSE);
      CreateInvtPutPick.RUNMODAL;
    END;

    PROCEDURE CreateInvtPutPickSalesOrder@29(VAR SalesHeader@1001 : Record 36);
    VAR
      WhseRequest@1000 : Record 5765;
      CreateInvtPutPick@1002 : Report 7323;
    BEGIN
      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
        SalesHeader."Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.",SalesHeader."No.");
      CreateInvtPutPick.SETTABLEVIEW(WhseRequest);
      CreateInvtPutPick.InitializeRequest(TRUE,TRUE,FALSE,FALSE,FALSE);
      CreateInvtPutPick.USEREQUESTPAGE(FALSE);
      CreateInvtPutPick.RUNMODAL;
    END;

    PROCEDURE CreateInvtPutAwayPick@141(VAR WarehouseRequest@1002 : Record 5765;PutAway@1004 : Boolean;Pick@1005 : Boolean;Movement@1006 : Boolean);
    VAR
      TmpWarehouseRequest@1000 : Record 5765;
      CreateInvtPutAwayPickMvmt@1003 : Report 7323;
    BEGIN
      COMMIT;
      CreateInvtPutAwayPickMvmt.InitializeRequest(PutAway,Pick,Movement,FALSE,FALSE);
      IF WarehouseRequest.HASFILTER THEN
        TmpWarehouseRequest.COPYFILTERS(WarehouseRequest)
      ELSE BEGIN
        WarehouseRequest.GET(WarehouseRequest.Type,
          WarehouseRequest."Location Code",
          WarehouseRequest."Source Type",
          WarehouseRequest."Source Subtype",
          WarehouseRequest."Source No.");
        TmpWarehouseRequest.SETRANGE(Type,WarehouseRequest.Type);
        TmpWarehouseRequest.SETRANGE("Location Code",WarehouseRequest."Location Code");
        TmpWarehouseRequest.SETRANGE("Source Type",WarehouseRequest."Source Type");
        TmpWarehouseRequest.SETRANGE("Source Subtype",WarehouseRequest."Source Subtype");
        TmpWarehouseRequest.SETRANGE("Source No.",WarehouseRequest."Source No.");
      END;
      CreateInvtPutAwayPickMvmt.SETTABLEVIEW(TmpWarehouseRequest);
      CreateInvtPutAwayPickMvmt.USEREQUESTPAGE(FALSE);
      CreateInvtPutAwayPickMvmt.RUNMODAL;
    END;

    PROCEDURE CreateLocation@17(VAR Location@1000 : Record 14) : Code[10];
    BEGIN
      CreateLocationCodeAndName(Location);
      EXIT(Location.Code);
    END;

    PROCEDURE CreateLocationWMS@44(VAR Location@1000 : Record 14;BinMandatory@1005 : Boolean;RequirePutAway@1001 : Boolean;RequirePick@1002 : Boolean;RequireReceive@1003 : Boolean;RequireShipment@1004 : Boolean);
    BEGIN
      CreateLocationWithInventoryPostingSetup(Location);
      IF RequirePutAway THEN
        Location.VALIDATE("Require Put-away",TRUE);
      IF RequirePick THEN
        Location.VALIDATE("Require Pick",TRUE);
      IF RequireReceive THEN
        Location.VALIDATE("Require Receive",TRUE);
      IF RequireShipment THEN
        Location.VALIDATE("Require Shipment",TRUE);
      Location."Bin Mandatory" := BinMandatory;
      Location.MODIFY;
    END;

    LOCAL PROCEDURE CreateLocationCodeAndName@24(VAR Location@1000 : Record 14) : Code[10];
    BEGIN
      Location.INIT;
      Location.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location));
      Location.VALIDATE(Name,Location.Code);
      Location.INSERT(TRUE);
      EXIT(Location.Code);
    END;

    PROCEDURE CreateLocationWithInventoryPostingSetup@33(VAR Location@1000 : Record 14) : Code[10];
    BEGIN
      CreateLocationCodeAndName(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);
      EXIT(Location.Code);
    END;

    PROCEDURE CreateMovementWorksheetLine@45(VAR WhseWorksheetLine@1002 : Record 7326;FromBin@1003 : Record 7354;ToBin@1004 : Record 7354;ItemNo@1005 : Code[20];VariantCode@1006 : Code[10];Quantity@1007 : Decimal);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      WhseWorksheetName@1001 : Record 7327;
      LibraryWarehouse@1008 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,FromBin."Location Code");
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,WhseWorksheetName."Location Code",0);
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE("Variant Code",VariantCode);
      WhseWorksheetLine.VALIDATE("From Zone Code",FromBin."Zone Code");
      WhseWorksheetLine.VALIDATE("From Bin Code",FromBin.Code);
      WhseWorksheetLine.VALIDATE("To Zone Code",ToBin."Zone Code");
      WhseWorksheetLine.VALIDATE("To Bin Code",ToBin.Code);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateNumberOfBins@114(LocationCode@1001 : Code[10];ZoneCode@1003 : Code[10];BinTypeCode@1004 : Code[10];NoOfBins@1005 : Integer;IsCrossDock@1006 : Boolean);
    VAR
      Bin@1000 : Record 7354;
      i@1002 : Integer;
      ExistingBinCount@1007 : Integer;
    BEGIN
      CLEAR(Bin);
      Bin.INIT;
      Bin.SETRANGE("Location Code",LocationCode);
      ExistingBinCount := Bin.COUNT + 1;

      FOR i := 1 TO NoOfBins DO BEGIN
        CreateBin(Bin,LocationCode,'Bin' + FORMAT(ExistingBinCount),ZoneCode,BinTypeCode);
        ExistingBinCount := ExistingBinCount + 1;
        IF IsCrossDock THEN BEGIN
          Bin.VALIDATE("Cross-Dock Bin",TRUE);
          Bin.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE CreatePick@64(VAR WarehouseShipmentHeader@1000 : Record 7320);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
      WhseShptHeader@1004 : Record 7320;
      WhseShptLine@1003 : Record 7321;
      WhseShipmentRelease@1002 : Codeunit 7310;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShptLine.COPY(WarehouseShipmentLine);
      WhseShptHeader.GET(WhseShptLine."No.");
      IF WhseShptHeader.Status = WhseShptHeader.Status::Open THEN
        WhseShipmentRelease.Release(WhseShptHeader);
      WarehouseShipmentLine.SetHideValidationDialog(TRUE);
      WarehouseShipmentLine.CreatePickDoc(WhseShptLine,WhseShptHeader);
    END;

    PROCEDURE CreatePickFromPickWorksheet@9(VAR WhseWorksheetLine@1000 : Record 7326;LineNo@1014 : Integer;WkshTemplateName@1015 : Code[10];Name@1016 : Code[10];LocationCode@1017 : Code[10];AssignedID@1013 : Code[10];MaxNoOfLines@1012 : Integer;MaxNoOfSourceDoc@1011 : Integer;SortPick@1010 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking';PerShipTo@1009 : Boolean;PerItem@1008 : Boolean;PerZone@1007 : Boolean;PerBin@1006 : Boolean;PerWhseDoc@1005 : Boolean;PerDate@1004 : Boolean;PrintPick@1003 : Boolean);
    VAR
      WhseWorksheetLine2@1002 : Record 7326;
      CreatePick@1001 : Report 5754;
    BEGIN
      WhseWorksheetLine2 := WhseWorksheetLine;
      WhseWorksheetLine2.SETRANGE("Worksheet Template Name",WkshTemplateName);
      WhseWorksheetLine2.SETRANGE(Name,Name);
      WhseWorksheetLine2.SETRANGE("Location Code",LocationCode);
      IF LineNo <> 0 THEN
        WhseWorksheetLine2.SETRANGE("Line No.",LineNo);

      CreatePick.InitializeReport(
        AssignedID,MaxNoOfLines,MaxNoOfSourceDoc,SortPick,PerShipTo,PerItem,
        PerZone,PerBin,PerWhseDoc,PerDate,PrintPick,FALSE,FALSE);
      CreatePick.USEREQUESTPAGE(FALSE);
      CreatePick.SetWkshPickLine(WhseWorksheetLine2);
      CreatePick.RUNMODAL;
      CLEAR(CreatePick);

      WhseWorksheetLine := WhseWorksheetLine2;
    END;

    PROCEDURE CreatePutAwayTemplateHeader@96(VAR PutAwayTemplateHeader@1000 : Record 7307);
    BEGIN
      CLEAR(PutAwayTemplateHeader);
      PutAwayTemplateHeader.INIT;

      PutAwayTemplateHeader.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(PutAwayTemplateHeader.FIELDNO(Code),DATABASE::"Put-away Template Header"));
      PutAwayTemplateHeader.VALIDATE(Description,PutAwayTemplateHeader.Code);
      PutAwayTemplateHeader.INSERT(TRUE);
    END;

    PROCEDURE CreatePutAwayTemplateLine@101(PutAwayTemplateHeader@1001 : Record 7307;VAR PutAwayTemplateLine@1000 : Record 7308;FindFixedBin@1003 : Boolean;FindFloatingBin@1004 : Boolean;FindSameItem@1005 : Boolean;FindUnitofMeasureMatch@1006 : Boolean;FindBinLessthanMinQty@1007 : Boolean;FindEmptyBin@1008 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      CLEAR(PutAwayTemplateLine);
      PutAwayTemplateLine.INIT;

      PutAwayTemplateLine.VALIDATE("Put-away Template Code",PutAwayTemplateHeader.Code);
      RecRef.GETTABLE(PutAwayTemplateLine);
      PutAwayTemplateLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,PutAwayTemplateLine.FIELDNO("Line No.")));
      PutAwayTemplateLine.VALIDATE("Find Fixed Bin",FindFixedBin);
      PutAwayTemplateLine.VALIDATE("Find Floating Bin",FindFloatingBin);
      PutAwayTemplateLine.VALIDATE("Find Same Item",FindSameItem);
      PutAwayTemplateLine.VALIDATE("Find Unit of Measure Match",FindUnitofMeasureMatch);
      PutAwayTemplateLine.VALIDATE("Find Bin w. Less than Min. Qty",FindBinLessthanMinQty);
      PutAwayTemplateLine.VALIDATE("Find Empty Bin",FindEmptyBin);
      PutAwayTemplateLine.INSERT(TRUE);
    END;

    PROCEDURE CreateTransferHeader@42(VAR TransferHeader@1000 : Record 5740;FromLocation@1001 : Text[10];ToLocation@1002 : Text[10];InTransitCode@1003 : Text[10]);
    BEGIN
      CLEAR(TransferHeader);
      TransferHeader.INIT;
      TransferHeader.INSERT(TRUE);
      TransferHeader.VALIDATE("Transfer-from Code",FromLocation);
      TransferHeader.VALIDATE("Transfer-to Code",ToLocation);
      TransferHeader.VALIDATE("In-Transit Code",InTransitCode);
      TransferHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferLine@41(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;ItemNo@1002 : Text[20];Quantity@1004 : Decimal);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      CLEAR(TransferLine);
      TransferLine.INIT;
      TransferLine.VALIDATE("Document No.",TransferHeader."No.");
      RecRef.GETTABLE(TransferLine);
      TransferLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,TransferLine.FIELDNO("Line No.")));
      TransferLine.INSERT(TRUE);
      TransferLine.VALIDATE("Item No.",ItemNo);
      TransferLine.VALIDATE(Quantity,Quantity);
      TransferLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferLocations@39(VAR FromLocation@1004 : Record 14;VAR ToLocation@1001 : Record 14;VAR InTransitLocation@1002 : Record 14);
    BEGIN
      CreateLocationWithInventoryPostingSetup(FromLocation);
      CreateLocationWithInventoryPostingSetup(ToLocation);
      CreateInTransitLocation(InTransitLocation);
    END;

    PROCEDURE CreateTransferRoute@40(VAR TransferRoute@1000 : Record 5742;TransferFrom@1001 : Code[10];TransferTo@1002 : Code[10]);
    BEGIN
      CLEAR(TransferRoute);
      TransferRoute.INIT;
      TransferRoute.VALIDATE("Transfer-from Code",TransferFrom);
      TransferRoute.VALIDATE("Transfer-to Code",TransferTo);
      TransferRoute.INSERT(TRUE);
    END;

    PROCEDURE CreateAndUpdateTransferRoute@60(VAR TransferRoute@1005 : Record 5742;TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10];InTransitCode@1004 : Code[10];ShippingAgentCode@1002 : Code[10];ShippingAgentServiceCode@1003 : Code[10]);
    BEGIN
      CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
      TransferRoute.VALIDATE("In-Transit Code",InTransitCode);
      TransferRoute.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      TransferRoute.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);
      TransferRoute.MODIFY(TRUE);
    END;

    PROCEDURE CreateZone@97(VAR Zone@1000 : Record 7300;ZoneCode@1001 : Code[10];LocationCode@1004 : Code[10];BinTypeCode@1002 : Code[10];WhseClassCode@1003 : Code[10];SpecialEquip@1005 : Code[10];ZoneRank@1006 : Integer;IsCrossDockZone@1007 : Boolean);
    BEGIN
      CLEAR(Zone);
      Zone.INIT;

      IF ZoneCode = '' THEN
        Zone.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone))
      ELSE
        Zone.VALIDATE(Code,ZoneCode);

      Zone.VALIDATE("Location Code",LocationCode);
      Zone.VALIDATE(Description,Zone.Code);
      Zone.VALIDATE("Bin Type Code",BinTypeCode);
      Zone.VALIDATE("Warehouse Class Code",WhseClassCode);
      Zone.VALIDATE("Special Equipment Code",SpecialEquip);
      Zone.VALIDATE("Zone Ranking",ZoneRank);
      Zone.VALIDATE("Cross-Dock Bin Zone",IsCrossDockZone);

      Zone.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseEmployee@58(VAR WarehouseEmployee@1000 : Record 7301;LocationCode@1001 : Code[10];IsDefault@1002 : Boolean);
    BEGIN
      CLEAR(WarehouseEmployee);
      IF USERID = '' THEN
        EXIT; // for native database
      IF WarehouseEmployee.GET(USERID,LocationCode) THEN
        EXIT;

      WarehouseEmployee.RESET;
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      IF WarehouseEmployee.FINDSET AND IsDefault THEN
        EXIT;

      WarehouseEmployee.INIT;
      WarehouseEmployee.VALIDATE("User ID",USERID);
      WarehouseEmployee.VALIDATE("Location Code",LocationCode);
      WarehouseEmployee.VALIDATE(Default,IsDefault);
      WarehouseEmployee.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseClass@10(VAR WarehouseClass@1000 : Record 7304);
    BEGIN
      CLEAR(WarehouseClass);
      WarehouseClass.INIT;
      WarehouseClass.VALIDATE(Code,LibraryUtility.GenerateRandomCode(WarehouseClass.FIELDNO(Code),DATABASE::"Warehouse Class"));
      WarehouseClass.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseReceiptHeader@155(VAR WarehouseReceiptHeader@1000 : Record 7316);
    BEGIN
      WarehouseReceiptHeader.INIT;
      WarehouseReceiptHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseShipmentHeader@3(VAR WarehouseShipmentHeader@1000 : Record 7320);
    BEGIN
      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseShipmentLine@38(VAR WhseShptLine@1000 : Record 7321;WhseShptHeader@1001 : Record 7320);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      CLEAR(WhseShptLine);
      WhseShptLine."No." := WhseShptHeader."No.";
      RecRef.GETTABLE(WhseShptLine);
      WhseShptLine."Line No." := LibraryUtility.GetNewLineNo(RecRef,WhseShptLine.FIELDNO("Line No."));
      WhseShptLine.INSERT(TRUE);
    END;

    PROCEDURE CreateWarehouseSourceFilter@5(VAR WarehouseSourceFilter@1000 : Record 5771;Type@1001 : Option);
    BEGIN
      // Create Warehouse source filter to get Source Document.
      WarehouseSourceFilter.INIT;
      WarehouseSourceFilter.VALIDATE(Type,Type);
      WarehouseSourceFilter.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(WarehouseSourceFilter.FIELDNO(Code),DATABASE::"Warehouse Source Filter"));
      WarehouseSourceFilter.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseInternalPickHeader@66(VAR WhseInternalPickHeader@1000 : Record 7333;LocationCode@1001 : Code[10]);
    BEGIN
      CLEAR(WhseInternalPickHeader);
      WhseInternalPickHeader.VALIDATE("Location Code",LocationCode);
      WhseInternalPickHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseInternalPickLine@63(WhseInternalPickHeader@1000 : Record 7333;VAR WhseInternalPickLine@1002 : Record 7334;ItemNo@1001 : Code[20];Qty@1003 : Decimal);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      CLEAR(WhseInternalPickLine);
      WhseInternalPickLine.VALIDATE("No.",WhseInternalPickHeader."No.");
      RecRef.GETTABLE(WhseInternalPickLine);
      WhseInternalPickLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,WhseInternalPickLine.FIELDNO("Line No.")));
      WhseInternalPickLine.VALIDATE("Item No.",ItemNo);
      WhseInternalPickLine.VALIDATE(Quantity,Qty);
      WhseInternalPickLine.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseInternalPutawayHdr@62(VAR WhseInternalPutAwayHeader@1000 : Record 7331;LocationCode@1001 : Code[10]);
    BEGIN
      CLEAR(WhseInternalPutAwayHeader);
      WhseInternalPutAwayHeader.VALIDATE("Location Code",LocationCode);
      WhseInternalPutAwayHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseInternalPutawayLine@61(WhseInternalPutAwayHeader@1000 : Record 7331;VAR WhseInternalPutAwayLine@1002 : Record 7332;ItemNo@1001 : Code[20];Qty@1003 : Decimal);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      CLEAR(WhseInternalPutAwayLine);
      WhseInternalPutAwayLine.VALIDATE("No.",WhseInternalPutAwayHeader."No.");
      RecRef.GETTABLE(WhseInternalPutAwayLine);
      WhseInternalPutAwayLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,WhseInternalPutAwayLine.FIELDNO("Line No.")));
      WhseInternalPutAwayLine.VALIDATE("Item No.",ItemNo);
      WhseInternalPutAwayLine.VALIDATE(Quantity,Qty);
      WhseInternalPutAwayLine.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateWhseJournalBatch@104(VAR WarehouseJournalBatch@1000 : Record 7310;WarehouseJournalTemplateName@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      // Create Item Journal Batch with a random Name of String length less than 10.
      WarehouseJournalBatch.INIT;
      WarehouseJournalBatch.VALIDATE("Journal Template Name",WarehouseJournalTemplateName);
      WarehouseJournalBatch.VALIDATE(
        Name,COPYSTR(LibraryUtility.GenerateRandomCode(WarehouseJournalBatch.FIELDNO(Name),DATABASE::"Warehouse Journal Batch"),1,
          MAXSTRLEN(WarehouseJournalBatch.Name)));
      WarehouseJournalBatch.VALIDATE("Location Code",LocationCode);
      WarehouseJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseJournalLine@102(VAR WarehouseJournalLine@1000 : Record 7311;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];LocationCode@1006 : Code[10];ZoneCode@1009 : Code[10];BinCode@1010 : Code[20];EntryType@1007 : Option;ItemNo@1005 : Text[20];NewQuantity@1004 : Decimal);
    VAR
      NoSeries@1108 : Record 308;
      WarehouseJournalBatch@1008 : Record 7310;
      NoSeriesManagement@1109 : Codeunit 396;
      RecRef@1003 : RecordRef;
      DocumentNo@1110 : Code[20];
      JnlSelected@1011 : Boolean;
    BEGIN
      IF NOT WarehouseJournalBatch.GET(JournalTemplateName,JournalBatchName,LocationCode) THEN BEGIN
        WarehouseJournalBatch.INIT;
        WarehouseJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
        WarehouseJournalBatch.SetupNewBatch;
        WarehouseJournalBatch.VALIDATE(Name,JournalBatchName);
        WarehouseJournalBatch.VALIDATE(Description,JournalBatchName + ' journal');
        WarehouseJournalBatch.VALIDATE("Location Code",LocationCode);
        WarehouseJournalBatch.INSERT(TRUE);
      END;

      CLEAR(WarehouseJournalLine);
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      WarehouseJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      WarehouseJournalLine.VALIDATE("Location Code",LocationCode);
      WarehouseJournalLine.VALIDATE("Zone Code",ZoneCode);
      WarehouseJournalLine.VALIDATE("Bin Code",BinCode);

      WarehouseJournalLine.TemplateSelection(PAGE::"Whse. Item Journal",0,WarehouseJournalLine,JnlSelected);
      Assert.IsTrue(JnlSelected,'Journal was not selected');
      WarehouseJournalLine.OpenJnl(JournalBatchName,LocationCode,WarehouseJournalLine);
      COMMIT;
      WarehouseJournalLine.SetUpNewLine(WarehouseJournalLine);

      RecRef.GETTABLE(WarehouseJournalLine);
      WarehouseJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,WarehouseJournalLine.FIELDNO("Line No.")));
      WarehouseJournalLine.INSERT(TRUE);
      WarehouseJournalLine.VALIDATE("Registering Date",WORKDATE);
      WarehouseJournalLine.VALIDATE("Entry Type",EntryType);
      IF NoSeries.GET(WarehouseJournalBatch."No. Series") THEN
        DocumentNo := NoSeriesManagement.GetNextNo(WarehouseJournalBatch."No. Series",WarehouseJournalLine."Registering Date",FALSE)
      ELSE
        DocumentNo := 'Default Document No.';
      WarehouseJournalLine.VALIDATE("Whse. Document No.",DocumentNo);
      WarehouseJournalLine.VALIDATE("Item No.",ItemNo);
      WarehouseJournalLine.VALIDATE(Quantity,NewQuantity);
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateWhseMovement@35(BatchName@1002 : Text[30];LocationCode@1003 : Text[30];SortActivity@1005 : Option;BreakBulkFilter@1006 : Boolean;DoNotFillQtyToHandle@1007 : Boolean);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
      WarehouseActivityHeader@1004 : Record 5766;
      WhseWorksheetTemplate@1008 : Record 7328;
      WhseSrcCreateDocument@1001 : Report 7305;
    BEGIN
      WhseWorksheetLine.SETFILTER(Quantity,'>0');
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplate.Name);
      WhseWorksheetLine.SETRANGE(Name,BatchName);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;

      WhseSrcCreateDocument.SetWhseWkshLine(WhseWorksheetLine);
      WhseSrcCreateDocument.Initialize(USERID,SortActivity,FALSE,DoNotFillQtyToHandle,BreakBulkFilter);
      WhseSrcCreateDocument.USEREQUESTPAGE(FALSE);
      WhseSrcCreateDocument.RUNMODAL;
      WhseSrcCreateDocument.GetResultMessage(WarehouseActivityHeader.Type::Movement);
    END;

    PROCEDURE CreateWhsePick@81(VAR WarehouseShipmentHeader@1000 : Record 7320);
    VAR
      WarehouseShipmentLineRec@1001 : Record 7321;
      WhseShptHeader@1004 : Record 7320;
      WhseShptLine@1003 : Record 7321;
      WhseShipmentRelease@1002 : Codeunit 7310;
    BEGIN
      WarehouseShipmentLineRec.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLineRec.FINDFIRST;
      WhseShptLine.COPY(WarehouseShipmentLineRec);
      WhseShptHeader.GET(WhseShptLine."No.");
      IF WhseShptHeader.Status = WhseShptHeader.Status::Open THEN
        WhseShipmentRelease.Release(WhseShptHeader);
      WarehouseShipmentLineRec.SetHideValidationDialog(TRUE);
      WarehouseShipmentLineRec.CreatePickDoc(WhseShptLine,WhseShptHeader);
    END;

    PROCEDURE CreateWhsePickFromProduction@92(ProductionOrder@1000 : Record 5405);
    BEGIN
      ProductionOrder.SetHideValidationDialog(TRUE);
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);
    END;

    PROCEDURE CreateWhseReceiptFromPO@109(VAR PurchaseHeader@1000 : Record 38);
    VAR
      GetSourceDocInbound@1001 : Codeunit 5751;
    BEGIN
      GetSourceDocInbound.CreateFromPurchOrderHideDialog(PurchaseHeader);
    END;

    PROCEDURE CreateWhseReceiptFromSalesReturnOrder@162(VAR SalesHeader@1001 : Record 36);
    VAR
      GetSourceDocInbound@1000 : Codeunit 5751;
    BEGIN
      GetSourceDocInbound.CreateFromSalesReturnOrderHideDialog(SalesHeader);
    END;

    PROCEDURE CreateWhseShipmentFromPurchaseReturnOrder@161(VAR PurchaseHeader@1001 : Record 38);
    VAR
      GetSourceDocOutbound@1000 : Codeunit 5752;
    BEGIN
      GetSourceDocOutbound.CreateFromPurchReturnOrderHideDialog(PurchaseHeader);
    END;

    PROCEDURE CreateWhseShipmentFromServiceOrder@47(ServiceHeader@1000 : Record 5900);
    VAR
      GetSourceDocOutbound@1001 : Codeunit 5752;
    BEGIN
      GetSourceDocOutbound.CreateFromServiceOrderHideDialog(ServiceHeader);
    END;

    PROCEDURE CreateWhseShipmentFromSO@79(VAR SalesHeader@1000 : Record 36);
    VAR
      GetSourceDocOutbound@1001 : Codeunit 5752;
    BEGIN
      GetSourceDocOutbound.CreateFromSalesOrderHideDialog(SalesHeader);
    END;

    PROCEDURE CreateWhseReceiptFromTO@2(VAR TransferHeader@1000 : Record 5740);
    VAR
      GetSourceDocInbound@1002 : Codeunit 5751;
    BEGIN
      GetSourceDocInbound.CreateFromInbndTransferOrderHideDialog(TransferHeader);
    END;

    PROCEDURE CreateWhseShipmentFromTO@99(VAR TransferHeader@1000 : Record 5740);
    VAR
      GetSourceDocOutbound@1001 : Codeunit 5752;
    BEGIN
      GetSourceDocOutbound.CreateFromOutbndTransferOrderHideDialog(TransferHeader);
    END;

    [Normal]
    PROCEDURE CreateWhseWorksheetName@146(VAR WhseWorksheetName@1006 : Record 7327;WhseWorkSheetTemplateName@1004 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      // Create Item Journal Batch with a random Name of String length less than 10.
      WhseWorksheetName.INIT;
      WhseWorksheetName.VALIDATE("Worksheet Template Name",WhseWorkSheetTemplateName);
      WhseWorksheetName.VALIDATE(
        Name,COPYSTR(LibraryUtility.GenerateRandomCode(WhseWorksheetName.FIELDNO(Name),DATABASE::"Whse. Worksheet Name"),1,
          MAXSTRLEN(WhseWorksheetName.Name)));
      WhseWorksheetName.VALIDATE("Location Code",LocationCode);
      WhseWorksheetName.INSERT(TRUE);
    END;

    PROCEDURE CreateWhseWorksheetLine@14(VAR WhseWorksheetLine@1004 : Record 7326;WorksheetTemplateName@1003 : Code[10];Name@1002 : Code[10];LocationCode@1001 : Code[10];WhseDocumentType@1000 : Option);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      CLEAR(WhseWorksheetLine);
      WhseWorksheetLine.INIT;
      WhseWorksheetLine.VALIDATE("Worksheet Template Name",WorksheetTemplateName);
      WhseWorksheetLine.VALIDATE(Name,Name);
      WhseWorksheetLine.VALIDATE("Location Code",LocationCode);
      RecRef.GETTABLE(WhseWorksheetLine);
      WhseWorksheetLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,WhseWorksheetLine.FIELDNO("Line No.")));
      WhseWorksheetLine.INSERT(TRUE);
      WhseWorksheetLine.VALIDATE("Whse. Document Type",WhseDocumentType);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    PROCEDURE DeleteEmptyWhseRegisters@117();
    VAR
      DeleteEmptyWhseRegisters@1000 : Report 7399;
    BEGIN
      COMMIT;  // Commit required for batch job report.
      CLEAR(DeleteEmptyWhseRegisters);
      DeleteEmptyWhseRegisters.USEREQUESTPAGE(FALSE);
      DeleteEmptyWhseRegisters.RUN;
    END;

    PROCEDURE FindBin@119(VAR Bin@1002 : Record 7354;LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10];BinIndex@1003 : Integer);
    BEGIN
      Bin.INIT;
      Bin.RESET;
      Bin.SETCURRENTKEY("Location Code","Zone Code",Code);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",ZoneCode);
      Bin.FINDSET(TRUE);

      IF BinIndex > 1 THEN
        Bin.NEXT(BinIndex - 1);
    END;

    PROCEDURE FindWhseReceiptNoBySourceDoc@46(SourceType@1001 : Option;SourceSubtype@1002 : Option;SourceNo@1003 : Code[20]) : Code[20];
    VAR
      WhseRcptLine@1000 : Record 7317;
    BEGIN
      WITH WhseRcptLine DO BEGIN
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceNo);
        IF FINDFIRST THEN
          EXIT("No.");

        EXIT('');
      END;
    END;

    PROCEDURE FindWhseShipmentNoBySourceDoc@32(SourceType@1002 : Option;SourceSubtype@1001 : Option;SourceNo@1000 : Code[20]) : Code[20];
    VAR
      WhseShptLine@1003 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceNo);
        IF FINDFIRST THEN
          EXIT("No.");

        EXIT('');
      END;
    END;

    PROCEDURE GetBinContentInternalMovement@76(InternalMovementHeader@1001 : Record 7346;LocationCodeFilter@1000 : Text[30];ItemFilter@1002 : Text[30];BinCodeFilter@1003 : Text[100]);
    VAR
      BinContent@1005 : Record 7302;
      WhseGetBinContent@1004 : Report 7391;
    BEGIN
      BinContent.INIT;
      BinContent.RESET;
      IF LocationCodeFilter <> '' THEN
        BinContent.SETRANGE("Location Code",LocationCodeFilter);
      IF ItemFilter <> '' THEN
        BinContent.SETFILTER("Item No.",ItemFilter);
      IF BinCodeFilter <> '' THEN
        BinContent.SETFILTER("Bin Code",BinCodeFilter);
      WhseGetBinContent.SETTABLEVIEW(BinContent);
      WhseGetBinContent.InitializeInternalMovement(InternalMovementHeader);
      WhseGetBinContent.USEREQUESTPAGE(FALSE);
      WhseGetBinContent.RUNMODAL;
    END;

    PROCEDURE GetBinContentTransferOrder@16(VAR TransferHeader@1001 : Record 5740;LocationCodeFilter@1003 : Text[30];ItemFilter@1002 : Text[30];BinCodeFilter@1000 : Text[100]);
    VAR
      BinContent@1004 : Record 7302;
      WhseGetBinContent@1006 : Report 7391;
    BEGIN
      BinContent.INIT;
      BinContent.RESET;
      IF LocationCodeFilter <> '' THEN
        BinContent.SETRANGE("Location Code",LocationCodeFilter);
      IF ItemFilter <> '' THEN
        BinContent.SETFILTER("Item No.",ItemFilter);
      IF BinCodeFilter <> '' THEN
        BinContent.SETFILTER("Bin Code",BinCodeFilter);
      WhseGetBinContent.SETTABLEVIEW(BinContent);
      WhseGetBinContent.InitializeTransferHeader(TransferHeader);
      WhseGetBinContent.USEREQUESTPAGE(FALSE);
      WhseGetBinContent.RUN;
    END;

    PROCEDURE GetInboundSourceDocuments@154(VAR WhsePutAwayRqst@1000 : Record 7324;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    VAR
      GetInboundSourceDocuments@1003 : Report 7306;
    BEGIN
      CLEAR(GetInboundSourceDocuments);
      GetInboundSourceDocuments.SetWhseWkshName(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      GetInboundSourceDocuments.USEREQUESTPAGE(FALSE);
      GetInboundSourceDocuments.SETTABLEVIEW(WhsePutAwayRqst);
      GetInboundSourceDocuments.RUN;
    END;

    PROCEDURE GetOutboundSourceDocuments@157(VAR WhsePickRequest@1004 : Record 7325;WhseWorksheetName@1001 : Record 7327;LocationCode@1000 : Code[10]);
    VAR
      GetOutboundSourceDocuments@1002 : Report 7304;
    BEGIN
      CLEAR(GetOutboundSourceDocuments);
      GetOutboundSourceDocuments.SetPickWkshName(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      GetOutboundSourceDocuments.USEREQUESTPAGE(FALSE);
      GetOutboundSourceDocuments.SETTABLEVIEW(WhsePickRequest);
      GetOutboundSourceDocuments.RUN;
    END;

    PROCEDURE GetSourceDocumentsShipment@4(VAR WarehouseShipmentHeader@1002 : Record 7320;VAR WarehouseSourceFilter@1000 : Record 5771;LocationCode@1003 : Code[10]);
    VAR
      GetSourceDocuments@1001 : Report 5753;
    BEGIN
      // Get Shipment Lines for the required Order in matching criteria.
      GetSourceDocuments.SetOneCreatedShptHeader(WarehouseShipmentHeader);
      WarehouseSourceFilter.SetFilters(GetSourceDocuments,LocationCode);
      GetSourceDocuments.SetSkipBlockedItem(TRUE);
      GetSourceDocuments.USEREQUESTPAGE(FALSE);
      GetSourceDocuments.RUNMODAL;
    END;

    PROCEDURE GetSourceDocumentsReceipt@7(VAR WarehouseReceiptHeader@1002 : Record 7316;VAR WarehouseSourceFilter@1001 : Record 5771;LocationCode@1000 : Code[10]);
    VAR
      GetSourceDocuments@1003 : Report 5753;
    BEGIN
      // Get Receipt Lines for the required Order in matching criteria.
      GetSourceDocuments.SetOneCreatedReceiptHeader(WarehouseReceiptHeader);
      WarehouseSourceFilter.SetFilters(GetSourceDocuments,LocationCode);
      GetSourceDocuments.SetSkipBlockedItem(TRUE);
      GetSourceDocuments.USEREQUESTPAGE(FALSE);
      GetSourceDocuments.RUNMODAL;
    END;

    PROCEDURE GetSourceDocInventoryMovement@89(VAR WarehouseActivityHeader@1001 : Record 5766);
    VAR
      CreateInvtPickMovement@1000 : Codeunit 7322;
    BEGIN
      CLEAR(CreateInvtPickMovement);
      CreateInvtPickMovement.SetInvtMovement(TRUE);
      CreateInvtPickMovement.RUN(WarehouseActivityHeader);
    END;

    PROCEDURE GetSourceDocInventoryPick@74(WarehouseActivityHeader@1000 : Record 5766);
    VAR
      CreateInventoryPickMovement@1001 : Codeunit 7322;
    BEGIN
      Assert.AreEqual(WarehouseActivityHeader.Type::"Invt. Pick",WarehouseActivityHeader.Type,'Only processes Inventory Pick');
      CLEAR(CreateInventoryPickMovement);
      CreateInventoryPickMovement.RUN(WarehouseActivityHeader);
    END;

    PROCEDURE GetSourceDocInventoryPutAway@25(WarehouseActivityHeader@1000 : Record 5766);
    VAR
      CreateInventoryPickMovement@1001 : Codeunit 7322;
    BEGIN
      Assert.AreEqual(WarehouseActivityHeader.Type::"Invt. Put-away",WarehouseActivityHeader.Type,'Only processes Inventory Put-away');
      CLEAR(CreateInventoryPickMovement);
      CreateInventoryPickMovement.RUN(WarehouseActivityHeader);
    END;

    PROCEDURE GetWhseDocsPickWorksheet@31(VAR WhseWkshLine@1000 : Record 7326;WhsePickRequest@1001 : Record 7325;Name@1002 : Code[10]) : Integer;
    VAR
      WhsePickRqst2@1004 : Record 7325;
      WhseWkshTemplate@1005 : Record 7328;
      WhseWkshName@1006 : Record 7327;
      GetOutboundSourceDocuments@1003 : Report 7304;
    BEGIN
      WhsePickRequest.TESTFIELD("Location Code");
      WhsePickRequest.TESTFIELD("Completely Picked",FALSE);

      WhseWkshTemplate.SETRANGE(Type,WhseWkshTemplate.Type::Pick);
      WhseWkshTemplate.FINDFIRST; // expected to be present as Distribution demo data has been called.
      IF NOT WhseWkshName.GET(WhseWkshTemplate.Name,Name,WhsePickRequest."Location Code") THEN BEGIN
        WhseWkshName.INIT;
        WhseWkshName.VALIDATE("Worksheet Template Name",WhseWkshTemplate.Name);
        WhseWkshName.VALIDATE(Name,Name);
        WhseWkshName.VALIDATE("Location Code",WhsePickRequest."Location Code");
        WhseWkshName.INSERT(TRUE);
      END;

      WhsePickRqst2 := WhsePickRequest;
      GetOutboundSourceDocuments.SetPickWkshName(
        WhseWkshTemplate.Name,WhseWkshName.Name,WhsePickRequest."Location Code");
      WhsePickRqst2.MARKEDONLY(TRUE);
      IF NOT WhsePickRqst2.FINDFIRST THEN BEGIN
        WhsePickRqst2.MARKEDONLY(FALSE);
        WhsePickRqst2.SETRECFILTER;
      END;

      GetOutboundSourceDocuments.USEREQUESTPAGE(FALSE);
      GetOutboundSourceDocuments.SETTABLEVIEW(WhsePickRqst2);
      GetOutboundSourceDocuments.RUNMODAL;

      CLEAR(WhseWkshLine);
      WhseWkshLine.SETRANGE("Worksheet Template Name",WhseWkshTemplate.Name);
      WhseWkshLine.SETRANGE(Name,WhseWkshName.Name);
      WhseWkshLine.SETRANGE("Location Code",WhsePickRequest."Location Code");
      WhseWkshLine.SETRANGE("Whse. Document No.",WhsePickRequest."Document No.");
      EXIT(WhseWkshLine.COUNT);
    END;

    PROCEDURE GetZoneForBin@147(LocationCode@1001 : Code[10];BinCode@1002 : Code[20]) : Code[10];
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      IF Bin.GET(LocationCode,BinCode) THEN
        EXIT(Bin."Zone Code");

      EXIT('');
    END;

    PROCEDURE NoSeriesSetup@13(VAR WarehouseSetup@1000 : Record 5769);
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Posted Whse. Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Posted Whse. Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Registered Whse. Movement Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Registered Whse. Pick Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Registered Whse. Put-away Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Whse. Movement Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Whse. Pick Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Whse. Put-away Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Whse. Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.VALIDATE("Whse. Ship Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseSetup.MODIFY(TRUE);
    END;

    PROCEDURE PostInventoryActivity@69(VAR WarehouseActivityHeader@1000 : Record 5766;Invoice@1003 : Boolean);
    BEGIN
      PostAndPrintInventoryActivity(WarehouseActivityHeader,Invoice,FALSE);
    END;

    PROCEDURE PostAndPrintInventoryActivity@124(VAR WarehouseActivityHeader@1000 : Record 5766;Invoice@1003 : Boolean;Print@1004 : Boolean);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WhseActivityPost@1002 : Codeunit 7324;
    BEGIN
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityHeader.Type);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.FINDFIRST;

      WhseActivityPost.SetInvoiceSourceDoc(Invoice);
      WhseActivityPost.PrintDocument(Print);
      WhseActivityPost.RUN(WarehouseActivityLine);
      CLEAR(WhseActivityPost);
    END;

    PROCEDURE PostTransferOrder@43(VAR TransferHeader@1000 : Record 5740;Ship@1001 : Boolean;Receive@1002 : Boolean);
    VAR
      TransferOrderPostShipment@1004 : Codeunit 5704;
      TransferOrderPostReceipt@1003 : Codeunit 5705;
    BEGIN
      CLEAR(TransferOrderPostShipment);
      IF Ship THEN
        TransferOrderPostShipment.RUN(TransferHeader);
      IF Receive THEN BEGIN
        TransferOrderPostReceipt.SetHideValidationDialog(TRUE);
        TransferOrderPostReceipt.RUN(TransferHeader);
      END;
    END;

    PROCEDURE PostWhseAdjustment@48(VAR Item@1002 : Record 27);
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    PROCEDURE PostWhseJournalLine@28(JournalTemplateName@1002 : Text[30];JournalBatchName@1001 : Text[30];Location@1003 : Text[30]);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      WhseJnlRegisterBatch@1004 : Codeunit 7304;
    BEGIN
      CLEAR(WhseJnlRegisterBatch);
      WarehouseJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      WarehouseJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      WarehouseJournalLine.SETRANGE("Location Code",Location);
      IF WarehouseJournalLine.FINDFIRST THEN
        WhseJnlRegisterBatch.RUN(WarehouseJournalLine);
    END;

    PROCEDURE PostWhseReceipt@112(VAR WarehouseReceiptHeader@1001 : Record 7316);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
      WhsePostReceipt@1000 : Codeunit 5760;
    BEGIN
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptHeader."No.");
      IF WarehouseReceiptLine.FINDFIRST THEN
        WhsePostReceipt.RUN(WarehouseReceiptLine);
    END;

    PROCEDURE PostWhseRcptWithConfirmMsg@8(No@1000 : Code[20]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
      WhsePostReceiptYesNo@1001 : Codeunit 5761;
    BEGIN
      WarehouseReceiptLine.SETRANGE("No.",No);
      IF WarehouseReceiptLine.FINDFIRST THEN
        WhsePostReceiptYesNo.RUN(WarehouseReceiptLine);
    END;

    PROCEDURE PostWhseShipment@1(WarehouseShipmentHeader@1001 : Record 7320;Invoice@1003 : Boolean);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
      WhsePostShipment@1000 : Codeunit 5763;
    BEGIN
      WhsePostShipment.SetPostingSettings(Invoice);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      IF WarehouseShipmentLine.FINDFIRST THEN
        WhsePostShipment.RUN(WarehouseShipmentLine);
    END;

    PROCEDURE PostWhseShptWithShipInvoiceMsg@6(No@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
      WhsePostShipShipInvoic@1002 : Codeunit 5764;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      IF WarehouseShipmentLine.FINDFIRST THEN
        WhsePostShipShipInvoic.RUN(WarehouseShipmentLine);
    END;

    PROCEDURE RegisterWhseActivity@65(VAR WarehouseActivityHeader@1000 : Record 5766);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WhseActivityRegister@1002 : Codeunit 7307;
      WMSMgt@1003 : Codeunit 7302;
    BEGIN
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityHeader.Type);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.FINDFIRST;
      WMSMgt.CheckBalanceQtyToHandle(WarehouseActivityLine);
      WhseActivityRegister.RUN(WarehouseActivityLine);
    END;

    PROCEDURE RegisterWhseJournalLine@108(JournalTemplateName@1001 : Text[10];JournalBatchName@1002 : Text[10];LocationCode@1000 : Code[10];UseBatchJob@1004 : Boolean);
    VAR
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      WarehouseJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      WarehouseJournalLine.VALIDATE("Location Code",LocationCode);
      // Batch job doesn't show confirmation dialog about registering journal lines and message dialog that they have been registered.
      IF UseBatchJob THEN
        CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register Batch",WarehouseJournalLine)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register",WarehouseJournalLine);
    END;

    PROCEDURE ReleaseTransferOrder@100(VAR TransferHeader@1001 : Record 5740);
    VAR
      ReleaseTransferDocument@1000 : Codeunit 5708;
    BEGIN
      CLEAR(ReleaseTransferDocument);
      ReleaseTransferDocument.RUN(TransferHeader);
    END;

    PROCEDURE ReleaseWarehouseShipment@151(VAR WarehouseShipmentHeader@1001 : Record 7320);
    VAR
      WhseShipmentRelease@1002 : Codeunit 7310;
    BEGIN
      WhseShipmentRelease.Release(WarehouseShipmentHeader);
    END;

    PROCEDURE ReleaseWarehouseInternalPick@21(VAR WhseInternalPickHeader@1001 : Record 7333);
    VAR
      WhseInternalPickRelease@1000 : Codeunit 7315;
    BEGIN
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
    END;

    PROCEDURE ReleaseWarehouseInternalPutAway@26(VAR WhseInternalPutAwayHeader@1000 : Record 7331);
    VAR
      WhseIntPutAwayRelease@1001 : Codeunit 7316;
    BEGIN
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
    END;

    PROCEDURE ReopenTransferOrder@37(VAR TransferHeader@1001 : Record 5740);
    VAR
      ReleaseTransferDocument@1000 : Codeunit 5708;
    BEGIN
      ReleaseTransferDocument.Reopen(TransferHeader);
    END;

    PROCEDURE ReopenWhseShipment@83(VAR WhseShipmentHeader@1000 : Record 7320);
    VAR
      WhseShipmentRelease@1001 : Codeunit 7310;
    BEGIN
      WhseShipmentRelease.Reopen(WhseShipmentHeader);
    END;

    PROCEDURE RunDateCompressWhseEntries@27(ItemNo@1002 : Code[20]);
    VAR
      WarehouseEntry@1001 : Record 7312;
      DateCompressWhseEntries@1000 : Report 7398;
    BEGIN
      COMMIT;  // Commit required for batch job report.
      CLEAR(DateCompressWhseEntries);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      DateCompressWhseEntries.SETTABLEVIEW(WarehouseEntry);
      DateCompressWhseEntries.RUN;
    END;

    [Normal]
    PROCEDURE SelectBinType@68(Receive@1004 : Boolean;Ship@1003 : Boolean;PutAway@1002 : Boolean;Pick@1001 : Boolean) : Code[10];
    VAR
      BinType@1000 : Record 7303;
    BEGIN
      CLEAR(BinType);
      BinType.INIT;

      BinType.SETRANGE(Receive,Receive);
      BinType.SETRANGE(Ship,Ship);
      BinType.SETRANGE("Put Away",PutAway);
      BinType.SETRANGE(Pick,Pick);
      IF NOT BinType.FINDFIRST THEN
        CreateBinType(BinType,Receive,Ship,PutAway,Pick);

      EXIT(BinType.Code);
    END;

    [Normal]
    PROCEDURE SelectWhseJournalTemplateName@106(VAR WarehouseJournalTemplate@1000 : Record 7309;WarehouseJournalTemplateType@1001 : Option);
    BEGIN
      // Find Item Journal Template for the given Template Type.
      WarehouseJournalTemplate.SETRANGE(Type,WarehouseJournalTemplateType);
      WarehouseJournalTemplate.FINDFIRST;
    END;

    [Normal]
    PROCEDURE SelectWhseJournalBatchName@105(VAR WarehouseJournalBatch@1000 : Record 7310;WhseJournalBatchTemplateType@1001 : Option;WarehouseJournalTemplateName@1002 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      // Find Name for Batch Name.
      WarehouseJournalBatch.SETRANGE("Template Type",WhseJournalBatchTemplateType);
      WarehouseJournalBatch.SETRANGE("Journal Template Name",WarehouseJournalTemplateName);
      WarehouseJournalBatch.SETRANGE("Location Code",LocationCode);

      // If Warehouse Journal Batch not found then create it.
      IF NOT WarehouseJournalBatch.FINDFIRST THEN
        CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplateName,LocationCode);
    END;

    [Normal]
    PROCEDURE SelectWhseWorksheetTemplate@144(VAR WhseWorksheetTemplate@1002 : Record 7328;WarehouseJournalTemplateType@1001 : Option);
    BEGIN
      // Find Item Journal Template for the given Template Type.
      WhseWorksheetTemplate.SETRANGE(Type,WarehouseJournalTemplateType);
      WhseWorksheetTemplate.FINDFIRST;
    END;

    [Normal]
    PROCEDURE SelectWhseWorksheetName@143(VAR WhseWorksheetName@1000 : Record 7327;WhseWorkSheetTemplateName@1002 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      // Find Name for Warehouse Worksheet Name.
      WhseWorksheetName.SETRANGE("Worksheet Template Name",WhseWorkSheetTemplateName);
      WhseWorksheetName.SETRANGE("Location Code",LocationCode);

      // If Warehouse Worksheet Name not found then create it.
      IF NOT WhseWorksheetName.FINDFIRST THEN
        CreateWhseWorksheetName(WhseWorksheetName,WhseWorkSheetTemplateName,LocationCode);
    END;

    PROCEDURE SetQtyToHandleInternalMovement@90(InternalMovementHeader@1008 : Record 7346;Qty@1001 : Decimal);
    VAR
      InternalMovementLine@1000 : Record 7347;
    BEGIN
      CLEAR(InternalMovementLine);
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.FINDSET;
      REPEAT
        InternalMovementLine.VALIDATE(Quantity,Qty);
        InternalMovementLine.MODIFY(TRUE);
      UNTIL InternalMovementLine.NEXT = 0;
    END;

    PROCEDURE SetQtyHandleInventoryMovement@91(WarehouseActivityHeader@1000 : Record 5766;Qty@1002 : Decimal);
    BEGIN
      SetQtyToHandleWhseActivity(WarehouseActivityHeader,Qty);
    END;

    PROCEDURE SetQtyToHandleWhseActivity@85(WhseActivityHdr@1008 : Record 5766;Qty@1001 : Decimal);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityHdr.Type);
      WhseActivityLine.SETRANGE("No.",WhseActivityHdr."No.");
      WhseActivityLine.FINDSET;
      REPEAT
        WhseActivityLine.VALIDATE(Quantity,Qty);
        WhseActivityLine.MODIFY(TRUE);
      UNTIL WhseActivityLine.NEXT = 0;
    END;

    PROCEDURE SetRequireShipmentOnWarehouseSetup@53(RequireShipment@1000 : Boolean);
    VAR
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Require Shipment",RequireShipment);
      WarehouseSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetRequireReceiveOnWarehouseSetup@54(RequireReceive@1000 : Boolean);
    VAR
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Require Receive",RequireReceive);
      WarehouseSetup.MODIFY(TRUE);
    END;

    PROCEDURE WhseCalculateInventory@153(WarehouseJournalLine@1005 : Record 7311;VAR BinContent@1004 : Record 7302;NewRegisteringDate@1003 : Date;WhseDocNo@1002 : Code[20];ItemsNotOnInvt@1001 : Boolean);
    VAR
      WhseCalculateInventory@1000 : Report 7390;
    BEGIN
      COMMIT;  // Commit is required to run the report.
      WhseCalculateInventory.SetWhseJnlLine(WarehouseJournalLine);
      WhseCalculateInventory.InitializeRequest(NewRegisteringDate,WhseDocNo,ItemsNotOnInvt);
      WhseCalculateInventory.SETTABLEVIEW(BinContent);
      WhseCalculateInventory.USEREQUESTPAGE(FALSE);
      WhseCalculateInventory.RUN;
    END;

    PROCEDURE WhseSourceCreateDocument@159(VAR WhseWorksheetLine@1005 : Record 7326;SortActivity@1004 : Option;PrintDoc@1003 : Boolean;DoNotFillQtytoHandle@1002 : Boolean;BreakbulkFilter@1001 : Boolean);
    VAR
      WhseSourceCreateDocument@1000 : Report 7305;
    BEGIN
      WhseSourceCreateDocument.Initialize(USERID,SortActivity,PrintDoc,DoNotFillQtytoHandle,BreakbulkFilter);
      WhseSourceCreateDocument.USEREQUESTPAGE(FALSE);
      WhseSourceCreateDocument.SetWhseWkshLine(WhseWorksheetLine);
      WhseSourceCreateDocument.RUN;
    END;

    PROCEDURE WhseGetBinContent@158(VAR BinContent@1000 : Record 7302;WhseWorksheetLine@1003 : Record 7326;WhseInternalPutAwayHeader@1002 : Record 7331;DestinationType@1001 : Option);
    VAR
      WhseGetBinContent@1004 : Report 7391;
    BEGIN
      WhseGetBinContent.InitializeReport(WhseWorksheetLine,WhseInternalPutAwayHeader,DestinationType);
      WhseGetBinContent.SETTABLEVIEW(BinContent);
      WhseGetBinContent.USEREQUESTPAGE(FALSE);
      WhseGetBinContent.RUN;
    END;

    PROCEDURE WhseGetBinContentFromItemJournalLine@15(VAR BinContent@1000 : Record 7302;ItemJournalLine@1001 : Record 83);
    VAR
      WhseGetBinContent@1002 : Report 7391;
    BEGIN
      CLEAR(WhseGetBinContent);
      WhseGetBinContent.SETTABLEVIEW(BinContent);
      WhseGetBinContent.InitializeItemJournalLine(ItemJournalLine);
      WhseGetBinContent.USEREQUESTPAGE(FALSE);
      WhseGetBinContent.RUN;
    END;

    BEGIN
    {
      Unsupported version tags:

      Contains all utility functions related to Warehouse Management.
    }
    END.
  }
}

