OBJECT Codeunit 136501 UT Time Sheets Approval
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TimeSheetApprovalMgt@1004 : Codeunit 951;
      LibraryHumanResource@1005 : Codeunit 131901;
      LibraryTimeSheet@1000 : Codeunit 131904;
      Text001@1001 : TextConst 'ENU=Rolling back changes...';

    LOCAL PROCEDURE SetUp@2();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      LibraryTimeSheet.Initialize;

      // create current user id setup for approver
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
    END;

    LOCAL PROCEDURE TearDown@3();
    BEGIN
      ASSERTERROR ERROR(Text001);
    END;

    [Test]
    PROCEDURE SubmitApprove@8();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open -> submitted -> approved
      SetUp;

      DoSubmitApprove(TimeSheetLine);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitApproveReopen@16();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open -> submitted -> approved -> submitted
      SetUp;

      DoSubmitApprove(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Approved);

      // reopen line
      TimeSheetApprovalMgt.ReopenApproved(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitReject@9();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open -> submitted -> rejected
      SetUp;

      DoSubmitReject(TimeSheetLine);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitReopen@11();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open -> submitted -> opened
      SetUp;

      // create time sheet with one line
      CreateTimeSheetWithOneLine(TimeSheetLine);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      // reopen line
      TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Open);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitRejectSubmit@13();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open -> submitted -> rejected -> submitted
      SetUp;

      DoSubmitReject(TimeSheetLine);

      // submit line again
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitRejectReopen@12();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // rejected line cannot be reopen
      SetUp;

      DoSubmitReject(TimeSheetLine);

      // try to reopen
      ASSERTERROR TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);
    END;

    [Test]
    PROCEDURE SubmitRejectApprove@15();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // rejected line cannot be approved
      SetUp;

      DoSubmitReject(TimeSheetLine);

      // try to approve
      ASSERTERROR TimeSheetApprovalMgt.Approve(TimeSheetLine);
    END;

    [Test]
    PROCEDURE Approve@10();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open line cannot be approved
      SetUp;

      // create time sheet with one line
      CreateTimeSheetWithOneLine(TimeSheetLine);

      // try to approve
      ASSERTERROR TimeSheetApprovalMgt.Approve(TimeSheetLine);
    END;

    [Test]
    PROCEDURE Reject@14();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // open line cannot be rejected
      SetUp;

      // create time sheet with one line
      CreateTimeSheetWithOneLine(TimeSheetLine);

      // try to reject
      ASSERTERROR TimeSheetApprovalMgt.Reject(TimeSheetLine);
    END;

    [Test]
    PROCEDURE SubmitApproveOpen@5();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // approved line cannot be reopened
      SetUp;

      DoSubmitApprove(TimeSheetLine);

      // try to reopen
      ASSERTERROR TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitApproveSubmit@1();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // approved line cannot be submitted
      SetUp;

      DoSubmitApprove(TimeSheetLine);

      // try to submit
      ASSERTERROR TimeSheetApprovalMgt.Submit(TimeSheetLine);

      TearDown;
    END;

    [Test]
    PROCEDURE SubmitApproveReject@4();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // approved line cannot be rejected
      SetUp;

      DoSubmitApprove(TimeSheetLine);

      // try to reject
      ASSERTERROR TimeSheetApprovalMgt.Reject(TimeSheetLine);
    END;

    [Test]
    PROCEDURE ApproveAbsence@21();
    VAR
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      Employee@1005 : Record 5200;
      EmployeeAbsence@1002 : Record 5207;
    BEGIN
      // absence approval causes "absence posting"
      SetUp;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // create employee
      LibraryHumanResource.CreateEmployee(Employee);
      Employee."Resource No." := TimeSheetHeader."Resource No.";
      Employee.MODIFY;

      // create time sheet line with type absence
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,
        TimeSheetLine,
        TimeSheetLine.Type::Absence,
        '',
        '',
        '',
        GetCauseOfAbsenceCode);

      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);

      // approve line
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // verify that employee absence is registered
      EmployeeAbsence.SETRANGE("Employee No.",Employee."No.");
      EmployeeAbsence.SETRANGE("From Date",TimeSheetHeader."Starting Date");
      EmployeeAbsence.FINDFIRST;

      TearDown;
    END;

    LOCAL PROCEDURE CreateTimeSheetWithOneLine@6(VAR TimeSheetLine@1000 : Record 951);
    VAR
      TimeSheetHeader@1001 : Record 950;
    BEGIN
      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // create simple time sheet line
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');

      // create time sheet detail
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Open);
    END;

    LOCAL PROCEDURE GetCauseOfAbsenceCode@18() : Code[10];
    VAR
      CauseOfAbsence@1000 : Record 5206;
      HumanResourceUnitOfMeasure@1001 : Record 5220;
    BEGIN
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      WITH CauseOfAbsence DO BEGIN
        IF "Unit of Measure Code" = '' THEN BEGIN
          HumanResourceUnitOfMeasure.FINDFIRST;
          VALIDATE("Unit of Measure Code",HumanResourceUnitOfMeasure.Code);
          MODIFY(TRUE);
        END;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE DoSubmitApprove@7(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      // create time sheet with one line
      CreateTimeSheetWithOneLine(TimeSheetLine);

      // initially status = Open
      // reopen does not affect on open status
      TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Open);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      // approve line
      TimeSheetApprovalMgt.Approve(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Approved);
    END;

    LOCAL PROCEDURE DoSubmitReject@17(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      // create time sheet with one line
      CreateTimeSheetWithOneLine(TimeSheetLine);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      // reject line
      TimeSheetApprovalMgt.Reject(TimeSheetLine);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Rejected);
    END;

    BEGIN
    {
      // [FEATURE] [Time Sheet] [Approval]
      Unsupported version tags:
      SE: Unable to Execute

      This unit test codeunit tests approval procedures
    }
    END.
  }
}

