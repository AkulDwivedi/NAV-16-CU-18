OBJECT Codeunit 134226 ERM TestMultipleGenJnlLines
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryERM@1007 : Codeunit 131300;
      LibrarySales@1011 : Codeunit 130509;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryPurchase@1010 : Codeunit 130512;
      IsInitialized@1001 : Boolean;
      GenJournalTemplateError@1006 : TextConst 'ENU=Gen. Journal Template name is blank.';
      GenJournalBatchError@1005 : TextConst 'ENU=Gen. Journal Batch name is blank.';
      GeneralJournalTemplateName@1008 : Code[10];
      PostingNoSeriesMustBeEmpty@1003 : TextConst 'ENU=Posting No. Series must be equal to ''''';
      OutOfBalanceErr@1004 : TextConst 'ENU=is out of balance';

    [Test]
    PROCEDURE TestPostGLAccounts@9();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1013 : Record 81;
      GLEntry@1012 : Record 17;
      NoOfDrLines@1009 : Integer;
      NoOfCrLines@1008 : Integer;
      DebitAmt@1005 : Decimal;
      CreditAmt@1002 : Decimal;
    BEGIN
      // Test Covers TFS_TS_ID: 111510:Test suite: Create and post a G/L Journal.
      // 1. Create multiple General Journal Lines for debit and credit amounts, Add boundary value two to make sure that the number of
      // lines generated are always greater than two.
      // 2. Post the General Journal Lines.
      // 3. Verify that the count of posted entries is equal to the sum of debit and credit lines.

      // Setup: Create Multiple General Journal Lines of Debit and Credit Amounts. Taking Random Amount in multiplication of 4 to generate even amount and avoid rounding issue.
      Initialize;
      DebitAmt := LibraryRandom.RandInt(1000) * 4;
      NoOfDrLines := 2 * LibraryRandom.RandInt(3);
      SelectAndClearGeneralJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,NoOfDrLines,DebitAmt);

      NoOfCrLines := 2 * LibraryRandom.RandInt(3);
      CreditAmt := -DebitAmt * NoOfDrLines / NoOfCrLines;
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,NoOfCrLines,CreditAmt);

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify the count of posted GL Entries with total number of lines entered for debit and credit amount.
      GLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      Assert.AreEqual(GLEntry.COUNT,NoOfDrLines + NoOfCrLines,'An incorrect number of lines was posted');
    END;

    [Test]
    PROCEDURE GeneralJournalTemplateError@91();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      Customer@1002 : Record 18;
    BEGIN
      // Test error occurs on running Create Customer Journal Lines Report without General Journal Template.

      // 1. Setup: Create General Journal Batch and Find Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // 2. Exercise: Run Create Customer Journal Lines Report without General Journal Template.
      ASSERTERROR RunCreateCustomerJournalLines(Customer,'',GenJournalBatch.Name,StandardGeneralJournal.Code);

      // 3. Verify: Verify error occurs on running Create Customer Journal Lines Report without General Journal Template.
      Assert.ExpectedError(STRSUBSTNO(GenJournalTemplateError));

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE GeneralJournalBatchError@18();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      Customer@1002 : Record 18;
    BEGIN
      // Test error occurs on running Create Customer Journal Lines Report without General Batch Name.

      // 1. Setup: Create General Journal Batch and Find Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // 2. Exercise: Run Create Customer Journal Lines Report without General Batch Name.
      ASSERTERROR RunCreateCustomerJournalLines(Customer,GenJournalBatch."Journal Template Name",'',StandardGeneralJournal.Code);

      // 3. Verify: Verify error occurs on running Create Customer Journal Lines Report without General Batch Name.
      Assert.ExpectedError(STRSUBSTNO(GenJournalBatchError));

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE CreateCustomerJournalLineBatch@30();
    VAR
      GenJournalBatch@1001 : Record 232;
      StandardGeneralJournal@1000 : Record 750;
      Customer@1003 : Record 18;
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Test General Journal Lines are created for Customer after running Create Customer Journal Lines Report.

      // 1. Setup: Create Customer and General Journal Batch. Find Standard General Journal.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // Use Random Values for number of lines and amount.
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,LibraryRandom.RandInt(5),LibraryRandom.RandDec(100,2));
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // 2. Exercise: Run Create Customer Journal Lines Report.
      Customer.SETRANGE("No.",Customer."No.");
      RunCreateCustomerJournalLines(Customer,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,StandardGeneralJournal.Code);

      // 3. Verify: Verify General Journal Lines are created for Customer after running Create Customer Journal Lines Report.
      VerifyCustomerJournalLines(GenJournalBatch,StandardGeneralJournal.Code,Customer."No.");

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,GeneralJournalTemplateHandler)]
    PROCEDURE GeneralJournalPostWithNo@4();
    VAR
      GLEntry@1000 : Record 17;
      GeneralJournal@1007 : TestPage 39;
      LastGLEntryNo@1005 : Integer;
    BEGIN
      // Create General Journal line, Post with NO and Verify Entry No of G/L Entry has not increased.

      // 1. Setup: Find Last G/L Entry No.
      Initialize;
      LastGLEntryNo := GetLastGLEntryNumber;

      // Create General Journal Line.
      CreateGeneralJournalLineByPage(GeneralJournal);

      // 2. Exercise: Post General Journal Line.
      GeneralJournal.Post.INVOKE;

      // 3. Verify: Check Entry No. of G/L Entry must not be increased.
      GLEntry.FINDLAST;
      GLEntry.TESTFIELD("Entry No.",LastGLEntryNo);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GeneralJournalTemplateName);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,GeneralJournalTemplateHandler)]
    PROCEDURE GeneralJournalPostWithYes@2();
    VAR
      GLEntry@1001 : Record 17;
      GeneralJournal@1007 : TestPage 39;
      LastGLEntryNo@1005 : Integer;
    BEGIN
      // Create General Journal line, Post with YES and Verify Entry No of G/L Entry has increased.

      // 1. Setup: Find Last G/L Entry No.
      Initialize;
      LastGLEntryNo := GetLastGLEntryNumber;

      // Create General Journal Line.
      CreateGeneralJournalLineByPage(GeneralJournal);

      // 2. Exercise: Post General Journal Line.
      GeneralJournal.Post.INVOKE;

      // 3. Verify: Check Entry No. of G/L Entry must not be increased.
      GLEntry.SETFILTER("Entry No.",'>%1',LastGLEntryNo);
      GLEntry.FINDFIRST;

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GeneralJournalTemplateName);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE GeneralJournalWithBatchName@10();
    VAR
      GenJournalBatch@1000 : Record 232;
      GeneralJournal@1001 : TestPage 39;
    BEGIN
      // Verify General Journal Batch Name on General Journal Page with Number Series.

      // 1. Setup: Create General Journal Batch with Number Series.
      Initialize;
      CreateGeneralBatchWithNoSeries(GenJournalBatch);

      // 2. Exercise: Open General Journal Page with new Template.
      COMMIT;  // COMMIT needs before create General Journal.
      GeneralJournal.OPENEDIT;  // Template selection performed in General Journal Template Handler.

      // 3. Verify: Verify General Journal Batch Name on General Journal Page
      GeneralJournal.CurrentJnlBatchName.ASSERTEQUALS(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,GeneralJournalTemplateHandler)]
    PROCEDURE GeneralJournalWithBalAccount@11();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      GeneralJournal@1000 : TestPage 39;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify Balance Account on General Journal Page with Number Series.

      // 1. Setup: Create General Journal Batch with Number Series.
      Initialize;
      CreateGeneralBatchWithNoSeries(GenJournalBatch);

      // 2. Exercise: Create and post General Line with Account Type as G/L Account and Random Amount.
      COMMIT;  // COMMIT needs before create General Journal.
      GeneralJournal.OPENEDIT;  // Template selection performed in General Journal Template Handler.
      DocumentNo := GeneralJournal."Document No.".VALUE;
      GeneralJournal."Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
      GeneralJournal."Account No.".SETVALUE(LibraryERM.CreateGLAccountNo);
      UpdateAmountOnGenJournalLine(GenJournalBatch,GeneralJournal);
      GeneralJournal.Post.INVOKE;

      // 3. Verify: Verify Balance Account on General Journal Page.
      VerifyBalanceAccountOnGLEntry(DocumentNo,GenJournalBatch."Bal. Account No.");

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE VendorWithBalance@29();
    VAR
      Vendor@1000 : Record 23;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post General Journal Line having Customer with Balance Account number and verify Customer number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Line and LibraryRandom used for generating Random Amount.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Purchase);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.",-LibraryRandom.RandDec(10,2));
      UpdateBalanceGLAccount(GenJournalLine,GLAccount."No.");

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Vendor Ledger Entry and G/L Register.
      VerifyVendorLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Vendor."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE VendorWithoutBalance@38();
    VAR
      Vendor@1000 : Record 23;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post General Journal Line having Customer without Balance Account number and verify Customer number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Lines and LibraryRandom used for generating Random Amount.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Purchase);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.",-LibraryRandom.RandDec(10,2));
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-GenJournalLine.Amount);

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Vendor Ledger Entry and G/L Register.
      VerifyVendorLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Vendor."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE CustomerWithBalance@37();
    VAR
      Customer@1000 : Record 18;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post General Journal Line having Vendor with Balance Account number and verify Vendor number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Lines and LibraryRandom used for generating Random Amount.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Sale);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.",-LibraryRandom.RandDec(10,2));
      UpdateBalanceGLAccount(GenJournalLine,GLAccount."No.");

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Customer Ledger Entry and G/L Register.
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Customer."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE CustomerWithoutBalance@17();
    VAR
      Customer@1000 : Record 18;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post General Journal Line having Vendor without Balance Account number and verify Vendor number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Lines and LibraryRandom used for generating Random Amount.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Sale);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.",-LibraryRandom.RandDec(10,2));
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-GenJournalLine.Amount);

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Customer Ledger Entry and G/L Register.
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Customer."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE MultipleVendor@74();
    VAR
      Vendor@1000 : Record 23;
      Vendor2@1002 : Record 23;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post multiple General Journal Lines including Customer withhout having Balance Account number and verify Vendor number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Lines and LibraryRandom used for generating Random Amount.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendor(Vendor2);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Purchase);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.",-LibraryRandom.RandDec(10,2));
      CreateGeneralJournal(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor2."No.",GenJournalLine.Amount);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-(2 * GenJournalLine.Amount));

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Vendor Ledger Entry and G/L Register.
      VerifyVendorLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Vendor."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE MultipleCustomer@73();
    VAR
      Customer@1000 : Record 18;
      Customer2@1002 : Record 18;
      GLAccount@1003 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      // Create and post multiple General Journal Lines including Customer withhout having Balance Account number and verify Customer number and G/L Entry after posting.

      // Setup: Create Customer, G/L Account and  General Journal Lines and LibraryRandom used for generating Random Amount.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomer(Customer2);
      CreateAndUpdateGLAccount(GLAccount,GLAccount."Gen. Posting Type"::Sale);
      CreateBatchAndUpdateTemplate(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.",-LibraryRandom.RandDec(10,2));
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer2."No.",GenJournalLine.Amount);
      CreateGeneralJournal(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-(2 * GenJournalLine.Amount));

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Customer Ledger Entry and G/L Register.
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Document Type"::" ",Customer."No.");
      VerifyGLRegister(GenJournalBatch.Name);

      // 4. Tear Down: Delete earlier created General Journal Template.
      DeleteGeneralJournalTemplate(GenJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE GeneralJournalLineWithPostingNoSeriesError@56();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      // Test that error occurs when General Journal Lines are posted with and without Posting No. Series.

      // Setup: Create two General Journal Lines with and without Posting No Series and Random Amount.
      Initialize;
      SelectAndClearGeneralJournalBatch(GenJournalBatch);
      CreateGeneralJournalLineWithPostingNoSeries(
        GenJournalLine,GenJournalBatch,LibraryUtility.GetGlobalNoSeriesCode,LibraryRandom.RandDec(100,2));  // General Journal Line with Posting No Series.
      CreateGeneralJournalLineWithPostingNoSeries(GenJournalLine,GenJournalBatch,'',-GenJournalLine.Amount);  // General Journal Line without Posting No Series.

      // Exercise: Post General Journal Line. It should generate error.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Error Message.
      Assert.ExpectedError(PostingNoSeriesMustBeEmpty);
    END;

    [Test]
    [HandlerFunctions(StandardGeneralJournalHandler)]
    PROCEDURE CheckSourceCodeOnStandardGeneralJournalLine@14();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      StandardGeneralJournalLine@1004 : Record 751;
      GenJournalTemplate@1002 : Record 80;
    BEGIN
      // Test that Source Code is automatically filled when Standard General Journal page is opened.

      // Setup: Create a new General Journal Batch and standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // Exercise: Run Page Standard General Journal.
      PAGE.RUN(PAGE::"Standard General Journal",StandardGeneralJournal);

      // Verify: Verify that the Source Code is filled same as in General Journal Batch created.
      FindStandardGeneralJournalLine(StandardGeneralJournalLine,GenJournalBatch."Journal Template Name",StandardGeneralJournal.Code);
      GenJournalTemplate.GET(GenJournalBatch."Journal Template Name");
      StandardGeneralJournalLine.TESTFIELD("Source Code",GenJournalTemplate."Source Code");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE PostGeneralJournalLinesUsingNoSeries@33();
    VAR
      JournalBatchName@1002 : Code[10];
    BEGIN
      // Test that General Journal Lines created using No. Series (contain different number of digits) can be posted successfully.

      // Setup: Create General Journal Lines using No. Series by General Journal Page."Document No." of the Journal Lines will contain different number of digits.
      // Exercise: Post General Journal.
      Initialize;
      JournalBatchName :=
        CreateAndPostGeneralJournalLinesUsingNoSeriesByPage(FORMAT(RANDOM(8)),LibraryRandom.RandIntInRange(10,20));

      // Verify: Verify the General Journal had posted successfully to G/L Register.
      VerifyGLRegister(JournalBatchName);
    END;

    [Test]
    PROCEDURE PostGeneralJournalLinesBalancedByDateForceDocBalFalse@28();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      DocumentNos@1003 : ARRAY [4] OF Code[20];
    BEGIN
      // [FEATURE] [Force Doc. Balance]
      // [SCENARIO 363317] Journal lines balanced by Posting Date but not balanced by Document No. can be posted when "Force Doc. Balance" is off.
      Initialize;

      // [GIVEN] Gen. Journal Batch/Template with "Force Doc. Balance" = FALSE.
      CreateGeneralJournalBatchTemplateForceDocBalance(GenJournalBatch,FALSE);

      // [GIVEN] Gen. Journal Line: Document No. = DOC1, Posting Date = D, Amount = 100,
      // [GIVEN] Gen. Journal Line: Document No. = DOC4, Posting Date = D, Amount = -100,
      // [GIVEN] Gen. Journal Line: Document No. = DOC2, Posting Date = D + 1, Amount = 200,
      // [GIVEN] Gen. Journal Line: Document No. = DOC3, Posting Date = D + 1, Amount = -200,
      DocumentNos[1] := LibraryUtility.GenerateGUID;
      DocumentNos[3] := LibraryUtility.GenerateGUID;
      DocumentNos[4] := LibraryUtility.GenerateGUID;
      DocumentNos[2] := LibraryUtility.GenerateGUID;
      CreateGeneralJournalLineWithBalanceLine(
        GenJournalBatch,GenJournalLine,DocumentNos[1],DocumentNos[2],WORKDATE);
      CreateGeneralJournalLineWithBalanceLine(
        GenJournalBatch,GenJournalLine,DocumentNos[3],DocumentNos[4],WORKDATE + 1);

      // [WHEN] General Journal Lines posted
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Gen. Journal Lines successfully posted
      VerifyGLRegister(GenJournalBatch.Name);
    END;

    [Test]
    PROCEDURE PostGeneralJournalLinesBalancedByDateForceDocBalTrue@34();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      DocumentNos@1003 : ARRAY [4] OF Code[20];
    BEGIN
      // [FEATURE] [Force Doc. Balance]
      // [SCENARIO 363317] Journal lines balanced by Posting Date but not balanced by Document No. cannot be posted when "Force Doc. Balance" is on.
      Initialize;

      // [GIVEN] Gen. Journal Batch/Template with "Force Doc. Balance" = TRUE.
      CreateGeneralJournalBatchTemplateForceDocBalance(GenJournalBatch,TRUE);

      // [GIVEN] Gen. Journal Line: Document No. = DOC1, Posting Date = D, Amount = 100,
      // [GIVEN] Gen. Journal Line: Document No. = DOC4, Posting Date = D, Amount = -100,
      // [GIVEN] Gen. Journal Line: Document No. = DOC2, Posting Date = D + 1, Amount = 200,
      // [GIVEN] Gen. Journal Line: Document No. = DOC3, Posting Date = D + 1, Amount = -200,
      DocumentNos[1] := LibraryUtility.GenerateGUID;
      DocumentNos[3] := LibraryUtility.GenerateGUID;
      DocumentNos[4] := LibraryUtility.GenerateGUID;
      DocumentNos[2] := LibraryUtility.GenerateGUID;
      CreateGeneralJournalLineWithBalanceLine(
        GenJournalBatch,GenJournalLine,DocumentNos[1],DocumentNos[2],WORKDATE);
      CreateGeneralJournalLineWithBalanceLine(
        GenJournalBatch,GenJournalLine,DocumentNos[3],DocumentNos[4],WORKDATE + 1);

      // [WHEN] General Journal Lines posted
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] "Document is out of balance" error message appears.
      Assert.ExpectedError(OutOfBalanceErr);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Clear Global Variable.
      CLEAR(GeneralJournalTemplateName);

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndUpdateGLAccount@35(VAR GLAccount@1000 : Record 15;GenPostingType@1001 : Option);
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      UpdateGLAccount(GLAccount,GenPostingType);
    END;

    LOCAL PROCEDURE CreateBatchAndUpdateTemplate@20(VAR GenJournalBatch@1000 : Record 232;Type@1002 : Option);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournal@27(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountType@1004 : Option;AccountNo@1005 : Code[20];Amount@1002 : Decimal);
    BEGIN
      // Create General Journal Line.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch."Journal Template Name");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@6(VAR GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GeneralJournalTemplateName := GenJournalTemplate.Name;  // Save General Journal Template Name in Global variable.
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralBatchWithNoSeries@13(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GeneralJournalTemplates@1000 : TestPage 101;
      GeneralJournalBatches@1001 : TestPage 251;
    BEGIN
      GeneralJournalTemplates.OPENNEW;
      GeneralJournalTemplates.Name.SETVALUE(GetGeneralJournalTemplateName);
      GeneralJournalTemplates.Description.SETVALUE(GeneralJournalTemplates.Name.VALUE);
      GeneralJournalTemplates."No. Series".SETVALUE(LibraryUtility.GetGlobalNoSeriesCode);

      GeneralJournalTemplateName := GeneralJournalTemplates.Name.VALUE;  // Save General Journal Template Name in Global variable.

      GeneralJournalBatches.TRAP;
      GeneralJournalTemplates."Page General Journal Batches".INVOKE;
      GeneralJournalBatches.Name.SETVALUE(GetGeneralJournalBatchName);
      GeneralJournalBatches.Description.SETVALUE(GeneralJournalBatches.Name.VALUE);
      GeneralJournalBatches."Bal. Account No.".SETVALUE(LibraryERM.CreateGLAccountNo);
      GeneralJournalBatches.OK.INVOKE;
      GeneralJournalTemplates.OK.INVOKE;

      GenJournalBatch.SETRANGE("Journal Template Name",GeneralJournalTemplateName);
      GenJournalBatch.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchWithNoSeries@25(VAR GenJournalBatch@1001 : Record 232;LastNoUsed@1000 : Code[20]);
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      GenJournalBatch.VALIDATE("No. Series",CreateNoSeriesWithLastNoUsed(LastNoUsed));
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchTemplateForceDocBalance@51(VAR GenJournalBatch@1001 : Record 232;ForceDocBalance@1000 : Boolean);
    VAR
      GenJournalTemplate@1002 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Force Doc. Balance",ForceDocBalance);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1006 : Record 81;GenJournalBatch@1005 : Record 232;NoOfLines@1000 : Integer;Amount@1001 : Decimal);
    VAR
      GLAccount@1004 : Record 15;
      Counter@1002 : Integer;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      FOR Counter := 1 TO NoOfLines DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
          GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",Amount);
        GenJournalLine.VALIDATE("Bal. Account No.",'');
        GenJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineByPage@3(VAR GeneralJournal@1003 : TestPage 39);
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1006 : Record 81;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);

      // Find General Journal Template and Create General Journal Batch.
      CreateGeneralJournalBatch(GenJournalBatch);

      // Create General Journal Line.
      GeneralJournal.OPENEDIT;
      GeneralJournal."Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
      GeneralJournal."Account No.".SETVALUE(GLAccount."No.");
      UpdateAmountOnGenJournalLine(GenJournalBatch,GeneralJournal);
      GeneralJournal."Document No.".SETVALUE(GenJournalBatch.Name);

      // Find G/L Account No for Bal. Account No.
      GLAccount.SETFILTER("No.",'<>%1',GLAccount."No.");
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralJournal."Bal. Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
      GeneralJournal."Bal. Account No.".SETVALUE(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBalanceLine@41(GenJournalBatch@1000 : Record 232;VAR GenJournalLine@1003 : Record 81;DocumentNo@1001 : Code[20];BalDocumentNo@1002 : Code[20];PostingDate@1005 : Date);
    VAR
      Amount@1004 : Integer;
    BEGIN
      Amount := LibraryRandom.RandInt(100);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,1,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,1,-Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Document No.",BalDocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalLinesUsingNoSeriesByPage@31(LastNoUsed@1004 : Code[20];LineCount@1001 : Integer) : Code[10];
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1006 : Record 81;
      GLAccount@1002 : Record 15;
      GeneralJournal@1003 : TestPage 39;
      i@1000 : Integer;
    BEGIN
      // Create General Journal Template, General Journal Batch and G/L Account.
      CreateGeneralJournalBatchWithNoSeries(GenJournalBatch,LastNoUsed);
      LibraryERM.CreateGLAccount(GLAccount);

      // Open General Journal Page and create General Journal Lines.
      COMMIT; // As there is a RUNMODAL inside the following call: GeneralJournal.OPENEDIT.
      GeneralJournal.OPENEDIT;
      FOR i := 1 TO LineCount DO BEGIN
        GeneralJournal."Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
        GeneralJournal."Account No.".SETVALUE(GLAccount."No.");
        GeneralJournal.NEXT;
      END;
      UpdateAmountOnGenJournalLines(GenJournalBatch,GeneralJournal);
      GeneralJournal.Post.INVOKE;
      EXIT(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithPostingNoSeries@24(VAR GenJournalLine@1002 : Record 81;GenJournalBatch@1001 : Record 232;PostingNoSeries@1000 : Code[10];Amount@1005 : Decimal);
    VAR
      GLAccount@1004 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",Amount);
      GenJournalLine.VALIDATE("Posting No. Series",PostingNoSeries);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteGeneralJournalTemplate@57(Name@1000 : Code[10]);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.GET(Name);
      GenJournalTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindGeneralJournalLine@12(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE FindVATSetupWithZeroVATPct@139(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>''''');
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>''''');
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.SETRANGE("VAT %",0);  // Taking Zero VAT Percent to Create a VAT Entry Without Amount. Value important for Test.
      VATPostingSetup.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateNoSeriesWithLastNoUsed@22(LastNoUsed@1002 : Code[20]) : Code[10];
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,FALSE,FALSE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'','');
      NoSeriesLine.VALIDATE("Last No. Used",LastNoUsed);
      NoSeriesLine.MODIFY(TRUE);
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE FindStandardGeneralJournalLine@551(VAR StandardGeneralJournalLine@1000 : Record 751;JournalTemplateName@1001 : Code[10];StandardJournalCode@1002 : Code[10]);
    BEGIN
      StandardGeneralJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      StandardGeneralJournalLine.SETRANGE("Standard Journal Code",StandardJournalCode);
      StandardGeneralJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE GetGeneralJournalBatchName@36() : Code[10];
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GenJournalBatch.FIELDNO(Name),DATABASE::"Gen. Journal Batch"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Batch",GenJournalBatch.FIELDNO(Name))));
    END;

    LOCAL PROCEDURE GetGeneralJournalTemplateName@15() : Code[10];
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GenJournalTemplate.FIELDNO(Name),DATABASE::"Gen. Journal Template"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Template",GenJournalTemplate.FIELDNO(Name))));
    END;

    LOCAL PROCEDURE GetLastGLEntryNumber@21() : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.FINDLAST;
      EXIT(GLEntry."Entry No.");
    END;

    LOCAL PROCEDURE RunCreateCustomerJournalLines@32(VAR Customer@1005 : Record 18;JournalTemplate@1001 : Code[10];BatchName@1002 : Code[10];TemplateCode@1003 : Code[10]);
    VAR
      GenJournalLine@1004 : Record 81;
      CreateCustomerJournalLines@1000 : Report 8611;
    BEGIN
      COMMIT;  // COMMIT is required for Write Transaction Error.
      CLEAR(CreateCustomerJournalLines);
      CreateCustomerJournalLines.USEREQUESTPAGE(FALSE);
      CreateCustomerJournalLines.SETTABLEVIEW(Customer);
      CreateCustomerJournalLines.InitializeRequest(GenJournalLine."Document Type"::Invoice,WORKDATE,WORKDATE);
      CreateCustomerJournalLines.InitializeRequestTemplate(JournalTemplate,BatchName,TemplateCode);
      CreateCustomerJournalLines.RUN;
    END;

    LOCAL PROCEDURE SaveAsStandardJournal@127(GenJournalBatch@1000 : Record 232;Code@1004 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      SaveAsStandardGenJournal@1002 : Report 750;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      CLEAR(SaveAsStandardGenJournal);
      SaveAsStandardGenJournal.Initialise(GenJournalLine,GenJournalBatch);
      SaveAsStandardGenJournal.InitializeRequest(Code,'',TRUE);
      SaveAsStandardGenJournal.USEREQUESTPAGE(FALSE);
      SaveAsStandardGenJournal.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectAndClearGeneralJournalBatch@47(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdateBalanceGLAccount@46(GenJournalLine@1000 : Record 81;BalanceAccountNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BalanceAccountNo);
      CASE GenJournalLine."Account Type" OF
        GenJournalLine."Account Type"::Vendor:
          GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Purchase);
        GenJournalLine."Account Type"::Customer:
          GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Sale);
      END;
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGLAccount@106(VAR GLAccount@1000 : Record 15;GenPostingType@1002 : Option);
    VAR
      VATPostingSetup@1001 : Record 325;
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATSetupWithZeroVATPct(VATPostingSetup);
      GLAccount.VALIDATE("Gen. Posting Type",GenPostingType);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAmountOnGenJournalLine@99(GenJournalBatch@1000 : Record 232;VAR GeneralJournal@1001 : TestPage 39);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GeneralJournal.OK.INVOKE;  // Need to close the Page to ensure changes are reflected on Record Variable.
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
      GenJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(100,2));  // Update Random Amount.
      GenJournalLine.MODIFY(TRUE);
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateAmountOnGenJournalLines@45(GenJournalBatch@1000 : Record 232;VAR GeneralJournal@1001 : TestPage 39);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GeneralJournal.OK.INVOKE; // Need to close the Page to ensure changes are reflected on Record Variable.
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      WITH GenJournalLine DO BEGIN
        REPEAT
          VALIDATE(Amount,LibraryRandom.RandDec(100,2)); // Update Random Amount.
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE VerifyCustomerJournalLines@54(GenJournalBatch@1000 : Record 232;StandardJournalCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    VAR
      GenJournalLine@1004 : Record 81;
      StandardGeneralJournalLine@1003 : Record 751;
    BEGIN
      FindStandardGeneralJournalLine(StandardGeneralJournalLine,GenJournalBatch."Journal Template Name",StandardJournalCode);
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      REPEAT
        GenJournalLine.TESTFIELD("Document Type",GenJournalLine."Document Type"::Invoice);
        GenJournalLine.TESTFIELD("Account Type",GenJournalLine."Account Type"::Customer);
        GenJournalLine.TESTFIELD("Account No.",AccountNo);
        GenJournalLine.TESTFIELD(Amount,StandardGeneralJournalLine.Amount);
        GenJournalLine.NEXT;
      UNTIL StandardGeneralJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBalanceAccountOnGLEntry@16(DocumentNo@1001 : Code[20];BalAccountNo@1002 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Bal. Account No.",BalAccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@43(DocumentNo@1001 : Code[20];DocumentType@1003 : Option;CustomerNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.TESTFIELD("Sell-to Customer No.",CustomerNo);
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@66(DocumentNo@1001 : Code[20];DocumentType@1003 : Option;VendorNo@1002 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.TESTFIELD("Buy-from Vendor No.",VendorNo);
    END;

    LOCAL PROCEDURE VerifyVATEntries@62(DocumentNo@1000 : Code[20];BilltoPaytoNo@1002 : Code[20]);
    VAR
      VATEntry@1001 : Record 254;
    BEGIN
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDFIRST;
      VATEntry.TESTFIELD("Bill-to/Pay-to No.",BilltoPaytoNo);
    END;

    LOCAL PROCEDURE VerifyGLRegister@23(GenJournalBatchName@1001 : Code[10]);
    VAR
      GLRegister@1000 : Record 45;
    BEGIN
      GLRegister.FINDLAST;
      GLRegister.TESTFIELD("Journal Batch Name",GenJournalBatchName);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1(QuestionText@1000 : Text[1024];VAR Relpy@1001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@19(QuestionText@1000 : Text[1024];VAR Relpy@1001 : Boolean);
    BEGIN
      Relpy := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@44(VAR GeneralJournalTemplateHandler@1000 : TestPage 250);
    BEGIN
      // General Journal Template Name filter with GeneralJournalTemplateName Global Variable.
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE StandardGeneralJournalHandler@26(VAR StandardGeneralJournal@1000 : TestPage 751);
    BEGIN
      StandardGeneralJournal.StdGenJnlLines.Amount.SETVALUE(LibraryRandom.RandDec(100,2));
    END;

    BEGIN
    {
      // [FEATURE] [General Journal]
      Unsupported version tags:
      SE: Unable to Execute

      1.  Test to Verify Post General Journal Functionality.
      2.  Test error occurs on running Create Customer Journal Lines Report without General Journal Template.
      3.  Test error occurs on running Create Customer Journal Lines Report without General Batch Name.
      5.  Test General Journal Lines are created for Customer after running Create Customer Journal Lines Report.
      6.  Create General Journal line, Post with NO and Verify Entry No of G/L Entry has not increased.
      7.  Create General Journal line, Post with YES and Verify Entry No of G/L Entry has increased.
      8.  Verify General Journal Batch Name on General Journal Page with Number Series.
      9.  Verify Balance Account on General Journal Page with Number Series.
      10. Create and post General Journal Line having Customer with Balance Account number and verify Customer number and G/L Entry after posting.
      11. Create and post General Journal Line having Customer without Balance Account number and verify Customer number and G/L Entry after posting.
      12. Create and post General Journal Line having Vendor with Balance Account number and verify Vendor number and G/L Entry after posting.
      13. Create and post General Journal Line having Vendor without Balance Account number and verify Vendor number and G/L Entry after posting.
      14. Create and post multiple General Journal Lines including Customer withhout having Balance Account number and verify Vendor number and G/L Entry after posting.
      15. Create and post multiple General Journal Lines including Customer withhout having Balance Account number and verify Customer number and G/L Entry after posting.
      16. Check that error occurs when General Journal Lines are posted with and without Posting No. Series.
      17. Test that General Journal Lines created using No. Series (contain different number of digits) can be posted successfully.

      TFS_TS_ID = 111510

      TFS_TS_ID = 251061
      -------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      -------------------------------------------------------------------------------------------------------------
      GeneralJournalTemplateError,GeneralJournalBatchError                                                  129143
      CreateCustomerJournalLineBatch                                                                        129143

      TFS_TS_ID = 251022
      Covers Test Cases:
      -------------------------------------------------------------------------
      Test Function Name                                            TFS ID
      -------------------------------------------------------------------------
      GenJournalPostWithNo,GenJournalPostWithYes                    141274

      TFS_TS_ID = 257788
      Covers Test Cases:
      -------------------------------------------------------------------------
      Test Function Name                                            TFS ID
      -------------------------------------------------------------------------
      GeneralJournalWithBatchName,GeneralJournalWithBalAccount      139863

      Workitem No. 252905
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                            TFS ID
      -------------------------------------------------------------------------
      VendorWithBalance                                             126330
      VendorWithoutBalance                                          126330
      CustomerWithBalance                                           126330
      CustomerWithoutBalance                                        126330
      MultipleVendor                                                126330
      MultipleCustomer                                              126330

      Covers Test cases: 273840
      -------------------------------------------------------------------------
      Test Function Name                                            TFS ID
      -------------------------------------------------------------------------
      GeneralJournalLineWithPostingNoSeriesError                    272556

      Covers Test case for Bug ID: 89377
      -------------------------------------------------------------------------
      Test Function Name                                            TFS ID
      -------------------------------------------------------------------------
      PostGeneralJournalLinesUsingNoSeries
    }
    END.
  }
}

