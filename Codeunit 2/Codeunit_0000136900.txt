OBJECT Codeunit 136900 Service Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1008 : Codeunit 131300;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryResource@1003 : Codeunit 130511;
      LibraryService@1005 : Codeunit 131902;
      LibraryReportDataset@1004 : Codeunit 131007;
      LibraryUtility@1006 : Codeunit 131000;
      LibrarySales@1054 : Codeunit 130509;
      LibraryDimension@1016 : Codeunit 131001;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1034 : Codeunit 130440;
      LibrarySetupStorage@1009 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      ErrorWarning@1027 : TextConst 'ENU=Warning!';
      ErrorText@1026 : TextConst 'ENU=You must enter the customer''s %1.';
      PostUntilDateError@1024 : TextConst 'ENU=You must fill in the Post Until Date field.';
      PostingDateError@1023 : TextConst 'ENU=You must fill in the Posting Date field.';
      PriceUpdateError@1022 : TextConst 'ENU=You must fill in the Price Update % field.';
      RemoveToError@1021 : TextConst 'ENU=You must fill in the Remove to field.';
      ReasonCodeError@1020 : TextConst 'ENU=You must fill in the Reason Code field.';
      UnknownError@1017 : TextConst 'ENU=Unknown Error.';
      InvoiceToDateError@1015 : TextConst 'ENU=You must fill in the Invoice-to Date field.';
      ErrorPostingDate@1014 : TextConst 'ENU=You have not filled in the posting date.';
      ErrorInvoiceToDate@1013 : TextConst 'ENU=The Invoice-to Date is later than the work date.\\Confirm that this is the correct date.';
      ErrorInPostingDate@1012 : TextConst 'ENU=The posting date is later than the work date.\\Confirm that this is the correct date.';
      BatchJobError@1011 : TextConst 'ENU=The program has stopped the batch job at your request.';
      GrossAmountError@1007 : TextConst 'ENU=Amounts must be same';
      FindElemWithServiceNoMsg@1010 : TextConst 'ENU=find element with the service no';

    [Test]
    [HandlerFunctions(OrderConfirmationReportHandler)]
    PROCEDURE OrderConfirmationReport@3();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      OrderConfirmation@1003 : Report 205;
    BEGIN
      // Test that value of Amount in Order Confirmation matches the value of Amount in corresponding Sales Line.

      // 1. Setup: Create a Sales Order - Sales Header, Sales Line.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine);

      // 2. Exercise: Generate the Order Confirmation report.
      COMMIT;
      CLEAR(OrderConfirmation);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      OrderConfirmation.SETTABLEVIEW(SalesHeader);
      OrderConfirmation.RUN;

      // 3. Verify: Check that the value of Amount in Order Confirmation is equal to the value of Amount in corresponding Sales Line.
      // Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No2_SalesLine',SalesLine."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the sales no');
      LibraryReportDataset.AssertCurrentRowValue('LineAmt_SalesLine',SalesLine."Line Amount");

      Assert.IsFalse(LibraryReportDataset.GetNextRow,'there should be no more entries for this sales no');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceContractCustomerReportHandler)]
    PROCEDURE ServiceContractCustomer@1();
    VAR
      Customer@1002 : Record 18;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractHeader2@1001 : Record 5965;
      ServiceContractCustomer@1004 : Report 5977;
    BEGIN
      // Test that the Service Contract - Customer Report is generated properly.

      // 1. Setup: Create two Service Contracts - Service Item, Service Contract Header, Service Contract Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractWithExpiredLine(ServiceContractHeader,Customer."No.");
      CreateContractWithExpiredLine(ServiceContractHeader2,Customer."No.");

      // 2. Exercise: Generate the Service Contract - Customer report.
      COMMIT;
      CLEAR(ServiceContractCustomer);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.SETFILTER(
        "Contract No.",ServiceContractHeader."Contract No." + '|' + ServiceContractHeader2."Contract No.");
      ServiceContractCustomer.SETTABLEVIEW(ServiceContractHeader);
      ServiceContractCustomer.RUN;

      // 3. Verify: Check that the Amount Per Period, Amount on Expired Lines and Annual Amount are generated correctly in the report.
      // Check that the Total Amounts for Customer as the sum of Amounts of both Service Contract.
      LibraryReportDataset.LoadDataSetFile;
      VerifyServiceContractCustomer(ServiceContractHeader);
      VerifyServiceContractCustomer(ServiceContractHeader2);
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheetReportHandler)]
    PROCEDURE ServiceItemWorksheetReport@8();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceLine@1004 : Record 5902;
      ServiceHeader@1001 : Record 5900;
      ServiceItemWorksheet@1006 : Report 5936;
    BEGIN
      // Test that the Service Item Worksheet Report is generated properly.

      // 1. Setup: Create Service Order - Service Item, Service Header, Service Item Line and Service Line.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);
      ServiceItemLineFaultSymptom(ServiceItemLine);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Generate the Service Item Worksheet report.
      COMMIT;
      CLEAR(ServiceItemWorksheet);
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemWorksheet.SETTABLEVIEW(ServiceItemLine);
      ServiceItemWorksheet.RUN;

      // 3. Verify: Check that the Service Item Worksheet is generated properly.
      VerifyServiceItemWorksheet(ServiceItemLine,ServiceLine);
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheetReportHandler)]
    PROCEDURE ServiceItemWorksheetComments@16();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceLine@1004 : Record 5902;
      ServiceHeader@1001 : Record 5900;
      ServiceCommentLine1@1002 : Record 5906;
      ServiceCommentLine2@1007 : Record 5906;
      ServiceItemWorksheet@1006 : Report 5936;
    BEGIN
      // Test that the Service Item Worksheet Report is generated properly when Show Comments is TRUE.

      // 1. Setup: Create Service Order - Service Item, Service Header, Service Item Line and Service Line. Create
      // comments for Fault and Resolution.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);
      ServiceItemLineFaultSymptom(ServiceItemLine);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine1,ServiceItemLine,ServiceCommentLine1.Type::Fault);
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine2,ServiceItemLine,ServiceCommentLine2.Type::Resolution);

      // 2. Exercise: Generate the Service Item Worksheet report with Show Comments as TRUE.
      COMMIT;
      CLEAR(ServiceItemWorksheet);
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemWorksheet.SETTABLEVIEW(ServiceItemLine);
      ServiceItemWorksheet.InitializeRequest(TRUE);
      ServiceItemWorksheet.RUN;

      // 3. Verify: Check that the Service Item Worksheet is generated properly with Show Comments as TRUE.
      VerifyServiceItemWorksheet(ServiceItemLine,ServiceLine);

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Comment_ServCommentLine',ServiceCommentLine1.Comment);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the Fault');

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Comment1_ServCommentLine',ServiceCommentLine2.Comment);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the Resolution');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,MaintenanceVisitPlanningReportHandler)]
    PROCEDURE MaintenanceVisitPlanningReport@9();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1001 : Record 5965;
      MaintenanceVisitPlanning@1003 : Report 5980;
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      // Test that the Maintenance Visit - Planning report is generated properly.

      // 1. Setup: Create Service Contract - Service Item, Service Contract Header, Service Contract Line and sign it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractWithExpiredLine(ServiceContractHeader,Customer."No.");
      ResponsibilityCenterHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Maintenance Visit - Planning report.
      COMMIT;
      CLEAR(MaintenanceVisitPlanning);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      MaintenanceVisitPlanning.SETTABLEVIEW(ServiceContractHeader);
      MaintenanceVisitPlanning.RUN;

      // 3. Verify: Check that the Maintenance Visit - Planning is generated properly.
      VerifyMaintenanceVisitPlanning(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceItemsOutOfWarrantyReportHandler)]
    PROCEDURE ServiceItemsOutOfWarranty@10();
    VAR
      Customer@1002 : Record 18;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1004 : Record 5964;
      ServiceItem@1003 : Record 5940;
      ServiceItemsOutOfWarranty@1000 : Report 5937;
    BEGIN
      // Test that the Service Items Out of Warranty report is generated properly.

      // 1. Setup: Create Service Contract - Service Item, Service Contract Header, Service Contract Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      WarrantyEndingDatePartsItem(ServiceItem);
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // 2. Exercise: Generate the Service Items Out of Warranty report.
      COMMIT;
      CLEAR(ServiceItemsOutOfWarranty);
      ServiceItem.SETRANGE("No.",ServiceItem."No.");
      ServiceItemsOutOfWarranty.SETTABLEVIEW(ServiceItem);
      ServiceItemsOutOfWarranty.RUN;

      // 3. Verify: Check that the Service Items Out of Warranty report is generated properly.
      VerifyServiceItemsOutWarranty(ServiceItem);
    END;

    [Test]
    [HandlerFunctions(ServiceItemResourceUsageReportHandler)]
    PROCEDURE ServiceItemResourceUsage@13();
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1005 : Record 5902;
      ServiceItemResourceUsage@1000 : Report 5939;
    BEGIN
      // [FEATURE] [UI] [Report Service Item - Resource Usage]
      // [SCENARIO] Verify report "Service Item - Resource Usage" after ship & invoice service order.

      // [GIVEN] Service Order with resource usage on service item.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);
      CreateServiceLineWithResource(ServiceLine,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceItem.GET(ServiceItem."No.");

      // [WHEN] Run report "Service Item - Resource Usage".
      COMMIT;
      CLEAR(ServiceItemResourceUsage);
      ServiceItem.SETRANGE("No.",ServiceItem."No.");
      ServiceItemResourceUsage.SETTABLEVIEW(ServiceItem);
      ServiceItemResourceUsage.RUN;

      // [THEN] Report "Service Item - Resource Usage" results contain service item and it's correct usage amount and profit/profit percent values.
      VerifyServiceItemResourceUsage(ServiceItem);
    END;

    [Test]
    [HandlerFunctions(ServiceItemResourceUsageReportHandler)]
    PROCEDURE ServiceItemResourceUsageDetail@35();
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1005 : Record 5902;
      ServiceItemResourceUsage@1000 : Report 5939;
    BEGIN
      // [FEATURE] [UI] [Report Service Item - Resource Usage]
      // [SCENARIO] Verify report "Service Item - Resource Usage" with "Show Details" flag after ship & invoice service order.

      // [GIVEN] Service Order with resource usage on service item.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);
      CreateServiceLineWithResource(ServiceLine,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceItem.GET(ServiceItem."No.");

      // [WHEN] Run report "Service Item - Resource Usage" with "Show Details" = TRUE.
      COMMIT;
      CLEAR(ServiceItemResourceUsage);
      ServiceItem.SETRANGE("No.",ServiceItem."No.");
      ServiceItemResourceUsage.SETTABLEVIEW(ServiceItem);
      ServiceItemResourceUsage.InitializeRequest(TRUE);
      ServiceItemResourceUsage.RUN;

      // [THEN] Report "Service Item - Resource Usage" results contain service item and it's correct usage amount and profit/profit percent values.
      VerifyServiceItemResourceUsage(ServiceItem);
      // [THEN] Report "Service Item - Resource Usage" results contain service item and it's correct total amount value in details.
      VerifyServiceResourceDetail(ServiceItem);
    END;

    [Test]
    [HandlerFunctions(ServiceQuoteReportReportHandler)]
    PROCEDURE ServiceQuoteReport@49();
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // Test Values on Service Quote Report.

      // 1. Setup: Create Service Item, Service Header with Document Type Quote, Service Item Line with Service Item and
      // Service Line with Type Item.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Quote);
      CreateServiceLine(ServiceHeader,ServiceItemLine."Line No.");

      // 2. Exercise: Run Service Quote Report.
      RunServiceQuoteReport(ServiceHeader."No.");

      // 3. Verify: Verify Values on Service Quote Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ServItemNo_ServLineType',ServiceItemLine."Service Item No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');
      LibraryReportDataset.AssertCurrentRowValue('Description_ServLineType',ServiceItemLine.Description);

      VerifyServiceLineOnReport(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ServiceProfitRespCentersHandler)]
    PROCEDURE ServiceProfitRespCentersReport@78();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
      ServiceShipmentHeader@1003 : Record 5990;
    BEGIN
      // [FEATURE] [UI] [Report Service Profit Resp. Centers]
      // [SCENARIO] Verify values on report Service Profit Resp. Centers after shipping & invoicing service order twice.

      // [GIVEN] Partial Ship and invoice Service Order with Responcibility Center twice, as result completely shipped and invoiced.
      Initialize;
      CreateHeaderWithResponsibility(ServiceHeader);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceHeader,ServiceItemLine."Line No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [WHEN] Run report "Service Profit Resp. Centers".
      RunServiceProfitRespCenters(ServiceHeader."Responsibility Center");

      LibraryReportDataset.LoadDataSetFile;

      // [THEN] Report's results contain correct Sales, Cost and Discount Amounts.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDSET;
      VerifyServiceLedgerEntryAmount(ServiceShipmentHeader);

      ServiceShipmentHeader.NEXT;
      VerifyServiceLedgerEntryAmount(ServiceShipmentHeader);
    END;

    [Test]
    [HandlerFunctions(ServiceLoadLevelReportHandler)]
    PROCEDURE ServiceLoadLevelWithQuantity@50();
    VAR
      Selection@1001 : 'Quantity,Cost,Prices';
    BEGIN
      // Verifiy Capacity of a Resource on the selection of Quantity.

      ServiceLoadLevelReport(Selection::Quantity);
    END;

    [Test]
    [HandlerFunctions(ServiceLoadLevelReportHandler)]
    PROCEDURE ServiceLoadLevelWithCost@47();
    VAR
      Selection@1001 : 'Quantity,Cost,Prices';
    BEGIN
      // Verifiy Capacity of a Resource on the selection of Cost.

      ServiceLoadLevelReport(Selection::Cost);
    END;

    [Test]
    [HandlerFunctions(ServiceLoadLevelReportHandler)]
    PROCEDURE ServiceLoadLevelWithPrice@43();
    VAR
      Selection@1001 : 'Quantity,Cost,Prices';
    BEGIN
      // Verifiy Capacity of a Resource on the selection of Price.

      ServiceLoadLevelReport(Selection::Prices);
    END;

    LOCAL PROCEDURE ServiceLoadLevelReport@42(Selection@1002 : Option);
    VAR
      Resource@1001 : Record 156;
      ServiceLoadLevel@1003 : Report 5956;
    BEGIN
      // Test that value of Capacity in Service Load Level matches the value of Capacity in corresponding Resource.

      // 1. Setup.
      Initialize;
      LibraryResource.CreateResourceNew(Resource);

      // 2. Exercise: Generate Service Load Level Report with different options.
      COMMIT;
      CLEAR(ServiceLoadLevel);
      Resource.SETRANGE("No.",Resource."No.");
      ServiceLoadLevel.SETTABLEVIEW(Resource);
      ServiceLoadLevel.InitializeRequest(Selection);
      ServiceLoadLevel.RUN;

      // 3. Verify: Check that the value of Capicity in Service Load Level is equal to the value of Capacity in corresponding Resource.
      // Check that only one row is generated on different Selections.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Resource',Resource."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resourve no');
      Assert.IsFalse(LibraryReportDataset.GetNextRow,'no more lines should exist');
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE ServiceDocumentTestAmount@40();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Test that value of Amount in Service Document - Test matches the value of Amount in corresponding Service Line.

      // 1. Setup: Create a Service Invoice - Service Header, Service Line.
      Initialize;
      ServiceDocumentTestReport(ServiceLine);

      // 3. Verify: Check that the value of Amount in Service Document - Test is equal to the value of Amount in
      // corresponding Service Line, Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Line___No__',ServiceLine."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,FindElemWithServiceNoMsg);

      LibraryReportDataset.AssertCurrentRowValue('Service_Line___Line_Amount_',ServiceLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE ServiceDocumentTestError@37();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Test that value of Error Message in Service Document - Test matches.

      // 1. Setup: Create a Service Invoice.
      Initialize;
      ServiceDocumentTestReport(ServiceLine);

      // 3. Verify: Check that the value of Amount in Service Document - Test is equal to the value of Amount in
      // corresponding Service Line, Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ErrorText_Number__Control97',
        STRSUBSTNO(ErrorText,ServiceHeader.FIELDCAPTION("VAT Registration No.")));
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with error');
    END;

    LOCAL PROCEDURE ServiceDocumentTestReport@36(VAR ServiceLine@1000 : Record 5902);
    VAR
      VATPostingSetup@1004 : Record 325;
      ServiceHeader@1002 : Record 5900;
      ServiceDocumentTest@1001 : Report 5915;
    BEGIN
      // Test that value of Amount in Service Document - Test matches the value of Amount in corresponding Service Line.

      // 1. Setup: Create a Service Invoice - Service Header, Service Line with VAT Posting Setup having VAT Calculation Type as Reverse Charge VAT.
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Invoice,CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"));
      UpdateQuantityServiceLine(ServiceLine);

      // 2. Exercise: Generate the Service Document - Test report.
      COMMIT;
      CLEAR(ServiceDocumentTest);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      ServiceDocumentTest.SETTABLEVIEW(ServiceHeader);
      ServiceDocumentTest.InitializeRequest(TRUE,TRUE,TRUE);
      ServiceDocumentTest.RUN;
    END;

    [Test]
    [HandlerFunctions(ServiceItemsReportHandler)]
    PROCEDURE ServiceItemsReport@34();
    VAR
      ServiceItem@1001 : Record 5940;
      Customer@1002 : Record 18;
      ServiceItems@1003 : Report 5935;
    BEGIN
      // Test that value of Item No in Service Items matches the value of Item No in corresponding Service Item.

      // 1. Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");

      // 2. Exercise: Generate the Service Items report.
      COMMIT;
      CLEAR(ServiceItems);
      ServiceItem.SETRANGE("No.",ServiceItem."No.");
      ServiceItems.SETTABLEVIEW(ServiceItem);
      ServiceItems.RUN;

      // 3. Verify: Check that the value of Item No in Service Items is equal to the value of Item No in
      // corresponding Service Item, Check that only one row is generated for the Item.

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ServItem',ServiceItem."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service Item no');

      LibraryReportDataset.AssertCurrentRowValue('Description_ServItem',ServiceItem.Description);
    END;

    [Test]
    [HandlerFunctions(DispatchBoardReportHandler)]
    PROCEDURE DispatchBoardReport@33();
    VAR
      Customer@1005 : Record 18;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      DispatchBoard@1003 : Report 5955;
    BEGIN
      // Test that value of No. in Dispatch Board matches the value of No. Field in corresponding Service Header.

      // 1. Setup: Create a Service Order.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,Customer."No.");
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,'');

      // 2. Exercise: Generate the Dispatch Board report.
      COMMIT;
      CLEAR(DispatchBoard);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      DispatchBoard.SETTABLEVIEW(ServiceHeader);
      DispatchBoard.RUN;

      // 3. Verify: Check that the value of No. in Dispatch Board is equal to the value of No. in corresponding Service Header.
      // Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ServHeader',ServiceHeader."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service header no');

      LibraryReportDataset.AssertCurrentRowValue('OrderDate_ServHeader',FORMAT(ServiceHeader."Order Date"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ServiceContractReportHandler)]
    PROCEDURE ServiceContract@32();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceContract@1003 : Report 5970;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Test that value of Line Value in Service Contract matches the value of Line Value Field in corresponding Service Contract Line.

      // 1. Setup: Create Service Contract and Modify Service Contract header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Service Contract report.
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      CLEAR(ServiceContract);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.SETTABLEVIEW(ServiceContractHeader);
      ServiceContract.InitializeRequest(TRUE);
      ServiceContract.RUN;

      // 3. Verify: Check that the value of Line Value in Service Contract is equal to the value of Line Value in
      // corresponding Service Contract Line, Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ServItemNo_ServContractLine',ServiceContractLine."Service Item No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service item no');

      LibraryReportDataset.AssertCurrentRowValue('LineValue_ServContractLine',ServiceContractLine."Line Value");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractServiceOrdersTestReportHandler)]
    PROCEDURE ContractServiceOrdersTest@31();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ContrServOrdersTest@1003 : Report 5988;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Test that value of Contract No. in Contr. Serv. Orders - Test matches the value of Contract No. in corresponding
      // Service Contract Line.

      // 1. Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Service Contract report.
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      CLEAR(ContrServOrdersTest);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContrServOrdersTest.SETTABLEVIEW(ServiceContractHeader);
      ContrServOrdersTest.InitVariables(WORKDATE,WORKDATE);
      ContrServOrdersTest.RUN;

      // 3. Verify: Check that the value of Contract No. in Contr. Serv. Orders - Test is equal to the value of Contract No. in
      // corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Line__Contract_No__',ServiceContractLine."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractGainLossEntriesReportHandler)]
    PROCEDURE ContractGainLossEntries@30();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
      ContractGainLossEntry@1001 : Record 5969;
      ContractGainLossEntries@1003 : Report 5983;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Test that value of Contract Gain in Contract Gain/Loss Entries matches the value of Line Amount in corresponding
      // Service Contract Line.

      // 1. Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Generate the Service Items report.
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      CLEAR(ContractGainLossEntries);
      ContractGainLossEntry.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractGainLossEntry.FINDFIRST;
      ContractGainLossEntries.SETTABLEVIEW(ContractGainLossEntry);
      ContractGainLossEntries.RUN;

      // 3. Verify: Test that value of Contract Gain in Contract Gain/Loss Entries matches the value of Line Amount in
      // corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContNo_ContGainLossEntry',ContractGainLossEntry."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,MaintenancePerformanceReportHandler)]
    PROCEDURE MaintenancePerformanceReport@21();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      MaintenancePerformance@1003 : Report 5982;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Test that value of Annual Amount in Maintenance Performance matches the value of Annual Amount in corresponding
      // Service Contract Line.

      // 1. Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Service Contract report.
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      CLEAR(MaintenancePerformance);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      MaintenancePerformance.SETTABLEVIEW(ServiceContractHeader);
      MaintenancePerformance.InitializeRequest(WORKDATE);
      MaintenancePerformance.RUN;

      // 3. Verify: Test that value of Annual Amount in Maintenance Performance matches the value of Annual Amount in corresponding
      // corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('AnnualAmount',ROUND(ServiceContractHeader."Annual Amount",1.0));
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with annual amount');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,ServiceContractDetailReportHandler)]
    PROCEDURE ServiceContractDetailReport@68();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      Customer@1006 : Record 18;
      ServiceContractDetail@1001 : Report 5971;
    BEGIN
      // Test that value of Line Value in Service Contract Detail matches the value of Line Value
      // Field in corresponding Service Contract Line.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);

      // 2. Exercise: Generate Service Contract Detail Report.
      COMMIT;
      CLEAR(ServiceContractDetail);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceContractDetail.SETTABLEVIEW(ServiceContractHeader);
      ServiceContractDetail.RUN;

      // 3. Verify: Check that the value of Line Value in Service Contract Detail is equal to the value of Line Value in
      // corresponding Service Contract Line, Check that only one row is generated for the Item.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ServeItmNo_ServeContrLine',ServiceContractLine."Service Item No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service item no');

      LibraryReportDataset.AssertCurrentRowValue('LineValue_ServeContrLine',ServiceContractLine."Line Value");
    END;

    [Test]
    [HandlerFunctions(ServiceInvoiceHandler)]
    PROCEDURE ServiceInvoiceReport@67();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceInvoiceHeader@1005 : Record 5992;
      ServiceInvoiceLine@1006 : Record 5993;
      VATPostingSetup@1007 : Record 325;
      ServiceInvoice@1003 : Report 5911;
    BEGIN
      // [FEATURE] [UI] [Report Service - Invoice]
      // [SCENARIO] Check that value of Amount in Service Invoice report matches the value of Line Amount in corresponding Service Line.

      // Test that value of Amount in Service Invoice matches the value of Line Amount in corresponding Service Line.

      // [GIVEN] Service Invoice shipped and invoiced.
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Invoice,CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"));
      UpdateQuantityServiceLine(ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [WHEN] Run report "Service - Invoice".
      CLEAR(ServiceInvoice);
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoice.SETTABLEVIEW(ServiceInvoiceHeader);
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDFIRST;
      ServiceInvoice.RUN;

      // [THEN] The value of Amount in Service Invoice is equal to the value of Line Amount in corresponding Service Invoice Line.
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.SetRange('No_ServiceInvHeader',ServiceInvoiceLine."No.");
      LibraryReportDataset.GetNextRow;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ExpiredContractLineslReportHandler)]
    PROCEDURE ExpiredContractLines@64();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      Customer@1007 : Record 18;
      ExpiredContractLinesTest@1003 : Report 5987;
      SignServContractDoc@1005 : Codeunit 5944;
      LockOpenServContract@1006 : Codeunit 5943;
    BEGIN
      // Test that value of Contract Expiration Date in Expired Contract Lines Test matches the value of Contract Expiration Date Field in
      // corresponding Service Contract Line.

      // Setup: Create Service Contract, Modify Service Contract header, Sign Service Contract and Modify Expiration Date.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      UpdateExpirationDateOnHeader(ServiceContractHeader);

      // 2. Exercise: Generate Expired Contract Lines Test report.
      CLEAR(ExpiredContractLinesTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
      ExpiredContractLinesTest.SETTABLEVIEW(ServiceContractLine);
      ExpiredContractLinesTest.InitVariables(WORKDATE,CreateReasonCode);
      COMMIT;
      ExpiredContractLinesTest.RUN;

      // 3. Verify: Check that value of Contract Expiration Date in Expired Contract Lines Test matches the value of
      // Contract Expiration Date Field in corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Line__Contract_No__',ServiceContractLine."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');

      LibraryReportDataset.AssertCurrentRowValue('Service_Contract_Line__Contract_Expiration_Date_',
        FORMAT(ServiceContractLine."Contract Expiration Date"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ExpiredContractLineslReportHandler)]
    PROCEDURE ExpiredContractLinesRemoveTo@63();
    BEGIN
      // Test that System generates an error when Remove To is not filled.
      ExpiredContractLinesError(0D,CreateReasonCode,RemoveToError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ExpiredContractLineslReportHandler)]
    PROCEDURE ExpiredContractLinesReasonCode@62();
    BEGIN
      // Test that System generates an error when Reason Code is not filled.
      ExpiredContractLinesError(WORKDATE,'',ReasonCodeError);
    END;

    LOCAL PROCEDURE ExpiredContractLinesError@61(RemoveTo@1008 : Date;ReasonCode@1009 : Code[10];Error@1010 : Text[50]);
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      Customer@1007 : Record 18;
      ExpiredContractLinesTest@1003 : Report 5987;
      SignServContractDoc@1005 : Codeunit 5944;
      LockOpenServContract@1004 : Codeunit 5943;
    BEGIN
      // Test that System generates an error when Reason Code is not filled.

      // Setup: Create Service Contract, Modify Service Contract header, Sign Service Contract and Modify Expiration Date and
      // Modify Service Management Setup.
      Initialize;
      UpdateReasonOnServiceSetup;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      UpdateExpirationDateOnHeader(ServiceContractHeader);

      // 2. Exercise: Generate Expired Contract Lines Test report.
      COMMIT;
      CLEAR(ExpiredContractLinesTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ExpiredContractLinesTest.SETTABLEVIEW(ServiceContractLine);
      ExpiredContractLinesTest.InitVariables(RemoveTo,ReasonCode);
      ASSERTERROR ExpiredContractLinesTest.RUN;

      // 3. Verify: Check that System generates an error when Reason Code is not filled.
      Assert.AreEqual(STRSUBSTNO(Error),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ContractTemplateListHandler,ServiceProfitContractsHandler)]
    PROCEDURE ServiceProfitContracts@66();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceLedgerEntry@1006 : Record 5907;
      Customer@1013 : Record 18;
      ServiceProfitContracts@1000 : Report 5976;
      SignServContractDoc@1001 : Codeunit 5944;
      ServContractManagement@1008 : Codeunit 5940;
      LockOpenServContract@1009 : Codeunit 5943;
    BEGIN
      // Test that value of Service Amount LCY in Service Profit Contracts matches the value of
      // Amount LCY Field in corresponding Service Ledger Entry.

      // 1. Setup: Create and Sign Service Contract Post Service Invoice and Create Service Credit Memo.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;

      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      REPORT.RUNMODAL(REPORT::"Batch Post Service Invoices",FALSE,TRUE,ServiceHeader);
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      UpdateExpirationDateOnHeader(ServiceContractHeader);

      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
      ServContractManagement.CreateContractLineCreditMemo(ServiceContractLine,TRUE);

      // 2. Exercise: Generate Service Profit Contracts Report.
      CLEAR(ServiceProfitContracts);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceProfitContracts.SETTABLEVIEW(ServiceContractHeader);
      ServiceProfitContracts.InitializeRequest(TRUE);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      ServiceLedgerEntry.FINDFIRST;

      COMMIT;
      ServiceProfitContracts.RUN;

      // 3. Verify: Check that value of Service Amount LCY in Service Profit Contracts matches the value of
      // Amount LCY Field in corresponding Service Ledger Entry.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ServLedgEntry',ServiceLedgerEntry."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('AmountLCY_ServLedgEntry',-ServiceLedgerEntry."Amount (LCY)");
      LibraryReportDataset.AssertCurrentRowValue(
        'ProfitAmount_ServLedgEntry',
        ServiceLedgerEntry."Cost Amount" - ServiceLedgerEntry."Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ContractTemplateListHandler,ContractPriceUpdateTestReportHandler)]
    PROCEDURE ContractPriceUpdateTest@60();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      Customer@1007 : Record 18;
      ContractPriceUpdateTest@1000 : Report 5985;
      SignServContractDoc@1001 : Codeunit 5944;
      UpdatePercent@1004 : Decimal;
    BEGIN
      // Test that value of Customer No in Contract Price Update Test matches the value of
      // Customer No Field in corresponding Service Contract Header.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate Contract Price Update Test Report.
      COMMIT;
      CLEAR(ContractPriceUpdateTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ContractPriceUpdateTest.SETTABLEVIEW(ServiceContractHeader);
      UpdatePercent := LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction;
      ContractPriceUpdateTest.InitVariables(
        UpdatePercent,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2)) + 'M>',ServiceContractHeader."Starting Date"));
      ContractPriceUpdateTest.RUN;

      // 3. Verify: Check that value of Customer No in Contract Price Update Test matches the value of
      // Customer No Field in corresponding Service Contract Header.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Header__Contract_No__',ServiceContractHeader."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');

      LibraryReportDataset.AssertCurrentRowValue('Service_Contract_Header__Customer_No__',ServiceContractHeader."Customer No.");
      LibraryReportDataset.AssertCurrentRowValue('PriceUpdPct_Control23',UpdatePercent);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ContractTemplateListHandler,ContractPriceUpdateTestReportHandler)]
    PROCEDURE ContractPriceUpdateError@59();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      Customer@1005 : Record 18;
      ContractPriceUpdateTest@1000 : Report 5985;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when Price Update is not filled.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate Contract Price Update Test Report.
      COMMIT;
      CLEAR(ContractPriceUpdateTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ContractPriceUpdateTest.SETTABLEVIEW(ServiceContractHeader);
      ContractPriceUpdateTest.InitVariables(
        0,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2)) + 'M>',ServiceContractHeader."Starting Date"));
      ASSERTERROR ContractPriceUpdateTest.RUN;

      // 3. Verify: Check that System generates an error when Price Update is not filled.
      Assert.AreEqual(STRSUBSTNO(PriceUpdateError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,PrepaidContractEntriesTestReportHandler)]
    PROCEDURE PrepaidContractEntriesTest@58();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceLedgerEntry@1006 : Record 5907;
      Customer@1008 : Record 18;
      PrepaidContrEntriesTest@1000 : Report 5986;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // [FEATURE] [UI] [Report Prepaid Contr. Entries - Test]
      // [SCENARIO] Value of Amount LCY in "Prepaid Contrract Entries - Test" matches the value of Amount LCY Field in corresponding Service Ledger Entry.

      // Test that value of Amount LCY in Prepaid Contrract Entries Test matches the value of
      // Amount LCY Field in corresponding Service Ledger Entry.

      // [GIVEN] Signed Service Contract with Posted Service Invoice and not posted Service Credit Memo.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      ModifyHeaderForPrepaid(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      CreateAndPostServiceInvoice(ServiceContractHeader);

      // [WHEN] Run report "Prepaid Contr. Entries - Test".
      COMMIT;
      CLEAR(PrepaidContrEntriesTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      ServiceLedgerEntry.FINDFIRST;
      PrepaidContrEntriesTest.SETTABLEVIEW(ServiceLedgerEntry);
      PrepaidContrEntriesTest.InitVariables(WORKDATE,WORKDATE);
      PrepaidContrEntriesTest.RUN;

      // [THEN] The value of Amount LCY in report results matches the value of Amount LCY Field in corresponding Service Ledger Entry.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Ledger_Entry__Service_Contract_No__',ServiceLedgerEntry."Service Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');

      LibraryReportDataset.AssertCurrentRowValue('Service_Ledger_Entry__Amount__LCY__',ServiceLedgerEntry."Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,PrepaidContractEntriesTestReportHandler)]
    PROCEDURE PrepaidContractPostUntilDate@57();
    BEGIN
      // [FEATURE] [UI] [Report Prepaid Contr. Entries - Test]
      // [SCENARIO] Check that an error is throwed on running "Prepaid Contr. Entries - Test" if "Post Until Date" is not filled.

      // [GIVEN] Post Until Date is not filled.
      // [WHEN] Run report "Prepaid Contr. Entries - Test".
      // [THEN] System generates an error.
      PrepaidContractErrorTest(0D,WORKDATE,PostUntilDateError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,PrepaidContractEntriesTestReportHandler)]
    PROCEDURE PrepaidContractPostingDate@55();
    BEGIN
      // [FEATURE] [UI] [Report Prepaid Contr. Entries - Test]
      // [SCENARIO] Check that an error is throwed on running "Prepaid Contr. Entries - Test" if "Posting Date" is not filled.

      // [GIVEN] Posting Date is not filled.
      // [WHEN] Run report "Prepaid Contr. Entries - Test".
      // [THEN] System generates an error.
      PrepaidContractErrorTest(WORKDATE,0D,PostingDateError);
    END;

    LOCAL PROCEDURE PrepaidContractErrorTest@53(PostUntilDate@1005 : Date;PostingDate@1007 : Date;Error@1008 : Text[50]);
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceLedgerEntry@1006 : Record 5907;
      Customer@1014 : Record 18;
      PrepaidContrEntriesTest@1000 : Report 5986;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when Posting Date is not filled.

      // 1. Setup: Create and Sign Service Contract Post Service Invoice and Create Service Credit Memo.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      ModifyHeaderForPrepaid(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      CreateAndPostServiceInvoice(ServiceContractHeader);

      // 2. Exercise: Generate Prepaid Contr Entries Test Report.
      CLEAR(PrepaidContrEntriesTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      PrepaidContrEntriesTest.SETTABLEVIEW(ServiceLedgerEntry);
      PrepaidContrEntriesTest.InitVariables(PostUntilDate,PostingDate);
      ASSERTERROR PrepaidContrEntriesTest.RUN;

      // 3. Verify: Check that System generates an error when Posting Date is not filled.
      Assert.AreEqual(STRSUBSTNO(Error),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,PrepaidContractEntriesTestReportHandler)]
    PROCEDURE PrepaidContrEntriesTestWarning@51();
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      Customer@1009 : Record 18;
      PrepaidContrEntriesTest@1008 : Report 5986;
      SignServContractDoc@1004 : Codeunit 5944;
      LockOpenServContract@1003 : Codeunit 5943;
    BEGIN
      // [FEATURE] [UI] [Report Prepaid Contr. Entries - Test]
      // [SCENARIO] Verify that report "Prepaid Contr. Entries - Test" has warning because of unposted credit memo.

      // [GIVEN] Signed Service Contract, with posted Service Invoice and not posted Credit Memo.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      UpdateContractExpirationDate(ServiceContractLine,ServiceContractHeader."Starting Date");
      AmountsInServiceContractHeader(ServiceContractHeader);
      ModifyHeaderForPrepaid(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateAndPostServiceInvoice(ServiceContractHeader);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      CreateCreditMemoFromContract(ServiceContractHeader);

      // 2. [WHEN] Run report "Prepaid Contr. Entries - Test".
      COMMIT;
      CLEAR(PrepaidContrEntriesTest);
      FilterServiceContractHeader(ServiceContractHeader);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      PrepaidContrEntriesTest.SETTABLEVIEW(ServiceLedgerEntry);
      PrepaidContrEntriesTest.InitVariables(WORKDATE,WORKDATE);
      PrepaidContrEntriesTest.RUN;

      // 3. [THEN] Prepaid Contract Entries Test results contain warning.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Warning_Caption',ErrorWarning);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with error');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceContractQuoteReportHandler)]
    PROCEDURE ServiceContractQuoteReport@90();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // Test values on Service Contract Quote Report with Show Comments False.

      // 1. Setup: Create Service Item, Service Contract Header of Contract Type Quote and Service Contract Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);

      // 2. Exercise: Run Service Contract Quote Report with Show Comments False.
      RunServiceContractQuote(ServiceContractLine."Contract No.",FALSE);

      // 3. Verify: Verify values on Service Contract Quote Report.
      VerifyServiceContractLine(ServiceContractLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceContractQuoteReportHandler)]
    PROCEDURE ServiceContractQuoteComment@89();
    VAR
      Customer@1002 : Record 18;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceCommentLine@1006 : Record 5906;
    BEGIN
      // Test values on Service Contract Quote Report with Show Comments True.

      // 1. Setup: Create Service Item, Service Contract Header of Contract Type Quote, Service Contract Line, Create Comment for the
      // Service Contract Quote.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      CreateServiceQuoteComment(ServiceCommentLine,ServiceContractLine);

      // 2. Exercise: Run Service Contract Quote Report with Show Comments True.
      RunServiceContractQuote(ServiceContractLine."Contract No.",TRUE);

      // 3. Verify: Verify values on Service Contract Quote Report.
      VerifyServiceContractLine(ServiceContractLine);
      VerifyCommentOnReport(ServiceCommentLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceContractQuoteDetailReportHandler)]
    PROCEDURE ServiceContractQuoteDetail@98();
    VAR
      Customer@1002 : Record 18;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // Test values on Service Contract Quote Detail Report with Show Comments False.

      // 1. Setup: Create Service Item, Service Contract Header of Contract Type Quote and Service Contract Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);

      // 2. Exercise: Run Service Contract Quote Detail Report with Show Comments False.
      RunServiceContractQuoteDetail(ServiceContractLine."Contract No.",FALSE);

      // 3. Verify: Verify values on Service Contract Quote Detail Report.
      VerifyServiceContractLine(ServiceContractLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,ServiceContractQuoteDetailReportHandler)]
    PROCEDURE ContractQuoteDetailComment@97();
    VAR
      Customer@1002 : Record 18;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceCommentLine@1006 : Record 5906;
    BEGIN
      // Test values on Service Contract Quote Detail Report with Show Comments True.

      // 1. Setup: Create Service Item, Service Contract Header of Contract Type Quote, Service Contract Line, Create Comment for the
      // Service Contract Quote.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      CreateServiceQuoteComment(ServiceCommentLine,ServiceContractLine);

      // 2. Exercise: Run Service Contract Quote Detail Report with Show Comments True.
      RunServiceContractQuoteDetail(ServiceContractLine."Contract No.",TRUE);

      // 3. Verify: Verify values on Service Contract Quote Detail Report.
      VerifyServiceContractLine(ServiceContractLine);
      VerifyCommentOnReport(ServiceCommentLine);
    END;

    [Test]
    [HandlerFunctions(ServiceTasksReportHandler)]
    PROCEDURE ServiceTasksReport@120();
    VAR
      ServiceItemLine@1004 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      ServiceTasks@1000 : Report 5904;
    BEGIN
      // Test that the Service Tasks Report is generated properly.

      // 1. Setup: Create Service Order - Service Item, Service Header, Service Item Line and Service Line.
      Initialize;
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);

      // 2. Exercise: Generate the Service Tasks report.
      COMMIT;
      CLEAR(ServiceTasks);
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceTasks.SETTABLEVIEW(ServiceItemLine);
      ServiceTasks.RUN;

      // 3. Verify: Check that the Service Task is generated properly.
      VerifyServiceTasks(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ServiceContractSalespersonReportHandler)]
    PROCEDURE ServiceContractSalesperson@135();
    VAR
      Customer@1005 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      SalespersonPurchaser@1000 : Record 13;
      ServContractSalesperson@1002 : Report 5978;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that value of SalesPerson Code,Annual Amount and Contract No. in Serv. Contract - Salesperson matches the
      // Value of SalesPerson Code,Line Value and Contract No. Field in corresponding Service Contract Header and Service Contract Line.

      // 1. Setup: Create Service Contract and Modify Service Contract header and Calculate Amount in Service Contract Header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      Customer.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Customer.MODIFY(TRUE);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Serv. Contract - Salesperson.
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      CLEAR(ServContractSalesperson);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServContractSalesperson.SETTABLEVIEW(ServiceContractHeader);
      ServContractSalesperson.RUN;

      // 3. Verify: Check that value of SalesPerson Code,Annual Amount and Contract No. in Serv. Contract - Salesperson matches the
      // Value of SalesPerson Code,Line Value and Contract No. Field in corresponding Service Contract Header and Service Contract Line.
      VerifyServiceContractSalesper(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractGainLossResponsibilityReportHandler)]
    PROCEDURE ContractGainLossResponsibility@139();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractHeader2@1000 : Record 5965;
      ContractGainLossEntry@1001 : Record 5969;
      ContrGainLossRespCtr@1003 : Report 5981;
    BEGIN
      // Test that value of Grand Total Amount in Contr. Gain/Loss - Resp. Ctr. matches the value of Amount in corresponding
      // Contract Gain/Loss Entry.

      // 1. Setup: Create Multiple Contract Gain Loss Entries.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateContractGainLossEntries(ServiceContractHeader,Customer."No.");
      CreateContractGainLossEntries(ServiceContractHeader2,Customer."No.");

      // 2. Exercise: Generate the Contr. Gain/Loss - Resp. Ctr.
      COMMIT;
      CLEAR(ContrGainLossRespCtr);
      ContractGainLossEntry.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractGainLossEntry.SETFILTER(
        "Contract No.",ServiceContractHeader."Contract No." + '|' + ServiceContractHeader2."Contract No.");
      ContrGainLossRespCtr.SETTABLEVIEW(ContractGainLossEntry);
      ContrGainLossRespCtr.InitializeRequest(TRUE);
      ContrGainLossRespCtr.RUN;

      // 3. Verify: Verify that value of Grand Total Amount in Contr. Gain/Loss - Resp. Ctr. matches the value of Amount in
      // Corresponding Contract Gain/Loss Entry.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContNo_ContGnLossEty',ServiceContractHeader."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('Amt_ContGnLossEty',ServiceContractHeader."Annual Amount");

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('ContNo_ContGnLossEty',ServiceContractHeader2."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('Amt_ContGnLossEty',ServiceContractHeader2."Annual Amount");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractInvoicingReportHandler)]
    PROCEDURE ContractInvoicing@71();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ContractInvoicing@1003 : Report 5984;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that values of Contract No.,Amount Per Period in Contract Invoicing matches the value of Contract No.,Amount Per Period
      // in corresponding Service Contract Header.

      // 1. Setup: Create Contract Gain Loss Entries and Calculate Amount Per Period.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Contract Invoicing.
      COMMIT;
      CLEAR(ContractInvoicing);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractInvoicing.SETTABLEVIEW(ServiceContractHeader);
      ContractInvoicing.InitVariables(WORKDATE,ServiceContractHeader."Next Invoice Period End");
      ContractInvoicing.RUN;

      // 3. Verify: Verify that values of Contract No.,Amount Per Period in Contract Invoicing matches the value of
      // Contract No.,Amount Per Period in corresponding Service Contract Header.
      VerifyContractInvoicing(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractInvoicingReportHandler)]
    PROCEDURE ContractInvoicingInvoiceToDate@7();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ContractInvoicing@1003 : Report 5984;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when Invoice-to Date is not filled.

      // 1. Setup: Create Contract Gain Loss Entries and Calculate Amount Per Period.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Contract Invoicing.
      COMMIT;
      CLEAR(ContractInvoicing);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractInvoicing.SETTABLEVIEW(ServiceContractHeader);
      ContractInvoicing.InitVariables(WORKDATE,0D);
      ASSERTERROR ContractInvoicing.RUN;

      // 3. Verify: Verify the Invoice to Date Error message.
      Assert.AreEqual(STRSUBSTNO(InvoiceToDateError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractInvoicingReportHandler)]
    PROCEDURE ContractInvoicingPostingDate@91();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ContractInvoicing@1003 : Report 5984;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when Posting Date is not filled.

      // 1. Setup: Create Contract Gain Loss Entries and Calculate Amount Per Period.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Contract Invoicing.
      COMMIT;
      CLEAR(ContractInvoicing);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractInvoicing.SETTABLEVIEW(ServiceContractHeader);
      ContractInvoicing.InitVariables(0D,WORKDATE);
      ASSERTERROR ContractInvoicing.RUN;

      // 3. Verify: Verify the Posting Date Error message.
      Assert.AreEqual(STRSUBSTNO(ErrorPostingDate),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(InvoiceDateConfirmHandler,ContractTemplateListHandler,MessageHandler,ContractInvoicingReportHandler)]
    PROCEDURE InvoiceToDateLaterThanWorkDate@80();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ContractInvoicing@1003 : Report 5984;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when The Invoice-to Date is later than the work date.
      // Confirm that this is the correct date.

      // 1. Setup: Create Contract Gain Loss Entries and Calculate Amount Per Period.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Contract Invoicing.
      COMMIT;
      CLEAR(ContractInvoicing);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractInvoicing.SETTABLEVIEW(ServiceContractHeader);

      // System generates an error when The Invoice-to Date is later than the work date.
      ContractInvoicing.InitVariables(WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(5,10)) + 'M>',WORKDATE));
      ASSERTERROR ContractInvoicing.RUN;

      // 3. Verify: Verify that System generates an error when The Invoice-to Date is later than the work date.
      Assert.AreEqual(STRSUBSTNO(BatchJobError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(PostingDateConfirmHandler,ContractTemplateListHandler,MessageHandler,ContractInvoicingReportHandler)]
    PROCEDURE PostingDateLaterThanWorkdate@104();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ContractInvoicing@1003 : Report 5984;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Test that System generates an error when posting date is later than the work date.Confirm that this is the correct date.

      // 1. Setup: Create Contract Gain Loss Entries and Calculate Amount Per Period.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Generate the Contract Invoicing.
      COMMIT;
      CLEAR(ContractInvoicing);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractInvoicing.SETTABLEVIEW(ServiceContractHeader);

      // System generates an error when posting date is later than the work date.
      ContractInvoicing.InitVariables(CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(5,10)) + 'M>',WORKDATE),WORKDATE);
      ASSERTERROR ContractInvoicing.RUN;

      // 3. Verify: Verify that System generates an error when posting date is later than the work date.
      Assert.AreEqual(STRSUBSTNO(BatchJobError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ContractTemplateListHandler,ConfirmHandlerTrue,ServiceContractWithForecastReportHandler)]
    PROCEDURE ServiceContractWithForecast@102();
    VAR
      ServiceContractLine@1000 : Record 5964;
      Customer@1002 : Record 18;
      ServiceContractHeader@1001 : Record 5965;
    BEGIN
      // Test that value of Forecast Amount in Contract Quotes to Be Signed matches the value of Forecast Amount in corresponding
      // Service Contract Line.

      // 1. Setup: Create Service Contract Quote - Service Contract Header, Service Contract Line, Service Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Service Contract report.
      RunContractQuotesToBeSigned(ServiceContractHeader,TRUE);

      // 3. Verify: Check that value of Forecast Amount in Contract Quotes to Be Signed matches the value of Forecast Amount
      // in corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Header__Contract_No__',ServiceContractLine."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('Service_Contract_Header__Annual_Amount_',ServiceContractLine."Line Value");
    END;

    [Test]
    [HandlerFunctions(ContractTemplateListHandler,ConfirmHandlerTrue,ServiceContractWithForecastReportHandler)]
    PROCEDURE ServiceContractWithoutForecast@101();
    VAR
      Customer@1003 : Record 18;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // Test that value of Quoted Amount in Contract Quotes to Be Signed matches the value of Quoted Amount in corresponding
      // Service Contract Line.

      // 1. Setup: Create Service Contract Quote - Service Contract Header, Service Contract Line, Service Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract, Generate the Service Contract report.
      RunContractQuotesToBeSigned(ServiceContractHeader,FALSE);

      // 3. Verify: that value of Quoted Amount in Contract Quotes to Be Signed matches the value of Quoted Amount
      // in corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Header__Contract_No__',ServiceContractLine."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('Service_Contract_Header__Annual_Amount_',ServiceContractLine."Line Value");
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE ServiceDocumentTestCodeMandatory@110();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      // Test to verify Line Dimension on Service Order with Service Line of Type Cost with Value Posting Code Mandatory after running Service Document Test report.

      ServiceDocumentTestShowDimension(DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE ServiceDocumentTestValuePostingBlank@108();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      // Test to verify Line Dimension on Service Order with Service Line of Type Cost with Value Posting blank after running Service Document Test report.

      ServiceDocumentTestShowDimension(DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    [HandlerFunctions(CreateAndPrintServiceOrderReportHandler)]
    PROCEDURE CreateAndPrintServiceOrder@113();
    VAR
      Customer@1001 : Record 18;
      Item@1002 : Record 27;
      ServiceCost@1006 : Record 5905;
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1007 : Record 5902;
      ServiceOrderReport@1008 : Report 5900;
      ReportAmount@1012 : Variant;
      DiscountPct@1013 : Decimal;
      GrossAmount@1009 : Decimal;
      ShowQty@1010 : 'Quantity,Quantity Invoiced';
    BEGIN
      // Test to verify Invoice Discount Amount by printing Service Order report.

      // 1. Setup : Modify Sales Receivables Setup, Create Customer, Item, Customer Invoice Discount, Service Order and Calculate Invoice Discount.
      Initialize;
      UpdateCalculateInvoiceDiscount(TRUE);
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      DiscountPct := LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction;  // Generate Random Value for Discount Percent.
      CreateCustomerInvoiceDiscount(Customer."No.",DiscountPct);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.FindServiceCost(ServiceCost);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,1,ServiceItemLine."Line No.");  // Take 1 for Quantity.
      GetServiceLine(ServiceLine,ServiceHeader."Document Type",ServiceHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Service-Calc. Discount",ServiceLine);

      // 2. Exercise : Run the Report.
      COMMIT;
      CLEAR(ServiceOrderReport);
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      ServiceOrderReport.SETTABLEVIEW(ServiceHeader);
      ServiceOrderReport.InitializeRequest(FALSE,ShowQty::Quantity);
      ServiceOrderReport.RUN;

      GrossAmount := LibraryService.GetServiceOrderReportGrossAmount(ServiceLine);

      // 3. Verify : Verify Gross Amount in Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_ServLine',ServiceLine."Document No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ContractGainLossEntriesReportHandler)]
    PROCEDURE ContractQuotesGainLossEntries@149();
    VAR
      Customer@1006 : Record 18;
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
      ContractGainLossEntry@1001 : Record 5969;
      ContractGainLossEntries@1003 : Report 5983;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Test that value of Contract Quote Gain in Contract Gain/Loss Entries matches the value of Line Amount in corresponding
      // Service Contract Line.

      // 1. Setup.
      Initialize;

      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,Customer."No.");

      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);

      AmountsInServiceContractHeader(ServiceContractHeader);

      // 2. Exercise: Generate the Service Items report.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);
      COMMIT;
      CLEAR(ContractGainLossEntries);
      ContractGainLossEntry.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ContractGainLossEntry.FINDFIRST;
      ContractGainLossEntries.SETTABLEVIEW(ContractGainLossEntry);
      ContractGainLossEntries.RUN;

      // 3. Verify: Test that value of Contract Gain in Contract Gain/Loss Entries matches the value of Line Amount in
      // corresponding Service Contract Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContNo_ContGainLossEntry',ContractGainLossEntry."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with Service contract no');
      Assert.IsFalse(LibraryReportDataset.GetNextRow,'no more lines should exist');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ContractTemplateListHandler,ContractPriceUpdateTestReportHandler)]
    PROCEDURE ContractPriceUpdateAnnualAmount@150();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractHeader2@1006 : Record 5965;
      ContractPriceUpdateTest@1000 : Report 5985;
      UpdatePercent@1004 : Decimal;
    BEGIN
      // Test that value of Annual Amount in Contract Price Update Test matches the value of
      // Annual Amount Field in corresponding Service Contract Header.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;

      CreateAndSignServiceContract(ServiceContractHeader);
      CreateAndSignServiceContract(ServiceContractHeader2);
      // 2. Exercise: Generate Contract Price Update Test Report.
      COMMIT;
      CLEAR(ContractPriceUpdateTest);
      UpdatePercent := LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction;
      ContractPriceUpdateTest.InitVariables(
        UpdatePercent,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2)) + 'M>',ServiceContractHeader."Starting Date"));
      ContractPriceUpdateTest.RUN;

      // 3. Verify: Check that value of Annual Amount in Contract Price Update Test matches the value of
      // Annual Amount Field in corresponding Service Contract Header.
      VerifyContractPriceUpdateAnnualAmount(ServiceContractHeader2);
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE InvDiscAmountPrintedInTestReportWhenInvDiscNotAllowInFirstServLine@155();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceLine@1007 : Record 5902;
      TestReportPrint@1005 : Codeunit 228;
      DiscountPct@1001 : Decimal;
      ExpectedInvDiscAmount@1003 : Decimal;
      ServiceItemLineNo@1002 : Integer;
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 375187] Total Invoice Discount Amount should be printed in "Service Document - Test" report when "Allow Inv. Disc." is not mark in first Service Line

      Initialize;
      // [GIVEN] Service Order with two lines. "Allow Inv. Discount" is on only for the second line. "Inv. Disc. Amount" = "X"
      UpdateCalculateInvoiceDiscount(TRUE);
      CreateServiceOrderWithDiscount(ServiceHeader,ServiceItemLineNo,DiscountPct);
      CreateServiceLineWithAllowInvDisc(ServiceLine,ServiceHeader,ServiceItemLineNo,FALSE);
      CreateServiceLineWithAllowInvDisc(ServiceLine,ServiceHeader,ServiceItemLineNo,TRUE);
      ExpectedInvDiscAmount :=
        ROUND(ServiceLine.Amount * DiscountPct / 100,LibraryERM.GetAmountRoundingPrecision);
      COMMIT;

      // [WHEN] Print "Service Document - Test" report
      TestReportPrint.PrintServiceHeader(ServiceHeader);

      // [THEN] Invoice Discount Amount is printed and value = "X"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Line___No__',ServiceLine."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,FindElemWithServiceNoMsg);
      LibraryReportDataset.AssertElementWithValueExists('SumInvDiscountAmount',ExpectedInvDiscAmount);
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE SellToAddrInTestReport@156();
    VAR
      ServiceHeader@1001 : Record 5900;
      TestReportPrint@1002 : Codeunit 228;
    BEGIN
      // [SCENARIO 375362] Section "Customer" of Test Report should contain Sell-to address from Service Order header
      Initialize;

      // [GIVEN] Service order with different Sell-to and Ship-to Addresses
      CreateServiceOrderWithSelltoAddress(ServiceHeader);
      FillServiceOrderShiptoAddressValuesAreNotSameSellto(ServiceHeader);
      COMMIT;

      // [WHEN] Print "Service Document - Test" report
      TestReportPrint.PrintServiceHeader(ServiceHeader);

      // [THEN] Report should contain correct Sell-to address
      VerifyCustomerAddressInTestReport(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ServiceDocumentTestReportHandler)]
    PROCEDURE ServiceTestReportWithDimensions@157();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceDocumentTest@1005 : Report 5915;
      DimText@1000 : Text;
    BEGIN
      // [FEATURE] [Dimensions]
      // [SCENARIO 376031] Long Dimension text should be printed fully for both Header and Lines in Test Report
      Initialize;

      // [GIVEN] Service Order with Dimensions that give long length string
      DimText := CreateServiceOrderWithDimensions(ServiceHeader);
      COMMIT;

      // [WHEN] Print "Service Document - Test" report with 'Show Dimensions'
      ServiceHeader.SETRECFILTER;
      ServiceDocumentTest.SETTABLEVIEW(ServiceHeader);
      ServiceDocumentTest.InitializeRequest(FALSE,FALSE,TRUE);
      ServiceDocumentTest.RUN;

      // [THEN] All header dimensions are printed in the report
      // [THEN] All line dimensions are printed in the report
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('DimText',DimText);
      LibraryReportDataset.AssertElementWithValueExists('DimText_Control159',DimText);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ServiceDocumentTestShowDimension@106(ValuePosting@1000 : Option);
    VAR
      Customer@1006 : Record 18;
      Dimension@1007 : Record 348;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1005 : Record 352;
      ServiceOrderNo@1008 : Code[20];
    BEGIN
      // 1. Setup: Create Customer, Dimension, Dimension value, create an account type Default Dimension, create default dimension for Customer and create a Service Order.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
      LibraryDimension.CreateAccTypeDefaultDimension(
        DefaultDimension,DATABASE::Resource,Dimension.Code,DimensionValue.Code,ValuePosting);
      ServiceOrderNo := CreateServiceOrder(Customer."No.");

      // 2. Exercise: Run Service Document Test Report.
      RunServiceDocumentTestReport(ServiceOrderNo);

      // 3. Verify: Verify that correct Line Dimension is populated on Service Document Test Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('DimText',
        STRSUBSTNO('%1 - %2',DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));

      // 4. Tear Down: Delete the Default Dimensions created.
      DefaultDimension.DELETE(TRUE);
    END;

    LOCAL PROCEDURE AmountsInServiceContractHeader@29(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",ServiceContractHeader."Service Period");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateAmountLCY@82(ServiceOrderNo@1000 : Code[20]) AmountLCY : Decimal;
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      FindServiceLedgerEntry(ServiceLedgerEntry,ServiceOrderNo);
      REPEAT
        AmountLCY += ServiceLedgerEntry."Amount (LCY)";
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateCostAmount@83(ServiceOrderNo@1000 : Code[20]) CostAmount : Decimal;
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      FindServiceLedgerEntry(ServiceLedgerEntry,ServiceOrderNo);
      REPEAT
        CostAmount += ServiceLedgerEntry."Cost Amount";
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateDiscountAmount@84(ServiceOrderNo@1000 : Code[20]) DiscountAmount : Decimal;
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      FindServiceLedgerEntry(ServiceLedgerEntry,ServiceOrderNo);
      REPEAT
        DiscountAmount += ServiceLedgerEntry."Discount Amount";
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateContractHeaderAccGroup@70(VAR ServiceContractHeader@1003 : Record 5965;ContractType@1001 : Option;CustomerNo@1000 : Code[20]);
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
    BEGIN
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ContractType,CustomerNo);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContractWithExpiredLine@6(VAR ServiceContractHeader@1002 : Record 5965;CustomerNo@1003 : Code[20]);
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      DatesInServiceContractLine(ServiceContractLine,WORKDATE);
      AmountsInServiceContractHeader(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateCreditMemoFromContract@76(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceContractLine@1001 : Record 5964;
      ServContractManagement@1004 : Codeunit 5940;
      ExpirationDate@1003 : Date;
    BEGIN
      FindServiceContractLines(ServiceContractLine,ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");

      // Expiration Date should be set after Starting Date.
      ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(5,10)) + 'D>',ServiceContractHeader."Starting Date");
      ServiceContractLine.VALIDATE("Credit Memo Date",ExpirationDate);
      DatesInServiceContractLine(ServiceContractLine,ExpirationDate);
      ServContractManagement.CreateContractLineCreditMemo(ServiceContractLine,FALSE);
    END;

    LOCAL PROCEDURE CreateCustomer@107(VATBusPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateContractGainLossEntries@141(VAR ServiceContractHeader@1002 : Record 5965;CustomerNo@1003 : Code[20]);
    VAR
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1004 : Codeunit 5944;
    BEGIN
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);
      ServiceContractAccountHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateHeaderWithResponsibility@52(VAR ServiceHeader@1000 : Record 5900);
    VAR
      Customer@1002 : Record 18;
      ResponsibilityCenter@1001 : Record 5714;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      ServiceHeader.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSignServiceContract@158(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      Customer@1001 : Record 18;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1003 : Codeunit 5944;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateContractHeaderAccGroup(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      AmountsInServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateItem@116(VATProdPostingGroup@1004 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(5,100) + LibraryUtility.GenerateRandomFraction);  // Use Random because value is not important.
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateReasonCode@86() : Code[10];
    VAR
      ReasonCode@1000 : Record 231;
    BEGIN
      LibraryERM.CreateReasonCode(ReasonCode);
      EXIT(ReasonCode.Code);
    END;

    LOCAL PROCEDURE CreateSalesOrder@5(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithDiscount@167(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLineNo@1001 : Integer;VAR DiscountPct@1006 : Decimal);
    VAR
      Customer@1005 : Record 18;
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      DiscountPct := LibraryRandom.RandInt(10);
      CreateCustomerInvoiceDiscount(Customer."No.",DiscountPct);
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,Customer."No.",ServiceHeader."Document Type"::Order);
      ServiceItemLineNo := ServiceItemLine."Line No.";
    END;

    LOCAL PROCEDURE CreateServiceOrderWithSelltoAddress@188(VAR ServiceHeader@1000 : Record 5900);
    VAR
      CountryRegion@1001 : Record 9;
      Option@1002 : 'Capitalized,Literal and Capitalized';
    BEGIN
      WITH ServiceHeader DO BEGIN
        LibraryService.CreateServiceHeader(ServiceHeader,"Document Type"::Order,LibrarySales.CreateCustomerNo);
        Name := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN(Name),Option::Capitalized),1,MAXSTRLEN(Name));
        "Name 2" :=
          COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN("Name 2"),Option::Capitalized),1,MAXSTRLEN("Name 2"));
        "Contact No." :=
          COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN("Contact No."),Option::Capitalized),
            1,MAXSTRLEN("Contact No."));
        Address := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN(Address),Option::Capitalized),1,MAXSTRLEN(Address));
        "Address 2" :=
          COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN("Address 2"),Option::Capitalized),1,MAXSTRLEN("Address 2"));
        City := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN(City),Option::Capitalized),1,MAXSTRLEN(City));
        "Post Code" :=
          COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN("Post Code"),Option::Capitalized),1,MAXSTRLEN("Post Code"));
        County := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(MAXSTRLEN(County),Option::Capitalized),1,MAXSTRLEN(County));
        LibraryERM.CreateCountryRegion(CountryRegion);
        CountryRegion.VALIDATE(Name,
          COPYSTR(LibraryUtility.GenerateRandomText(MAXSTRLEN(CountryRegion.Name)),MAXSTRLEN(CountryRegion.Name)));
        "Country/Region Code" := CountryRegion.Code;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FillServiceOrderShiptoAddressValuesAreNotSameSellto@174(VAR ServiceHeader@1000 : Record 5900);
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      WITH ServiceHeader DO BEGIN
        "Ship-to Name" := COPYSTR(Name,2);
        "Ship-to Name 2" := COPYSTR("Name 2",2);
        "Ship-to Contact" := COPYSTR("Contact No.",2);
        "Ship-to Address" := COPYSTR(Address,2);
        "Ship-to Address 2" := COPYSTR("Address 2",2);
        "Ship-to City" := COPYSTR(City,2);
        "Ship-to Post Code" := COPYSTR("Post Code",2);
        "Ship-to County" := COPYSTR(County,2);
        LibraryERM.CreateCountryRegion(CountryRegion);
        "Ship-to Country/Region Code" := CountryRegion.Code;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrderWithDimensions@171(VAR ServiceHeader@1000 : Record 5900) DimText : Text;
    VAR
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1005 : Record 5902;
      DimensionValue@1001 : Record 349;
      DimSetID@1006 : Integer;
    BEGIN
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,LibrarySales.CreateCustomerNo,ServiceHeader."Document Type"::Order);
      REPEAT
        LibraryDimension.CreateDimWithDimValue(DimensionValue);
        DimSetID := LibraryDimension.CreateDimSet(DimSetID,DimensionValue."Dimension Code",DimensionValue.Code);
        IF DimText <> '' THEN
          DimText += '; ';
        DimText += DimensionValue."Dimension Code" + ' - ' + DimensionValue.Code;
      UNTIL STRLEN(DimText) > 120;
      ServiceHeader.VALIDATE("Dimension Set ID",DimSetID);
      ServiceHeader.MODIFY(TRUE);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithItemLine@159(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLine@1004 : Record 5901;VAR ServiceItem@1001 : Record 5940;CustomerNo@1002 : Code[20];DocumentType@1003 : Option);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceContractLine@56(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceItem@1001 : Record 5940;
      ServicePeriod@1003 : DateFormula;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Line Cost",1000 * LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);
      ServiceContractLine.VALIDATE("Line Value",1000 * LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);
      EVALUATE(ServicePeriod,'<' + FORMAT(LibraryRandom.RandIntInRange(5,10)) + 'M>');
      ServiceContractLine.VALIDATE("Service Period",ServicePeriod);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@92(ServiceHeader@1003 : Record 5900;ServiceItemLineNo@1005 : Integer);
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);  // Use Random because value is not important.
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(5,100));
      ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithItem@22(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItemNo@1002 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(
        Quantity,LibraryRandom.RandIntInRange(5,100) + LibraryUtility.GenerateRandomFraction);  // Required field - value is not important to test case.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithResource@15(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItemNo@1002 : Code[20]);
    VAR
      Resource@1000 : Record 156;
    BEGIN
      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(
        Quantity,LibraryRandom.RandIntInRange(5,100) + LibraryUtility.GenerateRandomFraction);  // Required field - value is not important to test case.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithAllowInvDisc@165(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItemLineNo@1004 : Integer;AllowInvDiscount@1001 : Boolean);
    VAR
      Item@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Item,Item."No.",LibraryRandom.RandInt(10),ServiceItemLineNo);
      ServiceLine.SETRANGE("No.",Item."No.");
      GetServiceLine(ServiceLine,ServiceHeader."Document Type",ServiceHeader."No.");
      ServiceLine.VALIDATE("Allow Invoice Disc.",AllowInvDiscount);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceQuoteComment@94(VAR ServiceCommentLine@1000 : Record 5906;ServiceContractLine@1001 : Record 5964);
    BEGIN
      LibraryService.CreateCommentLineForServCntrct(ServiceCommentLine,ServiceContractLine,ServiceCommentLine.Type::General);
      ServiceCommentLine.VALIDATE(Date,WORKDATE);
      ServiceCommentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostServiceInvoice@87(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServContractManagement@1001 : Codeunit 5940;
    BEGIN
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServContractManagement.InitCodeUnit;
      ServContractManagement.CreateInvoice(ServiceContractHeader);
      PostServiceInvoice(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE CreateServiceItem@115(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@119(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];Quantity@1004 : Decimal;ServiceItemLineNo@1005 : Integer);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(5,100) + LibraryUtility.GenerateRandomFraction);  // Take Random Value for Unit Price.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerInvoiceDiscount@123(CustomerNo@1002 : Code[20];DiscountPct@1003 : Decimal);
    VAR
      CustInvoiceDisc@1000 : Record 19;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);  // Take Blank for Currency And Zero for Min. Amount.
      CustInvoiceDisc.VALIDATE("Discount %",DiscountPct);
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DatesInServiceContractLine@17(VAR ServiceContractLine@1000 : Record 5964;ContractExpirationDate@1002 : Date);
    VAR
      ServicePeriod@1001 : DateFormula;
    BEGIN
      // Use random value for Service Period.
      EVALUATE(ServicePeriod,'<' + FORMAT(LibraryRandom.RandIntInRange(5,10)) + 'M>');
      ServiceContractLine.VALIDATE("Service Period",ServicePeriod);
      ServiceContractLine.VALIDATE("Contract Expiration Date",ContractExpirationDate);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindFaultCode@12(VAR FaultCode@1000 : Record 5918);
    VAR
      FaultArea@1001 : Record 5915;
      SymptomCode@1002 : Record 5916;
    BEGIN
      LibraryService.CreateFaultArea(FaultArea);
      LibraryService.CreateSymptomCode(SymptomCode);
      LibraryService.CreateFaultCode(FaultCode,FaultArea.Code,SymptomCode.Code);
    END;

    LOCAL PROCEDURE FindFaultReasonCode@14() : Code[10];
    VAR
      FaultReasonCode@1000 : Record 5917;
    BEGIN
      LibraryService.FindFaultReasonCode(FaultReasonCode);
      EXIT(FaultReasonCode.Code);
    END;

    LOCAL PROCEDURE FindRepairStatus@28() : Code[10];
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE("Quote Finished",FALSE);
      RepairStatus.INIT;
      RepairStatus.FINDFIRST;
      EXIT(RepairStatus.Code);
    END;

    LOCAL PROCEDURE FindServiceLedgerEntry@103(VAR ServiceLedgerEntry@1000 : Record 5907;ServiceOrderNo@1001 : Code[20]);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceOrderNo);
      ServiceLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceContractLines@88(VAR ServiceContractLine@1000 : Record 5964;ContractType@1001 : Option;ContractNo@1002 : Code[20]);
    BEGIN
      ServiceContractLine.SETRANGE("Contract Type",ContractType);
      ServiceContractLine.SETRANGE("Contract No.",ContractNo);
      ServiceContractLine.FINDSET;
    END;

    LOCAL PROCEDURE GetServiceLine@124(VAR ServiceLine@1001 : Record 5902;DocumentType@1002 : Option;No@1000 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",No);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterServiceContractHeader@73(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifyHeaderForPrepaid@77(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<-CM>',WORKDATE));  // Validate first date of month.
      ServiceContractHeader.VALIDATE(Prepaid,TRUE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostServiceInvoice@75(ServiceContractNo@1001 : Code[20]);
    VAR
      ServiceDocumentRegister@1000 : Record 5936;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Find the Service Invoice by searching in Service Document Register.
      ServiceDocumentRegister.SETRANGE("Source Document Type",ServiceDocumentRegister."Source Document Type"::Contract);
      ServiceDocumentRegister.SETRANGE("Source Document No.",ServiceContractNo);
      ServiceDocumentRegister.SETRANGE("Destination Document Type",ServiceDocumentRegister."Destination Document Type"::Invoice);
      ServiceDocumentRegister.FINDFIRST;
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,ServiceDocumentRegister."Destination Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE UpdateContractExpirationDate@95(VAR ServiceContractLine@1000 : Record 5964;ContractExpirationDate@1001 : Date);
    BEGIN
      ServiceContractLine.VALIDATE("Contract Expiration Date",ContractExpirationDate);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnHeader@79(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.VALIDATE("Expiration Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReasonOnServiceSetup@74();
    VAR
      ServiceMgtSetup@1000 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Use Contract Cancel Reason",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ResponsibilityCenterHeader@46(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ResponsibilityCenter@1001 : Record 5714;
    BEGIN
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      ServiceContractHeader.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunServiceContractQuote@93(ContractNo@1002 : Code[20];ShowComments@1003 : Boolean);
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractQuote@1000 : Report 5972;
    BEGIN
      COMMIT;
      CLEAR(ServiceContractQuote);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Quote);
      ServiceContractHeader.SETRANGE("Contract No.",ContractNo);
      ServiceContractQuote.SETTABLEVIEW(ServiceContractHeader);
      ServiceContractQuote.InitializeRequestComment(ShowComments);
      ServiceContractQuote.RUN;
    END;

    LOCAL PROCEDURE RunServiceContractQuoteDetail@96(ContractNo@1002 : Code[20];ShowComments@1003 : Boolean);
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractQuoteDetail@1000 : Report 5973;
    BEGIN
      COMMIT;
      CLEAR(ServiceContractQuoteDetail);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Quote);
      ServiceContractHeader.SETRANGE("Contract No.",ContractNo);
      ServiceContractQuoteDetail.SETTABLEVIEW(ServiceContractHeader);
      ServiceContractQuoteDetail.InitializeRequest(ShowComments);
      ServiceContractQuoteDetail.RUN;
    END;

    LOCAL PROCEDURE RunContractQuotesToBeSigned@105(ServiceContractHeader@1000 : Record 5965;ForecastIncluded@1005 : Boolean);
    VAR
      ContractQuotesToBeSigned@1003 : Report 5974;
    BEGIN
      COMMIT;
      CLEAR(ContractQuotesToBeSigned);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Quote);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");

      ContractQuotesToBeSigned.SETTABLEVIEW(ServiceContractHeader);
      ContractQuotesToBeSigned.InitializeRequest(ForecastIncluded);
      ContractQuotesToBeSigned.RUN;
    END;

    LOCAL PROCEDURE RunServiceProfitRespCenters@25(ResponsibilityCenter@1000 : Code[10]);
    VAR
      ServiceShipmentHeader@1002 : Record 5990;
      ServiceProfitRespCenters@1001 : Report 5909;
    BEGIN
      CLEAR(ServiceProfitRespCenters);
      ServiceShipmentHeader.SETRANGE("Responsibility Center",ResponsibilityCenter);
      ServiceProfitRespCenters.SETTABLEVIEW(ServiceShipmentHeader);
      ServiceShipmentHeader.FINDFIRST;
      ServiceProfitRespCenters.InitializeRequest(TRUE);

      ServiceProfitRespCenters.RUN;
    END;

    LOCAL PROCEDURE RunServiceQuoteReport@65(No@1000 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceQuote@1001 : Report 5902;
    BEGIN
      COMMIT;
      CLEAR(ServiceQuote);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Quote);
      ServiceHeader.SETRANGE("No.",No);
      ServiceQuote.SETTABLEVIEW(ServiceHeader);
      ServiceQuote.RUN;
    END;

    LOCAL PROCEDURE ServiceContractAccountHeader@18(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceContractAccountGroup@1001 : Record 5973;
    BEGIN
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ServiceItemLineFaultSymptom@20(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      FaultCode@1001 : Record 5918;
    BEGIN
      FindFaultCode(FaultCode);
      ServiceItemLine.VALIDATE("Fault Reason Code",FindFaultReasonCode);
      ServiceItemLine.VALIDATE("Fault Area Code",FaultCode."Fault Area Code");
      ServiceItemLine.VALIDATE("Symptom Code",FaultCode."Symptom Code");
      ServiceItemLine.VALIDATE("Fault Code",FaultCode.Code);
      ServiceItemLine.VALIDATE("Repair Status Code",FindRepairStatus);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityServiceLine@72(VAR ServiceLine@1003 : Record 5902);
    BEGIN
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);  // Use Random because value is not important.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarrantyEndingDatePartsItem@41(VAR ServiceItem@1000 : Record 5940);
    BEGIN
      ServiceItem.VALIDATE("Warranty Ending Date (Parts)",WORKDATE);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineOfTypeCost@112(ServiceHeader@1003 : Record 5900;ServiceItemNo@1001 : Code[20]);
    VAR
      ServiceCost@1002 : Record 5905;
      ServiceLine@1000 : Record 5902;
    BEGIN
      LibraryService.FindServiceCost(ServiceCost);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);

      // Use the random value for Quantity.
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(5,10) + LibraryUtility.GenerateRandomFraction);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@111(CustomerNo@1000 : Code[20]) : Code[20];
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      CreateServiceHeaderWithItemLine(
        ServiceHeader,ServiceItemLine,ServiceItem,CustomerNo,ServiceHeader."Document Type"::Order);
      CreateServiceLineOfTypeCost(ServiceHeader,ServiceItem."No.");
      EXIT(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE RunServiceDocumentTestReport@134(No@1002 : Code[20]);
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceDocumentTest@1000 : Report 5915;
    BEGIN
      COMMIT;
      CLEAR(ServiceDocumentTest);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.SETRANGE("No.",No);
      ServiceDocumentTest.SETTABLEVIEW(ServiceHeader);
      ServiceDocumentTest.InitializeRequest(TRUE,TRUE,TRUE);
      ServiceDocumentTest.RUN;
    END;

    LOCAL PROCEDURE UpdateCalculateInvoiceDiscount@129(CalcInvDiscount@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDiscount);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCommentOnReport@85(ServiceCommentLine@1000 : Record 5906);
    BEGIN
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Comment_ServCommentLine',ServiceCommentLine.Comment);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the comment');
    END;

    LOCAL PROCEDURE VerifyContractInvoicing@100(ServiceContractHeader@1000 : Record 5965);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('CustNo_ServContract',ServiceContractHeader."Customer No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the customer no');

      LibraryReportDataset.AssertCurrentRowValue('ContractNo1_ServContract',ServiceContractHeader."Contract No.");
      LibraryReportDataset.AssertCurrentRowValue('NextInvDate_ServContract',FORMAT(ServiceContractHeader."Next Invoice Date"));
    END;

    LOCAL PROCEDURE VerifyMaintenanceVisitPlanning@54(ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      ServiceContractLine.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.",10000);

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContrNo_ServContractLine',ServiceContractHeader."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('RespCntr_ServContractHdr',ServiceContractHeader."Responsibility Center");
      LibraryReportDataset.AssertCurrentRowValue('CustNo_ServContractLine',ServiceContractHeader."Customer No.");
      LibraryReportDataset.AssertCurrentRowValue('NxtPlServDt_ServContractLine',
        FORMAT(ServiceContractLine."Next Planned Service Date"));

      VerifyServicePeriod(ServiceContractLine,'ServPerd_ServContractLine');
    END;

    LOCAL PROCEDURE VerifyServiceContractCustomer@11(ServiceContractHeader@1000 : Record 5965);
    BEGIN
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('ContractNo_ServContract',ServiceContractHeader."Contract No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract no');

      LibraryReportDataset.AssertCurrentRowValue('AmtperPeriod_ServContract',ServiceContractHeader."Amount per Period");
      LibraryReportDataset.AssertCurrentRowValue('AnnualAmount_ServContract',ServiceContractHeader."Annual Amount");
      LibraryReportDataset.AssertCurrentRowValue('AmtOnExpiredLines',ServiceContractHeader."Annual Amount");
    END;

    LOCAL PROCEDURE VerifyServiceContractSalesper@136(ServiceContractHeader@1000 : Record 5965);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('SlspersonCod_ServContract',ServiceContractHeader."Salesperson Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the salesperson code');

      LibraryReportDataset.AssertCurrentRowValue('ContractNo_ServContract',ServiceContractHeader."Contract No.");
      LibraryReportDataset.AssertCurrentRowValue('AnnualAmount_ServContract',ServiceContractHeader."Annual Amount");
    END;

    LOCAL PROCEDURE VerifyServiceItemsOutWarranty@24(ServiceItem@1000 : Record 5940);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      ServiceItem.CALCFIELDS(Name,"No. of Active Contracts");

      LibraryReportDataset.SetRange('No_ServItem',ServiceItem."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');

      LibraryReportDataset.AssertCurrentRowValue('CustomerNo_ServItem',ServiceItem."Customer No.");
      LibraryReportDataset.AssertCurrentRowValue('Name_ServItem',ServiceItem.Name);
      LibraryReportDataset.AssertCurrentRowValue('Description_ServItem',ServiceItem.Description);
      LibraryReportDataset.AssertCurrentRowValue('NoofActvContrct_ServItem',ServiceItem."No. of Active Contracts");
    END;

    LOCAL PROCEDURE VerifyServiceItemResource@45(ServiceItem@1000 : Record 5940);
    BEGIN
      ServiceItem.CALCFIELDS("Usage (Cost)","Usage (Amount)");

      LibraryReportDataset.AssertCurrentRowValue('UsageAmt_ServiceItem',ServiceItem."Usage (Amount)");
      LibraryReportDataset.AssertCurrentRowValue('OrderProfit',ServiceItem."Usage (Amount)" - ServiceItem."Usage (Cost)");
      LibraryReportDataset.AssertCurrentRowValue('OrderProfitPct',
        ROUND(100 * (ServiceItem."Usage (Amount)" - ServiceItem."Usage (Cost)") / ServiceItem."Usage (Amount)",0.1));
    END;

    LOCAL PROCEDURE VerifyServiceItemResourceUsage@19(ServiceItem@1000 : Record 5940);
    BEGIN
      ServiceItem.CALCFIELDS("Total Quantity","Usage (Amount)");

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ServiceItem',ServiceItem."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');

      VerifyServiceItemResource(ServiceItem);
    END;

    LOCAL PROCEDURE VerifyServiceItemWorksheet@26(ServiceItemLine@1000 : Record 5901;ServiceLine@1001 : Record 5902);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ServItemNo_ServItemLine',ServiceItemLine."Service Item No.");
      LibraryReportDataset.SetRange('ServiceLinesCaption','Service Lines');
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');

      LibraryReportDataset.AssertCurrentRowValue('RepStatusCode_ServItemLine',ServiceItemLine."Repair Status Code");
      LibraryReportDataset.AssertCurrentRowValue('Qty_ServLine',ServiceLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('FaultAreaCode_ServLine',ServiceLine."Fault Area Code");
      LibraryReportDataset.AssertCurrentRowValue('Symptom_ServLine',ServiceLine."Symptom Code");
      LibraryReportDataset.AssertCurrentRowValue('FaultCode_ServLine',ServiceLine."Fault Code");
    END;

    LOCAL PROCEDURE VerifyServiceResourceDetail@39(ServiceItem@1000 : Record 5940);
    BEGIN
      ServiceItem.CALCFIELDS("Total Quantity","Usage (Amount)");

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('No_ServiceItem',ServiceItem."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');

      LibraryReportDataset.AssertCurrentRowValue('TotalQty_ServiceItem',ServiceItem."Total Quantity");

      VerifyServiceItemResource(ServiceItem);
    END;

    LOCAL PROCEDURE VerifyServicePeriod@154(ServiceContractLine@1000 : Record 5964;ElementName@1002 : Text);
    BEGIN
      LibraryReportDataset.AssertCurrentRowValue(ElementName,FORMAT(ServiceContractLine."Service Period"));
    END;

    LOCAL PROCEDURE VerifyServiceTasks@121(ServiceItemLine@1000 : Record 5901);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocNo_ServItemLine',ServiceItemLine."Document No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the document no');

      LibraryReportDataset.AssertCurrentRowValue('ResponseDate_ServItemLine',FORMAT(ServiceItemLine."Response Date"));
      LibraryReportDataset.AssertCurrentRowValue('Priority_ServItemLine',FORMAT(ServiceItemLine.Priority));
    END;

    LOCAL PROCEDURE VerifyServiceContractLine@117(ServiceContractLine@1000 : Record 5964);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ServItemNo_ServContractLine',ServiceContractLine."Service Item No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service item no');

      LibraryReportDataset.AssertCurrentRowValue('LineValue_ServContractLine',ServiceContractLine."Line Value");

      VerifyServicePeriod(ServiceContractLine,'ServicePeriod_ServContractLine');
    END;

    LOCAL PROCEDURE VerifyServiceLineOnReport@81(DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
      DocumentType@1001 : 'Quote,Order,Invoice,Credit Memo';
    BEGIN
      GetServiceLine(ServiceLine,DocumentType::Quote,DocumentNo);

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Type_ServLine',FORMAT(ServiceLine.Type));
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the service Line type');

      LibraryReportDataset.AssertCurrentRowValue('Quantity_ServLine',ServiceLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('LineDiscount_ServLine',ServiceLine."Line Discount %");
      LibraryReportDataset.AssertCurrentRowValue('Amt',ServiceLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryAmount@23(ServiceShipmentHeader@1003 : Record 5990);
    BEGIN
      LibraryReportDataset.SetRange('No_ServShptHeader',ServiceShipmentHeader."No.");
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue('SalesAmount',CalculateAmountLCY(ServiceShipmentHeader."Order No."));
      LibraryReportDataset.AssertCurrentRowValue('CostAmount',CalculateCostAmount(ServiceShipmentHeader."Order No."));
      LibraryReportDataset.AssertCurrentRowValue('DiscountAmount',CalculateDiscountAmount(ServiceShipmentHeader."Order No."));
    END;

    LOCAL PROCEDURE VerifyContractPriceUpdateAnnualAmount@147(ServiceContractHeader@1000 : Record 5965);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Service_Contract_Header__Contract_No__',ServiceContractHeader."Contract No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('OldAnnualAmount',ServiceContractHeader."Annual Amount");
    END;

    LOCAL PROCEDURE VerifyCustomerAddressInTestReport@183(ServiceHeader@1000 : Record 5900);
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_1_',ServiceHeader.Name);
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_2_',ServiceHeader."Name 2");
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_3_',ServiceHeader."Contact No.");
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_4_',ServiceHeader.Address);
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_5_',ServiceHeader."Address 2");
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_6_',
        DELSTR(ServiceHeader.City,
          MAXSTRLEN(ServiceHeader.City) + MAXSTRLEN(ServiceHeader."Post Code") -
          STRLEN(ServiceHeader."Post Code") - 1) + ', ' + ServiceHeader."Post Code");
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_7_',ServiceHeader.County);
      CountryRegion.GET(ServiceHeader."Country/Region Code");
      LibraryReportDataset.AssertCurrentRowValue('SellToAddr_8_',CountryRegion.Name);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@2(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@27(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceDateConfirmHandler@99(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := NOT (Question = ErrorInvoiceToDate);
    END;

    [ConfirmHandler]
    PROCEDURE PostingDateConfirmHandler@118(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := NOT (Question = ErrorInPostingDate);
    END;

    [ModalPageHandler]
    PROCEDURE ContractTemplateListHandler@38(VAR ServiceContractTemplateList@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@44(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ServiceProfitRespCentersHandler@199(VAR ServiceProfitRespCenters@1001 : TestRequestPage 5909);
    BEGIN
      ServiceProfitRespCenters.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE ServiceInvoiceHandler@200(VAR ServiceInvoice@1001 : TestRequestPage 5911);
    BEGIN
      ServiceInvoice.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE ServiceProfitContractsHandler@201(VAR ServiceProfitContracts@1001 : TestRequestPage 5976);
    BEGIN
      ServiceProfitContracts.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE OrderConfirmationReportHandler@48(VAR OrderConfirmation@1000 : TestRequestPage 205);
    BEGIN
      OrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractCustomerReportHandler@126(VAR ServiceContractCustomer@1000 : TestRequestPage 5977);
    BEGIN
      ServiceContractCustomer.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceItemWorksheetReportHandler@140(VAR ServiceItemWorksheet@1000 : TestRequestPage 5936);
    BEGIN
      ServiceItemWorksheet.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE MaintenanceVisitPlanningReportHandler@69(VAR MaintenanceVisitPlanning@1000 : TestRequestPage 5980);
    BEGIN
      MaintenanceVisitPlanning.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceItemsOutOfWarrantyReportHandler@133(VAR ServiceItemsOutofWarranty@1000 : TestRequestPage 5937);
    BEGIN
      ServiceItemsOutofWarranty.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceItemResourceUsageReportHandler@144(VAR ServiceItemResourceUsage@1000 : TestRequestPage 5939);
    BEGIN
      ServiceItemResourceUsage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceQuoteReportReportHandler@109(VAR ServiceQuote@1000 : TestRequestPage 5902);
    BEGIN
      ServiceQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceLoadLevelReportHandler@127(VAR ServiceLoadLevel@1000 : TestRequestPage 5956);
    BEGIN
      ServiceLoadLevel.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceDocumentTestReportHandler@114(VAR ServiceDocumentTest@1000 : TestRequestPage 5915);
    BEGIN
      ServiceDocumentTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceItemsReportHandler@122(VAR ServiceItems@1000 : TestRequestPage 5935);
    BEGIN
      ServiceItems.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE DispatchBoardReportHandler@132(VAR DispatchBoard@1000 : TestRequestPage 5955);
    BEGIN
      DispatchBoard.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractReportHandler@146(VAR ServiceContract@1000 : TestRequestPage 5970);
    BEGIN
      ServiceContract.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContractServiceOrdersTestReportHandler@125(VAR ContrServOrdersTest@1000 : TestRequestPage 5988);
    BEGIN
      ContrServOrdersTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContractGainLossEntriesReportHandler@131(VAR ContractGainLossEntries@1000 : TestRequestPage 5983);
    BEGIN
      ContractGainLossEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE MaintenancePerformanceReportHandler@128(VAR MaintenancePerformance@1000 : TestRequestPage 5982);
    BEGIN
      MaintenancePerformance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractDetailReportHandler@130(VAR ServiceContractDetail@1000 : TestRequestPage 5971);
    BEGIN
      ServiceContractDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ExpiredContractLineslReportHandler@142(VAR ExpiredContractLinesTest@1000 : TestRequestPage 5987);
    BEGIN
      ExpiredContractLinesTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContractPriceUpdateTestReportHandler@151(VAR ContractPriceUpdateTest@1000 : TestRequestPage 5985);
    BEGIN
      ContractPriceUpdateTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PrepaidContractEntriesTestReportHandler@138(VAR PrepaidContrEntriesTest@1000 : TestRequestPage 5986);
    BEGIN
      PrepaidContrEntriesTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractQuoteReportHandler@143(VAR ServiceContractQuote@1000 : TestRequestPage 5972);
    BEGIN
      ServiceContractQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractQuoteDetailReportHandler@145(VAR ServiceContractQuoteDetail@1000 : TestRequestPage 5973);
    BEGIN
      ServiceContractQuoteDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceTasksReportHandler@137(VAR ServiceTasks@1000 : TestRequestPage 5904);
    BEGIN
      ServiceTasks.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractSalespersonReportHandler@148(VAR ServContractSalesperson@1000 : TestRequestPage 5978);
    BEGIN
      ServContractSalesperson.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContractGainLossResponsibilityReportHandler@153(VAR ContrGainLossRespCtr@1000 : TestRequestPage 5981);
    BEGIN
      ContrGainLossRespCtr.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContractInvoicingReportHandler@162(VAR ContractInvoicing@1000 : TestRequestPage 5984);
    BEGIN
      ContractInvoicing.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceContractWithForecastReportHandler@173(VAR ContractQuotestoBeSigned@1000 : TestRequestPage 5974);
    BEGIN
      ContractQuotestoBeSigned.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CreateAndPrintServiceOrderReportHandler@152(VAR ServiceOrder@1000 : TestRequestPage 5900);
    BEGIN
      ServiceOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Service]

      Unsupported version tags:
      SE: Unable to Execute

      Test and Verify Service Reports:
      1.  Test that value of Amount in Order Confirmation matches the value of Amount in corresponding Sales Line.
      2.  Test that the Service Contract - Customer Report is generated properly.
      3.  Test that the Service Item Worksheet Report is generated properly.
      4.  Test that the Maintenance Visit - Planning report is generated properly.
      5.  Test that the Service Items Out of Warranty report is generated properly.
      6.  Test that the Service Item - Resource Usage report is generated properly.
      7.  Test Values on Service Quote Report.
      8.  Test Values on Service Profit Resp. Centers Report.
      9.  Test that value of Capacity in Service Load Level matches the value of Capacity in corresponding Resource with Different Options.
      10. Test that value of Amount in Service Document - Test matches the value of Amount in corresponding Service Line.
      11. Test that value of Item No in Service Items matches the value of Item No in corresponding Service Item.
      12. Test that value of No. in Dispatch Board matches the value of No. Field in corresponding Service Header.
      13. Test that value of Line Value in Service Contract matches the value of Line Value in corresponding Service Contract Line.
      14. Test that value of Contract No. in Contr. Serv. Orders - Test matches the value of Contract No. in corresponding
          Service Contract Line.
      15. Test that value of Contract No. in Contract Gain/Loss Entries matches the value of Contract No. in corresponding
          Contract Gain/Loss Entry.
      16. Test that value of Annual Amount in Maintenance Performance matches the value of Annual Amount in corresponding
          Service Contract Line.
      17. Test that value of Forecast Amount and Quoted Amount in Contract Quotes to Be Signed matches the value of
          Forecast Amount and Quoted Amount in corresponding Service Contract Line.
      18. Test that value of Line Value in Service Contract Detail matches the value of Line Value in corresponding Service Contract Line.
      19. Test that value of Amount in Service Invoice Report matches the value of Line Amount in corresponding Service Invoice Line.
      20. Test that value of Contract Expiration Date in Expired Contract Lines Test matches the value of Contract Expiration Date
          Field in corresponding Service Contract Line.
      21. Test that System generates an error when Remove To is not filled.
      22. Test that System generates an error when Reason Code is not filled.
      23. Test that value of Service Amount LCY in Service Profit Contracts matches the value of
          Amount LCY Field in corresponding Service Ledger Entry.
      24. Test that value of Customer No in Contract Price Update Test matches the value of
          Customer No Field in corresponding Service Contract Header.
      25. Test that value of Amount LCY in Prepaid Contrract Entries Test matches the value of
          Amount LCY Field in corresponding Service Ledger Entry.
      26. Test that System generates an error when Post Until Date is not filled.
      27. Test that System generates an error when Posting Date is not filled.
      28. Test that value of Warning in Prepaid Contract Entries Test matches with actual value.
      29. Test values on Service Contract Quote Report with Show Comments False.
      30. Test values on Service Contract Quote Report with Show Comments True.
      31. Test values on Service Contract Quote Detail Report with Show Comments False.
      32. Test values on Service Contract Quote Detail Report with Show Comments True.
      33. Test that values of Contract No.,Amount Per Period in Contract Invoicing matches the value of Contract No.,Amount Per Period
          In corresponding Service Contract Header.
      34. Test that System generates an error when Invoice-to Date is not filled.
      35. Test that System generates an error when Posting Date is not filled.
      36. Test that System generates an error when
          The Invoice-to Date is later than the work date.Confirm that this is the correct date..
      37. Test that System generates an error when
          The posting date is later than the work date.Confirm that this is the correct date.
      38. Test that the Service Tasks Report is generated properly.
      39. Test that value of SalesPerson Code,Annual Amount and Contract No. in Serv. Contract - Salesperson matches the
          Value of SalesPerson Code,Line Value and Contract No. Field in corresponding Service Contract Header and Service Contract Line.
      40. Test that value of Grand Total Amount in Contr. Gain/Loss - Resp. Ctr. matches the value of Amount in corresponding
          Contract Gain/Loss Entry.
      41. Test to verify Line Dimension on Service Order with Service Line of Type Cost with Value Posting Code Mandatory after running Service Document Test report.
      42. Test to verify Line Dimension on Service Order with Service Line of Type Cost with Value Posting Blank after running Service Document Test report.
      43. Test to verify Invoice Discount Amount by printing Service Order report.
      TFS_TS_ID = 158115
      Covers Test cases:
      ----------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ----------------------------------------------------------------------------
      ServiceContractCustomer                                     128028, 139526
      ServiceItemWorksheetReport, ServiceItemWorksheetComments            139454
      MaintenanceVisitPlanningReport                                      139528
      ServiceItemsOutOfWarranty                                           139455
      ServiceItemResourceUsage, ServiceItemResourceUsageDetail            139457

      TFS_TS_ID = 230387,230376
      Cover Test cases:
      --------------------------------------
      Test Function Name             TFS ID
      --------------------------------------
      ServiceQuoteReport       139516,128062
      ServiceProfitRespCentersReport  139518

      TFS_TS_ID = 229946,230376
      Cover Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      -------------------------------------------------------------------------
      ServiceLoadLevelWithQuantity,ServiceLoadLevelWithCost              139458
      ServiceLoadLevelWithPrice                                          139458
      ServiceDocumentTestReport,ServiceDocumentErrorTest          139519,128061
      ServiceItemsReport                                                 139520
      DispatchBoardReport                                                139521
      ServiceContract                                                    139522

      TFS_TS_ID = 229948
      Cover Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      -------------------------------------------------------------------------
      ContractServiceOrdersTest                                          139535
      ContractGainLossEntries                                            139531
      MaintenancePerformanceReport                                       139530

      Covers Test Cases for WI - 230383
      -----------------------------
      Test Function Name     TFS ID
      -----------------------------
      ServiceInvoiceReport   139451
      ServiceProfitContracts 139459

      Covers Test Cases for WI - 230388
      -------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                 TFS ID
      -------------------------------------------------------------------------------------------------------------------------
      ServiceContractDetailReport                                                                                        139523
      ExpiredContractLines,ExpiredContractLinesRemoveTo,ExpiredContractLinesReasonCode                                   139534
      ContractPriceUpdateTest,ContractPriceUpdateError                                                                   139532
      PrepaidContractEntriesTest,PrepaidContractPostUntilDate,PrepaidContractPostingDate,PrepaidContrEntriesTestWarning  139533

      TFS_TS_ID = 233683
      Cover Test cases:
      -----------------------------------------------------------------
      Test Function Name                                         TFS ID
      -----------------------------------------------------------------
      ServiceContractQuoteReport, ServiceContractQuoteComment    139524
      ServiceContractQuoteDetail, ContractQuoteDetailComment     139525

      TFS_TS_ID = 230381
      Cover Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      ContractInvoicing,ContractInvoicingError,ContractInvoicingPostingDate      139372
      InvoiceToDateLaterThanWorkDate,PostingDateLaterThanWorkdate                139372
      ServiceTasksReport                                                         139449
      ServiceContractWithForecast,ServiceContractWithoutForecast                 139609

      TFS_TS_ID = 229947
      Cover Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      -------------------------------------------------------------------------
      ServiceContractSalesperson                                         139527
      ContractGainLossResponsibility                                     139529

      TFS_TS_ID = 236801
      Cover Test cases:
      -----------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -----------------------------------------------------------------------------------
      ServiceDocumentTestCodeMandatory, ServiceDocumentTestValuePostingBlank       235033

      TFS_TS_ID = 264167
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      CreateAndPrintServiceOrder                                                                                      259506
    }
    END.
  }
}

