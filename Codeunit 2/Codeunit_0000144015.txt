OBJECT Codeunit 144015 Test Preview Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibrarySetupStorage@1500015 : Codeunit 131009;
      LibraryRandom@1500039 : Codeunit 130440;
      LibraryUtility@1500009 : Codeunit 131000;
      LibraryJournals@1500006 : Codeunit 131306;
      LibraryPurchase@1500007 : Codeunit 130512;
      NoRecordsErr@1500029 : TextConst 'ENU=There are no preview records to show.';
      LibrarySales@1500018 : Codeunit 130509;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryVariableStorage@1500001 : Codeunit 131004;
      LibraryTDS@1500010 : Codeunit 143000;
      LibraryTCS@1500017 : Codeunit 143008;
      LibraryServiceTax@1500012 : Codeunit 143001;
      LibraryInventory@1500011 : Codeunit 132201;
      GenJnlPostPreview@1500008 : Codeunit 19;
      Assert@1500004 : Codeunit 130000;
      Amount@1500005 : Decimal;
      ExpectedCost@1500003 : Decimal;
      ExpectedQuantity@1500002 : Decimal;
      IsInitialized@1500016 : Boolean;
      AmountsNotEqualErr@1500019 : TextConst 'ENU=The amount in the preview page was not expected.';
      ServiceTaxNotEqualErr@1500020 : TextConst 'ENU=Service Tax Base Amount is not as expected.';

    [Test]
    PROCEDURE PurchInvoicePreviewCorrectResults@1500030();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchPostYesNo@1500001 : Codeunit 91;
      ValueEntriesPreview@1500002 : TestPage 5807;
      GLPostingPreview@1500003 : TestPage 115;
      TDSEntriesPreview@1500004 : TestPage 16374;
      ServiceTaxEntriesPreview@1500005 : TestPage 16372;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should have the expected results in the Value Entry,TDS Entry and Service Tax Entry Preview page.
      // Initialize purchase header
      Initialize;
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the preview
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.ExpectedError('');
      GLPostingPreview.CLOSE;

      // Show the pages. Verification done in page handlers.
      ValueEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Value Entry");
      TDSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TDS Entry");
      ServiceTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry");

      // Verify results
      Assert.AreEqual(ExpectedQuantity,
        ValueEntriesPreview."Valued Quantity".ASINTEGER,'Valued quantity is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,
        ValueEntriesPreview."Cost Amount (Actual)".ASDECIMAL,
        'Posted cost amount is not as expected.');
      Assert.AreEqual(0,ValueEntriesPreview."Cost Amount (Non-Invtbl.)".ASDECIMAL,'Non-inventoriable cost amount is non-zero.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,TDSEntriesPreview."TDS Base Amount".ASDECIMAL,'TDS Base Amount is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,ServiceTaxEntriesPreview."Service Tax Base Amount".ASDECIMAL,ServiceTaxNotEqualErr);

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
    END;

    [Test]
    PROCEDURE PurchOrderPreviewCorrectResults@1500031();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchPostYesNo@1500001 : Codeunit 91;
      ItemLedgerEntriesPreview@1500003 : TestPage 167;
      GLPostingPreview@1500004 : TestPage 115;
      TDSEntriesPreview@1500005 : TestPage 16374;
      ServiceTaxEntriesPreview@1500006 : TestPage 16372;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should have the expected results in the Item Ledger Entry,TDS Entry and Service Tax Entry Preview page.
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100000);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,ExpectedCost,ExpectedQuantity);

      // Execute the preview
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.ExpectedError('');
      GLPostingPreview.CLOSE;

      // Show the pages. Verification done in page handlers.
      ItemLedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Item Ledger Entry");
      TDSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TDS Entry");
      ServiceTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry");

      Assert.AreEqual(ExpectedQuantity,ItemLedgerEntriesPreview.Quantity.ASINTEGER,'Posted quantity is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,
        ItemLedgerEntriesPreview.CostAmountActual.ASDECIMAL,
        'Posted cost amount is not as expected.');
      Assert.AreEqual(0,ItemLedgerEntriesPreview.CostAmountNonInvtbl.ASDECIMAL,'Non-inventoriable cost amount is non-zero.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,TDSEntriesPreview."TDS Base Amount".ASDECIMAL,'TDS Base Amount is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,ServiceTaxEntriesPreview."Service Tax Base Amount".ASDECIMAL,ServiceTaxNotEqualErr);

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
    END;

    [Test]
    PROCEDURE TestSalesInvoicePreview@1500050();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesPostYesNo@1500001 : Codeunit 81;
      GLPostingPreview@1500002 : TestPage 115;
      CustomerEntriesPreview@1500003 : TestPage 126;
      TCSEntriesPreview@1500004 : TestPage 16375;
      ServiceTaxEntriesPreview@1500005 : TestPage 16372;
      AmountToVerify@1500006 : Decimal;
      ExpectedQuantity@1500007 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Invoice should have the expected results in the GL Entry,TCS Entry and Service Tax Entry Preview page.
      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      // Execute
      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);
      Assert.ExpectedError('');
      GLPostingPreviewHandler(GLPostingPreview);

      // Verify
      CustomerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Cust. Ledger Entry");
      CustEntriesPreviewHandler(CustomerEntriesPreview,SalesHeader."Document Type"::Invoice);
      TCSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TCS Entry");
      TCSEntriesPreviewHandler(TCSEntriesPreview,SalesHeader."Document Type"::Invoice);
      ServiceTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry");
      ServiceTaxEntriesPreviewHandler(ServiceTaxEntriesPreview,SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE TestSalesOrderPreview@1500051();
    VAR
      SalesHeader@1500001 : Record 36;
      SalesPostYesNo@1500002 : Codeunit 81;
      GLPostingPreview@1500003 : TestPage 115;
      CustomerEntriesPreview@1500004 : TestPage 126;
      TCSEntriesPreview@1500005 : TestPage 16375;
      ServiceTaxEntriesPreview@1500006 : TestPage 16372;
      AmountToVerify@1500007 : Decimal;
      ExpectedQuantity@1500008 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Order should have the expected results in the GL Entry,TCS Entry and Service Tax Entry Preview page.
      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Order);

      // Execute

      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);
      Assert.ExpectedError('');
      GLPostingPreviewHandler(GLPostingPreview);

      // Verify
      CustomerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Cust. Ledger Entry");
      CustEntriesPreviewHandler(CustomerEntriesPreview,SalesHeader."Document Type"::Invoice);
      TCSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TCS Entry");
      TCSEntriesPreviewHandler(TCSEntriesPreview,SalesHeader."Document Type"::Invoice);
      ServiceTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry");
      ServiceTaxEntriesPreviewHandler(ServiceTaxEntriesPreview,SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE JournalVoucherOpensPreview@1500000();
    VAR
      GenJournalTemplate@1500003 : Record 80;
      GenJournalLine@1500000 : Record 81;
      JournalVoucher@1500001 : TestPage 16571;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Journal Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Journal Voucher",GenJournalLine."Document Type"::Invoice,-Amount);
      COMMIT;

      // [GIVEN] Open the page Bank Payment Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      JournalVoucher.TRAP;
      JournalVoucher.OPENVIEW;
      JournalVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      JournalVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE BankPaymentVoucherOpensPreview@1500001();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      BankPaymentVoucher@1500001 : TestPage 16577;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Bank Payment Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Bank Payment Voucher",GenJournalLine."Document Type"::Payment,Amount);
      COMMIT;

      // [GIVEN] Open the page Bank Payment Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      BankPaymentVoucher.TRAP;
      BankPaymentVoucher.OPENVIEW;
      BankPaymentVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      BankPaymentVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE BankReceiptVoucherOpensPreview@1500003();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      BankReceiptVoucher@1500001 : TestPage 16569;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Bank Receipt Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Bank Receipt Voucher",GenJournalLine."Document Type"::Payment,Amount);
      COMMIT;

      // [GIVEN] Open the page Bank Receipt Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      BankReceiptVoucher.TRAP;
      BankReceiptVoucher.OPENVIEW;
      BankReceiptVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      BankReceiptVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE CashPaymentVoucherOpensPreview@1500007();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      CashPaymentVoucher@1500001 : TestPage 16576;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Cash Payment Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Cash Payment Voucher",GenJournalLine."Document Type"::Payment,Amount);
      COMMIT;

      // [GIVEN] Open the page Cash Payment Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      CashPaymentVoucher.TRAP;
      CashPaymentVoucher.OPENVIEW;
      CashPaymentVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      CashPaymentVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE CashReceiptVoucherOpensPreview@1500006();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      CashReceiptVoucher@1500001 : TestPage 16579;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Cash Receipt Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Cash Receipt Voucher",GenJournalLine."Document Type"::Payment,Amount);
      COMMIT;

      // [GIVEN] Open the page Cash Receipt Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      CashReceiptVoucher.TRAP;
      CashReceiptVoucher.OPENVIEW;
      CashReceiptVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      CashReceiptVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GenJnlLineTemplateListPageHandler)]
    PROCEDURE ContraVoucherOpensPreview@1500009();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      ContraVoucher@1500001 : TestPage 16570;
      GLPostingPreview@1500002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Contra Voucher should open G/L Posting Preview Page
      // [GIVEN] Create Gen. Journal Line.
      Amount := LibraryRandom.RandInt(1000);
      CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate."Sub Type"::"Contra Voucher",GenJournalLine."Document Type"::Payment,Amount);
      COMMIT;

      // [GIVEN] Open the page Contra Voucher.
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      ContraVoucher.TRAP;
      ContraVoucher.OPENVIEW;
      ContraVoucher.GOTORECORD(GenJournalLine);

      // [WHEN] Open Preview Posting
      GLPostingPreview.TRAP;
      ContraVoucher.Preview.INVOKE;

      // [THEN] Preview is open
      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // [THEN] Gen. Journal Line is deleted.
      RollBackJournalLines(GenJournalLine);
    END;

    [Test]
    PROCEDURE ServiceTaxEntryTest@1500024();
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
      ServiceTaxEntriesPreview@1500001 : TestPage 16372;
    BEGIN
      // [SCENARIO] Service Tax Entry is properly saved to temp tables and displayed in the preview page.
      ServiceTaxEntry.INIT;
      ServiceTaxEntry."Amount Including Service Tax" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      ServiceTaxEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ServiceTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry");

      ServiceTaxEntriesPreview.FIRST;
      Assert.AreEqual(
        ServiceTaxEntry."Amount Including Service Tax",
        ServiceTaxEntriesPreview."Amount Including Service Tax".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ServiceTaxEntryDetailsTest@1500023();
    VAR
      ServiceTaxEntryDetails@1500000 : Record 16474;
      ServTaxEntryDetailPreview@1500001 : TestPage 16373;
    BEGIN
      // [SCENARIO] Service Tax Entry Details is properly saved to temp tables and displayed in the preview page.
      ServiceTaxEntryDetails.INIT;
      ServiceTaxEntryDetails.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      ServiceTaxEntryDetails.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ServTaxEntryDetailPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Tax Entry Details");

      ServTaxEntryDetailPreview.FIRST;
      Assert.AreEqual(
        ServiceTaxEntryDetails.Amount,
        ServTaxEntryDetailPreview.Amount.ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE TDSEntryTest@1500022();
    VAR
      TDSEntry@1500002 : Record 13729;
      TDSEntriesPreview@1500003 : TestPage 16374;
    BEGIN
      // [SCENARIO] TDS Entry is properly saved to temp tables and displayed in the preview page.
      TDSEntry.INIT;
      TDSEntry."TDS Amount" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      TDSEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      TDSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TDS Entry");

      TDSEntriesPreview.FIRST;
      Assert.AreEqual(
        TDSEntry."TDS Amount",
        TDSEntriesPreview."TDS Amount".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE TCSEntryTest@1500021();
    VAR
      TCSEntry@1500002 : Record 16514;
      TCSEntriesPreview@1500003 : TestPage 16375;
    BEGIN
      // [SCENARIO] TCS Entry is properly saved to temp tables and displayed in the preview page.
      TCSEntry.INIT;
      TCSEntry."TCS Amount" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      TCSEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      TCSEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"TCS Entry");

      TCSEntriesPreview.FIRST;
      Assert.AreEqual(
        TCSEntry."TCS Amount",
        TCSEntriesPreview."TCS Amount".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE TaxEntryTest@1500018();
    VAR
      TaxEntry@1500002 : Record 13700;
      TaxEntriesPreview@1500003 : TestPage 16376;
    BEGIN
      // [SCENARIO] Tax Entry is properly saved to temp tables and displayed in the preview page.
      TaxEntry.INIT;
      TaxEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      TaxEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      TaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Tax Entry");

      TaxEntriesPreview.FIRST;
      Assert.AreEqual(
        TaxEntry.Amount,
        TaxEntriesPreview.Amount.ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE DetailedTaxEntryTest@1500016();
    VAR
      DetailedTaxEntry@1500002 : Record 16522;
      DetailedTaxEntriesPreview@1500003 : TestPage 16377;
    BEGIN
      // [SCENARIO] Detailed Tax Entry is properly saved to temp tables and displayed in the preview page.
      DetailedTaxEntry.INIT;
      DetailedTaxEntry."Tax Amount" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      DetailedTaxEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      DetailedTaxEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Detailed Tax Entry");

      DetailedTaxEntriesPreview.FIRST;
      Assert.AreEqual(
        DetailedTaxEntry."Tax Amount",
        DetailedTaxEntriesPreview."Tax Amount".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ExciseEntryTest@1500015();
    VAR
      ExciseEntry@1500002 : Record 13712;
      ExciseEntriesPreview@1500003 : TestPage 16378;
    BEGIN
      // [SCENARIO] Excise Entry is properly saved to temp tables and displayed in the preview page.
      ExciseEntry.INIT;
      ExciseEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      ExciseEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ExciseEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Excise Entry");

      ExciseEntriesPreview.FIRST;
      Assert.AreEqual(
        ExciseEntry.Amount,
        ExciseEntriesPreview.Amount.ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE RG23APartITest@1500014();
    VAR
      RG23APartI@1500002 : Record 13719;
      RG23APartIPreview@1500003 : TestPage 16379;
    BEGIN
      // [SCENARIO] RG 23 A Part I is properly saved to temp tables and displayed in the preview page.
      RG23APartI.INIT;
      RG23APartI."Quantity Consumed" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      RG23APartI.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      RG23APartIPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"RG 23 A Part I");

      RG23APartIPreview.FIRST;
      Assert.AreEqual(
        RG23APartI."Quantity Consumed",
        RG23APartIPreview."Quantity Consumed".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE RG23APartIITest@1500017();
    VAR
      RG23APartII@1500002 : Record 13720;
      RG23APartIIPreview@1500003 : TestPage 16380;
    BEGIN
      // [SCENARIO] RG 23 A Part II is properly saved to temp tables and displayed in the preview page.
      RG23APartII.INIT;
      RG23APartII."BED Credit" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      RG23APartII.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      RG23APartIIPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"RG 23 A Part II");

      RG23APartIIPreview.FIRST;
      Assert.AreEqual(
        RG23APartII."BED Credit",
        RG23APartIIPreview."BED Credit".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE RG23CPartITest@1500013();
    VAR
      RG23CPartI@1500002 : Record 13721;
      RG23CPartIPreview@1500003 : TestPage 16381;
    BEGIN
      // [SCENARIO] RG 23 C Part I is properly saved to temp tables and displayed in the preview page.
      RG23CPartI.INIT;
      RG23CPartI.Quantity := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      RG23CPartI.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      RG23CPartIPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"RG 23 C Part I");

      RG23CPartIPreview.FIRST;
      Assert.AreEqual(
        RG23CPartI.Quantity,
        RG23CPartIPreview.Quantity.ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE RG23CPartIITest@1500019();
    VAR
      RG23CPartII@1500002 : Record 13722;
      RG23CPartIIPreview@1500003 : TestPage 16382;
    BEGIN
      // [SCENARIO] RG 23 A Part II is properly saved to temp tables and displayed in the preview page.
      RG23CPartII.INIT;
      RG23CPartII."BED Credit" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      RG23CPartII.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      RG23CPartIIPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"RG 23 C Part II");

      RG23CPartIIPreview.FIRST;
      Assert.AreEqual(
        RG23CPartII."BED Credit",
        RG23CPartIIPreview."BED Credit".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE RG23DTest@1500012();
    VAR
      RG23D@1500002 : Record 16537;
      RG23DPreview@1500003 : TestPage 16383;
    BEGIN
      // [SCENARIO] RG 23 D is properly saved to temp tables and displayed in the preview page.
      RG23D.INIT;
      RG23D.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      RG23D.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      RG23DPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"RG 23 D");

      RG23DPreview.FIRST;
      Assert.AreEqual(
        RG23D.Amount,
        RG23DPreview.Amount.ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE PLAEntryTest@1500011();
    VAR
      PLAEntry@1500002 : Record 13723;
      PLAEntriesPreview@1500003 : TestPage 16384;
    BEGIN
      // [SCENARIO] PLA entry is properly saved to temp tables and displayed in the preview page.
      PLAEntry.INIT;
      PLAEntry."BED Credit Amount" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      PLAEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      PLAEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"PLA Entry");

      PLAEntriesPreview.FIRST;
      Assert.AreEqual(
        PLAEntry."BED Credit Amount",
        PLAEntriesPreview."BED Credit Amount".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    LOCAL PROCEDURE Initialize@1500052();
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      IsInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
    END;

    [ModalPageHandler]
    PROCEDURE GenJnlLineTemplateListPageHandler@1500020(VAR GenJournalTemplateList@1000 : TestPage 250);
    VAR
      TemplateName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TemplateName);
      GenJournalTemplateList.FILTER.SETFILTER(Name,TemplateName);
      GenJournalTemplateList.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1500026(VAR PurchaseHeader@1500000 : Record 38;DocumentType@1500001 : Option;ItemCost@1500002 : Decimal;Quantity@1500003 : Decimal);
    VAR
      Vendor@1500004 : Record 23;
      Item@1500005 : Record 27;
      PurchaseLine@1500006 : Record 39;
      VATPostingSetup@1500007 : Record 325;
      NodNocHeader@1500008 : Record 13786;
      TdsNatureOfDeduction@1500009 : Record 13726;
      TDSSetup@1500010 : Record 13728;
      ServiceTaxGroups@1500013 : Record 16471;
      StructureHeader@1500014 : Record 13792;
      ServiceTaxRegistrationNos@1500015 : Record 16475;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);

      CreateIncomeTaxAccountingPeriod;
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",NodNocHeader.Type::Vendor,WORKDATE);
      CreateServiceTaxInitialSetup(StructureHeader,ServiceTaxGroups,ServiceTaxRegistrationNos);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,Vendor."No.");
      PurchaseHeader.VALIDATE(Structure,StructureHeader.Code);
      PurchaseHeader.MODIFY(TRUE);

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",ItemCost);
      Item.MODIFY(TRUE);

      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Vendor."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
      IF NOT VATPostingSetup.FINDFIRST THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Vendor."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");

      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Quantity);
      IF PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::Invoice] THEN BEGIN
        PurchaseLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
        PurchaseLine.VALIDATE("Service Tax Group",ServiceTaxGroups.Code);
        PurchaseLine.VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNos.Code);
        PurchaseLine.MODIFY(TRUE);
        PurchaseLine.CalculateTDS(PurchaseHeader);
      END;
      COMMIT;
    END;

    [Normal]
    PROCEDURE CreateSalesRecord@1500053(VAR SalesHeader@1500001 : Record 36;ItemCost@1500002 : Decimal;Quantity@1500003 : Decimal;Type@1500004 : Integer);
    VAR
      Customer@1500005 : Record 18;
      Item@1500006 : Record 27;
      SalesLine@1500007 : Record 37;
      VATPostingSetup@1500008 : Record 325;
      NodNocHeader@1500009 : Record 13786;
      TcsNatureOfCollection@1500010 : Record 16507;
      TCSSetup@1500011 : Record 16508;
      AssesseeCode@1500012 : Record 13727;
      StructureHeader@1500013 : Record 13792;
      ServiceTaxGroups@1500014 : Record 16471;
      ServiceTaxRegistrationNos@1500015 : Record 16475;
      LibraryERM@1500016 : Codeunit 131300;
    BEGIN
      CreateServiceTaxInitialSetup(StructureHeader,ServiceTaxGroups,ServiceTaxRegistrationNos);
      LibraryTCS.CreateInitialSetup(
        NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,Type,NodNocHeader."No.");
      SalesHeader.VALIDATE(Structure,StructureHeader.Code);
      SalesHeader.MODIFY(TRUE);

      Customer.GET(NodNocHeader."No.");
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
      IF NOT VATPostingSetup.FINDFIRST THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Customer."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Service Tax Group",ServiceTaxGroups.Code);
      SalesLine.VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNos.Code);
      SalesLine."Unit Price" := ItemCost;
      SalesLine."Line Amount" := Quantity * SalesLine."Unit Price";
      SalesLine."Amount Including VAT" := SalesLine."Line Amount";
      SalesLine.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500010();
    VAR
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",LibraryRandom.RandDate(5));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500008(IncomeTaxAccountingPeriodNo@1500001 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500002 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := LibraryRandom.RandDate(2);
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalLine@1500025(VAR GenJournalLine@1500000 : Record 81;SubVoucherType@1500001 : Option;DocumentType@1500002 : Option;Amount@1500003 : Decimal);
    VAR
      GenJournalTemplate@1500004 : Record 80;
      GenJournalBatch@1500005 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",SubVoucherType);
      GenJournalTemplate.MODIFY;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,LibraryPurchase.CreateVendorNo,GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,Amount);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500002();
    VAR
      DeductorCategory@1500000 : Record 16498;
      CompanyInformation@1500002 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryERM.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      END;
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceTaxInitialSetup@1500004(VAR StructureHeader@1500002 : Record 13792;VAR ServiceTaxGroups@1500001 : Record 16471;VAR ServiceTaxRegistrationNos@1500003 : Record 16475);
    BEGIN
      LibraryServiceTax.CreateServiceTaxStructure(StructureHeader);
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegistrationNos);
    END;

    LOCAL PROCEDURE RollBackJournalLines@1500037(GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    PROCEDURE GLPostingPreviewHandler@1500060(VAR GLPostingPreview@1500000 : TestPage 115);
    VAR
      GLEntry@1500051 : Record 17;
      CustLedgerEntry@1500052 : Record 21;
      ItemLedgerEntry@1500053 : Record 32;
      DetailedCustLedgEntry@1500055 : Record 379;
      ValueEntry@1500056 : Record 5802;
      TCSEntry@1500057 : Record 16514;
      ServiceTaxEntry@1500058 : Record 16473;
    BEGIN
      GLPostingPreview.FIRST;
      VerifyGLPostingPreviewLine(GLPostingPreview,GLEntry.TABLECAPTION,6);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,CustLedgerEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,ItemLedgerEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,DetailedCustLedgEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,ValueEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,ServiceTaxEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,TCSEntry.TABLECAPTION,1);

      GLPostingPreview.OK.INVOKE;
    END;

    PROCEDURE CustEntriesPreviewHandler@1500054(VAR CustomerEntriesPreview@1500001 : TestPage 126;EntryType@1500002 : Integer);
    BEGIN
      CustomerEntriesPreview.FIRST;
      Assert.AreEqual(EntryType,CustomerEntriesPreview."Document Type".ASINTEGER,'Unexpected DocumentType in CustomerEntriesPreview');
      CustomerEntriesPreview.OK.INVOKE;
    END;

    PROCEDURE TCSEntriesPreviewHandler@1500055(VAR TCSEntriesPreview@1500000 : TestPage 16375;EntryType@1500001 : Integer);
    BEGIN
      TCSEntriesPreview.FIRST;
      Assert.AreEqual(EntryType,TCSEntriesPreview."Document Type".ASINTEGER,'Unexpected DocumentType in TCSEntriesPreview');
      TCSEntriesPreview.OK.INVOKE;
    END;

    PROCEDURE ServiceTaxEntriesPreviewHandler@1500056(VAR ServiceTaxEntriesPreview@1500000 : TestPage 16372;EntryType@1500001 : Integer);
    BEGIN
      ServiceTaxEntriesPreview.FIRST;
      Assert.AreEqual(
        EntryType,ServiceTaxEntriesPreview."Document Type".ASINTEGER,'Unexpected DocumentType in ServiceTaxEntriesPreview');
      ServiceTaxEntriesPreview.OK.INVOKE;
    END;

    [Normal]
    PROCEDURE VerifyGLPostingPreviewLine@1500057(GLPostingPreview@1500001 : TestPage 115;TableName@1500002 : Text;ExpectedEntryCount@1500003 : Integer);
    BEGIN
      Assert.AreEqual(TableName,GLPostingPreview."Table Name".VALUE,STRSUBSTNO('A record for Table Name %1 was not found.',TableName));
      Assert.AreEqual(ExpectedEntryCount,GLPostingPreview."No. of Records".ASINTEGER,
        STRSUBSTNO('Table Name %1 Unexpected number of records.',TableName));
    END;

    BEGIN
    {
      // [FEATURE] [Post Preview] [Purchase][Sales][Vouchers]
    }
    END.
  }
}

