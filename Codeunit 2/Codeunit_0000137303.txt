OBJECT Codeunit 137303 SCM Order Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      LibraryReportDataset@1170 : Codeunit 131007;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryManufacturing@1007 : Codeunit 132202;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1005 : Codeunit 130509;
      LibraryWarehouse@1006 : Codeunit 132204;
      LibraryVariableStorage@1002 : Codeunit 131004;
      IsInitialized@1003 : Boolean;

    [Test]
    [HandlerFunctions(WorkOrderRepRequestPageHandler)]
    PROCEDURE WorkOrderReport@2();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create Sales Order.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise : Generate the Work Order report.
      COMMIT;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      REPORT.RUN(REPORT::"Work Order",TRUE,FALSE,SalesHeader);

      // Verify : Check the value of quantity.
      VerifyQuantityOnWorkOrderReport(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ReturnOrderConfirmationRepRequestPageHandler)]
    PROCEDURE ReturnOrderConfirmationReport@5();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Exercise : Generate the Return Order Confirmation report.
      COMMIT;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      REPORT.RUN(REPORT::"Return Order Confirmation",TRUE,FALSE,SalesHeader);

      // Verify : Check the value of Quantity.
      VerifyQuantityOnReturnOrderConfReport(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ReturnOrderRequestPageHandler)]
    PROCEDURE PurchaseReturnOrderReport@7();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Setup: Create Purchase Return Order.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");

      // Exercise : Generate the Return Order report.
      COMMIT;
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      REPORT.RUN(REPORT::"Return Order",TRUE,FALSE,PurchaseHeader);

      // Verify : Check the value of Quantity and Item No.
      VerifyReturnOrder(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(BinCreationWorksheetRequestPageHandler)]
    PROCEDURE BinCreationWorksheetReport@13();
    VAR
      BinCreationWorksheetLine@1000 : Record 7338;
    BEGIN
      // Setup : Create Bin Creation Worksheet Line.
      Initialize;
      CreateBinCreationWorksheetLine(BinCreationWorksheetLine);

      // Exercise : Generate the Bin Creation Worksheet Report.
      COMMIT;
      BinCreationWorksheetLine.SETRANGE("Worksheet Template Name",BinCreationWorksheetLine."Worksheet Template Name");
      BinCreationWorksheetLine.SETRANGE(Name,BinCreationWorksheetLine.Name);
      BinCreationWorksheetLine.SETRANGE("Line No.",BinCreationWorksheetLine."Line No.");
      REPORT.RUN(REPORT::"Bin Creation Wksh. Report",TRUE,FALSE,BinCreationWorksheetLine);

      // Verify : Check the value of Maximum Volume.
      VerifyBinCreationWorksheet(BinCreationWorksheetLine);
    END;

    [Test]
    [HandlerFunctions(PhysInventoryListRequestPageHandler)]
    PROCEDURE PhyInventoryNotQtyCalculated@18();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup : Create Item Journal Line.
      Initialize;
      CreateAndModifyItemJournalLine(ItemJournalLine);

      // Exercise : Generate Physical Inventory List.
      GeneratePhysicalInventory(ItemJournalLine,FALSE);

      // Verify : Check the value of Location Code.
      VerifyLocationCode(ItemJournalLine);
    END;

    [Test]
    [HandlerFunctions(PhysInventoryListRequestPageHandler)]
    PROCEDURE PhysicalInventoryQtyCalculated@16();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup : Create Item Journal Line.
      Initialize;
      CreateAndModifyItemJournalLine(ItemJournalLine);

      // Exercise : Generate Physical Inventory List.
      GeneratePhysicalInventory(ItemJournalLine,TRUE);

      // Verify : Check the value of Quantity Calculated and Location Code.
      VerifyPhysicalInventory(ItemJournalLine);
    END;

    [Test]
    [HandlerFunctions(InventoryMovementRequestPageHandler)]
    PROCEDURE InventoryMovementWithBlank@27();
    VAR
      ItemJournalLine@1001 : Record 83;
      ActivityType@1000 : ' ,Put-away,Pick,Movement';
    BEGIN
      InventoryMovementReport(ItemJournalLine."Entry Type"::Purchase,ActivityType::" ");
    END;

    [Test]
    [HandlerFunctions(InventoryMovementRequestPageHandler)]
    PROCEDURE InventoryMovementPick@22();
    VAR
      ItemJournalLine@1000 : Record 83;
      ActivityType@1001 : ' ,Put-away,Pick,Movement';
    BEGIN
      InventoryMovementReport(ItemJournalLine."Entry Type"::Purchase,ActivityType::"Put-away");
    END;

    [Test]
    [HandlerFunctions(InventoryMovementRequestPageHandler)]
    PROCEDURE InventoryMovementPutAway@19();
    VAR
      ItemJournalLine@1001 : Record 83;
      ActivityType@1000 : ' ,Put-away,Pick,Movement';
    BEGIN
      InventoryMovementReport(ItemJournalLine."Entry Type"::Sale,ActivityType::Pick);
    END;

    [Normal]
    LOCAL PROCEDURE InventoryMovementReport@9(EntryType@1006 : Option;ActivityType@1007 : ' ,Put-away,Pick,Movement');
    VAR
      Item@1004 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1000 : Record 83;
      ItemJournalTemplate@1003 : Record 82;
    BEGIN
      // Setup: Create Item Journal Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,Item."No.",EntryType);

      // Exercise : Generate the Inventory Movement Report.
      COMMIT;
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
      LibraryVariableStorage.Enqueue(ActivityType);
      REPORT.RUN(REPORT::"Inventory Movement",TRUE,FALSE,ItemJournalLine);

      // Verify : Check the value of Quantity and Item No.
      VerifyInventoryMovement(ItemJournalLine);
    END;

    [Test]
    [HandlerFunctions(CompareListRequestPageHandler)]
    PROCEDURE ProductionBOMCompareListReport@15();
    VAR
      Item@1001 : ARRAY [4] OF Record 27;
      Count@1000 : Integer;
    BEGIN
      // Setup : Create Item  Array.
      Initialize;
      FOR Count := 1 TO ARRAYLEN(Item) DO BEGIN
        LibraryInventory.CreateItem(Item[Count]);
        Item[Count].VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
        Item[Count].VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        Item[Count].VALIDATE("Replenishment System",Item[Count]."Replenishment System"::Purchase);
        Item[Count].MODIFY(TRUE);
      END;

      // Exercise : Create Two Production BOM with Item array. Generate Compare List Report.
      CreateProductionBOMAndLine(Item,1);
      CreateProductionBOMAndLine(Item,2);
      COMMIT;
      LibraryVariableStorage.Enqueue(Item[1]."No.");
      LibraryVariableStorage.Enqueue(Item[2]."No.");
      LibraryVariableStorage.Enqueue(WORKDATE);
      REPORT.RUN(REPORT::"Compare List",TRUE,FALSE);

      // Verify: Check that the value of Unit Cost in Compare List is equal to the value of Unit Cost in corresponding Production
      // BOM Item. Check that Exploded Quantity.
      LibraryReportDataset.LoadDataSetFile;
      VerifyCompareListReport(Item[3]);
      VerifyCompareListReport(Item[4]);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndModifyItemJournalLine@11(VAR ItemJournalLine@1001 : Record 83);
    VAR
      Item@1004 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalTemplate@1003 : Record 82;
    BEGIN
      // Create Item, Create Item JOurnal Batch, Create Item Journal Line.
      LibraryInventory.CreateItem(Item);
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::"Phys. Inventory");
      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,Item."No.",ItemJournalLine."Entry Type"::Purchase);
      ItemJournalLine.VALIDATE("Phys. Inventory",TRUE);
      ItemJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateBinCreationWorksheetLine@14(VAR BinCreationWorksheetLine@1000 : Record 7338);
    VAR
      Bin@1004 : Record 7354;
      BinCreationWkshTemplate@1001 : Record 7336;
      BinCreationWkshName@1002 : Record 7337;
      Location@1003 : Record 14;
    BEGIN
      // Taking Random value for Maximum Cubage and Maximum Weight.
      BinCreationWkshTemplate.SETRANGE(Type,BinCreationWkshTemplate.Type::Bin);
      BinCreationWkshTemplate.FINDFIRST;
      BinCreationWkshName.FINDFIRST;
      Location.SETRANGE("Bin Mandatory",TRUE);
      Location.FINDFIRST;
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDFIRST;
      LibraryWarehouse.CreateBinCreationWorksheetLine(
        BinCreationWorksheetLine,BinCreationWkshTemplate.Name,BinCreationWkshName.Name,Location.Code,Bin.Code);
      BinCreationWorksheetLine.VALIDATE("Maximum Cubage",LibraryRandom.RandDec(100,2));
      BinCreationWorksheetLine.VALIDATE("Maximum Weight",LibraryRandom.RandDec(100,2));
      BinCreationWorksheetLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemJournalBatch@12(VAR ItemJournalBatch@1000 : Record 233;Type@1001 : Option);
    VAR
      ItemJournalTemplate@1002 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemJournalLine@10(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1004 : Record 233;ItemNo@1008 : Code[20];EntryType@1006 : Option);
    VAR
      Location@1007 : Record 14;
    BEGIN
      // Taking Random value for Quantity.
      Location.FINDFIRST;
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,
        ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,LibraryRandom.RandInt(10));
      ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name");
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesOrder@4(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1005 : Option);
    BEGIN
      // Taking Random value for Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseOrder@8(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;DocumentType@1005 : Option);
    BEGIN
      // Taking Random value for Quantity.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateProductionBOMAndLine@20(VAR Item@1004 : ARRAY [4] OF Record 27;Count@1000 : Integer);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1001 : Record 99000772;
      I@1003 : Integer;
    BEGIN
      // Create Production BOM Header and two Production BOM Line.
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item[Count]."Base Unit of Measure");
      Item[Count].VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item[Count].MODIFY(TRUE);

      // Create two Line of Production BOM With Random Quantity. Taking Random value for Quantity.
      FOR I := 1 TO 2 DO
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,
          Item[I + Count]."No.",LibraryRandom.RandInt(10));
    END;

    [Normal]
    LOCAL PROCEDURE GeneratePhysicalInventory@25(VAR ItemJournalLine@1000 : Record 83;ShowQtyCalculated@1002 : Boolean);
    BEGIN
      COMMIT;
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
      LibraryVariableStorage.Enqueue(ShowQtyCalculated);
      REPORT.RUN(REPORT::"Phys. Inventory List",TRUE,FALSE,ItemJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyBinCreationWorksheet@21(VAR BinCreationWorksheetLine@1000 : Record 7338);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('BinCode_BinCreateWkshLine',BinCreationWorksheetLine."Bin Code");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('MaxCubage_BinCreateWkshLine',BinCreationWorksheetLine."Maximum Cubage");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyInventoryMovement@29(ItemJournalLine@1000 : Record 83);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_ItemJournalLine',ItemJournalLine."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Qty_ItemJournalLine',ItemJournalLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('LocationCode_ItemJournalLine',ItemJournalLine."Location Code");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPhysicalInventory@26(ItemJournalLine@1002 : Record 83);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_ItemJournalLine',ItemJournalLine."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('LocCode_ItemJournalLine',ItemJournalLine."Location Code");
      LibraryReportDataset.AssertCurrentRowValue('QtyCalculated_ItemJnlLin',ItemJournalLine."Qty. (Calculated)");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLocationCode@3(ItemJournalLine@1000 : Record 83);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_ItemJournalLine',ItemJournalLine."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('LocCode_ItemJournalLine',ItemJournalLine."Location Code");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyQuantityOnWorkOrderReport@1178(SalesLine@1000 : Record 37);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_SalesLine',FORMAT(SalesLine."No."));
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Quantity_SalesLine',SalesLine.Quantity);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyQuantityOnReturnOrderConfReport@6(SalesLine@1000 : Record 37);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No2_SalesLine',FORMAT(SalesLine."No."));
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Qty_SalesLine',SalesLine.Quantity);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyReturnOrder@17(PurchaseLine@1000 : Record 39);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_PurchLine',PurchaseLine."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Quantity_PurchLine',PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyCompareListReport@31(VAR Item@1000 : Record 27);
    BEGIN
      LibraryReportDataset.SetRange('BOMMatrixListItemNo',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('CompItemUnitCost',Item."Unit Cost");
    END;

    [RequestPageHandler]
    PROCEDURE ReturnOrderConfirmationRepRequestPageHandler@1180(VAR ReturnOrderConfirmation@1000 : TestRequestPage 6631);
    BEGIN
      ReturnOrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,
        LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WorkOrderRepRequestPageHandler@1181(VAR WorkOrder@1000 : TestRequestPage 752);
    BEGIN
      WorkOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReturnOrderRequestPageHandler@48(VAR ReturnOrder@1000 : TestRequestPage 6641);
    BEGIN
      ReturnOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BinCreationWorksheetRequestPageHandler@51(VAR BinCreationWkshReport@1000 : TestRequestPage 7311);
    BEGIN
      BinCreationWkshReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CompareListRequestPageHandler@53(VAR CompareList@1000 : TestRequestPage 99000758);
    VAR
      ItemNo1@1001 : Variant;
      ItemNo2@1002 : Variant;
      CalcDate@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo1);
      LibraryVariableStorage.Dequeue(ItemNo2);
      LibraryVariableStorage.Dequeue(CalcDate);

      CompareList.ItemNo1.SETVALUE(ItemNo1);
      CompareList.ItemNo2.SETVALUE(ItemNo2);
      CompareList.CalculationDt.SETVALUE(CalcDate);

      CompareList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryMovementRequestPageHandler@56(VAR InventoryMovement@1000 : TestRequestPage 7321);
    VAR
      ActivityType@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ActivityType);
      InventoryMovement.Control1.SETVALUE(ActivityType);
      InventoryMovement.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PhysInventoryListRequestPageHandler@58(VAR PhysInventoryList@1000 : TestRequestPage 722);
    VAR
      ShowQtyCalculated@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowQtyCalculated);
      PhysInventoryList.ShowCalculatedQty.SETVALUE(ShowQtyCalculated);

      PhysInventoryList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [SCM]
      Check the functionalities of Report.
        1. Test Work Order report.
        2. Test Return Order Confirmation Report.
        3. Test Purchase Return Order Report.
        4. Test Physical Inventory report without Quantity calculated.
        5. Test Physical Inventory report with Quantity calculated.
        6. Test Bin Creation Worksheet Report.
        7. Test Inventory Movement with Blank Activity Type option.
        8. Test Inventory Movement with Pick Activity Type option.
        9. Test Inventory Movement with Put-away Activity Type option.
       10. Check that the value of Unit Cost in Compare List is equal to the value of Unit Cost in corresponding Production
           BOM Item and Exploded Quantity.

      TFS_TS_ID = 232941
        Cover Test cases:
        ----------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        ----------------------------------------------------------------------------------------
        WorkOrderReport                                                                139416
        ReturnOrderConfirmationReport                                                  139540
        PurchaseReturnOrderReport                                                      139542
        BinCreationWorksheetReport                                                     139553
        PhyInventoryNotQtyCalculated, PhysicalInventoryQtyCalculated                   139415
        InventoryMovementWithBlank, InventoryMovementPick, InventoryMovementPutAway    139557

      TFS_TS_ID = 233893
        Cover Test cases:
        ----------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        ----------------------------------------------------------------------------------------
        ProductionBOMCompareListReport                                                 141372
    }
    END.
  }
}

