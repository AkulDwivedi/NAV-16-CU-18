OBJECT Codeunit 134163 Company Init Unit Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      ValuesAreNotEqualErr@1001 : TextConst 'ENU=Values are not equal.';
      SalesCodeTxt@1139 : TextConst '@@@=Sales;ENU=SALES';
      SalesValueTxt@1138 : TextConst 'ENU=Sales';
      PurchasesCodeTxt@1137 : TextConst '@@@=Purchases;ENU=PURCHASES';
      PurchasesValueTxt@1136 : TextConst 'ENU=Purchases';
      DeleteCodeTxt@1135 : TextConst '@@@=Delete;ENU=DELETE';
      DeleteValueTxt@1134 : TextConst 'ENU=Deleted Document';
      InvPCostCodeTxt@1133 : TextConst '@@@=Post Inventory to G/L;ENU=INVTPCOST';
      InvPCostValueTxt@1132 : TextConst 'ENU=Post Inventory Cost to G/L';
      AdjExchRatesCodeTxt@1131 : TextConst '@@@=Adjust Exchange Rates;ENU=EXCHRATADJ';
      AdjExchRatesValueTxt@1130 : TextConst 'ENU=Adjust Exchange Rates';
      ClsIncStmtCodeTxt@1129 : TextConst '@@@=Close Income Statement;ENU=CLSINCOME';
      ClsIncStmtValueTxt@1128 : TextConst 'ENU=Close Income Statement';
      ConsolidationCodeTxt@1127 : TextConst '@@@=Consolidation;ENU=CONSOLID';
      ConsolidationValueTxt@1126 : TextConst 'ENU=Consolidation';
      GenJnlCodeTxt@1125 : TextConst '@@@=General Journal;ENU=GENJNL';
      GenJnlValueTxt@1124 : TextConst 'ENU=General Journal';
      SalesJnlCodeTxt@1123 : TextConst '@@@=Sales Journal;ENU=SALESJNL';
      SalesJnlValueTxt@1122 : TextConst 'ENU=Sales Journal';
      PurchaseJnlCodeTxt@1121 : TextConst '@@@=Purchase Journal;ENU=PURCHJNL';
      PurchaseJnlValueTxt@1120 : TextConst 'ENU=Purchase Journal';
      CashRcpJnlCodeTxt@1119 : TextConst '@@@=Cash Receipt Journal;ENU=CASHRECJNL';
      CashRcpJnlvalueTxt@1118 : TextConst 'ENU=Cash Receipt Journal';
      PmtJnlCodeTxt@1117 : TextConst '@@@=Payment Journal;ENU=PAYMENTJNL';
      PmtJnlValueTxt@1116 : TextConst 'ENU=Payment Journal';
      PmtReconJnlCodeTxt@1115 : TextConst '@@@=Payment Reconciliation Journal;ENU=PAYMTRECON';
      PmtReconJnlValueTxt@1114 : TextConst 'ENU=Payment Reconciliation Journal';
      ItemJnlCodeTxt@1113 : TextConst '@@@=Item Journal;ENU=ITEMJNL';
      ItemJnlValueTxt@1112 : TextConst 'ENU=Item Journal';
      PhysInvJnlCodeTxt@1111 : TextConst '@@@=Phsy Inv Journal;ENU=PHYSINVJNL';
      PhysInvJnlValueTxt@1110 : TextConst 'ENU=Phys. Inventory Journal';
      ResJnlCodeTxt@1109 : TextConst '@@@=Resource Journal;ENU=RESJNL';
      ResJnlValueTxt@1108 : TextConst 'ENU=Resource Journal';
      JobJnlCodeTxt@1107 : TextConst '@@@=Job Journal;ENU=JOBJNL';
      JobJnlValueTxt@1106 : TextConst 'ENU=Job Journal';
      SalesAppCodeTxt@1105 : TextConst '@@@=Sales Entry Application;ENU=SALESAPPL';
      SalesAppValueTxt@1104 : TextConst 'ENU=Sales Entry Application';
      PurchAppCodeTxt@1103 : TextConst '@@@=Pruchase Entry Applicaiton;ENU=PURCHAPPL';
      PurchAppValueTxt@1102 : TextConst 'ENU=Purchase Entry Application';
      VatSettleCodeTxt@1101 : TextConst '@@@=Calc. and Post VAT Settlement;ENU=VATSTMT';
      VatSettleValueTxt@1100 : TextConst 'ENU=Calc. and Post VAT Settlement';
      DateCompressGLCodeTxt@1099 : TextConst '@@@=Date Compress General Ledger;ENU=COMPRGL';
      DateCompressGLValueTxt@1098 : TextConst 'ENU=Date Compress General Ledger';
      DateCompressVatCodeTxt@1097 : TextConst '@@@=Date Compress VAT Entries;ENU=COMPRVAT';
      DateCompressVatValueTxt@1096 : TextConst 'ENU=Date Compress VAT Entries';
      DateCompressCLCodeTxt@1095 : TextConst '@@@=Data Compress Customer Ledger;ENU=COMPRCUST';
      DateCompressCLValueTxt@1094 : TextConst 'ENU=Date Compress Customer Ledger';
      DateCompressVLCodeTxt@1093 : TextConst '@@@=Date Compress Vendor Ledger;ENU=COMPRVEND';
      DateCompressVLValueTxt@1092 : TextConst 'ENU=Date Compress Vendor Ledger';
      DateCompressRLCodeTxt@1091 : TextConst '@@@=Date Compress Resource Ledger;ENU=COMPRRES';
      DateCompressRLValueTxt@1090 : TextConst 'ENU=Date Compress Resource Ledger';
      DateCompressJLCodeTxt@1089 : TextConst '@@@=Date Compress Job Ledger;ENU=COMPRJOB';
      DateCompressJLValueTxt@1088 : TextConst 'ENU=Date Compress Job Ledge';
      DateCompressBACodeTxt@1087 : TextConst '@@@=Date Comrpess Bank Acc. Ledger;ENU=COMPRBANK';
      DateCompressBAValueTxt@1086 : TextConst 'ENU=Date Compress Bank Acc. Ledger';
      DeleteCheckLedgerEntriesCodeTxt@1085 : TextConst '@@@=Date Compress Check Ledger Entries;ENU=COMPRCHECK';
      DeleteCheckLedgerEntriesValueTxt@1084 : TextConst 'ENU=Delete Check Ledger Entries';
      FinVoidCheckCodeTxt@1083 : TextConst '@@@=Financially Voided Checks;ENU=FINVOIDCHK';
      FinVoidCheckValueTxt@1082 : TextConst 'ENU=Financially Voided Check';
      ReminderCodeTxt@1081 : TextConst '@@@=Reminder;ENU=REMINDER';
      ReminderValueTxt@1080 : TextConst 'ENU=Reminder';
      FinChargeMemoCodeTxt@1079 : TextConst '@@@=Finance Charge Memo;ENU=FINCHRG';
      FinChargeMemoValueTxt@1078 : TextConst 'ENU=Finance Charge Memo';
      FAstGLJnlCodeTxt@1077 : TextConst '@@@=Fixed Asset G/L Journal;ENU=FAGLJNL';
      FAstGLJnlValueTxt@1076 : TextConst 'ENU=Fixed Asset G/L Journal';
      FAstJnlCodeTxt@1075 : TextConst '@@@=Fixed Asset Journal;ENU=FAJNL';
      FAstJnlValueTxt@1074 : TextConst 'ENU=Fixed Asset Journal';
      InsJnlCodeTxt@1073 : TextConst '@@@=Insurance journal;ENU=INSJNL';
      InsJnlValueTxt@1072 : TextConst 'ENU=Insurance Journal';
      DateCompressFALedgerCodeTxt@1071 : TextConst '@@@=Date Compress FA Ledger;ENU=COMPRFA';
      DateCompressFALedgerValueTxt@1070 : TextConst 'ENU=Date Compress FA Ledger';
      DateCompressMainLedgerCodeTxt@1069 : TextConst '@@@=Date Compress Maint. Ledger;ENU=COMPRMAINT';
      DateCompressMainLedgerValueTxt@1068 : TextConst 'ENU=Date Compress Maint. Ledger';
      DateCompressInsLedgerCodeTxt@1067 : TextConst '@@@=Date Compress Insurance Ledger;ENU=COMPRINS';
      DateCompressInsLedgerValueTxt@1066 : TextConst 'ENU=Date Compress Insurance Ledger';
      AdjRepCurrCodeTxt@1065 : TextConst '@@@=Adjust Add. Reporting Currenct6;ENU=ADJADDCURR';
      AdjRepCurrValueTxt@1064 : TextConst 'ENU=Adjust Add. Reporting Currency';
      TransferCodeTxt@1063 : TextConst '@@@=Transfer;ENU=TRANSFER';
      TransferValueTxt@1062 : TextConst 'ENU=Transfer';
      ItemReclassJnlCodeTxt@1061 : TextConst '@@@=Item Reclass jorunal;ENU=RECLASSJNL';
      ItemReclassJnlValueTxt@1060 : TextConst 'ENU=Item Reclass. Journal';
      RevalJnlCodeTxt@1059 : TextConst '@@@=Revaluation Journal;ENU=REVALJNL';
      RevalJnlValueTxt@1058 : TextConst 'ENU=Revaluation Journal';
      ConsJnlCodeTxt@1057 : TextConst '@@@=Consumption Journal;ENU=CONSUMPJNL';
      ConsJnlValueTxt@1056 : TextConst 'ENU=Consumption Journal';
      AdjCostCodeTxt@1055 : TextConst '@@@=Adjust Cost - Item Entries;ENU=INVTADJMT';
      AdjCostValueTxt@1054 : TextConst 'ENU=Adjust Cost - Item Entries';
      OutJnlCodeTxt@1053 : TextConst '@@@=Outpu Journal;ENU=POINOUTJNL';
      OutJnlValueTxt@1052 : TextConst 'ENU=Output Journal';
      CapJnlCodeTxt@1051 : TextConst '@@@=Capacity Journal;ENU=CAPACITJNL';
      CapJnlValueTxt@1050 : TextConst 'ENU=Capacity Journal';
      WhseItemJnlCodeTxt@1049 : TextConst '@@@=Whse. Item journal;ENU=WHITEM';
      WhseItemJnlValueTxt@1048 : TextConst 'ENU=Whse. Item Journal';
      WhsePhysItemJnlCodeTxt@1047 : TextConst '@@@=Whse. Phsy. Item journal;ENU=WHPHYSINVT';
      WhsePhysItemJnlValueTxt@1046 : TextConst 'ENU=Whse. Phys. Invt. Journal';
      WhseReclassJnlCodeTxt@1045 : TextConst '@@@=Whse. Reclaass. Journal;ENU=WHRCLSSJNL';
      WhseReclassJnlValueTxt@1044 : TextConst 'ENU=Whse. Reclassification Journal';
      ServiceMgtCodeTxt@1043 : TextConst '@@@=Service Management;ENU=SERVICE';
      ServiceMgtValueTxt@1042 : TextConst 'ENU=Service Management';
      TransBankRecCodeTxt@1041 : TextConst '@@@=Trans. Bank rec. to gen. jnml;ENU=BANKREC';
      TransBankRecValueTxt@1040 : TextConst 'ENU=Trans. Bank Rec. to Gen. Jnl.';
      WhsePutAwayCodeTxt@1039 : TextConst '@@@=Whse. put away;ENU=WHPUTAWAY';
      WhsePutAwayValueTxt@1038 : TextConst 'ENU=Whse. Put-away';
      WhsePickCodeTxt@1037 : TextConst '@@@=Whse pick;ENU=WHPICK';
      WhsePickValueTxt@1036 : TextConst 'ENU=Whse. Pick';
      WhseMoveCodeTxt@1035 : TextConst '@@@=Whse. movement;ENU=WHMOVEMENT';
      WhseMoveValueTxt@1034 : TextConst 'ENU=Whse. Movement';
      CompressWhseCodeTxt@1033 : TextConst '@@@=Date Compress whse entries;ENU=COMPRWHSE';
      CompressWhseValueTxt@1032 : TextConst 'ENU=Date Compress Whse. Entries';
      IntercompCodeTxt@1031 : TextConst '@@@=intercompany;ENU=INTERCOMP';
      IntercompValueTxt@1030 : TextConst 'ENU=Intercompany';
      USalesAppCodeTxt@1029 : TextConst '@@@=Unapplies sales entry application;ENU=UNAPPSALES';
      USalesAppValueTxt@1028 : TextConst 'ENU=Unapplied Sales Entry Application';
      UPurchAppCodeTxt@1027 : TextConst '@@@=Unapplied Purchase Entry Application;ENU=UNAPPPURCH';
      UPurchAppValueTxt@1026 : TextConst 'ENU=Unapplied Purchase Entry Application';
      ReversalCodeTxt@1025 : TextConst '@@@=Reversal;ENU=REVERSAL';
      ReversalValueTxt@1024 : TextConst 'ENU="Reversal Entry "';
      ProdJnlCodeTxt@1023 : TextConst '@@@=Production Journal;ENU=PRODORDER';
      ProdJnlValueTxt@1022 : TextConst 'ENU=Production Journal';
      FlushingCodeTxt@1021 : TextConst '@@@=Flushing;ENU=FLUSHING';
      FlushingValueTxt@1020 : TextConst 'ENU=Flushing';
      JobGlJnlCodeTxt@1019 : TextConst '@@@=Job G/L Journal;ENU=JOBGLJNL';
      JobGlJnlValueTxt@1018 : TextConst 'ENU=Job G/L Journal';
      WipECodeTxt@1017 : TextConst '@@@=WIP Entry;ENU=JOBGLWIP';
      WipEValueTxt@1016 : TextConst 'ENU=WIP Entry';
      CompressItemBudgetCodeTxt@1015 : TextConst '@@@="{Locked} ";ENU=COMPRIBUDG';
      CompressItemBudgetValueTxt@1014 : TextConst 'ENU=Date Compr. Item Budget Entrie';
      CashFlowWorkCodeTxt@1013 : TextConst '@@@=Uppercase of the translation of cash flow work sheet with a max of 10 char;ENU=CFWKSH';
      CashFlowWorkValueTxt@1012 : TextConst 'ENU=Cash Flow Worksheet';
      AssemblyCodeTxt@1011 : TextConst '@@@=Uppercase of the translation of assembly with a max of 10 char;ENU=ASSEMBLY';
      AssemblyValueTxt@1010 : TextConst 'ENU=Assembly';
      GLEntryCodeTxt@1009 : TextConst 'ENU=GL';
      GLEntryValueTxt@1008 : TextConst 'ENU=G/L Entry to Cost Accounting';
      CostJnlCodeTxt@1007 : TextConst '@@@=Uppercase of the translation of cost accounting journal with a max of 10 char;ENU=CAJOUR';
      CostJnlValueTxt@1006 : TextConst 'ENU=Cost Journal';
      CostAllocCodeTxt@1005 : TextConst '@@@=Uppercase of the translation of allocation with a max of 10 char;ENU=ALLOC';
      CostAllocValueTxt@1004 : TextConst 'ENU=Cost Allocation';
      TransfBudCodeTxt@1003 : TextConst '@@@=Uppercase of the translation of Transfer Budget to Actual with a max of 10 char;ENU=TRABUD';
      TransfBudValueTxt@1002 : TextConst 'ENU=Transfer Budget to Actual';
      MonthlyDeprecCodeTxt@1171 : TextConst '@@@="{Locked} ";ENU=MD';
      MonthlyDeprecValueTxt@1170 : TextConst 'ENU=Monthly Depreciation';
      ShippingChargeCodeTxt@1169 : TextConst '@@@="{Locked} ";ENU=SC';
      ShippingChargeValueTxt@1168 : TextConst 'ENU=Shipping Charge';
      SaleUContractCodeTxt@1167 : TextConst '@@@="{Locked} ";ENU=SUC';
      SaleUContractValueTxt@1166 : TextConst 'ENU=Sale under Contract';
      TravelExpensesCodeTxt@1165 : TextConst '@@@="{Locked} ";ENU=TE';
      TravelExpensesValueTxt@1164 : TextConst 'ENU=Travel Expenses';
      BankClearingStandardCode1Tok@1207 : TextConst '@@@={Locked};ENU=AustrianBankleitzahl';
      BankClearingStandardDesc1Txt@1206 : TextConst 'ENU=Austrian BLZ number';
      BankClearingStandardCode2Tok@1205 : TextConst '@@@={Locked};ENU=CanadianPaymentsARN';
      BankClearingStandardDesc2Txt@1204 : TextConst 'ENU=Canadian ARN number';
      BankClearingStandardCode3Tok@1203 : TextConst '@@@={Locked};ENU=CHIPSParticipant';
      BankClearingStandardDesc3Txt@1202 : TextConst 'ENU=American CHIPS number';
      BankClearingStandardCode4Tok@1201 : TextConst '@@@={Locked};ENU=CHIPSUniversal';
      BankClearingStandardDesc4Txt@1200 : TextConst 'ENU=American CHIPS universal number';
      BankClearingStandardCode5Tok@1199 : TextConst '@@@={Locked};ENU=ExtensiveBranchNetwork';
      BankClearingStandardDesc5Txt@1198 : TextConst 'ENU=Extensive branch network number';
      BankClearingStandardCode6Tok@1197 : TextConst '@@@={Locked};ENU=FedwireRoutingNumber';
      BankClearingStandardDesc6Txt@1196 : TextConst 'ENU=American Fedwire/ABA routing number';
      BankClearingStandardCode7Tok@1195 : TextConst '@@@={Locked};ENU=GermanBankleitzahl';
      BankClearingStandardDesc7Txt@1194 : TextConst 'ENU=German BLZ number';
      BankClearingStandardCode8Tok@1193 : TextConst '@@@={Locked};ENU=HongKongBank';
      BankClearingStandardDesc8Txt@1192 : TextConst 'ENU=Hong Kong branch number';
      BankClearingStandardCode9Tok@1191 : TextConst '@@@={Locked};ENU=IrishNSC';
      BankClearingStandardDesc9Txt@1190 : TextConst 'ENU=Irish NSC number';
      BankClearingStandardCode10Tok@1189 : TextConst '@@@={Locked};ENU=ItalianDomestic';
      BankClearingStandardDesc10Txt@1188 : TextConst 'ENU=Italian domestic code';
      BankClearingStandardCode11Tok@1187 : TextConst '@@@={Locked};ENU=NewZealandNCC';
      BankClearingStandardDesc11Txt@1186 : TextConst 'ENU=New Zealand NCC number';
      BankClearingStandardCode12Tok@1185 : TextConst '@@@={Locked};ENU=PortugueseNCC';
      BankClearingStandardDesc12Txt@1184 : TextConst 'ENU=Portuguese NCC number';
      BankClearingStandardCode13Tok@1183 : TextConst '@@@={Locked};ENU=RussianCentralBankIdentificationCode';
      BankClearingStandardDesc13Txt@1182 : TextConst 'ENU=Russian CBI code';
      BankClearingStandardCode14Tok@1181 : TextConst '@@@={Locked};ENU=SouthAfricanNCC';
      BankClearingStandardDesc14Txt@1180 : TextConst 'ENU=South African NCC number';
      BankClearingStandardCode15Tok@1179 : TextConst '@@@={Locked};ENU=SpanishDomesticInterbanking';
      BankClearingStandardDesc15Txt@1178 : TextConst 'ENU=Spanish domestic interbanking number';
      BankClearingStandardCode16Tok@1177 : TextConst '@@@={Locked};ENU=SwissBC';
      BankClearingStandardDesc16Txt@1176 : TextConst 'ENU=Swiss BC number';
      BankClearingStandardCode17Tok@1175 : TextConst '@@@={Locked};ENU=SwissSIC';
      BankClearingStandardDesc17Txt@1174 : TextConst 'ENU=Swiss SIC number';
      BankClearingStandardCode18Tok@1173 : TextConst '@@@={Locked};ENU=UKDomesticSortCode';
      BankClearingStandardDesc18Txt@1172 : TextConst 'ENU=British sorting code';
      BankDataConvPmtTypeCode1Tok@1225 : TextConst '@@@={Locked};ENU=IntAcc2Acc';
      BankDataConvPmtTypeDesc1Txt@1224 : TextConst 'ENU=International account to account transfer (standard)';
      BankDataConvPmtTypeCode2Tok@1223 : TextConst '@@@={Locked};ENU=IntAcc2AccExp';
      BankDataConvPmtTypeDesc2Txt@1222 : TextConst 'ENU=International account to account transfer (express)';
      BankDataConvPmtTypeCode3Tok@1221 : TextConst '@@@={Locked};ENU=IntAcc2AccFoFa';
      BankDataConvPmtTypeDesc3Txt@1220 : TextConst 'ENU=International account to account transfer';
      BankDataConvPmtTypeCode4Tok@1219 : TextConst '@@@={Locked};ENU=IntAcc2AccHighVal';
      BankDataConvPmtTypeDesc4Txt@1218 : TextConst 'ENU=International account to account transfer (high value)';
      BankDataConvPmtTypeCode5Tok@1217 : TextConst '@@@={Locked};ENU=IntAcc2AccInterComp';
      BankDataConvPmtTypeDesc5Txt@1216 : TextConst 'ENU=International account to account transfer (inter company)';
      BankDataConvPmtTypeCode6Tok@1215 : TextConst '@@@={Locked};ENU=DomAcc2Acc';
      BankDataConvPmtTypeDesc6Txt@1214 : TextConst 'ENU=Domestic account to account transfer';
      BankDataConvPmtTypeCode7Tok@1213 : TextConst '@@@={Locked};ENU=DomAcc2AccHighVal';
      BankDataConvPmtTypeDesc7Txt@1212 : TextConst 'ENU=Domestic account to account transfer (high value)';
      BankDataConvPmtTypeCode8Tok@1211 : TextConst '@@@={Locked};ENU=DomAcc2AccInterComp';
      BankDataConvPmtTypeDesc8Txt@1210 : TextConst 'ENU=Domestic account to account transfer (inter company)';
      BankDataConvPmtTypeCode9Tok@1209 : TextConst '@@@={Locked};ENU=EurAcc2AccSepa';
      BankDataConvPmtTypeDesc9Txt@1208 : TextConst 'ENU=SEPA credit transfer';
      SEPACTCodeTxt@1229 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT';
      SEPACTNameTxt@1228 : TextConst 'ENU=SEPA Credit Transfer';
      SEPADDCodeTxt@1227 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPADD';
      SEPADDNameTxt@1226 : TextConst 'ENU=SEPA Direct Debit';
      CompletedContractTxt@1235 : TextConst 'ENU=Completed Contract';
      CostOfSalesTxt@1234 : TextConst 'ENU=Cost of Sales';
      CostValueTxt@1233 : TextConst 'ENU=Cost Value';
      JobSalesValueTxt@1232 : TextConst 'ENU=Sales Value';
      PercentageOfCompletionTxt@1231 : TextConst 'ENU=Percentage of Completion';
      PercOfCompTxt@1230 : TextConst '@@@="{Locked} ";ENU=POC';

    [Test]
    PROCEDURE TestCompanyInitialize@1();
    BEGIN
      // Setup
      DeleteAllDataInSetupTables;
      DeleteAllDataInSourceCodeTable;
      DeleteAllStandardTexts;
      DeleteReportSelections;
      DeleteJobWIPMethods;
      DeleteBankExportImportSetup;
      DeleteBankDataConvPmtTypes;
      DeleteBankClearingStandard;
      DeleteBankDataConvSetup;
      DeleteBankPmtApplRules;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Company-Initialize");

      // Verify
      CheckAllSetupTables;
      CheckSourceCodeTable;
      CheckStandardTexts;
      CheckReportSelections;
      CheckJobWIPMethods;
      CheckBankExportImportSetup;
      CheckBankDataConvPmtTypes;
      CheckBankClearingStandards;
      CheckBankDataConvSetup;
      CheckVATRegNrValidation;
      CheckBankPmtApplRules;
    END;

    [Test]
    PROCEDURE CheckCustomerStatementReportSelection@4();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      // [SCENARIO 381259] "Mini Statement" Report should be selected for Customer Statement
      ReportSelections.SETRANGE(Usage,ReportSelections.Usage::"C.Statement");
      ReportSelections.FINDFIRST;
      ReportSelections.TESTFIELD("Report ID",REPORT::"Mini Statement");
    END;

    LOCAL PROCEDURE DeleteAllDataInSetupTables@2();
    VAR
      GLSetup@1039 : Record 98;
      SalesSetup@1038 : Record 311;
      PurchSetup@1037 : Record 312;
      InvtSetup@1036 : Record 313;
      ResourcesSetup@1035 : Record 314;
      JobsSetup@1034 : Record 315;
      HumanResourcesSetup@1033 : Record 5218;
      MarketingSetup@1032 : Record 5079;
      InteractionTemplateSetup@1031 : Record 5122;
      ServiceMgtSetup@1030 : Record 5911;
      NonstockItemSetup@1029 : Record 5719;
      FASetup@1028 : Record 5603;
      CashFlowSetup@1026 : Record 843;
      CostAccSetup@1025 : Record 1108;
      WhseSetup@1024 : Record 5769;
      AssemblySetup@1023 : Record 905;
      VATReportSetup@1022 : Record 743;
      ConfigSetup@1021 : Record 8627;
      CompanyInfo@1020 : Record 79;
      MfgSetup@1000 : Record 99000765;
    BEGIN
      GLSetup.DELETEALL;
      SalesSetup.DELETEALL;
      MarketingSetup.DELETEALL;
      InteractionTemplateSetup.DELETEALL;
      ServiceMgtSetup.DELETEALL;
      PurchSetup.DELETEALL;
      InvtSetup.DELETEALL;
      ResourcesSetup.DELETEALL;
      JobsSetup.DELETEALL;
      FASetup.DELETEALL;
      HumanResourcesSetup.DELETEALL;
      WhseSetup.DELETEALL;
      NonstockItemSetup.DELETEALL;
      CashFlowSetup.DELETEALL;
      CostAccSetup.DELETEALL;
      AssemblySetup.DELETEALL;
      VATReportSetup.DELETEALL;
      ConfigSetup.DELETEALL;
      CompanyInfo.DELETEALL;
      MfgSetup.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteAllDataInSourceCodeTable@38();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      SourceCode.DELETEALL;
      SourceCodeSetup.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteAllStandardTexts@3();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      StandardText.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteBankDataConvSetup@10();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
    BEGIN
      BankDataConvServiceSetup.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteBankClearingStandard@20();
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      BankClearingStandard.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteBankDataConvPmtTypes@34();
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      BankDataConversionPmtType.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteBankExportImportSetup@43();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      BankExportImportSetup.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteReportSelections@52();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      ReportSelections.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteJobWIPMethods@60();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      JobWIPMethod.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteBankPmtApplRules@95();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      BankPmtApplRule.DELETEALL;
    END;

    LOCAL PROCEDURE CheckAllSetupTables@13();
    VAR
      GLSetup@1019 : Record 98;
      SalesSetup@1018 : Record 311;
      PurchSetup@1017 : Record 312;
      InvtSetup@1016 : Record 313;
      ResourcesSetup@1015 : Record 314;
      JobsSetup@1014 : Record 315;
      HumanResourcesSetup@1013 : Record 5218;
      MarketingSetup@1012 : Record 5079;
      InteractionTemplateSetup@1011 : Record 5122;
      ServiceMgtSetup@1010 : Record 5911;
      NonstockItemSetup@1009 : Record 5719;
      FASetup@1008 : Record 5603;
      CashFlowSetup@1006 : Record 843;
      CostAccSetup@1005 : Record 1108;
      WhseSetup@1004 : Record 5769;
      AssemblySetup@1003 : Record 905;
      VATReportSetup@1002 : Record 743;
      ConfigSetup@1001 : Record 8627;
      CompanyInfo@1000 : Record 79;
      MfgSetup@1020 : Record 99000765;
    BEGIN
      GLSetup.FINDFIRST;
      SalesSetup.FINDFIRST;
      MarketingSetup.FINDFIRST;
      InteractionTemplateSetup.FINDFIRST;
      ServiceMgtSetup.FINDFIRST;
      PurchSetup.FINDFIRST;
      InvtSetup.FINDFIRST;
      ResourcesSetup.FINDFIRST;
      JobsSetup.FINDFIRST;
      FASetup.FINDFIRST;
      HumanResourcesSetup.FINDFIRST;
      WhseSetup.FINDFIRST;
      NonstockItemSetup.FINDFIRST;
      CashFlowSetup.FINDFIRST;
      CostAccSetup.FINDFIRST;
      AssemblySetup.FINDFIRST;
      VATReportSetup.FINDFIRST;
      ConfigSetup.FINDFIRST;
      CompanyInfo.FINDFIRST;
      MfgSetup.FINDFIRST;
    END;

    LOCAL PROCEDURE CheckSourceCodeTable@21();
    BEGIN
      CheckSourceCodeEntry(SalesCodeTxt,SalesValueTxt);
      CheckSourceCodeEntry(PurchasesCodeTxt,PurchasesValueTxt);
      CheckSourceCodeEntry(DeleteCodeTxt,DeleteValueTxt);
      CheckSourceCodeEntry(InvPCostCodeTxt,InvPCostValueTxt);
      CheckSourceCodeEntry(AdjExchRatesCodeTxt,AdjExchRatesValueTxt);
      CheckSourceCodeEntry(ClsIncStmtCodeTxt,ClsIncStmtValueTxt);
      CheckSourceCodeEntry(ConsolidationCodeTxt,ConsolidationValueTxt);
      CheckSourceCodeEntry(GenJnlCodeTxt,GenJnlValueTxt);
      CheckSourceCodeEntry(SalesJnlCodeTxt,SalesJnlValueTxt);
      CheckSourceCodeEntry(PurchaseJnlCodeTxt,PurchaseJnlValueTxt);
      CheckSourceCodeEntry(CashRcpJnlCodeTxt,CashRcpJnlvalueTxt);
      CheckSourceCodeEntry(PmtJnlCodeTxt,PmtJnlValueTxt);
      CheckSourceCodeEntry(PmtReconJnlCodeTxt,PmtReconJnlValueTxt);
      CheckSourceCodeEntry(ItemJnlCodeTxt,ItemJnlValueTxt);
      CheckSourceCodeEntry(TransferCodeTxt,TransferValueTxt);
      CheckSourceCodeEntry(ItemReclassJnlCodeTxt,ItemReclassJnlValueTxt);
      CheckSourceCodeEntry(PhysInvJnlCodeTxt,PhysInvJnlValueTxt);
      CheckSourceCodeEntry(RevalJnlCodeTxt,RevalJnlValueTxt);
      CheckSourceCodeEntry(ConsJnlCodeTxt,ConsJnlValueTxt);
      CheckSourceCodeEntry(OutJnlCodeTxt,OutJnlValueTxt);
      CheckSourceCodeEntry(ProdJnlCodeTxt,ProdJnlValueTxt);
      CheckSourceCodeEntry(CapJnlCodeTxt,CapJnlValueTxt);
      CheckSourceCodeEntry(ResJnlCodeTxt,ResJnlValueTxt);
      CheckSourceCodeEntry(JobJnlCodeTxt,JobJnlValueTxt);
      CheckSourceCodeEntry(JobGlJnlCodeTxt,JobGlJnlValueTxt);
      CheckSourceCodeEntry(WipECodeTxt,WipEValueTxt);
      CheckSourceCodeEntry(SalesAppCodeTxt,SalesAppValueTxt);
      CheckSourceCodeEntry(USalesAppCodeTxt,USalesAppValueTxt);
      CheckSourceCodeEntry(UPurchAppCodeTxt,UPurchAppValueTxt);
      CheckSourceCodeEntry(ReversalCodeTxt,ReversalValueTxt);
      CheckSourceCodeEntry(PurchAppCodeTxt,PurchAppValueTxt);
      CheckSourceCodeEntry(VatSettleCodeTxt,VatSettleValueTxt);
      CheckSourceCodeEntry(DateCompressGLCodeTxt,DateCompressGLValueTxt);
      CheckSourceCodeEntry(DateCompressVatCodeTxt,DateCompressVatValueTxt);
      CheckSourceCodeEntry(DateCompressCLCodeTxt,DateCompressCLValueTxt);
      CheckSourceCodeEntry(DateCompressVLCodeTxt,DateCompressVLValueTxt);
      CheckSourceCodeEntry(DateCompressRLCodeTxt,DateCompressRLValueTxt);
      CheckSourceCodeEntry(DateCompressJLCodeTxt,DateCompressJLValueTxt);
      CheckSourceCodeEntry(DateCompressBACodeTxt,DateCompressBAValueTxt);
      CheckSourceCodeEntry(DeleteCheckLedgerEntriesCodeTxt,DeleteCheckLedgerEntriesValueTxt);
      CheckSourceCodeEntry(FinVoidCheckCodeTxt,FinVoidCheckValueTxt);
      CheckSourceCodeEntry(ReminderCodeTxt,ReminderValueTxt);
      CheckSourceCodeEntry(FinChargeMemoCodeTxt,FinChargeMemoValueTxt);
      CheckSourceCodeEntry(TransBankRecCodeTxt,TransBankRecValueTxt);
      CheckSourceCodeEntry(FAstGLJnlCodeTxt,FAstGLJnlValueTxt);
      CheckSourceCodeEntry(FAstJnlCodeTxt,FAstJnlValueTxt);
      CheckSourceCodeEntry(InsJnlCodeTxt,InsJnlValueTxt);
      CheckSourceCodeEntry(DateCompressFALedgerCodeTxt,DateCompressFALedgerValueTxt);
      CheckSourceCodeEntry(DateCompressMainLedgerCodeTxt,DateCompressMainLedgerValueTxt);
      CheckSourceCodeEntry(DateCompressInsLedgerCodeTxt,DateCompressInsLedgerValueTxt);
      CheckSourceCodeEntry(AdjRepCurrCodeTxt,AdjRepCurrValueTxt);
      CheckSourceCodeEntry(FlushingCodeTxt,FlushingValueTxt);
      CheckSourceCodeEntry(AdjCostCodeTxt,AdjCostValueTxt);
      CheckSourceCodeEntry(CompressItemBudgetCodeTxt,CompressItemBudgetValueTxt);
      CheckSourceCodeEntry(WhseItemJnlCodeTxt,WhseItemJnlValueTxt);
      CheckSourceCodeEntry(WhsePhysItemJnlCodeTxt,WhsePhysItemJnlValueTxt);
      CheckSourceCodeEntry(WhseReclassJnlCodeTxt,WhseReclassJnlValueTxt);
      CheckSourceCodeEntry(CompressWhseCodeTxt,CompressWhseValueTxt);
      CheckSourceCodeEntry(WhsePutAwayCodeTxt,WhsePutAwayValueTxt);
      CheckSourceCodeEntry(WhsePickCodeTxt,WhsePickValueTxt);
      CheckSourceCodeEntry(WhseMoveCodeTxt,WhseMoveValueTxt);
      CheckSourceCodeEntry(ServiceMgtCodeTxt,ServiceMgtValueTxt);
      CheckSourceCodeEntry(IntercompCodeTxt,IntercompValueTxt);
      CheckSourceCodeEntry(CashFlowWorkCodeTxt,CashFlowWorkValueTxt);
      CheckSourceCodeEntry(AssemblyCodeTxt,AssemblyValueTxt);
      CheckSourceCodeEntry(GLEntryCodeTxt,GLEntryValueTxt);
      CheckSourceCodeEntry(CostJnlCodeTxt,CostJnlValueTxt);
      CheckSourceCodeEntry(CostAllocCodeTxt,CostAllocValueTxt);
      CheckSourceCodeEntry(TransfBudCodeTxt,TransfBudValueTxt);
    END;

    LOCAL PROCEDURE CheckSourceCodeEntry@58(RecCode@1000 : Code[10];Value@1001 : Text[50]);
    VAR
      SourceCode@1002 : Record 230;
    BEGIN
      SourceCode.SETRANGE(Code,RecCode);
      SourceCode.FINDFIRST;
      Assert.AreEqual(Value,SourceCode.Description,ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckStandardTexts@6();
    BEGIN
      CheckStandardTextEntry(MonthlyDeprecCodeTxt,MonthlyDeprecValueTxt);
      CheckStandardTextEntry(ShippingChargeCodeTxt,ShippingChargeValueTxt);
      CheckStandardTextEntry(SaleUContractCodeTxt,SaleUContractValueTxt);
      CheckStandardTextEntry(TravelExpensesCodeTxt,TravelExpensesValueTxt);
    END;

    LOCAL PROCEDURE CheckStandardTextEntry@7(RecCode@1001 : Code[20];Value@1002 : Text[50]);
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      StandardText.SETRANGE(Code,RecCode);
      StandardText.FINDFIRST;
      Assert.AreEqual(Value,StandardText.Description,ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckBankDataConvSetup@11();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
    BEGIN
      BankDataConvServiceSetup.FINDFIRST;
      Assert.AreEqual('http://www.amcbanking.dk/nav/register',BankDataConvServiceSetup."Signup URL",ValuesAreNotEqualErr);
      Assert.AreEqual('https://nav.amcbanking.com/nav02',BankDataConvServiceSetup."Service URL",ValuesAreNotEqualErr);
      Assert.AreEqual('http://www.amcbanking.dk/nav/support',BankDataConvServiceSetup."Support URL",ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckBankClearingStandards@22();
    BEGIN
      CheckBankClearingStandardEntry(BankClearingStandardCode1Tok,BankClearingStandardDesc1Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode2Tok,BankClearingStandardDesc2Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode3Tok,BankClearingStandardDesc3Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode4Tok,BankClearingStandardDesc4Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode5Tok,BankClearingStandardDesc5Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode6Tok,BankClearingStandardDesc6Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode7Tok,BankClearingStandardDesc7Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode8Tok,BankClearingStandardDesc8Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode9Tok,BankClearingStandardDesc9Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode10Tok,BankClearingStandardDesc10Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode11Tok,BankClearingStandardDesc11Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode12Tok,BankClearingStandardDesc12Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode13Tok,BankClearingStandardDesc13Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode14Tok,BankClearingStandardDesc14Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode15Tok,BankClearingStandardDesc15Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode16Tok,BankClearingStandardDesc16Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode17Tok,BankClearingStandardDesc17Txt);
      CheckBankClearingStandardEntry(BankClearingStandardCode18Tok,BankClearingStandardDesc18Txt);
    END;

    LOCAL PROCEDURE CheckBankClearingStandardEntry@23(RecCode@1001 : Text[50];Value@1002 : Text[80]);
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      BankClearingStandard.SETRANGE(Code,RecCode);
      BankClearingStandard.FINDFIRST;
      Assert.AreEqual(Value,BankClearingStandard.Description,ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckBankDataConvPmtTypes@35();
    BEGIN
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode1Tok,BankDataConvPmtTypeDesc1Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode2Tok,BankDataConvPmtTypeDesc2Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode3Tok,BankDataConvPmtTypeDesc3Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode4Tok,BankDataConvPmtTypeDesc4Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode5Tok,BankDataConvPmtTypeDesc5Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode6Tok,BankDataConvPmtTypeDesc6Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode7Tok,BankDataConvPmtTypeDesc7Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode8Tok,BankDataConvPmtTypeDesc8Txt);
      CheckBankDataConvPmtTypeEntry(BankDataConvPmtTypeCode9Tok,BankDataConvPmtTypeDesc9Txt);
    END;

    LOCAL PROCEDURE CheckBankDataConvPmtTypeEntry@36(RecCode@1001 : Text[50];Value@1002 : Text[80]);
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      BankDataConversionPmtType.SETRANGE(Code,RecCode);
      BankDataConversionPmtType.FINDFIRST;
      Assert.AreEqual(Value,BankDataConversionPmtType.Description,ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckBankExportImportSetup@44();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      CheckBankExportImportSetupEntry(SEPACTCodeTxt,SEPACTNameTxt,BankExportImportSetup.Direction::Export,
        CODEUNIT::"SEPA CT-Export File",XMLPORT::"SEPA CT pain.001.001.03",CODEUNIT::"SEPA CT-Check Line");
      CheckBankExportImportSetupEntry(SEPADDCodeTxt,SEPADDNameTxt,BankExportImportSetup.Direction::Export,
        CODEUNIT::"SEPA DD-Export File",XMLPORT::"SEPA DD pain.008.001.02",CODEUNIT::"SEPA DD-Check Line");
    END;

    LOCAL PROCEDURE CheckBankExportImportSetupEntry@48(RecCode@1001 : Text[20];Name@1002 : Text[100];Direction@1003 : Option;CodeunitId@1004 : Integer;XMLPortId@1005 : Integer;CheckCodeunitId@1006 : Integer);
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      BankExportImportSetup.SETRANGE(Code,RecCode);
      BankExportImportSetup.FINDFIRST;
      Assert.AreEqual(Name,BankExportImportSetup.Name,ValuesAreNotEqualErr);
      Assert.AreEqual(Direction,BankExportImportSetup.Direction,ValuesAreNotEqualErr);
      Assert.AreEqual(CodeunitId,BankExportImportSetup."Processing Codeunit ID",ValuesAreNotEqualErr);
      Assert.AreEqual(XMLPortId,BankExportImportSetup."Processing XMLport ID",ValuesAreNotEqualErr);
      Assert.AreEqual(CheckCodeunitId,BankExportImportSetup."Check Export Codeunit",ValuesAreNotEqualErr);
      Assert.AreEqual(FALSE,BankExportImportSetup."Preserve Non-Latin Characters",ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckReportSelections@53();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Quote",'1',REPORT::"Sales - Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Blanket",'1',REPORT::"Blanket Sales Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Order",'1',REPORT::"Order Confirmation");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Work Order",'1',REPORT::"Work Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Invoice",'1',REPORT::"Sales - Invoice");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Return",'1',REPORT::"Return Order Confirmation");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Cr.Memo",'1',REPORT::"Sales - Credit Memo");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Shipment",'1',REPORT::"Sales - Shipment");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Ret.Rcpt.",'1',REPORT::"Sales - Return Receipt");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Test",'1',REPORT::"Sales Document - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Quote",'1',REPORT::"Purchase - Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Blanket",'1',REPORT::"Blanket Purchase Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Order",'1',REPORT::Order);
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Invoice",'1',REPORT::"Purchase - Invoice");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Return",'1',REPORT::"Return Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Cr.Memo",'1',REPORT::"Purchase - Credit Memo");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Receipt",'1',REPORT::"Purchase - Receipt");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Ret.Shpt.",'1',REPORT::"Purchase - Return Shipment");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Test",'1',REPORT::"Purchase Document - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"B.Stmt",'1',REPORT::"Bank Account Statement");
      CheckReportSelectionEntry(ReportSelections.Usage::"B.Recon.Test",'1',REPORT::"Bank Acc. Recon. - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"B.Check",'1',REPORT::Check);
      CheckReportSelectionEntry(ReportSelections.Usage::Reminder,'1',REPORT::Reminder);
      CheckReportSelectionEntry(ReportSelections.Usage::"Fin.Charge",'1',REPORT::"Finance Charge Memo");
      CheckReportSelectionEntry(ReportSelections.Usage::"Rem.Test",'1',REPORT::"Reminder - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"F.C.Test",'1',REPORT::"Finance Charge Memo - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::Inv1,'1',REPORT::"Transfer Order");
      CheckReportSelectionEntry(ReportSelections.Usage::Inv2,'1',REPORT::"Transfer Shipment");
      CheckReportSelectionEntry(ReportSelections.Usage::Inv3,'1',REPORT::"Transfer Receipt");
      CheckReportSelectionEntry(ReportSelections.Usage::"Invt. Period Test",'1',REPORT::"Close Inventory Period - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"Prod. Order",'1',REPORT::"Prod. Order - Job Card");
      CheckReportSelectionEntry(ReportSelections.Usage::M1,'1',REPORT::"Prod. Order - Job Card");
      CheckReportSelectionEntry(ReportSelections.Usage::M2,'1',REPORT::"Prod. Order - Mat. Requisition");
      CheckReportSelectionEntry(ReportSelections.Usage::M3,'1',REPORT::"Prod. Order - Shortage List");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Quote",'1',REPORT::"Service Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Order",'1',REPORT::"Service Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Invoice",'1',REPORT::"Service - Invoice");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Credit Memo",'1',REPORT::"Service - Credit Memo");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Shipment",'1',REPORT::"Service - Shipment");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Contract Quote",'1',REPORT::"Service Contract Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Contract",'1',REPORT::"Service Contract");
      CheckReportSelectionEntry(ReportSelections.Usage::"SM.Test",'1',REPORT::"Service Document - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"Asm. Order",'1',REPORT::"Assembly Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Assembly Order",'1',REPORT::"Posted Assembly Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Test Prepmt.",'1',REPORT::"Sales Prepmt. Document Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Test Prepmt.",'1',REPORT::"Purchase Prepmt. Doc. - Test");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Arch. Quote",'1',REPORT::"Archived Sales Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Arch. Order",'1',REPORT::"Archived Sales Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Arch. Quote",'1',REPORT::"Archived Purchase Quote");
      CheckReportSelectionEntry(ReportSelections.Usage::"P.Arch. Order",'1',REPORT::"Archived Purchase Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"P. Arch. Return Order",'1',REPORT::"Arch.Purch. Return Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"S. Arch. Return Order",'1',REPORT::"Arch. Sales Return Order");
      CheckReportSelectionEntry(ReportSelections.Usage::"S.Order Pick Instruction",'1',REPORT::"Pick Instruction");
    END;

    LOCAL PROCEDURE CheckReportSelectionEntry@54(RecUsage@1001 : Integer;Sequence@1002 : Text;ReportId@1003 : Integer);
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      ReportSelections.SETRANGE(Usage,RecUsage);
      ReportSelections.FINDFIRST;
      Assert.AreEqual(Sequence,ReportSelections.Sequence,ValuesAreNotEqualErr);
      Assert.AreEqual(ReportId,ReportSelections."Report ID",ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckJobWIPMethods@61();
    VAR
      JobWIPMethod@1006 : Record 1006;
    BEGIN
      CheckJobWIPMethodEntry(CompletedContractTxt,CompletedContractTxt,JobWIPMethod."Recognized Costs"::"At Completion",
        JobWIPMethod."Recognized Sales"::"At Completion",4);
      CheckJobWIPMethodEntry(CostOfSalesTxt,CostOfSalesTxt,JobWIPMethod."Recognized Costs"::"Cost of Sales",
        JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",2);
      CheckJobWIPMethodEntry(CostValueTxt,CostValueTxt,JobWIPMethod."Recognized Costs"::"Cost Value",
        JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",0);
      CheckJobWIPMethodEntry(JobSalesValueTxt,JobSalesValueTxt,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
        JobWIPMethod."Recognized Sales"::"Sales Value",1);
      CheckJobWIPMethodEntry(PercOfCompTxt,PercentageOfCompletionTxt,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
        JobWIPMethod."Recognized Sales"::"Percentage of Completion",3);
    END;

    LOCAL PROCEDURE CheckJobWIPMethodEntry@62(RecCode@1001 : Code[20];Value@1002 : Text[50];Costs@1003 : Option;Sales@1004 : Option;SystemIndex@1005 : Integer);
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      JobWIPMethod.SETRANGE(Code,RecCode);
      JobWIPMethod.FINDFIRST;
      Assert.AreEqual(Value,JobWIPMethod.Description,ValuesAreNotEqualErr);
      Assert.AreEqual(TRUE,JobWIPMethod."WIP Cost",ValuesAreNotEqualErr);
      Assert.AreEqual(TRUE,JobWIPMethod."WIP Sales",ValuesAreNotEqualErr);
      Assert.AreEqual(Costs,JobWIPMethod."Recognized Costs",ValuesAreNotEqualErr);
      Assert.AreEqual(Sales,JobWIPMethod."Recognized Sales",ValuesAreNotEqualErr);
      Assert.AreEqual(TRUE,JobWIPMethod.Valid,ValuesAreNotEqualErr);
      Assert.AreEqual(TRUE,JobWIPMethod."System Defined",ValuesAreNotEqualErr);
      Assert.AreEqual(SystemIndex,JobWIPMethod."System-Defined Index",ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckVATRegNrValidation@73();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      Assert.AreEqual('http://ec.europa.eu/taxation_customs/vies/services/checkVatService',
        GeneralLedgerSetup."VAT Reg. No. Validation URL",ValuesAreNotEqualErr);
    END;

    LOCAL PROCEDURE CheckBankPmtApplRules@96();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,1,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,2,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,3,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,4,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,5,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,6,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,7,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,8,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,9,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::High,10,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,1,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,2,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,3,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,4,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,5,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,6,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,7,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,8,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Medium,9,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Low,1,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Low,2,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Low,3,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Low,4,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      CheckBankPmtApplRuleEntry(
        BankPmtApplRule."Match Confidence"::Low,5,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
    END;

    LOCAL PROCEDURE CheckBankPmtApplRuleEntry@101(MatchConfidence@1001 : Option;Prio@1002 : Integer;RelatedParty@1003 : Option;DocMatch@1004 : Option;AmountMatch@1005 : Option);
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      BankPmtApplRule.SETRANGE("Match Confidence",MatchConfidence);
      BankPmtApplRule.SETRANGE(Priority,Prio);
      BankPmtApplRule.SETRANGE("Related Party Matched",RelatedParty);
      BankPmtApplRule.SETRANGE("Doc. No./Ext. Doc. No. Matched",DocMatch);
      BankPmtApplRule.SETRANGE("Amount Incl. Tolerance Matched",AmountMatch);
      BankPmtApplRule.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Company-Initialize] [UT]
    }
    END.
  }
}

