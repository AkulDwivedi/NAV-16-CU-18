OBJECT Codeunit 134909 ERM Reminder/Fin.Charge Memo
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TableName@1004 : TextConst 'ENU=DocEntryTableName';
      NoOfRecords@1003 : TextConst 'ENU=DocEntryNoofRecords';
      IssuedReminderHeaderNo@1002 : TextConst 'ENU=No_IssuedReminderHeader';
      AddFeeCaption@1001 : TextConst 'ENU=AddFee_IssuedReminderHeader';
      RemAmountCaption@1000 : TextConst 'ENU=RemAmt_IssReminderHeader';
      LibraryUtility@1017 : Codeunit 131000;
      LibraryERM@1010 : Codeunit 131300;
      LibraryFinanceChargeMemo@1014 : Codeunit 131350;
      LibraryReportDataset@1009 : Codeunit 131007;
      LibrarySales@1008 : Codeunit 130509;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryRandom@1007 : Codeunit 130440;
      LibraryVariableStorage@1006 : Codeunit 131004;
      Assert@1016 : Codeunit 130000;
      IsInitialized@1005 : Boolean;
      FinChrgMemoAddFeeCaption@1013 : TextConst 'ENU=AddFee_IssuedFinChrgMemoHeader';
      FinChrgMemoRemAmountCaption@1012 : TextConst 'ENU=RmnAmt_IssuedFinChrgMemoHeader';
      IssuedFinChrgMemoHeaderNo@1011 : TextConst 'ENU=No_IssuedFinChrgMemoHeader';

    [Test]
    [HandlerFunctions(DocumentEntriesRequestPageHandler,NavigatePagehandler)]
    PROCEDURE DocumentEntriesForIssuedReminderInFCY@32();
    VAR
      IssuedReminderHeader@1007 : Record 297;
    BEGIN
      // [FEATURE] [Reminder] [FCY]
      // Verify Document Entries Report for Issued Reminder in FCY.

      // Setup and Exercise.
      DocumentEntriesForIssuedReminder(IssuedReminderHeader,FALSE);  // False for Show Amount in LCY.

      // Verify: Verify Additional Fee and Remaining Amount in FCY on Document Entries Report.
      VerifyDocumentEntries(
        IssuedReminderHeaderNo,IssuedReminderHeader."No.",AddFeeCaption,IssuedReminderHeader."Additional Fee");
      VerifyDocumentEntries(
        IssuedReminderHeaderNo,IssuedReminderHeader."No.",RemAmountCaption,IssuedReminderHeader."Remaining Amount");
    END;

    [Test]
    [HandlerFunctions(DocumentEntriesRequestPageHandler,NavigatePagehandler)]
    PROCEDURE DocumentEntriesForIssuedReminderInLCY@45();
    VAR
      IssuedReminderHeader@1007 : Record 297;
    BEGIN
      // [FEATURE] [Reminder]
      // Verify Document Entries Report for Issued Reminder in LCY.

      // Setup and Exercise.
      DocumentEntriesForIssuedReminder(IssuedReminderHeader,TRUE);  // True for Show Amount in LCY.

      // Verify: Verify Additional Fee and Remaining Amount in LCY on Document Entries Report.
      VerifyDocumentEntries(
        IssuedReminderHeaderNo,IssuedReminderHeader."No.",AddFeeCaption,
        LibraryERM.ConvertCurrency(IssuedReminderHeader."Additional Fee",IssuedReminderHeader."Currency Code",'',WORKDATE));
      VerifyDocumentEntries(
        IssuedReminderHeaderNo,IssuedReminderHeader."No.",RemAmountCaption,
        LibraryERM.ConvertCurrency(IssuedReminderHeader."Remaining Amount",IssuedReminderHeader."Currency Code",'',WORKDATE));
    END;

    [Test]
    [HandlerFunctions(DocumentEntriesRequestPageHandler,NavigatePagehandler)]
    PROCEDURE DocumentEntriesForIssuedFinanceChargeMemoInFCY@10();
    VAR
      IssuedFinChargeMemoHeader@1000 : Record 304;
    BEGIN
      // [FEATURE] [Finance Charge Memo] [FCY]
      // Verify Document Entries Report for Issued Finance Charge Memo in FCY.

      // Setup and Exercise.
      DocumentEntriesForIssuedFinanceChargeMemo(IssuedFinChargeMemoHeader,FALSE);  // False for Show Amount in LCY.

      // Verify: Verify Additional Fee and Remaining Amount in FCY on Document Entries Report.
      VerifyDocumentEntries(
        IssuedFinChrgMemoHeaderNo,IssuedFinChargeMemoHeader."No.",FinChrgMemoAddFeeCaption,
        IssuedFinChargeMemoHeader."Additional Fee");
      VerifyDocumentEntries(
        IssuedFinChrgMemoHeaderNo,IssuedFinChargeMemoHeader."No.",FinChrgMemoRemAmountCaption,
        IssuedFinChargeMemoHeader."Remaining Amount");
    END;

    [Test]
    [HandlerFunctions(DocumentEntriesRequestPageHandler,NavigatePagehandler)]
    PROCEDURE DocumentEntriesForIssuedFinanceChargeMemoInLCY@9();
    VAR
      IssuedFinChargeMemoHeader@1000 : Record 304;
    BEGIN
      // [FEATURE] [Finance Charge Memo]
      // Verify Document Entries Report for Issued Finance Charge Memo in LCY.

      // Setup and Exercise.
      DocumentEntriesForIssuedFinanceChargeMemo(IssuedFinChargeMemoHeader,TRUE);  // True for Show Amount in LCY.

      // Verify: Verify Additional Fee and Remaining Amount in LCY on Document Entries Report.
      VerifyDocumentEntries(
        IssuedFinChrgMemoHeaderNo,IssuedFinChargeMemoHeader."No.",FinChrgMemoAddFeeCaption,
        LibraryERM.ConvertCurrency(IssuedFinChargeMemoHeader."Additional Fee",IssuedFinChargeMemoHeader."Currency Code",
          '',WORKDATE));
      VerifyDocumentEntries(
        IssuedFinChrgMemoHeaderNo,IssuedFinChargeMemoHeader."No.",FinChrgMemoRemAmountCaption,
        LibraryERM.ConvertCurrency(IssuedFinChargeMemoHeader."Remaining Amount",IssuedFinChargeMemoHeader."Currency Code",
          '',WORKDATE));
    END;

    [Test]
    PROCEDURE NotDueReminderLineNotChangesLastIssuedReminderLevel@5();
    VAR
      ReminderLine@1003 : Record 296;
      Customer@1006 : Record 18;
      ReminderHeaderNo@1000 : Code[20];
      ReminderTermsCode@1005 : Code[10];
      GracePeriod@1001 : DateFormula;
      DueDateCalc@1002 : DateFormula;
    BEGIN
      // [FEATURE] [Reminder] [Sales]
      // [SCENARIO 376778] Not Due Reminder Entries do not reset Cust. Ledg. Entries "Last Issued Reminder Level"

      // [GIVEN] Reminder Terms With 2 Levels and Due Date Calc = 7D
      Initialize;
      ReminderTermsCode := CreateReminderTermsWithDueDate(2);
      CreateCustomer(Customer,'','',ReminderTermsCode);

      // [GIVEN] Posted Sales Invoice "X" with Posting Date = 26/01/17
      ReminderHeaderNo :=
        CreateAndSuggestReminderLineWithDueDate(Customer."No.");
      // [GIVEN] Issued Reminder for CLE of Invoice "X" and Posting Date = 27/01/17
      IssueReminder(ReminderHeaderNo,WORKDATE);

      // [GIVEN] Posted Sales Invoice "Y" with Posting Date = 26/01/17
      ReminderHeaderNo :=
        CreateAndSuggestReminderLineWithDueDate(Customer."No.");
      // [GIVEN] Issued Reminder (Posting Date = 27/01/17) with Suggested CLE for Sales Invoice "Y" (Reminder Level 1) and "Not Due" line for Sales Invoice "X"
      IssueReminder(ReminderHeaderNo,WORKDATE);

      // [WHEN] Suggested Reminder for Date = 09/02/17
      GetCustomerReminderLevel(GracePeriod,DueDateCalc,Customer."No.",1);
      ReminderHeaderNo :=
        CreateReminder(Customer."No.",CALCDATE(DueDateCalc,CALCDATE(DueDateCalc,FindLastSalesInvPostingDate(Customer."No."))));

      // [THEN] 2 Lines suggested with value of "No. of Reminders" = 2 for each line
      ReminderLine.INIT;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeaderNo);
      ReminderLine.SETRANGE("No. of Reminders",2);
      Assert.RecordCount(ReminderLine,2);
    END;

    [Test]
    PROCEDURE ReplaceReminderLineStandardTextWithExtText@99();
    VAR
      ReminderHeader@1000 : Record 295;
      ReminderLine@1001 : Record 296;
      StandardText@1005 : Record 7;
      ExtendedText@1002 : Text;
    BEGIN
      // [FEATURE] [Reminder] [Standard Text] [Extended Text]
      // [SCENARIO 380579] Replacing of Reminder Line's Standard Text Code updates attached Extended Text lines
      Initialize;

      // [GIVEN] Standard Text (Code = "ST1", Description = "SD1") with Extended Text "ET1".
      // [GIVEN] Standard Text (Code = "ST2", Description = "SD2") with Extended Text "ET2".
      // [GIVEN] Reminder with line: "Type" = "", "No." = "ST1"
      LibraryERM.CreateReminderHeader(ReminderHeader);
      MockReminderLine(ReminderLine,ReminderHeader);
      ValidateReminderLineStandardCode(ReminderLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [WHEN] Validate Reminder Line "No." = "ST2"
      ValidateReminderLineStandardCode(ReminderLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [THEN] There are two Reminder lines:
      // [THEN] Line1: Type = "", "No." = "ST2", Description = "SD2"
      // [THEN] Line2: Type = "", "No." = "", Description = "ET2"
      VerifyReminderLineCount(ReminderHeader,2);
      VerifyReminderLineDescription(ReminderLine,ReminderLine.Type::" ",StandardText.Code,StandardText.Description);
      ReminderLine.NEXT;
      VerifyReminderLineDescription(ReminderLine,ReminderLine.Type::" ",'',ExtendedText);
    END;

    [Test]
    PROCEDURE ReplaceFinChargeMemoLineStandardTextWithExtText@29();
    VAR
      FinanceChargeMemoHeader@1000 : Record 302;
      FinanceChargeMemoLine@1001 : Record 303;
      StandardText@1005 : Record 7;
      ExtendedText@1002 : Text;
    BEGIN
      // [FEATURE] [Finance Charge Memo] [Standard Text] [Extended Text]
      // [SCENARIO 380579] Replacing of Finance Charge Memo Line's Standard Text Code updates attached Extended Text lines
      Initialize;

      // [GIVEN] Standard Text (Code = "ST1", Description = "SD1") with Extended Text "ET1".
      // [GIVEN] Standard Text (Code = "ST2", Description = "SD2") with Extended Text "ET2".
      // [GIVEN] Finance Charge Memo with line: "Type" = "", "No." = "ST1"
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,LibrarySales.CreateCustomerNo);
      MockFinChargeMemoLine(FinanceChargeMemoLine,FinanceChargeMemoHeader);
      ValidateFinChargeMemoLineStandardCode(
        FinanceChargeMemoLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [WHEN] Validate Finance Charge Memo Line "No." = "ST2"
      ValidateFinChargeMemoLineStandardCode(
        FinanceChargeMemoLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [THEN] There are two Finance Charge Memo lines:
      // [THEN] Line1: Type = "", "No." = "ST2", Description = "SD2"
      // [THEN] Line2: Type = "", "No." = "", Description = "ET2"
      VerifyFinChargeMemoLineCount(FinanceChargeMemoHeader,2);
      VerifyFinChargeMemoLineDescription(
        FinanceChargeMemoLine,FinanceChargeMemoLine.Type::" ",StandardText.Code,StandardText.Description);
      FinanceChargeMemoLine.NEXT;
      VerifyFinChargeMemoLineDescription(FinanceChargeMemoLine,FinanceChargeMemoLine.Type::" ",'',ExtendedText);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Clear global variable.
      CLEAR(LibraryReportDataset);
      CLEAR(LibraryVariableStorage);

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@17(CustomerNo@1000 : Code[20]) : Date;
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Take Random Quantity for Sales Invoice.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(SalesHeader."Due Date");
    END;

    LOCAL PROCEDURE CreateAndSuggestReminderLineWithDueDate@18(CustomerNo@1002 : Code[20]) ReminderNo : Code[20];
    VAR
      GracePeriod@1000 : DateFormula;
      DueDateCalc@1001 : DateFormula;
      DocumentDueDate@1004 : Date;
    BEGIN
      DocumentDueDate := CreateAndPostSalesInvoice(CustomerNo);
      GetCustomerReminderLevel(GracePeriod,DueDateCalc,CustomerNo,0);
      ReminderNo := CreateReminder(CustomerNo,CALCDATE(DueDateCalc,DocumentDueDate));
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@1(VAR Customer@1000 : Record 18;FinChargeTermsCode@1001 : Code[10];CurrencyCode@1002 : Code[10];ReminderTermsCode@1003 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.VALIDATE("Reminder Terms Code",ReminderTermsCode);
      Customer.VALIDATE("Fin. Charge Terms Code",FinChargeTermsCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminder@11(CustomerNo@1001 : Code[20];DocumentDate@1002 : Date) : Code[20];
    VAR
      Customer@1007 : Record 18;
      ReminderHeader@1003 : Record 295;
      CreateReminders@1000 : Report 188;
    BEGIN
      CLEAR(CreateReminders);
      Customer.SETRANGE("No.",CustomerNo);
      CreateReminders.SETTABLEVIEW(Customer);
      CreateReminders.InitializeRequest(DocumentDate,DocumentDate,FALSE,FALSE,FALSE);
      CreateReminders.USEREQUESTPAGE(FALSE);
      CreateReminders.RUN;
      ReminderHeader.SETRANGE("Customer No.",CustomerNo);
      ReminderHeader.SETRANGE("Document Date",DocumentDate);
      ReminderHeader.FINDLAST;
      EXIT(ReminderHeader."No.");
    END;

    LOCAL PROCEDURE CreateReminderLevel@3(ReminderTermsCode@1000 : Code[10]);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      // Create Reminder Level with a Random Grace Period and Random Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(10));
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTerms@4() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevel(ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderLevelWithDueDate@12(ReminderTermsCode@1000 : Code[10]);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTermsWithDueDate@25(Levels@1001 : Integer) : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
      i@1002 : Integer;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      FOR i := 1 TO Levels DO
        CreateReminderLevelWithDueDate(ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateSuggestFinanceChargeMemo@13(VAR FinanceChargeMemoHeader@1002 : Record 302;CustomerNo@1004 : Code[20];DocumentDate@1001 : Date);
    BEGIN
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,CustomerNo);
      FinanceChargeMemoHeader.VALIDATE("Document Date",DocumentDate);
      FinanceChargeMemoHeader.MODIFY(TRUE);
      SuggestFinanceChargeMemoLines(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE MockReminderLine@123(VAR ReminderLine@1000 : Record 296;ReminderHeader@1001 : Record 295);
    BEGIN
      WITH ReminderLine DO BEGIN
        "Reminder No." := ReminderHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(ReminderLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockFinChargeMemoLine@33(VAR FinanceChargeMemoLine@1000 : Record 303;FinanceChargeMemoHeader@1001 : Record 302);
    BEGIN
      WITH FinanceChargeMemoLine DO BEGIN
        "Finance Charge Memo No." := FinanceChargeMemoHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(FinanceChargeMemoLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ValidateReminderLineStandardCode@130(VAR ReminderLine@1000 : Record 296;StandardTextCode@1001 : Code[20]);
    VAR
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      ReminderLine.VALIDATE("No.",StandardTextCode);
      ReminderLine.MODIFY(TRUE);
      TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE);
      TransferExtendedText.InsertReminderExtText(ReminderLine);
    END;

    LOCAL PROCEDURE ValidateFinChargeMemoLineStandardCode@37(VAR FinanceChargeMemoLine@1000 : Record 303;StandardTextCode@1001 : Code[20]);
    VAR
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      FinanceChargeMemoLine.VALIDATE("No.",StandardTextCode);
      FinanceChargeMemoLine.MODIFY(TRUE);
      TransferExtendedText.FinChrgMemoCheckIfAnyExtText(FinanceChargeMemoLine,FALSE);
      TransferExtendedText.InsertFinChrgMemoExtText(FinanceChargeMemoLine);
    END;

    LOCAL PROCEDURE DocumentEntriesForIssuedReminder@34(VAR IssuedReminderHeader@1007 : Record 297;ShowInLCY@1011 : Boolean);
    VAR
      Customer@1003 : Record 18;
      ReminderLevel@1001 : Record 293;
      IssuedReminder@1005 : TestPage 438;
      IssuedReminderPage@1002 : Page 438;
      DueDate@1000 : Date;
      DocumentDate@1004 : Date;
      IssuedReminderNo@1006 : Code[20];
      ReminderNo@1010 : Code[20];
    BEGIN
      // Setup: Create Customer. Create and post Sales Invoice.
      Initialize;
      CreateCustomer(Customer,'',CreateCurrency,CreateReminderTerms);
      DueDate := CreateAndPostSalesInvoice(Customer."No.");
      GetReminderLevel(ReminderLevel,Customer."Reminder Terms Code",0);

      // Use Random Integer value to calculate Document date.
      DocumentDate :=
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',CALCDATE(ReminderLevel."Grace Period",DueDate));

      // Create and Issue the Reminder.
      ReminderNo := CreateReminder(Customer."No.",DocumentDate);
      IssuedReminderNo := IssueReminder(ReminderNo,DocumentDate);
      LibraryVariableStorage.Enqueue(ShowInLCY);  // Enqueue value for DocumentEntriesRequestPageHandler.
      IssuedReminder.OPENVIEW;
      IssuedReminder.FILTER.SETFILTER("No.",IssuedReminderNo);

      // Exercise: Run Document Entries Report from NavigatePagehandler.
      IssuedReminder.Action30.INVOKE;  // Invoking Navigate.

      // Verify: Verify Issued Reminder Table Name and number of Records on Document Entries Report.
      LibraryReportDataset.LoadDataSetFile;
      IssuedReminderHeader.SETRANGE("No.",IssuedReminderNo);
      VerifyDocumentEntries(TableName,IssuedReminderPage.CAPTION,NoOfRecords,IssuedReminderHeader.COUNT);
      IssuedReminderHeader.FINDFIRST;
      IssuedReminderHeader.CALCFIELDS("Additional Fee","Remaining Amount");
    END;

    LOCAL PROCEDURE DocumentEntriesForIssuedFinanceChargeMemo@7(VAR IssuedFinChargeMemoHeader@1007 : Record 304;ShowInLCY@1011 : Boolean);
    VAR
      Customer@1001 : Record 18;
      FinanceChargeMemoHeader@1004 : Record 302;
      FinanceChargeTerms@1000 : Record 5;
      IssuedFinanceChargeMemo@1005 : TestPage 450;
      IssuedFinanceChargeMemoPage@1006 : Page 450;
      DueDate@1003 : Date;
    BEGIN
      // Setup: Create Finance Charge Terms and Customer. Create and post Sales Invoice. Calculated Document Date.
      Initialize;
      LibraryFinanceChargeMemo.CreateFinanceChargeTermAndText(FinanceChargeTerms);
      CreateCustomer(Customer,FinanceChargeTerms.Code,CreateCurrency,CreateReminderTerms);
      DueDate := CreateAndPostSalesInvoice(Customer."No.");

      // Create Finance Charge Memo and Suggest Lines for Customer. Issue Finance Charge Memo. Take Random integer to calculate Date.
      CreateSuggestFinanceChargeMemo(
        FinanceChargeMemoHeader,Customer."No.",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',
          CALCDATE(FinanceChargeTerms."Grace Period",DueDate)));
      IssuingFinanceChargeMemos(FinanceChargeMemoHeader."No.");
      LibraryVariableStorage.Enqueue(ShowInLCY);  // Enqueue value for DocumentEntriesRequestPageHandler.
      IssuedFinanceChargeMemo.OPENVIEW;
      IssuedFinanceChargeMemo.FILTER.SETFILTER("Pre-Assigned No.",FinanceChargeMemoHeader."No.");

      // Exercise: Run Document Entries Report from NavigatePagehandler.
      IssuedFinanceChargeMemo.Action30.INVOKE;  // Invoking Navigate.

      // Verify: Verify Issued Reminder Table Name and number of Records on Document Entries Report.
      LibraryReportDataset.LoadDataSetFile;
      IssuedFinChargeMemoHeader.SETRANGE("Pre-Assigned No.",FinanceChargeMemoHeader."No.");
      VerifyDocumentEntries(TableName,IssuedFinanceChargeMemoPage.CAPTION,NoOfRecords,IssuedFinChargeMemoHeader.COUNT);
      IssuedFinChargeMemoHeader.FINDFIRST;
      IssuedFinChargeMemoHeader.CALCFIELDS("Additional Fee","Remaining Amount");
    END;

    LOCAL PROCEDURE CreateItem@21() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2));
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE FindLastSalesInvPostingDate@61(CustomerNo@1000 : Code[20]) : Date;
    VAR
      SalesInvHeader@1001 : Record 112;
    BEGIN
      SalesInvHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesInvHeader.FINDLAST;
      EXIT(SalesInvHeader."Posting Date");
    END;

    LOCAL PROCEDURE GetReminderLevel@15(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1000 : Code[10];Shift@1002 : Integer);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDFIRST;
      ReminderLevel.NEXT(Shift);
    END;

    LOCAL PROCEDURE GetCustomerReminderLevel@16(VAR GracePeriod@1003 : DateFormula;VAR DueDateCalc@1004 : DateFormula;CustomerNo@1000 : Code[20];Shift@1005 : Integer);
    VAR
      Customer@1002 : Record 18;
      ReminderLevel@1001 : Record 293;
    BEGIN
      Customer.GET(CustomerNo);
      GetReminderLevel(ReminderLevel,Customer."Reminder Terms Code",Shift);
      GracePeriod := ReminderLevel."Grace Period";
      DueDateCalc := ReminderLevel."Due Date Calculation"
    END;

    LOCAL PROCEDURE IssuingFinanceChargeMemos@19(FinanceChargeMemoHeaderNo@1002 : Code[20]);
    VAR
      FinanceChargeMemoHeader@1001 : Record 302;
    BEGIN
      FinanceChargeMemoHeader.GET(FinanceChargeMemoHeaderNo);
      LibraryERM.IssueFinanceChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE IssueReminder@6(ReminderNo@1002 : Code[20];DocumentDate@1004 : Date) IssuedReminderNo : Code[20];
    VAR
      ReminderHeader@1003 : Record 295;
      ReminderIssue@1000 : Codeunit 393;
      NoSeriesManagement@1005 : Codeunit 396;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      IssuedReminderNo := NoSeriesManagement.GetNextNo(ReminderHeader."Issuing No. Series",WORKDATE,FALSE);
      ReminderIssue.Set(ReminderHeader,FALSE,DocumentDate);
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE SuggestFinanceChargeMemoLines@14(FinanceChargeMemoHeader@1000 : Record 302);
    VAR
      SuggestFinChargeMemoLines@1001 : Report 192;
    BEGIN
      FinanceChargeMemoHeader.SETRANGE("No.",FinanceChargeMemoHeader."No.");
      SuggestFinChargeMemoLines.SETTABLEVIEW(FinanceChargeMemoHeader);
      SuggestFinChargeMemoLines.USEREQUESTPAGE(FALSE);
      SuggestFinChargeMemoLines.RUN;
    END;

    LOCAL PROCEDURE VerifyDocumentEntries@62(RowCaption@1003 : Text[50];RowValue@1002 : Variant;ColumnCaption@1001 : Text[50];ColumnValue@1000 : Variant);
    BEGIN
      LibraryReportDataset.SetRange(RowCaption,RowValue);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(ColumnCaption,ColumnValue);
    END;

    LOCAL PROCEDURE VerifyReminderLineCount@149(ReminderHeader@1000 : Record 295;ExpectedCount@1001 : Integer);
    VAR
      DummyReminderLine@1002 : Record 296;
    BEGIN
      DummyReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      Assert.RecordCount(DummyReminderLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyFinChargeMemoLineCount@43(FinanceChargeMemoHeader@1000 : Record 302;ExpectedCount@1001 : Integer);
    VAR
      DummyFinanceChargeMemoLine@1002 : Record 303;
    BEGIN
      DummyFinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoHeader."No.");
      Assert.RecordCount(DummyFinanceChargeMemoLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyReminderLineDescription@153(ReminderLine@1000 : Record 296;ExpectedType@1002 : Option;ExpectedNo@1001 : Code[20];ExpectedDescription@1003 : Text);
    BEGIN
      WITH ReminderLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    LOCAL PROCEDURE VerifyFinChargeMemoLineDescription@42(FinanceChargeMemoLine@1000 : Record 303;ExpectedType@1002 : Option;ExpectedNo@1001 : Code[20];ExpectedDescription@1003 : Text);
    BEGIN
      WITH FinanceChargeMemoLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    [RequestPageHandler]
    PROCEDURE DocumentEntriesRequestPageHandler@52(VAR DocumentEntries@1000 : TestRequestPage 35);
    VAR
      ShowAmountInLCY@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountInLCY);  // Dequeue variable.
      DocumentEntries.Control3.SETVALUE(ShowAmountInLCY);   // Setting Show Amount In LCY.
      DocumentEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [PageHandler]
    PROCEDURE NavigatePagehandler@41(VAR Navigate@1000 : TestPage 344);
    BEGIN
      COMMIT;  // Required to run the Document Entries report.
      Navigate.Print.INVOKE;
    END;

    BEGIN
    {
      Test Reminder/Finance Charge Memo with LCY and FCY for a Customer.
        1. Verify Document Entries Report for Issued Reminder in FCY.
        2. Verify Document Entries Report for Issued Reminder in LCY.
        3. Verify Document Entries Report for Issued Finance Charge Memo in FCY.
        4. Verify Document Entries Report for Issued Finance Charge Memo in LCY.

        TFS_TS_ID = 326253
        Covers Test Cases
        ---------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                TFS ID
        ---------------------------------------------------------------------------------------------------------
        DocumentEntriesForIssuedReminderInFCY, DocumentEntriesForIssuedReminderInLCY,
        DocumentEntriesForIssuedFinanceChargeMemoInFCY, DocumentEntriesForIssuedFinanceChargeMemoInLCY    139311
    }
    END.
  }
}

