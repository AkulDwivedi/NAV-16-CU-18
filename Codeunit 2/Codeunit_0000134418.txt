OBJECT Codeunit 134418 Inc Doc Attachment Overview UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1005 : Codeunit 131000;
      LibraryERM@1001 : Codeunit 131300;
      LibraryERMCountryData@1006 : Codeunit 131305;
      LibraryPurchase@1008 : Codeunit 130512;
      LibraryInventory@1003 : Codeunit 132201;
      Assert@1000 : Codeunit 130000;
      SupportingAttachmentsTxt@1007 : TextConst 'ENU=Supporting Attachments';
      Initialized@1004 : Boolean;

    LOCAL PROCEDURE Initialize@12();
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      IF Initialized THEN
        EXIT;

      Initialized := TRUE;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryInventory.NoSeriesSetup(InventorySetup);
    END;

    [Test]
    PROCEDURE TestFieldDefinitionsMatch@15();
    VAR
      IncDocAttachmentOverviewRecRef@1001 : RecordRef;
      IncDocAttachmentRecRef@1003 : RecordRef;
      CommonFieldRefArray@1000 : ARRAY [7] OF FieldRef;
      IncDocumentSpecificFieldRefArray@1002 : ARRAY [3] OF FieldRef;
    BEGIN
      Initialize;
      GetCommonFields(CommonFieldRefArray);
      GetIncDocAttachmentOverviewSpecificFields(IncDocumentSpecificFieldRefArray);

      IncDocAttachmentOverviewRecRef.OPEN(DATABASE::"Inc. Doc. Attachment Overview");
      IncDocAttachmentRecRef.OPEN(DATABASE::"Incoming Document Attachment");

      VerifyFieldDefinitionsMatchTableFields(IncDocAttachmentOverviewRecRef,CommonFieldRefArray);
      VerifySpecificFieldsNotPresentInMainTable(IncDocAttachmentRecRef,IncDocumentSpecificFieldRefArray);

      Assert.AreEqual(
        IncDocAttachmentOverviewRecRef.FIELDCOUNT,ARRAYLEN(CommonFieldRefArray) + ARRAYLEN(IncDocumentSpecificFieldRefArray),
        'Table Definitions do not match');
    END;

    [Test]
    PROCEDURE TestLoadFromIncomingDocumentNoAttachments@5();
    VAR
      IncomingDocument@1000 : Record 130;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
    BEGIN
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);

      Assert.IsFalse(TempIncDocAttachmentOverview.FINDFIRST,'Table should be empty');
    END;

    [Test]
    PROCEDURE TestLoadFormIncomingDocumentURLOnly@39();
    VAR
      IncomingDocument@1000 : Record 130;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
      DocumentURL@1003 : Text;
    BEGIN
      // Setup
      Initialize;
      DocumentURL := LibraryUtility.GenerateRandomText(300);
      CreateIncomingDocument(IncomingDocument,DocumentURL);

      // Execute
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);

      // Verify
      Assert.IsTrue(TempIncDocAttachmentOverview.FIND('-'),'There should be only one record in TempTable');
      Assert.AreEqual(TempIncDocAttachmentOverview."Sorting Order",1,'Sorting order was not set correctly');
      Assert.AreEqual(
        TempIncDocAttachmentOverview."Incoming Document Entry No.",IncomingDocument."Entry No.",'Entry No. Does not match');
      Assert.AreEqual(TempIncDocAttachmentOverview."Line No.",0,'Line No. does not match');
      Assert.AreEqual(
        TempIncDocAttachmentOverview.Name,COPYSTR(IncomingDocument.GetURL,1,MAXSTRLEN(TempIncDocAttachmentOverview.Name)),
        'Name was not set correctly');
      Assert.AreEqual(TempIncDocAttachmentOverview.Type,TempIncDocAttachmentOverview.Type::" ",'Type was not set correctly');
      Assert.AreEqual(
        TempIncDocAttachmentOverview."Attachment Type",TempIncDocAttachmentOverview."Attachment Type"::Link,
        'URL was not set correcly');
      Assert.AreEqual(TempIncDocAttachmentOverview.Indentation,0,'Indentation was not set correctly');

      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT = 0,'There should be only one record in the TempTable');
    END;

    [Test]
    PROCEDURE TestLoadFromIncomingDocumentSingleAttachment@45();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
      DocumentURL@1003 : Text;
    BEGIN
      // Setup
      Initialize;
      DocumentURL := '';
      CreateIncomingDocument(IncomingDocument,DocumentURL);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);

      // Execute
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);

      // Verify
      Assert.IsTrue(TempIncDocAttachmentOverview.FIND('-'),'There should be only one record in TempTable');
      VerifyLineMatchesIncomingDocumentAttachment(TempIncDocAttachmentOverview,IncomingDocumentAttachment,1,0);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT = 0,'There should be only one record in the TempTable');
    END;

    [Test]
    PROCEDURE TestLoadFromIncomingDocumentMultipleAttachments@57();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      IncomingDocumentAttachment2@1004 : Record 133;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
      DocumentURL@1003 : Text;
      SortingOrder@1005 : Integer;
    BEGIN
      // Setup
      Initialize;
      DocumentURL := '';
      CreateIncomingDocument(IncomingDocument,DocumentURL);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment2);

      // Execute
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);

      // Verify
      SortingOrder := 1;
      Assert.IsTrue(TempIncDocAttachmentOverview.FIND('-'),'Temp table should not be empty');
      VerifyLineMatchesIncomingDocumentAttachment(TempIncDocAttachmentOverview,IncomingDocumentAttachment,SortingOrder,0);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT <> 0,'There should be more records in the temp table');

      SortingOrder += 1;
      VerifyGroupLine(TempIncDocAttachmentOverview,IncomingDocument,SortingOrder);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT <> 0,'There should be more records in the temp table');

      SortingOrder += 1;
      VerifyLineMatchesIncomingDocumentAttachment(TempIncDocAttachmentOverview,IncomingDocumentAttachment2,SortingOrder,1);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT = 0,'There should not be more records in the temp table');
    END;

    [Test]
    PROCEDURE TestLoadDifferentDocuments@81();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocument2@1006 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      IncomingDocumentAttachment2@1004 : Record 133;
      IncomingDocumentAttachment3@1007 : Record 133;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
      DocumentURL@1003 : Text;
      SortingOrder@1005 : Integer;
    BEGIN
      // Setup
      Initialize;
      DocumentURL := '';
      CreateIncomingDocument(IncomingDocument2,DocumentURL);
      CreateIncomingDocumentAttachment(IncomingDocument2,IncomingDocumentAttachment3);

      CreateIncomingDocument(IncomingDocument,DocumentURL);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment2);

      // Execute
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument2,TempIncDocAttachmentOverview);
      TempIncDocAttachmentOverview.DELETEALL;
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);

      // Verify
      SortingOrder := 1;
      Assert.IsTrue(TempIncDocAttachmentOverview.FIND('-'),'Temp table should not be empty');
      VerifyLineMatchesIncomingDocumentAttachment(TempIncDocAttachmentOverview,IncomingDocumentAttachment,SortingOrder,0);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT <> 0,'There should be more records in the temp table');

      SortingOrder += 1;
      VerifyGroupLine(TempIncDocAttachmentOverview,IncomingDocument,SortingOrder);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT <> 0,'There should be more records in the temp table');

      SortingOrder += 1;
      VerifyLineMatchesIncomingDocumentAttachment(TempIncDocAttachmentOverview,IncomingDocumentAttachment2,SortingOrder,1);
      Assert.IsTrue(TempIncDocAttachmentOverview.NEXT = 0,'There should not be more records in the temp table');
    END;

    [Test]
    PROCEDURE TestDeleteRemovesIncomingDocumentAttachment@28();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      IncomingDocumentAttachment2@1004 : Record 133;
      TempIncDocAttachmentOverview@1001 : TEMPORARY Record 137;
      DocumentURL@1003 : Text;
    BEGIN
      // Setup
      Initialize;
      DocumentURL := '';
      CreateIncomingDocument(IncomingDocument,DocumentURL);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment2);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);

      // Execute
      TempIncDocAttachmentOverview.InsertFromIncomingDocument(IncomingDocument,TempIncDocAttachmentOverview);
      TempIncDocAttachmentOverview.DELETE(TRUE);

      // Verify
      Assert.IsFalse(
        IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No."),
        'Deleting an overview line should remove a permanent line');
    END;

    [Test]
    PROCEDURE TestFactBoxLoadFromPostedDocument@2();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      VendorLedgerEntry@1001 : Record 25;
      PurchInvHeader@1003 : Record 122;
      PostedPurchaseInvoice@1004 : TestPage 138;
      VendorLedgerEntries@1005 : TestPage 29;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreatePurchaseInvoiceAndPost(VendorLedgerEntry,IncomingDocument);
      PurchInvHeader.GET(VendorLedgerEntry."Document No.");

      // Execute
      PostedPurchaseInvoice.OPENEDIT;
      PostedPurchaseInvoice.GOTORECORD(PurchInvHeader);

      VendorLedgerEntries.OPENEDIT;
      VendorLedgerEntries.GOTORECORD(VendorLedgerEntry);

      // Verify
      Assert.AreEqual(
        PostedPurchaseInvoice.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment.Name,'Name value should be set');
      Assert.IsFalse(PostedPurchaseInvoice.IncomingDocAttachFactBox.NEXT,'There should not be more records');

      Assert.AreEqual(
        VendorLedgerEntries.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment.Name,'Name value should be set');
      Assert.IsFalse(VendorLedgerEntries.IncomingDocAttachFactBox.NEXT,'There should not be more records');
    END;

    [Test]
    PROCEDURE TestFactBoxLoadFromNotPostedDocument@54();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      PurchaseHeader@1003 : Record 38;
      PurchaseInvoice@1004 : TestPage 51;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreatePurchaseInvoice(PurchaseHeader,IncomingDocument);

      // Execute
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);

      // Verify
      Assert.AreEqual(PurchaseInvoice.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment.Name,'Name value should be set');
      Assert.IsFalse(PurchaseInvoice.IncomingDocAttachFactBox.NEXT,'There should not be more records');
    END;

    [Test]
    PROCEDURE TestFactBoxLoadFromJournalLine@19();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      IncomingDocumentAttachment2@1005 : Record 133;
      GenJournalLine@1003 : Record 81;
      GeneralJournal@1004 : TestPage 39;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment2);
      CreateGenJournalLine(GenJournalLine,IncomingDocument);

      // Execute
      GeneralJournal.OPENEDIT;
      GeneralJournal.GOTORECORD(GenJournalLine);

      // Verify
      GeneralJournal.IncomingDocAttachFactBox.FIRST;
      Assert.AreEqual(GeneralJournal.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment.Name,'Name value should be set');
      Assert.IsTrue(GeneralJournal.IncomingDocAttachFactBox.NEXT,'There should be more records');
      Assert.IsTrue(GeneralJournal.IncomingDocAttachFactBox.NEXT,'There should be more records');
      Assert.AreEqual(GeneralJournal.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment2.Name,'Name value should be set');
    END;

    [Test]
    PROCEDURE TestFactBoxNoIncomingDocuments@41();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      PurchaseHeader@1003 : Record 38;
      PurchaseInvoice@1004 : TestPage 51;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreatePurchaseInvoice(PurchaseHeader,IncomingDocument);
      IncomingDocument.Reject;
      IncomingDocument.DELETE(TRUE);

      // Execute
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);

      // Verify
      Assert.IsFalse(PurchaseInvoice.IncomingDocAttachFactBox.NEXT,'There should not be any records');
    END;

    [Test]
    PROCEDURE TestFactBoxIncomingDocument@48();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      IncomingDocuments@1004 : TestPage 190;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);

      // Execute
      IncomingDocuments.OPENEDIT;
      IncomingDocuments.GOTORECORD(IncomingDocument);

      // Verify
      Assert.AreEqual(
        IncomingDocuments.IncomingDocAttachFactBox.Name.VALUE,IncomingDocumentAttachment.Name,'Name value should be set');
      Assert.IsFalse(IncomingDocuments.IncomingDocAttachFactBox.NEXT,'There should not be more records');
    END;

    [Test]
    [HandlerFunctions(DeleteIncomingDocumentHandler)]
    PROCEDURE TestFactBoxUpdatedAfterDeletingDocument@21();
    VAR
      IncomingDocument@1002 : Record 130;
      IncomingDocumentAttachment@1000 : Record 133;
      PurchaseHeader@1003 : Record 38;
      PurchaseInvoice@1004 : TestPage 51;
    BEGIN
      // Setup
      Initialize;
      CreateIncomingDocument(IncomingDocument,'');
      CreateIncomingDocumentAttachment(IncomingDocument,IncomingDocumentAttachment);
      CreatePurchaseInvoice(PurchaseHeader,IncomingDocument);

      // Execute
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);
      PurchaseInvoice.IncomingDocAttachFactBox.IncomingDoc.INVOKE;

      // Verify
      Assert.IsFalse(PurchaseInvoice.IncomingDocAttachFactBox.NEXT,'There should not be any records');
    END;

    LOCAL PROCEDURE GetCommonFields@10(VAR FieldRefArray@1000 : ARRAY [7] OF FieldRef);
    VAR
      IncomingDocumentAttachment@1003 : Record 133;
      RecRef@1002 : RecordRef;
      I@1001 : Integer;
    BEGIN
      I := 1;
      RecRef.OPEN(DATABASE::"Incoming Document Attachment");
      IncomingDocumentAttachment.INIT;
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO("Incoming Document Entry No.")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO("Line No.")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO("Created Date-Time")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO("Created By User Name")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO(Name)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO(Type)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncomingDocumentAttachment.FIELDNO("File Extension")));
    END;

    LOCAL PROCEDURE GetIncDocAttachmentOverviewSpecificFields@3(VAR FieldRefArray@1000 : ARRAY [3] OF FieldRef);
    VAR
      IncDocAttachmentOverview@1003 : Record 137;
      RecRef@1002 : RecordRef;
      I@1001 : Integer;
    BEGIN
      I := 1;
      RecRef.OPEN(DATABASE::"Inc. Doc. Attachment Overview");
      IncDocAttachmentOverview.INIT;
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncDocAttachmentOverview.FIELDNO("Attachment Type")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncDocAttachmentOverview.FIELDNO("Sorting Order")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(IncDocAttachmentOverview.FIELDNO(Indentation)));
    END;

    LOCAL PROCEDURE AddToArray@50(VAR FieldRefArray@1000 : ARRAY [17] OF FieldRef;VAR I@1001 : Integer;CurrFieldRef@1002 : FieldRef);
    BEGIN
      FieldRefArray[I] := CurrFieldRef;
      I += 1;
    END;

    LOCAL PROCEDURE CreateIncomingDocument@1(VAR IncomingDocument@1000 : Record 130;AttachmentURL@1001 : Text);
    BEGIN
      CLEAR(IncomingDocument);
      IncomingDocument.INIT;
      IncomingDocument.SetURL(AttachmentURL);
      IncomingDocument.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncomingDocumentAttachment@9(VAR IncomingDocument@1000 : Record 130;VAR IncomingDocumentAttachment@1001 : Record 133);
    VAR
      FileManagement@1002 : Codeunit 419;
      AnyXMLTxt@1003 : Text;
    BEGIN
      AnyXMLTxt := '<test><test2 /></test>';
      IncomingDocument.AddXmlAttachmentFromXmlText(IncomingDocumentAttachment,FileManagement.ClientTempFileName('XML'),AnyXMLTxt);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceAndPost@20(VAR VendLedgEntry@1006 : Record 25;VAR IncomingDocument@1000 : Record 130);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreatePurchaseInvoice(PurchaseHeader,IncomingDocument);

      IncomingDocument.Release;
      VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETRANGE("Document No.",LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
      VendLedgEntry.FINDFIRST;

      VendLedgEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
    END;

    LOCAL PROCEDURE CreatePurchaseInvoice@7(VAR PurchHeader@1003 : Record 38;VAR IncomingDocument@1004 : Record 130);
    VAR
      PurchLine@1002 : Record 39;
      Item@1001 : Record 27;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,Vendor."No.");
      PurchHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateRandomText(10));
      PurchHeader.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      PurchHeader."Incoming Document Entry No." := IncomingDocument."Entry No.";
      PurchHeader.MODIFY(TRUE);

      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,Item."No.",1);
      PurchLine.VALIDATE("Direct Unit Cost",100);
      PurchLine.MODIFY(TRUE);

      IncomingDocument."Document Type" := IncomingDocument."Document Type"::"Sales Invoice";
      IncomingDocument."Document No." := PurchHeader."No.";
      IncomingDocument.MODIFY;
    END;

    LOCAL PROCEDURE CreateGenJournalLine@4(VAR GenJournalLine@1000 : Record 81;VAR IncomingDocument@1002 : Record 130);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",'',0);
      GenJournalLine."Incoming Document Entry No." := IncomingDocument."Entry No.";
      GenJournalLine.MODIFY;

      IncomingDocument."Document Type" := IncomingDocument."Document Type"::Journal;
      IncomingDocument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyFieldDefinitionsMatchTableFields@23(RecRef@1001 : RecordRef;FieldRefArray@1004 : ARRAY [17] OF FieldRef);
    VAR
      FieldRefTemplate@1000 : FieldRef;
      FieldRefTable@1006 : FieldRef;
      I@1005 : Integer;
    BEGIN
      FOR I := 1 TO ARRAYLEN(FieldRefArray) DO BEGIN
        FieldRefTemplate := FieldRefArray[I];
        FieldRefTable := RecRef.FIELD(FieldRefTemplate.NUMBER);
        ValidateFieldDefinitionsMatch(FieldRefTable,FieldRefTemplate);
      END;
    END;

    PROCEDURE VerifySpecificFieldsNotPresentInMainTable@14(RecRef@1001 : RecordRef;FieldRefArray@1004 : ARRAY [17] OF FieldRef);
    VAR
      I@1005 : Integer;
    BEGIN
      FOR I := 1 TO ARRAYLEN(FieldRefArray) DO
        Assert.IsFalse(
          RecRef.FIELDEXIST(FieldRefArray[I].NUMBER),
          STRSUBSTNO('Field with ID %1 should not be present in table %2',FieldRefArray[I].NUMBER,RecRef.NUMBER));
    END;

    LOCAL PROCEDURE ValidateFieldDefinitionsMatch@8(FieldRef1@1001 : FieldRef;FieldRef2@1000 : FieldRef);
    BEGIN
      Assert.AreEqual(FieldRef1.NAME,FieldRef2.NAME,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'names'));
      Assert.AreEqual(FieldRef1.CAPTION,FieldRef2.CAPTION,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'captions'));
      Assert.IsTrue(FieldRef1.TYPE = FieldRef2.TYPE,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'types'));
      Assert.AreEqual(FieldRef1.LENGTH,FieldRef2.LENGTH,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'lengths'));
      Assert.AreEqual(
        FieldRef1.OPTIONSTRING,FieldRef2.OPTIONSTRING,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'option string'));
      Assert.AreEqual(
        FieldRef1.OPTIONCAPTION,FieldRef2.OPTIONCAPTION,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'option caption'));
      Assert.AreEqual(FieldRef1.RELATION,FieldRef2.RELATION,ErrorMessageForFieldComparison(FieldRef1,FieldRef2,'table relation'));
    END;

    LOCAL PROCEDURE VerifyLineMatchesIncomingDocumentAttachment@60(TempIncDocAttachmentOverview@1000 : TEMPORARY Record 137;IncomingDocumentAttachment@1001 : Record 133;SortingOrder@1002 : Integer;Indentation@1003 : Integer);
    BEGIN
      Assert.AreEqual(TempIncDocAttachmentOverview."Sorting Order",SortingOrder,'Sorting order was not set correctly');
      Assert.AreEqual(
        TempIncDocAttachmentOverview."Incoming Document Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.",
        'Entry No. Does not match');
      Assert.AreEqual(TempIncDocAttachmentOverview."Line No.",IncomingDocumentAttachment."Line No.",'Line No. does not match');
      Assert.AreEqual(TempIncDocAttachmentOverview.Name,IncomingDocumentAttachment.Name,'Name was not set correctly');
      Assert.AreEqual(TempIncDocAttachmentOverview.Type,IncomingDocumentAttachment.Type,'Type was not set correctly');
      IF SortingOrder = 1 THEN
        Assert.AreEqual(
          TempIncDocAttachmentOverview."Attachment Type",TempIncDocAttachmentOverview."Attachment Type"::"Main Attachment",
          'Attachment Type was not set correctly')
      ELSE
        Assert.AreEqual(
          TempIncDocAttachmentOverview."Attachment Type",TempIncDocAttachmentOverview."Attachment Type"::"Supporting Attachment",
          'Attachment Type was not set correctly');

      Assert.AreEqual(TempIncDocAttachmentOverview.Indentation,Indentation,'Indentation was not set correctly');
    END;

    LOCAL PROCEDURE VerifyGroupLine@72(TempIncDocAttachmentOverview@1000 : TEMPORARY Record 137;IncomingDocument@1002 : Record 130;ExpectedSortingOrder@1001 : Integer);
    VAR
      IncomingDocumentAttachment@1003 : Record 133;
      ExpectedGroupCaptionTxt@1004 : Text;
    BEGIN
      Assert.AreEqual(TempIncDocAttachmentOverview."Sorting Order",ExpectedSortingOrder,'Sorting order was not set correctly');
      Assert.AreEqual(
        TempIncDocAttachmentOverview."Incoming Document Entry No.",IncomingDocument."Entry No.",'Entry No. Does not match');
      Assert.AreEqual(TempIncDocAttachmentOverview."Line No.",0,'Line No. does not match');
      ExpectedGroupCaptionTxt := SupportingAttachmentsTxt;
      Assert.AreEqual(TempIncDocAttachmentOverview.Name,ExpectedGroupCaptionTxt,'Name was not set correctly');
      Assert.AreEqual(TempIncDocAttachmentOverview.Type,IncomingDocumentAttachment.Type::" ",'Type was not set correctly');
      Assert.AreEqual(
        TempIncDocAttachmentOverview."Attachment Type",TempIncDocAttachmentOverview."Attachment Type"::Group,
        'Attachment Type was not set correctly');
      Assert.AreEqual(TempIncDocAttachmentOverview.Indentation,0,'Indentation was not set correctly');
    END;

    LOCAL PROCEDURE ErrorMessageForFieldComparison@11(FieldRef1@1002 : FieldRef;FieldRef2@1001 : FieldRef;MismatchType@1000 : Text) : Text;
    BEGIN
      EXIT(
        FORMAT(
          'Field ' +
          MismatchType +
          ' on fields ' +
          FieldRef1.RECORD.NAME + '.' + FieldRef1.NAME + ' and ' + FieldRef2.RECORD.NAME + '.' + FieldRef2.NAME + ' do not match.'));
    END;

    [ModalPageHandler]
    PROCEDURE DeleteIncomingDocumentHandler@17(VAR IncomingDocumentCard@1000 : Page 189;VAR Response@1002 : Action);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument.INIT;
      IncomingDocumentCard.GETRECORD(IncomingDocument);
      IncomingDocument.DELETE(TRUE);
      Response := ACTION::OK;
    END;

    BEGIN
    {
      // [FEATURE] [Incoming Documents] [Attachment]
    }
    END.
  }
}

