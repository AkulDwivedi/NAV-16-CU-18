OBJECT Codeunit 144025 ERM TDS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500001 : Record 98;
      LibraryPurchase@1500009 : Codeunit 130512;
      LibraryERM@1500008 : Codeunit 131300;
      LibraryRandom@1500007 : Codeunit 130440;
      LibraryTDS@1500006 : Codeunit 143000;
      LibraryVariableStorage@1500004 : Codeunit 131004;
      LibrarySetupStorage@1500010 : Codeunit 131009;
      LibraryJournals@1500005 : Codeunit 131306;
      Assert@1500003 : Codeunit 130000;
      ServiceTaxAsExciseHelper@1500002 : Codeunit 143003;
      LibraryUtility@1500011 : Codeunit 131000;
      isInitialized@1500000 : Boolean;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsMPH)]
    PROCEDURE PurchaseOrderWithTDSAndPANApplied@1500057();
    VAR
      TdsNatureOfDeduction@1500001 : Record 13726;
      NodNocHeader@1500002 : Record 13786;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ExpectedTDSEntry@1500012 : Record 13729;
      TDSSetup@1500005 : Record 13728;
      TDSGroup@1500009 : Record 13731;
      DocumentNo@1500004 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164276] Created Setup, Posted Purchase Order with TDS and TDS Threshold Amount with PANAPPLIED for Vendor.
      // [FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code,TDS Setup with TDS Threshold Amount and Non-PAN Vendor.
      CreateIncomeTaxAccountingPeriod;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',CreateVendorWithLocation('',TRUE),NodNocHeader.Type::Vendor,WORKDATE);
      UpdateNODNOCLines(NodNocHeader,FALSE,FALSE,TRUE);
      UpdateThresholdLimit(TDSGroup,TdsNatureOfDeduction."TDS Group");

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",TdsNatureOfDeduction.Code,'',Amount);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,FALSE,FALSE);
      VerifyPurchaseOrderStatistics(ExpectedTDSEntry,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] 3 GL Entries are created and posted to TDS Account.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDSAccount(DocumentNo,TDSGroup."TDS Account",-ExpectedTDSEntry."Total TDS Including SHE CESS");
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsMPH)]
    PROCEDURE PurchaseOrderWithWorkTaxTDSGroupAsOthersAndPANApplied@1500003();
    VAR
      TdsNatureOfDeduction@1500002 : Record 13726;
      NodNocHeader@1500001 : Record 13786;
      AssesseeCode@1500004 : Record 13727;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ExpectedTDSEntry@1500012 : Record 13729;
      TDSSetup@1500005 : Record 13728;
      TDSGroup@1500009 : Record 13731;
      DocumentNo@1500003 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164277] Created Setup, Posted Purchase Order with Work Tax and TDS Threshold Amount with PANAPPLIED for Vendor.
      // [FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code,TDS Setup with TDS Threshold Amount and Non-PAN Vendor.
      CreateIncomeTaxAccountingPeriod;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSSetup,TdsNatureOfDeduction."TDS Group"::Others,AssesseeCode.Code,'',WORKDATE);
      LibraryTDS.CreateNODNOCSetupforTDS(
        NodNocHeader,NodNocHeader.Type::Vendor,CreateVendorWithLocation('',TRUE),AssesseeCode.Code,TdsNatureOfDeduction.Code);
      UpdateNODNOCLines(NodNocHeader,FALSE,FALSE,TRUE);
      UpdateThresholdLimit(TDSGroup,TdsNatureOfDeduction."TDS Group");

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",'',TdsNatureOfDeduction.Code,Amount);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,FALSE,TRUE);
      VerifyPurchaseOrderStatistics(ExpectedTDSEntry,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] 3 GL Entries are created and posted to TDS Account.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDSAccount(DocumentNo,TDSGroup."TDS Account",-ExpectedTDSEntry."Work Tax Amount");
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithTDSWorkTaxAndPANApplied@1500006();
    VAR
      TdsNatureOfDeduction@1500001 : Record 13726;
      TdsNatureOfDeduction2@1500006 : Record 13726;
      NodNocHeader@1500002 : Record 13786;
      AssesseeCode@1500004 : Record 13727;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      TDSSetup@1500005 : Record 13728;
      DocumentNo@1500003 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 161144] Created Setup, Posted Purchase Invoice with Work Tax and TDS with PANAPPLIED for Vendor.
      // [FEATURE] [TDS][Work Tax][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code,TDS Setup with TDS Threshold Amount and Non-PAN Vendor.
      Amount := LibraryRandom.RandDec(10000,2);
      CreateTCSAndWorkTaxSetup(
        AssesseeCode,TdsNatureOfDeduction,TdsNatureOfDeduction2,TDSSetup,NodNocHeader);

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NodNocHeader."No.",
        TdsNatureOfDeduction.Code,TdsNatureOfDeduction2.Code,Amount);
      UpdateWorkTaxAsBlankOnPurchaseLine(PurchaseHeader);

      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] 3 GL Entries are created.
      VerifyGLEntryCount(DocumentNo,3);
    END;

    [Test]
    PROCEDURE PurchaseJournalWithTDSAndWorkTax@1500007();
    VAR
      GenJournalLine@1500000 : Record 81;
      TdsNatureOfDeduction@1500008 : Record 13726;
      TdsNatureOfDeduction2@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      AssesseeCode@1500004 : Record 13727;
      TDSSetup@1500003 : Record 13728;
      DocumentNo@1500009 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 161144] Created Setup, Posted Purchase Journal with Work Tax and TDS with PANAPPLIED for Vendor.
      // [FEATURE] [TDS][Work Tax][Purchase Journal]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code,TDS Setup with TDS Threshold Amount and Non-PAN Vendor.
      Amount := LibraryRandom.RandInt(100000);
      CreateTCSAndWorkTaxSetup(
        AssesseeCode,TdsNatureOfDeduction,TdsNatureOfDeduction2,TDSSetup,NodNocHeader);

      // [WHEN] Create & Post Purchase Journal
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,NodNocHeader."No.",-Amount);
      UpdateWorkTaxAsBlankOnJournalLine(
        GenJournalLine,TdsNatureOfDeduction.Code,TdsNatureOfDeduction2.Code);

      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created.
      VerifyGLEntryCount(DocumentNo,3);
    END;

    LOCAL PROCEDURE Initialize@1500000();
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibrarySetupStorage.Restore;
      GLSetup.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateTCSAndWorkTaxSetup@1500010(VAR AssesseeCode@1500000 : Record 13727;VAR TdsNatureOfDeduction@1500001 : Record 13726;VAR TdsNatureOfDeduction2@1500002 : Record 13726;VAR TDSSetup@1500003 : Record 13728;VAR NodNocHeader@1500004 : Record 13786);
    VAR
      TDSGroup@1500005 : Record 13731;
      NodNocLines@1500006 : Record 13785;
    BEGIN
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSSetup,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,'',WORKDATE);
      LibraryTDS.CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction2,TDSSetup,TdsNatureOfDeduction2."TDS Group"::Others,AssesseeCode.Code,'',WORKDATE);
      LibraryTDS.CreateNODNOCSetupforTDS(
        NodNocHeader,NodNocHeader.Type::Vendor,CreateVendorWithLocation('',TRUE),AssesseeCode.Code,TdsNatureOfDeduction.Code);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,TdsNatureOfDeduction2.Code);
      UpdateNODNOCLines(NodNocHeader,FALSE,FALSE,TRUE);
      UpdateThresholdLimit(TDSGroup,TdsNatureOfDeduction."TDS Group");
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500001();
    VAR
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500002(IncomeTaxAccountingPeriodNo@1500001 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500002 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500031();
    VAR
      DeductorCategory@1500000 : Record 16498;
      CompanyInformation@1500001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1500004(VAR PurchaseHeader@1500016 : Record 38;VAR PurchaseLine@1500000 : Record 39;DocumentType@1500001 : Option;VendorNo@1500004 : Code[20];CodeContractor@1500006 : Code[10];WorkTaxCode@1500002 : Code[10];Amount@1500003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithLocation@1500030(LocationCode@1500000 : Code[10];HasPANApplied@1500001 : Boolean) : Code[20];
    VAR
      Vendor@1500003 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      IF LocationCode <> '' THEN
        Vendor.VALIDATE("Location Code",LocationCode);
      IF HasPANApplied THEN BEGIN
        Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
        Vendor.VALIDATE(
          "P.A.N. Reference No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      END ELSE
        Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSEntry@1500001 : Record 13729;TDSSetup@1500002 : Record 13728;TaxBaseAmount@1500003 : Decimal;HasPAN@1500000 : Boolean;WorkTax@1500004 : Boolean);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        IF HasPAN THEN
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount")
        ELSE
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        IF WorkTax THEN
          "Work Tax Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount")
        ELSE
          "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE GetRequiredDateFromWorkDate@1500005(Days@1500000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500022(NodNocHeader@1500000 : Record 13786;ThresholdOverlook@1500004 : Boolean;SurchargeOverlook@1500003 : Boolean;MonthlyCertificate@1500002 : Boolean);
    VAR
      NodNocLines@1500001 : Record 13785;
    BEGIN
      NodNocLines.SETRANGE(Type,NodNocHeader.Type);
      NodNocLines.SETRANGE("No.",NodNocHeader."No.");
      NodNocLines.FINDFIRST;
      LibraryTDS.UpdateNODNOCLines(NodNocLines,NodNocHeader.Type::Vendor,ThresholdOverlook,SurchargeOverlook,MonthlyCertificate);
    END;

    LOCAL PROCEDURE UpdateThresholdLimit@1500008(VAR TDSGroup@1500001 : Record 13731;TDSGroupCode@1500000 : Option);
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Threshold Amount",LibraryRandom.RandInt(5000));
      TDSGroup.VALIDATE("Surcharge Threshold Amount",0);
      TDSGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkTaxAsBlankOnPurchaseLine@1500014(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchaseLine.CalculateTDS(PurchaseHeader);
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Work Tax Nature Of Deduction",'');
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkTaxAsBlankOnJournalLine@1500012(VAR GenJournalLine@1500000 : Record 81;TdsNatureCode@1500001 : Code[10];WorkTaxNatureCode@1500002 : Code[10]);
    BEGIN
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",GenJournalLine."Account No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",TdsNatureCode);
      GenJournalLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxNatureCode);
      GenJournalLine.MODIFY(TRUE);
      GenJournalLine.VALIDATE("Work Tax Nature Of Deduction",'');
      GenJournalLine.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderStatisticsMPH@1500034(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500013.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE FindGLEntry@1500040(VAR GLEntry@1500007 : Record 17;DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20];TDSAccount@1500000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",TDSAccount);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE VerifyGLEntryWithTDSAccount@1500041(DocumentNo@1500007 : Code[20];TDSAccount@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo,TDSAccount);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500042(DocumentNo@1500003 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500050(ExpTDSEntry@1500000 : Record 13729;PurchaseLine@1500002 : Record 39);
    BEGIN
      WITH ExpTDSEntry DO BEGIN
        CLEAR(LibraryVariableStorage);
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
        LibraryVariableStorage.Enqueue("Work Tax Amount");
      END;
      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    BEGIN
    END.
  }
}

