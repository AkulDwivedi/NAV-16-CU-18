OBJECT Codeunit 134127 ERM Customer Reversal Message
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERM@1001 : Codeunit 131300;
      LibrarySales@1002 : Codeunit 130509;
      LibraryFiscalYear@1010 : Codeunit 131302;
      IsInitialized@1000 : Boolean;
      ReversalErrorfromLedger@1006 : TextConst 'ENU=You cannot create this type of document when Customer %1 is blocked with type %2';
      ReversalErrorfromRegister@1008 : TextConst 'ENU=You cannot reverse register No. %1 because it contains customer or vendor ledger entries';
      ReversalErrorFromGLEntry@1007 : TextConst 'ENU=The transaction cannot be reversed, because the Cust. Ledger Entry has been compressed.';
      ErrorsMustMatch@1009 : TextConst 'ENU=Errors must match.';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceBlockedTypeInvoice@5();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Invoice with Random Amount from General Journal Line, update Customer Blocked field for Invoice and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Invoice,Customer.Blocked::Invoice,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceBlockedTypeAll@1();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Invoice with Random Amount from General Journal Line, update Customer Blocked field for All and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Invoice,Customer.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PaymentBlockedTypeAll@27();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Payment with Random Amount from General Journal Line, update Customer Blocked field for All and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Payment,Customer.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoBlockedTypeAll@28();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Credit Memo with Random Amount from General Journal Line, update Customer Blocked field for All and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::"Credit Memo",Customer.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE RefundBlockedTypeAll@29();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Refund with Random Amount from General Journal Line, update Customer Blocked field for All and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Refund,Customer.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE FinChargeMemoBlockedTypeAll@30();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Finance Charge Memo with Random Amount from General Journal Line, update Customer Blocked field
      // for All and verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(
        GenJournalLine."Document Type"::"Finance Charge Memo",Customer.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReminderBlockedTypeAll@31();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Customer and Post Reminder with Random Amount from General Journal Line, update Customer Blocked field for All and
      // verify Reversal Error from Customer Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Reminder,Customer.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE ReverseFromLedger@4(DocumentType@1004 : Option;BlockedType@1003 : Option;Amount@1002 : Decimal);
    VAR
      Customer@1006 : Record 18;
      ReversalEntry@1000 : Record 179;
      TransactionNo@1001 : Integer;
    BEGIN
      // Setup: Create Customer, Make document line and Post from General Journal and Block the same Customer.
      TransactionNo := CommonReversalSetup(Customer,DocumentType,BlockedType,Amount);

      // Exercise: Reverse Invoice entries for Blocked Customer.
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(TransactionNo);

      // Verify: Verifying Blocked Error Message.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorfromLedger,Customer."No.",Customer.Blocked),GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReverseFromRegister@6();
    VAR
      Customer@1006 : Record 18;
      GLRegister@1000 : Record 45;
      GenJournalLine@1005 : Record 81;
      ReversalEntry@1004 : Record 179;
    BEGIN
      // Create Customer and Post Invoice with Random Amount from General Journal Line, update Customer Blocked field for Invoice and
      // verify Reversal Error from GL Register.

      // Setup.
      Initialize;
      CommonReversalSetup(
        Customer,GenJournalLine."Document Type"::Invoice,Customer.Blocked::Invoice,LibraryRandom.RandDec(100,2));

      // Exercise: Reverse Invoice entries for Blocked Customer.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verifying Blocked Error Message.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorfromLedger,Customer."No.",Customer.Blocked),GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE FullyAppliedInvoiceFrmLedger@3();
    VAR
      CustLedgerEntry@1003 : Record 21;
      ReversalEntry@1004 : Record 179;
    BEGIN
      // Create Customer and Post Invoice from General Journal Line, Fully apply payment on Invoice and
      // verify Reversal Error from Customer Ledger.

      // Setup.
      Initialize;
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,CreateAndPostApplicationEntry);

      // Exercise: Reverse Fully Applied Invoice from Ledger.
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // Verify: Verify Reversal Error for Fully Applied Entries.
      Assert.AreEqual(
        ReversalEntry.ReversalErrorForChangedEntry(CustLedgerEntry.TABLECAPTION,CustLedgerEntry."Entry No."),
        GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    PROCEDURE FullyAppliedInvoiceFrmRegister@12();
    VAR
      GLRegister@1002 : Record 45;
      ReversalEntry@1004 : Record 179;
    BEGIN
      // Create Customer and Post Invoice from General Journal Line, Fully apply payment on Invoice and
      // verify Reversal Error from GL Register.

      // Setup: Create Customer, Make Invoice and Post from General Journal and Block the same Customer.
      Initialize;
      CreateAndPostApplicationEntry;

      // Exercise: Reverse Fully Applied Invoice from Regiser.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verify Reversal Error for Fully Applied Entries. Because of Error length too long verifying selected string in Error
      // message.
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReversalErrorfromRegister,GLRegister."No.")),ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CurrencyAdjustEntryFrmLedger@18();
    VAR
      GenJournalLine@1003 : Record 81;
      CustLedgerEntry@1001 : Record 21;
      ReversalEntry@1000 : Record 179;
    BEGIN
      // Create Customer and Post Credit entry using Currency from General Journal Line, Update Exchange Rate and Run Adjust
      // Exchange Rate batch job. Verify Reversal Error from Customer Ledger.

      // Setup: Create and Post General Journal Line with Random Amount and Modify Exchange Rate. Run Adjust Exchange Rate Batch Job
      // and calculate Realized Gain/Loss Amount.
      CreateGeneralJounalLine(GenJournalLine,GenJournalLine."Document Type"::" ",CreateCustomer,-LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Currency Code",CreateCurrency);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateExchangeRate(GenJournalLine."Currency Code");
      LibraryERM.RunAdjustExchangeRates(
        GenJournalLine."Currency Code",0D,WORKDATE,'Test',WORKDATE,GenJournalLine."Document No.",FALSE);

      // Exercise: Reverse Posted Entry from Customer Legder.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::" ",GenJournalLine."Document No.");
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // Verify: Verify Detailed Ledger Entry for Unrealized Loss/Gain entry.
      Assert.AreEqual(
        ReversalEntry.ReversalErrorForChangedEntry(CustLedgerEntry.TABLECAPTION,CustLedgerEntry."Entry No."),
        GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressForGLAccount@25();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Setup: Create General Ledger Account and Customer, Make Invoice and Post from General Journal and Close Fiscal Year.
      Initialize;
      LibraryFiscalYear.CloseFiscalYear;
      CreateGenJnlLineForInvoice(
        GenJournalLine,GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,CreateCustomer);
      CreateAndPostApplnDateCompress(
        GenJournalLine."Document No.",GenJournalLine."Bal. Account Type"::"G/L Account",GenJournalLine."Bal. Account No.",
        GenJournalLine."Account No.",GenJournalLine.Amount);

      // Run Date Compress Batch job and Verify Reversal Error.
      DateCompressAndReverse(GenJournalLine."Account No.",GenJournalLine."Bal. Account No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressForBankAccount@19();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Setup: Create Customer, Make Invoice and Post from General Journal and Close Fiscal Year.
      Initialize;
      LibraryFiscalYear.CloseFiscalYear;
      CreateGenJnlLineForInvoice(
        GenJournalLine,GenJournalLine."Bal. Account Type"::"Bank Account",CreateBankAccount,CreateCustomer);
      CreateAndPostApplnDateCompress(
        GenJournalLine."Document No.",GenJournalLine."Bal. Account Type"::"Bank Account",GenJournalLine."Bal. Account No.",
        GenJournalLine."Account No.",GenJournalLine.Amount);

      // Run Date Compress Batch job and Verify Reversal Error.
      DateCompressAndReverse(GenJournalLine."Account No.",GenJournalLine."Bal. Account No.");
    END;

    [Test]
    PROCEDURE CheckUnapplyWhenCustomerBlockedWithInvoice@7();
    VAR
      CustLedgerEntry@1000 : Record 21;
      DetailedCustLedgEntry@1003 : Record 379;
      CustEntryApplyPostedEntries@1004 : Codeunit 226;
      DocumentNo@1001 : Code[20];
      CustomerNo@1002 : Code[20];
    BEGIN
      // Verify that Unapply work when customer is blocked with option Invoice.

      // Setup: Create and Post Invoice and apply Payment on Invoice.
      Initialize;
      DocumentNo := CreateAndPostApplicationEntry;
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      CustomerNo := ModifyCustomerWithBlockStatus(CustLedgerEntry."Customer No.");
      FindDetailedCustLedgEntry(DetailedCustLedgEntry,CustomerNo);

      // Exercise: Unapplying Entries.
      CustEntryApplyPostedEntries.PostUnApplyCustomer(DetailedCustLedgEntry,DetailedCustLedgEntry."Document No.",WORKDATE);

      // Verify: Verifying that remaining amount again have some values.
      VerifyCustLedgerEntry(CustLedgerEntry."Entry No.",CustLedgerEntry.Amount);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ReversalSetup@13(DocumentType@1000 : Option;BlockedType@1002 : Option;Amount@1001 : Decimal) : Code[20];
    VAR
      Customer@1003 : Record 18;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Create Customer, make Entries from General Journal Line and Update Customer Blocked field.
      LibrarySales.CreateCustomer(Customer);
      CreateGeneralJounalLine(GenJournalLine,DocumentType,Customer."No.",Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Customer.VALIDATE(Blocked,BlockedType);
      Customer.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE CommonReversalSetup@14(VAR Customer@1004 : Record 18;DocumentType@1002 : Option;BlockedType@1001 : Option;Amount@1000 : Decimal) : Integer;
    VAR
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,ReversalSetup(DocumentType,BlockedType,Amount));
      Customer.GET(CustLedgerEntry."Customer No.");
      EXIT(CustLedgerEntry."Transaction No.");
    END;

    LOCAL PROCEDURE CreateAndPostApplicationEntry@9() DocumentNo : Code[20];
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and Post Invoice and apply Payment on Invoice.
      CreateGeneralJounalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      DocumentNo := GenJournalLine."Document No.";
      CreateGeneralJounalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account No.",-GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCurrency@11() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Realized G/L Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@15() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE DateCompressAndReverse@34(AccountNo@1000 : Code[20];BalAccountNo@1001 : Code[20]);
    BEGIN
      // Exercise: Run the Date Compress Customer Ledger Batch Report as per the option selected and Reverse the transaction.
      CustomerDateCompress(AccountNo);
      ReverseEntryBalancingAccount(BalAccountNo);

      // Verify: Verify Balancing Account in General Ledger Entry.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorFromGLEntry),GETLASTERRORTEXT,'Error Not Matched');
    END;

    LOCAL PROCEDURE FindDetailedCustLedgEntry@51(VAR DetailedCustLedgEntry@1000 : Record 379;CustomerNo@1001 : Code[20]);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::Application);
      DetailedCustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      DetailedCustLedgEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifyCustomerWithBlockStatus@24(CustomerNo@1000 : Code[20]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE(Blocked,Customer.Blocked::Invoice);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.")
    END;

    LOCAL PROCEDURE UpdateExchangeRate@2(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Using Random value to update Currency Exchange Rate.
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + LibraryRandom.RandInt(50));
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJounalLine@20(VAR GenJournalLine@1005 : Record 81;DocumentType@1004 : Option;CustomerNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Select Journal Batch Name and Template Name.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
    END;

    LOCAL PROCEDURE CreateAndPostApplnDateCompress@17(DocumentNo@1005 : Code[20];BalAccountType@1004 : Option;BalAccountNo@1003 : Code[20];AccountNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      CreateGenJnlLineForBalAccount(
        GenJournalLine,GenJournalLine."Document Type"::Payment,BalAccountType,BalAccountNo,AccountNo,-Amount);
      GenJournalLine.VALIDATE("Posting Date",LibraryFiscalYear.GetFirstPostingDate(TRUE));
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateBankAccount@16() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateGenJnlLineForBalAccount@23(VAR GenJournalLine@1000 : Record 81;DocumentType@1003 : Option;BalAccountType@1006 : Option;BalAccountNo@1004 : Code[20];AccountNo@1007 : Code[20];Amount@1002 : Decimal);
    VAR
      GenJournalBatch@1009 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJnlLineForInvoice@22(VAR GenJournalLine@1007 : Record 81;BalAccountType@1002 : Option;BalAccountNo@1000 : Code[20];AccountNo@1004 : Code[20]);
    BEGIN
      CreateGenJnlLineForBalAccount(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,BalAccountType,BalAccountNo,AccountNo,
        LibraryRandom.RandInt(100));
      GenJournalLine.VALIDATE("Posting Date",LibraryFiscalYear.GetFirstPostingDate(TRUE));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE ReverseEntryBalancingAccount@21(BalAccountNo@1001 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      ReversalEntry@1002 : Record 179;
    BEGIN
      GLEntry.SETRANGE("Bal. Account No.",BalAccountNo);
      GLEntry.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(GLEntry."Transaction No.");
    END;

    LOCAL PROCEDURE CustomerDateCompress@33(CustomerNo@1004 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
      DateComprRegister@1002 : Record 87;
      DateCompressCustomerLedger@1001 : Report 198;
    BEGIN
      // Run the Date Compress Customer Ledger Report. Take End Date a Day before Last Posted Entry's Posting Date.
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.FINDFIRST;
      DateCompressCustomerLedger.SETTABLEVIEW(CustLedgerEntry);
      DateCompressCustomerLedger.InitializeRequest(
        LibraryFiscalYear.GetFirstPostingDate(TRUE),LibraryFiscalYear.GetFirstPostingDate(TRUE),
        DateComprRegister."Period Length"::Week,'',FALSE,FALSE,FALSE,'');
      DateCompressCustomerLedger.USEREQUESTPAGE(FALSE);
      DateCompressCustomerLedger.RUN;
    END;

    LOCAL PROCEDURE VerifyCustLedgerEntry@55(CustLedgerEntryNo@1000 : Integer;RemainingAmount@1001 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.GET(CustLedgerEntryNo);
      CustLedgerEntry.TESTFIELD(Open,TRUE);
      CustLedgerEntry.TESTFIELD("Remaining Amount",RemainingAmount);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Sales]

      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute

      Test Reversal Error for Customer.
        1. Test Invoice entry Reversal Error from Customer Ledger when Customer Blocked for Invoice.
        2. Test Invoice entry Reversal Error from Customer Ledger when Customer Blocked for All.
        3. Test Payment entry Reversal Error from Customer Ledger when Customer Blocked for All.
        4. Test Credit Memo entry Reversal Error from Customer Ledger when Customer Blocked for All.
        5. Test Refund entry Reversal Error from Customer Ledger when Customer Blocked for All.
        6. Test Finance Charge Memo entry Reversal Error from Customer Ledger when Customer Blocked for All.
        7. Test Reminder entry Reversal Error from Customer Ledger when Customer Blocked for All.
        8. Test Invoice entry Reversal Error from GL Register when Customer Blocked for Invoice.
        9. Test Reversal Error for Fully applied Payment Entry for Invoice from Customer Ledger.
       10. Test Reversal Error for Fully applied Payment Entry for Invoice from GL Register.
       11. Test Reversal transaction Error for Customer Ledger entry after Run Adjust Exchange Rate batch job.
       12. Test Reversal Trasaction Error for G/L Account for Date Compress Customer Ledger.
       13. Test Reversal Trasaction Error for Bank Accountfor Date Compress Customer Ledger.
       14. Verify that Unapply work when customer is blocked with option Invoice.

      Covers Test Cases:
        ------------------------------------------------------
        Test Function Name            TFS ID
        ------------------------------------------------------
        InvoiceBlockedTypeInvoice      124912,124913
        InvoiceBlockedTypeAll          124912,124914
        PaymentBlockedTypeAll          124912,124916
        CreditMemoBlockedTypeAll       124912,124917
        FinChargeMemoBlockedTypeAll    124912,124918
        ReminderBlockedTypeAll         124912,124919
        RefundBlockedTypeAll           124912,124920
        ReverseFromRegister            124912,124915
        FullyAppliedInvoiceFrmLedger   124912,124922
        FullyAppliedInvoiceFrmRegister 124912,124921,124923
        CurrencyAdjustedEntryFrmLedger 124912,124924
        DateCompressForGLAccount       124912,124925,124926
        DateCompressForBankAccount     124912,124927

      BUG ID 7206
      --------------------------------------------------------
      Test Function Name                              TFS ID
      --------------------------------------------------------
      CheckUnapplyWhenCustomerBlockedWithInvoice
    }
    END.
  }
}

