OBJECT Codeunit 134990 ERM Fixed Assets Reports - III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryFixedAsset@1003 : Codeunit 131330;
      LibraryReportDataset@1026 : Codeunit 131007;
      LibraryUtility@1039 : Codeunit 131000;
      LibraryVariableStorage@1008 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      AccNoFAPostGrpBuffer1Caption@1015 : TextConst 'ENU=AccNo_FAPostGrpBuffer1';
      AmtFAPostGroupBuffer1Caption@1014 : TextConst 'ENU=Amt_FAPostGroupBuffer1';
      AccNoFAPostGrpBuffer2Caption@1013 : TextConst 'ENU=AccNo_FAPostGrpBuffer2';
      Amounts1Caption@1000 : TextConst 'ENU=Amounts1';
      Amounts2Caption@1027 : TextConst 'ENU=Amounts2';
      AmountCaption@1035 : TextConst 'ENU=Maintenance_Ledger_Entry_Amount';
      Amounts3Caption@1033 : TextConst 'ENU=Amounts3';
      DateErr@1024 : TextConst 'ENU=You must specify the Starting Date and the Ending Date.';
      DateErr2@1023 : TextConst 'ENU=You must specify the starting date and the ending date';
      DepreciationBookErr@1019 : TextConst 'ENU="The Depreciation Book does not exist. Identification fields and values: Code=''''"';
      EndingDateErr@1025 : TextConst 'ENU=You must specify an Ending Date.';
      FaDeprBookAcquDateCaption@1016 : TextConst 'ENU=FaDeprBookAcquDate';
      FANoCaption@1011 : TextConst 'ENU=FANo';
      FixedAssetFilter@1034 : TextConst 'ENU=%1|%2';
      FieldError@1032 : TextConst 'ENU=%1 must be specified.';
      FieldError2@1031 : TextConst 'ENU=%1 is not different than %2.';
      FieldError3@1030 : TextConst '@@@="%1=Table name,%2=Field value,%3=Field value";ENU=%1 %2 %3 does not exist.';
      FieldError4@1029 : TextConst 'ENU=%1 must not be specified when %2 is specified.';
      FormatString@1007 : TextConst 'ENU=<Precision,2><Standard Format,0>';
      GLAccNetChangeCaption@1012 : TextConst 'ENU=GLAccNetChange';
      MaintenanceCodeCaption@1036 : TextConst 'ENU=Maintenance_Ledger_Entry__Maintenance_Code_';
      NoFACaption@1017 : TextConst 'ENU=No_FA';
      NoFixedAssetCaption@1009 : TextConst 'ENU=No_FixedAsset';
      PageGroupNoCaption@1010 : TextConst 'ENU=PageGroupNo';
      ReverseEntryMessage@1038 : TextConst 'ENU=To reverse these entries, correcting entries will be posted.';
      RowNotFound@1022 : TextConst 'ENU=There is not dataset row corresponding to Element Name %1 with value %2';
      StartingDateError@1021 : TextConst 'ENU=You must specify a Starting Date.';
      SuccessfulReversedMessage@1037 : TextConst 'ENU=The entries were successfully reversed.';
      FALedgEntryAmountCap@1040 : TextConst 'ENU=Amt_FALedgEntry';
      FALedgEntryDocNoCap@1043 : TextConst 'ENU=DocNo_FALedgEntry';
      MaintLedgEntryAmountCap@1045 : TextConst 'ENU=Amt_MaintLedgEntry';
      MaintLedgEntryDocNoCap@1044 : TextConst 'ENU=DocNo_MaintLedgEntry';
      InsCoverageLedgEntryAmountCap@1046 : TextConst 'ENU=Amt_InsCoverageLedgEntry';
      InsCoverageLedgEntryDocNoCap@1047 : TextConst 'ENU=DocNo_InsCoverageLedgEntry';
      TableNameCap@1041 : TextConst 'ENU=DocEntryTableName';
      NoOfRecordsCap@1042 : TextConst 'ENU=DocEntryNoofRecords';
      IsInitialized@1048 : Boolean;

    [Test]
    [HandlerFunctions(RHFixedAssetJournalTest)]
    PROCEDURE FixedAssetJournalTestWarning@11();
    VAR
      FAJournalLine@1001 : Record 5621;
      FAJournalBatch@1000 : Record 5620;
      FixedAssetJournalTest@1005 : Report 5602;
    BEGIN
      // Check Fixed Asset Journal Test Report with Different Types of Warning Message.

      // Setup: Create FA Journal Line with Modification of Some fields.
      Initialize;
      SelectFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      ModifyFAJournalLine(FAJournalLine);

      // Exercise: Run and Save Fixed Asset Journal Test Report.
      CLEAR(FixedAssetJournalTest);
      FixedAssetJournalTest.SETTABLEVIEW(FAJournalBatch);
      COMMIT;
      FixedAssetJournalTest.RUN;

      // Verify: Verify different warnings on Fixed Asset Journal Test Report.
      VerifyFAJournalTestReportWarning(FAJournalLine);
    END;

    [Test]
    [HandlerFunctions(RHInsuranceJournalTest)]
    PROCEDURE InsuranceJournalTestWarning@1();
    VAR
      InsuranceJournalLine@1001 : Record 5635;
      InsuranceJournalBatch@1000 : Record 5634;
      InsuranceJournalTest@1005 : Report 5622;
    BEGIN
      // Check Insurance Journal Test Report with Different Types of Warning Message.

      // Setup: Create Insurance Journal Line with Modification of Some fields.
      Initialize;
      SelectInsuranceJournalBatch(InsuranceJournalBatch);
      LibraryFixedAsset.CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch."Journal Template Name",InsuranceJournalBatch.Name);
      ModifyInsuranceJournalLine(InsuranceJournalLine,0D,'','');  // Take 0D for Blank Posting Date and Blank value for Document No. and Fixed Asset No.

      // Exercise: Run and Save Fixed Asset Journal Test Report.
      CLEAR(InsuranceJournalTest);
      InsuranceJournalTest.SETTABLEVIEW(InsuranceJournalBatch);
      COMMIT;
      InsuranceJournalTest.RUN;

      // Verify: Verify different warnings on Insurance Journal Test Report.
      VerifyInsuranceJournalTestReportWarning(InsuranceJournalLine);
    END;

    [Test]
    [HandlerFunctions(RHFixedAssetBookValue02Report)]
    PROCEDURE FABookValue02WithCustomSections@80();
    VAR
      FixedAsset@1002 : Record 5600;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      AcquisitionCost@1001 : Decimal;
    BEGIN
      // Verify Program populate value on Custom 1 and Custom 2 section on FA Book Value 02 Report after posting the FA G/L Journal.

      // 1. Setup: Create and Post FA GL Journal for Custom 1 and Custom 2.
      Initialize;
      AcquisitionCost := CreateFixedAssetWithAcquisitionCost(FixedAsset);
      CreateGeneralJournalBatch(GenJournalBatch);

      // Taking Custom 1 value less than Acquisition Cost.
      CreateFAGLJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        FixedAsset."No.",GenJournalLine."FA Posting Type"::"Custom 1",-AcquisitionCost / 2);
      CreateFAGLJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,FixedAsset."No.",
        GenJournalLine."FA Posting Type"::"Custom 2",GenJournalLine.Amount / 2);  // Taking Custom 2 value different from Custom 1 value.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report.
      RunFixedAssetBookValue02Report(FixedAsset."No.");

      // 3. Verify: Verify Custom 1 and Custom 2 values on Fixed Asset Book Value 02 Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('NetChangeAmt5',-AcquisitionCost / 2);
      LibraryReportDataset.AssertElementWithValueExists('NetChangeAmt6',GenJournalLine.Amount);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(FAPostingTypesOvervMatrixPageHandler)]
    PROCEDURE FAPostingTypesOverviewMatrix@4();
    VAR
      FixedAsset@1001 : Record 5600;
      FAPostingTypesOverview@1000 : TestPage 5662;
      AcquisitionCost@1002 : Decimal;
    BEGIN
      // Verify amounts are displayed as per the Date Filter applied in the FA Posting Types Overview Matrix.

      // Setup: Create and Post FA GL Journal for Acquisition Cost.
      Initialize;
      AcquisitionCost := CreateFixedAssetWithAcquisitionCost(FixedAsset);

      // Enqueue values for FAPostingTypesOvervMatrixPageHandler.
      LibraryVariableStorage.Enqueue(FixedAsset."No.");
      LibraryVariableStorage.Enqueue(AcquisitionCost);
      FAPostingTypesOverview.OPENVIEW;
      FAPostingTypesOverview.FILTER.SETFILTER("FA Posting Date Filter",FORMAT(WORKDATE));

      // Exercise: Open FA Posting Types Overview Matrix page.
      FAPostingTypesOverview.ShowMatrix.INVOKE;

      // Verify: Verification done in FAPostingTypesOvervMatrixPageHandler.
    END;

    [Test]
    [HandlerFunctions(FixedAssetAcquisitionListHandler)]
    PROCEDURE FAAcquisitionListReportStartingDateError@9();
    BEGIN
      // Verify error on Fixed Asset Acquisition List Report for blank Starting date.
      FAAcquisitionListReportDateError(0D,0D,StartingDateError);  // 0D for Starting Date and Ending Date.
    END;

    [Test]
    [HandlerFunctions(FixedAssetAcquisitionListHandler)]
    PROCEDURE FAAcquisitionListReportEndingDateError@18();
    BEGIN
      // Verify error on Fixed Asset Acquisition List Report for blank Ending date.
      FAAcquisitionListReportDateError(WORKDATE,0D,EndingDateErr);  // 0D for Ending Date.
    END;

    LOCAL PROCEDURE FAAcquisitionListReportDateError@19(StartingDate@1000 : Date;EndingDate@1001 : Date;ExpectedError@1002 : Text[50]);
    BEGIN
      // Setup: Enqueue values for FixedAssetAcquisitionListHandler.
      Initialize;
      EnqueueValuesForForFixedAssetReport('',StartingDate,EndingDate,FALSE);  // '' for Fixed Asset No and FALSE for FixedAssetsAcquired.

      // Exercise.
      ASSERTERROR REPORT.RUN(REPORT::"Fixed Asset - Acquisition List");

      // Verify: Verify error on Fixed Asset Acquisition List Report for blank date.
      Assert.ExpectedError(ExpectedError);
    END;

    [Test]
    [HandlerFunctions(FixedAssetAcquisitionListHandler)]
    PROCEDURE FAAcquisitionListReportForFANotAcquired@33();
    VAR
      FixedAsset@1002 : Record 5600;
    BEGIN
      // Verify Fixed Asset Acquisition List Report for Fixed Asset not yet Acquired.

      // Setup: Create Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      EnqueueValuesForForFixedAssetReport(FixedAsset."No.",WORKDATE,WORKDATE,TRUE);  // TRUE for FixedAssetsAcquired.
      COMMIT;  // Commit required for running report.

      // Exercise:
      REPORT.RUN(REPORT::"Fixed Asset - Acquisition List");

      // Verify: Verify Fixed Asset No. on Fixed Asset Acquisition List Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(NoFixedAssetCaption,FixedAsset."No.");
    END;

    [Test]
    [HandlerFunctions(FixedAssetAcquisitionListHandler)]
    PROCEDURE FAAcquisitionListReportForFAAcquired@16();
    VAR
      FixedAsset@1002 : Record 5600;
    BEGIN
      // Verify Fixed Asset Acquisition List Report for Acquired Fixed Asset.

      // Setup: Create Fixed Asset with Acquisition.
      Initialize;
      CreateFixedAssetWithAcquisitionCost(FixedAsset);
      EnqueueValuesForForFixedAssetReport(FixedAsset."No.",WORKDATE,WORKDATE,FALSE);  // FALSE for FixedAssetsAcquired.
      COMMIT;  // Commit required for running report.

      // Exercise.
      REPORT.RUN(REPORT::"Fixed Asset - Acquisition List");

      // Verify: Verify Acquisition Date on Fixed Asset Acquisition List Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(NoFixedAssetCaption,FixedAsset."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(FaDeprBookAcquDateCaption,FORMAT(WORKDATE));
    END;

    [Test]
    [HandlerFunctions(FAPostingGroupNetChangeHandler)]
    PROCEDURE FAPostingGroupNetChangeReportDateError@15();
    BEGIN
      // Verify error on 'Fixed Asset Posting Group Net Change' report for blank Starting date and ending date.

      // Setup:
      Initialize;
      EnqueueValuesForForFixedAssetReport('',0D,0D,FALSE);  // 0D for starting Date and Ending Date, '' for Fixed Asset No., FALSE for TotalPerGLAccount.

      // Exercise:
      ASSERTERROR REPORT.RUN(REPORT::"FA Posting Group - Net Change");

      // Verify: Verify error on 'Fixed Asset Posting Group Net Change' report for blank Starting date and ending date.
      Assert.ExpectedError(DateErr);
    END;

    [Test]
    [HandlerFunctions(FAPostingGroupNetChangeHandler)]
    PROCEDURE FAPostingGroupNetChangeReportGLAccFalse@42();
    VAR
      FixedAsset@1000 : Record 5600;
      FAPostingGroup@1001 : Record 5606;
      AcquisitionCost@1004 : Decimal;
    BEGIN
      // Verify 'Fixed Asset Posting Group Net Change' report for Acquired Fixed Asset.

      // Setup: Create Fixed Asset with Acquisition.
      Initialize;
      AcquisitionCost := CreateFixedAssetWithAcquisitionCost(FixedAsset);
      EnqueueValuesForForFixedAssetReport(FixedAsset."No.",WORKDATE,WORKDATE,FALSE);  // FALSE for FixedAssetsAcquired.

      // Exercise.
      REPORT.RUN(REPORT::"FA Posting Group - Net Change");

      // Verify: Verify Acquisition Cost Amount on 'Fixed Asset Posting Group Net Change'.
      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      LibraryReportDataset.LoadDataSetFile;
      VerifyFixedAssetReport(
        AccNoFAPostGrpBuffer1Caption,FAPostingGroup."Acquisition Cost Account",
        AmtFAPostGroupBuffer1Caption,AcquisitionCost);
    END;

    [Test]
    [HandlerFunctions(FAPostingGroupNetChangeHandler)]
    PROCEDURE FAPostingGroupNetChangeReportGLAccTrue@39();
    VAR
      FixedAsset@1000 : Record 5600;
      GenJournalLine@1001 : Record 81;
      FAPostingGroup@1003 : Record 5606;
    BEGIN
      // Verify 'Fixed Asset Posting Group Net Change' report for Acquired Fixed Asset with Totals as per G/L Account TRUE.

      // Setup: Create Fixed Asset and post its Acquisition and depreciation.
      Initialize;
      CreateFixedAssetWithAcquisitionCost(FixedAsset);
      EnqueueValuesForForFixedAssetReport(FixedAsset."No.",WORKDATE,WORKDATE,TRUE);  // TRUE for FixedAssetsAcquired.
      CreateAndPostFAJournalLine(
        FixedAsset."No.",GenJournalLine."FA Posting Type"::Depreciation,'',-LibraryRandom.RandDec(5,2));

      // Exercise.
      REPORT.RUN(REPORT::"FA Posting Group - Net Change");

      // Verify: Verify Net Change in Acquisition Cost Amount and Accumulated Depreciation Amount.
      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      LibraryReportDataset.LoadDataSetFile;
      VerifyFixedAssetReport(
        AccNoFAPostGrpBuffer2Caption,FAPostingGroup."Accum. Depreciation Account",
        GLAccNetChangeCaption,CalculateAmount(FAPostingGroup."Accum. Depreciation Account"));
      VerifyFixedAssetReport(
        AccNoFAPostGrpBuffer2Caption,FAPostingGroup."Acquisition Cost Account",
        GLAccNetChangeCaption,CalculateAmount(FAPostingGroup."Acquisition Cost Account"));
    END;

    [Test]
    [HandlerFunctions(FixedAssetListRequestPageHandler)]
    PROCEDURE FixedAssetListReportDeprCodeError@5();
    BEGIN
      // Verify error on Fixed Asset List report for blank Depreciation Book Code.

      // Setup.
      Initialize;
      EnqueueValuesForFixedAssetListReport('',FALSE,'');  // '' for Depreciation Book Code and Fixed Asset No., FALSE for New Page Per Asset.

      // Exercise.
      ASSERTERROR REPORT.RUN(REPORT::"Fixed Asset - List");

      // Verify: Verify error on Fixed Asset List report for blank Depreciation Book Code.
      Assert.ExpectedError(DepreciationBookErr);
    END;

    [Test]
    [HandlerFunctions(FixedAssetListRequestPageHandler)]
    PROCEDURE FAListReportNewPagePerAssetFalse@21();
    VAR
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      // Verify Fixed Asset List report with New Page per Asset FALSE.

      // Setup: Create Fixed Asset, create FA Depreciation Book.
      Initialize;
      CreateAndModifyFixedAsset(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      EnqueueValuesForFixedAssetListReport(FADepreciationBook."Depreciation Book Code",FALSE,FixedAsset."No.");  // FALSE for New Page Per Asset.
      COMMIT;  // Commit required for running report.

      // Exercise.
      REPORT.RUN(REPORT::"Fixed Asset - List");

      // Verify: Verify Fixed Asset No. on Fixed Asset report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(FANoCaption,FADepreciationBook."FA No.");
    END;

    [Test]
    [HandlerFunctions(FixedAssetListRequestPageHandler)]
    PROCEDURE FAListReportNewPagePerAssetTrue@81();
    VAR
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1003 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      // Verify Fixed Asset List report with New Page per Asset TRUE.

      // Setup: Create Fixed Asset, create FA Depreciation Book.
      Initialize;
      CreateAndModifyFixedAsset(FixedAsset);
      CreateAndModifyFixedAsset(FixedAsset2);
      CreateFADepreciationBook(
        FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      CreateFADepreciationBook(
        FADepreciationBook,FixedAsset2."No.",FixedAsset2."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      EnqueueValuesForFixedAssetListReport(
        FADepreciationBook."Depreciation Book Code",TRUE,
        STRSUBSTNO(FixedAssetFilter,FixedAsset."No.",FixedAsset2."No."));  // TRUE for New Page Per Asset.
      FixedAsset.SETRANGE("No.",FixedAsset."No.",FixedAsset2."No.");
      COMMIT;  // Commit required for running report.

      // Exercise.
      REPORT.RUN(REPORT::"Fixed Asset - List");

      // Verify: Verify two fixed Asset printed on two different pages when 'New Page per Asset' TRUE on Fixed Asset report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyFixedAssetReport(FANoCaption,FixedAsset."No.",PageGroupNoCaption,FixedAsset.COUNT);
      VerifyFixedAssetReport(FANoCaption,FixedAsset2."No.",PageGroupNoCaption,FixedAsset.COUNT + 1);  // Adding 1 for next page Group No.
    END;

    [Test]
    [HandlerFunctions(MaintenanceAnalysisRequestPageHandler)]
    PROCEDURE MaintenanceAnalysisDeprCodeError@13();
    BEGIN
      // Verify error on Maintenance Analysis report for blank Depreciation Book Code.

      // Setup:
      Initialize;
      EnqueueValuesForMaintenanceAnalysisReport('',0D,0D,'');  // '' for Depreciation Book code, maintenance code, 0D for Starting Date and Ending date.
      COMMIT;  // Commit required for running report.

      // Exercise.
      ASSERTERROR REPORT.RUN(REPORT::"Maintenance - Analysis");

      // Verify: Verify error on Maintenance Analysis report for blank Depreciation Book Code.
      Assert.ExpectedError(DepreciationBookErr);
    END;

    [Test]
    [HandlerFunctions(MaintenanceAnalysisRequestPageHandler)]
    PROCEDURE MaintenanceAnalysisDateError@14();
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // Verify error on Maintenance Analysis report for blank Starting Date.

      // Setup:
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      EnqueueValuesForMaintenanceAnalysisReport(DepreciationBook.Code,0D,0D,'');  // '' for Maintenance code.
      COMMIT;  // Commit required for running report.

      // Exercise.
      ASSERTERROR REPORT.RUN(REPORT::"Maintenance - Analysis");

      // Verify: Verify error on Maintenance Analysis report for blank Starting Date.
      Assert.ExpectedError(DateErr2);
    END;

    [Test]
    [HandlerFunctions(MaintenanceAnalysisRequestPageHandler)]
    PROCEDURE MaintenanceAnalysisReportForFAAcquired@20();
    VAR
      FixedAsset@1001 : Record 5600;
      GenJournalLine@1002 : Record 81;
      Maintenance@1004 : Record 5626;
      FADepreciationBook@1005 : Record 5612;
      Amount@1006 : Decimal;
    BEGIN
      // Verify Maintenance Analysis report for Fixed Asset after posting its Acquisition and Maintenance.

      // Setup:
      Initialize;
      CreateFixedAssetWithAcquisitionCost(FixedAsset);
      LibraryFixedAsset.CreateMaintenance(Maintenance);
      Amount := LibraryRandom.RandDec(100,2);  // Take random Amount.
      CreateAndPostFAJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::Maintenance,Maintenance.Code,Amount);
      FADepreciationBook.SETRANGE("FA No.",FixedAsset."No.");
      FADepreciationBook.FINDFIRST;
      EnqueueValuesForMaintenanceAnalysisReport(FADepreciationBook."Depreciation Book Code",WORKDATE,WORKDATE,Maintenance.Code);
      COMMIT;  // Commit required for running report.

      // Exercise.
      REPORT.RUN(REPORT::"Maintenance - Analysis");

      // Verify: Verify Fixed Asset No and Maintenance amount on Maintenance Analysis report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(NoFACaption,FixedAsset."No.");
      LibraryReportDataset.AssertElementWithValueExists(Amounts1Caption,Amount);
      LibraryReportDataset.AssertElementWithValueExists(Amounts2Caption,0);
      LibraryReportDataset.AssertElementWithValueExists(Amounts3Caption,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,MaintenanceDetailsRequestPagetHandler)]
    PROCEDURE MaintenanceDetailExcludeReversedEntries@44();
    VAR
      Maintenance@1000 : Record 5626;
      AcquisitionCost@1001 : Decimal;
    BEGIN
      // Verify Report Maintenance - Detail exclude Reversed entries.

      // Setup: Create and Post FA GL Journal for Acquisition Cost. Post Maintenance Entries. Reverse Maintenance Ledger Entries.
      Initialize;
      LibraryFixedAsset.CreateMaintenance(Maintenance);
      AcquisitionCost := CreatePostMaintenanceEntryAndReverse(Maintenance.Code,FALSE);

      // Exercise: Run Maintenance - Detail Report excluding Reversed entries.
      REPORT.RUN(REPORT::"Maintenance - Details");

      // Verify: Verify Amount for Maintenance Entry.
      LibraryReportDataset.LoadDataSetFile;
      VerifyMaintenanceDetailReport(Maintenance.Code,ROUND(AcquisitionCost / 2));  // Devide by 2 since Maintenance Cost is half of Acquisition Cost.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,MaintenanceDetailsRequestPagetHandler)]
    PROCEDURE MaintenanceDetailIncludeReversedEntries@43();
    VAR
      Maintenance@1002 : Record 5626;
      AcquisitionCost@1000 : Decimal;
    BEGIN
      // Verify Report Maintenance - Detail include Reversed entries.

      // Setup: Create and Post FA GL Journal for Acquisition Cost. Post Maintenance Entries. Reverse Maintenance Ledger Entries.
      Initialize;
      LibraryFixedAsset.CreateMaintenance(Maintenance);
      AcquisitionCost := CreatePostMaintenanceEntryAndReverse(Maintenance.Code,TRUE);

      // Exercise: Run Maintenance - Detail Report including Reversed entries.
      REPORT.RUN(REPORT::"Maintenance - Details");

      // Verify: Verify Amounts for Maintenance and Reversed Entries.
      LibraryReportDataset.LoadDataSetFile;
      VerifyMaintenanceDetailReport(Maintenance.Code,ROUND(AcquisitionCost / 2));  // Devide by 2 since Maintenance Cost is half of Acquisition Cost.
      LibraryReportDataset.Reset;
      VerifyMaintenanceDetailReport('',ROUND(AcquisitionCost / 2));  // Devide by 2 since Maintenance Cost is half of Acquisition Cost.
      LibraryReportDataset.AssertElementWithValueExists(AmountCaption,-ROUND(AcquisitionCost / 2));
    END;

    [Test]
    [HandlerFunctions(NavigatePagehandler,DocumentEntriesRequestPageHandler)]
    PROCEDURE DocumentEntriesForFALedgerEntry@35();
    VAR
      FixedAsset@1000 : Record 5600;
      FALedgerEntry@1002 : Record 5601;
      FALedgerEntries@1001 : TestPage 5604;
    BEGIN
      // Verify Document Entries Report for FA Ledger Entry.

      // Setup: Create Fixed Asset and post Acquisition Cost for It.
      Initialize;
      CreateFixedAssetWithAcquisitionCost(FixedAsset);
      FALedgerEntries.OPENVIEW;
      FALedgerEntries.FILTER.SETFILTER("FA No.",FixedAsset."No.");

      // Exercise: Run Document Entries Report from NavigatePagehandler.
      FALedgerEntries.Action18.INVOKE;  // Invoking Navigate.

      // Verify: Verify FA Ledger Entry Table Name. no. of Records and Amount on Document Entries Report.
      LibraryReportDataset.LoadDataSetFile;
      FALedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      VerifyDocumentEntries(TableNameCap,FALedgerEntry.TABLECAPTION,NoOfRecordsCap,FALedgerEntry.COUNT);
      FALedgerEntry.FINDFIRST;
      VerifyDocumentEntries(FALedgEntryDocNoCap,FALedgerEntry."Document No.",FALedgEntryAmountCap,FALedgerEntry.Amount);
    END;

    [Test]
    [HandlerFunctions(NavigatePagehandler,DocumentEntriesRequestPageHandler)]
    PROCEDURE DocumentEntriesForMaintenanceLedgerEntry@36();
    VAR
      FixedAsset@1000 : Record 5600;
      GenJournalLine@1001 : Record 81;
      MaintenanceLedgerEntry@1003 : Record 5625;
      MaintenanceLedgerEntries@1002 : TestPage 5641;
    BEGIN
      // Verify Document Entries Report for Maintenance Ledger Entry.

      // Setup: Create Fixed Asset and post Acquisition Cost and Maintenance Entry for It.
      Initialize;
      CreateFixedAssetWithAcquisitionCost(FixedAsset);
      CreateAndPostFAJournalLine(
        FixedAsset."No.",GenJournalLine."FA Posting Type"::Maintenance,'',LibraryRandom.RandDec(100,2));  // Take Random Amount.
      MaintenanceLedgerEntries.OPENVIEW;
      MaintenanceLedgerEntries.FILTER.SETFILTER("FA No.",FixedAsset."No.");

      // Exercise: Run Document Entries Report from NavigatePagehandler.
      MaintenanceLedgerEntries.Action18.INVOKE;  // Invoking Navigate.

      // Verify: Verify Maintenance Ledger Entry Table Name, no. of Records and Amount on Document Entries Report.
      LibraryReportDataset.LoadDataSetFile;
      MaintenanceLedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      VerifyDocumentEntries(TableNameCap,MaintenanceLedgerEntry.TABLECAPTION,NoOfRecordsCap,MaintenanceLedgerEntry.COUNT);
      MaintenanceLedgerEntry.FINDFIRST;
      VerifyDocumentEntries(
        MaintLedgEntryDocNoCap,MaintenanceLedgerEntry."Document No.",MaintLedgEntryAmountCap,MaintenanceLedgerEntry.Amount);
    END;

    [Test]
    [HandlerFunctions(NavigatePagehandler,DocumentEntriesRequestPageHandler)]
    PROCEDURE DocumentEntriesForInsCoverageLedgerEntry@53();
    VAR
      FixedAsset@1002 : Record 5600;
      InsuranceJournalBatch@1003 : Record 5634;
      InsuranceJournalLine@1000 : Record 5635;
      InsCoverageLedgerEntry@1004 : Record 5629;
      InsCoverageLedgerEntries@1001 : TestPage 5647;
    BEGIN
      // Verify Document Entries Report for Insurance Coverage Ledger Entry.

      // Setup: Create Fixed Asset and post Insurance for it.
      Initialize;
      CreateAndModifyFixedAsset(FixedAsset);
      ModifyInsuranceJournalBatch(InsuranceJournalBatch);
      LibraryFixedAsset.CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch."Journal Template Name",InsuranceJournalBatch.Name);
      ModifyInsuranceJournalLine(InsuranceJournalLine,WORKDATE,LibraryUtility.GenerateGUID,FixedAsset."No.");
      LibraryFixedAsset.PostInsuranceJournal(InsuranceJournalLine);
      InsCoverageLedgerEntries.OPENVIEW;
      InsCoverageLedgerEntries.FILTER.SETFILTER("FA No.",FixedAsset."No.");

      // Exercise: Run Document Entries Report from NavigatePagehandler.
      InsCoverageLedgerEntries.Action35.INVOKE;  // Invoking Navigate.

      // Verify: Verify Ins. Coverage Ledger Entry Table Name, no. of Records and Amount on Document Entries Report.
      LibraryReportDataset.LoadDataSetFile;
      InsCoverageLedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      VerifyDocumentEntries(TableNameCap,InsCoverageLedgerEntry.TABLECAPTION,NoOfRecordsCap,InsCoverageLedgerEntry.COUNT);
      InsCoverageLedgerEntry.FINDFIRST;
      VerifyDocumentEntries(
        InsCoverageLedgEntryDocNoCap,InsCoverageLedgerEntry."Document No.",
        InsCoverageLedgEntryAmountCap,InsCoverageLedgerEntry.Amount);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(LibraryReportDataset);
      LibraryVariableStorage.Clear;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculateAmount@31(GLAccountNo@1000 : Code[20]) : Decimal;
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.SETRANGE("No.",GLAccountNo);
      GLAccount.SETFILTER("Date Filter",'%1',WORKDATE);
      GLAccount.FINDFIRST;
      GLAccount.CALCFIELDS("Net Change");
      EXIT(GLAccount."Net Change");
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLine@29(FANo@1002 : Code[20];FAPostingType@1003 : Option;MaintenanceCode@1001 : Code[10];Amount@1005 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1004 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateFAGLJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,FANo,FAPostingType,Amount);
      GenJournalLine.VALIDATE("Maintenance Code",MaintenanceCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostMaintenanceEntryAndReverse@45(MaintenanceCode@1001 : Code[10];IncludeReversedEntries@1000 : Boolean) AcquisitionCost : Decimal;
    VAR
      GenJournalLine@1004 : Record 81;
      FixedAsset@1003 : Record 5600;
    BEGIN
      AcquisitionCost := CreateFixedAssetWithAcquisitionCost(FixedAsset);
      CreateAndPostFAJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::Maintenance,MaintenanceCode,AcquisitionCost / 2);  // Take Amount half of Acquisition Cost.
      CreateAndPostFAJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::Maintenance,'',AcquisitionCost / 2);  // Take Amount half of Acquisition Cost.

      // Enqueue values for Confirm and Message Handler.
      LibraryVariableStorage.Enqueue(ReverseEntryMessage);
      LibraryVariableStorage.Enqueue(SuccessfulReversedMessage);
      ReverseMaintenanceLedgerEntry(FixedAsset."No.");

      // Enqueue values for MaintenanceDetailsRequestPagetHandler.
      LibraryVariableStorage.Enqueue(FixedAsset."No.");
      LibraryVariableStorage.Enqueue(IncludeReversedEntries);
      COMMIT;  // Required to run Maintenance - Details report.
    END;

    LOCAL PROCEDURE CreateAndModifyFixedAsset@61(VAR FixedAsset@1002 : Record 5600);
    BEGIN
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE("FA Posting Group",ModifyFAPostingGroup);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFixedAssetWithAcquisitionCost@12(VAR FixedAsset@1000 : Record 5600) Amount : Decimal;
    VAR
      FADepreciationBook@1001 : Record 5612;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Create Fixed Asset, Post Acquisition Cost for it.
      CreateAndModifyFixedAsset(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      Amount := LibraryRandom.RandDec(100,2);  // Taking Random value for Acqusition Cost.
      CreateAndPostFAJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",'',Amount);
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@30(VAR FADepreciationBook@1000 : Record 5612;FANo@1002 : Code[20];FAPostingGroup@1003 : Code[10];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAGLJournalLine@64(VAR GenJournalLine@1003 : Record 81;JournalTemplateName@1004 : Code[10];JournalTemplateBatch@1005 : Code[10];FANo@1002 : Code[20];FAPostingType@1001 : Option;Amount@1000 : Decimal);
    VAR
      GLAccount@1006 : Record 15;
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,JournalTemplateName,JournalTemplateBatch,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",FANo,Amount);
      GLAccount.SETFILTER("Gen. Posting Type",'<>%1',GLAccount."Gen. Posting Type"::" ");
      LibraryERM.FindGLAccount(GLAccount);
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@86(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE EnqueueValuesForForFixedAssetReport@17(FixedAssetNo@1001 : Code[20];StartingDate@1003 : Date;EndingDate@1002 : Date;FixedAssetsAcquired@1000 : Boolean);
    BEGIN
      EnqueueValues(FixedAssetNo,StartingDate,EndingDate);
      LibraryVariableStorage.Enqueue(FixedAssetsAcquired);
    END;

    LOCAL PROCEDURE EnqueueValuesForFixedAssetListReport@95(DepreciationBookCode@1000 : Variant;NewPagePerAsset@1001 : Variant;FixedAssetFilter@1002 : Variant);
    BEGIN
      LibraryVariableStorage.Enqueue(DepreciationBookCode);
      LibraryVariableStorage.Enqueue(NewPagePerAsset);
      LibraryVariableStorage.Enqueue(FixedAssetFilter);
    END;

    LOCAL PROCEDURE EnqueueValuesForMaintenanceAnalysisReport@26(DepreciationBookCode@1002 : Code[20];StartingDate@1001 : Date;EndingDate@1000 : Date;MaintenanceCode@1003 : Code[10]);
    BEGIN
      EnqueueValues(DepreciationBookCode,StartingDate,EndingDate);
      LibraryVariableStorage.Enqueue(MaintenanceCode);
    END;

    LOCAL PROCEDURE EnqueueValues@27(No@1002 : Code[20];StartingDate@1001 : Date;EndingDate@1000 : Date);
    BEGIN
      LibraryVariableStorage.Enqueue(No);
      LibraryVariableStorage.Enqueue(StartingDate);
      LibraryVariableStorage.Enqueue(EndingDate);
    END;

    LOCAL PROCEDURE ModifyFAJournalLine@34(VAR FAJournalLine@1006 : Record 5621);
    VAR
      FixedAsset@1007 : Record 5600;
    BEGIN
      // Take Random Values for Different fields.
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FAJournalLine.VALIDATE("FA Posting Date",0D); // 0D for Blank Posting Date.
      FAJournalLine.VALIDATE("Posting Date",0D);
      FAJournalLine.VALIDATE("Document No.",'');
      FAJournalLine.VALIDATE("FA No.",FixedAsset."No.");
      FAJournalLine.VALIDATE("FA Posting Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLine.VALIDATE("Depr. until FA Posting Date",TRUE);
      FAJournalLine.VALIDATE("Depr. Acquisition Cost",TRUE);
      FAJournalLine.VALIDATE("Salvage Value",LibraryRandom.RandDec(10,1));
      FAJournalLine.VALIDATE("FA Reclassification Entry",TRUE);
      FAJournalLine.VALIDATE("FA Error Entry No.",LibraryRandom.RandInt(10));
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyInsuranceJournalBatch@59(VAR InsuranceJournalBatch@1000 : Record 5634);
    BEGIN
      SelectInsuranceJournalBatch(InsuranceJournalBatch);
      InsuranceJournalBatch.VALIDATE("No. Series",'');  // Modify No. Series with blank value.
      InsuranceJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyInsuranceJournalLine@7(VAR InsuranceJournalLine@1003 : Record 5635;PostingDate@1000 : Date;DocumentNo@1001 : Code[20];FANo@1002 : Code[20]);
    VAR
      Insurance@1004 : Record 5628;
    BEGIN
      LibraryFixedAsset.FindInsurance(Insurance);
      InsuranceJournalLine.VALIDATE("Posting Date",PostingDate);
      InsuranceJournalLine.VALIDATE("Document No.",DocumentNo);
      InsuranceJournalLine.VALIDATE("Insurance No.",Insurance."No.");
      InsuranceJournalLine.VALIDATE("FA No.",FANo);
      InsuranceJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(100,2));  // Use Random Amount.
      InsuranceJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyFAPostingGroup@3() : Code[10];
    VAR
      FAPostingGroup@1000 : Record 5606;
    BEGIN
      FAPostingGroup.FINDFIRST;
      FAPostingGroup.VALIDATE("Custom 1 Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 2 Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.MODIFY(TRUE);
      EXIT(FAPostingGroup.Code);
    END;

    LOCAL PROCEDURE ReverseMaintenanceLedgerEntry@48(FANo@1001 : Code[20]);
    VAR
      MaintenanceLedgerEntry@1000 : Record 5625;
      ReversalEntry@1002 : Record 179;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.SETRANGE("Maintenance Code",'');
      MaintenanceLedgerEntry.FINDFIRST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(MaintenanceLedgerEntry."Transaction No.");
    END;

    LOCAL PROCEDURE RunFixedAssetBookValue02Report@60(No@1007 : Code[20]);
    VAR
      FixedAsset@1000 : Record 5600;
      FixedAssetBookValue02@1003 : Report 5606;
    BEGIN
      CLEAR(FixedAssetBookValue02);
      FixedAsset.SETRANGE("No.",No);
      FixedAssetBookValue02.SETTABLEVIEW(FixedAsset);
      FixedAssetBookValue02.SetMandatoryFields(LibraryFixedAsset.GetDefaultDeprBook,WORKDATE,WORKDATE);
      COMMIT;
      FixedAssetBookValue02.RUN;
    END;

    LOCAL PROCEDURE SelectFAJournalBatch@37(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1004 : Record 5619;
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Delete All FA General Line with Selected Batch.
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.FindFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalBatch."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalBatch.Name);
      FAJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE SelectInsuranceJournalBatch@2(VAR InsuranceJournalBatch@1000 : Record 5634);
    VAR
      InsuranceJournalLine@1001 : Record 5635;
    BEGIN
      InsuranceJournalBatch.FINDFIRST;
      InsuranceJournalLine.SETRANGE("Journal Template Name",InsuranceJournalBatch."Journal Template Name");
      InsuranceJournalLine.SETRANGE("Journal Batch Name",InsuranceJournalBatch.Name);
      InsuranceJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE VerifyDocumentEntries@62(RowCaption@1003 : Text[50];RowValue@1002 : Text[50];ColumnCaption@1001 : Text[50];ColumnValue@1000 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(RowCaption,RowValue);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(ColumnCaption,ColumnValue);
    END;

    LOCAL PROCEDURE VerifyFixedAssetReport@38(RowCaption@1000 : Text[50];RowValue@1001 : Text[50];ColumnCaption@1002 : Text[50];ColumnValue@1003 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(RowCaption,RowValue);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(ColumnCaption,ColumnValue)
    END;

    LOCAL PROCEDURE VerifyFAJournalTestReportWarning@40(FAJournalLine@1000 : Record 5621);
    VAR
      FADepreciationBook@1001 : Record 5612;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,FAJournalLine.FIELDCAPTION("FA Posting Date")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,FAJournalLine.FIELDCAPTION("Document No.")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,FAJournalLine.FIELDCAPTION("Depreciation Book Code")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError2,
          FAJournalLine.FIELDCAPTION("Depreciation Book Code"),
          FAJournalLine.FIELDCAPTION("Duplicate in Depreciation Book")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError3,
          FADepreciationBook.TABLECAPTION,
          FAJournalLine."FA No.",FAJournalLine."Depreciation Book Code"));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError4,
          FAJournalLine.FIELDCAPTION("Depr. until FA Posting Date"),
          FAJournalLine.FIELDCAPTION("FA Error Entry No.")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError4,
          FAJournalLine.FIELDCAPTION("Depr. Acquisition Cost"),
          FAJournalLine.FIELDCAPTION("FA Error Entry No.")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError4,
          FAJournalLine.FIELDCAPTION("Salvage Value"),
          FAJournalLine.FIELDCAPTION("FA Error Entry No.")));

      LibraryReportDataset.SetRange('FA_Journal_Line__FA_No__',FAJournalLine."FA No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFound,'FA_Journal_Line__FA_No__',FAJournalLine."FA No."));
      LibraryReportDataset.AssertCurrentRowValue('FA_Journal_Line__FA_Posting_Type_',FORMAT(FAJournalLine."FA Posting Type"));
      LibraryReportDataset.AssertCurrentRowValue('FA_Journal_Line_Description',FAJournalLine.Description);
      LibraryReportDataset.AssertCurrentRowValue('FA_Journal_Line__Depr__until_FA_Posting_Date_',TRUE);
    END;

    LOCAL PROCEDURE VerifyMaintenanceDetailReport@46(MaintenanceCode@1000 : Code[10];Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(MaintenanceCodeCaption,MaintenanceCode);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(AmountCaption,Amount);
    END;

    LOCAL PROCEDURE VerifyInsuranceJournalTestReportWarning@10(InsuranceJournalLine@1000 : Record 5635);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,InsuranceJournalLine.FIELDCAPTION("Posting Date")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,InsuranceJournalLine.FIELDCAPTION("FA No.")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(FieldError,InsuranceJournalLine.FIELDCAPTION("Document No.")));

      LibraryReportDataset.SetRange('Insurance_Journal_Line__Insurance_No__',InsuranceJournalLine."Insurance No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFound,'Insurance_Journal_Line__Insurance_No__',InsuranceJournalLine."Insurance No."));
      LibraryReportDataset.AssertCurrentRowValue('Insurance_Journal_Line_Description',InsuranceJournalLine.Description);
      LibraryReportDataset.AssertCurrentRowValue('Insurance_Journal_Line_Amount',InsuranceJournalLine.Amount);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@32(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE DocumentEntriesRequestPageHandler@52(VAR DocumentEntries@1000 : TestRequestPage 35);
    BEGIN
      DocumentEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE FAPostingTypesOvervMatrixPageHandler@6(VAR FAPostingTypesOvervMatrix@1000 : TestPage 9277);
    VAR
      FANo@1001 : Variant;
      Amount@1002 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(FANo);
      LibraryVariableStorage.Dequeue(Amount);
      FAPostingTypesOvervMatrix.FILTER.SETFILTER("FA No.",FANo);
      FAPostingTypesOvervMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,FormatString));  // Verifying Book Value.
    END;

    [RequestPageHandler]
    PROCEDURE FixedAssetAcquisitionListHandler@22(VAR FixedAssetAcquisitionList@1000 : TestRequestPage 5608);
    VAR
      StartingDate@1001 : Variant;
      EndingDate@1002 : Variant;
      FixedAssetNo@1003 : Variant;
      FixedAssetsAcquired@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FixedAssetNo);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      LibraryVariableStorage.Dequeue(FixedAssetsAcquired);
      FixedAssetAcquisitionList.StartingDate.SETVALUE(StartingDate);
      FixedAssetAcquisitionList.EndingDate.SETVALUE(EndingDate);
      FixedAssetAcquisitionList.Control7.SETVALUE(FixedAssetsAcquired);  // Setting Include Fixed Assets Not Yet Acquired.
      FixedAssetAcquisitionList."Fixed Asset".SETFILTER("No.",FixedAssetNo);
      FixedAssetAcquisitionList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE FAPostingGroupNetChangeHandler@24(VAR FAPostingGroupNetChange@1000 : TestRequestPage 5611);
    VAR
      StartingDate@1004 : Variant;
      EndingDate@1003 : Variant;
      FixedAssetNo@1002 : Variant;
      TotalPerGLAccount@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FixedAssetNo);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      LibraryVariableStorage.Dequeue(TotalPerGLAccount);
      FAPostingGroupNetChange.StartingDate.SETVALUE(StartingDate);
      FAPostingGroupNetChange.EndingDate.SETVALUE(EndingDate);
      FAPostingGroupNetChange.Control1.SETVALUE(TotalPerGLAccount);  // Setting Total as per G/L Account.
      FAPostingGroupNetChange."FA Depreciation Book".SETFILTER("FA No.",FixedAssetNo);
      FAPostingGroupNetChange.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE FixedAssetListRequestPageHandler@23(VAR FixedAssetList@1000 : TestRequestPage 5601);
    VAR
      DepreciationBookCode@1001 : Variant;
      NewPagePerAsset@1002 : Variant;
      FixedAssetFilter@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DepreciationBookCode);
      LibraryVariableStorage.Dequeue(NewPagePerAsset);
      LibraryVariableStorage.Dequeue(FixedAssetFilter);
      FixedAssetList.Control1.SETVALUE(DepreciationBookCode);  // Setting Depreciation Book Code.
      FixedAssetList.Control2.SETVALUE(NewPagePerAsset);  // Setting New Page per Asset.
      FixedAssetList."Fixed Asset".SETFILTER("No.",FixedAssetFilter);
      FixedAssetList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE MaintenanceAnalysisRequestPageHandler@25(VAR MaintenanceAnalysis@1000 : TestRequestPage 5630);
    VAR
      DepreciationBookCode@1001 : Variant;
      StartingDate@1003 : Variant;
      EndingDate@1002 : Variant;
      MaintenanceCode@1004 : Variant;
      Period@1005 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      LibraryVariableStorage.Dequeue(DepreciationBookCode);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      LibraryVariableStorage.Dequeue(MaintenanceCode);
      MaintenanceAnalysis.DeprBookCode.SETVALUE(DepreciationBookCode);  // Setting Depreciation Book Code.
      MaintenanceAnalysis.StartingDate.SETVALUE(StartingDate);
      MaintenanceAnalysis.EndingDate.SETVALUE(EndingDate);
      MaintenanceAnalysis.AmountField1.SETVALUE(MaintenanceCode);
      MaintenanceAnalysis.Control10.SETVALUE(Period::"at Ending Date");  // Setting Period1.
      MaintenanceAnalysis.AmountField2.SETVALUE(MaintenanceCode);
      MaintenanceAnalysis.Control9.SETVALUE(Period::"before Starting Date");  // Setting Period2.
      MaintenanceAnalysis.AmountField3.SETVALUE(MaintenanceCode);
      MaintenanceAnalysis.Control11.SETVALUE(Period::"Net Change");  // Setting Period3.
      MaintenanceAnalysis.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE MaintenanceDetailsRequestPagetHandler@47(VAR MaintenanceDetails@1000 : TestRequestPage 5634);
    VAR
      No@1001 : Variant;
      IncludeReversedEntries@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(No);  // Dequeue Variable.
      LibraryVariableStorage.Dequeue(IncludeReversedEntries);
      MaintenanceDetails."Fixed Asset".SETFILTER("No.",No);
      MaintenanceDetails.IncludeReversedEntries.SETVALUE(IncludeReversedEntries);  // Setting Include Reversed Entries boolean.
      MaintenanceDetails.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      // Message Handler.
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [PageHandler]
    PROCEDURE NavigatePagehandler@41(VAR Navigate@1000 : TestPage 344);
    BEGIN
      Navigate.Print.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RHFixedAssetJournalTest@49(VAR FixedAssetJournalTest@1000 : TestRequestPage 5602);
    BEGIN
      FixedAssetJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHInsuranceJournalTest@50(VAR InsuranceJournalTest@1000 : TestRequestPage 5622);
    BEGIN
      InsuranceJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHFixedAssetBookValue02Report@68(VAR FixedAssetBookValue02Report@1000 : TestRequestPage 5606);
    BEGIN
      FixedAssetBookValue02Report.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset]
       1. Check Fixed Asset Journal Test Report with Different Types of Warning Message.
       2. Check Insurance Journal Test Report with Different Types of Warning Message.
       3. Verify Program populate value on Custom 1 and Custom 2 section on FA Book Value 02 Report after posting the FA G/L Journal.
       4. Verify amounts are displayed as per the Date Filter applied in the FA Posting Types Overview Matrix.
       5. Verify error on Fixed Asset Acquisition List Report for blank Starting date.
       6. Verify error on Fixed Asset Acquisition List Report for blank Ending date.
       7. Verify Fixed Asset Acquisition List Report for Fixed Asset not yet Acquired.
       8. Verify Fixed Asset Acquisition List Report for Acquired Fixed Asset.
       9. Verify error on 'Fixed Asset Posting Group Net Change' report for blank Starting date and ending date.
      10. Verify 'Fixed Asset Posting Group Net Change' report for Acquired Fixed Asset.
      11. Verify 'Fixed Asset Posting Group Net Change' report for Acquired Fixed Asset with Totals as per G/L Account TRUE.
      12. Verify error on Fixed Asset List report for blank Depreciation Book Code.
      13. Verify Fixed Asset List report with New Page per Asset FALSE.
      14. Verify Fixed Asset List report with New Page per Asset TRUE.
      15. Verify error on Maintenance Analysis report for blank Depreciation Book Code.
      16. Verify error on Maintenance Analysis report for blank Starting Date.
      17. Verify Maintenance Analysis report for Fixed Asset after posting its Acquisition and Maintenance.
      18. Verify Report Maintenance - Detail exclude Reversed entries.
      19. Verify Report Maintenance - Detail include Reversed entries.
      20. Verify Document Entries Report for FA Ledger Entry.
      21. Verify Document Entries Report for Maintenance Ledger Entry.
      22. Verify Document Entries Report for Insurance Coverage Ledger Entry.

      TFS_TS_ID = 262326
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------------
      FixedAssetJournalTestWarning                                139365
      InsuranceJournalTestWarning                                 134999

      TFS_TS_ID = 285359
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------------
      FABookValue02WithCustomSections                             277848

      TFS_TS_ID = 320045
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------------
      FAPostingTypesOverviewMatrix                                294361

      TFS_TS_ID = 324350
      Covers Test cases:
      ------------------------------------------------------------------------------------------
      Test Function Name                                                                  TFS ID
      ------------------------------------------------------------------------------------------
      FAAcquisitionListReportStartingDateError, FAAcquisitionListReportEndingDateError
      FAAcquisitionListReportForFANotAcquired, FAAcquisitionListReportForFAAcquired       139369
      FAPostingGroupNetChangeReportDateError, FAPostingGroupNetChangeReportGLAccFalse
      FAPostingGroupNetChangeReportGLAccTrue                                              139498
      FixedAssetListReportDeprCodeError, FAListReportNewPagePerAssetFalse
      FAListReportNewPagePerAssetTrue                                                     139364
      MaintenanceAnalysisDeprCodeError,MaintenanceAnalysisDateError
      MaintenanceAnalysisReportForFAAcquired                                              139501

      TFS_TS_ID = 324353
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------------
      MaintenanceDetailExcludeReversedEntries                     122862
      MaintenanceDetailIncludeReversedEntries                     122863

      TFS_TS_ID = 326253
      Covers Test Cases
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      DocumentEntriesForFALedgerEntry, DocumentEntriesForMaintenanceLedgerEntry,
      DocumentEntriesForInsCoverageLedgerEntry                                        139311
    }
    END.
  }
}

