OBJECT Codeunit 134151 ERM Intercompany
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1005 : Codeunit 131300;
      LibraryPurchase@1029 : Codeunit 130512;
      LibrarySales@1028 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1030 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      BlockedErr@1004 : TextConst '@@@={Locked};ENU=You cannot create this type of document when %1 %2 is blocked with type %3';
      ICAccountErr@1006 : TextConst '@@@={Locked};ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      BlockedICPartnerErr@1007 : TextConst '@@@={Locked};ENU=%1 %2 is linked to a blocked IC Partner.';
      ValidationErr@1008 : TextConst '@@@={Locked};ENU=%1 must be %2 in %3.';
      AccountNo@1009 : Code[20];
      GLAccountNo@1010 : Code[20];
      AccountType@1014 : Text[30];
      Amount2@1011 : Decimal;
      ICPartnerBlockedErr@1012 : TextConst '@@@={Locked};ENU="%1 must be equal to ''%2''  in %3: %4=%5. Current value is ''%6''."';
      ValueMustExistErr@1015 : TextConst '@@@={Locked};ENU="%1 must have a value in %2: %3=%4. It cannot be zero or empty."';
      AccountValidationErr@1017 : TextConst '@@@={Locked};ENU=You cannot enter G/L Account or Bank Account in both %1 and %2.';
      EntryMustExistErr@1018 : TextConst '@@@={Locked};ENU=%1 must exist.';
      SameICPartnerErr@1013 : TextConst '@@@={Locked};ENU=The %1 %2 has been assigned to %3 %4.';
      BlankCodeErr@1022 : TextConst '@@@={Locked};ENU="Validation error for Field: %1,  Message = ''%1 must be filled in. Enter a value.''"';
      OpenEntryDeleteErr@1021 : TextConst '@@@={Locked};ENU=You cannot delete IC Partner %1 because it has ledger entries in a fiscal year that has not been closed yet.';
      CustomerDeleteErr@1020 : TextConst '@@@={Locked};ENU=You cannot delete IC Partner %1 because it is used for Customer %2';
      RemoveICPartnerErr@1019 : TextConst '@@@={Locked};ENU=You cannot change the contents of the IC Partner Code field because this %1 has one or more open ledger entries.';
      AccountErr@1016 : TextConst '@@@={Locked};ENU="%1 must have a value in IC Partner: Code=%2. It cannot be zero or empty."';
      EntryMustNotExistErr@1023 : TextConst '@@@={Locked};ENU=%1 must not exist.';
      ICPartnerGLAccountNoErr@1002 : TextConst '@@@={Locked};ENU="%1 must be equal to ''%2''  in %3: %4=%5, %6=%7, %8=%9. Current value is ''%10''."';
      BlockedDimValueErr@1026 : TextConst '@@@={Locked};ENU=%1 %2 - %3 is blocked.';
      BlockedDimensionErr@1025 : TextConst '@@@={Locked};ENU=%1 %2 is blocked.';
      OutOfBalanceErr@1024 : TextConst '@@@={Locked};ENU=%1 %2 is out of balance by %3. Please check that %4, %5, %6 and %7 are correct for each line.';
      InsertDuplicateKeyPassedTxt@1027 : TextConst 'ENU=Inserting duplicate values into the IC Outbox Jnl. Line table should have failed.';
      RecordExistsErr@1058 : TextConst 'ENU=DB:RecordExists';
      TransAlreadyExistErr@1031 : TextConst '@@@={Locked};ENU=Transaction %1 for %2 %3 already exists in the %4 table.';

    [Test]
    PROCEDURE BlockedAllForVendor@36();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
      VendorNo@1002 : Code[20];
    BEGIN
      // Check error while creating IC Journal Line for Blocked Vendor with All.

      // Setup.
      Initialize;
      VendorNo := CreateVendor(Vendor.Blocked::All,CreateICPartner);

      // Exercise: Create IC Journal Line with random values, take -1 for sign factor.
      ASSERTERROR CreateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,VendorNo,-1);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(BlockedErr,Vendor.TABLECAPTION,VendorNo,Vendor.Blocked::All));
    END;

    [Test]
    PROCEDURE BlockedPaymentForVendor@34();
    VAR
      Vendor@1006 : Record 23;
      GenJournalLine@1002 : Record 81;
      ICOutboxTransaction@1001 : Record 414;
    BEGIN
      // Check values on the IC Outbox Transaction for Blocked Vendor with Payment.

      // Setup: Taking -1 for sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,
        CreateVendor(Vendor.Blocked::Payment,CreateICPartner),-1);

      // Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify values on IC Outbox Transactions.
      Assert.IsTrue(
        FindICOutboxTransaction(
          ICOutboxTransaction,GenJournalLine."IC Partner Code",GenJournalLine."Document Type",GenJournalLine."Document No."),
        STRSUBSTNO(EntryMustExistErr,ICOutboxTransaction.TABLECAPTION));

      // Tear Down.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE BlockedAllForVendorWithBlockedICPartner@71();
    VAR
      Vendor@1003 : Record 23;
      GenJournalLine@1000 : Record 81;
      VendorNo@1002 : Code[20];
    BEGIN
      // Check error while creating General Journal Line for Blocked IC Partner and Blocked Vendor with All.

      // Setup.
      Initialize;
      VendorNo := CreateVendor(Vendor.Blocked::All,CreateICPartner);

      // Exercise: Create General Journal Line with random values, take -1 for sign factor.
      ASSERTERROR CreateAndUpdateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,VendorNo,-1);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(BlockedErr,Vendor.TABLECAPTION,VendorNo,Vendor.Blocked::All));
    END;

    [Test]
    PROCEDURE BlockedPaymentForVendorWithBlockedICPartner@22();
    VAR
      Vendor@1005 : Record 23;
      GenJournalLine@1000 : Record 81;
      ICOutboxTransaction@1001 : Record 414;
    BEGIN
      // Check values on the IC Outbox Transaction for Blocked IC Partner and Blocked Vendor with Payment.

      // Setup: Taking -1 for sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,
        CreateVendor(Vendor.Blocked::Payment,CreateICPartner),-1);

      // Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify values on IC Outbox Transactions.
      Assert.IsTrue(
        FindICOutboxTransaction(
          ICOutboxTransaction,GenJournalLine."IC Partner Code",GenJournalLine."Document Type",GenJournalLine."Document No."),
        STRSUBSTNO(EntryMustExistErr,ICOutboxTransaction.TABLECAPTION));

      // Tear Down: Setup default values.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE PostICJournalLineWithGLAccountAndBalanceAccount@32();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GLAccount@1003 : Record 15;
      ICGLAccount@1001 : Record 410;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check error while posting two General Journal Lines with G/L Account No. and Balance Account Number.

      // Setup: Create General Journal Batch and two General Journal Lines, take Random Amount.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      CreateICGLAccount(ICGLAccount);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"IC Partner",CreateICPartner,LibraryRandom.RandDec(100,2));
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-GenJournalLine.Amount);
      UpdateICJournalLine(GenJournalLine,DocumentNo,ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Post the General Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(AccountValidationErr,GenJournalLine.FIELDCAPTION("Account No."),GenJournalLine.FIELDCAPTION("Bal. Account No.")));
    END;

    [Test]
    PROCEDURE PostICJournalLineWithBalanceAccountNoBlank@30();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1008 : Record 232;
      ICOutboxJnlLine@1001 : Record 415;
      ICGLAccount@1005 : Record 410;
      DocumentNo@1002 : Code[20];
      ICPartnerCode@1006 : Code[20];
      Amount@1003 : Decimal;
    BEGIN
      // Check values on the IC Outbox Transaction after posting of two General Journal Lines with Balance Account No. blank.

      // Setup: Create General Journal Batch and General Journal Lines, take Random Amount.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      CreateICGLAccount(ICGLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"IC Partner",CreateICPartner,LibraryRandom.RandDec(100,2));
      ICPartnerCode := GenJournalLine."Account No.";
      Amount := GenJournalLine.Amount;
      DocumentNo := GenJournalLine."Document No.";

      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",ICGLAccount."Map-to G/L Acc. No.",-Amount);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("IC Partner Code",CreateICPartner);
      GenJournalLine.VALIDATE("IC Partner G/L Acc. No.",ICGLAccount."No.");
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Account and IC Partner GL Account Entries in IC Outbox Journal Line.
      VerifyICOutboxJournalLine(
        ICPartnerCode,ICOutboxJnlLine."Account Type"::"IC Partner",ICPartnerCode,GenJournalLine."Document No.",Amount);
      VerifyICOutboxJournalLine(
        ICPartnerCode,ICOutboxJnlLine."Account Type"::"G/L Account",ICGLAccount."No.",GenJournalLine."Document No.",
        GenJournalLine.Amount);

      // Tear Down.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE PostICJournalLineWithoutICPartnerAccountNo@27();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GLAccount@1003 : Record 15;
    BEGIN
      // Check values on the IC Outbox Transaction after posting of two General Journal Lines.

      // Setup: Create General Journal Batch and General Journal Line, take Random Amount.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"IC Partner",CreateICPartner,LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Post the General Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICAccountErr,GenJournalLine.FIELDCAPTION("IC Partner G/L Acc. No."),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE PostICJournalLineWithoutBalanceAccountAndICPartner@58();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GLAccount@1003 : Record 15;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Check error while posting two General Journal Lines without Balance Account No. and IC Partner Number.

      // Setup: Create General Journal Batch and two General Journal Lines, take Random Amount.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"IC Partner",CreateICPartner,LibraryRandom.RandDec(100,2));
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",-GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Post the General Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICAccountErr,GenJournalLine.FIELDCAPTION("IC Partner G/L Acc. No."),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE CustomerBlockedAllError@29();
    VAR
      Customer@1001 : Record 18;
    BEGIN
      // Check Error Message while using a Customer with blocked All and unblocked IC Partner on IC Journal Line.
      Initialize;
      CreateICJournalLineWithCustomerAndICPartner(Customer.Blocked::All,CreateICPartner);
    END;

    [Test]
    PROCEDURE CustomerBlockedInvoiceError@41();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check error message while using a Customer with blocked Invoice and unblocked IC Partner on IC Journal Line.
      Initialize;
      CreateICJournalLineWithCustomerAndICPartner(Customer.Blocked::Invoice,CreateICPartner);
    END;

    [Test]
    PROCEDURE CustomerBlockedAllWithBlockedICPartnerError@6();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check error message while using a Customer with blocked All and blocked IC Partner on IC Journal Line.
      Initialize;
      CreateICJournalLineWithCustomerAndICPartner(Customer.Blocked::All,UpdateICPartnerBlocked(CreateICPartner,TRUE));
    END;

    [Test]
    PROCEDURE CustomerBlockedInvoiceWithBlockedICPartnerError@21();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check error message while using a Customer with blocked Invoice and blocked IC Partner on IC Journal Line.
      Initialize;
      CreateICJournalLineWithCustomerAndICPartner(Customer.Blocked::Invoice,UpdateICPartnerBlocked(CreateICPartner,TRUE));
    END;

    LOCAL PROCEDURE CreateICJournalLineWithCustomerAndICPartner@53(CustomerBlocked@1001 : ' ,Ship,Invoice,All';ICPartnerCode@1004 : Code[20]);
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustomerNo@1003 : Code[20];
    BEGIN
      // Setup: Create Customer with Blocked Options and IC Partner.
      CustomerNo := CreateCustomer(CustomerBlocked,ICPartnerCode);

      // Exercise: Create IC Journal Line. Taking 1 for sign factor.
      ASSERTERROR CreateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,CustomerNo,1);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(BlockedErr,Customer.TABLECAPTION,CustomerNo,CustomerBlocked));
    END;

    [Test]
    PROCEDURE CustomerBlockedShipICGLAccountError@44();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      GLAccount@1004 : Record 15;
      CustomerNo@1003 : Code[20];
    BEGIN
      // Check IC GL Account error while creating IC Journal Lines for a Customer with blocked Ship and Unblocked IC Partner.

      // Setup: Create IC Journal Batch and Customer with IC Partner and Blocked Ship, Create IC Journal Line with Balance Account as GL Account.
      Initialize;
      CustomerNo := CreateCustomer(Customer.Blocked::Ship,CreateICPartner);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateICJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,CustomerNo,1);  // Taking 1 for sign factor.
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Post IC Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICAccountErr,GenJournalLine.FIELDCAPTION("IC Partner G/L Acc. No."),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE CustomerBlockedShipPosting@67();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      ICOutboxJnlLine@1001 : Record 415;
    BEGIN
      // Check IC Outbox Journal Entries after posting IC Journal Line with Customer blocked Ship and unblocked IC Partner.

      // Setup: Create Customer with blocked Ship and unblocked IC Partner, Create and update IC Journal Line, Taking 1 for sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,
        CreateCustomer(Customer.Blocked::Ship,CreateICPartner),1);

      // Exercise: Post IC Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Account and IC Partner GL Account Entries in IC Outbox Journal Line.
      VerifyICOutboxJournalLine(
        GenJournalLine."IC Partner Code",ICOutboxJnlLine."Account Type"::Customer,GenJournalLine."Account No.",
        GenJournalLine."Document No.",GenJournalLine.Amount);
      VerifyICOutboxJournalLine(
        GenJournalLine."IC Partner Code",ICOutboxJnlLine."Account Type"::"G/L Account",GenJournalLine."IC Partner G/L Acc. No.",
        GenJournalLine."Document No.",-GenJournalLine.Amount);

      // Tear Down: Delete newly created batch.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE CustomerBlockedShipWithBlockedICPartnerError@26();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check Error Message while creating IC Journal Line with Customer blocked Ship and blocked IC Partner.
      Initialize;
      ICJournalLineWithCustomerAndICPartner(Customer.Blocked::Ship);
    END;

    [Test]
    PROCEDURE CustomerWithBlockedICPartnerError@39();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check Error Message while creating IC Journal Line with Customer having blocked IC Partner.
      Initialize;
      ICJournalLineWithCustomerAndICPartner(Customer.Blocked::" ");
    END;

    LOCAL PROCEDURE ICJournalLineWithCustomerAndICPartner@49(Blocked@1001 : Option);
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustomerNo@1003 : Code[20];
    BEGIN
      // Setup: Create Customer with blocked IC Partner.
      CustomerNo := CreateCustomer(Blocked,UpdateICPartnerBlocked(CreateICPartner,TRUE));

      // Exercise: Create IC Journal Line, Taking 1 for sign factor.
      ASSERTERROR CreateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,CustomerNo,1);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(BlockedICPartnerErr,Customer.TABLECAPTION,CustomerNo));
    END;

    [Test]
    [HandlerFunctions(ICOutboxJnlLinesPageHandler)]
    PROCEDURE CustomerWithUnblockedICPartner@5();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check IC Outbox Journal Entries after posting IC Journal Line with Customer having unblocked IC Partner.
      Initialize;
      PostICPartnerLinkedWithCustomer(GenJournalLine."Account Type"::Customer,CreateCustomer(Customer.Blocked::" ",CreateICPartner));
    END;

    [Test]
    PROCEDURE ICJournalLinePostAfterBlockingICPartner@11();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustomerNo@1003 : Code[20];
    BEGIN
      // Check Error Message while posting IC Journal Line and IC Partner Blocked after IC General Line creation.

      // Setup: Create Customer with unblocked IC Partner, Create and update IC Journal Line, taking 1 for sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,
        CreateCustomer(Customer.Blocked::" ",CreateICPartner),1);
      CustomerNo := GenJournalLine."Account No.";
      UpdateICPartnerBlocked(GenJournalLine."IC Partner Code",TRUE);

      // Exercise: Post IC Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(BlockedICPartnerErr,Customer.TABLECAPTION,CustomerNo));
    END;

    [Test]
    PROCEDURE BlockICPartnerAfterCreatingICJournalLine@4();
    VAR
      GenJournalLine@1002 : Record 81;
      ICPartner@1001 : Record 413;
      ICPartnerCode@1000 : Code[20];
    BEGIN
      // Verify Error Message when IC Partner is used in IC Journal Line and updated as Blocked before posting IC Journal Line.

      // Setup: Create IC Journal Line for IC Partner, Block IC Partner after creating IC Journal Line, taking 1 for sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"IC Partner",CreateICPartner,1);
      ICPartnerCode := GenJournalLine."Account No.";
      UpdateICPartnerBlocked(ICPartnerCode,TRUE);

      // Exercise: Post IC Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICPartnerBlockedErr,ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,ICPartner.FIELDCAPTION(Code),
          ICPartnerCode,TRUE));
    END;

    [Test]
    PROCEDURE BlockICPartnerBeforeCreatingICJournalLine@33();
    VAR
      GenJournalLine@1002 : Record 81;
      ICPartner@1001 : Record 413;
      ICPartnerCode@1000 : Code[20];
    BEGIN
      // Verify Error Message while using blocked IC Partner in IC Journal Line.

      // Setup: Create blocked IC Partner.
      Initialize;
      ICPartnerCode := UpdateICPartnerBlocked(CreateICPartner,TRUE);

      // Exercise: Create IC Journal Line for IC Partner, taking 1 for sign factor.
      ASSERTERROR CreateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"IC Partner",ICPartnerCode,1);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICPartnerBlockedErr,ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,ICPartner.FIELDCAPTION(Code),
          ICPartnerCode,TRUE));
    END;

    [Test]
    [HandlerFunctions(ICOutboxJnlLinesPageHandler)]
    PROCEDURE ICPartnerLinkedToNonBlockedCustomer@7();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      AccountNumber@1001 : Code[20];
    BEGIN
      // Check IC Outbox Journal Entries after posting IC Journal Line with unblocked IC Partner linked with unblocked Customer.
      Initialize;
      AccountNumber := CreateICPartner;
      CreateCustomer(Customer.Blocked::" ",AccountNumber);
      PostICPartnerLinkedWithCustomer(GenJournalLine."Account Type"::"IC Partner",AccountNumber);
    END;

    [Test]
    [HandlerFunctions(ICOutboxJnlLinesPageHandler)]
    PROCEDURE ICPartnerLinkedToCustomerBlockedAsAll@20();
    VAR
      Customer@1002 : Record 18;
      GenJournalLine@1001 : Record 81;
      Vendor@1003 : Record 23;
      AccountNumber@1000 : Code[20];
    BEGIN
      // Check IC Outbox Journal Entries after posting IC Journal Line with unblocked IC Partner linked with Customer and Vendor Blocked as ALL.
      Initialize;
      AccountNumber := CreateICPartner;
      CreateCustomer(Customer.Blocked::All,AccountNumber);
      CreateVendor(Vendor.Blocked::All,AccountNumber);
      PostICPartnerLinkedWithCustomer(GenJournalLine."Account Type"::"IC Partner",AccountNumber);
    END;

    LOCAL PROCEDURE PostICPartnerLinkedWithCustomer@43(JournalLineAccountType@1000 : Option;AccountNumber@1004 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
      ICOutboxTransaction@1001 : Record 414;
    BEGIN
      // Setup: Create Customer with unblocked IC Partner, Create and update IC Journal Line, taking 1 for sign factor.
      CreateAndUpdateICJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,JournalLineAccountType,AccountNumber,1);
      AccountNo := AccountNumber;  // Assigning Value to Global Variable.
      GLAccountNo := GenJournalLine."IC Partner G/L Acc. No.";  // Assigning Value to Global Variable.
      AccountType := FORMAT(JournalLineAccountType);  // Assigning Value to Global Variable.
      Amount2 := GenJournalLine.Amount;  // Assigning Value to Global Variable.

      // Exercise: Post IC Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Account and IC Partner GL Account Entries in IC Outbox Journal Line. Verification Done in Page Handler.
      FindICOutboxTransaction(
        ICOutboxTransaction,GenJournalLine."IC Partner Code",GenJournalLine."Document Type",GenJournalLine."Document No.");
      ICOutboxTransaction.ShowDetails;

      // Tear Down: Delete newly created batch.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE ICPartnerUpdationWhenNoOutboxLines@8();
    VAR
      CompanyInformation@1000 : Record 79;
      OldICPartnerCode@1001 : Code[20];
      ICPartnerCode@1002 : Code[20];
    BEGIN
      // Check that any IC Partner can be updated on Company Information when there is no IC Outbox Transaction is present.

      // Setup.
      Initialize;
      ICPartnerCode := CreateICPartner;

      // Exercise.
      OldICPartnerCode := UpdateICPartnerInCompanyInformation(ICPartnerCode);

      // Verify: Verify that correct IC Partner Code is updated on Company Information.
      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("IC Partner Code",ICPartnerCode);

      // Tear Down: Roll back Company Information.
      UpdateICPartnerInCompanyInformation(OldICPartnerCode);
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler)]
    PROCEDURE ICPartnerUpdationWhenInboxDetailsNotFilled@24();
    VAR
      GenJournalLine@1003 : Record 81;
      ICPartner@1000 : Record 413;
      ICPartnerCode@1001 : Code[20];
    BEGIN
      // Check Error Message while completing Line Action when Inbox Details for IC Partner is not filled.

      // Setup.
      Initialize;
      ICPartnerCode := SetupCompanyInformationAndPostICJournalLine(GenJournalLine);

      // Exercise.
      ASSERTERROR CompleteLineActionFromICOutboxTransactionsPage(
          GenJournalLine."Account No.",GenJournalLine."Document Type",GenJournalLine."Document No.");

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ValueMustExistErr,ICPartner.FIELDCAPTION("Inbox Details"),ICPartner.TABLECAPTION,ICPartner.FIELDCAPTION(Code),
          GenJournalLine."Account No."));

      // Tear Down: Rollback Partner Code updated in Company Information.
      UpdateICPartnerInCompanyInformation(ICPartnerCode);
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler)]
    PROCEDURE ICPartnerUpdationWhenOutboxLineExists@10();
    VAR
      GenJournalLine@1003 : Record 81;
      CompanyInformation@1000 : Record 79;
      ICPartnerCode@1001 : Code[20];
    BEGIN
      // Check Error Message while completing Line Action when IC Partner Code on Company Information is Blank.

      // Setup.
      Initialize;
      ICPartnerCode := SetupCompanyInformationAndPostICJournalLine(GenJournalLine);
      UpdateICPartnerInboxDetails(GenJournalLine."Account No.");

      // Exercise.
      ASSERTERROR CompleteLineActionFromICOutboxTransactionsPage(
          GenJournalLine."Account No.",GenJournalLine."Document Type",GenJournalLine."Document No.");

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ValueMustExistErr,CompanyInformation.FIELDCAPTION("IC Partner Code"),CompanyInformation.TABLECAPTION,
          CompanyInformation.FIELDCAPTION("Primary Key"),CompanyInformation."Primary Key"));

      // Tear Down: Rollback IC Partner Code updated in Company Information.
      UpdateICPartnerInCompanyInformation(ICPartnerCode);
    END;

    [Test]
    PROCEDURE ICPartnerUsedByAnotherVendorError@25();
    VAR
      Vendor@1000 : Record 23;
      ICPartnerCode@1002 : Code[20];
      VendorNo@1001 : Code[20];
    BEGIN
      // Check that error message appears while using same IC Partner Code on two different Vendors.

      // Setup.
      Initialize;
      ICPartnerCode := CreateICPartner;
      VendorNo := CreateVendor(Vendor.Blocked::" ",ICPartnerCode);

      // Exercise: Create another Vendor and assign same IC Partner Code to it.
      ASSERTERROR CreateVendor(Vendor.Blocked::" ",ICPartnerCode);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(SameICPartnerErr,Vendor.FIELDCAPTION("IC Partner Code"),ICPartnerCode,Vendor.TABLECAPTION,VendorNo));
    END;

    [Test]
    PROCEDURE SameICPartnerUsedByVendorAndCustomer@23();
    VAR
      Customer@1004 : Record 18;
      Vendor@1000 : Record 23;
      ICPartnerCode@1002 : Code[20];
      VendorNo@1001 : Code[20];
    BEGIN
      // Check that Same IC Partner Code can be used by a Customer and Vendor.

      // Setup.
      Initialize;
      ICPartnerCode := CreateICPartner;
      CreateCustomer(Customer.Blocked::" ",ICPartnerCode);

      // Exercise: Create Vendor and update same IC Partner Code to it.
      VendorNo := CreateVendor(Vendor.Blocked::" ",ICPartnerCode);

      // Verify: Verify that correct IC Partner updated on Vendor.
      Vendor.GET(VendorNo);
      Vendor.TESTFIELD("IC Partner Code",ICPartnerCode);
    END;

    [Test]
    PROCEDURE SameICPartnerUsedByVendorAndCustomerError@69();
    VAR
      Customer@1004 : Record 18;
      Vendor@1000 : Record 23;
      ICPartnerCode@1002 : Code[20];
      VendorNo@1001 : Code[20];
    BEGIN
      // Check error message while updating same IC Partner Code on Vendor that is already used for a Customer and Vendor.

      // Setup: Create Customer and Vendor with same IC Partner Code.
      Initialize;
      ICPartnerCode := CreateICPartner;
      CreateCustomer(Customer.Blocked::" ",ICPartnerCode);
      VendorNo := CreateVendor(Vendor.Blocked::" ",ICPartnerCode);

      // Exercise: Create another Vendor and assign same IC Partner Code to it.
      ASSERTERROR CreateVendor(Vendor.Blocked::" ",ICPartnerCode);

      // Verify: Verify error message for Vendor.
      Assert.ExpectedError(
        STRSUBSTNO(SameICPartnerErr,Vendor.FIELDCAPTION("IC Partner Code"),ICPartnerCode,Vendor.TABLECAPTION,VendorNo));
    END;

    [Test]
    PROCEDURE CreationOfICPartnerWithBlankCode@60();
    VAR
      ICPartnerCard@1001 : TestPage 609;
    BEGIN
      // Check that an error message appears when a new IC Partner is created with a blank Code.

      // Setup: Create IC Partner with Blank code.
      Initialize;
      ICPartnerCard.OPENNEW;

      // Exercise.
      ASSERTERROR ICPartnerCard.Code.SETVALUE('');

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(BlankCodeErr,ICPartnerCard.Code.CAPTION));
    END;

    [Test]
    PROCEDURE ICPartnerUpdateReflectedInGLEntry@59();
    VAR
      GenJournalLine@1001 : Record 81;
      ICPartner@1000 : Record 413;
    BEGIN
      // Check that IC Partner Code is automatically modified in the General Ledger Entries after modifying the IC Partner Code.

      // Setup: Create IC Partner, create and post IC General Journal, taking 1 for positive sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",CreateICPartner,1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ICPartner.GET(GenJournalLine."Account No.");

      // Exercise: Rename IC Partner using Random Integer value.
      ICPartner.RENAME(ICPartner.Code + FORMAT(LibraryRandom.RandInt(10)));

      // Verify: Verify GL Entry for IC Partner Code.
      VerifyGLEntry(GenJournalLine."Document No.",ICPartner.Code);

      // Tear Down.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE DeleteICPartnerWithOpenEntries@57();
    VAR
      GenJournalLine@1004 : Record 81;
      ICPartner@1000 : Record 413;
    BEGIN
      // Check that error appears if Delete an IC Partner Code with open Ledger Entries.

      // Setup: Create and post IC General Journal Line, taking 1 for positive sign factor.
      Initialize;
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",CreateICPartner,1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ICPartner.GET(GenJournalLine."Account No.");

      // Exercise.
      ASSERTERROR ICPartner.DELETE(TRUE);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(OpenEntryDeleteErr,ICPartner.Code));
    END;

    [Test]
    PROCEDURE DeleteICPartnerCodeAttachedCustomer@56();
    VAR
      Customer@1001 : Record 18;
      ICPartner@1000 : Record 413;
    BEGIN
      // Check that error appears if Delete the IC Partner Code with is attached to a Customer.

      // Setup: Create Customer with IC Partner Code.
      Initialize;
      Customer.GET(CreateCustomer(Customer.Blocked::" ",CreateICPartner));
      ICPartner.GET(Customer."IC Partner Code");

      // Exercise.
      ASSERTERROR ICPartner.DELETE(TRUE);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(CustomerDeleteErr,ICPartner.Code,Customer."No."));
    END;

    [Test]
    PROCEDURE DeleteICPartnerWithOpenCustomerEntries@55();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check that error appears if an IC Partner is deleted when IC Partner Code is used by a Customer with open entries.

      // Setup: Create Customer with IC Partner Code, Create and post IC General Journal Line, taking 1 for positive sign factor.
      Initialize;
      Customer.GET(CreateCustomer(Customer.Blocked::" ",CreateICPartner));
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Remove IC Partner Code from Customer.
      ASSERTERROR Customer.VALIDATE("IC Partner Code",'');

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(RemoveICPartnerErr,Customer.TABLECAPTION));
    END;

    [Test]
    PROCEDURE DeleteICPartnerWithOpenVendorEntries@54();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that error appears if an IC Partner is deleted when IC Partner Code is used by a Vendor with open entries.

      // Setup: Create Vendor with IC Partner Code, Create and post IC General Journal Line, taking -1 for negative sign factor.
      Initialize;
      Vendor.GET(CreateVendor(Vendor.Blocked::" ",CreateICPartner));
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,Vendor."No.",-1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Remove IC Partner Code from Vendor.
      ASSERTERROR Vendor.VALIDATE("IC Partner Code",'');

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(RemoveICPartnerErr,Vendor.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PostICJournalLineWithBlankReceivableAccount@51();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      // Check that error appears when post an IC General Journal with blank Receivable account on the IC Partner.
      Initialize;
      ReceivablePayableAccountErrorForICPartner(ICPartner,ICPartner.FIELDCAPTION("Receivables Account"),1);  // Take 1 as positive sign factor.
    END;

    [Test]
    PROCEDURE PostICJournalLineWithBlankPayableAccount@15();
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      // Check that error appears when post an IC General Journal with blank Payable account on the IC Partner.
      Initialize;
      ReceivablePayableAccountErrorForICPartner(ICPartner,ICPartner.FIELDCAPTION("Payables Account"),-1);  // Take -1 as negative sign factor.
    END;

    LOCAL PROCEDURE ReceivablePayableAccountErrorForICPartner@48(VAR ICPartner@1002 : Record 413;FieldCaption@1001 : Text[50];SignFactor@1000 : Integer);
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Setup: Create IC Partner without Receivable and Payable Account and Create IC General Journal Line.
      LibraryERM.CreateICPartner(ICPartner);
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",ICPartner.Code,SignFactor);

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(AccountErr,FieldCaption,ICPartner.Code));
    END;

    [Test]
    PROCEDURE PostICJournalLineWithInboxTypeFileLocation@46();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      // Post IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'File Location'.
      Initialize;
      PostICJournalLineWithDifferentInboxType(ICPartner."Inbox Type"::"File Location");
    END;

    [Test]
    PROCEDURE PostICJournalLineWithInboxTypeDatabase@45();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      // Post IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'Database'.
      Initialize;
      PostICJournalLineWithDifferentInboxType(ICPartner."Inbox Type"::Database);
    END;

    [Test]
    PROCEDURE PostICJournalLineWithInboxTypeEmail@42();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      // Post IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'E-mail'.
      Initialize;
      PostICJournalLineWithDifferentInboxType(ICPartner."Inbox Type"::"E-Mail");
    END;

    LOCAL PROCEDURE PostICJournalLineWithDifferentInboxType@40(InboxType@1002 : Option);
    VAR
      GenJournalLine@1001 : Record 81;
      ICPartner@1000 : Record 413;
    BEGIN
      // Setup: Create and modify IC Partner and Create IC General Journal Line. Take 1 for positive Sign Factor.
      ICPartner.GET(CreateICPartner);
      ICPartner.VALIDATE("Inbox Type",InboxType);
      ICPartner.MODIFY(TRUE);
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",ICPartner.Code,1);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entry.
      VerifyGLEntry(GenJournalLine."Document No.",GenJournalLine."Account No.");
    END;

    [Test]
    PROCEDURE SendTransactionToBlockedICPartner@38();
    VAR
      GenJournalLine@1000 : Record 81;
      ICPartner@1001 : Record 413;
    BEGIN
      // Check that an error appears when sending transaction to a blocked IC Partner.

      // Setup: Create Blocked IC Partner.
      Initialize;
      ICPartner.GET(UpdateICPartnerBlocked(CreateICPartner,TRUE));

      // Exercise: Create IC General Journal Line with Blocked IC Partner, take 1 for positive sign factor.
      ASSERTERROR CreateICJournalLine(
          GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",ICPartner.Code,1);

      // Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICPartnerBlockedErr,ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,ICPartner.FIELDCAPTION(Code),
          ICPartner.Code,TRUE));
    END;

    [Test]
    PROCEDURE PostNonICJournalLine@61();
    VAR
      GenJournalLine@1000 : Record 81;
      ICOutboxTransaction@1002 : Record 414;
    BEGIN
      // Check no IC Outbox Transaction is created after posting a non-IC line from IC General Journals.

      // Setup: Create Non-IC General Journal Line without IC Partner G/L Account No.
      Initialize;
      CreateNonICJournalLine(GenJournalLine);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify IC Outbox Transactions.
      Assert.IsFalse(
        FindICOutboxTransaction(
          ICOutboxTransaction,GenJournalLine."IC Partner Code",GenJournalLine."Document Type",GenJournalLine."Document No."),
        STRSUBSTNO(EntryMustNotExistErr,ICOutboxTransaction.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PostNonICJournalLineWithICPartnerCodeAccountNo@62();
    VAR
      GLAccount@1002 : Record 15;
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Check that an error appears when posting a non-IC line with IC Partner G/L Account No.

      // Setup: Create Non-IC General Journal Line with IC Partner G/L Account No., take 1 for positive sign factor.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",1);

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ICPartnerGLAccountNoErr,GenJournalLine.FIELDCAPTION("IC Partner G/L Acc. No."),'',GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No.",GenJournalLine."IC Partner G/L Acc. No."));
    END;

    [Test]
    PROCEDURE PostNonICAndICJournalLine@64();
    VAR
      GenJournalLine@1001 : Record 81;
      ICGLAccount@1000 : Record 410;
      ICOutboxJnlLine@1002 : Record 415;
    BEGIN
      // Check IC Outbox Journal Lines after posting a non-IC line and an IC line at the same time.

      // Setup: Create Non-IC and IC General Journal Lines with Random amount.
      Initialize;
      CreateICGLAccount(ICGLAccount);
      CreateNonICJournalLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Document Type",
        GenJournalLine."Account Type"::"IC Partner",CreateICPartner,LibraryRandom.RandDec(100,2));
      UpdateICJournalLine(GenJournalLine,GenJournalLine."Document No.",ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Account and IC Partner GL Account Entries in IC Outbox Journal Line.
      VerifyICOutboxJournalLine(
        GenJournalLine."IC Partner Code",ICOutboxJnlLine."Account Type"::"IC Partner",GenJournalLine."IC Partner Code",
        GenJournalLine."Document No.",GenJournalLine.Amount);
      VerifyICOutboxJournalLine(
        GenJournalLine."IC Partner Code",ICOutboxJnlLine."Account Type"::"G/L Account",GenJournalLine."IC Partner G/L Acc. No.",
        GenJournalLine."Document No.",-GenJournalLine.Amount);

      // Tear Down.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE DeletionOfICDimension@68();
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1001 : Record 349;
      ICDimension@1002 : Record 411;
      ICDimensionValue@1003 : Record 412;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      // Check IC Dimension Value deletion after deleting IC Dimension.

      // Setup: Create new IC Dimension and IC Dimension Values, Map them with existing Dimension and its value.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateICDimension(ICDimension);
      ICDimension.VALIDATE("Map-to Dimension Code",Dimension.Code);
      ICDimension.MODIFY(TRUE);

      LibraryDimension.CreateICDimensionValue(ICDimensionValue,ICDimension.Code);
      ICDimensionValue.VALIDATE("Map-to Dimension Value Code",DimensionValue.Code);
      ICDimensionValue.MODIFY(TRUE);
      ICDimension.SETRANGE(Code,ICDimension.Code);

      // Exercise: Delete IC Dimension created earlier.
      ICDimension.DELETE(TRUE);

      // Verify: Verify that after deleting IC Dimension, IC Dimension Value deleted automatically.
      ICDimensionValue.SETRANGE("Dimension Code",ICDimension.Code);
      ICDimensionValue.SETRANGE(Code,ICDimensionValue.Code);
      Assert.IsFalse(ICDimensionValue.FINDFIRST,STRSUBSTNO(EntryMustNotExistErr,ICDimensionValue.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler)]
    PROCEDURE BlockedICDimensionValueError@66();
    VAR
      ICDimension@1002 : Record 411;
      ICDimensionValue@1001 : Record 412;
      GenJournalLine@1009 : Record 81;
      ICInboxOutboxJnlLineDim@1010 : Record 423;
    BEGIN
      // Check Error Message while updating blocked IC Dimension Value after posting IC General Journal Line.

      // Setup: Create and map IC Dimension with newly created Dimension, block newly created IC Dimension Value and Post IC Journal Line for the Customer using this Dimension.
      Initialize;
      MapDimensionWithSameICDimension(CreateAndRenameICDimensionAndICDimensionValue(ICDimension,ICDimensionValue));
      ICDimensionValue.VALIDATE(Blocked,TRUE);
      ICDimensionValue.MODIFY(TRUE);

      CreateAndPostICJournalLineWithDimension(GenJournalLine,ICDimension.Code,ICDimensionValue.Code);
      FindICJournalLineDimension(ICInboxOutboxJnlLineDim,GenJournalLine."IC Partner Code",ICDimension.Code);

      // Exercise: Update Dimension Value Code in IC Inbox Outbox Journal Line Dimension with same name.
      ASSERTERROR ICInboxOutboxJnlLineDim.VALIDATE("Dimension Value Code",ICDimensionValue.Code);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(BlockedDimValueErr,ICDimensionValue.TABLECAPTION,ICDimensionValue."Dimension Code",ICDimensionValue.Code));

      // Tear Down: Rollback IC General Journal Batch created during test case.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler)]
    PROCEDURE BlockedICDimensionError@65();
    VAR
      ICDimension@1004 : Record 411;
      ICDimensionValue@1003 : Record 412;
      GenJournalLine@1002 : Record 81;
      ICInboxOutboxJnlLineDim@1001 : Record 423;
    BEGIN
      // Check Error Message while updating blocked IC Dimension after posting IC General Journal Line.

      // Setup: Create and map IC Dimension with newly created Dimension, block newly created IC Dimension and Post IC Journal Line for the Customer using this Dimension.
      Initialize;
      MapDimensionWithSameICDimension(CreateAndRenameICDimensionAndICDimensionValue(ICDimension,ICDimensionValue));
      ICDimension.VALIDATE(Blocked,TRUE);
      ICDimension.MODIFY(TRUE);

      CreateAndPostICJournalLineWithDimension(GenJournalLine,ICDimension.Code,ICDimensionValue.Code);
      FindICJournalLineDimension(ICInboxOutboxJnlLineDim,GenJournalLine."IC Partner Code",ICDimension.Code);

      // Exercise: Update Dimension Code in IC Inbox Outbox Journal Line Dimension with same name.
      ASSERTERROR ICInboxOutboxJnlLineDim.VALIDATE("Dimension Code",ICDimension.Code);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(BlockedDimensionErr,ICDimension.TABLECAPTION,ICDimension.Code));

      // Tear Down: Rollback IC General Journal Batch created during test case.
      DeleteGeneralJournalBatch(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE ICPartnerWithICPartner@83();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      ICOutboxTransaction@1006 : Record 414;
      ICGLAccount@1002 : Record 410;
    BEGIN
      // Check Out of Balance error while posting General Journal Lines for two IC Partner.

      // Setup.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      CreateICGLAccount(ICGLAccount);

      // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"IC Partner",
        CreateICPartner,LibraryRandom.RandDec(100,2),ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"IC Partner",
        GenJournalLine."Account No.",GenJournalLine.Amount,ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify.
      ICOutboxTransaction.FINDLAST;
      Assert.VerifyFailure(RecordExistsErr,InsertDuplicateKeyPassedTxt);
    END;

    [Test]
    PROCEDURE ICPartnerWithICCustomer@82();
    VAR
      Customer@1001 : Record 18;
      ICPartner@1006 : Record 413;
    BEGIN
      // Check Out of Balance error while posting General Journal Lines for IC Partner with IC Customer.

      // Setup.
      Initialize;
      LibraryERM.CreateICPartner(ICPartner);
      ICPartnerWithCustomer(CreateCustomer(Customer.Blocked::" ",ICPartner.Code),ICPartner.Code);
    END;

    [Test]
    PROCEDURE ICPartnerWithNonICCustomer@81();
    VAR
      Customer@1000 : Record 18;
      ICPartner@1006 : Record 413;
    BEGIN
      // Check Out of Balance error while posting General Journal Lines for IC Partner with Non IC Customer.

      // Setup.
      Initialize;
      LibraryERM.CreateICPartner(ICPartner);
      LibrarySales.CreateCustomer(Customer);
      ICPartnerWithCustomer(Customer."No.",ICPartner.Code);
    END;

    [Test]
    PROCEDURE ICCustomerWithICVendor@80();
    VAR
      Customer@1000 : Record 18;
      ICPartner@1006 : Record 413;
      Vendor@1009 : Record 23;
    BEGIN
      // Check Out of Balance error while posting General Journal Lines for IC Partner with IC Vendor.

      // Setup.
      Initialize;
      LibraryERM.CreateICPartner(ICPartner);
      ICCustomerWithVendor(CreateCustomer(Customer.Blocked::" ",ICPartner.Code),CreateVendor(Vendor.Blocked::" ",ICPartner.Code));
    END;

    [Test]
    PROCEDURE ICCustomerWithNonICVendor@79();
    VAR
      Customer@1001 : Record 18;
      ICPartner@1006 : Record 413;
      Vendor@1009 : Record 23;
    BEGIN
      // Check Out of Balance error while posting General Journal Lines for IC Partner with Non IC Vendor.

      // Setup.
      Initialize;
      LibraryERM.CreateICPartner(ICPartner);
      LibraryPurchase.CreateVendor(Vendor);
      ICCustomerWithVendor(CreateCustomer(Customer.Blocked::" ",ICPartner.Code),Vendor."No.");
    END;

    [Test]
    PROCEDURE ICCustomerWithDiscountSetup@77();
    VAR
      Customer@1007 : Record 18;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1006 : Record 81;
      ICGLAccount@1005 : Record 410;
      ICPartner@1001 : Record 413;
      PaymentTerms@1004 : Record 3;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Setup discount: Post an Invoice to IC Customer and Verify IC Outbox Journal Line.

      // Setup.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateICPartner(ICPartner);
      CustomerNo := CreateCustomer(Customer.Blocked::" ",ICPartner.Code);
      UpdatePaymentTermOnCustomer(PaymentTerms,CustomerNo);
      CreateICGLAccount(ICGLAccount);

      // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,CustomerNo,
        LibraryRandom.RandDec(100,2),ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Amount, VAT Amount, Due Date, Payment Discount Date and Payment Discount % in IC Outbox Journal Line, Using 0 for Payment Discount % and 0D for Due Date and Discount Date.
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::Customer,CustomerNo,CustomerNo,0,GenJournalLine.Amount,
        PaymentTerms."Discount %",CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE),
        CALCDATE(PaymentTerms."Due Date Calculation",WORKDATE));
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::"G/L Account",ICGLAccount."No.",CustomerNo,0,-GenJournalLine.Amount,0,0D,0D);
    END;

    [Test]
    PROCEDURE ICVendorWithoutDiscountSetup@76();
    VAR
      Vendor@1007 : Record 23;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1006 : Record 81;
      ICGLAccount@1005 : Record 410;
      ICPartner@1001 : Record 413;
      VendorNo@1002 : Code[20];
    BEGIN
      // Post an Invoice to IC Vendor and Verify IC Outbox Journal Line.

      // Setup.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateICPartner(ICPartner);
      VendorNo := CreateVendor(Vendor.Blocked::" ",ICPartner.Code);
      CreateICGLAccount(ICGLAccount);

      // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,VendorNo,
        -LibraryRandom.RandDec(100,2),ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Amount, VAT Amount, Due Date, Payment Discount Date and Payment Discount % in IC Outbox Journal Line, Using 0 for Payment Discount % and 0D for Due Date and Discount Date.
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::Vendor,VendorNo,VendorNo,0,GenJournalLine.Amount,0,WORKDATE,WORKDATE);
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::"G/L Account",ICGLAccount."No.",VendorNo,0,-GenJournalLine.Amount,0,0D,0D);
    END;

    [Test]
    PROCEDURE ICCustomerWithDiscountAndVATSetup@75();
    VAR
      Customer@1007 : Record 18;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1006 : Record 81;
      ICGLAccount@1005 : Record 410;
      ICPartner@1001 : Record 413;
      PaymentTerms@1004 : Record 3;
      VATPostingSetup@1003 : Record 325;
      VATAmount@1009 : Decimal;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Post an IC Invoice with both VAT and Payment discount. Verify IC Outbox Journal Line.

      // Setup.
      Initialize;
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateICPartner(ICPartner);
      CustomerNo := CreateCustomer(Customer.Blocked::" ",ICPartner.Code);
      UpdatePaymentTermOnCustomer(PaymentTerms,CustomerNo);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateICGLAccountWithVATSetup(ICGLAccount,VATPostingSetup);

      // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,CustomerNo,
        LibraryRandom.RandDec(100,2),ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");
      VATAmount := GenJournalLine.Amount * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Amount, VAT Amount, Due Date, Payment Discount Date and Payment Discount % in IC Outbox Journal Line, Using 0 for Payment Discount % and 0D for Due Date and Discount Date.
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::Customer,CustomerNo,CustomerNo,0,GenJournalLine.Amount,
        PaymentTerms."Discount %",CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE),
        CALCDATE(PaymentTerms."Due Date Calculation",WORKDATE));
      VerifyICOutboxJournalLineForDiscountEntry(
        ICPartner.Code,GenJournalLine."Account Type"::"G/L Account",ICGLAccount."No.",CustomerNo,-VATAmount,-GenJournalLine.Amount,0,
        0D,0D);
    END;

    [Test]
    PROCEDURE OutboxTransToInbox_UT_Positive@74();
    VAR
      ICOutboxTransaction@1003 : Record 414;
      ICInboxTransaction@1002 : Record 418;
      ICInboxOutboxMgt@1000 : Codeunit 427;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378528] COD 427 ICInboxOutboxMgt.OutboxTransToInbox() creates ICInboxTrans for a new transaction
      Initialize;
      MockICOutboxTrans(ICOutboxTransaction);
      ICInboxOutboxMgt.OutboxTransToInbox(ICOutboxTransaction,ICInboxTransaction,ICOutboxTransaction."IC Partner Code");
      VerifyICInboxTrans(ICInboxTransaction,ICOutboxTransaction);
    END;

    [Test]
    PROCEDURE OutboxTransToInbox_UT_Negative_Inbox@101();
    VAR
      ICOutboxTransaction@1003 : Record 414;
      ICInboxTransaction@1002 : Record 418;
      ICInboxOutboxMgt@1000 : Codeunit 427;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378528] COD 427 ICInboxOutboxMgt.OutboxTransToInbox() throws an error in case when transaction is already in partner's Inbox
      Initialize;

      MockICOutboxTrans(ICOutboxTransaction);
      MockICInboxTrans(ICOutboxTransaction);
      ASSERTERROR ICInboxOutboxMgt.OutboxTransToInbox(ICOutboxTransaction,ICInboxTransaction,ICOutboxTransaction."IC Partner Code");
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(
        STRSUBSTNO(
          TransAlreadyExistErr,ICOutboxTransaction."Transaction No.",ICOutboxTransaction.FIELDCAPTION("IC Partner Code"),
          ICOutboxTransaction."IC Partner Code",ICInboxTransaction.TABLECAPTION));
    END;

    [Test]
    PROCEDURE OutboxTransToInbox_UT_Negative_HandledInbox@111();
    VAR
      ICOutboxTransaction@1003 : Record 414;
      ICInboxTransaction@1002 : Record 418;
      HandledICInboxTrans@1001 : Record 420;
      ICInboxOutboxMgt@1000 : Codeunit 427;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378528] COD 427 ICInboxOutboxMgt.OutboxTransToInbox() throws an error in case when transaction is already in partner's HandledInbox
      Initialize;

      MockICOutboxTrans(ICOutboxTransaction);
      MockHandledICInboxTrans(ICOutboxTransaction);
      ASSERTERROR ICInboxOutboxMgt.OutboxTransToInbox(ICOutboxTransaction,ICInboxTransaction,ICOutboxTransaction."IC Partner Code");
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(
        STRSUBSTNO(
          TransAlreadyExistErr,ICOutboxTransaction."Transaction No.",HandledICInboxTrans.FIELDCAPTION("IC Partner Code"),
          ICOutboxTransaction."IC Partner Code",HandledICInboxTrans.TABLECAPTION));
    END;

    LOCAL PROCEDURE Initialize@13();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ClearGlobalVariables;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobalVariables@93();
    BEGIN
      CLEAR(AccountNo);
      CLEAR(GLAccountNo);
      CLEAR(AccountType);
      Amount2 := 0;
    END;

    LOCAL PROCEDURE CompleteLineActionFromICOutboxTransactionsPage@52(ICPartnerCode@1001 : Code[20];DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      ICOutboxTransactions@1000 : TestPage 611;
    BEGIN
      ICOutboxTransactions.OPENEDIT;
      ICOutboxTransactions.FILTER.SETFILTER("IC Partner Code",ICPartnerCode);
      ICOutboxTransactions.FILTER.SETFILTER("Document Type",FORMAT(DocumentType));
      ICOutboxTransactions.FILTER.SETFILTER("Document No.",DocumentNo);
      ICOutboxTransactions.SendToICPartner.INVOKE;
      ICOutboxTransactions."Codeunit IC Outbox Export".INVOKE;
    END;

    LOCAL PROCEDURE CreateAndPostICJournalLineWithDimension@92(VAR GenJournalLine@1000 : Record 81;ICDimensionCode@1002 : Code[20];ICDimensionValueCode@1003 : Code[20]);
    VAR
      Customer@1001 : Record 18;
      DefaultDimension@1005 : Record 352;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,CreateCustomer(Customer.Blocked::" ",CreateICPartner),ICDimensionCode,ICDimensionValueCode);
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,DefaultDimension."No.",1);  // Taking 1 for positive sign factor.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndRenameICDimensionAndICDimensionValue@72(VAR ICDimension@1001 : Record 411;VAR ICDimensionValue@1000 : Record 412) : Code[20];
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateICDimension(ICDimension);
      ICDimension.RENAME(Dimension.Code);  // Renaming IC Dimension Code with Dimension Code to create similar Code. Value important for test.
      LibraryDimension.CreateICDimensionValue(ICDimensionValue,ICDimension.Code);
      ICDimensionValue.RENAME(ICDimension.Code,DimensionValue.Code);  // Renaming IC Dimension Value Code with Dimension Value Code to create similar code. Value important for test.
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE CreateAndUpdateICJournalLine@17(VAR GenJournalLine@1000 : Record 81;DocumentType@1001 : Option;AccountType@1002 : Option;AccountNo@1003 : Code[20];SignFactor@1004 : Decimal);
    VAR
      ICGLAccount@1005 : Record 410;
    BEGIN
      CreateICGLAccount(ICGLAccount);
      CreateICJournalLine(GenJournalLine,DocumentType,AccountType,AccountNo,SignFactor);
      UpdateICJournalLine(GenJournalLine,GenJournalLine."Document No.",ICGLAccount."Map-to G/L Acc. No.",ICGLAccount."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateICJournalUsingSameBatch@84(VAR GenJournalLine@1001 : Record 81;GenJournalBatch@1000 : Record 232;DocumentType@1002 : Option;AccountType@1003 : Option;AccountNo@1004 : Code[20];Amount@1005 : Decimal;BalAccountNo@1007 : Code[20];ICPartnerGLAccNo@1006 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      UpdateICJournalLine(GenJournalLine,AccountNo,BalAccountNo,ICPartnerGLAccNo);
    END;

    LOCAL PROCEDURE CreateCustomer@19(Blocked@1001 : Option;ICPartnerCode@1002 : Code[20]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("IC Partner Code",ICPartnerCode);
      Customer.VALIDATE(Blocked,Blocked);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateICGLAccount@1(VAR ICGLAccount@1000 : Record 410);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateICGLAccount(ICGLAccount);
      ICGLAccount.VALIDATE("Map-to G/L Acc. No.",GLAccount."No.");
      ICGLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateICGLAccountWithVATSetup@87(VAR ICGLAccount@1002 : Record 410;VATPostingSetup@1000 : Record 325);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Sale);
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);

      LibraryERM.CreateICGLAccount(ICGLAccount);
      ICGLAccount.VALIDATE("Map-to G/L Acc. No.",GLAccount."No.");
      ICGLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateICJournalBatch@50(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Intercompany);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateICJournalLine@16(VAR GenJournalLine@1001 : Record 81;DocumentType@1003 : Option;AccountType@1004 : Option;AccountNo@1000 : Code[20];SignFactor@1005 : Integer);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      // Take Random Amount.
      CreateICJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,
        SignFactor * LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateNonICJournalLine@12(VAR GenJournalLine@1001 : Record 81);
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CreateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",1);  // Create 1 for positive sign factor.
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateICPartner@31() : Code[20];
    VAR
      GLAccount@1001 : Record 15;
      ICPartner@1000 : Record 413;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateICPartner(ICPartner);
      ICPartner.VALIDATE("Receivables Account",GLAccount."No.");
      LibraryERM.CreateGLAccount(GLAccount);
      ICPartner.VALIDATE("Payables Account",GLAccount."No.");
      ICPartner.MODIFY(TRUE);
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE CreateVendor@78(Blocked@1001 : Option;ICPartnerCode@1002 : Code[20]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE(Blocked,Blocked);
      Vendor.VALIDATE("IC Partner Code",ICPartnerCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE MockICOutboxTrans@97(VAR ICOutboxTransaction@1000 : Record 414);
    BEGIN
      WITH ICOutboxTransaction DO BEGIN
        INIT;
        "Transaction No." := LibraryUtility.GetNewRecNo(ICOutboxTransaction,FIELDNO("Transaction No."));
        "IC Partner Code" := CreateICPartner;
        "Transaction Source" := "Transaction Source"::"Created by Current Company";
        "Document Type" := "Document Type"::Invoice;
        "Source Type" := "Source Type"::"Journal Line";
        "Document No." := LibraryUtility.GenerateGUID;
        "Posting Date" := LibraryRandom.RandDate(10);
        "Document Date" := LibraryRandom.RandDate(10);
        "IC Partner G/L Acc. No." := LibraryUtility.GenerateGUID;
        "Source Line No." := LibraryRandom.RandInt(100);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockICInboxTrans@103(ICOutboxTransaction@1001 : Record 414);
    VAR
      ICInboxTransaction@1000 : Record 418;
    BEGIN
      WITH ICInboxTransaction DO BEGIN
        INIT;
        "Transaction No." := ICOutboxTransaction."Transaction No.";
        "IC Partner Code" := ICOutboxTransaction."IC Partner Code";
        "Transaction Source" := ICOutboxTransaction."Transaction Source";
        "Document Type" := ICOutboxTransaction."Document Type";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockHandledICInboxTrans@107(ICOutboxTransaction@1001 : Record 414);
    VAR
      HandledICInboxTrans@1000 : Record 420;
    BEGIN
      WITH HandledICInboxTrans DO BEGIN
        INIT;
        "Transaction No." := ICOutboxTransaction."Transaction No.";
        "IC Partner Code" := ICOutboxTransaction."IC Partner Code";
        "Transaction Source" := ICOutboxTransaction."Transaction Source";
        "Document Type" := ICOutboxTransaction."Document Type";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteGeneralJournalBatch@3(JournalTemplateName@1000 : Code[10];Description@1001 : Text[50]);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      GenJournalBatch.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalBatch.SETRANGE(Description,Description);
      GenJournalBatch.FINDFIRST;
      GenJournalBatch.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindICJournalLineDimension@70(VAR ICInboxOutboxJnlLineDim@1000 : Record 423;ICPartnerCode@1002 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      ICInboxOutboxJnlLineDim.SETRANGE("IC Partner Code",ICPartnerCode);
      ICInboxOutboxJnlLineDim.SETRANGE("Dimension Code",DimensionCode);
      ICInboxOutboxJnlLineDim.FINDFIRST;
    END;

    LOCAL PROCEDURE FindICOutboxTransaction@47(VAR ICOutboxTransaction@1000 : Record 414;ICPartnerCode@1001 : Code[20];DocumentType@1002 : Option;DocumentNo@1003 : Code[20]) : Boolean;
    BEGIN
      ICOutboxTransaction.SETRANGE("IC Partner Code",ICPartnerCode);
      ICOutboxTransaction.SETRANGE("Document Type",DocumentType);
      ICOutboxTransaction.SETRANGE("Document No.",DocumentNo);
      EXIT(ICOutboxTransaction.FINDFIRST);
    END;

    LOCAL PROCEDURE FindICOutboxJounralLine@89(VAR ICOutboxJnlLine@1004 : Record 415;ICPartnerCode@1003 : Code[20];AccountType@1002 : Option;AccountNo@1001 : Code[20];DocumentNo@1000 : Code[20]);
    BEGIN
      ICOutboxJnlLine.SETRANGE("Account Type",AccountType);
      ICOutboxJnlLine.SETRANGE("IC Partner Code",ICPartnerCode);
      ICOutboxJnlLine.SETRANGE("Account No.",AccountNo);
      ICOutboxJnlLine.SETRANGE("Document No.",DocumentNo);
      ICOutboxJnlLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ICPartnerWithCustomer@91(CustomerNo@1000 : Code[20];ICPartnerCode@1005 : Code[20]);
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1004 : Record 81;
      ICGLAccount@1002 : Record 410;
      Amount@1003 : Decimal;
    BEGIN
      // Using blank value for Balancing Account No. and IC Partner G/L Account No.
      CreateICJournalBatch(GenJournalBatch);
      CreateICGLAccount(ICGLAccount);
      Amount := LibraryRandom.RandDec(100,2); // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"IC Partner",ICPartnerCode,
        Amount,'','');
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::Customer,CustomerNo,Amount,
        '','');
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        ICGLAccount."Map-to G/L Acc. No.",-(Amount * 2),'','');

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verifying Out of Balance Error.
      Assert.ExpectedError(
        STRSUBSTNO(
          OutOfBalanceErr,GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine."Document No.",GenJournalLine.Amount,
          GenJournalLine.FIELDCAPTION("Posting Date"),
          GenJournalLine.FIELDCAPTION("Document Type"),GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine.FIELDCAPTION(Amount)));
    END;

    LOCAL PROCEDURE ICCustomerWithVendor@102(CustomerNo@1006 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1004 : Record 81;
      ICGLAccount@1003 : Record 410;
      Amount@1002 : Decimal;
    BEGIN
      // Using blank value for Balancing Account No. and IC Partner G/L Account No.
      CreateICJournalBatch(GenJournalBatch);
      CreateICGLAccount(ICGLAccount);
      Amount := LibraryRandom.RandDec(100,2);  // Using RANDOM value for Amount.
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::Customer,CustomerNo,Amount,
        '','');
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::Vendor,VendorNo,Amount,'',
        '');
      CreateAndUpdateICJournalUsingSameBatch(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        ICGLAccount."Map-to G/L Acc. No.",-(Amount * 2),'','');

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verifying Out of Balance Error.
      Assert.ExpectedError(
        STRSUBSTNO(
          OutOfBalanceErr,GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine."Document No.",GenJournalLine.Amount,
          GenJournalLine.FIELDCAPTION("Posting Date"),
          GenJournalLine.FIELDCAPTION("Document Type"),GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine.FIELDCAPTION(Amount)));
    END;

    LOCAL PROCEDURE MapDimensionWithSameICDimension@73(Code@1000 : Code[20]);
    VAR
      Dimensions@1001 : TestPage 536;
    BEGIN
      Dimensions.OPENEDIT;
      Dimensions.FILTER.SETFILTER(Code,Code);
      Dimensions.MapToICDimWithSameCode.INVOKE;
    END;

    LOCAL PROCEDURE SetupCompanyInformationAndPostICJournalLine@63(VAR GenJournalLine@1000 : Record 81) ICPartnerCode : Code[20];
    BEGIN
      ICPartnerCode := UpdateICPartnerInCompanyInformation('');
      CreateAndUpdateICJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"IC Partner",CreateICPartner,1);  // Taking 1 for sign factor.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE UpdateICJournalLine@88(VAR GenJournalLine@1000 : Record 81;DocumentNo@1003 : Code[20];BalAccountNo@1002 : Code[20];ICPartnerGLAccNo@1004 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.VALIDATE("IC Partner G/L Acc. No.",ICPartnerGLAccNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateICPartnerBlocked@28(Code@1000 : Code[20];Blocked@1002 : Boolean) : Code[20];
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      ICPartner.GET(Code);
      ICPartner.VALIDATE(Blocked,Blocked);
      ICPartner.MODIFY(TRUE);
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE UpdateICPartnerInboxDetails@18(Code@1001 : Code[20]);
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      ICPartner.GET(Code);
      ICPartner.VALIDATE("Inbox Details",TEMPORARYPATH);
      ICPartner.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateICPartnerInCompanyInformation@35(ICPartnerCode@1001 : Code[20]) OldICPartnerCode : Code[20];
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      OldICPartnerCode := CompanyInformation."IC Partner Code";
      CompanyInformation.VALIDATE("IC Partner Code",ICPartnerCode);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePaymentTermOnCustomer@85(VAR PaymentTerms@1000 : Record 3;No@1002 : Code[20]);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      Customer.GET(No);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyICOutboxJournalLine@9(ICPartnerCode@1009 : Code[20];AccountType@1008 : Option;AccountNo@1007 : Code[20];DocumentNo@1006 : Code[20];Amount@1005 : Decimal);
    VAR
      ICOutboxJnlLine@1000 : Record 415;
    BEGIN
      FindICOutboxJounralLine(ICOutboxJnlLine,ICPartnerCode,AccountType,AccountNo,DocumentNo);
      Assert.AreEqual(
        AccountNo,ICOutboxJnlLine."Account No.",
        STRSUBSTNO(
          ValidationErr,ICOutboxJnlLine.FIELDCAPTION("Account No."),ICOutboxJnlLine."Account No.",ICOutboxJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ICOutboxJnlLine.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION(Amount),ICOutboxJnlLine.Amount,ICOutboxJnlLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyICOutboxJournalLineForDiscountEntry@86(ICPartnerCode@1004 : Code[20];AccountType@1003 : Option;AccountNo@1002 : Code[20];DocumentNo@1001 : Code[20];VATAmount@1008 : Decimal;Amount@1000 : Decimal;PaymentDiscountPct@1006 : Decimal;PaymentDiscountDate@1009 : Date;DueDate@1007 : Date);
    VAR
      ICOutboxJnlLine@1005 : Record 415;
    BEGIN
      FindICOutboxJounralLine(ICOutboxJnlLine,ICPartnerCode,AccountType,AccountNo,DocumentNo);
      Assert.AreEqual(
        PaymentDiscountPct,ICOutboxJnlLine."Payment Discount %",
        STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION("Payment Discount %"),PaymentDiscountPct,ICOutboxJnlLine.TABLECAPTION));
      Assert.AreEqual(
        PaymentDiscountDate,ICOutboxJnlLine."Payment Discount Date",
        STRSUBSTNO(
          ValidationErr,ICOutboxJnlLine.FIELDCAPTION("Payment Discount Date"),PaymentDiscountDate,ICOutboxJnlLine.TABLECAPTION));
      Assert.AreEqual(
        DueDate,ICOutboxJnlLine."Due Date",
        STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION("Due Date"),DueDate,ICOutboxJnlLine.TABLECAPTION));
      Assert.AreEqual(
        0,ICOutboxJnlLine.Quantity,STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION(Quantity),0,ICOutboxJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        VATAmount,ICOutboxJnlLine."VAT Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION("VAT Amount"),VATAmount,ICOutboxJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ICOutboxJnlLine.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,ICOutboxJnlLine.FIELDCAPTION(Amount),ICOutboxJnlLine.Amount,ICOutboxJnlLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@14(DocumentNo@1000 : Code[20];ICPartnerCode@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("IC Partner Code",ICPartnerCode);
    END;

    LOCAL PROCEDURE VerifyICInboxTrans@90(ICInboxTransaction@1000 : Record 418;ICOutboxTransaction@1001 : Record 414);
    BEGIN
      WITH ICInboxTransaction DO BEGIN
        Assert.AreEqual(ICOutboxTransaction."Transaction No.","Transaction No.",FIELDCAPTION("Transaction No."));
        Assert.AreEqual("IC Partner Code","IC Partner Code",FIELDCAPTION("IC Partner Code"));
        Assert.AreEqual(ICOutboxTransaction."Transaction Source","Transaction Source",FIELDCAPTION("Transaction Source"));
        Assert.AreEqual(ICOutboxTransaction."Document Type","Document Type",FIELDCAPTION("Document Type"));
        Assert.AreEqual("Source Type"::Journal,"Source Type",FIELDCAPTION("Source Type"));
        Assert.AreEqual(ICOutboxTransaction."Document No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(ICOutboxTransaction."Document No.","Original Document No.",FIELDCAPTION("Original Document No."));
        Assert.AreEqual(ICOutboxTransaction."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(ICOutboxTransaction."Document Date","Document Date",FIELDCAPTION("Document Date"));
        Assert.AreEqual("Line Action"::"No Action","Line Action",FIELDCAPTION("Line Action"));
        Assert.AreEqual(
          ICOutboxTransaction."IC Partner G/L Acc. No.","IC Partner G/L Acc. No.",FIELDCAPTION("IC Partner G/L Acc. No."));
        Assert.AreEqual(ICOutboxTransaction."Source Line No.","Source Line No.",FIELDCAPTION("Source Line No."));
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ICOutboxJnlLinesPageHandler@2(VAR ICOutboxJnlLines@1000 : TestPage 612);
    VAR
      ICOutboxJnlLine@1001 : Record 415;
    BEGIN
      ICOutboxJnlLines.FILTER.SETFILTER("Account Type",AccountType);
      ICOutboxJnlLines."Account No.".ASSERTEQUALS(AccountNo);
      ICOutboxJnlLines.Amount.ASSERTEQUALS(Amount2);
      ICOutboxJnlLines.FILTER.SETFILTER("Account Type",FORMAT(ICOutboxJnlLine."Account Type"::"G/L Account"));
      ICOutboxJnlLines."Account No.".ASSERTEQUALS(GLAccountNo);
      ICOutboxJnlLines.Amount.ASSERTEQUALS(-Amount2);
    END;

    [ConfirmHandler]
    PROCEDURE YesConfirmHandler@37(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Intercompany]
      Tests related to Intercompany area.
        1. Test Error while creating IC Journal Line for Blocked Vendor with All.
        2. Test values on the IC Outbox Transaction for Blocked Vendor with Payment.
        3. Test error while creating General Journal Line for Blocked IC Partner and Blocked Vendor with All.
        4. Test values on the IC Outbox Transaction for Blocked IC Partner and Blocked Vendor with Payment.
        5. Test error while posting two General Journal Lines with G/L Account No. and Balance Account Number.
        6. Test values on the IC Outbox Transaction after posting of two General Journal Lines with Balance Account No. blank.
        7. Test values on the IC Outbox Transaction after posting of two General Journal Lines.
        8. Test error while posting two General Journal Lines without Balance Account No. and IC Partner Number.
        9. Test error message while using a Customer with blocked All and unblocked IC Partner on IC Journal Line.
       10. Test error message while using a Customer with blocked Invoice and unblocked IC Partner on IC Journal Line.
       11. Test error message while using a Customer with blocked All and blocked IC Partner on IC Journal Line.
       12. Test error message while using a Customer with blocked Invoice and blocked IC Partner on IC Journal Line.
       13. Test error message while using a Customer with blocked Ship and unblocked IC Partner on IC Journal Line with normal GL Account as Balance Account.
       14. Test IC Outbox Journal Entries after posting IC Journal Line for a Customer with blocked Ship and unblocked IC Partner.
       15. Test error message while creating IC Journal Line for a Customer Blocked as Ship and having a blocked IC Partner.
       16. Test error message while creating IC Journal Line for a Customer having blocked IC Partner.
       17. Test IC Outbox Journal Lines from IC Outbox Transaction after posting IC Journal Line with unblocked Customer and IC Partner.
       18. Test error message while posting IC Journal Line after updating IC Partner as blocked.
       19. Test Error Message when IC Partner is used in IC Journal Line and updated as Blocked before posting IC Journal Line.
       20. Test error Message while using blocked IC Partner in IC Journal Line.
       21. Test IC Outbox Journal Lines after posting IC Journal Line with unblocked IC Partner linked with unblocked Customer.
       22. Test IC Outbox Journal Lines after posting IC Journal Line with unblocked IC Partner linked with Customer Blocked as ALL.
       23. Test to Change IC Partner on Company Information when there is no IC Outbox Transaction is present.
       24. Test error Message while completing Line Action and Inbox Details for IC Partner is not filled.
       25. Test error Message while completing Line Action and IC Partner Code on Company Information is Blank.
       26. Test error message while using same IC Partner Code on two different Vendors.
       27. Test that it is possible to use same IC Partner Code on Customer and Vendor.
       28. Test error message appears while updating same IC Partner Code on Vendor that is already used for a Customer and Vendor.
       29. Test that an error message appears when a new IC Partner is created with a blank Code.
       30. Test that IC Partner Code is automatically modified in the General Ledger Entries after modifying the IC Partner Code.
       31. Test that error appears if Delete the IC Partner Code with open ledger entries.
       32. Test that error appears if Delete the IC Partner Code with is attached to a Customer.
       33. Test that error appears if an IC Partner is deleted when IC Partner Code is used by a Customer with open entries.
       34. Test that error appears if an IC Partner is deleted when IC Partner Code is used by a Vendor with open entries.
       35. Test that error appears when post an IC General Journal with blank Receivable Account on the IC Partner.
       36. Test that error appears when post an IC General Journal with blank Payable Account on the IC Partner.
       37. Test posting of IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'File Location'.
       38. Test posting of IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'Database'.
       39. Test posting of IC General Journal Line for an IC Partner with blank Indox Details and Inbox Type 'E-mail'.
       40. Test that an error appears when sending transaction to a blocked IC Partner.
       41. Test no IC Outbox Transaction is created after posting a non-IC line from IC General Journals.
       42. Test that an error appears when posting a non-IC line with IC Partner G/L Account No.
       43. Test IC Outbox Journal Lines after posting a non-IC line and an IC line at the same time.
       44. Test IC Dimension Value deletion after deleting IC Dimension.
       45. Test Error Message while updating blocked IC Dimension Value after posting IC General Journal Line.
       46. Test Error Message while updating blocked IC Dimension after posting IC General Journal Line.
       47. Test Out of Balance error while posting General Journal Lines for two IC Partner.
       48. Test Out of Balance error while posting General Journal Lines for IC Partner and ICCustomer.
       49. Test Out of Balance error while posting General Journal Lines for IC Partner and Non ICCustomer.
       50. Test Out of Balance error while posting General Journal Lines for IC Customer and ICVendor.
       51. Test Out of Balance error while posting General Journal Lines for IC Customer and Non ICCustomer.
       52. Test With discount: Post an Invoice to Customer.
       53. Test Without Discount: Post an Invoice to Vendor.
       54. Test Post an IC Invoice with both VAT and Payment discount.

      Covers Test cases: 265796
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      BlockedAllForVendor, BlockedPaymentForVendor, BlockedAllForVendorWithBlockedICPartner                           139704
      BlockedPaymentForVendorWithBlockedICPartner                                                                     139704

      Covers Test cases: 265798
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      PostICJournalLineWithGLAccountAndBalanceAccount, PostICJournalLineWithBalanceAccountNoBlank                     139706
      PostICJournalLineWithoutICPartnerAccountNo, PostICJournalLineWithoutBalanceAccountAndICPartner                  139706

      Covers Test cases: 266262
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      CustomerBlockedAllError, CustomerBlockedInvoiceError,
      CustomerBlockedAllWithBlockedICPartnerError, CustomerBlockedInvoiceWithBlockedICPartnerError                    139834
      CustomerBlockedShipICGLAccountError, CustomerBlockedShipPosting, CustomerBlockedShipWithBlockedICPartnerError

      Covers Test cases: 266263
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      CustomerWithBlockedICPartnerError, CustomerWithUnblockedICPartner, ICJournalLinePostAfterBlockingICPartner      139835

      Covers Test cases: 266264
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      BlockICPartnerAfterCreatingICJournalLine, BlockICPartnerBeforeCreatingICJournalLine                             139836

      Covers Test cases: 266265
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      ICPartnerLinkedToNonBlockedCustomer, ICPartnerLinkedToCustomerBlockedAsAll                                      139836

      Covers Test cases: 266153
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      ICPartnerUpdationWhenNoOutboxLines                                                                              139811
      ICPartnerUpdationWhenInboxDetailsNotFilled, ICPartnerUpdationWhenOutboxLineExists                               139812

      Covers Test cases: 266261
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      ICPartnerUsedByAnotherVendorError                                                                               139826
      SameICPartnerUsedByVendorAndCustomer, SameICPartnerUsedByVendorAndCustomerError                                 139827

      Covers Test cases: 266155
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      CreationOfICPartnerWithBlankCode                                                                                139817
      ICPartnerUpdateReflectedInGLEntry                                                                               139818
      DeleteICPartnerWithOpenEntries                                                                                  139819
      DeleteICPartnerCodeAttachedCustomer                                                                             139820
      DeleteICPartnerWithOpenCustomerEntries                                                                          139821

      Covers Test cases: 266156
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      DeleteICPartnerWithOpenVendorEntries                                                                            139822
      PostICJournalLineWithBlankReceivableAccount, PostICJournalLineWithBlankPayableAccount                           139823
      PostICJournalLineWithInboxTypeFileLocation, PostICJournalLineWithInboxTypeDatabase,
      PostICJournalLineWithInboxTypeEmail                                                                             139824
      SendTransactionToBlockedICPartner                                                                               139825

      Covers Test cases: 266148
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      PostNonICJournalLine,PostNonICJournalLineWithICPartnerCodeAccountNo, PostNonICAndICJournalLine                  139720

      Covers Test cases: 266154
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      DeletionOfICDimension                                                                                           139815
      BlockedICDimensionValueError, BlockedICDimensionError                                                           139816

      Covers Test cases: 265800
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      ICPartnerWithICPartner,ICPartnerWithICCustomer,ICPartnerWithNonICCustomer,ICCustomerWithICVendor                139708
      ICCustomerWithNonICVendor

      Covers Test cases: 266146
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      ICCustomerWithDiscountSetup,ICVendorWithoutDiscountSetup,ICCustomerWithDiscountAndVATSetup                      139709
    }
    END.
  }
}

