OBJECT Codeunit 136602 ERM RS Create Journal Lines
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryDimension@1014 : Codeunit 131001;
      LibraryService@1008 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryERM@1003 : Codeunit 131300;
      LibrarySales@1005 : Codeunit 130509;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryInventory@1011 : Codeunit 132201;
      Assert@1004 : Codeunit 130000;
      LibraryRandom@1010 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      NumberOfLinesErr@1000 : TextConst 'ENU=Number of Lines must be equal.';
      IncorrectAccountNoErr@1007 : TextConst 'ENU=Account No. in journal line is incorrect.';
      LineNoErr@1009 : TextConst 'ENU=The Increment of Line No. is incorrect.';
      AccTypeErr@1013 : TextConst 'ENU=Account Type must be equal to ''Posting''  in G/L Account:';
      BlockedErr@1012 : TextConst 'ENU=Blocked must be equal to ''No''  in G/L Account: No.';

    LOCAL PROCEDURE Initialize@52();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLAccountWithoutFilter@1();
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account without filter.

      // 1. Setup: Create General Journal Batch and Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Direct Posting and Account Type as Posting of G/L Account.
      LibraryERM.SetGLAccountDirectPostingFilter(GLAccount);
      RunCreateGLAccountJournalLines(
        GLAccount,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,GLAccount.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CustomerWithoutFilter@2();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
    BEGIN
      // Test batch creation of Journal Lines for Customer without filter.

      // 1. Setup: Create General Journal Batch and Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // 2. Exercise: Run Report Create Customer Journal Lines without Currency Code for Customer.
      Customer.SETRANGE("Currency Code",'');
      Customer.SETRANGE("Bill-to Customer No.",'');
      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,Customer.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorWithoutFilter@3();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
    BEGIN
      // Test batch creation of Journal Lines for Vendor without filter.

      // 1. Setup: Create General Journal Batch and Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // 2. Exercise: Run Report Create Vendor Journal Lines without Currency Code of Vendor.
      Vendor.SETRANGE("Currency Code",'');
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,Vendor.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ItemWithoutFilter@4();
    VAR
      StandardItemJournal@1003 : Record 752;
      ItemJournalLine@1000 : Record 83;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      // Test batch creation of Journal Lines for Item without filter.

      // 1. Setup: Create Item Journal batch and Standard Item Journal.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");

      // 2. Exercise: Run Report Create Item Journal Lines without any filter.
      RunCreateItemJournalLines(
        Item,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Number of line in Item Journal Line.
      VerifyCountItemJournalLine(ItemJournalBatch,Item.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLAccountWithFilter@11();
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account with filter.

      // 1. Setup: Create General Journal Batch, Standard General Journal and G/L Account.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with G/L Account filter.
      GLAccount.SETRANGE("No.",GLAccount."No.");
      RunCreateGLAccountJournalLines(
        GLAccount,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,GLAccount.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CustomerWithFilter@10();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
    BEGIN
      // Test batch creation of Journal Lines for Customer with filter.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Run Report Create Customer Journal Lines with Customer filter.
      Customer.SETRANGE("No.",Customer."No.");
      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,Customer.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorWithFilter@9();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
    BEGIN
      // Test batch creation of Journal Lines for Vendor with filter.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Vendor filter.
      Vendor.SETRANGE("No.",Vendor."No.");
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,Vendor.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ItemWithFilter@6();
    VAR
      StandardItemJournal@1003 : Record 752;
      ItemJournalLine@1000 : Record 83;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      // Test batch creation of Journal Lines for Item with filter.

      // 1. Setup: Create Item Journal batch, Standard Item Journal and Item.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Run Report Create Item Journal Lines with Item filter.
      Item.SETRANGE("No.",Item."No.");
      RunCreateItemJournalLines(
        Item,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Number of line in Item Journal Line.
      VerifyCountItemJournalLine(ItemJournalBatch,Item.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLAccountWithDates@15();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
      PostingDate@1006 : Date;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account with correct Posting Date and Document Date.

      // 1. Setup: Create General Journal Batch, Standard General Journal and G/L Account.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Posting Date.
      GLAccount.SETRANGE("No.",GLAccount."No.");
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateGLAccountJournalLines(
        GLAccount,GenJournalBatch,GenJournalLine."Document Type"::" ",PostingDate,StandardGeneralJournal.Code);

      // 3. Verify: Verify Posting Date in General Journal Line.
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Posting Date",PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CustomerWithDates@14();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      PostingDate@1001 : Date;
    BEGIN
      // Test batch creation of Journal Lines for Customer with correct posting and document date.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Run Report Create Customer Journal Lines with Posting Date and Document Date.
      Customer.SETRANGE("No.",Customer."No.");
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateCustomerJournalLines(
        Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",PostingDate,StandardGeneralJournal.Code);

      // 3. Verify: Verify Posting Date and Document Date in General Journal Line.
      VerifyDatesInLine(GenJournalBatch,PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorWithDates@13();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      PostingDate@1006 : Date;
    BEGIN
      // Test batch creation of Journal Lines for Vendor with correct posting and document date.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Posting Date and Document Date.
      Vendor.SETRANGE("No.",Vendor."No.");
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateVendorJournalLines(
        Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",PostingDate,StandardGeneralJournal.Code);

      // 3. Verify: Verify Posting Date and Document Date in General Journal Line.
      VerifyDatesInLine(GenJournalBatch,PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ItemWithDates@12();
    VAR
      ItemJournalLine@1005 : Record 83;
      StandardItemJournal@1003 : Record 752;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
      PostingDate@1004 : Date;
    BEGIN
      // Test batch creation of Journal Lines for Item with correct posting and document date.

      // 1. Setup: Create Item Journal batch, Standard Item Journal and Item.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Run Report Create Item Journal Lines with Posting Date and Document Date.
      Item.SETRANGE("No.",Item."No.");
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateItemJournalLines(
        Item,ItemJournalBatch,ItemJournalLine."Entry Type"::"Positive Adjmt.",PostingDate,StandardItemJournal.Code);

      // 3. Verify: Verify Posting Date and Document Date in Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Posting Date",PostingDate);
      ItemJournalLine.TESTFIELD("Document Date",WORKDATE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CustomerWithDueDateCalculation@17();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1006 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      PaymentTerms@1000 : Record 3;
      PostingDate@1001 : Date;
      CustomerNo@1005 : Code[20];
    BEGIN
      // Verify that due date is calculated from document date, batch creation of Journal Lines for Customer.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer with Payment Terms code.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreatePaymentTermsWithDiscount(PaymentTerms);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);

      // 2. Exercise: Run Report Create Customer Journal Lines with Posting Date and Document Date.
      Customer.SETRANGE("No.",CustomerNo);
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateCustomerJournalLines(
        Customer,GenJournalBatch,GenJournalLine."Document Type"::Invoice,PostingDate,StandardGeneralJournal.Code);

      // 3. Verify: Verify Due Date in General Journal Line.
      VerifyDueDateInLine(GenJournalBatch,PaymentTerms."Due Date Calculation");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorWithDueDateCalculation@16();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      PaymentTerms@1000 : Record 3;
      PostingDate@1006 : Date;
      VendorNo@1001 : Code[20];
    BEGIN
      // Verify that due date is calculated from document date, batch creation of Journal Lines for Vendor.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor with Payment Terms code.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreatePaymentTermsWithDiscount(PaymentTerms);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Posting Date and Document Date.
      Vendor.SETRANGE("No.",VendorNo);
      PostingDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      RunCreateVendorJournalLines(
        Vendor,GenJournalBatch,GenJournalLine."Document Type"::Invoice,PostingDate,StandardGeneralJournal.Code);

      // 3. Verify: Verify Due Date in General Journal Line.
      VerifyDueDateInLine(GenJournalBatch,PaymentTerms."Due Date Calculation");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CustomerWithDiscountDate@20();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      PaymentTerms@1000 : Record 3;
      CustomerNo@1001 : Code[20];
    BEGIN
      // Verify payment discount date, batch creation of Journal Lines for Customer.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer with Payment Terms code.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreatePaymentTermsWithDiscount(PaymentTerms);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);

      // 2. Exercise: Run Report Create Customer Journal Lines with Document Type and Document Date.
      Customer.SETRANGE("No.",CustomerNo);
      RunCreateCustomerJournalLines(
        Customer,GenJournalBatch,GenJournalLine."Document Type"::"Credit Memo",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Payment Discount Date in General Journal Line.
      VerifyDiscountDateInLine(GenJournalBatch,PaymentTerms);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorWithDiscountDate@19();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      PaymentTerms@1000 : Record 3;
      VendorNo@1001 : Code[20];
    BEGIN
      // Verify payment discount date, batch creation of Journal Lines for Vendor.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor with Payment Terms code.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreatePaymentTermsWithDiscount(PaymentTerms);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Document Type and Document Date.
      Vendor.SETRANGE("No.",VendorNo);
      RunCreateVendorJournalLines(
        Vendor,GenJournalBatch,GenJournalLine."Document Type"::"Credit Memo",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Payment Discount Date in General Journal Line.
      VerifyDiscountDateInLine(GenJournalBatch,PaymentTerms);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE GLAccountMultipleStandardLines@26();
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
      LineCount@1006 : Integer;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account with Multiple lines Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, Multiple General Journal Line and G/L Account,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      LineCount := 2 * RANDOM(5); // Using the random Number of lines.
      CreateGeneralJournalLines(GenJournalBatch,LineCount);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Standard General Journal.
      GLAccount.SETRANGE("No.",GLAccount."No.");
      RunCreateGLAccountJournalLines(
        GLAccount,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,LineCount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE CustomerMultipleStandardLines@25();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      LineCount@1001 : Integer;
    BEGIN
      // Test batch creation of Journal Lines for Customer with Multiple lines Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, Multiple General Journal Line and Customer,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      LineCount := 2 * RANDOM(5); // Using the random Number of lines.
      CreateGeneralJournalLines(GenJournalBatch,LineCount);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise: Run Report Create Customer Journal Lines with Standard General Journal.
      Customer.SETRANGE("No.",Customer."No.");
      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,LineCount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE VendorMultipleStandardLines@24();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      LineCount@1001 : Integer;
    BEGIN
      // Test batch creation of Journal Lines for Vendor with Multiple lines Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, Multiple General Journal Line and Vendor,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      LineCount := 2 * RANDOM(5); // Using the random Number of lines.
      CreateGeneralJournalLines(GenJournalBatch,LineCount);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise:  Run Report Create Vendor Journal Lines with Standard General Journal.
      Vendor.SETRANGE("No.",Vendor."No.");
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Number of line in General Journal Line.
      VerifyCountGeneralJournalLine(GenJournalBatch,LineCount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemMultipleStandardLines@21();
    VAR
      StandardItemJournal@1003 : Record 752;
      ItemJournalLine@1000 : Record 83;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
      LineCount@1001 : Integer;
    BEGIN
      // Test batch creation of Journal Lines for Item with Multiple lines Standard Journal.

      // 1. Setup: Create Item Journal batch, Standard Item Journal, Multiple Item Journal Line and Item,
      // Save Standard Item Journal Line and Delete General Journal Line.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      LineCount := 2 * RANDOM(5); // Using the random Number of lines.
      CreateMultipleItemJournalLines(ItemJournalBatch,LineCount);
      SaveAsStandardItemJournal(ItemJournalBatch,StandardItemJournal.Code);
      DeleteItemJournalLine(ItemJournalBatch.Name);

      // 2. Exercise: Run Report Create Item Journal Lines with Standard Item Journal.
      Item.SETRANGE("No.",Item."No.");
      RunCreateItemJournalLines(
        Item,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Number of line in Item Journal Line.
      VerifyCountItemJournalLine(ItemJournalBatch,LineCount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithGLAccountDimensions@34();
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
      DefaultDimension@1007 : Record 352;
    BEGIN
      // Test batch creation of Journal Lines for G/L account and Dimensions are copied from G/L Account.

      // 1. Setup: Create General Journal Batch, Standard General Journal and G/L Account with Dimension.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreateGLAccountWithDimension(DefaultDimension);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with G/L Account Filter.
      GLAccount.SETRANGE("No.",DefaultDimension."No.");
      RunCreateGLAccountJournalLines(
        GLAccount,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Dimension in General Journal Line.
      VerifyDimensionInLine(GenJournalBatch,DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithCustomerDimensions@33();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      DefaultDimension@1008 : Record 352;
    BEGIN
      // Test batch creation of Journal Lines for Customer and Dimensions are copied from Customer.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer with Dimension.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreateCustomerWithDimension(DefaultDimension);

      // 2. Exercise: Run Report Create Customer Journal Lines with Customer Filter.
      Customer.SETRANGE("No.",DefaultDimension."No.");
      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Dimension in General Journal Line.
      VerifyDimensionInLine(GenJournalBatch,DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithVendorDimensions@32();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1000 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      DefaultDimension@1008 : Record 352;
    BEGIN
      // Test batch creation of Journal Lines for Vendor and Dimensions are copied from Vendor.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor with Dimension.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      CreateVendorWithDimension(DefaultDimension);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Vendor Filter.
      Vendor.SETRANGE("No.",DefaultDimension."No.");
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Dimension in General Journal Line.
      VerifyDimensionInLine(GenJournalBatch,DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithItemDimensions@27();
    VAR
      ItemJournalLine@1005 : Record 83;
      StandardItemJournal@1003 : Record 752;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
      DefaultDimension@1008 : Record 352;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      // Test batch creation of Journal Lines for Item and Dimensions are copied from Item.

      // 1. Setup: Create Item Journal batch, Standard Item Journal and Item with Dimension.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      CreateItemWithDimension(DefaultDimension);

      // 2. Exercise: Run Report Create Item Journal Lines with Item Filter.
      Item.SETRANGE("No.",DefaultDimension."No.");
      RunCreateItemJournalLines(
        Item,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Dimension in Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,ItemJournalLine."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithCustomerAndBankAcc_EmptyStdJournal@8();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      Customer@1002 : Record 18;
      GenJournalLine@1003 : Record 81;
    BEGIN
      Initialize;

      SetupCreateCustomerJournalScenario(Customer,GenJournalBatch,StandardGeneralJournal);

      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      VerifyAccountInLine(GenJournalBatch,Customer."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithCustomerAndBankAcc_FilledStdJournal@53();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      GenJournalLine@1003 : Record 81;
      Customer@1002 : Record 18;
    BEGIN
      Initialize;

      SetupCreateCustomerJournalScenario(Customer,GenJournalBatch,StandardGeneralJournal);

      CreateStandardGeneralJournalLine(StandardGeneralJournal."Journal Template Name",StandardGeneralJournal.Code);
      RunCreateCustomerJournalLines(Customer,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      VerifyAccountInLine(GenJournalBatch,Customer."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithVendorAndBankAcc_EmptyStdJournal@76();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      GenJournalLine@1003 : Record 81;
      Vendor@1002 : Record 23;
    BEGIN
      Initialize;

      SetupCreateVendorJournalScenario(Vendor,GenJournalBatch,StandardGeneralJournal);

      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      VerifyAccountInLine(GenJournalBatch,Vendor."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LinesWithVendorAndBankAcc_FilledStdJournal@60();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
      GenJournalLine@1003 : Record 81;
      Vendor@1002 : Record 23;
    BEGIN
      Initialize;

      SetupCreateVendorJournalScenario(Vendor,GenJournalBatch,StandardGeneralJournal);

      CreateStandardGeneralJournalLine(StandardGeneralJournal."Journal Template Name",StandardGeneralJournal.Code);
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      VerifyAccountInLine(GenJournalBatch,Vendor."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE AccountFromGLAccountInLine@38();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
      GLAccount2@1007 : Record 15;
    BEGIN
      // Test batch creation of Journal Lines for G/L account, from a Standard Journal that has G/L Account.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line and G/L Account,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibraryERM.CreateGLAccount(GLAccount2);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Standard General Journal.
      GLAccount2.SETRANGE("No.",GLAccount2."No.");
      RunCreateGLAccountJournalLines(
        GLAccount2,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify:  Verify Account Number in General Journal Line.
      VerifyAccountInLine(GenJournalBatch,GLAccount2."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE AccountFromCustomerInLine@37();
    VAR
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      Customer2@1008 : Record 18;
    BEGIN
      // Test batch creation of Journal Lines for Customer, from a Standard Journal that has Customer.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line and Customer,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibrarySales.CreateCustomer(Customer2);

      // 2. Exercise: Run Report Create Customer Journal Lines with Standard General Journal.
      Customer2.SETRANGE("No.",Customer2."No.");
      RunCreateCustomerJournalLines(
        Customer2,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Account Number in General Journal Line.
      VerifyAccountInLine(GenJournalBatch,Customer2."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE AccountFromVendorInLine@36();
    VAR
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      Vendor2@1008 : Record 23;
    BEGIN
      // Test batch creation of Journal Lines for Vendor, from a Standard Journal that has Vendor.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line and Vendor,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibraryPurchase.CreateVendor(Vendor2);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Standard General Journal.
      Vendor2.SETRANGE("No.",Vendor2."No.");
      RunCreateVendorJournalLines(Vendor2,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Account Number in General Journal Line.
      VerifyAccountInLine(GenJournalBatch,Vendor2."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemNumberFromItemInLine@35();
    VAR
      ItemJournalLine@1005 : Record 83;
      StandardItemJournal@1003 : Record 752;
      Item@1002 : Record 27;
      Item2@1008 : Record 27;
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      // Test batch creation of Journal Lines for Item, from a Standard Journal that has Item.

      // 1. Setup: Create Item Journal batch, Standard Item Journal, Item Journal Line and Item,
      // Save Standard Item Journal Line and Delete Item Journal Line.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,ItemJournalLine."Entry Type"::Purchase,Item."No.");
      SaveAsStandardItemJournal(ItemJournalBatch,StandardItemJournal.Code);
      DeleteItemJournalLine(ItemJournalBatch.Name);
      LibraryInventory.CreateItem(Item2);

      // 2. Exercise: Run Report Create Item Journal Lines with Standard Item Journal.
      Item2.SETRANGE("No.",Item2."No.");
      RunCreateItemJournalLines(
        Item2,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Item Number in Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Item No.",Item2."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE GLAccountWithDocumentType@45();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1002 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account with Document Type.

      // 1. Setup: Create General Journal Batch, Standard General Journal and G/L Account.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Document Type.
      GLAccount.SETRANGE("No.",GLAccount."No.");
      RunCreateGLAccountJournalLines(
        GLAccount,
        GenJournalBatch,
        GenJournalLine."Document Type"::Invoice,
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Document Type in Item Journal Line.
      VerifyDocumentTypeInLine(GenJournalBatch,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE CustomerWithDocumentType@43();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
    BEGIN
      // Test batch creation of Journal Lines for Customer with Document Type.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Customer.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise: Run Report Create Customer Journal Lines with Document Type.
      Customer.SETRANGE("No.",Customer."No.");
      RunCreateCustomerJournalLines(
        Customer,GenJournalBatch,GenJournalLine."Document Type"::Invoice,WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Document Type in Item Journal Line.
      VerifyDocumentTypeInLine(GenJournalBatch,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE VendorWithDocumentType@42();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
    BEGIN
      // Test batch creation of Journal Lines for Vendor with Document Type.

      // 1. Setup: Create General Journal Batch, Standard General Journal and Vendor.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.");
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Document Type.
      Vendor.SETRANGE("No.",Vendor."No.");
      RunCreateVendorJournalLines(Vendor,GenJournalBatch,GenJournalLine."Document Type"::Invoice,WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Document Type in Item Journal Line.
      VerifyDocumentTypeInLine(GenJournalBatch,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemWithEntryType@39();
    VAR
      ItemJournalLine@1001 : Record 83;
      StandardItemJournal@1003 : Record 752;
      Item@1002 : Record 27;
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      // Test batch creation of Journal Lines for Item with Entry Type.

      // 1. Setup: Create Item Journal batch, Standard Item Journal and Item.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,ItemJournalLine."Entry Type"::Purchase,Item."No.");
      SaveAsStandardItemJournal(ItemJournalBatch,StandardItemJournal.Code);
      DeleteItemJournalLine(ItemJournalBatch.Name);

      // 2. Exercise: Run Report Create Item Journal Lines with Entry Type.
      Item.SETRANGE("No.",Item."No.");
      RunCreateItemJournalLines(
        Item,
        ItemJournalBatch,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        WORKDATE,
        StandardItemJournal.Code);

      // 3. Verify: Verify Entry Type in Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Entry Type",ItemJournalLine."Entry Type"::"Positive Adjmt.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE BlankGLAccountDimensionInLines@57();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      GLAccount@1004 : Record 15;
      GLAccount2@1007 : Record 15;
    BEGIN
      // Test batch creation of Journal Lines for G/L Account, Dimensions are not copied from a Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line with Dimension and G/L Account,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryERM.CreateGLAccount(GLAccount);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.");
      AttachDimensionOnJournalLine(GenJournalLine);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibraryERM.CreateGLAccount(GLAccount2);

      // 2. Exercise: Run Report Create G/L Acc. Journal Lines with Standard General Journal.
      GLAccount2.SETRANGE("No.",GLAccount2."No.");
      RunCreateGLAccountJournalLines(
        GLAccount2,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Blank Dimension in General Journal Line.
      VerifyBlankDimensionInLine(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE BlankCustomerDimensionInLines@56();
    VAR
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Customer@1002 : Record 18;
      Customer2@1008 : Record 18;
    BEGIN
      // Test batch creation of Journal Lines for Customer, Dimensions are not copied from a Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line with Dimension and Customer,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibrarySales.CreateCustomer(Customer);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,Customer."No.");
      AttachDimensionOnJournalLine(GenJournalLine);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibrarySales.CreateCustomer(Customer2);

      // 2. Exercise: Run Report Create Customer Journal Lines with Standard General Journal.
      Customer2.SETRANGE("No.",Customer2."No.");
      RunCreateCustomerJournalLines(
        Customer2,
        GenJournalBatch,
        GenJournalLine."Document Type"::" ",
        WORKDATE,
        StandardGeneralJournal.Code);

      // 3. Verify: Verify Blank Dimension in General Journal Line.
      VerifyBlankDimensionInLine(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE BlankVendorDimensionInLines@55();
    VAR
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1004 : Record 232;
      StandardGeneralJournal@1003 : Record 750;
      Vendor@1002 : Record 23;
      Vendor2@1008 : Record 23;
    BEGIN
      // Test batch creation of Journal Lines for Vendor, Dimensions are not copied from a Standard Journal.

      // 1. Setup: Create General Journal Batch, Standard General Journal, General Journal Line with Dimension and Vendor,
      // Save Standard General Journal Line and Delete General Journal Line.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");
      LibraryPurchase.CreateVendor(Vendor);

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,Vendor."No.");
      AttachDimensionOnJournalLine(GenJournalLine);
      SaveAsStandardJournal(GenJournalBatch,StandardGeneralJournal.Code);
      DeleteGeneralJournalLine(GenJournalBatch.Name);
      LibraryPurchase.CreateVendor(Vendor2);

      // 2. Exercise: Run Report Create Vendor Journal Lines with Standard General Journal.
      Vendor2.SETRANGE("No.",Vendor2."No.");
      RunCreateVendorJournalLines(Vendor2,GenJournalBatch,GenJournalLine."Document Type"::" ",WORKDATE,StandardGeneralJournal.Code);

      // 3. Verify: Verify Blank Dimension in General Journal Line.
      VerifyBlankDimensionInLine(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE BlankItemDimensionInLines@54();
    VAR
      ItemJournalLine@1005 : Record 83;
      StandardItemJournal@1003 : Record 752;
      Item@1002 : Record 27;
      Item2@1008 : Record 27;
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      // Test batch creation of Journal Lines for Item, Dimensions are not copied from a Standard Journal.

      // 1. Setup: Create Item Journal batch, Standard Item Journal, Item Journal Line with Dimension and Item,
      // Save Standard Item Journal Line and Delete Item Journal Line.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");
      LibraryInventory.CreateItem(Item);

      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,ItemJournalLine."Entry Type"::Purchase,Item."No.");
      ItemJournalLineWithDimension(ItemJournalLine);
      SaveAsStandardItemJournal(ItemJournalBatch,StandardItemJournal.Code);
      DeleteItemJournalLine(ItemJournalBatch.Name);
      LibraryInventory.CreateItem(Item2);

      // 2. Exercise: Run Report Create Item Journal Lines with Standard Item Journal.
      Item2.SETRANGE("No.",Item2."No.");
      RunCreateItemJournalLines(
        Item2,ItemJournalBatch,ItemJournalLine."Entry Type"::"Positive Adjmt.",WORKDATE,StandardItemJournal.Code);

      // 3. Verify: Verify Blank Dimension in Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Dimension Set ID",0);
    END;

    [Test]
    [HandlerFunctions(StandardItemJournalHandler)]
    PROCEDURE CheckSourceCodeOnStandardItemJournalLine@58();
    VAR
      ItemJournalBatch@1003 : Record 233;
      StandardItemJournal@1002 : Record 752;
      StandardItemJournalLine@1001 : Record 753;
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      // Test that Source Code is automatically filled when Standard Item Journal page is opened.

      // Setup: Create a new Item Journal Batch and standard Item Journal.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");

      // Exercise: Run Page Standard Item Journal.
      PAGE.RUN(PAGE::"Standard Item Journal",StandardItemJournal);

      // Verify: Verify that the Source Code is filled same as in Item Journal Batch created.
      FindStandardItemJournalLine(StandardItemJournalLine,ItemJournalBatch."Journal Template Name",StandardItemJournal.Code);
      ItemJournalTemplate.GET(ItemJournalBatch."Journal Template Name");
      StandardItemJournalLine.TESTFIELD("Source Code",ItemJournalTemplate."Source Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,InsertOnStandardItemJournalHandler)]
    PROCEDURE CheckIncrementOfLineNoOnStandardItemJournal@77();
    VAR
      StandardItemJournal@1000 : Record 752;
      ItemJournalBatch@1002 : Record 233;
      LineCount@1003 : Integer;
    BEGIN
      // Test the increment of Line No. is correct before/after inserting record on Standard Item Journal with Multiple lines.

      // Setup: Create Item Journal batch, create Standard Item Journal.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryERM.CreateStandardItemJournal(StandardItemJournal,ItemJournalBatch."Journal Template Name");

      // Setup: Create Multiple Item Journal Line.
      LineCount := LibraryRandom.RandIntInRange(2,5); // Using the random Number of lines.
      CreateMultipleItemJournalLines(ItemJournalBatch,LineCount);

      // Exercise: Save Standard Item Journal Line and Delete Item Journal Line.
      SaveAsStandardItemJournal(ItemJournalBatch,StandardItemJournal.Code);
      DeleteItemJournalLine(ItemJournalBatch.Name);

      // Verify: Verify Line No. of Standard Item Journal Line is increased by 10000.
      VerifyIncrementOfLineNoOnStandardItemJournalLine(ItemJournalBatch."Journal Template Name",StandardItemJournal.Code,10000);

      // Exercise: Insert 1 record in Standard Item Journal - will be done in Handler.
      PAGE.RUN(PAGE::"Standard Item Journal",StandardItemJournal);

      // Verify: Record can be inserted successfully.
      // Verify: Verify Line No. of Standard Item Journal Line is increased by 5000.
      VerifyCountStandardItemJournalLine(ItemJournalBatch."Journal Template Name",StandardItemJournal.Code,LineCount + 1);
      VerifyIncrementOfLineNoOnStandardItemJournalLine(ItemJournalBatch."Journal Template Name",StandardItemJournal.Code,5000);
    END;

    [Test]
    PROCEDURE CheckGLAccTypeHeadingOnVendorPostingGroup@83();
    VAR
      VendorPostingGroup@1000 : Record 93;
    BEGIN
      // Verify the Error Message When Account Type of G/L Account is Heading for Payables Account in Vendor Posting Group.

      // Setup: Find Vendor Posting Group.
      Initialize;
      VendorPostingGroup.GET(LibraryPurchase.FindVendorPostingGroup);

      // Exercise: Validate Payables Account from G/L Account With Account Type Heading.
      ASSERTERROR VendorPostingGroup.VALIDATE("Payables Account",CreateGLAccWithAccountTypeHeading);

      // Verify: Verify Account Type Error Message.
      Assert.ExpectedError(AccTypeErr);
    END;

    [Test]
    PROCEDURE CheckGLAccTypePostingOnVendorPostingGroup@85();
    VAR
      VendorPostingGroup@1000 : Record 93;
      GLAccount@1002 : Record 15;
    BEGIN
      // Test the Account Type G/L Account must be Posting for Payables Account in Vendor Posting Group.

      // Setup: Find Vendor Posting Group and Create G/L Account.
      Initialize;
      VendorPostingGroup.GET(LibraryPurchase.FindVendorPostingGroup);
      LibraryERM.CreateGLAccount(GLAccount);

      // Exercise: Validate Payables Account from G/L Account With Account Type Posting.
      VendorPostingGroup.VALIDATE("Payables Account",GLAccount."No.");

      // Verify: Verify Account No. in Payables Account.
      VendorPostingGroup.TESTFIELD("Payables Account",GLAccount."No.");
    END;

    [Test]
    PROCEDURE CheckGLAccBlockedOnVendorPostingGroup@100();
    VAR
      VendorPostingGroup@1000 : Record 93;
    BEGIN
      // Verify the Error Message When G/L Account is Blocked for Payables Account in Vendor Posting Group.

      // Setup: Find Vendor Posting Group.
      Initialize;
      VendorPostingGroup.GET(LibraryPurchase.FindVendorPostingGroup);

      // Exercise: Validate Payables Account from  Blocked G/L Account.
      ASSERTERROR VendorPostingGroup.VALIDATE("Payables Account",CreateBlockedGLAccount);

      // Verify: Verify Account No. in Payables Account.
      Assert.ExpectedError(BlockedErr);
    END;

    LOCAL PROCEDURE AttachDimensionOnJournalLine@48(GenJournalLine@1000 : Record 81);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@47(VAR DefaultDimension@1000 : Record 352);
    VAR
      Customer@1002 : Record 18;
      Dimension@1001 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerms@62(PaymentTermsCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1003 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@7(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);

      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      GenJournalBatch.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"G/L Account");
      GenJournalBatch.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchWithBankAcc@65(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
      BankAccount@1002 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);

      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      GenJournalBatch.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"Bank Account");
      GenJournalBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@23(VAR GenJournalLine@1002 : Record 81;GenJournalBatch@1005 : Record 232;AccountType@1001 : Option;AccountNo@1004 : Code[20]);
    BEGIN
      // Using the random Amount because value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        AccountType,AccountNo,RANDOM(100) + LibraryUtility.GenerateRandomFraction);

      // The value of Document No. is not important.
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name" + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@22(GenJournalBatch@1003 : Record 232;LineCount@1008 : Integer);
    VAR
      GenJournalLine@1000 : Record 81;
      GLAccount@1005 : Record 15;
      Counter@1002 : Integer;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);

      FOR Counter := 1 TO LineCount DO
        CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGLAccountWithDimension@59(VAR DefaultDimension@1001 : Record 352);
    VAR
      GLAccount@1002 : Record 15;
      Dimension@1000 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@5(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      LibraryInventory@1002 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@29(VAR ItemJournalLine@1003 : Record 83;ItemJournalBatch@1005 : Record 233;EntryType@1001 : Option;ItemNo@1004 : Code[20]);
    VAR
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      // Using the random Amount because value is not important.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        EntryType,ItemNo,RANDOM(100) + LibraryUtility.GenerateRandomFraction);

      // The value of Document No. is not important.
      ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@41(VAR DefaultDimension@1000 : Record 352);
    VAR
      Item@1003 : Record 27;
      DimensionValue@1002 : Record 349;
      Dimension@1005 : Record 348;
      LibraryDimension@1001 : Codeunit 131001;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateMultipleItemJournalLines@28(ItemJournalBatch@1003 : Record 233;LineCount@1001 : Integer);
    VAR
      ItemJournalLine@1005 : Record 83;
      Item@1000 : Record 27;
      LibraryInventory@1002 : Codeunit 132201;
      Counter@1004 : Integer;
    BEGIN
      LibraryInventory.CreateItem(Item);

      FOR Counter := 1 TO LineCount DO
        CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,ItemJournalLine."Entry Type"::Purchase,Item."No.");
    END;

    LOCAL PROCEDURE CreatePaymentTermsWithDiscount@18(VAR PaymentTerms@1003 : Record 3);
    BEGIN
      // Input any random Due Date and Discount Date Calculation.
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<' + FORMAT(RANDOM(10)) + 'M>');
      EVALUATE(PaymentTerms."Discount Date Calculation",'<' + FORMAT(RANDOM(10)) + 'D>');
      PaymentTerms.VALIDATE("Due Date Calculation",PaymentTerms."Due Date Calculation");
      PaymentTerms.VALIDATE("Discount Date Calculation",PaymentTerms."Discount Date Calculation");
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@46(VAR DefaultDimension@1001 : Record 352);
    VAR
      Vendor@1002 : Record 23;
      Dimension@1000 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@64(PaymentTermsCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1003 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGLAccWithAccountTypeHeading@84() : Code[20];
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Account Type",GLAccount."Account Type"::Heading);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateBlockedGLAccount@91() : Code[20];
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE(Blocked,TRUE);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE DeleteGeneralJournalLine@30(JournalBatchName@1001 : Code[10]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      GenJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteItemJournalLine@31(JournalBatchName@1001 : Code[10]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE FindGeneralJournalLine@71(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemJournalLine@72(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ItemJournalLineWithDimension@49(VAR ItemJournalLine@1004 : Record 83);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      LibraryDimension@1000 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      ItemJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(ItemJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCreateGLAccountJournalLines@68(VAR GLAccount@1000 : Record 15;GenJournalBatch@1001 : Record 232;DocumentTypes@1002 : Option;PostingDate@1003 : Date;TemplateCode@1004 : Code[10]);
    VAR
      CreateGLAccJournalLines@1005 : Report 8610;
    BEGIN
      CLEAR(CreateGLAccJournalLines);
      CreateGLAccJournalLines.SETTABLEVIEW(GLAccount);
      CreateGLAccJournalLines.InitializeRequest(
        DocumentTypes,PostingDate,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,TemplateCode);
      CreateGLAccJournalLines.USEREQUESTPAGE(FALSE);
      COMMIT;  // Commit is required for Create Lines.
      CreateGLAccJournalLines.RUN;
    END;

    LOCAL PROCEDURE RunCreateCustomerJournalLines@61(VAR Customer@1000 : Record 18;GenJournalBatch@1001 : Record 232;DocumentTypes@1002 : Option;PostingDate@1003 : Date;TemplateCode@1004 : Code[10]);
    VAR
      CreateCustomerJournalLines@1005 : Report 8611;
    BEGIN
      CLEAR(CreateCustomerJournalLines);
      CreateCustomerJournalLines.SETTABLEVIEW(Customer);
      CreateCustomerJournalLines.InitializeRequest(DocumentTypes,PostingDate,WORKDATE);
      CreateCustomerJournalLines.InitializeRequestTemplate(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,TemplateCode);
      CreateCustomerJournalLines.USEREQUESTPAGE(FALSE);
      COMMIT;  // Commit is required for Create Lines.
      CreateCustomerJournalLines.RUN;
    END;

    LOCAL PROCEDURE RunCreateVendorJournalLines@86(VAR Vendor@1000 : Record 23;GenJournalBatch@1001 : Record 232;DocumentTypes@1002 : Option;PostingDate@1003 : Date;TemplateCode@1004 : Code[10]);
    VAR
      CreateVendorJournalLines@1005 : Report 8612;
    BEGIN
      CLEAR(CreateVendorJournalLines);
      CreateVendorJournalLines.SETTABLEVIEW(Vendor);
      CreateVendorJournalLines.InitializeRequest(DocumentTypes,PostingDate,WORKDATE);
      CreateVendorJournalLines.InitializeRequestTemplate(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,TemplateCode);
      CreateVendorJournalLines.USEREQUESTPAGE(FALSE);
      COMMIT;  // Commit is required for Create Lines.
      CreateVendorJournalLines.RUN;
    END;

    LOCAL PROCEDURE RunCreateItemJournalLines@106(VAR Item@1000 : Record 27;ItemJournalBatch@1001 : Record 233;EntryTypes@1002 : Option;PostingDate@1003 : Date;TemplateCode@1004 : Code[10]);
    VAR
      CreateItemJournalLines@1005 : Report 8613;
    BEGIN
      CLEAR(CreateItemJournalLines);
      CreateItemJournalLines.SETTABLEVIEW(Item);
      CreateItemJournalLines.InitializeRequest(EntryTypes,PostingDate,WORKDATE);
      CreateItemJournalLines.InitializeRequestTemplate(
        ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,TemplateCode);
      CreateItemJournalLines.USEREQUESTPAGE(FALSE);
      COMMIT;  // Commit is required for Create Lines.
      CreateItemJournalLines.RUN;
    END;

    LOCAL PROCEDURE SaveAsStandardJournal@127(GenJournalBatch@1000 : Record 232;Code@1004 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      SaveAsStandardGenJournal@1002 : Report 750;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      CLEAR(SaveAsStandardGenJournal);
      SaveAsStandardGenJournal.Initialise(GenJournalLine,GenJournalBatch);
      SaveAsStandardGenJournal.InitializeRequest(Code,'',TRUE);
      SaveAsStandardGenJournal.USEREQUESTPAGE(FALSE);
      SaveAsStandardGenJournal.RUNMODAL;
    END;

    LOCAL PROCEDURE SaveAsStandardItemJournal@40(ItemJournalBatch@1000 : Record 233;Code@1004 : Code[10]);
    VAR
      ItemJournalLine@1001 : Record 83;
      SaveAsStandardItemJournal@1002 : Report 751;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      CLEAR(SaveAsStandardItemJournal);
      SaveAsStandardItemJournal.Initialise(ItemJournalLine,ItemJournalBatch);
      SaveAsStandardItemJournal.InitializeRequest(Code,'',TRUE,TRUE);
      SaveAsStandardItemJournal.USEREQUESTPAGE(FALSE);
      SaveAsStandardItemJournal.RUNMODAL;
    END;

    LOCAL PROCEDURE VerifyAccountInLine@81(GenJournalBatch@1001 : Record 232;AccountNo@1000 : Code[20]);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      Assert.AreEqual(AccountNo,GenJournalLine."Account No.",IncorrectAccountNoErr);
    END;

    LOCAL PROCEDURE VerifyBlankDimensionInLine@70(GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Dimension Set ID",0);
    END;

    LOCAL PROCEDURE VerifyCountGeneralJournalLine@50(GenJournalBatch@1001 : Record 232;CountLine@1000 : Integer);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      Assert.AreEqual(CountLine,GenJournalLine.COUNT,NumberOfLinesErr);
    END;

    LOCAL PROCEDURE VerifyCountItemJournalLine@51(ItemJournalBatch@1000 : Record 233;CountLine@1001 : Integer);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      Assert.AreEqual(CountLine,ItemJournalLine.COUNT,NumberOfLinesErr);
    END;

    LOCAL PROCEDURE VerifyCountStandardItemJournalLine@82(JournalTemplateName@1003 : Code[10];StandardJournalCode@1000 : Code[10];CountLine@1001 : Integer);
    VAR
      StandardItemJournalLine@1002 : Record 753;
    BEGIN
      StandardItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      StandardItemJournalLine.SETRANGE("Standard Journal Code",StandardJournalCode);
      Assert.AreEqual(CountLine,StandardItemJournalLine.COUNT,NumberOfLinesErr);
    END;

    LOCAL PROCEDURE VerifyDimensionInLine@88(GenJournalBatch@1001 : Record 232;DefaultDimension@1002 : Record 352);
    VAR
      GenJournalLine@1000 : Record 81;
      DimensionSetEntry@1003 : Record 480;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,GenJournalLine."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDocumentTypeInLine@75(GenJournalBatch@1001 : Record 232;DocumentType@1000 : Option);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Document Type",DocumentType);
    END;

    LOCAL PROCEDURE VerifyDiscountDateInLine@97(GenJournalBatch@1000 : Record 232;PaymentTerms@1001 : Record 3);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Pmt. Discount Date",CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Document Date"));
    END;

    LOCAL PROCEDURE VerifyDueDateInLine@104(GenJournalBatch@1000 : Record 232;DueDateCalculation@1001 : DateFormula);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Due Date",CALCDATE(DueDateCalculation,GenJournalLine."Document Date"));
    END;

    LOCAL PROCEDURE VerifyDatesInLine@110(GenJournalBatch@1000 : Record 232;PostingDate@1001 : Date);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      FindGeneralJournalLine(GenJournalLine,GenJournalBatch);
      GenJournalLine.TESTFIELD("Posting Date",PostingDate);
      GenJournalLine.TESTFIELD("Document Date",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyIncrementOfLineNoOnStandardItemJournalLine@78(JournalTemplateName@1001 : Code[10];StandardItemJournalCode@1004 : Code[10];ExpectedIncrement@1005 : Integer);
    VAR
      StandardItemJournalLine@1000 : Record 753;
      LineNo1@1002 : Integer;
      LineNo2@1003 : Integer;
    BEGIN
      FindStandardItemJournalLine(StandardItemJournalLine,JournalTemplateName,StandardItemJournalCode);
      LineNo1 := StandardItemJournalLine."Line No.";
      StandardItemJournalLine.NEXT;
      LineNo2 := StandardItemJournalLine."Line No.";
      Assert.AreEqual(ExpectedIncrement,LineNo2 - LineNo1,LineNoErr);
    END;

    LOCAL PROCEDURE SetupCreateCustomerJournalScenario@63(VAR Customer@1000 : Record 18;VAR GenJournalBatch@1003 : Record 232;VAR StandardGeneralJournal@1002 : Record 750);
    BEGIN
      CreateGeneralJournalBatchWithBankAcc(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // For this test, we need a direct posting g/l account in the customer posting group and a bank account as a balancing account.
      LibrarySales.CreateCustomer(Customer);
      Customer."Customer Posting Group" := CreateCustomerPostingGroupWithDirectPostingAccount;
      Customer.MODIFY(TRUE);

      Customer.SETRANGE("No.",Customer."No.");
    END;

    LOCAL PROCEDURE SetupCreateVendorJournalScenario@67(VAR Vendor@1000 : Record 23;VAR GenJournalBatch@1003 : Record 232;VAR StandardGeneralJournal@1002 : Record 750);
    BEGIN
      CreateGeneralJournalBatchWithBankAcc(GenJournalBatch);
      LibraryERM.CreateStandardGeneralJournal(StandardGeneralJournal,GenJournalBatch."Journal Template Name");

      // For this test, we need a direct posting g/l account in the customer posting group and a bank account as a balancing account.
      LibraryPurchase.CreateVendor(Vendor);
      Vendor."Vendor Posting Group" := CreateVendorPostingGroupWithDirectPostingAccount;
      Vendor.MODIFY(TRUE);

      Vendor.SETRANGE("No.",Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomerPostingGroupWithDirectPostingAccount@74() : Code[10];
    VAR
      GLAccount@1000 : Record 15;
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);

      CustomerPostingGroup.Code :=
        LibraryUtility.GenerateRandomCode(CustomerPostingGroup.FIELDNO(Code),DATABASE::"Customer Posting Group");
      CustomerPostingGroup."Receivables Account" := GLAccount."No.";
      CustomerPostingGroup.INSERT(TRUE);

      EXIT(CustomerPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateVendorPostingGroupWithDirectPostingAccount@69() : Code[10];
    VAR
      GLAccount@1000 : Record 15;
      VendorPostingGroup@1003 : Record 93;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);

      VendorPostingGroup.Code := LibraryUtility.GenerateRandomCode(VendorPostingGroup.FIELDNO(Code),DATABASE::"Vendor Posting Group");
      VendorPostingGroup."Payables Account" := GLAccount."No.";
      VendorPostingGroup.INSERT(TRUE);

      EXIT(VendorPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateStandardGeneralJournalLine@66(JournalTemplateName@1001 : Code[10];StandardJournalCode@1002 : Code[10]);
    VAR
      StandardGenJnlLine@1000 : Record 751;
    BEGIN
      StandardGenJnlLine.INIT;
      StandardGenJnlLine."Journal Template Name" := JournalTemplateName;
      StandardGenJnlLine."Standard Journal Code" := StandardJournalCode;
      StandardGenJnlLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE FindStandardItemJournalLine@79(VAR StandardItemJournalLine@1002 : Record 753;JournalTemplateName@1001 : Code[10];StandardJournalCode@1000 : Code[10]);
    BEGIN
      StandardItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      StandardItemJournalLine.SETRANGE("Standard Journal Code",StandardJournalCode);
      StandardItemJournalLine.FINDSET;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@87(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@44(Message@1000 : Text[1024]);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE StandardItemJournalHandler@73(VAR StandardItemJournal@1000 : TestPage 754);
    VAR
      Item@1001 : Record 27;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryRandom@1003 : Codeunit 130440;
    BEGIN
      StandardItemJournal.StdItemJnlLines."Item No.".SETVALUE(LibraryInventory.CreateItem(Item));
      StandardItemJournal.StdItemJnlLines.Quantity.SETVALUE(LibraryRandom.RandDec(100,2));
    END;

    [PageHandler]
    PROCEDURE InsertOnStandardItemJournalHandler@80(VAR StandardItemJournal@1000 : TestPage 754);
    VAR
      Item@1001 : Record 27;
    BEGIN
      StandardItemJournal.StdItemJnlLines.NEW; // A new record will be inserted between 1st and the other lines.
      StandardItemJournal.StdItemJnlLines."Item No.".SETVALUE(LibraryInventory.CreateItem(Item));
      StandardItemJournal.StdItemJnlLines.Quantity.SETVALUE(LibraryRandom.RandDec(100,2));
    END;

    BEGIN
    {
      // [FEATURE] [General Journal] [Rapid Start]
      1.  Test batch creation of Journal Lines for G/L Account without filter.
      2.  Test batch creation of Journal Lines for Customer without filter.
      3.  Test batch creation of Journal Lines for Vendor without filter.
      4.  Test batch creation of Journal Lines for Item without filter.
      5.  Test batch creation of Journal Lines for G/L Account with filter.
      6.  Test batch creation of Journal Lines for Customer with filter.
      7.  Test batch creation of Journal Lines for Vendor with filter.
      8.  Test batch creation of Journal Lines for Item with filter.
      9.  Test batch creation of Journal Lines for G/L Account with correct Posting Date.
      10. Test batch creation of Journal Lines for Customer with correct Posting and Document Date.
      11. Test batch creation of Journal Lines for Vendor with correct Posting and document Date.
      12. Test batch creation of Journal Lines for Item with correct Posting and document Date.
      13. Verify that due date is calculated from document date, batch creation of Journal Lines for Customer.
      14. Verify that due date is calculated from document date, batch creation of Journal Lines for Vendor.
      15. Verify payment discount date, batch creation of Journal Lines for Customer.
      16. Verify payment discount date, batch creation of Journal Lines for Vendor.
      17. Test batch creation of Journal Lines for G/L Account with Multiple lines Standard Journal.
      18. Test batch creation of Journal Lines for Customer with Multiple lines Standard Journal.
      19. Test batch creation of Journal Lines for Vendor with Multiple lines Standard Journal.
      20. Test batch creation of Journal Lines for Item with Multiple lines Standard Journal.
      21. Test batch creation of Journal Lines for G/L account and Dimensions are copied from G/L Account.
      22. Test batch creation of Journal Lines for Customer and Dimensions are copied from Customer.
      23. Test batch creation of Journal Lines for Vendor and Dimensions are copied from Vendor.
      24. Test batch creation of Journal Lines for Item and Dimensions are copied from Item.
      25. Verify that journal lines are created for a customer
      26. Verify that journal lines are created for a vendor
      25. Test batch creation of Journal Lines for G/L account, from a Standard Journal that has G/L Account.
      26. Test batch creation of Journal Lines for Customer, from a Standard Journal that has Customer.
      27. Test batch creation of Journal Lines for Vendor, from a Standard Journal that has Vendor.
      28. Test batch creation of Journal Lines for Item, from a Standard Journal that has Item.
      29. Test batch creation of Journal Lines for G/L Account with Document Type.
      30. Test batch creation of Journal Lines for Customer with Document Type.
      31. Test batch creation of Journal Lines for Vendor with Document Type.
      32. Test batch creation of Journal Lines for Item with Entry Type.
      33. Test batch creation of Journal Lines for G/L Account, Dimensions are not copied from a Standard Journal.
      34. Test batch creation of Journal Lines for Customer, Dimensions are not copied from a Standard Journal.
      35. Test batch creation of Journal Lines for Vendor, Dimensions are not copied from a Standard Journal.
      36. Test batch creation of Journal Lines for Item, Dimensions are not copied from a Standard Journal.
      37. Test the increment of Line No. is correct  before/after inserting record on Standard Item Journal with Multiple lines.
      38. Verify the Error Message When Account Type of G/L Account is Heading for Payables Account in Vendor Posting Group.
      39. Test the Account Type G/L Account must be Posting for Payables Account in Vendor Posting Group.
      40. Verify the Error Message When G/L Account is Blocked for Payables Account in Vendor Posting Group.

      TFS_TS_ID = 234789
      Covers Test cases:
      ---------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------
      CustomerWithoutFilter,GLAccountWithoutFilter,VendorWithoutFilter,ItemWithoutFilter       128461
      GLAccountWithFilter,CustomerWithFilter,VendorWithFilter,ItemWithFilter                   128461
      GLAccountWithDates,CustomerWithDates,VendorWithDates,ItemWithDates                       128461
      CustomerWithDueDateCalculation,VendorWithDueDateCalculation,CustomerWithDiscountDate     128461
      VendorWithDiscountDate,GLAccountMultipleStandardLines,CustomerMultipleStandardLines      128461
      VendorMultipleStandardLines,ItemMultipleStandardLines,LinesWithGLAccountDimensions       128461
      LinesWithCustomerDimensions,LinesWithVendorDimensions,LinesWithItemDimensions            128461
      AccountFromGLAccountInLine,AccountFromCustomerInLine,AccountFromVendorInLine             128461
      ItemNumberFromItemInLine,GLAccountWithDocumentType,CustomerWithDocumentType              128461
      VendorWithDocumentType,ItemWithEntryType,BlankGLAccountDimensionInLines                  128461
      BlankCustomerDimensionInLines,BlankVendorDimensionInLines,BlankItemDimensionInLines      128461
      CheckIncrementOfLineNoOnStandardItemJournal                                              339531

      TFS_TS_ID = 49341
      Covers Test cases:
      ---------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------
      CheckGLAccTypeHeadingOnVendorPostingGroup,
      CheckGLAccTypePostingOnVendorPostingGroup,
      CheckGLAccBlockedOnVendorPostingGroup
    }
    END.
  }
}

