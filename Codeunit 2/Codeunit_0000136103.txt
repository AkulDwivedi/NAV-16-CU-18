OBJECT Codeunit 136103 Service Items
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1024 : Codeunit 130502;
      LibraryERM@1021 : Codeunit 131300;
      LibraryManufacturing@1023 : Codeunit 132202;
      LibraryResource@1022 : Codeunit 130511;
      LibrarySales@1017 : Codeunit 130509;
      LibraryService@1006 : Codeunit 131902;
      LibraryUtility@1014 : Codeunit 131000;
      LibraryPlanning@1025 : Codeunit 132203;
      LibraryVariableStorage@1015 : Codeunit 131004;
      LibraryERMCountryData@1066 : Codeunit 131305;
      LibraryRandom@1005 : Codeunit 130440;
      Assert@1013 : Codeunit 130000;
      LibraryPurchase@1019 : Codeunit 130512;
      LibraryFiscalYear@1028 : Codeunit 131302;
      ServiceItemNoForComponent@1007 : Code[20];
      ServiceItemCreationErr@1000 : TextConst 'ENU=The number of %1 created must match the Quantity of Item in Sales Line.';
      ServiceItemReplacedErr@1002 : TextConst '@@@="%1 = Table Caption,%2 = Field Value,%3 = Field Caption,%4 = Field Value,%5 = Field Caption,%6 = Field Value";ENU=The number of %1 replaced must be equal to %2 for %3 %4 and %5 %6.';
      ServiceItemDuplicateErr1@1030 : TextConst 'ENU=You cannot change the Customer No. in the service item because of the following outstanding service order line:';
      ServiceItemDuplicateErr2@1031 : TextConst '@@@="%1 - Service Order No.;%2 - Serice Line No.;%3 - Service Item No.;%4 - Serial No.;%5 - Customer No.;%6 - Ship to Code.";ENU=Order %1, line %2, service item number %3, serial number %4, customer %5, ship-to code %6.';
      RecordExistsErr@1008 : TextConst '@@@="%1 = Table Caption,%2 = Field Value";ENU=%1 %2 must not exist after deletion.';
      SerialNo@1003 : Code[20];
      CopyComponentsFrom@1009 : Option;
      ItemTrackingLinesAssignment@1016 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,AssistEdit';
      Replacement@1010 : 'Temporary,Permanent';
      isInitialized@1001 : Boolean;
      BOMComponentErr@1011 : TextConst 'ENU=No. of %1 must be %2.';
      ExpectedConfirmQst@1012 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      ServiceItemCreationDuplicateErr@1018 : TextConst 'ENU=There are more than 1 Service Items with the same Serial No. %1';
      VATIdentifierErr@1020 : TextConst 'ENU=Wrong VAT Identifier value.';
      CheckIfCanBeDeletedServiceItemDatePeriodErr@1027 : TextConst '@@@=.;ENU=You cannot delete %1 %2 because it has ledger entries in a fiscal year that has not been closed yet.';
      CheckIfCanBeDeletedServiceItemOpenErr@1026 : TextConst '@@@=.;ENU=You cannot delete %1 %2 because there are one or more open ledger entries.';

    [Test]
    PROCEDURE TestServiceItemValues@85();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceItem@1003 : Record 5940;
      Item@1002 : Record 27;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // [SCENARIO] Verify that the value of the Parts Used field in the Service Item is the product of the Unit Cost applicable and the Quantity in the Service Line.
      // 1. Create a new Service Item with a random Customer and random Sales Unit Cost, Sales Unit Price, Default Contract Cost and
      // Default Contract Value.
      // 2. Create a Service Order for the Service Item - Create Service Header, Service Item Line and Service Line with random Item and
      // random Quantity. Post the Service Order as Ship and Invoice.
      // 3. Check that the values in the Service Item table are the same as Service Item Line table.
      // 4. Verify that the value of the Parts Used field in the Service Item is the product of the Unit Cost applicable and the Quantity in the Service Line.

      // [GIVEN] Setup demonstration data.
      Initialize;

      // [WHEN] Create and Post Service Order as Ship and Invoice.
      CreateServiceItemWithAmounts(ServiceItem);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithItem(ServiceLine,Item,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Match values in Service Item table and the Service Item Line table. Match values in Service Item table and the Service Item Line table.
      VerifyServiceItemStatistics(ServiceLine,ServiceItem);
      VerifyServiceItemTrendscape(Item,ServiceLine,ServiceItem);
    END;

    [Test]
    PROCEDURE TestTroubleshootngAssgnmntItem@86();
    VAR
      Item@1002 : Record 27;
      ServiceItem@1003 : Record 5940;
      TroubleshootingLineNo@1000 : Code[20];
      Type@1001 : 'Service Item Group,Item,Service Item';
    BEGIN
      // [SCENARIO] Verify that the Troubleshooting assigned to the Item has been populated on the Service Item linked to it.
      // 1. Find a random Item and create and assign Troubleshooting to it.
      // 2. Create a new Service Item with a random Customer and link Item to the Service Item.
      // 3. Verify that the Troubleshooting assigned to the Item has been populated on the Service Item linked to it.

      // [GIVEN] Setup demonstration data, create and assign Troubleshooting to the Item and create Service Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndAssignTroubleshooting(TroubleshootingLineNo,Type::Item,Item."No.");
      CreateServiceItem(ServiceItem);

      // [WHEN] Attach Item to Service Item.
      ServiceItem.VALIDATE("Item No.",Item."No.");
      ServiceItem.MODIFY(TRUE);

      // [THEN] Check that the Troubleshooting assigned to the Item has been populated on the Service Item linked to it.
      VerifyTroubleshootingAssignment(ServiceItem,TroubleshootingLineNo);
    END;

    [Test]
    PROCEDURE TestTrblshtngAssgnmntServGroup@16();
    VAR
      ServiceItem@1002 : Record 5940;
      Type@1001 : 'Service Item Group,Item,Service Item';
      TroubleshootingLineNo@1000 : Code[20];
      ServiceItemGroupCode@1004 : Code[10];
    BEGIN
      // [SCENARIO] Verify that the Troubleshooting assigned to the Service Item Group has been populated on the Service Item linked to it.
      // 1. Create a new Service Item Group and create and assign Troubleshooting to it.
      // 2. Create a new Service Item with a random Customer and link Service Item Group to it.
      // 3 Verify that the Troubleshooting assigned to the Service Item Group has been populated on the Service Item linked to it.

      // [GIVEN] Setup demonstration data, create Service Item Group and create and assign Troubleshooting to it. Create Service Item.
      Initialize;
      ServiceItemGroupCode := CreateServiceItemGroup;
      CreateAndAssignTroubleshooting(TroubleshootingLineNo,Type::"Service Item Group",ServiceItemGroupCode);
      CreateServiceItem(ServiceItem);

      // [WHEN] Attach Service Item Group to Service Item.
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItem.MODIFY(TRUE);

      // [THEN] Check that the Troubleshooting assigned to the Service Item Group has been populated on the Service Item linked to it.
      VerifyTroubleshootingAssignment(ServiceItem,TroubleshootingLineNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestServItemCreationFrmServOrd@13();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServItemManagement@1004 : Codeunit 5920;
      Type@1003 : 'Item,Service Item Group';
    BEGIN
      // 1. Create a new Service Order with a random Customer - Create a Service Item Line with no Service Item and random Item.
      // 2. Create a new Service Item from Service Order.
      // 3. Check that the Service Item has the same Item No. as the Service Item Line.
      // [SCENARIO] Check that once Service Item has been created from the Service Item Line it cannot be created again.

      // [GIVEN] Setup demonstration data. Create Service Header and Service Item Line.
      Initialize;
      CreateServOrderForServItemCrea(ServiceItemLine,Type::Item);

      // [WHEN] Create Service Item from Service Order.
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);

      // [THEN] Check that the Service Item has the same Item No. as the Service Item Line.
      ServiceItem.GET(ServiceItemLine."Service Item No.");
      ServiceItem.TESTFIELD("Item No.",ServiceItemLine."Item No.");

      // [THEN] Verify that Service Item cannot be created from the Service Item Line again.
      ASSERTERROR ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestServItemCreationWithServGr@15();
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1005 : Record 5940;
      ServItemManagement@1004 : Codeunit 5920;
      Type@1003 : 'Item,Service Item Group';
    BEGIN
      // 1. Create a new Service Order with a random Customer - Create a Service Item Line with no Service Item.
      // 2. Create a new Service Item from Service Order.
      // 3. Check that the Service Item has the same Service Item Group Code as the Service Item Line.
      // [SCENARIO] Check that once Service Item has been created from the Service Item Line it cannot be created again.

      // [GIVEN] Setup demonstration data.
      Initialize;

      // [GIVEN] Create Service Header, Service Line and Service Item Group. Assign Service Item Group to the Service Line.
      CreateServOrderForServItemCrea(ServiceItemLine,Type::"Service Item Group");

      // [WHEN] Create Service Item from Service Order.
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);

      // [THEN] Check that the Service Item has the same Service Item Group Code as the Service Item Line.
      ServiceItem.GET(ServiceItemLine."Service Item No.");
      ServiceItem.TESTFIELD("Service Item Group Code",ServiceItemLine."Service Item Group Code");

      // [THEN] Verify that Service Item cannot be created from the Service Item Line again.
      ASSERTERROR ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
    END;

    [Test]
    PROCEDURE TestServItemCreatnfromSalesOrd@21();
    VAR
      SalesHeader@1000 : Record 36;
      ServiceItem@1005 : Record 5940;
      Item@1002 : Record 27;
      ServiceItemGroup@1007 : Record 5904;
      Assert@1006 : Codeunit 130000;
      Quantity@1004 : Decimal;
    BEGIN
      // 1. Create a new Service Item Group with the field Create Service Item as TRUE.
      // 2. Create a new Item with the Service Item Group created earlier.
      // 3. Create a new Sales Header with a random Customer and a new Sales Line with random Quantity. Post it as Ship and Invoice.
      // [SCENARIO] Verify that the number of the Service Items created match the value of the Quantity of Item in Sales Line.
      // 5. Verify the Service Item.

      // [GIVEN] Setup demonstration data.
      Initialize;

      // [GIVEN] Create Service Item Group and create a new Item with it.
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Service Item Group",CreateServiceGroupForAutoCreat);
      Item.MODIFY(TRUE);

      // [WHEN] Create and Post Sales Order.
      CreateSalesHeaderNoLocation(SalesHeader);
      CreateSalesLine(Quantity,SalesHeader,Item."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify that the number of Service Items created matches the Quantity on the Sales Line.
      ServiceItem.SETRANGE("Item No.",Item."No.");
      Assert.AreEqual(Quantity,ServiceItem.COUNT,STRSUBSTNO(ServiceItemCreationErr,ServiceItem.TABLECAPTION));
      ServiceItem.FINDFIRST;
      ServiceItem.TESTFIELD("Service Item Group Code",Item."Service Item Group");
      ServiceItemGroup.GET(ServiceItem."Service Item Group Code");
      ServiceItem.TESTFIELD("Response Time (Hours)",ServiceItemGroup."Default Response Time (Hours)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,StrMenuHandler)]
    PROCEDURE TestServiceItemModification@2();
    VAR
      ServiceItem@1000 : Record 5940;
      ResourceSkill@1001 : Record 5956;
      ServiceItem2@1003 : Record 5940;
      ResourceSkill2@1004 : Record 5956;
      ServiceItemGroupCode@1002 : Code[10];
    BEGIN
      // 1. Create a new Service Item Group.
      // 2. Create a new Service Item with a random Customer and Service Item Group created earlier in Step 1.
      // 3. Modify the Service Item Group Code on the Service Item.
      // [SCENARIO] Verify that the Resource Skill attached to the Service Item has been updated according to the Service Item Group changed.

      // [GIVEN] Setup demonstration data. Create Service Item Group with Skill and a new Service Item. Attach Service Item Group to Service Item.
      Initialize;
      CreateServiceItemGrpWithSkill(ServiceItemGroupCode,ResourceSkill);
      CreateServiceItem(ServiceItem);
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItem.MODIFY(TRUE);

      // [GIVEN] Create Service Item Group with Skill.
      CreateServiceItemGrpWithSkill(ServiceItemGroupCode,ResourceSkill2);

      // Second variable is needed to get refreshed instance of the Service Item.
      ServiceItem2.GET(ServiceItem."No.");

      // [WHEN] Modify the Service Item to attach Service Item Group to it.
      ServiceItem2.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItem2.MODIFY(TRUE);

      // [THEN] Check that the Resource Skill attached to the Service Item earlier has been deleted.
      VerifySkillCodeDeletion(ResourceSkill);
    END;

    [Test]
    PROCEDURE TestServiceItemDeletion@11();
    VAR
      ServiceItem@1000 : Record 5940;
      Assert@1001 : Codeunit 130000;
    BEGIN
      // 1. Create a new Service Item with a random Customer.
      // 2. Delete the Service Item.
      // [SCENARIO] Verify that the Service Item does not exist in the Service Item table after deletion.

      // [GIVEN] Setup demonstration data and create a new Service Item.
      Initialize;
      CreateServiceItem(ServiceItem);

      // [WHEN] Delete the Service Item.
      ServiceItem.DELETE(TRUE);

      // [THEN] Check that the Service Item does not exist in the Service Item table after deletion.
      Assert.IsFalse(ServiceItem.GET(ServiceItem."No."),STRSUBSTNO(RecordExistsErr,ServiceItem.TABLECAPTION,ServiceItem."No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler,ModalFormHandlerLookupOK)]
    PROCEDURE TestCompListCreationManual@17();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceItemComponent@1007 : Record 5941;
      ServiceItemComponent2@1008 : Record 5941;
      ServiceLine@1004 : Record 5902;
      ItemNo@1001 : Code[20];
    BEGIN
      // 1. Create a new Service Item with a random Customer and create two new Service Item Components of Type as Item for it.
      // 2. Create a Service Order for the Service Item.
      // 3. Create a Service Line for the Service Item with an Item that is different from the Items selected as components.
      // 4. Select the Replace Component option in the String Menu dialog box that is generated, through a String Menu handler.
      // 5. Post the Service Order as Ship.
      // 6. Verify that the Replaced Component list for the second Item selected as component is empty.
      // [SCENARIO] Verify that the Replaced Component list for the first Item selected as component has exactly one line with the Item selected in Step 3 above.

      // [GIVEN] Setup demonstration data and create a new Service Item with Service Item Components. Create Service Header and Service Line.
      Initialize;
      CreateServiceItemWithTwoCompon(ServiceItem,ServiceItemComponent,ServiceItemComponent2,ItemNo);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceItemNoForComponent := ServiceItem."No.";

      // [WHEN] Create a Service Line for the Service Item with an Item that is different from the Items selected as components.
      CreateServiceLine(ServiceLine,ItemNo,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Verify that the Replaced Component list for the first Item selected as component is 1.
      VerifyNoOfReplacedComponents(ServiceItemComponent,1);

      // [THEN] Verify that the Replaced Component list for the second Item selected as component is empty.
      VerifyNoOfReplacedComponents(ServiceItemComponent2,0);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler,ModalFormHandlerLookupOK)]
    PROCEDURE TestCompListCreationAutomatic@26();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemNo@1003 : Code[20];
    BEGIN
      // 1. Create a new Service Item with a random Customer and a new Item that has two BOM Components.
      // 2. Create a Service Order for the Service Item.
      // 3. Create a Service Line for the Service Item with an Item that is different from the Item created above.
      // 4. Select the Replace Component option in the String Menu dialog box that is generated, through a String Menu handler.
      // 5. Post the Service Order as Ship.
      // 6. Verify that the Replaced Component list for the second Item selected as component is empty.
      // [SCENARIO] Verify that the Replaced Component list for the first Item selected as component has exactly one line with the Item selected in Step 3 above.

      // [GIVEN] Setup demonstration data and create a new Service Item with an Item having two BOM Components. Create Service Header and Service Line.
      Initialize;
      CreateServiceItemWithBOMItem(ServiceHeader,ServiceItemNoForComponent,ItemNo);

      // [WHEN] Create a Service Line for the Service Item with an Item that is different from the Item created.
      CreateServiceLine(ServiceLine,ItemNo,ServiceHeader,ServiceItemNoForComponent);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Retrieve Component List and verify that the Replaced Component list is correct.
      RetrveAndChckCompLnForServItem(ServiceItemNoForComponent);
    END;

    [Test]
    PROCEDURE TestContractValueCalcMthdNone@36();
    VAR
      ServiceItem@1001 : Record 5940;
      Currency@1003 : Record 4;
      ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValuePercentage@1002 : Decimal;
      ContractValueCalcMethodOld@1004 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as None and Contract Value % as any random value.
      // 2. Create a new Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is 0.
      // [SCENARIO] Verify that the value of the Default Contract Cost is the product of the Sales Unit Cost field of the Service Item and the Contract Value % field of the Service Management Setup divided by 100.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValuePercentage := RANDOM(100);
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::None,ContractValuePercentage);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is 0. Verify that the value of the Default Contract Cost is the
      // [THEN] product of the Sales Unit Cost field of the Service Item and the Contract Value % field of the Service Management Setup divided by 100.
      ServiceItem.TESTFIELD("Default Contract Value",0);
      Currency.InitRoundingPrecision;
      ServiceItem.TESTFIELD(
        "Default Contract Cost",
        ROUND(ServiceItem."Sales Unit Cost" * ContractValuePercentage / 100,Currency."Unit-Amount Rounding Precision"));

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,ContractValuePercentage);
    END;

    [Test]
    PROCEDURE TestContrctValCalcMthdNoneZero@41();
    VAR
      ServiceItem@1003 : Record 5940;
      ContractValueCalcMethod@1001 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1000 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as None and Contract Value % as 0 for boundary value testing.
      // 2. Create a new Service Item with random Sales Unit Cost and random Sales Unit Price.
      // [SCENARIO] Verify that the values of the Default Contract Value and Default Contract Cost are equal to 0.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::None,0);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the values of the Default Contract Value and Default Contract Cost are 0.
      ServiceItem.TESTFIELD("Default Contract Value",0);
      ServiceItem.TESTFIELD("Default Contract Cost",0);

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    PROCEDURE TestContrctValCalcMthdNoneHund@43();
    VAR
      ServiceItem@1003 : Record 5940;
      ContractValueCalcMethod@1001 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1000 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as None and Contract Value % as 100 for boundary value testing.
      // 2. Create a new Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is 0.
      // [SCENARIO] Verify that the value of the Default Contract Cost is equal to the field Sales Unit Cost of the Service Item.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::None,100);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is 0 and the value of the Default Contract Cost is equal to the field Sales Unit Cost of the Service Item.
      ServiceItem.TESTFIELD("Default Contract Value",0);
      ServiceItem.TESTFIELD("Default Contract Cost",ServiceItem."Sales Unit Cost");

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    PROCEDURE TestCntrctValueCalcMthdUnitPri@38();
    VAR
      ServiceItem@1001 : Record 5940;
      Currency@1003 : Record 4;
      ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValuePercentage@1002 : Decimal;
      ContractValueCalcMethodOld@1004 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Price and Contract Value % as any random value.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is the product of the Sales Unit Price field of the Service Item and the
      // Contract Value % field of the Service Management Setup divided by 100.
      // [SCENARIO] Verify that the value of the Default Contract Cost is the product of the Sales Unit Cost field of the Service Item and the Contract Value % field of the Service Management Setup divided by 100.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValuePercentage := RANDOM(100);
      ContractValueCalcMethodOld :=
        ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Price",ContractValuePercentage);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is the product of the Sales Unit Price field of the Service Item and
      // [THEN] the Contract Value % field of the Service Management Setup divided by 100.
      Currency.InitRoundingPrecision;
      ServiceItem.TESTFIELD(
        "Default Contract Value",
        ROUND(ServiceItem."Sales Unit Price" * ContractValuePercentage / 100,Currency."Unit-Amount Rounding Precision"));

      // [THEN] Verify that the value of the Default Contract Cost is the product of the Sales Unit Cost field of the Service Item and
      // [THEN] the Contract Value % field of the Service Management Setup divided by 100.
      ServiceItem.TESTFIELD(
        "Default Contract Cost",
        ROUND(ServiceItem."Sales Unit Cost" * ContractValuePercentage / 100,Currency."Unit-Amount Rounding Precision"));

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,ContractValuePercentage);
    END;

    [Test]
    PROCEDURE TestCntrctValCalcMthdUnitPZero@44();
    VAR
      ServiceItem@1003 : Record 5940;
      ContractValueCalcMethod@1001 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1000 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Price and Contract Value % as 0 for boundary
      // value testing.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // [SCENARIO] Verify that the values of the Default Contract Value and Default Contract Cost are equal to 0.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Price",0);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the values of the Default Contract Value and Default Contract Cost are 0.
      ServiceItem.TESTFIELD("Default Contract Value",0);
      ServiceItem.TESTFIELD("Default Contract Cost",0);

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    PROCEDURE TestCntrctValCalcMthdUPHundred@45();
    VAR
      ServiceItem@1001 : Record 5940;
      ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1002 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Price and Contract Value % as 100 for boundary
      // value testing.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is equal to the value of the field Sales Unit Price of the Service Item.
      // [SCENARIO] Verify that the value of the Default Contract Cost is equal to the value of the field Sales Unit Cost of the Service Item.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Price",100);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is equal to the value of the field Sales Unit Price of the Service
      // [THEN] Item and the value of the Default Contract Cost is equal to the value of the field Sales Unit Cost of the Service Item.
      ServiceItem.TESTFIELD("Default Contract Value",ServiceItem."Sales Unit Price");
      ServiceItem.TESTFIELD("Default Contract Cost",ServiceItem."Sales Unit Cost");

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    PROCEDURE TestCntrctValueCalcMthdUnitCos@40();
    VAR
      Currency@1002 : Record 4;
      ServiceItem@1001 : Record 5940;
      ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValuePercentage@1003 : Decimal;
      ContractValueCalcMethodOld@1004 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Cost and Contract Value % as any random value.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is equal to the value of the field Default Contract Cost of the Service
      // Item.
      // [SCENARIO] Verify that the value of the Default Contract Cost is the product of the Sales Unit Cost field of the Service Item and the Contract Value % field of the Service Management Setup divided by 100.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValuePercentage := RANDOM(100);
      ContractValueCalcMethodOld :=
        ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Cost",ContractValuePercentage);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is 0.
      ServiceItem.TESTFIELD("Default Contract Value",ServiceItem."Default Contract Cost");

      // [THEN] Verify that the value of the Default Contract Cost is the product of the Sales Unit Cost field of the Service Item and
      // [THEN] the Contract Value % field of the Service Management Setup divided by 100.
      Currency.InitRoundingPrecision;
      ServiceItem.TESTFIELD(
        "Default Contract Cost",
        ROUND(ServiceItem."Sales Unit Cost" * ContractValuePercentage / 100,Currency."Unit-Amount Rounding Precision"));

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,ContractValuePercentage);
    END;

    [Test]
    PROCEDURE TestCntrctValCalcMthdUntCosZer@46();
    VAR
      ServiceItem@1002 : Record 5940;
      ContractValueCalcMethod@1001 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1000 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Cost and Contract Value % as 0 for boundary
      // value testing.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // [SCENARIO] Verify that the values of the Default Contract Value and Default Contract Cost are equal to 0.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Cost",0);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the values of the Default Contract Value and Default Contract Cost are 0.
      ServiceItem.TESTFIELD("Default Contract Value",0);
      ServiceItem.TESTFIELD("Default Contract Cost",0);

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    PROCEDURE TestCntrctValCalcMthdUntCosHun@47();
    VAR
      ServiceItem@1001 : Record 5940;
      ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';
      ContractValueCalcMethodOld@1002 : Option;
    BEGIN
      // 1. Setup Service Management with - Contract Value Calc. Method as Based on Unit Cost and Contract Value % as 100 for boundary
      // value testing.
      // 2. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 3. Verify that the value of the Default Contract Value is equal to the value of the field Sales Unit Cost of the Service Item.
      // [SCENARIO] Verify that the value of the Default Contract Cost is equal to the value of the field Sales Unit Cost of the Service Item.

      // [GIVEN] Setup demonstration data and Service Management Setup.
      Initialize;
      ContractValueCalcMethodOld := ServMgtSetupForContractValCalc(ContractValueCalcMethod::"Based on Unit Cost",100);

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Verify that the value of the Default Contract Value is equal to the value of the field Sales Unit Cost of the Service
      // [THEN] Item and the value of the Default Contract Cost is equal to the value of the field Sales Unit Cost of the Service Item.
      ServiceItem.TESTFIELD("Default Contract Value",ServiceItem."Sales Unit Cost");
      ServiceItem.TESTFIELD("Default Contract Cost",ServiceItem."Sales Unit Cost");

      // Cleanup:
      ServMgtSetupForContractValCalc(ContractValueCalcMethodOld,RANDOM(100));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestServItemUpdtnOnCrtnServCon@48();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      ServiceContractAccountGroup@1002 : Record 5973;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 2. Create a Service Contract.
      // [SCENARIO] Verify that the field Service Contract on the Service Item has been updated as TRUE after creation of the Service Contract.

      // [GIVEN] Setup demonstration data and Service Management Setup. Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      Initialize;
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [WHEN] Create Service Contract with the Service Item created.
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreateServiceContractHeader(ServiceContractHeader,ServiceItem."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // [THEN] Verify that the field Service Contract on the Service Item has been updated as TRUE after creation of the Service Contract.
      ServiceItem.CALCFIELDS("Service Contracts");
      ServiceItem.TESTFIELD("Service Contracts",TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestServItemUpdtnOnDltnServCon@49();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractAccountGroup@1002 : Record 5973;
      ServiceContractLine@1003 : Record 5964;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 2. Create a Service Contract.
      // 3. Delete the Service Contract.
      // [SCENARIO] Verify that the field Service Contract on the Service Item has been updated as FALSE after deletion of the Service Contract.

      // [GIVEN] Setup demonstration data and Service Management Setup. Create a Service Item with random Sales Unit Cost and Sales Unit Price and a new Service Contract with the Service Item created.
      Initialize;
      CreateServItemWithSalesUnitAmt(ServiceItem);
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreateServiceContractHeader(ServiceContractHeader,ServiceItem."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // [WHEN] Delete the Service Contract.
      ServiceContractHeader.DELETE(TRUE);

      // [THEN] Verify that the field Service Contract on the Service Item has been updated as FALSE after deletion of the Service Contract.
      ServiceItem.CALCFIELDS("Service Contracts");
      ServiceItem.TESTFIELD("Service Contracts",FALSE);
    END;

    [Test]
    PROCEDURE TestServShpmntCreatedFrmSerOrd@53();
    VAR
      Item@1002 : Record 27;
      ServiceLine@1000 : Record 5902;
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // 1. Create a new Service Item with random Customer and random Sales Unit Cost, Sales Unit Price, Default Contract Cost and
      // Default Contract Value.
      // 2. Create a Service Order for the Service Item - Create Service Header, Service Item Line and Service Line with random Item
      // and random Quantity. Post the Service Order as Ship.
      // [SCENARIO] Check that the values in the Service Line table are the same as Service Shipment Line table.

      // [GIVEN] Setup demonstration data and Service Management.
      Initialize;

      // [WHEN] Create and Post Service Order as Ship.
      CreateServiceItemWithAmounts(ServiceItem);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithItem(ServiceLine,Item,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Match values in the Service Line table and the Service Shipment Line table.
      VerifyServLineWithServShptLine(ServiceLine);
    END;

    [Test]
    PROCEDURE TestServItemLogOnServItemCrtn@54();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // [SCENARIO] Check Service Item Log entry after the creation of Service Item.

      // [GIVEN] Setup demonstration data.
      Initialize;

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      LibraryService.CreateServiceItem(ServiceItem,'');

      // [THEN] Check the Service Item Log entry after creation of the Service Item.
      VerifyServiceItemLogEntry(ServiceItem."No.",12);  // The value 1 is the event number for creation of Service Item.
    END;

    [Test]
    PROCEDURE TestServItemLogOnChangeCustom@56();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // [SCENARIO] Check Service Item Log entry after the Ship-to Code has been updated as a result of validating Customer.

      // [GIVEN] Setup demonstration data.
      Initialize;

      // [WHEN] Create a Service Item with random Sales Unit Cost and Sales Unit Price.
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [THEN] Check the Service Item Log entry after creation of the Service Item.
      VerifyServiceItemLogEntry(ServiceItem."No.",12);  // The value 12 is the event number for Ship-to Code update.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestServItemLogOnCrtnServContr@59();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      ServiceContractAccountGroup@1002 : Record 5973;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 2. Create a Service Contract.
      // [SCENARIO] Check Service Item Log entry after the creation of the Service Contract.

      // [GIVEN] Setup demonstration data. Create a Service Item with random Sales Unit Cost and Sales Unit Price
      Initialize;
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [WHEN] Create Service Contract for the Service Item created above.
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreateServiceContractHeader(ServiceContractHeader,ServiceItem."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // [THEN] Check the Service Item Log entry after creation of the Service Order.
      VerifyServiceItemLogEntry(ServiceItem."No.",3);  // The value 3 is the event number for creation of the Service Contract.
    END;

    [Test]
    PROCEDURE TestServItemLogOnCrtnServOrder@60();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 2. Create a Service Order.
      // [SCENARIO] Check Service Item Log entry after the creation of the Service Order.

      // [GIVEN] Setup demonstration data. Create a Service Item with random Sales Unit Cost and Sales Unit Price
      Initialize;
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [WHEN] Create Service Order for the Service Item created above.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // [THEN] Check the Service Item Log entry after creation of the Service Order.
      VerifyServiceItemLogEntry(ServiceItem."No.",5);  // The value 5 is the event number for creation of the Service Order.
    END;

    [Test]
    PROCEDURE TestServItemLogOnCrtnServQuote@57();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceContractAccountGroup@1001 : Record 5973;
    BEGIN
      // 1. Create a Service Item with random Sales Unit Cost and random Sales Unit Price.
      // 2. Create a Service Quote.
      // [SCENARIO] Check Service Item Log entry after the creation of the Service Quote.

      // [GIVEN] Setup demonstration data. Create a Service Item with random Sales Unit Cost and Sales Unit Price
      Initialize;
      CreateServItemWithSalesUnitAmt(ServiceItem);

      // [WHEN] Create Service Quote for the Service Item created above.
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // [THEN] Check the Service Item Log entry after creation of the Service Quote.
      VerifyServiceItemLogEntry(ServiceItem."No.",15);
      // The value 15 is the event number for addition of Service Item to Service Quote.
    END;

    [Test]
    PROCEDURE DocumentLogOnQuoteCreation@32();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceDocumentLog@1000 : Record 5912;
    BEGIN
      // Covers document number CU5906-4 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Document Log created on creation of Service Quote.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Quote.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,LibrarySales.CreateCustomerNo);

      // 3. Verify: Verify Service document Log for Service Quote creation.
      // The value 13 is the event number for Service Quote creation.
      VerifyServiceDocumentLogEntry(ServiceHeader."No.",ServiceDocumentLog."Document Type"::Quote,13);
    END;

    [Test]
    PROCEDURE DocumentLogOnInvoiceCreation@30();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceDocumentLog@1000 : Record 5912;
    BEGIN
      // Covers document number CU5906-3 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Document Log created on creation of Service Invoice.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Header of Document Type Invoice.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);

      // 3. Verify: Verify Service document Log for Service Invoice creation.
      // The value 20 is the event number for Service Invoice Creation.
      VerifyServiceDocumentLogEntry(ServiceHeader."No.",ServiceDocumentLog."Document Type"::Invoice,20);
    END;

    [Test]
    PROCEDURE DocumentLogOnInvoicePosting@76();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ServiceInvoiceHeader@1007 : Record 5992;
      ServiceDocumentLog@1008 : Record 5912;
    BEGIN
      // Covers document number CU5906-3 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Document Log created after Posting Service Invoice.

      // 1. Setup: Create Service Header with Document Type Invoice and Service Line of Type Item.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Randon because value is not important.
      ServiceLine.MODIFY(TRUE);

      // 2. Exercise: Post Service Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify Service document Log for Posted Service Invoice.
      // The value 22, 20 is the event number for Service Invoice and Posted Invoice Creation.
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      VerifyServiceDocumentLogEntry(ServiceInvoiceHeader."No.",ServiceDocumentLog."Document Type"::"Posted Invoice",22);
      VerifyServiceDocumentLogEntry(ServiceHeader."No.",ServiceDocumentLog."Document Type"::Invoice,20);
    END;

    [Test]
    PROCEDURE DocumentLogCreditMemoCreation@94();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceDocumentLog@1000 : Record 5912;
    BEGIN
      // Covers document number CU5906-2 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Document Log created on creation of Service Credit Memo.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Header of Document Type Credit Memo.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",LibrarySales.CreateCustomerNo);

      // 3. Verify: Verify Service document Log for Service Credit Memo creation.
      // The value 21 is the event number for Service Credit Memo Creation.
      VerifyServiceDocumentLogEntry(ServiceHeader."No.",ServiceDocumentLog."Document Type"::"Credit Memo",21);
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler)]
    PROCEDURE DocumentLogOnCreditMemoPosting@93();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ServiceCrMemoHeader@1007 : Record 5994;
      ServiceDocumentLog@1008 : Record 5912;
    BEGIN
      // Covers document number CU5906-2 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Document Log created after Posting Service Credit Memo.

      // 1. Setup: Create Service Header with Document Type Credit Memo and Service Line of Type Item.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Randon because value is not important.
      ServiceLine.MODIFY(TRUE);

      // 2. Exercise: Post Service Credit Memo.
      ExecuteConfirmHandlerInvoiceES;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify Service document Log for Posted Service Credit Memo.
      // The value 16, 21 is the event number for Service Credit Memo and Posted Credit Memo Creation.
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceCrMemoHeader.FINDFIRST;
      VerifyServiceDocumentLogEntry(ServiceCrMemoHeader."No.",ServiceDocumentLog."Document Type"::"Posted Credit Memo",16);
      VerifyServiceDocumentLogEntry(ServiceHeader."No.",ServiceDocumentLog."Document Type"::"Credit Memo",21);
    END;

    [Test]
    PROCEDURE ServiceItemLogChangeItemNo@5();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Item Log created after Item No. changed on Service Item.

      // 1. Setup: Create Service Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');

      // 2. Exercise: Change Item No. on Service Item.
      ServiceItem.VALIDATE("Item No.",LibraryInventory.CreateItemNo);
      ServiceItem.MODIFY(TRUE);

      // 3. Verify: Verify Service Item Log for Item No. changed.
      VerifyServiceItemLogEntry(ServiceItem."No.",13);  // The value 13 is the event number for Item No. changed.
    END;

    [Test]
    PROCEDURE ServiceItemLogChangeSerialNo@6();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Item Log created after Serial No. changed on Service Item.

      // 1. Setup: Create Service Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');

      // 2. Exercise: Change Serial No. on Service Item.
      ServiceItem.VALIDATE("Serial No.",LibraryUtility.GenerateRandomCode(ServiceItem.FIELDNO("Serial No."),DATABASE::"Service Item"));
      ServiceItem.MODIFY(TRUE);

      // 3. Verify: Verify Service Item Log for Serial No. changed.
      VerifyServiceItemLogEntry(ServiceItem."No.",14);  // The value 14 is the event number for Serial No. changed.
    END;

    [Test]
    PROCEDURE ServiceItemLogRenameServItem@7();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Item Log created after Renamed Service Item.

      // 1. Setup: Create Service Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');

      // 2. Exercise: Rename Service Item.
      ServiceItem.RENAME(LibraryUtility.GenerateRandomCode(ServiceItem.FIELDNO("No."),DATABASE::"Service Item"));

      // 3. Verify: Verify Service Item Log for Rename Service Item.
      VerifyServiceItemLogEntry(ServiceItem."No.",18);  // The value 18 is the event number for Rename Service Item.
    END;

    [Test]
    PROCEDURE ServiceItemLogChangeStatus@50();
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Service Item Log created after Renamed Service Item.

      // 1. Setup: Create Service Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');

      // 2. Exercise: Change Status on Service Item.
      ServiceItem.VALIDATE(Status,ServiceItem.Status::Installed);
      ServiceItem.MODIFY(TRUE);

      // 3. Verify: Verify Service Item Log for Status Change of Service Item.
      VerifyServiceItemLogEntry(ServiceItem."No.",12);  // The value 8 is the event number for Status Changed.
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler,ModalFormHandlerLookupOK)]
    PROCEDURE ReplaceComponent@18();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceInvoiceHeader@1000 : Record 5992;
      ValueEntry@1002 : Record 5802;
      ItemNo@1003 : Code[20];
    BEGIN
      // Covers document number CU5920-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Value Entry after Posting Service Order as Ship and Invoice.

      // 1. Setup: Create a new Service Item with an Item having two BOM Components and Create a Service Line with Selection of Replace
      // Component Option.
      Initialize;
      CreateServiceItemWithBOMItem(ServiceHeader,ServiceItemNoForComponent,ItemNo);
      CreateServiceLine(ServiceLine,ItemNo,ServiceHeader,ServiceItemNoForComponent);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Value Entry after Posting Service Order.
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      VerifyValueEntry(ValueEntry."Document Type"::"Service Invoice",ServiceInvoiceHeader."No.",ItemNo,ServiceLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandlerForNew)]
    PROCEDURE NewComponent@28();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemNo@1003 : Code[20];
    BEGIN
      // Covers document number CU5920-1 - refer to TFS ID 167035.
      // [SCENARIO] Test Item Ledger Entry after Posting Service Order as Ship and Invoice.

      // 1. Setup: Create a new Service Item with an Item having two BOM Components and Create a Service Line with Selection of New
      // Component Option.
      Initialize;
      CreateServiceItemWithBOMItem(ServiceHeader,ServiceItemNoForComponent,ItemNo);
      CreateServiceLine(ServiceLine,ItemNo,ServiceHeader,ServiceItemNoForComponent);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Item Ledger Entry after Posting Service Order.
      VerifyItemLedgerEntry(ServiceHeader."No.",ItemNo,ServiceLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemWithSkillCode@99();
    VAR
      ResourceSkill@1001 : Record 5956;
      Item@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      Currency@1008 : Record 4;
      ValueEntry@1011 : Record 5802;
      Quantity@1010 : Decimal;
      ServiceItemGroupCode@1002 : Code[10];
      DocumentNo@1003 : Code[20];
    BEGIN
      // Covers document number CU5920-2 - refer to TFS ID 167035.
      // [SCENARIO] Test Value Entry after Posting Sales Invoice.

      // 1. Setup: Create Service Item Group with Skill and a new Item. Attach Service Item Group to  Item, Create Sales Header with
      // Currency Code and Sales Line.
      Initialize;
      CreateServiceItemGrpWithSkill(ServiceItemGroupCode,ResourceSkill);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Service Item Group",ServiceItemGroupCode);
      Item.MODIFY(TRUE);

      LibraryERM.FindCurrency(Currency);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      SalesHeader.VALIDATE("Currency Code",Currency.Code);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(Quantity,SalesHeader,Item."No.");

      // 2. Exercise: Post Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // 3. Verify: Verify Value Entry after Posting Sales Invoice.
      VerifyValueEntry(ValueEntry."Document Type"::"Sales Invoice",DocumentNo,Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE ServiceOrderNoSeries@37();
    VAR
      ServiceMgtSetup@1000 : Record 5911;
      ServiceHeader@1002 : Record 5900;
      NoSeriesManagement@1005 : Codeunit 396;
      NextServiceOrderNo@1001 : Code[20];
    BEGIN
      // Covers document number Test Case139849 - refer to TFS ID 168064.
      // [SCENARIO] Test Service Order No is incremented automatically as per the setup.

      // 1. Setup: Get next Service Order No from No Series.
      ServiceMgtSetup.GET;
      IF ServiceMgtSetup."Service Order Nos." = '' THEN
        ServiceMgtSetup."Service Order Nos." := LibraryUtility.GetGlobalNoSeriesCode;
      NextServiceOrderNo := NoSeriesManagement.GetNextNo(ServiceMgtSetup."Service Order Nos.",WORKDATE,FALSE);

      // 2. Exercise: Find Customer and Create new Service Order.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // 3. Verify: Check that the Service Order No is not incremented automatically as per the setup.
      ServiceHeader.TESTFIELD("No.",NextServiceOrderNo);
    END;

    [Test]
    PROCEDURE CustomerInformationOnHeader@23();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Covers document number Test Case139849 - refer to TFS ID 168064.
      // [SCENARIO] Test the Customer information on Service Order.

      // [GIVEN]
      Initialize;

      // [WHEN] Find Customer and Create Service Header.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // [THEN] Verifying the Customer.
      VerifyCustomer(ServiceHeader);
    END;

    [Test]
    PROCEDURE ServiceItemInformationOnLine@19();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItem@1000 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // Covers document number Test Case139849 - refer to TFS ID 168064.
      // [SCENARIO] Test the Service Item details on Service Item Line.

      // [GIVEN]
      Initialize;

      // [WHEN] Find Customer, create Service Header, create Service Item, create Service Item Line.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // [THEN] Verify the Service Item Details.
      VerifyServiceItemLine(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ModalFormItemReplacement)]
    PROCEDURE ServiceItemReplacementItemBOM@68();
    VAR
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number CU-5988-1-4 - refer to TFS ID 172910.
      // [SCENARIO] Test Service Line after Service Item replacement with Copy Components from Item BOM.

      // 1. Setup: Create Service Order - Service Header, Service Item Line with Description and attach Item on Service Item Line,
      // Create Service Item from Service Item Line.
      Initialize;
      CreateServiceItemFromOrder(ServiceItemLine);

      // 2. Exercise: Create Service Line.
      CreateServiceLineReplacement(
        ServiceLine,ServiceItemLine,ServiceLine."Copy Components From"::"Item BOM",Replacement::"Temporary");

      // 3. Verify: Verify Service Line after Service Item replacement with Copy Components from Item BOM.
      ServiceLine.TESTFIELD("Copy Components From",CopyComponentsFrom);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ModalFormItemReplacement)]
    PROCEDURE ShipOrderReplacementItemBOM@73();
    VAR
      ServiceItemLine@1006 : Record 5901;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceItem@1000 : Record 5940;
    BEGIN
      // Covers document number CU-5988-1-8 - refer to TFS ID 172911.
      // [SCENARIO] Test Service Item and Its components after Posting Service Order with Copy Components from Item BOM.

      // 1. Setup: Create Service Order - Service Header, Service Item Line with Description and attach Item on Service Item Line,
      // Create Service Item from Service Item Line.
      Initialize;
      CreateServiceItemFromOrder(ServiceItemLine);

      // 2. Exercise: Create Service Line and Post Service Order as Ship.
      CreateServiceLineReplacement(
        ServiceLine,ServiceItemLine,ServiceLine."Copy Components From"::"Item BOM",Replacement::"Temporary");
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify Service Ledger Entry, Created Service Item and Service Item Component of Created Service Item after Posting
      // Service Order.
      VerifyServiceLedgerEntry(ServiceLine);
      VerifyServiceItem(ServiceItemLine,ServiceItem.Status::"Temporarily Installed");
      VerifyServiceItemComponent(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ModalFormItemReplacement)]
    PROCEDURE ItemReplacementOldItem@69();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number CU-5988-1-10 - refer to TFS ID 172911.
      // [SCENARIO] Test Service Line after Service Item replacement with Copy Components from Old Service Item.

      ServiceItemReplacement(ServiceLine."Copy Components From"::"Old Service Item");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ModalFormItemReplacement)]
    PROCEDURE ItemReplacementOldSerial@74();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number CU-5988-1-12 - refer to TFS ID 172911.
      // [SCENARIO] Test Service Line after Service Item replacement with Copy Components from Old Serv.Item w/o Serial No.

      ServiceItemReplacement(ServiceLine."Copy Components From"::"Old Serv.Item w/o Serial No.");
    END;

    LOCAL PROCEDURE ServiceItemReplacement@79(NewCopyComponentsFrom@1004 : Option);
    VAR
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceItemComponent@1000 : Record 5941;
    BEGIN
      // 1. Setup: Create Service Order - Service Header, Service Item Line with Description and attach Item on Service Item Line,
      // Create Service Item from Service Item Line.
      Initialize;
      CreateServiceItemFromOrder(ServiceItemLine);

      // 2. Exercise: Create Component for Service Item and Create Service Line.
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent,ServiceItemLine."Service Item No.",ServiceItemComponent.Type::Item,FindDifferentItem);
      CreateServiceLineReplacement(ServiceLine,ServiceItemLine,NewCopyComponentsFrom,Replacement::"Temporary");

      // 3. Verify: Verify Service Line after Service Item replacement with Copy Components from as parameter.
      ServiceLine.TESTFIELD("Copy Components From",NewCopyComponentsFrom);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ModalFormItemReplacement)]
    PROCEDURE ShipOrderReplacementOldItem@101();
    VAR
      ServiceItemLine@1006 : Record 5901;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceItem@1004 : Record 5940;
      ServiceItemComponent@1000 : Record 5941;
    BEGIN
      // Covers document number CU-5988-1-13 - refer to TFS ID 172911.
      // [SCENARIO] Test Service Item and Its components after Posting Service Order with Copy Components from Old Serv.Item w/o Serial No.

      // 1. Setup: Create Service Order - Service Header, Service Item Line with Description and attach Item on Service Item Line,
      // Create Service Item from Service Item Line.
      Initialize;
      CreateServiceItemFromOrder(ServiceItemLine);

      // 2. Exercise: Create Component for Service Item, Create Service Line and Post Service Order as Ship.
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent,ServiceItemLine."Service Item No.",ServiceItemComponent.Type::Item,FindDifferentItem);
      CreateServiceLineReplacement(
        ServiceLine,ServiceItemLine,ServiceLine."Copy Components From"::"Old Serv.Item w/o Serial No.",Replacement::Permanent);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify Service Item and Its components after Posting Service Order with Copy Components from Old Serv.Item
      // w/o Serial No.
      VerifyServiceItem(ServiceItemLine,ServiceItem.Status::Installed);
      VerifyComponents(ServiceItemLine,ServiceItemComponent);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DeleteServiceDocumentLog@10();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceDocumentLog@1000 : Record 5912;
      DeleteServiceDocumentLog@1001 : Report 6002;
    BEGIN
      // [SCENARIO] Test deletion of Service Document Log created on creation of Service Order.

      // 1. Setup: Create Service Header of Document Type Order.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // 2. Exercise: Delete the Service Document log. The value 1 is the event number for Service Order Creation.
      FilterServiceDocumentLog(ServiceDocumentLog,ServiceHeader."Document Type",ServiceHeader."No.",1);
      DeleteServiceDocumentLog.USEREQUESTPAGE(FALSE);
      DeleteServiceDocumentLog.SETTABLEVIEW(ServiceDocumentLog);
      DeleteServiceDocumentLog.RUN;

      // 3. Verify: Verify Service Document Log has been deleted.
      Assert.AreEqual(
        0,ServiceDocumentLog.COUNT,STRSUBSTNO(RecordExistsErr,ServiceDocumentLog.TABLECAPTION,ServiceDocumentLog));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DeletedOnlyTrueCurrentOrder@96();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceDocumentLog@1000 : Record 5912;
      DeleteServiceDocumentLog@1001 : Report 6002;
    BEGIN
      // [SCENARIO] Test Service Document Log is not deleted for current document if Process Deleted Only option is TRUE.

      // 1. Setup: Create Service Header of Document Type Order.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // 2. Exercise: Try to delete the Service Document log with Process Deleted Only option as TRUE.
      // The value 1 is the event number for Service Order Creation.
      FilterServiceDocumentLog(ServiceDocumentLog,ServiceHeader."Document Type",ServiceHeader."No.",1);
      DeleteServiceDocumentLog.USEREQUESTPAGE(FALSE);
      DeleteServiceDocumentLog.SetProcessDeletedOnly(TRUE);
      DeleteServiceDocumentLog.SETTABLEVIEW(ServiceDocumentLog);
      DeleteServiceDocumentLog.RUN;

      // 3. Verify: Verify Service Document Log still exists.
      ServiceDocumentLog.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DeletedOnlyTruePostedOrder@22();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1004 : Record 5901;
      ServiceDocumentLog@1000 : Record 5912;
      DeleteServiceDocumentLog@1001 : Report 6002;
    BEGIN
      // [SCENARIO] Test Service Document Log is deleted for posted document if Process Deleted Only option is TRUE.

      // 1. Setup: Create Service Header of Document Type Order, Service Item, ServiceItem Line, multiple Service Lines.
      // Post the Document as Ship and Invoice.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateMultipleServiceLines(ServiceHeader,ServiceItemLine."Line No.");

      // The value 1 is the event number for Service Order Creation.
      FilterServiceDocumentLog(ServiceDocumentLog,ServiceHeader."Document Type",ServiceHeader."No.",1);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 2. Exercise: Delete the Service Document log with Process Deleted Only option as TRUE.
      DeleteServiceDocumentLog.USEREQUESTPAGE(FALSE);
      DeleteServiceDocumentLog.SetProcessDeletedOnly(TRUE);
      DeleteServiceDocumentLog.SETTABLEVIEW(ServiceDocumentLog);
      DeleteServiceDocumentLog.RUN;

      // 3. Verify: Verify Service Document Log has been deleted.
      Assert.AreEqual(
        0,ServiceDocumentLog.COUNT,STRSUBSTNO(RecordExistsErr,ServiceDocumentLog.TABLECAPTION,ServiceDocumentLog));
    END;

    [Test]
    PROCEDURE CreateServiceItemManual@83();
    VAR
      ServiceItemNo@1001 : Code[20];
    BEGIN
      // [SCENARIO] Test create Service Item and verify that the Service Item Created.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create a new service Item.
      PageCreateServiceItem(ServiceItemNo);
      PageUpdateServiceItem(ServiceItemNo);

      // 3. Verify: Verify that Service Item created.
      VerifyServiceItemCreation(ServiceItemNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreateServiceItemAssignSkill@117();
    VAR
      ServiceItemNo@1009 : Code[20];
    BEGIN
      // [SCENARIO] Test create Service Item and assign Skill Code of Item and Service Item Group Code to the Service Item.
      // Verify that the Service Item is being assigned with correct values.

      // 1. Setup: Create a Service Item.
      Initialize;
      PageCreateServiceItem(ServiceItemNo);
      PageUpdateServiceItem(ServiceItemNo);

      // 2. Exercise: Assign Skill Code of Item and Service Item Group Code to the Service Item created.
      AssignServiceItemGroupSkill(ServiceItemNo);

      // 3. Verify: Verify that Service Item values are populated.
      VerifyServiceItemValues(ServiceItemNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ServiceItemAfterPostingItemJournal@107();
    VAR
      ItemJournalLine@1000 : Record 83;
      ServiceItem@1003 : Record 5940;
    BEGIN
      // [SCENARIO] Test Service Item is not created after posting Item Journal.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Post Item Journal.
      CreateAndPostItemJournalLine(ItemJournalLine);

      // 3. Verify: Verify Item Ledger Entry exists Item No. and Service Item Does Not exists Item No.
      VerifyPostingDateOnItemLedgerEntry(ItemJournalLine."Item No.",ItemJournalLine."Posting Date");
      ASSERTERROR ServiceItem.GET(ItemJournalLine."Item No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ServiceItemAfterPostingSalesorder@113();
    VAR
      Customer@1002 : Record 18;
      ItemJournalLine@1000 : Record 83;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // [SCENARIO] Test Service Item Status After Posting Sales Order.

      // 1. Setup: Create Item With Service Item Group.
      Initialize;
      CreateAndPostItemJournalLine(ItemJournalLine);

      // 2. Exercise: Post Item Journal.
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostSalesOrderWithItemTracking(Customer."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity);

      // 3. Verify: Verify Item Ledger Entry exists Item No. and Service Item Does Not exists Item No.
      VerifyPostingDateOnItemLedgerEntry(ItemJournalLine."Item No.",ItemJournalLine."Posting Date");
      VerifyCustomerNoAndStatusOnServiceItem(ItemJournalLine."Item No.",Customer."No.",ServiceItem.Status::Installed);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler,MessageHandler)]
    PROCEDURE ServiceItemAfterPostingSalesReturnorder@122();
    VAR
      ItemJournalLine@1000 : Record 83;
      ServiceItem@1003 : Record 5940;
      CustomerNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Return Order]
      // [SCENARIO] Service Item doesn't exist After posting Sales Return Order.
      Initialize;
      UpdateNoSeries;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Item With Service Item Group. Make positive Inventory Adjustment.
      CreateAndPostItemJournalLine(ItemJournalLine);
      // [GIVEN] Posted Sales Order.
      CreateAndPostSalesOrderWithItemTracking(CustomerNo,ItemJournalLine."Item No.",ItemJournalLine.Quantity);
      FindServiceItemByItemNo(ServiceItem,ItemJournalLine."Item No.");

      // [WHEN] Post Sales Return Order.
      CreateAndPostSalesReturnOrder(CustomerNo);

      // [THEN] Item Ledger Entry exists for Item No. and Service Item Does Not exist.
      Assert.IsFalse(ServiceItem.FIND,ServiceItem."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE ServiceItemAfterPostingSalesReturnOrderWithExistingOpenServiceEntry@110();
    VAR
      ItemJournalLine@1000 : Record 83;
      ServiceItem@1003 : Record 5940;
      ServiceLedgerEntry@1002 : Record 5907;
      CustomerNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Return Order]
      // [SCENARIO 376221] System doesn't delete Service Item with Open Service Ledger Entries After posting Sales Return Order.
      Initialize;
      UpdateNoSeries;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Item With Service Item Group. Make positive Inventory Adjustment.
      CreateAndPostItemJournalLine(ItemJournalLine);
      // [GIVEN] Posted Sales Order.
      CreateAndPostSalesOrderWithItemTracking(CustomerNo,ItemJournalLine."Item No.",ItemJournalLine.Quantity);
      // [GIVEN] Create Open Service Item Ledger Entry.
      FindServiceItemByItemNo(ServiceItem,ItemJournalLine."Item No.");
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,TRUE);

      // [WHEN] Post Sales Return Order.
      CreateAndPostSalesReturnOrder(CustomerNo);

      // [THEN] Service Item exists and Service Item Status = ""
      VerifyCustomerNoAndStatusOnServiceItem(ItemJournalLine."Item No.",CustomerNo,ServiceItem.Status::" ");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler,MessageHandler)]
    PROCEDURE ServiceItemWhenSalesOrderPostedAfterSalesReturnOrder@167();
    VAR
      Customer@1001 : Record 18;
      ItemJournalLine@1000 : Record 83;
      ServiceItem@1002 : Record 5940;
    BEGIN
      // [SCENARIO] Test Service Item Status when Sales Order is posted after Sales Return Order.

      // 1. Setup: Create Item With Service Item Group.
      Initialize;
      UpdateNoSeries;
      CreateAndPostItemJournalLine(ItemJournalLine);

      // 2. Exercise: Post Item Journal.
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostSalesOrderWithItemTracking(Customer."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity);
      CreateAndPostSalesReturnOrder(Customer."No.");
      CreateAndPostSalesOrderWithItemTracking(Customer."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity);

      // 3. Verify: Verify Item Ledger Entry exists Item No. and Service Item Does Not exists Item No.
      VerifyCustomerNoAndStatusOnServiceItem(ItemJournalLine."Item No.",Customer."No.",ServiceItem.Status::Installed);
    END;

    [Test]
    PROCEDURE CheckVarintCodeValidation@121();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1001 : Record 5401;
      ServiceItem@1002 : Record 5940;
      ServiceItemForComponent@1003 : Record 5940;
      ServiceItemComponent@1004 : Record 5941;
    BEGIN
      // [SCENARIO] Check that programm does not populate any error Message with validate of the Variant Code in an existing Component Service Item line.

      // [GIVEN] Create Service Item with variant.
      Initialize;
      LibraryInventory.CreateItemVariant(ItemVariant,LibraryInventory.CreateItem(Item));
      LibraryService.CreateServiceItem(ServiceItem,'');
      ServiceItem.VALIDATE("Item No.",ItemVariant."Item No.");
      ServiceItem.VALIDATE("Variant Code",ItemVariant.Code);
      ServiceItem.MODIFY(TRUE);
      LibraryService.CreateServiceItem(ServiceItemForComponent,'');

      // [WHEN] Update variant code on second service item.
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent,ServiceItemForComponent."No.",ServiceItemComponent.Type::"Service Item",ServiceItem."No.");
      ServiceItemComponent.VALIDATE("Variant Code",ItemVariant.Code);
      ServiceItemComponent.MODIFY(TRUE);

      // [THEN] Verify as Varint Code exist on service ttem component line
      ServiceItemComponent.GET(
        ServiceItemComponent.Active,ServiceItemComponent."Parent Service Item No.",ServiceItemComponent."Line No.");
      ServiceItemComponent.TESTFIELD("Variant Code",ItemVariant.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemJournalTrackingLinesWithSelectEntries@129();
    BEGIN
      // [SCENARIO] Test Sales Amount on Item Ledger Entry When Lot no. on Item Tracking Lines Selected with Select Entries Option.
      AssignLotNoOnItemTrackingLines(ItemTrackingLinesAssignment::SelectEntries);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemJournalTrackingLinesWithAssistEdit@126();
    BEGIN
      // [SCENARIO] Test Sales Amount on Item Ledger Entry When Lot no. on Item Tracking Lines Selected with Assist Edit.
      AssignLotNoOnItemTrackingLines(ItemTrackingLinesAssignment::AssistEdit);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE TestUniqueSerialNoInServItemListWhenSalesMutipleItems@1222();
    VAR
      ItemJournalLine@1003 : Record 83;
      ItemLedgerEntry@1009 : Record 32;
      ServiceItem@1002 : Record 5940;
      Customer@1001 : Record 18;
      Assert@1000 : Codeunit 130000;
      SerialNo@1004 : ARRAY [100] OF Text[20];
      i@1005 : Integer;
    BEGIN
      // [SCENARIO] Verify that only 1 Service Item with the same Serial No. can be existed in Service Items List
      // [GIVEN] Create Item With Service Item Group, create and post Item Journal.
      Initialize;
      CreateAndPostMutipleItemJournalLine(ItemJournalLine);

      // [GIVEN] Create numbers of Service Items with Item No. and Serial No. matches the Quantity on the Item Journal.
      ItemLedgerEntry.SETRANGE("Item No.",ItemJournalLine."Item No.");
      ItemLedgerEntry.FIND('-');

      FOR i := 1 TO ItemJournalLine.Quantity DO BEGIN
        SerialNo[i] := ItemLedgerEntry."Serial No.";
        CLEAR(ServiceItem);
        ServiceItem.INSERT(TRUE);
        ServiceItem.VALIDATE("Item No.",ItemJournalLine."Item No.");
        ServiceItem.VALIDATE("Serial No.",SerialNo[i]);
        ServiceItem.MODIFY(TRUE);
        ItemLedgerEntry.NEXT;
      END;

      // [WHEN] Create and Post Sales Order.
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostSalesOrderWithItemTracking(Customer."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity);

      // [THEN] Verify that the number of Service Items created matches the Quantity on the Sales Line.
      ServiceItem.SETRANGE("Item No.",ItemJournalLine."Item No.");
      Assert.AreEqual(ItemJournalLine.Quantity,ServiceItem.COUNT,STRSUBSTNO(ServiceItemCreationErr,ServiceItem.TABLECAPTION));

      // [THEN] Verify that only 1 Service Item with the same Serial No. can be existed in Service Items List
      FOR i := 1 TO ItemJournalLine.Quantity DO BEGIN
        ServiceItem.SETRANGE("Serial No.",SerialNo[i]);
        ServiceItem.FINDFIRST;
        Assert.AreEqual(1,ServiceItem.COUNT,STRSUBSTNO(ServiceItemCreationDuplicateErr,SerialNo[i]));
        ServiceItem.TESTFIELD("Item No.",ItemJournalLine."Item No.");
        ServiceItem.TESTFIELD(Status,ServiceItem.Status::Installed);
      END;
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesWithShipmentPageHandler)]
    PROCEDURE CheckValuesOnSalesReturnOrderLine@137();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [SCENARIO] Verifying that Line Discount and prices are correctly populated on Sales Return Order Line when using "Get Posted Document Lines to Reverse".

      // [GIVEN] Create and post Sales Order and create Sales Return Order
      Initialize;
      CreateAndPostSalesOrder(SalesLine);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLine."Sell-to Customer No.");

      // [WHEN] Get Posted Document Lines To Reverse.
      SalesHeader.GetPstdDocLinesToRevere;

      // [THEN] Verifying Line Discount and Line Amount on Sales Return Order Line.
      VerifySalesReturnOrderLine(SalesHeader,SalesLine."Line Amount",SalesLine."Line Discount %",SalesLine."Unit Price");
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesWithReceiptPageHandler)]
    PROCEDURE CheckValuesOnPurchaseReturnOrderLine@144();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // [SCENARIO] Verifying that Line Discount and prices are correctly populated on Purchase Return Order Line when using "Get Posted Document Lines to Reverse".

      // [GIVEN] Create and post purchase order and create Purchase Return Order.
      Initialize;
      CreateAndPostPurchaseOrder(PurchaseLine);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");

      // [WHEN] Get Posted Document Lines To Reverse.
      PurchaseHeader.GetPstdDocLinesToRevere;

      // [THEN] Verifying Line Discount and Line Amount on Purchase Return Order Line.
      VerifyPurchaseReturnOrderLine(
        PurchaseHeader,PurchaseLine."Line Amount",PurchaseLine."Line Discount %",PurchaseLine."Unit Price (LCY)");
    END;

    [Test]
    PROCEDURE VATIdentifierWhenCopySalesShipment@140();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      CopyDocumentMgt@1005 : Codeunit 6620;
      SalesDocType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      VATIdentifier@1002 : Code[10];
    BEGIN
      // [SCENARIO 109048.1] Verify "VAT Identifier" is correctly copied when Copy Posted Sales Shipment
      Initialize;

      // [GIVEN] Create and Post Sales Order
      CreateAndPostSalesOrder(SalesLine);
      VATIdentifier := SalesLine."VAT Identifier";

      // [GIVEN] Create new Sales Return Order
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLine."Sell-to Customer No.");

      // [WHEN] Copy Posted Sales Shipment
      CopyDocumentMgt.CopySalesDoc(
        SalesDocType::"Posted Shipment",
        FindPostedShipment(SalesLine."Sell-to Customer No.",SalesLine."Document No."),
        SalesHeader);

      // [THEN] Sales Line contains correct VAT Identifier
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      Assert.AreEqual(VATIdentifier,SalesLine."VAT Identifier",VATIdentifierErr);
    END;

    [Test]
    PROCEDURE VATIdentifierWhenCopyPurchReceipt@153();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      CopyDocumentMgt@1005 : Codeunit 6620;
      PurchDocType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      VATIdentifier@1000 : Code[10];
    BEGIN
      // [SCENARIO 109048.2] Verify "VAT Identifier" is correctly copied when Copy Posted Purchase Receipt
      Initialize;

      // [GIVEN] Create and Post Purchase Order
      CreateAndPostPurchaseOrder(PurchaseLine);
      VATIdentifier := PurchaseLine."VAT Identifier";

      // [GIVEN] Create new Purchase Return Order
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");

      // [WHEN] Copy Posted Purchase Receipt
      CopyDocumentMgt.CopyPurchDoc(
        PurchDocType::"Posted Receipt",
        FindPostedReceipt(PurchaseLine."Buy-from Vendor No.",PurchaseLine."Document No."),
        PurchaseHeader);

      // [THEN] Purchase Line contains correct VAT Identifier
      FindPurchLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      Assert.AreEqual(VATIdentifier,PurchaseLine."VAT Identifier",VATIdentifierErr);
    END;

    [Test]
    PROCEDURE ServiceItemAfterPostingDropShipmentPurchaseOrder@150();
    VAR
      Item@1000 : Record 27;
      ServiceItem@1003 : Record 5940;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1008 : Record 38;
      Qty@1001 : Integer;
    BEGIN
      // [FEATURE] [Service Item] [Drop Shipment]
      // [SCENARIO 375379] Posting Drop Shipment Purchase Order job should create Service Item if Quantity to Ship on appropriate Sales Order is blank
      Initialize;

      // [GIVEN] Item "I" with Service Item Group where "Create Service Item" = TRUE
      CreateItemWithVendor(Item);

      // [GIVEN] Drop Shipment Sales Order for Item "I" with Quantity = "X" and "Quantity to Ship" = 0
      Qty := LibraryRandom.RandInt(10);
      CreateDropShipmentSalesOrder(SalesLine,Item."No.",Qty);

      // [GIVEN] Purchase Order for Item "I"
      CreateReqLineAndCarryOutWksh(SalesLine);

      // [WHEN] Post Purchase Order as Receipt
      FindPurchaseHeader(PurchaseHeader,Item."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Number of "X" Service Items are created for Item "I"
      ServiceItem.SETRANGE("Item No.",Item."No.");
      Assert.AreEqual(Qty,ServiceItem.COUNT,STRSUBSTNO(ServiceItemCreationErr,ServiceItem.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TAB5940_CheckIfCanBeDeleted_UT_Positive@152();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] TAB5940 CheckIfCanBeDeleted() returns empty result in positive case
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,FALSE);
      Assert.IsTrue(ServiceItem.CheckIfCanBeDeleted = '',ServiceItem."No.");
    END;

    [Test]
    PROCEDURE TAB5940_CheckIfCanBeDeleted_UT_Negative_ExistingServicedEntry@161();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] TAB5940 CheckIfCanBeDeleted() returns returns error text in case of existing Service Ledger Entry with Posting Date within Accounting Period
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",LibraryFiscalYear.GetFirstPostingDate(FALSE),FALSE);
      Assert.ExpectedMessage(
        STRSUBSTNO(CheckIfCanBeDeletedServiceItemDatePeriodErr,ServiceItem.TABLECAPTION,ServiceItem."No."),
        ServiceItem.CheckIfCanBeDeleted);
    END;

    [Test]
    PROCEDURE TAB5940_CheckIfCanBeDeleted_UT_Negative_ExistingOpenEntry@162();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] TAB5940 CheckIfCanBeDeleted() returns error text in case of Open Service Ledger Entry
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,TRUE);

      Assert.ExpectedMessage(
        STRSUBSTNO(CheckIfCanBeDeletedServiceItemOpenErr,ServiceItem.TABLECAPTION,ServiceItem."No."),
        ServiceItem.CheckIfCanBeDeleted);
    END;

    [Test]
    PROCEDURE COD361_CheckIfServiceItemCanBeDeleted_UT_Positive@176();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.CheckIfServiceItemCanBeDeleted() returns empty result in positive case
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,FALSE);

      Assert.IsTrue(MoveEntries.CheckIfServiceItemCanBeDeleted(ServiceLedgerEntry,ServiceItem."No.") = '',ServiceItem."No.");
    END;

    [Test]
    PROCEDURE COD361_CheckIfServiceItemCanBeDeleted_UT_Negative_ExistingServicedEntry@163();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.CheckIfServiceItemCanBeDeleted() returns error text in case of existing Service Ledger Entry with Posting Date within Accounting Period
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",LibraryFiscalYear.GetFirstPostingDate(FALSE),FALSE);

      Assert.ExpectedMessage(
        STRSUBSTNO(CheckIfCanBeDeletedServiceItemDatePeriodErr,ServiceItem.TABLECAPTION,ServiceItem."No."),
        MoveEntries.CheckIfServiceItemCanBeDeleted(ServiceLedgerEntry,ServiceItem."No."));
    END;

    [Test]
    PROCEDURE COD361_CheckIfServiceItemCanBeDeleted_UT_Negative_ExistingOpenEntry@166();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.CheckIfServiceItemCanBeDeleted() returns error text in case of Open Service Ledger Entry
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,TRUE);

      Assert.ExpectedMessage(
        STRSUBSTNO(CheckIfCanBeDeletedServiceItemOpenErr,ServiceItem.TABLECAPTION,ServiceItem."No."),
        MoveEntries.CheckIfServiceItemCanBeDeleted(ServiceLedgerEntry,ServiceItem."No."));
    END;

    [Test]
    PROCEDURE COD361_MoveServiceItemLedgerEntries_UT_Positive@154();
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.MoveServiceItemLedgerEntries() clears "Service Ledger Entry"."Service Item No. (Serviced)"
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,FALSE);
      MoveEntries.MoveServiceItemLedgerEntries(ServiceItem);

      ServiceLedgerEntry.FIND;
      Assert.AreEqual(
        '',
        ServiceLedgerEntry."Service Item No. (Serviced)",
        ServiceLedgerEntry.FIELDCAPTION("Service Item No. (Serviced)"));
    END;

    [Test]
    PROCEDURE COD361_MoveServiceItemLedgerEntries_UT_Negative_ExistingServicedEntry@142();
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.MoveServiceItemLedgerEntries() throws an error in case of existing Service Ledger Entry with Posting Date within Accounting Period
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",LibraryFiscalYear.GetFirstPostingDate(FALSE),FALSE);
      ASSERTERROR MoveEntries.MoveServiceItemLedgerEntries(ServiceItem);

      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(CheckIfCanBeDeletedServiceItemDatePeriodErr,ServiceItem.TABLECAPTION,ServiceItem."No."));
    END;

    [Test]
    PROCEDURE COD361_MoveServiceItemLedgerEntries_UT_Negative_ExistingOpenEntry@149();
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
      ServiceItem@1001 : Record 5940;
      MoveEntries@1000 : Codeunit 361;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376221] COD361 MoveEntries.MoveServiceItemLedgerEntries() throws an error in case of Open Service Ledger Entry
      Initialize;

      CreateServiceItem(ServiceItem);
      MockServiceItemLedgerEntry(ServiceLedgerEntry,ServiceItem."No.",0D,TRUE);
      ASSERTERROR MoveEntries.MoveServiceItemLedgerEntries(ServiceItem);

      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(CheckIfCanBeDeletedServiceItemOpenErr,ServiceItem.TABLECAPTION,ServiceItem."No."));
    END;

    [Test]
    PROCEDURE ChangeServiceItemCustomerNoIfServiceLineExist@200();
    VAR
      Customer@1000 : Record 18;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1005 : Record 5901;
      ServiceHeader@1004 : Record 5900;
      ExpectedErrorString@1008 : Text;
    BEGIN
      // [SCENARIO 379400] System does not allow to change Customer in Service Item when it has Service Item Lines
      Initialize;

      // [GIVEN] Service Item "SI" with Service Line where "Customer No." = "C1"
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // [WHEN] Validate "C2" on "SI"."Customer No."
      ASSERTERROR ServiceItem.VALIDATE("Customer No.",LibrarySales.CreateCustomerNo);

      // [THEN] Error: "You cannot change the Customer No. in the service item because of the following outstanding service order line:\\
      // [THEN] Order O1, line L1, service item number SI1, serial number SN1, customer C1, ship-to code S1." thrown.
      Assert.ExpectedError(ServiceItemDuplicateErr1);
      ExpectedErrorString := STRSUBSTNO(
          ServiceItemDuplicateErr2,
          ServiceItemLine."Document No.",ServiceItemLine."Line No.",ServiceItemLine."Service Item No.",
          ServiceItemLine."Serial No.",ServiceItemLine."Customer No.",ServiceItemLine."Ship-to Code");
      Assert.ExpectedError(ExpectedErrorString);
    END;

    [Test]
    PROCEDURE CreateAndWatchTroubleshootingSetupViaPageFromItem@155();
    VAR
      Item@1000 : Record 27;
      TroubleshootingHeader@1005 : Record 5943;
      TroubleshootingSetupRec@1007 : Record 5945;
      ItemCard@1003 : TestPage 30;
      TroubleshootingSetupPage1@1004 : TestPage 5993;
      TroubleshootingSetupPage2@1006 : TestPage 5993;
    BEGIN
      // [FEATURE] [Troubleshooting Setup] [UI]
      // [SCENARIO 201242] Troubleshooting Setup created for an Item, should be shown in Troubleshooting setup page called for this Item

      Initialize;

      // [GIVEN] Item "III"
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Item Card page open for "III"
      ItemCard.OPENEDIT;
      ItemCard.GOTORECORD(Item);

      // [GIVEN] Troubleshooting Setup open from Item Card
      TroubleshootingSetupPage1.TRAP;
      ItemCard."Page Troubleshooting Setup".INVOKE;

      // [GIVEN] Troubleshooting Header with "No." = "XXX"
      MockTroubleshootingHeader(TroubleshootingHeader);

      // [GIVEN] Troubleshooting Header "XXX" is set for Troubleshooting setup for Item "III"
      TroubleshootingSetupPage1."Troubleshooting No.".VALUE := TroubleshootingHeader."No.";
      TroubleshootingSetupPage1.NEXT;
      TroubleshootingSetupPage1.OK.INVOKE;

      // [WHEN] Open Troubleshooting Setup for Item "III" again
      TroubleshootingSetupPage2.TRAP;
      ItemCard."Page Troubleshooting Setup".INVOKE;

      // [THEN] Troubleshooting Setup inserted for "III"
      TroubleshootingSetupRec.INIT;
      TroubleshootingSetupRec.SETRANGE("No.",Item."No.");
      TroubleshootingSetupRec.SETRANGE("Troubleshooting No.",TroubleshootingHeader."No.");
      Assert.RecordIsNotEmpty(TroubleshootingSetupRec);

      TroubleshootingSetupPage2."Troubleshooting No.".ASSERTEQUALS(TroubleshootingHeader."No.");
    END;

    LOCAL PROCEDURE Initialize@87();
    BEGIN
      // Lazy Setup.
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignServiceItemGroupSkill@97(No@1000 : Code[20]);
    VAR
      ServiceItemCard@1006 : TestPage 5980;
    BEGIN
      ServiceItemCard.OPENEDIT;
      ServiceItemCard.FILTER.SETFILTER("No.",No);
      ServiceItemCard."Service Item Group Code".SETVALUE(ServiceItemGroupWithSkill);
      ServiceItemCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE AssignSerialNumberInItemJournal@112(ItemJournalLineBatchName@1001 : Code[10]);
    VAR
      ItemJournal@1000 : TestPage 40;
    BEGIN
      COMMIT;  // Commit required to avoid rollback of write transaction before opening Item Journal Item Tracking Lines.
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLineBatchName);
      LibraryVariableStorage.Enqueue(ItemTrackingLinesAssignment::AssignSerialNo);
      ItemJournal.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE AssignTrackingOnItemJournalLines@131(JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    LOCAL PROCEDURE PageCreateServiceItem@84(VAR ServiceItemNo@1001 : Code[20]);
    VAR
      ServiceItemCard@1000 : TestPage 5980;
    BEGIN
      ServiceItemCard.OPENNEW;
      ServiceItemCard.Description.ACTIVATE;
      ServiceItemNo := ServiceItemCard."No.".VALUE;
    END;

    LOCAL PROCEDURE PageUpdateServiceItem@95(No@1003 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ServiceItemCard@1000 : TestPage 5980;
    BEGIN
      LibraryInventory.CreateItem(Item);
      ServiceItemCard.OPENEDIT;
      ServiceItemCard.FILTER.SETFILTER("No.",No);
      ServiceItemCard."Item No.".SETVALUE(Item."No.");
      ServiceItemCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE ServiceItemGroupWithSkill@119() : Code[10];
    VAR
      ResourceSkill@1002 : Record 5956;
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      LibraryResource.CreateResourceSkill(
        ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItemGroup.Code,CreateSkillCode);
      EXIT(ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE ServMgtSetupForContractValCalc@64(ContractValueCalcMethod@1000 : 'None,Based on Unit Price,Based on Unit Cost';ContractValuePercentage@1001 : Decimal) ContractValueCalcMethodOld : Integer;
    VAR
      ServiceMgtSetup@1002 : Record 5911;
    BEGIN
      // Setup the fields Contract Value Calc. Method and Contract Value % of the Service Management Setup.
      ServiceMgtSetup.GET;
      ContractValueCalcMethodOld := ServiceMgtSetup."Contract Value Calc. Method";
      ServiceMgtSetup.VALIDATE("Contract Value Calc. Method",ContractValueCalcMethod);
      ServiceMgtSetup.VALIDATE("Contract Value %",ContractValuePercentage);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOMComponent@42(ParentItemNo@1004 : Code[20];ItemNo@1005 : Code[20]);
    VAR
      BOMComponent@1003 : Record 90;
      ItemUnitOfMeasure@1001 : Record 5404;
      RecRef@1002 : RecordRef;
    BEGIN
      // Create BOM Component with random Unit of Measure.
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.SETRANGE("Item No.",ItemNo);
      RecRef.GETTABLE(ItemUnitOfMeasure);
      LibraryUtility.FindRecord(RecRef);
      RecRef.SETTABLE(ItemUnitOfMeasure);

      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ParentItemNo,BOMComponent.Type::Item,ItemNo,RANDOM(10),ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateItemWithBOMComponents@31() : Code[20];
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
    BEGIN
      // Create Item with two BOM Components.
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      CreateBOMComponent(Item."No.",Item2."No.");
      LibraryInventory.CreateItem(Item2);
      CreateBOMComponent(Item."No.",Item2."No.");
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithServiceItemGroup@120(ItemTrackingCode@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      ServiceItemGroup@1000 : Record 5904;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroup.VALIDATE("Create Service Item",TRUE);
      ServiceItemGroup.MODIFY(TRUE);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Service Item Group",ServiceItemGroup.Code);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithTwoUnitsOfMeasure@133(VAR ItemUnitOfMeasure@1002 : Record 5404) : Code[10];
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(CreateItemWithServiceItemGroup(FindItemTrackingCode(TRUE,FALSE)));
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",LibraryUtility.GenerateRandomFraction);
      EXIT(Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE CreateMultipleServiceLines@104(ServiceHeader@1000 : Record 5900;ServiceItemLineNo@1004 : Integer);
    VAR
      Item@1001 : Record 27;
      ServiceLine@1002 : Record 5902;
      Counter@1003 : Integer;
    BEGIN
      // Create 2 to random number of lines.
      LibraryInventory.CreateItem(Item);
      FOR Counter := 1 TO 1 + RANDOM(10) DO BEGIN
        CLEAR(ServiceLine);
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
        ServiceLine.VALIDATE(Quantity,RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Input any random value.
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
        ServiceLine.MODIFY(TRUE);
        Item.NEXT;
      END;
    END;

    LOCAL PROCEDURE CreateSalesHeaderNoLocation@71(VAR SalesHeader@1000 : Record 36);
    BEGIN
      // Create Sales Header with any Customer that has no location.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
    END;

    LOCAL PROCEDURE CreateItemJournalLine@130(VAR ItemJournalLine@1002 : Record 83;EntryType@1003 : Option;PostingDate@1005 : Date;ItemUnitOfMeasureCode@1006 : Code[10];ItemNo@1004 : Code[20];Quantity@1008 : Decimal);
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",
        ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Document No.",
        COPYSTR(LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Document No."))));
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasureCode);
      ItemJournalLine.VALIDATE(Amount,LibraryUtility.GenerateRandomFraction);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithVendor@160(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Service Item Group",CreateServiceGroupForAutoCreat);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDropShipmentSalesOrder@165(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20];Qty@1004 : Integer);
    VAR
      SalesHeader@1002 : Record 36;
      Purchasing@1003 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Qty);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReqLineAndCarryOutWksh@170(SalesLine@1000 : Record 37);
    VAR
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
      RetrieveDimensionsFrom@1001 : 'Item,Sales Line';
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate.Name,RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CreateSalesLine@25(VAR Quantity@1004 : Decimal;SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      // Create Sales Line with any random Quantity.
      Quantity := RANDOM(10);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateServiceItem@88(VAR ServiceItem@1000 : Record 5940);
    BEGIN
      // Create new Service Item with random Customer.
      LibraryService.CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo);
    END;

    LOCAL PROCEDURE CreateServiceItemFromOrder@77(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      ServItemManagement@1001 : Codeunit 5920;
    BEGIN
      CreateServiceItemLineWithItem(ServiceItemLine);
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemGroup@61() : Code[10];
    VAR
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      EXIT(ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE CreateServiceItemLineWithItem@66(VAR ServiceItemLine@1003 : Record 5901);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Create Service Order - Service Header and Service Item Line with description and Item No.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Item No.",CreateItemWithBOMComponents);
      ServiceItemLine.VALIDATE(
        Description,FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + FORMAT(ServiceItemLine."Line No."));
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceGroupForAutoCreat@65() : Code[10];
    VAR
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      // Create Service Item Group with the field Create Service Item as TRUE, to automatically register Items as Service Items on
      // Shipping through Sales Orders or Sales Invoices.
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroup.VALIDATE("Create Service Item",TRUE);
      ServiceItemGroup.MODIFY(TRUE);
      EXIT(ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE CreateServiceItemGrpWithSkill@14(VAR ServiceItemGroupCode@1001 : Code[10];VAR ResourceSkill@1003 : Record 5956);
    VAR
      ServiceItemGroup@1004 : Record 5904;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode := ServiceItemGroup.Code;

      // Create Skill Code and validate in the Skill Code field of the Resource Skill.
      LibraryResource.CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItemGroupCode,CreateSkillCode);
    END;

    LOCAL PROCEDURE CreateServiceItemWithAmounts@20(VAR ServiceItem@1000 : Record 5940);
    BEGIN
      // Create new Service Item and validate random values for Sales Unit Price, Sales Unit Cost, Default Contract Cost and Default
      // Contract Value in the Service Item.
      CreateServItemWithSalesUnitAmt(ServiceItem);
      ServiceItem.VALIDATE("Default Contract Cost",RANDOM(100));
      ServiceItem.VALIDATE("Default Contract Value",RANDOM(100));
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServItemWithSalesUnitAmt@58(VAR ServiceItem@1000 : Record 5940);
    BEGIN
      // Create new Service Item and validate random values for Sales Unit Price and Sales Unit Cost in the Service Item.
      CreateServiceItem(ServiceItem);
      ServiceItem.VALIDATE("Sales Unit Price",RANDOM(100));
      ServiceItem.VALIDATE("Sales Unit Cost",RANDOM(100));
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemWithBOMItem@34(VAR ServiceHeader@1001 : Record 5900;VAR ServiceItemNo@1000 : Code[20];VAR ItemNo@1002 : Code[20]);
    VAR
      ServiceItem@1003 : Record 5940;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Create a new Item having two BOM Components. Create a new Service Item and validate the Item in the
      // Item No. field of the Service Item.
      CreateServiceItem(ServiceItem);
      ServiceItem.VALIDATE("Item No.",CreateItemWithBOMComponents);
      ServiceItem.MODIFY(TRUE);

      // Copy Service Item Component from BOM to Service Item.
      CODEUNIT.RUN(CODEUNIT::"ServComponent-Copy from BOM",ServiceItem);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // Find the next Item.
      ItemNo := LibraryInventory.CreateItemNo;
      ServiceItemNo := ServiceItem."No.";
    END;

    LOCAL PROCEDURE CreateServiceItemWithTwoCompon@75(VAR ServiceItem@1000 : Record 5940;VAR ServiceItemComponent@1001 : Record 5941;VAR ServiceItemComponent2@1002 : Record 5941;VAR ItemNo@1003 : Code[20]);
    BEGIN
      // Create a new Service Item with any two random Service Item Components.
      CreateServiceItem(ServiceItem);
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent,ServiceItem."No.",ServiceItemComponent.Type::Item,LibraryInventory.CreateItemNo);
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent2,ServiceItem."No.",ServiceItemComponent.Type::Item,LibraryInventory.CreateItemNo);
      ItemNo := LibraryInventory.CreateItemNo;
    END;

    LOCAL PROCEDURE CreateServiceContractHeader@67(VAR ServiceContractHeader@1001 : Record 5965;CustomerNo@1000 : Code[20]);
    BEGIN
      // Create a new Prepaid Service Header.
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);
      ServiceContractHeader.VALIDATE(Prepaid,TRUE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithItem@89(VAR ServiceLine@1003 : Record 5902;VAR Item@1002 : Record 27;ServiceHeader@1001 : Record 5900;ServiceItemNo@1000 : Code[20]);
    BEGIN
      // Create Service Line with any Item and random value for Quantity.
      LibraryInventory.CreateItem(Item);
      CreateServiceLine(ServiceLine,Item."No.",ServiceHeader,ServiceItemNo);
    END;

    LOCAL PROCEDURE CreateServiceLine@33(VAR ServiceLine@1003 : Record 5902;ItemNo@1002 : Code[20];ServiceHeader@1001 : Record 5900;ServiceItemNo@1000 : Code[20]);
    BEGIN
      // Create Service Line with random value for Quantity.
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(100));  // Integer is required for replacement of components.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineReplacement@62(VAR ServiceLine@1003 : Record 5902;ServiceItemLine@1004 : Record 5901;CopyComponentsFrom2@1002 : Option;Replacement2@1000 : Option);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");

      // Assign Global Variables for Form Handler.
      SerialNo := ServiceHeader."No.";
      CopyComponentsFrom := CopyComponentsFrom2;
      Replacement := Replacement2;

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ServiceItemLine."Item No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceLine.VALIDATE("No.",ServiceItemLine."Item No.");
      ServiceLine.VALIDATE(Quantity,1);  // Use 1 for Service Item Replacement.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServOrderForServItemCrea@80(VAR ServiceItemLine@1002 : Record 5901;Type@1003 : 'Item,Service Item Group');
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      IF Type = Type::Item THEN
        ServiceItemLine.VALIDATE("Item No.",LibraryInventory.CreateItemNo)
      ELSE
        ServiceItemLine.VALIDATE("Service Item Group Code",CreateServiceItemGroup);

      // Validate Description as Primary Key since the value is not important.
      IF ServiceItemLine.Description = '' THEN
        ServiceItemLine.VALIDATE(
          Description,FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + FORMAT(ServiceItemLine."Line No."));
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSkillCode@24() : Code[10];
    VAR
      SkillCode@1000 : Record 5955;
    BEGIN
      LibraryResource.CreateSkillCode(SkillCode);
      EXIT(SkillCode.Code);
    END;

    LOCAL PROCEDURE CreateAndAssignTroubleshooting@1(VAR TroubleshootingHeaderNo@1001 : Code[20];Type@1004 : Option;No@1000 : Code[20]);
    VAR
      TroubleshootingSetup@1002 : Record 5945;
      TroubleshootingLine@1003 : Record 5944;
      TroubleshootingHeader@1005 : Record 5943;
    BEGIN
      LibraryService.CreateTroubleshootingHeader(TroubleshootingHeader);
      LibraryService.CreateTroubleshootingLine(TroubleshootingLine,TroubleshootingHeader."No.");

      // Create Troubleshooting Setup and assign the number of the Troubleshooting Header to it.
      LibraryService.CreateTroubleshootingSetup(TroubleshootingSetup,Type,No,TroubleshootingHeader."No.");
      TroubleshootingHeaderNo := TroubleshootingHeader."No.";
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@111(VAR ItemJournalLine@1000 : Record 83);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(CreateItemWithServiceItemGroup(FindItemTrackingCode(FALSE,TRUE)));
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,
        WORKDATE,Item."Base Unit of Measure",Item."No.",LibraryRandom.RandInt(10));
      AssignSerialNumberInItemJournal(ItemJournalLine."Journal Batch Name");
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostMutipleItemJournalLine@136(VAR ItemJournalLine@1000 : Record 83);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(CreateItemWithServiceItemGroup(FindItemTrackingCode(FALSE,TRUE)));
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,
        WORKDATE,Item."Base Unit of Measure",Item."No.",LibraryRandom.RandIntInRange(2,100));
      AssignSerialNumberInItemJournal(ItemJournalLine."Journal Batch Name");
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@164(VAR PurchaseLine@1000 : Record 39);
    VAR
      Vendor@1001 : Record 23;
      PurchaseHeader@1003 : Record 38;
      Item@1004 : Record 27;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      WITH PurchaseLine DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(10));
        VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
        VALIDATE("Line Discount %",LibraryRandom.RandIntInRange(10,20));
        MODIFY(TRUE);
      END;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@168(VAR SalesLine@1001 : Record 37);
    VAR
      SalesHeader@1000 : Record 36;
      Item@1002 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      WITH SalesLine DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(10));
        VALIDATE("Unit Price",LibraryRandom.RandInt(100));
        VALIDATE("Line Discount %",LibraryRandom.RandIntInRange(10,20));
        MODIFY(TRUE);
      END;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithItemTracking@124(CustomerNo@1006 : Code[20];ItemNo@1001 : Code[20];Quantity@1005 : Decimal) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingLinesAssignment::SelectEntries);
      SalesLine.OpenItemTrackingLines;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnOrder@116(CustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      SalesHeader.GetPstdDocLinesToRevere;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ExecuteConfirmHandlerInvoiceES@82();
    BEGIN
      IF CONFIRM(STRSUBSTNO(ExpectedConfirmQst)) THEN;
    END;

    LOCAL PROCEDURE AssignLotNoOnItemTrackingLines@125(AssignedValue@1013 : Option);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemUnitOfMeasure@1008 : Record 5404;
    BEGIN
      // Create and Post Item Journal with Entry Type Purchase after assigning Lotno.
      // Create Item Journal with Entry Type Sale and Update Lot no. using Select Entries Or Assist Edit.
      Initialize;
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,WORKDATE,
        CreateItemWithTwoUnitsOfMeasure(ItemUnitOfMeasure),ItemUnitOfMeasure."Item No.",LibraryRandom.RandDecInRange(11,20,2));
      LibraryVariableStorage.Enqueue(ItemTrackingLinesAssignment::AssignLotNo);
      AssignTrackingOnItemJournalLines(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      UpdateExpirationDateOnReservationEntry(ItemUnitOfMeasure."Item No.");
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Sale,
        CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(5)),WORKDATE),ItemUnitOfMeasure.Code,ItemUnitOfMeasure."Item No.",
        LibraryRandom.RandDecInRange(1,10,2));
      LibraryVariableStorage.Enqueue(AssignedValue);
      COMMIT;
      AssignTrackingOnItemJournalLines(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [WHEN] Post Item Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [THEN] Verify Sales Amount on Item Ledger Entry.
      VerifySalesAmountOnItemLedgerEntry(ItemJournalLine);
    END;

    LOCAL PROCEDURE MockServiceItemLedgerEntry@151(VAR ServiceLedgerEntry@1000 : Record 5907;ServiceItemNo@1002 : Code[20];PostingDate@1004 : Date;IsOpen@1003 : Boolean);
    BEGIN
      WITH ServiceLedgerEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(ServiceLedgerEntry,FIELDNO("Entry No."));
        "Service Item No. (Serviced)" := ServiceItemNo;
        "Posting Date" := PostingDate;
        Open := IsOpen;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FilterServiceDocumentLog@103(VAR ServiceDocumentLog@1000 : Record 5912;DocumentType@1002 : Option;DocumentNo@1003 : Code[20];EventNo@1001 : Integer);
    BEGIN
      ServiceDocumentLog.SETRANGE("Document Type",DocumentType);
      ServiceDocumentLog.SETRANGE("Document No.",DocumentNo);
      ServiceDocumentLog.SETRANGE("Event No.",EventNo);
    END;

    LOCAL PROCEDURE FindDifferentItem@100() : Code[20];
    BEGIN
      EXIT(LibraryInventory.CreateItemNo);
    END;

    LOCAL PROCEDURE FindServiceItem@106(VAR ServiceItem@1001 : Record 5940;ServiceItemLine@1000 : Record 5901);
    BEGIN
      ServiceItem.SETRANGE("Item No.",ServiceItemLine."Item No.");
      ServiceItem.SETRANGE("Serial No.",ServiceItemLine."Document No.");
      ServiceItem.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceItemByItemNo@181(VAR ServiceItem@1001 : Record 5940;ItemNo@1000 : Code[20]);
    BEGIN
      ServiceItem.SETRANGE("Item No.",ItemNo);
      ServiceItem.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemTrackingCode@108(LotSpecific@1001 : Boolean;SNSpecific@1002 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,LotSpecific);
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SNSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SNSpecific);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindSalesLine@143(VAR SalesLine@1002 : Record 37;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETFILTER(Type,'<>%1',Type::" ");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindPostedShipment@146(CustNo@1001 : Code[20];OrderNo@1002 : Code[20]) : Code[20];
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      WITH SalesShipmentHeader DO BEGIN
        SETRANGE("Sell-to Customer No.",CustNo);
        SETRANGE("Order No.",OrderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FindPurchLine@147(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETFILTER(Type,'<>%1',Type::" ");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@159(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
    END;

    LOCAL PROCEDURE FindPostedReceipt@157(VendNo@1001 : Code[20];OrderNo@1002 : Code[20]) : Code[20];
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      WITH PurchRcptHeader DO BEGIN
        SETRANGE("Buy-from Vendor No.",VendNo);
        SETRANGE("Order No.",OrderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE GetRefinedUnitCost@90(Item@1002 : Record 27;ServiceLineUnitCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      // Find Unit Cost applicable for Service Line.
      IF Item."Costing Method" = Item."Costing Method"::Standard THEN
        EXIT(Item."Unit Cost");
      EXIT(ServiceLineUnitCostLCY);
    END;

    LOCAL PROCEDURE MockTroubleshootingHeader@186(VAR TroubleshootingHeader@1000 : Record 5943);
    BEGIN
      TroubleshootingHeader.INIT;
      TroubleshootingHeader."No." :=
        LibraryUtility.GenerateRandomCode(TroubleshootingHeader.FIELDNO("No."),DATABASE::"Troubleshooting Header");
      TroubleshootingHeader.INSERT;
    END;

    LOCAL PROCEDURE RetrveAndChckCompLnForServItem@70(ServiceItemNo@1000 : Code[20]);
    VAR
      ServiceItemComponent@1001 : Record 5941;
    BEGIN
      // Retrieve the first Service Item Component Line.
      ServiceItemComponent.SETRANGE(Active,TRUE);
      ServiceItemComponent.SETRANGE("Parent Service Item No.",ServiceItemNo);
      ServiceItemComponent.FINDSET;

      // Verify: Verify that the Replaced Component list for the first Item selected as component is 1.
      VerifyNoOfReplacedComponents(ServiceItemComponent,1);
      ServiceItemComponent.NEXT;

      // Verify: Verify that the Replaced Component list for the second Item selected as component is empty.
      VerifyNoOfReplacedComponents(ServiceItemComponent,0);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@139(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Expiration Date",CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandInt(5),WORKDATE)));
      ReservationEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNoSeries@138();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      NoSeries@1001 : Record 308;
    BEGIN
      SalesReceivablesSetup.GET;
      NoSeries.GET(SalesReceivablesSetup."Return Order Nos.");
      NoSeries.VALIDATE("Manual Nos.",TRUE);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyComponents@81(ServiceItemLine@1000 : Record 5901;ServiceItemComponent@1001 : Record 5941);
    VAR
      ServiceItemComponent2@1002 : Record 5941;
      ServiceItem@1003 : Record 5940;
    BEGIN
      FindServiceItem(ServiceItem,ServiceItemLine);
      ServiceItemComponent2.SETRANGE("Parent Service Item No.",ServiceItem."No.");
      ServiceItemComponent2.FINDFIRST;
      ServiceItemComponent2.TESTFIELD(Type,ServiceItemComponent.Type);
      ServiceItemComponent2.TESTFIELD("No.",ServiceItemComponent."No.");
    END;

    LOCAL PROCEDURE VerifyCustomer@39(ServiceHeader@1000 : Record 5900);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(ServiceHeader."Customer No.");
      ServiceHeader.TESTFIELD(Name,Customer.Name);
      ServiceHeader.TESTFIELD(Address,Customer.Address);
      ServiceHeader.TESTFIELD(City,Customer.City);
      ServiceHeader.TESTFIELD("Post Code",Customer."Post Code");
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@145(OrderNo@1000 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ServiceShipmentHeader@1004 : Record 5990;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Shipment");
      ItemLedgerEntry.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Item No.",ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,-Quantity);
      ItemLedgerEntry.TESTFIELD("Invoiced Quantity",-Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseReturnOrderLine@196(PurchaseHeader@1000 : Record 38;LineAmount@1001 : Decimal;LineDiscount@1002 : Decimal;UnitPrice@1004 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        TESTFIELD("Line Amount",LineAmount);
        TESTFIELD("Line Discount %",LineDiscount);
        TESTFIELD("Unit Price (LCY)",UnitPrice);
      END;
    END;

    LOCAL PROCEDURE VerifySalesReturnOrderLine@158(SalesHeader@1000 : Record 36;LineAmount@1002 : Decimal;LineDiscount@1003 : Decimal;UnitPrice@1004 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        TESTFIELD("Line Discount %",LineDiscount);
        TESTFIELD("Line Amount",LineAmount);
        TESTFIELD("Unit Price",UnitPrice);
      END;
    END;

    LOCAL PROCEDURE VerifyServiceItem@127(ServiceItemLine@1000 : Record 5901;Status@1002 : Option);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      FindServiceItem(ServiceItem,ServiceItemLine);
      ServiceItem.TESTFIELD("Customer No.",ServiceItemLine."Customer No.");
      ServiceItem.TESTFIELD(Status,Status);
    END;

    LOCAL PROCEDURE VerifyServiceItemComponent@114(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceItem@1004 : Record 5940;
      ServiceItemComponent@1002 : Record 5941;
      BOMComponent@1001 : Record 90;
      Assert@1003 : Codeunit 130000;
    BEGIN
      FindServiceItem(ServiceItem,ServiceItemLine);
      BOMComponent.SETRANGE("Parent Item No.",ServiceItemLine."Item No.");
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      BOMComponent.FINDSET;
      REPEAT
        ServiceItemComponent.SETRANGE("Parent Service Item No.",ServiceItem."No.");
        ServiceItemComponent.SETRANGE(Type,ServiceItemComponent.Type::Item);
        ServiceItemComponent.SETRANGE("No.",BOMComponent."No.");
        Assert.AreEqual(
          BOMComponent."Quantity per",
          ServiceItemComponent.COUNT,
          STRSUBSTNO(BOMComponentErr,ServiceItemComponent.TABLECAPTION,BOMComponent."Quantity per"));
      UNTIL BOMComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceItemLine@51(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceItem@1002 : Record 5940;
    BEGIN
      ServiceItem.GET(ServiceItemLine."Service Item No.");
      ServiceItemLine.TESTFIELD(Priority,ServiceItem.Priority);
      ServiceItemLine.TESTFIELD("Response Time (Hours)",ServiceItem."Response Time (Hours)");
      ServiceItemLine.TESTFIELD("Service Item Group Code",ServiceItem."Service Item Group Code");
    END;

    LOCAL PROCEDURE VerifyServiceItemStatistics@92(ServiceLine@1001 : Record 5902;ServiceItem@1000 : Record 5940);
    BEGIN
      // Verify and match the values in Service Item with the values in the Service Line.
      ServiceItem.SETRANGE("Type Filter",ServiceItem."Type Filter"::Item);
      ServiceItem.CALCFIELDS("Total Quantity","Total Qty. Invoiced","Total Qty. Consumed");
      ServiceItem.TESTFIELD("Total Quantity",ServiceLine.Quantity);
      ServiceItem.TESTFIELD("Total Qty. Invoiced",ServiceLine."Qty. to Invoice");
      ServiceItem.TESTFIELD("Total Qty. Consumed",0);
    END;

    LOCAL PROCEDURE VerifyServiceItemTrendscape@91(Item@1002 : Record 27;ServiceLine@1001 : Record 5902;ServiceItem@1000 : Record 5940);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      // Verify that the value of the Parts Used field in the Service item is the product of the Unit Cost applicable and the Quantity in
      // the Service Line.
      IF ServiceLine."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(ServiceLine."Currency Code");

      ServiceItem.SETRANGE("Type Filter",ServiceItem."Type Filter"::Item);
      ServiceItem.CALCFIELDS("Parts Used");
      // Use GetRefinedCost to find the correct Unit Cost applicable.
      ServiceItem.TESTFIELD(
        "Parts Used",
        ROUND(GetRefinedUnitCost(Item,ServiceLine."Unit Cost (LCY)") * ServiceLine.Quantity,Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@134(ServiceLine@1000 : Record 5902);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("No.",ServiceLine."No.");
      ServiceLedgerEntry.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySkillCodeDeletion@12(ResourceSkill@1000 : Record 5956);
    VAR
      Assert@1001 : Codeunit 130000;
    BEGIN
      // Check that the Resource Skill attached to the Service Item earlier has been deleted.
      Assert.IsFalse(
        ResourceSkill.GET(ResourceSkill.Type::Item,ResourceSkill."No.",ResourceSkill."Skill Code"),
        STRSUBSTNO(RecordExistsErr,ResourceSkill.TABLECAPTION,FORMAT(ResourceSkill)));
    END;

    LOCAL PROCEDURE VerifyNoOfReplacedComponents@35(ServiceItemComponent@1000 : Record 5941;NumberofLinesReplaced@1001 : Integer);
    VAR
      ServiceItemComponent2@1002 : Record 5941;
      Assert@1003 : Codeunit 130000;
    BEGIN
      // Verify number of replaced Service Item Components.
      ServiceItemComponent2.SETRANGE(Active,FALSE);
      ServiceItemComponent2.SETRANGE("Parent Service Item No.",ServiceItemComponent."Parent Service Item No.");
      ServiceItemComponent2.SETRANGE("From Line No.",ServiceItemComponent."Line No.");
      Assert.AreEqual(
        NumberofLinesReplaced,
        ServiceItemComponent2.COUNT,
        STRSUBSTNO(
          ServiceItemReplacedErr,ServiceItemComponent.TABLECAPTION,
          NumberofLinesReplaced,ServiceItemComponent.FIELDCAPTION("Parent Service Item No."),
          ServiceItemComponent."Parent Service Item No.",ServiceItemComponent.FIELDCAPTION("Line No."),
          ServiceItemComponent."Line No."));
    END;

    LOCAL PROCEDURE VerifyServLineWithServShptLine@52(ServiceLine@1000 : Record 5902);
    VAR
      ServiceShipmentLine@1001 : Record 5991;
    BEGIN
      // Verify that the values in the Service Line flow correctly as the values in the Service Shipment Line after Posting.
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
      ServiceShipmentLine.FINDFIRST;
      ServiceShipmentLine.TESTFIELD(Type,ServiceLine.Type);
      ServiceShipmentLine.TESTFIELD("No.",ServiceLine."No.");
      ServiceShipmentLine.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyServiceDocumentLogEntry@4(OrderNo@1000 : Code[20];DocumentType@1003 : Option;EventNo@1002 : Integer);
    VAR
      ServiceDocumentLog@1001 : Record 5912;
    BEGIN
      // Verify Service Document Log entry contains the Event No. that corresponds to the event that occured due to a certain action.
      ServiceDocumentLog.SETRANGE("Document Type",DocumentType);
      ServiceDocumentLog.SETRANGE("Document No.",OrderNo);
      ServiceDocumentLog.FINDFIRST;
      ServiceDocumentLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyServiceItemLogEntry@63(ServiceItemNo@1000 : Code[20];EventNo@1002 : Integer);
    VAR
      ServiceItemLog@1001 : Record 5942;
    BEGIN
      // Verify Service Item Log entry contains the Event No. that corresponds to the event that occured due to a certain action.
      ServiceItemLog.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceItemLog.FINDLAST;
      ServiceItemLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyTroubleshootingAssignment@123(ServiceItem@1000 : Record 5940;TroubleshootingLineNo@1004 : Code[20]);
    VAR
      ServiceItemCard@1002 : TestPage 5980;
      Troubleshooting@1001 : TestPage 5990;
    BEGIN
      ServiceItemCard.OPENEDIT;
      Troubleshooting.TRAP;
      ServiceItemCard.GOTORECORD(ServiceItem);
      ServiceItemCard."<Page Troubleshooting>".INVOKE;
      Troubleshooting.FILTER.SETFILTER("No.",TroubleshootingLineNo);
      Assert.AreEqual(TroubleshootingLineNo,Troubleshooting."No.".VALUE,'Troubleshooting');
    END;

    LOCAL PROCEDURE VerifyValueEntry@141(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ValueEntry@1004 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Item No.",ItemNo);
      ValueEntry.TESTFIELD("Valued Quantity",-Quantity);
      ValueEntry.TESTFIELD("Invoiced Quantity",-Quantity);
    END;

    LOCAL PROCEDURE VerifyServiceItemCreation@102(No@1000 : Code[20]);
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceItemCard@1003 : TestPage 5980;
    BEGIN
      ServiceItemCard.OPENVIEW;
      ServiceItemCard.FILTER.SETFILTER("No.",No);
      ServiceItem.GET(No);
      ServiceItemCard."Item No.".ASSERTEQUALS(ServiceItem."Item No.");
    END;

    LOCAL PROCEDURE VerifyServiceItemValues@98(No@1002 : Code[20]);
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceItemCard@1000 : TestPage 5980;
    BEGIN
      ServiceItemCard.OPENVIEW;
      ServiceItemCard.FILTER.SETFILTER("No.",No);
      ServiceItem.GET(No);
      ServiceItemCard."Item No.".ASSERTEQUALS(ServiceItem."Item No.");
      ServiceItemCard.Priority.ASSERTEQUALS(ServiceItem.Priority);
      ServiceItemCard."Sales Unit Price".ASSERTEQUALS(ServiceItem."Sales Unit Price");
      ServiceItemCard."Service Item Group Code".ASSERTEQUALS(ServiceItem."Service Item Group Code");
    END;

    LOCAL PROCEDURE VerifyPostingDateOnItemLedgerEntry@128(ItemNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyCustomerNoAndStatusOnServiceItem@132(ItemNo@1001 : Code[20];ExpectedCustomerNo@1002 : Code[20];ExpectedStatus@1003 : Option);
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      WITH ServiceItem DO BEGIN
        FindServiceItemByItemNo(ServiceItem,ItemNo);
        Assert.AreEqual(ExpectedCustomerNo,"Customer No.",FIELDCAPTION("Customer No."));
        Assert.AreEqual(ExpectedStatus,Status,FIELDCAPTION(Status));
      END;
    END;

    LOCAL PROCEDURE VerifySalesAmountOnItemLedgerEntry@135(ItemJournalLine@1000 : Record 83);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Posting Date",ItemJournalLine."Posting Date");
      ItemLedgerEntry.SETRANGE("Item No.",ItemJournalLine."Item No.");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Sales Amount (Actual)");
      ItemLedgerEntry.TESTFIELD("Sales Amount (Actual)",ItemJournalLine.Amount);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm as TRUE.
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@27(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      // Confirm as FALSE.
      Reply := FALSE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@8(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the first option of the string menu.
      Choice := 1;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandlerForNew@72(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the second option of the string menu.
      Choice := 2;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@9(MessageHandler@1000 : Text[1024]);
    BEGIN
      // Handle message that are generated.
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerLookupOK@29(VAR ServiceItemComponentList@1000 : Page 5986;VAR Response@1001 : Action);
    VAR
      ServiceItemComponent@1002 : Record 5941;
    BEGIN
      // Modal form handler. Return Action as LookupOK for first record found.
      ServiceItemComponent.SETRANGE("Parent Service Item No.",ServiceItemNoForComponent);
      ServiceItemComponent.FINDFIRST;
      ServiceItemComponentList.SETRECORD(ServiceItemComponent);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormItemReplacement@55(VAR ServiceItemReplacement@1000 : Page 5985;VAR Response@1001 : Action);
    BEGIN
      ServiceItemReplacement.SetParameters('',SerialNo,CopyComponentsFrom,Replacement);
      Response := ACTION::OK;
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceESConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := (Question = ExpectedConfirmQst);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingForAssignAndSelectPageHandler@105(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      AssignValueForTracking@1002 : Variant;
      AssignedValue@1001 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,AssistEdit';
    BEGIN
      LibraryVariableStorage.Dequeue(AssignValueForTracking);
      AssignedValue := AssignValueForTracking;
      CASE AssignedValue OF
        AssignedValue::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        AssignedValue::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        AssignedValue::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        AssignedValue::AssistEdit:
          ItemTrackingLines."Lot No.".ASSISTEDIT;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@109(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@115(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesPageHandler@118(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesWithShipmentPageHandler@148(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      DocumentType@1001 : 'Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos';
    BEGIN
      PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(DocumentType::"Posted Shipments"));
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesWithReceiptPageHandler@180(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(DocumentType::"Posted Receipts");
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Service] [Service Item]

      Unsupported version tags:
      NA: Unable to Compile

      Test for CRM Service Items:
        1. Test handling of Service Items created - manually, from the service order or automatically when shipping sold items.
        2. Test assignment of Troubleshooting directly to a Service Item, to an Item linked to a Service Item and to a Service Item Group.
        3. Test the creation of the Service Item Component List for Service Items.
        4. Test Service Item Statistics for Service Items.
        5. Test the detailed account of Service Item Transactions by Time Intervals in the Service Item Trendscape window.
        6. Test that the events that happened to Service Items are logged in the Service Item Log.
        7. Test the list of Contracts which include selected Service Item using the corresponding function in the Related
           Information menu.
        8. Test the list of service orders and shipments which include selected service item using the corresponding functions in the
           Related Information menu.
        9. Test calculation of Default Contract Value of service items in the Contract Value Calc. Method field in Service Setup.
       10. Test Service Item Log on create and Rename of Service Item.
       11. Test Service Document Log after Creation and Posting of Service Invoice.
       12. Test Service Document Log after Creation and Posting of Service Credit Memo.
       13. Test Service Document Log after Creation of Service Quote.
       14. Test Item Ledger Entry and Value Entry after Posting Service Order with Replace Component and New Component.
       15. Test Value Entry after Posting Sales Invoice with Item having assigned Skill Code.
       16. Test the creation of Service Order.
       17. Test The Service Item Creation by Sales Order.
       18. Test Service Line after Service Item replacement with Copy Components from Item BOM.
       19. Test Service Item and Its components after Posting Service Order with Copy Components from Item BOM.
       20. Test Service Line after Service Item replacement with Copy Components from Old Service Item.
       21. Test Service Line after Service Item replacement with Copy Components from Old Serv.Item w/o Serial No.
       22. Test Service Item and Its components after Posting Service Order with Copy Components from Old Serv.Item w/o Serial No.
       23. Test the report Delete Service Document Log with different options.
       24. Test create Service Item and verify that the Service Item Created.
       25. Test create Service Item and assign Skill Code of Item and Service Item Group Code to the Service Item and verify that
           Service Item values are populated.
       26. Test Service Item not created in Service Item Table after posting Item Journal.
       27. Test Service Item Status as Installed in Service Item Table After Posting Sales Order.
       28. Test Service Item not exist in Service Item Table After posting Sales Return Order.
       29. Test Service Item Status as Installed in Service Item Table when Sales Order is posted after Sales Return Order.
       30. Check that programm does not populate any error Message with validate of the Variant Code in an existing Component Service Item line.
       31. Test Sales Amount on Item Ledger Entry When Lot no. on Item Tracking Lines Selected with Select Entries Option.
       32. Test Sales Amount on Item Ledger Entry When Lot no. on Item Tracking Lines Selected with Assist Edit.
       33. Test that Only 1 Service Item can be existed in Service Items List with the same Serial No. after post Sales Order with Serial No.
       34. Verifying that Line Discount and prices are correctly populated on Sales Return Order Line when using "Get Posted Document Lines to Reverse".
       35. Verifying that Line Discount and prices are correctly populated on Purchase Return Order Line when using "Get Posted Document Lines to Reverse".
       36. Verify "VAT Identifier" is correctly copied when use Copy Posted Sales Shipment
       37. Verify "VAT Identifier" is correctly copied when use Copy Posted Purchase Receipt

      TFS_TS_ID = 21726
      Cover Test cases:
        TC0098 TFS_TC_ID=11970 and 31771
        TC0099 TFS_TC_ID=11971 and 31772
        TC0100 TFS_TC_ID=11972 and 31773
        TC0101 TFS_TC_ID=11973 and 31774
        TC0102 TFS_TC_ID=11974 and 31775
        TC0103 TFS_TC_ID=11975 and 31776
        TC0104 TFS_TC_ID=11976 and 31777
        TC0105 TFS_TC_ID=11977 and 31778
        TC0106 TFS_TC_ID=11978 and 31779

      TFS_TS_ID = 167035
      Covered Test cases:
        TFS_TC_ID=141398
        TFS_TC_ID=141400

      TFS_TS_ID = 168064
      Covered Test cases:
        TFS_TC_ID=139847
        TFS_TC_ID=139849

      TFS_TS_ID = 172910, 172911
      Cover Test cases:
       TFS_TC_ID=141406

      TFS_TS_ID = 244859
      Covers Test cases:
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      --------------------------------------------------------------------------------------------------
      DeleteServiceDocumentLog, DeletedOnlyTrueCurrentOrder, DeletedOnlyTruePostedOrder           129095

      TFS_TS_ID = 245882
      Covers Test cases:
      ----------------------------------------------------------------
      Test Function Name                                        TFS ID
      ----------------------------------------------------------------
      CreateServiceItemManual, CreateServiceItemAssignSkill     139846

      BUG_ID = 295326
      Covers Test cases:
      -------------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      -------------------------------------------------------------------------------------------------------
      ServiceItemAfterPostingItemJournal,ServiceItemAfterPostingSalesorder,
      ServiceItemAfterPostingSalesReturnorder,ServiceItemWhenSalesOrderPostedAfterSalesReturnOrder  299082

      BUG_ID = 326143
      -------------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      -------------------------------------------------------------------------------------------------------
      CheckVarintCodeValidation

      BUG_ID = 331302
      -------------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      -------------------------------------------------------------------------------------------------------
      ItemJournalTrackingLinesWithSelectEntries,ItemJournalTrackingLinesWithAssistEdit               331303

      BUG_ID = 6929
      -------------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      -------------------------------------------------------------------------------------------------------
      TestUniqueSerialNoInServItemListWhenSalesMutipleItems

      BUG ID 56865
      -------------------------------------------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------------------------------------------
      CheckValuesOnSalesReturnOrderLine, CheckValuesOnPurchaseReturnOrderLine()

      VATIdentifierWhenCopySalesShipment,
      VATIdentifierWhenCopyPurchReceipt                                                             109048
    }
    END.
  }
}

