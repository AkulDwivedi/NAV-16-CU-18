OBJECT Codeunit 143004 Service Tax Verify
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500000 : Codeunit 130000;
      AccBalanceErr@1500010 : TextConst 'ENU=Balance on %1 account is incorrect.';
      AmountErr@1500008 : TextConst 'ENU=The amount is incorrect in %1.';
      EntriesCountErr@1500009 : TextConst 'ENU=The number of entries posted into the table %1 is incorrect.';
      EntryDetailsValueErr@1530003 : TextConst 'ENU=Value in %1 field is incorrect in Service Tax Entry Details.';
      FullServiceTaxBalanceErr@1500019 : TextConst 'ENU=Full tax balance is not correct in %1.';
      GLEntryCountErr@1500002 : TextConst 'ENU=The number of posted G/L Entries is incorrect for the document No. %1.';
      GLEntryDetailedErr@1500006 : TextConst 'ENU=There are no GL Entries within the specified filter: Document No. %1,GLAccount %2, Amount %3';
      GLEntryErr@1500005 : TextConst 'ENU=There should be no G/L Entry within the filter %1.';
      InitialRemCreditErr@1500022 : TextConst 'ENU=%1 should be equal to %2.';
      NoUnappliedEntriesErr@1500018 : TextConst 'ENU=There should be unapplied Detailed Vendor Ledger Entries.';
      RemainingCreditBalErr@1500012 : TextConst 'ENU=Incorrect balance on service tax entry details FullRemainingCredit';
      RevChargeRemCrBalErr@1500003 : TextConst 'ENU=Incorrect balance on service tax entry details FullRevChargeRemainingCredit';
      ReverseServiceTaxHelper@1500011 : Codeunit 143006;
      ReverseChargeType@1500001 : ' ,Standard,GTA';
      ServiceTaxBalanceErr@1500020 : TextConst 'ENU=Incorrect balance on service tax entry details FullServiceTax';
      ServiceTaxDetailsErr@1500007 : TextConst 'ENU=The %1 is incorrect in %2 entry no. %3.';
      ServiceTaxFieldBalanceErr@1500016 : TextConst 'ENU=Balance on the field %1 is not correct in %2.';
      ServiceTaxEntryDtldStatusErr@1500014 : TextConst 'ENU=Status on the field %1 is not correct in Serv. Tax Entry Details.';
      ServiceTypeRevChrgOption@1500013 : ' ,Inward,Outward Stock Transfer,Outward Input Service,Outward';
      UnexpectedVendLedgEntryOpenErr@1500004 : TextConst 'ENU=The value for the field Open in VendorLedger Entry table is incorrect.';
      UnappliedEntriesCountErr@1500021 : TextConst 'ENU=Expected same number of unapplied entries.';
      TooBigInvoiceRoundingErr@1500015 : TextConst 'ENU=Invoice Rounding should be close to Service Tax Rounding Presicion.';
      SBCBalanceErr@1500017 : TextConst 'ENU=Incorrect balance on service tax entry details FullServiceTaxSBC';
      KKCBalanceErr@1500023 : TextConst 'ENU=Incorrect balance on service tax entry details KKCess';
      KKCRemainingCreditBalErr@1500024 : TextConst 'ENU=Incorrect balance on service tax entry details KKC FullRemainingCredit';
      KKCRevChargeRemCrBalErr@1500025 : TextConst 'ENU=Incorrect balance on service tax entry details KKCFullRevChargeRemainingCredit';
      FullKKCBalanceErr@1500026 : TextConst 'ENU=Full KKC balance is not correct';
      FullSBCBalanceErr@1500027 : TextConst 'ENU=Full SBC balance is not correct';

    PROCEDURE AccountBalance@1500058(AccountNo@1500000 : Code[20];ExpectedBalance@1500001 : Decimal);
    VAR
      GLAccount@1500002 : Record 15;
    BEGIN
      GLAccount.GET(AccountNo);
      GLAccount.CALCFIELDS(Balance);
      Assert.AreEqual(ExpectedBalance,GLAccount.Balance,STRSUBSTNO(AccBalanceErr,GLAccount."No."));
    END;

    PROCEDURE AccountBalanceByDocNo@1500078(GLAccountNo@1500000 : Code[20];DocumentNo@1500003 : Code[20];ExpectedBalance@1500001 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
      GLSetup@1500006 : Record 98;
      ActualBalance@1500004 : Decimal;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);

      IF GLEntry.FINDSET THEN
        REPEAT
          ActualBalance += GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;

      GLSetup.GET;
      Assert.AreNearlyEqual(
        ExpectedBalance,ActualBalance,GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AccBalanceErr,GLAccountNo));
    END;

    PROCEDURE AdvPaymentOnlineAppGLBalance@1500067(RevChargeType@1500003 : Option;ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal;PoT@1500004 : Boolean);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        GLBalanceRevCharge(ServiceTaxSetup,Amount)
      ELSE
        IF PoT THEN
          STRecInterimAccBalance(ServiceTaxSetup,Amount)
        ELSE
          GLBalanceReceivablesOnly(ServiceTaxSetup,Amount)
    END;

    PROCEDURE AdvPaymentOnlineAppSBCKKCGLBalance@1500115(RevChargeType@1500003 : Option;ServiceTaxSetup@1500002 : Record 16472;SBCAmount@1500000 : Decimal;KKCAmount@1500001 : Decimal;PoT@1500004 : Boolean);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN BEGIN
        GLSBCBalanceRevCharge(ServiceTaxSetup,SBCAmount);
        GLKKCBalanceRevCharge(ServiceTaxSetup,KKCAmount);
      END ELSE
        IF PoT THEN BEGIN
          SBCRecInterimAccBalance(ServiceTaxSetup,SBCAmount);
          KKCRecInterimAccBalance(ServiceTaxSetup,KKCAmount);
        END ELSE BEGIN
          GLSBCBalanceReceivablesOnly(ServiceTaxSetup,SBCAmount);
          GLKKCBalanceReceivablesOnly(ServiceTaxSetup,KKCAmount);
        END;
    END;

    PROCEDURE AdvPmtGLBalance@1500005(ServiceTaxSetup@1500000 : Record 16472;ServiceTaxAmount@1500001 : Decimal;CurrentReverseChargeType@1500002 : Option);
    BEGIN
      IF CurrentReverseChargeType = ReverseChargeType::" " THEN
        GLBalanceReceivablesOnly(ServiceTaxSetup,ServiceTaxAmount)
      ELSE
        GLBalanceRevCharge(ServiceTaxSetup,ServiceTaxAmount);
    END;

    PROCEDURE AppliedDocServiceTax@1500086(AdvPmtGenJnlLine@1500007 : Record 81;InvoiceGenJnlLine@1500003 : Record 81;UseNearlyEqual@1500009 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      AdvPmtBaseAmount@1500012 : Decimal;
      AdvPmtRevChrgAmount@1500010 : Decimal;
      AdvPmtPoTAmount@1500008 : Decimal;
      InvoiceBaseAmount@1500006 : Decimal;
      InvoiceRevChrgAmount@1500005 : Decimal;
      InvoicePoTAmount@1500004 : Decimal;
      Percentage@1500001 : Integer;
      ApplnRatio@1500000 : Decimal;
      PotInvSBCKKCAmount@1500013 : Decimal;
      PotAdvSBCKKCAmount@1500014 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJnlLine."Service Tax Group Code",AdvPmtGenJnlLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmounts(
        AdvPmtGenJnlLine,AdvPmtBaseAmount,AdvPmtPoTAmount,AdvPmtRevChrgAmount,Percentage,ServiceTaxSetup);
      PotAdvSBCKKCAmount :=
        ReverseServiceTaxHelper.CalculatePoTSBCandKKCAmount(AdvPmtBaseAmount,(100 - Percentage) / 100,ServiceTaxSetup);
      ReverseServiceTaxHelper.CalcSplitAmounts(
        InvoiceGenJnlLine,InvoiceBaseAmount,InvoicePoTAmount,InvoiceRevChrgAmount,Percentage,ServiceTaxSetup);
      PotInvSBCKKCAmount :=
        ReverseServiceTaxHelper.CalculatePoTSBCandKKCAmount(InvoiceBaseAmount,(100 - Percentage) / 100,ServiceTaxSetup);

      IF InvoiceGenJnlLine.Amount > AdvPmtGenJnlLine.Amount THEN BEGIN
        ApplnRatio := (AdvPmtBaseAmount + AdvPmtPoTAmount) / (InvoiceBaseAmount + InvoicePoTAmount);
        IF UseNearlyEqual THEN
          STRecAccBalanceNearly(
            ServiceTaxSetup,
            ReverseServiceTaxHelper.RoundServTax(
              (InvoicePoTAmount - PotInvSBCKKCAmount) * (1 - ApplnRatio) + (AdvPmtPoTAmount - PotAdvSBCKKCAmount)))
        ELSE
          STRecAccBalance(
            ServiceTaxSetup,
            ReverseServiceTaxHelper.RoundServTax(
              (InvoicePoTAmount - PotInvSBCKKCAmount) * (1 - ApplnRatio) + (AdvPmtPoTAmount - PotAdvSBCKKCAmount)));

        STRecInterimAccBalance(
          ServiceTaxSetup,
          ReverseServiceTaxHelper.RoundServTax(
            (InvoiceRevChrgAmount + PotInvSBCKKCAmount) * (1 - ApplnRatio) + (AdvPmtRevChrgAmount + PotAdvSBCKKCAmount)));
        STPayAccBalance(ServiceTaxSetup,ReverseServiceTaxHelper.RoundServTax(-AdvPmtRevChrgAmount - PotAdvSBCKKCAmount));
        STPayInterimAccBalance(
          ServiceTaxSetup,
          ReverseServiceTaxHelper.RoundServTax((-InvoiceRevChrgAmount - PotInvSBCKKCAmount) * (1 - ApplnRatio)));
      END;

      IF AdvPmtPoTAmount <> 0 THEN BEGIN
        PoTServTaxEntry(AdvPmtGenJnlLine."Document No.",AdvPmtBaseAmount,Percentage,FALSE,ServiceTaxSetup);
        PoTServTaxEntry(InvoiceGenJnlLine."Document No.",-AdvPmtBaseAmount,Percentage,FALSE,ServiceTaxSetup);
      END;
      AdvPmtRevChrgAmount +=
        ReverseServiceTaxHelper.CalculateKKCess(AdvPmtBaseAmount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateSBC(AdvPmtBaseAmount,ServiceTaxSetup);
      IF AdvPmtRevChrgAmount <> 0 THEN BEGIN
        RevChrgServTaxEntry(AdvPmtGenJnlLine."Document No.",AdvPmtBaseAmount,Percentage,TRUE,ServiceTaxSetup);
        RevChrgServTaxEntry(InvoiceGenJnlLine."Document No.",-AdvPmtBaseAmount,Percentage,TRUE,ServiceTaxSetup);
      END;
    END;

    PROCEDURE CalcRemainingTaxAmount@1500070(LastTransactionNo@1500002 : Integer) RemainingTaxAmount : Decimal;
    VAR
      ServiceTaxEntryDetails@1500000 : Record 16474;
      ServiceTaxEntry@1500001 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Purchase);
      ServiceTaxEntry.SETFILTER("Transaction No.",'>%1',LastTransactionNo);
      ServiceTaxEntry.FINDSET;
      REPEAT
        ServiceTaxEntryDetails.SETCURRENTKEY("Service Tax Entry No.");
        ServiceTaxEntryDetails.SETRANGE("Service Tax Entry No.",ServiceTaxEntry."Entry No.");
        ServiceTaxEntryDetails.CALCSUMS("Service Tax Amount","Service Tax eCess Amount","Service Tax SHE Cess Amount");
        RemainingTaxAmount += ServiceTaxEntryDetails.FullTaxAmount;
      UNTIL ServiceTaxEntry.NEXT = 0;
    END;

    PROCEDURE CalcKKCRemainingAmount@1500124(LastTransactionNo@1500002 : Integer) KKCRemainingAmount : Decimal;
    VAR
      ServiceTaxEntryDetails@1500000 : Record 16474;
      ServiceTaxEntry@1500001 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Purchase);
      ServiceTaxEntry.SETFILTER("Transaction No.",'>%1',LastTransactionNo);
      ServiceTaxEntry.FINDSET;
      REPEAT
        ServiceTaxEntryDetails.SETCURRENTKEY("Service Tax Entry No.");
        ServiceTaxEntryDetails.SETRANGE("Service Tax Entry No.",ServiceTaxEntry."Entry No.");
        ServiceTaxEntryDetails.CALCSUMS("KK Cess Amount");
        KKCRemainingAmount += ServiceTaxEntryDetails.KKCessAmount;
      UNTIL ServiceTaxEntry.NEXT = 0;
    END;

    PROCEDURE CalcServTaxEntryAmounts@1170000005(BaseAmount@1500001 : Decimal;Percentage@1170000000 : Integer;ServTaxSetup@1500004 : Record 16472;VAR SplitBaseAmount@1500007 : Decimal;VAR ServTaxAmount@1500008 : ARRAY [5] OF Decimal;RevChrgPart@1500000 : Boolean);
    VAR
      Factor@1170000006 : Decimal;
    BEGIN
      Factor := (100 - Percentage) / 100;
      ServTaxAmount[1] :=
        ReverseServiceTaxHelper.RoundServTax(Factor * ReverseServiceTaxHelper.CalculateServTax(BaseAmount,ServTaxSetup));
      ServTaxAmount[2] :=
        ReverseServiceTaxHelper.RoundServTax(Factor * ReverseServiceTaxHelper.CalculateECess(BaseAmount,ServTaxSetup));
      ServTaxAmount[3] :=
        ReverseServiceTaxHelper.RoundServTax(Factor * ReverseServiceTaxHelper.CalculateSHECess(BaseAmount,ServTaxSetup));
      ServTaxAmount[4] :=
        ReverseServiceTaxHelper.RoundServTax(Factor * ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServTaxSetup));
      ServTaxAmount[5] :=
        ReverseServiceTaxHelper.RoundServTax(Factor * ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServTaxSetup));

      SplitBaseAmount := ROUND(BaseAmount * Factor);

      IF RevChrgPart THEN BEGIN
        ServTaxAmount[1] := ReverseServiceTaxHelper.CalculateServTax(BaseAmount,ServTaxSetup) - ServTaxAmount[1];
        ServTaxAmount[2] := ReverseServiceTaxHelper.CalculateECess(BaseAmount,ServTaxSetup) - ServTaxAmount[2];
        ServTaxAmount[3] := ReverseServiceTaxHelper.CalculateSHECess(BaseAmount,ServTaxSetup) - ServTaxAmount[3];
        ServTaxAmount[4] := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServTaxSetup) - ServTaxAmount[4];
        ServTaxAmount[5] := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServTaxSetup) - ServTaxAmount[5];
        SplitBaseAmount := BaseAmount - SplitBaseAmount;
      END;
    END;

    LOCAL PROCEDURE CalcSTEntryBalances@1500016(LastTransactionNo@1500000 : Integer;VAR TotalSTEntry@1500002 : Record 16473);
    VAR
      STEntry@1500001 : Record 16473;
    BEGIN
      WITH TotalSTEntry DO BEGIN
        STEntry.COPYFILTERS(TotalSTEntry);
        STEntry.SETFILTER("Transaction No.",'>%1',LastTransactionNo);
        IF STEntry.FINDSET THEN
          REPEAT
            "Service Tax Amount" += STEntry."Service Tax Amount";
            "eCess Amount" += STEntry."eCess Amount";
            "SHE Cess Amount" += STEntry."SHE Cess Amount";
            "KK Cess Amount" += STEntry."KK Cess Amount";
            "Service Tax SBC Amount" += STEntry."Service Tax SBC Amount";
          UNTIL STEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcSTEntryDetailsBalances@1500015(LastTransactionNo@1500000 : Integer;VAR TotalSTEntryDetails@1500003 : Record 16474);
    VAR
      STEntryDetails@1500002 : Record 16474;
    BEGIN
      WITH TotalSTEntryDetails DO BEGIN
        STEntryDetails.COPYFILTERS(TotalSTEntryDetails);
        STEntryDetails.SETFILTER("Transaction No.",'>%1',LastTransactionNo);
        IF STEntryDetails.FINDSET THEN
          REPEAT
            IF NOT (STEntryDetails."Serv. Tax on Advance Payment" AND STEntryDetails."Corrective Application Entry") THEN
              CalcSTEntryDetailsSum(STEntryDetails,TotalSTEntryDetails);
          UNTIL STEntryDetails.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcSTEntryDetailsSum@1500071(STEntryDetails@1500000 : Record 16474;VAR TotalSTEntryDetails@1500001 : Record 16474);
    BEGIN
      WITH TotalSTEntryDetails DO BEGIN
        "Service Tax Group Code" := STEntryDetails."Service Tax Group Code";
        "Posting Date" := STEntryDetails."Posting Date";

        "Base Amount" += STEntryDetails."Base Amount";
        "Service Tax Amount" += STEntryDetails."Service Tax Amount";
        "Service Tax eCess Amount" += STEntryDetails."Service Tax eCess Amount";
        "Service Tax SHE Cess Amount" += STEntryDetails."Service Tax SHE Cess Amount";
        "Service Tax SBC Amount" += STEntryDetails."Service Tax SBC Amount";
        "KK Cess Amount" += STEntryDetails."KK Cess Amount";
        "Remaining Credit" += STEntryDetails."Remaining Credit";
        "Remaining Credit (eCess)" += STEntryDetails."Remaining Credit (eCess)";
        "Remaining Credit (SHECess)" += STEntryDetails."Remaining Credit (SHECess)";
        "Remaining Credit (KK Cess)" += STEntryDetails."Remaining Credit (KK Cess)";
        "Remaining Credit (SBC)" += STEntryDetails."Remaining Credit (SBC)";
        "Rev. Chrg. Remaining Credit" += STEntryDetails."Rev. Chrg. Remaining Credit";
        "Rev. Chrg. Rem. Credit (eCESS)" += STEntryDetails."Rev. Chrg. Rem. Credit (eCESS)";
        "Rev. Chrg. Rem. Cr. (SHECess)" += STEntryDetails."Rev. Chrg. Rem. Cr. (SHECess)";
        "Rev. Chrg. Rem. Credit (KKC)" += STEntryDetails."Rev. Chrg. Rem. Credit (KKC)";
        "Rev. Chrg. Rem. Credit (SBC)" += STEntryDetails."Rev. Chrg. Rem. Credit (SBC)";
      END;
    END;

    PROCEDURE CalcVendLedgEntryRemAmount@1500033(DocumentNo@1500000 : Code[20]) : Decimal;
    VAR
      VendLedgEntry@1500001 : Record 25;
    BEGIN
      FindLastPurchDocument(DocumentNo,VendLedgEntry);
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      EXIT(VendLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE CountGLEntriesNotBalanced@1500068(VAR GLEntry@1500000 : Record 17) : Integer;
    VAR
      TempGLEntry@1500001 : TEMPORARY Record 17;
      NewAccountsCount@1500003 : Integer;
    BEGIN
      // count the number of accounts per application transaction in the dataset which are not balanced (total != 0)

      // use tmpGLEntry as hashset data structure
      NewAccountsCount := 0;
      TempGLEntry.SETCURRENTKEY("G/L Account No.");
      WITH GLEntry DO BEGIN
        FINDSET;
        REPEAT
          // check if acc already exists
          TempGLEntry.SETRANGE("G/L Account No.","G/L Account No.");
          TempGLEntry.SETRANGE("Transaction No.","Transaction No.");
          // if exists increase amount on the same, otherwise add new record
          IF TempGLEntry.FINDFIRST THEN BEGIN
            TempGLEntry.Amount += Amount;
            TempGLEntry.MODIFY;
          END ELSE BEGIN
            NewAccountsCount += 1;
            TempGLEntry.RESET;
            TempGLEntry.INIT;
            TempGLEntry."Entry No." := NewAccountsCount;
            TempGLEntry."Transaction No." := "Transaction No.";
            TempGLEntry."G/L Account No." := "G/L Account No.";
            TempGLEntry.Amount := Amount;
            TempGLEntry.INSERT;
          END;
        UNTIL NEXT = 0;
      END;

      // count all accounts where total amount is <> 0
      TempGLEntry.RESET;
      TempGLEntry.SETFILTER(Amount,'<>%1',0);
      EXIT(TempGLEntry.COUNT);
    END;

    PROCEDURE CountOfServiceTaxEntries@1500145(LastTransactionNo@1540000 : Integer;NoOfServiceTaxEntries@1500001 : Integer;NoOfDetailsServiceTaxEntries@1500002 : Integer);
    VAR
      ServTaxEntry@1500004 : Record 16473;
      ServTaxEntryDetail@1500003 : Record 16474;
      ActualNoOfDetailsServiceTaxEntries@1500000 : Integer;
    BEGIN
      ServTaxEntry.SETFILTER("Transaction No.",'>%1',LastTransactionNo);
      Assert.AreEqual(NoOfServiceTaxEntries,ServTaxEntry.COUNT,STRSUBSTNO(EntriesCountErr,ServTaxEntry.TABLENAME));

      IF ServTaxEntry.FINDSET THEN
        REPEAT
          ServTaxEntryDetail.SETRANGE("Service Tax Entry No.",ServTaxEntry."Entry No.");
          ActualNoOfDetailsServiceTaxEntries += ServTaxEntryDetail.COUNT;
        UNTIL ServTaxEntry.NEXT = 0;
      Assert.AreEqual(
        NoOfDetailsServiceTaxEntries,ActualNoOfDetailsServiceTaxEntries,STRSUBSTNO(EntriesCountErr,ServTaxEntryDetail.TABLENAME));
    END;

    PROCEDURE CountOfUnappliedEntries@1500043(ApplicationTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      UnappliedEntriesCount@1500002 : Integer;
      ApplicationEntriesCount@1500003 : Integer;
    BEGIN
      IF ReverseServiceTaxHelper.GetLastTransactionNo > ApplicationTransactionNo THEN BEGIN
        ServiceTaxEntryDetails.SETFILTER("Transaction No.",'>%1',ApplicationTransactionNo);
        UnappliedEntriesCount := ServiceTaxEntryDetails.COUNT;
      END ELSE BEGIN
        UnappliedEntriesCount := 0;
        ServiceTaxEntryDetails.SETRANGE("Transaction No.",ApplicationTransactionNo);
        IF ServiceTaxEntryDetails.FINDLAST THEN BEGIN
          ServiceTaxEntryDetails.RESET;
          ServiceTaxEntryDetails.SETFILTER("Entry No.",'>%1',ServiceTaxEntryDetails."Entry No.");
          IF ServiceTaxEntryDetails.FINDFIRST THEN BEGIN
            ServiceTaxEntryDetails.SETRANGE("Application No.",ServiceTaxEntryDetails."Application No.");
            UnappliedEntriesCount := ServiceTaxEntryDetails.COUNT;
          END;
        END;
      END;
      ServiceTaxEntryDetails.RESET;
      ServiceTaxEntryDetails.SETRANGE("Transaction No.",ApplicationTransactionNo);
      IF ServiceTaxEntryDetails.FINDFIRST THEN
        IF ServiceTaxEntryDetails.PoT THEN
          ServiceTaxEntryDetails.SETRANGE("Corrective Application Entry",TRUE);
      ApplicationEntriesCount := ServiceTaxEntryDetails.COUNT;
      Assert.AreEqual(ApplicationEntriesCount,UnappliedEntriesCount,UnappliedEntriesCountErr);
    END;

    PROCEDURE DocHasClosedRemCredit@1500055(DocumentNo@1500000 : Code[20]);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,DocumentNo);
      IF ServiceTaxEntryDetails.FINDSET THEN
        REPEAT
          VerifyClosedRemCredit(ServiceTaxEntryDetails);
        UNTIL ServiceTaxEntryDetails.NEXT = 0;
    END;

    LOCAL PROCEDURE DoubleExpectedAmntsSTEntry@1500034(VAR ServTaxEntry@1500009 : Record 16473);
    BEGIN
      ServTaxEntry."Service Tax Amount" += ServTaxEntry."Service Tax Amount";
      ServTaxEntry."eCess Amount" += ServTaxEntry."eCess Amount";
      ServTaxEntry."SHE Cess Amount" += ServTaxEntry."SHE Cess Amount";
      ServTaxEntry."KK Cess Amount" += ServTaxEntry."KK Cess Amount";
      ServTaxEntry."Service Tax SBC Amount" += ServTaxEntry."Service Tax SBC Amount";
    END;

    LOCAL PROCEDURE FindLastPurchDocument@1500096(DocumentNo@1500001 : Code[20];VAR VendorLedgerEntry@1500002 : Record 25);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE GetCreditClosedAmounts@1500074(VAR ServiceTaxAmount@1500000 : ARRAY [3] OF Decimal;CreditClosed@1500003 : Boolean);
    BEGIN
      IF CreditClosed THEN
        CLEAR(ServiceTaxAmount);
    END;

    LOCAL PROCEDURE GetInvoiceRoundingAccNo@1500076(PostingGroup@1500000 : Code[10]) : Code[20];
    VAR
      VendorPostingGroup@1500001 : Record 93;
    BEGIN
      VendorPostingGroup.GET(PostingGroup);
      EXIT(VendorPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE GetPartialPaymentAmounts@1500077(VAR ServiceTaxAmount@1500000 : ARRAY [5] OF Decimal;PartialPaymentFactor@1500003 : Decimal);
    VAR
      I@1500001 : Integer;
    BEGIN
      IF PartialPaymentFactor = 0 THEN
        EXIT;

      FOR I := 1 TO 5 DO
        ServiceTaxAmount[I] := ReverseServiceTaxHelper.RoundServTax(ServiceTaxAmount[I] * PartialPaymentFactor);
    END;

    PROCEDURE GLBalanceReceivablesOnly@1500003(ServiceTaxSetup@1500000 : Record 16472;ServiceTaxAmount@1500001 : Decimal);
    BEGIN
      ServTaxGLAccountsBalance(ServiceTaxSetup,ServiceTaxAmount,0,0,0);
    END;

    PROCEDURE GLKKCBalanceReceivablesOnly@1500004(ServiceTaxSetup@1500000 : Record 16472;KKCAmount@1500001 : Decimal);
    BEGIN
      KKCGLAccountsBalance(ServiceTaxSetup,KKCAmount,0,0,0);
    END;

    PROCEDURE GLSBCBalanceReceivablesOnly@1500091(ServiceTaxSetup@1500000 : Record 16472;SBCAmount@1500001 : Decimal);
    BEGIN
      SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,0,0,0);
    END;

    PROCEDURE GLBalanceRevCharge@1500001(ServiceTaxSetup@1500000 : Record 16472;ServiceTaxAmount@1500001 : Decimal);
    BEGIN
      ServTaxGLAccountsBalance(ServiceTaxSetup,0,ServiceTaxAmount,-ServiceTaxAmount,0);
    END;

    PROCEDURE GLSBCBalanceRevCharge@1500088(ServiceTaxSetup@1500000 : Record 16472;SBCAmount@1500001 : Decimal);
    BEGIN
      SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,0,-SBCAmount,0);
    END;

    PROCEDURE GLKKCBalanceRevCharge@1500092(ServiceTaxSetup@1500000 : Record 16472;KKCAmount@1500001 : Decimal);
    BEGIN
      KKCGLAccountsBalance(ServiceTaxSetup,0,KKCAmount,-KKCAmount,0);
    END;

    PROCEDURE GLBalancesOnPostedPurchaseDoc@1500013(PostingDate@1500008 : Date;PurchaseLine@1500007 : Record 39;PostedPurchaseDoc@1500011 : Code[20];DocumentType@1500000 : Option;RevChargeType@1500001 : Option;PoT@1500002 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
      ServiceTaxBase@1500004 : Decimal;
      ServiceTaxAmount@1500009 : Decimal;
      KKCAmount@1500003 : Decimal;
      SBCAmount@1500005 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PostingDate);
      ServiceTaxBase := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(ServiceTaxBase,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(ServiceTaxBase,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(ServiceTaxBase,ServiceTaxSetup);

      ServTaxEntry(PostedPurchaseDoc,ServiceTaxBase,ServiceTaxSetup);

      PostedPurchDocGLBalance(ServiceTaxSetup,RevChargeType,PoT,ServiceTaxAmount);
      PostedPurchDocGLSBCBalance(ServiceTaxSetup,RevChargeType,PoT,SBCAmount);
      PostedPurchDocGLKKCBalance(ServiceTaxSetup,RevChargeType,PoT,KKCAmount);
    END;

    PROCEDURE GLEntriesCount@1500049(DocType@1500001 : Option;DocNo@1500000 : Code[20];ExpectedCount@1500003 : Integer);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",DocType);
      GLEntry.SETRANGE("Document No.",DocNo);
      Assert.AreEqual(ExpectedCount,CountGLEntriesNotBalanced(GLEntry),STRSUBSTNO(GLEntryCountErr,DocNo));
    END;

    PROCEDURE GLEntriesForSTPmtEntries@1500098(PurchLineAmount@1500005 : Decimal;DocumentType@1500006 : Option;VAR BaseAmount@1500003 : Decimal;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500001 : Code[20];ServiceTypeRevChrg@1500000 : Option);
    VAR
      Amount@1500004 : Decimal;
      SBCAmount@1500007 : Decimal;
      KKCAmount@1500008 : Decimal;
    BEGIN
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchLineAmount,DocumentType);
      Amount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);

      GLEntriesForSTPmtEntriesForAmt(Amount,ServiceTaxSetup,PostedPaymentDocNo,ServiceTypeRevChrg);
      GLEntriesForSTSBCKKCPmtEntriesForAmt(SBCAmount,KKCAmount,ServiceTaxSetup,PostedPaymentDocNo,ServiceTypeRevChrg);
    END;

    PROCEDURE GLEntriesForSTPmtEntriesForAmt@1500011(TotalServTaxAmount@1500005 : Decimal;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500001 : Code[20];ServiceTypeRevChrg@1500000 : Option);
    VAR
      GLEntry@1500008 : Record 17;
      AccountNo@1500007 : Code[20];
    BEGIN
      AccountNo := ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,-TotalServTaxAmount);

      IF ServiceTypeRevChrg <> ServiceTypeRevChrgOption::Inward THEN
        AccountNo := ReverseServiceTaxHelper.GetServTaxExpenseAcc(ServiceTaxSetup)
      ELSE
        AccountNo := ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,TotalServTaxAmount);

      AccountNo := ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,TotalServTaxAmount);

      GLEntriesCount(GLEntry."Document Type"::" ",PostedPaymentDocNo,8);
    END;

    PROCEDURE GLEntriesForSTSBCKKCPmtEntriesForAmt@1500099(TotalSBCAmount@1500005 : Decimal;TotalKKCAmount@1500003 : Decimal;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500001 : Code[20];ServiceTypeRevChrg@1500000 : Option);
    VAR
      AccountNo@1500007 : Code[20];
    BEGIN
      AccountNo := ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,TotalSBCAmount);

      AccountNo := ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,-TotalKKCAmount);

      IF ServiceTypeRevChrg <> ServiceTypeRevChrgOption::Inward THEN
        AccountNo := ReverseServiceTaxHelper.GetKKCExpenseAcc(ServiceTaxSetup)
      ELSE
        AccountNo := ReverseServiceTaxHelper.GetKKCRecAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,TotalKKCAmount);

      AccountNo := ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup);
      GLEntryWithRounding(PostedPaymentDocNo,AccountNo,TotalKKCAmount);
    END;

    PROCEDURE GLEntry@1500040(DocumentNo@1500003 : Code[20];GLAccountNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
      GLSetup@1500004 : Record 98;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDLAST;
      IF Amount = 0 THEN
        Assert.AreEqual(Amount,GLEntry.Amount,STRSUBSTNO(AmountErr,GLEntry.TABLENAME))
      ELSE BEGIN
        GLSetup.GET;
        Assert.AreNearlyEqual(
          Amount,GLEntry.Amount,GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,GLEntry.TABLENAME));
      END;
    END;

    PROCEDURE GLEntryByAmount@1500029(DocumentNo@1500003 : Code[20];GLAccountNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETFILTER(Amount,'%1',ReverseServiceTaxHelper.RoundServTax(Amount));
      Assert.IsTrue(GLEntry.FINDFIRST,STRSUBSTNO(GLEntryDetailedErr,DocumentNo,GLAccountNo,Amount));
    END;

    PROCEDURE GLEntryDoesNotExist@1500053(DocumentNo@1500003 : Code[20];GLAccountNo@1500000 : Code[20]);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.IsTrue(GLEntry.ISEMPTY,STRSUBSTNO(GLEntryErr,GLEntry.GETFILTERS))
    END;

    PROCEDURE GLEntryWithRounding@1500008(DocumentNo@1500003 : Code[20];GLAccountNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDLAST;
      Assert.AreEqual(ReverseServiceTaxHelper.RoundServTax(Amount),GLEntry.Amount,STRSUBSTNO(AmountErr,GLEntry.TABLENAME));
    END;

    PROCEDURE InitialRemainingCredit@1500044(LastTransactionNo@1500000 : Integer;ApplicationTransactionNo@1500002 : Integer);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      WITH ServiceTaxEntryDetails DO BEGIN
        SETFILTER("Transaction No.",'>%1&<%2',LastTransactionNo,ApplicationTransactionNo);
        SETRANGE("Corrective Application Entry",FALSE);
        Assert.IsTrue(COUNT > 0,'No entries to check Initial Remaining Credit');
        IF FINDSET THEN
          REPEAT
            Assert.AreEqual("Service Tax Amount","Remaining Credit",
              STRSUBSTNO(InitialRemCreditErr,FIELDCAPTION("Remaining Credit"),FIELDCAPTION("Service Tax Amount")));
            Assert.AreEqual("Service Tax eCess Amount","Remaining Credit (eCess)",
              STRSUBSTNO(InitialRemCreditErr,FIELDCAPTION("Remaining Credit (eCess)"),FIELDCAPTION("Service Tax eCess Amount")));
            Assert.AreEqual("Service Tax SHE Cess Amount","Remaining Credit (SHECess)",
              STRSUBSTNO(InitialRemCreditErr,FIELDCAPTION("Remaining Credit (SHECess)"),FIELDCAPTION("Service Tax SHE Cess Amount")));
            Assert.AreEqual("KK Cess Amount","Remaining Credit (KK Cess)",
              STRSUBSTNO(InitialRemCreditErr,FIELDCAPTION("Remaining Credit (KK Cess)"),FIELDCAPTION("KK Cess Amount")));
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE PostedAdvPayment@1500031(GenJournalLine@1500008 : Record 81;TypeOfReverseCharge@1500000 : Option;PoT@1500007 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      BaseAmount@1500001 : Decimal;
      TaxAmount@1500006 : Decimal;
      RevChargeCreditClosed@1500004 : Boolean;
      RealCreditClosed@1500005 : Boolean;
      SBCandKKcAmount@1500003 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      SBCandKKcAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      PostedAdvPaymentGLBalance(ServiceTaxSetup,GenJournalLine."Document No.",TypeOfReverseCharge,PoT,TaxAmount);

      VendorAndServicesEntries(GenJournalLine."Document No.",GenJournalLine."Account No.",
        ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),TRUE,-
        BaseAmount,-(TaxAmount + SBCandKKcAmount),
        TypeOfReverseCharge,FALSE);
      IF NOT PoT THEN
        ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
          BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      // Service Tax Entry is created.
      ServTaxEntry(GenJournalLine."Document No.",BaseAmount,ServiceTaxSetup);

      // If PoT or Reverse Charge, then Service Tax Entry Details is created
      IF PoT OR (TypeOfReverseCharge <> ReverseChargeType::" ") THEN BEGIN
        RevChargeCreditClosed := PoT;
        RealCreditClosed := NOT PoT;
        ServTaxEntryDetails(GenJournalLine."Document No.",BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
      END;
    END;

    PROCEDURE PostedAdvPaymentBackCalc@1500101(GenJournalLine@1500008 : Record 81;TypeOfReverseCharge@1500000 : Option;PoT@1500007 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      BaseAmount@1500001 : Decimal;
      TaxAmount@1500006 : Decimal;
      RevChargeCreditClosed@1500004 : Boolean;
      RealCreditClosed@1500005 : Boolean;
      SBCAmount@1500003 : Decimal;
      KKCAmount@1500009 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      PostedAdvPaymentGLBalance(ServiceTaxSetup,GenJournalLine."Document No.",TypeOfReverseCharge,PoT,TaxAmount);
      ReverseServiceTaxHelper.GetKKCAndSBCmountFromAdvPmt(
        BaseAmount,SBCAmount,KKCAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      VendorAndServicesEntries(
        GenJournalLine."Document No.",GenJournalLine."Account No.",
        ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),TRUE,-
        BaseAmount,-(TaxAmount + SBCAmount + KKCAmount),
        TypeOfReverseCharge,FALSE);
      IF NOT PoT THEN
        ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
          BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      // Service Tax Entry is created.
      ServTaxEntry(GenJournalLine."Document No.",BaseAmount,ServiceTaxSetup);

      // If PoT or Reverse Charge, then Service Tax Entry Details is created
      IF PoT OR (TypeOfReverseCharge <> ReverseChargeType::" ") THEN BEGIN
        RevChargeCreditClosed := PoT;
        RealCreditClosed := NOT PoT;
        ServTaxEntryDetails(GenJournalLine."Document No.",BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
      END;
    END;

    LOCAL PROCEDURE PostedAdvPaymentGLBalance@1500026(ServiceTaxSetup@1500002 : Record 16472;PostedDocNo@1500001 : Code[20];RevChargeType@1500000 : Option;PoT@1500004 : Boolean;Amount@1500003 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        ServTaxGLAccountsBalance(ServiceTaxSetup,0,Amount,-Amount,0)
      ELSE
        IF PoT THEN
          ServTaxGLAccountsBalance(ServiceTaxSetup,Amount,-Amount,0,0)
        ELSE
          STaxGLEntriesDoNotExist(ServiceTaxSetup,PostedDocNo)
    END;

    PROCEDURE PostedAdvPmtAndInvGLBalance@1500038(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;Amount@1500000 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        ServTaxGLAccountsBalance(ServiceTaxSetup,0,2 * Amount,-Amount,-Amount)
      ELSE
        IF PoT THEN
          ServTaxGLAccountsBalance(ServiceTaxSetup,2 * Amount,-Amount,0,0)
        ELSE
          ServTaxGLAccountsBalance(ServiceTaxSetup,0,Amount,0,0)
    END;

    PROCEDURE PostedSBCKKCAdvPmtAndInvGLBalance@1500106(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;SBCAmount@1500000 : Decimal;KKCAmount@1500002 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN BEGIN
        SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,SBCAmount,-SBCAmount,-SBCAmount);
        KKCGLAccountsBalance(ServiceTaxSetup,0,2 * KKCAmount,-KKCAmount,-KKCAmount);
      END ELSE
        IF PoT THEN BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,2 * SBCAmount,-SBCAmount,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,2 * KKCAmount,-KKCAmount,0,0);
        END ELSE BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,0,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,0,KKCAmount,0,0);
        END;
    END;

    PROCEDURE PostedAdvPmtAndInvGLBalPartial@1500054(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;DocumentType@1500007 : Option;PoT@1500004 : Boolean;AdvPmtAmount@1500000 : Decimal;InvAmount@1500002 : Decimal);
    VAR
      AdvPmtServTaxAmount@1500006 : Decimal;
      InvServTaxAmount@1500005 : Decimal;
      AdvPmtSBCAmount@1500008 : Decimal;
      InvSBCAmount@1500009 : Decimal;
      AdvPmtKKCAmount@1500010 : Decimal;
      InvKKCAmount@1500011 : Decimal;
    BEGIN
      AdvPmtServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,AdvPmtAmount,DocumentType);
      AdvPmtSBCAmount := ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,AdvPmtAmount,DocumentType);
      AdvPmtKKCAmount := ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,AdvPmtAmount,DocumentType);
      InvServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,InvAmount,DocumentType);
      InvSBCAmount := ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,InvAmount,DocumentType);
      InvKKCAmount := ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,InvAmount,DocumentType);

      IF RevChargeType <> ReverseChargeType::" " THEN BEGIN
        ServTaxGLAccountsBalance(ServiceTaxSetup,0,AdvPmtServTaxAmount + InvServTaxAmount,-AdvPmtServTaxAmount,-InvServTaxAmount);
        SBCGLAccountsBalance(ServiceTaxSetup,InvSBCAmount,AdvPmtSBCAmount,-AdvPmtSBCAmount,-InvSBCAmount);
        KKCGLAccountsBalance(ServiceTaxSetup,0,AdvPmtKKCAmount + InvKKCAmount,-AdvPmtKKCAmount,-InvKKCAmount);
      END ELSE
        IF PoT THEN BEGIN
          ServTaxGLAccountsBalance(ServiceTaxSetup,AdvPmtServTaxAmount + InvServTaxAmount,-AdvPmtServTaxAmount,0,0);
          SBCGLAccountsBalance(ServiceTaxSetup,AdvPmtSBCAmount + InvSBCAmount,-AdvPmtSBCAmount,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,AdvPmtKKCAmount + InvKKCAmount,-AdvPmtKKCAmount,0,0);
        END ELSE BEGIN
          ServTaxGLAccountsBalance(ServiceTaxSetup,0,InvServTaxAmount,0,0);
          SBCGLAccountsBalance(ServiceTaxSetup,InvSBCAmount,0,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,0,InvKKCAmount,0,0);
        END;
    END;

    PROCEDURE PostedInvoiceRounding@1500075(PostingGroup@1500000 : Code[10];LastTransactionNo@1500001 : Integer);
    VAR
      GLEntry@1500002 : Record 17;
      GLSetup@1500003 : Record 98;
    BEGIN
      GLSetup.GET;
      WITH GLEntry DO BEGIN
        SETFILTER("Transaction No.",'>%1',LastTransactionNo);
        SETRANGE("G/L Account No.",GetInvoiceRoundingAccNo(PostingGroup));
        IF FINDSET THEN
          REPEAT
            Assert.AreNearlyEqual(0,Amount,GLSetup."Service Tax Rounding Precision",TooBigInvoiceRoundingErr);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE PostedPmtAndInvGLBalPartial@1500062(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;InvoiceTaxAmount@1500000 : Decimal;PaymentTaxAmount@1500002 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        ServTaxGLAccountsBalance(ServiceTaxSetup,0,InvoiceTaxAmount,-PaymentTaxAmount,PaymentTaxAmount - InvoiceTaxAmount)
      ELSE
        IF PoT THEN
          ServTaxGLAccountsBalance(ServiceTaxSetup,InvoiceTaxAmount,0,0,0)
        ELSE
          ServTaxGLAccountsBalance(ServiceTaxSetup,PaymentTaxAmount,InvoiceTaxAmount - PaymentTaxAmount,0,0)
    END;

    PROCEDURE PostedSBCKKCPmtAndInvGLBalPartial@1500100(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;SBCInvoiceTaxAmount@1500000 : Decimal;SBCPaymentTaxAmount@1500002 : Decimal;KKCInvoiceTaxAmount@1500006 : Decimal;KKCPaymentTaxAmount@1500005 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN BEGIN
        SBCGLAccountsBalance(
          ServiceTaxSetup,SBCInvoiceTaxAmount,0,-SBCPaymentTaxAmount,
          SBCPaymentTaxAmount - SBCInvoiceTaxAmount);
        KKCGLAccountsBalance(
          ServiceTaxSetup,0,KKCInvoiceTaxAmount,-KKCPaymentTaxAmount,
          KKCPaymentTaxAmount - KKCInvoiceTaxAmount);
      END ELSE
        IF PoT THEN BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,SBCInvoiceTaxAmount,0,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,KKCInvoiceTaxAmount,0,0,0);
        END ELSE BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,SBCInvoiceTaxAmount,0,0,0);
          KKCGLAccountsBalance(
            ServiceTaxSetup,KKCPaymentTaxAmount,
            KKCInvoiceTaxAmount - KKCPaymentTaxAmount,0,0);
        END;
    END;

    PROCEDURE PostedPurchDocGLBalance@1500045(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;Amount@1500000 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        ServTaxGLAccountsBalance(ServiceTaxSetup,0,Amount,0,-Amount)
      ELSE
        IF PoT THEN
          GLBalanceReceivablesOnly(ServiceTaxSetup,Amount)
        ELSE
          ServTaxGLAccountsBalance(ServiceTaxSetup,0,Amount,0,0);
    END;

    PROCEDURE PostedPurchDocGLSBCBalance@1500093(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;Amount@1500000 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        SBCGLAccountsBalance(ServiceTaxSetup,Amount,0,0,-Amount)
      ELSE
        IF PoT THEN
          GLSBCBalanceReceivablesOnly(ServiceTaxSetup,Amount)
        ELSE
          SBCGLAccountsBalance(ServiceTaxSetup,Amount,0,0,0);
    END;

    PROCEDURE PostedPurchDocGLKKCBalance@1500094(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;Amount@1500000 : Decimal);
    BEGIN
      IF RevChargeType <> ReverseChargeType::" " THEN
        KKCGLAccountsBalance(ServiceTaxSetup,0,Amount,0,-Amount)
      ELSE
        IF PoT THEN
          GLKKCBalanceReceivablesOnly(ServiceTaxSetup,Amount)
        ELSE
          KKCGLAccountsBalance(ServiceTaxSetup,0,Amount,0,0);
    END;

    PROCEDURE PoTServTaxEntry@1500059(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;Percentage@1170000000 : Integer;RevChrgPart@1500000 : Boolean;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.SETRANGE("Reverse Charge",FALSE);
      ServiceTaxEntry.SETRANGE(PoT,TRUE);
      ServiceTaxEntry.FINDLAST;
      VerifyServTaxEntryAmounts(ServiceTaxEntry,BaseAmount,Percentage,RevChrgPart,ServTaxSetup);
    END;

    PROCEDURE RevChrgServTaxEntry@1500051(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;Percentage@1170000000 : Integer;RevChrgPart@1500000 : Boolean;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.SETRANGE("Reverse Charge",TRUE);
      ServiceTaxEntry.SETRANGE(PoT,FALSE);
      ServiceTaxEntry.FINDLAST;
      VerifyServTaxEntryAmounts(ServiceTaxEntry,BaseAmount,Percentage,RevChrgPart,ServTaxSetup);
    END;

    PROCEDURE ReversedDocument@1500063(DocumentNo@1500000 : Code[20];LastTransactionNo@1500001 : Integer);
    BEGIN
      STEntryFullTaxBalance(LastTransactionNo,0);
      STEntryFullSBCBalance(LastTransactionNo,0);
      STEntryFullKKCBalance(LastTransactionNo,0);
      DocHasClosedRemCredit(DocumentNo);
    END;

    PROCEDURE ServiceTaxEntries@1500009(PostedDocNo@1500000 : Code[20];Amount@1500001 : Decimal;ServiceTaxSetup@1500002 : Record 16472;RevChargeCreditClosed@1500003 : Boolean;RealCreditClosed@1500004 : Boolean);
    BEGIN
      ServTaxEntry(PostedDocNo,Amount,ServiceTaxSetup);
      ServTaxEntryDetails(PostedDocNo,Amount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
    END;

    PROCEDURE ServTaxGLAccountsBalance@1560000(ServiceTaxSetup@1500000 : Record 16472;ExpectedRecBalance@1500001 : Decimal;ExpectedRecInterimBalance@1500002 : Decimal;ExpectedPayBalance@1500003 : Decimal;ExpectedPayInterimBalance@1500004 : Decimal);
    BEGIN
      STRecAccBalance(ServiceTaxSetup,ExpectedRecBalance);
      STRecInterimAccBalance(ServiceTaxSetup,ExpectedRecInterimBalance);
      STPayAccBalance(ServiceTaxSetup,ExpectedPayBalance);
      STPayInterimAccBalance(ServiceTaxSetup,ExpectedPayInterimBalance);
    END;

    PROCEDURE SBCGLAccountsBalance@1500103(ServiceTaxSetup@1500000 : Record 16472;ExpectedRecBalance@1500001 : Decimal;ExpectedRecInterimBalance@1500002 : Decimal;ExpectedPayBalance@1500003 : Decimal;ExpectedPayInterimBalance@1500004 : Decimal);
    BEGIN
      SBCRecAccBalance(ServiceTaxSetup,ExpectedRecBalance);
      SBCRecInterimAccBalance(ServiceTaxSetup,ExpectedRecInterimBalance);
      SBCPayAccBalance(ServiceTaxSetup,ExpectedPayBalance);
      SBCPayInterimAccBalance(ServiceTaxSetup,ExpectedPayInterimBalance);
    END;

    PROCEDURE KKCGLAccountsBalance@1500104(ServiceTaxSetup@1500000 : Record 16472;ExpectedRecBalance@1500001 : Decimal;ExpectedRecInterimBalance@1500002 : Decimal;ExpectedPayBalance@1500003 : Decimal;ExpectedPayInterimBalance@1500004 : Decimal);
    BEGIN
      KKCRecAccBalance(ServiceTaxSetup,ExpectedRecBalance);
      KKCRecInterimAccBalance(ServiceTaxSetup,ExpectedRecInterimBalance);
      KKCPayAccBalance(ServiceTaxSetup,ExpectedPayBalance);
      KKCPayInterimAccBalance(ServiceTaxSetup,ExpectedPayInterimBalance);
    END;

    PROCEDURE ServTaxEntriesArePaid@1500056(ApplicationTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      ServiceTaxEntry@1500002 : Record 16473;
      ExpectedAmount@1500003 : Decimal;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Transaction No.",ApplicationTransactionNo);
      ServiceTaxEntryDetails.SETRANGE("Corrective Application Entry",FALSE);
      ServiceTaxEntryDetails.SETRANGE("Serv. Tax on Advance Payment",FALSE);
      IF ServiceTaxEntryDetails.FINDSET THEN
        REPEAT
          ServiceTaxEntry.GET(ServiceTaxEntryDetails."Service Tax Entry No.");
          ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
          IF ServiceTaxEntryDetails."Reverse Charge" THEN
            ExpectedAmount := ServiceTaxEntry."Service Tax Base Amount"
          ELSE
            ExpectedAmount := ServiceTaxEntry."Amount Including Service Tax";
          Assert.AreEqual(
            ExpectedAmount,ServiceTaxEntry."Amount Received/Paid",ServiceTaxEntry.FIELDCAPTION("Amount Received/Paid"));
        UNTIL ServiceTaxEntryDetails.NEXT = 0;
    END;

    PROCEDURE ServTaxEntriesFor2Pmts@1500089(PurchLineAmount@1500000 : Decimal;DocumentType@1500001 : Option;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500003 : Code[20];ServiceTypeRevChrg@1500004 : Option;PartialPaymentFactor@1500011 : Decimal);
    BEGIN
      VerifyServTaxPmtEntriesHelper(PurchLineAmount,DocumentType,ServiceTaxSetup,PostedPaymentDocNo,ServiceTypeRevChrg,
        PartialPaymentFactor);
    END;

    PROCEDURE ServTaxEntry@1500018(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.FINDLAST;
      VerifyServTaxEntryAmounts(ServiceTaxEntry,BaseAmount,0,FALSE,ServTaxSetup);
    END;

    PROCEDURE ServTaxEntryDetails@1500061(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;ServTaxSetup@1500000 : Record 16472;RevChargeCreditClosed@1500004 : Boolean;RealCreditClosed@1500005 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
      RevChargePart@1500006 : Boolean;
      PartialPaymentFactor@1500007 : Decimal;
      SplitPercentage@1500008 : Integer;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,DocumentNo);
      PartialPaymentFactor := 0;
      SplitPercentage := 0;
      RevChargePart := FALSE;
      STDetailAmountsAndStatus(
        ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,RevChargeCreditClosed,
        RealCreditClosed,SplitPercentage,RevChargePart);
    END;

    PROCEDURE ServTaxEntryStatus@1500081(DocumentNo@1500003 : Code[20];RevChargeCreditClosed@1500004 : Boolean;RealCreditClosed@1500005 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,DocumentNo);
      STDetailStatus(ServiceTaxEntryDetails,RevChargeCreditClosed,RealCreditClosed);
    END;

    PROCEDURE ServTaxPaymentEntries@1500023(PurchLineAmount@1500000 : Decimal;DocumentType@1500001 : Option;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500003 : Code[20];ServiceTypeRevChrg@1500004 : Option);
    VAR
      PartialPaymentFactor@1500011 : Decimal;
    BEGIN
      PartialPaymentFactor := 1; // Full payment
      VerifyServTaxPmtEntriesHelper(PurchLineAmount,DocumentType,ServiceTaxSetup,PostedPaymentDocNo,ServiceTypeRevChrg,
        PartialPaymentFactor);
    END;

    PROCEDURE SplitApplication@1500017(GenJnlLine@1500000 : Record 81;PaymentDocNo@1500010 : Code[20];LastTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxSetup@1500008 : Record 16472;
      BaseAmount@1500006 : Decimal;
      RevChrgAmount@1500004 : Decimal;
      PoTAmount@1500003 : Decimal;
      Percentage@1500002 : Integer;
      PoTSBCandKKCAmount@1500009 : Decimal;
    BEGIN
      VendorLedgerEntryOpen(GenJnlLine."Document No.",FALSE);
      VendorLedgerEntryOpen(PaymentDocNo,FALSE);

      ServiceTaxSetup.FindOnDate(GenJnlLine."Service Tax Group Code",GenJnlLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmounts(GenJnlLine,BaseAmount,PoTAmount,RevChrgAmount,Percentage,ServiceTaxSetup);
      PoTSBCandKKCAmount :=
        ReverseServiceTaxHelper.CalculatePoTSBCandKKCAmount(BaseAmount,(100 - Percentage) / 100,ServiceTaxSetup);
      SplitServTaxAccountsBalance(ServiceTaxSetup,PoTAmount - PoTSBCandKKCAmount,RevChrgAmount + PoTSBCandKKCAmount,1);

      CountOfServiceTaxEntries(LastTransactionNo,2,2);

      STEntryDetailsOnDocNoSplit(PaymentDocNo,BaseAmount,Percentage,TRUE,ServiceTaxSetup,1); // Rev charge Service Tax Part
      STEntryDetailsOnDocNoSplit(GenJnlLine."Document No.",BaseAmount,Percentage,FALSE,ServiceTaxSetup,1); // Real Service Tax Part
    END;

    PROCEDURE SplitServTaxAccountsBalance@1500127(ServiceTaxSetup@1500003 : Record 16472;PoTAmount@1500000 : Decimal;RevChrgAmount@1500001 : Decimal;PaidRevChrgPartFactor@1500002 : Decimal);
    VAR
      PartialRevChrgAmount@1500004 : Decimal;
    BEGIN
      PartialRevChrgAmount := ReverseServiceTaxHelper.RoundServTax(PaidRevChrgPartFactor * RevChrgAmount);

      STPayInterimAccBalance(ServiceTaxSetup,PartialRevChrgAmount - RevChrgAmount);
      STRecInterimAccBalance(ServiceTaxSetup,RevChrgAmount);
      STPayAccBalance(ServiceTaxSetup,-PartialRevChrgAmount);
      STRecAccBalance(ServiceTaxSetup,PoTAmount);
    END;

    PROCEDURE STaxGLEntriesDoNotExist@1500050(ServiceTaxSetup@1500000 : Record 16472;DocumentNo@1500003 : Code[20]);
    BEGIN
      GLEntryDoesNotExist(DocumentNo,ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup));
      GLEntryDoesNotExist(DocumentNo,ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup));
      GLEntryDoesNotExist(DocumentNo,ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup));
      GLEntryDoesNotExist(DocumentNo,ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup));
    END;

    PROCEDURE STDetailAmounts@1500039(ServiceTaxEntryDetails@1500007 : Record 16474;BaseAmount@1500006 : Decimal;ServTaxSetup@1500005 : Record 16472;PartialPaymentFactor@1500004 : Decimal;RevChargeCreditClosed@1500003 : Boolean;RealCreditClosed@1500002 : Boolean;Percentage@1500001 : Integer;RevChargePart@1500000 : Boolean);
    BEGIN
      IF ServiceTaxEntryDetails."Reverse Charge" THEN
        VerifyRCRemCrSTEntryAmounts(
          ServiceTaxEntryDetails,BaseAmount,Percentage,ServTaxSetup,RevChargeCreditClosed,PartialPaymentFactor,RevChargePart);

      // This is the case where only Reverse Charge Invoice has been posted and not paid to Government yet.
      // In this case, we will not validate the real credit fields because they are not touched yet.
      IF ServiceTaxEntryDetails."Reverse Charge" AND NOT RevChargeCreditClosed AND RealCreditClosed THEN
        EXIT;

      VerifyNonRCRemCrSTEntryAmounts(
        ServiceTaxEntryDetails,BaseAmount,Percentage,ServTaxSetup,RealCreditClosed,PartialPaymentFactor,RevChargePart);
    END;

    PROCEDURE STDetailAmountsAndStatus@1500072(ServiceTaxEntryDetails@1500000 : Record 16474;BaseAmount@1500002 : Decimal;ServTaxSetup@1500001 : Record 16472;PartialPaymentFactor@1500003 : Decimal;RevChargeCreditClosed@1500008 : Boolean;RealCreditClosed@1500007 : Boolean;Percentage@1500006 : Integer;RevChargePart@1500004 : Boolean);
    BEGIN
      STDetailAmounts(
        ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,
        RevChargeCreditClosed,RealCreditClosed,Percentage,RevChargePart);
      STDetailStatus(ServiceTaxEntryDetails,RevChargeCreditClosed,RealCreditClosed);
    END;

    PROCEDURE STDetailStatus@1500073(ServiceTaxEntryDetails@1500007 : Record 16474;RevChargeCreditClosed@1500003 : Boolean;RealCreditClosed@1500002 : Boolean);
    BEGIN
      IF ServiceTaxEntryDetails."Reverse Charge" THEN
        VerifyRCRemCrSTEntryStatus(ServiceTaxEntryDetails,RevChargeCreditClosed);

      // This is the case where only Reverse Charge Invoice has been posted and not paid to Government yet.
      // In this case, we will not validate the real credit fields because they are not touched yet.
      IF ServiceTaxEntryDetails."Reverse Charge" AND NOT RevChargeCreditClosed AND RealCreditClosed THEN
        EXIT;

      VerifyNonRCRemCrStEntryStatus(ServiceTaxEntryDetails,RealCreditClosed);
    END;

    PROCEDURE STEntriesAppln@1500006(LastTransactionNo@1500000 : Integer;GenJnlLine@1500001 : Record 81;BaseAmount@1500002 : Decimal;RevChargeTypeParam@1500004 : Option);
    BEGIN
      IF RevChargeTypeParam = ReverseChargeType::" " THEN
        STEntriesFullPurchFlow(LastTransactionNo,GenJnlLine,BaseAmount,RevChargeTypeParam)
      ELSE
        STEntriesRevChrgAppln(LastTransactionNo,GenJnlLine,BaseAmount);
    END;

    PROCEDURE STEntriesCanceledDocument@1500014(LastTransactionNo@1500000 : Integer);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ExpectedServTaxEntry.INIT; // Expect balances = 0
      ExpectedServTaxEntryDetails.INIT; // Expect balances = 0

      STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);
      STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    PROCEDURE STEntriesFullPurchFlow@1500010(LastTransactionNo@1500000 : Integer;GenJnlLine@1500001 : Record 81;BaseAmount@1500002 : Decimal;RevChargeType@1500004 : Option);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(GenJnlLine,BaseAmount,ExpectedServTaxEntry);
      ReverseServiceTaxHelper.FillExpectedAmntsFullPurchFlow(ExpectedServTaxEntryDetails,ExpectedServTaxEntry);

      IF (NOT GenJnlLine.PoT) AND (RevChargeType = ReverseChargeType::" ") THEN
        DoubleExpectedAmntsSTEntry(ExpectedServTaxEntry);

      STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      IF GenJnlLine."Service Type (Rev. Chrg.)" = GenJnlLine."Service Type (Rev. Chrg.)"::Outward THEN
        UpdateExpectedAmountsOutward(GenJnlLine,ExpectedServTaxEntryDetails);

      STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    LOCAL PROCEDURE STEntriesRevChrgAppln@1500007(LastTransactionNo@1500000 : Integer;GenJnlLine@1500001 : Record 81;BaseAmount@1500002 : Decimal);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(GenJnlLine,BaseAmount,ExpectedServTaxEntry);

      STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      ReverseServiceTaxHelper.FillExpectedAmntsRevChrgAppln(ExpectedServTaxEntryDetails,ExpectedServTaxEntry);

      STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    PROCEDURE STEntriesAfterTakeSalesCredit@1500024(LastTransactionNo@1500000 : Integer);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      WITH TotalSTEntryDetails DO BEGIN
        Assert.AreEqual(0,"Remaining Credit",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit"),TABLECAPTION));
        Assert.AreEqual(0,"Remaining Credit (eCess)",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (eCess)"),TABLECAPTION));
        Assert.AreEqual(0,"Remaining Credit (SHECess)",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (SHECess)"),TABLECAPTION));
        Assert.AreEqual(0,"Remaining Credit (KK Cess)",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)"),TABLECAPTION));
      END;

      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntryBalances@1500066(LastTransactionNo@1500000 : Integer;ExpectedServTaxEntry@1500005 : Record 16473);
    VAR
      TotalSTEntry@1500002 : Record 16473;
      GLSetup@1500001 : Record 98;
    BEGIN
      CalcSTEntryBalances(LastTransactionNo,TotalSTEntry);

      GLSetup.GET;
      WITH TotalSTEntry DO BEGIN
        Assert.AreNearlyEqual(
          ExpectedServTaxEntry."Service Tax Amount","Service Tax Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntry."Service Tax SBC Amount","Service Tax SBC Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax SBC Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntry."KK Cess Amount","KK Cess Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("KK Cess Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedServTaxEntry."eCess Amount","eCess Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("eCess Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedServTaxEntry."SHE Cess Amount","SHE Cess Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("SHE Cess Amount"),TABLECAPTION));
      END;
    END;

    PROCEDURE STEntryFullTaxBalance@1500022(LastTransactionNo@1500000 : Integer;ExpectedFullTaxAmount@1500005 : Decimal);
    VAR
      TotalSTEntry@1500002 : Record 16473;
    BEGIN
      CalcSTEntryBalances(LastTransactionNo,TotalSTEntry);
      Assert.AreEqual(
        ExpectedFullTaxAmount,TotalSTEntry.FullTaxAmount,STRSUBSTNO(FullServiceTaxBalanceErr,TotalSTEntry.TABLECAPTION));
    END;

    PROCEDURE STEntryFullSBCBalance@1500095(LastTransactionNo@1500000 : Integer;ExpectedSBCAmount@1500005 : Decimal);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      CalcSTEntryBalances(LastTransactionNo,ServiceTaxEntry);
      Assert.AreEqual(
        ExpectedSBCAmount,ServiceTaxEntry.FullTaxSBCAmount,
        STRSUBSTNO(FullServiceTaxBalanceErr,ServiceTaxEntry.TABLECAPTION));
    END;

    PROCEDURE STEntryFullKKCBalance@1500097(LastTransactionNo@1500000 : Integer;ExpectedKKCAmount@1500005 : Decimal);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      CalcSTEntryBalances(LastTransactionNo,ServiceTaxEntry);
      Assert.AreEqual(
        ExpectedKKCAmount,ServiceTaxEntry.KKCessAmount,
        STRSUBSTNO(FullServiceTaxBalanceErr,ServiceTaxEntry.TABLECAPTION));
    END;

    PROCEDURE STEntryDtlsBalancesAndStatuses@1500032(LastTransactionNo@1500000 : Integer;ExpectedServTaxEntryDetails@1500001 : Record 16474);
    VAR
      TotalSTEntryDetails@1500003 : Record 16474;
      GLSetup@1500002 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      GLSetup.GET;
      WITH TotalSTEntryDetails DO BEGIN
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Service Tax Amount","Service Tax Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Service Tax SBC Amount","Service Tax SBC Amount",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax SBC Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."KK Cess Amount","KK Cess Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("KK Cess Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Service Tax eCess Amount","Service Tax eCess Amount",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax eCess Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Service Tax SHE Cess Amount","Service Tax SHE Cess Amount",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Service Tax SHE Cess Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Remaining Credit","Remaining Credit",GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit")));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Remaining Credit (KK Cess)","Remaining Credit (KK Cess)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)")));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Remaining Credit (eCess)","Remaining Credit (eCess)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (eCess)"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Remaining Credit (SHECess)","Remaining Credit (SHECess)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (SHECess)"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Rev. Chrg. Remaining Credit","Rev. Chrg. Remaining Credit",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Rev. Chrg. Remaining Credit"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Rev. Chrg. Rem. Credit (KKC)","Rev. Chrg. Rem. Credit (KKC)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Rev. Chrg. Rem. Credit (KKC)"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Rev. Chrg. Rem. Credit (eCESS)","Rev. Chrg. Rem. Credit (eCESS)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Rev. Chrg. Rem. Credit (eCESS)"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedServTaxEntryDetails."Rev. Chrg. Rem. Cr. (SHECess)","Rev. Chrg. Rem. Cr. (SHECess)",
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Rev. Chrg. Rem. Cr. (SHECess)"),TABLECAPTION));
      END;

      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntryDtlsFullTaxBalance@1500019(LastTransactionNo@1500000 : Integer;ExpectedFullTaxAmount@1500005 : Decimal);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      Assert.AreEqual(
        ExpectedFullTaxAmount,TotalSTEntryDetails.FullTaxAmount,STRSUBSTNO(FullServiceTaxBalanceErr,TotalSTEntryDetails.TABLECAPTION));
    END;

    PROCEDURE STEntryDtlsSBCBalance@1500122(LastTransactionNo@1500000 : Integer;ExpectedSBCAmount@1500005 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);
      Assert.AreEqual(
        ExpectedSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,FullSBCBalanceErr);
    END;

    PROCEDURE STEntryDtlsKKCBalance@1500125(LastTransactionNo@1500000 : Integer;ExpectedKKCessAmount@1500005 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);
      Assert.AreEqual(
        ExpectedKKCessAmount,ServiceTaxEntryDetails.KKCessAmount,FullKKCBalanceErr);
    END;

    PROCEDURE STEntryDtlsFullTaxBalNearly@1500084(LastTransactionNo@1500000 : Integer;ExpectedFullTaxAmount@1500005 : Decimal);
    VAR
      GLSetup@1500002 : Record 98;
      TotalSTEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        ExpectedFullTaxAmount,TotalSTEntryDetails.FullTaxAmount,GLSetup."Service Tax Rounding Precision",
        STRSUBSTNO(FullServiceTaxBalanceErr,TotalSTEntryDetails.TABLECAPTION));
    END;

    PROCEDURE STEntryDtlsSBCBalNearly@1500128(LastTransactionNo@1500000 : Integer;ExpectedSBCAmount@1500005 : Decimal);
    VAR
      GLSetup@1500002 : Record 98;
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        ExpectedSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,
        GLSetup."Service Tax Rounding Precision",FullSBCBalanceErr);
    END;

    PROCEDURE STEntryDtlsKKCBalNearly@1500126(LastTransactionNo@1500000 : Integer;ExpectedKKCAmount@1500005 : Decimal);
    VAR
      GLSetup@1500002 : Record 98;
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        ExpectedKKCAmount,ServiceTaxEntryDetails.KKCessAmount,GLSetup."Service Tax Rounding Precision",
        FullKKCBalanceErr);
    END;

    PROCEDURE STEntriesVsGLBalCrMPmt@1500064(LastTransactionNo@1500000 : Integer);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
      GLSetup@1500003 : Record 98;
      ServiceTaxSetup@1500004 : Record 16472;
      ApproxTotalTaxAmount@1500005 : Decimal;
      ApproxTotalKKCAmount@1500002 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      GLSetup.GET;
      WITH TotalSTEntryDetails DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
        ApproxTotalTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal("Base Amount",ServiceTaxSetup);
        ApproxTotalKKCAmount := ReverseServiceTaxHelper.CalculateKKCess("Base Amount",ServiceTaxSetup);
        Assert.AreNearlyEqual(
          ApproxTotalTaxAmount,FullRemainingCredit + FullRevChargeRemainingCredit,GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ApproxTotalKKCAmount,KKCessRemainingCredit + KKcessRevChargeRemainingCredit,
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)"),TABLECAPTION));
        ServTaxGLAccountsBalance(
          ServiceTaxSetup,FullRemainingCredit,FullRevChargeRemainingCredit,-FullRevChargeRemainingCredit,0);
        KKCGLAccountsBalance(
          ServiceTaxSetup,KKCessRemainingCredit,KKcessRevChargeRemainingCredit,-KKcessRevChargeRemainingCredit,0);
      END;
      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntriesVsGLBalCrMPmtOutward@1500065(LastTransactionNo@1500000 : Integer);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
      TotalSTEntryDetailsRevChrg@1500002 : Record 16474;
      GLSetup@1500003 : Record 98;
      ServiceTaxSetup@1500004 : Record 16472;
      ApproxTotalTaxAmount@1500005 : Decimal;
      ApproxTotalKKCAmount@1500006 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      TotalSTEntryDetailsRevChrg.SETRANGE("Reverse Charge",TRUE);
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetailsRevChrg);

      GLSetup.GET;
      WITH TotalSTEntryDetails DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
        ApproxTotalTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal("Base Amount",ServiceTaxSetup);
        ApproxTotalKKCAmount := ReverseServiceTaxHelper.CalculateKKCess("Base Amount",ServiceTaxSetup);

        Assert.AreNearlyEqual(
          ApproxTotalTaxAmount,FullRemainingCredit + TotalSTEntryDetailsRevChrg.FullTaxAmount,
          2 * GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ApproxTotalKKCAmount,KKCessRemainingCredit + TotalSTEntryDetailsRevChrg.KKCessAmount,
          2 * GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)"),TABLECAPTION));
        ServTaxGLAccountsBalance(
          ServiceTaxSetup,FullRemainingCredit,FullRevChargeRemainingCredit,-FullRevChargeRemainingCredit,0);
        KKCGLAccountsBalance(
          ServiceTaxSetup,KKCessRemainingCredit,KKcessRevChargeRemainingCredit,-KKcessRevChargeRemainingCredit,0);
      END;
      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntriesVsGLBalInvCrM@1500069(LastTransactionNo@1500000 : Integer);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
      TotalSTEntryRevChrg@1500002 : Record 16473;
      GLSetup@1500003 : Record 98;
      ServiceTaxSetup@1500004 : Record 16472;
      ApproxTotalTaxAmount@1500005 : Decimal;
      ApproxTotalKKCAmount@1500006 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      TotalSTEntryRevChrg.SETRANGE("Reverse Charge",TRUE);
      CalcSTEntryBalances(LastTransactionNo,TotalSTEntryRevChrg);

      GLSetup.GET;
      WITH TotalSTEntryDetails DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
        ApproxTotalTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal("Base Amount",ServiceTaxSetup);
        ApproxTotalKKCAmount := ReverseServiceTaxHelper.CalculateKKCess("Base Amount",ServiceTaxSetup);
        Assert.AreNearlyEqual(
          ApproxTotalTaxAmount,FullRemainingCredit + FullRevChargeRemainingCredit,GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ApproxTotalKKCAmount,KKCessRemainingCredit + KKcessRevChargeRemainingCredit,
          GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)"),TABLECAPTION));
        ServTaxGLAccountsBalance(
          ServiceTaxSetup,FullRemainingCredit,TotalSTEntryRevChrg.FullTaxAmount,0,-TotalSTEntryRevChrg.FullTaxAmount);
        KKCGLAccountsBalance(
          ServiceTaxSetup,KKCessRemainingCredit,TotalSTEntryRevChrg.KKCessAmount,0,-TotalSTEntryRevChrg.KKCessAmount);
      END;
      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntryDetailsForAccount@1500037(DocumentNo@1500003 : Code[20];AccountNo@1500004 : Code[20];BaseAmount@1500001 : Decimal;ServTaxSetup@1500000 : Record 16472;RevChargeCreditClosed@1500008 : Boolean;RealCreditClosed@1500007 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
      PartialPaymentFactor@1500006 : Decimal;
      SplitPercentage@1500005 : Integer;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntryDetails.SETRANGE("GL Account",AccountNo);
      ServiceTaxEntryDetails.FINDLAST;
      PartialPaymentFactor := 0;
      SplitPercentage := 0;
      STDetailAmountsAndStatus(ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,RevChargeCreditClosed,
        RealCreditClosed,SplitPercentage,FALSE);
    END;

    PROCEDURE STEntryDetailsOnDocNoSplit@1500000(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;Percentage@1500004 : Integer;RevChrgPart@1500005 : Boolean;ServTaxSetup@1500000 : Record 16472;PartialPaymentFactor@1500007 : Decimal);
    VAR
      RevChargeCreditClosed@1500006 : Boolean;
      RealCreditClosed@1500008 : Boolean;
    BEGIN
      RevChargeCreditClosed := NOT RevChrgPart;
      RealCreditClosed := RevChrgPart;
      STDetailsHelperSplit(DocumentNo,BaseAmount,Percentage,RevChrgPart,ServTaxSetup,PartialPaymentFactor,RevChargeCreditClosed,
        RealCreditClosed);
    END;

    PROCEDURE STEntryDetailsRemainingCredit@1500012(LastTransactionNo@1500000 : Integer;RemainingCredit@1500002 : Decimal);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
      GLSetup@1500003 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      GLSetup.GET;
      WITH TotalSTEntryDetails DO
        Assert.AreNearlyEqual(
          RemainingCredit,FullRemainingCredit,GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit"),TABLECAPTION));

      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntryDetailsRemRevChrgCredit@1500154(LastTransactionNo@1500000 : Integer;RemainingCredit@1500002 : Decimal);
    VAR
      TotalSTEntryDetails@1500001 : Record 16474;
      GLSetup@1500003 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      GLSetup.GET;
      WITH TotalSTEntryDetails DO
        Assert.AreNearlyEqual(
          RemainingCredit,FullRevChargeRemainingCredit,GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Rev. Chrg. Remaining Credit"),TABLECAPTION));

      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STEntryDetailsKKCRemainingCredit@1500123(LastTransactionNo@1500000 : Integer;KKCRemainingCredit@1500002 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      GLSetup@1500003 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);

      GLSetup.GET;
      WITH ServiceTaxEntryDetails DO
        Assert.AreNearlyEqual(
          KKCRemainingCredit,KKCessRemainingCredit,GLSetup."Service Tax Rounding Precision",
          STRSUBSTNO(ServiceTaxFieldBalanceErr,FIELDCAPTION("Remaining Credit (KK Cess)"),TABLECAPTION));

      STEntryDetailsStatuses(LastTransactionNo);
    END;

    PROCEDURE STDetailsAfterPayRCToGovSplit@1500118(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;Percentage@1500004 : Integer;RevChrgPart@1500005 : Boolean;ServTaxSetup@1500000 : Record 16472;PartialPaymentFactor@1500007 : Decimal;ServiceTypeRevChrg@1500002 : Option);
    VAR
      GenJournalLine@1500009 : Record 81;
      RevChargeCreditClosed@1500006 : Boolean;
      RealCreditClosed@1500008 : Boolean;
    BEGIN
      RevChargeCreditClosed := TRUE;
      IF RevChrgPart THEN
        RealCreditClosed := ServiceTypeRevChrg = GenJournalLine."Service Type (Rev. Chrg.)"::Outward
      ELSE
        RealCreditClosed := FALSE;
      STDetailsHelperSplit(DocumentNo,BaseAmount,Percentage,RevChrgPart,
        ServTaxSetup,PartialPaymentFactor,RevChargeCreditClosed,RealCreditClosed);
    END;

    LOCAL PROCEDURE STDetailsHelperSplit@1500021(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;Percentage@1500004 : Integer;RevChrgPart@1500005 : Boolean;ServTaxSetup@1500000 : Record 16472;PartialPaymentFactor@1500007 : Decimal;RevChargeCreditClosed@1500008 : Boolean;RealCreditClosed@1500006 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntryDetails.SETRANGE("Reverse Charge",RevChrgPart);
      ServiceTaxEntryDetails.SETRANGE(PoT,NOT RevChrgPart);
      ServiceTaxEntryDetails.FINDLAST;
      STDetailAmountsAndStatus(ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,
        RevChargeCreditClosed,RealCreditClosed,Percentage,RevChrgPart);
    END;

    PROCEDURE STEntryDetailsPaidSrvTax@1500080(PaymentDocNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;ServTaxSetup@1500000 : Record 16472;RevChargeCreditClosed@1500007 : Boolean;RealCreditClosed@1500006 : Boolean;PartialPaymentFactor@1500005 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
      RevChargePart@1500008 : Boolean;
      SplitPercentage@1500004 : Integer;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Reverse Charge Pmt. Doc. No.",PaymentDocNo);
      ServiceTaxEntryDetails.FIND('+');
      SplitPercentage := 0;
      // If partial payment then check the last 2 detail entries.
      RevChargePart := FALSE;
      STDetailAmountsAndStatus(ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,1 - PartialPaymentFactor,RevChargeCreditClosed,
        RealCreditClosed,SplitPercentage,RevChargePart);

      IF PartialPaymentFactor <> 1 THEN BEGIN
        ServiceTaxEntryDetails.NEXT(-1);
        STDetailAmountsAndStatus(ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,RevChargeCreditClosed,
          RealCreditClosed,SplitPercentage,RevChargePart);
      END;
    END;

    PROCEDURE STEntryDetailsPartialPay@1500028(DocumentNo@1500003 : Code[20];BaseAmount@1500001 : Decimal;ServTaxSetup@1500000 : Record 16472;PartialPaymentFactor@1500004 : Decimal;SplitPercentage@1500006 : Integer;RevChrgPart@1500005 : Boolean;RevChargeCreditClosed@1500008 : Boolean;RealCreditClosed@1500007 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,DocumentNo);
      STDetailAmountsAndStatus(ServiceTaxEntryDetails,BaseAmount,ServTaxSetup,PartialPaymentFactor,
        RevChargeCreditClosed,RealCreditClosed,SplitPercentage,RevChrgPart);
    END;

    PROCEDURE STExpenseAccBalance@1500030(ServiceTaxSetup@1500003 : Record 16472;Amount@1500001 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxExpenseAcc(ServiceTaxSetup),Amount);
    END;

    LOCAL PROCEDURE STEntryDetailsStatuses@1500002(LastTransactionNo@1500003 : Integer);
    VAR
      ServTaxEntryDetails@1500001 : Record 16474;
      ExpectedClosed@1500000 : Boolean;
      ExpectedRevChrgClosed@1500002 : Boolean;
    BEGIN
      WITH ServTaxEntryDetails DO BEGIN
        SETFILTER("Transaction No.",'>%1',LastTransactionNo);
        IF FINDSET THEN
          REPEAT
            IF "Reverse Charge" THEN BEGIN
              ExpectedRevChrgClosed := "Rev. Chrg. Remaining Credit" = 0;
              Assert.AreEqual(ExpectedRevChrgClosed,"Closed Reverse Charge",
                STRSUBSTNO(ServiceTaxEntryDtldStatusErr,FIELDCAPTION("Closed Reverse Charge")));
              ExpectedRevChrgClosed := "Rev. Chrg. Rem. Credit (KKC)" = 0;
              Assert.AreEqual(ExpectedRevChrgClosed,"Closed Reversed (KK Cess)",
                STRSUBSTNO(ServiceTaxEntryDtldStatusErr,FIELDCAPTION("Closed Reversed (KK Cess)")));
            END;
            IF NOT "Reverse Charge" OR "Closed Reverse Charge" THEN BEGIN
              ExpectedClosed := "Remaining Credit" = 0;
              Assert.AreEqual(ExpectedClosed,Closed,
                STRSUBSTNO(ServiceTaxEntryDtldStatusErr,FIELDCAPTION(Closed)));
              ExpectedClosed := "Remaining Credit (KK Cess)" = 0;
              Assert.AreEqual(ExpectedClosed,"Closed (KK Cess)",
                STRSUBSTNO(ServiceTaxEntryDtldStatusErr,FIELDCAPTION("Closed (KK Cess)")))
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE STPayAccBalance@1500112(ServiceTaxSetup@1500003 : Record 16472;Amount@1500001 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE STPayInterimAccBalance@1500111(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE STRecAccBalance@1500110(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE STRecAccBalanceNearly@1500079(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    VAR
      GLAccount@1500001 : Record 15;
      GLSetup@1500004 : Record 98;
      AccountNo@1500003 : Code[20];
    BEGIN
      AccountNo := ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup);
      GLAccount.GET(AccountNo);
      GLAccount.CALCFIELDS(Balance);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        Amount,GLAccount.Balance,GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AccBalanceErr,GLAccount."No."));
    END;

    PROCEDURE SBCRecAccBalanceNearly@1500129(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    VAR
      GLAccount@1500001 : Record 15;
      GLSetup@1500004 : Record 98;
      AccountNo@1500003 : Code[20];
    BEGIN
      AccountNo := ReverseServiceTaxHelper.GetServTaxSBCRecAcc(ServiceTaxSetup);
      GLAccount.GET(AccountNo);
      GLAccount.CALCFIELDS(Balance);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        Amount,GLAccount.Balance,GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AccBalanceErr,GLAccount."No."));
    END;

    PROCEDURE KKCRecAccBalanceNearly@1500130(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    VAR
      GLAccount@1500001 : Record 15;
      GLSetup@1500004 : Record 98;
      AccountNo@1500003 : Code[20];
    BEGIN
      AccountNo := ReverseServiceTaxHelper.GetKKCRecAcc(ServiceTaxSetup);
      GLAccount.GET(AccountNo);
      GLAccount.CALCFIELDS(Balance);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        Amount,GLAccount.Balance,GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AccBalanceErr,GLAccount."No."));
    END;

    PROCEDURE STRecInterimAccBalance@1500025(ServiceTaxSetup@1500003 : Record 16472;Amount@1500002 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE SBCPayAccBalance@1500109(ServiceTaxSetup@1500003 : Record 16472;Amount@1500001 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE SBCPayInterimAccBalance@1500108(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE SBCRecAccBalance@1500107(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE SBCRecInterimAccBalance@1500105(ServiceTaxSetup@1500003 : Record 16472;Amount@1500002 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE KKCPayAccBalance@1500119(ServiceTaxSetup@1500003 : Record 16472;Amount@1500001 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE KKCPayInterimAccBalance@1500117(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetKKCInterimPayAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE KKCRecAccBalance@1500116(ServiceTaxSetup@1500002 : Record 16472;Amount@1500000 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetKKCRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE KKCRecInterimAccBalance@1500114(ServiceTaxSetup@1500003 : Record 16472;Amount@1500002 : Decimal);
    BEGIN
      AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),Amount);
    END;

    PROCEDURE UnappliedAdvSTEntryDetBalances@1500036(PurchaseLineAmount@1500002 : Decimal;DocumentType@1500004 : Option;LastTransactionNo@1500006 : Integer;ServiceTaxGroupCode@1500009 : Code[20];PostingDate@1500010 : Date;RevChargeType@1500001 : Option;PoT@1500000 : Boolean);
    BEGIN
      UnappAdvPmtPartialSTEntrDetBal(
        PurchaseLineAmount,PurchaseLineAmount,DocumentType,LastTransactionNo,ServiceTaxGroupCode,PostingDate,RevChargeType,PoT);
    END;

    PROCEDURE UnappliedDtldVLEntries@1500020(DocumentNo@1500001 : Code[20]);
    VAR
      VendLedgEntry@1500003 : Record 25;
      DtldVendLedgEntry@1500002 : Record 380;
    BEGIN
      VendLedgEntry.SETRANGE("Document No.",DocumentNo);
      VendLedgEntry.FINDLAST;

      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      DtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
      DtldVendLedgEntry.SETRANGE(Unapplied,TRUE);
      Assert.IsFalse(DtldVendLedgEntry.ISEMPTY,NoUnappliedEntriesErr);
    END;

    PROCEDURE UnappAdvPmtPartialSTEntrDetBal@1500047(AdvancePaymentAmount@1500011 : Decimal;PurchaseLineAmount@1500002 : Decimal;DocumentType@1500004 : Option;LastTransactionNo@1500006 : Integer;ServiceTaxGroupCode@1500009 : Code[20];PostingDate@1500010 : Date;RevChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      TotalSTEntryDetails@1500005 : Record 16474;
      InvServTaxAmount@1500007 : Decimal;
      AdvPmtServTaxAmount@1500012 : Decimal;
      AdvPmtSBCAmount@1500008 : Decimal;
      AdvPmtKKCAmount@1500013 : Decimal;
      InvSBCAmount@1500014 : Decimal;
      InvKKCAmount@1500015 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      ServiceTaxSetup.FindOnDate(ServiceTaxGroupCode,PostingDate);
      InvServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);
      InvSBCAmount := ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);
      InvKKCAmount := ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);
      AdvPmtServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,AdvancePaymentAmount,DocumentType);
      AdvPmtSBCAmount := ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,AdvancePaymentAmount,DocumentType);
      AdvPmtKKCAmount := ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,AdvancePaymentAmount,DocumentType);

      IF PoT THEN BEGIN
        Assert.AreEqual(InvServTaxAmount + AdvPmtServTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
        Assert.AreEqual(InvServTaxAmount + AdvPmtServTaxAmount,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        Assert.AreEqual(InvSBCAmount + AdvPmtSBCAmount,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
        Assert.AreEqual(InvKKCAmount + AdvPmtKKCAmount,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
        Assert.AreEqual(InvKKCAmount + AdvPmtKKCAmount,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
      END ELSE
        IF RevChargeType = ReverseChargeType::" " THEN BEGIN
          Assert.AreEqual(0,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
          Assert.AreEqual(0,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
        END ELSE BEGIN
          Assert.AreEqual(AdvPmtServTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
          Assert.AreEqual(AdvPmtServTaxAmount,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
          Assert.AreEqual(AdvPmtSBCAmount,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
          Assert.AreEqual(AdvPmtKKCAmount,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
          Assert.AreEqual(AdvPmtKKCAmount,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
        END;
    END;

    PROCEDURE UnappAdvPmtSTEntryDetBalances@1500046(PurchaseLineAmount@1500002 : Decimal;DocumentType@1500004 : Option;LastTransactionNo@1500006 : Integer;ServiceTaxGroupCode@1500009 : Code[20];PostingDate@1500010 : Date;PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      TotalSTEntryDetails@1500005 : Record 16474;
      ServiceTaxAmount@1500007 : Decimal;
      SBCAmount@1500001 : Decimal;
      KKCAmount@1500008 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      ServiceTaxSetup.FindOnDate(ServiceTaxGroupCode,PostingDate);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);
      SBCAmount := ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,PurchaseLineAmount,DocumentType);

      IF PoT THEN BEGIN
        Assert.AreEqual(ServiceTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
        Assert.AreEqual(SBCAmount,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
        Assert.AreEqual(KKCAmount,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
        Assert.AreEqual(ServiceTaxAmount,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
        Assert.AreEqual(KKCAmount,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
      END ELSE BEGIN
        Assert.AreEqual(0,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
        Assert.AreEqual(0,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
      END;
    END;

    PROCEDURE UnappAdvRefundSTEntryDetBal@1500155(LastTransactionNo@1500006 : Integer);
    VAR
      TotalSTEntryDetails@1500005 : Record 16474;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      Assert.AreEqual(0,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
      Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
      Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
      Assert.AreEqual(0,TotalSTEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
      Assert.AreEqual(0,TotalSTEntryDetails.KKCessAmount,KKCBalanceErr);
      Assert.AreEqual(0,TotalSTEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
      Assert.AreEqual(0,TotalSTEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr)
    END;

    PROCEDURE UnappAdvPmtRemainSTEntryDetBal@1500041(AdvancePaymentTaxAmount@1500002 : Decimal;FirstInvoiceTaxAmount@1500001 : Decimal;LastTransactionNo@1500006 : Integer;ReverseCharge@1500011 : Option;PoT@1500000 : Boolean);
    VAR
      TotalSTEntryDetails@1500005 : Record 16474;
      SecondInvoiceTaxAmount@1500012 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      SecondInvoiceTaxAmount := AdvancePaymentTaxAmount - FirstInvoiceTaxAmount;

      IF PoT THEN BEGIN
        Assert.AreEqual(AdvancePaymentTaxAmount + SecondInvoiceTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
        Assert.AreEqual(
          AdvancePaymentTaxAmount + SecondInvoiceTaxAmount,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
      END ELSE
        IF ReverseCharge = ReverseChargeType::" " THEN BEGIN
          Assert.AreEqual(FirstInvoiceTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
          Assert.AreEqual(FirstInvoiceTaxAmount,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        END ELSE BEGIN
          Assert.AreEqual(AdvancePaymentTaxAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
          Assert.AreEqual(AdvancePaymentTaxAmount,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        END;
    END;

    PROCEDURE UnappAdvPmtRemainSBCKKCEntryDetBal@1500120(AdvancePaymentSBCAmount@1500002 : Decimal;FirstInvoiceSBCAmount@1500001 : Decimal;AdvancePaymentKKCAmount@1500004 : Decimal;FirstInvoiceKKCAmount@1500003 : Decimal;LastTransactionNo@1500006 : Integer;ReverseCharge@1500011 : Option;PoT@1500000 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500005 : Record 16474;
      SecondInvoiceSBCAmount@1500012 : Decimal;
      SecondInvoiceKKCAmount@1500007 : Decimal;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);
      SecondInvoiceSBCAmount := AdvancePaymentSBCAmount - FirstInvoiceSBCAmount;
      SecondInvoiceKKCAmount := AdvancePaymentKKCAmount - FirstInvoiceKKCAmount;

      IF PoT THEN BEGIN
        Assert.AreEqual(AdvancePaymentSBCAmount + SecondInvoiceSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
        Assert.AreEqual(AdvancePaymentKKCAmount + SecondInvoiceKKCAmount,ServiceTaxEntryDetails.KKCessAmount,KKCBalanceErr);
        Assert.AreEqual(
          AdvancePaymentKKCAmount + SecondInvoiceKKCAmount,ServiceTaxEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
        Assert.AreEqual(0,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
      END ELSE
        IF ReverseCharge = ReverseChargeType::" " THEN BEGIN
          Assert.AreEqual(FirstInvoiceSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
          Assert.AreEqual(FirstInvoiceKKCAmount,ServiceTaxEntryDetails.KKCessAmount,KKCBalanceErr);
          Assert.AreEqual(FirstInvoiceKKCAmount,ServiceTaxEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
          Assert.AreEqual(0,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
        END ELSE BEGIN
          Assert.AreEqual(AdvancePaymentSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
          Assert.AreEqual(AdvancePaymentKKCAmount,ServiceTaxEntryDetails.KKCessAmount,KKCBalanceErr);
          Assert.AreEqual(0,ServiceTaxEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
          Assert.AreEqual(AdvancePaymentKKCAmount,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
        END;
    END;

    PROCEDURE UnappAdvPmtRemainingGLBalances@1500042(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;AdvancePaymentTaxAmount@1500000 : Decimal;FirstInvoiceTaxAmount@1500002 : Decimal);
    VAR
      SecondInvoiceTaxAmount@1500005 : Decimal;
    BEGIN
      SecondInvoiceTaxAmount := AdvancePaymentTaxAmount - FirstInvoiceTaxAmount;
      IF RevChargeType <> ReverseChargeType::" " THEN
        ServTaxGLAccountsBalance(
          ServiceTaxSetup,0,AdvancePaymentTaxAmount + SecondInvoiceTaxAmount,-AdvancePaymentTaxAmount,-SecondInvoiceTaxAmount)
      ELSE
        IF PoT THEN
          ServTaxGLAccountsBalance(ServiceTaxSetup,AdvancePaymentTaxAmount + SecondInvoiceTaxAmount,-SecondInvoiceTaxAmount,0,0)
        ELSE
          ServTaxGLAccountsBalance(ServiceTaxSetup,FirstInvoiceTaxAmount,SecondInvoiceTaxAmount,0,0)
    END;

    PROCEDURE UnappAdvPmtRemainingGLSBCKKCBalances@1500121(ServiceTaxSetup@1500001 : Record 16472;RevChargeType@1500003 : Option;PoT@1500004 : Boolean;AdvancePaymentSBCAmount@1500000 : Decimal;FirstInvoiceSBCAmount@1500002 : Decimal;AdvancePaymentKKCAmount@1500007 : Decimal;FirstInvoiceKKCAmount@1500006 : Decimal);
    VAR
      SecondInvoiceSBCAmount@1500005 : Decimal;
      SecondInvoiceKKCAmount@1500008 : Integer;
    BEGIN
      SecondInvoiceSBCAmount := AdvancePaymentSBCAmount - FirstInvoiceSBCAmount;
      SecondInvoiceKKCAmount := AdvancePaymentKKCAmount - FirstInvoiceKKCAmount;

      IF RevChargeType <> ReverseChargeType::" " THEN BEGIN
        SBCGLAccountsBalance(
          ServiceTaxSetup,AdvancePaymentSBCAmount,SecondInvoiceSBCAmount,-AdvancePaymentSBCAmount,-SecondInvoiceSBCAmount);
        KKCGLAccountsBalance(
          ServiceTaxSetup,0,AdvancePaymentKKCAmount + SecondInvoiceKKCAmount,-AdvancePaymentKKCAmount,-SecondInvoiceKKCAmount)
      END ELSE
        IF PoT THEN BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,AdvancePaymentSBCAmount + SecondInvoiceSBCAmount,-SecondInvoiceSBCAmount,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,AdvancePaymentKKCAmount + SecondInvoiceKKCAmount,-SecondInvoiceKKCAmount,0,0);
        END ELSE BEGIN
          SBCGLAccountsBalance(ServiceTaxSetup,FirstInvoiceSBCAmount + SecondInvoiceSBCAmount,0,0,0);
          KKCGLAccountsBalance(ServiceTaxSetup,FirstInvoiceKKCAmount,SecondInvoiceKKCAmount,0,0);
        END;
    END;

    PROCEDURE UnappPmtRemainSTEntryDetBal@1500057(FirstAppliedAmount@1500002 : Decimal;SecondAppliedAmount@1500001 : Decimal;LastTransactionNo@1500006 : Integer;ReverseCharge@1500011 : Option;PoT@1500000 : Boolean);
    VAR
      TotalSTEntryDetails@1500005 : Record 16474;
      GLSetup@1500003 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);

      IF PoT THEN BEGIN
        Assert.AreEqual(FirstAppliedAmount + SecondAppliedAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
        Assert.AreEqual(FirstAppliedAmount + SecondAppliedAmount,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
        Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
      END ELSE
        IF ReverseCharge = ReverseChargeType::" " THEN BEGIN
          GLSetup.GET;
          Assert.AreNearlyEqual(
            FirstAppliedAmount,TotalSTEntryDetails.FullTaxAmount,
            GLSetup."Service Tax Rounding Precision",ServiceTaxBalanceErr);
          Assert.AreNearlyEqual(
            FirstAppliedAmount,TotalSTEntryDetails.FullRemainingCredit,
            GLSetup."Service Tax Rounding Precision",RemainingCreditBalErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        END ELSE BEGIN
          Assert.AreEqual(FirstAppliedAmount,TotalSTEntryDetails.FullTaxAmount,ServiceTaxBalanceErr);
          Assert.AreEqual(0,TotalSTEntryDetails.FullRemainingCredit,RemainingCreditBalErr);
          Assert.AreEqual(FirstAppliedAmount,TotalSTEntryDetails.FullRevChargeRemainingCredit,RevChargeRemCrBalErr);
        END;
    END;

    PROCEDURE UnappPmtRemainSTSBCKKCEntryDetBal@1500102(FirstAppliedSBCAmount@1500002 : Decimal;SecondAppliedSBCAmount@1500001 : Decimal;FirstAppliedKKCAmount@1500007 : Decimal;SecondAppliedKKCAmount@1500004 : Decimal;LastTransactionNo@1500006 : Integer;ReverseCharge@1500011 : Option;PoT@1500000 : Boolean);
    VAR
      ServiceTaxEntryDetails@1500005 : Record 16474;
      GLSetup@1500003 : Record 98;
    BEGIN
      CalcSTEntryDetailsBalances(LastTransactionNo,ServiceTaxEntryDetails);

      IF PoT THEN BEGIN
        Assert.AreEqual(FirstAppliedSBCAmount + SecondAppliedSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
        Assert.AreEqual(FirstAppliedKKCAmount + SecondAppliedKKCAmount,ServiceTaxEntryDetails.KKCessAmount,KKCBalanceErr);
        Assert.AreEqual(FirstAppliedKKCAmount + SecondAppliedKKCAmount,ServiceTaxEntryDetails.KKCessRemainingCredit,
          KKCRemainingCreditBalErr);
        Assert.AreEqual(0,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
      END ELSE
        IF ReverseCharge = ReverseChargeType::" " THEN BEGIN
          GLSetup.GET;
          Assert.AreNearlyEqual(
            FirstAppliedSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,
            GLSetup."Service Tax Rounding Precision",SBCBalanceErr);
          Assert.AreNearlyEqual(
            FirstAppliedKKCAmount,ServiceTaxEntryDetails.KKCessAmount,
            GLSetup."Service Tax Rounding Precision",KKCBalanceErr);
          Assert.AreNearlyEqual(
            FirstAppliedKKCAmount,ServiceTaxEntryDetails.KKCessRemainingCredit,
            GLSetup."Service Tax Rounding Precision",KKCRemainingCreditBalErr);
          Assert.AreEqual(0,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,KKCRevChargeRemCrBalErr);
        END ELSE BEGIN
          Assert.AreEqual(FirstAppliedSBCAmount,ServiceTaxEntryDetails.FullTaxSBCAmount,SBCBalanceErr);
          Assert.AreEqual(FirstAppliedKKCAmount,ServiceTaxEntryDetails.KKCessAmount,KKCBalanceErr);
          Assert.AreEqual(0,ServiceTaxEntryDetails.KKCessRemainingCredit,KKCRemainingCreditBalErr);
          Assert.AreEqual(FirstAppliedKKCAmount,ServiceTaxEntryDetails.KKcessRevChargeRemainingCredit,
            KKCRevChargeRemCrBalErr);
        END;
    END;

    PROCEDURE UnappliedSTEntryDetails@1500035(ApplyTransactionNo@1500000 : Integer);
    VAR
      STEntryDetails@1500001 : Record 16474;
    BEGIN
      WITH STEntryDetails DO BEGIN
        SETFILTER("Transaction No.",'>=%1',ApplyTransactionNo);
        IF FINDSET THEN
          REPEAT
            IF NOT (PoT AND NOT "Corrective Application Entry") THEN
              VerifyClosedRemCredit(STEntryDetails);
          UNTIL NEXT = 0;

        VerifyServTaxEntriesAreNotPaid(ApplyTransactionNo);
        CountOfUnappliedEntries(ApplyTransactionNo);
      END;
    END;

    LOCAL PROCEDURE UpdateExpectedAmountsOutward@1500027(GenJournalLine@1500001 : Record 81;VAR ExpectedServTaxEntryDetails@1500000 : Record 16474);
    VAR
      ServTaxSetup@1500004 : Record 16472;
      BaseAmount@1500002 : Decimal;
      Percentage@1500003 : Integer;
      SplitBaseAmount@1500005 : Decimal;
      ServTaxAmount@1500006 : ARRAY [5] OF Decimal;
    BEGIN
      WITH ExpectedServTaxEntryDetails DO BEGIN
        Percentage := ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine);
        IF Percentage IN [1..99] THEN BEGIN
          ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
          BaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine);
          CalcServTaxEntryAmounts(BaseAmount,Percentage,ServTaxSetup,SplitBaseAmount,ServTaxAmount,FALSE);
          "Remaining Credit" := ServTaxAmount[1];
          "Remaining Credit (eCess)" := ServTaxAmount[2];
          "Remaining Credit (SHECess)" := ServTaxAmount[3];
          "Remaining Credit (SBC)" := ServTaxAmount[4];
          "Remaining Credit (KK Cess)" := ServTaxAmount[5];
        END ELSE BEGIN
          "Remaining Credit" := 0;
          "Remaining Credit (eCess)" := 0;
          "Remaining Credit (SHECess)" := 0;
          "Remaining Credit (SBC)" := 0;
          "Remaining Credit (KK Cess)" := 0;
        END;
      END;
    END;

    PROCEDURE VendorAndServicesEntries@1500113(PostedDocNo@1500007 : Code[20];VendorNo@1500009 : Code[20];ReversedGLAccount@1500010 : Code[20];VendorEntryOpen@1500011 : Boolean;BaseAmount@1500001 : Decimal;TaxAmount@1500000 : Decimal;RevChargeType@1500002 : Option;IsInvoiceOrOrder@1500004 : Boolean);
    VAR
      Amount@1500003 : Decimal;
    BEGIN
      IF RevChargeType = ReverseChargeType::" " THEN
        Amount := BaseAmount + TaxAmount
      ELSE
        Amount := BaseAmount;

      // Vendors, Domestic
      VendorLedgerEntryOpen(PostedDocNo,VendorEntryOpen);
      GLEntry(PostedDocNo,ReverseServiceTaxHelper.GetVendorPostingAccount(VendorNo),-Amount);

      // Services
      IF IsInvoiceOrOrder THEN
        AccountBalance(ReversedGLAccount,BaseAmount)
      ELSE
        GLEntry(PostedDocNo,ReversedGLAccount,Amount)
    END;

    PROCEDURE VendorLedgerEntryOpen@1500052(DocumentNo@1500003 : Code[20];Open@1500001 : Boolean);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      FindLastPurchDocument(DocumentNo,VendorLedgerEntry);
      Assert.AreEqual(Open,VendorLedgerEntry.Open,UnexpectedVendLedgEntryOpenErr);
    END;

    PROCEDURE VendorLedgerEntryRemAmt@1500152(DocumentNo@1500003 : Code[20];ExpectedRemAmount@1500001 : Decimal);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
      GLSetup@1500000 : Record 98;
    BEGIN
      GLSetup.GET;
      Assert.AreNearlyEqual(
        ExpectedRemAmount,CalcVendLedgEntryRemAmount(DocumentNo),
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyClosedRemCredit@1500147(ServiceTaxEntryDetails@1500000 : Record 16474);
    VAR
      RevChrgClosed@1500001 : Boolean;
    BEGIN
      WITH ServiceTaxEntryDetails DO BEGIN
        Assert.AreEqual(0,"Remaining Credit",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Remaining Credit")));
        Assert.AreEqual(0,"Remaining Credit (KK Cess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Remaining Credit (KK Cess)")));
        Assert.AreEqual(0,"Remaining Credit (eCess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Remaining Credit (eCess)")));
        Assert.AreEqual(0,"Remaining Credit (SHECess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Remaining Credit (SHECess)")));
        Assert.AreEqual(0,"Rev. Chrg. Remaining Credit",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Rev. Chrg. Remaining Credit")));
        Assert.AreEqual(
          0,"Rev. Chrg. Rem. Credit (KKC)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Rev. Chrg. Rem. Credit (KKC)")));
        Assert.AreEqual(
          0,"Rev. Chrg. Rem. Credit (eCESS)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Rev. Chrg. Rem. Credit (eCESS)")));
        Assert.AreEqual(
          0,"Rev. Chrg. Rem. Cr. (SHECess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Rev. Chrg. Rem. Cr. (SHECess)")));
        Assert.AreEqual(TRUE,Closed,STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION(Closed)));
        Assert.AreEqual(TRUE,"Closed (KK Cess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Closed (KK Cess)")));
        RevChrgClosed := "Reverse Charge";
        Assert.AreEqual(
          RevChrgClosed,"Closed Reverse Charge",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Closed Reverse Charge")));
        Assert.AreEqual(
          RevChrgClosed,"Closed Reversed (KK Cess)",STRSUBSTNO(EntryDetailsValueErr,FIELDCAPTION("Closed Reversed (KK Cess)")));
      END;
    END;

    LOCAL PROCEDURE VerifyNonRCRemCrSTEntryAmounts@1500082(ServiceTaxEntryDetails@1500006 : Record 16474;BaseAmount@1500005 : Decimal;Percentage@1500004 : Integer;ServTaxSetup@1500003 : Record 16472;CreditClosed@1500010 : Boolean;PartialPaymentFactor@1500001 : Decimal;RevChargePart@1500000 : Boolean);
    VAR
      ServTaxAmount@1500009 : ARRAY [5] OF Decimal;
      SplitBaseAmount@1500002 : Decimal;
    BEGIN
      BaseAmount := ReverseServiceTaxHelper.RoundAmount(BaseAmount);
      CalcServTaxEntryAmounts(
        BaseAmount,Percentage,ServTaxSetup,SplitBaseAmount,ServTaxAmount,RevChargePart);
      GetPartialPaymentAmounts(ServTaxAmount,PartialPaymentFactor);
      GetCreditClosedAmounts(ServTaxAmount,CreditClosed);

      Assert.AreEqual(ServTaxAmount[1],ServiceTaxEntryDetails."Remaining Credit",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Remaining Credit"),ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
      Assert.AreEqual(ServTaxAmount[2],ServiceTaxEntryDetails."Remaining Credit (eCess)",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Remaining Credit (eCess)"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
      Assert.AreEqual(ServTaxAmount[3],ServiceTaxEntryDetails."Remaining Credit (SHECess)",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Remaining Credit (SHECess)"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
    END;

    LOCAL PROCEDURE VerifyNonRCRemCrStEntryStatus@1500083(ServiceTaxEntryDetails@1500006 : Record 16474;CreditClosed@1500002 : Boolean);
    BEGIN
      Assert.AreEqual(CreditClosed,ServiceTaxEntryDetails.Closed,
        STRSUBSTNO(ServiceTaxDetailsErr,ServiceTaxEntryDetails.FIELDCAPTION(Closed),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
    END;

    LOCAL PROCEDURE VerifyRCRemCrSTEntryAmounts@1500085(ServiceTaxEntryDetails@1500004 : Record 16474;BaseAmount@1500003 : Decimal;Percentage@1500002 : Integer;ServTaxSetup@1500000 : Record 16472;CreditClosed@1500005 : Boolean;PartialPaymentFactor@1500010 : Decimal;RevChargePart@1500001 : Boolean);
    VAR
      ServTaxAmount@1500009 : ARRAY [5] OF Decimal;
      SplitBaseAmount@1500006 : Decimal;
    BEGIN
      BaseAmount := ReverseServiceTaxHelper.RoundAmount(BaseAmount);
      CalcServTaxEntryAmounts(
        BaseAmount,Percentage,ServTaxSetup,SplitBaseAmount,ServTaxAmount,RevChargePart);
      GetPartialPaymentAmounts(ServTaxAmount,PartialPaymentFactor);
      GetCreditClosedAmounts(ServTaxAmount,CreditClosed);

      Assert.AreEqual(ServTaxAmount[1],ServiceTaxEntryDetails."Rev. Chrg. Remaining Credit",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Rev. Chrg. Remaining Credit"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
      Assert.AreEqual(ServTaxAmount[2],ServiceTaxEntryDetails."Rev. Chrg. Rem. Credit (eCESS)",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Rev. Chrg. Rem. Credit (eCESS)"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
      Assert.AreEqual(ServTaxAmount[3],ServiceTaxEntryDetails."Rev. Chrg. Rem. Cr. (SHECess)",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Rev. Chrg. Rem. Cr. (SHECess)"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
      Assert.AreEqual(ServTaxAmount[5],ServiceTaxEntryDetails."Rev. Chrg. Rem. Credit (KKC)",
        STRSUBSTNO(ServiceTaxDetailsErr,
          ServiceTaxEntryDetails.FIELDCAPTION("Rev. Chrg. Rem. Credit (KKC)"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
    END;

    LOCAL PROCEDURE VerifyRCRemCrSTEntryStatus@1500087(ServiceTaxEntryDetails@1500004 : Record 16474;CreditClosed@1500005 : Boolean);
    BEGIN
      Assert.AreEqual(CreditClosed,ServiceTaxEntryDetails."Closed Reverse Charge",
        STRSUBSTNO(ServiceTaxDetailsErr,ServiceTaxEntryDetails.FIELDCAPTION("Closed Reverse Charge"),
          ServiceTaxEntryDetails.TABLENAME,ServiceTaxEntryDetails."Entry No."));
    END;

    LOCAL PROCEDURE VerifyServTaxEntryAmounts@1500060(ServiceTaxEntry@1500003 : Record 16473;BaseAmount@1500001 : Decimal;Percentage@1170000000 : Integer;RevChrgPart@1500000 : Boolean;ServTaxSetup@1500004 : Record 16472);
    VAR
      GLSetup@1500002 : Record 98;
      ServTaxAmount@1170000004 : ARRAY [5] OF Decimal;
      SplitBaseAmount@1170000005 : Decimal;
    BEGIN
      BaseAmount := ReverseServiceTaxHelper.RoundAmount(BaseAmount);

      CalcServTaxEntryAmounts(BaseAmount,Percentage,ServTaxSetup,SplitBaseAmount,ServTaxAmount,RevChrgPart);

      GLSetup.GET;
      Assert.AreNearlyEqual(
        SplitBaseAmount,ServiceTaxEntry."Service Tax Base Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
      Assert.AreNearlyEqual(
        ServTaxAmount[1],ServiceTaxEntry."Service Tax Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
      Assert.AreNearlyEqual(
        ServTaxAmount[2],ServiceTaxEntry."eCess Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
      Assert.AreNearlyEqual(
        ServTaxAmount[3],ServiceTaxEntry."SHE Cess Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
      Assert.AreNearlyEqual(
        ServTaxAmount[4],ServiceTaxEntry."Service Tax SBC Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
      Assert.AreNearlyEqual(
        ServTaxAmount[5],ServiceTaxEntry."KK Cess Amount",
        GLSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr,ServiceTaxEntry.TABLENAME));
    END;

    LOCAL PROCEDURE VerifyServTaxEntriesAreNotPaid@1500048(ApplicationTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Transaction No.",ApplicationTransactionNo);
      ServiceTaxEntryDetails.SETRANGE(PoT,FALSE);
      ServiceTaxEntryDetails.SETRANGE("Corrective Application Entry",FALSE);
      ServiceTaxEntryDetails.SETRANGE("Serv. Tax on Advance Payment",FALSE);
      IF ServiceTaxEntryDetails.FINDSET THEN
        REPEAT
          ServiceTaxEntry.GET(ServiceTaxEntryDetails."Service Tax Entry No.");
          ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
          Assert.AreEqual(0,ServiceTaxEntry."Amount Received/Paid",ServiceTaxEntry.FIELDCAPTION("Amount Received/Paid"));
        UNTIL ServiceTaxEntryDetails.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServTaxPmtEntriesHelper@1500090(PurchLineAmount@1500000 : Decimal;DocumentType@1500001 : Option;ServiceTaxSetup@1500002 : Record 16472;PostedPaymentDocNo@1500003 : Code[20];ServiceTypeRevChrg@1500004 : Option;PartialPaymentFactor@1500011 : Decimal);
    VAR
      BaseAmount@1500005 : Decimal;
      RealCreditClosed@1500009 : Boolean;
      RevChargeCreditClosed@1500010 : Boolean;
    BEGIN
      GLEntriesForSTPmtEntries(PurchLineAmount,DocumentType,BaseAmount,ServiceTaxSetup,PostedPaymentDocNo,ServiceTypeRevChrg);

      IF ServiceTypeRevChrg = ServiceTypeRevChrgOption::Outward THEN
        RealCreditClosed := TRUE
      ELSE
        RealCreditClosed := FALSE;
      RevChargeCreditClosed := TRUE;

      STEntryDetailsPaidSrvTax(PostedPaymentDocNo,BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed,
        PartialPaymentFactor);
    END;

    BEGIN
    END.
  }
}

