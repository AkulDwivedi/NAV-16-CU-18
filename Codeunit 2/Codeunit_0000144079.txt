OBJECT Codeunit 144079 Purchase Order With CWIP Job
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobTask@1500004 : Record 1001;
      LibraryPurchase@1500001 : Codeunit 130512;
      LibraryInventory@1500007 : Codeunit 132201;
      Assert@1500011 : Codeunit 130000;
      LibraryRandom@1500005 : Codeunit 130440;
      LibraryERM@1500003 : Codeunit 131300;
      isInitialized@1500000 : Boolean;
      ContractErr@1500002 : TextConst '@@@="%1 and %2 and %3 = Purchase Line Document Type and Purchase Line Document No and Purchase Line Number";ENU="Job Line Type must not be Contract in Purchase Line Document Type=''%1'',Document No.=''%2'',Line No.=''%3''."';
      ContractAndScheduleErr@1500013 : TextConst '@@@="%1 and %2 and %3 = Purchase Line Document Type and Purchase Line Document No and Purchase Line Number";ENU="Job Line Type must not be Both Schedule and Contract in Purchase Line Document Type=''%1'',Document No.=''%2'',Line No.=''%3''."';
      ResultTxt@1500016 : TextConst 'ENU=Are Not Equal';

    [Test]
    PROCEDURE PurchaseOrderWithJobLineTypeContract@1500000();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      Item@1500000 : Record 27;
      UnitOfMeasure@1500001 : Record 204;
    BEGIN
      // [SCENARIO 164070] Post Purchase Order with CWIP Job of which Job Line Type is "Contract" in case of Item
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Post
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Contract);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          ContractErr,PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    PROCEDURE PurchaseOrderWithJobLineTypeBothScheduleandContract@1500001();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      Item@1500000 : Record 27;
      UnitOfMeasure@1500001 : Record 204;
    BEGIN
      // [SCENARIO 164070] Post Purchase Order with CWIP Job of which Job Line Type "Both Schedule and Contract" in case of Item
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Post
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::"Both Schedule and Contract");
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Both Schedule and Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          ContractAndScheduleErr,PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    PROCEDURE PurchaseOrderWithJobLineTypeSchedule@1500002();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      Item@1500000 : Record 27;
      UnitOfMeasure@1500001 : Record 204;
      JobType@1500002 : 'Resource,Item,G/L Account';
      DocumentNo@1500007 : Code[20];
    BEGIN
      // [SCENARIO 164070] Post Purchase Order with CWIP Job of which Job Line Type "Schedule" in case of Item
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Post
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Schedule
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::Order,JobType::Item,PurchaseLine.Type::Item,DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithItemAndGLAccountAlongCWIPJob@1500004();
    VAR
      Item@1500000 : Record 27;
      UnitOfMeasure@1500001 : Record 204;
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500006 : Record 39;
      JobType@1500002 : 'Resource,Item,G/L Account';
      DocumentNo@1500007 : Code[20];
    BEGIN
      // [SCENARIO 164082] Post Purchase Order in case of Item and G/L Account attached with CWIP Job.
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Post
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,FALSE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Posted Purchase Invoice Line With Item & GL and Job Line Type as Schedule
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::Order,JobType::Item,PurchaseLine.Type::Item,DocumentNo);
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::Order,JobType::"G/L Account",PurchaseLine.Type::"G/L Account",DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseReturnWithJobLineTypeContract@1500006();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      Item@1500003 : Record 27;
      UnitOfMeasure@1500004 : Record 204;
    BEGIN
      // [SCENARIO 164082] Post Purchase Return Order in case of Item and G/L Account with CWIP Job of which Job Line Type is "Contract"
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Return Order and Post
      CreatePurchaseOrderAndUpdate(PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::"Return Order");
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Contract);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,FALSE);
      GetPurchaseLine(PurchaseHeader,PurchaseLine);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Contract
      Assert.ExpectedError(
        STRSUBSTNO(ContractErr,PurchaseLine."Document Type",
          PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    PROCEDURE PurchaseReturnWithJobLineTypeBothScheduleAndContract@1500007();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      Item@1500003 : Record 27;
      UnitOfMeasure@1500004 : Record 204;
    BEGIN
      // [SCENARIO 164082] Post Purchase Return Order in case of Item and G/L Account with CWIP Job of which Job Line Type is "Both Schedule and Contract"
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Return Order and Post
      CreatePurchaseOrderAndUpdate(PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::"Return Order");
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::"Both Schedule and Contract");
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,FALSE);
      GetPurchaseLine(PurchaseHeader,PurchaseLine);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Both Schedule and Contract
      Assert.ExpectedError(
        STRSUBSTNO(ContractAndScheduleErr,PurchaseLine."Document Type",
          PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    PROCEDURE PurchaseReturnWithJobLineTypeSchedule@1500008();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      Item@1500002 : Record 27;
      UnitOfMeasure@1500003 : Record 204;
      JobType@1500005 : 'Resource,Item,G/L Account';
      DocumentNo@1500004 : Code[20];
    BEGIN
      // [SCENARIO 164082] Post Purchase Return Order in case of Item and G/L Account with CWIP Job of which Job Line Type is "Schedule"
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Return Order and Post
      CreatePurchaseOrderAndUpdate(PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::"Return Order");
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Schedule
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::Item,PurchaseLine.Type::Item,DocumentNo);
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::"G/L Account",PurchaseLine.Type::"G/L Account",DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseReturnJobLineTypeScheduleAndPartialMultipleLines@1500013();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      Item@1500001 : Record 27;
      UnitOfMeasure@1500000 : Record 204;
      JobType@1500004 : 'Resource,Item,G/L Account';
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 164083] Post Purchase Return Order/Credit Memo with multiple Items or G/L Account, and one of each kind of purchases lines is posted partially.
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Purchase Return and Post
      CreatePurchaseOrderAndUpdate(PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocumentWithMultipleLineForReturn(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::"Return Order");
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreateMultiplePurchaseLineWithGL(PurchaseHeader,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Job Line Type With Schedule and Partial Quantity Posting
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::Item,PurchaseLine.Type::Item,DocumentNo);
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::"G/L Account",PurchaseLine.Type::"G/L Account",DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithJobLineTypeScheduleAlongItemAndGLAccount@1500012();
    VAR
      Item@1500000 : Record 27;
      UnitOfMeasure@1500001 : Record 204;
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500006 : Record 39;
      JobType@1500002 : 'Resource,Item,G/L Account';
      DocumentNo@1500007 : Code[20];
    BEGIN
      // [SCENARIO 164084] Post Purchase Order in case of Item and G/L Account attached with CWIP Job.
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Post
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,FALSE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Purchase Return Order Posting With CWIP Overheads With Job Line Type as Schedule
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::Order,JobType::Item,PurchaseLine.Type::Item,DocumentNo);
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::Order,JobType::"G/L Account",PurchaseLine.Type::"G/L Account",DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseReturnJobLineTypeScheduleAndMultipleGLLines@1500016();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      Item@1500001 : Record 27;
      UnitOfMeasure@1500000 : Record 204;
      JobType@1500004 : 'Resource,Item,G/L Account';
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 164084] Post Purchase Return Order/Credit Memo with G/L Account in case of CWIP G/L Type is Labor or Material, and post Purchase Return Order/Credit Memo with Item in case of CWIP G/L Type is Labor/G/L Account.
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Item with Unit Of Measure
      Initialize;
      CreateItemWithUnitPrice(Item,UnitOfMeasure);

      // [WHEN] Create Purchase Order and Purchase Return and Post
      CreatePurchaseOrderAndUpdate(PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,Item."No.",UnitOfMeasure.Code,PurchaseHeader."Document Type"::"Return Order");
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreateMultiplePurchaseLineWithGL(PurchaseHeader,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified Purchase Return Order Posting and Partial Quantity Posting With Job Line Type as Schedule
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::Item,PurchaseLine.Type::Item,DocumentNo);
      VerifyScheduleJobLineTypeForPurchaseDocument(
        PurchaseHeader."Document Type"::"Return Order",JobType::"G/L Account",PurchaseLine.Type::"G/L Account",DocumentNo);
    END;

    LOCAL PROCEDURE Initialize@1500039();
    VAR
      Job@1500003 : Record 167;
      JobPostingGroup@1500002 : Record 208;
      LibrarySetupStorage@1500000 : Codeunit 131009;
      LibraryJob@1500001 : Codeunit 131920;
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);
      LibraryJob.CreateJobTask(Job,JobTask);

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateVendor@1500116() : Code[20];
    VAR
      Vendor@1500000 : Record 23;
      VATPostingSetup@1500001 : Record 325;
    BEGIN
      CreateVATPostingSetup(VATPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@1500117(VAR VATPostingSetup@1500002 : Record 325);
    VAR
      VATBusinessPostingGroup@1500000 : Record 323;
      VATProductPostingGroup@1500001 : Record 324;
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProductPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJob@1500115(VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500002 : Record 39;ItemNo@1500004 : Code[20];UnitOfMeasureCode@1500005 : Code[10];DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order');
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandIntInRange(30,30));
      UpdatePurchaseLine(PurchaseLine,UnitOfMeasureCode,PurchaseLine."CWIP G/L Type"::Material,PurchaseLine.Type::Item);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@1500114(VAR Item@1500001 : Record 27;VAR UnitOfMeasure@1500000 : Record 204);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithMultipleLineForReturn@1500015(VAR PurchaseHeader@1500001 : Record 38;VAR PurchaseLine@1500000 : Record 39;ItemNo@1500002 : Code[20];UnitOfMeasureCode@1500003 : Code[10];DocumentType@1500004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order');
    VAR
      i@1500005 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      FOR i := 1 TO 2 DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandIntInRange(5,10));
        PurchaseLine.VALIDATE("Return Qty. to Ship",LibraryRandom.RandIntInRange(1,4));
        PurchaseLine.MODIFY(TRUE);
        UpdatePurchaseLine(PurchaseLine,UnitOfMeasureCode,PurchaseLine."CWIP G/L Type"::Material,PurchaseLine.Type::Item);
      END;
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLineWithGL@1500020(VAR PurchaseHeader@1500001 : Record 38;VAR PurchaseLine@1500000 : Record 39);
    VAR
      i@1500004 : Integer;
      CWIPGLType@1500005 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO BEGIN
        CWIPGLType += 1;
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,CWIPGLType,TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500005(VAR PurchaseHeader@1500001 : Record 38;VAR PurchaseLine@1500000 : Record 39;CWIPGLType@1500002 : ' ,Labor,Material,Overheads';ReturnOrder@1500003 : Boolean);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup,
        LibraryRandom.RandInt(10));
      UpdatePurchaseLine(PurchaseLine,'',CWIPGLType,PurchaseLine.Type::"G/L Account");
      IF ReturnOrder THEN BEGIN
        PurchaseLine.VALIDATE("Return Qty. to Ship",LibraryRandom.RandIntInRange(1,4));
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndUpdate@1500033(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500001 : Record 39;ItemNo@1500003 : Code[20];UnitOfMeasureCode@1500002 : Code[10]);
    BEGIN
      CreatePurchaseDocumentWithJob(
        PurchaseHeader,PurchaseLine,ItemNo,UnitOfMeasureCode,PurchaseHeader."Document Type"::Order);
      UpdateJobLineType(PurchaseLine,PurchaseLine."Job Line Type"::Schedule);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine."CWIP G/L Type"::Overheads,FALSE);
    END;

    LOCAL PROCEDURE GetPurchaseLine@1500009(VAR PurchaseHeader@1500001 : Record 38;VAR PurchaseLine@1500000 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateJobLineType@1500027(VAR PurchaseLine@1500001 : Record 39;JobLineType@1500000 : ' ,Schedule,Contract,Both Schedule and Contract');
    BEGIN
      PurchaseLine.VALIDATE("Job Line Type",JobLineType);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@1500113(VAR PurchaseLine@1500001 : Record 39;UnitOfMeasure@1500000 : Code[10];CWIPGLType@1500002 : ' ,Labor,Material,Overheads';LineType@1500003 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)');
    BEGIN
      WITH PurchaseLine DO BEGIN
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("CWIP G/L Type",CWIPGLType);
        VALIDATE("Job Line Type","Job Line Type"::Schedule);
        IF LineType = LineType::Item THEN
          VALIDATE("Unit of Measure",UnitOfMeasure);
        IF LineType = LineType::"G/L Account" THEN
          VALIDATE("Job Line Type","Job Line Type"::Schedule);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyScheduleJobLineTypeForPurchaseDocument@1500003(DocType@1500002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';JobType@1500003 : Option;Type@1500006 : Option;DocumentNo@1500001 : Code[20]);
    VAR
      JobLedgerEntry@1500000 : Record 169;
      PurchInvLine@1500004 : Record 123;
      PurchCrMemoLine@1500005 : Record 125;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE(Type,JobType);
      JobLedgerEntry.FINDFIRST;

      IF DocType = DocType::Order THEN BEGIN
        PurchInvLine.SETRANGE("Document No.",DocumentNo);
        PurchInvLine.SETRANGE(Type,Type);
        PurchInvLine.FINDFIRST;
        Assert.AreEqual(PurchInvLine."Line Amount",JobLedgerEntry."Total Cost",ResultTxt);
      END ELSE BEGIN
        PurchCrMemoLine.SETRANGE("Document No.",DocumentNo);
        PurchCrMemoLine.SETRANGE(Type,Type);
        PurchCrMemoLine.FINDFIRST;
        Assert.AreEqual(PurchCrMemoLine."Line Amount",-JobLedgerEntry."Total Cost",ResultTxt);
      END;
    END;

    BEGIN
    END.
  }
}

