OBJECT Codeunit 134066 Analysis View Table-UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryDimension@1001 : Codeunit 131001;
      LibraryERM@1002 : Codeunit 131300;
      Assert@1003 : Codeunit 130000;
      Expected@1005 : TextConst 'ENU="Blocked must be equal to ''No''  in Analysis View: Code=%1. Current value is ''Yes''"';
      IsInitialized@1007 : Boolean;
      SameDimensionCodeError@1008 : TextConst 'ENU=This dimension is used in the following setup: Analysis View Card.';
      AreNotEqualError@1009 : TextConst 'ENU=The dimension code value is not equal to previous value.';
      DimensionCode@1004 : 'Code1,Code2,Code3,Code4';

    [Test]
    PROCEDURE CreateAnalysisViewWithBlockedTrueForDimesion2Code@3();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup.
      Initialize;

      // Exercise: Create Analysis View.
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE(Blocked,TRUE); // As  Blocked True.
      AnalysisView.MODIFY(TRUE);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 2 Code",CreateDimension);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(Expected,AnalysisView.Code));
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithBlockedTrueForDimesion3Code@4();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup.
      Initialize;

      // Exercise: Create Analysis View.
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE(Blocked,TRUE); // As  Blocked True.
      AnalysisView.MODIFY(TRUE);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 3 Code",CreateDimension);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(Expected,AnalysisView.Code));
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithBlockedTrueForDimesion4Code@5();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup.
      Initialize;

      // Exercise: Create Analysis View.
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE(Blocked,TRUE); // As  Blocked True.
      AnalysisView.MODIFY(TRUE);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 4 Code",CreateDimension);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(Expected,AnalysisView.Code));
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension2CodeWithVerifyErrorMessage@6();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 2 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code2);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code4);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 2 Code",AnalysisView."Dimension 4 Code");

      // Verify: Verify Error Message.
      Assert.ExpectedError(SameDimensionCodeError);
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension3CodeWithVerifyErrorMessage@7();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 3 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code3);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code2);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 3 Code",AnalysisView."Dimension 2 Code");

      // Verify: Verify Error Message.
      Assert.ExpectedError(SameDimensionCodeError);
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension4CodeWithVerifyErrorMessage@9();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 4 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code4);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code3);
      ASSERTERROR AnalysisView.VALIDATE("Dimension 4 Code",AnalysisView."Dimension 3 Code");

      // Verify: Verify Error Message.
      Assert.ExpectedError(SameDimensionCodeError);
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension2CodeWithVerifyModification@10();
    VAR
      AnalysisView@1001 : Record 363;
      Dimension2Code@1000 : Code[20];
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 2 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code2);
      Dimension2Code := AnalysisView."Dimension 2 Code";
      AnalysisView.VALIDATE("Dimension 2 Code",CreateDimension);
      AnalysisView.MODIFY(TRUE);

      // Verify: Verifying Modified Analysis View Dimension 2 code.
      Assert.AreNotEqual(AnalysisView."Dimension 2 Code",Dimension2Code,AreNotEqualError);
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension3CodeWithVerifyModification@11();
    VAR
      AnalysisView@1001 : Record 363;
      Dimension3Code@1000 : Code[20];
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 3 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code3);
      Dimension3Code := AnalysisView."Dimension 3 Code";
      AnalysisView.VALIDATE("Dimension 3 Code",CreateDimension);
      AnalysisView.MODIFY(TRUE);

      // Verify: Verifying Modified Analysis View Dimension 3 code.
      Assert.AreNotEqual(AnalysisView."Dimension 3 Code",Dimension3Code,AreNotEqualError);
    END;

    [Test]
    PROCEDURE CreateAnalysisViewWithNewDimension4CodeWithVerifyModification@12();
    VAR
      AnalysisView@1001 : Record 363;
      Dimension4Code@1000 : Code[20];
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Analysis View And Update the Dimension 4 Code.
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionsOnAnalysisView(AnalysisView,DimensionCode::Code4);
      Dimension4Code := AnalysisView."Dimension 4 Code";
      AnalysisView.VALIDATE("Dimension 4 Code",CreateDimension);
      AnalysisView.MODIFY(TRUE);

      // Verify: Verify Modified Analysis View Dimension 4 code.
      Assert.AreNotEqual(AnalysisView."Dimension 4 Code",Dimension4Code,AreNotEqualError);
    END;

    [Test]
    PROCEDURE AnalysisViewEntryToGLEntriesSameGLEntry@1();
    VAR
      AnalysisView@1004 : Record 363;
      AnalysisViewEntry@1000 : Record 365;
      TempGLEntry@1001 : TEMPORARY Record 17;
      GLEntry@1003 : Record 17;
      AnalysisViewEntryToGLEntries@1002 : Codeunit 413;
    BEGIN
      // Setup:
      Initialize;

      LibraryERM.CreateAnalysisView(AnalysisView);

      GLEntry.FINDLAST;
      AnalysisViewEntry."Analysis View Code" := AnalysisView.Code;
      AnalysisViewEntry."Account No." := GLEntry."G/L Account No.";
      AnalysisViewEntry."Posting Date" := GLEntry."Posting Date";
      AnalysisViewEntry.INSERT;

      AnalysisView."Last Entry No." := GLEntry."Entry No.";
      AnalysisView.MODIFY(TRUE);

      // Exercise
      AnalysisViewEntryToGLEntries.GetGLEntries(AnalysisViewEntry,TempGLEntry);
      AnalysisViewEntryToGLEntries.GetGLEntries(AnalysisViewEntry,TempGLEntry);
    END;

    LOCAL PROCEDURE Initialize@17();
    BEGIN
      IF IsInitialized THEN
        EXIT;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateDimension@2() DimensionCode : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE UpdateDimensionsOnAnalysisView@8(VAR AnalysisView@1000 : Record 363;DimensionCode@1001 : 'Code1,Code2,Code3,Code4');
    BEGIN
      CASE DimensionCode OF
        DimensionCode::Code1:
          AnalysisView.VALIDATE("Dimension 1 Code",CreateDimension);
        DimensionCode::Code2:
          AnalysisView.VALIDATE("Dimension 2 Code",CreateDimension);
        DimensionCode::Code3:
          AnalysisView.VALIDATE("Dimension 3 Code",CreateDimension);
        DimensionCode::Code4:
          AnalysisView.VALIDATE("Dimension 4 Code",CreateDimension);
      END;
      AnalysisView.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Analysis View] [UT]
    }
    END.
  }
}

