OBJECT Codeunit 134108 ERM Sales Full Prepmt Rounding
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1000 : Codeunit 130509;
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1005 : Codeunit 130440;
      LibraryUtility@1003 : Codeunit 131000;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1004 : Boolean;
      CannotBeLessThanMsg@1007 : TextConst '@@@=.;ENU=cannot be less than %1';
      CannotBeMoreThanMsg@1006 : TextConst '@@@=.;ENU=cannot be more than %1';

    [Test]
    PROCEDURE ShipAllPartiallyGetShptsToInv@1071();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1003 : Record 36;
      SalesOrderLine@1004 : Record 37;
      i@1005 : Integer;
    BEGIN
      Initialize;
      SalesOrderHeader."Prices Including VAT" := FALSE;
      PrepareSalesOrder(SalesOrderHeader);
      AddSpecificOrderLine100PctPrepmt(SalesOrderLine,SalesOrderHeader);
      PostSalesPrepmtInvoice(SalesOrderHeader);

      SalesInvoiceHeader."Sell-to Customer No." := SalesOrderHeader."Sell-to Customer No.";
      CreateSalesInvoice(SalesInvoiceHeader,SalesOrderHeader."Prices Including VAT");

      FOR i := 1 TO 3 DO BEGIN
        UpdateQtysInLine(SalesOrderLine,2,0);
        SalesOrderHeader.FIND;
        LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
        GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");
      END;

      SalesOrderHeader.FIND;
      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");

      LibrarySales.PostSalesDocument(SalesInvoiceHeader,FALSE,TRUE);
      VerifyZeroCustomerAccEntry;

      SalesOrderLine.FIND;
      Assert.AreEqual(
        SalesOrderLine."Prepmt. Amt. Inv.",
        SalesOrderLine."Prepmt Amt Deducted",'"Prepmt Amt Deducted" should be equal to "Prepmt. Amt. Inv.".');
    END;

    LOCAL PROCEDURE AddSpecificOrderLine100PctPrepmt@1072(VAR SalesLine@1002 : Record 37;SalesHeader@1000 : Record 36);
    BEGIN
      // Magic numbers from original repro steps Bug 332246
      AddSalesOrderLine(SalesLine,SalesHeader,19.625,1192,100,0);
      SalesLine.VALIDATE("Line Amount",16559.33);
      SalesLine.MODIFY;
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvPosExclVAT@1042();
    BEGIN
      FinalInvAfterRemoteInv(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvNegExclVAT@1041();
    BEGIN
      FinalInvAfterRemoteInv(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvPosInclVAT@1027();
    BEGIN
      FinalInvAfterRemoteInv(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvNegInclVAT@1026();
    BEGIN
      FinalInvAfterRemoteInv(TRUE,FALSE);
    END;

    LOCAL PROCEDURE FinalInvAfterRemoteInv@1040(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1003 : Record 36;
      SalesOrderLine@1004 : Record 37;
    BEGIN
      Initialize;
      SalesOrderHeader."Prices Including VAT" := PricesInclVAT;
      PrepareSalesOrderWithPostedPrepmtInv(SalesOrderHeader,SalesOrderLine,1,PositiveDiff);

      SalesInvoiceHeader."Sell-to Customer No." := SalesOrderHeader."Sell-to Customer No.";
      CreateSalesInvoice(SalesInvoiceHeader,SalesOrderHeader."Prices Including VAT");

      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");

      LibrarySales.PostSalesDocument(SalesInvoiceHeader,FALSE,TRUE);
      VerifyZeroCustomerAccEntry;

      SalesOrderHeader.FIND;
      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,TRUE);
      VerifyZeroCustomerAccEntry;
    END;

    [Test]
    PROCEDURE ShipTwiceGetShptsToInvPosExclVAT@1037();
    BEGIN
      ShipTwiceGetShptsToInv(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE ShipTwiceGetShptsToInvNegExclVAT@1036();
    BEGIN
      ShipTwiceGetShptsToInv(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE ShipTwiceGetShptsToInvPosInclVAT@1030();
    BEGIN
      ShipTwiceGetShptsToInv(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE ShipTwiceGetShptsToInvNegInclVAT@1029();
    BEGIN
      ShipTwiceGetShptsToInv(TRUE,FALSE);
    END;

    LOCAL PROCEDURE ShipTwiceGetShptsToInv@1020(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1003 : Record 36;
      SalesOrderLine@1004 : Record 37;
    BEGIN
      Initialize;
      SalesOrderHeader."Prices Including VAT" := PricesInclVAT;
      PrepareSalesOrderWithPostedPrepmtInv(SalesOrderHeader,SalesOrderLine,1,PositiveDiff);

      SalesInvoiceHeader."Sell-to Customer No." := SalesOrderHeader."Sell-to Customer No.";
      CreateSalesInvoice(SalesInvoiceHeader,SalesOrderHeader."Prices Including VAT");

      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");

      UpdateQtysInLine(SalesOrderLine,GetQtyToShipTFS332246(PositiveDiff),0);
      SalesOrderHeader.FIND;
      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");

      LibrarySales.PostSalesDocument(SalesInvoiceHeader,FALSE,TRUE);
      VerifyZeroCustomerAccEntry;
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvPosExclVAT@1013();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      PostPartInvFinRemoteInv(SalesHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvNegExclVAT@1012();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      PostPartInvFinRemoteInv(SalesHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvPosInclVAT@1032();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Prices Including VAT" := TRUE;
      PostPartInvFinRemoteInv(SalesHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvNegInclVAT@1031();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Prices Including VAT" := TRUE;
      PostPartInvFinRemoteInv(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE PostPartInvFinRemoteInv@1015(VAR SalesOrderHeader@1000 : Record 36;PositiveDiff@1001 : Boolean);
    BEGIN
      Initialize;
      PostPartialInvoiceWithPrepmt(SalesOrderHeader,PositiveDiff);
      PostInvoiceWithShptFromOrder(SalesOrderHeader);
      VerifyZeroCustomerAccEntry;
    END;

    LOCAL PROCEDURE PostInvoiceWithShptFromOrder@1051(SalesOrderHeader@1001 : Record 36);
    VAR
      SalesInvoiceHeader@1000 : Record 36;
    BEGIN
      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);

      SalesInvoiceHeader."Sell-to Customer No." := SalesOrderHeader."Sell-to Customer No.";
      CreateSalesInvoice(SalesInvoiceHeader,SalesOrderHeader."Prices Including VAT");

      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");

      LibrarySales.PostSalesDocument(SalesInvoiceHeader,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE PostPartInvLineDiscFinRemInv@1052();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      PositiveDiff@1003 : Boolean;
    BEGIN
      Initialize;
      PositiveDiff := TRUE;
      PrepareSOLineWithLineDisc(SalesHeader,SalesLine,PositiveDiff);
      PostSalesPrepmtInvoice(SalesHeader);

      UpdateQtysInLine(SalesLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      PostInvoiceWithShptFromOrder(SalesHeader);
      VerifyZeroCustomerAccEntry;
    END;

    LOCAL PROCEDURE PrepareSOLineWithLineDisc@1053(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;PositiveDiff@1003 : Boolean);
    BEGIN
      PrepareSalesOrder(SalesHeader);
      AddSalesOrderLine100PctPrepmt(SalesLine,SalesHeader,PositiveDiff);
      SalesLine.VALIDATE("Line Discount %",GetSpecialLineDiscPct);
      SalesLine.MODIFY;
    END;

    [Test]
    PROCEDURE PostPartialInvoicePosExclVAT@1000();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      PostPartialInvoiceWithPrepmt(SalesHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartialInvoiceNegExclVAT@1009();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      PostPartialInvoiceWithPrepmt(SalesHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostPartialInvoicePosInclVAT@1034();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Prices Including VAT" := TRUE;
      PostPartialInvoiceWithPrepmt(SalesHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartialInvoiceNegInclVAT@1033();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Prices Including VAT" := TRUE;
      PostPartialInvoiceWithPrepmt(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE PostPartialInvoiceWithPrepmt@1008(VAR SalesHeader@1001 : Record 36;PositiveDiff@1000 : Boolean);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      Initialize;
      PrepareSalesOrderWithPostedPrepmtInv(SalesHeader,SalesLine,2,PositiveDiff);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("Quantity Invoiced",GetQtyToShipTFS332246(PositiveDiff));

      VerifyZeroCustomerAccEntry;
    END;

    [Test]
    PROCEDURE PartInvFinalInvPosInclVAT@1022();
    BEGIN
      PartInvFinalInvFromOrder(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvNegInclVAT@1019();
    BEGIN
      PartInvFinalInvFromOrder(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvPosExclVAT@1005();
    BEGIN
      PartInvFinalInvFromOrder(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvNegExclVAT@1010();
    BEGIN
      PartInvFinalInvFromOrder(FALSE,FALSE);
    END;

    LOCAL PROCEDURE PartInvFinalInvFromOrder@1004(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      Initialize;
      SalesHeader."Prices Including VAT" := PricesInclVAT;
      PostPartialInvoiceWithPrepmt(SalesHeader,PositiveDiff);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      VerifyZeroCustomerAccEntry;
    END;

    [Test]
    PROCEDURE PartInvWithLineDiscExclVAT@1038();
    BEGIN
      PartInvWithLineDisc(FALSE);
    END;

    [Test]
    PROCEDURE PartInvWithLineDiscInclVAT@1035();
    BEGIN
      PartInvWithLineDisc(TRUE);
    END;

    LOCAL PROCEDURE PartInvWithLineDisc@1003(PricesInclVAT@1003 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      PositiveDiff@1002 : Boolean;
    BEGIN
      Initialize;
      PositiveDiff := TRUE;
      SalesHeader."Prices Including VAT" := PricesInclVAT;
      PrepareSOLineWithLineDisc(SalesHeader,SalesLine,PositiveDiff);
      PostSalesPrepmtInvoice(SalesHeader);

      UpdateQtysInLine(SalesLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      VerifyZeroCustomerAccEntry;

      UpdateQtysInLine(SalesLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      VerifyZeroCustomerAccEntry;

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      VerifyZeroCustomerAccEntry;
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineQuantityWith100PctPrepmtAfterGetShipment@3();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1002 : Record 36;
      SalesInvoice@1000 : TestPage 43;
      OldStockoutWarning@1003 : Boolean;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease SalesInvoiceLine.Quantity value with 100% Prepayment after Get Shipment Lines
      Initialize;
      DisableStockoutWarning(OldStockoutWarning);

      // [GIVEN] Sales Order with 100% Prepayment, Line Discount and Line Amount = "X". Post Prepayment. Post Shipment.
      PrepareSOPostPrepmtAndShip(SalesOrderHeader);

      // [GIVEN] Create Sales Invoice. Get Shipment Lines from posted Shipment.
      CreateInvWithGetShipLines(SalesInvoiceHeader,SalesOrderHeader);

      // [WHEN] Try to decrease Sales Invoice Line Quantity value from Sales Invoice page.
      OpenSalesInvoicePage(SalesInvoice,SalesInvoiceHeader);
      ASSERTERROR SalesInvoice.SalesLines.Quantity.SETVALUE(SalesInvoice.SalesLines.Quantity.ASDECIMAL / 2);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,SalesInvoice.SalesLines."Line Amount".ASDECIMAL);

      // TearDown
      LibrarySales.SetStockoutWarning(OldStockoutWarning);
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineUnitPriceWith100PctPrepmtAfterGetShipment@14();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1002 : Record 36;
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease SalesInvoiceLine."Unit Price" value with 100% Prepayment after Get Shipment Lines
      Initialize;

      // [GIVEN] Sales Order with 100% Prepayment, Line Discount and Line Amount = "X". Post Prepayment. Post Shipment.
      PrepareSOPostPrepmtAndShip(SalesOrderHeader);

      // [GIVEN] Create Sales Invoice. Get Shipment Lines from posted Shipment.
      CreateInvWithGetShipLines(SalesInvoiceHeader,SalesOrderHeader);

      // [WHEN] Try to decrease Sales Invoice Line "Unit Price" value from Sales Invoice page.
      OpenSalesInvoicePage(SalesInvoice,SalesInvoiceHeader);
      ASSERTERROR SalesInvoice.SalesLines."Unit Price".SETVALUE(SalesInvoice.SalesLines."Unit Price".ASDECIMAL - 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,SalesInvoice.SalesLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorIncreasingInvLineUnitPriceWith100PctPrepmtAfterGetShipment@8();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1002 : Record 36;
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [UI]
      // [SCENARIO 374897] Error when User tries to increase SalesInvoiceLine."Unit Price" value with 100% Prepayment after Get Shipment Lines
      Initialize;

      // [GIVEN] Sales Order with 100% Prepayment, Line Discount and Line Amount = "X". Post Prepayment. Post Shipment.
      PrepareSOPostPrepmtAndShip(SalesOrderHeader);

      // [GIVEN] Create Sales Invoice. Get Shipment Lines from posted Shipment.
      CreateInvWithGetShipLines(SalesInvoiceHeader,SalesOrderHeader);

      // [WHEN] Try to increase Sales Invoice Line "Unit Price" value from Sales Invoice page.
      OpenSalesInvoicePage(SalesInvoice,SalesInvoiceHeader);
      ASSERTERROR SalesInvoice.SalesLines."Unit Price".SETVALUE(SalesInvoice.SalesLines."Unit Price".ASDECIMAL + 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be more than X"
      VerifyLineAmountExpectedError(CannotBeMoreThanMsg,SalesInvoice.SalesLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineDiscountWith100PctPrepmtAfterGetShipment@16();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1002 : Record 36;
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease SalesInvoiceLine."Line Discount %" value with 100% Prepayment after Get Shipment Lines
      Initialize;

      // [GIVEN] Sales Order with 100% Prepayment, Line Discount and Line Amount = "X". Post Prepayment. Post Shipment.
      PrepareSOPostPrepmtAndShip(SalesOrderHeader);

      // [GIVEN] Create Sales Invoice. Get Shipment Lines from posted Shipment.
      CreateInvWithGetShipLines(SalesInvoiceHeader,SalesOrderHeader);

      // [WHEN] Try to decrease Sales Invoice Line "Line Discount %" value from Sales Invoice page.
      OpenSalesInvoicePage(SalesInvoice,SalesInvoiceHeader);
      ASSERTERROR SalesInvoice.SalesLines."Line Discount %".SETVALUE(SalesInvoice.SalesLines."Line Discount %".ASDECIMAL - 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be more than X"
      VerifyLineAmountExpectedError(CannotBeMoreThanMsg,SalesInvoice.SalesLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorIncreasingInvLineDiscountWith100PctPrepmtAfterGetShipment@15();
    VAR
      SalesOrderHeader@1001 : Record 36;
      SalesInvoiceHeader@1002 : Record 36;
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [UI]
      // [SCENARIO 374897] Error when User tries to increase SalesInvoiceLine."Line Discount %" value with 100% Prepayment after Get Shipment Lines
      Initialize;

      // [GIVEN] Sales Order with 100% Prepayment, Line Discount and Line Amount = "X". Post Prepayment. Post Shipment.
      PrepareSOPostPrepmtAndShip(SalesOrderHeader);

      // [GIVEN] Create Sales Invoice. Get Shipment Lines from posted Shipment.
      CreateInvWithGetShipLines(SalesInvoiceHeader,SalesOrderHeader);

      // [WHEN] Try to increase Sales Invoice Line "Line Discount %" value from Sales Invoice page.
      OpenSalesInvoicePage(SalesInvoice,SalesInvoiceHeader);
      ASSERTERROR SalesInvoice.SalesLines."Line Discount %".SETVALUE(SalesInvoice.SalesLines."Line Discount %".ASDECIMAL + 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,SalesInvoice.SalesLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctCompressLCY@66();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(TRUE,TRUE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctCompressLCY@88();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE

      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(FALSE,TRUE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctNotCompressLCY@74();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(TRUE,FALSE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctNotCompressLCY@72();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE

      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(FALSE,FALSE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctCompressFCY@30();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE, Foreign Currency and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with Currency, "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(TRUE,TRUE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctCompressFCY@28();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE, Foreign Currency

      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(FALSE,TRUE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctNotCompressFCY@27();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE, Foreign Currency and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(TRUE,FALSE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctNotCompressFCY@25();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Sales Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE, Foreign Currency

      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Receivables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(FALSE,FALSE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE PrepmtLCYRoundingCalcEqualFinalInvoiceLCYRounding@35();
    VAR
      GeneralPostingSetup@1004 : Record 252;
      VATPostingSetup@1000 : Record 325;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PrepmtInvNo@1005 : Code[20];
      InvoiceNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 379324] Prepayment LCY rounding works the same way as final invoice LCY rounding in case of currency
      Initialize;

      // [GIVEN] Sales Order with 100% Prepayment, Currency (Exch. Rate = 1:1000), VAT% = 0, Line Amount Excl. VAT = 100.01, Total Amount = 100.01 (VAT Amount = 0)
      LibraryERM.CreateVATPostingSetupWithAccounts(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT",10);
      CreateSalesDoc(
        SalesHeader,SalesHeader."Document Type"::Order,VATPostingSetup."VAT Bus. Posting Group",
        CreateCurrencyCodeWithExchRate(0.001),FALSE,FALSE);
      AddSalesOrderLineWithPrepmtVATProdGroup(
        SalesLine,SalesHeader,VATPostingSetup."VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group",1,100.01);
      // [GIVEN] Post prepayment invoice
      PostSalesPrepmtInvoice(SalesHeader);
      PrepmtInvNo := FindPrepmtInvoice(SalesHeader."Sell-to Customer No.",SalesHeader."No.");

      // [WHEN] Post final invoice
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] There are 3 Prepayment Invoice G/L Entries:
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      VerifyGLEntryCount(PrepmtInvNo,2);
      // [THEN] G/L Account 2310 <Customer Domestic> Amount = 100010, VAT Amount = 0
      VerifyGLEntryAmount(PrepmtInvNo,GetCustomerPostingGroupRecAccNo(SalesHeader."Sell-to Customer No."),100010,0);
      // [THEN] G/L Account 5380 <Customer Prepayment VAT 10 %> Amount = -100010, VAT Amount = 0
      VerifyGLEntryAmount(PrepmtInvNo,GeneralPostingSetup."Sales Prepayments Account",-100010,0);

      // [THEN] There are 5 Invoice G/L Entries:
      VerifyGLEntryCount(InvoiceNo,3);
      // [THEN] G/L Account 2310 <Customer Domestic> Amount = 0, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,GetCustomerPostingGroupRecAccNo(SalesHeader."Sell-to Customer No."),0,0);
      // [THEN] G/L Account 5380 <Customer Prepayment VAT 10 %> Amount = 100010, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,GeneralPostingSetup."Sales Prepayments Account",100010,0);
      // [THEN] G/L Account 6120 <Sales, Retail - EU> Amount = -100010, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,SalesLine."No.",-100010,0);
    END;

    LOCAL PROCEDURE Initialize@100();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateVATPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE TwoDocLinesPrepmt100Pct_Case376958@48(UseDiffVATGroups@1005 : Boolean;CompressPrepmt@1003 : Boolean;CurrencyCode@1002 : Code[10]) InvoiceNo : Code[20];
    VAR
      VATPostingSetup@1000 : ARRAY [2] OF Record 325;
      SalesHeader@1001 : Record 36;
    BEGIN
      Initialize;
      CreateTwoVATPostingSetups(VATPostingSetup,21);

      CreateSalesDoc(
        SalesHeader,SalesHeader."Document Type"::Order,VATPostingSetup[1]."VAT Bus. Posting Group",CurrencyCode,FALSE,CompressPrepmt);
      AddSalesOrderLinesCase376958(SalesHeader,VATPostingSetup,UseDiffVATGroups);

      PostSalesPrepmtInvoice(SalesHeader);
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      VerifyGLEntryAmount(InvoiceNo,GetCustomerPostingGroupRecAccNo(SalesHeader."Sell-to Customer No."),0,0);
      VerifyGLEntryCount(InvoiceNo,4);
      VerifyVATEntryCount(InvoiceNo,0);
    END;

    LOCAL PROCEDURE DisableStockoutWarning@26(VAR OldStockoutWarning@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        OldStockoutWarning := "Stockout Warning";
        VALIDATE("Stockout Warning",FALSE);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE PrepareSOPostPrepmtAndShip@2(VAR SalesOrderHeader@1000 : Record 36);
    VAR
      SalesOrderLine@1003 : Record 37;
    BEGIN
      PrepareSalesOrder(SalesOrderHeader);
      AddSalesOrderLine(
        SalesOrderLine,SalesOrderHeader,
        LibraryRandom.RandDecInRange(10,100,2),
        LibraryRandom.RandDecInRange(1000,2000,2),
        100,
        LibraryRandom.RandDecInRange(10,50,2));
      PostSalesPrepmtInvoice(SalesOrderHeader);
      LibrarySales.PostSalesDocument(SalesOrderHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateInvWithGetShipLines@6(VAR SalesInvoiceHeader@1000 : Record 36;SalesOrderHeader@1001 : Record 36);
    BEGIN
      SalesInvoiceHeader."Sell-to Customer No." := SalesOrderHeader."Sell-to Customer No.";
      CreateSalesInvoice(SalesInvoiceHeader,SalesOrderHeader."Prices Including VAT");
      GetShipmentLine(SalesInvoiceHeader,SalesOrderHeader."Last Shipping No.");
    END;

    LOCAL PROCEDURE PrepareSalesOrderWithPostedPrepmtInv@1017(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;NoOfLines@1004 : Integer;PositiveDiff@1002 : Boolean);
    VAR
      i@1005 : Integer;
    BEGIN
      PrepareSalesOrder(SalesHeader);
      FOR i := 1 TO NoOfLines DO
        AddSalesOrderLine100PctPrepmt(SalesLine,SalesHeader,PositiveDiff);

      PostSalesPrepmtInvoice(SalesHeader);

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Quantity,'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          UpdateQtysInLine(SalesLine,GetQtyToShipTFS332246(PositiveDiff),0);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PrepareSalesOrder@1011(VAR SalesHeader@1002 : Record 36);
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateSalesOrder(SalesHeader,VATPostingSetup."VAT Bus. Posting Group",SalesHeader."Prices Including VAT");
    END;

    LOCAL PROCEDURE CreateTwoVATPostingSetups@11(VAR VATPostingSetup@1000 : ARRAY [2] OF Record 325;VATRate@1001 : Decimal);
    VAR
      DummyGLAccount@1003 : Record 15;
      i@1004 : Integer;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup[1],VATPostingSetup[1]."VAT Calculation Type"::"Normal VAT",VATRate);

      DummyGLAccount."VAT Bus. Posting Group" := VATPostingSetup[1]."VAT Bus. Posting Group";
      DummyGLAccount."VAT Prod. Posting Group" := VATPostingSetup[1]."VAT Prod. Posting Group";
      VATPostingSetup[2].GET(VATPostingSetup[1]."VAT Bus. Posting Group",LibraryERM.CreateRelatedVATPostingSetup(DummyGLAccount));
      VATPostingSetup[2].VALIDATE("VAT Identifier",LibraryUtility.GenerateGUID);
      VATPostingSetup[2].MODIFY(TRUE);

      FOR i := 1 TO ARRAYLEN(VATPostingSetup) DO
        UpdateVATPostingSetupAccounts(VATPostingSetup[i]);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@18(VAR SalesHeader@1000 : Record 36;PricesInclVAT@1001 : Boolean);
    BEGIN
      CreateSalesDoc(SalesHeader,SalesHeader."Document Type"::Invoice,'','',PricesInclVAT,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@20(VAR SalesHeader@1000 : Record 36;VATBusPostingGroupCode@1002 : Code[10];PricesInclVAT@1001 : Boolean);
    BEGIN
      CreateSalesDoc(SalesHeader,SalesHeader."Document Type"::Order,VATBusPostingGroupCode,'',PricesInclVAT,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDoc@7(VAR SalesHeader@1000 : Record 36;DocumentType@1005 : Option;VATBusPostingGroupCode@1002 : Code[10];CurrencyCode@1004 : Code[10];PricesInclVAT@1001 : Boolean;CompressPrepmt@1006 : Boolean);
    VAR
      CustomerNo@1003 : Code[20];
    BEGIN
      IF SalesHeader."Sell-to Customer No." = '' THEN
        CustomerNo := CreateCustomerWithVATBusPostGr(VATBusPostingGroupCode)
      ELSE
        CustomerNo := SalesHeader."Sell-to Customer No.";
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        VALIDATE("Compress Prepayment",CompressPrepmt);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateCustomerWithVATBusPostGr@19(VATBusPostingGroupCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        UpdateCustomerInvoiceRoundingAccount("Customer Posting Group","VAT Bus. Posting Group");
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateCurrencyCodeWithRandomExchRate@13() : Code[10];
    BEGIN
      EXIT(UpdateCurrencyInvRoundPrecision(LibraryERM.CreateCurrencyWithRandomExchRates));
    END;

    LOCAL PROCEDURE CreateCurrencyCodeWithExchRate@42(ExchRate@1001 : Decimal) : Code[10];
    BEGIN
      EXIT(UpdateCurrencyInvRoundPrecision(LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchRate,ExchRate)));
    END;

    LOCAL PROCEDURE AddSalesOrderLine@12(VAR SalesLine@1001 : Record 37;SalesHeader@1005 : Record 36;Qty@1000 : Decimal;UnitPrice@1002 : Decimal;PrepmtPct@1003 : Decimal;DiscountPct@1004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,Qty);
      UpdateGenPostingSetupPrepmtAccounts(SalesLine,SalesLine."VAT Prod. Posting Group");
      UpdateSalesLine(SalesLine,UnitPrice,DiscountPct,PrepmtPct);
    END;

    LOCAL PROCEDURE AddSalesOrderLineWithPrepmtVATProdGroup@24(VAR SalesLine@1001 : Record 37;SalesHeader@1005 : Record 36;VATProdPostingGroupCode@1006 : Code[10];PrepmtAccVATProdPostingGroup@1010 : Code[10];Qty@1000 : Decimal;UnitPrice@1002 : Decimal);
    VAR
      VATPostingSetup@1007 : Record 325;
      GLAccount@1008 : Record 15;
    BEGIN
      VATPostingSetup.GET(SalesHeader."VAT Bus. Posting Group",VATProdPostingGroupCode);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale),Qty);
      UpdateGenPostingSetupPrepmtAccounts(SalesLine,PrepmtAccVATProdPostingGroup);
      UpdateSalesLine(SalesLine,UnitPrice,0,100);
    END;

    LOCAL PROCEDURE AddSalesOrderLine100PctPrepmt@29(VAR SalesLine@1002 : Record 37;SalesHeader@1001 : Record 36;PositiveDiff@1000 : Boolean);
    BEGIN
      AddSalesOrderLine(SalesLine,SalesHeader,GetLineQuantityTFS332246(PositiveDiff),3.99,100,0);
    END;

    LOCAL PROCEDURE AddSalesOrderLinesCase376958@33(SalesHeader@1000 : Record 36;VATPostingSetup@1001 : ARRAY [2] OF Record 325;UseDiffVATGroups@1004 : Boolean);
    VAR
      SalesLine@1002 : Record 37;
      VATProdPostingGroupCode2@1003 : Code[10];
    BEGIN
      IF UseDiffVATGroups THEN
        VATProdPostingGroupCode2 := VATPostingSetup[2]."VAT Prod. Posting Group"
      ELSE
        VATProdPostingGroupCode2 := VATPostingSetup[1]."VAT Prod. Posting Group";

      AddSalesOrderLineWithPrepmtVATProdGroup(
        SalesLine,SalesHeader,VATPostingSetup[1]."VAT Prod. Posting Group",VATPostingSetup[1]."VAT Prod. Posting Group",1,0.055);
      AddSalesOrderLineWithPrepmtVATProdGroup(
        SalesLine,SalesHeader,VATProdPostingGroupCode2,VATPostingSetup[1]."VAT Prod. Posting Group",1,95.3);
    END;

    LOCAL PROCEDURE FindPrepmtInvoice@44(CustomerNo@1000 : Code[20];OrderNo@1002 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETRANGE("Sell-to Customer No.",CustomerNo);
        SETRANGE("Prepayment Invoice",TRUE);
        SETRANGE("Prepayment Order No.",OrderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE GetQtyToShipTFS332246@9(PositiveDiff@1000 : Boolean) : Decimal;
    BEGIN
      IF PositiveDiff THEN
        EXIT(2.6);
      EXIT(2.5);
    END;

    LOCAL PROCEDURE GetLineQuantityTFS332246@1007(PositiveDiff@1000 : Boolean) : Decimal;
    BEGIN
      IF PositiveDiff THEN
        EXIT(7.5);
      EXIT(7.6);
    END;

    LOCAL PROCEDURE GetSpecialLineDiscPct@1023() : Decimal;
    BEGIN
      EXIT(29.72);
    END;

    LOCAL PROCEDURE GetShipmentLine@1025(SalesHeader@1000 : Record 36;ShipmentNo@1001 : Code[20]);
    VAR
      SalesShptLine@1003 : Record 111;
      SalesGetShpt@1002 : Codeunit 64;
    BEGIN
      SalesGetShpt.SetSalesHeader(SalesHeader);
      SalesShptLine.SETRANGE("Document No.",ShipmentNo);
      SalesGetShpt.CreateInvLines(SalesShptLine);
    END;

    LOCAL PROCEDURE GetCustomerPostingGroupRecAccNo@37(CustomerNo@1000 : Code[20]) : Code[20];
    VAR
      Customer@1002 : Record 18;
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      EXIT(CustomerPostingGroup."Receivables Account");
    END;

    LOCAL PROCEDURE PostSalesPrepmtInvoice@10(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesPostPrepayments@1001 : Codeunit 442;
    BEGIN
      SalesPostPrepayments.Invoice(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateQtysInLine@1006(VAR SalesLine@1000 : Record 37;QtyToShip@1001 : Decimal;QtyToInvoice@1002 : Decimal);
    BEGIN
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateSalesLine@34(VAR SalesLine@1000 : Record 37;NewUnitPrice@1001 : Decimal;NewDiscountPct@1002 : Decimal;NewPrepmtPct@1003 : Decimal);
    BEGIN
      WITH SalesLine DO BEGIN
        VALIDATE("Unit Price",NewUnitPrice);
        VALIDATE("Line Discount %",NewDiscountPct);
        VALIDATE("Prepayment %",NewPrepmtPct);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateVATPostingSetupAccounts@1(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      WITH VATPostingSetup DO BEGIN
        VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountWithSalesSetup);
        VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountWithPurchSetup);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateGenPostingSetupPrepmtAccounts@23(SalesLine@1001 : Record 37;PrepmtAccVATProdPostingGroup@1004 : Code[10]);
    VAR
      VATPostingSetup@1003 : Record 325;
      GeneralPostingSetup@1000 : Record 252;
      GLAccount@1002 : Record 15;
    BEGIN
      VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group");
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      IF GeneralPostingSetup."Sales Prepayments Account" = '' THEN BEGIN
        GeneralPostingSetup.VALIDATE("Sales Prepayments Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale));
        GeneralPostingSetup.MODIFY(TRUE);
      END ELSE BEGIN
        GLAccount.GET(GeneralPostingSetup."Sales Prepayments Account");
        GLAccount.VALIDATE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
        GLAccount.VALIDATE("VAT Prod. Posting Group",PrepmtAccVATProdPostingGroup);
        GLAccount.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateCustomerInvoiceRoundingAccount@17(CustomerPostingGroupCode@1005 : Code[10];VATBusPostingGroupCode@1006 : Code[10]);
    VAR
      VATPostingSetup@1004 : Record 325;
      VATProductPostingGroup@1003 : Record 324;
      CustomerPostingGroup@1001 : Record 92;
      GLAccount@1000 : Record 15;
    BEGIN
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroupCode,VATProductPostingGroup.Code);

      CustomerPostingGroup.VALIDATE(
        "Invoice Rounding Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale));
      CustomerPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCurrencyInvRoundPrecision@41(CurrencyCode@1000 : Code[10]) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        GET(CurrencyCode);
        VALIDATE("Invoice Rounding Precision",0.01);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE OpenSalesInvoicePage@4(VAR SalesInvoice@1000 : TestPage 43;SalesInvoiceHeader@1001 : Record 36);
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.GOTORECORD(SalesInvoiceHeader);
      SalesInvoice.SalesLines.LAST;
    END;

    LOCAL PROCEDURE VerifyZeroCustomerAccEntry@1014();
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        FINDLAST;
        CALCFIELDS(Amount);
        Assert.AreEqual(0,Amount,'Expected zero Customer Ledger Entry due to 100% prepayment.');
      END;
    END;

    LOCAL PROCEDURE VerifyLineAmountExpectedError@5(ErrorTemplate@1001 : Text;ExpectedLineAmount@1002 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      Assert.ExpectedErrorCode('Validation');
      Assert.ExpectedError(SalesLine.FIELDCAPTION("Line Amount"));
      Assert.ExpectedError(STRSUBSTNO(ErrorTemplate,ExpectedLineAmount));
    END;

    LOCAL PROCEDURE VerifyGLEntryAmount@31(DocumentNo@1003 : Code[20];GLAccountNo@1004 : Code[20];ExpectedAmount@1001 : Decimal;ExpectedVATAmount@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
        Assert.AreEqual(ExpectedAmount,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmount,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@32(DocumentNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryAccountCount@38(DocumentNo@1003 : Code[20];GLAccountNo@1002 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      DummyGLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryBalance@21(DocumentNo@1003 : Code[20];ExpectedAmountBalance@1001 : Decimal;ExpectedVATAmountBalance@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        CALCSUMS(Amount,"VAT Amount");
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmountBalance,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryAccountBalance@47(DocumentNo@1003 : Code[20];GLAccountNo@1004 : Code[20];ExpectedAmountBalance@1001 : Decimal;ExpectedVATAmountBalance@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        CALCSUMS(Amount,"VAT Amount");
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmountBalance,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyVATEntryCount@36(DocumentNo@1001 : Code[20];ExpectedCount@1002 : Integer);
    VAR
      DummyVATEntry@1000 : Record 254;
    BEGIN
      DummyVATEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyVATEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyVATEntryBalance@22(DocumentNo@1001 : Code[20];ExpectedBaseBalance@1004 : Decimal;ExpectedAmountBalance@1003 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        CALCSUMS(Base,Amount);
        Assert.AreEqual(ExpectedBaseBalance,Base,FIELDCAPTION(Base));
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Prepayment] [Rounding] [Sales]
    }
    END.
  }
}

