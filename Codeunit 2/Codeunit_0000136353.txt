OBJECT Codeunit 136353 UT T Job Planning Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryJob@1006 : Codeunit 131920;
      LibraryInventory@1009 : Codeunit 132201;
      LibrarySetupStorage@1014 : Codeunit 131009;
      LibraryVariableStorage@1008 : Codeunit 131004;
      LibraryWarehouse@1007 : Codeunit 132204;
      LibraryRandom@1010 : Codeunit 130440;
      LibraryERM@1001 : Codeunit 131300;
      LibraryResource@1024 : Codeunit 130511;
      LibrarySales@1003 : Codeunit 130509;
      IsInitialized@1005 : Boolean;
      EmptyLocationCodeErr@1011 : TextConst 'ENU=Location Code must have a value in Order Promising Line';
      ActualTxt@1012 : TextConst 'ENU="Actual: "';
      TestFieldErrorCodeTxt@1013 : TextConst 'ENU=TestWrapped:TestField';
      CannotDeleteResourceErr@1016 : TextConst '@@@="%1 = Resource No.";ENU=You cannot delete resource %1 because it is used in one or more job planning lines.';
      CannotRemoveJobPlanningLineErr@1002 : TextConst 'ENU=It is not possible to deleted job planning line transferred to an invoice.';
      RecordExistErr@1004 : TextConst 'ENU=Job Planning Line page should be empty!';

    [Test]
    PROCEDURE TestInitialization@3();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      WITH JobPlanningLine DO BEGIN
        // Verify that Quantities, Total Costs and Line Amounts are initialized correctly.
        Assert.AreEqual(Quantity,"Remaining Qty.",
          'Remaining Qty. is not initialized correctly.');
        Assert.AreEqual("Quantity (Base)","Remaining Qty. (Base)",
          'Remaining Qty. (Base) is not initialized correctly.');
        Assert.AreEqual(0,"Qty. Posted",
          'Qty. Posted is not initialized correctly.');
        Assert.AreEqual(Quantity,"Qty. to Transfer to Journal",
          'Qty. to Post is not initialized correctly.');
        Assert.AreEqual("Total Cost","Remaining Total Cost",
          'Remaining Total Cost is not initialized correctly.');
        Assert.AreEqual("Total Cost (LCY)","Remaining Total Cost (LCY)",
          'Remaining Total Cost (LCY) is not initialized correctly.');
        Assert.AreEqual("Line Amount","Remaining Line Amount",
          'Remaining Line Amount is not initialized correctly.');
        Assert.AreEqual("Line Amount (LCY)","Remaining Line Amount (LCY)",
          'Remaining Line Amount (LCY) is not initialized correctly.');
        Assert.AreEqual(0,"Posted Total Cost",
          'Posted Total Cost is not initialized correctly.');
        Assert.AreEqual(0,"Posted Total Cost (LCY)",
          'Posted Total Cost (LCY) is not initialized correctly.');
        Assert.AreEqual(0,"Posted Line Amount",
          'Posted Line Amount is not initialized correctly.');
        Assert.AreEqual(0,"Posted Line Amount (LCY)",
          'Posted Line Amount (LCY) is not initialized correctly.');
        Assert.AreEqual(0,"Qty. Transferred to Invoice",
          'Qty. Transferred is not initialized correctly.');
        Assert.AreEqual(0,"Qty. to Transfer to Invoice",
          'Qty. to Transfer is not initialized correctly.');
        Assert.AreEqual(0,"Qty. Invoiced",
          'Qty. Invoiced is not initialized correctly.');
        Assert.AreEqual(0,"Qty. to Invoice",
          'Qty. to Invoice is not initialized correctly.');
      END;
    END;

    [Test]
    PROCEDURE TestDeletion@11();
    VAR
      JobLedgerEntry@1000 : Record 169;
      JobPlanningLine@1003 : Record 1003;
      JobUsageLink@1001 : Record 1020;
      JobPlanningLineInvoice@1002 : Record 1022;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Validate that a Job Planning Line can be deleted as long as no usage link exists.
      Assert.IsTrue(JobPlanningLine.DELETE(TRUE),'Job Planning Line could not be deleted.');

      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Validate that a Job Planning Line can't be deleted if a usage link exists.
      JobLedgerEntry.INIT;
      JobUsageLink.Create(JobPlanningLine,JobLedgerEntry);
      ASSERTERROR JobPlanningLine.DELETE(TRUE);

      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Validate that a Job Planning Line cannot be deleted if the line is transferred.
      CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,1);
      ASSERTERROR JobPlanningLine.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TestFieldUsageLinkApplyULTrue@4();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Verify that Usage Link is set to TRUE for Job Planning Lines of Line Type "Schedule" and Jobs with "Apply Usage Link" enabled.
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage Link is not TRUE by default.');

      // Verify that Usage Link is set to FALSE when Line Type is set to "Contract".
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Contract);
      Assert.IsFalse(JobPlanningLine."Usage Link",'Usage Link is not set to FALSE when Line Type changes to Contract.');

      // Verify that Usage Link is re-set to TRUE for Job Planning Lines of Line Type "Both Schedule and Contract".
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::"Both Schedule and Contract");
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage Link is not TRUE when setting type to Both Schedule and Contract.');

      // Verify that Usage Link can't be unchecked if Line Type includes "Schedule".
      JobPlanningLine.VALIDATE("Usage Link",FALSE);
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage Link is not TRUE type includes Schedule and Apply Usage Link is checked.');
    END;

    [Test]
    PROCEDURE TestFieldUsageLinkApplyULFalse@10();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,FALSE);

      // Verify that Usage Link is not set on Job Planning Lines of Line Type "Schedule" if the Jobs "Apply Usage Link" is disabled.
      JobPlanningLine.VALIDATE("Usage Link",FALSE);
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Schedule);
      Assert.IsFalse(JobPlanningLine."Usage Link",
        'Usage Link is not set to FALSE when Line Type is set to "Schedule" and Jobs "Apply Usage Link" is disabled.');
    END;

    [Test]
    PROCEDURE TestFieldQuantity@18();
    VAR
      JobPlanningLineInvoice@1000 : Record 1022;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Verify that Quantity cannot be set to less than Quantity Posted.
      JobPlanningLine.VALIDATE("Qty. Posted",LibraryRandom.RandInt(JobPlanningLine.Quantity));
      ASSERTERROR JobPlanningLine.VALIDATE(Quantity,JobPlanningLine."Qty. Posted" - 1);

      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Verify that Quantity cannot be set to less than Qty. Transferred.
      CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(JobPlanningLine.Quantity));
      JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
      ASSERTERROR JobPlanningLine.VALIDATE(Quantity,JobPlanningLine."Qty. Transferred to Invoice" - 1);
    END;

    [Test]
    PROCEDURE TestFieldRemainingQty@8();
    VAR
      JobPlanningLine@1002 : Record 1003;
      QtyToPost@1001 : Decimal;
      QtyDelta@1000 : Decimal;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      WITH JobPlanningLine DO BEGIN
        // Post usage to give Remaining Qty. a value.
        QtyToPost := LibraryRandom.RandInt(Quantity);
        Use(QtyToPost,0,0);

        // Verify that Remaining Qty. changes correctly, when Quantity is increased.
        QtyDelta := LibraryRandom.RandInt(Quantity);
        VALIDATE(Quantity,Quantity + QtyDelta);
        Assert.AreEqual(Quantity - QtyToPost,"Remaining Qty.",'Remaining Qty. has wrong value after increasing Quantity.');
        // Test only valid because no Unit Of Measure Code is defined:
        TESTFIELD("Qty. per Unit of Measure",1);
        Assert.AreEqual("Remaining Qty.","Remaining Qty. (Base)",
          'Remaining Qty. (Base) is not updated correctly');

        // Verify that Remaining Qty. changes correctly, when Quantity is decreased.
        QtyDelta := LibraryRandom.RandInt("Remaining Qty.");
        VALIDATE(Quantity,Quantity - QtyDelta);
        Assert.AreEqual(Quantity - QtyToPost,"Remaining Qty.",'Remaining Qty. has wrong value after decreasing Quantity.');
        // Test only valid because no Unit Of Measure Code is defined:
        TESTFIELD("Qty. per Unit of Measure",1);
        Assert.AreEqual("Remaining Qty.","Remaining Qty. (Base)",
          'Remaining Qty. (Base) is not updated correctly');

        // Verify that Remaining Qty. is reset to 0 when "No." is set to 0.
        VALIDATE("No.",'');
        Assert.AreEqual(0,"Remaining Qty.",'Remaining Qty. is not set to 0 when No. is set to 0.');
        // Test only valid because no Unit Of Measure Code is defined:
        TESTFIELD("Qty. per Unit of Measure",1);
        Assert.AreEqual("Remaining Qty.","Remaining Qty. (Base)",
          'Remaining Qty. (Base) is not updated correctly');
      END;
    END;

    [Test]
    PROCEDURE TestFieldQtyTransferred@21();
    VAR
      JobPlanningLineInvoice@1000 : Record 1022;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,FALSE);

      WITH JobPlanningLine DO BEGIN
        VALIDATE("Line Type","Line Type"::Contract);
        CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(Quantity));

        // Verify that the Line Type can be changed as long as the Line Type includes type Contract.
        VALIDATE("Line Type","Line Type"::"Both Schedule and Contract");
        Assert.AreEqual("Line Type","Line Type"::"Both Schedule and Contract",
          'Line Type was not updated correctly.');

        // Verify that the Line Type cannot be changed if the Line Type does not include type Contract.
        ASSERTERROR VALIDATE("Line Type","Line Type"::Schedule);
      END;

      CreateJobPlanningLine(JobPlanningLine,FALSE);

      WITH JobPlanningLine DO BEGIN
        VALIDATE("Line Type","Line Type"::Contract);
        CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(Quantity));

        // Verify that the No. cannot be changed if Qty. Transferred <> 0.
        ASSERTERROR VALIDATE("No.",'');
      END;
    END;

    [Test]
    PROCEDURE TestFieldQtyToTransfer@31();
    VAR
      JobPlanningLineInvoice@1000 : Record 1022;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,FALSE);

      WITH JobPlanningLine DO BEGIN
        // Verify that Qty. to Transfer is set correctly when Line Type is Contract.
        CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(Quantity));
        VALIDATE("Line Type","Line Type"::Contract);
        Assert.AreEqual("Qty. to Transfer to Invoice",Quantity - "Qty. Transferred to Invoice",
          'Qty. to Transfer was not set correctly when Line Type is Contract.');

        // Verify that Qty. to Transfer is updated correctly when Qty. Transferred changes.
        JobPlanningLineInvoice."Quantity Transferred" := LibraryRandom.RandInt(Quantity);
        JobPlanningLineInvoice.MODIFY;
        UpdateQtyToTransfer;
        Assert.AreEqual("Qty. to Transfer to Invoice",Quantity - "Qty. Transferred to Invoice",
          'Qty. to Transfer was not updated correctly when Qty Transferred changed.');

        // Verify that Qty. to Transfer is updated correctly when Quantity changes.
        VALIDATE(Quantity,JobPlanningLineInvoice."Quantity Transferred" + LibraryRandom.RandInt(100));
        Assert.AreEqual("Qty. to Transfer to Invoice",Quantity - "Qty. Transferred to Invoice",
          'Qty. to Transfer was not updated correctly when Quantity changed.');

        // Verify that Qty. to Transfer is set correctly when Line Type is Schedule.
        JobPlanningLineInvoice.DELETE;
        CALCFIELDS("Qty. Transferred to Invoice","Qty. Invoiced");
        VALIDATE("Line Type","Line Type"::Schedule);
        Assert.AreEqual("Qty. to Transfer to Invoice",0,
          'Qty. to Transfer was not set correctly when Line Type is Schedule.');

        // Verify that Qty. to Transfer is set correctly when Line Type is Both Schedule and Contract.
        VALIDATE("Line Type","Line Type"::"Both Schedule and Contract");
        CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(Quantity));
        Assert.AreEqual("Qty. to Transfer to Invoice",Quantity - "Qty. Transferred to Invoice",
          'Qty. to Transfer was not set correctly when Line Type is Both Schedule and Contract.');
      END;
    END;

    [Test]
    PROCEDURE TestFieldQtyToInvoice@9();
    VAR
      JobPlanningLineInvoice@1000 : Record 1022;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,FALSE);

      WITH JobPlanningLine DO BEGIN
        // Verify that Qty. to Invoice is set correctly when Line Type is Contract.
        CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,LibraryRandom.RandInt(Quantity));
        VALIDATE("Line Type","Line Type"::Contract);
        Assert.AreEqual("Qty. to Invoice",Quantity - "Qty. Invoiced",
          'Qty. to Invoice was not set correctly when Line Type is Contract.');

        // Verify that Qty. to Invoice is set correctly when Line Type is Schedule.
        JobPlanningLineInvoice.DELETE;
        CALCFIELDS("Qty. Transferred to Invoice","Qty. Invoiced");
        VALIDATE("Line Type","Line Type"::Schedule);
        Assert.AreEqual("Qty. to Invoice",0,
          'Qty. to Invoice was not set correctly when Line Type is Schedule.');

        // Verify that Qty. to Invoice is set correctly when Line Type is Both Schedule and Contract.
        VALIDATE("Line Type","Line Type"::"Both Schedule and Contract");
        Assert.AreEqual("Qty. to Invoice",Quantity - "Qty. Invoiced",
          'Qty. to Invoice was not set correctly when Line Type is Both Schedule and Contract.');
      END;
    END;

    [Test]
    PROCEDURE TestFunctionUse@12();
    VAR
      JobPlanningLine@1005 : Record 1003;
      QtyToPost@1000 : Decimal;
      TotalCostToPost@1001 : Decimal;
      TotalCostToPostLCY@1003 : Decimal;
      LineAmountToPost@1002 : Decimal;
      LineAmountToPostLCY@1004 : Decimal;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,TRUE);

      // Post usage using function Use().
      QtyToPost := LibraryRandom.RandInt(JobPlanningLine.Quantity);
      TotalCostToPost := QtyToPost * JobPlanningLine."Unit Cost";
      TotalCostToPostLCY := QtyToPost * JobPlanningLine."Unit Cost (LCY)";
      LineAmountToPost := HelperCalcLineAmount(JobPlanningLine,QtyToPost);
      LineAmountToPostLCY := HelperCalcLineAmountLCY(JobPlanningLine,QtyToPost);

      JobPlanningLine.Use(QtyToPost,TotalCostToPost,LineAmountToPost);

      WITH JobPlanningLine DO BEGIN
        // Verify that Quantities, Total Costs and Line Amounts are updated correctly after posting usage.
        Assert.AreEqual(Quantity - "Qty. Posted","Remaining Qty.",
          'Remaining Qty. has wrong value after posting usage.');
        Assert.AreEqual(ROUND("Remaining Qty." * "Qty. per Unit of Measure",0.00001),"Remaining Qty. (Base)",
          'Remaining Qty. (Base) has wrong value after posting usage.');
        Assert.AreEqual(QtyToPost,"Qty. Posted",
          'Qty. Posted has wrong value after posting usage.');
        Assert.AreEqual(Quantity - "Qty. Posted","Qty. to Transfer to Journal",
          'Qty. to Post has wrong value after posting usage.');
        Assert.AreNearlyEqual("Remaining Qty." * "Unit Cost","Remaining Total Cost",0.01,
          'Remaining Total Cost has wrong value after posting usage.');
        Assert.AreNearlyEqual("Remaining Qty." * "Unit Cost (LCY)","Remaining Total Cost (LCY)",0.01,
          'Remaining Total Cost (LCY) has wrong value after posting usage.');
        Assert.AreNearlyEqual(HelperCalcLineAmount(JobPlanningLine,"Remaining Qty."),"Remaining Line Amount",0.01,
          'Remaining Line Amount has wrong value after posting usage.');
        Assert.AreNearlyEqual(HelperCalcLineAmountLCY(JobPlanningLine,"Remaining Qty."),"Remaining Line Amount (LCY)",0.01,
          'Remaining Line Amount (LCY) has wrong value after posting usage.');
        Assert.AreNearlyEqual(TotalCostToPost,"Posted Total Cost",0.01,
          'Posted Total Cost has wrong value after posting usage.');
        Assert.AreNearlyEqual(TotalCostToPostLCY,"Posted Total Cost (LCY)",0.01,
          'Posted Total Cost (LCY) has wrong value after posting usage.');
        Assert.AreNearlyEqual(LineAmountToPost,"Posted Line Amount",0.01,
          'Posted Line Amount has wrong value after posting usage.');
        Assert.AreNearlyEqual(LineAmountToPostLCY,"Posted Line Amount (LCY)",0.01,
          'Posted Line Amount (LCY) has wrong value after posting usage.');
      END;
    END;

    [Test]
    PROCEDURE DrilldownOnQtyInvoiced@13();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      DrilldownOnQtyField(JobPlanningLine."Qty. Invoiced");
    END;

    [Test]
    PROCEDURE DrilldownOnQtyTransferredToInvoice@14();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      DrilldownOnQtyField(JobPlanningLine."Qty. Transferred to Invoice");
    END;

    [Test]
    [HandlerFunctions(OrderPromisingModalPagehandler)]
    PROCEDURE CreateOrderPromisingFromJobPlanningLineWithLocationMandatory@15();
    VAR
      JobPlanningLine@1001 : Record 1003;
      Location@1000 : Record 14;
    BEGIN
      // [FEATURE] [Order Promising] [Location Mandatory]
      // [SCENARIO 375033] If Location is set as mandatory, then it should be possible to create Order Promising from Job Planning Line with specified Location
      Initialize;

      // [GIVEN] Inventory Setup, where "Location Mondatory" is Yes
      LibraryInventory.SetLocationMandatory(TRUE);

      // [GIVEN] Job Planning Line with filled "Location Code"
      LibraryWarehouse.CreateLocation(Location);
      CreateJobPlanningLineWithLocation(JobPlanningLine,Location.Code);

      // [WHEN] Open Order Promising page from Job Planning Line
      OpenOrderPromissingPage(JobPlanningLine);

      // [THEN] Order Promising page is successfully opened
      // Is checked in OrderPromisingModalPagehandler
    END;

    [Test]
    [HandlerFunctions(OrderPromisingModalPagehandler)]
    PROCEDURE CreateOrderPromisingFromJobPlanningLineWithoutLocationMandatoryWhileNeeded@25();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // [FEATURE] [Order Promising] [Location Mandatory]
      // [SCENARIO 375033] If Location is set as mandatory, then it should not be possible to create Order Promising from Job Planning Line without specified Location
      Initialize;

      // [GIVEN] Inventory Setup, where "Location Mondatory" is Yes
      LibraryInventory.SetLocationMandatory(TRUE);

      // [GIVEN] Job Planning Line with blank "Location Code"
      CreateJobPlanningLineWithLocation(JobPlanningLine,'');

      // [WHEN] Open Order Promising page from Job Planning Line
      ASSERTERROR OpenOrderPromissingPage(JobPlanningLine);

      // [THEN] Order Promising page is successfully opened
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,EmptyLocationCodeErr) > 0,ActualTxt + GETLASTERRORTEXT);
      Assert.ExpectedErrorCode(TestFieldErrorCodeTxt);
    END;

    [Test]
    PROCEDURE JobPlanningLineUICreationLineTypeBothWithUsageLinkAndCurrency@16();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      JobTaskLines@1003 : TestPage 1002;
      JobPlanningLines@1002 : TestPage 1007;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 375593] Job Planning Line can be created through UI page with "Line Type"="Both Schedule and Contract" in case of "Apply Usage Link"=TRUE and foreign currency
      Initialize;

      // [GIVEN] Job with "Apply Usage Link"=TRUE, "Currency Code"=USD. Create Job Task.
      CreateJobAndJobTask(Job,JobTask,TRUE,CreateCurrency);

      // [GIVEN]  Open "Job Planning Lines" page from "Job Task Lines" page
      JobTaskLines.OPENEDIT;
      JobTaskLines.FILTER.SETFILTER("Job No.",Job."No.");
      JobPlanningLines.TRAP;
      JobTaskLines.JobPlanningLines.INVOKE;

      // [WHEN] Modify "Line Type" = "Both Schedule and Contract" on new line
      JobPlanningLines."Line Type".SETVALUE(JobPlanningLine."Line Type"::"Both Schedule and Contract");

      // [THEN] Job Planning Line is created with "Line Type" = "Both Schedule and Contract"
      JobPlanningLines."Line Type".ASSERTEQUALS(JobPlanningLine."Line Type"::"Both Schedule and Contract");
      JobPlanningLines.CLOSE;
    END;

    [Test]
    PROCEDURE CannotRemoveResourceWithJobPlanningLines@20();
    VAR
      VATPostingSetup@1001 : Record 325;
      Resource@1000 : Record 156;
      JobPlanningLine@1004 : Record 1003;
    BEGIN
      // [FEATURE] [Resouce]
      // [SCENARIO 375530] User is not allowed to remove resource if there are one more job planning lines associated

      Initialize;
      // [GIVEN] Resource "X"
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryResource.CreateResource(Resource,VATPostingSetup."VAT Bus. Posting Group");

      // [GIVEN] Job Planning line with Type = Resource and "No." = X"
      JobPlanningLine.INIT;
      JobPlanningLine.Type := JobPlanningLine.Type::Resource;
      JobPlanningLine."No." := Resource."No.";
      JobPlanningLine.INSERT;

      // [WHEN] Remove Resource
      ASSERTERROR Resource.DELETE(TRUE);

      // [THEN] Error message "You cannot delete Resource X" shown
      Assert.ExpectedError(STRSUBSTNO(CannotDeleteResourceErr,Resource."No."));
    END;

    [Test]
    PROCEDURE CannotRemoveTextJobPlanningLineTransferedToInvoice@1();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobPlanningLineInvoice@1003 : Record 1022;
    BEGIN
      // [SCENARIO 380580] It is not possible to remove Job Planning Line with Type = "Text" if this line was transfered to Sales Invoice

      Initialize;
      CreateJobAndJobTask(Job,JobTask,FALSE,'');
      CreateSimpleJobPlanningLine(JobPlanningLine,JobTask);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Text);
      JobPlanningLine.MODIFY(TRUE);
      CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,0);

      ASSERTERROR JobPlanningLine.DELETE(TRUE);

      Assert.ExpectedError(CannotRemoveJobPlanningLineErr);
    END;

    [Test]
    PROCEDURE LineDiscountPctInJobPlanningLineWhenAllowLineDiscDefinedInCustPriceGroup@2();
    VAR
      Item@1008 : Record 27;
      SalesLineDiscount@1007 : Record 7004;
      SalesPrice@1006 : Record 7002;
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      CustomerPriceGroupCode@1005 : Code[10];
    BEGIN
      // [FEATURE] [Discount] [Line Discount]
      // [SCENARIO 380764] "Line Discount %" of Job Planning Line has value when "Allow Line Disc." in Customer Posting Group is defined

      Initialize;

      // [GIVEN] Job and Job Task with Customer "C"
      CreateJobAndJobTask(Job,JobTask,FALSE,'');

      // [GIVEN] Customer Price Group with "Allow Line Disc." = TRUE defined for Customer "C"
      CustomerPriceGroupCode := SetAllowLineDiscOfCustPostGroup(Job,TRUE);

      // [GIVEN] Item "X"
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Sales Line Discount for Item "X", Customer "C" with "Line Discount %" = 10%
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",SalesLineDiscount."Sales Type"::Customer,
        Job."Bill-to Customer No.",WORKDATE,'','',Item."Base Unit of Measure",0);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      SalesLineDiscount.MODIFY(TRUE);

      // [GIVEN] Sales Price for Customer Posting Group of Customer "C"
      LibrarySales.CreateSalesPrice(
        SalesPrice,Item."No.",SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroupCode,
        WORKDATE,'','',Item."Base Unit of Measure",0,LibraryRandom.RandDec(100,2));

      // [GIVEN] Job Planning Line
      CreateSimpleJobPlanningLine(JobPlanningLine,JobTask);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);

      // [WHEN] Validate Item "X" on Job Planning Line
      JobPlanningLine.VALIDATE("No.",Item."No.");

      // [THEN] "Line Discount %" in Job Planning Line is 10%
      JobPlanningLine.TESTFIELD("Line Discount %",SalesLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE ZeroLineDiscountPctInJobPlanningLineWhenAllowLineDiscNotDefinedInCustPriceGroup@24();
    VAR
      Item@1007 : Record 27;
      SalesLineDiscount@1004 : Record 7004;
      SalesPrice@1003 : Record 7002;
      Job@1002 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      CustomerPriceGroupCode@1005 : Code[10];
    BEGIN
      // [FEATURE] [Discount] [Line Discount]
      // [SCENARIO 380764] "Line Discount %" of Job Planning Line is zero when "Allow Line Disc." in Customer Posting Group is not defined

      Initialize;

      // [GIVEN] Job and Job Task with Customer "C"
      CreateJobAndJobTask(Job,JobTask,FALSE,'');

      // [GIVEN] Customer Price Group with "Allow Line Disc." = FALSE defined for Customer "C"
      CustomerPriceGroupCode := SetAllowLineDiscOfCustPostGroup(Job,FALSE);

      // [GIVEN] Item "X"
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Sales Line Discount for Item "X", Customer "C" with "Line Discount %" = 10%
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",SalesLineDiscount."Sales Type"::Customer,
        Job."Bill-to Customer No.",WORKDATE,'','',Item."Base Unit of Measure",0);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      SalesLineDiscount.MODIFY(TRUE);

      // [GIVEN] Sales Price for Customer Posting Group of Customer "C"
      LibrarySales.CreateSalesPrice(
        SalesPrice,Item."No.",SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroupCode,
        WORKDATE,'','',Item."Base Unit of Measure",0,LibraryRandom.RandDec(100,2));

      // [GIVEN] Job Planning Line
      CreateSimpleJobPlanningLine(JobPlanningLine,JobTask);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);

      // [WHEN] Validate Item "X" on Job Planning Line
      JobPlanningLine.VALIDATE("No.",Item."No.");

      // [THEN] "Line Discount %" in Job Planning Line is zero
      JobPlanningLine.TESTFIELD("Line Discount %",0);
    END;

    [Test]
    PROCEDURE JobPlanningLineFromTaskLineWithJobNoFilter@22();
    VAR
      JobTaskLines@1003 : TestPage 1002;
      JobPlanningLines@1002 : TestPage 1007;
      JobNo@1001 : Code[20];
      SecondJobNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 381083] Filter for "Job No." is set changeless when "Job Planning Lines" page opened from Job Task Lines.
      Initialize;

      // [GIVEN] Job "J", Job Task "JT", "JT."Job No." = "J"
      // [GIVEN] Job Planning Line "JPL", "JPL"."Job No." = "J",  "JPL"."Job Task No." = "JT"
      // [GIVEN] Job "J1", Job Task "JT1", "JT1."Job No." = "J1"
      CreateJobAndJobPlanningLines(JobNo,SecondJobNo);

      // [GIVEN]  "Job Planning Lines" page opened from "Job Task Lines" page filtered on "J1" Job
      JobTaskLines.OPENEDIT;
      JobTaskLines.FILTER.SETFILTER("Job No.",SecondJobNo);
      JobPlanningLines.TRAP;
      JobTaskLines.JobPlanningLines.INVOKE;

      // [WHEN] Set JobPlanningLines "Job No." filter to "J"
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);

      // [THEN] Page JobPlanningLines is empty
      Assert.IsFalse(JobPlanningLines.FIRST,RecordExistErr);
      JobPlanningLines.CLOSE;
      JobTaskLines.CLOSE;
    END;

    [Test]
    PROCEDURE JobPlanningLineFromTaskCardWithJobNoFilter@26();
    VAR
      JobCard@1003 : TestPage 88;
      JobPlanningLines@1002 : TestPage 1007;
      JobNo@1001 : Code[20];
      SecondJobNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 381083] Filter for "Job No." is set changeless when "Job Planning Lines" page opened from Job Card.

      // [GIVEN] Job "J", Job Task "JT", "JT."Job No." = "J"
      // [GIVEN] Job Planning Line "JPL", "JPL"."Job No." = "J",  "JPL"."Job Task No." = "JT"
      // [GIVEN] Job "J1", Job Task "JT1", "JT1."Job No." = "J1"
      CreateJobAndJobPlanningLines(JobNo,SecondJobNo);

      // [GIVEN]  "Job Planning Lines" page opened from "Job Card" page filtered on "J1" Job
      JobCard.OPENEDIT;
      JobCard.FILTER.SETFILTER("No.",SecondJobNo);
      JobPlanningLines.TRAP;
      JobCard.JobPlanningLines.INVOKE;

      // [WHEN] Set JobPlanningLines "Job No." filter to "J"
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);

      // [THEN] Page JobPlanningLines is empty
      Assert.IsFalse(JobPlanningLines.FIRST,RecordExistErr);
      JobPlanningLines.CLOSE;
      JobCard.CLOSE;
    END;

    [Test]
    PROCEDURE JobPlanningLinesDrillDownFromJobTaskLines@23();
    VAR
      JobTaskLines@1003 : TestPage 1002;
      JobPlanningLines@1002 : TestPage 1007;
      JobTaskStatistics@1007 : TestPage 1024;
      JobNo@1001 : Code[20];
      SecondJobNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 381083] Filter for "Job No." is set changeless when Drill Down on Job Task Lines Statistics page.
      Initialize;

      // [GIVEN] Job "J", Job Task "JT", "JT."Job No." = "J"
      // [GIVEN] Job Planning Line "JPL", "JPL"."Job No." = "J",  "JPL"."Job Task No." = "JT"
      // [GIVEN] Job "J1", Job Task "JT1", "JT1."Job No." = "J1"
      CreateJobAndJobPlanningLines(JobNo,SecondJobNo);

      // [GIVEN]  Drill Down on Job Task Lines Statistic page filtered on "J1" Job
      JobTaskLines.OPENEDIT;
      JobTaskLines.FILTER.SETFILTER("Job No.",SecondJobNo);
      JobTaskStatistics.TRAP;
      JobTaskLines.JobTaskStatistics.INVOKE;
      JobPlanningLines.TRAP;
      JobTaskStatistics.SchedulePriceLCY.DRILLDOWN;

      // [WHEN] Set JobPlanningLines "Job No." filter to "J"
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);

      // [THEN] Page JobPlanningLines is empty
      Assert.IsFalse(JobPlanningLines.FIRST,RecordExistErr);

      JobPlanningLines.CLOSE;
      JobTaskStatistics.CLOSE;
      JobTaskLines.CLOSE;
    END;

    [Test]
    PROCEDURE JobPlanningLinesDrillDownFromJobCard@52();
    VAR
      JobCard@1003 : TestPage 88;
      JobPlanningLines@1002 : TestPage 1007;
      JobStatistics@1007 : TestPage 1025;
      JobNo@1001 : Code[20];
      SecondJobNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 381083] Filter for "Job No." is set changeless when Drill Down on Job Card Statistics page.
      Initialize;

      // [GIVEN] Job "J", Job Task "JT", "JT."Job No." = "J"
      // [GIVEN] Job Planning Line "JPL", "JPL"."Job No." = "J",  "JPL"."Job Task No." = "JT"
      // [GIVEN] Job "J1", Job Task "JT1", "JT1."Job No." = "J1"
      CreateJobAndJobPlanningLines(JobNo,SecondJobNo);

      // [GIVEN]  Drill Down on Job Card Statistic page filtered on "J1" Job
      JobCard.OPENEDIT;
      JobCard.FILTER.SETFILTER("No.",SecondJobNo);
      JobStatistics.TRAP;
      JobCard."Page Job Statistics".INVOKE;
      JobPlanningLines.TRAP;
      JobStatistics.SchedulePriceLCY.DRILLDOWN;

      // [WHEN] Set JobPlanningLines "Job No." filter to "J"
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);

      // [THEN] Page JobPlanningLines is empty
      Assert.IsFalse(JobPlanningLines.FIRST,RecordExistErr);

      JobPlanningLines.CLOSE;
      JobStatistics.CLOSE;
      JobCard.CLOSE;
    END;

    [Test]
    PROCEDURE UnitPriceNotChangedWhenLocationCodeIsValidated@27();
    VAR
      Item@1002 : Record 27;
      Location@1005 : Record 14;
      JobPlanningLine@1000 : Record 1003;
      JobTaskLines@1004 : TestPage 1002;
      JobPlanningLines@1003 : TestPage 1007;
      ExpectedUnitPrice@1001 : Decimal;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 201070] Unit price is not changed when "Location Code" is validated in Job Planning Line

      Initialize;

      // [GIVEN] Job Planning Line with Item "X" and "Unit Price" = 100
      CreateJobPlanningLine(JobPlanningLine,FALSE);
      ExpectedUnitPrice := JobPlanningLine."Unit Price";

      // [GIVEN] Item "X" has "Unit Price" = 90
      Item.GET(JobPlanningLine."No.");
      Item.VALIDATE("Unit Price",JobPlanningLine."Unit Price" + LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);

      // [GIVEN] Opened Job Planning Lines page
      JobTaskLines.OPENEDIT;
      JobTaskLines.FILTER.SETFILTER("Job No.",JobPlanningLine."Job No.");
      JobPlanningLines.TRAP;
      JobTaskLines.JobPlanningLines.INVOKE;
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] Set new location code in Job Planning Lines page
      JobPlanningLines."Location Code".SETVALUE(Location.Code);

      // [THEN] Value of "Unit Price" in Job Planning Lines page is not changed and equal 100
      JobPlanningLines."Unit Price".ASSERTEQUALS(ExpectedUnitPrice);
    END;

    [Test]
    PROCEDURE NoLineDiscountInJobPlanningLineWhenNoAllowLineDiscInSalesPriceForAllCustomersAndVariant@29();
    VAR
      Customer@1004 : Record 18;
      Item@1008 : Record 27;
      ItemVariant@1005 : Record 5401;
      SalesLineDiscount@1007 : Record 7004;
      CustomerDiscountGroup@1003 : Record 340;
      ItemDiscountGroup@1009 : Record 341;
      SalesPrice@1006 : Record 7002;
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // [FEATURE] [Discount] [Line Discount] [Item Variant]
      // [SCENARIO 212422] "Line Discount %" of Job Planning Line is zero when "Allow Line Disc." is No in Sales Price for "All Customers", Item with Variant and Customer has "Line Discount" from Customer Discount Group

      Initialize;

      // [GIVEN] Customer Discount Group "CUSTDISC" assigned to Customer "C"
      LibraryERM.CreateCustomerDiscountGroup(CustomerDiscountGroup);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Customer Disc. Group",CustomerDiscountGroup.Code);
      Customer.MODIFY(TRUE);

      // [GIVEN] Job and Job Task with Customer "C"
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",Customer."No.");
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [GIVEN] Item "X" with Variant "X1" and Item Discount Group "ITEMDISC"
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateVariant(ItemVariant,Item);
      LibraryERM.CreateItemDiscountGroup(ItemDiscountGroup);
      Item.VALIDATE("Item Disc. Group",ItemDiscountGroup.Code);
      Item.MODIFY(TRUE);

      // [GIVEN] Sales Line Discount with Customer Discount Group "CUSTDISC", Item Discount Group "ITEMDISC" and "Line Discount %" = 10
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::"Item Disc. Group",ItemDiscountGroup.Code,
        SalesLineDiscount."Sales Type"::"Customer Disc. Group",CustomerDiscountGroup.Code,WORKDATE,'','','',0);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      SalesLineDiscount.MODIFY(TRUE);

      // [GIVEN] Sales Price for All Customers for Item "X", Variant "X1" is 50, "Allow Line Disc." = No
      LibrarySales.CreateSalesPrice(
        SalesPrice,Item."No.",SalesPrice."Sales Type"::"All Customers",'',
        WORKDATE,'',ItemVariant.Code,Item."Base Unit of Measure",0,LibraryRandom.RandDec(100,2));
      SalesPrice.VALIDATE("Allow Line Disc.",FALSE);
      SalesPrice.MODIFY(TRUE);

      // [GIVEN] Job Planning Line with Item "X"
      CreateSimpleJobPlanningLine(JobPlanningLine,JobTask);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.VALIDATE("No.",Item."No.");

      // [WHEN] Validate Variant "X1" on Job Planning Line
      JobPlanningLine.VALIDATE("Variant Code",ItemVariant.Code);

      // [THEN] "Line Discount %" in Job Planning Line is 0%
      JobPlanningLine.TESTFIELD("Line Discount %",0);
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@37(VAR JobPlanningLine@1000 : Record 1003;ApplyUsageLink@1001 : Boolean);
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",ApplyUsageLink);
      Job.MODIFY;

      LibraryJob.CreateJobTask(Job,JobTask);

      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Unit Price",JobPlanningLine."Unit Cost" * (1 + LibraryRandom.RandInt(100) / 100));
      JobPlanningLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateJobAndJobPlanningLines@34(VAR JobNo@1000 : Code[20];VAR SecondJobNo@1001 : Code[20]);
    VAR
      Job@1002 : Record 167;
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::"Both Schedule and Contract",JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      JobNo := Job."No.";
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      SecondJobNo := Job."No.";
    END;

    LOCAL PROCEDURE DrilldownOnQtyField@42(FieldNo@1000 : Integer);
    VAR
      JobPlanningLineInvoice@1003 : Record 1022;
      JobPlanningLine@1004 : Record 1003;
      JobPlanningLines@1002 : TestPage 1007;
      JobInvoices@1001 : TestPage 1029;
    BEGIN
      Initialize;
      CreateJobPlanningLine(JobPlanningLine,FALSE);

      CreateJobPlanningLineInvoice(JobPlanningLineInvoice,JobPlanningLine,1);
      JobPlanningLines.OPENEDIT;
      JobPlanningLines.GOTORECORD(JobPlanningLine);

      JobInvoices.TRAP;
      CASE FieldNo OF
        JobPlanningLine."Qty. Invoiced":
          JobPlanningLines."Qty. Invoiced".DRILLDOWN;
        JobPlanningLine."Qty. Transferred to Invoice":
          JobPlanningLines."Qty. Transferred to Invoice".DRILLDOWN;
      END;

      JobPlanningLine.CALCFIELDS("Qty. Invoiced");
      JobInvoices."Quantity Transferred".ASSERTEQUALS(JobPlanningLine."Qty. Invoiced");
    END;

    LOCAL PROCEDURE HelperCalcLineAmount@5(JobPlanningLine@1002 : Record 1003;Qty@1000 : Decimal) : Decimal;
    VAR
      TotalPrice@1001 : Decimal;
    BEGIN
      TotalPrice := ROUND(Qty * JobPlanningLine."Unit Price",0.01);
      EXIT(TotalPrice - ROUND(TotalPrice * JobPlanningLine."Line Discount %" / 100,0.01));
    END;

    LOCAL PROCEDURE HelperCalcLineAmountLCY@6(JobPlanningLine@1002 : Record 1003;Qty@1000 : Decimal) : Decimal;
    VAR
      TotalPrice@1001 : Decimal;
    BEGIN
      TotalPrice := ROUND(Qty * JobPlanningLine."Unit Price (LCY)",0.01);
      EXIT(TotalPrice - ROUND(TotalPrice * JobPlanningLine."Line Discount %" / 100,0.01));
    END;

    LOCAL PROCEDURE CreateJobAndJobTask@40(VAR Job@1000 : Record 167;VAR JobTask@1001 : Record 1001;ApplyUsageLink@1002 : Boolean;CurrencyCode@1003 : Code[10]);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",ApplyUsageLink);
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineInvoice@19(VAR JobPlanningLineInvoice@1000 : Record 1022;VAR JobPlanningLine@1003 : Record 1003;Qty@1001 : Decimal);
    BEGIN
      JobPlanningLineInvoice.INIT;
      JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
      JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
      JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
      JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Posted Invoice";
      JobPlanningLineInvoice."Document No." := 'TEST';
      JobPlanningLineInvoice."Line No." := 10000;
      JobPlanningLineInvoice."Quantity Transferred" := Qty;
      JobPlanningLineInvoice."Transferred Date" := WORKDATE;
      JobPlanningLineInvoice.INSERT;
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithLocation@28(VAR JobPlanningLine@1004 : Record 1003;LocationCode@1000 : Code[10]);
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobAndJobTask(Job,JobTask,FALSE,'');
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.VALIDATE("Remaining Qty.",LibraryRandom.RandIntInRange(1,10));
      JobPlanningLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateCurrency@41() : Code[10];
    BEGIN
      EXIT(LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2)));
    END;

    LOCAL PROCEDURE CreateSimpleJobPlanningLine@36(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001);
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.VALIDATE("Job No.",JobTask."Job No.");
      JobPlanningLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      JobPlanningLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SetAllowLineDiscOfCustPostGroup@75(VAR Job@1000 : Record 167;AllowLineDisc@1001 : Boolean) : Code[10];
    VAR
      CustomerPriceGroup@1002 : Record 6;
    BEGIN
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      CustomerPriceGroup.VALIDATE("Allow Line Disc.",AllowLineDisc);
      CustomerPriceGroup.MODIFY(TRUE);
      Job.VALIDATE("Customer Price Group",CustomerPriceGroup.Code);
      Job.MODIFY(TRUE);
      EXIT(CustomerPriceGroup.Code);
    END;

    LOCAL PROCEDURE OpenOrderPromissingPage@33(VAR JobPlanningLine@1001 : Record 1003);
    VAR
      JobPlanningLines@1000 : TestPage 1007;
    BEGIN
      JobPlanningLines.OPENEDIT;
      JobPlanningLines.GOTORECORD(JobPlanningLine);
      LibraryVariableStorage.Enqueue(JobPlanningLine."Job No.");
      JobPlanningLines.OrderPromising.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderPromisingModalPagehandler@17(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      Assert.AreEqual(LibraryVariableStorage.DequeueText,OrderPromisingLines.FILTER.GETFILTER("Source ID"),'');
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Job] [UT]

      This unit test codeunit tests all fields added during implementation of feature 92820 - Planning and Execution Jobs and Service:

      "Usage Link"
      "Remaining Qty."
      "Remaining Total Cost"
      "Remaining Total Cost (LCY)"
      "Remaining Line Amount"
      "Remaining Line Amount (LCY)"
      "Qty. Posted"
      "Qty. to Post"
      "Posted Total Cost"
      "Posted Total Cost (LCY)"
      "Posted Line Amount"
      "Posted Line Amount (LCY)"
      "Qty. Transferred"
      "Qty. to Transfer"
      "Qty. Invoiced" (does not need to be tested. Is never changed from within table)
      "Qty. to Invoice"

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      NB: The rounding precission is "hard coded" to 0.01 in all tests to simplify matters.

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');

      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      DrilldownOnQtyInvoiced,DrilldownOnQtyTransferredToInvoice                                               59783
    }
    END.
  }
}

