OBJECT Codeunit 137407 SCM Warehouse IV
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1013 : Codeunit 130512;
      LibrarySales@1003 : Codeunit 130509;
      LibraryWarehouse@1000 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryItemTracking@1027 : Codeunit 130502;
      LibraryUtility@1026 : Codeunit 131000;
      LibraryVariableStorage@1025 : Codeunit 131004;
      Assert@1007 : Codeunit 130000;
      isInitialized@1005 : Boolean;
      QuantityError@1008 : TextConst 'ENU=Quantity must be equal to %1 in Reservation Entry Table.';
      EmptyWarehouseRegisterMustNotExist@1016 : TextConst 'ENU=Empty Warehouse Register must not exist.';
      ExpirationDate1@1010 : TextConst 'ENU=Expiration Date must not be %1';
      ExpirationDate2@1011 : TextConst 'ENU="in Warehouse Activity Line Activity Type=''Invt. Put-away'',No.=''%1'',"';
      ExpirationDate3@1012 : TextConst 'ENU="Line No.=''%1''."';
      UnknownFailure@1009 : TextConst 'ENU=Unknown Failure.';
      PickMustBeDeletedError@1014 : TextConst 'ENU=The Registered Pick must have been deleted for Document No. : %1';
      BinTemplateCode@1021 : Code[20];
      FieldSeparator@1020 : Code[1];
      RackNo@1019 : Code[20];
      SectionNo@1018 : Code[20];
      LevelNo@1017 : Code[20];
      BinTemplateCodeError@1024 : TextConst 'ENU="Code must have a value in Bin Template: Code=. It cannot be zero or empty."';
      BinCodeLengthError@1023 : TextConst '@@@="%1 = Caption Bin Code, %2 = Field Length of Bin Code";ENU=The length of From Rack+From Section+From Level is greater than the maximum length of %1 (%2).';
      BinCodeNotExistError@1022 : TextConst 'ENU=Bin Code Must Not Exists.';
      MustSetupWhseEmployeeErr@1028 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      MustSetupDefaultLocationErr@1029 : TextConst 'ENU=You must set-up a default location code for user %1.';
      ShouldBeTxt@1031 : TextConst '@@@="%1 = Field, %2 = Expected availability";ENU=%1 should be %2';
      EnabledTxt@1030 : TextConst 'ENU=enabled';
      DisabledTxt@1032 : TextConst 'ENU=disabled';
      BinMandatoryTxt@1033 : TextConst 'ENU=Bin Mandatory must be equal to ''No''  in Location';
      ItemTrackingMode@1034 : 'AssignLotNo,AssignSerialNo,SelectEntries';

    [Test]
    PROCEDURE GetAllowedLocationWhenNoWhseEmployee@153();
    VAR
      Location@1002 : Record 14;
      WarehouseEmployee@1000 : Record 7301;
      WMSManagement@1001 : Codeunit 7302;
    BEGIN
      // [SCENARIO] Error message when none Whse Employee is set

      // [GIVEN] No Whse Employee set for current user
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.DELETEALL;

      // [WHEN] GetAllowedLocation(X)
      Location.FINDFIRST;
      ASSERTERROR WMSManagement.GetAllowedLocation(Location.Code);

      // [THEN] Error message : 'Must setup Whse Employee'
      Assert.ExpectedError(STRSUBSTNO(MustSetupWhseEmployeeErr,USERID));
    END;

    [Test]
    PROCEDURE GetAllowedLocationWhenWhseEmployeeIsSet@157();
    VAR
      WMSManagement@1002 : Codeunit 7302;
      LocationCode@1000 : ARRAY [2] OF Code[10];
      AllowedLocationCode@1001 : Code[10];
    BEGIN
      // [SCENARIO] Get Location as allowed if it is set as Whse Employee

      // [GIVEN] Whse Employee set for current user and location A
      CreateWhseLocations(LocationCode);

      // [WHEN] GetAllowedLocation(A)
      AllowedLocationCode := WMSManagement.GetAllowedLocation(LocationCode[1]);

      // [THEN] Location A is returned
      Assert.AreEqual(LocationCode[1],AllowedLocationCode,'');
    END;

    [Test]
    PROCEDURE GetAllowedLocationWhenDefaultWhseEmployeeIsSet@158();
    VAR
      WarehouseEmployee@1003 : Record 7301;
      WMSManagement@1002 : Codeunit 7302;
      LocationCode@1001 : ARRAY [2] OF Code[10];
      AllowedLocationCode@1000 : Code[10];
    BEGIN
      // [SCENARIO] Get Default Location as allowed if Whse Employee is not set

      // [GIVEN] Whse Employee is not set for current user and location A, location B - default
      CreateWhseLocations(LocationCode);
      WarehouseEmployee.GET(USERID,LocationCode[1]);
      WarehouseEmployee.DELETE;

      // [WHEN] GetAllowedLocation(A)
      AllowedLocationCode := WMSManagement.GetAllowedLocation(LocationCode[1]);

      // [THEN] Location B is allowed
      Assert.AreEqual(LocationCode[2],AllowedLocationCode,'');
    END;

    [Test]
    PROCEDURE GetAllowedLocationWhenDefaultWhseEmployeeIsNotSet@159();
    VAR
      WarehouseEmployee@1003 : Record 7301;
      WMSManagement@1002 : Codeunit 7302;
      LocationCode@1001 : ARRAY [2] OF Code[10];
    BEGIN
      // [SCENARIO] Get empty Location as allowed if default Whse Employee is not set

      // [GIVEN] Whse Employee is not set for current user and location A
      CreateWhseLocations(LocationCode);
      WarehouseEmployee.GET(USERID,LocationCode[1]);
      WarehouseEmployee.DELETE;
      // [GIVEN] Whse Employee is set for current user and location B as not default
      WarehouseEmployee.GET(USERID,LocationCode[2]);
      WarehouseEmployee.Default := FALSE;
      WarehouseEmployee.MODIFY;

      // [WHEN] GetAllowedLocation(A)
      ASSERTERROR WMSManagement.GetAllowedLocation(LocationCode[1]);

      // [THEN] Error message : 'Must setup default loation'
      Assert.ExpectedError(STRSUBSTNO(MustSetupDefaultLocationErr,USERID));
    END;

    [Test]
    [HandlerFunctions(WhseIntPickCardHandler)]
    PROCEDURE ShowInternalPickFromActivityLine@116();
    VAR
      WhseActivityLine@1000 : Record 5767;
      LocationCode@1001 : ARRAY [2] OF Code[10];
      DocumentNo@1003 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Internal Pick card from Activity Line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);
      // [GIVEN] Exist three Internal Picks (P1..P3) for Location A
      InsertThreeInternalPicks(LocationCode[1],DocumentNo);

      // [WHEN] Open Whse. Document card from Activity line for Internal Pick P2
      ShowWhseDocFromActivityLine(
        WhseActivityLine."Whse. Document Type"::"Internal Pick",DocumentNo[2])

      // [THEN] Internal Pick P2 card is shown
      // Verified in WhseIntPickCardHandler
    END;

    [Test]
    [HandlerFunctions(WhseIntPickCardHandler)]
    PROCEDURE ShowInternalPickFromRegisteredActivityLine@160();
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
      LocationCode@1001 : ARRAY [2] OF Code[10];
      DocumentNo@1003 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Internal Pick card from Registered Activity Line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);
      // [GIVEN] Exist three Internal Picks (P1..P3) for Location B
      InsertThreeInternalPicks(LocationCode[2],DocumentNo);

      // [WHEN] Open Whse. Document card from Registered Activity line for Internal Pick P2
      ShowWhseDocFromRegisteredActivityLine(
        RegisteredWhseActivityLine."Whse. Document Type"::"Internal Pick",DocumentNo[2])

      // [THEN] Internal Pick P2 card is shown
      // Verified in WhseIntPickCardHandler
    END;

    [Test]
    [HandlerFunctions(WhseIntPutAwayCardHandler)]
    PROCEDURE ShowInternalPutwayFromActivityLine@98();
    VAR
      WhseActivityLine@1000 : Record 5767;
      LocationCode@1002 : ARRAY [2] OF Code[10];
      DocumentNo@1001 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Internal Put-Away card from Activity Line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);

      // [GIVEN] Exist three Internal Put-Aways (P1..P3) for Location B
      InsertThreeInternalPutAways(LocationCode[2],DocumentNo);

      // [WHEN] Open Whse. Document card from Activity line for Internal Put-Away P2
      ShowWhseDocFromActivityLine(
        WhseActivityLine."Whse. Document Type"::"Internal Put-away",DocumentNo[2])

      // [THEN] Internal Put-Away P2 card is shown
      // Verified in WhseIntPutAwayCardHandler
    END;

    [Test]
    [HandlerFunctions(WhseIntPutAwayCardHandler)]
    PROCEDURE ShowInternalPutwayFromRegisteredActivityLine@154();
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
      LocationCode@1002 : ARRAY [2] OF Code[10];
      DocumentNo@1001 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Internal Put-Away card from Registered Activity Line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);

      // [GIVEN] Exist three Internal Put-Aways (P1..P3) for Location A
      InsertThreeInternalPutAways(LocationCode[1],DocumentNo);

      // [WHEN] Open Whse. Document card from Registered Activity line for Internal Put-Away P2
      ShowWhseDocFromRegisteredActivityLine(
        RegisteredWhseActivityLine."Whse. Document Type"::"Internal Put-away",DocumentNo[2])

      // [THEN] Internal Put-Away P2 card is shown
      // Verified in WhseIntPutAwayCardHandler
    END;

    [Test]
    [HandlerFunctions(RegisteredMovCardHandler)]
    PROCEDURE ShowRegisteredMovementFromRegisteredActivityLine@117();
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
      LocationCode@1001 : ARRAY [2] OF Code[10];
      DocumentNo@1000 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Movement card from Registered Activity Line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);

      // [GIVEN] Exist three Registered Movements (M1..M3) for Location A
      InsertThreeRegisteredWhseActivities(
        RegisteredWhseActivityLine."Activity Type"::Movement,LocationCode[1],DocumentNo);

      // [WHEN] Show Registered Activity Doc from Registered Activity line for Movement M2
      ShowRegisteredActivityDoc(
        RegisteredWhseActivityLine."Activity Type"::Movement,DocumentNo[2]);

      // [THEN] Movement M2 card is shown
      // Verified in RegisteredMovCardHandler
    END;

    [Test]
    [HandlerFunctions(RegisteredPickCardHandler)]
    PROCEDURE ShowRegisteredPickFromRegisteredActivityLine@162();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      LocationCode@1002 : ARRAY [2] OF Code[10];
      DocumentNo@1001 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Pick card from Registered Activity line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);

      // [GIVEN] Exist three Registered Picks (P1..P3) for Location B
      InsertThreeRegisteredWhseActivities(
        RegisteredWhseActivityLine."Activity Type"::Pick,LocationCode[2],DocumentNo);

      // [WHEN] Show Registered Activity Doc from Registered Activity line for Pick P2
      ShowRegisteredActivityDoc(
        RegisteredWhseActivityLine."Activity Type"::Pick,DocumentNo[2]);

      // [THEN] Pick P2 card is shown
      // Verified in RegisteredPickCardHandler
    END;

    [Test]
    [HandlerFunctions(RegisteredPutAwayCardHandler)]
    PROCEDURE ShowRegisteredPutwayFromRegisteredActivityLine@125();
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
      LocationCode@1001 : ARRAY [2] OF Code[10];
      DocumentNo@1000 : ARRAY [3] OF Code[20];
    BEGIN
      // [SCENARIO] Open Put-Away card from Registered Activity line

      // [GIVEN] Setup two Whse. locations (A, B-default) for UserID
      CreateWhseLocations(LocationCode);

      // [GIVEN] Exist three Registered Put-Aways (P1..P3) for Location A
      InsertThreeRegisteredWhseActivities(
        RegisteredWhseActivityLine."Activity Type"::"Put-away",LocationCode[1],DocumentNo);

      // [WHEN] Show Registered Activity Doc from Registered Activity line for Put-Away P2
      ShowRegisteredActivityDoc(
        RegisteredWhseActivityLine."Activity Type"::"Put-away",DocumentNo[2]);

      // [THEN] Put-Away P2 card is shown
      // Verified in RegisteredPutAwayCardHandler
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler)]
    PROCEDURE ItemTrackingPurchaseLineSerialNo@11();
    VAR
      Bin@1001 : Record 7354;
      PurchaseLine@1002 : Record 39;
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify item tracking lines are created from Purchase Line for Serial No.

      // Setup: Create Location and Bin. Create Item Tracking Code with Serial No.
      Initialize;
      ItemNo := CreateInitalSetupForWarehouse(Bin,TRUE);

      // Exercise: Create Purchase With Item Tracking Line.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,TRUE,ItemNo,Bin."Location Code",Bin.Code);

      // Verify: Reservation Entries created with Serial No.
      VerifyReservationEntry(ItemNo,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE ItemTrackingPurchaseLineLotNo@30();
    VAR
      Bin@1002 : Record 7354;
      PurchaseLine@1001 : Record 39;
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify item tracking lines are created from Purchase Line for Lot No.

      // Setup: Create Location and Bin. Create Item Tracking Code with Lot No.
      Initialize;
      ItemNo := CreateInitalSetupForWarehouse(Bin,FALSE);

      // Exercise: Create Purchase With Item Tracking Line.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,TRUE,ItemNo,Bin."Location Code",Bin.Code);

      // Verify: Reservation Entries created with Lot No.
      VerifyReservationEntry(ItemNo,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,MessageHandler)]
    PROCEDURE PostPurchaseOrderFromActivityHeaderWithTrackingLineSerialNo@1();
    BEGIN
      // Create Purchase Order, Create Item Tracking line for Serial No. Post Inventory Put and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      PostAndVerifyInventoryPut(TRUE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,MessageHandler)]
    PROCEDURE PostPurchaseOrderFromActivityHeaderWithTrackingLineLot@10();
    BEGIN
      // Create Purchase Order, Create Item Tracking line for Lot No. Post Inventory Put and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      PostAndVerifyInventoryPut(FALSE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostPurchaseOrderFromActivityHeaderSerialNo@43();
    BEGIN
      // Create Purchase Order, Post Inventory Put for Serial No. and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      PostAndVerifyInventoryPut(TRUE,FALSE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostPurchaseOrderFromActivityHeaderLotNo@42();
    BEGIN
      // Create Purchase Order, Post Inventory Put for Lot No. and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      PostAndVerifyInventoryPut(FALSE,FALSE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostAndVerifyInventoryPut@39(IsSerialNo@1008 : Boolean;IsTracking@1007 : Boolean;ManualAssignSerialNo@1001 : Boolean;ManualAssignLotNo@1006 : Boolean);
    VAR
      Bin@1000 : Record 7354;
      PurchaseLine@1005 : Record 39;
      ItemNo@1003 : Code[20];
    BEGIN
      // Setup: Create and Release Purchase Order with Expiration Date on Item Tracking Lines.
      ItemNo := CreateInitalSetupForWarehouse(Bin,IsSerialNo);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,IsTracking,ItemNo,Bin."Location Code",Bin.Code);
      CreateInventoryPut(PurchaseLine,ManualAssignSerialNo,ManualAssignLotNo,Bin."Location Code");  // Create Inventory Put with Expiration Date.

      // Exercise: Post Inventory Put.
      PostInventoryPut(PurchaseLine."Document No.");

      // Verify: Posted Inventory Put and Posted Document.
      VerifyPostedInventoryPutLine(PurchaseLine."Document No.",Bin."Location Code",ItemNo,WORKDATE,Bin.Code);
      VerifyReceiptLine(PurchaseLine."Document No.",Bin."Location Code",Bin.Code,PurchaseLine.Quantity);
      VerifyPostedPurchaseInvoice(PurchaseLine."Document No.",Bin."Location Code",Bin.Code,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryHandler,MessageHandler)]
    PROCEDURE PostSalesOrderFromActivityHeaderWithTrackingLineSerialNo@15();
    BEGIN
      // Create Purchase Order with Item Tracking Line and Post Inventory Put. Create Sales Order with Item Tracking line for Serial No. Post Inventory Pick and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      PostAndVerifyInventoryPick(TRUE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ItemTrackingSummaryHandler,MessageHandler)]
    PROCEDURE PostSalesOrderFromActivityHeaderWithTrackingLineLot@12();
    BEGIN
      // Create Purchase Order with Item Tracking Line and Post Inventory Put. Create Sales Order with Item Tracking line for Lot No. Post Inventory Pick and Verify Posted Document.
      Initialize;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      PostAndVerifyInventoryPick(FALSE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ItemTrackingSummaryHandler,MessageHandler)]
    PROCEDURE PostSalesOrderFromActivityHeaderSerialNo@29();
    BEGIN
      // Create Purchase Order with Inventory Put, Create Sales Order with Item Tracking Line, Post Inventory Pick for Serial No. and Verify Posted Document.
      Initialize;
      PostAndVerifyInventoryPick(TRUE,FALSE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ItemTrackingSummaryHandler,MessageHandler)]
    PROCEDURE PostSalesOrderFromActivityHeaderLotNo@27();
    BEGIN
      // Create Purchase Order with Inventory Put, Create Sales Order with Item Tracking Line,Post Inventory Pick for Lot No. and Verify Posted Document.
      Initialize;
      PostAndVerifyInventoryPick(FALSE,FALSE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostAndVerifyInventoryPick@16(IsSerialNo@1008 : Boolean;IsTracking@1009 : Boolean;ManualAssignSerialNo@1007 : Boolean;ManualAssignLotNo@1006 : Boolean);
    VAR
      Bin@1000 : Record 7354;
      PurchaseLine@1001 : Record 39;
      SalesLine@1005 : Record 37;
      ItemNo@1003 : Code[20];
    BEGIN
      // Setup: Create Inventory Put. Create and Release Sales Order with Expiration Date on Item Tracking Lines.
      ItemNo := CreateInitalSetupForWarehouse(Bin,IsSerialNo);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,IsTracking,ItemNo,Bin."Location Code",Bin.Code);
      CreateInventoryPut(PurchaseLine,ManualAssignSerialNo,ManualAssignLotNo,Bin."Location Code");  // Create Inventory Put with Expiration Date.
      PostInventoryPut(PurchaseLine."Document No.");

      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);
      CreateAndReleaseSalesOrderWithItemTrackingLines(
        SalesLine,TRUE,WORKDATE,ItemNo,Bin."Location Code",Bin.Code,PurchaseLine.Quantity);
      CreateInventoryPick(SalesLine,Bin."Location Code");  // Create Inventory Pick with Expiration Date.

      // Exercise: Post Inventory Pick.
      PostInventoryPick(SalesLine."Document No.",TRUE);

      // Verify: Posted Inventory Pick and Verify Posted Document.
      VerifyPostedInventoryPickLine(SalesLine."Document No.",Bin."Location Code",ItemNo,WORKDATE,Bin.Code);
      VerifyShipmentLine(SalesLine."Document No.",Bin."Location Code",Bin.Code,SalesLine.Quantity);
      VerifyPostedSalesInvoice(SalesLine."Document No.",Bin."Location Code",Bin.Code,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,MessageHandler)]
    PROCEDURE SameExpirationDateForSameLot@37();
    VAR
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // Create Purchase Order with Same Item two Lines, Create Inventory Put with same Lot No. with same Expiration date. Change Expiration date and Verify the Error Message.

      // Setup: Create Purchase Order, Assign Item Tracking Line With same Lot No. and Create Inventory Put.
      Initialize;
      CreateInventoryPutWithSameLotNo(WarehouseActivityLine);

      // Exercise: Update Inventory Put Line for Different Expiration Date.
      ASSERTERROR WarehouseActivityLine.VALIDATE("Expiration Date",TODAY);

      // Verify: Error Message for Different Expiration Date for Same Lot No.
      Assert.AreEqual(
        STRSUBSTNO(ExpirationDate1,TODAY) + ' ' + STRSUBSTNO(ExpirationDate2,WarehouseActivityLine."No.") +
        STRSUBSTNO(ExpirationDate3,WarehouseActivityLine."Line No."),GETLASTERRORTEXT,UnknownFailure);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE WarehouseItemJournal@38();
    VAR
      Location@1000 : Record 14;
      WarehouseJournalBatch@1002 : Record 7310;
      Bin@1001 : Record 7354;
      Item@1004 : Record 27;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Create Warehouse Item Journal Line and select No on confirmation Dialog of Posting and Check line is not Posted.

      // Setup: Create Full Warehouse Setup.
      Initialize;
      CreateFullWarehouseSetup(Location);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,Location.Code);

      // Create Warehouse Item Journal.
      FindBin(Bin,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",
        WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(5));

      // Exercise: Confirm Dialog box for Posting select No in Confirm Message Handler.
      CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register",WarehouseJournalLine);

      // Verify: Warehouse Journal Line Exists.
      VerifyWarehouseJournalLine(WarehouseJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE WarehouseItemJournalPost@52();
    VAR
      Location@1000 : Record 14;
      WarehouseJournalBatch@1002 : Record 7310;
      Bin@1001 : Record 7354;
      Item@1004 : Record 27;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Create and Post Warehouse Item Journal Line and Verify Warehouse Entries.

      // Setup: Create Full Warehouse Setup.
      Initialize;
      CreateFullWarehouseSetup(Location);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,Location.Code);

      // Create Warehouse Item Journal.
      FindBin(Bin,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",
        WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(5));

      // Exercise: Post Warehouse Journal Line.
      CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-Register",WarehouseJournalLine);

      // Verify: Warehouse Entries for Posted Warehouse Journal Line.
      VerifyWarehouseEntries(WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",WarehouseJournalLine.Quantity);
      VerifyWarehouseEntries(WarehouseJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",-WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler)]
    PROCEDURE MultiplePurchaseOrders@20();
    VAR
      PurchaseOrderNo@1007 : ARRAY [5] OF Code[20];
      PurchaseReceiptNo@1008 : ARRAY [5] OF Code[20];
      ItemNo@1000 : Code[20];
      LoopCount@1001 : Integer;
    BEGIN
      // Check posting of Purchase Invoices across multiple Purchase Orders.

      // Setup.
      Initialize;
      LoopCount := LibraryRandom.RandInt(5);  // Use Random for multiple Purchase orders.

      // Exercise: Create multiple Purchase Orders and post them as Receive.
      ItemNo := CreateAndPostMultiplePurchaseOrders(PurchaseOrderNo,PurchaseReceiptNo,LoopCount);

      // Verify: Verify Item Ledger Entry and Value Entry after posting multiple Purchase Invoices.
      VerifyPostedEntryAfterPostingPurchaseInvoice(PurchaseOrderNo,PurchaseReceiptNo,ItemNo,LoopCount);
    END;

    [Test]
    PROCEDURE PartialWarehouseReceipt@45();
    VAR
      PurchaseLine@1001 : Record 39;
      WarehouseReceiptLine@1005 : Record 7317;
      PartialQuantityToReceive@1000 : Decimal;
    BEGIN
      // Test and verify Warehouse Receipt with partial Quantity To Receive.

      // Setup: Create Warehouse Receipt From Purchase Order.
      Initialize;
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseLine);

      // Exercise: Post Warehouse Receipt with partial Quantity To Receive.
      PartialQuantityToReceive := PostWarehouseReceiptWithPartialQuantityToReceive(WarehouseReceiptLine,PurchaseLine);

      // Verify: Verify Warehouse Receipt Line and Warehouse Activity Line.
      WarehouseReceiptLine.GET(WarehouseReceiptLine."No.",WarehouseReceiptLine."Line No.");
      WarehouseReceiptLine.TESTFIELD("Qty. to Receive",PartialQuantityToReceive);
      VerifyWarehouseActivityLine(PurchaseLine."Document No.",PurchaseLine."No.",PartialQuantityToReceive);
    END;

    [Test]
    PROCEDURE RegisterPartialWarehouseActivity@28();
    VAR
      PurchaseLine@1001 : Record 39;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseActivityLine@1007 : Record 5767;
      RegisteredWhseActivityHdr@1008 : Record 5772;
    BEGIN
      // Register Warehouse Activity created by Warehouse Receipt with partial Quantity To Receive.

      // Setup: Create Warehouse Receipt From Purchase Order. Post Warehouse Receipt with partial Quantity To Receive.
      Initialize;
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseLine);
      PostWarehouseReceiptWithPartialQuantityToReceive(WarehouseReceiptLine,PurchaseLine);

      // Exercise: Register Warehouse Activity.
      FindWarehouseActivityNo(WarehouseActivityLine,PurchaseLine."Document No.",WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify Registered Warehouse Activity.
      RegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.",WarehouseActivityHeader."No.");
      RegisteredWhseActivityHdr.FINDFIRST;
    END;

    [Test]
    PROCEDURE CreateStockKeepingUnitBatchJobWithLocationAndReplaceFalse@67();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      StockkeepingUnit@1003 : Record 5700;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      // Test functionality of Create Stock Keeping Unit batch job with Location and Replace Previous SKUs as False.

      // Setup: Create an Item and a Location.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);

      // Exercise: Create Stock Keeping Unit.
      CreateStockkeepingUnit(Item."No.",Location.Code,'',SKUCreationMethod::Location,FALSE);

      // Verify: Stock Keeping Unit gets created with new Item and Location.
      FindStockkeepingUnit(StockkeepingUnit,Item."No.",Location.Code,'');
    END;

    [Test]
    PROCEDURE CreateStockKeepingUnitBatchJobWithVariantAndReplaceFalse@66();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1001 : Record 5401;
      StockkeepingUnit@1003 : Record 5700;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      // Test functionality of Create Stock Keeping Unit batch job with Variant and Replace Previous SKUs as False.

      // Setup: Create an Item and a Variant.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      // Exercise: Create Stock Keeping Unit.
      CreateStockkeepingUnit(Item."No.",'',ItemVariant.Code,SKUCreationMethod::Variant,FALSE);

      // Verify: Stock Keeping Unit gets created with new Item and Variant.
      FindStockkeepingUnit(StockkeepingUnit,Item."No.",'',ItemVariant.Code);
    END;

    [Test]
    PROCEDURE CreateStockKeepingUnitBatchJobWithLocationVariantAndReplaceTrue@65();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1003 : Record 5401;
      ItemVariant2@1005 : Record 5401;
      Location@1001 : Record 14;
      Location2@1004 : Record 14;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      // Test functionality of Create Stock Keeping Unit batch job with Location and Variant and Replace Previous SKUs as True.

      // Setup: Create an Item, two Locations and two Variants. Create two Stock keeping units for Location and Variant. Update Item's Unit Cost.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);
      LibraryWarehouse.CreateLocation(Location2);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,Item."No.");
      CreateStockkeepingUnit(Item."No.",Location.Code,ItemVariant.Code,SKUCreationMethod::"Location & Variant",FALSE);
      CreateStockkeepingUnit(Item."No.",Location2.Code,ItemVariant2.Code,SKUCreationMethod::"Location & Variant",FALSE);
      UpdateUnitCostInItem(Item);

      // Exercise: Create Stock Keeping Unit with Replace Previous SKUs as True.
      CreateStockkeepingUnit(Item."No.",Location.Code,ItemVariant.Code,SKUCreationMethod::"Location & Variant",TRUE);

      // Verify: Previous Stock Keeping Unit gets replaced with the new one created with updated Unit Cost.
      VerifyStockkeepingUnit(Item."No.",Location.Code,ItemVariant.Code,Item."Unit Cost");
      VerifyStockkeepingUnit(Item."No.",Location2.Code,ItemVariant2.Code,0);  // Unit Cost remains 0 as SKU does not gets replaced.
    END;

    [Test]
    PROCEDURE RegisteredPick@75();
    VAR
      RegisteredWhseActivityHdr@1001 : Record 5772;
      WarehouseActivityHeader@1005 : Record 5766;
    BEGIN
      // Test to verify Registered Pick exists after we create a Pick from Sales Order and Register it.

      // Setup: Create Location, Create Item and update Inventory on the Location. Create a Sales Order and Warehouse Shipment and Create a Pick from it.
      Initialize;
      CreatePickFromSalesOrder(WarehouseActivityHeader);

      // Exercise: Register the Pick.
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify that the new Pick exists in the Registered Picks.
      RegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.",WarehouseActivityHeader."No.");
      RegisteredWhseActivityHdr.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(DeleteRegisteredWhseDocsReportHandler)]
    PROCEDURE DeleteRegisteredWarehouseDocumentReport@74();
    VAR
      RegisteredWhseActivityHdr@1000 : Record 5772;
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      // Test to verify that Registered Pick gets deleted on running Delete Registered Warehouse Document report.

      // Setup: Create Location, Create Item and update Inventory on the Location. Create a Sales Order and Warehouse Shipment. Create a Pick and Register it.
      Initialize;
      CreatePickFromSalesOrder(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Exercise: Run Delete Registered Warehouse Document report.
      RunDeleteRegisteredWarehouseDocumentReport(WarehouseActivityHeader."No.");

      // Verify: Verify that the Pick does not exist.
      RegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.",WarehouseActivityHeader."No.");
      Assert.IsFalse(RegisteredWhseActivityHdr.FINDFIRST,STRSUBSTNO(PickMustBeDeletedError,WarehouseActivityHeader."No."));
    END;

    [Test]
    PROCEDURE PostMultipleItemJournalLinesForWarehouse@82();
    VAR
      Bin@1001 : Record 7354;
      Item@1003 : Record 27;
      Item2@1005 : Record 27;
      WarehouseEntry@1004 : Record 7312;
      Quantity@1002 : Decimal;
    BEGIN
      // Verify Warehouse Entries after posting multiple Item Journal Lines.

      // Setup: Create Location and Find Bin.
      Initialize;
      CreateLocationAndFindBin(Bin,FALSE);
      Quantity := LibraryRandom.RandDec(100,2);  // Use Random for Quantity.

      // Exercise: Post multiple Item Journal Lines.
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item),Quantity,Bin."Location Code",Bin.Code);
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item2),Quantity,Bin."Location Code",Bin.Code);

      // Verify: Verify Warehouse Entries.
      VerifyWarehouseEntries(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      VerifyWarehouseEntries(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PartialInventoryPickWithMultipleItems@90();
    VAR
      Bin@1001 : Record 7354;
      Item@1003 : Record 27;
      Item2@1005 : Record 27;
      SalesHeader@1007 : Record 36;
      Quantity@1002 : Decimal;
      PartialQuantity@1006 : Decimal;
    BEGIN
      // Test and verify partial Inventory Pick with multiple Items.

      // Setup: Create Location and Find Bin. Post multiple Item Journal Lines. Create and Release Sales Order with multiple lines.
      Initialize;
      CreateLocationAndFindBin(Bin,FALSE);
      PartialQuantity := LibraryRandom.RandDec(100,2);  // Use Random for Partial Quantity.
      Quantity := PartialQuantity + LibraryRandom.RandDec(100,2);  // Use Random for Quantity required for test.
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item),Quantity,Bin."Location Code",Bin.Code);
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item2),Quantity,Bin."Location Code",Bin.Code);
      CreateAndReleaseSalesOrderWithMultipleLines(SalesHeader,Item."No.",Item2."No.",Bin."Location Code",Bin.Code,Quantity);

      // Exercise: Create and post Inventory Pick with partial Quantity To Handle.
      CreateAndPostInventoryPick(SalesHeader."No.",Bin."Location Code",PartialQuantity);

      // Verify: Verify Quantity Handled on Warehouse Activity Line and Quantity Shipped on Sales Line.
      VerifyQuantityHandledOnWarehouseActivityLine(SalesHeader."No.",Bin."Location Code",PartialQuantity);
      VerifySalesLine(SalesHeader."No.",Item."No.",PartialQuantity);
      VerifySalesLine(SalesHeader."No.",Item2."No.",PartialQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE FullInventoryPickWithMultipleItemAfterPartialInventoryPick@126();
    VAR
      Bin@1001 : Record 7354;
      Item@1003 : Record 27;
      Item2@1005 : Record 27;
      SalesHeader@1007 : Record 36;
      Quantity@1002 : Decimal;
      PartialQuantity@1011 : Decimal;
    BEGIN
      // Test and verify full Inventory Pick with multiple Items after partial Inventory Pick.

      // Setup: Create Location and Find Bin. Post multiple Item Journal Lines. Create and Release Sales Order with multiple lines. Create and post Inventory Pick with partial Quantity To Handle.
      Initialize;
      CreateLocationAndFindBin(Bin,FALSE);
      PartialQuantity := LibraryRandom.RandDec(100,2);  // Use Random for Partial Quantity.
      Quantity := PartialQuantity + LibraryRandom.RandDec(100,2);  // Use Random for Quantity required for test.
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item),Quantity,Bin."Location Code",Bin.Code);
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item2),Quantity,Bin."Location Code",Bin.Code);
      CreateAndReleaseSalesOrderWithMultipleLines(SalesHeader,Item."No.",Item2."No.",Bin."Location Code",Bin.Code,Quantity);
      CreateAndPostInventoryPick(SalesHeader."No.",Bin."Location Code",PartialQuantity);

      // Exercise: Post Inventory Pick.
      PostInventoryPick(SalesHeader."No.",FALSE);

      // Verify: Verify Quantity Shipped on Sales Line.
      VerifySalesLine(SalesHeader."No.",Item."No.",Quantity);
      VerifySalesLine(SalesHeader."No.",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(WarehouseItemTrackingLinesHandler)]
    PROCEDURE SourceCodeOnWarehouseRegisterAfterRegisterWarehouseJournalLine@86();
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      SourceCodeSetup@1006 : Record 242;
    BEGIN
      // Test and verify Source Code on Warehouse Register after register Warehouse Journal Line.

      // Setup: Create Warehouse Journal Line with Item Tracking Line.
      Initialize;
      CreateWarehouseJournalLineWithItemTrackingLines(WarehouseJournalLine,WarehouseJournalLine."Entry Type"::"Positive Adjmt.");

      // Exercise: Register Warehouse Journal Line.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);

      // Verify: Verify Source Code on Warehouse Register.
      SourceCodeSetup.GET;
      VerifyWarehouseRegister(WarehouseJournalLine."Journal Batch Name",SourceCodeSetup."Whse. Item Journal");
    END;

    [Test]
    [HandlerFunctions(WarehouseItemTrackingLinesHandler)]
    PROCEDURE SourceCodeOnWarehouseRegisterAfterCalculateAndPostWarehouseAdjustment@91();
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      SourceCodeSetup@1006 : Record 242;
      ItemJournalBatchName@1001 : Code[10];
    BEGIN
      // Test and verify Source Code on Warehouse Register after calculate and post Warehouse Adjustment.

      // Setup: Create Warehouse Journal Line with Item Tracking Line. Register Warehouse Journal Line.
      Initialize;
      CreateWarehouseJournalLineWithItemTrackingLines(WarehouseJournalLine,WarehouseJournalLine."Entry Type"::"Positive Adjmt.");
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);

      // Exercise: Calculate and post Warehouse Adjustment.
      ItemJournalBatchName := CalculateAndPostWarehouseAdjustment(WarehouseJournalLine."Item No.");

      // Verify: Verify Source Code on Warehouse Register.
      SourceCodeSetup.GET;
      VerifyWarehouseRegister(ItemJournalBatchName,SourceCodeSetup."Item Journal");
    END;

    [Test]
    [HandlerFunctions(WarehouseItemTrackingLinesHandler,DateCompressWarehouseEntriesHandler,ConfirmHandlerTrue)]
    PROCEDURE SourceCodeOnWarehouseRegisterAfterDateCompressWarehouseEntries@85();
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      WarehouseRegister@1005 : Record 7313;
      SourceCodeSetup@1006 : Record 242;
    BEGIN
      // Test and verify Source Code on Warehouse Register after running Date Compress Warehouse Entries.

      // Setup: Create Warehouse Journal Line with Item Tracking Line. Register Warehouse Journal Line. Calculate and post Warehouse Adjustment.
      Initialize;
      CreateWarehouseJournalLineWithItemTrackingLines(WarehouseJournalLine,WarehouseJournalLine."Entry Type"::"Positive Adjmt.");
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);
      CalculateAndPostWarehouseAdjustment(WarehouseJournalLine."Item No.");

      // Exercise: Run Date Compress Warehouse Entries.
      RunDateCompressWhseEntries(WarehouseJournalLine."Item No.");

      // Verify: Verify Source Code on Warehouse Register.
      SourceCodeSetup.GET;
      WarehouseRegister.FINDLAST;
      WarehouseRegister.TESTFIELD("Source Code",SourceCodeSetup."Compress Whse. Entries");
    END;

    [Test]
    [HandlerFunctions(WarehouseItemTrackingLinesHandler,DateCompressWarehouseEntriesHandler,ConfirmHandlerTrue)]
    PROCEDURE DeleteEmptyWarehouseRegistersReport@112();
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      ItemJournalBatchName@1001 : Code[10];
    BEGIN
      // Test and verify functionality of Delete Empty Warehouse Registers report.

      // Setup: Create Warehouse Journal Line with Item Tracking Line. Register Warehouse Journal Line. Calculate and post Warehouse Adjustment. Run Date Compress Warehouse Entries.
      Initialize;
      CreateWarehouseJournalLineWithItemTrackingLines(WarehouseJournalLine,WarehouseJournalLine."Entry Type"::"Positive Adjmt.");
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);
      ItemJournalBatchName := CalculateAndPostWarehouseAdjustment(WarehouseJournalLine."Item No.");
      RunDateCompressWhseEntries(WarehouseJournalLine."Item No.");

      // Exercise: Run Delete Empty Warehouse Registers.
      LibraryWarehouse.DeleteEmptyWhseRegisters;

      // Verify: Verify Empty Warehouse Registers must not exist.
      Assert.IsFalse(FindWarehouseRegister(WarehouseJournalLine."Journal Batch Name"),STRSUBSTNO(EmptyWarehouseRegisterMustNotExist));
      Assert.IsFalse(FindWarehouseRegister(ItemJournalBatchName),STRSUBSTNO(EmptyWarehouseRegisterMustNotExist));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE WarehouseItemJournalBatchPost@96();
    VAR
      Location@1000 : Record 14;
      WarehouseJournalBatch@1002 : Record 7310;
      Bin@1001 : Record 7354;
      Item@1004 : Record 27;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Post Warehouse Item Journal Batch and Verify Warehouse Entries.

      // Setup: Create Full Warehouse Setup.
      Initialize;
      CreateFullWarehouseSetup(Location);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,Location.Code);

      // Create Warehouse Item Journal.
      FindBin(Bin,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",
        WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(5));  // Use randin value for Quantity.

      // Exercise: Post Warehouse Journal Batch.
      COMMIT;  // Commit required for Batch Post.
      CODEUNIT.RUN(CODEUNIT::"Whse. Jnl.-B.Register",WarehouseJournalBatch);

      // Verify: Warehouse Entries for Posted Warehouse Journal Line.
      VerifyWarehouseEntries(WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",WarehouseJournalLine.Quantity);
      VerifyWarehouseEntries(WarehouseJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",-WarehouseJournalLine.Quantity);
    END;

    [Test]
    PROCEDURE LocationByPage@95();
    VAR
      TempLocation@1000 : TEMPORARY Record 14;
      LocationCode@1003 : Code[10];
    BEGIN
      // Create Location by Page and verify it.

      // Setup.
      Initialize;

      // Exercise: Create New Location by Page.
      TempLocation.INIT;
      TempLocation.VALIDATE(Code,LibraryUtility.GenerateRandomCode(TempLocation.FIELDNO(Code),DATABASE::Location));
      TempLocation.INSERT(TRUE);

      LocationCode := CreateLocationByPage(TempLocation);

      // Verify: Verify Location Code.
      VerifyLocation(TempLocation,LocationCode);
    END;

    [Test]
    [HandlerFunctions(CalculateBinRequestPageHandler)]
    PROCEDURE CalculateBinWithOutTemplateCode@105();
    VAR
      Location@1001 : Record 14;
      BinCreationWorksheet@1000 : TestPage 7372;
    BEGIN
      // Run Calculate Bins report without Bin template Code and handle error dialog.

      // Setup: Create Location and Open Bin Creation Worksheet.
      Initialize;
      CreateAndUpdateLocationWithSetup(Location,TRUE,FALSE,FALSE);
      BinTemplateCode := '';  // BinTemplateCode used in CalculateBinRequestPageHandler.
      BinCreationWorksheet.OPENEDIT;

      // Exercise: Run Calculate Bins report without Bin Template Code.
      ASSERTERROR BinCreationWorksheet.CalculateBins.INVOKE;

      // Verify: Error Message.
      Assert.AreEqual(STRSUBSTNO(BinTemplateCodeError),GETLASTERRORTEXT,UnknownFailure);
    END;

    [Test]
    [HandlerFunctions(CalculateBinRequestPageHandler)]
    PROCEDURE CalculateBinWithTemplateCode@104();
    VAR
      BinCreationWorksheet@1000 : TestPage 7372;
    BEGIN
      // Run Calculate Bins report with Bin template Code and Verify Bin Code is created in Bin Creation Worksheet.

      // Setup: Create Location and Open Bin Creation Worksheet.
      Initialize;
      CreateLocationAndBinTemplate;
      FillBinCodeValue;  // Fill RackNo, SectionNo, LevelNo used in CalculateBinRequestPageHandler.
      BinCreationWorksheet.OPENEDIT;

      // Exercise: Run Calculate Bins report with Bin Template Code.
      BinCreationWorksheet.CalculateBins.INVOKE;

      // Verify: Bin Code is Created in Bin Creation Worksheet.
      VerifyBinCode(BinCreationWorksheet);
    END;

    [Test]
    [HandlerFunctions(CalculateBinRequestPageHandler)]
    PROCEDURE CalculateBinWithFieldSeparator@102();
    VAR
      BinCreationWorksheet@1000 : TestPage 7372;
    BEGIN
      // Run Calculate Bins report with Field Separator and Verify Bin Code is created in Bin Creation Worksheet.

      // Setup: Create Location and Open Bin Creation Worksheet.
      Initialize;
      CreateLocationAndBinTemplate;
      FillBinCodeValue;  // Fill RackNo, SectionNo, LevelNo used in CalculateBinRequestPageHandler.
      FieldSeparator := FORMAT(LibraryRandom.RandInt(5));  // Field Separator used in CalculateBinRequestPageHandler.
      BinCreationWorksheet.OPENEDIT;

      // Exercise: Run Calculate Bins report with Field Seprator.
      BinCreationWorksheet.CalculateBins.INVOKE;

      // Verify: Bin Code is Created on Bin Creation Worksheet.
      VerifyBinCode(BinCreationWorksheet);
    END;

    [Test]
    [HandlerFunctions(CalculateBinRequestPageHandler)]
    PROCEDURE CalculateBinWithBlankRackNo@101();
    VAR
      BinCreationWorksheet@1000 : TestPage 7372;
    BEGIN
      // Run Calculate Bins report with blank Rack From No. and Rack To No. as Blank and Verify Bin Code is not created on Bin Creation Worksheet.

      // Setup: Create Location and Open Bin Creation Worksheet.
      Initialize;
      CreateLocationAndBinTemplate;
      FillBinCodeValue;  // Fill RackNo, SectionNo, LevelNo used in CalculateBinRequestPageHandler.
      RackNo := '';  // Set Rack No as Blank.
      BinCreationWorksheet.OPENEDIT;

      // Exercise: Run Calculate Bins report with blank Rack From No. and Rack To No.
      BinCreationWorksheet.CalculateBins.INVOKE;

      // Verify: Bin Code is not created on Bin Creation Worksheet.
      Assert.IsFalse(BinCreationWorksheet.FIRST,BinCodeNotExistError);
    END;

    [Test]
    [HandlerFunctions(CalculateBinRequestPageHandler)]
    PROCEDURE CalculateBinWithMaximumLevel@94();
    VAR
      BinCreationWorksheetLine@1001 : Record 7338;
      LibraryUtility@1002 : Codeunit 131000;
      BinCreationWorksheet@1000 : TestPage 7372;
    BEGIN
      // Calculate Bin when Level is greater than the maximum length of Bin Code and handle error dialog.

      // Setup: Create Location and Open Bin Creation Worksheet.
      Initialize;
      CreateLocationAndBinTemplate;

      // Set Value for RackNo SectionNo and LevelNo used in CalculateBinRequestPageHandler.
      RackNo := BinTemplateCode;
      SectionNo := BinTemplateCode;
      LevelNo := BinTemplateCode;
      BinCreationWorksheet.OPENEDIT;

      // Exercise: Run Calculate Bins report.
      ASSERTERROR BinCreationWorksheet.CalculateBins.INVOKE;

      // Verify: Error Message.
      Assert.AreEqual(
        STRSUBSTNO(
          BinCodeLengthError,BinCreationWorksheetLine.FIELDCAPTION("Bin Code"),
          LibraryUtility.GetFieldLength(DATABASE::"Bin Creation Worksheet Line",BinCreationWorksheetLine.FIELDNO("Bin Code"))),
        GETLASTERRORTEXT,UnknownFailure);
    END;

    [Test]
    PROCEDURE WarehouseGetBinContentReportFromItemJournalLine@115();
    VAR
      Bin@1002 : Record 7354;
      Item@1007 : Record 27;
      Quantity@1005 : Decimal;
    BEGIN
      // Test the functionality of Warehouse Get Bin Content Report run from Item Journal line.

      // Setup: Create Location with Zones and Bins. Add Inventory on Location Bin to update the Bin Content.
      Initialize;
      CreateLocationAndFindBin(Bin,FALSE);
      Quantity := LibraryRandom.RandDec(100,2);  // Use Random value for Quantity.
      CreateAndPostItemJournalLine(LibraryInventory.CreateItem(Item),Quantity,Bin."Location Code",Bin.Code);

      // Exercise: Run Warehouse Get Bin Content report from Item Journal line.
      RunWarehouseGetBinContentReportFromItemJournalLine(Bin."Location Code",Item."No.",Bin.Code);

      // Verify: Verify that Bin Content lines gets copied on Item Journal line.
      VerifyItemJournalLine(Item."No.",Bin."Location Code",Bin.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler)]
    PROCEDURE WarehouseGetBinContentReportFromTransferOrder@114();
    VAR
      Bin@1002 : Record 7354;
      Item@1000 : Record 27;
      Location@1007 : Record 14;
      TransferHeader@1001 : Record 5740;
      Quantity@1004 : Decimal;
    BEGIN
      // Test the functionality of Warehouse Get Bin Content Report run from Transfer Order.

      // Setup: Create Location with Bins. Post Item Journal on Location Bin with Item Tracking. Create a Transfer Order.
      Initialize;
      CreateLocationAndFindBin(Bin,TRUE);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE);
      Quantity := LibraryRandom.RandInt(10);  // Use Random value for Quantity.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      CreateAndPostItemJournalLineWithItemTracking(Item."No.",Quantity,Bin."Location Code",Bin.Code);
      LibraryWarehouse.CreateTransferHeader(
        TransferHeader,Bin."Location Code",LibraryWarehouse.CreateLocation(Location),CreateInTransitLocation);

      // Exercise: Run Warehouse Get Bin Content report from Transfer Order.
      LibraryWarehouse.GetBinContentTransferOrder(TransferHeader,Bin."Location Code",Item."No.",Bin.Code);

      // Verify: Verify that Bin Content lines gets copied on Transfer Order line.
      VerifyTransferOrderLine(TransferHeader."No.",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE BinContentFromBinContentCreationWorksheet@113();
    VAR
      Bin@1000 : Record 7354;
      Item@1009 : Record 27;
      Location@1004 : Record 14;
    BEGIN
      // Test that Bin Content is created by invoking Create Bin Content on Bin Content Creation Worksheet page.

      // Setup: Create Location with Zones and Bins. Find Bin and create an Item.
      Initialize;
      CreateFullWarehouseSetup(Location);
      FindBin(Bin,Location.Code);
      LibraryInventory.CreateItem(Item);

      // Exercise: Set values on Bin Content Creation Worksheet page and invoke Create Bin Content on the page.
      CreateBinContentFromWorksheetPage(Bin.Code,Item."No.");

      // Verify: Bin Content has been created for the Bin.
      VerifyBinContent(Location.Code,Bin."Zone Code",Bin.Code,Item."No.");
    END;

    [Test]
    [HandlerFunctions(PickSelectionHandler)]
    PROCEDURE PickWorksheet@133();
    VAR
      SalesLine@1006 : Record 37;
      PickWorksheet@1009 : TestPage 7345;
    BEGIN
      // Test and verify Get Warehouse Documents functionality on Pick Worksheet.

      // Setup: Create initial setup for Pick Worksheet.
      Initialize;
      CreateInitialSetupForPickWorksheet(SalesLine);

      // Exercise: Invoke Get Warehouse Documents from Pick Worksheet.
      PickWorksheet.OPENEDIT;
      PickWorksheet."Get Warehouse Documents".INVOKE;

      // Verify: Verify Pick Worksheet Line.
      VerifyPickWorksheet(SalesLine);
    END;

    [Test]
    [HandlerFunctions(PickSelectionHandler,CreatePickHandler,MessageHandler)]
    PROCEDURE PickFromPickWorksheet@131();
    VAR
      SalesLine@1006 : Record 37;
      PickWorksheet@1009 : TestPage 7345;
    BEGIN
      // Test and verify Create Pick functionality on Pick Worksheet.

      // Setup: Create initial setup for Pick Worksheet. Invoke Get Warehouse Documents from Pick Worksheet.
      Initialize;
      CreateInitialSetupForPickWorksheet(SalesLine);
      PickWorksheet.OPENEDIT;
      PickWorksheet."Get Warehouse Documents".INVOKE;

      // Exercise: Invoke Create Pick from Pick Worksheet.
      COMMIT;  // Commit required.
      PickWorksheet.CreatePick.INVOKE;

      // Verify: Verify Warehouse Activity Line.
      VerifyWarehouseActivityLine(SalesLine."Document No.",SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WarehouseItemTrackingLinesHandler,ItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE WarehousePick@129();
    VAR
      SalesLine@1002 : Record 37;
      WarehouseJournalLine@1000 : Record 7311;
      WarehouseShipmentHeader@1004 : Record 7320;
    BEGIN
      // Test and verify functionality of Warehouse Pick with Warehouse Tracking Lines.

      // Setup: Create and register Warehouse Journal Line with Item Tracking Lines. Calculate and post Warehouse Adjustment. Create and release Warehouse Shipment from Sales Order.
      Initialize;
      CreateWarehouseJournalLineWithItemTrackingLines(WarehouseJournalLine,WarehouseJournalLine."Entry Type"::"Positive Adjmt.");
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);
      CalculateAndPostWarehouseAdjustment(WarehouseJournalLine."Item No.");

      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);
      CreateAndReleaseSalesOrderWithItemTrackingLines(
        SalesLine,TRUE,WORKDATE,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code",'',WarehouseJournalLine.Quantity);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesLine);

      // Exercise: Create Warehouse Pick.
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);

      // Verify: Verify Warehouse Activity Line.
      VerifyWarehouseActivityLine(SalesLine."Document No.",SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(PutAwaySelectionHandler)]
    PROCEDURE CreatePutAwayWorksheet@128();
    VAR
      Location@1000 : Record 14;
      PurchaseLine@1001 : Record 39;
      PutAwayWorksheet@1002 : TestPage 7352;
    BEGIN
      // Create Warehouse Put Away Worksheet.

      // Setup: Create Full Warehouse Setup. Create Warehouse Receipt from Purchase Order.
      Initialize;
      CreateAndUpdateFullWareHouseSetup(Location);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseLine,Location.Code);

      // Exercise: Invoke Get Warehouse Documents from Put Away Worksheet.
      PutAwayWorksheet.OPENEDIT;
      PutAwayWorksheet.GetWarehouseDocuments.INVOKE;

      // Verify: Verify Worksheet Line.
      VerifyPutAwayWorksheet(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(PutAwaySelectionHandler,CreatePutAwayHandler,MessageHandler)]
    PROCEDURE CreatePutAwayFromPutAwayWorksheet@127();
    VAR
      Location@1000 : Record 14;
      PurchaseLine@1001 : Record 39;
      PutAwayWorksheet@1002 : TestPage 7352;
    BEGIN
      // Create Put Away from Put Away Worksheet.

      // Setup: Create Full Warehouse Setup. Create Warehouse Receipt from Purchase Order. Create Worksheet Line.
      Initialize;
      CreateAndUpdateFullWareHouseSetup(Location);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseLine,Location.Code);
      PutAwayWorksheet.OPENEDIT;
      PutAwayWorksheet.GetWarehouseDocuments.INVOKE;

      // Exercise: Invoke Create Put Away from Pick Worksheet.
      COMMIT;  // Commit required.
      PutAwayWorksheet.CreatePutAway.INVOKE;

      // Verify: Verify Put Away Worksheet Line.
      VerifyWarehouseActivityLine(PurchaseLine."Document No.",PurchaseLine."No.",PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE FEFOPickEnabledIfBinMandatoryAndPickRequiredUT@166();
    VAR
      Location@1000 : Record 14;
      LocationCard@1001 : TestPage 5703;
    BEGIN
      // [FEATURE] [FEFO] [Bin Mandatory] [UI]
      // [SCENARIO 372104] "Pick According to FEFO" on Location Card should be enabled while "Require Pick" = Yes,"Bin Mandatory" = Yes

      // [GIVEN] Open Location Card
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] "Require Pick" and "Bin Mandatory" are set to TRUE
      LocationCard.TRAP;
      LocationCard.OPENEDIT;
      LocationCard.GOTORECORD(Location);
      LocationCard."Require Pick".SETVALUE(TRUE);
      LocationCard."Bin Mandatory".SETVALUE(TRUE);

      // [THEN] "Pick According to FEFO" is enabled
      Assert.IsTrue(
        LocationCard."Pick According to FEFO".ENABLED,
        STRSUBSTNO(ShouldBeTxt,LocationCard."Pick According to FEFO".CAPTION,EnabledTxt));
    END;

    [Test]
    PROCEDURE FEFOPickDisabledIfBinMandatoryAndNotPickRequiredUT@172();
    VAR
      Location@1002 : Record 14;
      LocationCard@1001 : TestPage 5703;
    BEGIN
      // [FEATURE] [FEFO] [Bin Mandatory] [UI]
      // [SCENARIO 372104] "Pick According to FEFO" on Location Card should be disabled while "Require Pick" = No,"Bin Mandatory" = Yes

      // [GIVEN] Open Location Card
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] "Require Pick" is set to FALSE, "Bin Mandatory" is set to TRUE
      LocationCard.TRAP;
      LocationCard.OPENEDIT;
      LocationCard.GOTORECORD(Location);
      LocationCard."Bin Mandatory".SETVALUE(TRUE);

      // [THEN] "Pick According to FEFO" is disabled
      Assert.IsFalse(
        LocationCard."Pick According to FEFO".ENABLED,
        STRSUBSTNO(ShouldBeTxt,LocationCard."Pick According to FEFO".CAPTION,DisabledTxt));
    END;

    [Test]
    PROCEDURE FEFOPickDisabledIfNotBinMandatoryAndPickRequiredUT@175();
    VAR
      Location@1000 : Record 14;
      LocationCard@1001 : TestPage 5703;
    BEGIN
      // [FEATURE] [FEFO] [Bin Mandatory] [UI]
      // [SCENARIO 372104] "Pick According to FEFO" on Location Card should be disabled while "Require Pick" = Yes,"Bin Mandatory" = No

      // [GIVEN] Open Location Card
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] "Require Pick" is set to TRUE, "Bin Mandatory" is set to FALSE
      LocationCard.TRAP;
      LocationCard.OPENEDIT;
      LocationCard.GOTORECORD(Location);
      LocationCard."Require Pick".SETVALUE(TRUE);

      // [THEN] "Pick According to FEFO" is disabled
      Assert.IsFalse(
        LocationCard."Pick According to FEFO".ENABLED,
        STRSUBSTNO(ShouldBeTxt,LocationCard."Pick According to FEFO".CAPTION,DisabledTxt));
    END;

    [Test]
    PROCEDURE FEFOPickDisabledIfNotBinMandatoryAndNotPickRequiredUT@176();
    VAR
      Location@1000 : Record 14;
      LocationCard@1001 : TestPage 5703;
    BEGIN
      // [FEATURE] [FEFO] [Bin Mandatory] [UI]
      // [SCENARIO 372104] "Pick According to FEFO" on Location Card should be disabled while "Require Pick" = No,"Bin Mandatory" = No

      // [GIVEN] Open Location Card
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] "Require Pick" is set to FALSE, "Bin Mandatory" is set to FALSE
      LocationCard.TRAP;
      LocationCard.OPENEDIT;
      LocationCard.GOTORECORD(Location);

      // [THEN] "Pick According to FEFO" is disabled
      Assert.IsFalse(
        LocationCard."Pick According to FEFO".ENABLED,
        STRSUBSTNO(ShouldBeTxt,LocationCard."Pick According to FEFO".CAPTION,DisabledTxt));
    END;

    [Test]
    PROCEDURE PostedInvtPutAwayCanBeDeletedWhenBinNotMandatoryOnLocation@62();
    VAR
      Location@1000 : Record 14;
      PostedInvtPutAwayHeader@1001 : Record 7340;
    BEGIN
      // [FEATURE] [Inventory Put-Away] [Bin Mandatory] [UT]
      // [SCENARIO] Posted inventory put-away can be deleted if bin is not mandatory on location.
      Initialize;

      // [GIVEN] Posted inventory put-away on location with bin not mandatory.
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,TRUE,FALSE,FALSE,FALSE);
      MockPostedInvtPutAway(PostedInvtPutAwayHeader,Location.Code);

      // [WHEN] Delete posted inventory put-away.
      PostedInvtPutAwayHeader.DELETE(TRUE);

      // [THEN] Delete succeeded.
      PostedInvtPutAwayHeader.SETRANGE("Location Code",Location.Code);
      Assert.RecordIsEmpty(PostedInvtPutAwayHeader);
    END;

    [Test]
    PROCEDURE PostedInvtPutAwayCannotBeDeletedWhenBinMandatoryOnLocation@80();
    VAR
      Location@1001 : Record 14;
      PostedInvtPutAwayHeader@1000 : Record 7340;
    BEGIN
      // [FEATURE] [Inventory Put-Away] [Bin Mandatory] [UT]
      // [SCENARIO] Posted inventory put-away cannot be deleted if bin is mandatory on location.
      Initialize;

      // [GIVEN] Posted inventory put-away on location with mandatory bin.
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,FALSE,FALSE,FALSE);
      MockPostedInvtPutAway(PostedInvtPutAwayHeader,Location.Code);

      // [WHEN] Delete posted inventory put-away.
      ASSERTERROR PostedInvtPutAwayHeader.DELETE(TRUE);

      // [THEN] Delete failed.
      Assert.ExpectedError(BinMandatoryTxt);
    END;

    [Test]
    PROCEDURE OnCreatingStockkeepingUnitValidatePhysInvtCountingPeriodCode@168();
    VAR
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      StockkeepingUnit@1002 : Record 5700;
      PhysInvtCountingPeriod@1003 : Record 7381;
      CreatePerOption@1004 : 'Location,Variant,Location & Variant';
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Phys. Invt. Counting Period]
      // [SCENARIO 208608] On creating "Stockkeeping Unit" the field "Phys Invt Counting Period Code" is validated by the same way as on validating the same in Item table.
      Initialize;

      // [GIVEN] Location "L";
      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] "Phys. Invt. Counting Period" "P";
      CreatePhysInvtCountingPeriod(PhysInvtCountingPeriod);

      // [GIVEN] Item "I", "I"."Phys Invt Counting Period Code" = "P".Code;
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Phys Invt Counting Period Code",PhysInvtCountingPeriod.Code);
      Item.MODIFY(TRUE);

      // [WHEN] Create Stockkeeping Unit for "I" per Location
      LibraryInventory.CreateStockKeepingUnit(Item,CreatePerOption::Location,FALSE,FALSE);

      // [THEN] Stockkeeping Unit for "I" and "L" has the same values of the fields "Phys Invt Counting Period Code", "Last Counting Period Update", "Next Counting Start Date" and "Next Counting End Date" as "I".
      StockkeepingUnit.GET(Location.Code,Item."No.",'');
      StockkeepingUnit.TESTFIELD("Phys Invt Counting Period Code",Item."Phys Invt Counting Period Code");
      StockkeepingUnit.TESTFIELD("Last Counting Period Update",Item."Last Counting Period Update");
      StockkeepingUnit.TESTFIELD("Next Counting Start Date",Item."Next Counting Start Date");
      StockkeepingUnit.TESTFIELD("Next Counting End Date",Item."Next Counting End Date");
    END;

    [Test]
    PROCEDURE OnCreatingStockkeepingUnitValidatePhysInvtCountingPeriodCodeWhenBlank@169();
    VAR
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      StockkeepingUnit@1002 : Record 5700;
      CreatePerOption@1004 : 'Location,Variant,Location & Variant';
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Phys. Invt. Counting Period]
      // [SCENARIO 208608] On creating "Stockkeeping Unit" the field "Phys Invt Counting Period Code" remains blank if the field "Phys Invt Counting Period Code" of Item is blank, no dialogue occurs.
      Initialize;

      // [GIVEN] Location "L";
      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Item "I";
      LibraryInventory.CreateItem(Item);

      // [WHEN] Create Stockkeeping Unit for "I" per Location
      LibraryInventory.CreateStockKeepingUnit(Item,CreatePerOption::Location,FALSE,FALSE);

      // [THEN] Stockkeeping Unit for "I" and "L" has the blank values of the fields "Phys Invt Counting Period Code", "Last Counting Period Update", "Next Counting Start Date" and "Next Counting End Date".
      StockkeepingUnit.GET(Location.Code,Item."No.",'');
      StockkeepingUnit.TESTFIELD("Phys Invt Counting Period Code",'');
      StockkeepingUnit.TESTFIELD("Last Counting Period Update",0D);
      StockkeepingUnit.TESTFIELD("Next Counting Start Date",0D);
      StockkeepingUnit.TESTFIELD("Next Counting End Date",0D);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,MessageHandler)]
    PROCEDURE GetBinContentDoesNotInsertItemTrackingWhenAvailableSerialNoCannotBeDefined@170();
    VAR
      Item@1000 : Record 27;
      Bin@1007 : Record 7354;
      Location@1001 : Record 14;
      TransferToLocation@1004 : Record 14;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      TransferHeader@1005 : Record 5740;
      ReservationEntry@1006 : Record 337;
      Qty@1010 : Decimal;
    BEGIN
      // [FEATURE] [Get Bin Content] [Transfer Order] [Item Tracking]
      // [SCENARIO 223887] Transfer Line populated by invoking "Get Bin Content" function does not receive any item tracking when there is uncertainty which serial no. is available.
      Initialize;

      // [GIVEN] WMS location "L" with mandatory shipment and pick.
      CreateAndUpdateLocationWithSetup(Location,TRUE,TRUE,TRUE);
      LibraryWarehouse.FindBin(Bin,Location.Code,'',1);

      // [GIVEN] Item "I" with serial no. tracking.
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE);

      // [GIVEN] X serial nos. "S1".."SX" of "I" are purchased and put-away.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,TRUE,Item."No.",Location.Code,Bin.Code);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.");

      // [GIVEN] Sales order for "Y" ("Y" < "X") pcs of "I". No item tracking is selected on the sales line.
      // [GIVEN] Warehouse shipment and pick are created for the order.
      Qty := LibraryRandom.RandInt(5);
      CreateAndReleaseSalesOrderWithItemTrackingLines(SalesLine,FALSE,WORKDATE,Item."No.",Location.Code,Bin.Code,Qty);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesLine);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [GIVEN] Transfer Order from "L" to another location.
      LibraryWarehouse.CreateTransferHeader(
        TransferHeader,Location.Code,LibraryWarehouse.CreateLocation(TransferToLocation),CreateInTransitLocation);

      // [WHEN] Run "Get Bin Content" filtered by location "L" and item "I" to create Transfer Order lines.
      LibraryWarehouse.GetBinContentTransferOrder(TransferHeader,Location.Code,Item."No.",'');

      // [THEN] Transfer Order Line for "X" - "Y" pcs of "I" is created.
      VerifyTransferOrderLine(TransferHeader."No.",Item."No.",PurchaseLine.Quantity - Qty);

      // [THEN] No item tracking is assigned to the line.
      ReservationEntry.INIT;
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      Assert.RecordIsEmpty(ReservationEntry);

      LibraryVariableStorage.AssertEmpty;
    END;

    LOCAL PROCEDURE Initialize@9();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Clear global variables.
      CLEAR(BinTemplateCode);
      CLEAR(RackNo);
      CLEAR(SectionNo);
      CLEAR(LevelNo);
      CLEAR(FieldSeparator);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculateAndPostWarehouseAdjustment@92(ItemNo@1002 : Code[20]) : Code[10];
    VAR
      ItemJournalBatch@1000 : Record 233;
      Item@1001 : Record 27;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      Item.GET(ItemNo);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatePhysInvtCountingPeriod@187(VAR PhysInvtCountingPeriod@1001 : Record 7381);
    BEGIN
      PhysInvtCountingPeriod.INIT;
      PhysInvtCountingPeriod.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(PhysInvtCountingPeriod.FIELDNO(Code),DATABASE::"Phys. Invt. Counting Period"));
      PhysInvtCountingPeriod.VALIDATE(
        Description,LibraryUtility.GenerateRandomText(MAXSTRLEN(PhysInvtCountingPeriod.Description)));
      PhysInvtCountingPeriod.VALIDATE("Count Frequency per Year",LibraryRandom.RandIntInRange(7,11));
      PhysInvtCountingPeriod.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostInventoryPick@145(SourceNo@1001 : Code[20];LocationCode@1003 : Code[10];QtyToHandle@1004 : Decimal);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateInvtPutPickMovement(WarehouseActivityHeader."Source Document"::"Sales Order",SourceNo,FALSE,TRUE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.MODIFYALL("Qty. to Handle",QtyToHandle,TRUE);
      PostInventoryPick(SourceNo,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@84(ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    VAR
      ItemJournalBatch@1006 : Record 233;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithItemTracking@120(ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    VAR
      ItemJournalBatch@1006 : Record 233;
      ItemJournalLine@1000 : Record 83;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Execute ItemTrackingLinesHandler for assigning Item Tracking lines.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostMultiplePurchaseOrders@54(VAR PurchaseOrderNo@1007 : ARRAY [5] OF Code[20];VAR PurchaseReceiptNo@1008 : ARRAY [5] OF Code[20];LoopCount@1002 : Integer) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      Bin@1012 : Record 7354;
      Location@1011 : Record 14;
      Item@1010 : Record 27;
      Vendor@1009 : Record 23;
      Counter@1000 : Integer;
    BEGIN
      CreateAndUpdateLocationWithSetup(Location,TRUE,FALSE,FALSE);
      LibraryWarehouse.FindBin(Bin,Location.Code,'',1);  // Find Bin of Index 1.
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
      FOR Counter := 1 TO LoopCount DO BEGIN
        CLEAR(PurchaseHeader);
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
        CreateAndUpdatePurchaseLine(
          PurchaseLine,PurchaseHeader,LibraryRandom.RandInt(5),Item."No.",Bin."Location Code",Bin.Code);  // Integer Value required.
        PurchaseLine.OpenItemTrackingLines;
        PurchaseOrderNo[Counter] := PurchaseHeader."No.";
        PurchaseReceiptNo[Counter] := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      END;
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@139(VAR PurchaseLine@1006 : Record 39;LocationCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1000 : Record 38;
      Item@1002 : Record 27;
    BEGIN
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,FALSE,LibraryInventory.CreateItem(Item),LocationCode,'');
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithItemTrackingLines@256(VAR PurchaseLine@1004 : Record 39;IsTracking@1008 : Boolean;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1007 : Code[20]);
    VAR
      PurchaseHeader@1005 : Record 38;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreateAndUpdatePurchaseLine(PurchaseLine,PurchaseHeader,LibraryRandom.RandIntInRange(10,20),ItemNo,LocationCode,BinCode);  // Integer Value required.
      IF IsTracking THEN
        CreatePurchaseTrackingLine(PurchaseLine,WORKDATE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithItemTrackingLines@17(VAR SalesLine@1004 : Record 37;IsTracking@1009 : Boolean;ExpirationDate@1006 : Date;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1007 : Code[20];Quantity@1008 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Bin Code",BinCode);
      SalesLine.MODIFY(TRUE);
      IF IsTracking THEN BEGIN
        SalesLine.OpenItemTrackingLines;
        UpdateReservationEntry(SalesLine."No.",ExpirationDate);
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLines@135(VAR SalesHeader@1001 : Record 36;ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];LocationCode@1005 : Code[10];BinCode@1006 : Code[20];Quantity@1007 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesLine,SalesHeader,ItemNo,LocationCode,BinCode,Quantity);
      CreateSalesLine(SalesLine,SalesHeader,ItemNo2,LocationCode,BinCode,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@137(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesLine@1001 : Record 37);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.SETRANGE("Location Code",SalesLine."Location Code");
      WarehouseShipmentHeader.FINDFIRST;
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdateFullWareHouseSetup@138(VAR Location@1000 : Record 14);
    BEGIN
      CreateFullWarehouseSetup(Location);
      Location.VALIDATE("Use Put-away Worksheet",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocationWithSetup@3(VAR Location@1004 : Record 14;BinMandatory@1001 : Boolean;RequireReceive@1006 : Boolean;RequireShipment@1002 : Boolean);
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,TRUE,TRUE,RequireReceive,RequireShipment);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
    END;

    LOCAL PROCEDURE CreateAndUpdatePurchaseLine@36(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1003 : Record 38;Quantity@1005 : Decimal;ItemNo@1004 : Code[20];LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);  // Integer Value required.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinContentFromWorksheetPage@123(BinCode@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      BinContentCreationWorksheet@1000 : TestPage 7371;
    BEGIN
      BinContentCreationWorksheet.OPENEDIT;
      BinContentCreationWorksheet."Bin Code".SETVALUE(BinCode);
      BinContentCreationWorksheet."Item No.".SETVALUE(ItemNo);
      BinContentCreationWorksheet.Fixed.SETVALUE(TRUE);
      BinContentCreationWorksheet.CreateBinContent.INVOKE;
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@48(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateInTransitLocation@121() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Use As In-Transit",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateInitialSetupForPickWorksheet@134(VAR SalesLine@1001 : Record 37);
    VAR
      PurchaseLine@1000 : Record 39;
      WarehouseShipmentHeader@1002 : Record 7320;
    BEGIN
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseLine);
      PostWarehouseReceipt(PurchaseLine."Document No.");
      RegisterWarehouseActivity(PurchaseLine."Document No.");
      CreateAndReleaseSalesOrderWithItemTrackingLines(
        SalesLine,FALSE,WORKDATE,PurchaseLine."No.",PurchaseLine."Location Code",'',PurchaseLine.Quantity);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesLine);
    END;

    LOCAL PROCEDURE CreateInitalSetupForWarehouse@26(VAR Bin@1000 : Record 7354;IsSerialNo@1002 : Boolean) : Code[20];
    VAR
      Location@1001 : Record 14;
      BinContent@1003 : Record 7302;
      Item@1004 : Record 27;
    BEGIN
      CreateAndUpdateLocationWithSetup(Location,TRUE,FALSE,FALSE);
      LibraryWarehouse.FindBin(Bin,Location.Code,'',1);  // Find Bin of Index 1.
      CreateItemWithItemTrackingCode(Item,IsSerialNo,TRUE);
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      EXIT(Item."No.");  // Create Item With Item Tracking Code.
    END;

    LOCAL PROCEDURE CreateInventoryPut@19(VAR PurchaseLine@1000 : Record 39;ManualAssignSerialNo@1004 : Boolean;ManualAssignLot@1005 : Boolean;LocationCode@1003 : Code[10]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseLine."Document No.",TRUE,FALSE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",LocationCode,PurchaseLine."Document No.",
        WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);

      IF ManualAssignSerialNo THEN
        UpdateWarehouseActivityLineForSerialNo(WarehouseActivityLine);

      IF ManualAssignLot THEN
        UpdateWarehouseActivityLineForLotNo(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreateInventoryPick@21(VAR SalesLine@1000 : Record 37;LocationCode@1003 : Code[10]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesLine."Document No.",FALSE,TRUE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationCode,SalesLine."Document No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreateInventoryPutWithSameLotNo@64(VAR WarehouseActivityLine@1000 : Record 5767);
    VAR
      Bin@1004 : Record 7354;
      PurchaseLine@1002 : Record 39;
      PurchaseHeader@1001 : Record 38;
      LotNo@1006 : Code[20];
      ItemNo@1005 : Code[20];
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      ItemNo := CreateInitalSetupForWarehouse(Bin,FALSE);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,TRUE,ItemNo,Bin."Location Code",Bin.Code);
      ReopenPurchaseHeader(PurchaseHeader,PurchaseLine."Document Type",PurchaseLine."Document No.");
      LotNo := GetLotNoFromReservationLine(PurchaseLine."No.");
      // Create Second Line for Purhase Order.
      CreateAndUpdatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Quantity,PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine."Bin Code");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      CreatePurchaseTrackingLine(PurchaseLine,WORKDATE);  // Create Item Tracking Line for Second Line.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      UpdateReservationEntryForLotNo(ItemNo,LotNo);  // Update Same Lot No. for Bot the Purchase Lines.
      CreateInventoryPut(PurchaseLine,FALSE,FALSE,Bin."Location Code");  // Create Inventory Put with Expiration Date.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",Bin."Location Code",
        PurchaseLine."Document No.",WarehouseActivityLine."Action Type"::Place);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@22(VAR ItemTrackingCode@1003 : Record 6502;Lot@1001 : Boolean;Serial@1002 : Boolean;ManExpirDateEntryReqd@1000 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManExpirDateEntryReqd);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@4(VAR Item@1004 : Record 27;IsSerialNo@1003 : Boolean;ManExpirDateEntryReqd@1001 : Boolean);
    VAR
      ItemTrackingCode@1002 : Record 6502;
      LibraryUtility@1000 : Codeunit 131000;
    BEGIN
      // Create Item Tracking Code With Serial or Lot No.
      IF IsSerialNo THEN
        CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,ManExpirDateEntryReqd)
      ELSE
        CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,ManExpirDateEntryReqd);

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationAndBinTemplate@106();
    VAR
      Location@1000 : Record 14;
      BinTemplate@1001 : Record 7335;
    BEGIN
      CreateAndUpdateLocationWithSetup(Location,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateBinTemplate(BinTemplate,Location.Code);
      BinTemplateCode := BinTemplate.Code;  // BinTemplateCode used in CalculateBinRequestPageHandler.
    END;

    LOCAL PROCEDURE CreateLocationAndFindBin@167(VAR Bin@1001 : Record 7354;RequireShipment@1002 : Boolean);
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateAndUpdateLocationWithSetup(Location,TRUE,FALSE,RequireShipment);
      LibraryWarehouse.FindBin(Bin,Location.Code,'',1);  // Find Bin of Index 1.
    END;

    LOCAL PROCEDURE CreateLocationByPage@99(Location@1000 : Record 14) LocationCode : Code[10];
    VAR
      LibraryUtility@1002 : Codeunit 131000;
      LocationPage@1001 : TestPage 5703;
    BEGIN
      LocationPage.OPENNEW;
      LocationPage.Code.SETVALUE(LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location));
      LocationPage."Bin Mandatory".SETVALUE(Location."Bin Mandatory");
      LocationPage."Directed Put-away and Pick".SETVALUE(Location."Directed Put-away and Pick");
      LocationCode := LocationPage.Code.VALUE;
      LocationPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrder@83(VAR WarehouseActivityHeader@1000 : Record 5766);
    VAR
      Item@1008 : Record 27;
      Location@1007 : Record 14;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreateAndUpdateLocationWithSetup(Location,FALSE,FALSE,TRUE);
      LibraryInventory.CreateItem(Item);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateAndReleaseSalesOrderWithItemTrackingLines(
        SalesLine,FALSE,WORKDATE,Item."No.",Location.Code,'',LibraryRandom.RandDec(10,2));  // Taking Random Quantity.
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.SETRANGE("Location Code",Location.Code);
      WarehouseShipmentHeader.FINDFIRST;
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      FindWarehouseActivityNo(WarehouseActivityLine,SalesLine."Document No.",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseTrackingLine@61(VAR PurchaseLine@1000 : Record 39;ExpirationDate@1001 : Date);
    BEGIN
      PurchaseLine.OpenItemTrackingLines;
      UpdateReservationEntry(PurchaseLine."No.",ExpirationDate);
    END;

    LOCAL PROCEDURE CreateSalesLine@93(VAR SalesLine@1001 : Record 37;SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];BinCode@1005 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Bin Code",BinCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@81(ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];ItemVariantCode@1000 : Code[10];CreatePerOption@1007 : Option;ReplacePreviousSKUs@1005 : Boolean);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.SETRANGE("Variant Filter",ItemVariantCode);
      LibraryInventory.CreateStockKeepingUnit(Item,CreatePerOption,FALSE,ReplacePreviousSKUs);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalBatch@51(VAR WarehouseJournalBatch@1000 : Record 7310;LocationCode@1001 : Code[10]);
    VAR
      WarehouseJournalTemplate@1002 : Record 7309;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@70(VAR PurchaseLine@1001 : Record 39);
    VAR
      Location@1000 : Record 14;
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreateFullWarehouseSetup(Location);
      CreateAndReleasePurchaseOrderWithItemTrackingLines(PurchaseLine,FALSE,LibraryInventory.CreateItem(Item),Location.Code,'');
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLineWithItemTrackingLines@87(VAR WarehouseJournalLine@1004 : Record 7311;EntryType@1005 : Option);
    VAR
      Location@1000 : Record 14;
      Item@1001 : Record 27;
      WarehouseJournalBatch@1002 : Record 7310;
      Bin@1003 : Record 7354;
    BEGIN
      CreateFullWarehouseSetup(Location);
      Location.VALIDATE("Allow Breakbulk",TRUE);
      Location.VALIDATE("Always Create Pick Line",TRUE);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
      CreateItemWithItemTrackingCode(Item,FALSE,FALSE);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,Location.Code);
      FindBin(Bin,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",
        WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",Bin.Code,EntryType,Item."No.",LibraryRandom.RandDec(100,2));  // Use random Quantity.
      WarehouseJournalLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWhseLocations@149(VAR LocationCode@1002 : ARRAY [2] OF Code[10]);
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
      i@1003 : Integer;
    BEGIN
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.DELETEALL;

      FOR i := 1 TO 2 DO BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,i = 2);
        LocationCode[i] := Location.Code;
      END;
    END;

    LOCAL PROCEDURE FindBin@60(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.SETRANGE("Adjustment Bin",FALSE);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FillBinCodeValue@107();
    BEGIN
      // Fill RackNo, SectionNo, LevelNo With Random Values.
      RackNo := FORMAT(LibraryRandom.RandInt(5));
      SectionNo := FORMAT(LibraryRandom.RandInt(5));
      LevelNo := FORMAT(LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE FindStockkeepingUnit@69(VAR StockkeepingUnit@1003 : Record 5700;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];ItemVariantCode@1000 : Code[10]);
    BEGIN
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.SETRANGE("Location Code",LocationCode);
      StockkeepingUnit.SETRANGE("Variant Code",ItemVariantCode);
      StockkeepingUnit.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@40(VAR WarehouseActivityHeader@1000 : Record 5766;SourceNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityHeader.SETRANGE("Source No.",SourceNo);
      WarehouseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@2(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseRegister@132(JournalBatchName@1001 : Code[10]) : Boolean;
    VAR
      WarehouseRegister@1000 : Record 7313;
    BEGIN
      WarehouseRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      EXIT(WarehouseRegister.FINDFIRST);
    END;

    LOCAL PROCEDURE FindWhseActivityLine@18(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20];ActionType@1004 : Option);
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,ActivityType);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityLine."No.");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindZone@59(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@58(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLotNoFromReservationLine@56(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      EXIT(ReservationEntry."Lot No.");
    END;

    LOCAL PROCEDURE InsertThreeInternalPicks@151(LocationCode@1000 : Code[10];VAR DocumentNo@1002 : ARRAY [3] OF Code[20]);
    VAR
      WhseInternalPickHeader@1001 : Record 7333;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO
        WITH WhseInternalPickHeader DO BEGIN
          INIT;
          "No." := LibraryUtility.GenerateGUID;
          "Location Code" := LocationCode;
          INSERT;
          DocumentNo[i] := "No.";
        END;
    END;

    LOCAL PROCEDURE InsertThreeInternalPutAways@152(LocationCode@1000 : Code[10];VAR DocumentNo@1002 : ARRAY [3] OF Code[20]);
    VAR
      WhseInternalPutAwayHeader@1001 : Record 7331;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO
        WITH WhseInternalPutAwayHeader DO BEGIN
          INIT;
          "No." := LibraryUtility.GenerateGUID;
          "Location Code" := LocationCode;
          INSERT;
          DocumentNo[i] := "No.";
        END;
    END;

    LOCAL PROCEDURE InsertThreeRegisteredWhseActivities@164(ActivityType@1004 : Option;LocationCode@1000 : Code[10];VAR DocumentNo@1002 : ARRAY [3] OF Code[20]);
    VAR
      RegisteredWhseActivityHdr@1001 : Record 5772;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO
        WITH RegisteredWhseActivityHdr DO BEGIN
          INIT;
          Type := ActivityType;
          "No." := LibraryUtility.GenerateGUID;
          "Location Code" := LocationCode;
          INSERT;
          DocumentNo[i] := "No.";
        END;
    END;

    LOCAL PROCEDURE MockPostedInvtPutAway@161(VAR PostedInvtPutAwayHeader@1000 : Record 7340;LocationCode@1001 : Code[10]);
    BEGIN
      WITH PostedInvtPutAwayHeader DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Posted Invt. Put-away Header");
        "Location Code" := LocationCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE NoSeriesSetup@33();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      LibraryUtility@1001 : Codeunit 131000;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostInventoryPick@23(SourceNo@1002 : Code[20];AsInvoice@1001 : Boolean);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,AsInvoice);
    END;

    LOCAL PROCEDURE PostInventoryPut@200(SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::"Invt. Put-away");
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);  // Post as Invoice.
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@141(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptWithPartialQuantityToReceive@57(VAR WarehouseReceiptLine@1000 : Record 7317;PurchaseLine@1001 : Record 39) : Decimal;
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      FindWarehouseReceiptLine(
        WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseLine."Document No.");
      WarehouseReceiptLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);  // Use PurchaseLine.Quantity / 2 for taking partial Quantity To Receive.
      WarehouseReceiptLine.MODIFY(TRUE);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      EXIT(WarehouseReceiptLine."Qty. to Receive");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@142(SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReopenPurchaseHeader@46(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.GET(DocumentType,DocumentNo);
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE RunDateCompressWhseEntries@97(ItemNo@1002 : Code[20]);
    VAR
      WarehouseEntry@1001 : Record 7312;
      DateCompressWhseEntries@1000 : Report 7398;
    BEGIN
      COMMIT;  // Commit required for batch job report.
      CLEAR(DateCompressWhseEntries);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      DateCompressWhseEntries.SETTABLEVIEW(WarehouseEntry);
      DateCompressWhseEntries.RUN;
    END;

    LOCAL PROCEDURE RunDeleteRegisteredWarehouseDocumentReport@109(WarehouseActivityHeaderNo@1002 : Code[20]);
    VAR
      RegisteredWhseActivityHdr@1001 : Record 5772;
      DeleteRegisteredWhseDocs@1000 : Report 5755;
    BEGIN
      CLEAR(DeleteRegisteredWhseDocs);
      COMMIT; // COMMIT is required to run the Report.
      RegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.",WarehouseActivityHeaderNo);
      DeleteRegisteredWhseDocs.SETTABLEVIEW(RegisteredWhseActivityHdr);
      DeleteRegisteredWhseDocs.RUN;
    END;

    LOCAL PROCEDURE RunWarehouseGetBinContentReportFromItemJournalLine@118(LocationCode@1003 : Code[10];ItemNo@1000 : Code[20];BinCode@1004 : Code[20]);
    VAR
      BinContent@1001 : Record 7302;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      LibraryWarehouse.WhseGetBinContentFromItemJournalLine(BinContent,ItemJournalLine);
    END;

    LOCAL PROCEDURE ShowRegisteredActivityDoc@165(ActivityType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
    BEGIN
      LibraryVariableStorage.Enqueue(DocumentNo);
      RegisteredWhseActivityLine."Activity Type" := ActivityType;
      RegisteredWhseActivityLine."No." := DocumentNo;
      RegisteredWhseActivityLine.ShowRegisteredActivityDoc;
    END;

    LOCAL PROCEDURE ShowWhseDocFromActivityLine@150(WhseDocumentType@1002 : Option;WhseDocumentNo@1001 : Code[20]);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      LibraryVariableStorage.Enqueue(WhseDocumentNo);
      WhseActivityLine."Whse. Document Type" := WhseDocumentType;
      WhseActivityLine."Whse. Document No." := WhseDocumentNo;
      WhseActivityLine.ShowWhseDoc;
    END;

    LOCAL PROCEDURE ShowWhseDocFromRegisteredActivityLine@156(WhseDocumentType@1002 : Option;WhseDocumentNo@1001 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      LibraryVariableStorage.Enqueue(WhseDocumentNo);
      RegisteredWhseActivityLine."Whse. Document Type" := WhseDocumentType;
      RegisteredWhseActivityLine."Whse. Document No." := WhseDocumentNo;
      RegisteredWhseActivityLine.ShowWhseDoc;
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@78(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryUtility.GenerateGUID;  // Fix for Item Journal Posting creates a new Item Journal Batch.
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@76(ItemNo@1002 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      ItemJournalLine@1004 : Record 83;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandDec(10,2));  // Taking random Quantity.
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateReservationEntry@5(ItemNo@1001 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UpdateReservationEntryForLotNo@55(ItemNo@1001 : Code[20];NewLotNo@1002 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Lot No.",NewLotNo,TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostInItem@71(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Taking Random Unit Cost.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWarehouseActivityLineForLotNo@47(VAR WarehouseActivityLine@1000 : Record 5767);
    BEGIN
      WarehouseActivityLine.VALIDATE("Lot No.",WarehouseActivityLine."Location Code");  // Value not important for test.
      WarehouseActivityLine.VALIDATE("Expiration Date",WORKDATE);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWarehouseActivityLineForSerialNo@44(VAR WarehouseActivityLine@1000 : Record 5767);
    VAR
      Count@1001 : Integer;
    BEGIN
      WarehouseActivityLine.FINDSET;
      FOR Count := 1 TO WarehouseActivityLine.COUNT DO BEGIN
        WarehouseActivityLine.VALIDATE("Serial No.",FORMAT(Count));
        WarehouseActivityLine.VALIDATE("Expiration Date",WORKDATE);
        WarehouseActivityLine.MODIFY(TRUE);
        WarehouseActivityLine.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyBinCode@108(BinCreationWorksheet@1004 : TestPage 7372);
    VAR
      BinCode@1005 : Code[62];
    BEGIN
      BinCreationWorksheet.FIRST;
      BinCode := RackNo + FieldSeparator + SectionNo + FieldSeparator + LevelNo;
      BinCreationWorksheet."Bin Code".ASSERTEQUALS(BinCode);
    END;

    LOCAL PROCEDURE VerifyBinContent@124(LocationCode@1001 : Code[10];ZoneCode@1004 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Zone Code",ZoneCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.FINDFIRST;
      BinContent.TESTFIELD("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE VerifyPostedEntryAfterPostingPurchaseInvoice@68(PurchaseOrderNo@1002 : ARRAY [5] OF Code[20];PurchaseReceiptNo@1005 : ARRAY [5] OF Code[20];ItemNo@1004 : Code[20];LoopCount@1006 : Integer);
    VAR
      PurchaseHeader@1001 : Record 38;
      ValueEntry@1003 : Record 5802;
      Counter@1000 : Integer;
    BEGIN
      FOR Counter := 1 TO LoopCount DO BEGIN
        PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseOrderNo[Counter]);
        VerifyValueEntry(
          LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE),ValueEntry."Document Type"::"Purchase Invoice",ItemNo);
        VerifyValueEntry(PurchaseReceiptNo[Counter],ValueEntry."Document Type"::"Purchase Receipt",ItemNo);
        VerifyItemLedgerEntry(PurchaseReceiptNo[Counter],ItemNo);
      END;
    END;

    LOCAL PROCEDURE VerifyLocation@100(Location@1000 : Record 14;LocationCode@1001 : Code[20]);
    VAR
      Location2@1002 : Record 14;
    BEGIN
      Location2.GET(LocationCode);
      Location2.TESTFIELD("Bin Mandatory",Location."Bin Mandatory");
      Location2.TESTFIELD("Directed Put-away and Pick",Location."Directed Put-away and Pick");
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@119(ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1000 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Location Code",LocationCode);
      ItemJournalLine.TESTFIELD("Bin Code",BinCode);
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@63(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Purchase Receipt");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.TESTFIELD("Item No.",ItemNo);
        ItemLedgerEntry.TESTFIELD(Quantity,1);
        ItemLedgerEntry.TESTFIELD("Invoiced Quantity",1);
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPickWorksheet@136(SalesLine@1001 : Record 37);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",SalesLine."No.");
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD(Quantity,SalesLine.Quantity);
      WhseWorksheetLine.TESTFIELD("Destination No.",SalesLine."Sell-to Customer No.");
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@35(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date;BinCode@1004 : Code[20]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",LocationCode);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Expiration Date",ExpirationDate);
      PostedInvtPickLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPutLine@316(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date;BinCode@1004 : Code[20]);
    VAR
      PostedInvtPutAwayLine@1005 : Record 7341;
    BEGIN
      PostedInvtPutAwayLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPutAwayLine.SETRANGE("Location Code",LocationCode);
      PostedInvtPutAwayLine.FINDFIRST;
      PostedInvtPutAwayLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPutAwayLine.TESTFIELD("Expiration Date",ExpirationDate);
      PostedInvtPutAwayLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseInvoice@25(OrderNo@1003 : Code[20];LocationCode@1002 : Code[10];Bincode@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchInvHeader@1005 : Record 122;
      PurchInvLine@1004 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;

      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("Location Code",LocationCode);
      PurchInvLine.TESTFIELD("Bin Code",Bincode);
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@32(OrderNo@1003 : Code[20];LocationCode@1002 : Code[10];Bincode@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      SalesInvoiceHeader@1005 : Record 112;
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;

      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("Location Code",LocationCode);
      SalesInvoiceLine.TESTFIELD("Bin Code",Bincode);
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPutAwayWorksheet@140(PurchaseLine@1001 : Record 39);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",PurchaseLine."No.");
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyQuantityHandledOnWarehouseActivityLine@130(SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];QtyHandled@1003 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Take);
      REPEAT
        WarehouseActivityLine.TESTFIELD("Qty. Handled",QtyHandled);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReceiptLine@14(OrderNo@1000 : Code[20];LocationCode@1001 : Code[10];Bincode@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchRcptLine@1004 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD("Location Code",LocationCode);
      PurchRcptLine.TESTFIELD("Bin Code",Bincode);
      PurchRcptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@31(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      ReservationEntry@1001 : Record 337;
      TotalQuantity@1003 : Decimal;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        TotalQuantity += ReservationEntry.Quantity;
      UNTIL ReservationEntry.NEXT = 0;
      Assert.AreEqual(Quantity,TotalQuantity,STRSUBSTNO(QuantityError,Quantity));
    END;

    LOCAL PROCEDURE VerifySalesLine@111(DocumentNo@1002 : Code[20];No@1003 : Code[20];QuantityShipped@1004 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("Quantity Shipped",QuantityShipped);
    END;

    LOCAL PROCEDURE VerifyShipmentLine@34(OrderNo@1000 : Code[20];LocationCode@1001 : Code[10];Bincode@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesShipmentLine@1004 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Order No.",OrderNo);
      SalesShipmentLine.FINDFIRST;
      SalesShipmentLine.TESTFIELD("Location Code",LocationCode);
      SalesShipmentLine.TESTFIELD("Bin Code",Bincode);
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyStockkeepingUnit@73(ItemNo@1000 : Code[20];LocationCode@1002 : Code[10];ItemVariantCode@1003 : Code[10];UnitCost@1004 : Decimal);
    VAR
      StockkeepingUnit@1001 : Record 5700;
    BEGIN
      FindStockkeepingUnit(StockkeepingUnit,ItemNo,LocationCode,ItemVariantCode);
      StockkeepingUnit.TESTFIELD("Unit Cost",UnitCost);
    END;

    LOCAL PROCEDURE VerifyTransferOrderLine@122(TransferHeaderNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Document No.",TransferHeaderNo);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyValueEntry@77(DocumentNo@1001 : Code[20];DocumentType@1003 : Option;ItemNo@1002 : Code[20]);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.FINDSET;
      REPEAT
        ValueEntry.TESTFIELD("Item No.",ItemNo);
        ValueEntry.TESTFIELD("Valued Quantity",1);
      UNTIL ValueEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@72(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
        WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseEntries@50(EntryType@1001 : Option;ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseEntry@1003 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseJournalLine@53(VAR WarehouseJournalLine@1000 : Record 7311);
    VAR
      WarehouseJournalLine2@1001 : Record 7311;
    BEGIN
      WarehouseJournalLine2.SETRANGE("Journal Template Name",WarehouseJournalLine."Journal Template Name");
      WarehouseJournalLine2.SETRANGE("Journal Batch Name",WarehouseJournalLine."Journal Batch Name");
      WarehouseJournalLine2.SETRANGE("Item No.",WarehouseJournalLine."Item No.");
      WarehouseJournalLine2.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyWarehouseRegister@103(JournalBatchName@1001 : Code[10];SourceCode@1002 : Code[10]);
    VAR
      WarehouseRegister@1000 : Record 7313;
    BEGIN
      WarehouseRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      WarehouseRegister.FINDFIRST;
      WarehouseRegister.TESTFIELD("Source Code",SourceCode);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@49(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@7(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateHandler@13(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@6(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        ItemTrackingMode::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingMode::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingMode::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@41(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculateBinRequestPageHandler@110(VAR CalculateBins@1000 : TestRequestPage 7310);
    BEGIN
      CalculateBins.RackToNo.SETVALUE('');
      CalculateBins.SelectionToNo.SETVALUE('');
      CalculateBins.LevelToNo.SETVALUE('');
      CalculateBins.BinTemplateCode.SETVALUE(BinTemplateCode);
      CalculateBins.RackFromNo.SETVALUE(RackNo);
      CalculateBins.RackToNo.SETVALUE(RackNo);
      CalculateBins.SelectionFromNo.SETVALUE(SectionNo);
      CalculateBins.SelectionToNo.SETVALUE(SectionNo);
      CalculateBins.LevelFromNo.SETVALUE(LevelNo);
      CalculateBins.LevelToNo.SETVALUE(LevelNo);
      CalculateBins.FieldSeparator.SETVALUE(FieldSeparator);
      CalculateBins.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePutAwayHandler@147(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE DeleteRegisteredWhseDocsReportHandler@79(VAR DeleteRegisteredWhseDocs@1000 : TestRequestPage 5755);
    BEGIN
      DeleteRegisteredWhseDocs.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE RegisteredMovCardHandler@163(VAR RegisteredMovCard@1000 : TestPage 7349);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      RegisteredMovCard."No.".ASSERTEQUALS(DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE RegisteredPickCardHandler@173(VAR RegisteredPickCard@1000 : TestPage 5798);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      RegisteredPickCard."No.".ASSERTEQUALS(DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE RegisteredPutAwayCardHandler@174(VAR RegisteredPutAwayCard@1000 : TestPage 5795);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      RegisteredPutAwayCard."No.".ASSERTEQUALS(DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE WhseIntPickCardHandler@155(VAR WhseIntPickCard@1000 : TestPage 7357);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      WhseIntPickCard."No.".ASSERTEQUALS(DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE WhseIntPutAwayCardHandler@148(VAR WhseIntPutAwayCard@1000 : TestPage 7354);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      WhseIntPutAwayCard."No.".ASSERTEQUALS(DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE WarehouseItemTrackingLinesHandler@89(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines."Lot No.".SETVALUE(FORMAT(LibraryRandom.RandInt(5)));  // Use random Lot No. because value is not important for test.
      WhseItemTrackingLines.Quantity.SETVALUE(WhseItemTrackingLines.Quantity3.ASDECIMAL);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE DateCompressWarehouseEntriesHandler@88(VAR DateCompressWhseEntries@1000 : TestRequestPage 7398);
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      DateCompressWhseEntries.StartingDate.SETVALUE(FORMAT(WORKDATE));
      DateCompressWhseEntries.EndingDate.SETVALUE(FORMAT(WORKDATE));
      DateCompressWhseEntries.PeriodLength.SETVALUE(DateComprRegister."Period Length"::Week);
      DateCompressWhseEntries.SerialNo.SETVALUE(TRUE);
      DateCompressWhseEntries.LotNo.SETVALUE(TRUE);
      DateCompressWhseEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionHandler@146(VAR PickSelection@1000 : TestPage 7343);
    BEGIN
      PickSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PutAwaySelectionHandler@143(VAR PutAwaySelection@1000 : TestPage 7334);
    BEGIN
      PutAwaySelection.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickHandler@144(VAR CreatePick@1000 : TestRequestPage 5754);
    BEGIN
      CreatePick.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@8(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute
      IN: Unable to Execute

      1.  Verify item tracking lines are created from Purchase Line for Serial No.
      2.  Verify item tracking lines are created from Purchase Line for Lot No.
      3.  Create Purchase Order, Create Item Tracking line for Lot No. Post Inventory Put and Verify Posted Document.
      4.  Create Purchase Order, Create Item Tracking line for Lot No. Post Inventory Put and Verify Posted Document.
      5.  Create Purchase Order, Post Inventory Put for Serial No. and Verify Posted Document.
      6.  Create Purchase Order, Post Inventory Put for Lot No. and Verify Posted Document.
      7.  Create Purchase Order with Item Tracking Line and Post Inventory Put. Create Sales Order with Item Tracking line for Serial No. Post Inventory Pick and Verify Posted Document.
      8.  Create Purchase Order with Item Tracking Line and Post Inventory Put. Create Sales Order with Item Tracking line for Lot No. Post Inventory Pick and Verify Posted Document.
      9.  Create Purchase Order with Inventory Put, Create Sales Order with Item Tracking Line, Post Inventory Pick for Serial No. and Verify Posted Document.
      10. Create Purchase Order with Inventory Put, Create Sales Order with Item Tracking Line,Post Inventory Pick for Lot No. and Verify Posted Document.
      11. Create Purchase Order with Same Item two Lines, Create Inventory Put with same Lot No. with same Expiration date. Change Expiration date and Verify the Error Message.
      12. Create Warehouse Item Journal Line and select No on confirmation Dialog of Posting and Check line is not Posted.
      13. Create and Post Warehouse Item Journal Line and Verify Warehouse Entries.
      14. Check posting of Purchase Invoices across multiple Purchase Orders.
      15. Test and verify Warehouse Receipt with partial Quantity To Receive.
      16. Register Warehouse Activity created by Warehouse Receipt with partial Quantity To Receive.
      17. Test functionality of Create StockKeeping Unit batch job with Location and ReplacePreviousSKUs as False.
      18. Test functionality of Create StockKeeping Unit batch job with Variant and ReplacePreviousSKUs as False.
      19. Test functionality of Create StockKeeping Unit batch job with Location and Variant and ReplacePreviousSKUs as True.
      20. Test to verify Registered Pick exists after we create a Pick from Sales Order and Register it.
      21. Test to verify that Registered Pick gets deleted on running Delete Registered Warehouse Document report.
      22. Verify Warehouse Entries after posting multiple Item Journal Lines.
      23. Test and verify partial Inventory Pick with multiple Items.
      24. Test and verify full Inventory Pick with multiple Items after partial Inventory Pick.
      25. Test and verify Source Code on Warehouse Register after register Warehouse Journal Line.
      26. Test and verify Source Code on Warehouse Register after calculate and post Warehouse Adjustment.
      27. Test and verify Source Code on Warehouse Register after running Date Compress Warehouse Entries.
      28. Test and verify functionality of Delete Empty Warehouse Registers report.
      29. Post Warehouse Item Journal Batch and Verify Warehouse Entries.
      30. Create Location by Page and verify it.
      31. Run Calculate Bins report without Bin template Code and handle error dialog.
      32. Run Calculate Bins report with Bin template Code and Verify Bin Code is created in Bin Creation Worksheet.
      33. Run Calculate Bins report with Field Separator and Verify Bin Code is created in Bin Creation Worksheet.
      34. Run Calculate Bins report with blank Rack From No. and Rack To No. as Blank and Verify Bin Code is not created on Bin Creation Worksheet.
      35. Calculate Bin when Level is greater than the maximum length of Bin Code and handle error dialog.
      36. Test the functionality of Warehouse Get Bin Content Report run from Item Journal line.
      37. Test the functionality of Warehouse Get Bin Content Report run from Transfer Order.
      38. Test that Bin Content is created by invoking Create Bin Content on Bin Content Creation Worksheet page.
      39. Test and verify Get Warehouse Documents functionality on Pick Worksheet.
      40. Test and verify Create Pick functionality on Pick Worksheet.
      41. Test and verify functionality of Warehouse Pick with Warehouse Tracking Lines.
      42. Create Put Away Worksheet.
      43. Create Put Away from Put Away Worksheet.

      TFS_TS_ID = 273976
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      ItemTrackingPurchaseLineSerialNo                                                   142177
      ItemTrackingPurchaseLineLotNo                                                      142177
      PostPurchaseOrderFromActivityHeaderWithTrackingLineSerialNo                        142177
      PostPurchaseOrderFromActivityHeaderWithTrackingLineLot                             142177
      PostPurchaseOrderFromActivityHeaderSerialNo                                        142177
      PostPurchaseOrderFromActivityHeaderLotNo                                           142177
      PostSalesOrderFromActivityHeaderWithTrackingLineSerialNo                           142178
      PostSalesOrderFromActivityHeaderWithTrackingLineLot                                142178
      PostSalesOrderFromActivityHeaderSerialNo                                           142178
      PostSalesOrderFromActivityHeaderLotNo                                              142178
      SameExpirationDateForSameLot                                                       142179

      TFS_TS_ID = 276674
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      WarehouseItemJournal                                                               141413
      WarehouseItemJournalPost                                                           141413

      TFS_TS_ID = 272654
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      MultiplePurchaseOrders                                                             143371

      TFS_TS_ID = 277708
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      PartialWarehouseReceipt,RegisterPartialWarehouseActivity                           139842

      TFS_TS_ID = 277709
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      CreateStockKeepingUnitBatchJobWithLocationAndReplaceFalse                          129081
      CreateStockKeepingUnitBatchJobWithVariantAndReplaceFalse                           129081
      CreateStockKeepingUnitBatchJobWithLocationVariantAndReplaceTrue                    129081

      TFS_TS_ID = 277796
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      RegisteredPick                                                                     129084
      DeleteRegisteredWarehouseDocumentReport                                            129084

      TFS_TS_ID = 278097
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      PostMultipleItemJournalLinesForWarehouse, PartialInventoryPickWithMultipleItems    139843
      FullInventoryPickWithMultipleItemAfterPartialInventoryPick                         139843

      TFS_TS_ID = 278727
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      SourceCodeOnWarehouseRegisterAfterRegisterWarehouseJournalLine                     129139
      SourceCodeOnWarehouseRegisterAfterCalculateAndPostWarehouseAdjustment              129139
      SourceCodeOnWarehouseRegisterAfterDateCompressWarehouseEntries                     129139
      DeleteEmptyWarehouseRegistersReport                                                129140

      TFS_TS_ID = 278113
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      WarehouseItemJournalBatchPost                                                      141362

      TFS_TS_ID = 253882
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      LocationByPage                                                                     131101

      TFS_TS_ID = 278734
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      CalculateBinWithOutTemplateCode,CalculateBinWithTemplateCode                       129131
      CalculateBinWithFieldSeparator,CalculateBinWithBlankRackNo                         129131
      CalculateBinWithMaximumLevel                                                       129131

      TFS_TS_ID = 278732
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      WarehouseGetBinContentReportFromItemJournalLine                                    129138
      WarehouseGetBinContentReportFromTransferOrder                                      129138
      BinContentFromBinContentCreationWorksheet                                          141414

      TFS_TS_ID = 278730
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      PickWorksheet, PickFromPickWorksheet                                               144681
      WarehousePick                                                                      144532

      TFS_TS_ID = 280946
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -----------------------------------------------------------------------------------------
      CreatePutAwayWorksheet                                                             144682
      CreatePutAwayFromPutAwayWorksheet                                                  144682
    }
    END.
  }
}

