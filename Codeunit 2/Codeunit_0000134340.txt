OBJECT Codeunit 134340 WF Buffer Table/Page UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryWorkflow@1000 : Codeunit 131101;
      LibraryUtility@1003 : Codeunit 131000;
      Assert@1001 : Codeunit 130000;
      QueryClosePageLookupErr@1002 : TextConst 'ENU=Select a workflow template to continue, or choose Cancel to close the page.';

    [Test]
    PROCEDURE TestCategoryLineCreatedWhenInitBuffer@6();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);

      // Exercise
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Verify
      TempWorkflowBuffer.GET(Workflow.Category,'');
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
    END;

    [Test]
    PROCEDURE TestCategoryLinesCreatedWhenInitBuffer@25();
    VAR
      Workflow1@1000 : Record 1501;
      Workflow2@1002 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
      WorkflowCategory@1003 : Record 1508;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow1);
      LibraryWorkflow.CreateWorkflow(Workflow2);

      // Exercise
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Verify
      Assert.AreEqual(4,TempWorkflowBuffer.COUNT,'An incorrect number of lines was created in the temp workflow buffer table');

      TempWorkflowBuffer.GET(Workflow1.Category,'');
      WorkflowCategory.GET(Workflow1.Category);
      Assert.AreEqual(WorkflowCategory.Description,TempWorkflowBuffer.Description,'Wrong category');

      TempWorkflowBuffer.GET(Workflow1.Category,Workflow1.Code);
      Assert.AreEqual(Workflow1.Description,TempWorkflowBuffer.Description,'Wrong workflow');

      TempWorkflowBuffer.GET(Workflow2.Category,'');
      WorkflowCategory.GET(Workflow2.Category);
      Assert.AreEqual(WorkflowCategory.Description,TempWorkflowBuffer.Description,'Wrong category');

      TempWorkflowBuffer.GET(Workflow2.Category,Workflow2.Code);
      Assert.AreEqual(Workflow2.Description,TempWorkflowBuffer.Description,'Wrong workflow');
    END;

    [Test]
    PROCEDURE TestDeleteAWorkflowFromBufferTable@1();
    VAR
      Workflow1@1001 : Record 1501;
      Workflow2@1002 : Record 1501;
      TempWorkflowBuffer@1000 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow1);
      LibraryWorkflow.CreateWorkflow(Workflow2);
      Workflow2.Category := Workflow1.Category;
      Workflow2.MODIFY;
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Exercise
      TempWorkflowBuffer.GET(Workflow2.Category,Workflow2.Code);
      TempWorkflowBuffer.DELETE(TRUE);

      // Verify
      Assert.IsFalse(TempWorkflowBuffer.ISEMPTY,'Temp Workflow Buffer table is empty');
      Assert.AreEqual(2,TempWorkflowBuffer.COUNT,'Temp Workflow Buffer does not have a Workflow and Category record');
      TempWorkflowBuffer.GET(Workflow1.Category,'');
      TempWorkflowBuffer.GET(Workflow1.Category,Workflow1.Code);
    END;

    [Test]
    PROCEDURE TestDeleteLastWorkflowFromBufferTable@2();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Exercise
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
      TempWorkflowBuffer.DELETE(TRUE);

      // Verify
      Assert.IsTrue(TempWorkflowBuffer.ISEMPTY,'Temp Workflow Buffer table is not empty');
    END;

    [Test]
    PROCEDURE TestDeleteEnabledWorkflowFromBufferTableErr@3();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      Workflow.Enabled := TRUE;
      Workflow.MODIFY;
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Exercise
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
      ASSERTERROR TempWorkflowBuffer.DELETE(TRUE);

      // Verify
      Assert.ExpectedError('Enabled workflows cannot be deleted.');
    END;

    [Test]
    PROCEDURE TestDeleteCategoryFromBufferTableNoErr@4();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);

      // Exercise
      CLEARLASTERROR;
      TempWorkflowBuffer.GET(Workflow.Category,'');
      ASSERTERROR TempWorkflowBuffer.DELETE(TRUE);

      // Verify
      Assert.AreEqual(2,TempWorkflowBuffer.COUNT,'Temp Workflow Buffer does not have a Workflow and Category record');
      Assert.AreEqual('',GETLASTERRORTEXT,'An unexpected error was thrown');
      TempWorkflowBuffer.GET(Workflow.Category,'');
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
    END;

    [Test]
    PROCEDURE TestInitBufferForTemplates@5();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);

      // Exercise
      TempWorkflowBuffer.InitBufferForTemplates(TempWorkflowBuffer);

      // Verify
      TempWorkflowBuffer.GET(Workflow.Category,'');
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
    END;

    [Test]
    PROCEDURE TestDeleteTemplateFromBufferNoErr@7();
    VAR
      Workflow@1000 : Record 1501;
      TempWorkflowBuffer@1001 : TEMPORARY Record 1500;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);
      TempWorkflowBuffer.InitBufferForTemplates(TempWorkflowBuffer);

      // Exercise
      CLEARLASTERROR;
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
      ASSERTERROR TempWorkflowBuffer.DELETE(TRUE);

      // Verify
      Assert.AreEqual(2,TempWorkflowBuffer.COUNT,'Temp Workflow Buffer does not have a Workflow and Category record');
      Assert.AreEqual('',GETLASTERRORTEXT,'An unexpected error was thrown');
      TempWorkflowBuffer.GET(Workflow.Category,'');
      TempWorkflowBuffer.GET(Workflow.Category,Workflow.Code);
    END;

    [Test]
    PROCEDURE TestViewWorkflowAction@8();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowsPage@1001 : TestPage 1500;
      WorkflowPage@1002 : TestPage 1501;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      LibraryWorkflow.CreateWorkflow(Workflow);
      WorkflowsPage.OPENVIEW;
      WorkflowsPage.FILTER.SETFILTER("Workflow Code",Workflow.Code);
      WorkflowsPage.FIRST;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowsPage.ViewAction.INVOKE;

      // Verify
      Assert.IsFalse(WorkflowPage.EDITABLE,'The view action opened the page in editable mode');
      Assert.AreEqual(Workflow.Code,WorkflowPage.Code.VALUE,'The view action opened a wrong record');
    END;

    [Test]
    PROCEDURE TestEditWorkflowAction@9();
    VAR
      Workflow@1002 : Record 1501;
      WorkflowsPage@1001 : TestPage 1500;
      WorkflowPage@1000 : TestPage 1501;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      LibraryWorkflow.CreateWorkflow(Workflow);
      WorkflowsPage.OPENVIEW;
      WorkflowsPage.FILTER.SETFILTER("Workflow Code",Workflow.Code);
      WorkflowsPage.FIRST;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowsPage.EditAction.INVOKE;

      // Verify
      Assert.IsTrue(WorkflowPage.EDITABLE,'The view action did not open the page in editable mode');
      Assert.AreEqual(Workflow.Code,WorkflowPage.Code.VALUE,'The view action opened a wrong record');
    END;

    [Test]
    PROCEDURE TestFirstNewWorkflowAction@10();
    VAR
      Workflow@1002 : Record 1501;
      WorkflowsPage@1001 : TestPage 1500;
      WorkflowPage@1000 : TestPage 1501;
      WorkflowCode@1003 : Code[20];
    BEGIN
      // Setup
      Initialize;
      WorkflowCode := LibraryUtility.GenerateRandomCode(Workflow.FIELDNO(Code),DATABASE::Workflow);
      WorkflowsPage.OPENVIEW;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowsPage.NewAction.INVOKE;

      // Verify
      Assert.IsTrue(WorkflowPage.EDITABLE,'The view action did not open the page in editable mode');
      Assert.AreEqual('',WorkflowPage.Code.VALUE,'The view action opened a wrong record');

      // Verify create record
      WorkflowPage.Code.SETVALUE(WorkflowCode);
      WorkflowPage.OK.INVOKE;
      Workflow.GET(WorkflowCode);
    END;

    [Test]
    PROCEDURE TestNewWorkflowAction@11();
    VAR
      Workflow@1002 : Record 1501;
      WorkflowsPage@1001 : TestPage 1500;
      WorkflowPage@1000 : TestPage 1501;
      WorkflowCode@1003 : Code[20];
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      LibraryWorkflow.CreateWorkflow(Workflow);
      WorkflowCode := LibraryUtility.GenerateRandomCode(Workflow.FIELDNO(Code),DATABASE::Workflow);
      WorkflowsPage.OPENVIEW;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowsPage.NewAction.INVOKE;

      // Verify
      Assert.IsTrue(WorkflowPage.EDITABLE,'The view action did not open the page in editable mode');
      Assert.AreEqual('',WorkflowPage.Code.VALUE,'The view action opened a wrong record');

      // Verify create record
      WorkflowPage.Code.SETVALUE(WorkflowCode);
      WorkflowPage.OK.INVOKE;
      Workflow.GET(WorkflowCode);
    END;

    [Test]
    [HandlerFunctions(WorkflowTemplatePageHandlerLookupOKPass)]
    PROCEDURE TestWorkflowTemplatesLookup@31();
    VAR
      Workflow@1002 : Record 1501;
    BEGIN
      // setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);

      // Exercise
      CLEARLASTERROR;
      CLEAR(Workflow);
      WorkflowTemplateLookup(Workflow);

      // Verify
      Assert.AreNotEqual('',Workflow.Code,'Lookup did not work');
    END;

    [Test]
    [HandlerFunctions(WorkflowTemplatePageHandlerLookupCancel)]
    PROCEDURE TestWorkflowTemplatesLookupQueryCloseCancelNoErr@24();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      // setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);

      // Exercise
      WorkflowTemplateLookup(Workflow);

      // Verify
      Assert.AreEqual('',Workflow.Code,'Lookup did not work');
    END;

    [Test]
    [HandlerFunctions(WorkflowTemplatePageHandlerLookupOKFail,MessageHandler)]
    PROCEDURE TestWorkflowTemplatesLookupQueryCloseLookupOKErr@23();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      // setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);

      // Exercise
      CLEARLASTERROR;
      CLEAR(Workflow);
      WorkflowTemplateLookup(Workflow);

      // Verify
      Assert.ExpectedError(QueryClosePageLookupErr);
    END;

    [Test]
    PROCEDURE TestViewTemplateAction@66();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowTemplatesPage@1001 : TestPage 1505;
      WorkflowPage@1002 : TestPage 1501;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);
      LibraryWorkflow.CreateTemplateWorkflow(Workflow);
      WorkflowTemplatesPage.OPENVIEW;
      WorkflowTemplatesPage.FILTER.SETFILTER("Workflow Code",Workflow.Code);
      WorkflowTemplatesPage.FIRST;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowTemplatesPage.ViewAction.INVOKE;

      // Verify
      Assert.IsFalse(WorkflowPage.EDITABLE,'The view action opened the page in editable mode');
      Assert.AreEqual(Workflow.Code,WorkflowPage.Code.VALUE,'The view action opened a wrong record');
    END;

    [Test]
    PROCEDURE TestChangeWorkflowDescription@12();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowsPage@1001 : TestPage 1500;
      WorkflowPage@1002 : TestPage 1501;
      NewDescription@1003 : Text;
    BEGIN
      // Setup
      Initialize;
      LibraryWorkflow.CreateWorkflow(Workflow);
      WorkflowsPage.OPENVIEW;
      // Place focus to the Workflow
      WorkflowsPage.LAST;

      // Exercise
      WorkflowPage.TRAP;
      WorkflowsPage.EditAction.INVOKE;

      NewDescription := LibraryUtility.GenerateGUID;
      WorkflowPage.Description.SETVALUE(NewDescription);
      WorkflowPage.OK.INVOKE;

      // Verify
      // Move to the catagory line and back to the workflow line.
      // This will activate the update of the line.
      WorkflowsPage.FIRST;
      WorkflowsPage.LAST;

      Assert.AreEqual(NewDescription,WorkflowsPage.Description.VALUE,'Descrition should get updated');
    END;

    LOCAL PROCEDURE Initialize@16();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      Workflow.DELETEALL;
    END;

    LOCAL PROCEDURE WorkflowTemplateLookup@26(VAR Workflow@1001 : Record 1501);
    VAR
      TempWorkflowBuffer@1002 : TEMPORARY Record 1500;
    BEGIN
      IF ACTION::LookupOK = PAGE.RUNMODAL(PAGE::"Workflow Templates",TempWorkflowBuffer) THEN
        Workflow.GET(TempWorkflowBuffer."Workflow Code")
      ELSE
        CLEAR(Workflow);
    END;

    [ModalPageHandler]
    PROCEDURE WorkflowTemplatePageHandlerLookupOKPass@29(VAR WorkflowTemplatesPage@1000 : TestPage 1505);
    BEGIN
      WorkflowTemplatesPage.FILTER.SETFILTER("Workflow Code",'<>''''');
      WorkflowTemplatesPage.FIRST;
      WorkflowTemplatesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WorkflowTemplatePageHandlerLookupOKFail@33(VAR WorkflowTemplatesPage@1001 : TestPage 1505);
    BEGIN
      WorkflowTemplatesPage.FILTER.SETFILTER("Workflow Code",'');
      WorkflowTemplatesPage.FIRST;
      WorkflowTemplatesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WorkflowTemplatePageHandlerLookupCancel@30(VAR WorkflowTemplatesPage@1001 : TestPage 1505);
    BEGIN
      WorkflowTemplatesPage.FILTER.SETFILTER("Workflow Code",'''''');
      WorkflowTemplatesPage.FIRST;
      WorkflowTemplatesPage.Cancel.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@58(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Workflow] [Workflow Buffer]
    }
    END.
  }
}

