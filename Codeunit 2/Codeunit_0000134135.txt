OBJECT Codeunit 134135 ERM Reverse Fixed Assets
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1000 : Codeunit 131300;
      LibraryFixedAsset@1011 : Codeunit 131330;
      LibraryRandom@1006 : Codeunit 130440;
      Assert@1008 : Codeunit 130000;
      LibraryPurchase@1010 : Codeunit 130512;
      isInitialized@1002 : Boolean;
      AmountError@1001 : TextConst 'ENU=%1 must be %2.';
      ReverseError@1005 : TextConst 'ENU="Book Value must not be negative or less than Salvage Value on %1 for Fixed Asset No. = %2 in Depreciation Book Code = %3."';
      FAReverseError@1004 : TextConst 'ENU="You cannot reverse the transaction because the %1 %2 = %3 in %4 %5 = %6 has been sold."';
      ValidateError@1003 : TextConst 'ENU=Error must match.';
      ReverseEntryError@1009 : TextConst 'ENU=You can only reverse entries that were posted from a journal.';
      ErrorMessageDoNotMatch@1007 : TextConst 'ENU=Error Message must be same.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFixedAsset@1();
    VAR
      GenJournalLine@1000 : Record 81;
      DepreciationBook@1001 : Record 5611;
    BEGIN
      // Check Reversal GL Register and FA Ledger Entry for Fixed Assets.

      // Setup: Create General Journal Line for Fixed Asset  with Acquisition Cost with Random Value and Post.
      Initialize;
      CreateDepreciationBook(DepreciationBook,TRUE,FALSE,FALSE,FALSE);
      CreateAndPostGenJournalLine(
        GenJournalLine,LibraryRandom.RandDec(100,2),GenJournalLine."FA Posting Type"::"Acquisition Cost",
        CreateFixedAsset(DepreciationBook),DepreciationBook.Code);

      // Exercise: Reverse FA Ledger Entry.
      ReverseFALedgerEntry(GenJournalLine."Document No.");

      // Verify: Verify GL Register and FA Ledger Entry after Reversing.
      VerifyGLRegister;
      VerifyFALedgerEntry(GenJournalLine."Document No.",-GenJournalLine."Debit Amount",GenJournalLine."Credit Amount");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReverseDisposalFixedAsset@6();
    VAR
      DepreciationBook@1002 : Record 5611;
      FixedAsset@1001 : Record 5600;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Reverse Error when Fixed Asset is Acquisition and Disposal.

      // Create General Journal Line for Fixed Asset with Acquisition Cost and Disposal and Post them then Reverse.
      Initialize;
      CreateAndReverseFixedAsset(
        GenJournalLine,GenJournalLine."FA Posting Type"::"Acquisition Cost",GenJournalLine."FA Posting Type"::Disposal);

      // Verify: Verify Reverse Error for Fixed Asset on Disposed.
      Assert.AreEqual(
        STRSUBSTNO(FAReverseError,FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),GenJournalLine."Account No.",
          DepreciationBook.TABLECAPTION,DepreciationBook.FIELDCAPTION(Code),GenJournalLine."Depreciation Book Code"),
        GETLASTERRORTEXT,ValidateError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReverseDepreciationFixedAsset@4();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Reverse Error when Fixed Asset is Acquisition and Depreciation.

      // Create General Journal Line for Fixed Asset with Acquisition Cost and Depreciation and Post them then Reverse.
      Initialize;
      CreateAndReverseFixedAsset(
        GenJournalLine,GenJournalLine."FA Posting Type"::"Acquisition Cost",GenJournalLine."FA Posting Type"::Depreciation);

      // Verify: Verify Reverse Error for Deprecated Fixed Asset.
      Assert.AreEqual(
        STRSUBSTNO(ReverseError,GenJournalLine."Posting Date",GenJournalLine."Account No.",GenJournalLine."Depreciation Book Code"),
        GETLASTERRORTEXT,ValidateError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseMaintenanceFixedAsset@7();
    VAR
      GenJournalLine@1000 : Record 81;
      DepreciationBook@1001 : Record 5611;
    BEGIN
      // Check Reverse Error when Fixed Asset is Maintenance.

      // Create General Journal Line for Fixed Asset with Mainteancne with Random Value and Post.
      Initialize;
      CreateDepreciationBook(DepreciationBook,FALSE,TRUE,FALSE,FALSE);
      CreateAndPostGenJournalLine(
        GenJournalLine,LibraryRandom.RandDec(100,2),GenJournalLine."FA Posting Type"::Maintenance,
        CreateFixedAsset(DepreciationBook),DepreciationBook.Code);

      // Exercise: Reverse Maintenance Ledger Entry.
      ReverseMaintenanceLedgerEntry(GenJournalLine."Document No.");

      // Verify: Verify Reversed Maintenance Ledger Entry.
      VerifyMaintenanceLedgerEntry(GenJournalLine."Document No.",-GenJournalLine."Debit Amount",GenJournalLine."Credit Amount");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE FAReversalError@9();
    VAR
      DepreciationBook@1000 : Record 5611;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify error message while Reversing FA Entries posted through Purchase Document.

      // Setup: Create Depreciation Book.
      CreateDepreciationBook(DepreciationBook,FALSE,TRUE,FALSE,FALSE);
      DocumentNo := CreateAndPostPurchaseInvoice(DepreciationBook);

      // Exercise: Reverse Maintenance Ledger Entry.
      ASSERTERROR ReverseMaintenanceLedgerEntry(DocumentNo);

      // Verify: Verify error message while Reversing FA Entries.
      Assert.AreEqual(STRSUBSTNO(ReverseEntryError),GETLASTERRORTEXT,ErrorMessageDoNotMatch);
    END;

    [Test]
    PROCEDURE MaintenanceFixedAsset@39();
    VAR
      DepreciationBook@1000 : Record 5611;
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Post FA Entries from General Journal Line and verify Maintenance Ledger Entry.

      // Setup: Create Depreciation Book.
      CreateDepreciationBook(DepreciationBook,FALSE,TRUE,FALSE,FALSE);

      // Exercise: Create and Post General Journal Line with Random values.
      CreateAndPostGenJournalLine(
        GenJournalLine,LibraryRandom.RandDec(100,2),GenJournalLine."FA Posting Type"::Maintenance,
        CreateFixedAsset(DepreciationBook),DepreciationBook.Code);

      // Verify: Verify Maintenance Ledger Entry.
      VerifyMaintenanceLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Debit Amount",-GenJournalLine."Credit Amount");
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndReverseFixedAsset@16(VAR GenJournalLine@1001 : Record 81;FAPostingType@1002 : Option;FAPostingType2@1003 : Option);
    VAR
      DepreciationBook@1004 : Record 5611;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Setup: Create General Journal Line for Fixed Asset.
      CreateDepreciationBook(DepreciationBook,TRUE,FALSE,TRUE,TRUE);
      CreateAndPostGenJournalLine(
        GenJournalLine,LibraryRandom.RandInt(100),FAPostingType,CreateFixedAsset(DepreciationBook),DepreciationBook.Code);
      DocumentNo := GenJournalLine."Document No.";
      CreateAndPostGenJournalLine(
        GenJournalLine,-GenJournalLine.Amount,FAPostingType2,GenJournalLine."Account No.",DepreciationBook.Code);

      // Exercise: Reverse Fixed Asset Ledger Entry.
      ASSERTERROR ReverseFALedgerEntry(DocumentNo);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@17(VAR GenJournalLine@1002 : Record 81;Amount@1001 : Decimal;FAPostingType@1003 : Option;AccountNo@1004 : Code[20];DepreciationBookCode@1005 : Code[10]);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",AccountNo,Amount);
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE CreateFixedAsset@2(DepreciationBook@1002 : Record 5611) : Code[20];
    VAR
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1001 : Record 5612;
      FAPostingGroup@1003 : Record 5606;
    BEGIN
      FAPostingGroup.FINDFIRST;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup.Code);
      FADepreciationBook.MODIFY(TRUE);
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@12(DepreciationBook@1003 : Record 5611) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",Vendor."No.");
      PurchaseHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",CreateFixedAsset(DepreciationBook),
        LibraryRandom.RandInt(10));  // Use Random Number Generator for Quantity.
      PurchaseLine.VALIDATE("FA Posting Type",PurchaseLine."FA Posting Type"::Maintenance);
      PurchaseLine.VALIDATE("Depreciation Book Code",DepreciationBook.Code);
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateDepreciationBook@33(VAR DepreciationBook@1000 : Record 5611;GLIntegrationAcqCost@1001 : Boolean;GLIntegrationMaintenance@1002 : Boolean;GLIntegrationDepreciation@1003 : Boolean;GLIntegrationDisposal@1004 : Boolean);
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",GLIntegrationAcqCost);
      DepreciationBook.VALIDATE("G/L Integration - Maintenance",GLIntegrationMaintenance);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",GLIntegrationDepreciation);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",GLIntegrationDisposal);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ReverseFALedgerEntry@3(DocumentNo@1001 : Code[20]);
    VAR
      FALedgerEntry@1000 : Record 5601;
      ReversalEntry@1002 : Record 179;
    BEGIN
      FALedgerEntry.SETRANGE("Document No.",DocumentNo);
      FALedgerEntry.FINDFIRST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(FALedgerEntry."Transaction No.");
    END;

    LOCAL PROCEDURE ReverseMaintenanceLedgerEntry@11(DocumentNo@1001 : Code[20]);
    VAR
      MaintenanceLedgerEntry@1000 : Record 5625;
      ReversalEntry@1002 : Record 179;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      MaintenanceLedgerEntry.FINDFIRST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(MaintenanceLedgerEntry."Transaction No.");
    END;

    LOCAL PROCEDURE VerifyFALedgerEntry@10(DocumentNo@1001 : Code[20];DebitAmount@1003 : Decimal;CreditAmount@1005 : Decimal);
    VAR
      FALedgerEntry@1000 : Record 5601;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FALedgerEntry.SETRANGE("Document No.",DocumentNo);
      FALedgerEntry.FINDLAST;
      Assert.AreNearlyEqual(
        DebitAmount,FALedgerEntry."Debit Amount",GeneralLedgerSetup."Appln. Rounding Precision",
        STRSUBSTNO(AmountError,FALedgerEntry.FIELDCAPTION("Debit Amount"),DebitAmount));
      Assert.AreEqual(
        CreditAmount,FALedgerEntry."Credit Amount",STRSUBSTNO(AmountError,FALedgerEntry.FIELDCAPTION("Credit Amount"),CreditAmount));
    END;

    LOCAL PROCEDURE VerifyMaintenanceLedgerEntry@13(DocumentNo@1001 : Code[20];DebitAmount@1003 : Decimal;CreditAmount@1005 : Decimal);
    VAR
      MaintenanceLedgerEntry@1000 : Record 5625;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      MaintenanceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      MaintenanceLedgerEntry.FINDLAST;
      Assert.AreNearlyEqual(
        DebitAmount,MaintenanceLedgerEntry."Debit Amount",GeneralLedgerSetup."Appln. Rounding Precision",
        STRSUBSTNO(AmountError,MaintenanceLedgerEntry.FIELDCAPTION("Debit Amount"),DebitAmount));
      Assert.AreEqual(CreditAmount,MaintenanceLedgerEntry."Credit Amount",
        STRSUBSTNO(AmountError,MaintenanceLedgerEntry.FIELDCAPTION("Credit Amount"),CreditAmount));
    END;

    LOCAL PROCEDURE VerifyGLRegister@5();
    VAR
      GLRegister@1000 : Record 45;
    BEGIN
      GLRegister.FINDLAST;
      Assert.AreEqual(TRUE,GLRegister.Reversed,'Reversed must be True.');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@14(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Fixed Asset]
      Test Reverse Functionalities for Fixed Asset.
        1. Check Reverse GL Register and FA Ledger Entry for Fixed Assets.
        2. Check Reverse Error when Fixed Asset is Acquisition and Disposal.
        3. Check Reverse Error when Fixed Asset is Acquisition and Depreciation.
        4. Check Reversed Fixed Asset Maintenance Ledger Entry.
        5. Verify error message while Reversing FA Entries posted through Purchase Document.
        6. Post FA Entries from General Journal Line and verify Maintenance Ledger Entry.

        Covers Test Cases:
        -------------------------------------------------------
        Test Function Name                        TFS ID
        -------------------------------------------------------
        ReverseFixedAsset                     124879 to 124884
        ReverseDisposalFixedAsset             124929 to 124931
        ReverseDepreciationFixedAsset         124932 to 124934
        ReverseMaintenanceFixedAsset          124887 to 124890

        Covers Test Cases: 242653
        -------------------------------------------------------
        Test Function Name                        TFS ID
        -------------------------------------------------------
        FAReversalError                          126162
        MaintenanceFixedAsset                    126163
    }
    END.
  }
}

