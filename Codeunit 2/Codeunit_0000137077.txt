OBJECT Codeunit 137077 SCM Supply Planning -IV
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1014 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      LocationSilver@1017 : Record 14;
      LocationBlue@1012 : Record 14;
      LocationRed@1006 : Record 14;
      LocationInTransit@1003 : Record 14;
      LibraryERM@1030 : Codeunit 131300;
      LibraryERMCountryData@1056 : Codeunit 131305;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryItemTracking@1025 : Codeunit 130502;
      LibraryPlanning@1005 : Codeunit 132203;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryManufacturing@1011 : Codeunit 132202;
      LibraryWarehouse@1023 : Codeunit 132204;
      LibraryPurchase@1015 : Codeunit 130512;
      LibrarySales@1009 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1018 : Codeunit 131004;
      LibraryAssembly@1024 : Codeunit 132207;
      Assert@1002 : Codeunit 130000;
      isInitialized@1004 : Boolean;
      RequisitionLineMustNotExist@1010 : TextConst 'ENU=Requisition Line must not exist for Item %1.';
      VendorNoError@1008 : TextConst 'ENU=Vendor No. must have a value in Requisition Line';
      NewWorksheetMessage@1016 : TextConst 'ENU=You are now in worksheet';
      RequisitionLinesQuantity@1019 : TextConst 'ENU=Quantity value must match.';
      AvailabilityWarningConfirmationMessage@1020 : TextConst 'ENU=There are availability warnings on one or more lines.';
      EditableError@1021 : TextConst 'ENU=The value must not be editable.';
      ReleasedProdOrderCreated@1022 : TextConst 'ENU=Released Prod. Order';
      SalesLineQtyChangedMsg@1026 : TextConst 'ENU=This Sales Line is currently planned. Your changes will not cause any replanning.';
      RequisitionLineQtyErr@1027 : TextConst 'ENU=The Quantity of component Item on Requisition Line is not correct.';
      RequisitionLineExistenceErr@1028 : TextConst 'ENU=Requisition Line expected to %1 for Item %2 and Location %3';
      ReqLineExpectedTo@1029 : 'Not Exist,Exist';
      RequisitionLineProdOrderErr@1031 : TextConst 'ENU="""Prod Order No."" should be same as Released Production Order"';
      ReservationEntryNotEmptyErr@1032 : TextConst 'ENU=Reservation must be deleted when a production order line is deleted.';
      CloseBOMVersionsQst@1035 : TextConst 'ENU=All versions attached to the BOM will be closed';
      NotAllItemsPlannedMsg@1033 : TextConst '@@@="%1 = count of items not planned";ENU=Not all items were planned. A total of %1 items were not planned.';
      BOMMustBeCertifiedErr@1034 : TextConst 'ENU=Status must be equal to ''Certified''  in Production BOM Header';
      PostingDateErr@1500000 : TextConst 'ENU=Sub Con Receipt Date and Item Ledger Output Posting Date are not matching.';

    [Test]
    PROCEDURE CalcSubcontractOrderForReleasedProdOrder@6();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.

      // Exercise: Calculate Subcontracts from Subcontracting worksheet.
      CalculateSubcontractOrder(WorkCenter);

      // Verify: Verify Subcontracting Worksheet for Production Order, Quantity and WorkCenter Subcontractor.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLine(RequisitionLine,ProductionOrder,WorkCenter);
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderAndCarryOutForReleasedProdOrder@50();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseLine@1006 : Record 39;
      RoutingHeader@1001 : Record 99000763;
      ProdcutionComp@1500000 : Record 5407;
      ProductionLine@1500001 : Record 5406;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.
      ProductionLine.SETRANGE(Status,ProductionOrder.Status);
      ProductionLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProductionLine.FINDFIRST;
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdcutionComp,ProductionOrder.Status,ProductionOrder."No.",ProductionLine."Line No.");
      ProdcutionComp.VALIDATE("Item No.",Item."No.");
      ProdcutionComp.MODIFY(TRUE);
      // Calculate Subcontracts from Subcontracting worksheet and Carry Out Action Message.
      CalculateSubcontractOrder(WorkCenter);
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // Exercise: After carry out, Post Purchase Order as Receive and invoice.
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PostPurchaseDocument(PurchaseLine,TRUE);

      // Verify: Verify Inventory of Item is updated after Purchase Order posting for Item.
      Item.CALCFIELDS(Inventory);
      Item.TESTFIELD(Inventory,PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderForReleasedProdOrderWithBinAndCarryOutForPurchase@7();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseLine@1006 : Record 39;
      Bin@1009 : Record 7354;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order with Location and Bin.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",LocationSilver.Code,Bin.Code);

      // Calculate Subcontracts from Subcontracting worksheet.
      CalculateSubcontractOrder(WorkCenter);

      // Exercise: Carry Out Action Message for Subcontracting worksheet.
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // Verify: Verify Location and Bin of Released Production order is also updated on Purchase Order created after carry out.
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PurchaseLine.TESTFIELD("Location Code",ProductionOrder."Location Code");
      PurchaseLine.TESTFIELD("Bin Code",ProductionOrder."Bin Code");
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderAndCarryOutWithNewDueDateAndQuantity@2();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseLine@1006 : Record 39;
      RequisitionLine@1001 : Record 246;
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.

      // Calculate Subcontracts from Subcontracting worksheet. Update new Quantity and Due Date on Requisition Line.
      CalculateSubcontractOrder(WorkCenter);
      UpdateRequisitionLineDueDateAndQuantity(
        RequisitionLine,Item."No.",ProductionOrder.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than Production Order Quantity.

      // Exercise: Carry Out Action Message for Subcontracting worksheet.
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // Verify: Verify updated Due Date and quantity of Requisition Line is also updated on Purchase Order created after carry out.
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PurchaseLine.TESTFIELD(Quantity,RequisitionLine.Quantity);
      PurchaseLine.TESTFIELD("Expected Receipt Date",RequisitionLine."Due Date");
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderAndCarryOutForReleasedProdOrderWithUpdatedUOM@54();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseLine@1006 : Record 39;
      RoutingHeader@1001 : Record 99000763;
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item. Create additional Base Unit of Measure for Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      // Create and refresh Released Production Order. Update new Unit Of Measure on Production Order Line.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.
      UpdateProdOrderLineUnitOfMeasureCode(Item."No.",ItemUnitOfMeasure.Code);

      // Calculate Subcontracts from Subcontracting worksheet.
      CalculateSubcontractOrder(WorkCenter);

      // Exercise: Carry Out Action Message for Subcontracting worksheet.
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // Verify: Verify updated Unit of Measure of Released Production Order is also updated on Purchase Order created after carry out.
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PurchaseLine.TESTFIELD("Unit of Measure",ItemUnitOfMeasure.Code);
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderWithProdOrderRoutingLineForReleasedProdOrder@1();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RequisitionLine@1006 : Record 246;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.

      // Exercise: Calculate Subcontracts from Subcontracting worksheet With Production Order Routing Line.
      CalculateSubcontractsWithProdOrderRoutingLine(ProductionOrder."No.",WORKDATE);

      // Verify: Verify that no Requisition line is created for Subcontracting Worksheet.
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderWithMultiLineRoutingForReleasedProdOrder@16();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1006 : Record 99000763;
      RoutingLine@1005 : Record 99000764;
      RoutingLine2@1002 : Record 99000764;
    BEGIN
      // Setup: Create Item. Create Multi Line Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateAndCertifyMultiLineRoutingSetup(WorkCenter,RoutingHeader,RoutingLine,RoutingLine2);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create and refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');  // Without Location and Bin.

      // Exercise: Calculate Subcontracts from Subcontracting worksheet.
      CalculateSubcontractOrder(WorkCenter);

      // Verify: Verify Subcontracting Worksheet for Production Order, Quantity, WorkCenter Subcontractor and Operation No.
      VerifyRequisitionLineWithOperationNoForSubcontractingWorksheet(
        ProductionOrder,WorkCenter,Item."No.",RoutingLine."Operation No.");
      VerifyRequisitionLineWithOperationNoForSubcontractingWorksheet(
        ProductionOrder,WorkCenter,Item."No.",RoutingLine2."Operation No.");
    END;

    [Test]
    PROCEDURE CalcPlanReqWkshWithCarryOutOrderItemVendorNoError@4();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create Order Item without updating Vendor No on it.
      Initialize;
      CreateOrderItem(Item);

      // Create Sales Order.
      CreateSalesOrder(Item."No.",'');

      // Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Exercise: Carry Out Action Message for Planning worksheet.
      ASSERTERROR CarryOutActionMessage(Item."No.");

      // Verify: Verify error - Vendor No. must have a value in Requisition Line for carry out.
      Assert.ExpectedError(VendorNoError);
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithCarryOutOrderItemVendorNoError@14();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create Order Item without updating Vendor No on it.
      Initialize;
      CreateOrderItem(Item);

      // Create Sales Order.
      CreateSalesOrder(Item."No.",'');

      // Calculate Plan for Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(Item);

      // Exercise: Carry Out Action Message for Requisition Worksheet.
      ASSERTERROR CarryOutActionMessage(Item."No.");

      // Verify: Verify error - Vendor No. must have a value in Requisition Line for carry Out.
      Assert.ExpectedError(VendorNoError);
    END;

    [Test]
    PROCEDURE PurchaseShippingDetailsWithDropShipmentAndCarryOutOnReqWksh@37();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup: Create Item.
      Initialize;
      CreateItem(Item);

      // Create Sales Order with Ship to Address and Purchasing Code Drop Shipment.
      CreateSalesOrder(Item."No.",CreateCustomerWithLocation);
      UpdateSalesLineWithPurchasingCode(SalesLine,Item."No.",LocationSilver.Code,TRUE);  // TRUE for Drop Shipment.

      // Exercise: Get Sales Order From Drop Shipment on Requisition Worksheet and Carry out.
      GetSalesOrderForDropShipmentAndCarryOutReqWksh(SalesLine);

      // Verify: Verify Ship to Address and Ship to Code of Sales Order is also updated on Purchase Order created after Carry Out.
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      VerifyPurchaseShippingDetails(Item."No.",SalesHeader."Ship-to Code",SalesHeader."Ship-to Address");
    END;

    [Test]
    PROCEDURE PurchaseShippingDetailsWithSpecialOrderAndCarryOutOnReqWksh@10();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup: Create Item.
      Initialize;
      CreateItem(Item);

      // Create Sales Order with Ship to Address and Purchasing Code Special Order.
      CreateSalesOrder(Item."No.",CreateCustomerWithLocation);
      UpdateSalesLineWithPurchasingCode(SalesLine,Item."No.",LocationBlue.Code,FALSE);  // FALSE for Special Order.

      // Exercise: Get Sales Order From Special Order on Requisition Worksheet and Carry out.
      GetSalesOrderForSpecialOrderAndCarryOutReqWksh(Item."No.");

      // Verify: Verify Ship to Address and Ship to Code of Sales Order is also updated on Purchase Order created after Carry Out.
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      VerifyPurchaseShippingDetails(Item."No.",'',LocationBlue.Address);
    END;

    [Test]
    PROCEDURE CalcRegenPlanForTranferShipWithoutReorderingPolicy@97();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1004 : Record 246;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item without Reordering Policy.
      Initialize;
      CreateItem(Item);

      // Update Inventory.
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateInventory(Item."No.",Quantity,LocationBlue.Code);

      // Create and Post Transfer Order.
      CreateTransferOrderWithReceiptDate(TransferHeader,Item."No.",LocationBlue.Code,LocationRed.Code,Quantity);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Ship -TRUE.

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify that no Requisition line is created for Requisition Worksheet.
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler)]
    PROCEDURE RequisitionLineWhenCalculateCapableToPromiseReplenishProdOrderLFLItem@17();
    VAR
      SalesLine@1002 : Record 37;
      Item@1000 : Record 27;
      RequisitionLine@1003 : Record 246;
      OrderPromisingSetup@1004 : Record 99000875;
      ReqWkshTemplate@1005 : Record 244;
      OldReqTemplateType@1006 : Option;
    BEGIN
      // Setup: Create Lot for Lot Item with Replenishment System Production Order.
      Initialize;
      OrderPromisingSetup.GET;
      ReqWkshTemplate.GET(OrderPromisingSetup."Order Promising Template");
      OldReqTemplateType := ReqWkshTemplate.Type;
      IF ReqWkshTemplate.Type <> ReqWkshTemplate.Type::Planning THEN BEGIN
        ReqWkshTemplate.Type := ReqWkshTemplate.Type::Planning;
        ReqWkshTemplate.MODIFY;
      END;

      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");

      // Create Sales Order.
      CreateSalesOrder(Item."No.",'');

      // Exercise: Open Order Promising Lines Page and Invoke Capable to Promise to create Requisition Worksheet Line.
      FindSalesLine(SalesLine,Item."No.");
      OpenOrderPromisingPage(SalesLine."Document No.");  // Using Page to avoid Due Date error - OrderPromisingPageHandler.

      // Verify: Verify Requisition Line with Action Message,Quantity and Due Date after Calculating Capable To Promise.
      SalesLine.FIND;  // Required to maintain the instance of Sales Line.
      VerifyRequisitionLineEntries(
        Item."No.",'',RequisitionLine."Action Message"::New,SalesLine."Shipment Date",0,SalesLine.Quantity,
        RequisitionLine."Ref. Order Type"::"Prod. Order");

      // Restore Order Promising Setup
      IF ReqWkshTemplate.Type <> OldReqTemplateType THEN BEGIN
        ReqWkshTemplate.Type := OldReqTemplateType;
        ReqWkshTemplate.MODIFY;
      END;
    END;

    [Test]
    PROCEDURE CalcPlanReqWkshForTransferLFLItem@41();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1004 : Record 246;
      TransferLine@1006 : Record 5741;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Lot For Lot Item.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);

      // Update Inventory.
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateInventory(Item."No.",Quantity,LocationBlue.Code);

      // Create Transfer Order.
      CreateTransferOrderWithReceiptDate(TransferHeader,Item."No.",LocationBlue.Code,LocationRed.Code,Quantity);

      // Exercise: Calculate Plan for Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(Item);

      // Verify: Verify Planning Worksheet for Location, Due Date, Action Message and Quantity.
      SelectTransferLine(TransferLine,TransferHeader."No.",Item."No.");
      VerifyRequisitionLineEntries(
        Item."No.",LocationRed.Code,RequisitionLine."Action Message"::Cancel,TransferLine."Receipt Date",TransferLine.Quantity,0,
        RequisitionLine."Ref. Order Type"::Transfer);
    END;

    [Test]
    PROCEDURE CalcRegenPlanTwiceCarryOutAndNewShipmentDateOnDemand@74();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      RequisitionLine@1005 : Record 246;
      EndDate@1004 : Date;
      StartDate@1003 : Date;
      NewShipmentDate@1002 : Date;
      NewStartDate@1009 : Date;
      NewEndDate@1008 : Date;
    BEGIN
      // Setup: Create Order Item with Vendor No. Create Sales Order.
      Initialize;
      CreateOrderItem(Item);
      UpdateItemVendorNo(Item);
      CreateSalesOrder(Item."No.",'');

      // Calculate Plan for Planning Worksheet and Carry Out.
      FindSalesLine(SalesLine,Item."No.");
      StartDate := GetRequiredDate(10,30,SalesLine."Shipment Date",-1);  // Start Date less than Shipment Date.
      EndDate := GetRequiredDate(10,30,SalesLine."Shipment Date",1);  // End Date more than Shipment Date.
      CalcRegenPlanAndCarryOut(Item,StartDate ,EndDate);

      // Update Shipment Date of Sales Order after Carry Out.
      NewShipmentDate := GetRequiredDate(10,30,SalesLine."Shipment Date",1);  // End Date relative to Workdate.
      UpdateSalesLineShipmentDate(Item."No.",NewShipmentDate);

      // Exercise: Calculate Plan for Planning Worksheet again after Carry Out.
      NewStartDate := GetRequiredDate(10,0,WORKDATE,1);  // Start date more than old Shipment Date of Sales Line.
      NewEndDate := GetRequiredDate(10,10,NewShipmentDate,1);  // End Date more than New Shipment Date of Sales Line.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,NewStartDate,NewEndDate);

      // Verify: Verify Requisition Line is created with Reschedule Action Message.
      VerifyRequisitionLineEntries(
        Item."No.",'',RequisitionLine."Action Message"::Reschedule,NewShipmentDate,0,SalesLine.Quantity,
        RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    PROCEDURE CalcRegenPlanAndCarryOutOrderItemWithVendorHavingCurrency@19();
    VAR
      Item@1000 : Record 27;
      VendorCurrencyCode@1001 : Code[10];
      EndDate@1004 : Date;
    BEGIN
      // Setup: Create Order Item. Create Vendor with Currency Code. Update Vendor on Item.
      Initialize;
      CreateOrderItem(Item);
      VendorCurrencyCode := UpdateItemWithVendor(Item);

      // Create Sales Order.
      CreateSalesOrder(Item."No.",'');

      // Exercise: Calculate Regenerative Plan and Carry Out for Planning Worksheet.
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date more WORKDATE.
      CalcRegenPlanAndCarryOut(Item,WORKDATE,EndDate);

      // Verify: Verify after Carry Out, Purchase Order is created successfully with Vendor having same Currency Code.
      VerifyPurchaseLineCurrencyCode(Item."No.",VendorCurrencyCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CalcPlanAndCarryOutReqWkshOrderItemWithVendorHavingCurrency@55();
    VAR
      Item@1000 : Record 27;
      VendorCurrencyCode@1001 : Code[10];
    BEGIN
      // Setup: Create Order Item. Create Vendor with Currency Code. Update Vendor on Item.
      Initialize;
      CreateOrderItem(Item);
      VendorCurrencyCode := UpdateItemWithVendor(Item);

      // Create Sales Order.
      CreateSalesOrder(Item."No.",'');

      // Calculate Plan for Requisition Worksheet.
      LibraryVariableStorage.Enqueue(NewWorksheetMessage);  // Required inside MessageHandler.
      CalculatePlanForRequisitionWorksheet(Item);

      // Exercise: Carry Out Action Message for Requisition Worksheet.
      CarryOutActionMessage(Item."No.");

      // Verify: Verify after Carry Out, Purchase Order is created successfully with Vendor having same Currency Code.
      VerifyPurchaseLineCurrencyCode(Item."No.",VendorCurrencyCode);
    END;

    [Test]
    PROCEDURE PurchaseShipmentMethodForSpecialSalesOrderAndCarryOutReqWksh@24();
    VAR
      Item@1006 : Record 27;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup: Create Item.
      Initialize;
      CreateItem(Item);

      // Create Sales Order and Purchasing Code Special Order.
      CreateSalesOrder(Item."No.",'');
      UpdateSalesLineWithPurchasingCode(SalesLine,Item."No.",'',FALSE);  // FALSE for Special Order.

      // Exercise: Get Sales Order From Special Order on Requisition Worksheet and Carry out.
      GetSalesOrderForSpecialOrderAndCarryOutReqWksh(Item."No.");

      // Verify: Verify Shipment Method Code of Sales Order is also updated on Purchase Order created after Carry Out.
      VerifyPurchaseShipmentMethod(SalesLine."Document No.",Item."No.");
    END;

    [Test]
    PROCEDURE RequisitionLineAfterCalcPlanAndCarryOutWithGetSalesOrderAndDropShipmentFRQItem@27();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesLine@1002 : Record 37;
      RequisitionLine@1003 : Record 246;
      RequisitionWkshName@1005 : Record 245;
    BEGIN
      // Setup: Create multiple Fixed Reorder Quantity Items.
      Initialize;
      CreateFRQItem(Item);
      CreateFRQItem(Item2);
      UpdateItemVendorNo(Item2);

      // Create Sales Order with Purchasing Code Drop Shipment.
      CreateSalesOrder(Item2."No.",'');
      UpdateSalesLineWithPurchasingCode(SalesLine,Item2."No.",LocationBlue.Code,TRUE);  // TRUE for Drop Shipment.

      // Calculate Plan and Get Sales Order for Drop Shipment for same Requisition Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalculatePlanForReqWksh(Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      GetSalesOrderDropShipment(SalesLine,RequisitionLine,RequisitionWkshName);

      // Exercise: Carry Out for second Item created after Get Sales Order.
      CarryOutActionMessage(Item2."No.");

      // Verify: Verify after Carry Out for second Item, Lines for first Items are still on same Worksheet.
      VerifyRequisitionLineBatchAndTemplateForItem(Item."No.",RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
    END;

    [Test]
    PROCEDURE VendorItemNoOnRequisitionWorksheetWithVendorNo@59();
    VAR
      ReqWkshTemplate@1006 : Record 244;
    BEGIN
      // Verify Requisition Worksheet is automatically updated with Vendor Item No. when Vendor No populated on Requisition Line.
      // Setup.
      Initialize;
      RequisitionLineWithVendorItemNoOfVendor(ReqWkshTemplate.Type::"Req.");  // Requisition Worksheet.
    END;

    [Test]
    PROCEDURE VendorItemNoOnPlanningWorksheetWithVendorNo@56();
    VAR
      ReqWkshTemplate@1006 : Record 244;
    BEGIN
      // Verify Planning Worksheet is automatically updated with Vendor Item No. when Vendor No populated on Requisition Line.
      // Setup.
      Initialize;
      RequisitionLineWithVendorItemNoOfVendor(ReqWkshTemplate.Type::Planning);  // Planning Worksheet.
    END;

    [Test]
    PROCEDURE VendorItemNoOnSKUHasHigherPriorityOnRequsitionLine@153();
    VAR
      Item@1000 : Record 27;
      SKU@1001 : Record 5700;
      RequisitionLine@1002 : Record 246;
      ReqWkshTemplate@1003 : Record 244;
    BEGIN
      // [FEATURE] [Requisition Worksheet] [Stockkeeping Unit]
      // [SCENARIO 223035] If stockkeeping unit exists for given item and location, vendor item no. on requisition line should be populated from SKU card.
      Initialize;

      // [GIVEN] Item "I" with stockkeeping unit "SKU" on location "L1". Vendor Item No. on the item = "VIN1", on the SKU = "VIN2".
      CreateItemWithSKU(Item,SKU,LocationBlue.Code);

      // [WHEN] Create requisition line with item "I", location "L1" and populated Vendor No. from the item card.
      CreateRequisitionLine(RequisitionLine,Item."No.",ReqWkshTemplate.Type::"Req.");
      RequisitionLine.VALIDATE("Location Code",SKU."Location Code");
      RequisitionLine.VALIDATE("Vendor No.",Item."Vendor No.");

      // [THEN] Stockkeeping unit exists for item "I" and location "L1".
      // [THEN] Vendor Item No. on the requisition line is equal to "VIN2".
      RequisitionLine.TESTFIELD("Vendor Item No.",SKU."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoOnItemHasLowerPriorityOnRequisitionLine@155();
    VAR
      Item@1003 : Record 27;
      SKU@1002 : Record 5700;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      // [FEATURE] [Requisition Worksheet] [Item]
      // [SCENARIO 223035] If stockkeeping unit does not exist for given item and location, vendor item no. on requisition line should be populated from item card.
      Initialize;

      // [GIVEN] Item "I" with stockkeeping unit "SKU" on location "L1". Vendor Item No. on the item = "VIN1", on the SKU = "VIN2".
      CreateItemWithSKU(Item,SKU,LocationRed.Code);

      // [WHEN] Create requisition line with item "I", location "L2" and populated Vendor No. from the item card.
      CreateRequisitionLine(RequisitionLine,Item."No.",ReqWkshTemplate.Type::"Req.");
      RequisitionLine.VALIDATE("Location Code",LocationBlue.Code);
      RequisitionLine.VALIDATE("Vendor No.",Item."Vendor No.");

      // [THEN] Stockkeeping unit does not exist for item "I" and location "L2".
      // [THEN] Vendor Item No. on the requisition line is equal to "VIN1".
      RequisitionLine.TESTFIELD("Vendor Item No.",Item."Vendor Item No.");
    END;

    LOCAL PROCEDURE RequisitionLineWithVendorItemNoOfVendor@52(Type@1009 : Option);
    VAR
      Item@1000 : Record 27;
      ItemVendor@1001 : Record 99;
      RequisitionLine@1008 : Record 246;
    BEGIN
      // Create Item. Update Item Vendor of Item with Vendor Item No.
      CreateItem(Item);
      CreateItemVendorWithVendorItemNo(ItemVendor,Item);

      // Create Requisition Line for Planning or Requisition Worksheet as required.
      CreateRequisitionLine(RequisitionLine,Item."No.",Type);

      // Exercise: Update Requisition Line with Vendor No.
      UpdateRequisitionLineVendorNo(RequisitionLine,ItemVendor."Vendor No.");

      // Verify: Verify Requisition Line is automatically updated with Vendor Item No. of Item Vendor.
      RequisitionLine.TESTFIELD("Vendor Item No.",ItemVendor."Vendor Item No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandlerTRUE)]
    PROCEDURE CalcNetChangePlanForSalesWithLotTrackingLFLItem@51();
    VAR
      ItemTrackingMode@1001 : ' ,Assign Lot No.,Assign Serial No.';
    BEGIN
      // Verify Lot specific tracking with Net Change Plan report.
      // Setup.
      Initialize;
      NetChangePlanWithTrackingLFLItem(ItemTrackingMode::"Assign Lot No.",FALSE);  // SN Specific Tracking - FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTRUE)]
    PROCEDURE CalcNetChangePlanForSalesWithSerialTrackingLFLItem@103();
    VAR
      ItemTrackingMode@1001 : ' ,Assign Lot No.,Assign Serial No.';
    BEGIN
      // Verify Serial specific tracking with Net Change Plan report.
      // Setup.
      Initialize;
      NetChangePlanWithTrackingLFLItem(ItemTrackingMode::"Assign Serial No.",TRUE);  // SN Specific Tracking - TRUE.
    END;

    LOCAL PROCEDURE NetChangePlanWithTrackingLFLItem@47(ItemTrackingMode@1007 : Option;SerialSpecific@1001 : Boolean);
    VAR
      Item@1000 : Record 27;
      ItemTrackingCodeSerialLotSpecific@1004 : Record 6502;
      SalesLine@1005 : Record 37;
    BEGIN
      // Create Lot For Lot Item with Lot or Serial specific tracking.
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      IF SerialSpecific THEN BEGIN
        LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCodeSerialLotSpecific,TRUE,FALSE);
        LibraryItemTracking.AddSerialNoTrackingInfo(Item);
      END ELSE BEGIN
        LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCodeSerialLotSpecific,FALSE,TRUE);
        LibraryItemTracking.AddLotNoTrackingInfo(Item);
      END;

      // Create Sales Order. Assign SN or Lot specific Tracking to Sales Line. Page Handler - ItemTrackingPageHandler.
      CreateSalesOrder(Item."No.",'');
      AssignTrackingOnSalesLine(SalesLine,Item."No.",ItemTrackingMode);

      // Exercise: Calculate Net Change Plan from Planning Worksheet.
      CalcNetChangePlanForPlanWksh(Item);

      // Verify: Verify Quantity and Tracking is assigned on Requisition Line. Verified in ItemTrackingPageHandler.
      VerifyRequisitionWithTracking(ItemTrackingMode,Item."No.",SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE ItemWithDescriptionNotEditableForProdForecastMatrixPage@102();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create Lot For Lot Item.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);

      // Exercise & Verify: Open Production Forecast Matrix page and  Verify Item No and Description are uneditable.
      VerifyProductionForecastMatrixUneditable(Item."No.");
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler)]
    PROCEDURE ReservedQuantityOnSalesAfterCapableToPromiseLFLItem@79();
    VAR
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
    BEGIN
      // Setup: Create Lot For Lot Item. Create Sales Order.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      CreateSalesOrder(Item."No.",'');

      // Exercise: Open Order Promising Lines Page and Invoke Capable to Promise Action.
      FindSalesLine(SalesLine,Item."No.");
      OpenOrderPromisingPage(SalesLine."Document No.");  // Using Page to avoid Due Date error - OrderPromisingPageHandler.

      // Verify: Verify Reserved Quantity is updated on Sales Line.
      SalesLine.FIND;  // Required to maintain the instance of Sales Line.
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler)]
    PROCEDURE DueDateOnReqWkshWithCapableToPromiseMakeToStockLFLItem@129();
    BEGIN
      // Setup: Verify Due Date on Requisition Line created after Capable to promise for Manufacturing Policy Make-to-Stock on Item.
      Initialize;
      DueDateOnReqWkshWithCapableToPromiseManufPolicyLFLItem(FALSE);  // FALSE- Manufacturing Policy Make-to-Stock.
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler)]
    PROCEDURE DueDateOnReqWkshWithCapableToPromiseMakeToOrderLFLItem@72();
    BEGIN
      // Setup: Verify Due Date on Requisition Line created after Capable to promise for Manufacturing Policy Make-to-Order on Item.
      Initialize;
      DueDateOnReqWkshWithCapableToPromiseManufPolicyLFLItem(TRUE);  // TRUE- Manufacturing Policy Make-to-Order.
    END;

    LOCAL PROCEDURE DueDateOnReqWkshWithCapableToPromiseManufPolicyLFLItem@111(MakeToOrder@1005 : Boolean);
    VAR
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Create Lot For Lot Item and Update Lead Time Calculation. Create Sales Order.
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      IF MakeToOrder THEN
        UpdateItemManufacturingPolicy(Item,Item."Manufacturing Policy"::"Make-to-Order");
      UpdateItemLeadTimeCalculation(Item,'<' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'D>');  // Random Lead Time Calculation.
      CreateSalesOrder(Item."No.",'');

      // Exercise: Open Order Promising Lines Page and Invoke Capable to Promise Action.
      FindSalesLine(SalesLine,Item."No.");
      OpenOrderPromisingPage(SalesLine."Document No.");  // Using Page to avoid Due Date error - OrderPromisingPageHandler.

      // Verify: Verify Due Date on Requisition Line.
      SalesLine.FIND;
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Due Date",SalesLine."Planned Shipment Date");
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithSalesShipForStartingEndingTimeLFLItems@93();
    VAR
      WorkCenter@1003 : Record 99000754;
      ParentItem@1002 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      RequisitionLine@1000 : Record 246;
      ShopCalendarWorkingDays@1010 : Record 99000752;
      ChildItemNo@1004 : Code[20];
    BEGIN
      // Setup: Create Lot For Lot Parent and Child Item. Create Routing and update on Item.
      Initialize;
      ChildItemNo := CreateLotForLotItemSetup(ParentItem);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(ParentItem,RoutingHeader."No.");

      // Create and Post Sales Order as Ship.
      CreateAndPostSalesOrderAsShip(ParentItem."No.");

      // Exercise: Calculate Plan for Planning Worksheet for Parent and child Item.
      CalcRegenPlanForPlanWkshForMultipleItems(ParentItem."No.",ChildItemNo);

      // Verify: Verify Starting Time and Ending Time on Planning Worksheet is according to Shop Calendar and Manufacturing Setup.
      FindShopCalendarWorkingDays(ShopCalendarWorkingDays,WorkCenter."Shop Calendar Code");
      VerifyRequisitionLineStartingAndEndingTime(ChildItemNo);
      VerifyRequisitionLineEndingTime(RequisitionLine,ParentItem."No.",ShopCalendarWorkingDays."Ending Time");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CalcRegenPlanWithProdOrderFromSalesForStartingEndingTimeLFLItems@92();
    VAR
      WorkCenter@1003 : Record 99000754;
      ParentItem@1002 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      ChildItemNo@1004 : Code[20];
    BEGIN
      // Setup: Create Lot For Lot Parent and Child Item. Create Routing and update on Item.
      Initialize;
      ChildItemNo := CreateLotForLotItemSetup(ParentItem);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(ParentItem,RoutingHeader."No.");

      // Create Released Production Order from Sales Order.
      CreateReleasedProdOrderFromSalesOrder(ParentItem."No.");

      // Exercise: Calculate Plan for Planning Worksheet for Parent and child Item.
      CalcRegenPlanForPlanWkshForMultipleItems(ParentItem."No.",ChildItemNo);

      // Verify: Verify Starting Time and Ending Time on Planning Worksheet is according to Manufacturing Setup.
      VerifyRequisitionLineStartingAndEndingTime(ChildItemNo);
    END;

    [Test]
    PROCEDURE CalcSubcontractOrderAndCarryOutForReleasedProdOrderWithLocation@85();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      Location@1002 : Record 14;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
      PurchLine@1005 : Record 39;
    BEGIN
      // Setup: Create Item. Create Routing and update on Item.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // Create Location, Create and refresh Released Production Order with Location.
      LibraryWarehouse.CreateLocation(Location);
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",Location.Code,'');

      // Exercise: Calculate Subcontracts from Subcontracting worksheet and Carry Out Action Message.
      CalculateSubcontractOrder(WorkCenter);
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // Re-validate the Quantity on the purchase line created by Subcontracting worksheet.
      FindPurchLine(PurchLine,Item."No.");
      PurchLine.VALIDATE(Quantity,ProductionOrder.Quantity);
      PurchLine.MODIFY(TRUE);

      // Verify: Verify "Qty. on Purch. Order" on Item Card.
      Item.CALCFIELDS("Qty. on Purch. Order");
      Item.TESTFIELD("Qty. on Purch. Order",0);

      // Verify the value of Projected Available Balance on Item Availability By Location Page.
      VerifyItemAvailabilityByLocation(Item,Location.Code,ProductionOrder.Quantity);

      // Verify Scheduled Receipt and Projected Available Balance on Item Availability By Period Page.
      // the value of Scheduled Receipt equal to 0 on the line that Period Start is a day before WORKDATE
      // and the value of Scheduled Receipt equal to ProductionOrder.Quantity on the line that Period Start is WORKDATE
      // the value of Projected Available Balance equal to ProductionOrder.Quantity on the line that Period Start is WORKDATE
      VerifyItemAvailabilityByPeriod(Item,0,ProductionOrder.Quantity,ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CheckProdOrderStatusPageHandler)]
    PROCEDURE CalcRegenPlanAfterUpdateQtyOnSalesOrderLineWithProdItem@203();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      RequisitionLine@1007 : Record 246;
      Quantity@1005 : Decimal;
      QuantityPer@1006 : Decimal;
    BEGIN
      // Test and verify Quantity for production component Item on Requisition Line is correct after replanning.

      // Setup: Create Item with planning parameters and Prod. BOM.
      Initialize;
      QuantityPer := CreateItemWithProdBOM(Item,ChildItem);

      // Create Released Production Order from Sales Order. Then Update Sales Line Quantity.
      CreateReleasedProdOrderFromSalesOrder(Item."No.");
      LibraryVariableStorage.Enqueue(SalesLineQtyChangedMsg);
      Quantity := LibraryRandom.RandInt(100);
      UpdateSalesLineQuantity(Item."No.",Quantity);

      // Exercise: Calculate Plan for Planning Worksheet for parent and child Item.
      CalcRegenPlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Quantity of child Item on Resuisition Line is correct.
      VerifyRequisitionLineQuantity(
        ChildItem."No.",RequisitionLine."Action Message"::"Change Qty.",Quantity * QuantityPer);
    END;

    [Test]
    PROCEDURE CalcRegenPlanAfterUpdateQtyOnSalesOrderLineWithAssemblyItem@217();
    VAR
      Item@1000 : Record 27;
      CompItem@1003 : Record 27;
      RequisitionLine@1006 : Record 246;
      Quantity@1002 : Decimal;
      QuantityPer@1004 : Decimal;
    BEGIN
      // Test and verify Quantity for assembly component Item on Requisition Line is correct after replanning.

      // Setup: Create Item with planning parameters and Asm. BOM.
      Initialize;
      QuantityPer := CreateAssemblyItemWithBOM(Item,CompItem);
      CreateSalesOrder(Item."No.",'');

      // Generate an Assembly Order for Sales Line by Planning Worksheet. Then Update Sales Line Quantity.
      CalcRegenPlanAndCarryOut(Item,WORKDATE,WORKDATE);
      CalcRegenPlanAndCarryOut(CompItem,WORKDATE,WORKDATE);
      Quantity := LibraryRandom.RandInt(100);
      UpdateSalesLineQuantity(Item."No.",Quantity);

      // Exercise: Calculate Plan for Planning Worksheet for parent and child Item.
      CalcRegenPlanForPlanWkshForMultipleItems(Item."No.",CompItem."No.");

      // Verify: Verify Quantity of child Item on Resuisition Line is correct.
      VerifyRequisitionLineQuantity(
        CompItem."No.",RequisitionLine."Action Message"::New,QuantityPer * Quantity);
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithMixedLocationsAndNoSKU@115();
    VAR
      Item@1000 : Record 27;
      PrevLocMandatory@1001 : Boolean;
      PrevComponentsAtLocation@1002 : Code[10];
    BEGIN
      // [SCENARIO 354463] When Item does not have SKUs and Location Mandatory is FALSE and Components at Location is empty, Item is replenished as Lot-for-Lot and other planning parameters are ignored for non-empty Location.

      // [GIVEN] Location Mandatory = FALSE, Components at Location = ''.
      Initialize;
      PrevLocMandatory := UpdInvSetupLocMandatory(FALSE);
      PrevComponentsAtLocation := UpdManufSetupComponentsAtLocation('');
      // [GIVEN] Item with no SKUs and some planning Quantities.
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      SetReplenishmentQuantities(Item,LibraryRandom.RandDecInDecimalRange(100,10000,0));
      // [GIVEN] Inventory is both on empty and non-empty Location.
      UpdateInventory(Item."No.",LibraryRandom.RandDecInDecimalRange(10,100,0),'');
      UpdateInventory(Item."No.",LibraryRandom.RandDecInDecimalRange(10,100,0),LocationBlue.Code);

      // [WHEN] Calculating Regeneration Plan
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] For non-empty location used planning parameters: Lot-for-Lot, include inventory, other values are blank.
      VerifyRequisitionLineExistenceWithLocation(Item."No.",LocationBlue.Code,ReqLineExpectedTo::"Not Exist");
      // [THEN] For empty location used planning parameters from Item.
      VerifyRequisitionLineExistenceWithLocation(Item."No.",'',ReqLineExpectedTo::Exist);

      // Teardown.
      UpdInvSetupLocMandatory(PrevLocMandatory);
      UpdManufSetupComponentsAtLocation(PrevComponentsAtLocation);
    END;

    [Test]
    PROCEDURE RequisitionLineIsDeletedWhileCalculatingWorksheetForDifferentBatch@121();
    VAR
      WorkCenter@1004 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1002 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
      RequisitionWkshName@1005 : Record 245;
      RequisitionWkshName2@1006 : Record 245;
    BEGIN
      // [FEATURE] [Subcontracting Worksheet]
      // [SCENARIO 363390] Requisition Line is deleted in Batch "A" while Calculating Worksheet for same Line for Batch "B"
      Initialize;

      // [GIVEN] Released Production Order for Item with Routing
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');

      // [GIVEN] Requisition Worksheet Batch "A"
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // [GIVEN] Requisition Worksheet Batch "B"
      CreateRequisitionWorksheetName(RequisitionWkshName2);

      // [GIVEN] Calculate Worksheet for Batch "A". Requisition Worksheet Line "X" is created.
      CalculateSubcontractingWorksheetForBatch(RequisitionWkshName,WorkCenter);

      // [WHEN] Calculate Worksheet for Batch "B".
      CalculateSubcontractingWorksheetForBatch(RequisitionWkshName2,WorkCenter);

      // [THEN] Requisition Worksheet Line "Y" = "X" is created. Line "X" is deleted from Batch "A".
      VerifyRequisitionLineForTwoBatches(RequisitionWkshName.Name,RequisitionWkshName2.Name,Item."No.",ProductionOrder."No.");
    END;

    [Test]
    PROCEDURE ReservationDeletedWhenDeletingProdOrderLine@123();
    VAR
      TopLevelItem@1000 : Record 27;
      MidLevelItem@1001 : Record 27;
      ProdOrderLine@1006 : Record 5406;
      RequisitionLine@1003 : Record 246;
      ProdOrderChoice@1002 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
    BEGIN
      // [FEATURE] [Reservation] [Manufacturing] [Planning Worksheet]
      // [SCENARIO 363718] Reservation linking two prod. order lines in the same prod. order is deleted when top-level line is deleted

      Initialize;

      // [GIVEN] Item "I1" replenished through manufacturing with order tracking
      // [GIVEN] Item "I2" replenished through manufacturing with order tracking, used as a component for item "I1"
      CreateItemWithProdBOM(TopLevelItem,MidLevelItem);
      UpdateOrderTrackingPolicy(TopLevelItem);
      UpdateOrderTrackingPolicy(MidLevelItem);

      // [GIVEN] Sales order for item "I1"
      CreateSalesOrder(TopLevelItem."No.",LibrarySales.CreateCustomerNo);
      TopLevelItem.SETFILTER("No.",'%1|%2',TopLevelItem."No.",MidLevelItem."No.");

      // [GIVEN] Calculate requisition plan for items "I1" and "I2"
      CalculateRegenPlanForPlanningWorksheet(TopLevelItem);
      AcceptActionMessage(RequisitionLine,TopLevelItem."No.");
      AcceptActionMessage(RequisitionLine,MidLevelItem."No.");

      // [GIVEN] Carry out requisition plan - one production order with 2 lines is created. Item "I2" is reserved as a component for the item "I1"
      RequisitionLine.RESET;
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionLine."Journal Batch Name");
      LibraryPlanning.CarryOutPlanWksh(RequisitionLine,ProdOrderChoice::"Firm Planned",0,0,0,'','','','');

      // [WHEN] Delete production order line for item "I1"
      ProdOrderLine.SETRANGE("Item No.",TopLevelItem."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.DELETE(TRUE);

      // [THEN] All reservation entries linked to this line are deleted
      VerifyReservationEntryIsEmpty(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
    END;

    [Test]
    PROCEDURE TwoSequentialProdOrdersPlannedOnCapacityContrainedMachineAndWorkCenters@126();
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : ARRAY [2] OF Record 99000758;
      Item@1002 : ARRAY [2] OF Record 27;
      CapacityConstrainedResource@1005 : Record 99000866;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionLine@1008 : Record 246;
      StartingDateTime@1009 : DateTime;
    BEGIN
      // [FEATURE] [Manufacturing] [Capacity Constrained Resource] [Planning Worksheet]
      // [SCENARIO] Two sequential prod. orders are planned when both machine center and its work center are capacity constrained

      // [GIVEN] Work center with 2 machine centers - "MC1" and "MC2"
      CreateWorkCenterWith2MachineCenters(WorkCenter,MachineCenter);

      // [GIVEN] All manufacturing capacities registered as capacity constrained resources
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Work Center",WorkCenter."No.");
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Machine Center",MachineCenter[1]."No.");
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Machine Center",MachineCenter[2]."No.");

      // [GIVEN] Item "I1" with routing involving machine centers "MC1", then "MC2"
      CreateLotForLotItemWithRouting(Item[1],MachineCenter[1],MachineCenter[2]);
      // [GIVEN] Item "I1" with routing involving machine centers "MC2", then "MC1"
      CreateLotForLotItemWithRouting(Item[2],MachineCenter[2],MachineCenter[1]);

      // [GIVEN] Sales order with 2 lines: 300 pcs of item "I1" and 300 pcs of item "I2"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item[1]."No.",300);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item[2]."No.",300);

      // [WHEN] Calculate regenerative plan for both items
      Item[1].SETFILTER("No.",'%1|%2',Item[1]."No.",Item[2]."No.");
      CalculateRegenPlanForPlanningWorksheet(Item[1]);

      // [THEN] 2 sequential manufacturing orders are planned: P1."Ending Date-Time" = P2."Starting Date-Time"
      SelectRequisitionLine(RequisitionLine,Item[1]."No.");
      StartingDateTime := RequisitionLine."Starting Date-Time";

      SelectRequisitionLine(RequisitionLine,Item[2]."No.");
      RequisitionLine.TESTFIELD("Ending Date-Time",StartingDateTime);
    END;

    [Test]
    PROCEDURE TwoParallelProdOrdersPlannedOnConstrainedMachCentersWithUnlimitedWorkCenter@140();
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : ARRAY [2] OF Record 99000758;
      Item@1002 : ARRAY [2] OF Record 27;
      CapacityConstrainedResource@1005 : Record 99000866;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionLine@1008 : ARRAY [2] OF Record 246;
    BEGIN
      // [FEATURE] [Manufacturing] [Capacity Constrained Resource] [Planning Worksheet]
      // [SCENARIO] Two parallel prod. orders are planned when machine centers are capacity contrained, but the work center is not constrained

      CreateWorkCenterWith2MachineCenters(WorkCenter,MachineCenter);

      // [GIVEN] Machine centers are registered as capacity constrained resources, work center is not constrained
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Machine Center",MachineCenter[1]."No.");
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Machine Center",MachineCenter[2]."No.");

      // [GIVEN] Item "I1" with routing involving machine centers "MC1", then "MC2"
      CreateLotForLotItemWithRouting(Item[1],MachineCenter[1],MachineCenter[2]);
      // [GIVEN] Item "I1" with routing involving machine centers "MC2", then "MC1"
      CreateLotForLotItemWithRouting(Item[2],MachineCenter[2],MachineCenter[1]);

      // [GIVEN] Sales order with 2 lines: 300 pcs of item "I1" and 300 pcs of item "I2"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item[1]."No.",300);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item[2]."No.",300);

      // [WHEN] Calculate regenerative plan for both items
      Item[1].SETFILTER("No.",'%1|%2',Item[1]."No.",Item[2]."No.");
      CalculateRegenPlanForPlanningWorksheet(Item[1]);

      // [THEN] 2 parallel production orders are planned: P1."Starting Date-Time" = P2."Starting Date-Time", P1."Ending Date-Time" = P2."Ending Date-Time"
      SelectRequisitionLine(RequisitionLine[1],Item[1]."No.");
      SelectRequisitionLine(RequisitionLine[2],Item[2]."No.");
      RequisitionLine[2].TESTFIELD("Starting Date-Time",RequisitionLine[1]."Starting Date-Time");
      RequisitionLine[2].TESTFIELD("Ending Date-Time",RequisitionLine[1]."Ending Date-Time");
    END;

    [Test]
    PROCEDURE CalcChangeSubcontractOrderWithExistingPurchase@132();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
      RequisitionLine@1002 : Record 246;
      NewQty@1005 : Decimal;
      PurchaseLine@1500000 : Record 39;
    BEGIN
      // [FEATURE] [Subcontracting Worksheet] [Requisition Line]
      // [SCENARIO] Can change Quantity in Subcontracting Worksheet if replenishment already exists.

      // [GIVEN] Item with subcontracting routing, create Released Production Order.
      Initialize;
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');

      // [GIVEN] Calculate Subcontracts, accept and Carry Out Action.
      CalculateSubcontractOrder(WorkCenter);
      CarryOutActionMessageSubcontractWksh(Item."No.");
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PurchaseLine.UpdateProdOrder;

      // [GIVEN] Update Quantity, Calculate Subcontracts.
      UpdateProdOrderLineQty(Item."No.",ProductionOrder.Quantity + LibraryRandom.RandIntInRange(1,5));
      CalculateSubcontractOrder(WorkCenter);

      // [WHEN] In Subcontracting Worksheet, change Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      NewQty := RequisitionLine.Quantity + LibraryRandom.RandIntInRange(1,5);
      RequisitionLine.VALIDATE(Quantity,NewQty);

      // [THEN] Quantity changed.
      RequisitionLine.TESTFIELD(Quantity,NewQty);
    END;

    [Test]
    PROCEDURE RegenerativePlanWithFixedReorderQtyConsidersLeadTimeCalculation@128();
    VAR
      Item@1001 : Record 27;
      RequisitionWkshName@1002 : Record 245;
      ReqLine@1003 : Record 246;
      ManufacturingSetup@1004 : Record 99000765;
      ExpectedDueDate@1005 : Date;
    BEGIN
      // [FEATURE] [Requisition Worksheet] [Lead Time Calculation]
      // [SCENARIO] Lead Time Calculation should be considered when calculating requisition plan for an item with fixed reorder quantity

      // [GIVEN] Item "I" with Lead Time Calculation = "1M" and reordering policy "Fixed Reorder Qty."
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandDec(10,2));
      EVALUATE(Item."Lead Time Calculation",'<1M>');
      Item.MODIFY(TRUE);

      // [WHEN] Calculate regenerative plan for item "I" on WORKDATE
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,WORKDATE);

      // [THEN] "Due Date" in requisition line is WORKDATE + 1M
      ManufacturingSetup.GET;
      SelectRequisitionLine(ReqLine,Item."No.");
      ExpectedDueDate := CALCDATE(STRSUBSTNO('<1M+%1>',ManufacturingSetup."Default Safety Lead Time"),WORKDATE);
      ReqLine.TESTFIELD("Due Date",ExpectedDueDate);
    END;

    [Test]
    PROCEDURE ItemAvailabilityForPeriodWithDropShipmentOrders@13();
    VAR
      Item@1002 : Record 27;
      SalesLine@1000 : Record 37;
      ItemCard@1004 : TestPage 30;
      ItemAvailabilityByPeriod@1003 : TestPage 157;
    BEGIN
      // [FEATURE] [Item Availability] [Drop Shipment]
      // [SCENARIO 377096] Item Availability for Period should not consider Drop Shipment Orders for Sheduled Receipt
      Initialize;

      // [GIVEN] Drop Shipment Sales Order of Quantity = "X"
      CreateItem(Item);
      CreateSalesOrder(Item."No.",CreateCustomerWithLocation);
      UpdateSalesLineWithPurchasingCode(SalesLine,Item."No.",LocationSilver.Code,TRUE);  // TRUE for Drop Shipment.

      // [GIVEN] Purchase Order for Drop Shipment Sales Order
      GetSalesOrderForDropShipmentAndCarryOutReqWksh(SalesLine);

      // [WHEN] Run Item Availability for Period
      ItemCard.OPENVIEW;
      ItemCard.GOTORECORD(Item);
      ItemAvailabilityByPeriod.TRAP;
      ItemCard."Page Item Availability by Periods".INVOKE;

      // [THEN] Sheduled Receipt = 0 on Item Availability Line
      ItemAvailabilityByPeriod.ItemAvailLines.ScheduledRcpt.ASSERTEQUALS(0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE,CalcRegenPlanReqPageHandler)]
    PROCEDURE RequisitionPlanManufacturedItemWithClosedBOMAndCertifiedVersion@136();
    VAR
      Item@1000 : Record 27;
      ProdBomVersion@1003 : Record 99000779;
      RequisitionLine@1005 : Record 246;
      PlanningWorksheet@1004 : TestPage 99000852;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Planning Resiliency] [Production BOM]
      // [SCENARIO 381546] Requisition plan should be calculated correctly for a manufactured item having closed BOM and certified BOM version
      Initialize;

      // [GIVEN] Item "I" with closed production BOM "B"
      // [GIVEN] Create and certify a version of BOM "B"
      CreateItemWithClosedBOMAndVersion(Item,ProdBomVersion);
      UpdateProdBOMVersionStatus(ProdBomVersion,ProdBomVersion.Status::Certified);

      // [GIVEN] Sales order for item "I" to create unfulfilled demand
      CreateSalesOrder(Item."No.",LibrarySales.CreateCustomerNo);

      // [WHEN] Run "Calculate Regenerative Plan" from planning worksheet
      PlanningWorksheet.OPENEDIT;
      COMMIT;
      LibraryVariableStorage.Enqueue(FALSE);  // Stop and Show First Error = FALSE
      LibraryVariableStorage.Enqueue(Item."No.");
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;

      // [THEN] Requisition line for item "I" is created
      PlanningWorksheet."No.".ASSERTEQUALS(Item."No.");
      PlanningWorksheet."Ref. Order Type".ASSERTEQUALS(RequisitionLine."Ref. Order Type"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE,CalcRegenPlanReqPageHandler,MessageHandler,PlanningErrorLogPageHandler)]
    PROCEDURE RequisitionPlanManufacturedItemWithClosedBOMPlanningResiliencyOn@138();
    VAR
      Item@1000 : Record 27;
      ProdBomVersion@1003 : Record 99000779;
      PlanningWorksheet@1004 : TestPage 99000852;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Planning Resiliency] [Production BOM]
      // [SCENARIO 381546] Requisition worksheet should show a planning error list when planning a manufactured item wihout certified BOM, planning resiliency is on
      Initialize;

      // [GIVEN] Item "I" with closed production BOM "B"
      // [GIVEN] Create a version of production BOM "B", leave it in "New" status
      CreateItemWithClosedBOMAndVersion(Item,ProdBomVersion);

      // [GIVEN] Sales order for item "I" to create unfulfilled demand
      CreateSalesOrder(Item."No.",LibrarySales.CreateCustomerNo);

      // [WHEN] Run "Calculate Regenerative Plan" from planning worksheet with option "Stop and Show First Error" = FALSE
      PlanningWorksheet.OPENEDIT;
      COMMIT;
      LibraryVariableStorage.Enqueue(FALSE);  // Stop and Show First Error = FALSE
      LibraryVariableStorage.Enqueue(Item."No.");  // Enqueue item no. for MessageHandler
      LibraryVariableStorage.Enqueue(STRSUBSTNO(NotAllItemsPlannedMsg,1));
      LibraryVariableStorage.Enqueue(Item."No.");  // Enqueue item no. again for PlanningErrorLogPageHandler
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;

      // [THEN] "Planning Error Log" page is shown
      // Verified in PlanningErrorLogPageHandler
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE,CalcRegenPlanReqPageHandler)]
    PROCEDURE RequisitionPlanManufacturedItemWithClosedBOMPlanningResiliencyOff@147();
    VAR
      Item@1000 : Record 27;
      ProdBomVersion@1003 : Record 99000779;
      PlanningWorksheet@1004 : TestPage 99000852;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Planning Resiliency] [Production BOM]
      // [SCENARIO 381546] Requisition worksheet should throw an error when planning a manufactured item wihout certified BOM, planning resiliency is off
      Initialize;

      // [GIVEN] Item "I" with closed production BOM "B"
      // [GIVEN] Create a version of production BOM "B", leave it in "New" status
      CreateItemWithClosedBOMAndVersion(Item,ProdBomVersion);

      // [GIVEN] Sales order for item "I" to create unfulfilled demand
      CreateSalesOrder(Item."No.",LibrarySales.CreateCustomerNo);

      // [WHEN] Run "Calculate Regenerative Plan" from planning worksheet with option "Stop and Show First Error" = TRUE
      PlanningWorksheet.OPENEDIT;
      COMMIT;
      LibraryVariableStorage.Enqueue(TRUE);  // Stop and Show First Error = TRUE
      LibraryVariableStorage.Enqueue(Item."No.");

      // [THEN] Planning is terminated with an error: "Status must be equal to 'Certified' in Production BOM Header"
      ASSERTERROR PlanningWorksheet.CalculateRegenerativePlan.INVOKE;
      Assert.ExpectedError(BOMMustBeCertifiedErr);
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityLineListPageHandler,ProdOrderComponentPageHandler)]
    PROCEDURE DrillingDownToGrossReqInItemAvailShowsListOfFirmPlannedProdOrders@1000();
    VAR
      Item@1000 : Record 27;
      ProdOrderComponent@1001 : Record 5407;
      ItemCard@1003 : TestPage 30;
      ItemAvailabilityByPeriod@1002 : TestPage 157;
      Qty@1005 : Decimal;
    BEGIN
      // [FEATURE] [Item Availability] [Prod. Order Component]
      // [SCENARIO 382414] Prod. order components of Firm Planned production orders should be shown on drilling down Gross Requirements value on Item Available by Periods page.
      Initialize;
      Qty := LibraryRandom.RandInt(10);

      // [GIVEN] Item "I" which is a Prod. Order Component in Firm Planned production order. "Remaining Quantity" = "X".
      LibraryInventory.CreateItem(Item);
      MockProdOrderComponent(Item."No.",Qty);

      // [GIVEN] Item Availability by Periods page is opened for "I".
      ItemCard.OPENVIEW;
      ItemCard.GOTORECORD(Item);
      ItemAvailabilityByPeriod.TRAP;
      ItemCard."Page Item Availability by Periods".INVOKE;

      // [WHEN] Drill down Gross Requirement value on Item Availability by Periods page.
      LibraryVariableStorage.Enqueue(ProdOrderComponent.TABLECAPTION);
      LibraryVariableStorage.Enqueue(Qty);
      LibraryVariableStorage.Enqueue(Item."No.");
      LibraryVariableStorage.Enqueue(Qty);
      ItemAvailabilityByPeriod.ItemAvailLines.GrossRequirement.DRILLDOWN;

      // [THEN] Gross Requirement for "I" shows "X" units in prod. order components.
      // [THEN] Drilling down to "X" value shows "X" units of item "I" as a component of Firm Planned production order.
      // Verifications are done in ItemAvailabilityLineListPageHandler and ProdOrderComponentPageHandler.
    END;

    [Test]
    [HandlerFunctions(BlindConfirmHandler)]
    PROCEDURE CheckValueEntryExpectedCostForReceivedNotInvoicedSubcontrPurchaseOrderAfterFinishingRelatedProdOrder@152();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseLine@1006 : Record 39;
      RoutingHeader@1001 : Record 99000763;
      ValueEntry@1005 : Record 5802;
    BEGIN
      // [FEATURE] [Subcontracting] [Production] [Expected Cost]
      // [SCENARIO 381570] For received but not invoiced yet purchase order with subcontracting after finishing the related production order the expected cost amount must be equal to multiplication Quantity * "Direct Unit Cost" of purchase order line.
      Initialize;

      // [GIVEN] Item I with routing with subcontractor S for workcenter W.
      CreateItemWithChildReplenishmentPurchaseAsProdBOM(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // [GIVEN] Refreshed released production order PRD for I.
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,Item."No.",'','');

      // [GIVEN] Calculate subcontracts for W.
      CalculateSubcontractOrder(WorkCenter);

      // [GIVEN] Carry out action messages for Subcontracting Worksheet with creation of purchase order PRCH with vendor S and one line PL.
      CarryOutActionMessageSubcontractWksh(Item."No.");

      // [GIVEN] Post PRCH as Receive but not as Invoice.
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PostPurchaseDocument(PurchaseLine,FALSE);

      // [WHEN] Change Status of PRD from Released To Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [THEN] In related Value Entry expected cost amount must be equal to multiplication of the fields Quantity * "Direct Unit Cost" of purchase order line PL.
      FindValueEntry(ValueEntry,Item."No.");
      ValueEntry.TESTFIELD("Cost Amount (Expected)",ROUND(PurchaseLine."Direct Unit Cost" * PurchaseLine.Quantity));
    END;

    [Test]
    PROCEDURE AssemblyReplenishedSKUAreNotPlannedWithRequisitionWorksheet@77();
    VAR
      Item@1000 : Record 27;
      CompItem@1001 : Record 27;
      StockkeepingUnit@1004 : Record 5700;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Assembly] [Requisition Worksheet]
      // [SCENARIO 215219] Assembly replenished SKU cannot be planned with Requisition Worksheet.
      Initialize;

      // [GIVEN] Assembly Item "I".
      // [GIVEN] Stockkeeping unit "SKU-T" for "I" at location "T" and with Replenishment System = "Transfer".
      // [GIVEN] Stockkeeping unit "SKU-A" for "I" at location "A" and with Replenishment System = "Assembly".
      CreateAssemblyItemWithBOM(Item,CompItem);
      SelectTransferRoute(LocationRed.Code,LocationBlue.Code);
      CreateStockkeepingUnit(
        StockkeepingUnit,Item."No.",LocationBlue.Code,StockkeepingUnit."Replenishment System"::Transfer,
        StockkeepingUnit."Reordering Policy"::Order,LocationRed.Code);
      CreateStockkeepingUnit(
        StockkeepingUnit,Item."No.",LocationRed.Code,StockkeepingUnit."Replenishment System"::Assembly,
        StockkeepingUnit."Reordering Policy"::Order,'');

      // [GIVEN] Sales Order with item "I" at location "T".
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",
        LibraryRandom.RandInt(10),LocationBlue.Code,WORKDATE);

      // [WHEN] Calculate plan for "I" in Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(Item);

      // [THEN] Planning line for Assembly at location "A" is not created.
      VerifyRequisitionLineExistenceWithLocation(Item."No.",LocationRed.Code,ReqLineExpectedTo::"Not Exist");

      // [THEN] Planning line for Transfer at location "T" is created.
      VerifyRequisitionLineExistenceWithLocation(Item."No.",LocationBlue.Code,ReqLineExpectedTo::Exist);
    END;

    [Test]
    PROCEDURE SubcontractPurchHeaderNotSavedWhenLineCreationFails@58();
    VAR
      Item@1000 : Record 27;
      WorkCenter@1001 : Record 99000754;
      RoutingHeader@1002 : Record 99000763;
      ProductionOrder@1003 : Record 5405;
      PurchaseHeader@1004 : Record 38;
    BEGIN
      // [FEATURE] [Subcontracting Worksheet]
      // [SCENARIO 382090] Purchase header created from the subcontracting worksheet should not be saved when lines cannot be generated due to erroneous setup

      Initialize;

      // [GIVEN] Work center "W" with linked subcontractor, routing "R" includes an operation on the work center "W"
      CreateItem(Item);
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");

      // [GIVEN] Work center "W" is not properly configured, because its Gen. Prod. Posting Group does not exist
      WorkCenter."Gen. Prod. Posting Group" := LibraryUtility.GenerateGUID;
      WorkCenter.MODIFY;

      // [GIVEN] Create a production order involving the usage of the work center "W"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",LibraryRandom.RandDec(10,2));
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // [GIVEN] Calculate subcontrat orders
      CalculateSubcontractOrder(WorkCenter);

      // [WHEN] Carry out subcontracting worksheet
      ASSERTERROR CarryOutActionMessageSubcontractWksh(Item."No.");

      // [THEN] Creation of a subcontracting purchase order fails, purchase header is not saved
      PurchaseHeader.INIT;
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",WorkCenter."Subcontractor No.");
      Assert.RecordIsEmpty(PurchaseHeader);
    END;

    [Test]
    [HandlerFunctions(SubConMessageHandler)]
    PROCEDURE VerifyPostingDateOfSubContractingOutputEntry@1500000();
    VAR
      Item@1500001 : Record 27;
      Location@1500002 : Record 14;
      WorkCenter@1500003 : Record 99000754;
      RMItemCode@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163525] BUG ID #172775 Output Posting date should be based on the SubContracting Receipt Posting date
      // [FEATURE] [SUBCONTRACTING]

      // [GIVEN] Created SubContracting Setup With Item, BOM and Location
      Initialize;
      RMItemCode := CreateSubContractingSetupWithItemBOMLocation(Item,Location,WorkCenter);

      // [WHEN] Post Item Journal and Create & Post Subcontracting Document
      UpdateInventory(RMItemCode,LibraryRandom.RandDec(1000,2),Location.Code);
      CreateAndPostSubContractingDocument(WorkCenter,Item."No.",Location.Code);

      // [THEN] Posted Output posting date matched with SubContracting Receipt Posting date
      VerifyOutputItemLedgerEntryPostingDate(Item."No.");
    END;

    LOCAL PROCEDURE Initialize@5();
    VAR
      RequisitionLine@1001 : Record 246;
      ReservationEntry@1002 : Record 337;
    BEGIN
      RequisitionLine.DELETEALL;
      ReservationEntry.DELETEALL;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@65();
    BEGIN
      CreateAndUpdateLocation(LocationSilver);  // Location Silver: Bin Mandatory TRUE.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationRed);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Random Integer value required for Number of Bins.
    END;

    LOCAL PROCEDURE ItemJournalSetup@18();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE UpdInvSetupLocMandatory@84(NewValue@1000 : Boolean) Result : Boolean;
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      WITH InventorySetup DO BEGIN
        GET;
        Result := "Location Mandatory";
        VALIDATE("Location Mandatory",NewValue);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdManufSetupComponentsAtLocation@119(NewValue@1000 : Code[10]) Result : Code[10];
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      WITH ManufacturingSetup DO BEGIN
        GET;
        Result := "Components at Location";
        VALIDATE("Components at Location",NewValue);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetReplenishmentQuantities@120(VAR Item@1000 : Record 27;NewQuantity@1001 : Decimal);
    BEGIN
      WITH Item DO BEGIN
        VALIDATE("Safety Stock Quantity",NewQuantity);
        VALIDATE("Minimum Order Quantity",NewQuantity);
        VALIDATE("Maximum Order Quantity",NewQuantity);
        VALIDATE("Order Multiple",NewQuantity);
        VALIDATE("Include Inventory",TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalculateSubcontractingWorksheetForBatch@134(RequisitionWkshName@1001 : Record 245;WorkCenter@1002 : Record 99000754);
    VAR
      RequisitionLine@1000 : Record 246;
      CalculateSubcontracts@1003 : Report 99001015;
    BEGIN
      WITH RequisitionLine DO BEGIN
        INIT;
        "Worksheet Template Name" := RequisitionWkshName."Worksheet Template Name";
        "Journal Batch Name" := RequisitionWkshName.Name;
      END;

      CLEAR(CalculateSubcontracts);
      WITH CalculateSubcontracts DO BEGIN
        SetWkShLine(RequisitionLine);
        SETTABLEVIEW(WorkCenter);
        USEREQUESTPAGE(FALSE);
        RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE CertifyRouting@127(VAR RoutingHeader@1000 : Record 99000763);
    BEGIN
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@35(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProdBOM@117(VAR Item@1002 : Record 27;VAR ChildItem@1001 : Record 27) QuantityPer : Decimal;
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateAndUpdateItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::Order,
        Item."Manufacturing Policy"::"Make-to-Order",'');
      QuantityPer := CreateChildItemAsProdBOM(ChildItem,ProductionBOMHeader,ChildItem."Replenishment System"::"Prod. Order");
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithChildReplenishmentPurchaseAsProdBOM@161(VAR Item@1002 : Record 27) QuantityPer : Decimal;
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      ChildItem@1001 : Record 27;
    BEGIN
      CreateAndUpdateItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::Order,
        Item."Manufacturing Policy"::"Make-to-Order",'');
      QuantityPer := CreateChildItemAsProdBOM(ChildItem,ProductionBOMHeader,ChildItem."Replenishment System"::Purchase);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithSKU@200(VAR Item@1000 : Record 27;VAR SKU@1001 : Record 5700;LocationCode@1002 : Code[10]);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      Item.MODIFY(TRUE);

      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,LocationCode,Item."No.",'');
      SKU.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      SKU.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@154(VAR StockkeepingUnit@1000 : Record 5700;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];ReplenishmentSystem@1003 : Option;ReorderingPolicy@1004 : Option;TransferFromCode@1005 : Code[10]);
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Reordering Policy",ReorderingPolicy);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateChildItemAsProdBOM@133(VAR ChildItem@1001 : Record 27;VAR ProductionBOMHeader@1000 : Record 99000771;ReplenishmentSystem@1002 : Option) QuantityPer : Decimal;
    BEGIN
      CreateAndUpdateItem(
        ChildItem,ReplenishmentSystem,ChildItem."Reordering Policy"::Order,
        ChildItem."Manufacturing Policy"::"Make-to-Order",'');
      QuantityPer := CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithLocation@33() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LocationBlue.VALIDATE(Address,LocationBlue.Name);
      LocationBlue.MODIFY(TRUE);
      LibraryInventory.UpdateInventoryPostingSetup(LocationBlue);
      Customer.VALIDATE("Location Code",LocationBlue.Code);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateOrderItem@30(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@45(VAR Item@1001 : Record 27;ReplenishmentSystem@1000 : Option);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemWithRouting@142(VAR Item@1000 : Record 27;MachineCenter1@1003 : Record 99000758;MachineCenter2@1004 : Record 99000758);
    VAR
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      LibraryManufacturing.CreateRoutingLineSetup(RoutingLine,RoutingHeader,MachineCenter1."No.",'10',0,1);
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      LibraryManufacturing.CreateRoutingLineSetup(RoutingLine,RoutingHeader,MachineCenter2."No.",'20',0,1);
      CertifyRouting(RoutingHeader);

      UpdateItemRoutingNo(Item,RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateRoutingSetup@166(VAR WorkCenter@1002 : Record 99000754;VAR RoutingHeader@1003 : Record 99000763);
    VAR
      RoutingLine@1004 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      CertifyRouting(RoutingHeader);
    END;

    LOCAL PROCEDURE CreateRoutingLine@165(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random value used so that the Next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithBOM@112(VAR Item@1000 : Record 27;VAR CompItem@1001 : Record 27) QuantityPer : Decimal;
    VAR
      BOMComponent@1002 : Record 90;
    BEGIN
      CreateAndUpdateItem(
        Item,Item."Replenishment System"::Assembly,Item."Reordering Policy"::Order,
        Item."Manufacturing Policy",'');
      CreateAndUpdateItem(
        CompItem,CompItem."Replenishment System"::Purchase,CompItem."Reordering Policy"::Order,
        CompItem."Manufacturing Policy",LibraryPurchase.CreateVendorNo);
      QuantityPer := LibraryRandom.RandInt(5);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,CompItem."No.",Item."No.",'',
        BOMComponent."Resource Usage Type",QuantityPer,TRUE); // Use Base Unit of Measure as True and Variant Code as blank.
    END;

    LOCAL PROCEDURE MockProdOrderComponent@183(ItemNo@1000 : Code[20];Qty@1001 : Decimal);
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        INIT;
        Status := Status::"Firm Planned";
        "Item No." := ItemNo;
        "Due Date" := WORKDATE;
        "Remaining Quantity" := Qty;
        "Remaining Qty. (Base)" := Qty;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindLastOperationNo@170(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE UpdateItemRoutingNo@20(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineQuantity@101(ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,ItemNo);
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrderWithLocationAndBin@12(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LoactionCode@1003 : Code[10];BinCode@1004 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandDec(10,2));
      ProductionOrder.VALIDATE("Location Code",LoactionCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE SelectRequisitionLine@64(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE PostPurchaseDocument@15(VAR PurchaseLine@1001 : Record 39;ToInvoice@1002 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,ToInvoice);
    END;

    LOCAL PROCEDURE CreateWorkCenter@168(VAR WorkCenter@1001 : Record 99000754);
    VAR
      GeneralPostingSetup@1000 : Record 252;
      Vendor@1006 : Record 23;
    BEGIN
      LibraryERM.FindGenPostingSetupWithDefVAT(GeneralPostingSetup);
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      LibraryPurchase.CreateSubcontractor(Vendor);
      WorkCenter.VALIDATE("Subcontractor No.",Vendor."No.");
      WorkCenter.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      WorkCenter.MODIFY(TRUE);

      // Calculate calendar.
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
    END;

    LOCAL PROCEDURE AcceptActionMessage@42(VAR RequisitionLine@1002 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInDecimalRange(10,20,2));
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectPurchaseOrderLine@22(VAR PurchaseLine@1000 : Record 39;No@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CalculateSubcontractOrder@23(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);
    END;

    LOCAL PROCEDURE CarryOutActionMessageSubcontractWksh@100(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
      Vendor@1500000 : Record 23;
    BEGIN
      AcceptActionMessage(RequisitionLine,ItemNo);
      Vendor.GET(RequisitionLine."Vendor No.");
      LibraryPurchase.CreateSetupForSubContracting(Vendor);
      LibraryPlanning.CarryOutAMSubcontractWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@34(VAR Location@1004 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,FALSE,FALSE,FALSE,FALSE);
      Location.VALIDATE("Pick According to FEFO",FALSE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateItem@107(VAR Item@1000 : Record 27;ReplenishmentSystem@1004 : Option;ReorderingPolicy@1002 : Option;ManufacturingPolicy@1003 : Option;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Replenishment System",ReplenishmentSystem);
        VALIDATE("Reordering Policy",ReorderingPolicy);
        VALIDATE("Manufacturing Policy",ManufacturingPolicy);
        VALIDATE("Vendor No.",VendorNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithClosedBOMAndVersion@36(VAR Item@1002 : Record 27;VAR ProdBOMVersion@1003 : Record 99000779);
    VAR
      ChildItem@1001 : Record 27;
      ProdBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateItemWithProdBOM(Item,ChildItem);
      ProdBOMHeader.GET(Item."Production BOM No.");
      UpdateProductionBOMStatus(ProdBOMHeader,ProdBOMHeader.Status::Closed);

      CreateProductionBOMVersion(ProdBOMVersion,ProdBOMHeader,ChildItem."No.",ProdBOMHeader."Unit of Measure Code",1);
    END;

    LOCAL PROCEDURE GetRequiredDate@9(Days@1000 : Integer;IncludeAdditionalPeriod@1003 : Integer;RelativeDate@1001 : Date;SignFactor@1002 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to WorkDate.
      NewDate :=
        CALCDATE('<' + FORMAT(SignFactor * LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>',RelativeDate);
    END;

    LOCAL PROCEDURE UpdateProdOrderLineUnitOfMeasureCode@70(ItemNo@1000 : Code[20];UnitOfMeasureCode@1001 : Code[10]);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrderLineQty@148(ItemNo@1000 : Code[20];NewQty@1001 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        VALIDATE(Quantity,NewQty);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateRequisitionLineDueDateAndQuantity@76(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      NewDate@1002 : Date;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      NewDate := GetRequiredDate(10,0,RequisitionLine."Due Date",1);  // Due Date more than current Due Date on Requisition Line.
      RequisitionLine.VALIDATE("Due Date",NewDate);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyMultiLineRoutingSetup@25(VAR WorkCenter@1000 : Record 99000754;VAR RoutingHeader@1001 : Record 99000763;VAR RoutingLine@1005 : Record 99000764;VAR RoutingLine2@1006 : Record 99000764);
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      CreateRoutingLine(RoutingLine2,RoutingHeader,WorkCenter."No.");
      CertifyRouting(RoutingHeader);
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE CalculateSubcontractsWithProdOrderRoutingLine@39(ProductionOrderNo@1002 : Code[20];StartingDate@1006 : Date);
    VAR
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderRoutingLine.SETRANGE("Starting Date",StartingDate);
      LibraryManufacturing.CalculateSubcontractOrderWithProdOrderRoutingLine(ProdOrderRoutingLine);
    END;

    LOCAL PROCEDURE CreateSalesOrder@8(ItemNo@1003 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Value type important for Serial tracking.
    END;

    LOCAL PROCEDURE CarryOutActionMessage@94(ItemNo@1004 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      AcceptActionMessage(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@67(Item@1003 : Record 27);
    VAR
      ReqWkshTemplate@1002 : Record 244;
      RequisitionWkshName@1001 : Record 245;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name)
    END;

    LOCAL PROCEDURE CreateProductionBOMVersion@143(VAR ProductionBomVersion@1000 : Record 99000779;ProdBOMHeader@1004 : Record 99000771;ItemNo@1002 : Code[20];UoMCode@1003 : Code[10];QtyPer@1005 : Decimal);
    VAR
      ProdBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(ProductionBomVersion,ProdBOMHeader."No.",LibraryUtility.GenerateGUID,UoMCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProdBOMHeader,ProdBOMLine,ProductionBomVersion."Version Code",ProdBOMLine.Type::Item,ItemNo,QtyPer);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@53(VAR RequisitionWkshName@1001 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::Planning);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE FindSalesLine@40(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchLine@104(VAR PurchLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE("No.",ItemNo);
      PurchLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateSalesLineWithPurchasingCode@68(VAR SalesLine@1006 : Record 37;ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];DropShipment@1004 : Boolean);
    VAR
      Purchasing@1005 : Record 5721;
      Purchasing2@1003 : Record 5721;
    BEGIN
      CreatePurchasingCodeWithDropShipment(Purchasing);
      CreatePurchasingCodeWithSpecialOrder(Purchasing2);
      FindSalesLine(SalesLine,ItemNo);
      SalesLine.VALIDATE("Location Code",LocationCode);
      IF DropShipment THEN
        SalesLine.VALIDATE("Purchasing Code",Purchasing.Code)
      ELSE
        SalesLine.VALIDATE("Purchasing Code",Purchasing2.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithDropShipment@201(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithSpecialOrder@11(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetSalesOrderForDropShipmentAndCarryOutReqWksh@275(VAR SalesLine@1002 : Record 37);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RequisitionLine@1001 : Record 246;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName);
      GetSalesOrderDropShipment(SalesLine,RequisitionLine,RequisitionWkshName);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE GetSalesOrderForSpecialOrderAndCarryOutReqWksh@26(ItemNo@1003 : Code[20]);
    VAR
      RequisitionWkshName@1002 : Record 245;
      RequisitionLine@1001 : Record 246;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSpecialOrder(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CreateItemJournalLine@150(VAR ItemJournalLine@1005 : Record 83;EntryType@1002 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE UpdateInventory@146(ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithReceiptDate@60(VAR TransferHeader@1004 : Record 5740;ItemNo@1001 : Code[20];TransferFrom@1005 : Code[10];TransferTo@1006 : Code[10];Quantity@1002 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
      ReceiptDate@1008 : Date;
    BEGIN
      SelectTransferRoute(TransferFrom,TransferTo);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFrom,TransferTo,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      ReceiptDate := GetRequiredDate(10,0,WORKDATE,1);  // Transfer Line Receipt Date more than WORKDATE.
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectTransferRoute@95(TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10]);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      // If Transfer Not Found then Create it.
      IF NOT TransferRoute.GET(TransferFrom,TransferTo) THEN BEGIN
        LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
        TransferRoute.VALIDATE("In-Transit Code",LocationInTransit.Code);
        TransferRoute.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalculateRegenPlanForPlanningWorksheet@49(VAR Item@1001 : Record 27);
    VAR
      EndDate@1000 : Date;
    BEGIN
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);
    END;

    LOCAL PROCEDURE SelectTransferLine@62(VAR TransferLine@1000 : Record 5741;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenOrderPromisingPage@110(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeaderNo);
      SalesOrder.SalesLines.OrderPromising.INVOKE;  // Open OrderPromisingPageHandler.
    END;

    LOCAL PROCEDURE UpdateSalesLineShipmentDate@21(ItemNo@1001 : Code[20];ShipmentDate@1000 : Date);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,ItemNo);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemVendorNo@61(Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMStatus@156(VAR ProductionBOMHeader@1000 : Record 99000771;NewStatus@1001 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(CloseBOMVersionsQst);
      ProductionBOMHeader.VALIDATE(Status,NewStatus);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdBOMVersionStatus@158(VAR ProductionBOMVersion@1000 : Record 99000779;NewStatus@1001 : Option);
    BEGIN
      ProductionBOMVersion.VALIDATE(Status,NewStatus);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOut@75(Item@1000 : Record 27;StartDate@1002 : Date;EndDate@1003 : Date);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);
      SelectRequisitionLine(RequisitionLine,Item."No.");
      AcceptActionMessage(RequisitionLine,Item."No.");
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE AreSameMessages@29(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE CreateVendorFCY@32(VAR Vendor@1001 : Record 23);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemWithVendor@80(VAR Item@1001 : Record 27) : Code[10];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      CreateVendorFCY(Vendor);
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.MODIFY(TRUE);
      EXIT(Vendor."Currency Code");
    END;

    LOCAL PROCEDURE CreateFRQItem@38(VAR Item@1001 : Record 27);
    BEGIN
      // Create Fixed Reorder Quantity Item.
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculatePlanForReqWksh@44(Item@1004 : Record 27;ReqWkshTemplateName@1002 : Code[10];RequisitionWkshNameName@1003 : Code[10]);
    VAR
      StartDate@1000 : Date;
      EndDate@1001 : Date;
    BEGIN
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);  // Start Date less than WORKDATE.
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date more than WORKDATE.
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplateName,RequisitionWkshNameName,StartDate,EndDate);
    END;

    LOCAL PROCEDURE GetSalesOrderDropShipment@46(VAR SalesLine@1003 : Record 37;VAR RequisitionLine@1001 : Record 246;RequisitionWkshName@1002 : Record 245);
    VAR
      RetrieveDimensionsFrom@1000 : 'Item,Sales Line';
    BEGIN
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");
    END;

    LOCAL PROCEDURE CreateItemVendorWithVendorItemNo@78(VAR ItemVendor@1000 : Record 99;Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateItemVendor(ItemVendor,Item."Vendor No.",Item."No.");
      ItemVendor.VALIDATE("Vendor Item No.",Item."No.");
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionLine@71(VAR RequisitionLine@1000 : Record 246;ItemNo@1003 : Code[20];Type@1004 : Option);
    VAR
      ReqWkshTemplate@1002 : Record 244;
      RequisitionWkshName@1001 : Record 245;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,Type);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate.Name,RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRequisitionLineVendorNo@66(RequisitionLine@1000 : Record 246;VendorNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignTrackingOnSalesLine@90(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20];ItemTrackingMode@1002 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(TRUE);  // Boolean - TRUE used inside ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for Page Handler - ItemTrackingPageHandler.
      FindSalesLine(SalesLine,ItemNo);
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Sales Line using page - Item Tracking Lines.
    END;

    LOCAL PROCEDURE CalcNetChangePlanForPlanWksh@99(Item@1001 : Record 27);
    VAR
      EndDate@1000 : Date;
    BEGIN
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,EndDate,FALSE);
    END;

    LOCAL PROCEDURE UpdateItemManufacturingPolicy@105(VAR Item@1000 : Record 27;ManufacturingPolicy@1001 : Option);
    BEGIN
      Item.VALIDATE("Manufacturing Policy",ManufacturingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemLeadTimeCalculation@96(VAR Item@1001 : Record 27;LeadTimeCalculation@1002 : Text[30]);
    VAR
      LeadTimeCalculation2@1000 : DateFormula;
    BEGIN
      EVALUATE(LeadTimeCalculation2,LeadTimeCalculation);
      Item.VALIDATE("Lead Time Calculation",LeadTimeCalculation2);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSetup@157(VAR ParentItem@1002 : Record 27) : Code[20];
    VAR
      ChildItem@1000 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateLotForLotItem(ChildItem,ChildItem."Replenishment System"::Purchase);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      UpdateProductionBOMNoOnItem(ParentItem,ProductionBOMHeader."No.");
      EXIT(ChildItem."No.");
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1001 : Code[20]) QuantityPer : Decimal;
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      QuantityPer := LibraryRandom.RandInt(10);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",QuantityPer);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOrderTrackingPolicy@151(VAR Item@1000 : Record 27);
    BEGIN
      Item."Order Tracking Policy" := Item."Order Tracking Policy"::"Tracking Only";
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@118(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshForMultipleItems@122(ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      CalculateRegenPlanForPlanningWorksheet(Item);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderAsShip@114(ItemNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateSalesOrder(ItemNo,'');
      FindSalesOrderHeader(SalesHeader,ItemNo);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE FindShopCalendarWorkingDays@135(VAR ShopCalendarWorkingDays@1002 : Record 99000752;ShopCalendarCode@1001 : Code[10]);
    BEGIN
      ShopCalendarWorkingDays.SETRANGE("Shop Calendar Code",ShopCalendarCode);
      ShopCalendarWorkingDays.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesOrderHeader@124(VAR SalesHeader@1003 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,ItemNo);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
    END;

    LOCAL PROCEDURE FindValueEntry@149(VAR ValueEntry@1003 : Record 5802;ItemNo@1002 : Code[20]);
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateReleasedProdOrderFromSalesOrder@164(ItemNo@1002 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
      ProductionOrder@1001 : Record 5405;
      OrderType@1004 : 'ItemOrder,ProjectOrder';
    BEGIN
      CreateSalesOrder(ItemNo,'');
      FindSalesOrderHeader(SalesHeader,ItemNo);
      LibraryVariableStorage.Enqueue(ReleasedProdOrderCreated);
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ItemOrder);
    END;

    LOCAL PROCEDURE CreateWorkCenterWith2MachineCenters@141(VAR WorkCenter@1000 : Record 99000754;VAR MachineCenter@1001 : ARRAY [2] OF Record 99000758);
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter[1],WorkCenter."No.",1);
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter[1],CALCDATE('<-1W>',WORKDATE),WORKDATE);
      LibraryManufacturing.CreateMachineCenter(MachineCenter[2],WorkCenter."No.",1);
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter[2],CALCDATE('<-1W>',WORKDATE),WORKDATE);
    END;

    LOCAL PROCEDURE CreateSubContractingSetupWithItemBOMLocation@1500001(VAR Item@1500000 : Record 27;VAR Location@1500004 : Record 14;VAR WorkCenter@1500006 : Record 99000754) : Code[20];
    VAR
      RoutingHeader@1500003 : Record 99000763;
      ProductionBOMHeader@1500005 : Record 99000771;
      Item2@1500001 : Record 27;
    BEGIN
      CreateAndUpdateItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::Order,
        Item."Manufacturing Policy"::"Make-to-Order",'');
      CreateAndUpdateItem(
        Item2,Item2."Replenishment System"::Purchase,Item2."Reordering Policy"::Order,
        Item2."Manufacturing Policy"::"Make-to-Order",'');
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.");
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
      CreateRoutingSetup(WorkCenter,RoutingHeader);
      UpdateItemRoutingNo(Item,RoutingHeader."No.");
      Item.VALIDATE(Subcontracting,TRUE);
      Item.VALIDATE("Sub. Comp. Location",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      Item.MODIFY(TRUE);
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE CreateAndPostSubContractingDocument@1500003(VAR WorkCenter@1500002 : Record 99000754;ItemCode@1500000 : Code[20];LocationCode@1500001 : Code[10]);
    VAR
      ProductionOrder@1500004 : Record 5405;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      CreateAndRefreshReleasedProductionOrderWithLocationAndBin(ProductionOrder,ItemCode,LocationCode,'');
      CalculateSubcontractOrder(WorkCenter);
      CarryOutActionMessageSubcontractWksh(ItemCode);
      FindPurchLine(PurchaseLine,ItemCode);
      UpdateAndSendSubConPurchaseDocument(PurchaseLine,ProductionOrder.Quantity);
      UpdateAndReceiveSubConPurchaseDocument(PurchaseLine);
    END;

    LOCAL PROCEDURE UpdateAndSendSubConPurchaseDocument@1500020(VAR PurchaseLine@1500000 : Record 39;Quantity@1500001 : Decimal);
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.VALIDATE("Deliver Comp. For",Quantity);
      PurchaseLine.VALIDATE("Delivery Challan Date",WORKDATE);
      PurchaseLine.VALIDATE(SubConSend,TRUE);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE(Subcontracting,TRUE);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      PurchaseHeader.MODIFY(TRUE);
      COMMIT;
      CODEUNIT.RUN(CODEUNIT::"Subcontracting Post",PurchaseLine);
    END;

    LOCAL PROCEDURE UpdateAndReceiveSubConPurchaseDocument@1500027(VAR PurchaseLine@1500000 : Record 39);
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      PurchaseLine.VALIDATE(SubConReceive,TRUE);
      PurchaseLine.MODIFY(TRUE);
      COMMIT;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.SetSubConReceiptPostingDate(CALCDATE('<2D>',WORKDATE));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE VerifyItemAvailabilityByPeriod@131(Item@1004 : Record 27;ScheduledRcpt@1002 : Decimal;ScheduledRcpt2@1001 : Decimal;ProjAvailableBalance@1003 : Decimal);
    VAR
      ItemCard@1005 : TestPage 30;
      ItemAvailabilityByPeriod@1000 : TestPage 157;
    BEGIN
      ItemCard.OPENVIEW;
      ItemCard.GOTORECORD(Item);
      ItemAvailabilityByPeriod.TRAP;
      ItemCard."Page Item Availability by Periods".INVOKE;

      ItemAvailabilityByPeriod.ItemAvailLines.PREV;
      ItemAvailabilityByPeriod.ItemAvailLines.ScheduledRcpt.ASSERTEQUALS(ScheduledRcpt);
      ItemAvailabilityByPeriod.ItemAvailLines.NEXT;
      ItemAvailabilityByPeriod.ItemAvailLines.ScheduledRcpt.ASSERTEQUALS(ScheduledRcpt2);
      ItemAvailabilityByPeriod.ItemAvailLines.ProjAvailableBalance.ASSERTEQUALS(ProjAvailableBalance);
      ItemAvailabilityByPeriod.CLOSE;
    END;

    LOCAL PROCEDURE VerifyItemAvailabilityByLocation@130(Item@1001 : Record 27;LocationCode@1004 : Code[10];ProjAvailableBalance@1002 : Decimal);
    VAR
      ItemCard@1003 : TestPage 30;
      ItemAvailabilityByLocation@1000 : TestPage 492;
    BEGIN
      // Quantity assertions for the Item availability by location window
      ItemCard.OPENVIEW;
      ItemCard.GOTORECORD(Item);
      ItemAvailabilityByLocation.TRAP;
      ItemCard."Page Item Availability by Location".INVOKE;

      ItemAvailabilityByLocation.FILTER.SETFILTER("No.",Item."No.");
      ItemAvailabilityByLocation.ItemAvailLocLines.FILTER.SETFILTER(Code,LocationCode);
      ItemAvailabilityByLocation.ItemAvailLocLines.FIRST;

      ItemAvailabilityByLocation.ItemAvailLocLines.ProjAvailableBalance.ASSERTEQUALS(ProjAvailableBalance);
      ItemAvailabilityByLocation.CLOSE;
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@3(RequisitionLine@1002 : Record 246;ProductionOrder@1001 : Record 5405;WorkCenter@1000 : Record 99000754);
    BEGIN
      RequisitionLine.TESTFIELD("Prod. Order No.",ProductionOrder."No.");
      RequisitionLine.TESTFIELD(Quantity,ProductionOrder.Quantity);
      RequisitionLine.TESTFIELD("Work Center No.",WorkCenter."No.");
      RequisitionLine.TESTFIELD("Vendor No.",WorkCenter."Subcontractor No.");
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithOperationNoForSubcontractingWorksheet@86(ProductionOrder@1002 : Record 5405;WorkCenter@1004 : Record 99000754;No@1001 : Code[20];OperationNo@1000 : Code[10]);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Operation No.",OperationNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("No.",No);
      VerifyRequisitionLine(RequisitionLine,ProductionOrder,WorkCenter);
    END;

    LOCAL PROCEDURE VerifyPurchaseShippingDetails@69(ItemNo@1003 : Code[20];ShipToCode@1004 : Code[10];ShipToAddress@1002 : Text[50]);
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.TESTFIELD("Ship-to Address",ShipToAddress);
      PurchaseHeader.TESTFIELD("Ship-to Code",ShipToCode);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineEntries@57(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];ActionMessage@1003 : Option;DueDate@1006 : Date;OriginalQuantity@1004 : Decimal;Quantity@1005 : Decimal;RefOrderType@1007 : Option);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      RequisitionLine.TESTFIELD("Action Message",ActionMessage);
      RequisitionLine.TESTFIELD("Original Quantity",OriginalQuantity);
      RequisitionLine.TESTFIELD("Due Date",DueDate);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Ref. Order Type",RefOrderType);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineCurrencyCode@43(ItemNo@1002 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyPurchaseShipmentMethod@48(DocumentNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader@1002 : Record 38;
      Vendor@1005 : Record 23;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
      SelectPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader.TESTFIELD("Shipment Method Code",Vendor."Shipment Method Code");
    END;

    LOCAL PROCEDURE VerifyRequisitionLineBatchAndTemplateForItem@73(ItemNo@1003 : Code[20];WorksheetTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("Worksheet Template Name",WorksheetTemplateName);
      RequisitionLine.TESTFIELD("Journal Batch Name",JournalBatchName);
    END;

    LOCAL PROCEDURE VerifyTrackingOnRequisitionLine@82(ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      LibraryVariableStorage.Enqueue(FALSE);  // Boolean - FALSE used inside ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue Quantity(Base) for Item Tracking Lines Page.
      SelectRequisitionLine(RequisitionLine,ItemNo);
      REPEAT
        RequisitionLine.TESTFIELD(Quantity,Quantity);
        RequisitionLine.OpenItemTrackingLines;
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemTrackingLineQty@81(ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingQuantity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TrackingQuantity);
      ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(TrackingQuantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithSerialTracking@89(ItemNo@1001 : Code[20];TotalQuantity@1002 : Integer);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      VerifyTrackingOnRequisitionLine(ItemNo,1);  // Quantity value required on Item Tracking Lines because Serial No tracking assigned on Requisition Lines.
      Assert.AreEqual(TotalQuantity,RequisitionLine.COUNT,RequisitionLinesQuantity);  // When Serial No. Tracking is assigned then total No of Requisition Lines equals Total Quantity.
    END;

    LOCAL PROCEDURE VerifyRequisitionWithTracking@91(ItemTrackingMode@1000 : ' ,Assign Lot No.,Assign Serial No.';ItemNo@1001 : Code[20];Quantity@1002 : Integer);
    BEGIN
      IF ItemTrackingMode = ItemTrackingMode::"Assign Lot No." THEN
        VerifyTrackingOnRequisitionLine(ItemNo,Quantity) // Lot Tracking.
      ELSE
        VerifyRequisitionLineWithSerialTracking(ItemNo,1);  // Quantity Value required for Serial Tracking.
    END;

    LOCAL PROCEDURE VerifyProductionForecastMatrixUneditable@83(ItemNo@1001 : Code[20]);
    VAR
      ProductionForecastMatrix@1000 : TestPage 9245;
    BEGIN
      // Check the fields are uneditable on the Production Forecast Matrix Page.
      ProductionForecastMatrix.OPENEDIT;
      ProductionForecastMatrix.FILTER.SETFILTER("No.",ItemNo);
      Assert.IsFalse(ProductionForecastMatrix."No.".EDITABLE,EditableError);
      Assert.IsFalse(ProductionForecastMatrix.Description.EDITABLE,EditableError);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineEndingTime@144(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20];EndingTime@1002 : Time);
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.TESTFIELD("Ending Time",EndingTime);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineStartingAndEndingTime@106(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      VerifyRequisitionLineEndingTime(RequisitionLine,ItemNo,ManufacturingSetup."Normal Ending Time");
      RequisitionLine.TESTFIELD("Starting Time",ManufacturingSetup."Normal Starting Time");
    END;

    LOCAL PROCEDURE VerifyRequisitionLineQuantity@109(ItemNo@1001 : Code[20];ActionMessage@1004 : Option;Quantity@1002 : Decimal);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.SETRANGE("Action Message",ActionMessage);
      RequisitionLine.FINDFIRST;
      Assert.AreEqual(Quantity,RequisitionLine.Quantity,RequisitionLineQtyErr);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineExistenceWithLocation@139(ItemNo@1001 : Code[20];LocationCode@1004 : Code[10];ReqLineExpectedTo@1002 : 'Not Exist,Exist');
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      Assert.AreEqual(
        ReqLineExpectedTo = ReqLineExpectedTo::"Not Exist",RequisitionLine.ISEMPTY,
        STRSUBSTNO(RequisitionLineExistenceErr,ReqLineExpectedTo,ItemNo,LocationCode));
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForTwoBatches@125(RequisitionWkshName@1001 : Code[10];RequisitionWkshName2@1002 : Code[10];ItemNo@1003 : Code[20];ProductionOrderNo@1004 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE("Journal Batch Name",RequisitionWkshName2);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        Assert.AreEqual(ProductionOrderNo,"Prod. Order No.",RequisitionLineProdOrderErr);

        SETRANGE("Journal Batch Name",RequisitionWkshName);
        Assert.IsTrue(ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,ItemNo));
      END;
    END;

    LOCAL PROCEDURE VerifyReservationEntryIsEmpty@145(SourceType@1000 : Integer;SourceSubtype@1001 : Option;SourceID@1002 : Code[20]);
    VAR
      ReservEntry@1003 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source ID",SourceID);
        Assert.IsTrue(ISEMPTY,ReservationEntryNotEmptyErr);
      END;
    END;

    LOCAL PROCEDURE VerifyOutputItemLedgerEntryPostingDate@1500035(ItemNo@1500000 : Code[20]);
    VAR
      ItemLedgerEntry@1500002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      ItemLedgerEntry.FINDLAST;
      Assert.AreEqual(CALCDATE('<2D>',WORKDATE),ItemLedgerEntry."Posting Date",PostingDateErr);
    END;

    [RequestPageHandler]
    PROCEDURE CalcRegenPlanReqPageHandler@137(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    BEGIN
      CalculatePlanPlanWksh.MPS.SETVALUE(TRUE);
      CalculatePlanPlanWksh.MRP.SETVALUE(TRUE);
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.Control16.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CalculatePlanPlanWksh.Item.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderPromisingPageHandler@113(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.CapableToPromise.INVOKE;  // Capable To Promise will generate a new Requisition Line for the demand.
      OrderPromisingLines.AcceptButton.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@87(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      AssignTracking@1003 : Variant;
      TrackingMode@1001 : Variant;
      ItemTrackingMode@1002 : ' ,Assign Lot No.,Assign Serial No.';
      AssignTracking2@1004 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(AssignTracking);
      AssignTracking2 := AssignTracking;  // Required for variant to boolean.
      IF AssignTracking2 THEN BEGIN
        LibraryVariableStorage.Dequeue(TrackingMode);
        ItemTrackingMode := TrackingMode;
        CASE ItemTrackingMode OF
          ItemTrackingMode::"Assign Lot No.":
            ItemTrackingLines."Assign Lot No.".INVOKE;
          ItemTrackingMode::"Assign Serial No.":
            ItemTrackingLines."Assign Serial No.".INVOKE;
        END;
        LibraryVariableStorage.Enqueue(AvailabilityWarningConfirmationMessage);  // Required inside ConfirmHandlerTRUE.
      END ELSE
        VerifyItemTrackingLineQty(ItemTrackingLines);  // Verify Quantity(Base) on Tracking Line.
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PlanningErrorLogPageHandler@159(VAR PlanningErrorLog@1000 : TestPage 5430);
    BEGIN
      PlanningErrorLog."Item No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@116(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(FALSE);
      EnterQuantityToCreate.OK.INVOKE;  // Assign Serial Tracking on Enter Quantity to Create page.
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityLineListPageHandler@173(VAR ItemAvailabilityLineList@1000 : TestPage 99000902);
    BEGIN
      ItemAvailabilityLineList.Name.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      ItemAvailabilityLineList.Quantity.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      ItemAvailabilityLineList.Quantity.DRILLDOWN;
    END;

    [ModalPageHandler]
    PROCEDURE ProdOrderComponentPageHandler@176(VAR ProdOrderCompLineList@1000 : TestPage 5407);
    BEGIN
      ProdOrderCompLineList."Item No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      ProdOrderCompLineList."Remaining Quantity".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    VAR
      ExpectedMsg@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMsg);
      Assert.IsTrue(AreSameMessages(Message,ExpectedMsg),Message);
    END;

    [MessageHandler]
    PROCEDURE SubConMessageHandler@1500018(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTRUE@88(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(ConfirmMessage,ExpectedMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE BlindConfirmHandler@175(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckProdOrderStatusPageHandler@108(VAR CheckProdOrderStatus@1000 : TestPage 99000833);
    BEGIN
      CheckProdOrderStatus.Yes.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test for Planning using different Worksheets:

       1. Create Item. Create Routing and update it on Item. Create and refresh Released Production Order. Calculate Subcontracts from subcontracting worksheet. Verify Subcontracting Worksheet for Production Order, Quantity and Vendor No.
       2. Create Item. Create Routing and update it on Item. Calculate Subcontracts from Subcontracting worksheet and Carry out Action Message. Post Purchase Order created after carry out for Receive and invoice.
          Verify Inventory of Item is updated after Purchase order posting for Item.
       3. Create Item. Create Routing and update it On Item. Create and refresh Released Production Order. Calculate Subcontracts from subcontracting worksheet
          Carry out Action Message for subcontracting worksheet. Verify Location and Bin of Released Production order is also updated on Purchase Order created after carry out.
       4. Create Item. Create Routing and update it on Item. Create and refresh Released Production Order. Calculate Subcontracts from subcontracting worksheet. Update Due Date on Requisition Line.
          Carry Out Action Message for Subcontracting worksheet. Verify updated Due Date and quantity of Requisition Line is also updated as Expected Receipt Date and quantity of Purchase Order created after carry out.
       5. Create Item. Create Routing and update it On Item. Create additional Base Unit of Measure for Item. Create and refresh Released Production Order. Update new Unit of Measure on Production Order Line.
          Calculate Subcontracts from subcontracting worksheet. Carry out Action Message for subcontracting worksheet. Verify updated Unit of Measure of Released Production Order is also updated on Purchase Order created after carry out.
       6. Create Item. Create Routing and update on Item. Create and refresh Released Production Order. Calculate Subcontracts from subcontracting worksheet With Production Order Routing Line.
          Verify that no Requisition line is created for Subcontracting Worksheet.
       7. Create Item. Create Multi Line Routing and update on Item. Create and refresh Released Production Order. Calculate Subcontracts from subcontracting worksheet.
          Calculate Subcontracts from subcontracting worksheet. Verify Subcontracting Worksheet for Production Order, Quantity, Work Center Subcontractor and Operation No.
       8. Create Order Item, without updating vendor No on it. Create Sales Order. Calculate Plan for Planning Worksheet. Carry out Action Message for planning worksheet.
          Verify error - Vendor No. must have a value in Requisition Line for carry out.
       9. Create Order Item, without updating vendor No on it. Create Sales Order. Calculate Plan for Requisition Worksheet. Verify error - Vendor No. must have a value in Requisition Line for carry out.
      10. Create Item. Create Sales Order with Ship to Address and Purchasing Code Drop Shipment. Get Sales Order From Drop Shipment on Requisition Worksheet and Carry out.
          Verify Ship to Address of Sales Order is also updated on Purchase Order created after Carry Out.
      11. Create Item. Create Sales Order with Ship to Address and Purchasing Code Special Order. Get Sales Order From Special Order on Requisition Worksheet and Carry out.
          Verify Ship to Address of Sales Order is also updated on Purchase Order created after Carry Out.
      12. Create Item without Reordering Policy. Update Inventory. Create and Post Transfer Order.  Calculate Plan for Planning Worksheet. Verify that no Requisition line is created for Requisition Worksheet.
      13. Create Lot for Lot Item with Replenishment System Production Order. Create Sales Order. Calculate Capable to Promise to create Requisition Worksheet Line.
          Verify Requisition Line with Action Message,Quantity and Due Date after Calculating Capable To Promise.
      14. Create Lot for Lot Item. Update Inventory. Create Transfer Order. Calculate Plan for Requisition Worksheet. Verify Planning Worksheet for Location, Due Date, Action Message and Quantity.
      15. Create Order Item with Vendor No. Create Sales Order. Calculate Plan for Planning Worksheet and Carry Out. Update Shipment Date of Sales Order after Carry Out.
          Calculate Plan for Planning Worksheet again after Carry Out. Verify requisition Line is created with Reschedule Action Message.
      16. Create Order Item. Create Vendor with Currency Code. Update Vendor on Item. Create Sales Order. Calculate Regenerative Plan and Carry Out for Planning Worksheet.
          Verify after Carry Out, Purchase Order is created successfully with Vendor having Currency Code.
      17. Create Order Item. Create Vendor with Currency Code. Update Vendor on Item. Create Sales Order. Calculate Plan for Requisition Worksheet. Carry Out Action Message for Requisition Worksheet.
          Verify after Carry Out, Purchase Order is created successfully with Vendor having Currency Code.
      18. Create Item. Create Sales Order and Purchasing Code Special Order. Get Sales Order From Special Order on Requisition Worksheet and Carry out.
          Verify Shipment Method Code of Sales Order is also updated on Purchase Order created after Carry Out.
      19. Create multiple Fixed Reorder Quantity Items. Create Sales Order with Purchasing Code Drop Shipment. Calculate Plan and Get Sales Order for Drop Shipment for same Requisition Worksheet.
          Carry Out for second Line created after Get Sales Order. Verify after Carry Out for second Item, Lines for first Items are still on same Worksheet.
      20. Create Item. Update Item Vendor of Item with Vendor Item No. Create Requisition Line for Planning Worksheet. Update Requisition Line with Vendor No. Verify Requisition Line is
          automatically updated with Vendor Item No. of Item Vendor.
      21. Create Item. Update Item Vendor of Item with Vendor Item No. Create Requisition Line for Requisition Worksheet. Update Requisition Line with Vendor No. Verify Requisition Line is
          automatically updated with Vendor Item No. of Item Vendor.
      22. Create Lot For Lot Item with Lot specific tracking. Create Sales Order. Assign Lot specific Tracking to Sales Line. Calculate Net Change Plan and Verify Quantity and Tracking is assigned on Requisition Line.
      23. Create Lot For Lot Item with Serial specific tracking. Create Sales Order. Assign SN specific Tracking to Sales Line. Calculate Net Change Plan and Verify Quantity and Tracking is assigned on Requisition Line.
      24. Create Lot For Lot Item. Open Production Forecast Matrix page and  Verify Item No and Description are uneditable.
      25. Create Lot For Lot Item. Create Sales Order. Open Order Promising Lines Page and Invoke Capable to Promise. Verify Reserved Quantity is updated on Sales Line.
      26. Create Lot For Lot Item and Update Lead Time Calculation with Manufacturing Policy Make to Stock. Create Sales Order. Open Order Promising Lines Page and Invoke Capable to Promise. Verify Due Date on Requisition Line.
      27. Create Lot For Lot Item and Update Lead Time Calculation with Manufacturing Policy Make to Order. Create Sales Order. Open Order Promising Lines Page and Invoke Capable to Promise. Verify Due Date on Requisition Line.
      28. Create Lot For Lot Parent and Child Item. Create Routing and update on Item. Create and Post Sales Order as Ship. Calculate Plan for Planning Worksheet for Parent and child Item. Verify Starting Time and End Time on Planning Worksheet
          is according to Shop Calendar and Manufacturing Setup.
      29. Create Lot For Lot Parent and Child Item. Create Routing and update on Item. Create Released Production Order from Sales Order. Calculate Plan for Planning Worksheet for Parent and child Item.
          Verify Starting Time and End Time on Planning Worksheet is according to Manufacturing Setup.
      30. Create Item with Routing. Calculate Subcontracts from Subcontracting worksheet and Carry out Action Message. Verify "Qty. on Purch. Order" on Item Card,
          the value of Projected Available Balance on Item Availability By Location Page, Scheduled Receipt and Projected Available Balance on Item Availability By Period Page.
      31. Test and verify Quantity for production component Item on Requisition Line is correct after replanning.
      32. Test and verify Quantity for assembly component Item on Requisition Line is correct after replanning.
      33. When Item does not have SKUs and Location Mandatory is FALSE and Components at Location is empty, Item is replenished as Lot-for-Lot and other planning parameters are ignored for non-empty Location.

          Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
         CalcSubcontractOrderForReleasedProdOrder                                                                    127526
         CalcSubcontractOrderAndCarryOutForReleasedProdOrder                                                         127526
         CalcSubcontractOrderForReleasedProdOrderWithBinAndCarryOutForPurchase                                       127537
         CalcSubcontractOrderAndCarryOutWithNewDueDateAndQuantity                                                    143072
         CalcSubcontractOrderAndCarryOutForReleasedProdOrderWithUpdatedUOM                                           143072
         CalcSubcontractOrderWithProdOrderRoutingLineForReleasedProdOrder                                            127662
         CalcSubcontractOrderWithMultiLineRoutingForReleasedProdOrder                                                129147
         CalcPlanReqWkshWithCarryOutOrderItemVendorNoError                                                           270006
         CalcRegenPlanWithCarryOutOrderItemVendorNoError                                                             270006

         Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                               TFS ID
        --------------------------------------------------------------------------------------------------------------------
         PurchaseShippingDetailsWithDropShipmentAndCarryOutOnReqWksh                                                 251841
         PurchaseShippingDetailsWithSpecialOrderAndCarryOutOnReqWksh                                                 251841

         Covers Test cases:
        ----------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                                 TFS ID
        ----------------------------------------------------------------------------------------------------------------------
          CalcRegenPlanForTranferShipWithoutReorderingPolicy                                                           276621
          RequisitionLineWhenCalculateCapableToPromiseReplenishProdOrderLFLItem                                        143090
          CalcPlanReqWkshForTransferLFLItem                                                                            127674
          CalcRegenPlanTwiceCarryOutAndNewShipmentDateOnDemand                                                         123291

         Covers Test cases:
        ----------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                                 TFS ID
        ----------------------------------------------------------------------------------------------------------------------
         CalcRegenPlanAndCarryOutOrderItemWithVendorHavingCurrency                                                    270006
         CalcPlanAndCarryOutReqWkshOrderItemWithVendorHavingCurrency                                                  270006
         PurchaseShipmentMethodForSpecialSalesOrderAndCarryOutReqWksh                                                 255853

         Covers Test cases:
        ----------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                                 TFS ID
        ----------------------------------------------------------------------------------------------------------------------
         RequisitionLineAfterCalcPlanAndCarryOutWithGetSalesOrderAndDropShipmentFRQItem                                270573

         Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                               TFS ID
        --------------------------------------------------------------------------------------------------------------------
         VendorItemNoOnRequisitionWorksheetWithVendorNo                                                              289056
         VendorItemNoOnPlanningWorksheetWithVendorNo                                                                 289056
         CalcNetChangePlanForSalesWithLotTrackingLFLItem                                                             126569
         CalcNetChangePlanForSalesWithSerialTrackingLFLItem                                                          126569

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        ItemWithDescriptionNotEditableForProdForecastMatrixPage                                                   245863
        ReservedQuantityOnSalesAfterCapableToPromiseLFLItem                                                       143082
        DueDateOnReqWkshWithCapableToPromiseMakeToStockLFLItem                                                    142960
        DueDateOnReqWkshWithCapableToPromiseMakeToOrderLFLItem                                                    142960

         Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanWithSalesShipForStartingEndingTimeLFLItems                                                   243107
        CalcRegenPlanWithProdOrderFromSalesForStartingEndingTimeLFLItems                                          243107

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcSubcontractOrderAndCarryOutForReleasedProdOrderWithLocation                                           57950

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanAfterUpdateQtyOnSalesOrderLineWithProdItem                                                   89430
        CalcRegenPlanAfterUpdateQtyOnSalesOrderLineWithAssemblyItem                                               89430

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcChangeSubcontractOrderWithExistingPurchase                                                            374882
    }
    END.
  }
}

