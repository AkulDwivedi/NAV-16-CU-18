OBJECT Codeunit 136102 Service Contracts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
            InitialWorkDate := WORKDATE;
          END;

  }
  CODE
  {
    VAR
      ServiceContractHeader2@1012 : Record 5965;
      Assert@1006 : Codeunit 130000;
      LibraryService@1010 : Codeunit 131902;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryERM@1094 : Codeunit 131300;
      LibrarySales@1991 : Codeunit 130509;
      LibraryInventory@1032 : Codeunit 132201;
      LibraryRandom@1024 : Codeunit 130440;
      LibraryVariableStorage@1028 : Codeunit 131004;
      LibraryDimension@1043 : Codeunit 131001;
      LibrarySetupStorage@1040 : Codeunit 131009;
      SignServContractDoc@1034 : Codeunit 5944;
      ServiceGetShipment@1035 : Codeunit 5932;
      isInitialized@1001 : Boolean;
      ServiceContractErrorServTierErr@1009 : TextConst 'ENU="Change Status must be equal to ''Open''  in Service Contract Header: Contract Type=%1, Contract No.=%2. Current value is ''Locked''."';
      UnknownErr@1008 : TextConst 'ENU=Unknown error.';
      NoServiceLineServiceTierMsg@1005 : TextConst 'ENU=There is no Service Contract Line within the filter.  Filters: Contract No.: %1';
      CopyDocumentErr@1004 : TextConst 'ENU=You can only copy the document with the same Customer No..';
      CustomerNotBlankErr@1003 : TextConst 'ENU=Customer No. must not be blank in Service Contract Header %1';
      ServiceCtrctTemplateExistErr@1002 : TextConst '@@@="%1= field value,%2 = Filed Value,%3 = Field Value";ENU="The %1 must not exist. Identification field and value: %2=''%3''."';
      ServiceCtrctHeaderExistErr@1000 : TextConst '@@@="%1= Field value,%2 = field Caption,%3= Field Value,%4 = Field Caption,%5 = Field Value";ENU="The %1 must not exist. Identification field and value: %2=''%3'', %4=''%5''."';
      InvoiceCreationMsg@1014 : TextConst 'ENU=Do you want to create an invoice';
      ServiceLedgerEntryErr@1013 : TextConst 'ENU=No. of Records in %1 must be equal to %2';
      EntryMustExistErr@1018 : TextConst 'ENU=%1 must exist for Contract: %2.';
      InvoiceCreatedMsg@1011 : TextConst 'ENU=%1 invoice was created.';
      OrderCreationMsg@1017 : TextConst 'ENU=1 service order was created.';
      AccountFilterMsg@1022 : TextConst '@@@="%1=Non-Prepaid Contract Acc.Field;%2=Prepaid Contract Acc.Field";ENU=%1|%2';
      InitialWorkDate@1025 : Date;
      UnitCostErr@1021 : TextConst 'ENU=Unit Cost(LCY) must not have Zero Value.';
      ServiceEntriesExistForServiceLineErr@1015 : TextConst 'ENU=You cannot modify the service line because one or more service entries exist for this line.';
      DimensionNotChangeableServiceEntriesExistErr@1016 : TextConst 'ENU=You cannot change the dimension because there are service entries connected to this line.';
      DimensionEditableErr@1027 : TextConst 'ENU=Dimension Code field must be editable.';
      DimensionNonEditableErr@1020 : TextConst 'ENU=Dimension Code field must not be editable.';
      ServiceTemplateMsg@1029 : TextConst 'ENU=Do you want to create the contract using a contract template?';
      ServiceContractErr@1033 : TextConst 'ENU=%1 in Service Contract is not correct.';
      GLEntryErr@1036 : TextConst 'ENU=%1 in GL Entry is not correct.';
      GLEntriesExistsErr@1037 : TextConst 'ENU=G/L entries exists.';
      IncorrectAmountPerPeriodErr@1038 : TextConst 'ENU=Incorrect Amount Per Period.';
      IncorrectInvAmountErr@1039 : TextConst 'ENU=Incorrect Invoice Amount.';
      ServiceDocLinkNotFoundErr@1042 : TextConst 'ENU=%1 is missing a link.';
      ServiceLineAmountErr@1041 : TextConst 'ENU=Incorrect Service Line Amount.';
      PositiveValueErrorErr@1044 : TextConst 'ENU=Line Value must not be';
      PositiveValueErrorCodeErr@1045 : TextConst 'ENU=NCLCSRTS:TableErrorStr';
      CannotCreateServiceOrderMsg@1026 : TextConst '@@@=%1 - Contract No. %2 - Customer No. %3 - Ship-to Code;ENU=A service order cannot be created for contract no. %1 because customer no. %2 does not have a %3.';
      ZeroOrderCreatedMsg@1023 : TextConst 'ENU=0 service order was created.';
      CrLimitWarningMsg@1019 : TextConst 'ENU=The update has been interrupted to respect the warning.';

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ChangeCustomerServiceContract@70();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Covers document number TC0134 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks to Change customer No. on Service Contract.

      // 1. Setup: create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Change Customer No. in Service Contract.
      CustomerNo := ChangeCustomerNo(ServiceContractHeader);

      // 3. Verify: Check that Customer No. is changed in Service Contract.
      CheckChangeCustomerNo(ServiceContractHeader,CustomerNo);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE NewLineOnServiceContract@69();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      LockOpenServContract@1001 : Codeunit 5943;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0135 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks to New Line field is Set to true after Creating New Line in Service Contract Line.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Open and create New Service Contract Line in Service Contract.
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);

      // 3. Verify: Check that "New Line" field is set to true after creating new line in Service Contract Line.
      ServiceContractLine.TESTFIELD("New Line",TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE DeleteContractLineIfLocked@68();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0136 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Error on Deletion of Line while change status is locked on Service Contract Header.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Check Service Contract Line deletion error On Locked change status.
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ASSERTERROR ServiceContractLine.DELETEALL(TRUE);
      Assert.AreEqual(
        STRSUBSTNO(ServiceContractErrorServTierErr,ServiceContractLine."Contract Type",ServiceContractLine."Contract No."),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE QtyOnSeviceContractInvoice@67();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0137 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Quantity on Service Invoice is same after Creation of Service Contract Invoice.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Check that Quantity on Service Invoice is same after Creation of Service Contract Invoice.
      CheckInvoiceQuantity(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE CreditMemofromServiceContract@66();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Covers document number TC0138 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Customer No. on Service Credit Memo Header is the same after creating Service Credit Memo from Service
      // Contract's Customer No. field.
      // [SCENARIO 224033] Fields "Bill-to Contact No." and "Bill-to Contact" must be copied from Service Contract to Service Credit Memo by function ServContractManagement.CreateServHeader

      // 1. Setup: Create and Sign Service Contract and Set Workdate.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Post Service Invoice and Create Service Credit Memo from Service Contract.
      COMMIT;
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      REPORT.RUNMODAL(REPORT::"Batch Post Service Invoices",FALSE,TRUE,ServiceHeader);
      ServiceContractHeader.FIND;
      ModifyServiceContractStatus(ServiceContractHeader);
      CreateServiceCreditMemo(ServiceContractHeader."Contract No.",WORKDATE);

      // 3. Verify: Check that the Customer No. on Service Credit Memo Header is the same after creating Service Credit Memo from Service
      // Contract's Customer No. field.
      CheckServiceCreditMemo(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE CustomerOnContractInvoice@65();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Covers document number TC0139,CU-5944-8 - refer to TFS ID 21730,172909.
      // [SCENARIO] The Test Case checks Customer No. on Service Contract Invoice and the creation of Service Invoice.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Contract Invoice.
      CreateServiceContractInvoice(ServiceContractHeader);

      // 3. Verify: Check Customer No. on Service Contract Invoice and the creation of Service Invoice.
      CheckCustomerNoOnInvoice(ServiceContractHeader);
      VerifyServiceInvoice(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE OrderDateServiceOrderContract@64();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0140 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks "Order Date" matched with Service Contract's "First Invoiced Date" field on Service Contract Order.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Contract Order.
      CreateServiceContractOrder(ServiceContractHeader);

      // 3. Verify: Verify that "Order Date" matched with Service Contract's "First Invoiced Date" field on Service Contract Order.
      CheckOrderDate(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE UpdatedPriceonServiceContract@63();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      SignServContractDoc@1002 : Codeunit 5944;
      PricePercentage@1001 : Decimal;
    BEGIN
      // Covers document number TC0141 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks updated Price percentage on Service Contract.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Starting Date",LibraryRandom.RandDateFrom(CALCDATE('<-CM>',WORKDATE),5));
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Update Contract Price in Service Contract.
      PricePercentage := UpdateContractPrice(ServiceContractHeader);

      // 3. Verify: Check that updated Price percentage on Service Contract.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.TESTFIELD("Last Price Update %",PricePercentage);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE PrepaidTransactionOnContract@62();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceLedgerEntry@1001 : Record 5907;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0142 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks "Moved from Prepaid Acc." set to TRUE in Service Ledger Entry.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Check "Moved from Prepaid Acc." set to TRUE in Service Ledger Entry.
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("Moved from Prepaid Acc.",TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE RemoveContractLineOnContract@61();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Covers document number TC0143 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Removed Contract Line does not exist after deletion.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;

      // 2. Exercise: Post and remove the Contract Line from Service Contract.
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      REPORT.RUNMODAL(REPORT::"Batch Post Service Invoices",FALSE,TRUE,ServiceHeader);
      ServiceContractHeader.FIND;
      ModifyServiceContractStatus(ServiceContractHeader);
      RemoveContractLine(ServiceContractHeader."Contract No.");

      // 3. Verify: Check that Removed Contract Line does not exist after deletion.
      Assert.IsFalse(
        ServiceContractLine.GET(ServiceContractLine."Contract Type",ServiceContractLine."Contract No.",ServiceContractLine."Line No."),
        STRSUBSTNO(NoServiceLineServiceTierMsg,ServiceContractLine."Contract No."));
    END;

    [Test]
    PROCEDURE CreateServiceAccountGroup@60();
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      // Covers document number TC0071 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Service Account Group is created from ServiceAccGroup function.

      // Setup.
      Initialize;

      // 2. Exercise: Create Service Account Group.
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);

      // 3. Verify: Check that Service Account Group is created from ServiceAccGroup function.
      ServiceContractAccountGroup.GET(ServiceContractAccountGroup.Code);

      // 4. Cleanup
      ServiceContractAccountGroup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DeleteServiceContractTemplate@59();
    VAR
      ServiceContractTemplate@1001 : Record 5968;
    BEGIN
      // Covers document number TC0072 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Service Contract Template does not Exist after deletion.

      // 1. Setup: Create Service Contract Template.
      Initialize;
      CreateServiceContractTemplate(ServiceContractTemplate);

      // 2. Exercise: Delete newly created Service Contract Template.
      ServiceContractTemplate.DELETE(TRUE);

      // 3. Verify: Check that Service Contract Template does not Exist after deletion.
      Assert.IsFalse(
        ServiceContractTemplate.GET(ServiceContractTemplate."No."),
        STRSUBSTNO(ServiceCtrctTemplateExistErr,ServiceContractTemplate.TABLECAPTION,ServiceContractTemplate.FIELDCAPTION("No."),
          ServiceContractTemplate."No."));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractTemplateFields@58();
    VAR
      ServiceContractTemplate@1002 : Record 5968;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // Covers document number TC0072 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks After creating Service Contract Template all fields TRUE automatic in Service Contract.

      // 1. Setup: Create New Service Contract Template.
      Initialize;
      CreateServiceContractTemplate(ServiceContractTemplate);

      // 2. Exercise: Create and Modify Service Contract Header and Service Contract Line.
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 3. Verify: Check that Service Contract Template set fields TRUE in Service Contract.
      ServiceContractHeader.TESTFIELD(Prepaid,TRUE);
      ServiceContractHeader.TESTFIELD("Combine Invoices",TRUE);
      ServiceContractHeader.TESTFIELD("Contract Lines on Invoice",TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractQuotetLineValue@57();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // Covers document number TC0073 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Service Contract Quote Line is same as Service Contract Quote Header.

      // Setup.
      Initialize;

      // 2. Exercise: Create Service Contract Quote Header and Service Contract Quote Line.
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 3. Verify: Check that Service Contract Quote Line is same as Service Contract Quote Header.
      CheckSrvcCntractQuoteLinValues(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE SignedServiceContractQuote@56();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // Covers document number TC0073 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Service Contract Quote does not exist after Signing Service Contract Quote.

      // 1. Setup: Create Service Contract Quote Header and Service Contract Quote Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Service Contract Quote.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // 3. Verify: Check that the Service Contract Quote does not exist after Signing Service Contract Quote.
      Assert.IsFalse(
        ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No."),
        STRSUBSTNO(ServiceCtrctHeaderExistErr,ServiceContractHeader.TABLECAPTION,ServiceContractHeader.FIELDCAPTION("Contract Type"),
          ServiceContractHeader."Contract Type",ServiceContractHeader.FIELDCAPTION("Contract No."),ServiceContractHeader."Contract No."));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ServiceContractAfterQuote@55();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
      ServiceItemNo@1000 : Code[20];
    BEGIN
      // Covers document number TC0074, CU-5944-4 - refer to TFS ID 21730,172909.
      // [SCENARIO] The Test Case checks Service Item No is same after making Service Contract from Service Contract Quote and checks the Service
      // Contract that is created by Service Contract Quote.

      // 1. Setup: Create Service Contract Quote Header and Service Contract Quote Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceItemNo := ServiceContractLine."Service Item No.";

      // 2. Exercise: Sign Service Contract Quote.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // 3. Verify: Check Service Item No is same after making Service Contract from Service Contract Quote and check the Service Contract
      // creation.
      ServiceContractLine.TESTFIELD("Service Item No.",ServiceItemNo);
      VerifyContractCreationByQuote(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ServiceContractAfterSigned@54();
    VAR
      ServiceContractHeader@1005 : Record 5965;
      ServiceContractLine@1004 : Record 5964;
      ServiceHour@1003 : Record 5910;
      ServiceItemGroup@1002 : Record 5904;
      ContractServiceDiscount@1001 : Record 5972;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number TC0074 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks Status and Change Status field is changed after Sign Contract.

      // 1. Setup: Create Service Contract, Service Hours, Service Discount and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      CreateServiceContractLineItem(ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      LibraryService.CreateServiceHour(ServiceHour,ServiceContractHeader,ServiceHour.Day::Monday);

      LibraryService.FindServiceItemGroup(ServiceItemGroup);
      LibraryService.CreateContractServiceDiscount(
        ContractServiceDiscount,ServiceContractHeader,ContractServiceDiscount.Type::"Service Item Group",ServiceItemGroup.Code);

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Check that Status and Change Status field is changed after Sign Contract.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceContractHeader.TESTFIELD(Status,ServiceContractHeader.Status::Signed);
      ServiceContractHeader.TESTFIELD("Change Status",ServiceContractHeader."Change Status"::Locked);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,FormModalHandler)]
    PROCEDURE CustomerNoOnServiceContract@53();
    BEGIN
      // Covers document number TC0075 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks error raised when Customer No. does not exist in Header.

      // Setup.
      Initialize;

      // 2. Exercise: Create Service Contract Header without Customer No.
      ServiceContractHeader2.INIT;
      ServiceContractHeader2.VALIDATE("Contract Type",ServiceContractHeader2."Contract Type"::Contract);
      ServiceContractHeader2.INSERT(TRUE);
      COMMIT;

      // 3. Verify: Verify that error raised when Customer No. does not exist in Header.
      ASSERTERROR PAGE.RUNMODAL(PAGE::"Service Contract");
      Assert.AreEqual(
        STRSUBSTNO(CustomerNotBlankErr,ServiceContractHeader2."Contract No."),ConvertMessage(GETLASTERRORTEXT),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ErrorOnCopyDocument@52();
    VAR
      ServiceContractHeader@1002 : Record 5965;
    BEGIN
      // Covers document number TC0075 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case checks error raised on Copy Document when Customer No. not same.

      // Setup
      Initialize;

      // 2. Exercise: Create Service Contract Header.
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);

      // 3. Verify: Verify that error raised on Copy Document when Customer No. not same.
      ASSERTERROR CheckErrorOnCopyDocument(ServiceContractHeader);
      Assert.AreEqual(STRSUBSTNO(CopyDocumentErr),ConvertMessage(GETLASTERRORTEXT),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE CopyDocumentOnServiceContract@51();
    VAR
      ServiceContractHeaderFrom@1004 : Record 5965;
      ServiceContractHeaderTo@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceContractLineTo@1001 : Record 5964;
      CopyDocumentMgt@1000 : Codeunit 6620;
    BEGIN
      // Covers document number TC0076, CU5940-1 - refer to TFS ID 21730, 172908.
      // [SCENARIO] The Test Case checks Service Contract Line fields are same after Copy Document.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeaderFrom,ServiceContractHeaderFrom."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeaderFrom);
      ModifyServiceContractHeader(ServiceContractHeaderFrom,ServiceContractHeaderFrom."Service Period");

      // 2. Exercise: Create Service Contract and Copy Document.
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeaderTo,ServiceContractHeaderTo."Contract Type"::Contract,ServiceContractHeaderFrom."Customer No.");
      ModifyServiceContractHeader(ServiceContractHeaderTo,ServiceContractHeaderTo."Service Period");
      CopyDocumentMgt.CopyServContractLines(ServiceContractHeaderTo,ServiceContractHeaderFrom."Contract Type",
        ServiceContractHeaderFrom."Contract No.",ServiceContractLineTo);

      // 3. Verify: Check that Service Contract Line fields are same after Copy Document.
      ServiceContractLineTo.TESTFIELD("Service Item No.",ServiceContractLine."Service Item No.");
      ServiceContractLineTo.TESTFIELD("Line Value",ServiceContractLine."Line Value");
      ServiceContractLineTo.TESTFIELD("New Line",TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceQuoteDetailReport@50();
    VAR
      ServiceContractHeader@1005 : Record 5965;
      ServiceContractLine@1004 : Record 5964;
      ServiceCommentLine@1003 : Record 5906;
      ServiceContractQuoteDetail@1002 : Report 5973;
      FilePath@1001 : Text[1024];
      Type@1000 : Option;
    BEGIN
      // Covers document number TC0076 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case Save Service Contract Quote Details report in XML and XLSX format after adding comments Date in Service Contract header and check that some data exist in saved files.

      // 1. Setup: Create Service Contract Quote Header and Service Contract Quote Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      LibraryService.CreateCommentLineForServCntrct(ServiceCommentLine,ServiceContractLine,Type);
      ServiceCommentLine.VALIDATE(Date,ServiceContractHeader."Starting Date");
      ServiceCommentLine.MODIFY(TRUE);

      // 2. Exercise: Save Report as XML in local Temp folder.
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      CLEAR(ServiceContractQuoteDetail);
      ServiceContractQuoteDetail.SETTABLEVIEW(ServiceContractHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceContractHeader."Contract Type") + ServiceContractHeader."Contract No." + '.xlsx';
      ServiceContractQuoteDetail.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that Saved file have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractDetailReport@49();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      ServiceCommentLine@1002 : Record 5906;
      ServiceContractDetailRep@1001 : Report 5971;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC0077 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case Save Service Contract Details report in XML and XLSX format after adding comments and Date in Service Contract header and check that some data exist in saved files.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      LibraryService.CreateCommentLineForServCntrct(ServiceCommentLine,ServiceContractLine,ServiceContractHeader."Contract Type");
      ServiceCommentLine.VALIDATE(Comment,FORMAT(ServiceContractHeader.Description + ServiceContractHeader."Contract No."));
      ServiceCommentLine.VALIDATE(Date,ServiceContractHeader."Starting Date");
      ServiceCommentLine.MODIFY(TRUE);

      // 2. Exercise: Save Report as XML and XLSX in local Temp folder.
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      CLEAR(ServiceContractDetailRep);
      ServiceContractDetailRep.SETTABLEVIEW(ServiceContractHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceContractHeader."Contract Type") + ServiceContractHeader."Contract No." + '.xlsx';
      ServiceContractDetailRep.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that Saved file have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE TotalGroupByCustomerReport@48();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceContractCustomerRep@1001 : Report 5977;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC0078 - refer to TFS ID 21730.
      // [SCENARIO] The Test Case Save Service Contract Customer report in XML and XLSX format and check that some data exist in saved files.

      // Setup. Create Service Contract Header and Service Contract Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Save Service Contract Customer Report as XML and XLSX in local Temp folder.
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      CLEAR(ServiceContractCustomerRep);
      ServiceContractCustomerRep.SETTABLEVIEW(ServiceContractHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceContractHeader."Contract Type") + ServiceContractHeader."Contract No." + '.xlsx';
      ServiceContractCustomerRep.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that Saved file have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceItemInformationOnLine@1();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // Covers Test Case 144526 - refer to TFS ID 168064.
      // [SCENARIO] Test the Service Item on Service Contract Line.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Creating Service Contract.
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);

      // 3. Verify: Service Item Details in Service Item Line must be same.
      VerifyServiceContractLine(ServiceContractLine);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE SumOfLineAmountOnHeader@3();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      LineAmount@1002 : Decimal;
    BEGIN
      // Covers Test Case 144526 - refer to TFS ID 168064.
      // [SCENARIO] The Test the Service Contract Header details.

      // 1. Setup: Find a Customer, create Service Contract Header.
      Initialize;
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);

      // 2. Exercise: Creating multiple Service Contract Lines, adding the Line Amount.
      CreateMultipleContractLines(ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      LineAmount := SumOfLineAmount(ServiceContractHeader."Contract No.");

      // 3. Verify: Verify the Service Contract Header.
      VerifyServiceContractHeader(ServiceContractHeader,LineAmount);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE LockServiceContract@20();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractHeader3@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      CopyDocumentMgt@1000 : Codeunit 6620;
      SignServContractDoc@1006 : Codeunit 5944;
      LockOpenServContract@1007 : Codeunit 5943;
    BEGIN
      // Covers document number CU5940-2 - refer to TFS ID 172908.
      // [SCENARIO] Test Service Invoice created on Lock Service Contract after Copy Document.

      // 1. Setup: Create two Service Contract and Sign last Service Contract.
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      CreateAndModifyServiceContract(
        ServiceContractHeader3,ServiceContractHeader."Customer No.",ServiceContractHeader."Contract Type"::Contract);
      SignServContractDoc.SignContract(ServiceContractHeader3);
      ServiceContractHeader3.GET(ServiceContractHeader3."Contract Type",ServiceContractHeader3."Contract No.");
      LockOpenServContract.OpenServContract(ServiceContractHeader3);

      // 2. Exercise: Copy Document and Lock the Service Contract.
      ServiceContractHeader3.GET(ServiceContractHeader3."Contract Type",ServiceContractHeader3."Contract No.");
      CopyDocumentMgt.CopyServContractLines(
        ServiceContractHeader3,ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.",ServiceContractLine);
      ServiceContractHeader3.GET(ServiceContractHeader3."Contract Type",ServiceContractHeader3."Contract No.");
      LockOpenServContract.LockServContract(ServiceContractHeader3);

      // 3. Verify: Verify that the Service Invoice Created after Lock Service Contract.
      ServiceContractHeader3.GET(ServiceContractHeader3."Contract Type",ServiceContractHeader3."Contract No.");
      ServiceContractHeader3.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader3.TESTFIELD("No. of Unposted Invoices",2);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ServiceContractInvPeriodText@19();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      StandardText@1009 : Record 7;
      ServiceLine@1000 : Record 5902;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // Covers document number CU5940-3 - refer to TFS ID 172908.
      // [SCENARIO] Test Service Invoice created after Signing Service Contract with Contract Inv. Period Text Code on Service Mgt. Setup.

      // 1. Setup: Update Contract Inv. Period Text Code on Service Mgt. Setup and Create Service Contract.
      Initialize;
      FindStandardText(StandardText);
      UpdateContractPeriodTextCode(StandardText.Code);
      CreateServiceContractCurrency(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Verify Created Invoice and Description on Created Service Invoice Line.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",1);

      ServiceLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceLine.FINDLAST;
      Assert.AreEqual(StandardText.Description,COPYSTR(ServiceLine.Description,1,STRLEN(StandardText.Description)),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ContractPriceIncreaseText@16();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      StandardText@1009 : Record 7;
      ServiceLine@1013 : Record 5902;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // Covers document number CU5940-7 - refer to TFS ID 172908.
      // [SCENARIO] Test Service Invoice creation with Price Inv. Increase Code and Print Increase Text True on Service Contract.

      // 1. Setup: Create and Sign Service Contract with Price Inv. Increase Code and Print Increase Text True.
      Initialize;
      FindStandardText(StandardText);
      CreateServiceContractHeader(ServiceContractHeader,StandardText.Code);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Invoice.
      CreateServiceInvoice(ServiceContractHeader);

      // 3. Verify: Verify Created Invoice and Description on Created Service Invoice Line.
      VerifyValuesOnContractHeader(ServiceContractHeader);

      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      ServiceLine.FINDLAST;
      Assert.AreEqual(StandardText.Description,COPYSTR(ServiceLine.Description,1,STRLEN(StandardText.Description)),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE LineDiscountServiceInvoice@177();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test Service Invoice creation and verify lines have blank Line Discount % values.

      // 1. Setup: Create and Sign Service Contract with Service Period: Year and Prepaid = False.
      Initialize;
      CreateServiceContractMultiLines(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract,TRUE);
      UpdateContractHeaderPrepaid(ServiceContractHeader,FALSE);
      UpdateContractLineCostAndValue(ServiceContractLine);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,CALCDATE('<-CY>',WORKDATE),
        ServiceContractHeader."Invoice Period"::Year);

      // 2. Exercise: Sign Contract and Create Service Contract Invoice.
      SignServContractDoc.SignContract(ServiceContractHeader);
      CreateServiceInvoice(ServiceContractHeader);

      // 3. Verify: Verify Line Discount % is blank on Created Service Invoice Lines.
      VerifyLineDiscountOnServiceInvoice(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(InvoiceConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ContractLineInvLineTextCode@14();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      StandardText@1009 : Record 7;
      StandardText2@1015 : Record 7;
      ServiceLine@1013 : Record 5902;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // Covers document number CU5940-8 - refer to TFS ID 172908.
      // [SCENARIO] Test Service Invoice creation with Contract Inv. Line Text Code and Contract Line Inv. Text Code on Service Mgt. Setup.

      // 1. Setup: Update Contract Inv. Line Text Code and Contract Line Inv. Text Code on Service Mgt. Setup, Create and Sign Service
      // Contract.
      Initialize;
      FindStandardText(StandardText);
      FindDifferentStandardText(StandardText2,StandardText.Code);
      UpdateContractInvAndLineText(StandardText.Code,StandardText2.Code);
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Invoice.
      CreateServiceInvoice(ServiceContractHeader);

      // 3. Verify: Verify Created Invoice and Description on Created Service Invoice Lines.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",1);

      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      Assert.AreEqual(StandardText2.Description,COPYSTR(ServiceLine.Description,1,STRLEN(StandardText2.Description)),UnknownErr);
      ServiceLine.NEXT;
      Assert.AreEqual(StandardText.Description,COPYSTR(ServiceLine.Description,1,STRLEN(StandardText.Description)),UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE SignContractWithPrepaidFalse@73();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1003 : Codeunit 5944;
    BEGIN
      // Covers document no CU-5944-3 - refer to TFS ID 172909.
      // [SCENARIO] The Test Case checks Signed Service Contract with Prepaid False.

      // 1. Setup: Create Service Contract Header, create Service Contract Line and modify the Service Contract Header.
      Initialize;
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      PrepaidFalseInServiceContract(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign the Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Verify the No of Service Invoice created by Service Contract.
      VerifyContractCreationByQuote(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE CopyDefaultHourOnContractQuote@71();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // Covers document no CU-5944-5 - refer to TFS ID 172909.
      // [SCENARIO] The Test Case checks that Default Hours on Service Contract Quote is copied from Default Service Hours Setup.

      // 1. Setup: Create Service Contract Quote.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);

      // 2. Exercise: Copy the Default Hours from Default Service Hours Setup.
      CopyDefaultHoursFromSetup(ServiceContractHeader."Contract No.");

      // 3. Verify: Verify the Service Hours for Service Contract Quote with Service Hours Setup.
      VerifyServiceHoursWithSetup(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ContractByQuoteWithComment@13();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      // Covers document number CU-5944-6 - refer to TFS ID 172909.
      // [SCENARIO] The Test Case checks Service Contract creation by Service Contract Quote with Service Comments.

      // 1. Setup: Create Service Contract Quote, Comments for Quote, modify Service Contract Header.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      CreateCommentForServiceQuote(ServiceContractHeader."Contract No.");
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Create the Service Contract by Service Contract Quote.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // 3. Verify: Verify that the Service Contract is created by Service Contract Quote.
      VerifyContractCreationByQuote(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ContractByQuoteWithDiscount@28();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // Covers document number CU-5944-6 - refer to TFS ID 172909.
      // [SCENARIO] The Test Case checks Service Contract creation by Service Contract Quote with Service Discount.

      // 1. Setup: Create Service Contract Quote, Comments for Quote, modify Service Contract Header.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      CreateServiceDiscountForQuote(ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Create the Service Contract by Service Contract Quote.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // 3. Verify: Verify that the Service Contract is created by Service Contract Quote.
      VerifyContractCreationByQuote(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ContractByQuotePrepaidFalse@10();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      // Covers document number CU-5944-7 - refer to TFS ID 172909.
      // [SCENARIO] The Test Case checks Service Contract creation by Service Contract Quote with Prepaid False.

      // 1. Setup: Create Service Contract Quote,make Prepaid false in Service Contract Quote, modify Service Contract Header.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      PrepaidFalseInServiceContract(ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Create the Service Contract by Service Contract Quote.
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // 3. Verify: Verify that the Service Contract is created by Service Contract Quote.
      VerifyContractCreationByQuote(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ChangeBillToCustomerOnContract@78();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceLine@1000 : Record 5902;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // Covers document number CU5988-3-1 - refer to TFS ID 172912.
      // [SCENARIO] Test Service Invoice creation from Signing Contract with Different Bill to Customer No.

      // 1. Setup: Create Service Contract and update different Bill to Customer No on Service Contract.
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      UpdateBillToCostomerNo(ServiceContractHeader);

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Verify Bill to Customer No. on Created Invoice.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",1);

      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      ServiceLine.FINDLAST;
      ServiceLine.TESTFIELD("Bill-to Customer No.",ServiceContractHeader."Bill-to Customer No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE PostInvoiceBillToCustomer@72();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceHeader@1002 : Record 5900;
      SignServContractDoc@1006 : Codeunit 5944;
    BEGIN
      // Covers document number CU5988-3-2 - refer to TFS ID 172912.
      // [SCENARIO] Test Post Service Invoice created from Signing Contract with Different Bill to Customer No.

      // 1. Setup: Create Service Contract, update different Bill to Customer No on Service Contract and Sign Service Contract.
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      UpdateBillToCostomerNo(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Post Created Service Invoice.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify No. of Unposted Invoices and No. of Posted Invoices updated on Service Contract Header.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices","No. of Posted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",0);
      ServiceContractHeader.TESTFIELD("No. of Posted Invoices",1);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceInvoiceBySeviceContract@34();
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test that Create Contract Invoices batch job creates a new Service Invoice.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Starting Date",LibraryRandom.RandDateFrom(CALCDATE('<-CM>',WORKDATE),5));
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Contract Invoice.
      CreateServiceContractInvoice(ServiceContractHeader);

      // 3. Verify: Verify creation of Service Invoice and values on Service Invoice.
      ServiceContractAccountGroup.GET(ServiceContractHeader."Serv. Contract Acc. Gr. Code");  // Find Service Contract Account Group.
      VerifyValuesOnServiceInvoice(ServiceContractHeader,ServiceContractAccountGroup."Non-Prepaid Contract Acc.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceInvoiceLinesOrder@185();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test that Create Contract Invoices batch job creates a new Service Invoice from Service Contract with several lines.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContractMultiLines(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract,FALSE);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Contract and Create Service Contract Invoice.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // Verify: Verify order of lines in Service Invoice.
      VerifyLinesOnServiceInvoice(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceInvoiceWithLedgerEntry@83();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceLedgerEntry@1005 : Record 5907;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test for Calculation of correct service ledger entry while creating a Service invoice on Contract card.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      UpdateInvoicePeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Year);
      UpdateContractLineCostAndValue(ServiceContractLine);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Starting Date",LibraryRandom.RandDateFrom(CALCDATE('<-CM>',WORKDATE),5));
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Invoice.
      CreateServiceInvoice(ServiceContractHeader);

      // 3. Verify: Verify Service Invoice and values of Cost Amount and Line Amount on Service Ledger Entry.
      VerifyServiceInvoice(ServiceContractHeader."Contract No.");

      Assert.AreEqual(12,
        GetServiceLedgerEntryLines(ServiceContractHeader."Contract No."),
        STRSUBSTNO(ServiceLedgerEntryErr,ServiceLedgerEntry.TABLECAPTION,FORMAT(12))); // 12 for Invoice Period Year.

      VerifyAmountServiceLedgerEntry(ServiceContractHeader."Contract No.",ServiceContractLine."Line Cost" / 12);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceInvoiceForExistingServiceContract@219();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      SignServContractDoc@1001 : Codeunit 5944;
      LockOpenServContract@1007 : Codeunit 5943;
    BEGIN
      // [SCENARIO] Test for creating a new service invoice for an existing service contract.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;

      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractExpirationDate(ServiceContractHeader,CALCDATE('<5Y>',WORKDATE));
      UpdateInvoicePeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Year);
      UpdateContractLineCostAndValue(ServiceContractLine);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Invoice.
      CreateServiceInvoice(ServiceContractHeader);

      // Post Created Service Invoice.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Reopen Service Contract.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      LockOpenServContract.OpenServContract(ServiceContractHeader);

      // Add Second Service Contract Line.
      CreateServiceContractLineUpdateAnnualAmount(ServiceContractHeader);

      // Lock Service Contract.
      LockOpenServContract.LockServContract(ServiceContractHeader);

      // Verify: Find created Service Invoice.
      FindServiceInvoiceHeader(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE DimensionOnServiceContract@86();
    VAR
      DefaultDimension@1007 : Record 352;
      ServiceOrderType@1006 : Record 5903;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // [SCENARIO] Test Dimension on Service Contract after updating Service Order Type on Service Contract Header.

      // 1. Setup: Create Service Order Type, Default Dimension for Service Order Type and Service Contract.
      Initialize;
      LibraryService.CreateServiceOrderType(ServiceOrderType);
      CreateDefaultDimension(DefaultDimension,ServiceOrderType.Code);
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Update Service Order Type on Service Contract Header.
      UpdateServiceOrderType(ServiceContractHeader,ServiceOrderType.Code);

      // 3. Verify: Verify Dimension on Service Contract Header.
      VerifyDimensionSetEntry(DefaultDimension,ServiceContractHeader."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE DimensionOnServiceOrder@122();
    VAR
      DefaultDimension@1007 : Record 352;
      ServiceOrderType@1006 : Record 5903;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceHeader@1010 : Record 5900;
      ServiceItemLine@1011 : Record 5901;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test Dimension on Service Order Created from Service Contract with Default Dimensions.

      // 1. Setup: Create Service Order Type, Default Dimension for Service Order Type, Service Contract, Update Service Order Type on
      // Service Contract Header and Sign the Service Contract.
      Initialize;
      LibraryService.CreateServiceOrderType(ServiceOrderType);
      CreateDefaultDimension(DefaultDimension,ServiceOrderType.Code);
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      UpdateServiceOrderType(ServiceContractHeader,ServiceOrderType.Code);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Order from Service Contract.
      CreateServiceContractOrder(ServiceContractHeader);

      // 3. Verify: Verify Dimension on Service Order for Service Header and Service Item Line.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Contract No.");
      VerifyDimensionSetEntry(DefaultDimension,ServiceHeader."Dimension Set ID");

      FindServiceItemLine(ServiceItemLine,ServiceHeader);
      VerifyDimensionSetEntry(DefaultDimension,ServiceItemLine."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceOrderDimensionsFromServiceContract@156();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceHeader@1010 : Record 5900;
      Dimension@1004 : Record 348;
      DimensionValue@1005 : Record 349;
      SignServContractDoc@1000 : Codeunit 5944;
      LibraryDimension@1003 : Codeunit 131001;
    BEGIN
      // [SCENARIO] Test Dimension on Service Order Created from Service Contract..

      // 1. Setup: Create Dimension, Service Contract, Update dimension on
      // Service Contract Header and Sign the Service Contract.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);

      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Dimension Set ID",
        LibraryDimension.CreateDimSet(ServiceContractHeader."Dimension Set ID",Dimension.Code,DimensionValue.Code));
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Create Service Order from Service Contract.
      CreateServiceContractOrder(ServiceContractHeader);

      // 3. Verify: Verify Dimension on Service Order for Service Header and Service Item Line.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Contract No.");
      Assert.AreEqual(ServiceHeader."Dimension Set ID",ServiceContractHeader."Dimension Set ID",'Dimension set id matches');
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler,ServiceInvoicePostHandler)]
    PROCEDURE PostInvoiceFromServiceContract@92();
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceContract@1002 : TestPage 6050;
      ServiceDocumentRegisters@1003 : TestPage 5968;
      LineAmount@1000 : Variant;
      Amount@1004 : Decimal;
    BEGIN
      // [SCENARIO] Test post the Service Invoice from Unposted Invoices On the Service Contract Card of the Signed Service Contract with no error.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateContractHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.SignContract.INVOKE;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");

      // 2. Exercise: Post the Service Invoice from the handler.
      ServiceDocumentRegisters.OPENEDIT;
      ServiceDocumentRegisters.FILTER.SETFILTER("Source Document No.",ServiceContract."Contract No.".VALUE);
      ServiceDocumentRegisters.Card.INVOKE;
      LibraryVariableStorage.Dequeue(LineAmount);
      EVALUATE(Amount,FORMAT(LineAmount));

      // 3. Verify: Verify GL Entry, Detailed Cust Ledger Entry for the Service Invoice Line Amount.
      VerifyAmountOnGLEntry(ServiceContractHeader."Contract No.",ServiceContractHeader."Customer No.");
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler)]
    PROCEDURE CreateInvoiceContractCard@104();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceContract@1000 : TestPage 6050;
      CurrentWorkDate@1003 : Date;
    BEGIN
      // [SCENARIO] Test to verify program creates a Service Invoice on Contract Card through Create Service Invoice function after changing
      // the Line value on Contract Line.

      // 1. Setup: Create and Sign Service Contract and modify WORKDATE.
      Initialize;
      CurrentWorkDate := WORKDATE;
      CreateContractHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      UpdateContractLineCostAndValue(ServiceContractLine);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.SignContract.INVOKE;
      WORKDATE := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',DMY2DATE(1,DATE2DMY(WORKDATE,2),DATE2DMY(WORKDATE,3)));

      // 2. Exercise: Create a Service Invoice.
      ServiceContract.CreateServiceInvoice.INVOKE;

      // 3. Verify: Verify Service Invoice created, updated Line Value and Cost Value.
      VerifyServiceInvoice(ServiceContractHeader."Contract No.");
      VerifyAmountServiceLedgerEntry(ServiceContractHeader."Contract No.",ServiceContractLine."Line Value" / 12);

      // 4. TearDown: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ContractTemplateConfirmHandlerFalse,ContractLineSelectionHandler)]
    PROCEDURE ServiceContractLineSelection@96();
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceContract@1002 : TestPage 6050;
    BEGIN
      // [SCENARIO] Test to verify that program should close the Contract Line Selection page after clicking Cancel button when service Item No
      // is blank on the Contract Line Selection page.

      // 1. Setup: Create and modify Service Contract Header.
      Initialize;
      CreateContractHeader(ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Open Contract Line Selection page from Service Contract.
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.SelectContractLines.INVOKE;

      // 3. Verify: Verify that the Contract Line Selection page is blank and is closed by clicking Cancel through the handler ContractLineSelectionHandler.
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractInvoiceByPage@132();
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
      CurrentWorkDate@1000 : Date;
    BEGIN
      // [SCENARIO] Test using Page Testability that Create Contract Invoices batch job creates a new Service Invoice.

      // 1. Setup: Create and Sign Service Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 2. Exercise: Open Service Contract Page and Create Service Contract Invoice.
      CurrentWorkDate := WORKDATE;
      WORKDATE := ServiceContractHeader."Next Invoice Date";
      OpenServiceContractPage(ServiceContractHeader."Contract No.");

      // 3. Verify: Verify creation of Service Invoice and values on Service Invoice.
      ServiceContractAccountGroup.GET(ServiceContractHeader."Serv. Contract Acc. Gr. Code");  // Find Service Contract Account Group.
      VerifyValuesOnServiceInvoice(ServiceContractHeader,ServiceContractAccountGroup."Prepaid Contract Acc.");

      // 4. Cleanup: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,InvoiceConfirmHandler)]
    PROCEDURE SignContractWithNoInvoice@107();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1001 : Record 5900;
      SignServContractDoc@1000 : Codeunit 5944;
      ServiceInvoiceCount@1004 : Integer;
    BEGIN
      // [SCENARIO] Check that Service Invoice is not created after signing Service Contract and decline the message to create Service Invoice.

      // 1. Setup: Create Service Contract Header and Service Contract Line.
      Initialize;
      ServiceInvoiceCount := GetServiceInvoiceCount;  // Store Old Service Invoice Count.
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // 2. Exercise: Sign Service Contract.
      SignServContractDoc.SignContract(ServiceContractHeader);

      // 3. Verify: Verify that no new Service Invoice is created after signing Contract and declining the message to create Service Invoice for signed Contract.
      Assert.AreEqual(
        ServiceInvoiceCount,GetServiceInvoiceCount,STRSUBSTNO(ServiceLedgerEntryErr,ServiceHeader.TABLECAPTION,ServiceInvoiceCount));
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,InvoiceConfirmHandler,CreateContractServiceOrdersRequestPageHandler,MsgHandler)]
    PROCEDURE ContractServiceOrderForContract@138();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Check that Service Order created after running Create Contract Service Orders batch job for Contract.

      // 1. Setup: Create Service Contract Header and Service Contract Line, sign Contract.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");

      // 2. Exercise.
      RunCreateContractServiceOrders;

      // 3. Verify: Verify that Service Order Created after running Create Contract Service Orders batch job.
      Assert.IsTrue(
        FindServiceDocumentWithContractNo(ServiceHeader."Document Type"::Order,ServiceContractHeader."Contract No."),
        STRSUBSTNO(EntryMustExistErr,ServiceHeader.TABLECAPTION,ServiceContractHeader."Contract No."));
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,InvoiceConfirmHandler,CreateContractServiceOrdersRequestPageHandler,MsgHandler)]
    PROCEDURE ShipServiceOrderCreatedFromContract@130();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentHeader@1005 : Record 5990;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Check that Service Shipment contains Contract No. when Service Order created through Create Contract Service Orders batch job posted as Ship only.

      // 1. Setup: Create Service Contract Header and Service Contract Line, sign Contract, run Create Contract Service Order batch report.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractServiceOrders;

      // 2. Exercise: Post Service Order created from Contract with Ship option.
      CreateServiceLineForServiceOrder(ServiceHeader,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify that posted Shipment contain Contract No.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      Assert.IsTrue(
        ServiceShipmentHeader.FINDFIRST,
        STRSUBSTNO(EntryMustExistErr,ServiceShipmentHeader.TABLECAPTION,ServiceContractHeader."Contract No."));
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,InvoiceConfirmHandler,CreateContractServiceOrdersRequestPageHandler,CreateContractInvoicesRequestPageHandler,InvoiceCreationMessageHandler)]
    PROCEDURE UnsuccessfulInvoiceCreationFromContract@98();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      SignServContractDoc@1000 : Codeunit 5944;
      ServiceInvoiceCount@1007 : Integer;
    BEGIN
      // [SCENARIO] Check that Service Invoice Creation Message appears for un-successful creation of Invoice after running Create Contract Invoice Batch Job.

      // 1. Setup: Create Service Contract, sign Contract, run Create Contract Service Order batch report. Find Service Order and Post it as Ship.
      Initialize;
      ServiceInvoiceCount := GetServiceInvoiceCount;  // Store Old Service Invoice Count.
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      LibraryVariableStorage.Enqueue('');
      RunCreateContractServiceOrders;
      CreateServiceLineForServiceOrder(ServiceHeader,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 2. Exercise.
      COMMIT;
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(InvoiceCreatedMsg,0));
      RunCreateContractInvoices;

      // 3. Verify: Verify message '0 Invoice was created.' and verify that no new Service Invoice Created.
      Assert.AreEqual(
        ServiceInvoiceCount,GetServiceInvoiceCount,STRSUBSTNO(ServiceLedgerEntryErr,ServiceHeader.TABLECAPTION,ServiceInvoiceCount));
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,InvoiceConfirmHandler,CreateContractServiceOrdersRequestPageHandler,CreateContractInvoicesRequestPageHandler,InvoiceCreationMessageHandler)]
    PROCEDURE SuccessfulInvoiceCreationFromContract@126();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Check that Service Invoice Creation Message appears for successful creation of Invoice after running Create Contract Invoice Batch Job.

      // 1. Setup: Create Service Contract, sign Contract, run Create Contract Service Order batch report. Find Service Order and Post it as Ship and Invoice.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      LibraryVariableStorage.Enqueue('');
      RunCreateContractServiceOrders;
      CreateServiceLineForServiceOrder(ServiceHeader,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 2. Exercise.
      COMMIT;
      LibraryVariableStorage.Enqueue(CALCDATE(ServiceContractHeader."Service Period",WORKDATE));
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(InvoiceCreatedMsg,1));
      RunCreateContractInvoices;

      // 3. Verify: Verify message '1 Invoice was created.' and created Invoice Contain correct Contract No.
      Assert.IsTrue(
        FindServiceDocumentWithContractNo(ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No."),
        STRSUBSTNO(EntryMustExistErr,ServiceHeader.TABLECAPTION,ServiceContractHeader."Contract No."));
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE GLEntriesAfterPostingServiceInvoice@99();
    VAR
      Customer@1005 : Record 18;
      CustomerPostingGroup@1006 : Record 92;
      GLAccount@1007 : Record 15;
      PostedServiceInvoiceHeader@1003 : Record 5992;
      ServiceContractAccountGroup@1009 : Record 5973;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceHeader@1010 : Record 5900;
      VATPostingSetup@1011 : Record 325;
      SignServContractDoc@1004 : Codeunit 5944;
      InvoiceNo@1012 : Code[20];
      TotalAmount@1015 : Decimal;
      Amount@1014 : Decimal;
      VATPercent@1002 : Decimal;
      CurrentWorkDate@1013 : Date;
    BEGIN
      // [SCENARIO] Test GL Entries when post Service Invoice after signing Service Contract.

      // 1. Setup: Create Service Contract with Yearly Invoice Period and Line Discount and Sign the Contract.
      Initialize;
      CreateContractWithInvPeriodYear(ServiceContractHeader,ServiceContractLine);
      ServiceContractLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));  // Take Random value for Discount%.
      ServiceContractLine.MODIFY(TRUE);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // Added part to correct the starting date if invoice date and starting date are the same then set starting date back by one
      IF ServiceContractHeader."Next Invoice Date" = ServiceContractHeader."Starting Date" THEN BEGIN
        ServiceContractHeader.VALIDATE("Starting Date",ServiceContractHeader."Starting Date" - 1);
        ServiceContractHeader.MODIFY(TRUE);
      END;
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SetHideDialog := TRUE;
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;

      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      Customer.GET(ServiceContractHeader."Customer No.");
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      ServiceContractAccountGroup.GET(ServiceContractHeader."Serv. Contract Acc. Gr. Code");
      GLAccount.GET(ServiceContractAccountGroup."Non-Prepaid Contract Acc.");
      VATPostingSetup.GET(Customer."VAT Bus. Posting Group",GLAccount."VAT Prod. Posting Group");
      Amount := ServiceContractLine."Line Value" - (ServiceContractLine."Line Value" * ServiceContractLine."Line Discount %" / 100);

      VATPercent := 0;
      WITH VATPostingSetup DO
        IF "VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT" THEN
          VATPercent := "VAT %" / 100;

      TotalAmount := Amount + (Amount * VATPercent);

      // 2. Exercise: Create and Post Service Invoices.
      InvoiceNo := InitCurrWorkDateAndPostServiceInvoice(CurrentWorkDate,ServiceContractHeader);
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify GL Entries after posting Service invoice.

      PostedServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",InvoiceNo);
      PostedServiceInvoiceHeader.FINDFIRST;

      VerifyInvoicedGLAmt(PostedServiceInvoiceHeader."No.",CustomerPostingGroup."Receivables Account",TotalAmount);

      // 4. Cleanup: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE GLEntriesAfterPostingPrepaidContractEntries@112();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceContractAccountGroup@1003 : Record 5973;
      ServiceHeader@1006 : Record 5900;
      SalesReceivablesSetup@1012 : Record 311;
      SignServContractDoc@1000 : Codeunit 5944;
      InvoiceNo@1007 : Code[20];
      Amount@1005 : Decimal;
      CurrentWorkDate@1004 : Date;
    BEGIN
      // [SCENARIO] Test GL Entries after posting Prepaid Contract Entries for a Service Contrct.

      // 1. Setup: Create Service Contract with Yearly Invoice Period and Line Discount and Sign the Contract.
      Initialize;
      UpdateSalesReceivablesSetupForDiscountPosting(SalesReceivablesSetup."Discount Posting"::"All Discounts");
      CurrentWorkDate := WORKDATE;
      CreateContractWithInvPeriodYear(ServiceContractHeader,ServiceContractLine);
      ServiceContractLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));  // Take Random value for Discount%.
      ServiceContractLine.MODIFY(TRUE);
      ServiceContractAccountGroup.GET(ServiceContractHeader."Serv. Contract Acc. Gr. Code");
      UpdateServContractAccGroup(ServiceContractAccountGroup);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Starting Date",ServiceContractHeader."Next Invoice Date");
      WORKDATE := ServiceContractHeader."Next Invoice Date";
      SignServContractDoc.SetHideDialog := TRUE;
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
      Amount := RoundBasedOnCurrencyPrecision(ServiceContractLine."Line Value" / 12);  // Take 12 because Invoice Period is yearly.

      // Create and Post Service Invoices.
      InvoiceNo := CreateServiceInvoice(ServiceContractHeader);
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      COMMIT;

      // 2. Exercise: Post Prepaid Contract Entries.
      PostPrepaidContractEntryWithNextInvoiceDate(ServiceContractHeader);

      // 3. Verify: Verify GL Entries after posting Service invoice.
      VerifyGLEntryForPostPrepaidContract(
        ServiceContractAccountGroup."Non-Prepaid Contract Acc.",ServiceContractHeader."Contract No.",-Amount);

      // 4. Cleanup: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,AnalysisbyDimMatrixPageHandler)]
    PROCEDURE AnalysisViewEntriesAfterPostingServiceInvoice@115();
    VAR
      AnalysisView@1005 : Record 363;
      ServiceContractAccountGroup@1000 : Record 5973;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      ServiceHeader@1011 : Record 5900;
      AnalysisViewList@1010 : TestPage 556;
      AnalysisbyDimensions@1007 : TestPage 554;
      Amount@1006 : Decimal;
    BEGIN
      // [SCENARIO] Test Analysis View Entries when post Service Invoice after signing Service Contract.

      // 1. Setup: Create Analysis View, Create Service Contract and Sign the Contract.
      Initialize;
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreateAndSignContractOnToday(ServiceContractHeader,ServiceContractLine,ServiceContractAccountGroup);
      CreateAnalysisView(
        AnalysisView,
        STRSUBSTNO(
          AccountFilterMsg,ServiceContractAccountGroup."Non-Prepaid Contract Acc.",
          ServiceContractAccountGroup."Prepaid Contract Acc."),WORKDATE);
      Amount := RoundBasedOnCurrencyPrecision(ServiceContractLine."Line Amount" / 12);

      // 2. Exercise: Create and Post Service Invoice.
      CreateServiceInvoice(ServiceContractHeader);
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);

      // 3. Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page through 'SalesAnalysisbyDimMatrixPageHandler'.
      AnalysisViewList.OPENEDIT;
      AnalysisViewList.FILTER.SETFILTER(Code,AnalysisView.Code);
      AnalysisbyDimensions.TRAP;
      AnalysisViewList."Codeunit Update Analysis View".INVOKE;
      AnalysisViewList.EditAnalysis.INVOKE;

      Assert.AreEqual(
        -Amount,
        GetAnalysisViewTotalAmount(AnalysisbyDimensions,ServiceContractAccountGroup."Prepaid Contract Acc."),
        'Prepaid Contract Acc.');

      Assert.AreEqual(
        0,
        GetAnalysisViewTotalAmount(AnalysisbyDimensions,ServiceContractAccountGroup."Non-Prepaid Contract Acc."),
        'Non-Prepaid Contract Acc.');
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,AnalysisbyDimMatrixPageHandler)]
    PROCEDURE AnalysisViewEntriesAfterPostingPrepaidContractEntries@113();
    VAR
      AnalysisView@1005 : Record 363;
      ServiceContractAccountGroup@1004 : Record 5973;
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1006 : Record 5900;
      AnalysisViewList@1010 : TestPage 556;
      AnalysisbyDimensions@1009 : TestPage 554;
      Amount@1008 : Decimal;
    BEGIN
      // [SCENARIO] Test Analysis View Entries after posting Prepaid Contract Entries for a Service Contract.

      // 1. Setup: Create Analysis View, Create Service Contract and Sign the Contract, create and post the Service Invoice.
      Initialize;

      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreateAndSignContractOnToday(ServiceContractHeader,ServiceContractLine,ServiceContractAccountGroup);
      CreateAnalysisView(
        AnalysisView,
        STRSUBSTNO(
          AccountFilterMsg,ServiceContractAccountGroup."Non-Prepaid Contract Acc.",
          ServiceContractAccountGroup."Prepaid Contract Acc."),WORKDATE);
      Amount := RoundBasedOnCurrencyPrecision(ServiceContractLine."Line Amount" / 12);

      CreateServiceInvoice(ServiceContractHeader);
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);

      // 2. Exercise: Post Prepaid Contract Entries.
      PostPrepaidContractEntryWithNextInvoiceDate(ServiceContractHeader);

      // 3. Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page through 'SalesAnalysisbyDimMatrixPageHandler'.
      AnalysisViewList.OPENEDIT;
      AnalysisViewList.FILTER.SETFILTER(Code,AnalysisView.Code);
      AnalysisbyDimensions.TRAP;
      AnalysisViewList."Codeunit Update Analysis View".INVOKE;
      AnalysisViewList.EditAnalysis.INVOKE;

      Assert.AreEqual(
        -Amount,
        GetAnalysisViewTotalAmount(AnalysisbyDimensions,ServiceContractAccountGroup."Non-Prepaid Contract Acc."),
        'Non-Prepaid Contract Acc.');

      Assert.AreEqual(
        0,
        GetAnalysisViewTotalAmount(AnalysisbyDimensions,ServiceContractAccountGroup."Prepaid Contract Acc."),
        'Prepaid Contract Acc.');
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceInvoiceBySeviceContractWithInvoicePeriod@120();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // [SCENARIO] Test Amount on GL Entry equal to Customer Balance(LCY) when Service Invoice is Posted with Invoice Period Quarter.

      // Setup: Create and Sign Service Contract.
      Initialize;
      CreateSignedServiceContractWithInvoicePeriod(ServiceContractHeader,ServiceContractLine);
      CreateServiceContractInvoice(ServiceContractHeader);

      // Exercise: Create Service Contract Invoice.
      PostServiceInvoice(ServiceContractHeader."Contract No.");

      // Verify: Verify creation of Service Invoice and values on Service Invoice.
      VerifyAmountOnGLEntry(ServiceContractHeader."Contract No.",ServiceContractHeader."Customer No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceCreditmemoWithGetPrepaidContractEntries@123();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // [SCENARIO] Test Service Lines in the Credit Memo correspond to the Service Lines in the Posted Service Invoice when Invoice is Posted with Invoice Period Quarter.

      // Setup: Create and sign Service Contract. Post the Service Invoice.
      Initialize;
      CreateSignedServiceContractWithInvoicePeriod(ServiceContractHeader,ServiceContractLine);
      CreateServiceContractInvoice(ServiceContractHeader);
      PostServiceInvoice(ServiceContractHeader."Contract No.");
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Customer No.");

      // Exercise: Create Service Credit Memo by inserting Credit Memo Header and running Get Prepaid Contract Entries.
      GetPrepaidContractEntry(ServiceHeader,ServiceContractHeader."Contract No.");

      // Verify: Verify Unit Cost(LCY) not equal to Zero on Service Credit Memo Lines.
      VerifyUnitCostNotEqualToZeroOnCreditMemoLines(
        ServiceContractLine."Customer No.",ServiceContractLine."Service Item No.",ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(InvoiceConfirmHandler,ServContrctTemplateListHandler,CreateContractInvoicesRequestPageHandler,MsgHandler)]
    PROCEDURE CheckServiceInvoiceCreatedWithMultipleContract@131();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractHeader2@1001 : Record 5965;
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      // [SCENARIO] Test Service Invoice Created Sucessfully for multiples Service Contracts by batch report Create Contract Service Invoice.

      // Setup: Create and sign Service Contract with No Invoice.
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      CreateAndModifyServiceContract(
        ServiceContractHeader2,ServiceContractHeader."Customer No.",ServiceContractHeader."Contract Type"::Contract);
      SignServContractDoc.SignContract(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader2);
      LibraryVariableStorage.Enqueue(CALCDATE(STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(10)),WORKDATE));
      LibraryVariableStorage.Enqueue(
        STRSUBSTNO(AccountFilterMsg,ServiceContractHeader."Contract No.",ServiceContractHeader2."Contract No."));

      // Exercise: Run Create Contract Invoices Report.
      COMMIT; // Due to limitation in Page Testability Commit is required for this Test Case.
      RunCreateContractInvoices;

      // Verify: Verify Service Invoice Created.
      VerifyServiceInvoice(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceLedgerEntriesAfterPostingServiceInvoice@133();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceLedgerEntry@1001 : Record 5907;
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      // [SCENARIO] Test Service Ledger entries Created with Shipment and Invoice after Posting Service Invoice.

      // Setup: Create and sign Service Contract. Post the Service Invoice when Invoice Period is Quarter.
      Initialize;
      CreateSignedServiceContractWithInvoicePeriod(ServiceContractHeader,ServiceContractLine);
      CreateServiceContractInvoice(ServiceContractHeader);

      // Exercise: Create Service Contract Invoice.
      PostServiceInvoice(ServiceContractHeader."Contract No.");

      // Verify: Verify Service Ledger Entry Lines created with Document Type Shipment and Invoice
      // Verify entries created with Document Type Shipment Reverse of Document Type Invoice
      // And also verify Unit Cost Shipment equal to Unit Cost of Invoice.
      VerifyServiceLedgerEntry(ServiceContractHeader."Contract No.",ServiceLedgerEntry."Document Type"::Invoice,-1);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceLedgerEntriesAfterPostingServiceCreditMemo@149();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceContractHeader@1001 : Record 5965;
      ServiceLedgerEntry@1002 : Record 5907;
      ServiceContractLine@1003 : Record 5964;
    BEGIN
      // [SCENARIO] Test Service Ledger entries Created with Document Types Shipment and Creditmemo after Posting Service Credit Memo when Invoice is Posted with Invoice Period Quarter.

      // Setup: Create Service Contract with signed and Service Credit Memo by inserting Credit Memo Header and running Get Prepaid Contract Entries.
      Initialize;
      CreateSignedServiceContractWithInvoicePeriod(ServiceContractHeader,ServiceContractLine);
      CreateServiceContractInvoice(ServiceContractHeader);
      PostServiceInvoice(ServiceContractHeader."Contract No.");
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Customer No.");
      GetPrepaidContractEntry(ServiceHeader,ServiceContractHeader."Contract No.");

      // Exercise: Post Service Credit Memo with Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Verify: Verify Service Ledger Entry Lines created with Document Type Shipment and Credit Memo
      // Verify entries created with Document Type Shipment Reverse of Document Type Credit Memo
      // And also verify Unit Cost Shipment equal to Unit Cost of Credit Memo.
      VerifyServiceLedgerEntry(ServiceContractHeader."Contract No.",ServiceLedgerEntry."Document Type"::"Credit Memo",1);
    END;

    [Test]
    PROCEDURE ErrorOnModifyTypeOnServiceLine@164();
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      // [SCENARIO] Test program does not allow to update the Type value on service line and populates error message.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      InitServiceLineWithSignedContract(ServiceLine);

      // Exercise: Update Type on Service Line.
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::" ");

      // Verify: Verify program not allow to update Type field value.
      Assert.ExpectedError(ServiceEntriesExistForServiceLineErr);
    END;

    [Test]
    PROCEDURE ErrorOnModifyNoOnServiceLine@162();
    VAR
      ServiceLine@1002 : Record 5902;
      GLAccount@1000 : Record 15;
    BEGIN
      // [SCENARIO] Test program does not allow to update the No. field value on service line and populates error message.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      GLAccount.FINDFIRST;
      InitServiceLineWithSignedContract(ServiceLine);

      // Exercise: Update Type on Service Line.
      ASSERTERROR ServiceLine.VALIDATE("No.",GLAccount."No.");

      // Verify: Verify program not allow to update No. field value.
      Assert.ExpectedError(ServiceEntriesExistForServiceLineErr);
    END;

    [Test]
    PROCEDURE ErrorOnModifyUnitPriceOnServiceLine@146();
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      // [SCENARIO] Test program does not allow to update the unit price on service line and populates error message.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      ServiceLine."Document Type" := ServiceLine."Document Type"::Invoice;
      ServiceLine."Document No." := LibraryUtility.GenerateGUID;
      ServiceLine."Line No." := 10000;
      ServiceLine.INSERT;
      InitServiceLineWithSignedContract(ServiceLine);

      // Exercise: Call OnModify trigger.
      ASSERTERROR ServiceLine.MODIFY(TRUE);

      // Verify: Verify program not allow to update Unit Price value.
      Assert.ExpectedError(ServiceEntriesExistForServiceLineErr);
    END;

    [Test]
    PROCEDURE ErrorOnModifyShortCutDimension1CodeOnServiceHeader@143();
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [SCENARIO] Test program does not allow to update the Shortcut Dimension 1 Code on Service Header and populates error message.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      InitServiceInvoiceWithContract(ServiceHeader);

      // Exercise: Change Shortcut Dimension 1 Code on service header.
      ASSERTERROR ServiceHeader.VALIDATE("Shortcut Dimension 1 Code",'');

      // Verify: Verify program not allow to update Shortcut Dimension Code value.
      Assert.ExpectedError(DimensionNotChangeableServiceEntriesExistErr);
    END;

    [Test]
    PROCEDURE ErrorOnModifyShortCutDimension2CodeOnServiceHeader@181();
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [SCENARIO] Test program does not allow to update the Shortcut Dimension 2 Code on service Header and populates error message.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      InitServiceInvoiceWithContract(ServiceHeader);

      // Exercise: Change Shortcut Dimension 2 Code on service header.
      ASSERTERROR ServiceHeader.VALIDATE("Shortcut Dimension 2 Code",'');

      // Verify: Verify program not allow to update Shortcut Dimension Code value.
      Assert.ExpectedError(DimensionNotChangeableServiceEntriesExistErr);
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler,DimensionSetEntriesNotEditablePageHandler)]
    PROCEDURE CheckDimensionSetEntriesPageWithContractNo@161();
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      // [SCENARIO] Dimension Set Entries page is in non editable mode when we check the line dimension with Contract No.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      CreateAndSignServiceContractWithInvoice(ServiceLine);

      // Exercise: Invoke Line Dimension With Contract No.
      InvokeLineDimensionFromServiceInvoice(ServiceLine,ServiceLine."Contract No.");

      // Verify: Verification is done in 'DimensionSetEntriesNotEditablePageHandler' handler method.
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,DimensionSetEntriesEditablePageHandler)]
    PROCEDURE CheckDimensionSetEntriesPageWithContractNoAndNotApplied@175();
    VAR
      ServiceLine@1003 : Record 5902;
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO] Dimension Set Entries page is in editable mode when we check the line dimension with Contract No and empty 'Appl.-to Service Entry'.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      CreateServiceInvoiceNotApplied(ServiceContractHeader,ServiceLine);

      // Exercise: Invoke Line Dimension With Contract No.
      InvokeLineDimensionFromServiceInvoice(ServiceLine,ServiceLine."Contract No.");

      // Verify: Verification is done in 'DimensionSetEntriesEditablePageHandler' handler method.
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler,DimensionSetEntriesEditablePageHandler)]
    PROCEDURE CheckEditDimensionSetEntriesPageWithoutContractNo@142();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // [SCENARIO] Edit Dimension Set Entries page is in editable mode when we check the line dimension with blank Contract No.

      // Setup: Create and sign Service Contract with Invoice.
      Initialize;
      CreateAndSignServiceContractWithInvoice(ServiceLine);

      // Exercise: Invoke Line Dimension With Blank Contract No.
      InvokeLineDimensionFromServiceInvoice(ServiceLine,'');

      // Verify: Verification is done in 'DimensionSetEntriesEditablePageHandler' handler method.
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler)]
    PROCEDURE ContractNoOnServiceItemLineWithExpirationDate@152();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceItemNo@1001 : Code[20];
    BEGIN
      // [SCENARIO] Test Contract No on the Service Item line should be populated when Service Order is created with Expiration Date of service contract header.

      // Setup: Create and sign Service Contract.
      Initialize;
      ServiceItemNo := CreateServiceContractWithExpirationDate(ServiceContractHeader);

      // Exercise: Create Service Order with expiration date.
      CreateServiceHeaderWithExpirartionDate(ServiceHeader,ServiceContractHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);

      // Verify: Verify Contract No on Service item line.
      ServiceItemLine.TESTFIELD("Contract No.",ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler,MsgHandler,ServContrListServItemListHandler)]
    PROCEDURE ContractNoOnServiceItemListWithExpirationDate@174();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceOrderPage@1000 : TestPage 5900;
      ServiceItemNo@1006 : Code[20];
    BEGIN
      // [SCENARIO] Test Contract No on Service contract List page when Service order Created with Expiration Date of Service Contract Header.

      // Setup: Create and sign Service Contract.
      Initialize;
      ServiceItemNo := CreateServiceContractWithExpirationDate(ServiceContractHeader);
      CreateServiceHeaderWithExpirartionDate(ServiceHeader,ServiceContractHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");

      // Exercise: Open Service Order Page and call contract no field lookup.
      ServiceOrderPage.OPENEDIT;
      ServiceOrderPage.FILTER.SETFILTER("No.",ServiceHeader."No.");
      ServiceOrderPage.ServItemLines."Contract No.".LOOKUP;

      // Verify: Verify has been done in ServContrListServItemListHandler.
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,MsgHandler)]
    PROCEDURE LastInvoiceDateOnServiceContractHeader@101();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      LockOpenServContract@1004 : Codeunit 5943;
    BEGIN
      // [SCENARIO] Test Last Invoice Date on Service Contract Header when Starting Date updated after Locked.

      // Setup: Create and modify Starting Date after Opening Service Contract.
      Initialize;
      CreateSignedServiceContractWithServicePeriod(ServiceContractHeader,ServiceContractLine);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceContractLine.DELETE(TRUE);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,CALCDATE('<CM>',WORKDATE),
        ServiceContractHeader."Invoice Period"::Month);

      // Exercise: Lock Service Contract after modifing.
      LockOpenServContract.LockServContract(ServiceContractHeader);

      // Verify: Verify Last Invoice Date on Service Contract Header.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceContractHeader.TESTFIELD("Last Invoice Date",ServiceContractHeader."Starting Date");
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,MsgHandler,CreateContractInvoicesRequestPageHandler)]
    PROCEDURE RunCreateServiceInvoiceAfterServiceContractLocked@172();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceHeader@1004 : Record 5900;
      LockOpenServContract@1000 : Codeunit 5943;
    BEGIN
      // [SCENARIO] Verify no Error message appear after create Service Invoice When Service Contractlocked.

      // Setup: Create and Lock Service Contract.
      Initialize;
      CreateSignedServiceContractWithServicePeriod(ServiceContractHeader,ServiceContractLine);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceContractLine.DELETE(TRUE);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,CALCDATE('<CM>',WORKDATE),
        ServiceContractHeader."Invoice Period"::Month);
      LockOpenServContract.LockServContract(ServiceContractHeader);

      // Exercise: Run Create Contract Invoices Report.
      COMMIT;  // Due to limitation in Request Page Testability Commit is required for this Test Case.
      LibraryVariableStorage.Enqueue(CALCDATE('<CM+1M>',WORKDATE));
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractInvoices;

      // Verify: Verify Invoice created with Contract No. with out any error Message.
      Assert.IsTrue(
        FindServiceDocumentWithContractNo(ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No."),
        STRSUBSTNO(EntryMustExistErr,ServiceHeader.TABLECAPTION,ServiceContractHeader."Contract No."));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,ReportHandler)]
    PROCEDURE MixedCurrenciesOnContracts@170();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      CreateContractInvoices@1002 : Report 6030;
      ContractNo@1001 : ARRAY [2] OF Variant;
      i@1003 : Integer;
      CustomerNo@1004 : Code[20];
    BEGIN
      Initialize;
      // [SCENARIO] Create 2 contracts with different currencies:
      LibraryVariableStorage.Enqueue(2);
      FOR i := 1 TO 2 DO BEGIN
        PrepareServiceContractsForInvoiceGeneration(ServiceContractHeader,i,2);
        IF i = 1 THEN
          CustomerNo := ServiceContractHeader."Customer No."
        ELSE BEGIN
          ServiceContractHeader."Currency Code" := LibraryERM.CreateCurrencyWithRandomExchRates;
          ServiceContractHeader."Customer No." := CustomerNo;
          ServiceContractHeader."Bill-to Customer No." := CustomerNo;
        END;
        ServiceContractHeader.MODIFY(TRUE);
      END;
      COMMIT;
      CreateContractInvoices.SetOptions(WORKDATE,WORKDATE,0); // 0 => Create invoices
      CreateContractInvoices.SetHideDialog(TRUE);
      CLEAR(ServiceContractHeader);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      FOR i := 1 TO 2 DO
        LibraryVariableStorage.Peek(ContractNo[i],i + 1);
      ServiceContractHeader.SETFILTER("Contract No.",'%1|%2',ContractNo[1],ContractNo[2]);
      ASSERTERROR CreateContractInvoices.RUN;
      Assert.ExpectedError('has service contracts with different currency codes');
      Assert.ExpectedError('Limit the Create Contract Invoices batch job to certain currency codes');
      Assert.ExpectedError('or clear the Combine Invoices field on the involved service contracts');
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,ReportHandler)]
    PROCEDURE ChangingCustomerNoOnContracts@173();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1001 : Record 5900;
      CreateContractInvoices@1002 : Report 6030;
      ContractNo@1005 : ARRAY [3] OF Variant;
      i@1003 : Integer;
      ExpectedCount@1006 : Integer;
      CustomerNo@1004 : Code[20];
      ShiptoAddressCode@1007 : Code[10];
    BEGIN
      Initialize;
      // [SCENARIO] Create 3 contracts with 2 different customer numbers:
      LibraryVariableStorage.Enqueue(3);
      FOR i := 1 TO 3 DO BEGIN
        PrepareServiceContractsForInvoiceGeneration(ServiceContractHeader,i,3);
        IF i = 2 THEN BEGIN
          CustomerNo := ServiceContractHeader."Customer No.";
          ShiptoAddressCode := ServiceContractHeader."Ship-to Code";
        END;
        IF i = 3 THEN BEGIN
          ServiceContractHeader."Customer No." := CustomerNo;
          ServiceContractHeader."Bill-to Customer No." := CustomerNo;
          ServiceContractHeader."Ship-to Code" := ShiptoAddressCode;
        END;
        ServiceContractHeader.MODIFY(TRUE);
      END;
      COMMIT;
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      ExpectedCount := ServiceHeader.COUNT;
      CLEAR(ServiceContractHeader);
      ServiceContractHeader.SETRANGE("Contract Type",ServiceContractHeader."Contract Type"::Contract);
      FOR i := 1 TO 3 DO
        LibraryVariableStorage.Peek(ContractNo[i],i + 1);
      ServiceContractHeader.SETFILTER("Contract No.",'%1|%2|%3',ContractNo[1],ContractNo[2],ContractNo[3]);
      CreateContractInvoices.SETTABLEVIEW(ServiceContractHeader);
      CreateContractInvoices.SetOptions(WORKDATE,WORKDATE,0); // 0 => Create invoices
      CreateContractInvoices.SetHideDialog(TRUE);
      CreateContractInvoices.RUN;
      Assert.AreEqual(ExpectedCount + 2,ServiceHeader.COUNT,'Wrong number of service invoices created.');
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler,CreateContractServiceOrdersRequestPageHandler,ServiceGetShipmentHandler)]
    PROCEDURE PostServiceInvoiceByGetShipmentLines@277();
    VAR
      ServiceContractHeader@1004 : Record 5965;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // [SCENARIO] Test No. of Posted Invoices should be updated when creating and posting a service invoice by Get Shipment Lines function

      // Setup: Create Service Contract and Sign Service Contract.
      Initialize;
      CreateAndSignServiceContract(ServiceContractHeader);

      // Create a Service Order. Create Service Line and update Qty to Invoice. Post Created Service Order
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractServiceOrders;
      CreateServiceLineForServiceOrder(ServiceHeader,ServiceContractHeader."Contract No.");
      UpdateServiceLineForQtyToInvoice(ServiceLine,ServiceHeader."No.",ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE); // Post Ship and Invoice.

      // Exercise: Create a Service Invoice by Get Shipment Lines function. Post Service Invoice.
      CreateAndPostServiceInvoiceByGetShipmentLines(ServiceLine."Customer No.",ServiceHeader."No.");

      // Verify: Verify No. of Posted Invoices updated on Service Contract Header.
      VerifyServiceContractHeaderForNoOfUnpostedInvoices(ServiceContractHeader,2);
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE PostServiceInvoiceFromServiceContractWithLineDiscount@193();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      // [SCENARIO] Test GL Entries after posting Prepaid Contract Entries for a Service Contrct with All Discount.
      PostServiceInvoiceFromServiceContractWithDiscount(SalesReceivablesSetup."Discount Posting"::"Line Discounts");
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE PostServiceInvoiceFromServiceContractWithNoDiscount@194();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      // [SCENARIO] Test GL Entries after posting Prepaid Contract Entries for a Service Contrct with No Discount.
      PostServiceInvoiceFromServiceContractWithDiscount(SalesReceivablesSetup."Discount Posting"::"No Discounts");
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE NoGLEntriesWhenPostPrepaidServContractEntriesOnInvAndCrMemo@199();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      CurrentWorkDate@1013 : Date;
      NonPrepaidContrAccCode@1002 : Code[20];
    BEGIN
      // [SCENARIO 360390] Test verifies that no GL Entries created after posting Prepaid Contract Entries for Service Contract with Invoice and Credit Memo

      // [GIVEN] Signed Service Contract with "Invoice Period" = Year
      Initialize;
      CreateContractWithInvPeriodYear(ServiceContractHeader,ServiceContractLine);
      NonPrepaidContrAccCode :=
        GetNonPerpaidContractAccFromCust(ServiceContractHeader."Customer No.",ServiceContractHeader."Serv. Contract Acc. Gr. Code");

      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SetStartingDateAsNextInvDateAndSignContract(ServiceContractHeader);

      // [GIVEN] Posted Service Invoice
      InitCurrWorkDateAndPostServiceInvoice(CurrentWorkDate,ServiceContractHeader);

      // [GIVEN] Posted Credit Memo
      PostServiceCreditMemo(ServiceContractHeader);

      // [WHEN] Run "Post Prepaid Service Contract Entries" batch job
      PostPrepaidContractEntry(
        ServiceContractHeader."Contract No.",CALCDATE('<1Y>',WORKDATE),WORKDATE);

      // [THEN] No G/L Entries are created
      Assert.IsTrue(
        NoGLEntriesFound(NonPrepaidContrAccCode,ServiceContractHeader."Contract No."),GLEntriesExistsErr);

      // Cleanup: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE SignLockedServiceContractQuote@171();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      LockOpenServContract@1002 : Codeunit 5943;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      // [SCENARIO 360817] Sign Service Contract Quote with Status "Locked"

      // [GIVEN] Locked Service Contract Quote
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      LockOpenServContract.LockServContract(ServiceContractHeader);
      ServiceContractHeader.FIND;

      // [WHEN] Sign Service Contract Quote
      SignServContractDoc.SignContractQuote(ServiceContractHeader);

      // [THEN] Service contract created
      ServiceContractHeader."Contract Type" := ServiceContractHeader."Contract Type"::Contract;
      ServiceContractHeader.FIND;
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,CreateContractInvoicesRequestPageHandler,MsgHandler)]
    PROCEDURE AmountPerPartialPeriodInServiceContractWithExpirationDate@197();
    VAR
      ServiceContractHeader@1001 : Record 5965;
    BEGIN
      // [SCENARIO 360831] Amount Per Period is equal to Service Invoice Amount when partial quarter period ended on Expiration Date

      // [GIVEN] Service Contract with Prepaid = False, Invoice Period = Quarter
      Initialize;
      CreateServiceContractWithInvPeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Quarter);
      PrepaidFalseInServiceContract(ServiceContractHeader);
      // [GIVEN] Expiration Date 'D' = end of 2nd quarter
      ModifyServiceContractExpirationDate(
        ServiceContractHeader,CALCDATE('<2Q>',ServiceContractHeader."Starting Date"));
      SignServContractDoc.SignContract(ServiceContractHeader);
      // [GIVEN] Posted Service Invoice posted in 1st quarter
      CreateContractInvoices(ServiceContractHeader);

      // [WHEN] Post Service Invoice in 2nd quarter with period ended on date 'D' and Service Invoice Amount = 'X'
      CreateContractInvoices(ServiceContractHeader);

      // [THEN] Amount Per Period = 'X'
      Assert.AreEqual(
        GetTotalServLineAmount(ServiceContractHeader."Contract No."),ServiceContractHeader."Amount per Period",
        IncorrectAmountPerPeriodErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,CreateContractInvoicesRequestPageHandler,MsgHandler)]
    PROCEDURE PostSecondServiceInvoiceFromServiceContract@249();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServicePeriod@1000 : DateFormula;
    BEGIN
      // [SCENARIO 363400] Service contract is posted and contract invoices Amount is not deducted from following invoices.
      Initialize;

      // [GIVEN] Service Contract with Prepaid = False, Invoice Period = Year and "Line Value" = "X"
      CreateServiceContractWithInvPeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Year);
      PrepaidFalseInServiceContract(ServiceContractHeader);

      // [GIVEN] Service Period in Service Contract = Year
      EVALUATE(ServicePeriod,'<1Y>');
      ServiceContractHeader.VALIDATE("Service Period",ServicePeriod);
      ServiceContractHeader.MODIFY(TRUE);

      // [GIVEN] Signed Contract and Created Service Contract Invoice
      SignServContractDoc.SignContract(ServiceContractHeader);

      // [WHEN] Create Contract Invoice "Y"
      CreateContractInvoices(ServiceContractHeader);

      // [THEN] Contract Invoice "Y" has Service Line "Amount" = "X"
      VerifyServiceLineAmount(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,CreateContractInvoicesRequestPageHandler,MsgHandler)]
    PROCEDURE AmountPerYearPartialPeriodInServiceContractWithExpirationDate@200();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 360915.1] Amount Per Period is equal to Service Invoice Amount when partial year period ended on Expiration Date

      // [GIVEN] Service Contract with Prepaid = True, Invoice Period = Year
      Initialize;
      CreateServiceContractWithInvPeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Year);
      // [GIVEN] Expiration Date 'D' = Starting Date + 1Year - X days
      ModifyServiceContractExpirationDate(
        ServiceContractHeader,CALCDATE('<1Y-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ServiceContractHeader."Starting Date"));
      SignServContractDoc.SignContract(ServiceContractHeader);

      // [WHEN] Post Service Invoice in period ended on date 'D' and Service Invoice Amount = 'X'
      CreateContractInvoices(ServiceContractHeader);

      // [THEN] Amount Per Period = 'X'
      Assert.AreEqual(
        GetTotalServLineAmount(ServiceContractHeader."Contract No."),ServiceContractHeader."Amount per Period",
        IncorrectAmountPerPeriodErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE UT_CalcYearContractAmountWhenExpirationDateEqualPeriodEndDate@229();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServContractManagement@1000 : Codeunit 5940;
      ExpirationDateFormula@1003 : DateFormula;
      InvoiceAmount@1002 : Decimal;
    BEGIN
      // [SCENARIO 360915.2] Amount Per Period is equal to Service Invoice Amount for period Year when Expiration Date is equal the end of period

      // [GIVEN] Service Contract with Expiration Date 'D' = Starting Date + 1Year - X days
      Initialize;
      EVALUATE(ExpirationDateFormula,'<1Y-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      CreateAndSignYearServiceContractWithExpirationDate(ServiceContractHeader,ExpirationDateFormula);

      // [WHEN] Calculate contract invoice amount = 'X'
      InvoiceAmount :=
        ServContractManagement.CalcContractAmount(ServiceContractHeader,
          ServiceContractHeader."Next Invoice Period Start",ServiceContractHeader."Next Invoice Period End");

      // [THEN] Amount Per Period = 'X'
      Assert.AreEqual(
        ServiceContractHeader."Amount per Period",InvoiceAmount,IncorrectInvAmountErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE UT_CalcYearContractAmountWhenExpirationDateLaterPeriodEndDate@230();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServContractManagement@1000 : Codeunit 5940;
      ExpirationDateFormula@1003 : DateFormula;
      InvoiceAmount@1002 : Decimal;
    BEGIN
      // [SCENARIO 360915.3] Amount Per Period is equal to Service Invoice Amount for period Year when Expiration Date is later then then end of period

      // [GIVEN] Service Contract with Expiration Date 'D' = End of Starting Date's month + 1Year + X days
      Initialize;
      EVALUATE(ExpirationDateFormula,'<CM+1Y+' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      CreateAndSignYearServiceContractWithExpirationDate(ServiceContractHeader,ExpirationDateFormula);

      // [WHEN] Calculate contract invoice amount = 'X'
      InvoiceAmount :=
        ServContractManagement.CalcContractAmount(ServiceContractHeader,
          ServiceContractHeader."Next Invoice Period Start",ServiceContractHeader."Next Invoice Period End");

      // [THEN] Amount Per Period = 'X'
      Assert.AreEqual(
        ServiceContractHeader."Amount per Period",InvoiceAmount,IncorrectInvAmountErr);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MsgHandler)]
    PROCEDURE ServiceQuoteLinkMakeLinksToContractAndInvoice@214();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceHeader@1004 : Record 5900;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [FEATURE] [Record Link]
      // [SCENARIO 122140] Make Contract in Service Contract Quote page copy links to Service Contract/Service Invoice
      // [GIVEN] Service Contract Quote with random Link added
      Initialize;
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Quote);
      ServiceContractHeader.ADDLINK(LibraryUtility.GenerateRandomText(10));
      // [WHEN] Sign Service Contract Quote
      SignServContractDoc.SignContractQuote(ServiceContractHeader);
      // [THEN] Created Service Contract has attached Link
      VerifyServiceContractHasLink(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      // [THEN] Created Service Invoice has attached link
      VerifyServiceHeaderHasLink(ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE CreditMemoPostingDate@218();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      CurrentWorkDate@1013 : Date;
      CreditMemoDate@1003 : Date;
    BEGIN
      // [FEATURE] [Credit Memo]
      // [SCENARIO 123942] Credit Memo's "Posting Date", "Document Date" filled with values from Service Contract Line's "Credit Memo Date"
      Initialize;

      // [GIVEN] Signed Service Contract with "Invoice Period" = Year
      CreateSignedServiceContractWithInvoicePeriodYear(ServiceContractHeader,ServiceContractLine);

      // [GIVEN] Posted Service Invoice
      InitCurrWorkDateAndPostServiceInvoice(CurrentWorkDate,ServiceContractHeader);

      // [WHEN] Create Credit Memo from Service contract with "Service Contract Line"."Credit Memo Date" = CrMemoDate
      ModifyServiceContractStatus(ServiceContractHeader);
      CreditMemoDate := LibraryRandom.RandDate(-10);
      CreateServiceCreditMemo(ServiceContractHeader."Contract No.",CreditMemoDate);

      // [THEN] Credit Memo "Posting Date", "Document Date" = CrMemoDate
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Contract No.");
      WITH ServiceHeader DO BEGIN
        Assert.AreEqual(CreditMemoDate,"Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(CreditMemoDate,"Document Date",FIELDCAPTION("Document Date"));
      END;

      // TearDown
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE CrMemoAppliedToCorrespondentInvServLedgEntries@216();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      CurrentWorkDate@1013 : Date;
    BEGIN
      // [FEATURE] [Credit Memo]
      // [SCENARIO 123942] Credit Memo Service Ledger Entries are applied to correspondent Invoice Service Ledger Entries
      Initialize;

      // [GIVEN] Signed Service Contract with "Invoice Period" = Year
      CreateSignedServiceContractWithInvoicePeriodYear(ServiceContractHeader,ServiceContractLine);

      // [GIVEN] Posted Service Invoice
      InitCurrWorkDateAndPostServiceInvoice(CurrentWorkDate,ServiceContractHeader);

      // [WHEN] Posted Credit Memo
      PostServiceCreditMemo(ServiceContractHeader);

      // [THEN] Credit Memo "Service Ledger Entry"."Applies-to Entry No." = Invoice "Service Ledger Entry"."Entry No."
      // [THEN] Credit Memo "Service Ledger Entry"."Posting Date" = Invoice "Service Ledger Entry"."Posting Date"
      // [THEN] Credit Memo "Service Ledger Entry"."Amount (LCY)" = - Invoice "Service Ledger Entry"."Amount (LCY)"
      VerifyCrMemoLinkedToInvServLedgEntries(ServiceContractHeader."Contract No.");

      // TearDown
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE PostPrepaidServiceContractTwiceWithDiffDimension@222();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      LockOpenServContract@1003 : Codeunit 5943;
    BEGIN
      // [FEATURE] [Prepaid Contract] [Post Prepaid Contract Entries] [Dimension]
      // [SCENARIO 363040] Post Prepaid Contract Entries batch job used Dimension Set ID from last Service Ledger Entry

      Initialize;
      // [GIVEN] Service Contract with Dimension "X"
      CreateSignServiceContractWithDimension(ServiceContractHeader);
      // [GIVEN] Posted Service Invoice
      CreateAndPostServiceInvoiceFromServiceContract(ServiceContractHeader);
      // [GIVEN] Posted Prepaid Contract Entry with dimension "X"
      PostPrepaidContractEntryWithNextInvoiceDate(ServiceContractHeader);
      // [GIVEN] Update of dimension from "X" to "Y" in Service Contract
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      UpdateDimensionInServiceContract(ServiceContractHeader);
      // [GIVEN] Posted Service Invoice
      LockOpenServContract.LockServContract(ServiceContractHeader);
      CreateAndPostServiceInvoiceFromServiceContract(ServiceContractHeader);

      // [WHEN] Run "Post Prepaid Service Contract Entries" batch job
      PostPrepaidContractEntryWithNextInvoiceDate(ServiceContractHeader);

      // [THEN] G/L Entry posted with Dimension "Y"
      VerifyDimensionInGLEntry(
        GetPrepaidContractAccFromAccGroup(ServiceContractHeader."Serv. Contract Acc. Gr. Code"),
        ServiceContractHeader."Contract No.",ServiceContractHeader."Shortcut Dimension 1 Code");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE OnSignServiceContractWithSmallLineAmount@225();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      // [FEATURE] [Service Contract]
      // [SCENARIO 363351] Sign Service Contract having Line with Unit Price equals to "Unit-Amount Rounding Precision"/2 + very small decimal
      Initialize;

      // [GIVEN] Service Contract having one Line
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);

      // [GIVEN] Service Contract Line has such Line Amount that Unit Price equals to "Unit-Amount Rounding Precision"/2 + very small decimal
      ServiceContractLine."Line Value" := GetSmallestLineAmount(ServiceContractHeader."Starting Date") + 0.000000000001;
      ServiceContractLine.MODIFY;
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");

      // [WHEN] Sign Service Contract
      SignServContractDoc.SignContract(ServiceContractHeader);

      // [THEN] Service Contract has been posted successfuly
      ServiceContractLine.FIND;
      Assert.AreEqual(
        ServiceContractLine."Contract Status"::Signed,
        ServiceContractLine."Contract Status",
        ServiceContractHeader.FIELDCAPTION(Status));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE PostPrepaidServiceContractTwoInvWithDiffDimension@296();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      LockOpenServContract@1003 : Codeunit 5943;
      ExpectedDimensionCode@1001 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Prepaid Contract] [Post Prepaid Contract Entries] [Dimension]
      // [SCENARIO 363536] Post Prepaid Contract Entries batch job used Dimension Set ID from certain service contract

      Initialize;
      // [GIVEN] Service Contract with Dimension "X"
      CreateSignServiceContractWithDimension(ServiceContractHeader);
      ExpectedDimensionCode[1] := ServiceContractHeader."Shortcut Dimension 1 Code";
      // [GIVEN] Posted Service Invoice
      CreateAndPostServiceInvoiceFromServiceContract(ServiceContractHeader);
      // [GIVEN] Update of dimension from "X" to "Y" in Service Contract
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      UpdateDimensionInServiceContract(ServiceContractHeader);
      ExpectedDimensionCode[2] := ServiceContractHeader."Shortcut Dimension 1 Code";
      // [GIVEN] Posted Service Invoice
      LockOpenServContract.LockServContract(ServiceContractHeader);
      CreateAndPostServiceInvoiceFromServiceContract(ServiceContractHeader);

      // [WHEN] Run "Post Prepaid Service Contract Entries" batch job
      PostPrepaidContractEntryWithNextInvoiceDate(ServiceContractHeader);

      // [THEN] Two G/L Entries posted with dimensions "X" and "Y" accordingly
      VerifyDimensionInGLEntries(
        GetPrepaidContractAccFromAccGroup(ServiceContractHeader."Serv. Contract Acc. Gr. Code"),
        ServiceContractHeader."Contract No.",ExpectedDimensionCode);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,MsgHandler,ServContrctTemplateListHandler)]
    PROCEDURE SignServiceContractWithServiceItemDescriptionOf50Chars@228();
    VAR
      ServContractHeader@1001 : Record 5965;
      SignServContractDoc@1004 : Codeunit 5944;
      ExpectedDescPart1@1002 : Text;
      ExpectedDescPart2@1005 : Text;
    BEGIN
      // [SCENARIO 372111] Sign Service Contract with Service Item Description of 50 characters

      LightInit;
      // [GIVEN] Service Contract with Service Contract Line = "SCL"
      // [GIVEN] LENGTH("SCL".Description) = 50
      CreateServiceContractHeader(ServContractHeader,'');
      CreateServiceContractLineWithDescription(ServContractHeader,ExpectedDescPart1,ExpectedDescPart2);

      // [WHEN] Sign Service Contract
      SignServContractDoc.SignContract(ServContractHeader);

      // [THEN] String of description "Desc" = "SCL"."Service Item No." + ' ' + "SCL".Description
      // [THEN] Two Service Line should be created:
      // [THEN] First Service Line must contains first 50 characters of "Desc"
      // [THEN] Second Service Line must contains characters from 50 to end of "Desc"
      VerifyServiceLineDescription(ExpectedDescPart1,ExpectedDescPart2);
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE UT_SystemAllowZeroLineValueServiceContractLine@234();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375942] System allows zero value of "Line Value" of "Service Contract Line".

      Initialize;
      // [GIVEN] Service Contract Header with Service Contract Line
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      ServiceContractLine.INIT;
      ServiceContractLine."Contract Type" := ServiceContractLine."Contract Type"::Contract;
      ServiceContractLine."Contract No." := ServiceContractHeader."Contract No.";

      // [WHEN] "Line Value" of Service Contract Line is set to zero value
      ServiceContractLine.VALIDATE("Line Value",0);

      // [THEN] "Line Value" = 0
      ServiceContractLine.TESTFIELD("Line Value",0);
    END;

    [Test]
    [HandlerFunctions(ServContrctTemplateListHandler,SignContractConfirmHandler)]
    PROCEDURE UT_SystemAllowPositiveLineValueServiceContractLine@235();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1000 : Record 5964;
      LineValue@1001 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375942] System allows positive value of "Line Value" of "Service Contract Line".

      Initialize;
      // [GIVEN] Service Contract Header with Service Contract Line
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      ServiceContractLine.INIT;
      ServiceContractLine."Contract Type" := ServiceContractLine."Contract Type"::Contract;
      ServiceContractLine."Contract No." := ServiceContractHeader."Contract No.";
      LineValue := LibraryRandom.RandInt(1000);

      // [WHEN] "Line Value" of Service Contract Line is set to positive value = "X"
      ServiceContractLine.VALIDATE("Line Value",LineValue);

      // [THEN] "Line Value" = "X"
      ServiceContractLine.TESTFIELD("Line Value",LineValue);
    END;

    [Test]
    PROCEDURE UT_SystemNotAllowNegativeLineValueServiceContractLine@201();
    VAR
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375942] System doesn't allow negative value of "Line Value" of "Service Contract Line".

      Initialize;
      // [GIVEN] Service Contract Line
      ServiceContractLine.INIT;

      // [WHEN] "Line Value" of Service Contract Line is set to negative value
      ASSERTERROR ServiceContractLine.VALIDATE("Line Value",-LibraryRandom.RandInt(1000));

      // [THEN] Error message of disabling negative value appears
      Assert.ExpectedErrorCode(PositiveValueErrorCodeErr);
      Assert.ExpectedError(STRSUBSTNO(PositiveValueErrorErr));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,CreateContractServiceOrdersRequestPageHandler,MsgCannotCreateHandler)]
    PROCEDURE SystemNotAllowCreateServiceOrderWithoutCustomerShipToAddress@208();
    VAR
      ContracNo@1001 : Code[20];
      CustomerNo@1000 : Code[20];
      ShiptoCode@1002 : Code[10];
    BEGIN
      // [SCENARIO 379111] System doesn't allow create service contact if Ship-to address from service contract doesn't own customer

      Initialize;
      // [GIVEN] Service Contract Header with not existing Ship-to Code
      CreateUpdateServiceContract(ContracNo,CustomerNo,ShiptoCode);
      LibraryVariableStorage.Enqueue(ContracNo);
      COMMIT;

      // [WHEN] Run report "Create Contract Service Orders"
      RunCreateContractServiceOrders;

      // [THEN] Message "A service order cannot be created for contract no..." appeared
      Assert.ExpectedMessage(
        STRSUBSTNO(CannotCreateServiceOrderMsg,ContracNo,CustomerNo,ShiptoCode),LibraryVariableStorage.DequeueText);
      Assert.ExpectedMessage(ZeroOrderCreatedMsg,LibraryVariableStorage.DequeueText);
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,CheckCreditLimit_ReplyNo)]
    PROCEDURE ServiceContractCreditLimitWarning_ReplyNo@25();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      Customer@1001 : Record 18;
      ServiceContract@1000 : TestPage 6050;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379269] Credit limit warning page is shown when validate Customer with overdue balance (reply No)
      Initialize;
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Open new Service Contract
      ServiceContract.OPENNEW;
      // [GIVEN] Validate "Customer No."
      LibraryVariableStorage.Enqueue(Customer."No.");
      ASSERTERROR ServiceContract."Customer No.".SETVALUE(Customer."No.");

      // [WHEN] Reply "No" on Credit Limit warning page
      // CheckCreditLimit_ReplyNo

      // [THEN] "Customer No." validation has been discarded and following message is shown: "The update has been interrupted to respect the warning."
      Assert.ExpectedErrorCode('TestValidation');
      Assert.ExpectedError(CrLimitWarningMsg);
      ServiceContract."Customer No.".ASSERTEQUALS('');
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,CheckCreditLimit_ReplyYes)]
    PROCEDURE ServiceContractCreditLimitWarning_ReplyYes@257();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      Customer@1001 : Record 18;
      ServiceContract@1000 : TestPage 6050;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379269] Credit limit warning page is shown when validate Customer with overdue balance (reply Yes)
      Initialize;
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Open new Service Contract
      ServiceContract.OPENNEW;
      // [GIVEN] Validate "Customer No."
      LibraryVariableStorage.Enqueue(Customer."No.");
      ServiceContract."Customer No.".SETVALUE(Customer."No.");

      // [WHEN] Reply "Yes" on Credit Limit warning page
      // CheckCreditLimit_ReplyYes

      // [THEN] "Customer No." has been validated
      ServiceContract."Customer No.".ASSERTEQUALS(Customer."No.");
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,CheckCreditLimit_ReplyNo)]
    PROCEDURE ServiceContractQuoteCreditLimitWarning_ReplyNo@202();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      Customer@1001 : Record 18;
      ServiceContractQuote@1000 : TestPage 6053;
    BEGIN
      // [FEATURE] [Credit Limit] [UI] [Quote]
      // [SCENARIO 379269] Credit limit warning page is shown when validate Customer with overdue balance on Service Contract Quote (reply No)
      Initialize;
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Open new Service Contract Quote
      ServiceContractQuote.OPENNEW;
      // [GIVEN] Validate "Customer No."
      LibraryVariableStorage.Enqueue(Customer."No.");
      ASSERTERROR ServiceContractQuote."Customer No.".SETVALUE(Customer."No.");

      // [WHEN] Reply "No" on Credit Limit warning page
      // CheckCreditLimit_ReplyNo

      // [THEN] "Customer No." validation has been discarded and following message is shown: "The update has been interrupted to respect the warning."
      Assert.ExpectedErrorCode('TestValidation');
      Assert.ExpectedError(CrLimitWarningMsg);
      ServiceContractQuote."Customer No.".ASSERTEQUALS('');
    END;

    [Test]
    [HandlerFunctions(ServContractConfirmHandler,CheckCreditLimit_ReplyYes)]
    PROCEDURE ServiceContractQuoteCreditLimitWarning_ReplyYes@136();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      Customer@1001 : Record 18;
      ServiceContractQuote@1000 : TestPage 6053;
    BEGIN
      // [FEATURE] [Credit Limit] [UI] [Quote]
      // [SCENARIO 379269] Credit limit warning page is shown when validate Customer with overdue balance on Service Contract Quote (reply Yes)
      Initialize;
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Open new Service Contract Quote
      ServiceContractQuote.OPENNEW;
      // [GIVEN] Validate "Customer No."
      LibraryVariableStorage.Enqueue(Customer."No.");
      ServiceContractQuote."Customer No.".SETVALUE(Customer."No.");

      // [WHEN] Reply "Yes" on Credit Limit warning page
      // CheckCreditLimit_ReplyYes

      // [THEN] "Customer No." has been validated
      ServiceContractQuote."Customer No.".ASSERTEQUALS(Customer."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractCreditMemoOK@239();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // [FEATURE] [Service Credit Memo]
      // [SCENARIO 379295] Service Credit Memo posted successfully for Contract with several Items and empty Service Item Nos.
      Initialize;

      // [GIVEN] Signed Service Contract "SC" with Invoice Period = Half Year
      // [GIVEN] Several Service Contract Lines: "Service Item No." empty, "Item No." not empty
      CreateServiceContractForSeveralItems(ServiceContractHeader,ServiceContractLine);
      SignServContractDoc.SignContract(ServiceContractHeader);
      // [GIVEN] Posted Service Invoice with "Posting Date" = "SC"."Starting Date"
      CreateServiceInvoice(ServiceContractHeader);
      PostServiceInvoice(ServiceContractHeader."Contract No.");
      // [GIVEN] Service Credit Memo with "Posting Date" = "SC"."Starting Date" + one month
      CreateServiceCreditMemoForNextMonth(ServiceContractHeader,ServiceContractLine);

      // [WHEN] Posting Service Credit Memo
      PostServiceCreditMemo(ServiceContractHeader);

      // [THEN] No error occurs and Credit Memo Service Ledger entries are linked to that of Service Invoice
      VerifyCrMemoLinkedToInvServLedgEntries(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractQuoteWithFullLineDiscount@247();
    VAR
      ServiceContractHeader@1005 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO 380005] Sign-off Service Contract Quote when 100% line discount is applied.

      Initialize;

      // [GIVEN] Create Service Contract Quote with "None" Invoice Period
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Quote);
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,WORKDATE,ServiceContractHeader2."Invoice Period"::None);

      // [WHEN] Apply 100% Line Discount
      UpdateServiceContractLineDiscount(ServiceContractHeader,100);

      // [THEN] Sing-Off Service Contract Quote
      ServiceContractHeader.FIND;
      SignServContractDoc.SignContractQuote(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler)]
    PROCEDURE ServiceContractWithFullLineDiscount@246();
    VAR
      ServiceContractHeader@1005 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      // [SCENARIO 380005] Sign-off Service Contract when 100% line discount is applied.

      Initialize;

      // [GIVEN] Create Service Contract with "None" Invoice Period
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,WORKDATE,ServiceContractHeader."Invoice Period"::None);

      // [WHEN] Apply 100% Line Discount
      UpdateServiceContractLineDiscount(ServiceContractHeader,100);

      // [THEN] Sing-Off Service Contract
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    [Test]
    [HandlerFunctions(ContractTemplateConfirmHandlerFalse)]
    PROCEDURE CopyBilltoContactToServiceHeader@236();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceHeader@1002 : Record 5900;
      ServContractManagement@1000 : Codeunit 5940;
      ServiceHeaderNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 224033] Fields "Bill-to Contact No." and "Bill-to Contact" must be copied from Service Contract to Service Header by function ServContractManagement.CreateServHeader
      Initialize;

      // [GIVEN] Service Contract with "Bill-to Contact No." = "ContNo" and "Bill-to Contact" = "John Smith"
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,LibrarySales.CreateCustomerNo);
      ServiceContractHeader."Bill-to Contact No." :=
        LibraryUtility.GenerateRandomCode(ServiceContractHeader.FIELDNO("Bill-to Contact No."),DATABASE::"Service Contract Header");
      ServiceContractHeader."Bill-to Contact" := LibraryUtility.GenerateGUID;
      ServiceContractHeader.MODIFY;

      // [WHEN] Invoke ServContractManagement.CreateServHeader
      ServiceHeaderNo := ServContractManagement.CreateServHeader(ServiceContractHeader,WORKDATE,TRUE);

      // [THEN] "Service Header"."Bill-to Contact No." = "ContNo"
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,ServiceHeaderNo);
      ServiceHeader.TESTFIELD("Bill-to Contact No.",ServiceContractHeader."Bill-to Contact No.");

      // [THEN] "Service Header"."Bill-to Contact" = "John Smith"
      ServiceHeader.TESTFIELD("Bill-to Contact",ServiceContractHeader."Bill-to Contact");
    END;

    LOCAL PROCEDURE Initialize@47();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LightInit;

      LibrarySetupStorage.Restore;
      CLEAR(LibraryService);
      WORKDATE := InitialWorkDate;

      IF isInitialized THEN
        EXIT;

      // Setup demonstration data
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateAccountsInServiceContractAccountGroups;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Service Mgt. Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      COMMIT;
    END;

    LOCAL PROCEDURE LightInit@209();
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(SignServContractDoc);
    END;

    LOCAL PROCEDURE CopyDefaultHoursFromSetup@76(ServiceContractNo@1000 : Code[20]);
    VAR
      ServiceHour@1001 : Record 5910;
    BEGIN
      ServiceHour.SETRANGE("Service Contract Type",ServiceHour."Service Contract Type"::Quote);
      ServiceHour.SETRANGE("Service Contract No.",ServiceContractNo);
      ServiceHour.CopyDefaultServiceHours;
    END;

    LOCAL PROCEDURE CreateSignedServiceContractWithServicePeriod@168(VAR ServiceContractHeader@1000 : Record 5965;VAR ServiceContractLine@1001 : Record 5964);
    VAR
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServicePeriodOnServiceContractHeader(ServiceContractHeader);
      UpdateAnnualAmountOnServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateAndModifyServiceContract@124(VAR ServiceContractHeader@1000 : Record 5965;CustomerNo@1001 : Code[20];ContractType@1003 : Option);
    VAR
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ContractType,CustomerNo);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
    END;

    LOCAL PROCEDURE CreateAndPostServiceInvoiceByGetShipmentLines@180(CustomerNo@1002 : Code[20];OrderNo@1001 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,CustomerNo);
      ServiceLine.VALIDATE("Document Type",ServiceHeader."Document Type");
      ServiceLine.VALIDATE("Document No.",ServiceHeader."No.");
      LibraryVariableStorage.Enqueue(ServiceHeader."No.");
      LibraryVariableStorage.Enqueue(OrderNo);
      ServiceGetShipment.RUN(ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE); // Post Ship and Invoice.
    END;

    LOCAL PROCEDURE CreateAndPostServiceInvoiceFromServiceContract@191(ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceHeader@1002 : Record 5900;
      InvoiceNo@1001 : Code[20];
    BEGIN
      InvoiceNo := CreateServiceInvoice(ServiceContractHeader);
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndSignServiceContractWithInvoice@151(VAR ServiceLine@1000 : Record 5902);
    VAR
      ServiceContractHeader@1002 : Record 5965;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      SignServContractDoc.SignContract(ServiceContractHeader);
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      ServiceLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndSignYearServiceContractWithExpirationDate@221(VAR ServiceContractHeader@1001 : Record 5965;ExpirationDateFormula@1000 : DateFormula);
    BEGIN
      CreateServiceContractWithInvPeriod(ServiceContractHeader,ServiceContractHeader."Invoice Period"::Year);
      ModifyServiceContractExpirationDate(
        ServiceContractHeader,CALCDATE(ExpirationDateFormula,ServiceContractHeader."Starting Date"));
      SignServContractDoc.SetHideDialog(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
    END;

    LOCAL PROCEDURE CreateContractHeader@94(VAR ServiceContractHeader@1003 : Record 5965);
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
      Customer@1001 : Record 18;
    BEGIN
      // Create Service Item and Service Contract Header.
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimension@90(VAR DefaultDimension@1001 : Record 352;Code@1000 : Code[10]);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::"Service Order Type",Code,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateCommentForServiceQuote@82(ServiceContractQuoteNo@1002 : Code[20]);
    VAR
      ServiceCommentLine@1000 : Record 5906;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      ServiceContractLine."Contract Type" := ServiceContractLine."Contract Type"::Quote;
      ServiceContractLine."Contract No." := ServiceContractQuoteNo;
      LibraryService.CreateCommentLineForServCntrct(ServiceCommentLine,ServiceContractLine,ServiceCommentLine.Type::General);
      ServiceCommentLine.VALIDATE(Date,WORKDATE);
      ServiceCommentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleContractLines@5(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceContractLine@1002 : Record 5964;
      Counter@1000 : Integer;
    BEGIN
      // Use RANDOM for creating Service Item Lines between 1 to 10.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(9) DO
        CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceContractCurrency@17(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceContractLine@1001 : Record 5964;
      Currency@1003 : Record 4;
    BEGIN
      LibraryERM.FindCurrency(Currency);
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      ServiceContractHeader.VALIDATE("Currency Code",Currency.Code);
      ServiceContractHeader.MODIFY(TRUE);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
    END;

    LOCAL PROCEDURE CreateAndSignContractOnToday@154(VAR ServiceContractHeader@1004 : Record 5965;VAR ServiceContractLine@1003 : Record 5964;ServiceContractAccountGroup@1001 : Record 5973);
    VAR
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      CreateContractHeader(ServiceContractHeader);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      ServiceContractHeader.VALIDATE("Starting Date",ServiceContractHeader."Next Invoice Date");
      WORKDATE := ServiceContractHeader."Next Invoice Date";
      SignServContractDoc.SetHideDialog := TRUE;
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndSignServiceContract@183(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT; // To save the changes.
    END;

    LOCAL PROCEDURE CreateAnalysisView@158(VAR AnalysisView@1000 : Record 363;AccountFilterToSet@1001 : Text[200];StartingDate@1002 : Date);
    BEGIN
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Account Filter",AccountFilterToSet);
      AnalysisView.VALIDATE("Date Compression",AnalysisView."Date Compression"::Day);
      AnalysisView.VALIDATE("Starting Date",StartingDate);
      AnalysisView.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@1879() : Code[20];
    VAR
      Item@1155 : Record 27;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateContractWithInvPeriodYear@224(VAR ServiceContractHeader@1000 : Record 5965;VAR ServiceContractLine@1001 : Record 5964);
    BEGIN
      WITH ServiceContractHeader DO BEGIN
        CreateContractHeader(ServiceContractHeader);
        VALIDATE("Invoice Period","Invoice Period"::Year);
        MODIFY(TRUE);
        CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      END;
    END;

    LOCAL PROCEDURE CreateSignServiceContractWithDimension@261(VAR ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      CreateContractHeader(ServiceContractHeader);
      UpdateDimensionInServiceContract(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeaderWithInvoicePeriod(
        ServiceContractHeader,CALCDATE('<-CM>',WORKDATE),
        ServiceContractHeader."Invoice Period"::Quarter);
      SignServContractDoc.SignContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
    END;

    LOCAL PROCEDURE CreateServiceContractHeader@128(VAR ServiceContractHeader@1000 : Record 5965;StandardTextCode@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,LibrarySales.CreateCustomerNo);
      ServiceContractHeader.VALIDATE("Print Increase Text",TRUE);
      ServiceContractHeader.VALIDATE("Price Inv. Increase Code",StandardTextCode);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLine@46(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Cost",1000 * LibraryRandom.RandDec(10,2));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Line Value",1000 * LibraryRandom.RandDec(10,2));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Service Period",ServiceContractHeader."Service Period");
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLineUpdateAnnualAmount@244(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Value",LibraryRandom.RandInt(1000));
      ServiceContractLine.MODIFY(TRUE);
      UpdateAnnualAmountOnServiceContractHeader(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceContractOrder@45(ServiceContractHeader@1000 : Record 5965);
    VAR
      CreateContractServiceOrders@1002 : Report 6036;
      CreateServOrders@1001 : Option;
    BEGIN
      CreateContractServiceOrders.SETTABLEVIEW(ServiceContractHeader);
      CreateContractServiceOrders.InitializeRequest(WORKDATE,WORKDATE,CreateServOrders);
      CreateContractServiceOrders.USEREQUESTPAGE(FALSE);
      CreateContractServiceOrders.RUN;
    END;

    LOCAL PROCEDURE CreateServiceCreditMemo@44(ContractNo@1000 : Code[20];CreditMemoDate@1003 : Date);
    VAR
      ServiceContractLine@1002 : Record 5964;
      ServContractManagement@1001 : Codeunit 5940;
    BEGIN
      WITH ServiceContractLine DO BEGIN
        SETRANGE("Contract No.",ContractNo);
        FINDFIRST;
        VALIDATE("Credit Memo Date",CreditMemoDate);
        MODIFY;
      END;
      ServContractManagement.CreateContractLineCreditMemo(ServiceContractLine,TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractInvoice@43(ServiceContractHeader@1000 : Record 5965);
    VAR
      CreateContractInvoices@1002 : Report 6030;
      CreateInvoice@1001 : Option;
    BEGIN
      CreateContractInvoices.SETTABLEVIEW(ServiceContractHeader);
      CreateContractInvoices.SetOptions(WORKDATE,WORKDATE,CreateInvoice);
      CreateContractInvoices.USEREQUESTPAGE(FALSE);
      CreateContractInvoices.RUN;
    END;

    LOCAL PROCEDURE CreateServiceContractTemplate@42(VAR ServiceContractTemplate@1001 : Record 5968);
    VAR
      DefaultServicePeriod@1000 : DateFormula;
    BEGIN
      EVALUATE(DefaultServicePeriod,'<3M>');
      LibraryService.CreateServiceContractTemplate(ServiceContractTemplate,DefaultServicePeriod);
      EVALUATE(ServiceContractTemplate."Price Update Period",'<6M>');
      ServiceContractTemplate.VALIDATE(Prepaid,TRUE);
      ServiceContractTemplate.VALIDATE("Combine Invoices",TRUE);
      ServiceContractTemplate.VALIDATE("Contract Lines on Invoice",TRUE);
      ServiceContractTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContract@41(VAR ServiceContractHeader@1003 : Record 5965;VAR ServiceContractLine@1001 : Record 5964;ContractType@1000 : Option);
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
      ShipToAddress@1002 : Record 222;
      CustomerNo@1005 : Code[20];
    BEGIN
      // Create Service Item, Service Contract Header, Service Contract Line.
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);

      CustomerNo := LibrarySales.CreateCustomerNo;
      LibrarySales.CreateShipToAddress(ShipToAddress,CustomerNo);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ContractType,CustomerNo);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.VALIDATE("Ship-to Code",ShipToAddress.Code);
      ServiceContractHeader.MODIFY(TRUE);

      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceContractMultiLines@186(VAR ServiceContractHeader@1003 : Record 5965;VAR ServiceContractLine@1001 : Record 5964;ContractType@1000 : Option;BlankServiceItemNo@1006 : Boolean);
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
      i@1002 : Integer;
      ItemsCount@1005 : Integer;
    BEGIN
      // Create Service Item, Service Contract Header, Service Contract Line.
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);

      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ContractType,LibrarySales.CreateCustomerNo);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);
      ItemsCount := LibraryRandom.RandIntInRange(3,5);
      LibraryVariableStorage.Enqueue(ItemsCount);
      FOR i := 1 TO ItemsCount DO BEGIN
        CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
        IF BlankServiceItemNo THEN
          UpdateContractLineBlankServiceItemNo(ServiceContractLine);
      END;
    END;

    LOCAL PROCEDURE CreateServiceContractForSeveralItems@266(VAR ServiceContractHeader@1003 : Record 5965;VAR ServiceContractLine@1001 : Record 5964);
    BEGIN
      CreateServiceContractMultiLines(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract,TRUE);
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<-CY>',WORKDATE));
      ServiceContractHeader.VALIDATE("Combine Invoices",TRUE);
      ServiceContractHeader.VALIDATE(Prepaid,TRUE);
      ServiceContractHeader.VALIDATE("Invoice Period",ServiceContractHeader."Invoice Period"::"Half Year");
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCreditMemoForNextMonth@267(VAR ServiceContractHeader@1003 : Record 5965;VAR ServiceContractLine@1001 : Record 5964);
    VAR
      SaveDate@1000 : Date;
    BEGIN
      ServiceContractHeader.FIND;
      ServiceContractHeader.VALIDATE("Change Status",ServiceContractHeader."Change Status"::Open);
      ServiceContractHeader.MODIFY(TRUE);
      ServiceContractHeader.VALIDATE("Expiration Date",CALCDATE('<1M>',ServiceContractHeader."Starting Date"));
      ServiceContractHeader.MODIFY(TRUE);
      ServiceContractLine.FIND;
      SaveDate := WORKDATE;
      WORKDATE := CALCDATE('<1M>',ServiceContractHeader."Starting Date");
      ServiceContractLine."Credit Memo Date" := WORKDATE - 1;
      LibraryService.CreateContractLineCreditMemo(ServiceContractLine,TRUE);
      WORKDATE := SaveDate;
    END;

    LOCAL PROCEDURE CreateServiceContractLineItem@40(ServiceContractHeader@1003 : Record 5965);
    VAR
      ServiceContractLine@1002 : Record 5964;
      RecRef@1000 : RecordRef;
    BEGIN
      ServiceContractLine.INIT;
      ServiceContractLine.VALIDATE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractLine.VALIDATE("Contract No.",ServiceContractHeader."Contract No.");
      RecRef.GETTABLE(ServiceContractLine);
      ServiceContractLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceContractLine.FIELDNO("Line No.")));
      ServiceContractLine.VALIDATE("Item No.",CreateItemWithUnitPrice);
      ServiceContractLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractWithExpirationDate@195(VAR ServiceContractHeader@1000 : Record 5965) : Code[20];
    VAR
      ServiceContractLine@1002 : Record 5964;
      SignServContractDoc@1001 : Codeunit 5944;
    BEGIN
      CreateAndModifyServiceContract(
        ServiceContractHeader,LibrarySales.CreateCustomerNo,ServiceContractHeader."Contract Type"::Contract);
      ServiceContractHeader.VALIDATE("Expiration Date",CALCDATE('<CM+1D>',WORKDATE));
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SignContract(ServiceContractHeader);
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
      EXIT(ServiceContractLine."Service Item No.");
    END;

    LOCAL PROCEDURE CreateServiceContractWithInvoicePeriodAndDiscount@192(VAR ServiceContractHeader@1001 : Record 5965;VAR ServiceContractLine@1000 : Record 5964);
    BEGIN
      CreateContractHeader(ServiceContractHeader);
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ServiceContractLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      ServiceContractLine.MODIFY(TRUE);

      WITH ServiceContractHeader DO BEGIN
        CALCFIELDS("Calcd. Annual Amount");
        VALIDATE("Annual Amount","Calcd. Annual Amount");
        VALIDATE("Invoice Period","Invoice Period"::Year);
        VALIDATE("Starting Date","Next Invoice Date");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceContractWithInvPeriod@223(VAR ServiceContractHeader@1001 : Record 5965;InvoicePeriod@1002 : Option);
    VAR
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeaderWithInvoicePeriod(
        ServiceContractHeader,CALCDATE('<-CM +' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),
        InvoicePeriod);
    END;

    LOCAL PROCEDURE InitServiceInvoiceWithContract@150(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceHeader."Contract No." := LibraryUtility.GenerateGUID;
      ServiceHeader."Document Type" := ServiceHeader."Document Type"::Invoice;
    END;

    LOCAL PROCEDURE CreateServiceLineForServiceOrder@166(VAR ServiceHeader@1001 : Record 5900;ContractNumber@1005 : Code[20]);
    VAR
      Resource@1000 : Record 156;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      LibraryResource@1004 : Codeunit 130511;
    BEGIN
      LibraryResource.FindResource(Resource);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.SETRANGE("Contract No.",ContractNumber);
      ServiceHeader.FINDFIRST;
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));  // Take Random Quantity.
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Take Random Unit Price.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDiscountForQuote@80(ServiceContractHeader@1001 : Record 5965);
    VAR
      ContractServiceDiscount@1000 : Record 5972;
      ServiceItemGroup@1002 : Record 5904;
    BEGIN
      LibraryService.FindServiceItemGroup(ServiceItemGroup);
      LibraryService.CreateContractServiceDiscount(
        ContractServiceDiscount,ServiceContractHeader,ContractServiceDiscount.Type::"Service Item Group",ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE CreateServiceInvoice@8(ServiceContractHeader@1000 : Record 5965) InvoiceNo : Code[20];
    VAR
      ServContractManagement@1001 : Codeunit 5940;
    BEGIN
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServContractManagement.InitCodeUnit;
      InvoiceNo := ServContractManagement.CreateInvoice(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceInvoiceNotApplied@184(ServiceContractHeader@1000 : Record 5965;VAR ServiceLine@1001 : Record 5902) InvoiceNo : Code[20];
    VAR
      ServiceHeader@1003 : Record 5900;
      ServContractManagement@1004 : Codeunit 5940;
    BEGIN
      InvoiceNo := ServContractManagement.CreateServHeader(ServiceContractHeader,WORKDATE,FALSE);
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItemWithUnitPrice);
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithExpirartionDate@165(VAR ServiceHeader@1002 : Record 5900;ServiceContractHeader@1005 : Record 5965);
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Customer No.");
      ServiceHeader.VALIDATE("Order Date",ServiceContractHeader."Expiration Date");
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLineWithDescription@251(ServContractHeader@1001 : Record 5965;VAR DescPart1@1004 : Text;VAR DescPart2@1002 : Text);
    VAR
      ServContractLine@1000 : Record 5964;
      Option@1003 : 'Capitalized,Literal and Capitalized';
    BEGIN
      CreateServiceContractLine(ServContractLine,ServContractHeader);
      DescPart1 := LibraryUtility.GenerateRandomAlphabeticText(
          MAXSTRLEN(ServContractLine.Description) - STRLEN(ServContractLine."Service Item No.") - 1,Option::Capitalized);
      DescPart2 := LibraryUtility.GenerateRandomAlphabeticText(
          MAXSTRLEN(ServContractLine.Description) - STRLEN(DescPart1),Option::Capitalized);
      ServContractLine.VALIDATE(Description,COPYSTR(DescPart1 + DescPart2,1,MAXSTRLEN(ServContractLine.Description)));
      ServContractLine.MODIFY(TRUE);
      WITH ServContractHeader DO BEGIN
        CALCFIELDS("Calcd. Annual Amount");
        VALIDATE("Annual Amount","Calcd. Annual Amount");
        VALIDATE("Starting Date",WORKDATE);
        MODIFY(TRUE);
      END;
      DescPart1 := STRSUBSTNO('%1 %2',ServContractLine."Service Item No.",DescPart1);
    END;

    LOCAL PROCEDURE CreateUpdateServiceContract@243(VAR ContractNo@1001 : Code[20];VAR CustomerNo@1002 : Code[20];VAR ShiptoCode@1003 : Code[10]);
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      CustomerNo := LibrarySales.CreateCustomerNo;
      ShiptoCode :=
        LibraryUtility.GenerateRandomCode(ServiceContractHeader.FIELDNO("Ship-to Code"),DATABASE::"Service Contract Header");
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);
      ServiceContractHeader."Change Status" := ServiceContractHeader."Change Status"::Locked;
      ServiceContractHeader.Status := ServiceContractHeader.Status::Signed;
      ServiceContractHeader."Ship-to Code" := ShiptoCode;
      ServiceContractHeader.MODIFY;
      ContractNo := ServiceContractHeader."Contract No.";
    END;

    LOCAL PROCEDURE InitServiceLineWithSignedContract@148(VAR ServiceLine@1001 : Record 5902);
    BEGIN
      ServiceLine."Contract No." := LibraryUtility.GenerateGUID;
      ServiceLine.VALIDATE("Appl.-to Service Entry",LibraryRandom.RandIntInRange(2,5));
      ServiceLine.Type := ServiceLine.Type::"G/L Account";
    END;

    LOCAL PROCEDURE InitCurrWorkDateAndPostServiceInvoice@220(VAR CurrentWorkDate@1000 : Date;VAR ServiceContractHeader@1001 : Record 5965) InvoiceNo : Code[20];
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      CurrentWorkDate := WORKDATE;
      WORKDATE := ServiceContractHeader."Next Invoice Date";
      InvoiceNo := CreateServiceInvoice(ServiceContractHeader);
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceContractHeader.FIND;
    END;

    LOCAL PROCEDURE CreateSignedServiceContractWithInvoicePeriod@135(VAR ServiceContractHeader@1000 : Record 5965;VAR ServiceContractLine@1003 : Record 5964);
    VAR
      SignServContractDoc@1002 : Codeunit 5944;
    BEGIN
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeaderWithInvoicePeriod(ServiceContractHeader,CALCDATE('<-CM>',WORKDATE),
        ServiceContractHeader."Invoice Period"::Quarter);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateSignedServiceContractWithInvoicePeriodYear@210(VAR ServiceContractHeader@1001 : Record 5965;VAR ServiceContractLine@1000 : Record 5964);
    BEGIN
      CreateContractWithInvPeriodYear(ServiceContractHeader,ServiceContractLine);
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ModifyServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Service Period");
      SetStartingDateAsNextInvDateAndSignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreatePostSalesInvoice@241(CustomerNo@1001 : Code[20];UnitPrice@1002 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,1);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CheckChangeCustomerNo@39(ServiceContractHeader@1001 : Record 5965;CustomerNo@1000 : Code[20]);
    BEGIN
      // Check that Customer No. is Changed after change Customer.
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.TESTFIELD("Customer No.",CustomerNo);
    END;

    LOCAL PROCEDURE CheckInvoiceQuantity@38(ContractNo@1001 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Check Invoice for Quantity 1 which is created from Service Contract.
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Invoice);
      ServiceLine.SETRANGE("Contract No.",ContractNo);
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD(Quantity,1);  // Taking 1 because in every case it generates only 1 quantity.
    END;

    LOCAL PROCEDURE CheckServiceCreditMemo@37(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Verify that Customer No. is same after creating Credit Memo from Service Contract.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Contract No.");
      ServiceHeader.TESTFIELD("Customer No.",ServiceContractHeader."Customer No.");
      ServiceHeader.TESTFIELD("Bill-to Contact No.",ServiceContractHeader."Bill-to Contact No.");
      ServiceHeader.TESTFIELD("Bill-to Contact",ServiceContractHeader."Bill-to Contact");
    END;

    LOCAL PROCEDURE CheckCustomerNoOnInvoice@36(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Invoice);
      ServiceLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD("Customer No.",ServiceContractHeader."Customer No.");
    END;

    LOCAL PROCEDURE CheckOrderDate@35(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      ServiceHeader.TESTFIELD("Order Date",ServiceContractHeader."First Service Date");
    END;

    LOCAL PROCEDURE CheckSrvcCntractQuoteLinValues@33(ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      ServiceContractLine.SETRANGE("Contract Type",ServiceContractLine."Contract Type"::Quote);
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
      ServiceContractLine.TESTFIELD(Profit,ServiceContractLine."Line Value" - ServiceContractLine."Line Cost");
      ServiceContractLine.TESTFIELD("Next Planned Service Date",ServiceContractHeader."First Service Date");
    END;

    LOCAL PROCEDURE CheckErrorOnCopyDocument@32(ServiceContractHeader@1000 : Record 5965);
    VAR
      CopyServDoc@1001 : Report 5979;
    BEGIN
      CopyServDoc.InitializeRequest(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      CopyServDoc.USEREQUESTPAGE(FALSE);
      CopyServDoc.RUN;
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimit@91(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Credit Limit (LCY)",LibraryRandom.RandDecInRange(1000,2000,2));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLEntry@196(VAR GLEntry@1002 : Record 17;GLAccountNo@1001 : Code[20];ExternalDocumentNo@1000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("External Document No.",ExternalDocumentNo);
      GLEntry.FINDLAST;
    END;

    LOCAL PROCEDURE NoGLEntriesFound@205(GLAccountNo@1001 : Code[20];ExternalDocumentNo@1000 : Code[20]) : Boolean;
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("G/L Account No.",GLAccountNo);
        SETRANGE("External Document No.",ExternalDocumentNo);
        EXIT(ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE FindServiceDocumentWithContractNo@118(DocumentType@1000 : Option;ContractNo@1002 : Code[20]) : Boolean;
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("Document Type",DocumentType);
      ServiceHeader.SETRANGE("Contract No.",ContractNo);
      EXIT(ServiceHeader.FINDFIRST);
    END;

    LOCAL PROCEDURE FindServiceHeader@81(VAR ServiceHeader@1000 : Record 5900;DocumentType@1001 : Option;ContractNo@1002 : Code[20]);
    BEGIN
      ServiceHeader.SETRANGE("Document Type",DocumentType);
      ServiceHeader.SETRANGE("Contract No.",ContractNo);
      ServiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceHour@87(VAR ServiceHour@1001 : Record 5910;ServiceContractNo@1000 : Code[20];Type@1002 : Option);
    BEGIN
      ServiceHour.SETRANGE("Service Contract No.",ServiceContractNo);
      ServiceHour.SETRANGE("Service Contract Type",Type);
      ServiceHour.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@129(ContractNo2@1001 : Code[20]) : Code[20];
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Contract No.",ContractNo2);
      ServiceInvoiceHeader.FINDFIRST;
      EXIT(ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindServiceItemLine@109(VAR ServiceItemLine@1000 : Record 5901;ServiceHeader@1001 : Record 5900);
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceLine@105(VAR ServiceLine@1000 : Record 5902;ContractNo@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      ServiceHeader.SETRANGE("Contract No.",ContractNo);
      ServiceHeader.FINDLAST;
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceLedgerEntry@145(VAR ServiceLedgerEntry@1000 : Record 5907;ServiceContractNo@1001 : Code[20];DocumentType@1002 : Option;EntryType@1003 : Option);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",DocumentType);
      ServiceLedgerEntry.SETRANGE("Entry Type",EntryType);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractNo);
      ServiceLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindDifferentStandardText@7(VAR StandardText@1000 : Record 7;StandardTextCode@1002 : Code[20]);
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      StandardText.SETFILTER(Code,'<>%1',StandardTextCode);
      RecordRef.GETTABLE(StandardText);
      LibraryUtility.FindRecord(RecordRef);
      RecordRef.SETTABLE(StandardText);
    END;

    LOCAL PROCEDURE FindStandardText@97(VAR StandardText@1000 : Record 7);
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      StandardText.INIT;
      RecordRef.GETTABLE(StandardText);
      LibraryUtility.FindRecord(RecordRef);
      RecordRef.SETTABLE(StandardText);
    END;

    LOCAL PROCEDURE GetAnalysisViewTotalAmount@147(AnalysisbyDimensions@1001 : TestPage 554;GLAccount@1000 : Code[20]) : Decimal;
    BEGIN
      LibraryVariableStorage.Enqueue(GLAccount);
      AnalysisbyDimensions.ShowOppositeSign.SETVALUE(FALSE);
      AnalysisbyDimensions.ShowMatrix.INVOKE;
      EXIT(LibraryVariableStorage.DequeueDecimal);
    END;

    LOCAL PROCEDURE GetExpectedAmount@198(ServiceContractLine@1002 : Record 5964;DiscPostingType@1000 : Option) Amount : Decimal;
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO
        CASE DiscPostingType OF
          "Discount Posting"::"No Discounts","Discount Posting"::"Invoice Discounts":
            Amount := ServiceContractLine."Line Amount";
          "Discount Posting"::"Line Discounts","Discount Posting"::"All Discounts":
            Amount := ServiceContractLine."Line Value";
        END;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE GetServiceInvoiceCount@110() : Integer;
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      EXIT(ServiceHeader.COUNT);
    END;

    LOCAL PROCEDURE GetPrepaidContractEntry@137(ServiceHeader@1001 : Record 5900;ServiceContractNo@1003 : Code[20]);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
      GetPrepaidContractEntries@1000 : Report 6033;
    BEGIN
      GetPrepaidContractEntries.USEREQUESTPAGE(FALSE);
      GetPrepaidContractEntries.Initialize(ServiceHeader);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractNo);
      GetPrepaidContractEntries.SETTABLEVIEW(ServiceLedgerEntry);
      GetPrepaidContractEntries.RUNMODAL;
    END;

    LOCAL PROCEDURE GetNonPerpaidContractAccFromCust@215(CustNo@1003 : Code[20];ServContrAccGrCode@1004 : Code[10]) : Code[20];
    VAR
      Customer@1002 : Record 18;
      CustomerPostingGroup@1001 : Record 92;
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      Customer.GET(CustNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      ServiceContractAccountGroup.GET(ServContrAccGrCode);
      EXIT(ServiceContractAccountGroup."Non-Prepaid Contract Acc.");
    END;

    LOCAL PROCEDURE GetPrepaidContractAccFromAccGroup@226(ServContrAccGroupCode@1001 : Code[10]) : Code[20];
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      ServiceContractAccountGroup.GET(ServContrAccGroupCode);
      EXIT(ServiceContractAccountGroup."Prepaid Contract Acc.");
    END;

    LOCAL PROCEDURE GetTotalServLineAmount@206(ContractNo@1002 : Code[20]) : Decimal;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        FindServiceLine(ServiceLine,ContractNo);
        CALCSUMS(Amount);
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE CreateContractInvoices@213(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.FIND;
      COMMIT;
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Next Invoice Date");
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractInvoices;
    END;

    LOCAL PROCEDURE OpenServiceContractPage@106(ContractNo@1000 : Code[20]);
    VAR
      ServiceContract@1001 : TestPage 6050;
    BEGIN
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ContractNo);
      ServiceContract.CreateServiceInvoice.INVOKE;
      ServiceContract.OK.INVOKE;
    END;

    LOCAL PROCEDURE PostPrepaidContractEntryWithNextInvoiceDate@270(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      PostPrepaidContractEntry(
        ServiceContractHeader."Contract No.",
        CALCDATE('<1M>',ServiceContractHeader."Next Invoice Date") - 1,
        WORKDATE);
    END;

    LOCAL PROCEDURE PostPrepaidContractEntry@119(ContractNo@1000 : Code[20];PostTillDate@1004 : Date;PostingDate@1005 : Date);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
      PostPrepaidContractEntries@1002 : Report 6032;
      PostPrepaidContractAction@1003 : 'Post Prepaid Transactions,Print Only';
    BEGIN
      CLEAR(PostPrepaidContractEntries);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ContractNo);
      PostPrepaidContractEntries.SETTABLEVIEW(ServiceLedgerEntry);
      PostPrepaidContractEntries.InitializeRequest(PostTillDate,PostingDate,PostPrepaidContractAction::"Post Prepaid Transactions");
      PostPrepaidContractEntries.USEREQUESTPAGE(FALSE);
      PostPrepaidContractEntries.RUN;
    END;

    LOCAL PROCEDURE PostServiceInvoice@134(ServiceContractNo@1001 : Code[20]);
    VAR
      ServiceDocumentRegister@1000 : Record 5936;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Find the Service Invoice by searching in Service Document Register.
      ServiceDocumentRegister.SETRANGE("Source Document Type",ServiceDocumentRegister."Source Document Type"::Contract);
      ServiceDocumentRegister.SETRANGE("Source Document No.",ServiceContractNo);
      ServiceDocumentRegister.SETRANGE("Destination Document Type",ServiceDocumentRegister."Destination Document Type"::Invoice);
      ServiceDocumentRegister.FINDFIRST;
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,ServiceDocumentRegister."Destination Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostServiceInvoiceFromServiceContractWithDiscount@182(DiscPostingType@1013 : Option);
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceContractAccountGroup@1003 : Record 5973;
      Amount@1005 : Decimal;
    BEGIN
      // Setup: Update Discount Posting in Sales & Receivables Setup
      Initialize;
      UpdateSalesReceivablesSetupForDiscountPosting(DiscPostingType);

      // Create Service Contract with Yearly Invoice Period and Line Discount. Sign the Contract.
      CreateServiceContractWithInvoicePeriodAndDiscount(ServiceContractHeader,ServiceContractLine);
      SignServContractDoc.SignContract(ServiceContractHeader);

      // Create and Post Service Invoices.
      CreateAndPostServiceInvoiceFromServiceContract(ServiceContractHeader);

      // Exercise: Post Prepaid Contract Entries.
      PostPrepaidContractEntry(
        ServiceContractHeader."Contract No.",CALCDATE('<1Y>',WORKDATE),WORKDATE);

      // Verify: Verify GL Entries after posting Service invoice.
      ServiceContractAccountGroup.GET(ServiceContractHeader."Serv. Contract Acc. Gr. Code");
      Amount := GetExpectedAmount(ServiceContractLine,DiscPostingType);
      VerifyGLEntryForPostPrepaidContract(
        ServiceContractAccountGroup."Non-Prepaid Contract Acc.",ServiceContractHeader."Contract No.",-Amount);
    END;

    LOCAL PROCEDURE PostServiceCreditMemo@232(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ModifyServiceContractStatus(ServiceContractHeader);
      CreateServiceCreditMemo(ServiceContractHeader."Contract No.",WORKDATE);
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Contract No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PrepaidFalseInServiceContract@74(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.VALIDATE(Prepaid,FALSE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SumOfLineAmount@6(ContractNo@1000 : Code[20]) LineAmount : Decimal;
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      ServiceContractLine.SETRANGE("Contract Type",ServiceContractLine."Contract Type"::Contract);
      ServiceContractLine.SETRANGE("Contract No.",ContractNo);
      ServiceContractLine.FINDSET;
      REPEAT
        LineAmount += ServiceContractLine."Line Amount";
      UNTIL ServiceContractLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateAnnualAmountOnServiceContractHeader@157(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBillToCostomerNo@9(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.VALIDATE("Bill-to Customer No.",LibrarySales.CreateCustomerNo);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractInvAndLineText@22(NewInvLineTextCode@1004 : Code[20];NewLineInvTextCode@1003 : Code[20]);
    VAR
      ServiceMgtSetup@1002 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Contract Inv. Line Text Code",NewInvLineTextCode);
      ServiceMgtSetup.VALIDATE("Contract Line Inv. Text Code",NewLineInvTextCode);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractPeriodTextCode@114(StandardTextCode@1001 : Code[20]);
    VAR
      ServiceMgtSetup@1000 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Contract Inv. Period Text Code",StandardTextCode);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractPrice@31(ServiceContractHeader@1002 : Record 5965) PricePercentage : Decimal;
    VAR
      UpdateContractPrices@1001 : Report 6031;
      PerformUpdate@1000 : 'Update Contract Prices,Print Only';
    BEGIN
      WORKDATE := ServiceContractHeader."Next Price Update Date";
      UpdateContractPrices.SETTABLEVIEW(ServiceContractHeader);
      PricePercentage := 2 * LibraryRandom.RandInt(5);  // To find the Even No.
      UpdateContractPrices.InitializeRequest(WORKDATE,PricePercentage,PerformUpdate::"Update Contract Prices");
      UpdateContractPrices.USEREQUESTPAGE(FALSE);
      UpdateContractPrices.RUN;
    END;

    LOCAL PROCEDURE UpdateInvoicePeriod@84(VAR ServiceContractHeader@1000 : Record 5965;InvoicePeriod@1001 : Option);
    BEGIN
      ServiceContractHeader.VALIDATE("Invoice Period",InvoicePeriod);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractLineCostAndValue@89(VAR ServiceContractLine@1000 : Record 5964);
    BEGIN
      ServiceContractLine.VALIDATE("Line Cost",LibraryRandom.RandDec(1200,2) * 12);
      ServiceContractLine.VALIDATE("Line Value",ServiceContractLine."Line Cost");
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractHeaderPrepaid@212(VAR ServiceContractHeader@1001 : Record 5965;PrepaidValue@1000 : Boolean);
    BEGIN
      ServiceContractHeader.VALIDATE(Prepaid,PrepaidValue);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetupForDiscountPosting@285(DiscountPosting@1001 : Option);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Discount Posting",DiscountPosting);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateServiceContractLineDiscount@242(VAR ServiceContractHeader@1000 : Record 5965;LineDiscount@1001 : Decimal);
    VAR
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      ServiceContractLine.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
      ServiceContractLine.VALIDATE("Line Discount %",LineDiscount);
      ServiceContractLine.UpdateContractAnnualAmount(FALSE);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceOrderType@100(VAR ServiceContractHeader@1000 : Record 5965;ServiceOrderType@1001 : Code[10]);
    BEGIN
      ServiceContractHeader.VALIDATE("Service Order Type",ServiceOrderType);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLineForQtyToInvoice@178(VAR ServiceLine@1000 : Record 5902;DocumentNo@1001 : Code[20];ContractNo@1002 : Code[20]);
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Contract No.",ContractNo);
        FINDFIRST;
        VALIDATE("Qty. to Invoice","Qty. to Invoice" / LibraryRandom.RandIntInRange(2,5));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateContractLineBlankServiceItemNo@260(VAR ServiceContractLine@1000 : Record 5964);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      ServiceContractLine.VALIDATE("Service Item No.",'');
      ServiceContractLine.VALIDATE("Item No.",Item."No.");
      ServiceContractLine.VALIDATE("Line Cost",LibraryRandom.RandInt(5000));
      ServiceContractLine.VALIDATE("Line Value",LibraryRandom.RandInt(5000));
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionInServiceContract@263(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.FIND;
      ServiceContractHeader.VALIDATE(
        "Shortcut Dimension 1 Code",CreateDimValueForGlobalDimension1Code);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServContractAccGroup@203(VAR ServiceContractAccountGroup@1000 : Record 5973);
    VAR
      VATPostingSetup@1002 : Record 325;
      GLAccount@1001 : Record 15;
      GLAccNo@1003 : Code[20];
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      GLAccNo :=
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale);
      ServiceContractAccountGroup.VALIDATE("Prepaid Contract Acc.",GLAccNo); // make sure Prepaid Contract Acc. <> Non-Prepaid Contract Acc.
      ServiceContractAccountGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetStartingDateAsNextInvDateAndSignContract@227(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.VALIDATE("Starting Date",ServiceContractHeader."Next Invoice Date");
      ServiceContractHeader.MODIFY(TRUE);
      SignServContractDoc.SetHideDialog := TRUE;
      SignServContractDoc.SignContract(ServiceContractHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE ModifyServiceContractHeaderWithInvoicePeriod@125(VAR ServiceContractHeader@1000 : Record 5965;StartingDate@1001 : Date;InvoicePeriod@1002 : Option);
    BEGIN
      ServiceContractHeader.VALIDATE("Starting Date",StartingDate);
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Invoice Period",InvoicePeriod);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyServiceContractStatus@30(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      LockOpenServContract@1001 : Codeunit 5943;
    BEGIN
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
      ServiceContractHeader.VALIDATE("Expiration Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyServiceContractHeader@29(VAR ServiceContractHeader@1000 : Record 5965;PriceUpdatePeriod@1001 : DateFormula);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",PriceUpdatePeriod);
      ServiceContractHeader."Bill-to Contact No." :=
        LibraryUtility.GenerateRandomCode(ServiceContractHeader.FIELDNO("Bill-to Contact No."),DATABASE::"Service Contract Header");
      ServiceContractHeader."Bill-to Contact" := LibraryUtility.GenerateGUID;
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyServiceContractExpirationDate@252(VAR ServiceContractHeader@1000 : Record 5965;ExpirationDate@1001 : Date);
    BEGIN
      ServiceContractHeader.VALIDATE("Expiration Date",ExpirationDate);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyServicePeriodOnServiceContractHeader@163(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      ServicePeriod@1001 : DateFormula;
    BEGIN
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<CM+1D>',WORKDATE));
      EVALUATE(ServicePeriod,STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      ServiceContractHeader.VALIDATE("Service Period",ServicePeriod);
      ServiceContractHeader.VALIDATE("Expiration Date",CALCDATE('<CM+1D>',WORKDATE));
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RoundBasedOnCurrencyPrecision@121(Value@1001 : Decimal) : Decimal;
    VAR
      Currency@1000 : Record 4;
    BEGIN
      Currency.InitRoundingPrecision;
      EXIT(ROUND(Value,Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE RemoveContractLine@27(ContractNo@1000 : Code[20]);
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      ServiceContractLine.SETRANGE("Contract No.",ContractNo);
      REPORT.RUNMODAL(REPORT::"Remove Lines from Contract",FALSE,TRUE,ServiceContractLine);
    END;

    LOCAL PROCEDURE RunCreateContractInvoices@111();
    VAR
      CreateContractInvoices@1000 : Report 6030;
    BEGIN
      CLEAR(CreateContractInvoices);
      CreateContractInvoices.RUN;
    END;

    LOCAL PROCEDURE RunCreateContractServiceOrders@108();
    VAR
      CreateContractServiceOrders@1000 : Report 6036;
    BEGIN
      CLEAR(CreateContractServiceOrders);
      CreateContractServiceOrders.RUN;
    END;

    LOCAL PROCEDURE GetSmallestLineAmount@265(StartingDate@1000 : Date) : Decimal;
    VAR
      ServContractManagement@1002 : Codeunit 5940;
    BEGIN
      EXIT((12 * LibraryERM.GetUnitAmountRoundingPrecision) /
        (2 * ServContractManagement.NoOfMonthsAndMPartsInPeriod(StartingDate,CALCDATE('<CM>',StartingDate))));
    END;

    LOCAL PROCEDURE VerifyAmountOnGLEntry@139(ContractNo@1000 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.CALCFIELDS("Balance (LCY)");
      VerifyInvoicedGLAmt(FindServiceInvoiceHeader(ContractNo),'',-Customer."Balance (LCY)");
    END;

    LOCAL PROCEDURE VerifyContractCreationByQuote@75(QuoteNo@1001 : Code[20]);
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,QuoteNo);
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",1);
    END;

    LOCAL PROCEDURE VerifyGLEntryForPostPrepaidContract@189(NonPrepaidContractAcc@1000 : Code[20];ContractNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1004 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,NonPrepaidContractAcc,ContractNo);
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(GLEntryErr,GLEntry.FIELDCAPTION(Amount)));
    END;

    LOCAL PROCEDURE VerifyServiceContractLine@2(ServiceContractLine@1000 : Record 5964);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      ServiceItem.GET(ServiceContractLine."Service Item No.");
      ServiceContractLine.TESTFIELD(Description,ServiceItem.Description);
      ServiceContractLine.TESTFIELD("Item No.",ServiceItem."Item No.");
      ServiceContractLine.TESTFIELD("Unit of Measure Code",ServiceItem."Unit of Measure Code");
    END;

    LOCAL PROCEDURE VerifyServiceContractHeader@4(ServiceContractHeader@1000 : Record 5965;LineAmount@1001 : Decimal);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.TESTFIELD("Calcd. Annual Amount",LineAmount);
      ServiceContractHeader.TESTFIELD("Annual Amount",LineAmount);
    END;

    LOCAL PROCEDURE VerifyServiceContractHeaderForNoOfUnpostedInvoices@190(ServiceContractHeader@1000 : Record 5965;NoOfPostedInvoices@1001 : Integer);
    BEGIN
      WITH ServiceContractHeader DO BEGIN
        CALCFIELDS("No. of Posted Invoices");
        Assert.AreEqual(
          NoOfPostedInvoices,"No. of Posted Invoices",STRSUBSTNO(ServiceContractErr,FIELDCAPTION("No. of Posted Invoices")));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceContractHasLink@217(ContractType@1001 : Option;ContractNo@1002 : Code[20]);
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      WITH ServiceContractHeader DO BEGIN
        GET(ContractType,ContractNo);
        Assert.IsTrue(HASLINKS,STRSUBSTNO(ServiceDocLinkNotFoundErr,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceHeaderHasLink@233(DocumentType@1000 : Option;ContractNo@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      WITH ServiceHeader DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Contract No.",ContractNo);
        FINDFIRST;
        Assert.IsTrue(
          HASLINKS,STRSUBSTNO(ServiceDocLinkNotFoundErr,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceHoursWithSetup@77(ServiceContractQuoteNo@1000 : Code[20]);
    VAR
      ServiceHour@1001 : Record 5910;
      ServiceHour2@1002 : Record 5910;
    BEGIN
      FindServiceHour(ServiceHour,ServiceContractQuoteNo,ServiceHour2."Service Contract Type"::Quote);
      FindServiceHour(ServiceHour2,'',ServiceHour."Service Contract Type"::" ");  // To find the default Service Hour.
      REPEAT
        ServiceHour.TESTFIELD(Day,ServiceHour2.Day);
        ServiceHour.TESTFIELD("Starting Date",ServiceHour2."Starting Date");
        ServiceHour.TESTFIELD("Starting Time",ServiceHour2."Starting Time");
        ServiceHour.TESTFIELD("Ending Time",ServiceHour2."Ending Time");
        ServiceHour.TESTFIELD("Valid on Holidays",ServiceHour2."Valid on Holidays");
        ServiceHour.NEXT;
      UNTIL ServiceHour2.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@140(ContractNo@1000 : Code[20];DocumentType@1001 : Option;Sign@1002 : Integer);
    VAR
      ServiceLedgerEntry@1003 : Record 5907;
      ServiceLedgerEntry2@1004 : Record 5907;
    BEGIN
      FindServiceLedgerEntry(
        ServiceLedgerEntry,ContractNo,ServiceLedgerEntry."Document Type"::Shipment,ServiceLedgerEntry."Entry Type"::Usage);
      FindServiceLedgerEntry(ServiceLedgerEntry2,ContractNo,DocumentType,ServiceLedgerEntry."Entry Type"::Sale);
      ServiceLedgerEntry.TESTFIELD(Amount,Sign * ServiceLedgerEntry2.Amount);
      ServiceLedgerEntry.TESTFIELD(Quantity,Sign * ServiceLedgerEntry2.Quantity);
      ServiceLedgerEntry.TESTFIELD("Unit Cost",ServiceLedgerEntry2."Unit Cost");
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@79(ContractNo@1000 : Code[20]);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      ServiceHeader.SETRANGE("Contract No.",ContractNo);
      ServiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyServiceLineAmount@250(ContractNo@1000 : Code[20]);
    VAR
      ServiceContractLine@1001 : Record 5964;
      ServiceLine@1002 : Record 5902;
    BEGIN
      ServiceContractLine.SETRANGE("Contract No.",ContractNo);
      ServiceContractLine.FINDFIRST;
      FindServiceLine(ServiceLine,ContractNo);
      ServiceLine.FINDLAST;
      Assert.AreEqual(ServiceContractLine."Line Value",ServiceLine.Amount,ServiceLineAmountErr);
    END;

    LOCAL PROCEDURE GetServiceLedgerEntryLines@88(ContractNo@1000 : Code[20]) : Integer;
    VAR
      ServiceLine@1002 : Record 5902;
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      FindServiceLine(ServiceLine,ContractNo);

      ServiceLedgerEntry.SETRANGE("Service Contract No.",ContractNo);
      ServiceLedgerEntry.SETRANGE("Document No.",ServiceLine."Document No.");
      EXIT(ServiceLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyValuesOnServiceInvoice@85(ServiceContractHeader@1007 : Record 5965;No@1000 : Code[20]);
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Check Service Header for Customer No. and Posting Date which is created from Service Contract.
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      ServiceHeader.TESTFIELD("Customer No.",ServiceContractHeader."Customer No.");
      ServiceHeader.TESTFIELD("Posting Date",ServiceContractHeader."Starting Date");

      // Check Service Line 4 for Type, No. and Quantity 1 which is created from Service Contract.
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      ServiceLine.FINDLAST;
      ServiceLine.TESTFIELD(Type,ServiceLine.Type::"G/L Account");
      ServiceLine.TESTFIELD("No.",No);
      ServiceLine.TESTFIELD(Quantity,1); // Quantity 1 for Type G/L Account.
    END;

    LOCAL PROCEDURE VerifyLinesOnServiceInvoice@188(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ItemsCountVar@1004 : Variant;
      i@1000 : Integer;
      ItemsCount@1005 : Integer;
    BEGIN
      // Check G/L account lines are created after the related text line.
      // G/L Account should follow appropriate Item line.
      LibraryVariableStorage.Dequeue(ItemsCountVar);
      ItemsCount := ItemsCountVar;
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      ServiceLine.ASCENDING(FALSE);
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      FOR i := 1 TO ItemsCount DO BEGIN
        ServiceLine.TESTFIELD(Type,ServiceLine.Type::"G/L Account");
        ServiceLine.NEXT;
        ServiceLine.TESTFIELD(Type,ServiceLine.Type::" ");
        ServiceLine.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyLineDiscountOnServiceInvoice@245(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ItemsCountVar@1004 : Variant;
      i@1000 : Integer;
      ItemsCount@1005 : Integer;
    BEGIN
      // Check Service Invoice lines have blank Line Discount values.
      LibraryVariableStorage.Dequeue(ItemsCountVar);
      ItemsCount := ItemsCountVar;
      FindServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
      ServiceLine.ASCENDING(FALSE);
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      FOR i := 1 TO ItemsCount DO BEGIN
        ServiceLine.TESTFIELD("Line Discount %",0);
        ServiceLine.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnContractHeader@15(ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");
      ServiceContractHeader.CALCFIELDS("No. of Unposted Invoices");
      ServiceContractHeader.TESTFIELD("No. of Unposted Invoices",2);
      ServiceContractHeader.TESTFIELD("Print Increase Text",FALSE);
    END;

    LOCAL PROCEDURE VerifyAmountServiceLedgerEntry@95(ContractNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      ServiceLine@1002 : Record 5902;
      ServiceLedgerEntry@1003 : Record 5907;
    BEGIN
      FindServiceLine(ServiceLine,ContractNo);

      ServiceLedgerEntry.SETRANGE("Service Contract No.",ContractNo);
      ServiceLedgerEntry.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Cost Amount",-Amount);
        ServiceLedgerEntry.TESTFIELD("Amount (LCY)",-Amount);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@103(DefaultDimension@1000 : Record 352;DimensionSetID@1001 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyUnitCostNotEqualToZeroOnCreditMemoLines@141(CustomerNo@1001 : Code[20];ServiceItemNo@1003 : Code[20];CreditMemoNo@1000 : Code[20]);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::"Credit Memo");
      ServiceLine.SETRANGE("Document No.",CreditMemoNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::"G/L Account");
      ServiceLine.SETFILTER("Customer No.",'<>%1',CustomerNo);
      ServiceLine.SETFILTER("Service Item No.",'<>%1',ServiceItemNo);
      ServiceLine.SETFILTER("Unit Cost (LCY)",'<>%1',0);
      IF NOT ServiceLine.ISEMPTY THEN
        ERROR(UnitCostErr);
    END;

    LOCAL PROCEDURE VerifyInvoicedGLAmt@1033(DocNo@1000 : Code[20];GLAccNo@1001 : Code[20];Amt@1002 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
      GLAmt@1005 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",DocNo);
      IF GLAccNo <> '' THEN
        GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      IF Amt > 0 THEN
        GLEntry.SETFILTER(Amount,'>0')
      ELSE
        GLEntry.SETFILTER(Amount,'<0');
      IF GLEntry.FINDSET THEN
        REPEAT
          GLAmt += GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(GLAmt,Amt,LibraryERM.GetAmountRoundingPrecision,'');
    END;

    LOCAL PROCEDURE VerifyCrMemoLinkedToInvServLedgEntries@237(ContractNo@1002 : Code[20]);
    VAR
      InvoiceServiceLedgerEntry@1001 : Record 5907;
      CrMemoServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      WITH CrMemoServiceLedgerEntry DO BEGIN
        FindServiceLedgerEntry(
          CrMemoServiceLedgerEntry,ContractNo,"Document Type"::"Credit Memo","Entry Type"::Sale);
        SETFILTER("Applies-to Entry No.",'>0');
        REPEAT
          InvoiceServiceLedgerEntry.GET("Applies-to Entry No.");
          Assert.AreEqual(-InvoiceServiceLedgerEntry."Amount (LCY)","Amount (LCY)",FIELDCAPTION("Amount (LCY)"));
          Assert.AreEqual(InvoiceServiceLedgerEntry."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionInGLEntry@294(GLAccountNo@1001 : Code[20];DocNo@1003 : Code[20];ExpectedDimensionCode@1002 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLAccountNo,DocNo);
      Assert.AreEqual(
        ExpectedDimensionCode,GLEntry."Global Dimension 1 Code",GLEntry.FIELDCAPTION("Global Dimension 1 Code"));
    END;

    LOCAL PROCEDURE VerifyDimensionInGLEntries@231(GLAccountNo@1001 : Code[20];DocNo@1003 : Code[20];ExpectedDimensionCode@1002 : ARRAY [2] OF Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      i@1004 : Integer;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("External Document No.",DocNo);
      GLEntry.FINDSET;
      FOR i := 1 TO ARRAYLEN(ExpectedDimensionCode) DO BEGIN
        Assert.AreEqual(
          ExpectedDimensionCode[i],GLEntry."Global Dimension 1 Code",GLEntry.FIELDCAPTION("Global Dimension 1 Code"));
        GLEntry.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyServiceLineDescription@240(ExpectedDescPart1@1001 : Text;ExpectedDescPart2@1000 : Text);
    VAR
      ServLine@1005 : Record 5902;
    BEGIN
      ServLine.INIT;
      ServLine.SETRANGE(Description,ExpectedDescPart1);
      Assert.RecordIsNotEmpty(ServLine);
      ServLine.SETRANGE(Description,ExpectedDescPart2);
      Assert.RecordIsNotEmpty(ServLine);
    END;

    LOCAL PROCEDURE ConvertMessage@26(ErrorMessage@1001 : Text[1024]) : Text[1024];
    VAR
      NewLine@1000 : Text[1];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    LOCAL PROCEDURE ChangeCustomerNo@24(VAR ServiceContractHeader@1002 : Record 5965) : Code[20];
    VAR
      ShiptoAddress@1001 : Record 222;
      ServContractManagement@1000 : Codeunit 5940;
    BEGIN
      LibrarySales.CreateShipToAddress(ShiptoAddress,LibrarySales.CreateCustomerNo);
      ServContractManagement.ChangeCustNoOnServContract(ShiptoAddress."Customer No.",ShiptoAddress.Code,ServiceContractHeader);
      EXIT(ShiptoAddress."Customer No.");
    END;

    [ConfirmHandler]
    PROCEDURE ContractTemplateConfirmHandlerFalse@211(SignContractMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      Result := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ContractLineSelectionHandler@102(VAR ContractLineSelection@1000 : TestPage 6057);
    BEGIN
      // Verifying that there is no value on the Contract Line Selection page.
      ContractLineSelection."No.".ASSERTEQUALS('');
      ContractLineSelection."Customer No.".ASSERTEQUALS('');
      ContractLineSelection.Cancel.INVOKE;  // Using Cancel to close the page as OK button is disabled.
    END;

    [RequestPageHandler]
    PROCEDURE CreateContractServiceOrdersRequestPageHandler@144(VAR CreateContractServiceOrders@1000 : TestRequestPage 6036);
    VAR
      ContractNumber@1002 : Variant;
      CreateServOrder@1001 : 'Create Service Order,Print Only';
    BEGIN
      LibraryVariableStorage.Dequeue(ContractNumber);
      CreateContractServiceOrders.StartingDate.SETVALUE(FORMAT(WORKDATE));
      CreateContractServiceOrders.EndingDate.SETVALUE(FORMAT(WORKDATE));
      CreateContractServiceOrders.CreateServiceOrders.SETVALUE(CreateServOrder::"Create Service Order");
      CreateContractServiceOrders."Service Contract Header".SETFILTER("Contract No.",ContractNumber);
      CreateContractServiceOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateContractInvoicesRequestPageHandler@116(VAR CreateContractInvoices@1000 : TestRequestPage 6030);
    VAR
      InvoiceDate@1002 : Variant;
      ContractNumber@1003 : Variant;
      CreateInvoices@1001 : 'Create Invoices,Print Only';
    BEGIN
      LibraryVariableStorage.Dequeue(InvoiceDate);
      LibraryVariableStorage.Dequeue(ContractNumber);
      CreateContractInvoices.PostingDate.SETVALUE(InvoiceDate);
      CreateContractInvoices.InvoiceToDate.SETVALUE(InvoiceDate);
      CreateContractInvoices.CreateInvoices.SETVALUE(CreateInvoices::"Create Invoices");
      CreateContractInvoices."Service Contract Header".SETFILTER("Contract No.",ContractNumber);
      CreateContractInvoices.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSetEntriesNotEditablePageHandler@155(VAR DimensionSetEntries@1000 : TestPage 479);
    BEGIN
      Assert.IsFalse(DimensionSetEntries."Dimension Code".EDITABLE,DimensionNonEditableErr);
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSetEntriesEditablePageHandler@153(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      Assert.IsTrue(EditDimensionSetEntries."Dimension Code".EDITABLE,DimensionEditableErr);
    END;

    [ModalPageHandler]
    PROCEDURE FormModalHandler@21(VAR ServiceContract@1001 : Page 6050;VAR Response@1000 : Action);
    BEGIN
      ServiceContract.SETRECORD(ServiceContractHeader2);
      ServiceContract.CheckRequiredFields;
      Response := ACTION::OK;
    END;

    [MessageHandler]
    PROCEDURE InvoiceCreationMessageHandler@159(Message@1000 : Text[1024]);
    VAR
      MessageText@1001 : Text[1024];
    BEGIN
      // Verify Invoice creation Message.
      MessageText := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(MessageText));
      IF (STRPOS(Message,MessageText) = 0) AND (STRPOS(Message,OrderCreationMsg) = 0) THEN
        ERROR(MessageText);
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceConfirmHandler@23(ConfirmMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      // Confirmation message handler to Sign Service Contract.
      Result := (STRPOS(ConfirmMessage,InvoiceCreationMsg) = 0);
    END;

    LOCAL PROCEDURE InvokeLineDimensionFromServiceInvoice@160(ServiceLine@1000 : Record 5902;ContractNo@1001 : Code[20]);
    VAR
      ServiceInvoice@1002 : TestPage 5933;
    BEGIN
      ServiceInvoice.OPENEDIT;
      ServiceInvoice.FILTER.SETFILTER("No.",ServiceLine."Document No.");
      ServiceInvoice.FILTER.SETFILTER("Customer No.",ServiceLine."Customer No.");
      ServiceInvoice.ServLines.FILTER.SETFILTER("Contract No.",ContractNo);
      ServiceInvoice.ServLines.Dimensions.INVOKE;
    END;

    LOCAL PROCEDURE PrepareServiceContractsForInvoiceGeneration@176(VAR ServiceContractHeader@1000 : Record 5965;i@1001 : Integer;ContractCount@1003 : Integer);
    VAR
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      CLEAR(ServiceContractHeader);
      CLEAR(ServiceContractLine);
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type"::Contract,ServiceContractHeader."Contract No.");
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<-1Y>',WORKDATE));
      IF ContractCount = 3 THEN
        ServiceContractHeader."Invoice after Service" := i = 2 // One contract should be excluded from the invoice generation
      ELSE
        ServiceContractHeader."Invoice after Service" := FALSE;
      ServiceContractHeader."Combine Invoices" := TRUE;
      ServiceContractHeader.VALIDATE("Annual Amount",1000);
      ServiceContractHeader.Status := ServiceContractHeader.Status::Signed;
      ServiceContractHeader."Change Status" := ServiceContractHeader."Change Status"::Locked;
      ServiceContractHeader.SuspendStatusCheck(TRUE);
    END;

    [PageHandler]
    PROCEDURE ServiceInvoicePostHandler@93(VAR ServiceInvoice@1000 : TestPage 5933);
    VAR
      ContractNumber@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ContractNumber);
      ServiceInvoice.FILTER.SETFILTER("Contract No.",ContractNumber);
      ServiceInvoice.ServLines.LAST;
      LibraryVariableStorage.Enqueue(ServiceInvoice.ServLines."Line Amount".ASDECIMAL);
      ServiceInvoice.Post.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceGetShipmentHandler@179(VAR GetServiceShipmentLines@1003 : Page 5994;VAR Response@1000 : Action);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentLine@1001 : Record 5991;
      OrderNo@1006 : Variant;
      InvoiceNo@1005 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(InvoiceNo);
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);
      ServiceGetShipment.SetServiceHeader(ServiceHeader);

      LibraryVariableStorage.Dequeue(OrderNo);
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      ServiceShipmentLine.FINDFIRST;
      ServiceGetShipment.CreateInvLines(ServiceShipmentLine);
    END;

    [ConfirmHandler]
    PROCEDURE SignContractConfirmHandler@18(SignContractMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      // Confirmation message handler to Sign Service Contract.
      Result := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ServContrctTemplateListHandler@12(VAR ServiceContractTemplateHandler@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ServContrListServItemListHandler@187(VAR ServContrListServItem@1000 : TestPage 6075);
    VAR
      ContractNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ContractNo);
      ServContrListServItem."Contract No.".ASSERTEQUALS(ContractNo);
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@11(MessageTest@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@248(ConfirmMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      Result := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisbyDimMatrixPageHandler@117(VAR AnalysisByDimensionMatrix@1000 : TestPage 9249);
    VAR
      GLAccount@1003 : Text;
      FoundGLAccount@1001 : Boolean;
      EndOfRecords@1002 : Boolean;
    BEGIN
      FoundGLAccount := FALSE;
      EndOfRecords := FALSE;
      GLAccount := LibraryVariableStorage.DequeueText;

      WHILE NOT EndOfRecords DO BEGIN
        IF AnalysisByDimensionMatrix.Code.VALUE = GLAccount THEN BEGIN
          FoundGLAccount := TRUE;
          EndOfRecords := TRUE;
          LibraryVariableStorage.Enqueue(AnalysisByDimensionMatrix.TotalAmount.ASDECIMAL);
        END;
        EndOfRecords := NOT AnalysisByDimensionMatrix.NEXT;
      END;
      Assert.AreEqual(TRUE,FoundGLAccount,STRSUBSTNO('Analysis View G/L Account:%1 is found',GLAccount));
    END;

    [ConfirmHandler]
    PROCEDURE ServContractConfirmHandler@167(ConfirmMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      IF ConfirmMessage = ServiceTemplateMsg THEN
        Result := FALSE
      ELSE
        Result := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandler@169(VAR CreateContractInvoices@1000 : TestRequestPage 6030);
    VAR
      ContractNo@1002 : ARRAY [3] OF Variant;
      ContractCount@1001 : Integer;
      i@1003 : Integer;
    BEGIN
      CreateContractInvoices.PostingDate.SETVALUE(WORKDATE);
      CreateContractInvoices.InvoiceToDate.SETVALUE(WORKDATE);
      CreateContractInvoices.CreateInvoices.SETVALUE(0);
      ContractCount := LibraryVariableStorage.DequeueInteger;
      FOR i := 1 TO ContractCount DO
        LibraryVariableStorage.Dequeue(ContractNo[i]);
      CASE ContractCount OF
        2:
          CreateContractInvoices."Service Contract Header".SETFILTER("Contract No.",
            STRSUBSTNO('%1|%2',ContractNo[1],ContractNo[2]));
        3:
          CreateContractInvoices."Service Contract Header".SETFILTER("Contract No.",
            STRSUBSTNO('%1|%2|%3',ContractNo[1],ContractNo[2],ContractNo[3]));
      END;
      CreateContractInvoices.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateDimValueForGlobalDimension1Code@238() : Code[20];
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      EXIT(DimensionValue.Code);
    END;

    [MessageHandler]
    PROCEDURE MsgCannotCreateHandler@204(MessageTest@1000 : Text[1024]);
    BEGIN
      LibraryVariableStorage.Enqueue(MessageTest)
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimit_ReplyNo@127(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit."No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      CheckCreditLimit.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimit_ReplyYes@207(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit."No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      CheckCreditLimit.Yes.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Service] [Service Contract]

      Unsupported version tags:
      NA: Unable to Execute

      Test for CRM Service Contract.
        1.  Test Change Customer No. in Service Contract.
        2.  Test Check New Line is set to True on Service Contract Line.
        3.  Test Remove Contract Line while Service Contract is locked.
        4.  Test Create Service Invoice from Service Contract.
        5.  Test Create Credit Memo and Check Customer No. from Service Contract.
        6.  Test Create Contract Invoice.
        7.  Test Create Service Order and Check Order Date on Service Order with Service Contracts field First Invoiced Date.
        8.  Test Update Service Contract Price in Service Contract.
        9.  Test prepaid Transaction on Service Ledger Entry.
        10. Test Remove Contract Line in Service Contract.
        11. Test Service Account Group exist after creation.
        12. Test Service Contract Template does not exist after deletion and Test Service Contract Template exist in Service Contract.
        13. Test Service Contract Quote Line have right values after making Service Contract Quote.
        14. Test Service Contract Quote does not exist after Sign Service Contract Quote. Test Service Contract is same after Sign
            contract on Service Contract Quote.
        15. Test Service Contract Status after Sign Service Contract. Test Service Contract Header when Customer No. does not
            exist in Contract Header.
        16. Test Error on Service Contract during Copy Document and Test Service Contract Line made after Copy Document.
        17. Test Comment on Service Contract Quote Detail Preview.
        18. Test Comment on Service Contract Detail Preview.
        19. Test the Service Contract Header and Service Contract Lines.
        20. Test Copy Document on Service Contract.
        21. Test Service Invoice Creation on Lock Service Contract.
        22. Test Service Invoice Creation with Contract Inv. Period Text Code on Service Mgt. Setup.
        23. Test Service Invoice Creation with Price Inv. Increase Code and Print Increase Text True on Service Contract.
        24. Test Service Invoice Creation with Contract Inv. Line Text Code and Contract Line Inv. Text Code on Service Mgt. Setup.
        25. Test the Sign Service Contract with Prepaid False.
        26. Test the creation of Service Contract by Service Contract Quote.
        27. Test the copy Default Hours on Service Contract Quote from Default Service Hours Setup.
        28. Test the creation of Service Contract from Service Contract Quote with Comments and Service Discount.
        29. Test the creation of Service Contract from Service Contract Quote with Prepaid False.
        30. Test the creation of Service Invoice manually by Service Contract.
        31. Test Service Invoice creation from Signing Contract with Different Bill to Customer No.
        32. Test Post Service Invoice created from Signing Contract wit h Different Bill to Customer No.
        33. Test that Create Contract Invoices batch job creates a new Service Invoice.
        34. Test for Calculation of correct service ledger entry while creating a Service invoice on Contract card.
        35. Test Dimension on Service Contract after updating Service Order Type on Service Contract Header.
        36. Test Dimension on Service Order Created from Service Contract..
        37. Test post the Service Invoice from Unposted Invoices On the Service Contract Card of the Signed Service Contract
            with no error.
        38. Test to verify program creates a Service Invoice on Contract Card through Create Service Invoice function after changing
            the Line value on Contract Line.
        39. Test to verify that program should close the Contract Line Selection page after clicking Cancel button when service Item No
            is blank on the Contract Line Selection page.
        40. Test Create Service Invoice from Service Contract using Page Testability.
        41. Test Service Invoice is not created after signing Service Contract and decline the message to create Service Invoice.
        42. Test Service Order created after running Create Contract Service Orders batch job for Contract.
        43. Test Service Shipment contains Contract No. when Service Order created through Create Contract Service Orders batch job posted as Ship only.
        44. Test Service Invoice Creation Message appears for un-successful Invoice creation after running Create Contract Invoices Batch Job.
        45. Test Service Invoice Creation Message appears for successful Invoice creation after running Create Contract Invoices Batch Job.
        46. Test GL Entries when post Service Invoice after signing Service Contract.
        47. Test GL Entries after posting Prepaid Contract Entries for a Service Contrct.
        48. Test Analysis View Entries when post Service Invoice after signing Service Contract.
        49. Test Analysis View Entries after posting Prepaid Contract Entries for a Service Contract.
        50. Test Amount on GL Entry equal to Customer Balance(LCY) when Service Invoice is Posted with Invoice Period Quarter.
        51. Test Unit Cost(LCY) not equal to Zero on Service Credit Memo Lines after running Get Prepaid Contract Entry report.
        52. Test Service Invoice Created Sucessfully for multiples Service Contracts by batch report Create Contract Service Invoice.
        53. Test Service Ledger Entries Created with Document Types Shipment and Invoice after Posting Service Invoice with Invoice Period Quarter.
        54. Test Service Ledger Entries Created with Document Types Shipment and Creditmemo after Posting Service Credit Memo with Invoice Period Quarter.
        55  Test program does not allow to update the Type value on service line and populates error message.
        56  Test program does not allow to update the No. field value on service line and populates error message.
        57. Test program does not allow to update the unit price on service line and populates error message.
        58. Test program does not allow to update the Shortcut Dimension 1 Code on service Header and populates error message.
        59. Test program does not allow to update the Shortcut Dimension 2 Code on service Header and populates error message.
        60. Dimension Set Entries page is in non editable mode when we check the line dimension with Contract No.
        61. Edit Dimension Set Entries page is in editable mode when we check the line dimension with blank Contract No.
        62. Test Contract No on the Service Item line should be populated when Service Order is created with Expiration Date of service contract header.
        63. Test Contract No on Service contract List page when Service order Created with Expiration Date of Service Contract Header.
        64. Test Last Invoice Date on Service Contract Header when Starting Date updated after Locked.
        65. Test no Error message appear after create Service Invoice When Service Contractlocked.
        66. Test that the invoice generation batch job will fail when a customer has several invoice due contracts with different currency codes.
        67. Test that a new invoice is created when the first contract for a customer requires service orders and the next one doesn't so that contracts are
            not invoiced on an invoice belonging to another customer.
        68. Dimension Set Entries page is in editable mode when we check the line dimension with Contract No and empty 'Appl.-to Service Entry'.
        69. Test No. of Posted Invoices should be updated when creating and posting a service invoice by Get Shipment Lines function
        70. Test GL Entries after posting Prepaid Contract Entries for a Service Contrct with Line Discount.
        71. Test GL Entries after posting Prepaid Contract Entries for a Service Contrct with No Discount.

      TFS_TS_ID = 21730
      Cover Test cases:
        TC0134 TFS_TC_ID=11986 and 31787
        TC0135 TFS_TC_ID=11987 and 31788
        TC0136 TFS_TC_ID=11988 and 31789
        TC0137 TFS_TC_ID=11989 and 31790
        TC0138 TFS_TC_ID=11990 and 31791
        TC0139 TFS_TC_ID=11991 and 31792
        TC0140 TFS_TC_ID=11992 and 31793
        TC0141 TFS_TC_ID=11993 and 31794
        TC0142 TFS_TC_ID=11994 and 31795
        TC0143 TFS_TC_ID=11995 and 31796

      TFS_TS_ID = 21722
      Cover Test cases:
       TC0071 TFS_TC_ID=12033 and 31833
       TC0072 TFS_TC_ID=12034 and 31834
       TC0073 TFS_TC_ID=12035 and 31835
       TC0074 TFS_TC_ID=12036 and 31836
       TC0075 TFS_TC_ID=12037 and 31837
       TC0076 TFS_TC_ID=12038 and 31838
       TC0077 TFS_TC_ID=12039 and 31839
       TC0078 TFS_TC_ID=12040 and 31840

      TFS_TS_ID = 168064
      Cover Test cases:
       TFS_TC_ID = 144526

      TFS_TS_ID = 172908
      Cover Test cases:
       TFS_TC_ID=141403

      TFS_TS_ID = 172909
      Cover Test cases:
       TFS_TC_ID = 141404

      TFS_TS_ID = 172912
      Cover Test cases:
       TFS_TC_ID=141406

      TFS_TS_ID = 233802
      --------------------------------------------------------------------------
      Test Function Name                                             Test TFS ID
      --------------------------------------------------------------------------
      ServiceInvoiceBySeviceContract                                      128952

      TFS_TS_ID = 236507
      --------------------------------------------------------------------------
      Test Function Name                                             Test TFS ID
      --------------------------------------------------------------------------
      ServiceInvoiceWithLedgerEntry                                       234996

      TFS_TS_ID = 236804
      --------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      --------------------------------------------------------------------------
      DimensionOnServiceContract, DimensionOnServiceOrder                 235031

      TFS_TS_ID = 257615
      --------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      --------------------------------------------------------------------------
      PostInvoiceFromServiceContract                                      202378

      TFS_TS_ID = 230014
      --------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      --------------------------------------------------------------------------
      CreateInvoiceContractCard                                            204045

      TFS_TS_ID = 258347
      --------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      --------------------------------------------------------------------------
      ServiceContractLineSelection                                        207405

      TFS_TS_ID = 264027
      --------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      --------------------------------------------------------------------------
      ServiceContractInvoiceByPage                                        172954

      TFS_TS_ID = 264041
      -------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -------------------------------------------------------------------------------------------------------------
      SignContractWithNoInvoice, ContractServiceOrderForContract, ShipServiceOrderCreatedFromContract     172955
      UnsuccessfulInvoiceCreationFromContract, SuccessfulInvoiceCreationFromContract

      TFS_TS_ID = 268234
      -------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                   TFS ID
      -------------------------------------------------------------------------------------------------------------
      GLEntriesAfterPostingServiceInvoice, GLEntriesAfterPostingPrepaidContractEntries                     267136

      TFS_TS_ID = 269908
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      AnalysisViewEntriesAfterPostingServiceInvoice, AnalysisViewEntriesAfterPostingPrepaidContractEntries   253369

      BUG_ID = 303018
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      ServiceInvoiceBySeviceContractWithInvoicePeriod,ServiceCreditmemoWithGetPrepaidContractEntries         307366

      BUG_ID = 308912
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CheckServiceInvoiceCreatedWithMultipleContract                                                         312262

      BUG_ID = 308907
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      ServiceLedgerEntriesAfterPostingServiceInvoice,ServiceLedgerEntriesAfterPostingServiceCreditMemo        312269

      BUG_ID = 308926
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      ErrorOnModifyTypeOnServiceLine,ErrorOnModifyNoOnServiceLine,ErrorOnModifyUnitPriceOnServiceLine
      ErrorOnModifyShortCutDimension1CodeOnServiceHeader,ErrorOnModifyShortCutDimension1CodeOnServiceHeader
      CheckDimensionSetEntriesPageWithContractNo,CheckEditDimensionSetEntriesPageWithoutContractNo           315098

      BUG_ID = 319283
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      ContractNoOnServiceItemLineWithExpirationDate,ContractNoOnServiceItemListWithExpirationDate            319904

      BUG_ID = 328702
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      LastInvoiceDateOnServiceContractHeader,RunCreateServiceInvoiceAfterServiceContractLocked               328704

      BUG_ID = 347128
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CheckDimensionSetEntriesPageWithContractNoAndNotApplied                                                347128

      BUG_ID = 356181
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      PostServiceInvoiceByGetShipmentLines                                                                   96638

      BUG_ID = 358337
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------
      PostServiceInvoiceFromServiceContractWithLineDiscount                                                  100368
      PostServiceInvoiceFromServiceContractWithNoDiscount                                                    100368

      NoGLEntriesWhenPostPrepaidServContractEntriesOnInvAndCrMemo                                            360391

      SignLockedServiceContractQuote                                                                         360817

      SignLockedServiceContractQuote                                                                         360817

      AmountPerPartialPeriodInServiceContractWithExpirationDate                                              360831
      PostServiceInvoiceFromServiceContractWithLineDiscount                                                  100369
      PostServiceInvoiceFromServiceContractWithNoDiscount                                                    100369
      AmountPerYearPartialPeriodInServiceContractWithExpirationDate                                          108992
    }
    END.
  }
}

