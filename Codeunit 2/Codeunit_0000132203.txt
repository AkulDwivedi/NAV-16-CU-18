OBJECT Codeunit 132203 Library - Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE CreateProdOrderUsingPlanning@125(VAR ProductionOrder@1004 : Record 5405;Status@1002 : Option;DocumentNo@1001 : Code[20];SourceNo@1003 : Code[20]);
    VAR
      SalesOrderPlanning@1000 : Page 99000883;
    BEGIN
      SalesOrderPlanning.SetSalesOrder(DocumentNo);
      SalesOrderPlanning.BuildForm;
      SalesOrderPlanning.CreateProdOrder;
      CLEAR(ProductionOrder);
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDLAST;
    END;

    [Normal]
    PROCEDURE CreateRequisitionWkshName@93(VAR RequisitionWkshName@1000 : Record 245;WorksheetTemplateName@1001 : Code[10]);
    BEGIN
      // Create Requisition Wksh. Name with a random Name of String length less than 10.
      RequisitionWkshName.INIT;
      RequisitionWkshName.VALIDATE("Worksheet Template Name",WorksheetTemplateName);
      RequisitionWkshName.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RequisitionWkshName.FIELDNO(Name),DATABASE::"Requisition Wksh. Name"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Requisition Wksh. Name",RequisitionWkshName.FIELDNO(Name))));
      RequisitionWkshName.INSERT(TRUE);
    END;

    PROCEDURE CalculateLowLevelCode@3();
    VAR
      CalcLowLevelCode@1000 : Codeunit 99000853;
    BEGIN
      CLEAR(CalcLowLevelCode);
      CalcLowLevelCode.RUN;
    END;

    PROCEDURE CalculateOrderPlanProduction@161(VAR RequisitionLine@1000 : Record 246);
    VAR
      OrderPlanningMgt@1001 : Codeunit 5522;
    BEGIN
      OrderPlanningMgt.SetProdOrder;
      OrderPlanningMgt.GetOrdersToPlan(RequisitionLine);
    END;

    PROCEDURE CalculateOrderPlanSales@152(VAR RequisitionLine@1000 : Record 246);
    VAR
      OrderPlanningMgt@1001 : Codeunit 5522;
    BEGIN
      OrderPlanningMgt.SetSalesOrder;
      OrderPlanningMgt.GetOrdersToPlan(RequisitionLine);
    END;

    PROCEDURE CalculateOrderPlanService@4(VAR RequisitionLine@1000 : Record 246);
    VAR
      OrderPlanningMgt@1001 : Codeunit 5522;
    BEGIN
      OrderPlanningMgt.SetServOrder;
      OrderPlanningMgt.GetOrdersToPlan(RequisitionLine);
    END;

    PROCEDURE CalculateOrderPlanJob@6(VAR RequisitionLine@1000 : Record 246);
    VAR
      OrderPlanningMgt@1001 : Codeunit 5522;
    BEGIN
      OrderPlanningMgt.SetJobOrder;
      OrderPlanningMgt.GetOrdersToPlan(RequisitionLine);
    END;

    PROCEDURE CalculatePlanForReqWksh@1(VAR Item@1002 : Record 27;TemplateName@1004 : Code[10];WorksheetName@1005 : Code[10];StartDate@1001 : Date;EndDate@1000 : Date);
    VAR
      TmpItem@1006 : Record 27;
      CalculatePlanReqWksh@1003 : Report 699;
    BEGIN
      CalculatePlanReqWksh.SetTemplAndWorksheet(TemplateName,WorksheetName);
      CalculatePlanReqWksh.InitializeRequest(StartDate,EndDate);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;
      CalculatePlanReqWksh.SETTABLEVIEW(TmpItem);
      CalculatePlanReqWksh.USEREQUESTPAGE(FALSE);
      CalculatePlanReqWksh.RUNMODAL;
    END;

    LOCAL PROCEDURE CalculatePlanOnPlanningWorksheet@1026(VAR ItemRec@1000 : Record 27;OrderDate@1001 : Date;ToDate@1002 : Date;RespectPlanningParameters@1003 : Boolean;Regenerative@1009 : Boolean);
    VAR
      TmpItemRec@1006 : Record 27;
      RequisitionWkshName@1007 : Record 245;
      CalculatePlanPlanWksh@1008 : Report 99001017;
    BEGIN
      SelectRequisitionWkshName(RequisitionWkshName);  // Find Requisition Worksheet Name to Calculate Plan.
      COMMIT;
      CalculatePlanPlanWksh.InitializeRequest(OrderDate,ToDate,RespectPlanningParameters);
      CalculatePlanPlanWksh.SetTemplAndWorksheet(RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,Regenerative);
      IF ItemRec.HASFILTER THEN
        TmpItemRec.COPYFILTERS(ItemRec)
      ELSE BEGIN
        ItemRec.GET(ItemRec."No.");
        TmpItemRec.SETRANGE("No.",ItemRec."No.");
      END;
      CalculatePlanPlanWksh.SETTABLEVIEW(TmpItemRec);
      CalculatePlanPlanWksh.USEREQUESTPAGE(FALSE);
      CalculatePlanPlanWksh.RUNMODAL;
    END;

    PROCEDURE CalcRegenPlanForPlanWksh@74(VAR ItemRec@1002 : Record 27;OrderDate@1001 : Date;ToDate@1000 : Date);
    BEGIN
      CalcRegenPlanForPlanWkshPlanningParams(ItemRec,OrderDate,ToDate,FALSE);
    END;

    PROCEDURE CalcRegenPlanForPlanWkshPlanningParams@5(VAR ItemRec@1002 : Record 27;OrderDate@1001 : Date;ToDate@1000 : Date;RespectPlanningParameters@1005 : Boolean);
    BEGIN
      CalculatePlanOnPlanningWorksheet(ItemRec,OrderDate,ToDate,RespectPlanningParameters,TRUE);  // Passing True for Regenerative Boolean.
    END;

    PROCEDURE CalcNetChangePlanForPlanWksh@114(VAR ItemRec@1002 : Record 27;OrderDate@1001 : Date;ToDate@1000 : Date;RespectPlanningParameters@1005 : Boolean);
    BEGIN
      CalculatePlanOnPlanningWorksheet(ItemRec,OrderDate,ToDate,RespectPlanningParameters,FALSE);  // Passing False for Regenerative Boolean.
    END;

    PROCEDURE CarryOutActionMsgPlanWksh@73(VAR ReqLineRec@1002 : Record 246);
    VAR
      TmpReqLineRec@1001 : Record 246;
      CarryOutActionMsgPlan@1000 : Report 99001020;
    BEGIN
      COMMIT;
      CarryOutActionMsgPlan.InitializeRequest(2,1,1,1);
      IF ReqLineRec.HASFILTER THEN
        TmpReqLineRec.COPYFILTERS(ReqLineRec)
      ELSE BEGIN
        ReqLineRec.GET(ReqLineRec."Worksheet Template Name",
          ReqLineRec."Journal Batch Name",ReqLineRec."Line No.");
        TmpReqLineRec.SETRANGE("Worksheet Template Name",ReqLineRec."Worksheet Template Name");
        TmpReqLineRec.SETRANGE("Journal Batch Name",ReqLineRec."Journal Batch Name");
        TmpReqLineRec.SETRANGE("Line No.",ReqLineRec."Line No.");
      END;
      CarryOutActionMsgPlan.SetReqWkshLine(ReqLineRec);
      CarryOutActionMsgPlan.SETTABLEVIEW(TmpReqLineRec);
      CarryOutActionMsgPlan.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgPlan.RUNMODAL;
    END;

    PROCEDURE CarryOutPlanWksh@126(VAR RequisitionLine@1000 : Record 246;NewProdOrderChoice@1012 : Option;NewPurchOrderChoice@1011 : Option;NewTransOrderChoice@1010 : Option;NewAsmOrderChoice@1002 : Option;NewReqWkshTemp@1009 : Code[10];NewReqWksh@1008 : Code[10];NewTransWkshTemp@1007 : Code[10];NewTransWkshName@1006 : Code[10]);
    VAR
      CarryOutActionMsgPlan@1001 : Report 99001020;
    BEGIN
      CarryOutActionMsgPlan.SetReqWkshLine(RequisitionLine);
      CarryOutActionMsgPlan.InitializeRequest2(
        NewProdOrderChoice,NewPurchOrderChoice,NewTransOrderChoice,NewAsmOrderChoice,
        NewReqWkshTemp,NewReqWksh,NewTransWkshTemp,NewTransWkshName);
      CarryOutActionMsgPlan.SETTABLEVIEW(RequisitionLine);
      CarryOutActionMsgPlan.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgPlan.RUN;
    END;

    PROCEDURE CarryOutReqWksh@128(VAR RequisitionLine@1000 : Record 246;ExpirationDate@1006 : Date;OrderDate@1005 : Date;PostingDate@1004 : Date;ExpectedReceiptDate@1003 : Date;YourRef@1002 : Text[50]);
    VAR
      CarryOutActionMsgReq@1001 : Report 493;
    BEGIN
      CarryOutActionMsgReq.SetReqWkshLine(RequisitionLine);
      CarryOutActionMsgReq.InitializeRequest(ExpirationDate,OrderDate,PostingDate,ExpectedReceiptDate,YourRef);
      CarryOutActionMsgReq.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgReq.RUN;
      CarryOutActionMsgReq.GetReqWkshLine(RequisitionLine);
    END;

    PROCEDURE CarryOutAMSubcontractWksh@35(VAR RequisitionLine@1000 : Record 246);
    VAR
      CarryOutActionMsgReq@1001 : Report 493;
    BEGIN
      CarryOutActionMsgReq.SetReqWkshLine(RequisitionLine);
      CarryOutActionMsgReq.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgReq.RUNMODAL;
    END;

    PROCEDURE CreateManufUserTemplate@170(VAR ManufacturingUserTemplate@1001 : Record 5525;UserID@1000 : Code[50];MakeOrders@1002 : Option;CreatePurchaseOrder@1003 : Option;CreateProductionOrder@1004 : Option;CreateTransferOrder@1005 : Option);
    BEGIN
      ManufacturingUserTemplate.INIT;
      ManufacturingUserTemplate."User ID" := UserID;
      ManufacturingUserTemplate.INSERT(TRUE);
      ManufacturingUserTemplate.VALIDATE("Make Orders",MakeOrders);
      ManufacturingUserTemplate.VALIDATE("Create Purchase Order",CreatePurchaseOrder);
      ManufacturingUserTemplate.VALIDATE("Create Production Order",CreateProductionOrder);
      ManufacturingUserTemplate.VALIDATE("Create Transfer Order",CreateTransferOrder);
      ManufacturingUserTemplate.MODIFY(TRUE);
    END;

    PROCEDURE CreateRequisitionLine@2(VAR RequisitionLine@1000 : Record 246;WorksheetTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",WorksheetTemplateName);
      RequisitionLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(RequisitionLine);
      RequisitionLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,RequisitionLine.FIELDNO("Line No.")));
      RequisitionLine.INSERT(TRUE);
    END;

    PROCEDURE CreatePlanningComponent@155(VAR PlanningComponent@1001 : Record 99000829;VAR RequisitionLine@1000 : Record 246);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      PlanningComponent.INIT;
      PlanningComponent.VALIDATE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningComponent.VALIDATE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningComponent.VALIDATE("Worksheet Line No.",RequisitionLine."Line No.");
      RecRef.GETTABLE(PlanningComponent);
      PlanningComponent.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,PlanningComponent.FIELDNO("Line No.")));
      PlanningComponent.INSERT(TRUE);
    END;

    PROCEDURE CreatePlanningRoutingLine@156(VAR PlanningRoutingLine@1000 : Record 99000830;VAR RequisitionLine@1001 : Record 246;OperationNo@1002 : Code[10]);
    BEGIN
      PlanningRoutingLine.INIT;
      PlanningRoutingLine.VALIDATE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningRoutingLine.VALIDATE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningRoutingLine.VALIDATE("Worksheet Line No.",RequisitionLine."Line No.");
      PlanningRoutingLine.VALIDATE("Operation No.",OperationNo);
      PlanningRoutingLine.INSERT(TRUE);
    END;

    PROCEDURE GetActionMessages@7(VAR Item@1002 : Record 27);
    VAR
      TmpItem@1003 : Record 27;
      RequisitionWkshName@1001 : Record 245;
      GetActionMessages@1000 : Report 99001023;
    BEGIN
      SelectRequisitionWkshName(RequisitionWkshName);
      GetActionMessages.SetTemplAndWorksheet(RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      GetActionMessages.USEREQUESTPAGE(FALSE);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;
      GetActionMessages.SETTABLEVIEW(TmpItem);
      GetActionMessages.RUN;
    END;

    PROCEDURE GetSalesOrders@45(SalesLine@1000 : Record 37;RequisitionLine@1001 : Record 246;RetrieveDimensionsFrom@1004 : Option);
    VAR
      GetSalesOrders@1003 : Report 698;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      CLEAR(GetSalesOrders);
      GetSalesOrders.SETTABLEVIEW(SalesLine);
      GetSalesOrders.InitializeRequest(RetrieveDimensionsFrom);
      GetSalesOrders.SetReqWkshLine(RequisitionLine,0);
      GetSalesOrders.USEREQUESTPAGE(FALSE);
      GetSalesOrders.RUNMODAL;
    END;

    PROCEDURE GetSpecialOrder@63(VAR RequisitionLine@1004 : Record 246;No@1000 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
      GetSalesOrders@1002 : Report 698;
      NewRetrieveDimensionsFrom@1001 : 'Item,SalesLine';
    BEGIN
      SalesLine.SETRANGE("No.",No);
      GetSalesOrders.SetReqWkshLine(RequisitionLine,1);  // Value required.
      GetSalesOrders.SETTABLEVIEW(SalesLine);
      GetSalesOrders.InitializeRequest(NewRetrieveDimensionsFrom::Item);
      GetSalesOrders.USEREQUESTPAGE(FALSE);
      GetSalesOrders.RUN;
    END;

    PROCEDURE MakeSupplyOrders@162(VAR ManufacturingUserTemplate@1002 : Record 5525;VAR RequisitionLine@1001 : Record 246);
    VAR
      MakeSupplyOrdersYesNo@1000 : Codeunit 5521;
    BEGIN
      MakeSupplyOrdersYesNo.SetManufUserTemplate(ManufacturingUserTemplate);
      MakeSupplyOrdersYesNo.RUN(RequisitionLine);
    END;

    PROCEDURE RefreshPlanningLine@44(VAR RequisitionLine@1001 : Record 246;SchDirection@1002 : Option;CalcRouting@1003 : Boolean;CalcCompNeed@1004 : Boolean);
    VAR
      TmpRequisitionLine@1005 : Record 246;
      RefreshPlanningDemand@1000 : Report 99001021;
    BEGIN
      RefreshPlanningDemand.InitializeRequest(SchDirection,CalcRouting,CalcCompNeed);
      IF RequisitionLine.HASFILTER THEN
        TmpRequisitionLine.COPYFILTERS(RequisitionLine)
      ELSE BEGIN
        RequisitionLine.GET(RequisitionLine."Worksheet Template Name",
          RequisitionLine."Journal Batch Name",RequisitionLine."Line No.");
        TmpRequisitionLine.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
        TmpRequisitionLine.SETRANGE("Journal Batch Name",RequisitionLine."Journal Batch Name");
        TmpRequisitionLine.SETRANGE("Line No.",RequisitionLine."Line No.");
      END;
      RefreshPlanningDemand.SETTABLEVIEW(TmpRequisitionLine);
      RefreshPlanningDemand.USEREQUESTPAGE(FALSE);
      RefreshPlanningDemand.RUNMODAL;
    END;

    PROCEDURE SelectRequisitionTemplateName@1033() : Code[10];
    VAR
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::Planning);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      IF NOT ReqWkshTemplate.FINDFIRST THEN BEGIN
        ReqWkshTemplate.INIT;
        ReqWkshTemplate.VALIDATE(
          Name,LibraryUtility.GenerateRandomCode(ReqWkshTemplate.FIELDNO(Name),DATABASE::"Req. Wksh. Template"));
        ReqWkshTemplate.INSERT(TRUE);
        ReqWkshTemplate.VALIDATE(Type,ReqWkshTemplate.Type::Planning);
        ReqWkshTemplate.MODIFY(TRUE);
      END;
      EXIT(ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE SelectRequisitionWkshName@1019(VAR RequisitionWkshName@1000 : Record 245);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      IF NOT RequisitionWkshName.FINDFIRST THEN
        CreateRequisitionWkshName(RequisitionWkshName,SelectRequisitionTemplateName);
    END;

    BEGIN
    {
      Unsupported version tags:

      Contains all utility functions related to Planning.
    }
    END.
  }
}

