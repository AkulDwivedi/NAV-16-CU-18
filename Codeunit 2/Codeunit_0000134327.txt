OBJECT Codeunit 134327 ERM Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempDocumentEntry2@1012 : TEMPORARY Record 265;
      Assert@1004 : Codeunit 130000;
      LibraryERM@1003 : Codeunit 131300;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1024 : Codeunit 130509;
      LibraryWarehouse@1006 : Codeunit 132204;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryInventory@1013 : Codeunit 132201;
      LibraryService@1042 : Codeunit 131902;
      LibraryVariableStorage@1018 : Codeunit 131004;
      LibraryDimension@1021 : Codeunit 131001;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryJob@1016 : Codeunit 131920;
      LibrarySetupStorage@1017 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      FieldErr@1007 : TextConst '@@@=%1 - Table1, %2 Table2;ENU=Number of Lines for %1 and %2  must be Equal.';
      CurrencyErr@1005 : TextConst '@@@=%1 Field, %2 Table;ENU=%1 must be Equal in %2.';
      PostingDate2@1010 : Date;
      DocumentNo2@1011 : Code[20];
      AmountErr@1015 : TextConst '@@@=%1 Field, %2 Value, %3 Table;ENU=%1 must be %2 in %3.';
      PostErr@1008 : TextConst '@@@=%1 - Table, %2 - Template, %3 - Batch, %4 Line No.;ENU="Amount must be negative in %1 %2='''',%3='''',%4=''0''."';
      PostingErr@1014 : TextConst '@@@=%1 - Field, %2 - Table, %3 - Document Type caption, %4 - Document Type Value, %5 - No. caption, %6 - No. value;ENU="%1 must have a value in %2: %3=%4, %5=%6. It cannot be zero or empty."';
      StatusErr@1020 : TextConst '@@@=%1 - Table, %2 - Document Type, %3 - No.;ENU="Status must be equal to ''Open''  in %1: Document Type=%2, No.=%3. Current value is ''Released''."';
      CountErr@1025 : TextConst '@@@=%1 - Count, %2 - Table, %3 - Filters;ENU=There must be %1 record(-s) in table %2 with the following filters: %3';
      ColumnWrongVisibilityErr@1019 : TextConst '@@@=%1 - Column Index;ENU=Column[%1] has wrong visibility';
      IncorrectFieldValueErr@1022 : TextConst '@@@=%1 Field;ENU=Incorrect %1 field value.';
      IncorrectDimSetIDErr@1023 : TextConst '@@@=%1 Table;ENU=Incorrect Dimension Set ID in %1.';
      WrongQtyToReceiveErr@1026 : TextConst 'ENU=Qty. to Receive should not be non zero because Quantity was not changed.';
      JobUnitPriceErr@1029 : TextConst 'ENU=Job Unit Price is incorrect.';
      WrongDimValueErr@1039 : TextConst '@@@=%1 - Document No.;ENU=Wrong dimension value in Sales Header %1.';
      WrongValuePurchaseHeaderInvoiceErr@1028 : TextConst 'ENU=The value of field Invoice in copied Purchase Order must be ''No''.';
      WrongValuePurchaseHeaderReceiveErr@1027 : TextConst 'ENU=The value of field Receive in copied Purchase Order must be ''No''.';
      DocType@1030 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      WrongInvDiscAmountErr@1031 : TextConst 'ENU=Wrong Invoice Discount Amount in Purchase Line.';
      QtyToRecvBaseErr@1034 : TextConst 'ENU=Qty. to Receive (Base) must be equal to Qty. to Receive in Purchase Line';
      ReturnQtyToShipBaseErr@1035 : TextConst 'ENU=Return Qty. to Ship (Base) must be equal to Return Qty. to Ship in Purchase Line';
      QuantityToRecvBaseErr@1036 : TextConst 'ENU=Qty. to Receive (Base) must be equal to Quantity in Purchase Line';
      ReturnQuantitytyToShipBaseErr@1037 : TextConst 'ENU=Return Qty. to Ship (Base) must be equal to Quantity in Purchase Line';
      WrongJobTotalPriceErr@1032 : TextConst 'ENU=Wrong Job Total Price in Purchase Line.';
      WrongJobTotalPriceLCYErr@1033 : TextConst 'ENU=Wrong Job Total Price (LCY) in Purchase Line.';
      YouMustDeleteExistingLinesErr@1040 : TextConst '@@@=%1 - FieldCaption;ENU=You must delete the existing purchase lines before you can change %1.';
      PostedDocsToPrintCreatedMsg@1038 : TextConst 'ENU=One or more documents have been posted during deletion, which you can print from the related posted document.';
      AmountToAssignErr@1041 : TextConst 'ENU=Wrong Amount to Assign on reassigned lines';
      OptionStringRef@1043 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';

    [Test]
    PROCEDURE DeletePostedInvoicedPurchOrder@28();
    VAR
      InvoicePurchaseHeader@1003 : Record 38;
      PurchaseHeader@1000 : Record 38;
      PurchaseDocNo@1002 : Code[20];
    BEGIN
      // Tests that execution of report "Delete invoiced purch orders" deletes only purchase orders
      // which are posted and also invoiced.

      // Setup: Create and Purchase Order.
      Initialize;
      PurchaseDocNo := CreateAndPostPurchaseDocument(PurchaseHeader);

      InvoicePostedPurchaseOrder(InvoicePurchaseHeader,PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(InvoicePurchaseHeader,FALSE,TRUE);

      // Exercise: Run Delete Purchase Report Report.
      RunDeleteInvoicePurchaseReport(PurchaseHeader."Buy-from Vendor No.");

      // Verify: Verify Purchase Order has been deleted after running report.
      Assert.IsFalse(PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseDocNo),'Purchase order was not deleted.');
    END;

    [Test]
    PROCEDURE DeletePostedNotInvoicedPuOrder@30();
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      // Tests that execution of report "Delete invoiced purch orders" may not delete purchase orders
      // which are posted but not invoiced.

      // Setup.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader);

      // Run Delete Purchase Report Report and Verify.
      RunVerifyDeleteInvoiceReport(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."No.");
    END;

    [Test]
    PROCEDURE DeleteNotPostedPurchaseOrder@36();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Tests that execution of report "Delete invoiced purch orders" may not delete purchase orders
      // which are not posted. It does not matter if the order has/has not a stand-alone invoice
      // because the posting is a pre-requisite to match an order and an invoice.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Run Delete Purchase Report Report and Verify.
      RunVerifyDeleteInvoiceReport(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE RunVerifyDeleteInvoiceReport@39(BuyFromVendorNo@1005 : Code[20];PurchaseDocNo@1006 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      // Exercise.
      RunDeleteInvoicePurchaseReport(BuyFromVendorNo);

      // Return TRUE if purchase order has been deleted, otherwise FALSE
      Assert.IsTrue(PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseDocNo),'Purchase order was deleted.');
    END;

    [Test]
    PROCEDURE PurchaseOrderCreation@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test New Purchase Order creation.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Order.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Verify: Verify Purchase Order created.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE FieldsOnPurchaseInvoiceHeader@1960();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PaymentMethod@1002 : Record 289;
      PurchInvHeader@1005 : Record 122;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      LibraryERM.CreatePaymentMethod(PaymentMethod);
      PurchaseHeader."Creditor No." :=
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Creditor No."),DATABASE::"Purchase Header");
      PurchaseHeader."Payment Method Code" := PaymentMethod.Code;
      PurchaseHeader.MODIFY(TRUE);

      // Exercise
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Validate
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Creditor No.",PurchaseHeader."Creditor No.");
      PurchInvHeader.TESTFIELD("Payment Reference",PurchaseHeader."Payment Reference");
      PurchInvHeader.TESTFIELD("Payment Method Code",PurchaseHeader."Payment Method Code");
    END;

    [Test]
    PROCEDURE VATAmountOnPurhcaseOrder@4();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      VATAmountLine@1002 : Record 290;
      QtyType@1003 : 'General,Invoicing,Shipping';
      VATAmount@1005 : Decimal;
    BEGIN
      // Create a Purchase Order, Calculates applicable VAT for a VAT Posting Group and verify it with VAT Amount Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Calculate VAT Amount on Purchase Order.
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);
      VATAmount := PurchaseHeader.Amount * PurchaseLine."VAT %" / 100;

      // Verify: Verify VAT Amount on Purchase Order.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        VATAmount,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,VATAmountLine.FIELDCAPTION("VAT Amount"),VATAmount,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderReport@5();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Order@1005 : Report 405;
      FilePath@1002 : Text[1024];
    BEGIN
      // Create New Purchase Order and save as external file and verify saved files have data.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Generate Report as external file for Purchase Order.
      CLEAR(Order);
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      Order.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      Order.SAVEASEXCEL(FilePath);

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PurchaseOrderAsReceive@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1004 : Record 121;
      PurchaseLineCount@1006 : Integer;
      PostedDocumentNo@1003 : Code[20];
    BEGIN
      // Create New Purchase Order post as Receive and verify Posted Receipt No. of Lines are equals as Purchase Order No. of Lines.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLineCount := PurchaseLine.COUNT;

      // Exercise: Post Purchase Order as Receive.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Purchase Receipt Line Count with Purchase Line Count.
      PurchRcptLine.SETRANGE("Document No.",PostedDocumentNo);
      Assert.AreEqual(
        PurchaseLineCount,PurchRcptLine.COUNT,STRSUBSTNO(FieldErr,PurchaseLine.TABLECAPTION,PurchRcptLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderAsInvoice@14();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchInvHeader@1001 : Record 122;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create a Purchase Order, Post as Receive and Invoice and verify Vendor Ledger, GL Entry, and VAT Entry.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Post Purchase Order as Receive and Invoice.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: GL Entry, Vendor Ledger Entry, Value Entry and VAT Entry.
      PurchInvHeader.GET(PostedDocumentNo);
      PurchInvHeader.CALCFIELDS(Amount,"Amount Including VAT");
      VerifyGLEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT");
      VerifyVendorLedgerEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT");
      VerifyValueEntry(PostedDocumentNo,PurchInvHeader.Amount);
    END;

    [Test]
    PROCEDURE PostedPurchaseInvoiceReport@12();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvHeader@1003 : Record 122;
      PurchaseInvoice@1005 : Report 406;
      PostedDocumentNo@1002 : Code[20];
      FilePath@1004 : Text[1024];
    BEGIN
      // Test if Post a Purchase Order and generate Posted Purchase Invoice Report.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Generate Report as external file for Posted Purchase Invoice.
      CLEAR(PurchaseInvoice);
      PurchInvHeader.SETRANGE("No.",PostedDocumentNo);
      PurchaseInvoice.SETTABLEVIEW(PurchInvHeader);
      FilePath := TEMPORARYPATH + FORMAT('Purchase - Invoice') + PurchInvHeader."No." + '.xlsx';
      PurchaseInvoice.SAVEASEXCEL(FilePath);

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PurchaseOrderForWhseLocation@16();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1009 : Record 121;
      WarehouseEmployee@1003 : Record 7301;
      NoSeriesManagement@1010 : Codeunit 396;
      PostedDocumentNo@1008 : Code[20];
    BEGIN
      // Test if Post a Purchase Order with Warehouse Location and verify Posted Purchase Receipt Entry.

      // Setup
      Initialize;

      // Exercise: Create Purchase Order for Warehouse Location. Using RANDOM Quantity for Purchase Line, value is not important.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyLocationOnPurchaseLine(PurchaseLine);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,PurchaseLine."Location Code",FALSE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Post Warehouse Document as Receive.
      ReceiveWarehouseDocument(PurchaseHeader."No.",PurchaseLine."Line No.");

      // Verify: Verify Quantity Posted Receipt Document.
      PurchRcptLine.SETRANGE("Document No.",PostedDocumentNo);
      PurchRcptLine.FINDFIRST;
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      Assert.AreEqual(
        PurchaseLine."Quantity Received",PurchRcptLine.Quantity,STRSUBSTNO(FieldErr,PurchaseLine.TABLECAPTION,
          PurchRcptLine.TABLECAPTION));

      // Tear Down: Rollback Setup changes for Location and Warehouse Employee.
      ModifyWarehouseLocation(FALSE);
      WarehouseEmployee.GET(USERID,PurchaseLine."Location Code");
      WarehouseEmployee.DELETE;
    END;

    [Test]
    PROCEDURE PurchaseOrderForRequireReceiveLocation@243();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test Quantity re-validating with the same value does not cause Qty. to Receive modification.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Order for Warehouse Location with Require Receive.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyLocationOnPurchaseLine(PurchaseLine);

      PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      PurchaseLine.MODIFY(TRUE);

      // Verify.
      Assert.AreEqual(0,PurchaseLine."Qty. to Receive",WrongQtyToReceiveErr);
    END;

    [Test]
    PROCEDURE LineDiscountOnPurhcaseOrder@21();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseLineDiscount@1005 : Record 7014;
      PostedDocumentNo@1000 : Code[20];
      DiscountAmount@1002 : Decimal;
    BEGIN
      // Test Line Discount on Purchase Order, Post as Receive and Invoice and verify Posted GL Entry.

      // Setup: Create Line Discount Setup.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);

      // Exercise: Create and Post Purchase Order with Random Quantity. Take Quantity greater than Purchas Line Discount Minimum Quantity.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,PurchaseLineDiscount."Vendor No.");
      ModifyPurchaseHeader(PurchaseHeader,PurchaseHeader."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLineDiscount."Item No.",
        PurchaseLineDiscount."Minimum Quantity" + LibraryRandom.RandInt(10));
      DiscountAmount := (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * PurchaseLineDiscount."Line Discount %" / 100;
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Line Discount Amount.
      VerifyLineDiscountAmount(PurchaseLine,PostedDocumentNo,DiscountAmount);
    END;

    [Test]
    PROCEDURE InvoiceDiscountOnPurchaseOrder@29();
    VAR
      VendorInvoiceDisc@1002 : Record 24;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PostedDocumentNo@1000 : Code[20];
      DiscountAmount@1006 : Decimal;
    BEGIN
      // Create New Invoice Discount Setup for Vendor and make new Purchase Order, Post as Receive and Invoice and verify Posted GL Entry.

      // Setup: Create Invoice Discount Setup.
      Initialize;
      SetupInvoiceDiscount(VendorInvoiceDisc);

      // Exercise: Create Purchase Order, calculate Invoice Discount and Post as Receive and Invoice.
      // Using RANDOM Quantity for Purchase Line, value is not important.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorInvoiceDisc.Code);
      ModifyPurchaseHeader(PurchaseHeader,PurchaseHeader."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));

      // Order Value always greater than Minimum Amount of Invoice Discount Setup.
      PurchaseLine.VALIDATE("Direct Unit Cost",VendorInvoiceDisc."Minimum Amount");
      PurchaseLine.MODIFY(TRUE);
      DiscountAmount := (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VendorInvoiceDisc."Discount %" / 100;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Invoice Discount Amount.
      VerifyInvoiceDiscountAmount(PurchaseLine,PostedDocumentNo,DiscountAmount);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithFCY@25();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1005 : Record 122;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create and Post a Purchase Order with Currency and verify currency on Posted Purchase Invoice Entry.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Order, attach new Currency on Purchase Order and Post as Receive and Invoice.
      CreatePurchaseHeaderWithCurrency(PurchaseHeader,CreateCurrency);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Currency Code in Purchase Line and Posted Purchase Invoice Header.
      PurchInvHeader.GET(PostedDocumentNo);
      Assert.AreEqual(
        PurchaseHeader."Currency Code",PurchaseLine."Currency Code",
        STRSUBSTNO(CurrencyErr,PurchaseLine.FIELDCAPTION("Currency Code"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        PurchaseHeader."Currency Code",PurchInvHeader."Currency Code",
        STRSUBSTNO(CurrencyErr,PurchInvHeader.FIELDCAPTION("Currency Code"),PurchInvHeader.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(NavigatePageHandler)]
    PROCEDURE PostedInvoiceNavigate@44();
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseHeader@1000 : Record 38;
      PurchInvHeader@1001 : Record 122;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Test Navigate functionality for Posted Purchase Invoice.

      // Setup.
      Initialize;
      InitGlobalVariables;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Post Purchase Order as Ship & Invoice and open Navigate form.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchInvHeader.GET(DocumentNo);

      // Set global variable for page handler.
      PostingDate2 := PurchInvHeader."Posting Date";
      DocumentNo2 := PurchInvHeader."No.";

      PurchInvHeader.Navigate;

      // Verify: Verify Number of entries for all related tables.
      VerifyPostedEntries(DocumentNo2);
    END;

    [Test]
    [HandlerFunctions(NavigatePageHandler)]
    PROCEDURE PostedShipmentNavigate@32();
    VAR
      ItemLedgerEntry@1004 : Record 32;
      PurchaseLine@1002 : Record 39;
      PurchaseHeader@1000 : Record 38;
      PurchRcptHeader@1001 : Record 120;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Test Navigate functionality for Posted Purchase Shipment.

      // Setup.
      Initialize;
      InitGlobalVariables;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Post Purchase Order as Ship and open Navigate form.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      PurchRcptHeader.GET(DocumentNo);

      // Set global variable for page handler.
      PostingDate2 := PurchRcptHeader."Posting Date";
      DocumentNo2 := PurchRcptHeader."No.";

      PurchRcptHeader.Navigate;

      // Verify: Verify Number of entries with Item Ledger Entry.
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"Item Ledger Entry",ItemLedgerEntry.COUNT);
    END;

    [Test]
    [HandlerFunctions(NavigatePageHandler)]
    PROCEDURE PostedCreditMemoNavigate@46();
    VAR
      PurchaseLine@1000 : Record 39;
      PurchCrMemoHdr@1002 : Record 124;
      PurchaseHeader@1007 : Record 38;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Test Navigate functionality for Posted Purchase Credit Memo.

      // Setup.
      Initialize;
      InitGlobalVariables;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise: Post Purchase Credit Memo and open Navigate page.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchCrMemoHdr.GET(DocumentNo);

      // Set global variable for page handler.
      PostingDate2 := PurchCrMemoHdr."Posting Date";
      DocumentNo2 := PurchCrMemoHdr."No.";

      PurchCrMemoHdr.Navigate;

      // Verify: Verify Number of entries for all related tables.
      VerifyPostedEntries(DocumentNo2);
    END;

    [Test]
    [HandlerFunctions(NavigatePageHandler)]
    PROCEDURE PostedReturnShipmentNavigate@26();
    VAR
      ItemLedgerEntry@1001 : Record 32;
      PurchaseLine@1000 : Record 39;
      ReturnShipmentHeader@1002 : Record 6650;
      PurchaseHeader@1007 : Record 38;
      NoSeriesManagement@1003 : Codeunit 396;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Test Navigate functionality for Posted Purchase Return Shipment.

      // Setup.
      Initialize;
      InitGlobalVariables;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::"Return Order");

      // Exercise: Post Purchase Return Order and open Navigate page.
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Return Shipment No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ReturnShipmentHeader.GET(DocumentNo);

      // Set global variable for page handler.
      PostingDate2 := ReturnShipmentHeader."Posting Date";
      DocumentNo2 := ReturnShipmentHeader."No.";

      ReturnShipmentHeader.Navigate;

      // Verify: Verify Number of entries for all related tables.
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"Item Ledger Entry",ItemLedgerEntry.COUNT);
    END;

    [Test]
    [HandlerFunctions(NavigatePageHandler)]
    PROCEDURE PostedPaymentNavigate@50();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1001 : Record 232;
      Navigate@1002 : Page 344;
    BEGIN
      // Test Navigate functionality for Financial Management with General Lines.

      // Setup.
      Initialize;
      InitGlobalVariables;
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,CreateVendor,LibraryRandom.RandDec(1000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Set global variable for page handler.
      DocumentNo2 := GenJournalLine."Document No.";
      PostingDate2 := GenJournalLine."Posting Date";

      // Exercise: Post General Journal Line and open Navigate page.
      Navigate.SetDoc(PostingDate2,DocumentNo2);
      Navigate.RUN;

      // Verify: Verify Number of entries for all related tables.
      VerifyPostedPaymentNavigation(DocumentNo2);
    END;

    [Test]
    PROCEDURE ExtendedTextInPurchaseOrder@48();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1006 : Record 39;
      Vendor@1003 : Record 23;
      PurchaseOrder@1000 : TestPage 50;
      Text@1001 : Text[50];
    BEGIN
      // Check Extended Text in Purchase Order with Extended Text Line.

      // 1. Setup: Create Item, Vendor and Purchase Order.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      Text := CreateItemAndExtendedText(Item);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");

      // 2. Exercise: Insert Extended Text in Purchase Line.
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines."Insert Ext. Texts".INVOKE;

      // 3. Verify: Check Desription and No. of Purchase Order must match with Extended Text Line.
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::" ");
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Description,Text);
    END;

    [Test]
    PROCEDURE PostPartialPurchaseOrder@33();
    VAR
      VendorPostingGroup@1003 : Record 93;
      GeneralLedgerSetup@1007 : Record 98;
      GLEntry@1006 : Record 17;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
      TotalAmount@1004 : Decimal;
    BEGIN
      // Check GL Entry after Posting Partial Purchase Order.

      // Setup: Create and Post Purchase Order with Partial Receive.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyPurchaseLineQtyToReceive(PurchaseLine,PurchaseLine."Qty. to Receive" / 2);
      TotalAmount := PurchaseLine."Qty. to Receive" * PurchaseLine."Direct Unit Cost";
      TotalAmount := TotalAmount + (TotalAmount * PurchaseLine."VAT %" / 100);

      // Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL Entry for Partial Purchase Invoice.
      VendorPostingGroup.GET(PurchaseHeader."Vendor Posting Group");
      FindGLEntry(GLEntry,DocumentNo,VendorPostingGroup."Payables Account");
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        -TotalAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),TotalAmount,GLEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderNegativeErrorMsg@10();
    VAR
      GenJournalLine@1010 : Record 81;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Check Purchase Order Posting Error Message when amount is Negative.

      // Setup: Create and Post Purchase Order with Partial Receive and modify Purchase Line with Negative Amount.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyPurchaseLineQtyToReceive(PurchaseLine,PurchaseLine."Qty. to Receive" / 2);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      ModifyPurchaseHeader(PurchaseHeader,PurchaseHeader."Buy-from Vendor No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PurchaseLine.VALIDATE("Direct Unit Cost",-PurchaseLine."Direct Unit Cost");
      PurchaseLine.MODIFY(TRUE);

      // Exercise: Try to Post Purchase Order with Negative Amount.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Error Message raised during Negative amount posting of Purchase Order.
      Assert.AreEqual(
        STRSUBSTNO(PostErr,GenJournalLine.TABLECAPTION,GenJournalLine.FIELDCAPTION("Journal Template Name"),
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),PurchaseLine.FIELDCAPTION("Line No.")),GETLASTERRORTEXT,'Unknown Error');
    END;

    [Test]
    PROCEDURE ArchieveVersionPurchaseOrder@42();
    VAR
      PurchaseLineArchive@1009 : Record 5110;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Check Purchase Line Archive for Archive Version after Posting Partial Purchase Order.

      // Setup: Create and Post Purchase Order with Archive Quotes and Orders TRUE on Purchase and payable Setup.
      Initialize;
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyPurchaseLineQtyToReceive(PurchaseLine,PurchaseLine."Qty. to Receive" / 2);

      // Exercise: Post Purchase Order with Receive.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify No. of Archived Versions fields on Purchase Header and Purchase Line Archive.
      // Take 1 as static becuase it will generate 1 Posting of Purchase Order on first time.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.CALCFIELDS("No. of Archived Versions");
      PurchaseHeader.TESTFIELD("No. of Archived Versions",1);

      PurchaseLineArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLineArchive.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLineArchive.FINDFIRST;
      PurchaseLineArchive.TESTFIELD("Version No.",PurchaseHeader."No. of Archived Versions");
      PurchaseLineArchive.TESTFIELD("Qty. to Receive",PurchaseLine."Qty. to Receive");
      PurchaseLineArchive.TESTFIELD(Quantity,PurchaseLine.Quantity);
      PurchaseLineArchive.TESTFIELD("Qty. to Invoice",PurchaseLine."Qty. to Invoice");
    END;

    [Test]
    PROCEDURE VendorRemainingPaymentDiscount@60();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1003 : Code[20];
      DueDate@1002 : Date;
      PmtDiscountDate@1004 : Date;
      RemainingPmtDiscPossible@1005 : Decimal;
    BEGIN
      // Test and verify Remaining Payment Discount Possible for Vendor.

      // Setup: Create and Post Purchase Order.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Update Vendor Ledger Entry.
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PmtDiscountDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      RemainingPmtDiscPossible := PurchaseLine."Line Amount" / 2;
      UpdateVendorLedgerEntry(DocumentNo,DueDate,PmtDiscountDate,-RemainingPmtDiscPossible);

      // Verify: Verify values on Vendor Ledger Entry.
      VerifyValuesOnVendLedgerEntry(DocumentNo,DueDate,PmtDiscountDate,-RemainingPmtDiscPossible);
    END;

    [Test]
    PROCEDURE VendorCreationByPage@55();
    VAR
      TempVendor@1001 : TEMPORARY Record 23;
    BEGIN
      // To create a new Vendor with Page and verify it.

      // Setup.
      Initialize;

      // Exercise: Create Vendor with Page.
      CreateTempVendor(TempVendor);
      CreateVendorCard(TempVendor);

      // Verify: Verify values on Vendor.
      VerifyVendor(TempVendor);
    END;

    [Test]
    PROCEDURE PurchaseInvoice@58();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Create Purchase Invoice, Post and Verify Purchase Invoice Header and Line.

      // Setup: Create Purchase Invoice.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Invoice);

      // Exercise: Post Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check Buy from Vendor No., Item No., Quantity in Purchase Invoice Header and Line.
      VerifyPurchaseInvoice(DocumentNo,PurchaseLine);
    END;

    [Test]
    PROCEDURE PurchaseCreditMemo@57();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Create Purchase Credit Memo, Post and Verify Purchase Credit Memo Header and Line.

      // Setup: Create Purchase Credit Memo.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise: Post Purchase Credit Memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check Buy from Vendor No., Item No., Quantity in Purchase Credit Memo Header and Line.
      VerifyPurchaseCreditMemo(DocumentNo,PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(StandardVendorPurchCodesHndlr)]
    PROCEDURE PurchaseOrderStandardPurchCode@78();
    VAR
      PurchaseHeader@1004 : Record 38;
      StandardPurchaseLine@1001 : Record 174;
    BEGIN
      // Check Purchase Code Line are copied correctly in Purchase Line.

      // Setup: Update Stock Out Warning.
      Initialize;

      // Exercise: Create Purchase Order with Purchase Code.
      CreatePurchOrderWithPurchCode(StandardPurchaseLine,PurchaseHeader,'','');

      // Verify: Verify Purchase Code Line are copied correctly in Purchase Line.
      VerifyPurchaseLine(StandardPurchaseLine,PurchaseHeader."No.",'','');
    END;

    [Test]
    [HandlerFunctions(StandardVendorPurchCodesHndlr)]
    PROCEDURE PurchaseOrderCopyStandardCode@77();
    VAR
      PurchaseHeader@1009 : Record 38;
      PurchaseHeader2@1010 : Record 38;
      StandardPurchaseLine@1002 : Record 174;
      PostedPurchaseInvoiceNo@1000 : Code[20];
      DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // Verify Posted Purchase Line of one document is copied correctly in Purchase Line of second document.

      // Setup: Create and post Purchase Order with Purchase Code.
      Initialize;
      CreatePurchOrderWithPurchCode(StandardPurchaseLine,PurchaseHeader,'','');
      ModifyDirectUnitCost(PurchaseHeader);
      PostedPurchaseInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::Invoice,PurchaseHeader."Buy-from Vendor No.");
      COMMIT;  // COMMIT is required here.

      // Exercise: Copy Purchase Document.
      PurchaseCopyDocument(PurchaseHeader2,PostedPurchaseInvoiceNo,DocumentType::"Posted Invoice");

      // Verify: Verify values on Copy Purchase Lines .
      VerifyCopyPurchaseLine(PostedPurchaseInvoiceNo,PurchaseHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(PurchaseCodePageHandler)]
    PROCEDURE DimensionOnVendorAndStandardPurchaseCode@152();
    VAR
      Item@1005 : Record 27;
      Dimension@1003 : Record 348;
      Vendor@1006 : Record 23;
      StandardPurchaseLine@1009 : Record 174;
      PurchaseHeader@1015 : Record 38;
      PurchaseLine@1000 : Record 39;
      DefaultDimension@1001 : Record 352;
      StandardPurchaseCode@1004 : Record 173;
      StandardVendorPurchaseCode@1002 : Record 175;
      DifferentDimensionCode@1007 : Code[20];
    BEGIN
      // Test Dimensions are "merged" between the ones coming from Standard Sales Code and Sales Header (customer)

      // 1. Setup : Create Item and customer with dimensions
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateItemWithDimension(Item,Dimension.Code,DefaultDimension."Value Posting"::" ");
      DifferentDimensionCode := FindDifferentDimension(Dimension.Code);
      CreateVendorWithDimension(Vendor,DefaultDimension,DefaultDimension."Value Posting",DifferentDimensionCode);

      // Create Standard Codes and sales header
      LibraryPurchase.CreateStandardPurchaseCode(StandardPurchaseCode);
      CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code,StandardPurchaseLine.Type::Item,Item."No.");
      UpdateDimensionSetID(StandardPurchaseLine,Dimension.Code);
      LibraryPurchase.CreateVendorPurchaseCode(StandardVendorPurchaseCode,Vendor."No.",StandardPurchaseLine."Standard Purchase Code");

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");

      // 2. Exercise
      LibraryVariableStorage.Enqueue(Vendor."No."); // for the page handler
      StandardVendorPurchaseCode.InsertPurchLines(PurchaseHeader);

      // 3. Verify : Verify that sales Line Dimensions are copied from Standard Sales Line and header
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.",PurchaseHeader."Document Type");
      VerifyDimensionCode(PurchaseLine."Dimension Set ID",Dimension.Code);
      VerifyDimensionCode(PurchaseLine."Dimension Set ID",DefaultDimension."Dimension Code");
    END;

    [Test]
    [HandlerFunctions(SuggstItemChargeAssgntVldHndlr,ConfirmHandler)]
    PROCEDURE ItemChargeAssignmentPurchOrder@69();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Order and Validate Item Charge Assignment Purch.

      // Setup: Create Purchase Order.
      Initialize;
      CreatePurchaseOrderChargeItem(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Create Purchase Line with Document Type as Item and Charge(Item).
      DocumentNo2 := PurchaseHeader."No.";  // Insert the Purchase Header No. in global variable.
      PurchaseLine.ShowItemChargeAssgnt;

      // Verify: Verification of Item Charge Assignment Purchase has done in SuggstItemChargeAssgntVldHndlr Handler.
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuEquallyHandler)]
    PROCEDURE ValidateItemChargeAssignmentPostPurchaseOrder@79();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Order and Suggest Item Charge Assignment then Validate Item Charge Assignment Purch.

      // Setup: Create Purchase Order.
      Initialize;
      CreatePurchaseOrderChargeItem(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Assign the Item Charge.
      PurchaseLine.ShowItemChargeAssgnt;

      // Verify: Validate Item Charge Assignment Purch.
      VerifyItemChargeAssignment(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuEquallyHandler)]
    PROCEDURE GetReceiptLinesOnPurchaseInvoice@67();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Create Purchase Invoice, and Get Receipt Lines, Verify that lines get generated on Purchase Invoice and Post the Invoice.

      // Setup: Create Purchase Order and Post.
      Initialize;
      CreatePurchaseOrderAndPost(PurchaseHeader,PurchaseLine);

      // Exercise: Get Receipt Lines for Invoice.
      InvoicePostedPurchaseOrder(PurchaseHeader2,PurchaseHeader);

      // Verify: Validate Purchase Invoice.
      VerifyPurchaseDocument(PurchaseHeader."No.",PurchaseHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuEquallyHandler)]
    PROCEDURE VendorInvoiceNoPostedPurchaseInvoice@64();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Create Purchase Invoice with Item Charge Assignment & Validate the Vendor Invoice No in Posted Purchase Invoice.

      // Setup: Create Purchase Order and Post.
      Initialize;
      CreatePurchaseOrderAndPost(PurchaseHeader,PurchaseLine);

      // Exercise: Create Purchase Invoice and Get Receipt Lines for Invoice.
      InvoicePostedPurchaseOrder(PurchaseHeader2,PurchaseHeader);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader2."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::"Charge (Item)");
      PurchaseLine.FINDFIRST;
      PurchaseLine.ShowItemChargeAssgnt;

      DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Validate Vendor Invoice No. in Posted Purchase Invoice.
      VerifyPurchaseInvoiceDocument(DocumentNo2,PurchaseHeader2."Vendor Invoice No.",PurchaseLine);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithPostingDateBlank@81();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchasesPayablesSetup@1003 : Record 312;
    BEGIN
      // Try to Post a Purchase Order with blank Posting Date.

      // Setup: Create Purchase Order with Modified Purchase and Payables Setup.
      Initialize;
      UpdateDefaultPostingDate(PurchasesPayablesSetup."Default Posting Date"::"No Date");

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));

      // Exercise: Try to post Purchase Order.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify posting error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          PostingErr,PurchaseHeader.FIELDCAPTION("Posting Date"),PurchaseHeader.TABLECAPTION,
          PurchaseHeader.FIELDCAPTION("Document Type"),
          PurchaseHeader."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseHeader."No."));
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithInvoiceDiscount@95();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorInvoiceDisc@1005 : Record 24;
      DocumentNo@1002 : Code[20];
      OldAutomaticCostPosting@1003 : Boolean;
      DiscountAmount@1004 : Decimal;
      VATAmount@1006 : Decimal;
    BEGIN
      // Create a new Purchase Order and Verify the posted values.

      // Setup: Update Automatic Cost Posting in Inventory setup, Vendor Invoice Discount and Create Purchase Order.
      Initialize;
      CreateInvoiceDiscount(VendorInvoiceDisc);
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateAutomaticCostPosting(OldAutomaticCostPosting,TRUE);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,VendorInvoiceDisc.Code,PurchaseHeader."Document Type"::Order);
      DiscountAmount := ((VendorInvoiceDisc."Discount %" * PurchaseLine."Line Amount") / 100);
      VATAmount := ((PurchaseLine."VAT %" * (PurchaseLine."Line Amount" - DiscountAmount)) / 100);

      // Exercise: Calculate Invoice Discount and post Purchase Order.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check GL Entry, Vendor Ledger Entry, Detailed Vendor Ledger Entry, Value Entry and VAT Entry.
      VerifyGLEntryWithVATAmount(DocumentNo,PurchaseLine);
      VerifyVendorLedgerEntryWithRemainingAmount(DocumentNo,PurchaseLine."Line Amount" - DiscountAmount + VATAmount);
      VerifyDetailedVendorLedgerEntry(DocumentNo,PurchaseLine."Line Amount" - DiscountAmount + VATAmount);
      VerifyAmountInValueEntry(DocumentNo,PurchaseHeader."Buy-from Vendor No.",PurchaseLine."Line Amount" - DiscountAmount);

      // Tear Down:
      UpdateAutomaticCostPosting(OldAutomaticCostPosting,OldAutomaticCostPosting);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseOrderWithDifferentPayToVendorNo@34();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorNo@1002 : Code[20];
    BEGIN
      // Test to validate Program populates information on Individual tab on Purchase Order according to Pay-to Vendor No.

      // Setup: Create purchase Order.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem);

      // Exercise: Change pay to Vendor No of Purchase Order.
      VendorNo := CreateVendor;
      PurchaseHeader.VALIDATE("Pay-to Vendor No.",VendorNo);
      PurchaseHeader.MODIFY(TRUE);

      // Verify: Purchase Order With Different Pay To Vendor No.
      VerifyPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Pay-to Vendor No.",PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE PurchLineStdTextOnModifyBuyFromVendorNo@200();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [SCENARIO 360323] Purchase line with Standard Text type is not deleted when 'Buy-From Vendor No.' changed
      Initialize;

      // [GIVEN] Create Purchase Order header with Vendor = 'A'
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      // [GIVEN] Add a Purchase Line of Standard Text
      CreateStandardTextLine(PurchaseLine,PurchaseHeader);

      // [WHEN] Modify 'Buy-From Vendor No.' to 'B' on Purchase Header.
      PurchaseHeader.SetHideValidationDialog(TRUE);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",CreateVendor);

      // [THEN] Purchase line with Standard Text still exists
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::" ");
      PurchaseLine.SETRANGE("No.",PurchaseLine."No.");
      PurchaseLine.FINDFIRST;
    END;

    [Test]
    PROCEDURE PurchaseOrderWithChangeUOM@102();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Create Item with multiple Unit of Measure and Create Purchase Order with Job and verify Job Unit Price is updated when changing UOM on Purchase Line.

      // Setup: Create Item with multiple item unit of measure and Create purchase order.
      Initialize;
      CreateItemWithUnitPrice(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      // Exercise: Create Purchase Order and Change the UOM on Purchase Line.
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine,Item."No.",ItemUnitOfMeasure.Code);

      // Verify: Check the JOB Unit Price is changed.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        PurchaseLine."Job Unit Price",Item."Unit Price" * ItemUnitOfMeasure."Qty. per Unit of Measure",
        GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Job Unit Price"),PurchaseLine."Job Unit Price",PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderWithJobUnitCostFactor@212();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      UnitCostFactor@1008 : Decimal;
    BEGIN
      // Create Item with multiple Unit of Measure and Create Purchase Order with Job and verify Job Unit Price is updated when changing UOM on Purchase Line.

      // Setup: Create Item with item unit of measure and Create purchase order.
      Initialize;

      // Exercise: Create Purchase Order and Change the UOM on Purchase Line.
      CreateItemWithUOMandStandartCost(Item);
      CreatePurchOrderWithJobAndJobItemPrice(PurchaseHeader,PurchaseLine,Item."No.",Item."Base Unit of Measure",UnitCostFactor);

      // Verify: Job Unit Price is not cleared after setting Quantity.
      Assert.AreEqual(Item."Unit Cost" * UnitCostFactor,PurchaseLine."Job Unit Price",JobUnitPriceErr);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithChangeUOMAndVerifyGLAndJobLedger@141();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1004 : Code[20];
      JobNo@1005 : Code[20];
      LineAmount@1006 : Decimal;
      JobUnitPrice@1007 : Decimal;
    BEGIN
      // Create Item with multiple Unit of Measure and Create Purchase Order with Job and change UOM on Purchase Line and verify GL Entry.

      // Setup: Create Item with multiple item unit of measure and Create purchase order.
      Initialize;
      CreateItemWithUnitPrice(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine,Item."No.",ItemUnitOfMeasure.Code);
      JobNo := PurchaseLine."Job No.";
      LineAmount := PurchaseLine."Line Amount";
      JobUnitPrice := PurchaseLine."Job Unit Price";

      // Exercise: Post Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check the JOB Unit Price is changed.
      VerifyGLEntryWithJob(DocumentNo,JobNo,LineAmount);
      VerifyJobLedgerEntry(PurchaseLine,DocumentNo,JobNo,JobUnitPrice);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithIndirectCostItemVerifyJobLedger@181();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1004 : Code[20];
      JobNo@1005 : Code[20];
      JobUnitPrice@1007 : Decimal;
    BEGIN
      // Create Item with multiple Unit of Measure and Create Purchase Order with Job and change UOM on Purchase Line and verify GL Entry.

      // Setup: Create Item with multiple item unit of measure and Create purchase order.
      Initialize;
      CreateItemWithUnitPrice(Item);
      ModifyItemIndirectCost(Item);

      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine,Item."No.",ItemUnitOfMeasure.Code);
      JobNo := PurchaseLine."Job No.";
      JobUnitPrice := PurchaseLine."Job Unit Price";

      // Exercise: Post Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check the JOB Ledger Entry has right Total Cost (LCY).
      VerifyJobLedgerEntry(PurchaseLine,DocumentNo,JobNo,JobUnitPrice);
    END;

    [Test]
    PROCEDURE ReturnQtyToShipBaseInPurchaseCreditMemoIsValidatedWhileDefaultQtyToReceiveIsRemainder@255();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361731] "Return Qty. to Ship (Base)" in Purchase Credit Memo is validated while "Default Qty. to Receive" is "Remainder"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Remainder" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Remainder);

      // [GIVEN] Purchase Credit Memo Line with "Quantity" = 0.
      CreatePurchaseLineWithQty(PurchaseLine,0,PurchaseHeader."Document Type"::"Credit Memo");

      // [WHEN] Set "Quantity" in Purchase Invoice Line to "X"
      Qty := LibraryRandom.RandDec(1000,2);
      PurchaseLine.VALIDATE(Quantity,Qty);

      // [THEN] "Return Qty. to Ship (Base)" in Purchase Credit Memo Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Return Qty. to Ship (Base)",ReturnQuantitytyToShipBaseErr);
    END;

    [Test]
    PROCEDURE ReturnQtyToShipBaseInPurchaseCreditMemoIsValidatedWhileDefaultQtyToReceiveIsBlank@254();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361731] "Return Qty. to Ship (Base)" in Purchase Credit Memo is validated while "Default Qty. to Receive" is "Blank"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Blank" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      // [GIVEN] Purchase Invoice Line with "Quantity" = 0.
      CreatePurchaseLineWithQty(PurchaseLine,0,PurchaseHeader."Document Type"::"Credit Memo");

      // [WHEN] Set "Quantity" in Purchase Invoice Line to "X"
      Qty := LibraryRandom.RandDec(1000,2);
      PurchaseLine.VALIDATE(Quantity,Qty);

      // [THEN] "Return Qty. to Ship (Base)" in Purchase Credit Memo Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Return Qty. to Ship (Base)",ReturnQuantitytyToShipBaseErr);
    END;

    [Test]
    PROCEDURE QtyToReceiveBaseInPurchaseInvoiceIsValidatedWhileDefaultQtyToReceiveIsReminder@256();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361731] "Qty. To Receive (Base)" in Purchase Invoice is validated while "Default Qty. to Receive" is "Reminder"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Remainder" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Remainder);

      // [GIVEN] Purchase Invoice Line with "Quantity" = 0.
      CreatePurchaseLineWithQty(PurchaseLine,0,PurchaseHeader."Document Type"::Invoice);

      // [WHEN] Set "Quantity" in Purchase Invoice Line to "X"
      Qty := LibraryRandom.RandDec(1000,2);
      PurchaseLine.VALIDATE(Quantity,Qty);

      // [THEN] "Qty. To Receive (Base)" in Purchase Invoice Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Qty. to Receive (Base)",QuantityToRecvBaseErr);
    END;

    [Test]
    PROCEDURE QtyToReceiveBaseInPurchaseInvoiceIsValidatedWhileDefaultQtyToReceiveIsBlank@261();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361731] "Qty. To Receive (Base)" in Purchase Invoice is validated while "Default Qty. to Receive" is "Blank"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Blank" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      // [GIVEN] Purchase Invoice Line with "Quantity" = 0.
      CreatePurchaseLineWithQty(PurchaseLine,0,PurchaseHeader."Document Type"::Invoice);

      // [WHEN] Set "Quantity" in Purchase Invoice Line to "X"
      Qty := LibraryRandom.RandDec(1000,2);
      PurchaseLine.VALIDATE(Quantity,Qty);

      // [THEN] "Qty. To Receive (Base)" in Purchase Invoice Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Qty. to Receive (Base)",QuantityToRecvBaseErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptWithDefaultQtyBlank@106();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchRcptLine@1004 : Record 121;
    BEGIN
      // Verify that Qty to receive in Purchase Line is blank after doing Undo receipt when Default Qty To Receive field is balnk in Purchases & Payables setup.

      // Setup: Update Purchases & Payables setup, Create and post purchase order.
      Initialize;
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      ModifyPurchaseLineQtyToReceive(PurchaseLine,PurchaseLine.Quantity / LibraryRandom.RandIntInRange(2,4)); // To make sure Qty. to receive must be less than Quantity.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      FindPurchRcptLine(PurchRcptLine,PurchaseLine."Document No.");

      // Exercise: Undo purchase receipt.
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // Verify: Verify Quantity after Undo Receipt on Posted Purchase Receipt And Quantity to Receive is blank on Purchase Line.
      VerifyUndoReceiptLineOnPostedReceipt(PurchaseLine."Document No.",PurchaseLine."Qty. to Receive");
      VerifyQuantitytoReceiveOnPurchaseLine(PurchaseHeader."Document Type",PurchaseHeader."No.");
    END;

    [Test]
    PROCEDURE QtyToReceiveBaseInPurchaseLineIsValidatedWhileDefaultQtyToReceiveIsRemainder@221();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361537] "Qty. to receive (Base)" in Purchase Line is validated while "Default Qty. to Receive" is "Remainder"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Remainder" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Remainder);

      // [GIVEN] Purchase Line with "Qty. To Receive" = 0.
      Qty := LibraryRandom.RandDec(1000,2);
      CreatePurchaseLineWithQty(PurchaseLine,Qty,PurchaseHeader."Document Type"::Order);

      // [WHEN] Set "Qty. To Receive" in Purchase Order Line to "X"
      PurchaseLine.VALIDATE("Qty. to Receive",Qty);

      // [THEN] "Qty. To Receive (Base)" in Purchase Order Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Qty. to Receive (Base)",QtyToRecvBaseErr);
    END;

    [Test]
    PROCEDURE QtyToReceiveBaseInPurchaseLineIsValidatedWhileDefaultQtyToReceiveIsBlank@228();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361537] "Qty. to receive (Base)" in Purchase Line is validated while "Default Qty. to Receive" is "Blank"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Blank" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      // [GIVEN] Purchase Line with "Qty. To Receive" = 0.
      Qty := LibraryRandom.RandDec(1000,2);
      CreatePurchaseLineWithQty(PurchaseLine,Qty,PurchaseHeader."Document Type"::Order);

      // [WHEN] Set "Qty. To Receive" in Purchase Order Line to "X"
      PurchaseLine.VALIDATE("Qty. to Receive",Qty);

      // [THEN] "Qty. To Receive (Base)" in Purchase Order Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Qty. to Receive (Base)",QtyToRecvBaseErr);
    END;

    [Test]
    PROCEDURE ReturnQtyToShipBaseInPurchaseLineIsValidatedWhileDefaultQtyToReceiveIsRemainder@226();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361537] "Return Qty. to Ship (Base)" in Purchase Line is validated while "Default Qty. to Receive" is "Remainder"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Blank" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Remainder);

      // [GIVEN] Purchase Line with "Return Qty. To Ship" = 0.
      Qty := LibraryRandom.RandDec(1000,2);
      CreatePurchaseLineWithQty(PurchaseLine,Qty,PurchaseHeader."Document Type"::Order);

      // [WHEN] Set "Return Qty. to Ship" in Purchase Order Line to "X"
      PurchaseLine.VALIDATE("Return Qty. to Ship",Qty);

      // [THEN] "Return Qty. to Ship (Base)" in Purchase Order Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Return Qty. to Ship (Base)",ReturnQtyToShipBaseErr);
    END;

    [Test]
    PROCEDURE ReturnQtyToShipBaseInPurchaseLineIsValidatedWhileDefaultQtyToReceiveIsBlank@214();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO 361537] "Return Qty. to Ship (Base)" in Purchase Line is validated while "Default Qty. to Receive" is "Blank"
      Initialize;

      // [GIVEN] "Default Quantity to Receive" is "Remainder" in Purchase and Payable Setup.
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      // [GIVEN] Purchase Line with "Return Qty. To Ship" = 0.
      Qty := LibraryRandom.RandDec(1000,2);
      CreatePurchaseLineWithQty(PurchaseLine,Qty,PurchaseHeader."Document Type"::Order);

      // [WHEN] Set "Return Qty. to Ship" in Purchase Order Line to "X"
      PurchaseLine.VALIDATE("Return Qty. to Ship",Qty);

      // [THEN] "Return Qty. to Ship (Base)" in Purchase Order Line is "X"
      Assert.AreEqual(Qty,PurchaseLine."Return Qty. to Ship (Base)",ReturnQtyToShipBaseErr);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithGLAccAndUOMDefaultQtyBlank@206();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      GLAccount@1005 : Record 15;
      UnitOfMeasure@1006 : Record 204;
    BEGIN
      // Verify that Qty to receive in Purchase Line is blank after enering G/L Account with UoM

      // Setup: Update Purchases & Payables setup, Create purchase order.
      Initialize;
      UpdateDefaultQtyToReceive(PurchasesPayablesSetup."Default Qty. to Receive"::Blank);

      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      GLAccount.GET(LibraryERM.CreateGLAccountWithPurchSetup);

      // Exercise: create purchase line for G/L account and update Unit of Measure
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccount."No.",LibraryRandom.RandInt(10));
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      PurchaseLine.VALIDATE("Unit of Measure",UnitOfMeasure.Code);

      // Verify: Verify Quantity after Undo Receipt on Posted Purchase Receipt And Quantity to Receive is blank on Purchase Line.
      Assert.AreEqual(0,PurchaseLine."Qty. to Receive",'qty. to Receive should be 0');
    END;

    [Test]
    PROCEDURE PostedPurchaseInvoiceWithPartialQuantity@113();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Check the Quantity on Posted Purchase Invoice Line when Purchase Order Posted using Purchase Order Page.

      // Setup: Create Purchase Order.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem);
      PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice" / LibraryRandom.RandIntInRange(2,5));
      PurchaseLine.MODIFY(TRUE);

      // Exercise: Open Created Purchase Header from Purchase Order Page check "Buy from Vendor No." and Post Purchase Document.
      OpenPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Buy-from Vendor No.",PurchaseHeader.Status);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Quantity on Posted Purchase Invoice Line is equal to Purchase Line Quantity to Invoice.
      VerifyQuantityOnPurchaseInvoiceLine(PurchaseHeader."No.",PurchaseLine."Buy-from Vendor No.",PurchaseLine."Qty. to Invoice");
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixRequestPageHandler)]
    PROCEDURE PurchaseAnalysisReportWithItemLedgerEntryTypePurchase@126();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisReportName@1004 : Record 7111;
      ItemAnalysisView@1002 : Record 7152;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      ValueEntry@1000 : Record 5802;
      ItemNo@1003 : Code[20];
    BEGIN
      // Check Cost Amount(Expected) on Purchase Analysis Matrix when Item Ledger Entry Type Filter Purchase.

      // Setup: Post Purchase Document with Ship Option and Create Analysis Report Name.
      Initialize;
      ItemNo := CreateItem;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);
      FindValueEntry(ValueEntry,ItemNo,PurchaseHeader."Buy-from Vendor No.",
        LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
      LibraryVariableStorage.Enqueue(ValueEntry."Cost Amount (Expected)");
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Purchase with Correct filter Item Ledger Entry Type Purchase.
      OpenAnalysisReportPurchase(AnalysisReportName.Name,
        CreateAnalysisLineWithTypeVendor(ItemAnalysisView."Analysis Area",PurchaseHeader."Buy-from Vendor No."),
        CreateAnalysisColumnWithItemLedgerEntryType(ItemAnalysisView."Analysis Area",
          FORMAT(ValueEntry."Item Ledger Entry Type"::Purchase),AnalysisColumn."Value Type"::"Cost Amount"));

      // Verify: Verification done in PurchaseAnalysisMatrixRequestPageHandler.
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixRequestPageHandler)]
    PROCEDURE PurchaseAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeSale@124();
    VAR
      AnalysisColumn@1001 : Record 7118;
      ValueEntry@1000 : Record 5802;
    BEGIN
      // Check Sale Amount on Purchase Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      PurchaseAnalysisReportWithItemLedgerEntryTypeAndValueType(AnalysisColumn."Value Type"::"Sales Amount",
        ValueEntry."Item Ledger Entry Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixRequestPageHandler)]
    PROCEDURE PurchaseAnalysisReportWithItemLedgerEntryTypeSaleAndValueTypeCost@123();
    VAR
      AnalysisColumn@1001 : Record 7118;
      ValueEntry@1000 : Record 5802;
    BEGIN
      // Check Cost Amount(Expected) on Purchase Analysis Matrix when Item Ledger Entry Type Filter Sale.
      PurchaseAnalysisReportWithItemLedgerEntryTypeAndValueType(AnalysisColumn."Value Type"::"Cost Amount",
        ValueEntry."Item Ledger Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixRequestPageHandler)]
    PROCEDURE PurchaseAnalysisReportWithItemLedgerEntryTypeSaleAndValueTypeSales@122();
    VAR
      AnalysisColumn@1000 : Record 7118;
      ValueEntry@1005 : Record 5802;
    BEGIN
      // Check Sales Amount on Purchase Analysis Matrix when Item Ledger Entry Type Filter Sale.
      PurchaseAnalysisReportWithItemLedgerEntryTypeAndValueType(AnalysisColumn."Value Type"::"Sales Amount",
        ValueEntry."Item Ledger Entry Type"::Sale);
    END;

    LOCAL PROCEDURE PurchaseAnalysisReportWithItemLedgerEntryTypeAndValueType@121(AnalysisColumnValueType@1003 : Option;ValueType@1004 : Option);
    VAR
      AnalysisReportName@1001 : Record 7111;
      ItemAnalysisView@1002 : Record 7152;
      PurchaseHeader@1010 : Record 38;
      PurchaseLine@1005 : Record 39;
      ItemNo@1000 : Code[20];
    BEGIN
      // Setup: Post Purchase Document with Ship Option and Create Analysis Report Name.
      Initialize;
      ItemNo := CreateItem;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      LibraryVariableStorage.Enqueue(0);  // Amount must be zero when an incorrect filter is applied.
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Purchase with wrong filter Item Ledger Entry Type Sale.
      OpenAnalysisReportPurchase(AnalysisReportName.Name,
        CreateAnalysisLineWithTypeVendor(ItemAnalysisView."Analysis Area",PurchaseHeader."Buy-from Vendor No."),
        CreateAnalysisColumnWithItemLedgerEntryType(ItemAnalysisView."Analysis Area",FORMAT(ValueType),AnalysisColumnValueType));

      // Verify: Verification done in PurchaseAnalysisMatrixRequestPageHandler.
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixRequestPageHandler)]
    PROCEDURE PurchaseAnalysisReportWIthColumnHeader@354();
    VAR
      AnalysisReportName@1004 : Record 7111;
      AnalysisColumnTemplate@1002 : Record 7116;
      AnalysisColumn@1009 : Record 7118;
      AnalysisLineTemplateName@1000 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 201736] "Column Header" is placed as column caption in Purchase Analysis Matrix
      Initialize;

      // [GIVEN] Analysis Report Name "N" for Purchase Analysis Area
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,AnalysisReportName."Analysis Area"::Purchase);
      AnalysisLineTemplateName := CreateAnalysisLineWithTypeVendor(AnalysisReportName."Analysis Area"::Purchase,CreateVendor);

      // [GIVEN] Analysis Column defined with "Column No." = '' and "Column Header" = "Col"
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisReportName."Analysis Area"::Purchase);
      LibraryERM.CreateAnalysisColumn(AnalysisColumn,AnalysisReportName."Analysis Area"::Purchase,AnalysisColumnTemplate.Name);
      AnalysisColumn."Column No." := '';
      AnalysisColumn."Column Header" := LibraryUtility.GenerateGUID;
      AnalysisColumn.MODIFY;

      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(AnalysisColumn."Column Header");

      // [WHEN] Open Analysis Report Purchase for Analysis Report Name "N"
      OpenAnalysisReportPurchase(AnalysisReportName.Name,AnalysisLineTemplateName,AnalysisColumnTemplate.Name);

      // [THEN] Column "Col" is visible and has caption "Col"
      // Verification done in PurchaseAnalysisMatrixRequestPageHandler.
    END;

    [Test]
    PROCEDURE CheckPostingDateOnPurchRcptHeader@128();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseReceiptHeader@1005 : Record 7316;
    BEGIN
      // Verify Program generates the Posted Purchase Receipt on same posting date of Warehouse Receipt Header posting date.

      // Setup: Create purchase order & create warehouse receipt for purchase order.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem);
      ModifyLocationOnPurchaseLine(PurchaseLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      ModifyPostingDateOnWarehouseReceiptHeader(WarehouseReceiptHeader,PurchaseHeader."No.",PurchaseLine."No.");

      // Exercise: Post Warehouse Document.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify Purch Rcpt-Header posting date equal to Warehouse Receipt Header posting date.
      VerifyPurchRcptHeader(PurchaseHeader."No.",PurchaseHeader."Buy-from Vendor No.",WarehouseReceiptHeader."Posting Date");
    END;

    [Test]
    PROCEDURE VerifyDefaultBinInPurchLine@129();
    VAR
      PurchaseLine@1001 : Record 39;
      Item@1003 : Record 27;
      Bin@1004 : Record 7354;
    BEGIN
      // Verify that bin code exist in purchase Line when re-enter item removes the default bin.

      // Setup: Create purchase document with bin and bin content.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateBinAndBinContent(Bin,Item);
      CreatePurchaseDocumentWithLocation(PurchaseLine,PurchaseLine."Document Type"::Order,Item."No.",Bin."Location Code");

      // Exercise: Re-enter Item No.
      PurchaseLine.VALIDATE("No.",Item."No.");

      // Verify: Verifying bin code exist on purchase line.
      PurchaseLine.TESTFIELD("Bin Code",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PurchaseOrderAsReceiveWithDimension@131();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeaderToReverse@1007 : Record 38;
      PostedDocumentNo@1003 : Code[20];
    BEGIN
      // Create New Purchase Order post as Receive and verify Purchase Return Order Line Dimension Set ID with Purchase Receipt Dimension Set ID.
      // Setup: Create Purchase Order with Dimension and post as Receive then Create Purchase Return Order.
      Initialize;
      PostedDocumentNo := CreateAndPostPurchaseReceiptWithDimension(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderToReverse,PurchaseHeaderToReverse."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");

      // Exercise: Get posted document lines to reverse.
      GetPostedDocLinesToReverse(PurchaseHeaderToReverse,OptionStringRef::"Posted Receipts",PostedDocumentNo);

      // Verify: Verify Purchase Return Order Line Dimension Set ID with Purchase Receipt Dimension Set ID.
      VerifyDimensionSetIDOnPurchLine(PurchaseHeaderToReverse."No.",PostedDocumentNo);
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesPageHandler)]
    PROCEDURE VerifyReceiptNoAndReceiptLineNo@174();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1007 : Record 38;
      PostedInvoiceNo@1002 : Code[20];
      PostedReceiptNo@1001 : Code[20];
    BEGIN
      // Create New Purchase Order post as Receive and verify the Receipt No. and Receipt Line No.

      // Setup: Create Purchase Order post as Receive then Create Purchase Invoice.
      Initialize;
      PostedReceiptNo := CreateAndPostPurchaseReceipt(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader2,PurchaseHeader2."Document Type"::Invoice,PurchaseHeader."Buy-from Vendor No.");
      GetReceiptLine(PurchaseHeader2);

      // Excercise: Post the above created purchase invoice with last posted purchaase order as receipt.
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify the Receipt No. and Receipt Line No.
      VerifyGetReceiptDocNo(PostedInvoiceNo,PostedReceiptNo);
    END;

    [Test]
    PROCEDURE CheckNoOverFlowErrorExistOnPurchaseLine@213();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify that no Overflow error on purchase line with more ranges.

      // Setup: Create purchase order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);

      // Exercise: Taken large random values.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(0,1,3));
      PurchaseLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(10000000,2147483647));

      // Verify: Verifying purchase line amount.
      Assert.AreEqual(
        ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost"),PurchaseLine."Line Amount",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Line Amount"),PurchaseLine."Line Amount",PurchaseLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(StandardVendorPurchCodesHndlr)]
    PROCEDURE PurchaseLineWithStandardPurchCodeDimesion@135();
    VAR
      DimensionValue1@1004 : Record 349;
      DimensionValue2@1005 : Record 349;
      GeneralLedgerSetup@1003 : Record 98;
      PurchaseHeader@1001 : Record 38;
      StandardPurchaseLine@1000 : Record 174;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      // Check Purchase Code Line with Dimensions are copied correctly in Purchase Line.

      // Setup: Create Dimesion Values.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue1,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue2,GeneralLedgerSetup."Shortcut Dimension 2 Code");

      // Exercise: Create Purchase Order with Purchase Code.
      CreatePurchOrderWithPurchCode(StandardPurchaseLine,PurchaseHeader,DimensionValue1.Code,DimensionValue2.Code);

      // Verify: Verify Purchase Code Line are copied correctly in Purchase Line.
      VerifyPurchaseLine(StandardPurchaseLine,PurchaseHeader."No.",DimensionValue1.Code,DimensionValue2.Code);
    END;

    [Test]
    PROCEDURE CheckStatusOpenErrorWithReleasedPurchaseOrder@134();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      Item@1001 : Record 27;
    BEGIN
      // Verify the Status open error when one more purchase line added on release purchase order.

      // Setup: Create and release purchase order.
      Initialize;
      CreatePurchaseDocumentWithLocation(PurchaseLine,PurchaseLine."Document Type"::Order,LibraryInventory.CreateItem(Item),'');
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // Exercise: Add one more purchase line.
      ASSERTERROR LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLine."No.",LibraryRandom.RandDec(100,2));

      // Verify: Verifying Open Status Error.
      Assert.ExpectedError(STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseHeader."Document Type",PurchaseHeader."No."));
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportPurchaseRequestPageHandler,PurchaseAnalysisMatrixColumnsRPH)]
    PROCEDURE PurchaseAnalysisReportMultipleColumns@137();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisReportName@1004 : Record 7111;
      ItemAnalysisView@1002 : Record 7152;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      ValueEntry@1000 : Record 5802;
      PurchAnalysisMatrix@1007 : Page 9205;
      ItemNo@1003 : Code[20];
    BEGIN
      // Check columns' visibility in matrix form

      // Setup: Post Purchase Document and Create Analysis Report
      Initialize;
      ItemNo := CreateItem;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);
      FindValueEntry(
        ValueEntry,ItemNo,PurchaseHeader."Buy-from Vendor No.",
        LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Purchase with Correct filter Item Ledger Entry Type Purchase.
      OpenAnalysisReportPurchase(
        AnalysisReportName.Name,
        CreateAnalysisLineWithTypeVendor(ItemAnalysisView."Analysis Area",PurchaseHeader."Pay-to Vendor No."),
        CreateAnalysisMultipleColumns(
          ItemAnalysisView."Analysis Area",FORMAT(ValueEntry."Item Ledger Entry Type"::Purchase),
          AnalysisColumn."Value Type"::"Cost Amount",PurchAnalysisMatrix.GetMatrixDimension));

      // Verify: Verification done in PurchaseAnalysisMatrixColumnsRPH.
    END;

    [Test]
    [HandlerFunctions(StandardVendorPurchCodesHndlr)]
    PROCEDURE StandardPurchLineWithDefaultDimension@149();
    VAR
      Item@1001 : Record 27;
      DimensionValue1@1004 : Record 349;
      DimensionValue2@1005 : Record 349;
      StandardPurchaseCode@1008 : Record 173;
      PurchHeader@1003 : Record 38;
      PurchLine@1012 : Record 39;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify that correct dimensions are populated in purchase line when using default dimensions for G/L and Item using standard purchase code.

      // Setup: Create standard purchase document and default dimensions
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithPurchSetup;
      CreateStandardPurchaseDocument(StandardPurchaseCode,GLAccountNo,LibraryInventory.CreateItem(Item));
      CreateDefaultDimensions(DimensionValue1,DimensionValue2,GLAccountNo,Item."No.");

      // Exercise: Create Purchase Order with Purchase Code.
      CreateStandardPurchLineForPurchaseOrder(PurchHeader,StandardPurchaseCode.Code);

      // Verify: Verify dimensions on Purchase line for G/L and item line.
      VerifyDimensionsOnPurchLine(PurchHeader."No.",PurchLine.Type::"G/L Account",GLAccountNo,DimensionValue1.Code,'');
      VerifyDimensionsOnPurchLine(PurchHeader."No.",PurchLine.Type::Item,Item."No.",'',DimensionValue2.Code);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE CheckUnitCostLCYWithExchangeRate@162();
    VAR
      Vendor@1000 : Record 23;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1004 : Code[20];
      ExchangeRateAmount@1006 : Decimal;
    BEGIN
      // Verify the Unit Cost LCY on purchase return line when get posted document lines to reverse is doing with currency exchange rate.

      // Setup: Create vendor with currency and Create post Purchase order and create return purchase order.
      Initialize;
      CreateVendorWithCurrency(Vendor);
      ExchangeRateAmount := LibraryRandom.RandDec(10,2);
      CreateExchangeRates(Vendor."Currency Code",
        CALCDATE(STRSUBSTNO('<-%1M>',LibraryRandom.RandInt(5)),WORKDATE),ExchangeRateAmount,ExchangeRateAmount / 2);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,Vendor."No.",PurchaseHeader."Document Type"::Order);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateExchangeRates(Vendor."Currency Code",WORKDATE,ExchangeRateAmount,2 * ExchangeRateAmount);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Vendor."No.");

      // Exercise: Get posted document lines to reverse.
      GetPostedDocLinesToReverse(PurchaseHeader,OptionStringRef::"Posted Receipts",DocumentNo);

      // Verify: Verifying Unit Cost(LCY) with exchange rate.
      VerifyUnitCostLCYOnPurchaseReturnLine(PurchaseHeader."No.",PurchaseLine."Direct Unit Cost" / PurchaseHeader."Currency Factor");
    END;

    [Test]
    PROCEDURE PurchOrderWithItemInventoryValueZeroAndJob@163();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1004 : Code[20];
    BEGIN
      Initialize;
      CreateItemInventoryValueZero(Item);
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine,Item."No.",Item."Base Unit of Measure");

      // Exercise: Post Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check the Job ledger entry Unit Cost is zero.
      VerifyJobLedgerEntryZeroUnitCost(DocumentNo,PurchaseLine."Job No.");
    END;

    [Test]
    PROCEDURE PurchaseOrderWithFCYDiscount@193();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      AmountLCY@1003 : Decimal;
    BEGIN
      // Verify no error will appear while posting a Purchase Order with discount on Currency rounding.

      // Setup: Create Purchase Order, attach new Currency on Purchase Order and Post as Receive and Invoice.
      Initialize;
      CreatePurchaseHeaderWithCurrency(PurchaseHeader,CreateAndUpdateCurrency);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(PurchaseLine."Amount Including VAT",PurchaseHeader."Currency Code",'',WORKDATE));

      // Exercise: Post Purchase document.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Remaining Amount LCY on Vendor ledger Entry.
      VerifyRemainingAmountLCY(PurchaseHeader."Buy-from Vendor No.",AmountLCY);
    END;

    [Test]
    PROCEDURE CombinedDimOnPurchInvoiceWithItemChargeAssignedOnReceipt@169();
    VAR
      ConflictDimension@1001 : Record 348;
      ItemDimValue@1003 : Record 349;
      ItemChargeDimValue@1004 : Record 349;
      PurchHeader@1005 : Record 38;
      DimensionMgt@1008 : Codeunit 408;
      ConflictDimValue@1000 : ARRAY [2] OF Code[20];
      ExpShortcutDimCode1@1007 : Code[20];
      ExpShortcutDimCode2@1009 : Code[20];
      DimNo@1002 : ' ,Item,ItemCharge';
      DimSetID@1006 : ARRAY [10] OF Integer;
      ExpectedDimSetID@1010 : Integer;
    BEGIN
      // Check that posted invoice with item charge is inherit dimensions from assigned receipt

      Initialize;
      CreateDimValues(ConflictDimension,ConflictDimValue);
      CreateDimValue(ItemDimValue);
      CreateDimValue(ItemChargeDimValue);
      // Dimension from item have higher priority
      DimSetID[2] :=
        CreatePostPurchOrderWithDimension(PurchHeader,ItemDimValue,ConflictDimension.Code,ConflictDimValue[DimNo::Item]);
      DimSetID[1] :=
        CreatePostInvoiceWithReceiptLines(
          ItemChargeDimValue,ConflictDimension.Code,ConflictDimValue[DimNo::ItemCharge],PurchHeader);
      ExpectedDimSetID :=
        DimensionMgt.GetCombinedDimensionSetID(DimSetID,ExpShortcutDimCode1,ExpShortcutDimCode2);
      VerifyDimSetIDOnItemLedgEntry(ExpectedDimSetID);
    END;

    [Test]
    PROCEDURE GetReceiptLinesOnItemChargeAssignedOnMultipleShpts@176();
    VAR
      SalesLine@1001 : Record 37;
      PurchHeader@1002 : Record 38;
      PurchLine@1003 : Record 39;
      DocNo@1000 : ARRAY [2] OF Code[20];
      Qty@1004 : ARRAY [2] OF Decimal;
      i@1005 : Integer;
    BEGIN
      // Check that item charge is assign to correct shipment from the multiple set when posting purchase invoice with GetReceiptLines function.

      Initialize;
      CreateSalesOrder(SalesLine);
      CreatePurchaseOrderWithChargeItem(PurchHeader,PurchLine,SalesLine.Quantity);
      Qty[1] := ROUND(SalesLine.Quantity / 3,1);
      Qty[2] := SalesLine.Quantity - Qty[1];
      FOR i := 1 TO ARRAYLEN(Qty) DO BEGIN
        DocNo[i] := PostPartialShipment(SalesLine,Qty[i]);
        PurchLine.FIND;
        ModifyPurchaseLineQtyToReceive(PurchLine,Qty[i]);
        AssignItemChargeToShipment(SalesLine."Document No.",PurchLine);
        LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
      END;
      CreatePostPurchInvWithGetReceiptLines(PurchHeader);
      VerifyChargeValueEntry(DocNo,PurchLine."No.",ARRAYLEN(Qty));
    END;

    [Test]
    PROCEDURE GetReceiptLinesFromPurchOrderWithJobPrices@186();
    VAR
      Item@1002 : Record 27;
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      InvoicePurchaseHeader@1005 : Record 38;
      InvoicePurchLine@1006 : Record 39;
    BEGIN
      // Check that job unit prices successfully inherited from purchase order to purchase invoice with fucntion "Get Receipt Lines"

      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateItemWithUnitPrice(Item);
      CreateReceivePurchOrderWithJobUnitPrices(PurchaseHeader,PurchaseLine,Item."No.",JobTask);
      InvoicePostedPurchaseOrder(InvoicePurchaseHeader,PurchaseHeader);
      // Change "Qty To Invoice" to make sure that job prices won't changed
      ChangeQtyToInvoice(InvoicePurchLine,InvoicePurchaseHeader);
      VerifyJobPricesOfPurchInvWithRcptPurchOrder(PurchaseLine,InvoicePurchLine);
    END;

    [Test]
    PROCEDURE PurchHeaderDimWithSalesPerson@216();
    VAR
      PurchHeader@1004 : Record 38;
      SalespersonPurchaser@1011 : Record 13;
      DimensionValue@1012 : Record 349;
      Dimension@1013 : Record 348;
      DefaultDimension@1015 : Record 352;
    BEGIN
      // Setup.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",SalespersonPurchaser.Code,Dimension.Code,DimensionValue.Code);

      // Exercise.
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendor);
      PurchHeader.VALIDATE("Purchaser Code",SalespersonPurchaser.Code);
      PurchHeader.MODIFY(TRUE);

      // Verify.
      VerifyPurchHeaderDimensions(PurchHeader,DefaultDimension."Dimension Code");
    END;

    [Test]
    PROCEDURE CreatePostReceivePurchOrderWithDiscount@189();
    VAR
      PurchLine@1000 : Record 39;
      PurchRcptLine@1002 : Record 121;
      PurchHeader@1003 : Record 38;
      ExpectedInvDiscAmount@1001 : Decimal;
      InvoiceDiscountValue@1004 : Decimal;
    BEGIN
      // [SCENARIO 375185] Invoice Discount Amount is recalculated on Purchase Line created from Posted Receipt Line but not on Purchase Header
      Initialize;
      // [GIVEN] Create purchase order and calculate "Inv. Discount Amount" = "X" excl. VAT
      ExpectedInvDiscAmount := CreatePurchOrderAndGetDiscountWithoutVAT(PurchHeader);
      // [GIVEN] Set "Prices Including VAT" = TRUE and Receive order
      PostReceivePurchOrderWithVAT(PurchRcptLine,PurchHeader);
      // [GIVEN] Create Purchase Invoice excl. VAT with "Invoice Discount Value" in Header = "Y"
      CLEAR(PurchHeader);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,PurchRcptLine."Buy-from Vendor No.");
      CreateSimplePurchLine(PurchLine,PurchHeader,PurchLine.Type::Item);
      InvoiceDiscountValue := PurchHeader."Invoice Discount Value";
      // [WHEN] Run InsertInvLineFromRcptLine on Invoice
      PurchRcptLine.InsertInvLineFromRcptLine(PurchLine);
      // [THEN] Created Purchase Line in Invoice, where "Inv. Discount Amount" = "X"
      PurchLine.FIND;
      Assert.AreEqual(ExpectedInvDiscAmount,PurchLine."Inv. Discount Amount",WrongInvDiscAmountErr);
      // [THEN] Invoice Header is not changed, "Invoice Discount Value" = "Y"
      PurchHeader.FIND;
      PurchHeader.TESTFIELD("Invoice Discount Value",InvoiceDiscountValue);
    END;

    [Test]
    PROCEDURE CreatePurchaseLineWithJobTaskLCY@224();
    VAR
      PurchaseLine@1001 : Record 39;
      JobTask@1003 : Record 1001;
    BEGIN
      // [FEATURE] [Job]
      // [SCENARIO 123636] The Job Total Price and Job Total Price (LCY) fields are populated in the Purchase Order/Invoice line after you select the Job No, Job Task No (in local currency)
      LightInit;
      // [GIVEN] Update precision in General Ledger Setup
      LibraryERM.SetAmountRoundingPrecision(LibraryRandom.RandPrecision);
      // [GIVEN] Purchase Line in LCY, where "Job No." is set
      CreatePurchLineAndJobTask(PurchaseLine,JobTask);
      // [GIVEN] Purchase Line, where "Job Unit Price" = "P", "Job Unit Price (LCY)" = "P(LCY)", Quantity = "Q"

      // [WHEN] Enter "Job Task No." = JobTask."Job Task No." in Purchase Line
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");

      // [THEN] Purchase Line is updated
      // [THEN] "Job Total Price" = "P" * "Q"
      // [THEN] "Job Total Price (LCY)" = "P(LCY)" * "Q"
      VerifyJobTotalPrices(PurchaseLine,'');
    END;

    [Test]
    PROCEDURE CreatePurchaseLineWithJobTaskFCY@225();
    VAR
      PurchaseLine@1002 : Record 39;
      JobTask@1003 : Record 1001;
      CurrencyCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Job]
      // [SCENARIO 123636] The Job Total Price and Job Total Price (LCY) fields are populated in the Purchase Order/Invoice line after you select the Job No, Job Task No (in foreign currency)
      LightInit;
      // [GIVEN] Create currency with precisions
      CurrencyCode := LibraryERM.CreateCurrencyWithRounding;
      // [GIVEN] Update precision in General Ledger Setup
      LibraryERM.SetAmountRoundingPrecision(LibraryERM.GetCurrencyAmountRoundingPrecision(CurrencyCode) / 10);
      // [GIVEN] Purchase Line in FCY, where "Job No." is set
      CreatePurchLineWithCurrency(PurchaseLine,CurrencyCode);
      CreateJobTaskWithCurrency(JobTask,CurrencyCode);
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      // [GIVEN] Purchase Line, where "Job Unit Price" = "P", "Job Unit Price (LCY)" = "P(LCY)", Quantity = "Q"

      // [WHEN] Enter "Job Task No." = JobTask."Job Task No." in Purchase Line
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");

      // [THEN] Purchase Line is updated
      // [THEN] "Job Total Price" = "P" * "Q"
      // [THEN] "Job Total Price (LCY)" = "P(LCY)" * "Q"
      VerifyJobTotalPrices(PurchaseLine,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ItemChargeSetupHandler,ConfirmHandler)]
    PROCEDURE VerifyPurchAmountToAssignInItemChargeAssgmenAfterRevalidatingUnitCost@267();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Purchase Order] [Item Charge]
      // [SCENARIO 364307] "Quantity to Assign" is taken to account in calculating "Amount to Assign" while Re-validating "Direct Unit Cost"
      Initialize;

      // [GIVEN] Purchase Order Line with Type = "Charge (Item)", Direct Cost = "D", Quantity = "X"
      // [GIVEN] Item Charge Assignment with "Quantity to Assign" = "X"
      // [GIVEN] Partially Receive Purchase Order
      CreateAndReceivePurchaseOrderChargeItem(PurchaseHeader,PurchaseLine);

      // [GIVEN] Set "Quantity to Assign" on Item Charge Assignment to "Y"
      Qty := LibraryRandom.RandInt(9);
      OpenItemChargeAssgnt(PurchaseLine,TRUE,Qty);

      // [WHEN] Re-Validate Direct Cost on Purchase Line
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      PurchaseLine.VALIDATE("Direct Unit Cost");

      // [THEN] "Amount to Assign" on Item Charge Assignment is "D"* "Y" / "X"
      OpenItemChargeAssgnt(PurchaseLine,TRUE,Qty * PurchaseLine."Direct Unit Cost");
    END;

    [Test]
    [HandlerFunctions(CopyPurchaseDocumentHandler)]
    PROCEDURE CopyPurchaseOrderFromPartialPostingPurchaseOrder@249();
    VAR
      PurchaseHeader@1000 : Record 38;
      FromPurchaseOrderNo@1001 : Code[20];
    BEGIN
      // [SCENARIO] Verifies Receive and Invoice fiels in document copied for posted Purchase Order.
      Initialize;
      // [GIVEN] Create Purchase Order with two lines
      // [GIVEN] In second line set Qty. to Receive = 0
      // [GIVEN] Release, Post (Receive) and Post (Invoice) purchase order
      FromPurchaseOrderNo := CreatePostPurchaseOrder;
      // [WHEN] Coping purchase order to new purchase order
      CreateCopyPurchaseOrder(PurchaseHeader,FromPurchaseOrderNo);
      // [THEN] Invoice and Receive fields must not get value from original document
      Assert.IsFalse(PurchaseHeader.Invoice,WrongValuePurchaseHeaderInvoiceErr);
      Assert.IsFalse(PurchaseHeader.Receive,WrongValuePurchaseHeaderReceiveErr);
    END;

    [Test]
    PROCEDURE InvDiscAmtAfterGetReceiptLinesAndEnabledCalcDiscSetup@245();
    VAR
      PurchaseHeader@1001 : Record 38;
      NewPurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Discount] [Receipt Lines]
      // [SCENARIO 364443] Invoice Discount Amount remains after "Get Receipt Lines" from posted Purchase Order. "Purchases & Payables Setup"."Calc. Inv. Discount" = TRUE.
      Initialize;
      UpdateCalcInvDiscountSetup(TRUE);

      // [GIVEN] Create and Ship Purchase Order with Invoice Discount Amount = "A"
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem);
      PurchaseLine.VALIDATE("Inv. Discount Amount",ROUND(PurchaseLine."Line Amount" * LibraryRandom.RandDec(1,2)));
      PurchaseLine.MODIFY;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Run "Get Receipt Lines" from new Purchase Invoice
      InvoicePostedPurchaseOrder(NewPurchaseHeader,PurchaseHeader);

      // [THEN] Purchase Invoice Discount Amount = "A"
      NewPurchaseHeader.CALCFIELDS("Invoice Discount Amount");
      Assert.AreEqual(
        PurchaseLine."Inv. Discount Amount",
        NewPurchaseHeader."Invoice Discount Amount",
        NewPurchaseHeader.FIELDCAPTION("Invoice Discount Amount"));
    END;

    [Test]
    PROCEDURE InvDiscAmtAfterGetReceiptLinesAndDisabledCalcDiscSetup@248();
    VAR
      PurchaseHeader@1001 : Record 38;
      NewPurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Discount] [Receipt Lines]
      // [SCENARIO 364443] Invoice Discount Amount remains after "Get Receipt Lines" from posted Purchase Order. "Purchases & Payables Setup"."Calc. Inv. Discount" = FALSE.
      Initialize;
      UpdateCalcInvDiscountSetup(FALSE);

      // [GIVEN] Create and Ship Purchase Order with Invoice Discount Amount = "A"
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem);
      PurchaseLine.VALIDATE("Inv. Discount Amount",ROUND(PurchaseLine."Line Amount" * LibraryRandom.RandDec(1,2)));
      PurchaseLine.MODIFY;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Run "Get Receipt Lines" from new Purchase Invoice
      InvoicePostedPurchaseOrder(NewPurchaseHeader,PurchaseHeader);

      // [THEN] Purchase Invoice Discount Amount = "A"
      NewPurchaseHeader.CALCFIELDS("Invoice Discount Amount");
      Assert.AreEqual(
        PurchaseLine."Inv. Discount Amount",
        NewPurchaseHeader."Invoice Discount Amount",
        NewPurchaseHeader.FIELDCAPTION("Invoice Discount Amount"));
    END;

    [Test]
    PROCEDURE InvDiscAmtAfterGetReturnShipmentLinesAndEnabledCalcDiscSetup@253();
    VAR
      PurchaseHeader@1001 : Record 38;
      NewPurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Discount] [Return Shipment Lines]
      // [SCENARIO 364443] Invoice Discount Amount remains after "Get Return Shipment Lines" from posted Purchase Return Order. "Purchases & Payables Setup"."Calc. Inv. Discount" = TRUE.
      Initialize;
      UpdateCalcInvDiscountSetup(TRUE);

      // [GIVEN] Create and Ship Purchase Return Order with Invoice Discount Amount = "A"
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::"Return Order");
      PurchaseLine.VALIDATE("Inv. Discount Amount",ROUND(PurchaseLine."Line Amount" * LibraryRandom.RandDec(1,2)));
      PurchaseLine.MODIFY;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Run "Get Retrun Shipment Lines" from new Purchase Credit Memo
      CrMemoPostedPurchaseReturnOrder(NewPurchaseHeader,PurchaseHeader);

      // [THEN] Purchase Credit Memo Discount Amount = "A"
      NewPurchaseHeader.CALCFIELDS("Invoice Discount Amount");
      Assert.AreEqual(
        PurchaseLine."Inv. Discount Amount",
        NewPurchaseHeader."Invoice Discount Amount",
        NewPurchaseHeader.FIELDCAPTION("Invoice Discount Amount"));
    END;

    [Test]
    PROCEDURE InvDiscAmtAfterGetReturnShipmentLinesAndDisabledCalcDiscSetup@257();
    VAR
      PurchaseHeader@1001 : Record 38;
      NewPurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Discount] [Return Shipment Lines]
      // [SCENARIO 364443] Invoice Discount Amount remains after "Get Return Shipment Lines" from posted Purchase Return Order. "Purchases & Payables Setup"."Calc. Inv. Discount" = FALSE.
      Initialize;
      UpdateCalcInvDiscountSetup(FALSE);

      // [GIVEN] Create and Ship Purchase Return Order with Invoice Discount Amount = "A"
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::"Return Order");
      PurchaseLine.VALIDATE("Inv. Discount Amount",ROUND(PurchaseLine."Line Amount" * LibraryRandom.RandDec(1,2)));
      PurchaseLine.MODIFY;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Run "Get Retrun Shipment Lines" from new Purchase Credit Memo
      CrMemoPostedPurchaseReturnOrder(NewPurchaseHeader,PurchaseHeader);

      // [THEN] Purchase Credit Memo Discount Amount = "A"
      NewPurchaseHeader.CALCFIELDS("Invoice Discount Amount");
      Assert.AreEqual(
        PurchaseLine."Inv. Discount Amount",
        NewPurchaseHeader."Invoice Discount Amount",
        NewPurchaseHeader.FIELDCAPTION("Invoice Discount Amount"));
    END;

    [Test]
    PROCEDURE TwoGLEntriesAfterZeroAmountPurchaseInvoice@260();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      GLEntry@1006 : Record 17;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 364561] Two G/L Entries with zero amount are created after posting of Purchase Invoice with zero amount
      Initialize;

      // [GIVEN] Vendor Posting Setup, where "Payables Account No." = "X", "Purch. Account No." = "Y"
      // [WHEN] Post Purchase Invoice with zero amount
      DocumentNo := CreatePostPurchaseInvoiceWithZeroAmount(PurchaseHeader,PurchaseLine);

      // [THEN] Two G/L Entries with zero Amount are posted to G/L accounts "X" and "Y"
      FindGLEntry(GLEntry,DocumentNo,GetPayablesAccountNo(PurchaseHeader."Buy-from Vendor No."));
      Assert.AreEqual(0,GLEntry.Amount,GLEntry.FIELDCAPTION(Amount));

      FindGLEntry(
        GLEntry,DocumentNo,
        GetPurchAccountNo(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group"));
      Assert.AreEqual(0,GLEntry.Amount,GLEntry.FIELDCAPTION(Amount));
    END;

    [Test]
    PROCEDURE GLRegInSyncWithVLEAfterZeroAmountPurchaseInvoice@262();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      VendorLedgerEntry@1005 : Record 25;
      GLRegister@1007 : Record 45;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 364561] G/L Register should be in sync with Vendor Ledger Entry after posting of Purchase Invoice with zero amount
      Initialize;

      // [GIVEN] Create Purchase Invoice with zero amount
      // [WHEN] Post Purchase Invoice
      DocumentNo := CreatePostPurchaseInvoiceWithZeroAmount(PurchaseHeader,PurchaseLine);

      // [THEN] Vendor Ledger Entry No. in range ["From Entry No.",..,"To Entry No."] of G/L Register
      FindVendorLedgerEntry(VendorLedgerEntry,PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      GLRegister.FINDLAST;
      Assert.IsTrue(
        VendorLedgerEntry."Entry No." IN [GLRegister."From Entry No."..GLRegister."To Entry No."],
        VendorLedgerEntry.FIELDCAPTION("Entry No."));
    END;

    [Test]
    [TransactionModel(AutoCommit)]
    PROCEDURE CheckVATAmountOnPurchInvoiceWithReverseVAT@299();
    VAR
      VATPostingSetup@1005 : Record 325;
      PurchaseHeader@1008 : Record 38;
      PurchaseLineReverseCharge@1007 : Record 39;
      PurchaseLineNormalVAT@1006 : Record 39;
      PurchInvHeader@1009 : Record 122;
      PurchInvLine@1002 : Record 123;
      TempVATAmountLine@1003 : TEMPORARY Record 290;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Reverse Charge VAT] [Purchase Invoice] [UT]
      // [SCENARIO 363018] Statistics of Purchase Invoice should have 0 VAT%, 0 VAT Amount and Amount Including VAT equals to Amount in case of Reverse Charge VAT

      // [GIVEN] General Ledger Setup having "Pmt. Disc. Excl. VAT" set as TRUE; Purchase Payables Setup having "Allow VAT Difference" set as TRUE
      AllowVATDiscount;

      // [GIVEN] Purchase Header for new Vendor with 2% VAT Base Discount
      CreatePurchHeaderWithVATBaseDisc(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);

      // [GIVEN] Purchase Line for G/L Account with 19% Reverse Charge VAT and "Direct unit Cost" = 1000
      CreatePurchaseLineWithVATType(
        PurchaseLineReverseCharge,PurchaseHeader,
        PurchaseLineReverseCharge."VAT Calculation Type"::"Reverse Charge VAT");

      // [GIVEN] Purchase Line for G/L Account with 21% Normal VAT and "Direct unit Cost" = 1000
      CreatePurchaseLineWithVATType(
        PurchaseLineNormalVAT,PurchaseHeader,PurchaseLineNormalVAT."VAT Calculation Type"::"Normal VAT");

      // [GIVEN] Posted Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [WHEN] When calling CalcVATAmountLines procedure for Posted Purchase Invoice
      PurchInvHeader.GET(DocumentNo);
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDFIRST;
      PurchInvLine.CalcVATAmountLines(PurchInvHeader,TempVATAmountLine);

      // [THEN] VAT Amount Line calculated on the Line with Reverse Charge VAT has "VAT %" = 0, "VAT Amount" = 0 and "Amount Including VAT" = "Amount"
      VerifyVATAmountLine(
        TempVATAmountLine,PurchaseLineReverseCharge."VAT Identifier",PurchaseLineReverseCharge."VAT Calculation Type",
        0,PurchaseLineReverseCharge.Amount);

      // [THEN] VAT Amount Line calculated on the Line with Normal VAT has "VAT %", "VAT Amount", "Amount Including VAT" as they are in Purchase Line
      VerifyVATAmountLine(
        TempVATAmountLine,PurchaseLineNormalVAT."VAT Identifier",PurchaseLineNormalVAT."VAT Calculation Type",
        PurchaseLineNormalVAT."Amount Including VAT" - PurchaseLineNormalVAT."Line Amount",
        PurchaseLineNormalVAT."Amount Including VAT");

      // TearDown
      VATPostingSetup.GET(PurchaseHeader."VAT Bus. Posting Group",PurchaseLineNormalVAT."VAT Prod. Posting Group");
      VATPostingSetup.DELETE;
    END;

    [Test]
    [TransactionModel(AutoCommit)]
    PROCEDURE CheckVATAmountOnPurchCrMemoWithReverseVAT@300();
    VAR
      VATPostingSetup@1005 : Record 325;
      PurchaseHeader@1008 : Record 38;
      PurchaseLineReverseCharge@1007 : Record 39;
      PurchaseLineNormalVAT@1006 : Record 39;
      PurchCrMemoHdr@1009 : Record 124;
      PurchCrMemoLine@1002 : Record 125;
      TempVATAmountLine@1003 : TEMPORARY Record 290;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Reverse Charge VAT] [Purchase Credit Memo] [UT]
      // [SCENARIO 363018] Statistics of Purchase Credit Memo should have 0 VAT%, 0 VAT Amount and Amount Including VAT equals to Amount in case of Reverse Charge VAT

      // [GIVEN] General Ledger Setup having "Pmt. Disc. Excl. VAT" set as TRUE; Purchase Payables Setup having "Allow VAT Difference" set as TRUE
      AllowVATDiscount;

      // [GIVEN] Purchase Header for new Vendor with 2% VAT Base Discount
      CreatePurchHeaderWithVATBaseDisc(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");

      // [GIVEN] Purchase Line for G/L Account with 19% Reverse Charge VAT and "Direct unit Cost" = 1000
      CreatePurchaseLineWithVATType(
        PurchaseLineReverseCharge,PurchaseHeader,
        PurchaseLineReverseCharge."VAT Calculation Type"::"Reverse Charge VAT");

      // [GIVEN] Purchase Line for G/L Account with 21% Normal VAT and "Direct unit Cost" = 1000
      CreatePurchaseLineWithVATType(
        PurchaseLineNormalVAT,PurchaseHeader,PurchaseLineNormalVAT."VAT Calculation Type"::"Normal VAT");

      // [GIVEN] Posted Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [WHEN] When calling CalcVATAmountLines procedure for Posted Purchase Invoice
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoLine.SETRANGE("Document No.",DocumentNo);
      PurchCrMemoLine.FINDFIRST;
      PurchCrMemoLine.CalcVATAmountLines(PurchCrMemoHdr,TempVATAmountLine);

      // [THEN] VAT Amount Line calculated on the Line with Reverse Charge VAT has "VAT %" = 0, "VAT Amount" = 0 and "Amount Including VAT" = "Amount"
      VerifyVATAmountLine(
        TempVATAmountLine,PurchaseLineReverseCharge."VAT Identifier",PurchaseLineReverseCharge."VAT Calculation Type",
        0,PurchaseLineReverseCharge.Amount);

      // [THEN] VAT Amount Line calculated on the Line with Normal VAT has "VAT %", "VAT Amount", "Amount Including VAT" as they are in Purchase Line
      VerifyVATAmountLine(
        TempVATAmountLine,PurchaseLineNormalVAT."VAT Identifier",PurchaseLineNormalVAT."VAT Calculation Type",
        PurchaseLineNormalVAT."Amount Including VAT" - PurchaseLineNormalVAT."Line Amount",
        PurchaseLineNormalVAT."Amount Including VAT");

      // TearDown
      VATPostingSetup.GET(PurchaseHeader."VAT Bus. Posting Group",PurchaseLineNormalVAT."VAT Prod. Posting Group");
      VATPostingSetup.DELETE;
    END;

    [Test]
    PROCEDURE CreatePurchInvoiceFromReceiptLineWithManualDiscount@271();
    VAR
      PurchLine@1000 : Record 39;
      PurchRcptLine@1002 : Record 121;
      PurchHeader@1003 : Record 38;
      PurchCalcDiscByType@1005 : Codeunit 66;
      InvoiceDiscountValue@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Invoice Discount]
      // [SCENARIO 376839] Invoice Discount Amount is not recalculated on Purchase Line created from Posted Receipt Line if "Purchases & Payables Setup"."Calc. Inv. Discount" set to FALSE

      // [GIVEN] Create purchase order with Customer with Discount percent, set "Invoice Discount Value" to "Y"
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendorInvDiscount);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,CreateItem,LibraryRandom.RandIntInRange(5,10));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);

      PurchCalcDiscByType.ApplyInvDiscBasedOnAmt(
        LibraryRandom.RandDecInRange(10,20,2),PurchHeader);
      InvoiceDiscountValue := PurchHeader."Invoice Discount Value";

      // [GIVEN] Receive Order
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
      FindPurchRcptLine(PurchRcptLine,PurchHeader."No.");

      // [GIVEN] Create Purchase Invoice
      CLEAR(PurchHeader);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,PurchRcptLine."Buy-from Vendor No.");
      CreateSimplePurchLine(PurchLine,PurchHeader,PurchLine.Type::Item);

      // [WHEN] Run "Get Receipt Lines" and select Posted Receipt Line
      PurchRcptLine.InsertInvLineFromRcptLine(PurchLine);

      // [THEN] Invoice "Invoice Discount Value" = "Y"
      WITH PurchHeader DO BEGIN
        FIND;
        CALCFIELDS("Invoice Discount Amount");
        TESTFIELD("Invoice Discount Amount",InvoiceDiscountValue);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE GenBusinessPostingGroupInLinesUpdated@19();
    VAR
      GenBusPostingGroup@1000 : Record 250;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378255] Field "Gen. Bus. Posting Group" is updated in lines when user changes it in the document header and Gen. Bus. Posting Group has "Auto Insert Default" = False

      // [GIVEN] Gen. Bus. Posting Group "B" with "Auto Insert Default" = False,
      Initialize;
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      GenBusPostingGroup."Auto Insert Default" := FALSE;
      GenBusPostingGroup.MODIFY;
      // [GIVEN] Vendor "V" with  "Gen. Bus. Posting Group" = "X",
      // [GIVEN] Purchase Order for vendor "V" with one line
      CreateOrderCheckVATSetup(PurchaseHeader,PurchaseLine);

      // [WHEN] Validate field "Gen. Bus. Posting Group" = "B" in Purchase Order header
      PurchaseHeader.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup.Code);

      // [THEN] Field "Gen. Bus. Posting Group" in Purchase Order line is "B"
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Gen. Bus. Posting Group",GenBusPostingGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE GenBusinessPostingGroupInLinesNotUpdated@18();
    VAR
      GenBusPostingGroup@1000 : Record 250;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      OldGenBusPostingGroup@1003 : Code[10];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378255] Field "Gen. Bus. Posting Group" is not updated in lines when user changes it in the document header and chooses "No" in Confirm dialog

      // [GIVEN] Gen. Bus. Posting Group "B" with "Auto Insert Default" = False,
      Initialize;
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      GenBusPostingGroup."Auto Insert Default" := FALSE;
      GenBusPostingGroup.MODIFY;
      // [GIVEN] Vendor "V" with  Gen. Bus. Posting Group = "X",
      // [GIVEN] Purchase Order for vendor "V" with one line
      CreateOrderCheckVATSetup(PurchaseHeader,PurchaseLine);
      OldGenBusPostingGroup := PurchaseLine."Gen. Bus. Posting Group";
      COMMIT;

      // [WHEN] Validate field "Gen. Bus. Posting Group" = "B" in Purchase Order header
      ASSERTERROR PurchaseHeader.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup.Code);

      // [THEN] Field "Gen. Bus. Posting Group" in Purchase Order is not changed because of error message
      Assert.ExpectedError(STRSUBSTNO(YouMustDeleteExistingLinesErr,PurchaseLine.FIELDCAPTION("Gen. Bus. Posting Group")));
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Gen. Bus. Posting Group",OldGenBusPostingGroup);
    END;

    [Test]
    PROCEDURE PostPurchInvoiceDescriptionLine@276();
    VAR
      PurchaseHeader@1003 : Record 38;
      PostedDocNo@1002 : Code[20];
      Description@1001 : Text[50];
    BEGIN
      // [FEATURE] [Invoice]
      // [SCENARIO 378530] Purchase Invoice description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Purchase Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="8640", Description = "Miscellaneous"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePurchDocWithGLDescriptionLine(PurchaseHeader,Description,PurchaseHeader."Document Type"::Order);

      // [WHEN] Post Purchase Order (Invoice).
      PostedDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifyPurchInvDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostPurchRcptDescriptionLine@277();
    VAR
      PurchaseHeader@1003 : Record 38;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Receipt]
      // [SCENARIO 378530] Purchase Receipt description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Purchase Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="8640", Description = "Miscellaneous"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePurchDocWithGLDescriptionLine(PurchaseHeader,Description,PurchaseHeader."Document Type"::Order);

      // [WHEN] Post Purchase Order (Receive).
      PostedDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifyPurchRcptDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostPurchCrMemoDescriptionLine@281();
    VAR
      PurchaseHeader@1003 : Record 38;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Credit Memo]
      // [SCENARIO 378530] Purchase Credit Memo description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Purchase Return Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="8640", Description = "Miscellaneous"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePurchDocWithGLDescriptionLine(PurchaseHeader,Description,PurchaseHeader."Document Type"::"Return Order");

      // [WHEN] Post Purchase Return Order (Invoice).
      PostedDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifyPurchCrMemoDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostPurchRetShptDescriptionLine@292();
    VAR
      PurchaseHeader@1003 : Record 38;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Return Shipment]
      // [SCENARIO 378530] Purchase Return Shipment description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Purchase Return Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="8640", Description = "Miscellaneous"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePurchDocWithGLDescriptionLine(PurchaseHeader,Description,PurchaseHeader."Document Type"::"Return Order");

      // [WHEN] Post Purchase Return Order (Receive).
      PostedDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifyPurchRetShptDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PurchRcptLine_InitFromPurchLine_UT@151();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchRcptHeader@1002 : Record 120;
      PurchRcptLine@1000 : Record 121;
    BEGIN
      // [FEATURE] [UT] [Receipt]
      // [SCENARIO] TAB121 "Purch. Rcpt. Line".InitFromPurchLine() correctly inits PurchRcptLine from PurchaseLine
      PurchRcptHeader.INIT;
      PurchRcptHeader."Posting Date" := LibraryRandom.RandDate(100);
      PurchRcptHeader."No." := LibraryUtility.GenerateGUID;

      InitPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order);

      WITH PurchRcptLine DO BEGIN
        InitFromPurchLine(PurchRcptHeader,PurchaseLine);
        Assert.AreEqual(PurchRcptHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(PurchRcptHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(PurchaseLine."Qty. to Receive",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(PurchaseLine."Qty. to Receive (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice","Quantity Invoiced",FIELDCAPTION("Quantity Invoiced"));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice (Base)","Qty. Invoiced (Base)",FIELDCAPTION("Qty. Invoiced (Base)"));
        Assert.AreEqual(
          PurchaseLine."Qty. to Receive" - PurchaseLine."Qty. to Invoice",
          "Qty. Rcd. Not Invoiced",FIELDCAPTION("Qty. Rcd. Not Invoiced"));
        Assert.AreEqual(PurchaseLine."Document No.","Order No.",FIELDCAPTION("Order No."));
        Assert.AreEqual(PurchaseLine."Line No.","Order Line No.",FIELDCAPTION("Order Line No."));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(PurchaseLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(PurchaseLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE PurchInvLine_InitFromPurchLine_UT@298();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1002 : Record 122;
      PurchInvLine@1000 : Record 123;
    BEGIN
      // [FEATURE] [UT] [Invoice]
      // [SCENARIO] TAB123 "Purch. Inv. Line".InitFromPurchLine() correctly inits PurchInvLine from PurchaseLine
      PurchInvHeader.INIT;
      PurchInvHeader."Posting Date" := LibraryRandom.RandDate(100);
      PurchInvHeader."No." := LibraryUtility.GenerateGUID;

      InitPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order);

      WITH PurchInvLine DO BEGIN
        InitFromPurchLine(PurchInvHeader,PurchaseLine);
        Assert.AreEqual(PurchInvHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(PurchInvHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(PurchaseLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(PurchaseLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE PurchCrMemoLine_InitFromPurchLine_UT@306();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchCrMemoHdr@1002 : Record 124;
      PurchCrMemoLine@1000 : Record 125;
    BEGIN
      // [FEATURE] [UT] [Credit Memo]
      // [SCENARIO] TAB125 "Purch. Cr. Memo Line".InitFromPurchLine() correctly inits PurchCrMemoLine from PurchaseLine
      PurchCrMemoHdr.INIT;
      PurchCrMemoHdr."Posting Date" := LibraryRandom.RandDate(100);
      PurchCrMemoHdr."No." := LibraryUtility.GenerateGUID;

      InitPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order");

      WITH PurchCrMemoLine DO BEGIN
        InitFromPurchLine(PurchCrMemoHdr,PurchaseLine);
        Assert.AreEqual(PurchCrMemoHdr."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(PurchCrMemoHdr."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(PurchaseLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(PurchaseLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE ReturnShipmentLine_InitFromPurchLine_UT@310();
    VAR
      PurchaseLine@1001 : Record 39;
      ReturnShipmentHeader@1002 : Record 6650;
      ReturnShipmentLine@1000 : Record 6651;
    BEGIN
      // [FEATURE] [UT] [Receipt]
      // [SCENARIO] TAB6651 "Return Shipment Line".InitFromPurchLine() correctly inits ReturnShipmentLine from PurchaseLine
      ReturnShipmentHeader.INIT;
      ReturnShipmentHeader."Posting Date" := LibraryRandom.RandDate(100);
      ReturnShipmentHeader."No." := LibraryUtility.GenerateGUID;

      InitPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order");

      WITH ReturnShipmentLine DO BEGIN
        InitFromPurchLine(ReturnShipmentHeader,PurchaseLine);
        Assert.AreEqual(ReturnShipmentHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(ReturnShipmentHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(PurchaseLine."Return Qty. to Ship",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(PurchaseLine."Return Qty. to Ship (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice","Quantity Invoiced",FIELDCAPTION("Quantity Invoiced"));
        Assert.AreEqual(PurchaseLine."Qty. to Invoice (Base)","Qty. Invoiced (Base)",FIELDCAPTION("Qty. Invoiced (Base)"));
        Assert.AreEqual(
          PurchaseLine."Return Qty. to Ship" - PurchaseLine."Qty. to Invoice",
          "Return Qty. Shipped Not Invd.",FIELDCAPTION("Return Qty. Shipped Not Invd."));
        Assert.AreEqual(PurchaseLine."Document No.","Return Order No.",FIELDCAPTION("Return Order No."));
        Assert.AreEqual(PurchaseLine."Line No.","Return Order Line No.",FIELDCAPTION("Return Order Line No."));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(PurchaseLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(PurchaseLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    [HandlerFunctions(ExactMessageHandler)]
    PROCEDURE PostedDocToPrintMessageRaisedWhenDeletePurchInvithNoInPostedInvoiceNos@203();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      PurchHeader@1002 : Record 38;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 379123] Message raised when delete Purchase Invoice with "Posted Invoice Nos." = "Invoice Nos." in Purchase Setup

      Initialize;
      // [GIVEN] "Posted Invoice Nos." = "Invoice Nos." in Purchase Setup
      SetPostedInvoiceNosEqualInvoiceNosInPurchSetup(PurchasesPayablesSetup);

      // [GIVEN] Purchase Invoice
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Invoice,'');
      PurchHeader.VALIDATE("No. Series",PurchasesPayablesSetup."Posted Invoice Nos.");
      PurchHeader.VALIDATE("Posting No. Series",PurchasesPayablesSetup."Invoice Nos.");
      PurchHeader.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(PostedDocsToPrintCreatedMsg);

      // [WHEN] Delete Purchase Invoice
      PurchHeader.DELETE(TRUE);

      // [THEN] Message "One or more documents have been posted during deletion which you can print" was raised
      // Verification done in ExactMessageHandler
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuHandler)]
    PROCEDURE PurchaseOrderEquallyItemChargeAssignment@105();
    VAR
      PurchaseLine@1003 : Record 39;
      ItemChargeAssignmentPurch@1002 : Record 5805;
      AmountToAssign@1001 : Decimal;
      QtyToAssign@1000 : Decimal;
    BEGIN
      // [FEATURE] [Item Charge]
      // [SCENARIO 379418] Equally Item Charge Assignment line Amount to Assign calculation
      Initialize;

      // [GIVEN] Purchase Order with 3 item lines and equally assigned item charge line (Suggest Choice = 1)
      // [GIVEN] AmountToAssign = "A", QtyToAssign = "Q"
      PurchaseOrderItemChargeAssignment(PurchaseLine,AmountToAssign,QtyToAssign,1);

      // [WHEN] Reassign all qty "Q" to one line
      AssignQtyToOneLine(ItemChargeAssignmentPurch,PurchaseLine,QtyToAssign);

      // [THEN] Amount to Assign is equal "A"
      ItemChargeAssignmentPurch.CALCSUMS("Amount to Assign");
      Assert.AreEqual(AmountToAssign,ItemChargeAssignmentPurch."Amount to Assign",AmountToAssignErr);
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuHandler)]
    PROCEDURE PurchaseOrderAmountItemChargeAssignment@322();
    VAR
      PurchaseLine@1003 : Record 39;
      ItemChargeAssignmentPurch@1002 : Record 5805;
      AmountToAssign@1001 : Decimal;
      QtyToAssign@1000 : Decimal;
    BEGIN
      // [FEATURE] [Item Charge]
      // [SCENARIO 379418] Item Charge Assignment by amount line Amount to Assign calculation
      Initialize;

      // [GIVEN] Purchase Order with 3 item lines and assigned item charge line by amount (Suggest Choice = 2)
      // [GIVEN] AmountToAssign = "A", QtyToAssign = "Q"
      PurchaseOrderItemChargeAssignment(PurchaseLine,AmountToAssign,QtyToAssign,2);

      // [WHEN] Reassign all qty "Q" to one line
      AssignQtyToOneLine(ItemChargeAssignmentPurch,PurchaseLine,QtyToAssign);

      // [THEN] Amount to Assign is equal "A"
      ItemChargeAssignmentPurch.CALCSUMS("Amount to Assign");
      Assert.AreEqual(AmountToAssign,ItemChargeAssignmentPurch."Amount to Assign",AmountToAssignErr);
    END;

    [Test]
    PROCEDURE ReplacePurchLineStandardTextWithExtText@252();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      StandardText@1005 : Record 7;
      ExtendedText@1002 : Text;
    BEGIN
      // [FEATURE] [Standard Text] [Extended Text]
      // [SCENARIO 380579] Replacing of Purchase Line's Standard Text Code updates attached Extended Text lines
      Initialize;

      // [GIVEN] Standard Text (Code = "ST1", Description = "SD1") with Extended Text "ET1".
      // [GIVEN] Standard Text (Code = "ST2", Description = "SD2") with Extended Text "ET2".
      // [GIVEN] Purchase Order with line: "Type" = "", "No." = "ST1"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      MockPurchaseLine(PurchaseLine,PurchaseHeader);
      ValidatePurchaseLineStandardCode(PurchaseLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [WHEN] Validate Purchase Line "No." = "ST2"
      ValidatePurchaseLineStandardCode(PurchaseLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [THEN] There are two Purchase lines:
      // [THEN] Line1: Type = "", "No." = "ST2", Description = "SD2"
      // [THEN] Line2: Type = "", "No." = "", Description = "ET2"
      VerifyPurchaseLineCount(PurchaseHeader,2);
      VerifyPurchaseLineDescription(PurchaseLine,PurchaseLine.Type::" ",StandardText.Code,StandardText.Description);
      PurchaseLine.NEXT;
      VerifyPurchaseLineDescription(PurchaseLine,PurchaseLine.Type::" ",'',ExtendedText);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithQtyPerUoMVerifyJobLedger@303();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      JobLedgerEntry@1006 : Record 169;
      DocumentNo@1004 : Code[20];
      QtyPerUoM@1005 : Decimal;
    BEGIN
      // [FEATURE] [Job] [Unit of Measure]
      // [SCENARIO 221458] Post Purchase Order with job and alternative unit of measure

      Initialize;

      // [GIVEN] Create Item with item unit of measure
      CreateItemWithUnitPrice(Item);
      QtyPerUoM := LibraryRandom.RandIntInRange(2,100);

      // [GIVEN] Alternative item's "Unit of Measure" = "U" with alternative "Qty. per Unit of Measure" = 5
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",QtyPerUoM);

      // [GIVEN] Purchase Order with "Unit of Measure" = "U"  where "Unit Cost" = 100
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine,Item."No.",ItemUnitOfMeasure.Code);

      // [WHEN] Post Purchase Order
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] "Job Ledger Entry" is posted with "Base Unit of Measure" where "Unit Cost" = 20
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."Job No.");
      JobLedgerEntry.TESTFIELD("Unit Cost",PurchaseLine."Unit Cost" / QtyPerUoM);
      JobLedgerEntry.TESTFIELD("Total Cost (LCY)",CalculateTotalCostLCY(PurchaseLine));
    END;

    [Test]
    PROCEDURE PurchaseOrderForWhseLocationAndItemChargeWithPrepayment@304();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseLineCharge@1002 : Record 39;
      WarehouseEmployee@1003 : Record 7301;
      LocationCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [Prepayment] [Warehouse Receipt]
      // [SCENARIO 382050] Posting warehouse receipt for prepaid Purchase Order with item charge
      Initialize;

      // [GIVEN] Purchase Order for Warehouse Location where second line is Item Charge with Amount of 10
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLineCharge,PurchaseHeader,PurchaseLineCharge.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,1);
      PurchaseLineCharge.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLineCharge.VALIDATE("VAT Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      PurchaseLineCharge.VALIDATE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      PurchaseLineCharge.MODIFY(TRUE);
      UpdatePurchPrepmtAccount(PurchaseLine);
      LocationCode := ModifyWarehouseLocation(TRUE);

      // [GIVEN] Prepayment is posted for Purchase Order
      ModifyFullPrepmtAndLocationOnPurchLine(PurchaseLine,LocationCode);
      ModifyFullPrepmtAndLocationOnPurchLine(PurchaseLineCharge,LocationCode);
      LibraryPurchase.PostPurchasePrepaymentInvoice(PurchaseHeader);
      PurchaseHeader."Vendor Invoice No." := LibraryUtility.GenerateGUID;
      PurchaseHeader.MODIFY;

      // [GIVEN] Warehouse receipt for released Purchase Order is created
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,PurchaseLine."Location Code",FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // [WHEN] Post Warehouse Document as Receive.
      ReceiveWarehouseDocument(PurchaseHeader."No.",PurchaseLine."Line No.");

      // [THEN] "Prepmt Amt to Deduct" is updated for Item Charge line as 10
      PurchaseLineCharge.FIND;
      PurchaseLineCharge.TESTFIELD("Prepmt Amt to Deduct",PurchaseLineCharge.Amount);

      // Tear Down
      ModifyWarehouseLocation(FALSE);
      WarehouseEmployee.GET(USERID,PurchaseLine."Location Code");
      WarehouseEmployee.DELETE;
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocLinesFromPurchaseReceiptWithAutoExtText@308();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseHeaderRet@1006 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Purchase Receipt using 'Get Posted Document Lines to Reverse'
      Initialize;

      // [GIVEN] Purchase order for Item with extended text is received.
      DocumentNo := CreatePostPurchDocWithAutoExtText(PurchaseHeader,PurchaseHeader."Document Type"::Order,FALSE);

      // [GIVEN] Purchase Return Order is created.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderRet,PurchaseHeaderRet."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Run 'Get Posted Document Lines to Reverse' for posted receipt
      GetPostedDocLinesToReverse(PurchaseHeaderRet,OptionStringRef::"Posted Receipts",DocumentNo);

      // [THEN] Extended Text Line exits for Purchase Return Order attached to item line
      VerifyPurchExtLineExists(PurchaseHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocLinesFromPurchaseInvoiceWithAutoExtText@307();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseHeaderRet@1006 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Purchase Invoice using 'Get Posted Document Lines to Reverse'
      Initialize;

      // [GIVEN] Purchase order for Item with extended text is received and invoiced.
      DocumentNo := CreatePostPurchDocWithAutoExtText(PurchaseHeader,PurchaseHeader."Document Type"::Order,TRUE);

      // [GIVEN] Purchase Return Order for vendor is created.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderRet,PurchaseHeaderRet."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Get Posted Doc Lines To Reverse for posted invoice
      GetPostedDocLinesToReverse(PurchaseHeaderRet,OptionStringRef::"Posted Invoices",DocumentNo);

      // [THEN] Extended Text Line exits for Purchase Return Order attached to item line
      VerifyPurchExtLineExists(PurchaseHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocLinesFromPurchaseRetOrderWithAutoExtText@316();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseHeaderRet@1006 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Purchase Return Order using 'Get Posted Document Lines to Reverse'
      Initialize;

      // [GIVEN] Posted Return Purchase order for Item with extended text.
      DocumentNo := CreatePostPurchDocWithAutoExtText(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",TRUE);

      // [GIVEN] Purchase Return Order for vendor is created.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderRet,PurchaseHeaderRet."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Get Posted Doc Lines To Reverse for posted return order
      GetPostedDocLinesToReverse(PurchaseHeaderRet,OptionStringRef::"Posted Return Shipments",DocumentNo);

      // [THEN] Extended Text Line exits for Purchase Return Order attached to item line
      VerifyPurchExtLineExists(PurchaseHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocLinesFromPurchaseCrMemoWithAutoExtText@318();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseHeaderRet@1006 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Purchase Credit Memo using 'Get Posted Document Lines to Reverse'
      Initialize;

      // [GIVEN] Posted Purchase credit memo for Item with extended text is received and invoiced.
      DocumentNo := CreatePostPurchDocWithAutoExtText(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",TRUE);

      // [GIVEN] Purchase Return Order for vendor is created.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderRet,PurchaseHeaderRet."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Get Posted Doc Lines To Reverse for posted credit memo
      GetPostedDocLinesToReverse(PurchaseHeaderRet,OptionStringRef::"Posted Cr. Memos",DocumentNo);

      // [THEN] Extended Text Line exits for Purchase Return Order attached to item line
      VerifyPurchExtLineExists(PurchaseHeaderRet);
    END;

    [Test]
    PROCEDURE LineAmountToHandleRecalculatesBasedOnQtyAndPrice@407();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 211691] "Line Amount" recalculates by GetLineAmountToHandle function of table "Purchase Line" based on current Quantity and "Unit Price"

      Initialize;

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchaseHeader,PurchLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,3);
      PurchLine."Direct Unit Cost" := 41.68;
      PurchLine."Line Discount %" := 10;
      PurchLine."Line Discount Amount" := 8.34;

      // "Line Amount" = "Qty. To Handle" * "Unit Price" = 2 * 41.68 = 83.36
      // "Line Discount Amount" = ROUND("Line Amount " * "Line Discount %" / 100) = 83.36 * 10 / 100 = ROUND(8.336) = 8.4
      // "Line Amount To Handle" = "Line Amount" - "Line Discount Amount" = 83.36 - 8.4 = 75.02
      Assert.AreEqual(75.02,PurchLine.GetLineAmountToHandle(2),'Incorrect amount');
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LightInit;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE LightInit@222();
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
    END;

    LOCAL PROCEDURE InitGlobalVariables@37();
    BEGIN
      CLEAR(TempDocumentEntry2);
      CLEAR(PostingDate2);
      DocumentNo2 := '';
    END;

    LOCAL PROCEDURE CreatePurchDocWithGLDescriptionLine@278(VAR PurchaseHeader@1001 : Record 38;VAR Description@1004 : Text[50];DocumentType@1002 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandIntInRange(2,5));
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type,PurchaseLine."No.",0);
      PurchaseLine.VALIDATE("No.",'');
      PurchaseLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      PurchaseLine.MODIFY;
      Description := PurchaseLine.Description;
    END;

    LOCAL PROCEDURE CreateAnalysisColumnWithItemLedgerEntryType@120(ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option) : Code[10];
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisViewAnalysisArea);
      LibraryVariableStorage.Enqueue(
        CreateAnalysisColumn(AnalysisColumnTemplate.Name,ItemAnalysisViewAnalysisArea,ItemLedgerEntryTypeFilter,ValueType));
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAnalysisMultipleColumns@140(ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option;ColumnCount@1006 : Integer) : Code[10];
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
      Index@1005 : Integer;
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisViewAnalysisArea);
      FOR Index := 1 TO ColumnCount DO
        CreateAnalysisColumn(AnalysisColumnTemplate.Name,ItemAnalysisViewAnalysisArea,ItemLedgerEntryTypeFilter,ValueType);
      LibraryVariableStorage.Enqueue(ColumnCount);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAnalysisColumn@143(ColumnTemplateName@1001 : Code[10];ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option) : Text[50];
    VAR
      AnalysisColumn@1000 : Record 7118;
    BEGIN
      LibraryERM.CreateAnalysisColumn(AnalysisColumn,ItemAnalysisViewAnalysisArea,ColumnTemplateName);
      AnalysisColumn.VALIDATE("Column No.",COPYSTR(LibraryUtility.GenerateGUID,1,AnalysisColumn.FIELDNO("Column No.")));
      AnalysisColumn.VALIDATE(
        "Column Header",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AnalysisColumn.FIELDNO("Column Header"),DATABASE::"Analysis Column"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Analysis Column",AnalysisColumn.FIELDNO("Column Header"))));
      AnalysisColumn.VALIDATE("Item Ledger Entry Type Filter",ItemLedgerEntryTypeFilter);
      AnalysisColumn.VALIDATE("Value Type",ValueType);
      AnalysisColumn.MODIFY(TRUE);
      EXIT(AnalysisColumn."Column Header");
    END;

    LOCAL PROCEDURE CreateAnalysisLineWithTypeVendor@116(ItemAnalysisViewAnalysisArea@1003 : Option;VendorNo@1002 : Code[20]) : Code[10];
    VAR
      AnalysisLine@1001 : Record 7114;
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisViewAnalysisArea);
      LibraryInventory.CreateAnalysisLine(AnalysisLine,ItemAnalysisViewAnalysisArea,AnalysisLineTemplate.Name);
      AnalysisLine.VALIDATE(Type,AnalysisLine.Type::Vendor);
      AnalysisLine.VALIDATE(Range,VendorNo);
      AnalysisLine.MODIFY(TRUE);
      EXIT(AnalysisLine."Analysis Line Template Name");
    END;

    LOCAL PROCEDURE InvoicePostedPurchaseOrder@35(VAR InvoicePurchaseHeader@1000 : Record 38;PostedPurchaseHeader@1001 : Record 38);
    VAR
      PurchRcptHeader@1003 : Record 120;
      PurchRcptLine@1004 : Record 121;
      PurchGetReceipt@1002 : Codeunit 74;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        InvoicePurchaseHeader,InvoicePurchaseHeader."Document Type"::Invoice,PostedPurchaseHeader."Buy-from Vendor No.");
      ModifyPurchaseHeader(InvoicePurchaseHeader,InvoicePurchaseHeader."No.");

      PurchGetReceipt.SetPurchHeader(InvoicePurchaseHeader);
      WITH PurchRcptHeader DO BEGIN
        SETRANGE("Order No.",PostedPurchaseHeader."No.");
        FINDSET;
        REPEAT
          PurchRcptLine.SETRANGE("Document No.","No.");
          PurchGetReceipt.CreateInvLines(PurchRcptLine);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CrMemoPostedPurchaseReturnOrder@259(VAR CrMemoPurchaseHeader@1000 : Record 38;PostedPurchaseHeader@1001 : Record 38);
    VAR
      ReturnShipmentHeader@1003 : Record 6650;
      ReturnShipmentLine@1004 : Record 6651;
      PurchGetReturnShipments@1002 : Codeunit 6648;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        CrMemoPurchaseHeader,CrMemoPurchaseHeader."Document Type"::"Credit Memo",PostedPurchaseHeader."Buy-from Vendor No.");
      ModifyPurchaseHeader(CrMemoPurchaseHeader,CrMemoPurchaseHeader."No.");

      PurchGetReturnShipments.SetPurchHeader(CrMemoPurchaseHeader);
      WITH ReturnShipmentHeader DO BEGIN
        SETRANGE("Return Order No.",PostedPurchaseHeader."No.");
        FINDSET;
        REPEAT
          ReturnShipmentLine.SETRANGE("Document No.","No.");
          PurchGetReturnShipments.CreateInvLines(ReturnShipmentLine);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@54(VAR PurchaseHeader@1003 : Record 38) : Code[20];
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreatePostPurchaseInvoiceWithZeroAmount@263(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39) : Code[20];
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",0);
      PurchaseLine.MODIFY;
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateBinAndBinContent@148(VAR Bin@1000 : Record 7354;Item@1001 : Record 27);
    VAR
      BinContent@1002 : Record 7302;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,CreateLocationWithBinMandatory,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateAndUpdateCurrency@164() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        GET(CreateCurrency);
        VALIDATE("Invoice Rounding Precision",1);
        VALIDATE("Amount Rounding Precision",1);
        VALIDATE("Amount Decimal Places",'0:0');
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateDefaultDimensions@175(VAR DimensionValue1@1001 : Record 349;VAR DimensionValue2@1000 : Record 349;GLAccountNo@1005 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      DefaultDimension@1006 : Record 352;
      GeneralLedgerSetup@1003 : Record 98;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue1,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue2,GeneralLedgerSetup."Shortcut Dimension 2 Code");
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccountNo,DimensionValue1."Dimension Code",DimensionValue1.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    LOCAL PROCEDURE CreateExchangeRates@205(CurrencyCode@1000 : Code[10];StartingDate@1001 : Date;ExchangeRateAmount@1002 : Decimal;RelationalExchangeRate@1003 : Decimal);
    VAR
      CurrencyExchangeRate@1004 : Record 330;
    BEGIN
      WITH CurrencyExchangeRate DO BEGIN
        LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
        VALIDATE("Exchange Rate Amount",ExchangeRateAmount);
        VALIDATE("Adjustment Exch. Rate Amount",ExchangeRateAmount);
        VALIDATE("Relational Exch. Rate Amount",RelationalExchangeRate);
        VALIDATE("Relational Adjmt Exch Rate Amt",RelationalExchangeRate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateInvoiceDiscount@96(VAR VendorInvoiceDisc@1001 : Record 24);
    BEGIN
      // Enter Random Values for "Minimum Amount" and "Discount %".
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor,'',LibraryRandom.RandInt(100));
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandInt(20));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@103(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VendorNo@1002 : Code[20];DocumentType@1003 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithLocation@130(VAR PurchaseLine@1000 : Record 39;DocumentType@1002 : Option;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@87(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLines@88(VAR PurchaseLine@1002 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      // Random Values used are not important.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithQty@230(VAR PurchaseLine@1000 : Record 39;Qty@1001 : Decimal;DocType@1003 : Integer);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,Qty);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderChargeItem@73(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1002 : Record 39;DocumentType@1001 : Option);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType);
      CreatePurchaseLines(PurchaseLine,PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReceivePurchaseOrderChargeItem@289(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      CreatePurchaseOrderChargeItem(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      PurchaseLine.VALIDATE("Qty. to Receive",0);
      PurchaseLine.MODIFY(TRUE);

      OpenItemChargeAssgnt(PurchaseLine,TRUE,PurchaseLine.Quantity);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithChargeItem@183(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39;Qty@1003 : Decimal);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,Qty);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@51(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateSimplePurchLine@234(VAR PurchLine@1000 : Record 39;PurchHeader@1001 : Record 38;LineType@1002 : Option);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      WITH PurchLine DO BEGIN
        INIT;
        VALIDATE("Document Type",PurchHeader."Document Type");
        VALIDATE("Document No.",PurchHeader."No.");
        RecRef.GETTABLE(PurchLine);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        VALIDATE(Type,LineType);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindPurchRcptHeader@217(VAR PurchRcptHeader@1000 : Record 120;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchRcptLine@198(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndPost@89(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39) : Code[20];
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLines(PurchaseLine,PurchaseHeader);
      PurchaseLine.ShowItemChargeAssgnt;
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithJob@111(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];UnitOfMeasureCode@1005 : Code[10]);
    VAR
      Job@1004 : Record 167;
      JobTask@1003 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(20,2));
      ModifyPurchaseLineJobNo(PurchaseLine,Job."No.",JobTask."Job Task No.",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE CreatePurchOrderWithJobAndJobItemPrice@251(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1002 : Record 39;ItemNo@1001 : Code[20];UnitOfMeasureCode@1000 : Code[10];VAR UnitCostFactor@1007 : Decimal);
    VAR
      Job@1005 : Record 167;
      JobTask@1004 : Record 1001;
      JobItemPrice@1006 : Record 1013;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobItemPrice(JobItemPrice,Job."No.",'',ItemNo,'','',UnitOfMeasureCode);
      UnitCostFactor := LibraryRandom.RandDec(1,2);
      JobItemPrice.VALIDATE("Unit Cost Factor",UnitCostFactor);
      JobItemPrice.MODIFY(TRUE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));
      ModifyPurchaseLineJobNo(PurchaseLine,Job."No.",JobTask."Job Task No.",UnitOfMeasureCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostPurchOrderWithDimension@187(VAR PurchHeader@1008 : Record 38;ItemDimValue@1000 : Record 349;DimensionCode@1006 : Code[20];DimValueCode@1007 : Code[20]) : Integer;
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,CreateItem,LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      ModifyDimOnPurchaseLine(PurchLine,ItemDimValue,DimensionCode,DimValueCode);
      PurchLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
      EXIT(PurchLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE CreatePostInvoiceWithReceiptLines@202(ItemChargeDimValue@1000 : Record 349;DimensionCode@1001 : Code[20];DimValueCode@1002 : Code[20];OrderPurchHeader@1003 : Record 38) : Integer;
    VAR
      PurchHeader@1004 : Record 38;
      PurchLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Invoice,OrderPurchHeader."Buy-from Vendor No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::"Charge (Item)",CreateItemCharge,LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      ModifyDimOnPurchaseLine(PurchLine,ItemChargeDimValue,DimensionCode,DimValueCode);
      PurchLine.MODIFY(TRUE);
      AssignItemChargeToReceipt(OrderPurchHeader."No.",PurchLine);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
      EXIT(PurchLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE CreatePostPurchInvWithGetReceiptLines@236(ChargePurchHeader@1002 : Record 38);
    VAR
      PurchHeader@1000 : Record 38;
      TempPurchRcptLine@1003 : TEMPORARY Record 121;
      PurchGetReceipt@1004 : Codeunit 74;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Invoice,ChargePurchHeader."Buy-from Vendor No.");
      FillBufferOfRcptLinesByOrderNo(TempPurchRcptLine,ChargePurchHeader."No.");
      PurchGetReceipt.SetPurchHeader(PurchHeader);
      PurchGetReceipt.CreateInvLines(TempPurchRcptLine);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostPurchDocWithAutoExtText@311(VAR PurchaseHeader@1000 : Record 38;DocumentType@1004 : Option;PostInvoice@1002 : Boolean) : Code[20];
    VAR
      PurchaseLine@1001 : Record 39;
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithAutoExtendedText,LibraryRandom.RandInt(10));
      TransferExtendedText.PurchCheckIfAnyExtText(PurchaseLine,TRUE);
      TransferExtendedText.InsertPurchExtText(PurchaseLine);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,PostInvoice));
    END;

    LOCAL PROCEDURE CreateSalesOrder@237(VAR SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE CreateStandardTextLine@218(VAR PurchLine@1000 : Record 39;VAR PurchHeader@1001 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,CreateItem,0);
      PurchLine.VALIDATE(Type,PurchLine.Type::" ");
      PurchLine.VALIDATE("No.",FindStandardTextCode);
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReceivePurchOrderWithJobUnitPrices@182(VAR PurchHeader@1003 : Record 38;VAR PurchLine@1000 : Record 39;ItemNo@1001 : Code[20];JobTask@1002 : Record 1001);
    BEGIN
      CreatePurchaseOrder(PurchHeader,PurchLine,ItemNo);
      WITH PurchLine DO BEGIN
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Job Unit Price",LibraryRandom.RandDec(100,2));
        VALIDATE("Job Total Price",Quantity * "Job Unit Price");
        VALIDATE("Job Line Amount","Job Total Price");
        VALIDATE("Job Line Discount %",LibraryRandom.RandIntInRange(3,5));
        VALIDATE("Job Line Discount Amount",ROUND("Job Line Amount" * "Job Line Discount %" / 100));
        VALIDATE("Job Unit Price (LCY)","Job Unit Price");
        VALIDATE("Job Total Price (LCY)","Job Total Price");
        VALIDATE("Job Line Amount (LCY)","Job Line Amount");
        VALIDATE("Job Line Disc. Amount (LCY)","Job Line Discount Amount");
        MODIFY(TRUE);
      END;
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemAndExtendedText@47(VAR Item@1001 : Record 27) : Text[50];
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryService@1000 : Codeunit 131902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
      InventorySetup@1003 : Record 313;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      // Modify Item No. Series in Inventory setup.
      InventorySetup.GET;
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.MODIFY(TRUE);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Unit Price.
      FindVATPostingSetup(VATPostingSetup);
      IF VATPostingSetup."VAT Prod. Posting Group" <> Item."VAT Prod. Posting Group" THEN
        Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithDimension@154(VAR Item@1000 : Record 27;DimensionCode@1004 : Code[20];ValuePosting@1001 : Option);
    VAR
      DefaultDimension@1003 : Record 352;
      DimensionValue@1006 : Record 349;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryUtility@1005 : Codeunit 131000;
    BEGIN
      LibraryInventory.CreateItem(Item);

      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);
      Item.MODIFY(TRUE);
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@99(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemInventoryValueZero@194(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Inventory Value Zero",TRUE);
      Item.VALIDATE("Costing Method",Item."Costing Method"::FIFO);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemCharge@208() : Code[20];
    VAR
      ItemCharge@1000 : Record 5800;
    BEGIN
      LibraryInventory.CreateItemCharge(ItemCharge);
      EXIT(ItemCharge."No.");
    END;

    LOCAL PROCEDURE CreateItemWithUOMandStandartCost@223(VAR Item@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      CreateItemWithUnitPrice(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Standard Cost",LibraryRandom.RandInt(50));
      Item.MODIFY(TRUE);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
    END;

    LOCAL PROCEDURE CreateItemWithAutoExtendedText@312() : Code[20];
    VAR
      Item@1001 : Record 27;
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateLocationWithBinMandatory@167() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateVendor@1() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@157(VAR Vendor@1002 : Record 23;VAR DefaultDimension@1000 : Record 352;ValuePosting@1004 : Option;DimensionCode@1001 : Code[20]);
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@191() : Code[20];
    VAR
      Customer@1000 : Record 18;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateTempVendor@75(VAR TempVendor@1000 : TEMPORARY Record 23);
    VAR
      GenBusinessPostingGroup@1003 : Record 250;
      VATBusinessPostingGroup@1002 : Record 323;
    BEGIN
      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      LibraryERM.FindVATBusinessPostingGroup(VATBusinessPostingGroup);
      TempVendor.INIT;
      TempVendor.VALIDATE("No.",GenerateVendorNo);
      TempVendor.INSERT;
      TempVendor.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
      TempVendor.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
      TempVendor.VALIDATE("Vendor Posting Group",LibraryPurchase.FindVendorPostingGroup);
      TempVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorCard@76(Vendor@1000 : Record 23);
    VAR
      VendorCard@1001 : TestPage 26;
    BEGIN
      VendorCard.OPENNEW;
      VendorCard."No.".SETVALUE(Vendor."No.");
      VendorCard."Gen. Bus. Posting Group".SETVALUE(Vendor."Gen. Bus. Posting Group");
      VendorCard."VAT Bus. Posting Group".SETVALUE(Vendor."VAT Bus. Posting Group");
      VendorCard."Vendor Posting Group".SETVALUE(Vendor."Vendor Posting Group");
      VendorCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateVendorInvDiscount@247() : Code[20];
    VAR
      VendorInvoiceDisc@1000 : Record 24;
    BEGIN
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor,'',0);
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      VendorInvoiceDisc.MODIFY(TRUE);
      EXIT(VendorInvoiceDisc.Code);
    END;

    LOCAL PROCEDURE CreateDimValue@185(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimValues@177(VAR Dimension@1002 : Record 348;VAR DimensionValueCode@1001 : ARRAY [2] OF Code[20]);
    VAR
      DimensionValue@1000 : Record 349;
      i@1003 : Integer;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      FOR i := 1 TO ARRAYLEN(DimensionValueCode) DO BEGIN
        LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
        DimensionValueCode[i] := DimensionValue.Code;
      END;
    END;

    LOCAL PROCEDURE CreateDimSetIDFromDimValue@192(VAR DimSetID@1001 : Integer;DimensionValue@1003 : Record 349);
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
      DimensionMgt@1000 : Codeunit 408;
    BEGIN
      IF DimSetID <> 0 THEN
        DimensionMgt.GetDimensionSet(TempDimSetEntry,DimSetID);
      WITH TempDimSetEntry DO BEGIN
        "Dimension Code" := DimensionValue."Dimension Code";
        "Dimension Value Code" := DimensionValue.Code;
        "Dimension Value ID" := DimensionValue."Dimension Value ID";
        IF NOT INSERT THEN
          MODIFY;
        DimSetID := DimensionMgt.GetDimensionSetID(TempDimSetEntry);
      END;
    END;

    LOCAL PROCEDURE CreatePurchOrderWithPurchCode@61(VAR StandardPurchaseLine@1001 : Record 174;VAR PurchaseHeader@1000 : Record 38;ShortCutDimension1@1004 : Code[20];ShortCutDimension2@1005 : Code[20]);
    VAR
      StandardPurchaseCode@1006 : Record 173;
    BEGIN
      LibraryPurchase.CreateStandardPurchaseCode(StandardPurchaseCode);
      LibraryPurchase.CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code);
      ModifyStandardPurchaseLine(StandardPurchaseLine,ShortCutDimension1,ShortCutDimension2);
      StandardPurchaseLine.GET(StandardPurchaseLine."Standard Purchase Code",StandardPurchaseLine."Line No.");
      CreateStandardPurchLineForPurchaseOrder(PurchaseHeader,StandardPurchaseCode.Code);
    END;

    LOCAL PROCEDURE CreateStandardPurchLineForPurchaseOrder@179(VAR PurchaseHeader@1003 : Record 38;StandardPurchaseCode@1002 : Code[10]);
    VAR
      Vendor@1000 : Record 23;
      StandardVendorPurchaseCode@1001 : Record 175;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendorPurchaseCode(StandardVendorPurchaseCode,Vendor."No.",StandardPurchaseCode);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      COMMIT;  // COMMIT is required here.
      StandardVendorPurchaseCode.InsertPurchLines(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseReceiptWithDimension@132(VAR PurchaseHeader@1003 : Record 38) : Code[20];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      DimensionValue@1004 : Record 349;
      PurchaseLine@1002 : Record 39;
      LibraryDimension@1001 : Codeunit 131001;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseReceipt@144(VAR PurchaseHeader@1003 : Record 38) : Code[20];
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateVendor,PurchaseHeader."Document Type"::Order);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateStandardPurchaseDocument@166(VAR StandardPurchaseCode@1000 : Record 173;GLAccountNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      StandardPurchaseLine@1001 : Record 174;
    BEGIN
      LibraryPurchase.CreateStandardPurchaseCode(StandardPurchaseCode);
      CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code,StandardPurchaseLine.Type::"G/L Account",GLAccountNo);
      CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode.Code,StandardPurchaseLine.Type::Item,ItemNo);
    END;

    LOCAL PROCEDURE CreateStandardPurchaseLine@153(VAR StandardPurchaseLine@1000 : Record 174;StandardPurchaseCode@1001 : Code[10];StandardPurchLineType@1002 : Option;No@1003 : Code[20]);
    BEGIN
      WITH StandardPurchaseLine DO BEGIN
        LibraryPurchase.CreateStandardPurchaseLine(StandardPurchaseLine,StandardPurchaseCode);
        VALIDATE(Type,StandardPurchLineType);
        VALIDATE("No.",No);
        VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendorWithCurrency@195(VAR Vendor@1000 : Record 23);
    VAR
      Currency@1002 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",Currency.Code);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithCurrency@168(VAR PurchaseHeader@1000 : Record 38;CurrencyCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      ModifyPurchaseHeader(PurchaseHeader,PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreatePurchOrderAndGetDiscountWithoutVAT@250(VAR PurchHeader@1003 : Record 38) ExpectedInvDiscAmount : Decimal;
    VAR
      PurchLine@1002 : Record 39;
      Item@1001 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendorInvDiscount);
      LibraryInventory.CreateItem(Item);
      WITH PurchLine DO BEGIN
        LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,Type::Item,Item."No.",
          LibraryRandom.RandInt(10));
        VALIDATE("Unit Cost",LibraryRandom.RandDec(1000,2));
        MODIFY(TRUE);
        CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
        GET("Document Type","Document No.","Line No.");
        ExpectedInvDiscAmount := "Inv. Discount Amount";
      END;
    END;

    LOCAL PROCEDURE CreatePurchLineAndJobTask@239(VAR PurchaseLine@1000 : Record 39;VAR JobTask@1001 : Record 1001);
    VAR
      PurchaseHeader@1002 : Record 38;
      Job@1003 : Record 167;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLineWithItem(PurchaseLine,PurchaseHeader,LibraryRandom.RandInt(10),0);
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchLineWithCurrency@219(VAR PurchaseLine@1000 : Record 39;CurrencyCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithItem(PurchaseLine,PurchaseHeader,LibraryRandom.RandInt(10),0);
    END;

    LOCAL PROCEDURE CreateJobTaskWithCurrency@220(VAR JobTask@1000 : Record 1001;CurrencyCode@1002 : Code[10]);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateOrderCheckVATSetup@274(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    VAR
      VATPostingSetup@1003 : Record 325;
      Item@1002 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryInventory.CreateItem(Item);
      IF NOT VATPostingSetup.GET(PurchaseHeader."VAT Bus. Posting Group",Item."VAT Prod. Posting Group") THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,PurchaseHeader."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",1);
    END;

    LOCAL PROCEDURE MockPurchaseLine@305(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38);
    BEGIN
      WITH PurchaseLine DO BEGIN
        "Document Type" := PurchaseHeader."Document Type";
        "Document No." := PurchaseHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(PurchaseLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE PostReceivePurchOrderWithVAT@209(VAR PurchRcptLine@1000 : Record 121;PurchHeader@1001 : Record 38);
    BEGIN
      WITH PurchHeader DO BEGIN
        VALIDATE("Prices Including VAT",TRUE);
        LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
        FindPurchRcptLine(PurchRcptLine,"No.");
      END;
    END;

    LOCAL PROCEDURE InitPurchaseLine@315(PurchaseLine@1000 : Record 39;DocumentType@1001 : Option);
    BEGIN
      WITH PurchaseLine DO BEGIN
        INIT;
        "Document Type" := DocumentType;
        "Document No." := LibraryUtility.GenerateGUID;
        "Line No." := LibraryRandom.RandIntInRange(1000,2000);
        Type := Type::Item;
        "No." := '';
        Description := LibraryUtility.GenerateGUID;
        Quantity := LibraryRandom.RandDecInRange(300,400,2);
        "Qty. to Receive" := LibraryRandom.RandDecInRange(200,300,2);
        "Qty. to Receive (Base)" := LibraryRandom.RandDecInRange(200,300,2);
        "Qty. to Invoice" := LibraryRandom.RandDecInRange(100,200,2);
        "Qty. to Invoice (Base)" := LibraryRandom.RandDecInRange(100,200,2);
        "Return Qty. to Ship" := LibraryRandom.RandDecInRange(200,300,2);
        "Return Qty. to Ship (Base)" := LibraryRandom.RandDecInRange(200,300,2);
      END;
    END;

    LOCAL PROCEDURE ValidatePurchaseLineStandardCode@309(VAR PurchaseLine@1000 : Record 39;StandardTextCode@1001 : Code[20]);
    VAR
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      PurchaseLine.VALIDATE("No.",StandardTextCode);
      PurchaseLine.MODIFY(TRUE);
      TransferExtendedText.PurchCheckIfAnyExtText(PurchaseLine,FALSE);
      TransferExtendedText.InsertPurchExtText(PurchaseLine);
    END;

    LOCAL PROCEDURE FindDifferentDimension@156(Code@1002 : Code[20]) : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      Dimension.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE FindGLEntry@56(VAR GLEntry@1002 : Record 17;DocumentNo@1001 : Code[20];GLAccountNo@1000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@90(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20];DocumentType@1001 : Option);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;
    END;

    LOCAL PROCEDURE FindReceiptLineNo@172(DocumentNo@1001 : Code[20]) : Integer;
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        EXIT("Line No.");
      END;
    END;

    LOCAL PROCEDURE FindPurchInvLine@146(VAR PurchInvLine@1000 : Record 123;DocumentNo@1001 : Code[20]);
    BEGIN
      WITH PurchInvLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::Item);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindStandardTextCode@207() : Code[20];
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      StandardText.NEXT(LibraryRandom.RandInt(StandardText.COUNT));
      EXIT(StandardText.Code);
    END;

    LOCAL PROCEDURE FindValueEntry@127(VAR ValueEntry@1001 : Record 5802;ItemNo@1000 : Code[20];SourceNo@1002 : Code[20];DocumentNo@1003 : Code[20]);
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Source No.",SourceNo);
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVATPostingSetup@109(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindShptLine@238(VAR SalesShptLine@1001 : Record 111;OrderNo@1000 : Code[20]);
    VAR
      SalesShptHeader@1002 : Record 110;
    BEGIN
      SalesShptHeader.SETRANGE("Order No.",OrderNo);
      SalesShptHeader.FINDLAST;
      SalesShptLine.SETRANGE("Document No.",SalesShptHeader."No.");
      SalesShptLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindRcptLine@210(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    VAR
      PurchRcptHeader@1002 : Record 120;
    BEGIN
      FindPurchRcptHeader(PurchRcptHeader,OrderNo);
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@268(VAR VendorLedgerEntry@1002 : Record 25;VendorNo@1000 : Code[20];DocumentNo@1001 : Code[20]);
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Vendor No.",VendorNo);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FillBufferOfRcptLinesByOrderNo@190(VAR PassedPurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    VAR
      PurchRcptHeader@1002 : Record 120;
      PurchRcptLine@1003 : Record 121;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDSET;
      REPEAT
        PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
        PurchRcptLine.FINDFIRST;
        PassedPurchRcptLine := PurchRcptLine;
        PassedPurchRcptLine.INSERT;
      UNTIL PurchRcptHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE FindPurchaseLineWithType@258(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20];DocumentType@1001 : Option;LineType@1003 : Option);
    BEGIN
      PurchaseLine.SETRANGE(Type,LineType);
      FindPurchaseLine(PurchaseLine,DocumentNo,DocumentType);
    END;

    LOCAL PROCEDURE FindItemChargeAssignmentPurchLine@264(VAR ItemChargeAssignmentPurch@1004 : Record 5805;PurchaseLine@1000 : Record 39);
    BEGIN
      ItemChargeAssignmentPurch.SETRANGE("Document Type",PurchaseLine."Document Type");
      ItemChargeAssignmentPurch.SETRANGE("Document No.",PurchaseLine."Document No.");
      ItemChargeAssignmentPurch.SETRANGE("Document Line No.",PurchaseLine."Line No.");
      ItemChargeAssignmentPurch.FINDSET;
    END;

    LOCAL PROCEDURE GetDimensionSetId@142(PostedDocumentNo@1000 : Code[20]) : Integer;
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Document No.",PostedDocumentNo);
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        EXIT("Dimension Set ID");
      END;
    END;

    LOCAL PROCEDURE GetReceiptLine@147(PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Purch.-Get Receipt",PurchaseLine);
    END;

    LOCAL PROCEDURE GetPayablesAccountNo@265(VendorNo@1001 : Code[20]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1002 : Record 93;
    BEGIN
      Vendor.GET(VendorNo);
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      EXIT(VendorPostingGroup."Payables Account");
    END;

    LOCAL PROCEDURE GetPurchAccountNo@266(GenBusPostingGroupCode@1002 : Code[10];GenProdPostingGroupCode@1003 : Code[10]) : Code[20];
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(GenBusPostingGroupCode,GenProdPostingGroupCode);
      EXIT(GeneralPostingSetup."Purch. Account");
    END;

    LOCAL PROCEDURE GetPostedDocLinesToReverse@323(VAR PurchaseHeader@1003 : Record 38;OptionString@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(OptionString);
      LibraryVariableStorage.Enqueue(DocumentNo);
      PurchaseHeader.GetPstdDocLinesToRevere;
    END;

    LOCAL PROCEDURE PurchaseCopyDocument@71(PurchaseHeader@1000 : Record 38;DocumentNo@1003 : Code[20];DocumentType@1002 : Option);
    VAR
      CopyPurchaseDocument@1001 : Report 492;
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocumentType,DocumentNo,TRUE,FALSE);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE ModifyWarehouseLocation@17(RequireReceive@1003 : Boolean) : Code[10];
    VAR
      Location@1002 : Record 14;
    BEGIN
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE ModifyPurchaseHeader@45(VAR PurchaseHeader@1002 : Record 38;VendorInvoiceNo@1003 : Code[20]);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",VendorInvoiceNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyPurchaseLineQtyToReceive@41(VAR PurchaseLine@1000 : Record 39;QtyToReceive@1001 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyPurchaseLineJobNo@233(VAR PurchaseLine@1000 : Record 39;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        VALIDATE("Job No.",JobNo);
        VALIDATE("Job Task No.",JobTaskNo);
        VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ModifyLocationOnPurchaseLine@139(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Location Code",ModifyWarehouseLocation(TRUE));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyStandardPurchaseLine@62(StandardPurchaseLine@1000 : Record 174;ShortcutDimension1Code@1002 : Code[20];ShortcutDimension2Code@1003 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      StandardPurchaseLine.VALIDATE(Type,StandardPurchaseLine.Type::Item);
      StandardPurchaseLine.VALIDATE("No.",Item."No.");
      StandardPurchaseLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      StandardPurchaseLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      StandardPurchaseLine.VALIDATE("Shortcut Dimension 2 Code",ShortcutDimension2Code);
      StandardPurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyDirectUnitCost@138(VAR PurchaseHeader@1000 : Record 38) : Decimal;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDLAST;
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(PurchaseLine."Direct Unit Cost");
    END;

    LOCAL PROCEDURE ModifyDimOnPurchaseLine@227(VAR PurchLine@1001 : Record 39;BaseDimValue@1004 : Record 349;DimensionCode@1003 : Code[20];DimValueCode@1002 : Code[20]);
    VAR
      DimValue@1000 : Record 349;
    BEGIN
      CreateDimSetIDFromDimValue(PurchLine."Dimension Set ID",BaseDimValue);
      DimValue.GET(DimensionCode,DimValueCode);
      CreateDimSetIDFromDimValue(PurchLine."Dimension Set ID",DimValue);
    END;

    LOCAL PROCEDURE ModifyItemIndirectCost@215(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Indirect Cost %",10);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyFullPrepmtAndLocationOnPurchLine@321(VAR PurchaseLine@1000 : Record 39;LocationCode@1001 : Code[10]);
    BEGIN
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Prepayment %",100);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeQtyToInvoice@184(VAR InvPurchLine@1000 : Record 39;InvPurchHeader@1001 : Record 38);
    BEGIN
      WITH InvPurchLine DO BEGIN
        SETRANGE("Document Type",InvPurchHeader."Document Type");
        SETRANGE("Document No.",InvPurchHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        VALIDATE("Qty. to Invoice",ROUND(Quantity / LibraryRandom.RandIntInRange(3,5)));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AssignItemChargeToReceipt@229(OrderNo@1000 : Code[20];PurchLine@1001 : Record 39);
    VAR
      PurchRcptLine@1003 : Record 121;
      ItemChargeAssignmentPurch@1002 : Record 5805;
    BEGIN
      FindRcptLine(PurchRcptLine,OrderNo);
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchLine,ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        PurchRcptLine."Document No.",PurchRcptLine."Line No.",PurchRcptLine."No.");
    END;

    LOCAL PROCEDURE AssignItemChargeToShipment@211(OrderNo@1001 : Code[20];PurchLine@1000 : Record 39);
    VAR
      SalesShptLine@1002 : Record 111;
      ItemChargeAssignmentPurch@1003 : Record 5805;
    BEGIN
      FindShptLine(SalesShptLine,OrderNo);
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchLine,ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Sales Shipment",
        SalesShptLine."Document No.",SalesShptLine."Line No.",SalesShptLine."No.");
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",PurchLine."Qty. to Receive");
      ItemChargeAssignmentPurch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenPurchaseOrder@112(PurchaseHeaderNo@1001 : Code[20];BuyFromVendorNo@1999 : Code[20];Status@1000 : Option);
    VAR
      PurchaseOrder@1002 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER(Status,FORMAT(Status));
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeaderNo);
      PurchaseOrder."Buy-from Vendor No.".ASSERTEQUALS(BuyFromVendorNo);
      PurchaseOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenAnalysisReportPurchase@115(AnalysisReportName@1000 : Code[10];AnalysisLineTemplateName@1001 : Code[10];AnalysisColumnTemplateName@1002 : Code[10]);
    VAR
      AnalysisReportPurchase@1003 : TestPage 9375;
    BEGIN
      AnalysisReportPurchase.OPENEDIT;
      AnalysisReportPurchase.FILTER.SETFILTER(Name,AnalysisReportName);
      AnalysisReportPurchase."Analysis Line Template Name".SETVALUE(AnalysisLineTemplateName);
      AnalysisReportPurchase."Analysis Column Template Name".SETVALUE(AnalysisColumnTemplateName);
      AnalysisReportPurchase.EditAnalysisReport.INVOKE;
    END;

    LOCAL PROCEDURE OpenItemChargeAssgnt@290(PurchaseLine@1002 : Record 39;IsSetup@1000 : Boolean;Qty@1001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(IsSetup);
      LibraryVariableStorage.Enqueue(Qty);
      PurchaseLine.ShowItemChargeAssgnt;
    END;

    LOCAL PROCEDURE ReceiveWarehouseDocument@20(DocumentNo@1000 : Code[20];LineNo@1001 : Integer);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source No.",DocumentNo);
      WarehouseReceiptLine.SETRANGE("Source Line No.",LineNo);
      WarehouseReceiptLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Post Receipt",WarehouseReceiptLine);
    END;

    LOCAL PROCEDURE RunDeleteInvoicePurchaseReport@13(BuyFromVendorNo@1005 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
      DeleteInvoicedPurchOrders@1001 : Report 499;
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      DeleteInvoicedPurchOrders.USEREQUESTPAGE(FALSE);
      DeleteInvoicedPurchOrders.SETTABLEVIEW(PurchaseHeader);
      DeleteInvoicedPurchOrders.RUN;
    END;

    LOCAL PROCEDURE ModifyPostingDateOnWarehouseReceiptHeader@136(VAR WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      WarehouseReceiptHeader.VALIDATE("Posting Date",CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandInt(6)),WORKDATE));
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@31(VAR VendorInvoiceDisc@1001 : Record 24);
    BEGIN
      // Required Random Value for "Minimum Amount" and "Discount %" fields value is not important.
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor,'',LibraryRandom.RandInt(100));
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@38(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exits before creating
      // General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE SetupLineDiscount@22(VAR PurchaseLineDiscount@1000 : Record 7014);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Required Random Value for "Minimum Quantity" and "Line Discount %" fields value is not important.
      Item.GET(CreateItem);
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,Item."No.",CreateVendor,WORKDATE,'','',Item."Base Unit of Measure",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateTotalCostLCY@196(PurchaseLine@1000 : Record 39) : Decimal;
    VAR
      Currency@1001 : Record 4;
      UnitCostLCY@1002 : Decimal;
    BEGIN
      IF PurchaseLine."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchaseLine."Currency Code");
      UnitCostLCY :=
        ROUND(PurchaseLine."Unit Cost" / PurchaseLine."Qty. per Unit of Measure",
          Currency."Unit-Amount Rounding Precision");
      EXIT(
        ROUND(
          UnitCostLCY * PurchaseLine."Qty. to Invoice" * PurchaseLine."Qty. per Unit of Measure",
          Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE UpdateAutomaticCostPosting@97(VAR OldAutomaticCostPosting@1002 : Boolean;NewAutomaticCostPosting@1001 : Boolean);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      OldAutomaticCostPosting := InventorySetup."Automatic Cost Posting";
      InventorySetup.VALIDATE("Automatic Cost Posting",NewAutomaticCostPosting);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultPostingDate@82(NewDefaultPostingDate@1002 : Option);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Default Posting Date",NewDefaultPostingDate);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTextInExtendedTextLine@65(VAR ExtendedTextLine@1000 : Record 280;Text@1001 : Code[20]);
    BEGIN
      ExtendedTextLine.VALIDATE(Text,Text);
      ExtendedTextLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorLedgerEntry@68(DocumentNo@1003 : Code[20];DueDate@1002 : Date;PmtDiscountDate@1001 : Date;RemainingPmtDiscPossible@1000 : Decimal);
    VAR
      VendorLedgerEntry@1005 : Record 25;
      VendorLedgerEntries@1004 : TestPage 29;
    BEGIN
      VendorLedgerEntries.OPENEDIT;
      VendorLedgerEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      VendorLedgerEntries.FILTER.SETFILTER("Document Type",FORMAT(VendorLedgerEntry."Document Type"::Invoice));
      VendorLedgerEntries."Due Date".SETVALUE(DueDate);
      VendorLedgerEntries."Pmt. Discount Date".SETVALUE(PmtDiscountDate);
      VendorLedgerEntries."Remaining Pmt. Disc. Possible".SETVALUE(RemainingPmtDiscPossible);
      VendorLedgerEntries.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateDimensionSetID@160(VAR StandardPurchaseLine@1003 : Record 174;DifferentDimension@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DimensionSetID@1002 : Integer;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DifferentDimension);
      DimensionSetID := LibraryDimension.CreateDimSet(StandardPurchaseLine."Dimension Set ID",DifferentDimension,DimensionValue.Code);
      StandardPurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
      StandardPurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultQtyToReceive@269(NewDefaultQtyToReceive@1000 : Option);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      WITH PurchasesPayablesSetup DO BEGIN
        GET;
        VALIDATE("Default Qty. to Receive",NewDefaultQtyToReceive);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchPrepmtAccount@1070000(PurchaseLine@1070000 : Record 39);
    VAR
      GeneralPostingSetup@1070001 : Record 252;
      GLAccount@1070002 : Record 15;
    BEGIN
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLAccount.GET(GeneralPostingSetup."Purch. Prepayments Account");
      GLAccount.VALIDATE("VAT Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignQtyToOneLine@313(VAR ItemChargeAssignmentPurch@1000 : Record 5805;PurchaseLine@1002 : Record 39;QtyToAssign@1001 : Decimal);
    BEGIN
      FindItemChargeAssignmentPurchLine(ItemChargeAssignmentPurch,PurchaseLine);
      REPEAT
        ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",0);
        ItemChargeAssignmentPurch.MODIFY(TRUE);
      UNTIL ItemChargeAssignmentPurch.NEXT = 0;
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",QtyToAssign);
      ItemChargeAssignmentPurch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetPostedInvoiceNosEqualInvoiceNosInPurchSetup@368(VAR PurchasesPayablesSetup@1000 : Record 312);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryERM.CreateNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Invoice Nos.",PurchasesPayablesSetup."Posted Invoice Nos.");
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCalcInvDiscountSetup@270(NewCalcInvDiscount@1001 : Boolean);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      WITH PurchasesPayablesSetup DO BEGIN
        GET;
        VALIDATE("Calc. Inv. Discount",NewCalcInvDiscount);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE GenerateVendorNo@53() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      EXIT(COPYSTR(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("No."),DATABASE::Vendor),
          1,LibraryUtility.GetFieldLength(DATABASE::Vendor,Vendor.FIELDNO("No."))));
    END;

    LOCAL PROCEDURE CreatePostPurchaseOrder@240() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      Qty@1000 : Integer;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      Qty := LibraryRandom.RandInt(10);
      CreatePurchaseLineWithItem(PurchaseLine,PurchaseHeader,Qty,Qty);
      CreatePurchaseLineWithItem(PurchaseLine,PurchaseHeader,Qty,0);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithItem@241(VAR PurchaseLine@1005 : Record 39;PurchaseHeader@1002 : Record 38;Qty@1001 : Decimal;QtyToReceive@1000 : Decimal);
    VAR
      Item@1003 : Record 27;
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),
        LibraryRandom.RandDec(1000,2));
      WITH PurchaseLine DO BEGIN
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type::Item,Item."No.",Qty);
        VALIDATE("Qty. to Receive",QtyToReceive);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCopyPurchaseOrder@242(VAR PurchaseHeader@1000 : Record 38;FromPurchaseOrderNo@1001 : Code[20]);
    BEGIN
      WITH PurchaseHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,"Document Type"::Order,'');
        LibraryVariableStorage.Clear;
        LibraryVariableStorage.Enqueue(DocType::Order);
        LibraryVariableStorage.Enqueue(FromPurchaseOrderNo);
        CopyPurchaseDocument(PurchaseHeader);
        GET("Document Type"::Order,"No.");
      END
    END;

    LOCAL PROCEDURE CopyPurchaseDocument@246(PurchaseHeader@1000 : Record 38);
    VAR
      CopyPurchaseDocument@1001 : Report 492;
    BEGIN
      COMMIT;
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.RUNMODAL;
    END;

    LOCAL PROCEDURE CreatePurchHeaderWithVATBaseDisc@282(VAR PurchaseHeader@1001 : Record 38;DocumentType@1002 : Option);
    VAR
      VATBusinessPostingGroup@1003 : Record 323;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      PurchaseHeader."VAT Bus. Posting Group" := VATBusinessPostingGroup.Code;
      PurchaseHeader."VAT Base Discount %" := LibraryRandom.RandInt(10);
      PurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE CreateVATPostingSetupWithBusPostGroup@283(VAR VATPostingSetup@1001 : Record 325;VATCalculationType@1002 : Option;VATBusinessPostingGroup@1003 : Code[10]);
    VAR
      VATProductPostingGroup@1004 : Record 324;
    BEGIN
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup,VATProductPostingGroup.Code);
      VATPostingSetup."VAT %" := LibraryRandom.RandInt(30);
      VATPostingSetup.VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountNo);
      VATPostingSetup."Reverse Chrg. VAT Acc." := VATPostingSetup."Purchase VAT Account";
      VATPostingSetup."VAT Calculation Type" := VATCalculationType;
      VATPostingSetup."VAT Identifier" := LibraryUtility.GenerateGUID;
      VATPostingSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithVATType@284(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1002 : Record 38;VATType@1003 : Option);
    VAR
      VATPostingSetup@1004 : Record 325;
      GLAccount@1005 : Record 15;
      GLAccountNo@1006 : Code[20];
    BEGIN
      CreateVATPostingSetupWithBusPostGroup(
        VATPostingSetup,
        VATType,
        PurchaseHeader."VAT Bus. Posting Group");

      GLAccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandIntInRange(1000,10000));
      PurchaseLine.MODIFY;
    END;

    LOCAL PROCEDURE VerifyVATAmountLine@287(VAR TempVATAmountLine@1000 : TEMPORARY Record 290;VATIdentifier@1001 : Code[10];VATCalculationType@1002 : Option;VATAmount@1003 : Decimal;AmountInclVAT@1004 : Decimal);
    BEGIN
      TempVATAmountLine.SETRANGE("VAT Identifier",VATIdentifier);
      TempVATAmountLine.SETRANGE("VAT Calculation Type",VATCalculationType);
      TempVATAmountLine.FINDFIRST;
      TempVATAmountLine.TESTFIELD("VAT Amount",VATAmount);
      TempVATAmountLine.TESTFIELD("Amount Including VAT",AmountInclVAT);
    END;

    LOCAL PROCEDURE AllowVATDiscount@285();
    VAR
      GLSetup@1003 : Record 98;
      PurchPayablesSetup@1004 : Record 312;
    BEGIN
      GLSetup.GET;
      GLSetup."Pmt. Disc. Excl. VAT" := TRUE;
      GLSetup.MODIFY;

      PurchPayablesSetup.GET;
      PurchPayablesSetup."Allow VAT Difference" := TRUE;
      PurchPayablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE PostPartialShipment@201(VAR SalesLine@1000 : Record 37;QtyToShip@1001 : Decimal) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      WITH SalesLine DO BEGIN
        FIND;
        VALIDATE("Qty. to Ship",QtyToShip);
        MODIFY(TRUE);
        SalesHeader.GET("Document Type","Document No.");
        EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithItemsAndAssignedItemCharge@107(VAR PurchaseHeader@1000 : Record 38;SuggestType@1006 : Integer);
    VAR
      ItemCharge@1005 : Record 5800;
      PurchaseLine@1002 : Record 39;
      VATPostingSetup@1008 : Record 325;
      i@1001 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);

      FOR i := 1 TO 3 DO
        CreatePurchaseLineWithDirectUnitCost(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,10,10);

      LibraryInventory.CreateItemCharge(ItemCharge);
      CreateVATPostingSetupWithBusPostGroup(
        VATPostingSetup,
        VATPostingSetup."VAT Calculation Type"::"Normal VAT",
        PurchaseHeader."VAT Bus. Posting Group");
      ItemCharge.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      ItemCharge.MODIFY(TRUE);

      CreatePurchaseLineWithDirectUnitCost(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.",1,100);

      LibraryVariableStorage.Enqueue(SuggestType);

      PurchaseLine.ShowItemChargeAssgnt;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithDirectUnitCost@108(VAR PurchaseLine@1004 : Record 39;PurchaseHeader@1003 : Record 38;Type@1002 : Option;No@1001 : Code[20];Quantity@1000 : Decimal;DirectUnitCost@1005 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseOrderItemChargeAssignment@286(VAR PurchaseLine@1003 : Record 39;VAR AmountToAssign@1004 : Decimal;VAR QtyToAssign@1005 : Decimal;SuggestChoice@1001 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreatePurchaseOrderWithItemsAndAssignedItemCharge(PurchaseHeader,SuggestChoice);

      FindPurchaseLineWithType(PurchaseLine,PurchaseHeader."No.",PurchaseHeader."Document Type",PurchaseLine.Type::"Charge (Item)");
      AmountToAssign := PurchaseLine."Direct Unit Cost" * PurchaseLine.Quantity;
      QtyToAssign := PurchaseLine.Quantity;
    END;

    LOCAL PROCEDURE VerifyAmountInValueEntry@204(DocumentNo@1001 : Code[20];BuyFromVendorNo@1006 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Source No.",BuyFromVendorNo);
      ValueEntry.TESTFIELD("Source Type",ValueEntry."Source Type"::Vendor);
      ValueEntry.TESTFIELD("Cost Amount (Actual)",Amount);
      ValueEntry.TESTFIELD("Cost Amount (Actual)",Amount);
      ValueEntry.TESTFIELD("Purchase Amount (Actual)",Amount);
    END;

    LOCAL PROCEDURE VerifyCopyPurchaseLine@70(PostedDocumentNo@1000 : Code[20];DocumentNo@1001 : Code[20]);
    VAR
      PurchInvLine@1002 : Record 123;
      PurchaseLine@1003 : Record 39;
    BEGIN
      FindPurchInvLine(PurchInvLine,PostedDocumentNo);

      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;

      PurchaseLine.TESTFIELD("No.",PurchInvLine."No.");
      PurchaseLine.TESTFIELD(Quantity,PurchInvLine.Quantity);
      PurchaseLine.TESTFIELD("Direct Unit Cost",PurchInvLine."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyDimensionsOnPurchLine@155(DocumentNo@1001 : Code[20];PurchLineType@1002 : Option;No@1003 : Code[20];DimensionValue1@1004 : Code[20];DimensionValue2@1005 : Code[20]);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,PurchLineType);
        SETRANGE("No.",No);
        FINDFIRST;
        TESTFIELD("Shortcut Dimension 1 Code",DimensionValue1);
        TESTFIELD("Shortcut Dimension 2 Code",DimensionValue2);
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionCode@161(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      Assert.IsTrue(DimensionSetEntry.FINDFIRST,
        FORMAT('Could not find dimensions with filters ' + DimensionSetEntry.GETFILTERS));
    END;

    LOCAL PROCEDURE VerifyDetailedVendorLedgerEntry@173(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      DetailedVendorLedgEntry@1003 : Record 380;
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Document Type",DetailedVendorLedgEntry."Document Type"::Invoice);
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,ABS(DetailedVendorLedgEntry.Amount),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,DetailedVendorLedgEntry.FIELDCAPTION(Amount),Amount,DetailedVendorLedgEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,TotalGLAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntryWithVATAmount@104(DocumentNo@1001 : Code[20];PurchaseLine@1006 : Record 39);
    VAR
      GLEntry@1004 : Record 17;
      GeneralPostingSetup@1008 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        PurchaseLine."Line Amount",GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),PurchaseLine."Line Amount",GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        PurchaseLine."VAT %" * PurchaseLine."Line Amount" / 100,GLEntry."VAT Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(
          AmountErr,GLEntry.FIELDCAPTION("VAT Amount"),PurchaseLine."VAT %" * PurchaseLine."Line Amount" / 100,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntryWithJob@101(DocumentNo@1001 : Code[20];JobNo@1000 : Code[20];Amount@1004 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Job No.",JobNo);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@100(PurchaseLine@1004 : Record 39;DocumentNo@1000 : Code[20];JobNo@1001 : Code[20];UnitPrice@1003 : Decimal);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      JobLedgerEntry.TESTFIELD("Unit Price",UnitPrice);
      JobLedgerEntry.TESTFIELD("Total Cost (LCY)",CalculateTotalCostLCY(PurchaseLine));
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryZeroUnitCost@178(DocumentNo@1000 : Code[20];JobNo@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      Assert.AreEqual(
        0,
        JobLedgerEntry."Unit Cost (LCY)",
        STRSUBSTNO(IncorrectFieldValueErr,JobLedgerEntry.FIELDNAME("Unit Cost (LCY)")));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscountAmount@24(PurchaseLine@1005 : Record 39;DocumentNo@1004 : Code[20];InvoiceDiscountAmount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      GeneralPostingSetup@1001 : Record 252;
      GLEntry@1000 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      FindGLEntry(GLEntry,DocumentNo,GeneralPostingSetup."Purch. Inv. Disc. Account");
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,ABS(GLEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),InvoiceDiscountAmount,GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,PurchaseLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Inv. Discount Amount"),InvoiceDiscountAmount,PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyItemChargeAssignment@84(DocumentNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      ItemChargeAssignmentPurch@1002 : Record 5805;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;

      ItemChargeAssignmentPurch.SETRANGE("Document Type",ItemChargeAssignmentPurch."Document Type"::Order);
      ItemChargeAssignmentPurch.SETRANGE("Document No.",DocumentNo);
      ItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. No.",DocumentNo);
      ItemChargeAssignmentPurch.FINDFIRST;
      ItemChargeAssignmentPurch.TESTFIELD("Item No.",PurchaseLine."No.");

      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::"Charge (Item)");
      PurchaseLine.FINDFIRST;
      ItemChargeAssignmentPurch.TESTFIELD("Applies-to Doc. No.",DocumentNo);
      ItemChargeAssignmentPurch.TESTFIELD("Item Charge No.",PurchaseLine."No.");
      ItemChargeAssignmentPurch.TESTFIELD("Qty. to Assign",PurchaseLine.Quantity);
      ItemChargeAssignmentPurch.TESTFIELD("Amount to Assign",PurchaseLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmount@23(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];LineDiscountAmount@1002 : Decimal);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GeneralPostingSetup@1004 : Record 252;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      FindGLEntry(GLEntry,DocumentNo,GeneralPostingSetup."Purch. Line Disc. Account");
      Assert.AreNearlyEqual(
        LineDiscountAmount,ABS(GLEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),LineDiscountAmount,GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        LineDiscountAmount,PurchaseLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Line Discount Amount"),LineDiscountAmount,PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Amount (LCY)"),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),Amount,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntryWithRemainingAmount@125(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)","Remaining Amount","Original Amount");
      VendorLedgerEntry.TESTFIELD(Open,TRUE);
      VendorLedgerEntry.TESTFIELD("Remaining Pmt. Disc. Possible",0);
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Remaining Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Original Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Original Amount"),Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Amount (LCY)"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),Amount,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@15(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      PurchaseAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
      REPEAT
        PurchaseAmount += ValueEntry."Purchase Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,PurchaseAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,ValueEntry.FIELDCAPTION("Purchase Amount (Actual)"),Amount,ValueEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@7(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      VATEntry@1002 : Record 254;
    BEGIN
      GeneralLedgerSetup.GET;
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,ABS(VATEntry.Base + VATEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,VATEntry.FIELDCAPTION(Amount),Amount,VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntryWithBase@98(DocumentNo@1003 : Code[20];PurchaseLine@1005 : Record 39);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      VATEntry.SETRANGE(Type,VATEntry.Type::Purchase);
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.SETFILTER(Base,'>=0');
      VATEntry.FINDFIRST;
      VATEntry.TESTFIELD("VAT Difference",0);
      VATEntry.TESTFIELD(Closed,FALSE);
      VATEntry.TESTFIELD(Base,PurchaseLine."Line Amount");
      // Nearly equal to handle decimal VAT %
      Assert.AreNearlyEqual(
        PurchaseLine."VAT %" * PurchaseLine."Line Amount" / 100,VATEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(
          AmountErr,VATEntry.FIELDCAPTION(Amount),PurchaseLine."VAT %" * PurchaseLine."Line Amount" / 100,VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyNavigateRecords@43(VAR DocumentEntry@1001 : Record 265;TableID@1000 : Integer;NoOfRecords@1002 : Integer);
    BEGIN
      DocumentEntry.SETRANGE("Table ID",TableID);
      DocumentEntry.FINDFIRST;
      DocumentEntry.TESTFIELD("No. of Records",NoOfRecords);
    END;

    LOCAL PROCEDURE VerifyPurchaseCreditMemo@72(DocumentNo@1002 : Code[20];PurchaseLine@1000 : Record 39);
    VAR
      PurchCrMemoHdr@1003 : Record 124;
      PurchCrMemoLine@1004 : Record 125;
    BEGIN
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoHdr.TESTFIELD("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
      PurchCrMemoLine.SETRANGE("Document No.",DocumentNo);
      PurchCrMemoLine.FINDFIRST;
      PurchCrMemoLine.TESTFIELD(Type,PurchaseLine.Type);
      PurchCrMemoLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchCrMemoLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
      PurchCrMemoLine.TESTFIELD(Amount,PurchaseLine."Line Amount");
      PurchCrMemoLine.TESTFIELD("Unit Cost (LCY)",PurchaseLine."Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE VerifyPurchaseDocument@85(DocumentNo@1002 : Code[20];DocumentNo2@1003 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1000 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine2,DocumentNo2,PurchaseLine."Document Type"::Invoice);
      FindPurchaseLine(PurchaseLine,DocumentNo,PurchaseLine."Document Type"::Order);
      REPEAT
        PurchaseLine2.SETRANGE(Type,PurchaseLine.Type);
        PurchaseLine2.SETRANGE("No.",PurchaseLine."No.");
        PurchaseLine2.FINDFIRST;
        PurchaseLine2.TESTFIELD(Quantity,PurchaseLine.Quantity);
        PurchaseLine2.TESTFIELD("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
        PurchaseLine2.TESTFIELD("Line Amount",PurchaseLine."Line Amount");
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceDocument@86(DocumentNo@1000 : Code[20];VendorInvoiceNo@1004 : Code[35];PurchaseLine@1001 : Record 39);
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Vendor Invoice No.",VendorInvoiceNo);
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDSET;
      REPEAT
        PurchaseLine.SETRANGE(Type,PurchInvLine.Type);
        PurchaseLine.SETRANGE("No.",PurchInvLine."No.");
        PurchaseLine.FINDFIRST;
        PurchInvLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
        PurchInvLine.TESTFIELD(Amount,PurchaseLine."Line Amount");
        PurchInvLine.TESTFIELD("Unit Cost (LCY)",PurchaseLine."Unit Cost (LCY)");
      UNTIL PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoice@59(DocumentNo@1000 : Code[20];PurchaseLine@1004 : Record 39);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD(Type,PurchaseLine.Type);
      PurchInvLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchInvLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
      PurchInvLine.TESTFIELD(Amount,PurchaseLine."Line Amount");
      PurchInvLine.TESTFIELD("Unit Cost (LCY)",PurchaseLine."Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@66(StandardPurchaseLine@1000 : Record 174;DocumentNo@1001 : Code[20];ShortcutDimension1Code@1003 : Code[20];ShortcutDimension2Code@1004 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Type,StandardPurchaseLine.Type);
      PurchaseLine.TESTFIELD("No.",StandardPurchaseLine."No.");
      PurchaseLine.TESTFIELD(Quantity,StandardPurchaseLine.Quantity);
      PurchaseLine.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      PurchaseLine.TESTFIELD("Shortcut Dimension 2 Code",ShortcutDimension2Code);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrder@94(PurchaseHeaderNo@1000 : Code[20];VendorNo@1001 : Code[20];Quantity@1004 : Decimal);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Verify 1: Verify Pay to Vendor No in Purchase Header.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseHeaderNo);
      PurchaseHeader.TESTFIELD("Pay-to Vendor No.",VendorNo);

      // Verify 2: Verify Pay to Vendor No in Purchase Line.
      FindPurchaseLine(PurchaseLine,PurchaseHeaderNo,PurchaseHeader."Document Type"::Order);
      PurchaseLine.TESTFIELD("Pay-to Vendor No.",VendorNo);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedEntries@49(DocumentNo@1006 : Code[20]);
    VAR
      VATEntry@1001 : Record 254;
      ValueEntry@1004 : Record 5802;
    BEGIN
      VerifyPostedPaymentNavigation(DocumentNo);

      ValueEntry.SETRANGE("Document No.",DocumentNo);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"Value Entry",ValueEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyPostedPaymentNavigation@52(DocumentNo@1006 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      VendorLedgerEntry@1002 : Record 25;
      DetailedVendorLedgEntry@1003 : Record 380;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"G/L Entry",GLEntry.COUNT);
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"Vendor Ledger Entry",VendorLedgerEntry.COUNT);
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      VerifyNavigateRecords(TempDocumentEntry2,DATABASE::"Detailed Vendor Ledg. Entry",DetailedVendorLedgEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyPurchRcptHeader@159(OrderNo@1001 : Code[20];VendorNo@1002 : Code[20];PostingDate@1003 : Date);
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchRcptHeader.FINDFIRST;
      PurchRcptHeader.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyGetReceiptDocNo@171(DocumentNo@1000 : Code[20];PostedDocNo@1001 : Code[20]);
    VAR
      PurchInvLine@1002 : Record 123;
    BEGIN
      FindPurchInvLine(PurchInvLine,DocumentNo);
      PurchInvLine.TESTFIELD("Receipt No.",PostedDocNo);
      PurchInvLine.TESTFIELD("Receipt Line No.",FindReceiptLineNo(PostedDocNo));
    END;

    LOCAL PROCEDURE VerifyValuesOnVendLedgerEntry@74(DocumentNo@1005 : Code[20];DueDate@1004 : Date;PmtDiscountDate@1003 : Date;RemainingPmtDiscPossible@1002 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.TESTFIELD("Due Date",DueDate);
      VendorLedgerEntry.TESTFIELD("Pmt. Discount Date",PmtDiscountDate);
      VendorLedgerEntry.TESTFIELD("Remaining Pmt. Disc. Possible",RemainingPmtDiscPossible);
    END;

    LOCAL PROCEDURE VerifyVendor@80(Vendor@1000 : Record 23);
    VAR
      Vendor2@1001 : Record 23;
    BEGIN
      Vendor2.GET(Vendor."No.");
      Vendor2.TESTFIELD("Gen. Bus. Posting Group",Vendor."Gen. Bus. Posting Group");
      Vendor2.TESTFIELD("VAT Bus. Posting Group",Vendor."VAT Bus. Posting Group");
      Vendor2.TESTFIELD("Vendor Posting Group",Vendor."Vendor Posting Group");
    END;

    LOCAL PROCEDURE VerifyUndoReceiptLineOnPostedReceipt@119(DocumentNo@1001 : Code[20];QtyToReceive@1003 : Decimal);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",DocumentNo);
      PurchRcptLine.FINDLAST;
      PurchRcptLine.TESTFIELD(Quantity,-1 * QtyToReceive);
    END;

    LOCAL PROCEDURE VerifyUnitCostLCYOnPurchaseReturnLine@165(DocumentNo@1001 : Code[20];UnitCostLCY@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      FindPurchaseLine(PurchaseLine,DocumentNo,PurchaseLine."Document Type"::"Return Order");
      PurchaseLine.TESTFIELD("Unit Cost (LCY)",UnitCostLCY);
    END;

    LOCAL PROCEDURE VerifyQuantitytoReceiveOnPurchaseLine@118(DocumentType@1003 : Option;DocumentNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Qty. to Receive",0);
    END;

    LOCAL PROCEDURE VerifyQuantityOnPurchaseInvoiceLine@117(OrderNo@1000 : Code[20];BuyFromVendorNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      PurchInvHeader.FINDFIRST;
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyDimensionSetIDOnPurchLine@145(PurchaseHeaderNo@1001 : Code[20];PostedDocumentNo@1003 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type","Document Type"::"Return Order");
        SETRANGE("Document No.",PurchaseHeaderNo);
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        TESTFIELD("Dimension Set ID",GetDimensionSetId(PostedDocumentNo));
      END;
    END;

    LOCAL PROCEDURE VerifyDimSetIDOnItemLedgEntry@235(ExpectedDimSetID@1001 : Integer);
    VAR
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1000 : Record 5802;
    BEGIN
      ItemLedgEntry.FINDLAST;
      ValueEntry.SETFILTER("Item Charge No.",'<>%1','');
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
      ValueEntry.FINDFIRST;
      Assert.AreEqual(
        ExpectedDimSetID,ValueEntry."Dimension Set ID",STRSUBSTNO(IncorrectDimSetIDErr,ItemLedgEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyChargeValueEntry@231(DocNo@1000 : ARRAY [2] OF Code[20];ItemChargeNo@1001 : Code[20];ShipmentCount@1005 : Integer);
    VAR
      ItemLedgEntry@1003 : Record 32;
      ValueEntry@1002 : Record 5802;
      i@1004 : Integer;
    BEGIN
      WITH ValueEntry DO
        FOR i := 1 TO ARRAYLEN(DocNo) DO BEGIN
          ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale);
          ItemLedgEntry.SETRANGE("Document No.",DocNo[i]);
          ItemLedgEntry.FINDLAST;
          SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Purchase);
          SETRANGE("Entry Type","Entry Type"::"Direct Cost");
          SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          SETRANGE("Item Charge No.",ItemChargeNo);
          FINDFIRST;
          Assert.AreEqual(ShipmentCount,COUNT,STRSUBSTNO(CountErr,ShipmentCount,TABLECAPTION,GETFILTERS));
          Assert.AreEqual(
            ItemLedgEntry.Quantity,"Valued Quantity",
            STRSUBSTNO(AmountErr,FIELDCAPTION("Valued Quantity"),ItemLedgEntry.Quantity,TABLECAPTION));
        END;
    END;

    LOCAL PROCEDURE VerifyJobPricesOfPurchInvWithRcptPurchOrder@188(PurchLine@1000 : Record 39;InvPurchLine@1002 : Record 39);
    BEGIN
      WITH InvPurchLine DO BEGIN
        Assert.AreEqual(
          PurchLine."Job Unit Price","Job Unit Price",STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Unit Price")));
        Assert.AreEqual(
          PurchLine."Job Total Price","Job Total Price",STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Total Price")));
        Assert.AreEqual(
          PurchLine."Job Line Amount","Job Line Amount",STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Line Amount")));
        Assert.AreEqual(
          PurchLine."Job Line Discount Amount","Job Line Discount Amount",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Line Discount Amount")));
        Assert.AreEqual(
          PurchLine."Job Line Discount %","Job Line Discount %",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Line Discount %")));
        Assert.AreEqual(
          PurchLine."Job Unit Price (LCY)","Job Unit Price (LCY)",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Unit Price (LCY)")));
        Assert.AreEqual(
          PurchLine."Job Total Price (LCY)","Job Total Price (LCY)",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Total Price (LCY)")));
        Assert.AreEqual(
          PurchLine."Job Line Amount (LCY)","Job Line Amount (LCY)",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Line Amount (LCY)")));
        Assert.AreEqual(
          PurchLine."Job Line Disc. Amount (LCY)","Job Line Disc. Amount (LCY)",
          STRSUBSTNO(IncorrectFieldValueErr,FIELDCAPTION("Job Line Disc. Amount (LCY)")));
      END;
    END;

    LOCAL PROCEDURE VerifyPurchHeaderDimensions@197(PurchHeader@1000 : Record 38;DimCode@1001 : Code[20]);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimCode);
      DimensionSetEntry.FINDFIRST;
      Assert.AreEqual(
        DimensionSetEntry."Dimension Set ID",PurchHeader."Dimension Set ID",
        STRSUBSTNO(WrongDimValueErr,PurchHeader."No."));
    END;

    LOCAL PROCEDURE VerifyPurchInvDescriptionLineExists@293(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummyPurchInvLine@1000 : Record 123;
    BEGIN
      WITH DummyPurchInvLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyPurchInvLine);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchRcptDescriptionLineExists@294(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummyPurchRcptLine@1000 : Record 121;
    BEGIN
      WITH DummyPurchRcptLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyPurchRcptLine);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchCrMemoDescriptionLineExists@295(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummyPurchCrMemoLine@1000 : Record 125;
    BEGIN
      WITH DummyPurchCrMemoLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyPurchCrMemoLine);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchRetShptDescriptionLineExists@296(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummyReturnShipmentLine@1000 : Record 6651;
    BEGIN
      WITH DummyReturnShipmentLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyReturnShipmentLine);
      END;
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@180(VAR JobLedgerEntry@1000 : Record 169;DocumentNo@1001 : Code[20];JobNo@1002 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyRemainingAmountLCY@199(VendorNo@1000 : Code[20];RemainingAmtLCY@1003 : Decimal);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      Currency@1005 : Record 4;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Vendor No.",VendorNo);
        FINDFIRST;
        CALCFIELDS("Remaining Amt. (LCY)");
        Currency.GET("Currency Code");
        Assert.AreNearlyEqual(
          -RemainingAmtLCY,"Remaining Amt. (LCY)",Currency."Invoice Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDCAPTION("Remaining Amt. (LCY)"),RemainingAmtLCY,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyJobTotalPrices@232(PurchaseLine@1000 : Record 39;CurrencyCode@1003 : Code[10]);
    VAR
      CurrExchRate@1001 : Record 330;
      ExpectedResult@1002 : Decimal;
    BEGIN
      WITH PurchaseLine DO BEGIN
        ExpectedResult := ROUND(Quantity * "Job Unit Price",LibraryERM.GetCurrencyAmountRoundingPrecision(CurrencyCode));
        Assert.AreEqual(ExpectedResult,"Job Total Price",WrongJobTotalPriceErr);
        ExpectedResult := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              WORKDATE,COPYSTR("Job Currency Code",1,10),
              "Job Total Price","Job Currency Factor"),
            LibraryERM.GetCurrencyAmountRoundingPrecision(CurrencyCode));
        Assert.AreEqual(ExpectedResult,"Job Total Price (LCY)",WrongJobTotalPriceLCYErr);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseLineCount@288(PurchaseHeader@1000 : Record 38;ExpectedCount@1001 : Integer);
    VAR
      DummyPurchaseLine@1002 : Record 39;
    BEGIN
      DummyPurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      DummyPurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      Assert.RecordCount(DummyPurchaseLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineDescription@301(PurchaseLine@1000 : Record 39;ExpectedType@1002 : Option;ExpectedNo@1001 : Code[20];ExpectedDescription@1003 : Text);
    BEGIN
      WITH PurchaseLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    LOCAL PROCEDURE VerifyPurchExtLineExists@317(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
      PurchaseLine.SETRANGE("Attached to Line No.",PurchaseLine."Line No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::" ");
      Assert.RecordIsNotEmpty(PurchaseLine);
    END;

    [ModalPageHandler]
    PROCEDURE StandardVendorPurchCodesHndlr@83(VAR StandardVendorPurchaseCodes@1000 : TestPage 178);
    BEGIN
      StandardVendorPurchaseCodes.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE NavigatePageHandler@40(VAR Navigate@1000 : Page 344);
    BEGIN
      Navigate.SetDoc(PostingDate2,DocumentNo2);
      Navigate.UpdateNavigateForm(FALSE);
      Navigate.FindRecordsOnOpen;

      TempDocumentEntry2.DELETEALL;
      Navigate.ReturnDocumentEntry(TempDocumentEntry2);
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentHandler@93(VAR ItemChargeAssignmentPurch@1000 : TestPage 5805);
    BEGIN
      ItemChargeAssignmentPurch.SuggestItemChargeAssignment.INVOKE;
      ItemChargeAssignmentPurch.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SuggstItemChargeAssgntVldHndlr@92(VAR ItemChargeAssignmentPurch@1000 : TestPage 5805);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      ItemChargeAssignmentPurch."Applies-to Doc. Type".ASSERTEQUALS(PurchaseLine."Document Type"::Order);
      ItemChargeAssignmentPurch."Applies-to Doc. No.".ASSERTEQUALS(DocumentNo2);
      ItemChargeAssignmentPurch."Qty. to Assign".ASSERTEQUALS(0);
      ItemChargeAssignmentPurch."Amount to Assign".ASSERTEQUALS(0);
    END;

    [StrMenuHandler]
    PROCEDURE ItemChargeAssignMenuEquallyHandler@91(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // This is for Equally only.
    END;

    [StrMenuHandler]
    PROCEDURE ItemChargeAssignMenuHandler@352(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := LibraryVariableStorage.DequeueInteger;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeSetupHandler@291(VAR ItemChargeAssignmentPurch@1000 : TestPage 5805);
    VAR
      DequedVar@1002 : Variant;
      IsSetup@1003 : Boolean;
      AmountToAssign@1004 : Decimal;
      QuantityToAssign@1005 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequedVar);
      IsSetup := DequedVar;

      IF IsSetup THEN BEGIN
        LibraryVariableStorage.Dequeue(DequedVar);
        QuantityToAssign := DequedVar;
        ItemChargeAssignmentPurch."Qty. to Assign".SETVALUE(QuantityToAssign);
      END ELSE BEGIN
        LibraryVariableStorage.Dequeue(DequedVar);
        AmountToAssign := DequedVar;
        ItemChargeAssignmentPurch."Amount to Assign".ASSERTEQUALS(AmountToAssign);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@63(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@272(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinesPageHandler@170(VAR GetReceiptLines@1000 : TestPage 5709);
    BEGIN
      GetReceiptLines.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE EditAnalysisReportPurchaseRequestPageHandler@114(VAR PurchaseAnalysisReport@1000 : TestPage 7118);
    VAR
      PurchasePeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      PurchaseAnalysisReport.PeriodType.SETVALUE(PurchasePeriodType::Year);
      PurchaseAnalysisReport.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseAnalysisMatrixRequestPageHandler@110(VAR PurchaseAnalysisMatrix@1000 : TestPage 9205);
    VAR
      CostAmountExpected@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CostAmountExpected);
      PurchaseAnalysisMatrix.Field1.ASSERTEQUALS(CostAmountExpected);
      Assert.IsTrue(PurchaseAnalysisMatrix.Field1.VISIBLE,STRSUBSTNO(ColumnWrongVisibilityErr,1));
      Assert.AreEqual(LibraryVariableStorage.DequeueText,PurchaseAnalysisMatrix.Field1.CAPTION,'');
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesPageHandler@133(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        OptionStringRef::"Posted Receipts":
          PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Receipts"));
        OptionStringRef::"Posted Invoices":
          PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Invoices"));
        OptionStringRef::"Posted Return Shipments":
          PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Return Shipments"));
        OptionStringRef::"Posted Cr. Memos":
          PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Cr. Memos"));
      END;
      PostedPurchaseDocumentLines.PostedRcpts.FILTER.SETFILTER("Document No.",LibraryVariableStorage.DequeueText);
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseAnalysisMatrixColumnsRPH@150(VAR MatrixForm@1000 : TestPage 9205);
    VAR
      CountVar@1002 : Variant;
      FieldVisibilityArray@1001 : ARRAY [32] OF Boolean;
      Count@1003 : Integer;
      Index@1004 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(CountVar);
      Count := CountVar;

      FieldVisibilityArray[1] := MatrixForm.Field1.VISIBLE;
      FieldVisibilityArray[2] := MatrixForm.Field2.VISIBLE;
      FieldVisibilityArray[3] := MatrixForm.Field3.VISIBLE;
      FieldVisibilityArray[4] := MatrixForm.Field4.VISIBLE;
      FieldVisibilityArray[5] := MatrixForm.Field5.VISIBLE;
      FieldVisibilityArray[6] := MatrixForm.Field6.VISIBLE;
      FieldVisibilityArray[7] := MatrixForm.Field7.VISIBLE;
      FieldVisibilityArray[8] := MatrixForm.Field8.VISIBLE;
      FieldVisibilityArray[9] := MatrixForm.Field9.VISIBLE;
      FieldVisibilityArray[10] := MatrixForm.Field10.VISIBLE;
      FieldVisibilityArray[11] := MatrixForm.Field11.VISIBLE;
      FieldVisibilityArray[12] := MatrixForm.Field12.VISIBLE;
      FieldVisibilityArray[13] := MatrixForm.Field13.VISIBLE;
      FieldVisibilityArray[14] := MatrixForm.Field14.VISIBLE;
      FieldVisibilityArray[15] := MatrixForm.Field15.VISIBLE;
      FieldVisibilityArray[16] := MatrixForm.Field16.VISIBLE;
      FieldVisibilityArray[17] := MatrixForm.Field17.VISIBLE;
      FieldVisibilityArray[18] := MatrixForm.Field18.VISIBLE;
      FieldVisibilityArray[19] := MatrixForm.Field19.VISIBLE;
      FieldVisibilityArray[20] := MatrixForm.Field20.VISIBLE;
      FieldVisibilityArray[21] := MatrixForm.Field21.VISIBLE;
      FieldVisibilityArray[22] := MatrixForm.Field22.VISIBLE;
      FieldVisibilityArray[23] := MatrixForm.Field23.VISIBLE;
      FieldVisibilityArray[24] := MatrixForm.Field24.VISIBLE;
      FieldVisibilityArray[25] := MatrixForm.Field25.VISIBLE;
      FieldVisibilityArray[26] := MatrixForm.Field26.VISIBLE;
      FieldVisibilityArray[27] := MatrixForm.Field27.VISIBLE;
      FieldVisibilityArray[28] := MatrixForm.Field28.VISIBLE;
      FieldVisibilityArray[29] := MatrixForm.Field29.VISIBLE;
      FieldVisibilityArray[30] := MatrixForm.Field30.VISIBLE;
      FieldVisibilityArray[31] := MatrixForm.Field31.VISIBLE;
      FieldVisibilityArray[32] := MatrixForm.Field32.VISIBLE;

      FOR Index := 1 TO Count DO
        Assert.AreEqual(TRUE,FieldVisibilityArray[Index],STRSUBSTNO(ColumnWrongVisibilityErr,Index));
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseCodePageHandler@158(VAR StandardVendorPurchaseCodes@1000 : Page 178;VAR Response@1005 : Action);
    VAR
      StandardVendorPurchaseCode@1001 : Record 175;
      VendorNo@1002 : Variant;
    BEGIN
      // Modal Page Handler.
      LibraryVariableStorage.Dequeue(VendorNo);
      StandardVendorPurchaseCode.SETRANGE("Vendor No.",VendorNo);
      StandardVendorPurchaseCode.FINDFIRST;

      StandardVendorPurchaseCodes.SETRECORD(StandardVendorPurchaseCode);
      Response := ACTION::LookupOK;
    END;

    [RequestPageHandler]
    PROCEDURE CopyPurchaseDocumentHandler@244(VAR CopyPurchaseDocument@1000 : TestRequestPage 492);
    VAR
      DocumentType@1001 : Variant;
      No@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentType);
      LibraryVariableStorage.Dequeue(No);
      DocType := DocumentType;
      CopyPurchaseDocument.DocumentType.SETVALUE(DocType);
      CopyPurchaseDocument.DocumentNo.SETVALUE(No);
      CopyPurchaseDocument.IncludeHeader_Options.SETVALUE(TRUE);
      CopyPurchaseDocument.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ExactMessageHandler@302(Message@1000 : Text);
    BEGIN
      Assert.ExpectedMessage(LibraryVariableStorage.DequeueText,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Order] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      CH: Unable to Execute (TFS ID: 51199)

      Check the functionalities of Purchase Order.
       1. Test if the system allows to create a New Purchase Order for Vendor.
       2. Test if the system calculates applicable VAT on Purchase Order and verify VAT Amount with VAT Amount Line.
       3. Test if the system generates Purchase Order Report and verify new external file created.
       4. Test if Purchase Order allowing to Post as Receive option only and generate Posted Purchase Receipt Entry.
       5. Test if Purchase Order allowing to Post as Receive and Invoice and verify Posted G/L Entry, VAT Entry, Value Entry
          and Vendor Ledger Entry.
       6. Test if the system generates Posted Purchase Invoice Report and verify new external file created.
       7. Test if the system allows creating a Purchase Order with a Location having Warehouse Receipt checked, system
          allow to post the Order created and verify Posted Receipt Entry.
       8. Test if the system calculates Line Discount on Purchase Order and after Post, creates G/L entry for Discount.
       9. Test if the system calculates Invoice Discount on Purchase Order and after Post, creates G/L entry for Invoice Discount.
      10. Test if the system allows creating Purchase Order with Foreign Currency and allow to Post the Purchase Order
          with Foreign Currency.
      11. Test if posted && invoiced purchase orders are deleted when executing report "Delete Invoiced Purch. Orders"
      12. Test if posted && not invoiced purchase orders are not deleted when executing report "Delete Invoiced Purch. Orders"
      13. Test if not posted (and invoiced && !invoiced) purchase orders are not deleted
          when executing report "Delete Invoiced Purch. Orders"
      14. Test Navigate functionality for Posted Purchase Invoice.
      15. Test Navigate functionality for Posted Purchase Shipment.
      16. Test Navigate functionality for Posted Purchase Credit Memo.
      17. Test Navigate functionality for Posted Purchase Return Shipment.
      18. Test Navigate functionality for Financial Management with General Lines.
      19. Check GL Entry after Posting Partial Purchase Order.
      20. Check Purchase Order Posting Error Message when amount is Negative.
      21. Check Purchase Line Archive for Archive Version after Posting Partial Purchase Order.
      22. Check Extended Text in Purchase Order with Extended Text Line.
      23. Verify Remaining Payment Discount Possible for Vendor.
      24. Create Purchase Invoice, Post and Verify Purchase Invoice Header and Line.
      25. Create Purchase Credit Memo, Post and Verify Purchase Credit Memo Header and Line.
      26. To create a new Vendor with Page and verify it.
      27. Check Purchase Code Line are copied correctly in Purchase Line.
      28. Verify Posted Purchase Line of one document is copied correctly in Purchase Line of second document.
      29. Create Purchase Order and Validate Item Charge Assignment Purchase.
      30. Create Purchase Order and Suggest Item Charge Assignment then Validate Item Charge Assignment Purch and Post the Purchase order.
      31. Create Purchase Invoice, and Get Receipt Lines, Verify that lines get generated on Purchase Invoice and Post the Invoice.
      32. Create Purchase Invoice with Item Charge Assignment & Validate the Vendor Invoice No in Posted Purchase Invoice.
      33. Check GL Entry after posting a Purchase Order with Foreign Currency and Posting Date blank.
      34. Create a new Purchase Order with Invoice Discount, Post and Verify the posted values.
      35. Test to validate Program populates information on Individual tab on Purchase Order according to Pay-to Vendor No.
      36. Create Purchase Order with Job and verify Job Unit Price is updated when changing UOM on Purchase Line.
      37. Create Purchase Order with Job and change UOM on Purchase Line and verify GL Entry and Job Ledger Entry.
      38. Verify that Qty to receive in Purchase Line is blank after doing Undo receipt when Default Qty To Receive field is balnk in Purchases & Payables setup.
      39. Check the Quantity on Posted Purchase Invoice Line when Purchase Order Posted using Purchase Order Page.
      40. Check Cost Amount(Expected) on Purchase Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      41. Check Sale Amount on Purchase Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      42. Check Cost Amount(Expected) on Purchase Analysis Matrix when Item Ledger Entry Type Filter Sale.
      43. Check Sales Amount on Purchase Analysis Matrix when Item Ledger Entry Type Filter Sale.
      44. Verify Program generates the Posted Purchase Receipt on same posting date of Warehouse Receipt Header posting date.
      45. Verify that bin code exist in purchase Line when re-enter item removes the default bin.
      46. Verify the Dimensionin Purchase Return Order Line when when we use the "Get posted document lines to reverse" the Functionality.
      47. Verify that no Overflow error on purchase line with more ranges.
      48. Check Purchase Code Line with Dimensions are copied correctly in Purchase Line.
      49. Verify the Status Open error when one more purchase line added on released purchase order.
      50. PurchaseAnalysisReportMultipleColumns
      51. Verify the correct Receipt No. and Receipt Line No. on Purch. Inv. Line Table.
      52. Verify that correct dimensions are populated in purchase line when using default dimensions for G/L and Item using standard purchase code.
      53. Verify the Unit Cost LCY on purchase return line when get posted document lines to reverse is doing with currency exchange rate.
      54. Verify no error will appear while posting a Purchase Order with discount on Currency rounding.
      55. Test to verify fields Invoice and Receive in Purchase Order after copied from partial posting Purchase Order.

      This test code unit replaces Manual Test Suite (TS0138).

      TS_TFS ID=21546
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      DeletePostedInvoicedPurchOrder                         122403 and 136784: TC00676
      DeletePostedNotInvoicedPuOrder                         122404 and 136785: TC00677
      DeleteNotPostedPurchaseOrder                           122405 and 136786: TC00678
      PurchaseOrderCreation                                  122406 and 136787: TC00679
      VATAmountOnPurhcaseOrder                               122407 and 136788: TC00680
      PurchaseOrderReport                                    122408 and 136789: TC00681
      PurchaseOrderAsReceive                                 122409 and 136790: TC00682
      PurchaseOrderAsInvoice                                 122410 and 136791: TC00683
      PostedPurchaseInvoiceReport                            122411 and 136792: TC00684
      PurchaseOrderForWhseLocation                           122412 and 136793: TC00685
      LineDiscountOnPurhcaseOrder                            122413 and 136794: TC00686
      InvoiceDiscountOnPurchaseOrder                         122414 and 136795: TC00687
      PurchaseOrderWithFCY                                   122390 and 136771: TC00688
                                                             122391 and 136772: TC00689
                                                             122392 and 136773: TC00690
                                                             122415 and 136796: TC00691
                                                             122416 and 136797: TC00692
                                                             122417 and 136798: TC00693
                                                             122418 and 136799: TC00694
                                                             128998: TCRP499
      Cover Test Case for WI - 242291
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PostedInvoiceNavigate                                              128927,128928
      PostedShipmentNavigate                                                    128918
      PostedCreditMemoNavigate                                                  128920
      PostedReturnShipmentNavigate                                              128919
      PostedPaymentNavigate                                                     128921

      Cover Test Case for WI - 254826
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PostPartialPurchaseOrder,PurchaseOrderNegativeErrorMsg                     237609

      Cover Test Case for WI - 254825
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      ArchieveVersionPurchaseOrder                                               251123

      TS_TFS ID=253881
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      ExtendedTextInPurchaseOrder                                                130444

      TS_TFS ID=257791
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      VendorRemainingPaymentDiscount                                             130949

      TS_TFS ID=257725
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      VendorCreationByPage                                                       130950

      TS_TFS ID=259818
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PurchaseInvoice                                                            129649
      PurchaseCreditMemo                                                         129651

      Workitem ID: 257758
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PurchaseOrderStandardPurchCode                                            140559
      PurchaseOrderCopyStandardCode                                             140559

      TS_TFS ID=251028
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      ItemChargeAssignmentPurchOrder                                             141365
      ValidateItemChargeAssignmentPostPurchaseOrder                              141365
      GetReceiptLinesOnPurchaseInvoice                                           141365
      VendorInvoiceNoPostedPurchaseInvoice                                       141365

      TS_TFS ID=262875
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PurchaseOrderWithPostingDateBlank                                          238442

      TS_TFS ID=257745
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PostPurchaseOrderWithInvoiceDiscount                                       130959

      TS_TFS ID=  293872
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      PurchaseOrderWithDifferentPayToVandorNo                                     279763

      BUGID 295333
      ---------------------------------------------------------------------------------------------------
      Test Function Name                                                                      Test TFS ID
      ---------------------------------------------------------------------------------------------------
      PurchaseOrderWithChangeUOM,PurchaseOrderWithChangeUOMAndVerifyGLAndJobLedger            299207

      TS_TFS ID=  303010
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      UndoPurchaseReceiptWithDefaultQtyBlank                                     301960

      BUGID 305527
      --------------------------------------------------------
      Test Function Name                         Test TFS ID
      --------------------------------------------------------
      PostedPurchaseInvoiceWithPartialQuantity      304240

      Covers Test cases for Bug Id - 325373
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      PurchaseAnalysisReportWithItemLedgerEntryTypePurchase,
      PurchaseAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeSale,
      PurchaseAnalysisReportWithItemLedgerEntryTypeSaleAndValueTypeCost,
      PurchaseAnalysisReportWithItemLedgerEntryTypeSaleAndValueTypeSales            325374

      Covers Test cases for Bug Id - 295067
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      CheckPostingDateOnPurchRcptHeader

      BUG ID-332644
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      VerifyDefaultBinInPurchLine

      BUG ID-27479
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      PurchaseOrderAsReceiveWithDimension

      BUG ID-116417
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      CheckNoOverFlowErrorExistOnPurchaseLine

      BUG ID-51910
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      PurchaseLineWithStandardPurchCodeDimesion

      BUG ID 54446
      -------------------------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------------------------
      CheckStatusOpenErrorWithReleasedPurchaseOrder

      PurchaseAnalysisReportMultipleColumns                         55055

      Cover Test case for BUG ID-51018
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      VerifyReceiptNoAndReceiptLineNo

      BUG ID-58802
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      StandardPurchLineWithDefaultDimension

      BUG ID 68194
      -------------------------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------------------------
      CheckUnitCostLCYWithExchangeRate

      BUG ID 72964
      -------------------------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------------------------
      PurchaseOrderWithFCYDiscount

      CombinedDimOnPurchInvoiceWithItemChargeAssignedOnReceipt                     74430
      GetReceiptLinesFromPurchOrderWithJobPrices                                   355106

      HFR ID 360141
      ---------------------------------------------------------------------------------------------
      Test Function Name                                                                  TFS ID
      ---------------------------------------------------------------------------------------------
      CopyPurchaseOrderFromPartialPostingPurchaseOrder                                    360141
      GetReceiptLinesOnItemChargeAssignedOnMultipleShpts                           74874
      GetReceiptLinesFromPurchOrderWithJobPrices                                   97291

      BUG ID 378567
      ---------------------------------------------------------------------------------------------
      Test Function Name                                                                  TFS ID
      ---------------------------------------------------------------------------------------------
      GenBusinessPostingGroupInLinesUpdated,                                              378255
      GenBusinessPostingGroupInLinesNotUpdated
    }
    END.
  }
}

