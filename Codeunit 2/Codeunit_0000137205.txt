OBJECT Codeunit 137205 SCM Move Neg. Purch. Lines
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibraryPurchase@1001 : Codeunit 130512;
      LibraryRandom@1002 : Codeunit 130440;
      Assert@1003 : Codeunit 130000;
      isInitialized@1004 : Boolean;
      FromDocType@1009 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo';
      ToDocType@1006 : ',,Order,Invoice,Return Order,Credit Memo';
      PurchaseHeaderNo@1011 : Code[20];
      ErrorNoNegLines@1005 : TextConst 'ENU=There are no negative purchase lines to move.';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(PurchaseHeaderNo);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE MoveNegativePurchLines@13(FromDocType@1002 : Option;ToDocType@1003 : Option;FromDocTypeRep@1004 : Option;ToDocTypeRep@1005 : Option;InitialSign@1006 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
    BEGIN
      // Setup: Create a Purchase Return Order with negative lines.
      Initialize;
      CreatePurchDocWithMixedLines(PurchaseHeader,TempPurchaseLine,FromDocType,InitialSign);

      // Exercise: Run Move Negative Lines to generate a Purchase Order.
      MoveNegPurchaseLines(PurchaseHeader,FromDocTypeRep,ToDocTypeRep);

      // Verify: Examine the moved lines.
      VerifyNegPurchaseLines(TempPurchaseLine,ToDocType,PurchaseHeaderNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PurchOrderPageHandler)]
    PROCEDURE PurchRetOrderToOrder@2();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      MoveNegativePurchLines(PurchaseHeader."Document Type"::"Return Order",PurchaseHeader."Document Type"::Order,
        FromDocType::"Return Order",ToDocType::Order,-1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PurchInvoicePageHandler)]
    PROCEDURE PurchCrMemoToInvoice@3();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      MoveNegativePurchLines(PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Document Type"::Invoice,
        FromDocType::"Credit Memo",ToDocType::Invoice,-1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PurchCrMemoPageHandler)]
    PROCEDURE PurchInvoiceToCrMemo@7();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      MoveNegativePurchLines(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Document Type"::"Credit Memo",
        FromDocType::Invoice,ToDocType::"Credit Memo",-1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PurchRetOrderPageHandler)]
    PROCEDURE PurchOrderToRetOrder@5();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      MoveNegativePurchLines(PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::"Return Order",
        FromDocType::Order,ToDocType::"Return Order",-1);
    END;

    [Test]
    PROCEDURE NegTestPurchOrderToRetOrder@18();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      ASSERTERROR
        MoveNegativePurchLines(PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::"Return Order",
          FromDocType::Order,ToDocType::"Return Order",1);

      // Verify: Error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorNoNegLines) > 0,'Actual:' + GETLASTERRORTEXT + ';Expected:' + ErrorNoNegLines);
      CLEARLASTERROR;
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchDocWithMixedLines@1(VAR PurchaseHeader@1000 : Record 38;VAR TempPurchaseLine@1002 : TEMPORARY Record 39;DocumentType@1003 : Option;InitialSign@1006 : Integer);
    VAR
      PurchaseLine@1004 : Record 39;
      Item@1005 : Record 27;
      Count@1007 : Integer;
      i@1001 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      TempPurchaseLine.DELETEALL;

      // Create a Purchase document with mixed lines: alternating positive and negative quantities.
      Count := 5 + LibraryRandom.RandInt(8);
      FOR i := 1 TO Count DO BEGIN
        LibraryInventory.CreateItem(Item);
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",
          POWER(InitialSign,i) * LibraryRandom.RandDec(10,2));
        IF PurchaseLine.Quantity < 0 THEN BEGIN
          TempPurchaseLine := PurchaseLine;
          TempPurchaseLine.INSERT;
        END;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE MoveNegPurchaseLines@9(PurchaseHeader@1001 : Record 38;FromDocType@1004 : Option;ToDocType@1002 : Option);
    VAR
      MoveNegPurchaseLines@1000 : Report 6698;
    BEGIN
      CLEAR(MoveNegPurchaseLines);
      MoveNegPurchaseLines.SetPurchHeader(PurchaseHeader);
      MoveNegPurchaseLines.InitializeRequest(FromDocType,ToDocType,ToDocType);
      MoveNegPurchaseLines.USEREQUESTPAGE(FALSE);
      MoveNegPurchaseLines.RUNMODAL;
      MoveNegPurchaseLines.ShowDocument;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNegPurchaseLines@12(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;NewDocumentType@1004 : Option;NewPurchaseHeaderNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Get the newly created purchase header and lines.
      PurchaseHeader.GET(NewDocumentType,NewPurchaseHeaderNo);
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
      TempPurchaseLine.FINDSET;

      // Examine the migrated lines.
      REPEAT
        TempPurchaseLine.SETRANGE("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
        TempPurchaseLine.SETRANGE(Type,PurchaseLine.Type);
        TempPurchaseLine.SETRANGE("No.",PurchaseLine."No.");
        TempPurchaseLine.SETRANGE(Description,PurchaseLine.Description);
        TempPurchaseLine.SETRANGE("Location Code",PurchaseLine."Location Code");
        TempPurchaseLine.SETRANGE(Quantity,-PurchaseLine.Quantity);
        TempPurchaseLine.SETRANGE("Unit of Measure",PurchaseLine."Unit of Measure");
        Assert.AreEqual(1,TempPurchaseLine.COUNT,'Too many migrated negative lines!');
        TempPurchaseLine.FINDFIRST;
        TempPurchaseLine.DELETE(TRUE);
      UNTIL PurchaseLine.NEXT = 0;

      // Check there are no un-migrated lines.
      TempPurchaseLine.RESET;
      Assert.AreEqual(0,TempPurchaseLine.COUNT,'Remaining un-migrated lines.');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE PurchOrderPageHandler@8(VAR PurchaseOrder@1000 : Page 50);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      PurchaseOrder.GETRECORD(PurchaseHeader);
      PurchaseHeaderNo := PurchaseHeader."No.";
    END;

    [PageHandler]
    PROCEDURE PurchRetOrderPageHandler@10(VAR PurchaseReturnOrder@1000 : Page 6640);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      PurchaseReturnOrder.GETRECORD(PurchaseHeader);
      PurchaseHeaderNo := PurchaseHeader."No.";
    END;

    [PageHandler]
    PROCEDURE PurchInvoicePageHandler@15(VAR PurchaseInvoice@1000 : Page 51);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      PurchaseInvoice.GETRECORD(PurchaseHeader);
      PurchaseHeaderNo := PurchaseHeader."No.";
    END;

    [PageHandler]
    PROCEDURE PurchCrMemoPageHandler@16(VAR PurchaseCreditMemo@1000 : Page 52);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      PurchaseCreditMemo.GETRECORD(PurchaseHeader);
      PurchaseHeaderNo := PurchaseHeader."No.";
    END;

    BEGIN
    {
      // [FEATURE] [Move Negative Purchase Lines] [Purchase]
      Test case: 129111 - [RTC] Batch Job:= Move Negative Purchase Lines

      Test Move Negative Purchase Lines report for various types of Purchase documents:
      - Purchase Order
      - Purchase Return Order
      - Purchase Credit Memo
      - Purchase Invoice
    }
    END.
  }
}

