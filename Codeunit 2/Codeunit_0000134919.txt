OBJECT Codeunit 134919 ERM Batch Job II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      GLAccountNo@1004 : Code[20];
      Amount@1005 : Decimal;
      BudgetNameErrorMessage@1007 : TextConst 'ENU=You must specify a budget name to copy from.';
      DateIntervalErrorMessage@1009 : TextConst 'ENU=You must specify a date interval to copy from.';
      CopyToErrorMessage@1006 : TextConst 'ENU=You must specify a budget name to copy to.';
      BudgetName@1008 : Code[10];
      BudgetError@1010 : TextConst '@@@="%1=G/L Budget Name";ENU=G/L Budget: %1 must not exist.';

    [Test]
    PROCEDURE CopyFromGLBudgetError@79();
    VAR
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check Error Message when Copy From Budget Field is not filled up while running Copy GL Budget Batch Job.

      // Setup.
      Initialize;

      // Exercise: Try to Run Copy GL Budget Batch job without Copy From GL Budget Name, GL Account No, Date Interval, Copy To GL Budget Name, Blank Rounding Method Code.
      ASSERTERROR RunCopyGLBudget(FromSource::"G/L Budget Entry",'','','','',1,'');  // Take 1 as Adjustment Factor.

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(BudgetNameErrorMessage));
    END;

    [Test]
    PROCEDURE CopyFromDateIntervalError@4();
    VAR
      FromSource@1002 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check Error Message when Copy From Date Field is not filled up while running Copy GL Budget Batch Job.

      // Setup.
      Initialize;

      // Exercise: Try to Run Copy GL Budget Batch job without GL Account No, Date Interval, Copy To GL Budget Name and Blank Rounding Method Code, take 1 as Adjustment Factor.
      ASSERTERROR RunCopyGLBudget(FromSource::"G/L Entry",'','','','',1,'');

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(DateIntervalErrorMessage));
    END;

    [Test]
    PROCEDURE CopyToGLBudgetError@12();
    VAR
      FromSource@1002 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check Error Message when Copy to Budget Field is not filled up while running Copy GL Budget Batch Job.

      // Setup.
      Initialize;

      // Exercise: Try to Run Copy GL Budget Batch job without Copy From GL Budget Name, GL Account No, Copy To GL Budget Name and Blank Rounding Method Code.
      ASSERTERROR RunCopyGLBudget(FromSource::"G/L Entry",'','',FORMAT(WORKDATE),'',1,'');  // Take 1 as Adjustment Factor.

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(CopyToErrorMessage));
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler)]
    PROCEDURE GLBudgetCreation@2();
    VAR
      GLBudgetName@1001 : Record 95;
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
      NewBudgetName@1000 : Code[10];
    BEGIN
      // Check that new GL Budget created after confirming message asked to create GL Budget while running Copy GL Budget.

      // Setup: Take a Random Name for Copy To GL Budget Name.
      Initialize;
      NewBudgetName := FORMAT(LibraryRandom.RandInt(100));

      // Exercise: Run Copy GL Budget Using blank for Copy From GL Budget, Rounding Method and 1 for Adjustment Factor.
      RunCopyGLBudget(FromSource::"G/L Entry",'',GLAccountNo,FORMAT(WORKDATE),NewBudgetName,1,'');

      // Verify: Verify that new GL Budget Exists.
      GLBudgetName.GET(NewBudgetName);

      // Tear Down: Delete the GL Budget created earlier.
      GLBudgetName.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(NoConfirmHandler)]
    PROCEDURE GLBudgetCreationDeclined@33();
    VAR
      GLBudgetName@1002 : Record 95;
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
      NewBudgetName@1000 : Code[10];
    BEGIN
      // Check that GL Budget does not exist when creation confirmation message for GL Budget declined.

      // Setup: Create and Post General Journal Line for a GL Account with random Amount.
      Initialize;
      NewBudgetName := FORMAT(LibraryRandom.RandInt(100));  // Taking a Random Name for New Budget to be created.
      GLBudgetName.FINDFIRST;

      // Exercise: Run Copy GL Budget using blank for Rounding Method, GL Account No. and 1 for Adjustment Factor.
      RunCopyGLBudget(FromSource::"G/L Budget Entry",GLBudgetName.Name,'',FORMAT(WORKDATE),NewBudgetName,1,'');

      // Verify: Verify that new GL Budget must not exists after declining to create a new Budget.
      GLBudgetName.SETRANGE(Name,NewBudgetName);
      Assert.IsFalse(GLBudgetName.FINDFIRST,STRSUBSTNO(BudgetError,NewBudgetName));
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE CopyGLBudgetSourceGLEntry@53();
    VAR
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check correct Amount copied to new GL Budget when Copy From Source is GL Entry.

      // Setup: Create and Post General Journal Line for a GL Account with random Amount.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      CreateAndPostGenJournalLine(GLAccountNo,Amount);
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Entry",'',1,'');  // Passing blanks for Copy From GL Budget Name and Rounding Method, 1 for Adjustment Factor.
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE CopyGLBudgetSourceGLBudgetEntry@1();
    VAR
      GLBudgetName@1001 : Record 95;
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check correct Amount copied on new GL Budget when Copy From Source is GL Budget Entry.

      // Setup: Create GL Budget Entry for a GL Account with random Amount.
      Initialize;
      GLBudgetName.FINDFIRST;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to  global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      CreateGLBudgetEntry(GLBudgetName.Name,GLAccountNo,Amount);
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Budget Entry",GLBudgetName.Name,1,'');  // Passing blank for Rounding Method, 1 for Adjustment Factor.
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE GLEntryWithRoundingMethod@19();
    VAR
      FromSource@1004 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check correct Amount copied on new GL Budget while Copy From Source is GL Entry and a Rounding Method used.

      // Setup: Create and Post General Journal Line with random Amount.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      CreateAndPostGenJournalLine(GLAccountNo,Amount);
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Entry",'',1,CalculateAmountUsingRoundingMethod(Amount));  // Passing blank for Copy From GL Budget, 1 for Adjustment Factor.
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE GLBudgetEntryWithRoundingMethod@5();
    VAR
      GLBudgetName@1001 : Record 95;
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check correct Amount copied on new GL Budget while Copy From Source is GL Budget Entry and a Rounding Method Used.

      // Setup: Create GL Budget Entry for a GL Account with random Amount.
      Initialize;
      GLBudgetName.FINDFIRST;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      CreateGLBudgetEntry(GLBudgetName.Name,GLAccountNo,Amount);
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Budget Entry",GLBudgetName.Name,1,CalculateAmountUsingRoundingMethod(Amount));  // Passing 1 for Adjustment Factor.
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE GLEntryWithAdjustmentFactor@25();
    VAR
      FromSource@1004 : 'G/L Entry,G/L Budget Entry';
      AdjustmentFactor@1000 : Decimal;
    BEGIN
      // Check correct Amount copied on new GL Budget while Copy From Source is GL Entry and random Adjustment Factor used.

      // Setup: Create and Post General Journal Line with random Amount, take random Adjustment Factor.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      AdjustmentFactor := LibraryRandom.RandDec(10,2);
      CreateAndPostGenJournalLine(GLAccountNo,Amount);
      Amount := AdjustmentFactor * Amount;  // Calculate Expected Amount after using adjustment factor and assign it to global variable.
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Entry",'',AdjustmentFactor,'');  // Passing blank for Copy From Budget and Rounding Method.
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler,BudgetPageHandler)]
    PROCEDURE GLBudgetEntryWithAdjustmentFactor@24();
    VAR
      GLBudgetName@1001 : Record 95;
      AdjustmentFactor@1000 : Decimal;
      FromSource@1007 : 'G/L Entry,G/L Budget Entry';
    BEGIN
      // Check correct Amount copied on new GL Budget while Copy From Source is GL Budget Entry and random Adjustment Factor used.

      // Setup: Create GL Budget Entry for a GL Account with random Amount, take random Adjustment Factor.
      Initialize;
      GLBudgetName.FINDFIRST;
      GLAccountNo := LibraryERM.CreateGLAccountNo;  // Assign GL Account No. to global variable.
      Amount := LibraryRandom.RandDec(100,2);  // Assign Random Amount to global variable.
      AdjustmentFactor := LibraryRandom.RandDec(10,2);
      CreateGLBudgetEntry(GLBudgetName.Name,GLAccountNo,Amount);
      Amount := AdjustmentFactor * Amount;  // Calculate Expected Amount after using adjustment factor and assign it to global variable.
      CopyGLBudgetFromDifferentSources(FromSource::"G/L Budget Entry",GLBudgetName.Name,AdjustmentFactor,'');  // Passing blank for Rounding Method.
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      ClearGlobalVariables;
    END;

    LOCAL PROCEDURE CalculateAmountUsingRoundingMethod@35(OldAmount@1001 : Decimal) : Code[10];
    VAR
      RoundingMethod@1000 : Record 42;
    BEGIN
      RoundingMethod.FINDFIRST;
      Amount := ROUND(OldAmount,RoundingMethod.Precision,InvoiceRoundingDirection(RoundingMethod.Type));  // Update the Amount as per Rounding Method and Assign it to global variable.
      EXIT(RoundingMethod.Code);
    END;

    LOCAL PROCEDURE ClearGlobalVariables@145();
    BEGIN
      Amount := 0;
      CLEAR(GLAccountNo);
      CLEAR(BudgetName);
    END;

    LOCAL PROCEDURE CopyGLBudgetFromDifferentSources@27(FromSource@1002 : Option;FromGLBudgetName@1005 : Code[10];AdjustmentFactor@1003 : Decimal;RoundingMethodCode@1000 : Code[10]);
    VAR
      GLBudgetName@1001 : Record 95;
    BEGIN
      // Create GL Budget to copy an existing GL Budget.
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      BudgetName := GLBudgetName.Name;  // Assign GL Budget Name to global variable.

      // Exercise.
      RunCopyGLBudget(FromSource,FromGLBudgetName,GLAccountNo,FORMAT(WORKDATE),BudgetName,AdjustmentFactor,RoundingMethodCode);

      // Verify: Verify Amount on GL Budget Page.
      OpenGLBudgetPage;

      // Tear Down: Delete earlier created GL Budget.
      GLBudgetName.GET(BudgetName);
      GLBudgetName.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@32(AccountNo@1003 : Code[20];LineAmount@1002 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",AccountNo,LineAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGLBudgetEntry@52(GLBudgetName@1003 : Code[10];AccountNo@1001 : Code[20];Amount2@1002 : Decimal);
    VAR
      GLBudgetEntry@1000 : Record 96;
    BEGIN
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,AccountNo,GLBudgetName);
      GLBudgetEntry.VALIDATE(Amount,Amount2);  // Taking Variable name Amount2 due to global variable.
      GLBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InvoiceRoundingDirection@28(Type@1001 : 'Nearest,Up,Down') : Text[1];
    BEGIN
      // Taken the formula to return Rounding Type from Currency Table .
      CASE Type OF
        Type::Nearest:
          EXIT('=');
        Type::Up:
          EXIT('>');
        Type::Down:
          EXIT('<');
      END;
    END;

    LOCAL PROCEDURE OpenGLBudgetPage@137();
    VAR
      GLBudgetNamesPage@1000 : TestPage 121;
    BEGIN
      GLBudgetNamesPage.OPENEDIT;
      GLBudgetNamesPage.FILTER.SETFILTER(Name,BudgetName);
      GLBudgetNamesPage.EditBudget.INVOKE;
    END;

    LOCAL PROCEDURE RunCopyGLBudget@7(FromSource@1003 : Option;FromGLBudgetName@1011 : Code[10];FromGLAccount@1006 : Code[20];DateInterval@1004 : Text[30];ToGlBudgetName@1007 : Code[10];AdjustmentFactor@1009 : Decimal;RoundingMethodCode@1005 : Code[10]);
    VAR
      CopyGLBudget@1000 : Report 96;
      ToDateCompression@1002 : 'None,Day,Week,Month,Quarter,Year,Period';
      FromClosingEntryFilter@1008 : 'Include,Exclude';
      DateChangeFormula@1001 : DateFormula;
    BEGIN
      CLEAR(CopyGLBudget);
      EVALUATE(DateChangeFormula,'');  // Evaluating blank value in Date Formula variable.
      CopyGLBudget.InitializeRequest(
        FromSource,FromGLBudgetName,FromGLAccount,DateInterval,FromClosingEntryFilter::Include,'',ToGlBudgetName,'',AdjustmentFactor,
        RoundingMethodCode,DateChangeFormula,ToDateCompression::None);
      CopyGLBudget.USEREQUESTPAGE(FALSE);
      CopyGLBudget.RUN;
    END;

    [PageHandler]
    PROCEDURE BudgetPageHandler@10(VAR Budget@1000 : TestPage 113);
    BEGIN
      Budget.GLAccFilter.SETVALUE(GLAccountNo);
      Budget.MatrixForm.TotalBudgetedAmount.ASSERTEQUALS(Amount);
      Budget.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@9(Message@1000 : Text[1024]);
    BEGIN
      // For handle message
    END;

    [ConfirmHandler]
    PROCEDURE YesConfirmHandler@86(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE NoConfirmHandler@34(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    BEGIN
    {
      // [FEATURE] [G/L Budget]
      Check the functionalities of various Batch Jobs.
        1. Test error when Copy From Budget Field is not filled up while running Copy GL Budget Batch Job.
        2. Test error when Copy From Date Field is not filled up while running Copy GL Budget Batch Job.
        3. Test error when Copy To Budget Field is not filled up while running Copy GL Budget Batch Job.
        4. Test New GL Budget created using Copy G/L Budget.
        5. Test New GL Budget is not created after declining confirmation message using Copy G/L Budget.
        6. Test correct Amount copied on new GL Budget while Copy From Source is GL Entry.
        7. Test correct Amount copied on new GL Budget while Copy From Source is GL Budget Entry.
        8. Test correct Amount copied on new GL Budget while Copy From Source is GL Entry and a Rounding Method used.
        9. Test correct Amount copied on new GL Budget while Copy From Source is GL Budget Entry and a Rounding Method used.
       10. Test correct Amount copied on new GL Budget while Copy From Source is GL Entry and random Adjustment Factor used.
       11. Test correct Amount copied on new GL Budget while Copy From Source is GL Budget Entry and random Adjustment Factor used.

      Covers Test cases: 265511
      ------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                              TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------------
      CopyFromGLBudgetError, CopyFromDateIntervalError, CopyToGLBudgetError, GLBudgetCreation, GLBudgetCreationDeclined               128969
      CopyGLBudgetSourceGLEntry, CopyGLBudgetSourceGLEntry, CopyGLBudgetSourceGLBudgetEntry, GLEntryWithRoundingMethod
      GLEntryWithAdjustmentFactor, GLBudgetEntryWithAdjustmentFactor
    }
    END.
  }
}

