OBJECT Codeunit 136605 ERM RS Role Center
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      Text001@1002 : TextConst 'ENU=Incorrect config. line status weight.';
      Text002@1003 : TextConst 'ENU=Incorrect progress value.';
      Text003@1004 : TextConst 'ENU=Incorrect number of tables.';
      Text004@1009 : TextConst 'ENU=Incorrect number of tables with status "%1" in Rapid Start Cue.';
      Text005@1005 : TextConst 'ENU=The status %1 is not supported.';
      ConfigLineStatus@1006 : ' ,In Progress,Completed,Ignored,Blocked';

    [Test]
    PROCEDURE CheckStatusWeight_Empty@1();
    BEGIN
      Assert.AreEqual(0,GetConfigLineWeight(ConfigLineStatus::" "),Text001);
    END;

    [Test]
    PROCEDURE CheckStatusWeight_Completed@6();
    BEGIN
      Assert.AreEqual(1,GetConfigLineWeight(ConfigLineStatus::Completed),Text001);
    END;

    [Test]
    PROCEDURE CheckStatusWeight_Ignored@7();
    BEGIN
      Assert.AreEqual(1,GetConfigLineWeight(ConfigLineStatus::Ignored),Text001);
    END;

    [Test]
    PROCEDURE CheckStatusWeight_In_Progress@8();
    BEGIN
      Assert.AreEqual(0.5,GetConfigLineWeight(ConfigLineStatus::"In Progress"),Text001);
    END;

    [Test]
    PROCEDURE CheckStatusWeight_Blocked@11();
    BEGIN
      Assert.AreEqual(0.5,GetConfigLineWeight(ConfigLineStatus::Blocked),Text001);
    END;

    [Test]
    PROCEDURE CheckStatusWeight_OutOfOptionRange@18();
    BEGIN
      ConfigLineStatus := 6;
      ASSERTERROR GetConfigLineWeight(ConfigLineStatus);
      Assert.ExpectedError(STRSUBSTNO(Text005,ConfigLineStatus));
    END;

    [Test]
    PROCEDURE VerifyGetProgress_Group@2();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      InitGetProgressScenario_Group;

      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Group);

      Assert.AreEqual(60,ConfigLine.GetProgress,Text002);
      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyGetProgress_Area@13();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      InitGetProgressScenario_Area;

      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Area);

      Assert.AreEqual(60,ConfigLine.GetProgress,Text002);
      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyGetProgress_Table@19();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      AddConfigLine(ConfigLine."Line Type"::Table,ConfigLine.Status::" ",TRUE);
      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Table);

      Assert.AreEqual(0,ConfigLine.GetProgress,Text002);
      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyGetNoOfDirectChildrenTables_Group@20();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      InitGetProgressScenario_Area;

      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Group);

      Assert.AreEqual(4,ConfigLine.GetNoTables,Text003);

      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyGetNoOfDirectChildrenTables_Area@10();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      InitGetProgressScenario_Area;

      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Area);

      Assert.AreEqual(10,ConfigLine.GetNoTables,Text003);

      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyGetNoOfDirectChildrenTables_AreaWithoutGroup@28();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      InitGetProgressScenario_AreaWithoutGroup;

      FindConfigLine(ConfigLine,ConfigLine."Line Type"::Area);

      Assert.AreEqual(10,ConfigLine.GetNoTables,Text003);

      Cleanup;
    END;

    [Test]
    PROCEDURE VerifyRapidStartCue@9();
    VAR
      RapidStartServicesCue@1000 : Record 9061;
      ConfigLine@1001 : Record 8622;
    BEGIN
      InitVerifyCueScenario;

      GetRapidStartCue(RapidStartServicesCue);
      RapidStartServicesCue.CALCFIELDS("Not Started","In Progress",Completed,Ignored,Promoted);

      ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Table);
      ConfigLine.SETRANGE(Status,ConfigLine.Status::" ");
      Assert.AreEqual(ConfigLine.COUNT,
        RapidStartServicesCue."Not Started",STRSUBSTNO(Text004,RapidStartServicesCue.FIELDCAPTION("Not Started")));
      ConfigLine.SETRANGE(Status,ConfigLine.Status::"In Progress");
      Assert.AreEqual(ConfigLine.COUNT,
        RapidStartServicesCue."In Progress",STRSUBSTNO(Text004,RapidStartServicesCue.FIELDCAPTION("In Progress")));
      ConfigLine.SETRANGE(Status,ConfigLine.Status::Completed);
      Assert.AreEqual(ConfigLine.COUNT,
        RapidStartServicesCue.Completed,STRSUBSTNO(Text004,RapidStartServicesCue.FIELDCAPTION(Completed)));
      ConfigLine.SETRANGE(Status,ConfigLine.Status::Ignored);
      Assert.AreEqual(ConfigLine.COUNT,
        RapidStartServicesCue.Ignored,STRSUBSTNO(Text004,RapidStartServicesCue.FIELDCAPTION(Ignored)));
      ConfigLine.SETRANGE(Status);
      ConfigLine.SETRANGE("Promoted Table",TRUE);
      Assert.AreEqual(ConfigLine.COUNT,
        RapidStartServicesCue.Promoted,STRSUBSTNO(Text004,RapidStartServicesCue.FIELDCAPTION(Promoted)));

      Cleanup;
    END;

    LOCAL PROCEDURE Cleanup@60();
    VAR
      ConfigLine@1004 : Record 8622;
    BEGIN
      ConfigLine.SETRANGE("Package Code",'');
      ConfigLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE AddConfigLine@5(LineType@1000 : 'Area,Group,Table';Status@1005 : ' ,In Progress,Completed,Ignored,Blocked';Promoted@1003 : Boolean);
    VAR
      ConfigLine@1002 : Record 8622;
      LibraryRapidStart@1001 : Codeunit 131903;
    BEGIN
      LibraryRapidStart.CreateConfigLine(ConfigLine,LineType,0,'','',FALSE);
      ConfigLine.GET(ConfigLine."Line No.");
      IF LineType = LineType::Table THEN BEGIN
        ConfigLine.Status := Status;
        ConfigLine."Promoted Table" := Promoted;
        ConfigLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetConfigLineWeight@3(ConfigLineStatus@1000 : ' ,In Progress,Completed,Ignored,Blocked') : Decimal;
    VAR
      ConfigLine@1001 : Record 8622;
    BEGIN
      ConfigLine.Status := ConfigLineStatus;
      EXIT(ConfigLine.GetLineStatusWeight);
    END;

    LOCAL PROCEDURE InitGetProgressScenario_Area@12();
    VAR
      LineType@1001 : 'Area,Group,Table';
      Status@1000 : ' ,In Progress,Completed,Ignored,Blocked';
    BEGIN
      AddConfigLine(LineType::Area,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Group,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Group,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Table,Status::Ignored,FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Blocked,FALSE);
    END;

    LOCAL PROCEDURE InitGetProgressScenario_Group@15();
    VAR
      LineType@1002 : 'Area,Group,Table';
      Status@1000 : ' ,In Progress,Completed,Ignored,Blocked';
    BEGIN
      AddConfigLine(LineType::Group,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Table,Status::Ignored,FALSE);
      AddConfigLine(LineType::Table,Status::Blocked,FALSE);
    END;

    LOCAL PROCEDURE InitGetProgressScenario_AreaWithoutGroup@24();
    VAR
      LineType@1001 : 'Area,Group,Table';
      Status@1000 : ' ,In Progress,Completed,Ignored,Blocked';
    BEGIN
      AddConfigLine(LineType::Area,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Table,Status::Ignored,FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Blocked,FALSE);
    END;

    LOCAL PROCEDURE InitVerifyCueScenario@16();
    VAR
      LineType@1001 : 'Area,Group,Table';
      Status@1000 : ' ,In Progress,Completed,Ignored,Blocked';
    BEGIN
      AddConfigLine(LineType::Area,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::" ",TRUE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,FALSE);
      AddConfigLine(LineType::Group,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::" ",TRUE);
      AddConfigLine(LineType::Table,Status::Completed,TRUE);
      AddConfigLine(LineType::Group,Status::" ",FALSE);
      AddConfigLine(LineType::Table,Status::Completed,TRUE);
      AddConfigLine(LineType::Table,Status::Ignored,FALSE);
      AddConfigLine(LineType::Table,Status::"In Progress",FALSE);
      AddConfigLine(LineType::Table,Status::Blocked,FALSE);
    END;

    LOCAL PROCEDURE FindConfigLine@14(VAR ConfigLine@1000 : Record 8622;LineType@1001 : 'Area,Group,Table');
    BEGIN
      ConfigLine.SETRANGE("Line Type",LineType);
      ConfigLine.FINDLAST;
    END;

    LOCAL PROCEDURE GetRapidStartCue@17(VAR RapidStartServicesCue@1000 : Record 9061);
    BEGIN
      IF NOT RapidStartServicesCue.GET THEN BEGIN
        RapidStartServicesCue.INIT;
        RapidStartServicesCue.INSERT;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Config Line] [Rapid Start]
    }
    END.
  }
}

