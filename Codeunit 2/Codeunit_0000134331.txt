OBJECT Codeunit 134331 ERM Purchase Payables
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryInventory@1019 : Codeunit 132201;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryERM@1006 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySetupStorage@1001 : Codeunit 131009;
      LibraryTimeSheet@1017 : Codeunit 131904;
      LibraryService@1007 : Codeunit 131902;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryCosting@1024 : Codeunit 132200;
      IsInitialized@1004 : Boolean;
      MustNotBeEqualErr@1009 : TextConst '@@@="%1=Transaction1;%2=Transaction2";ENU=Transaction No. %1 and %2 must not be equal.';
      PostingDateErr@1015 : TextConst 'ENU=Enter the posting date.';
      UnknownErr@1014 : TextConst 'ENU=Unknown Error';
      PurchaseOrderErr@1008 : TextConst 'ENU=Purchase Order was not posted.';
      AmountErr@1013 : TextConst '@@@="%1=Field;%2=Value;%3=Table";ENU=%1 must be %2 in %3.';
      FilterMsg@1003 : TextConst 'ENU=There should be record within the filter.';
      NoFilterMsg@1016 : TextConst 'ENU=There should be no record within the filter.';
      PurchaseLineFactBoxErr@1018 : TextConst '@@@="%1=Type;%2=Document Type;%3=Document No.;%4= Line No.;%5=Current value.";ENU="Type must be equal to ''%1''  in Purchase Line: Document Type=%2, Document No.=%3, Line No.=%4. Current value is ''%5''."';
      PurchOrderArchiveRespCenterErr@1021 : TextConst 'ENU=Purchase Order Archives displays documents for Responisbility Center that should not be shown for current user';
      MultipleVendorsSelectedErr@1023 : TextConst 'ENU=More than one vendor uses these purchase prices. To copy prices, the Vendor No. Filter field must contain one vendor only.';

    [Test]
    PROCEDURE DeleteInvdBlnktPurchOrders@2();
    VAR
      PurchHeader@1003 : Record 38;
      OrderPurchHeader@1009 : Record 38;
      PurchasesPayablesSetup@1015 : Record 312;
      NoSeriesManagement@1007 : Codeunit 396;
      BlanketPONumber@1001 : Code[20];
      expectedOrderNo@1000 : Code[20];
    BEGIN
      // 1. Setup
      Initialize;
      CreateOneItemPurchDoc(PurchHeader,PurchHeader."Document Type"::"Blanket Order");

      // Find the number series used and gather the next value in advance.
      PurchasesPayablesSetup.GET;
      expectedOrderNo := NoSeriesManagement.GetNextNo(PurchasesPayablesSetup."Order Nos.",WORKDATE,FALSE);

      // Make an order
      CODEUNIT.RUN(CODEUNIT::"Blanket Purch. Order to Order",PurchHeader);

      // Find the created order and ship and invoice it.
      OrderPurchHeader.SETRANGE("No.",expectedOrderNo);
      OrderPurchHeader.FINDFIRST;
      OrderPurchHeader.VALIDATE("Vendor Invoice No.",OrderPurchHeader."No.");
      OrderPurchHeader.MODIFY(TRUE);

      LibraryPurchase.PostPurchaseDocument(OrderPurchHeader,TRUE,TRUE);

      // Retrieve the Id so we can ensure it has been deleted.
      BlanketPONumber := PurchHeader."No.";

      // 2. Exercise
      // Since the purchase order has been posted and invoiced for all the quantity in the blanket purchase order, now the report should
      // delete the blanket purchase order we created.
      REPORT.RUN(REPORT::"Delete Invd Blnkt Purch Orders",FALSE);

      // 3. Verification
      Assert.IsFalse(PurchHeader.GET(PurchHeader."Document Type"::"Blanket Order",BlanketPONumber),
        'Invoiced Blanket Purchase Order shouldn''t exist.');

      // 4. Clean-up
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ArchivePurchaseOrder@9();
    VAR
      PurchHeader@1003 : Record 38;
      PurchLineItem@1002 : Record 39;
      FixedAsset@1006 : Record 5600;
      PurchLineGLAcc@1007 : Record 39;
      PurchLineFixedAsset@1008 : Record 39;
      PurchLineChargeItem@1009 : Record 39;
      ArchiveManagement@1004 : Codeunit 5063;
    BEGIN
      // 1. Setup
      Initialize;

      // Find an item, G/L account, Fixed Asset and (Charge) Item for an invoice
      FixedAsset.FINDFIRST;

      // Create a new invoiced blanket purchase order
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchLineItem,PurchHeader,PurchLineItem.Type::Item,'',LibraryRandom.RandInt(100));
      LibraryPurchase.CreatePurchaseLine(PurchLineGLAcc,PurchHeader,PurchLineGLAcc.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandInt(100));
      LibraryPurchase.CreatePurchaseLine(PurchLineFixedAsset,PurchHeader,PurchLineFixedAsset.Type::"Fixed Asset",FixedAsset."No.",
        LibraryRandom.RandInt(100));
      LibraryPurchase.CreatePurchaseLine(PurchLineChargeItem,PurchHeader,PurchLineFixedAsset.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(100));

      // 2. Exercise
      ArchiveManagement.ArchivePurchDocument(PurchHeader);

      // 3. Verification
      // "No. of Archived Versions" is a flow field so we must force recalculate before checking the new value.
      PurchHeader.CALCFIELDS("No. of Archived Versions");
      Assert.AreEqual(1,PurchHeader."No. of Archived Versions",'No. of archived versions in PO archived once is not 1.');

      VerifyArchPurchaseOrderHeader(PurchHeader);

      VerifyArchPurchaseOrderLine(PurchLineItem);
      VerifyArchPurchaseOrderLine(PurchLineGLAcc);
      VerifyArchPurchaseOrderLine(PurchLineFixedAsset);
      VerifyArchPurchaseOrderLine(PurchLineChargeItem);

      // 4. Clean-up
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ArchivePurchOrdersSeveralTimes@4();
    VAR
      PurchHeader@1004 : Record 38;
      ArchiveManagement@1006 : Codeunit 5063;
      counter@1001 : Integer;
      NumberOfArchivements@1000 : Integer;
    BEGIN
      // 1. Setup
      Initialize;
      CreateOneItemPurchDoc(PurchHeader,PurchHeader."Document Type"::Order);
      NumberOfArchivements := LibraryRandom.RandInt(5) + 1;

      // 2. Exercise
      FOR counter := 1 TO NumberOfArchivements DO
        ArchiveManagement.ArchivePurchDocument(PurchHeader);

      // 3. Verification
      // "No. of Archived Versions" is a flow field so we must force recalculate before checking the new value.
      PurchHeader.CALCFIELDS("No. of Archived Versions");
      Assert.AreEqual(NumberOfArchivements,PurchHeader."No. of Archived Versions",
        'No. of archived versions in PO archived multiple times is not as expected.');
    END;

    [Test]
    PROCEDURE PurchaseInvoiceTransactionNo@1();
    VAR
      VATPostingSetup@1001 : Record 325;
      GLAccountNo@1008 : Code[20];
      PostedDocumentNo@1005 : Code[20];
    BEGIN
      // Verify Transaction Number Entries after posting Purchase Invoice.

      // Setup: Update Unrealized VAT on General Ledger Setup. Create G/L Accounts with VAT Posting Setup.
      Initialize;
      LibraryERM.SetUnrealizedVAT(TRUE);
      CreateSetupForGLAccounts(VATPostingSetup,GLAccountNo);

      // Exercise: Create and post Purchase Invoice.
      PostedDocumentNo := CreateAndPostPurchaseInvoice(VATPostingSetup."VAT Bus. Posting Group",GLAccountNo);

      // Verify: Verify Transaction Number Entries.
      VerifyTransactionNoOnGLEntries(PostedDocumentNo);

      // Tear down: Rollback Unrealized VAT On General Ledger Setup.
      DeleteVATPostingSetup(VATPostingSetup);
    END;

    [Test]
    PROCEDURE SeveralLinesTransactionNo@5();
    VAR
      GLAccount@1000 : Record 15;
      GLAccount2@1001 : Record 15;
      GenJournalLine@1002 : Record 81;
      GenJournalBatch@1003 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      // Verify Transaction Number Entries after posting several Journal Lines.

      // Setup: Find G/L Accounts.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLAccount(GLAccount2);

      // Exercise: Create and post several Journal Lines with Random Amount.
      CreateGeneralJournalBatch(GenJournalBatch,TRUE);
      Amount := CreateMultipleJournalLines(GenJournalLine,GenJournalBatch,GLAccount."No.");
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount2."No.",-Amount / 2);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount."No.",-Amount / 2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Transaction Number Entries.
      VerifyTransactionNoOnGLEntries(GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE TransactionNoForceBalanceOff@6();
    VAR
      GLAccount@1007 : Record 15;
      GLAccount2@1006 : Record 15;
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1004 : Record 232;
      Amount@1002 : Decimal;
    BEGIN
      // Verify Transaction Number Entries after posting several Journal Lines with Force Document Balance Off.

      // Setup: Find G/L Accounts.
      Initialize;
      CreateGLAccountWithVAT(GLAccount);
      CreateGLAccountWithVAT(GLAccount2);

      // Exercise: Create and post Journal Lines with Force Document Balance Off and Random Amount.
      CreateGeneralJournalBatch(GenJournalBatch,FALSE);
      Amount := CreateMultipleJournalLines(GenJournalLine,GenJournalBatch,GLAccount."No.");
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount2."No.",-Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Transaction Number Entries.
      VerifyTransactionNoOnGLEntries(GenJournalLine."Journal Batch Name");
    END;

    [Test]
    PROCEDURE TransactionNoForceBalanceOn@8();
    VAR
      GLAccount@1006 : Record 15;
      GLAccount2@1005 : Record 15;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1003 : Record 232;
      Amount@1001 : Decimal;
    BEGIN
      // Verify Transaction Number Entries after posting several Journal Lines with Force Document Balance On.

      // Setup: Find G/L Accounts.
      Initialize;
      CreateGLAccountWithVAT(GLAccount);
      CreateGLAccountWithVAT(GLAccount2);

      // Exercise: Create and post Journal Lines with Force Document Balance On and Random Amount.
      CreateGeneralJournalBatch(GenJournalBatch,TRUE);
      Amount := CreateMultipleJournalLines(GenJournalLine,GenJournalBatch,GLAccount."No.");
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount2."No.",-Amount);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount."No.",LibraryRandom.RandDec(100,2));
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GLAccount2."No.",-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Transaction Number Entries.
      VerifyTransactionNoCalculation(GenJournalLine."Journal Batch Name");
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchaseOrderCHandler,MessageHandler)]
    PROCEDURE PurchaseOrderBatchPostDate@40();
    BEGIN
      // Test case to check error while running Batch Post Purchase Orders while giving a Blank Posting Date.

      // Setup.
      Initialize;

      // Exercise: Run Batch Post Purchase Orders Report.
      ASSERTERROR BatchPostPurchaseOrderRun;

      // Verify: Verify whether error is captured or not.
      Assert.AreEqual(STRSUBSTNO(PostingDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchCountHandler,MessageHandler)]
    PROCEDURE PurchaseOrderBatchPostCount@41();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchInvHeader@1004 : Record 122;
      PurchInvHeaderCount@1005 : Integer;
    BEGIN
      // Test case to Check whether line count increases or not in Purchase Invoice Header after running.
      // Batch Post Purchase Orders Report.

      // Setup: Create Purchase Document and get Purchase Invoice Header Line before posting in PurchInvHeaderCount.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      PurchInvHeaderCount := PurchInvHeader.COUNT;

      // Exercise: Run Batch Post Purchase Orders Report.
      BatchPostPurchaseOrderRun;

      // Verify: Verify whether Lines After Posting are more than PurchInvHeaderCount.
      Assert.AreNotEqual(0,PurchInvHeader.COUNT - PurchInvHeaderCount,PurchaseOrderErr);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchCountHandler,MessageHandler)]
    PROCEDURE PurchaseOrderBatchPostInvDisc@43();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchCalcDiscount@1001 : Codeunit 70;
      InvoiceDiscountAmount@1005 : Decimal;
      PostedDocumentNo@1006 : Code[20];
    BEGIN
      // Test case to check whether Invoice Discount is calculated and flowed in Posted Purchase Invoice LIne.

      // Setup: Update Purchases & Payables Setup and Create Purchase Document.
      Initialize;
      LibraryPurchase.SetCalcInvDiscount(TRUE);

      PostedDocumentNo := CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Calculate Invoice Discount Amount and Run Batch Post Purchase Orders Report.
      PurchCalcDiscount.CalculateInvoiceDiscount(PurchaseHeader,PurchaseLine);
      InvoiceDiscountAmount := PurchaseLine."Inv. Discount Amount";
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      BatchPostPurchaseOrderRun;

      // Verify: Verify Posted Purchase Invoice Line.
      VerifyPurchaseInvoiceLine(PostedDocumentNo,InvoiceDiscountAmount);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchDocDateHandler,MessageHandler)]
    PROCEDURE PurchaseOrderBatchReplaceDate@44();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Test case to check Replace Document Date option of Batch Post Purchase Orders Report.

      // Setup: Crete Purchase Document.
      Initialize;
      PostedDocumentNo := CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Run Batch Post Purchase Orders Report.
      BatchPostPurchaseOrderRun;

      // Verify: Verify Posted Purchase Invoice Header for modified Document Date.
      VerifyPurchaseInvoiceHeader(PostedDocumentNo,LibraryVariableStorage.DequeueDate);
    END;

    [Test]
    PROCEDURE VendorHistoryForPurchaseOrder@16();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Order.

      // Setup: Create a new Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Order.
      VendorHistPaytoFactBox.NoOfOrders.ASSERTEQUALS(1);  // One Purchase Order have been created by the test function, so Number of Orders is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPurchaseInvoice@32();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Invoices on the Vendor Hist. Pay-to FactBox after creating a new Purchase Invoice.

      // Setup: Create a new Purchase Invoice.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice);

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Invoices on the Vendor Hist. Pay-to FactBox after creating a new Purchase Invoice.
      VendorHistPaytoFactBox.NoOfInvoices.ASSERTEQUALS(1);  // One Purchase Invoice have been created by the test function, so Number of Invoices is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPurchaseCreditMemo@49();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Credit Memos on the Vendor Hist. Pay-to FactBox after creating a new Purchase Credit Memo.

      // Setup: Create a new Purchase Credit Memo.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Credit Memos on the Vendor Hist. Pay-to FactBox after creating a new Purchase Credit Memo.
      VendorHistPaytoFactBox.NoOfCreditMemos.ASSERTEQUALS(1);  // One Purchase Credit Memo have been created by the test function, so Number of Credit Memos is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPurchaseQuotes@17();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Quotes on the Vendor Hist. Pay-to FactBox after creating a new Purchase Quote.

      // Setup: Create a new Purchase Quote.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Quote);

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Quotes on the Vendor Hist. Pay-to FactBox after creating a new Purchase Quote.
      VendorHistPaytoFactBox.NoOfQuotes.ASSERTEQUALS(1);  // One Purchase Quote have been created by the test function, so Number of Quotes is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPurchaseReturnOrder@45();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Return Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Return Order.

      // Setup: Create a new Purchase Return Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Return Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Return Order.
      VendorHistPaytoFactBox.NoOfReturnOrders.ASSERTEQUALS(1);  // One Purchase Return Order have been created by the test function, so Number of Return Orders is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPostedPurchaseInvoiceAndReceipt@69();
    VAR
      PurchaseHeader@1000 : Record 38;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Posted Invoices and Number of Posted Receipts on the Vendor Hist. Pay-to FactBox after posting a new Purchase Order.

      // Setup: Create and post a new Purchase Order.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Posted Invoices and Number of Posted Receipts on the Vendor Hist. Pay-to FactBox after posting a new Purchase Order.
      VendorHistPaytoFactBox.NoOfPostedInvoices.ASSERTEQUALS(1);  // One Posted Purchase Invoice have been created by the test function, so Number of Posted Invoices is taken as 1.
      VendorHistPaytoFactBox.NoOfPostedReceipts.ASSERTEQUALS(1);  // One Posted Purchase Receipt have been created by the test function, so Number of Posted Receipts is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPostedPurchaseCreditMemo@90();
    VAR
      PurchaseHeader@1000 : Record 38;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Posted Credit Memos on the Vendor Hist. Pay-to FactBox after posting a new Purchase Credit Memo.

      // Setup: Create and post a new Purchase Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Posted Credit Memos on the Vendor Hist. Pay-to FactBox after posting a new Purchase Credit Memo.
      VendorHistPaytoFactBox.NoOfPostedCreditMemos.ASSERTEQUALS(1);  // One Posted Purchase Credit Memo have been created by the test function, so Number of Posted Credit Memos is taken as 1.
    END;

    [Test]
    PROCEDURE VendorHistoryForPostedPurchaseReturnShipment@52();
    VAR
      PurchaseHeader@1000 : Record 38;
      VendorHistPaytoFactBox@1002 : TestPage 9096;
    BEGIN
      // Check Number of Posted Return Shipments on the Vendor Hist. Pay-to FactBox after posting a new Purchase Return Order.

      // Setup: Create and post a new Purchase Return Order.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order");

      // Exercise.
      OpenVendorHistPaytoFactBox(VendorHistPaytoFactBox,PurchaseHeader."Pay-to Vendor No.");

      // Verify: Verify Number of Posted Return Shipments on the Vendor Hist. Pay-to FactBox after posting a new Purchase Return Order.
      VendorHistPaytoFactBox.NoOfPostedReturnShipments.ASSERTEQUALS(1);  // One Posted Return Shipment have been created by the test function, so Number of Posted Return Shipments is taken as 1.
    END;

    [Test]
    PROCEDURE PurchaseOrderWithExpectedReceiptDate@27();
    VAR
      ManufacturingSetup@1004 : Record 99000765;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DefaultSafetyLeadTime@1001 : DateFormula;
    BEGIN
      // Set Default Safety Lead Time in Manufacturing Setup and verify Expected Receipt Date on Purchase Order Line.

      // Setup: Set Default Safety Lead Time in Manufacturing Setup taking random value.
      Initialize;
      ManufacturingSetup.GET;
      EVALUATE(DefaultSafetyLeadTime,FORMAT(LibraryRandom.RandInt(5)) + '<D>');  // Taking Random value.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(DefaultSafetyLeadTime);

      // Exercise: Create a Purchase Order taking random values.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Verify: Validate that expected receipt date is equal to Default Safety Lead Time plus Order date of Purchase Order.
      PurchaseLine.TESTFIELD("Expected Receipt Date",CALCDATE(DefaultSafetyLeadTime,PurchaseHeader."Order Date"));

      // Tear Down: Set default Manufacturing Setup.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    PROCEDURE PurchaseOrderByPage@24();
    VAR
      ItemNo@1006 : Code[20];
      PurchaseHeaderNo@1003 : Code[20];
      VendorNo@1007 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Verify creation of Purchase Order by page.

      // Setup: Create a Vendor and an Item.
      Initialize;
      VendorNo := CreateVendor;
      ItemNo := CreateItem;

      // Exercise: Create a Purchase Order taking Random Quantity.
      Quantity := LibraryRandom.RandDec(10,2);
      PurchaseHeaderNo := CreatePurchaseOrderCard;
      CreatePurchaseLineFromPurchaseOrderPage(ItemNo,PurchaseHeaderNo,VendorNo,Quantity);

      // Verify: Verify data of newly created Purchase Order.
      VerifyPurchaseOrder(PurchaseHeaderNo,VendorNo,ItemNo,Quantity);
    END;

    [Test]
    PROCEDURE PurchasePriceAndLineDiscount@37();
    VAR
      PurchaseLineDiscount@1002 : Record 7014;
      PurchasePrice@1005 : Record 7012;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Verify Purchase Price and Line Discount.

      // Setup: Create Purchase Price and Purchase Line Discount.
      Initialize;
      CreatePurchasePrice(PurchasePrice);
      CreatePurchaseLineDiscount(PurchaseLineDiscount,PurchasePrice);

      // Exercise: Create Purchase Order.
      CreatePurchaseOrder(PurchaseLine,PurchasePrice);

      // Verify: Verify Purchase Price and Line Discount on Purchase Line.
      VerifyPriceAndLineDiscountOnPurchaseLine(PurchaseLine,PurchasePrice."Minimum Quantity" / 2,0,0);
      VerifyPriceAndLineDiscountOnPurchaseLine(PurchaseLine,PurchasePrice."Minimum Quantity",PurchasePrice."Direct Unit Cost",0);
      VerifyPriceAndLineDiscountOnPurchaseLine(
        PurchaseLine,PurchasePrice."Minimum Quantity" * 2,PurchasePrice."Direct Unit Cost",PurchaseLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnPurchaseOrder@56();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      UserSetup@1004 : Record 91;
      ResponsibilityCenterCode@1003 : Code[10];
    BEGIN
      // Check Responsibility Center on Purchase Order.

      // Setup: Create a User Setup.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;

      // Exercise.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Verify: Validate Responsibility Center on Purchase Order.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnPostedPurchaseDocument@55();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1003 : Record 122;
      PurchRcptHeader@1006 : Record 120;
      UserSetup@1007 : Record 91;
      PostedDocumentNo@1004 : Code[20];
      ResponsibilityCenterCode@1005 : Code[10];
    BEGIN
      // Check Responsibility Center on Posted Purchase Document.

      // Setup: Create a User Setup.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Validate Responsibility Center on Purchase Document.
      PurchInvHeader.GET(PostedDocumentNo);
      PurchInvHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      PurchRcptHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchRcptHeader.FINDFIRST;
      PurchRcptHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    PROCEDURE StartingDateAsWorkDateOnPurchasePrice@118();
    BEGIN
      // Verify that correct date gets updated on Purchase Price window in "Starting Date Filter" field when user enters W.

      Initialize;
      StartingDateOnPurchasePrice('W',WORKDATE);
    END;

    [Test]
    PROCEDURE StartingDateAsTodayOnPurchasePrice@122();
    BEGIN
      // Verify that correct date gets updated on Purchase Price window in "Starting Date Filter" field when user enters T.

      Initialize;
      StartingDateOnPurchasePrice('T',TODAY);
    END;

    [Test]
    PROCEDURE SugVendPmtWithPosVendBal@66();
    VAR
      GenJournalLine@1005 : Record 81;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Verify General Journal Line after Suggest Vendor Payments with Positive Balance.

      // Setup: Create Purchase invoice.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);

      // Exercise: Run Suggest Vendor Payment Report for Vendor.
      SuggestVendorPayment(GenJournalLine,PurchaseHeader."Posting Date",PurchaseHeader."Buy-from Vendor No.");

      // Verify: Verify General Journal Line for Suggested Vendor.
      Assert.IsTrue(FindGenJournalLine(GenJournalLine."Account Type"::Vendor,PurchaseHeader."Buy-from Vendor No."),FilterMsg);
    END;

    [Test]
    PROCEDURE SugVendPmtWithNegVendBal@70();
    VAR
      GenJournalLine@1002 : Record 81;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // [SCENARIO] General Journal Line does not exist after Suggest Vendor Payments for Vendor with Negative Balance.

      // [GIVEN] Vendor Balance is negative.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");

      // [WHEN] Run Suggest Vendor Payment Report.
      SuggestVendorPayment(GenJournalLine,PurchaseHeader."Posting Date",PurchaseHeader."Buy-from Vendor No.");

      // [THEN] General Journal Line does not exist for Suggested Vendor.
      Assert.IsFalse(FindGenJournalLine(GenJournalLine."Account Type"::Vendor,PurchaseHeader."Buy-from Vendor No."),NoFilterMsg);
    END;

    [Test]
    PROCEDURE PurchaseLineFactboxForPurchaseOrder@64();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseLineFactboxForPurchaseDocument(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE PurchaseLineFactboxForPurchaseQuote@71();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseLineFactboxForPurchaseDocument(PurchaseHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE PurchaseOrderArchiveUserRespCenterFilter@108();
    VAR
      ResponsibilityCenter@1000 : ARRAY [2] OF Record 5714;
      UserSetup@1004 : Record 91;
      PurchOrderArchives@1002 : TestPage 9347;
      VendorNo@1001 : ARRAY [2] OF Code[20];
      OldPurchRespCtrFilter@1005 : Code[10];
    BEGIN
      // [FEATURE] [Responsibility Center] [Archive]
      // [SCENARIO 375976] Purchase Order Archive shows entries depending on User's Responsibility Center
      Initialize;

      // [GIVEN] Responsibility Center "A" and "B"
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      OldPurchRespCtrFilter := UpdateUserSetupPurchRespCtrFilter(UserSetup,'');
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter[1]);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter[2]);

      // [GIVEN] Archived Purchase Order for Responsibility Center "A"
      CreateAndArchivePurchOrderWithRespCenter(
        VendorNo[1],ResponsibilityCenter[1].Code);

      // [GIVEN] Archived Purchase Order for Responsibility Center "B"
      CreateAndArchivePurchOrderWithRespCenter(
        VendorNo[2],ResponsibilityCenter[2].Code);

      // [GIVEN] User is assigned to Responsibility Center "A"
      UpdateUserSetupPurchRespCtrFilter(UserSetup,ResponsibilityCenter[1].Code);

      // [WHEN] Purchase Order Archive page is opened
      PurchOrderArchives.OPENVIEW;

      // [THEN] Only entries for Responsibility Center "A" are shown
      PurchOrderArchives."Buy-from Vendor No.".ASSERTEQUALS(VendorNo[1]);
      Assert.IsFalse(PurchOrderArchives.NEXT,PurchOrderArchiveRespCenterErr);

      UpdateUserSetupPurchRespCtrFilter(UserSetup,OldPurchRespCtrFilter);
    END;

    [Test]
    PROCEDURE PostPurchInvoiceWithDiffVendPostingGroup@101();
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1003 : Record 93;
      PurchHeader@1001 : Record 38;
      PurchLine@1002 : Record 39;
      VendLedgEntry@1004 : Record 25;
      InvNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380573] Purchase Invoice is posted with "Vendor Posting Group" from Purchase Header when "Vendor Posting Group" in Vendor Card is different

      Initialize;

      // [GIVEN] Vendor "X" with "Vendor Posting Group" "DOMESTIC"
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);

      // [GIVEN] Purchase Invoice with Vendor "X" and "Vendor Posting Group" "FOREIGN"
      LibraryPurchase.CreateVendorPostingGroup(VendorPostingGroup);
      PurchHeader.VALIDATE("Vendor Posting Group",VendorPostingGroup.Code);
      PurchHeader.MODIFY(TRUE);

      // [WHEN] Post Purchase Invoice
      InvNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Vendor Ledger Entry with "Vendor Posting Group" "FOREIGN" is posted
      LibraryERM.FindVendorLedgerEntry(VendLedgEntry,VendLedgEntry."Document Type"::Invoice,InvNo);
      VendLedgEntry.TESTFIELD("Vendor Posting Group",PurchHeader."Vendor Posting Group");
    END;

    [Test]
    PROCEDURE PurchasePriceMinimumQuantityWithMaxValue@169();
    VAR
      PurchasePrice@1000 : Record 7012;
      PurchasePrices@1001 : TestPage 7012;
    BEGIN
      // [FEATURE] [Purchase Price] [UT] [UI]
      // [SCENARIO 381273] User should be able to input value with 5 decimals in "Minimum Quantity" field of Purchase Price table
      CreatePurchasePriceWithMinimumQuantity(PurchasePrice,0.12345);
      PurchasePrices.OPENVIEW;
      PurchasePrices.GOTORECORD(PurchasePrice);
      Assert.AreEqual(FORMAT(0.12345),PurchasePrices."Minimum Quantity".VALUE,PurchasePrice.FIELDCAPTION("Minimum Quantity"));
    END;

    [Test]
    PROCEDURE PurchasePriceMinimumQuantityOverMaxValue@190();
    VAR
      PurchasePrice@1000 : Record 7012;
      PurchasePrices@1001 : TestPage 7012;
    BEGIN
      // [FEATURE] [Purchase Price] [UT] [UI]
      // [SCENARIO 381273] User should not be able to input value with more than 5 decimals in "Minimum Quantity" field of Purchase Price table
      CreatePurchasePriceWithMinimumQuantity(PurchasePrice,0.123456);
      PurchasePrices.OPENVIEW;
      PurchasePrices.GOTORECORD(PurchasePrice);
      Assert.AreNotEqual(FORMAT(0.123456),PurchasePrices."Minimum Quantity".VALUE,PurchasePrice.FIELDCAPTION("Minimum Quantity"));
      Assert.AreEqual(FORMAT(0.12346),PurchasePrices."Minimum Quantity".VALUE,PurchasePrice.FIELDCAPTION("Minimum Quantity"));
    END;

    [Test]
    PROCEDURE UI_CannotCopyPricesWhenVendorNoFilterHasMultipleVendors@93();
    VAR
      PurchasePrices@1000 : TestPage 7012;
      CopyFromVendorNo@1003 : Code[20];
      CopyToVendorNo@1002 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Purchase Price]
      // [SCENARIO 207389] Not possible to copy prices when multiple vendors specified in "Vendor No. Filter" on "Purchase Prices" page

      Initialize;

      // [GIVEN] Vendors "X" and "Y"
      CopyFromVendorNo := LibraryPurchase.CreateVendorNo;
      CopyToVendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Opened "Purchase Prices" page and "Vendor No. Filter" is "X|Y"
      PurchasePrices.OPENEDIT;
      PurchasePrices.VendNoFilterCtrl.SETVALUE(STRSUBSTNO('%1|%2',CopyFromVendorNo,CopyToVendorNo));

      // [WHEN] Press action "Copy Prices" on "Purchase Prices" page
      ASSERTERROR PurchasePrices.CopyPrices.INVOKE;

      // [THEN] Error message "There are more than one vendor selected by Vendor No. Filter. Specify a single Vendor No. by Vendor No. Filter to copy prices." is thrown
      Assert.ExpectedError(MultipleVendorsSelectedErr);
    END;

    [Test]
    [HandlerFunctions(PurchPricesSelectPriceOfVendorModalPageHandler)]
    PROCEDURE UI_CopyPriceOnPurchasePricesPage@84();
    VAR
      PurchasePrice@1002 : Record 7012;
      PurchasePrices@1001 : TestPage 7012;
      CopyFromVendorNo@1003 : Code[20];
      CopyToVendorNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Purchase Price]
      // [SCENARIO 207389] Copy price from one Vendor to another by "Copy Prices" action on "Purchase Prices" page

      Initialize;

      // [GIVEN] Vendors "X" and "Y"
      CopyToVendorNo := LibraryPurchase.CreateVendorNo;
      CopyFromVendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Purchase Price for Vendor "Y", "Direct Unit Cost" = 50
      CreatePurchPrice(PurchasePrice,CopyFromVendorNo);

      // [GIVEN] Opened "Purchase Prices" page and "Vendor No. Filter" is "X"
      PurchasePrices.OPENEDIT;
      PurchasePrices.VendNoFilterCtrl.SETVALUE(CopyToVendorNo);
      LibraryVariableStorage.Enqueue(CopyFromVendorNo); // pass to PurchPricesSelectPriceOfVendorModalPageHandler

      // [WHEN] Press action "Copy Prices" on "Purchase Prices" page and select price of Vendor "Y"
      PurchasePrices.CopyPrices.INVOKE;

      // [THEN] Purchase Price for Vendor "X" with "Direct Unit Cost" = 50 is created
      VerifyCopiedPurchPrice(PurchasePrice,CopyToVendorNo);
    END;

    [Test]
    [HandlerFunctions(PurchPricesSelectPriceOfVendorModalPageHandler)]
    PROCEDURE UI_CopyExistingPriceOnPurchasePricesPage@87();
    VAR
      PurchasePrice@1002 : Record 7012;
      PurchasePrices@1001 : TestPage 7012;
      CopyFromVendorNo@1003 : Code[20];
      CopyToVendorNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Purchase Price]
      // [SCENARIO 207389] Price not copies if it's already exist when use "Copy Prices" action on "Purchase Prices" page

      Initialize;

      // [GIVEN] Vendors "X" and "Y"
      CopyToVendorNo := LibraryPurchase.CreateVendorNo;
      CopyFromVendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Two identical Purchase Prices for Vendors "X" and "Y"
      CreatePurchPrice(PurchasePrice,CopyFromVendorNo);
      PurchasePrice."Vendor No." := CopyToVendorNo;
      PurchasePrice.INSERT;

      // [GIVEN] Opened "Purchase Prices" page and "Vendor No. Filter" is "X"
      PurchasePrices.OPENEDIT;
      PurchasePrices.VendNoFilterCtrl.SETVALUE(CopyToVendorNo);
      LibraryVariableStorage.Enqueue(CopyFromVendorNo); // pass to PurchPricesSelectPriceOfVendorModalPageHandler

      // [WHEN] Press action "Copy Prices" on "Purchase Prices" page and select price of Vendor "Y"
      PurchasePrices.CopyPrices.INVOKE;

      // [THEN] Existing Price not changed and no new Price was copied to Vendor "X"
      VerifyUnchangedPurchPrice(PurchasePrice);
    END;

    [Test]
    [HandlerFunctions(PurchPricesCancelPriceSelectionModalPageHandler)]
    PROCEDURE UI_DoNotSelectPriceWhenCopyPricesOnPurchasePricesPage@75();
    VAR
      PurchasePrice@1002 : Record 7012;
      PurchasePrices@1001 : TestPage 7012;
      CopyFromVendorNo@1003 : Code[20];
      CopyToVendorNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Purchase Price]
      // [SCENARIO 207389] Price not copies if nothing is selected when use "Copy Prices" action on "Purchase Prices" page

      Initialize;

      // [GIVEN] Vendors "X" and "Y"
      CopyToVendorNo := LibraryPurchase.CreateVendorNo;
      CopyFromVendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Purchase Price for Vendor "Y", "Direct Unit Cost" = 50
      CreatePurchPrice(PurchasePrice,CopyFromVendorNo);

      // [GIVEN] Opened "Purchase Prices" page and "Vendor No. Filter" is "X"
      PurchasePrices.OPENEDIT;
      PurchasePrices.VendNoFilterCtrl.SETVALUE(CopyToVendorNo);
      LibraryVariableStorage.Enqueue(CopyFromVendorNo); // pass to PurchPricesSelectPriceOfVendorModalPageHandler

      // [WHEN] Press action "Copy Prices" on "Purchase Prices" page and cancel selection
      PurchasePrices.CopyPrices.INVOKE;

      // [THEN] No price was copied to Vendor "X"
      PurchasePrice.SETRANGE("Vendor No.",CopyToVendorNo);
      Assert.RecordCount(PurchasePrice,0);
    END;

    [Test]
    PROCEDURE UT_CopyPurchPriceToVendorPurchPrice@173();
    VAR
      PurchasePrice@1002 : Record 7012;
      ExistingPurchasePrice@1001 : Record 7012;
      CopyFromVendorNo@1003 : Code[20];
      CopyToVendorNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UT] [Price] [Sales Price]
      // [SCENARIO 207389] Copy prices with CopySalesPriceToCustomersSalesPrice function in Sales Price table

      Initialize;

      CopyToVendorNo := LibraryPurchase.CreateVendorNo;
      CopyFromVendorNo := LibraryPurchase.CreateVendorNo;
      CreatePurchPrice(PurchasePrice,CopyFromVendorNo);

      CreatePurchPrice(PurchasePrice,CopyFromVendorNo);
      ExistingPurchasePrice := PurchasePrice;
      ExistingPurchasePrice."Vendor No." := CopyToVendorNo;
      ExistingPurchasePrice.INSERT;

      PurchasePrice.SETRANGE("Vendor No.",CopyFromVendorNo);
      PurchasePrice.CopyPurchPriceToVendorsPurchPrice(PurchasePrice,CopyToVendorNo);

      PurchasePrice.SETRANGE("Vendor No.",CopyToVendorNo);
      Assert.RecordCount(PurchasePrice,2);
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
    END;

    LOCAL PROCEDURE BatchPostPurchaseOrderRun@82();
    VAR
      BatchPostPurchaseOrders@1000 : Report 496;
    BEGIN
      COMMIT; // COMMIT is required here.
      CLEAR(BatchPostPurchaseOrders);
      BatchPostPurchaseOrders.RUN;
    END;

    LOCAL PROCEDURE CreateOneItemPurchDoc@7(VAR PurchHeader@1000 : Record 38;DocType@1001 : Option);
    VAR
      PurchLine@1003 : Record 39;
    BEGIN
      // Create a new invoiced blanket purchase order
      LibraryPurchase.CreatePurchHeader(PurchHeader,DocType,'');
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,'',LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE UpdateDefaultSafetyLeadTimeOnManufacturingSetup@29(DefaultSafetyLeadTime@1002 : DateFormula);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",DefaultSafetyLeadTime);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyPurchasesPayablesSetup@86(AllowVATDifference@1003 : Boolean) OldAllowVATDifference : Boolean;
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      OldAllowVATDifference := PurchasesPayablesSetup."Allow VAT Difference";
      PurchasesPayablesSetup.VALIDATE("Allow VAT Difference",AllowVATDifference);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseLineFactboxForPurchaseDocument@72(PurchaseDocType@1004 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
      PurchaseLine2@1002 : Record 39;
    BEGIN
      // Verify the error while opening the Availability from fact box in case the Type is G/L and the Account No. is same as Item No.

      // Setup: Create two new Purchase Order with Item and G/L Account with same code.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseDocType);
      CreatePurchaseDocumentforGLAcc(PurchaseHeader2,PurchaseLine2,PurchaseDocType,PurchaseLine."No.");

      // Exercise: Open Purchase line fact box and click on Availability option to shown Error.
      ASSERTERROR OpenPurchaseLinefactBox(PurchaseHeader2);

      // Verify: Verify Error when open purchase line fact box with created G/L Line purchase document.
      Assert.ExpectedError(STRSUBSTNO(PurchaseLineFactBoxErr,PurchaseLine2.Type::Item,PurchaseLine."Document Type",
          PurchaseLine2."Document No.",PurchaseLine2."Line No.",
          PurchaseLine2.Type::"G/L Account"));
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@92(VATDifferenceAllowed@1001 : Decimal) OldVATDifferenceAllowed : Decimal;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldVATDifferenceAllowed := GeneralLedgerSetup."Max. VAT Difference Allowed";
      GeneralLedgerSetup.VALIDATE("Max. VAT Difference Allowed",VATDifferenceAllowed);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyGLAccount@26(GenProdPostingGroup@1001 : Code[10];VATBusPostingGroup@1002 : Code[10];VATProdPostingGroup@1003 : Code[10]) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGLAccountWithVAT@60(VAR GLAccount@1000 : Record 15);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Purchase);
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@33(VAR VATPostingSetup@1000 : Record 325;VATBusPostingGroup@1002 : Code[10];VATProdPostingGroup@1001 : Code[10];PurchaseVATAccount@1003 : Code[20];PurchVATUnrealAccount@1004 : Code[20]);
    BEGIN
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroup,VATProdPostingGroup);
      VATPostingSetup.VALIDATE("VAT Identifier",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.VALIDATE("VAT %",LibraryRandom.RandDec(10,2));
      VATPostingSetup.VALIDATE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Full VAT");
      VATPostingSetup.VALIDATE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)");
      VATPostingSetup.VALIDATE("Purchase VAT Account",PurchaseVATAccount);
      VATPostingSetup.VALIDATE("Purch. VAT Unreal. Account",PurchVATUnrealAccount);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@38(VATBusPostingGroup@1000 : Code[10];No@1001 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateAndModifyVendor(VATBusPostingGroup));
      CreatePurchaseLine(PurchaseHeader,No);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndModifyVendor@39(VATBusPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseLine@15(VAR PurchaseHeader@1001 : Record 38;No@1002 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Using Random value for Quantity and Direct Unit Cost because value is not important.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",No,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineDiscount@46(VAR PurchaseLineDiscount@1000 : Record 7014;PurchasePrice@1001 : Record 7012);
    BEGIN
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,PurchasePrice."Item No.",PurchasePrice."Vendor No.",WORKDATE,'','',PurchasePrice."Unit of Measure Code",
        PurchasePrice."Minimum Quantity" * 2);
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@178(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option) : Code[20];
    VAR
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,CreateVendor);
      CreatePurchaseLineModified(PurchaseLine,PurchaseHeader);
      EXIT(NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentforGLAcc@89(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option;ItemNo@1004 : Code[20]) : Code[20];
    VAR
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,CreateVendor);
      CreatePurchaseLineforGLAcc(PurchaseLine,PurchaseHeader,ItemNo);
      EXIT(NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@47(VAR PurchaseLine@1003 : Record 39;PurchasePrice@1004 : Record 7012);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,PurchasePrice."Vendor No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchasePrice."Item No.",PurchasePrice."Minimum Quantity" / 2);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchasePrice."Item No.",PurchasePrice."Minimum Quantity");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchasePrice."Item No.",PurchasePrice."Minimum Quantity" * 2);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderCard@34() : Code[20];
    VAR
      PurchaseOrder@1000 : TestPage 50;
      PurchaseOrderNo@1001 : Code[20];
    BEGIN
      PurchaseOrder.OPENNEW;
      PurchaseOrder."Buy-from Vendor No.".ACTIVATE;
      PurchaseOrderNo := PurchaseOrder."No.".VALUE;
      PurchaseOrder.OK.INVOKE;
      EXIT(PurchaseOrderNo);
    END;

    LOCAL PROCEDURE CreatePurchasePrice@42(VAR PurchasePrice@1000 : Record 7012);
    VAR
      Item@1001 : Record 27;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryCosting@1004 : Codeunit 132200;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryCosting.CreatePurchasePrice(
        PurchasePrice,CreateVendor,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",LibraryRandom.RandDec(10,2));
      PurchasePrice.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));  // Used Random Value for Direct Unit Cost.
      PurchasePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineFromPurchaseOrderPage@35(ItemNo@1003 : Code[20];PurchaseHeaderNo@1000 : Code[20];VendorNo@1005 : Code[20];Quantity@1006 : Decimal);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeaderNo);
      PurchaseOrder."Buy-from Vendor No.".SETVALUE(VendorNo);
      PurchaseOrder.PurchLines.Type.SETVALUE(PurchaseLine.Type::Item);
      PurchaseOrder.PurchLines."No.".SETVALUE(ItemNo);
      PurchaseOrder.PurchLines.Quantity.SETVALUE(Quantity);
      PurchaseOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleLines@63(VAR PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Header and Lines.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      CreateAndModifyPurchaseLine(PurchaseHeader,PurchaseLine,1);
      CreateAndModifyPurchaseLine(PurchaseHeader,PurchaseLine,-1);
      PurchaseLine.VALIDATE("Qty. to Receive",0);  // Take Quantity to Receive as 0 on second line to Calculate VAT Amount for single Line.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyPurchaseLine@54(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1001 : Record 39;SignFactor@1003 : Integer);
    BEGIN
      // Create Purchase Lines with Random Quantity And Direct Unit Cost.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,SignFactor * LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteVATPostingSetup@12(VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteUserSetup@142(VAR UserSetup@1000 : Record 91;ResponsibilityCenterCode@1001 : Code[10]);
    BEGIN
      UserSetup.SETRANGE("Purchase Resp. Ctr. Filter",ResponsibilityCenterCode);
      UserSetup.FINDFIRST;
      UserSetup.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindGenJournalLine@98(AccountType@1000 : Option;AccountNo@1001 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account Type",AccountType);
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      EXIT(GenJournalLine.FINDFIRST);
    END;

    LOCAL PROCEDURE FindGLEntry@28(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDLAST;
    END;

    LOCAL PROCEDURE FindVATEntry@58(VAR VATEntry@1002 : Record 254;DocumentNo@1000 : Code[20];Type@1001 : Option);
    BEGIN
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.SETRANGE(Type,Type);
      VATEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVATPostingSetup@10(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE CreateAndArchivePurchOrderWithRespCenter@128(VAR VendorNo@1000 : Code[20];RespCenterCode@1001 : Code[10]);
    VAR
      PurchHeader@1002 : Record 38;
      PurchLine@1004 : Record 39;
      ArchiveManagement@1003 : Codeunit 5063;
    BEGIN
      CreatePurchaseHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendor);
      VendorNo := PurchHeader."Buy-from Vendor No.";
      PurchHeader.VALIDATE("Responsibility Center",RespCenterCode);
      PurchHeader.MODIFY(TRUE);
      CreatePurchaseLineModified(PurchLine,PurchHeader);
      LibraryPurchase.ReleasePurchaseDocument(PurchHeader);
      ArchiveManagement.StorePurchDocument(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@111(VAR GenJournalBatch@1000 : Record 232;ForceDocBalance@1002 : Boolean);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Force Doc. Balance",ForceDocBalance);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@11(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountNo@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type",
        GenJournalLine."Account Type",AccountNo,Amount);
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJournalLines@13(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountNo@1002 : Code[20]) Amount : Decimal;
    VAR
      Counter@1003 : Integer;
    BEGIN
      FOR Counter := 1 TO LibraryRandom.RandInt(5) + 1 DO BEGIN
        CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,AccountNo,LibraryRandom.RandDec(100,2) * 100);
        Amount += GenJournalLine.Amount;
      END;
    END;

    LOCAL PROCEDURE CreateSetupForGLAccounts@48(VAR VATPostingSetup@1005 : Record 325;VAR GLAccountNo@1003 : Code[20]);
    VAR
      VATProductPostingGroup@1000 : Record 324;
      VATBusinessPostingGroup@1001 : Record 323;
      GenProductPostingGroup@1002 : Record 251;
      GLAccountNo2@1004 : Code[20];
    BEGIN
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.FindVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      GLAccountNo := CreateAndModifyGLAccount(GenProductPostingGroup.Code,'',VATProductPostingGroup.Code);
      GLAccountNo2 := CreateAndModifyGLAccount('',VATBusinessPostingGroup.Code,VATProductPostingGroup.Code);
      CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProductPostingGroup.Code,GLAccountNo,GLAccountNo2);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@20(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineModified@30(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreatePurchaseLineforGLAcc@91(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateGLAccountAndRename(ItemNo),
        LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateVendor@22() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItem@31() : Code[20];
    VAR
      Item@1000 : Record 27;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateGLAccountAndRename@77(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      CreateGLAccountWithVAT(GLAccount);
      GLAccount.RENAME(ItemNo);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateResponsibilityCenterAndUserSetup@109() : Code[10];
    VAR
      Location@1004 : Record 14;
      UserSetup@1000 : Record 91;
      ResponsibilityCenter@1001 : Record 5714;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryService@1005 : Codeunit 131902;
      LibraryTimeSheet@1002 : Codeunit 131904;
      LibraryWarehouse@1003 : Codeunit 132204;
    BEGIN
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      ResponsibilityCenter.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));
      ResponsibilityCenter.MODIFY(TRUE);
      LibraryInventory.UpdateInventoryPostingSetup(Location);
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY(TRUE);
      EXIT(ResponsibilityCenter.Code);
    END;

    LOCAL PROCEDURE CreatePurchasePriceWithMinimumQuantity@176(VAR PurchasePrice@1001 : Record 7012;MinQty@1000 : Decimal);
    BEGIN
      PurchasePrice.INIT;
      PurchasePrice.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      PurchasePrice.VALIDATE("Item No.",LibraryInventory.CreateItemNo);
      PurchasePrice.VALIDATE("Minimum Quantity",MinQty);
      PurchasePrice.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchPrice@123(VAR PurchasePrice@1000 : Record 7012;VendNo@1001 : Code[20]);
    BEGIN
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendNo,LibraryInventory.CreateItemNo,WORKDATE,'','','',0);
      PurchasePrice.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchasePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenPurchasePricesPage@119(VAR PurchasePrices@1000 : TestPage 7012;VendorNo@1002 : Code[20];StartingDateFilter@1003 : Text[30]);
    VAR
      VendorList@1001 : TestPage 27;
    BEGIN
      VendorList.OPENEDIT;
      VendorList.FILTER.SETFILTER("No.",VendorNo);
      PurchasePrices.TRAP;
      VendorList."Page Purchase Prices".INVOKE;
      PurchasePrices.StartingDateFilter.SETVALUE(StartingDateFilter);
    END;

    LOCAL PROCEDURE OpenPurchaseLinefactBox@65(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseOrder@1001 : TestPage 50;
      PurchaseQuote@1002 : TestPage 49;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order:
          BEGIN
            PurchaseOrder.OPENEDIT;
            PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
            PurchaseOrder."Purchase Line FactBox".Availability.DRILLDOWN;
          END;
        PurchaseHeader."Document Type"::Quote:
          BEGIN
            PurchaseQuote.OPENEDIT;
            PurchaseQuote.FILTER.SETFILTER("No.",PurchaseHeader."No.");
            PurchaseQuote."Purchase Line FactBox".Availability.DRILLDOWN;
          END;
      END;
    END;

    LOCAL PROCEDURE OpenVendorHistPaytoFactBox@61(VAR VendorHistPaytoFactBox@1000 : TestPage 9096;No@1002 : Code[20]);
    BEGIN
      VendorHistPaytoFactBox.OPENVIEW;
      VendorHistPaytoFactBox.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@62(VAR PurchaseHeader@1002 : Record 38;DocumentType@1001 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,DocumentType);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE StartingDateOnPurchasePrice@57(StartingDateFilter@1000 : Text[1];StartingDate@1001 : Date);
    VAR
      Vendor@1003 : Record 23;
      PurchasePrices@1002 : TestPage 7012;
    BEGIN
      // Setup: Create Vendor.
      LibraryPurchase.CreateVendor(Vendor);

      // Exercise: Open Purchase Prices Page and Enter date code in Starting Date Filter.
      OpenPurchasePricesPage(PurchasePrices,Vendor."No.",StartingDateFilter);

      // Verify: Verify that correct date comes in "Starting Date Filter".
      PurchasePrices.StartingDateFilter.ASSERTEQUALS(StartingDate);
    END;

    LOCAL PROCEDURE SuggestVendorPayment@78(VAR GenJournalLine@1006 : Record 81;LastPmtDate@1005 : Date;VendorNo@1001 : Code[20]);
    VAR
      GenJournalTemplate@1008 : Record 80;
      GenJournalBatch@1007 : Record 232;
      Vendor@1003 : Record 23;
      SuggestVendorPayments@1000 : Report 393;
      BalanceAccountType@1004 : 'G/L Account,Customer,Vendor,Bank Account';
    BEGIN
      // Create General Journal Template and General Journal Batch.
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);

      // Run Suggest Vendor Payments Report.
      CLEAR(SuggestVendorPayments);
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      Vendor.SETRANGE("No.",VendorNo);
      SuggestVendorPayments.SETTABLEVIEW(Vendor);
      SuggestVendorPayments.InitializeRequest(LastPmtDate,FALSE,0,FALSE,LastPmtDate,VendorNo,TRUE,
        BalanceAccountType::"G/L Account",'',0);  // Blank value for Account No.
      SuggestVendorPayments.USEREQUESTPAGE(FALSE);
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE UpdateUserSetupPurchRespCtrFilter@74(VAR UserSetup@1000 : Record 91;PurchRespCtrFilter@1001 : Code[10]) OldPurchRespCtrFilter : Code[10];
    BEGIN
      OldPurchRespCtrFilter := UserSetup."Purchase Resp. Ctr. Filter";
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",PurchRespCtrFilter);
      UserSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceLine@18(DocumentNo@1000 : Code[20];InvDiscAmount@1001 : Decimal);
    VAR
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("Inv. Discount Amount",InvDiscAmount);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceHeader@147(No@1000 : Code[20];DocumentDate@1001 : Date);
    VAR
      PurchInvHeader@1002 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("No.",No);
      PurchInvHeader.FINDFIRST;
      PurchInvHeader.TESTFIELD("Document Date",DocumentDate);
    END;

    LOCAL PROCEDURE VerifyTransactionNoOnGLEntries@23(DocumentNo@1000 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
      TransactionNo@1001 : Integer;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDLAST;
      TransactionNo := GLEntry."Transaction No.";

      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Transaction No.",TransactionNo);
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTransactionNoCalculation@19(DocumentNo@1001 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      TransactionNo@1002 : Integer;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo);
      TransactionNo := GLEntry."Transaction No.";
      GLEntry.NEXT(-1);
      Assert.AreNotEqual(
        TransactionNo - GLEntry."Transaction No.",1,
        STRSUBSTNO(MustNotBeEqualErr,TransactionNo - GLEntry."Transaction No.",1));
    END;

    LOCAL PROCEDURE VerifyArchPurchaseOrderHeader@113(PurchHeader@1000 : Record 38);
    VAR
      PurchHeaderArchive@1001 : Record 5109;
    BEGIN
      PurchHeaderArchive.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchHeaderArchive.SETRANGE("No.",PurchHeader."No.");
      PurchHeaderArchive.FINDFIRST;

      PurchHeaderArchive.TESTFIELD("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");
      PurchHeaderArchive.TESTFIELD("Due Date",PurchHeader."Due Date");
      PurchHeaderArchive.TESTFIELD("Payment Terms Code",PurchHeader."Payment Terms Code");
      PurchHeaderArchive.TESTFIELD("Payment Discount %",PurchHeader."Payment Discount %");
      PurchHeaderArchive.TESTFIELD(Amount,PurchHeader.Amount);
      PurchHeaderArchive.TESTFIELD("Amount Including VAT",PurchHeader."Amount Including VAT");
    END;

    LOCAL PROCEDURE VerifyArchPurchaseOrderLine@112(PurchLine@1000 : Record 39);
    VAR
      PurchLineArchive@1001 : Record 5110;
    BEGIN
      // Assumes only one line of each type exists in the archived purchase order.
      PurchLineArchive.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLineArchive.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLineArchive.SETRANGE(Type,PurchLine.Type);
      PurchLineArchive.FINDFIRST;

      // Check quantities are right
      PurchLineArchive.TESTFIELD(Quantity,PurchLine.Quantity);
      PurchLineArchive.TESTFIELD("Quantity Invoiced",PurchLine."Quantity Invoiced");
      PurchLineArchive.TESTFIELD("Quantity Received",PurchLine."Quantity Received");

      // Check prices are right
      PurchLineArchive.TESTFIELD("Unit Price (LCY)",PurchLine."Unit Price (LCY)");
      PurchLineArchive.TESTFIELD(Amount,PurchLine.Amount);
      PurchLineArchive.TESTFIELD("Amount Including VAT",PurchLine."Amount Including VAT");

      // Check discounts are right
      PurchLineArchive.TESTFIELD("Line Discount %",PurchLine."Line Discount %");
      PurchLineArchive.TESTFIELD("Line Discount Amount",PurchLine."Line Discount Amount");
    END;

    LOCAL PROCEDURE VerifyPurchaseOrder@36(DocumentNo@1001 : Code[20];VendorNo@1004 : Code[20];ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",DocumentNo);
      PurchaseHeader.FINDFIRST;
      PurchaseHeader.TESTFIELD("Buy-from Vendor No.",VendorNo);
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("No.",ItemNo);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPriceAndLineDiscountOnPurchaseLine@50(PurchaseLine@1002 : Record 39;Quantity@1001 : Decimal;DirectUnitCost@1000 : Decimal;LineDiscountPercentage@1004 : Decimal);
    VAR
      PurchaseLine2@1003 : Record 39;
    BEGIN
      PurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLine2.SETRANGE("No.",PurchaseLine."No.");
      PurchaseLine2.SETRANGE(Quantity,Quantity);
      PurchaseLine2.FINDFIRST;
      PurchaseLine2.TESTFIELD("Direct Unit Cost",DirectUnitCost);
      PurchaseLine2.TESTFIELD("Line Discount %",LineDiscountPercentage);
    END;

    LOCAL PROCEDURE VerifyVATAmount@59(DocumentNo@1002 : Code[20]);
    VAR
      VATEntry@1000 : Record 254;
      VATAmount@1001 : Decimal;
    BEGIN
      // Verifying VAT Entry fields.
      FindVATEntry(VATEntry,DocumentNo,VATEntry.Type::Purchase);
      VATAmount := LibraryVariableStorage.DequeueDecimal;
      Assert.AreNearlyEqual(
        VATAmount,VATEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VATEntry.FIELDCAPTION(Amount),VATAmount,VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCopiedPurchPrice@126(CopiedFromPurchasePrice@1000 : Record 7012;VendNo@1002 : Code[20]);
    VAR
      PurchasePrice@1001 : Record 7012;
    BEGIN
      PurchasePrice := CopiedFromPurchasePrice;
      PurchasePrice."Vendor No." := VendNo;
      PurchasePrice.FIND;
      PurchasePrice.TESTFIELD("Direct Unit Cost",CopiedFromPurchasePrice."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyUnchangedPurchPrice@134(PurchPrice@1001 : Record 7012);
    BEGIN
      PurchPrice.FIND; // test that existing price remains unchanged
      PurchPrice.SETRANGE("Vendor No.",PurchPrice."Vendor No.");
      Assert.RecordCount(PurchPrice,1);
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchaseOrderCHandler@68(VAR BatchPostPurchaseOrders@1000 : TestRequestPage 496);
    BEGIN
      // Handles the Batch Post Purchase Orders Report.
      BatchPostPurchaseOrders.Receive.SETVALUE(TRUE);
      BatchPostPurchaseOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchaseOrders.PostingDate.SETVALUE('');
      BatchPostPurchaseOrders.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostPurchaseOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchCountHandler@88(VAR BatchPostPurchaseOrders@1000 : TestRequestPage 496);
    BEGIN
      // Handles the Batch Post Purchase Orders Report.
      BatchPostPurchaseOrders.Receive.SETVALUE(TRUE);
      BatchPostPurchaseOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchaseOrders.PostingDate.SETVALUE(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(20)) + 'D>',WORKDATE));
      BatchPostPurchaseOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchDocDateHandler@103(VAR BatchPostPurchaseOrders@1000 : TestRequestPage 496);
    VAR
      DocumentDate@1001 : Date;
    BEGIN
      // Handles the Batch Post Purchase Orders Report.
      DocumentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(20)) + 'D>',WORKDATE);
      LibraryVariableStorage.Enqueue(DocumentDate);
      BatchPostPurchaseOrders.Receive.SETVALUE(TRUE);
      BatchPostPurchaseOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchaseOrders.PostingDate.SETVALUE(DocumentDate);
      BatchPostPurchaseOrders.ReplaceDocumentDate.SETVALUE(TRUE);
      BatchPostPurchaseOrders.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@21(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@25(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderStatisticsHandler@67(VAR PurchaseOrderStatistics@1000 : TestPage 403);
    BEGIN
      // Modal Page Handler.
      PurchaseOrderStatistics.NoOfVATLines_Invoicing.DRILLDOWN;
    END;

    [ModalPageHandler]
    PROCEDURE PurchPricesSelectPriceOfVendorModalPageHandler@99(VAR PurchasePrices@1000 : TestPage 7012);
    BEGIN
      PurchasePrices.VendNoFilterCtrl.SETVALUE(LibraryVariableStorage.DequeueText);
      PurchasePrices.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchPricesCancelPriceSelectionModalPageHandler@100(VAR PurchasePrices@1000 : TestPage 7012);
    BEGIN
      PurchasePrices.Cancel.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Purchase]
      Unsupported version tags:
      NA: Unable to Execute

      Check the functionalities of Purchase Order.
       1.  Check Number of Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Order.
       2.  Check Number of Invoices on the Vendor Hist. Pay-to FactBox after creating a new Purchase Invoice.
       3.  Check Number of Credit Memos on the Vendor Hist. Pay-to FactBox after creating a new Purchase Credit Memo.
       4.  Check Number of Quotes on the Vendor Hist. Pay-to FactBox after creating a new Purchase Quote.
       5.  Check Number of Return Orders on the Vendor Hist. Pay-to FactBox after creating a new Purchase Return Order.
       6.  Check Number of Posted Invoices and Number of Posted Receipts on the Vendor Hist. Pay-to FactBox after posting a new Purchase Order.
       7.  Check Number of Posted Credit Memos on the Vendor Hist. Pay-to FactBox after posting a new Purchase Credit Memo.
       8.  Check Number of Posted Return Shipments on the Vendor Hist. Pay-to FactBox after posting a new Purchase Return Order.
       9.  Set Default Safety Lead Time in Manufacturing Setup and verify Expected Receipt Date on Purchase Order Line.
       10. Verify creation of Purchase Order by page.
       11. Verify Purchase Price and Line Discount.
       12. Check Responsibility Center on Purchase Order.
       13. Check Responsibility Center on Posted Purchase Document.
       14. Verify Purchase Order Posting After Changing VAT Amount.
       15. Verify that correct date gets updated on Purchase Price window in "Starting Date Filter" field when user enters W.
       16. Verify that correct date gets updated on Purchase Price window in "Starting Date Filter" field when user enters T.
       17. Verify General Journal Line after Suggest Vendor Payments with Positive Balance.
       18. Verify General Journal Line after Suggest Vendor Payments with Negative Balance.
       19. Verify the error while opening the Availability from fact box in case the Type is G/L and the Account No. is same as Item No For Purchase Order.
       20. Verify the error while opening the Availability from fact box in case the Type is G/L and the Account No. is same as Item No For Purchase Quote.

      // Payables tests
      WI 141288 - TCCU321 --> ArchivePurchaseOrder
                              ArchivePurchaseOrderSeveralTimes
      WI 143258 - TCRP491 --> DeleteInvdBlnktPurchOrders

      Covers Test Cases: 252916
      -----------------------------------------------------------
      Test Function Name                                  TFS ID
      -----------------------------------------------------------
      PurchaseInvoiceTransactionNo                        126237
      SeveralLinesTransactionNo                           126237
      TransactionNoForceBalanceOff                        126237
      TransactionNoForceBalanceOn                         126237

      Covers Test Cases: 251015
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchaseOrderBatchPostDate                          128995
      PurchaseOrderBatchPostCount                         128995
      PurchaseOrderBatchPostInvDisc                       128995
      PurchaseOrderBatchReplaceDate                       128995

      Covers Test Cases: 265068
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      VendorHistoryForPurchaseOrder                       141359
      VendorHistoryForPurchaseInvoice                     141359
      VendorHistoryForPurchaseCreditMemo                  141359
      VendorHistoryForPurchaseQuotes                      141359
      VendorHistoryForPurchaseReturnOrder                 141259
      VendorHistoryForPostedPurchaseInvoiceAndReceipt     141359
      VendorHistoryForPostedPurchaseCreditMemo            141359
      VendorHistoryForPostedPurchaseReturnShipment        141359

      Covers Test Cases: 264616
      -----------------------------------------------------------
      Test Function Name                                  TFS ID
      -----------------------------------------------------------
      PurchaseOrderWithExpectedReceiptDate                129299

      Covers Test Cases - 264609
      ----------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------
      PurchaseOrderByPage                                 131110

      Covers Test Cases - 266436
      ----------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------
      PurchasePriceAndLineDiscount                        129298

      Covers Test Cases: 243254
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      ResponsibilityCenterOnPurchaseOrder                 203169
      ResponsibilityCenterOnPostedPurchaseDocument        203169

      Covers Test Cases - 282613
      -----------------------------------------------------------
      Test Function Name                                  TFS ID
      -----------------------------------------------------------
      StartingDateAsWorkDateOnPurchasePrice,              279746
      StartingDateAsTodayOnPurchasePrice

      Covers Test Cases - 320046
      -----------------------------------------------------------
      Test Function Name                                  TFS ID
      -----------------------------------------------------------
      SugVendPmtWithPosVendBal, SugVendPmtWithNegVendBal  301950

      Test Function Name                                  TFS ID
      -----------------------------------------------------------
      PurchaseLineFactboxForPurchaseOrder,                 72450
      PurchaseLineFactboxForPurchaseQuote
    }
    END.
  }
}

