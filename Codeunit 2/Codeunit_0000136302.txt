OBJECT Codeunit 136302 Job Consumption Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryJob@1001 : Codeunit 131920;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryInventory@1018 : Codeunit 132201;
      LibraryWarehouse@1017 : Codeunit 132204;
      LibraryItemTracking@1027 : Codeunit 130502;
      LibraryCosting@1016 : Codeunit 132200;
      LibraryERM@1019 : Codeunit 131300;
      Assert@1003 : Codeunit 130000;
      JobTaskBlankErrorServiceTier@1015 : TextConst '@@@="%1=Field name,%2=Table name,%3=Field name,%4=Field value,%5=Field name,%6=Field value,%7=Field name,%8=Field value";ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      CodeMandatoryDimensionError@1010 : TextConst '@@@="%1=Field value,%2=Field value,%3=Field value,%4=Field name,%5=Field name,%6=Field name";ENU=The dimensions used in Order %1, line no. %2 are invalid. Select a %3 for the %4 %5 for Job %6.';
      SameCodeDimensionError@1009 : TextConst '@@@="%1=Field value,%2=Field value,%3=Field value,%4=Field value,%5=Field name,%6=Field name,%7=Field name";ENU=The dimensions used in Order %1, line no. %2 are invalid. Select %3 %4 for the %5 %6 for Job %7.';
      NoCodeDimensionError@1008 : TextConst '@@@="%1=Field value,%2=Field value,%3=Field value,%4=Field value,%5=Field name";ENU=The dimensions used in Order %1, line no. %2 are invalid. %3 %4 must not be mentioned for Job %5.';
      LibraryUtility@1023 : Codeunit 131000;
      LibrarySales@1043 : Codeunit 130509;
      LibraryPlanning@1044 : Codeunit 132203;
      LibraryRandom@1022 : Codeunit 130440;
      LibraryVariableStorage@1038 : Codeunit 131004;
      LibrarySetupStorage@1013 : Codeunit 131009;
      LibraryDimension@1014 : Codeunit 131001;
      Initialized@1000 : Boolean;
      WrongDimJobLedgerEntryError@1006 : TextConst 'ENU=Wrong Dim on Job Ledger entry %1! Expected ID: %2, Actual ID: %3.';
      FieldError@1007 : TextConst 'ENU=%1 must be equal  %2 in %3.';
      TypeReservationError@1012 : TextConst '@@@=%1 Type Field Caption,%2 Table Caption,%3 Job No. FieldCaption,%4 Job No.,%5 Job Task No. Field Caption,%6 Job Task No.,%7 Line No. Field Caption,%8 Line No.;ENU="%1 must be equal to ''Item''  in %2: %3=%4, %5=%6, %7=%8. Current value is ''Resource''."';
      PlanningDateError@1011 : TextConst '@@@=%1 Planning Date Field Caption,%2 Table Caption,%3 Job No. FieldCaption,%4 Job No.,%5 Job Task No. Field Caption,%6 Job Task No.,%7 Line No. Field Caption,%8 Line No.;ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      EmptyFieldError@1020 : TextConst '@@@=%1 Field Caption,%2 Table Caption,%3 Job No. FieldCaption,%4 Job No.,%5 Job Task No. Field Caption,%6 Job Task No.,%7 Line No. Field Caption,%8 Line No.;ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      JobStatusError@1004 : TextConst '@@@=%1: Field Caption1,%2: Field Value1,%3: Table Caption,%4: Field Caption2,%5: Field Value2,%6: Field Value3;ENU="%1 must be equal to ''%2''  in %3: %4=%5. Current value is ''%6''."';
      QtyPerUOMError@1005 : TextConst '@@@="%1=Fieldname ,%2=FieldValue,%3=TableName,%4=FieldName,%5=FieldValue,%6=FieldName,%7=FieldValue,%8=FieldName,%9=FieldValue,%10=FieldValue";ENU="%1 must be equal to ''%2''  in %3: %4=%5, %6=%7, %8=%9. Current value is ''%10''."';
      JobNoErr@1024 : TextConst 'ENU=Job No. must be equal to ''''  in Purchase Line';
      ValueMustMatchErr@1025 : TextConst 'ENU=%1 must equal to %2.';
      EmptyValueErr@1026 : TextConst 'ENU=%1 is empty in %2';
      WrongTotalCostAmtErr@1028 : TextConst '@@@="%1 = Document No. (e.g. ""Total cost amount must be 0 in Posted Purchase Receipt 107031"").";ENU=Total cost amount must be 0 in Posted Purchase Receipt %1.';

    [Test]
    PROCEDURE DocumentDateOnJobLedgerEntry@162();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Document Date on Job Ledger Entry.

      // Setup: Create Purchase Invoice with Job.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,CreateItem);

      // Excercise: Post the Purhcase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Document Date on Job Ledger Entry.
      VerifyDocumentDateOnJobLedgerEntry(JobTask."Job No.",DocumentNo,PurchaseHeader."Document Date");
    END;

    [Test]
    PROCEDURE JobPlanningLineWithFullQuantity@168();
    VAR
      Quantity@1005 : Decimal;
    BEGIN
      // Verify Quantity on Job Planning Line when Purchase Order posted with full Quantity.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      PreparePurchHeaderWithJobPlanningNo(Quantity,Quantity);
    END;

    [Test]
    PROCEDURE JobPlanningLineWithPartialQuantity@167();
    VAR
      Quantity@1005 : Decimal;
    BEGIN
      // Verify Quantity on Job Planning Line when Purchase Order posted with partial Quantity.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      PreparePurchHeaderWithJobPlanningNo(Quantity,Quantity / 2);
    END;

    [Test]
    PROCEDURE PreparePurchHeaderWithRemainingQty@170();
    VAR
      JobPlanningLine@1003 : Record 1003;
      PurchaseHeader@1001 : Record 38;
      Quantity@1000 : Decimal;
      QtyToReceive@1005 : Decimal;
    BEGIN
      // Verify Quantity on Job Planning Line when Purchase Order posted with Remaining Quantity.

      // Setup: Create Purchase Order with Job Planning Line No. and update Quantity To Receive on Purchase Line.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      QtyToReceive := Quantity / 2;
      PreparePurchHeaderAndJobPlanningLine(PurchaseHeader,JobPlanningLine,Quantity,QtyToReceive);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);
      UpdatePurchLineQtyToReceive(PurchaseHeader,Quantity - QtyToReceive);

      // 2. Exercise: Post Purchase Order with Remaining Quantity.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify Quantity on Job Planning Line.
      VerifyQuantityOnJobPlanningLine(JobPlanningLine,Quantity);
    END;

    [Test]
    PROCEDURE JobPlanningLineOnPurchaseOrderPartialQtyToInvoice@173();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseHeader@1001 : Record 38;
      Quantity@1000 : Decimal;
    BEGIN
      // Verify Quantity on Job Planning Line when Purchase Order after updating Qty. to Invoice posted with partial Quantity.

      // Setup: Create Purchase Order with Job Planning Line No. and update Quantity To Invoice on Purchase Line.
      Initialize;
      Quantity := CreatePurchaseOrderWithUpdatedQuantities(PurchaseHeader,JobPlanningLine);

      // Exercise: Post Purchase Order with updated Qty. to Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Quantity on Job Planning Line.
      VerifyQuantityOnJobPlanningLine(JobPlanningLine,Quantity);
    END;

    [Test]
    PROCEDURE JobPlanningLineOnPurchaseOrderFullQtyToInvoice@174();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseHeader@1001 : Record 38;
      Quantity@1000 : Decimal;
    BEGIN
      // Verify Quantity on Job Planning Line when Purchase Order after updating Qty. to Invoice posted with full Quantity.

      // Setup: Create Purchase Order with Job Planning Line No. and update Quantity To Invoice on Purchase Line.
      Initialize;
      Quantity := CreatePurchaseOrderWithUpdatedQuantities(PurchaseHeader,JobPlanningLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);

      // Exercise: Post Purchase Order with updated Qty. to Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Quantity on Job Planning Line.
      VerifyQuantityOnJobPlanningLine(JobPlanningLine,Quantity);
    END;

    [Test]
    PROCEDURE JobRemainingQtyOnPurchaseLine@179();
    VAR
      JobPlanningLine@1002 : Record 1003;
      JobPlanningLine2@1004 : Record 1003;
      JobTask@1005 : Record 1001;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      Quantity@1000 : Decimal;
      RemainingQty@1006 : Decimal;
    BEGIN
      // Verify Job Remaining Qty. on Purchase Line when Job Planning Line No. is updated.

      // Setup: Prepare Purchase Order with Job Planning Line No.
      Initialize;
      RemainingQty := LibraryRandom.RandDec(3,2);
      Quantity := RemainingQty + LibraryRandom.RandDec(7,2);
      PreparePurchHeaderAndJobPlanningLine(PurchaseHeader,JobPlanningLine,Quantity,Quantity - RemainingQty);
      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      CreateJobPlanningLine(JobPlanningLine2,JobTask,
        JobPlanningLine.Type::Item,JobPlanningLine."No.",LibraryRandom.RandDecInRange(11,20,2),TRUE);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);

      // Exercise: Update Job Planning Line No.
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine2."Line No.");
      PurchaseLine.MODIFY(TRUE);

      // Verify: Verify Job Remaining Qty. on Purchase Line.
      PurchaseLine.TESTFIELD("Job Remaining Qty.",JobPlanningLine2."Remaining Qty." - PurchaseLine."Qty. to Invoice");
    END;

    [Test]
    PROCEDURE JobOnPurchaseInvoiceLine@26();
    VAR
      OrderPurchaseHeader@1000 : Record 38;
      InvoicePurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      TempPurchaseLine@1003 : TEMPORARY Record 39;
    BEGIN
      // Test integration of Jobs with Get Receipt Lines. Check that the information related to Job is copied to Purchase Invoice Line
      // after creation of Invoice Lines by using the Get Receipt Lines function for a Purchase Order with Job attached to it. Test
      // modification of Job related fields is not allowed after receipt.
      // Check Job Planning Line, Job Ledger Entry, G/L Entry, Value Entry created after posting of Purchase Invoice.

      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines and post it as Receive.
      Initialize;

      CreatePurchaseOrderForJobTask(OrderPurchaseHeader);
      GetPurchaseLines(OrderPurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);
      LibraryPurchase.PostPurchaseDocument(OrderPurchaseHeader,TRUE,FALSE);

      // 2. Verify: Check that job info for received order cannot be modified.
      VerifyModifyPurchaseDocJobInfo(OrderPurchaseHeader);
      VerifyJobInfoOnPurchRcptLines(TempPurchaseLine);
      VerifyItemLedger(TempPurchaseLine);

      // 3. Exercise: Create a Purchase Invoice by using the Get Receipt Line function for the Purchase Receipt created earlier.
      CreateInvoiceWithGetReceipt(OrderPurchaseHeader."No.",InvoicePurchaseHeader);

      // Saving the purchase invoice lines
      GetPurchaseLines(InvoicePurchaseHeader,PurchaseLine);
      TempPurchaseLine.DELETEALL;
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);

      // 4. Verify: Check that the information related to Job is copied to Purchase Invoice Line after creation of Invoice Lines by using
      // the Get Receipt Lines function for a Purchase Order with Job attached to it. Check that the modification of job related fields is
      // not allowed after receive.
      VerifyJobInfoOnPurchInvoice(OrderPurchaseHeader,InvoicePurchaseHeader);
      VerifyModifyPurchaseDocJobInfo(InvoicePurchaseHeader);

      // 5. Exercise: Post the Purchase Invoice.
      LibraryPurchase.PostPurchaseDocument(InvoicePurchaseHeader,FALSE,TRUE);

      // 6. Verify: Check the entries created after Posting of Purchase Invoice.
      LibraryJob.VerifyPurchaseDocPostingForJob(TempPurchaseLine);

      VerifyGLEntry(TempPurchaseLine);
      VerifyValueEntries(TempPurchaseLine)
    END;

    [Test]
    PROCEDURE PostPurchaseOrderBlankJobTask@35();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Covers document number TC3.1 - refer to TFS ID 19910.
      // Test that the application generates an error message on posting Purchase Order with Job specified and blank Job Task No.

      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines and blank Job Task No.
      Initialize;

      CreatePurchaseOrderForJobTask(PurchaseHeader);
      // remove job task no.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Job Task No.",'');
      PurchaseLine.MODIFY(TRUE);

      // 2. Exercise: Post the Purchase Order as Receive.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Check error message on posting Purchase order with Job specified and blank Job Task No.
      Assert.ExpectedError(
        STRSUBSTNO(JobTaskBlankErrorServiceTier,PurchaseLine.FIELDCAPTION("Job Task No."),
          PurchaseLine.TABLECAPTION,PurchaseLine.FIELDCAPTION("Document Type"),
          PurchaseLine."Document Type",PurchaseLine.FIELDCAPTION("Document No."),PurchaseLine."Document No.",
          PurchaseLine.FIELDCAPTION("Line No."),PurchaseLine."Line No."))
    END;

    [Test]
    PROCEDURE JobWithPostedPurchaseOrder@30();
    VAR
      PurchaseHeader@1001 : Record 38;
      TempPurchaseLine@1000 : TEMPORARY Record 39;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Covers document number TC3.1 - refer to TFS ID 19910.
      // Test Job Planning Line and Job Ledger Entry created after posting of Purchase Order with Job attached on it.

      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines. Save Purchase Line in temporary table.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);

      // Save purchase lines.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check the entries created after Posting of Purchase Order.
      LibraryJob.VerifyPurchaseDocPostingForJob(TempPurchaseLine);
    END;

    [Test]
    PROCEDURE JobFieldsCopiedPurchaseOrder@44();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Covers document number TC3.1 - refer to TFS ID 19910.
      // Test Job Unit Price and Job Line Discount Amount are automatically filled in.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create a Purchase Order with Job selected on the Purchase Lines.
      CreatePurchaseOrderForJobTask(PurchaseHeader);

      // 3. Verify: Check that the Job Unit Price and Job Line Discount Amount are automatically filled in.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      VerifyJobInfo(PurchaseLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DimensionCodeMandatory@43();
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Covers document number TC3.3 - refer to TFS ID 19910.
      // Test dimensions on the Purchase Order are transferred correctly to Job Ledger Entry for Code Mandatory.

      DimensionValuePosting(DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DimensionSameCode@56();
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Covers document number TC3.3 - refer to TFS ID 19910.
      // Test dimensions on the Purchase Order are transferred correctly to Job Ledger Entry for Same Code.

      DimensionValuePosting(DefaultDimension."Value Posting"::"Same Code");
    END;

    LOCAL PROCEDURE DimensionValuePosting@49(ValuePosting@1001 : Option);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      Job@1004 : Record 167;
      HeaderDimSetID@1000 : Integer;
      DocumentNo@1005 : Code[20];
    BEGIN
      // 1. Setup: Create a Purchase Order with Job having dimension with Value Posting selected on the Purchase Lines.
      // Save Purchase Line in temporary table.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);
      DocumentNo := PurchaseHeader."No.";
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      Job.GET(PurchaseLine."Job No.");
      CreateDefaultDimForJob(Job."No.",ValuePosting);
      HeaderDimSetID := PurchaseHeader."Dimension Set ID";
      REPEAT
        SetupDocumentDimPurchaseLine(PurchaseLine)
      UNTIL PurchaseLine.NEXT = 0;

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check that dimensions on the Purchase Order are transferred correctly to Job Ledger Entry.
      VerifyJobLedgerEntryDim(DocumentNo,HeaderDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DimensionCodeMandatoryError@66();
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Covers document number TC3.3 - refer to TFS ID 19910.
      // Test that the application generates an error if dimension value has not been specified on Purchase Line having Job with Code
      // Mandatory.

      DimensionValuePostingError(DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DimensionSameCodeError@61();
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Covers document number TC3.3 - refer to TFS ID 19910.
      // Test that the application generates an error if dimension on Purchase Line are different from those on Job for Same Code.

      DimensionValuePostingError(DefaultDimension."Value Posting"::"Same Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE DimensionNoCodeError@55();
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Covers document number TC3.3 - refer to TFS ID 19910.
      // Test that the application generates an error if dimension value has been specified on Purchase Line having Job with No Code.

      DimensionValuePostingError(DefaultDimension."Value Posting"::"No Code");
    END;

    LOCAL PROCEDURE DimensionValuePostingError@62(ValuePosting@1001 : Option);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
      Job@1002 : Record 167;
    BEGIN
      // 1. Setup: Create a Purchase Order with Job having dimension with Value Posting selected on the Purchase Lines.
      // Save Purchase Line in temporary table.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      Job.GET(PurchaseLine."Job No.");
      CreateDefaultDimForJob(Job."No.",ValuePosting);

      REPEAT
        SetupDocumentDimLineError(PurchaseLine)
      UNTIL PurchaseLine.NEXT = 0;

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      // Prevent rollback.
      COMMIT;

      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check that the application generates an error if dimensions are not selected correctly on Purchase Line.
      VerifyDimensionErrorMessage(PurchaseHeader);
    END;

    [Test]
    PROCEDURE ReceiveAndInvoicePurchaseOrder@71();
    VAR
      PurchaseHeader@1001 : Record 38;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Covers document number TC3.6 - refer to TFS ID 19910.
      // Test integration of Jobs with posting of Purchase Order as Receive and then Invoice separately. Check G/L Entry, Value Entry,
      // Job Ledger Entry, Job Planning Line created.

      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines. Save Purchase Line in temporary table.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);

      // 2. Exercise: Post the Purchase Order as Receive and then post again as Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Check the entries created after Posting of Purchase Order.
      VerifyGLEntry(TempPurchaseLine);

      VerifyValueEntries(TempPurchaseLine);
      LibraryJob.VerifyPurchaseDocPostingForJob(TempPurchaseLine)
    END;

    [Test]
    PROCEDURE PostMixedPurchaseOrder@76();
    VAR
      PurchaseHeader@1002 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines. Add Purchase Lines without Job.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);
      CreatePurchaseLines(PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check the entries created after Posting of Purchase Order.
      VerifyJobInfoOnPurchRcptLines(TempPurchaseLine);
      VerifyItemLedger(TempPurchaseLine);
      VerifyGLEntry(TempPurchaseLine);

      VerifyValueEntries(TempPurchaseLine);
      LibraryJob.VerifyPurchaseDocPostingForJob(TempPurchaseLine);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseOrderForLCYJob@88();
    BEGIN
      // Covers document number TC3.5 - refer to TFS ID 19910.
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with local currency on both Purchase Order and
      // Job. Check Receipt Lines, Item Ledger Entry, Value Entry, Job Ledger Entry, Job Planning
      // Line created.

      PostJobPurchaseOrder('','');
    END;

    [Test]
    PROCEDURE PostFCYPurchaseOrderForLCYJob@91();
    BEGIN
      // Covers document number TC3.5 - refer to TFS ID 19910.
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on Purchase Order.
      // Check Receipt Lines, Item Ledger Entry, G/L Entry, Value Entry, Job Ledger Entry, Job Planning
      // Line created.

      PostJobPurchaseOrder('',FindFCY);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseOrderForFCYJob@90();
    BEGIN
      // Covers document number TC3.5 - refer to TFS ID 19910.
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on Job.
      // Check Receipt Lines, Item Ledger Entry, Value Entry, Job Ledger Entry, Job Planning Line created.

      PostJobPurchaseOrder(FindFCY,'');
    END;

    [Test]
    PROCEDURE PostFCYPurchaseOrderForFCYJob@89();
    BEGIN
      // Covers document number TC3.5 - refer to TFS ID 19910.
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on both Purchase Order and
      // Job. Check Receipt Lines, Item Ledger Entry, Value Entry, Job Ledger Entry, Job Planning Line created.

      PostJobPurchaseOrder(FindFCY,FindFCY);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseOrderWithLCYJob@153();
    BEGIN
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with local currency on Purchase Order
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeGLAccount('','');
    END;

    [Test]
    PROCEDURE PostFCYPurchaseOrderWithLCYJob@148();
    BEGIN
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on Purchase Order.
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeGLAccount('',FindFCY);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseOrderWithrFCYJob@146();
    BEGIN
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on Job.
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeGLAccount(FindFCY,'');
    END;

    [Test]
    PROCEDURE PostFCYPurchaseOrderWithFCYJob@145();
    BEGIN
      // Test integration of Jobs with posting of Purchase Order as Receive and Invoice with foreign currency on Purchase Order and
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeGLAccount(FindFCY,FindFCY);
    END;

    [Test]
    PROCEDURE PostLCYItemPurchaseOrderWithLCYJob@161();
    BEGIN
      // Test integration of Jobs with posting of Item Purchase Order as Receive and Invoice with local currency on Purchase Order
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeItem('','');
    END;

    [Test]
    PROCEDURE PostFCYItemPurchaseOrderWithLCYJob@160();
    BEGIN
      // Test integration of Jobs with posting of Item Purchase Order as Receive and Invoice with foreign currency on Purchase Order.
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeItem('',FindFCY);
    END;

    [Test]
    PROCEDURE PostLCYItemPurchaseOrderWithrFCYJob@159();
    BEGIN
      // Test integration of Jobs with posting of Item Purchase Order as Receive and Invoice with foreign currency on Job.
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeItem(FindFCY,'');
    END;

    [Test]
    PROCEDURE PostFCYItemPurchaseOrderWithFCYJob@156();
    BEGIN
      // Test integration of Jobs with posting of Item Purchase Order as Receive and Invoice with foreign currency on Purchase Order and
      // Verifying "G/L Entry","Job Ledger Entry" values
      PostJobPurchaseOrderWithTypeItem(FindFCY,FindFCY);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE LCYJobLedgerEntryPopulatesTotalCostFromDirectUnitCost@203();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Job Ledger Entry] [Item Tracking]
      // [SCENARIO 363373] Posting LCY Job Purchase Order with Serial Tracking populates Total Cost on Job Ledger Entry equal to Direct Unit Cost of appropriate Purchase Line
      Initialize;

      // [GIVEN] Item with Serial Tracking Code
      CreateSerialTrackedItem(Item);

      // [GIVEN] Job Purchase Order with Unit Cost (LCY) = "X"
      CreateJobPurchaseOrderWithTracking(PurchaseHeader,PurchaseLine,Item."No.",'');

      // [WHEN] Post Purchase Order as Receive and Invoice
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Job Ledger Entries were created, each with Total Cost = Total Cost (LCY) = "X"
      WITH PurchaseLine DO
        VerifyTotalCostAndPriceOnJobLedgerEntry(Item."No.","Unit Cost","Unit Cost (LCY)","Unit Price (LCY)","Unit Price (LCY)");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE FCYJobLedgerEntryPopulatesTotalCostFromDirectUnitCost@201();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Job Ledger Entry] [Item Tracking] [FCY]
      // [SCENARIO 363373] Posting FCY Job Purchase Order with Serial Tracking populates Total Cost on Job Ledger Entry equal to Direct Unit Cost of appropriate Purchase Line
      Initialize;

      // [GIVEN] Item with Serial Tracking Code
      CreateSerialTrackedItem(Item);

      // [GIVEN] Job Purchase Order with Unit Cost = "X"
      CreateJobPurchaseOrderWithTracking(PurchaseHeader,PurchaseLine,Item."No.",FindFCY);

      // [WHEN] Post Purchase Order as Receive and Invoice
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Job Ledger Entries were created, each with Total Cost = "X"
      WITH PurchaseLine DO
        VerifyTotalCostAndPriceOnJobLedgerEntry(Item."No.","Unit Cost","Unit Cost (LCY)","Job Unit Price","Job Unit Price (LCY)");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PurchaseOrderWithItemReserveAsAlways@46();
    VAR
      GeneralPostingSetup@1002 : Record 252;
      InventorySetup@1012 : Record 313;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchInvHeader@1001 : Record 122;
      GLEntry@1011 : Record 17;
      VATPostingSetup@1003 : Record 325;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify GL Entry after posting a Purchase Order with Job.

      // Setup.
      Initialize;
      InventorySetup.GET;
      UpdateAutomaticCostPosting(TRUE,InventorySetup."Automatic Cost Adjustment"::Always);
      CreatePurchaseDocument(PurchaseHeader,CreateVendorWithSetup(VATPostingSetup));
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");

      // Exercise: Post Purchase Order as Receive and Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL Entry.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      GLEntry.SETFILTER(Amount,'>0');
      FindGLEntry(GLEntry,DocumentNo,GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Gen. Posting Type",GLEntry."Gen. Posting Type"::Purchase);
      VerifyGLEntryAmountInclVAT(GLEntry,PurchInvHeader."Amount Including VAT");
      VerifyJobOnGLEntry(PurchaseLine."Job No.",DocumentNo,GLEntry."Document Type"::Invoice);

      // Tear Down.
      UpdateAdjustmentAccounts(
        PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group",GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PageHandler)]
    PROCEDURE PurchaseCreditMemoWithItemReserveAsAlways@4();
    VAR
      GLEntry@1004 : Record 17;
      GeneralPostingSetup@1000 : Record 252;
      InventorySetup@1003 : Record 313;
      PurchasesPayablesSetup@1002 : Record 312;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchCrMemoHdr@1001 : Record 124;
      VATPostingSetup@1008 : Record 325;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Verify GL Entry after posting a Purchase Credit Memo using function Return Shimpment on Credit Memo.

      // Setup.
      Initialize;
      InventorySetup.GET;
      PurchasesPayablesSetup.GET;
      UpdateAutomaticCostPosting(TRUE,InventorySetup."Automatic Cost Adjustment"::Always);
      UpdateReturnShipmentOnCreditMemo(FALSE);
      CreatePurchaseDocument(PurchaseHeader,CreateVendorWithSetup(VATPostingSetup));
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.",PurchaseHeader);
      PurchaseHeader.GetPstdDocLinesToRevere;

      // Exercise: Post Purchase Credit Memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL Entry.
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoHdr.CALCFIELDS(Amount,"Amount Including VAT");
      GLEntry.SETFILTER(Amount,'>0');
      FindGLEntry(GLEntry,DocumentNo,GLEntry."Document Type"::"Credit Memo");
      VerifyGLEntryAmountInclVAT(GLEntry,PurchCrMemoHdr."Amount Including VAT");
      VerifyJobOnGLEntry(PurchaseLine."Job No.",DocumentNo,GLEntry."Document Type"::"Credit Memo");

      // Tear Down.
      UpdateAdjustmentAccounts(
        PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group",GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentHandler,ItemChargeAssignMenuHandler)]
    PROCEDURE PurchaseInvoiceUsingGetReceiptLine@5();
    VAR
      GLEntry@1001 : Record 17;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchInvHeader@1018 : Record 122;
      VATPostingSetup@1002 : Record 325;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify GL Entry after posting a Purchase Invoice create through Get Receipt Line function.

      // 1. Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,CreateVendorWithSetup(VATPostingSetup));
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      GetReceiptLineOnPurchaseInvoice(PurchaseHeader,PurchaseHeader."No.");

      // 2. Exercise: Post Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify GL Entry.
      // Verify: Verification of Item Charge Assignment Purchase has done in ItemChargeAssignmentHandler.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      GLEntry.SETFILTER(Amount,'>0');
      FindGLEntry(GLEntry,DocumentNo,GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Gen. Posting Type",GLEntry."Gen. Posting Type"::Purchase);
      VerifyGLEntryAmountInclVAT(GLEntry,PurchInvHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE JobOrderReservationWithResourceShouldFail@13();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Verify the error message while reserving the Item from Job Order to Purchase Order when Type is Resource on Job Planning Line.

      // 1. Setup: Create Purchase Order and Job Plan. Update Job Planning Line with Type Resource.
      Initialize;
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,CreateItem,LibraryRandom.RandDec(10,2));  // Use Random for Quantity.
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Resource);
      JobPlanningLine.MODIFY(TRUE);

      // 2. Exercise: Reserve Item from Job Planning Line.
      ASSERTERROR OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          TypeReservationError,JobPlanningLine.FIELDCAPTION(Type),JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Job No."),JobPlanningLine."Job No.",JobPlanningLine.FIELDCAPTION("Job Task No."),
          JobPlanningLine."Job Task No.",
          JobPlanningLine.FIELDCAPTION("Line No."),JobPlanningLine."Line No."));
    END;

    [Test]
    PROCEDURE JobOrderReservationWithoutPlanningDate@12();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Verify the error message while reserving the Item from Job Order to Purchase Order when Planning Date is blank on Job Planning Line.

      // 1. Setup: Create Purchase Order and Job Plan. Update Job Planning Line with blank Planning Date.
      Initialize;
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,CreateItem,LibraryRandom.RandDec(10,2));  // Use Random for Quantity.
      UpdatePlanningDateOnJobPlanninglLine(JobPlanningLine,0D);

      // 2. Exercise: Reserve Item from Job Planning Line.
      ASSERTERROR OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          PlanningDateError,JobPlanningLine.FIELDCAPTION("Planning Date"),JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Job No."),JobPlanningLine."Job No.",JobPlanningLine.FIELDCAPTION("Job Task No."),
          JobPlanningLine."Job Task No.",JobPlanningLine.FIELDCAPTION("Line No."),JobPlanningLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(NoQuantityOnReservePageHandler)]
    PROCEDURE JobOrderReservationWithEarlierPlanningDate@118();
    BEGIN
      // Verify reservation lines when Planning Date is earlier than Expected Receipt Date on Job Planning Line.
      Initialize;
      JobOrderReservationWithPlanningDate(CreateItem,LibraryRandom.RandDec(10,2),-1);  // Use Random for Quantity and take -1 as SignFactor.

      // 3. Verify: Verify Reservation Line. Verification done in 'NoQuantityOnReservePageHandler'.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE JobOrderReservationWithLaterPlanningDate@119();
    VAR
      ItemNumber@1000 : Code[20];
      QuantityOnJobPlanningLine@1001 : Decimal;
      OriginalQuantity@1002 : Decimal;
    BEGIN
      // Verify reservation lines when Planning Date is later than Expected Receipt Date on Job Planning Line.
      Initialize;
      ItemNumber := CreateItem;  // Assign Item No. in global variable.
      OriginalQuantity := LibraryRandom.RandDec(10,2);  // Assign Random Quantity in global variable.
      QuantityOnJobPlanningLine := OriginalQuantity;  // Assign in global variable.
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      JobOrderReservationWithPlanningDate(ItemNumber,OriginalQuantity,1);  // Take 1 as SignFactor.

      // 3. Verify: Verify Reservation Line. Verification done in 'ReservationPageHandler'.
    END;

    LOCAL PROCEDURE JobOrderReservationWithPlanningDate@17(ItemNo@1002 : Code[20];Quantity@1003 : Decimal;SignFactor@1004 : Integer);
    VAR
      JobPlanningLine@1001 : Record 1003;
      ExpectedReceiptDate@1000 : Date;
    BEGIN
      // 1. Setup: Create Purchase Order and Job Plan. Update Job Planning Line with Planning Date.
      ExpectedReceiptDate := CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,ItemNo,Quantity);
      UpdatePlanningDateOnJobPlanninglLine(
        JobPlanningLine,CALCDATE('<' + FORMAT(SignFactor * LibraryRandom.RandInt(5)) + 'D>',ExpectedReceiptDate));  // Use Random to calculate Planning Date earlier than Expected Receipt Date.

      // 2. Exercise: Reserve Item from Job Planning Line.
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    END;

    [Test]
    [HandlerFunctions(NoQuantityOnReservePageHandler)]
    PROCEDURE JobOrderReservationWithNegativeQuantity@16();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Verify reservation lines when Quantity is negative on Job Planning Line.

      // 1. Setup: Create Purchase Order and Job Plan. Update Job Planning Line with Random negative Quantity.
      Initialize;
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,CreateItem,LibraryRandom.RandDec(10,2));  // Use Random for Quantity.
      UpdateJobPlanningLineQuantity(JobPlanningLine,-LibraryRandom.RandInt(10));

      // 2. Exercise: Reserve Item from Job Planning Line.
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify Reservation Line. Verification done in 'NoQuantityOnReservePageHandler'.
    END;

    [Test]
    [HandlerFunctions(NoQuantityOnReservePageHandler)]
    PROCEDURE JobOrderReservationWithWrongLocation@120();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Verify reservation lines when Location is different on Job Planning Line from Purchase Order.

      // 1. Setup: Create Purchase Order and Job Plan. Update Job Planning Line with new Location.
      Initialize;
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,CreateItem,LibraryRandom.RandDec(10,2));  // Use Random for Quantity.
      JobPlanningLine.VALIDATE("Location Code",FindLocation);
      JobPlanningLine.MODIFY(TRUE);

      // 2. Exercise: Reserve Item from Job Planning Line.
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify Reservation Line. Verification done in 'NoQuantityOnReservePageHandler'.
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReserveItemFromJobOrderToPurchaseOrder@121();
    VAR
      JobPlanningLine@1004 : Record 1003;
      ItemNumber@1002 : Code[20];
      QuantityOnJobPlanningLine@1001 : Decimal;
      OriginalQuantity@1000 : Decimal;
    BEGIN
      // Verify Reserved Quantity on Reservation window when reserve Item from Purchase Order to Job Order.

      // 1. Setup: Create Purchase Order and Job Plan.
      Initialize;
      ItemNumber := CreateItem;  // Assign in global variable.
      OriginalQuantity := LibraryRandom.RandDec(10,2);  // Assign Random Quantity in global variable.
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,ItemNumber,OriginalQuantity);
      QuantityOnJobPlanningLine := OriginalQuantity;  // Assign in global variable.
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);

      // 2. Exercise: Reserve Item from Job Planning Line.
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify Reservation Line. Verification done in 'ReserveFromCurrentLineHandler'.
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndJobPlanningLine@135(VAR JobPlanningLine@1002 : Record 1003;ItemNo@1001 : Code[20];Quantity@1003 : Decimal) ExpectedReceiptDate : Date;
    VAR
      PurchaseHeader@1005 : Record 38;
    BEGIN
      CreatePurchaseOrderWithExpectedReceiptDate(PurchaseHeader,ItemNo,Quantity);
      ExpectedReceiptDate := PurchaseHeader."Expected Receipt Date";
      CreateJobAndJobPlanningLine(JobPlanningLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithExpectedReceiptDate@128(VAR PurchaseHeader@1000 : Record 38;ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseHeader.VALIDATE("Expected Receipt Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Update Receipt Date earlier than WORKDATE. Use Random to calculate Date.
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithUpdatedQuantities@178(VAR PurchaseHeader@1000 : Record 38;VAR JobPlanningLine@1001 : Record 1003) Quantity : Decimal;
    VAR
      QtyToReceive@1003 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandDec(10,2);
      QtyToReceive := Quantity / LibraryRandom.RandIntInRange(4,6);
      UpdatePurchLineWithQtyToReceiveAndInvoice(
        JobPlanningLine,PurchaseHeader,Quantity,QtyToReceive,QtyToReceive / LibraryRandom.RandIntInRange(2,4));
    END;

    [Test]
    PROCEDURE PostPurchaseCreditMemoWithJob@34();
    VAR
      GLAccount@1002 : Record 15;
      JobTask@1004 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify Job Ledger Entry after posting a Purchase Credit Memo with Job.

      // 1. Setup.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::"G/L Account",GLAccount."No.");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);

      // 2. Exercise: Post Purchase Credit Memo as Receive and Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify.
      VerifyJobLedgerEntry(PurchaseLine,DocumentNo,-PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE PostPartialPurchaseReturnOrderWithCopyDocument@32();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Verify Job Ledger Entry after posting the partial Purchase Return Order when Lines are created from the Copy Document function.

      // 1. Setup: Create and post Purchase Order, Create Purchase Return Order from Copy Document and post it partially.
      Initialize;
      PurchaseOrderWithJobTask(PurchaseHeader);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.",PurchaseHeader);
      InvokeCopyPurchaseDocument(PurchaseHeader,DocumentNo);
      GetAndUpdatePurchaseLines(PurchaseHeader,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 2. Exercise: Post Purchase Return Order for remaining Quantity.
      PurchaseHeader."Vendor Cr. Memo No." := PurchaseHeader."Vendor Cr. Memo No." + '_2';
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify.
      VerifyJobLedgerEntry(PurchaseLine,DocumentNo,-PurchaseLine."Return Qty. to Ship");
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,DemandOverviewPageHandler)]
    PROCEDURE DemandOverviewForJobPlanningLines@45();
    VAR
      JobPlanningLine@1001 : Record 1003;
      ItemNumber@1003 : Code[20];
      QuantityOnJobPlanningLine@1002 : Decimal;
      OriginalQuantity@1000 : Decimal;
    BEGIN
      // Verify the Demand Overview Page for Reserved Quantity for Job Planning Lines.

      // 1. Setup: Create Purchase Order and Job Plan. Open Reservation page and Reserve Item from Job Planning Line in handler 'ReserveFromCurrentLineHandler'.
      Initialize;
      ItemNumber := CreateItem;  // Assign in global variable.
      OriginalQuantity := LibraryRandom.RandDec(10,2);  // Assign Random Quantity in global variable.
      CreatePurchaseOrderAndJobPlanningLine(JobPlanningLine,ItemNumber,OriginalQuantity);
      QuantityOnJobPlanningLine := OriginalQuantity;  // Assign in global variable.
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      LibraryVariableStorage.Enqueue(ItemNumber);

      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 2. Exercise: Open Demand Overview page from Job Planning Line.
      OpenDemandOverviewPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify Reserved Quantity for Supply and Demand on the Demand Overview page. Verification done in 'DemandOverviewPageHandler'.
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReservationBetweenJobAndProductionOrder@42();
    VAR
      JobPlanningLine@1003 : Record 1003;
      ProductionOrder@1001 : Record 5405;
      LibraryManufacturing@1000 : Codeunit 132202;
      ItemNumber@1005 : Code[20];
      QuantityOnJobPlanningLine@1004 : Decimal;
      OriginalQuantity@1002 : Decimal;
    BEGIN
      // Verify Reserved Quantity for an existing reservation between Jobs and Production Order can be modified and be reserved again.

      // 1. Setup: Create Production Order and Job Plan. Open Reservation page and Reserve Item from Job Planning Line in handler 'ReserveFromCurrentLineHandler'.
      Initialize;
      ItemNumber := CreateItem;  // Assign in global variable.
      OriginalQuantity := LibraryRandom.RandDec(100,2);  // Assign Random Quantity in global variable.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNumber,OriginalQuantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      CreateJobAndJobPlanningLine(JobPlanningLine,ItemNumber,OriginalQuantity);
      UpdateJobPlanningLineQuantity(JobPlanningLine,JobPlanningLine.Quantity / 2);  // Reduce Quantity by half.
      QuantityOnJobPlanningLine := JobPlanningLine.Quantity;  // Assign in global variable.
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");

      // 2. Exercise: Update Quantity on Job Planning Line with Random value and again reserve it.
      UpdateJobPlanningLineQuantity(JobPlanningLine,JobPlanningLine.Quantity + JobPlanningLine.Quantity);
      QuantityOnJobPlanningLine := JobPlanningLine.Quantity;  // Assign in global variable.
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      OpenReservationPage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // 3. Verify: Verify Reservation Line for updated Reserved Quantity. Verification done in 'ReserveFromCurrentLineHandler'.
    END;

    [Test]
    PROCEDURE OpenReservationWindowWithUsageLinkDisabledShouldFail@41();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Verify that it is not possible to open Reservation window if Usage Link is not enabled in the Job Planning Line.

      // 1. Setup: Create Job and Job Planning Line. By default Usage Link is False on Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);

      // 2. Exercise: Modify the Reserve option on line to open the reservation window.
      ASSERTERROR JobPlanningLine.VALIDATE(Reserve,JobPlanningLine.Reserve::Optional);

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          EmptyFieldError,JobPlanningLine.FIELDCAPTION("Usage Link"),JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Job No."),JobPlanningLine."Job No.",JobPlanningLine.FIELDCAPTION("Job Task No."),
          JobPlanningLine."Job Task No.",JobPlanningLine.FIELDCAPTION("Line No."),JobPlanningLine."Line No."));
    END;

    [Test]
    PROCEDURE ReserveFieldOnJobPlanningLine@81();
    VAR
      Item@1000 : Record 27;
      JobPlanningLine@1004 : Record 1003;
    BEGIN
      // Verify the value of Reserve field on the Job Planning Line.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Job Planning Line.
      CreateJobAndJobPlanningLine(JobPlanningLine,CreateItemWithReserveOption(Item.Reserve::Optional),LibraryRandom.RandDec(100,2));  // Use Random for Quantity.

      // 3. Verify: Verify Reserve field on Job Planning line.
      JobPlanningLine.TESTFIELD(Reserve,Item.Reserve);
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderReserveFromCurrentLineHandler)]
    PROCEDURE ReservationFromPurchaseOrder@40();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      ItemNumber@1004 : Code[20];
      QuantityOnJobPlanningLine@1003 : Decimal;
      OriginalQuantity@1001 : Decimal;
    BEGIN
      // Verify Reservation Line and Purchase line after Reservation with Purchase Order as supply and Job Planning Line as demand.

      // 1. Setup: Create Purchase Order and Job Plan. Modify Quantity on Job planning Line.Initialize;
      Initialize;
      ItemNumber := CreateItemWithReserveOption(Item.Reserve::Optional);  // Assign in global variable.
      OriginalQuantity := LibraryRandom.RandDec(10,2);  // Assign Random Quantity in global variable.
      CreatePurchaseSupplyAndJobDemandWithUpdatedQuantity(PurchaseHeader,ItemNumber,OriginalQuantity);
      QuantityOnJobPlanningLine := OriginalQuantity / 2;  // Assign in global variable.
      LibraryVariableStorage.Enqueue(FALSE);
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      // Reserve Item from Purchase Order.
      OpenReservationPageFromPurchaseOrder(PurchaseHeader."No.");

      // 3. Verify: Verify Reservation Line. Verification done in 'PurchaseOrderReserveFromCurrentLineHandler' and Verify Purchase Line for Reserved Quantity.
      VerifyPurchaseLine(PurchaseHeader,QuantityOnJobPlanningLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PurchaseOrderReserveFromCurrentLineHandler)]
    PROCEDURE CancelReservationFromPurchaseOrder@39();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      ItemNumber@1005 : Code[20];
      QuantityOnJobPlanningLine@1004 : Decimal;
      OriginalQuantity@1003 : Decimal;
    BEGIN
      // Verify Reservation Line and Purchase line after cancelled the Reservation when Purchase Order as supply and Job Planning Line as demand.

      // 1. Setup: Create Purchase Order and Job Plan. Modify Quantity on Job planning Line. Reserve Item from Purchase Order.
      Initialize;
      ItemNumber := CreateItemWithReserveOption(Item.Reserve::Optional);  // Assign in global variable.
      OriginalQuantity := LibraryRandom.RandDec(10,2);  // Assign Random Quantity in global variable.

      CreatePurchaseSupplyAndJobDemandWithUpdatedQuantity(PurchaseHeader,ItemNumber,OriginalQuantity);
      QuantityOnJobPlanningLine := OriginalQuantity / 2;  // Assign in global variable.
      LibraryVariableStorage.Enqueue(FALSE);
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      OpenReservationPageFromPurchaseOrder(PurchaseHeader."No.");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryVariableStorage.Enqueue(TRUE);
      EnqueueVariables(ItemNumber,QuantityOnJobPlanningLine,OriginalQuantity);
      // 2. Exercise: Cancel Reservation from Purchase Order.
      OpenReservationPageFromPurchaseOrder(PurchaseHeader."No.");

      // 3. Verify: Verify Reservation Line. Verification done in 'PurchaseOrderReserveFromCurrentLineHandler'.
      VerifyPurchaseLine(PurchaseHeader,0);  // After cancel the Reservation, Reserved Quantity must be zero.
    END;

    LOCAL PROCEDURE CreatePurchaseSupplyAndJobDemandWithUpdatedQuantity@87(VAR PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      CreatePurchaseOrderWithExpectedReceiptDate(PurchaseHeader,ItemNo,Quantity);
      CreateJobAndJobPlanningLine(JobPlanningLine,ItemNo,Quantity);
      UpdateJobPlanningLineQuantity(JobPlanningLine,Quantity / 2);  // Reduce Quantity by half.
    END;

    [Test]
    PROCEDURE RelationBetweenUsageLinkAndReserveOnJob@19();
    VAR
      Item@1000 : Record 27;
      JobPlanningLine@1004 : Record 1003;
    BEGIN
      // Verify relationship between usage Link and Reserve.

      // 1. Setup: Create and modify Item for Reserve field. Create Job Planning Line.
      Initialize;
      CreateJobAndJobPlanningLine(JobPlanningLine,CreateItemWithReserveOption(Item.Reserve::Optional),LibraryRandom.RandDec(10,2));  // Use Random for Quantity.

      // 2. Exercise: Modify Usage Link on Job Planning line.
      JobPlanningLine.VALIDATE("Usage Link",FALSE);
      JobPlanningLine.MODIFY(TRUE);

      // 3. Verify: Verify Reserve field on Job Planning line is changed to Never.
      JobPlanningLine.TESTFIELD(Reserve,Item.Reserve::Never);
    END;

    [Test]
    PROCEDURE UsageLinkErrorWhileChangeReserveField@94();
    VAR
      Item@1000 : Record 27;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
    BEGIN
      // Verify error message when change the value of Reserve field on Job Planning Line while Usage Link is unchecked.

      // 1. Setup: Create and modify Item for Reserve field. Create and modify Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Item,CreateItemWithReserveOption(Item.Reserve::Optional),
        LibraryRandom.RandDec(10,2),FALSE);  // Use Random for Quantity.

      // 2. Exercise: Modify Reserve field on Job Planning line.
      ASSERTERROR JobPlanningLine.VALIDATE(Reserve,JobPlanningLine.Reserve::Optional);

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          EmptyFieldError,JobPlanningLine.FIELDCAPTION("Usage Link"),JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Job No."),JobPlanningLine."Job No.",JobPlanningLine.FIELDCAPTION("Job Task No."),
          JobPlanningLine."Job Task No.",JobPlanningLine.FIELDCAPTION("Line No."),JobPlanningLine."Line No."));
    END;

    [Test]
    PROCEDURE PostPurchaseReturnOrderAsShip@98();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1003 : Record 32;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Item Ledger Entries and Value Entries generated against Item Ledger Entry after posting Purchase Return order As Ship with Job No.

      // 1. Setup: Create and post Purchase Order, Create Purchase Return Order from Copy Document.
      Initialize;
      PurchaseOrderWithJobTask(PurchaseHeader);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      CreatePurchaseHeader(PurchaseHeader."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.",PurchaseHeader);
      InvokeCopyPurchaseDocument(PurchaseHeader,DocumentNo);

      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);

      // 2. Exercise: Post Purchase Return Order with Ship Option.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Verify Item Ledger Entries and corresponding Value Entries.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",PurchaseLine.Quantity,0,0,PurchaseLine."Line Amount");
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",ItemLedgerEntry."Document Type"::"Purchase Return Shipment",
        PurchaseLine."No.",DocumentNo,PurchaseLine."Job No.",PurchaseLine.Amount,0);

      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",-PurchaseLine.Quantity,0,0,-PurchaseLine."Line Amount");
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Return Shipment",PurchaseLine."No.",
        DocumentNo,PurchaseLine."Job No.",-PurchaseLine.Amount,0);
    END;

    [Test]
    PROCEDURE PostPurchaseReturnOrderAsShipAndInvoice@86();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1003 : Record 32;
      ShipmentNo@1002 : Code[20];
      CreditMemoNo@1004 : Code[20];
    BEGIN
      // Check Item Ledger Entries and Value Entries generated against Item Ledger Entry after posting Purchase Return order As Ship and then as Invoice with Job No.

      // 1. Setup: Create and post Purchase Order, Create Purchase Return Order from Copy Document and post it as Shipped.
      Initialize;
      PurchaseOrderWithJobTask(PurchaseHeader);
      ShipmentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      CreatePurchaseHeader(PurchaseHeader."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.",PurchaseHeader);
      InvokeCopyPurchaseDocument(PurchaseHeader,ShipmentNo);

      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      ShipmentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post Purchase Return Order with Ship Option.

      // 2. Exercise: Again Post Purchase Return Order with Invoice Option.
      CreditMemoNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Item Ledger Entries and corresponding Value Entries.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",ShipmentNo,PurchaseLine."Job No.",
        PurchaseLine.Quantity,PurchaseLine.Quantity,PurchaseLine.Amount,0);
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",ItemLedgerEntry."Document Type"::"Purchase Return Shipment",
        PurchaseLine."No.",ShipmentNo,PurchaseLine."Job No.",PurchaseLine.Amount,0);
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",ItemLedgerEntry."Document Type"::"Purchase Credit Memo",PurchaseLine."No.",
        CreditMemoNo,PurchaseLine."Job No.",-PurchaseLine.Amount,PurchaseLine.Amount);

      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",ShipmentNo,
        PurchaseLine."Job No.",-PurchaseLine.Quantity,-PurchaseLine.Quantity,-PurchaseLine.Amount,0);
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Return Shipment",PurchaseLine."No.",
        ShipmentNo,PurchaseLine."Job No.",-PurchaseLine.Amount,0);
      VerifyValueEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Credit Memo",PurchaseLine."No.",
        CreditMemoNo,PurchaseLine."Job No.",PurchaseLine.Amount,-PurchaseLine.Amount);
    END;

    [Test]
    PROCEDURE PartiallyPostedPurchaseOrderWithJob@101();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1003 : TEMPORARY Record 39;
      JobLedgerEntry@1006 : Record 169;
      DocumentNo@1002 : Code[20];
      ExpectedQuantity@1004 : Decimal;
      ActualQuantity@1005 : Decimal;
    BEGIN
      // Check that Partial Posting of Purchase Order with Job carries correct Quantities in Job Ledger Entries.

      // 1. Setup: Create Purchase Order and update Quantity to Receive and Quantity to Invoice on all Purchase Lines.
      Initialize;
      CreatePurchaseOrderForJobTask(PurchaseHeader);
      UpdatePurchaseLineQuantities(PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);
      ExpectedQuantity := CalculatePurchaseLineQuantityToInvoice(TempPurchaseLine);

      // 2. Exercise: Post Purchase Order with Partial Quantities.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify that Correct Quantities present in Job Ledger Entries.
      ActualQuantity := CalculateJobLedgerEntryQuantity(DocumentNo,PurchaseLine."Job No.");
      Assert.AreEqual(
        ExpectedQuantity,ActualQuantity,
        STRSUBSTNO(FieldError,PurchaseLine.FIELDCAPTION(Quantity),ExpectedQuantity,JobLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ReceivePurchaseOrderTwiceWithJob@105();
    VAR
      GLAccount@1003 : Record 15;
      JobTask@1007 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      JobLedgerEntry@1006 : Record 169;
      DocumentNo@1002 : Code[20];
      ExpectedQuantity@1004 : Decimal;
      ActualQuantity@1005 : Decimal;
    BEGIN
      // Check that Multiple partial postings of Purchase Order with Job carries correct Quantity in Job Ledger Entries.

      // 1. Setup: Create Purchase Order, update Quantity to Invoice and Post Purchase Order as Receive, again update Quantity to Invoice and Post Purchase Order as Receive.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::"G/L Account",GLAccount."No.");
      PostPartialPurchaseOrder(PurchaseLine,PurchaseHeader);
      ExpectedQuantity := PurchaseLine."Qty. to Receive";

      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PostPartialPurchaseOrder(PurchaseLine,PurchaseHeader);
      ExpectedQuantity := ExpectedQuantity + PurchaseLine."Qty. to Receive";

      // 2. Exercise: Post Purchase Order as Invoice.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify that Correct Quantity updated in Job Ledger Entries after multiple postings.
      ActualQuantity := CalculateJobLedgerEntryQuantity(DocumentNo,PurchaseLine."Job No.");
      Assert.AreEqual(
        ExpectedQuantity,ActualQuantity,
        STRSUBSTNO(FieldError,PurchaseLine.FIELDCAPTION(Quantity),ExpectedQuantity,JobLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PostJobPurchaseOrderAsReceiveAndUpdateItemUOM@126();
    VAR
      JobTask@1003 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      QtyPerUnitOfMeasure@1002 : Decimal;
    BEGIN
      // Check that "Qty. Per Unit of Measure" on Purchase Line does not get updated after updation of "Qty. per Unit of Measure" in Item Unit of Measure after Receiving the Job Purchase Order.

      // 1. Setup: Create Job Purchase Order with Different Unit of Measure than Base Unit of Measure and Post as Receive.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,CreateItemWithMultipleUOM);
      UpdatePurchaseLine(PurchaseLine,PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      QtyPerUnitOfMeasure := 1 + LibraryRandom.RandInt(3);  // Using Random for Qty Per Unit Of Measure more than one.

      // 2. Exercise: Update Quantity Per Unit Of Measure in Item Unit of Measure and check Quantity Per Unit of Measure does not get updated on Purchase Line.
      UpdateItemUnitOfMeasure(PurchaseLine,QtyPerUnitOfMeasure);
      ASSERTERROR PurchaseLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);

      // 3. Verify: Verify error raised on testfield of Quantity Per Unit of Measure.
      Assert.ExpectedError(
        STRSUBSTNO(
          QtyPerUOMError,PurchaseLine.FIELDCAPTION("Qty. per Unit of Measure"),QtyPerUnitOfMeasure,PurchaseLine.TABLECAPTION,
          PurchaseLine.FIELDCAPTION("Document Type"),PurchaseLine."Document Type",
          PurchaseLine.FIELDCAPTION("Document No."),PurchaseLine."Document No.",PurchaseLine.FIELDCAPTION("Line No."),
          PurchaseLine."Line No.",1));
    END;

    [Test]
    PROCEDURE PostJobPurchaseOrderAsInvoiceAfterUpdateItemUOM@127();
    VAR
      JobTask@1003 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Check that Invoicing the Purchase Order with Job carries correct Quantity and Unit Cost in Job Ledger Entry where "Qty. per Unit of Measure" is different on Item Unit of Measure.

      // 1. Setup: Create Job Purchase Order with Different Unit of Measure than Base Unit of Measure and Post as Receive. Update Quantity Per Unit Of Measure in Item Unit of Measure.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,CreateItemWithMultipleUOM);
      UpdatePurchaseLine(PurchaseLine,PurchaseHeader);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      UpdateItemUnitOfMeasure(PurchaseLine,1 + LibraryRandom.RandInt(3));  // Using Random for Qty Per Unit Of Measure more than one.

      // 2. Exercise: Invoice the Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Job Ledger Entry and GL Entry.
      PurchaseLine."Unit of Measure Code" := GetBaseUnitOfMeasureCode(PurchaseLine."No.");
      VerifyJobLedgerEntry(PurchaseLine,DocumentNo,PurchaseLine.Quantity);
      VerifyGLEntry(TempPurchaseLine);
    END;

    [Test]
    PROCEDURE ReserveOnJobPlanningLineWithUsageLinkChecked@109();
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Verify Reserve field on Job Planning Line is updated from Job when Usage Link is checked and Item has Reserve as Optional and Job has Always.

      // 1. Setup: Create Job with Reserve as Always.
      Initialize;
      CreateJobWithReserveOption(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // 2. Exercise: Create Job Planning Line with Item which has Reserve as Optional and Usage Link.
      CreateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2),TRUE);  // Use Random for Quantity.

      // 3. Verify: Verify Reserve field on Job Planning line.
      JobPlanningLine.TESTFIELD(Reserve,Job.Reserve);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithJob@117();
    VAR
      GLAccount@1005 : Record 15;
      GLEntry@1004 : Record 17;
      JobTask@1006 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      JobLedgerEntry@1002 : Record 169;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Test Ledger Entry Type and Ledger Entry No. after posting a Purchase Order with Job.

      // 1. Setup: Create Purcahse Order for a GL Account with Job.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::"G/L Account",GLAccount."No.");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);

      // 2. Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify Ledger Entry Type and Ledger Entry No. in Job Ledger Entry after Posting Purchase Order with Job.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."Job No.");
      FindGLEntry(GLEntry,DocumentNo,PurchaseLine."Document Type"::Invoice);
      JobLedgerEntry.TESTFIELD("Ledger Entry Type",JobLedgerEntry."Ledger Entry Type"::"G/L Account");
      JobLedgerEntry.TESTFIELD("Ledger Entry No.",GLEntry."Entry No.");
    END;

    [Test]
    PROCEDURE PostingPurchaseOrderErrorWhenJobStatusPlanning@115();
    VAR
      GLAccount@1002 : Record 15;
      Job@1000 : Record 167;
      JobTask@1004 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test Error Message while posting Purchase Order with Job when Job has Status Planning.

      // 1. Setup: Create Purchase Order with Job, Update Status as Planning on Job.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::"G/L Account",GLAccount."No.");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      UpdateJobStatus(Job,PurchaseLine."Job No.");

      // 2. Exercise.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify Error Message while posting Purchase Order.
      Assert.ExpectedError(
        STRSUBSTNO(
          JobStatusError,Job.FIELDCAPTION(Status),Job.Status::Order,Job.TABLECAPTION,Job.FIELDCAPTION("No."),PurchaseLine."Job No.",
          Job.Status));
    END;

    [Test]
    PROCEDURE JobCurrencyOnPurchaseOrderLine@131();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Test that correct Job Currency Code and Job Currency Factor populated on Purchase Line created with Job having Currency code.

      // 1. Setup: Find a Currency and update it on Job Card.
      Initialize;
      CurrencyCode := FindFCY;
      CreateJobWithJobTask(JobTask);
      UpdateCurrencyOnJob(JobTask."Job No.",CurrencyCode);

      // 2. Exercise: Create Purchase Order with Job.
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,CreateItem);

      // 3. Verify: Verify that Job Currency Code and Job Currency Factor updated correctly on Purchase Line.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.TESTFIELD("Job Currency Code",CurrencyCode);
      PurchaseLine.TESTFIELD("Job Currency Factor",CalculateCurrencyFactor(CurrencyCode));
    END;

    [Test]
    PROCEDURE UpdateJobCurrencyAfterReceivingPurchaseOrder@152();
    VAR
      GeneralPostingSetup@1005 : Record 252;
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      JobLedgerEntry@1006 : Record 169;
      CurrencyCode@1004 : Code[10];
      DocumentNo@1007 : Code[20];
      TotalCost@1008 : Decimal;
    BEGIN
      // Test Total Cost and Total Cost LCY after Receiving Purchase Order with Job having currency attached and Invoice it after removing Currency Code from Job.

      // 1. Setup: Attach Currency on Job, Create Purchase Order with Job, Update General Posting Setup, Post Purchase Order as Receive and Remove Currency from Job.
      Initialize;
      CurrencyCode := FindFCY;
      CreateJobWithJobTask(JobTask);
      UpdateCurrencyOnJob(JobTask."Job No.",CurrencyCode);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,CreateItem);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      TotalCost := ROUND(PurchaseLine."Direct Unit Cost" * PurchaseLine.Quantity);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateAdjustmentAccounts(
        PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group",LibraryERM.CreateGLAccountNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post Purchase Order as Receive.
      UpdateCurrencyOnJob(JobTask."Job No.",'');  // Update the Currency Code as Blank on Job.

      // 2. Exercise: Post the Purchase Order as Invoice now.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Amount in Job Ledger Entries.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobTask."Job No.");
      JobLedgerEntry.TESTFIELD("Total Cost (LCY)",TotalCost);
      JobLedgerEntry.TESTFIELD("Total Cost",TotalCost);

      // 4. Tear Down:
      UpdateAdjustmentAccounts(
        PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group",GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    PROCEDURE PostPurchaseCreditMemoWithNegativeQuantities@289();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseHeaderCreditMemo@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Credit Memo]
      // [SCENARIO 378571] Job Ledger Entry with negative quantity in credit memo lines should be created after posting credit memo.
      Initialize;

      // [GIVEN] Create purchase order and purchase line with filled "Job No." and "Job Task No." fields.
      PurchaseOrderWithJobTask(PurchaseHeader);

      // [GIVEN] Post purchase order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [GIVEN] Create Purchase Header for purchase credit memo.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderCreditMemo,PurchaseHeaderCreditMemo."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeaderCreditMemo.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeaderCreditMemo.MODIFY(TRUE);

      // [GIVEN] Copy Purchase Lines in purchase credit memo from posted invoice.
      InvokeCopyPurchaseDocument(PurchaseHeaderCreditMemo,DocumentNo);

      // [GIVEN] Add Purchase Line in credit memo with negative quantity.
      AddPurchaseLineWithNegativeQuantity(PurchaseLine,PurchaseHeaderCreditMemo);

      // [WHEN] Post credit memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeaderCreditMemo,TRUE,TRUE);

      // [THEN] Job Ledger Entry Lines with negative quantity should be created.
      VerifyLastJobLedgerEntryLine(PurchaseLine,DocumentNo,-PurchaseLine."Return Qty. to Ship (Base)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE PurchaseOrderItemCostChange@142();
    VAR
      JobTask@1003 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      JobJournalLine@1004 : Record 210;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1005 : Record 39;
      Item@1006 : Record 27;
      PlanningLineDirectUnitCostBeforeJobs@1007 : Decimal;
      PlanningLineDirectUnitCostAfterJobs@1009 : Decimal;
    BEGIN
      // [FEATURE] [Update Job Item Cost]
      // [SCENARIO] Update Job Item Cost job updates Planning Line "Posted Total Cost" after setting a different Item Cost in Purchase Order

      // 1. Setup: Create an Item, a Job, a Job Task, a Job Planning Line, a Purchase Header and a Purchase Line. In Purchase Line make sure that the "Direct Unit Cost" is
      // different form Item's Unit Cost.
      Initialize;

      // Create Item
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDecInRange(1,1000,2));
      Item.VALIDATE("Costing Method",Item."Costing Method"::FIFO);
      Item.MODIFY(TRUE);

      CreateJobTaskWithApplyUsageLink(JobTask);

      // Create JobPlanningLine:
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::"Both Schedule and Contract",
        JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",Item."No.");
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      JobPlanningLine.MODIFY(TRUE);

      LibraryJob.CreateJobJournalLineForPlan(JobPlanningLine,LibraryJob.UsageLineTypeBlank,
        LibraryRandom.RandDecInRange(10,20,2),JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      // Create PurchaseHeader
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');

      // Create PurchaseLine
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,LibraryJob.Job2PurchaseConsumableType(JobPlanningLine.Type),
        Item."No.",LibraryRandom.RandInt(10));

      WITH PurchaseLine DO BEGIN
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        // give a different unit cost:
        VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
        MODIFY(TRUE)
      END;

      // 2. Exercise: Post Purchase and then run Adjust Cost - Item Entries and Update Job Item Cost jobs.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
      PlanningLineDirectUnitCostBeforeJobs := JobPlanningLine."Posted Total Cost";

      // Run the first job: AdjustCostItemEntries. Item."Unit Cost" should be updated after this
      // since unit cost is changed in PurchaseLine above:
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Run the second job: RunUpdateJobItemCost. PlanningLine."Direct Unit Cost" should be updated:
      LibraryJob.RunUpdateJobItemCost(JobTask."Job No.");

      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
      PlanningLineDirectUnitCostAfterJobs := JobPlanningLine."Posted Total Cost";

      // 3. Verify: Ensure that the Planning Line's Direct Unit Cost has changed after running jobs
      Assert.AreNotEqual(
        PlanningLineDirectUnitCostBeforeJobs,
        PlanningLineDirectUnitCostAfterJobs,
        'PlanningLine."Direct Unit Cost" must be changed after running AdjustCostItemEntries and UpdateJobItemCost');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE FillInJobNoInPurchaseLineWhenReservationEntryExists@107();
    VAR
      Item@1000 : Record 27;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Test an error message pops up when fill in Job No. and Job Task No. in Purchase Order Line when Reservation Entry exists.

      Initialize;
      // 1. Setup: Create Item, create Job No. and Job Task No. and Job Planning Line. Calculate Plan and Carry Out Action Message for Requisition Worksheet.
      CreateItemWithVendorNo(Item,Item."Reordering Policy"::Order); // Any policy is ok.
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Item,Item."No.",LibraryRandom.RandInt(10),TRUE); // Use Random for Quantity.
      CalculatePlanAndCarryOutActionMessageForRequisitionWorksheet(Item,Item."No.");

      // 2. Exercise: Fill in Job No. and Job Task No. in Purchase Order Line.
      ASSERTERROR GetPurchaseLineAndFillJobNo(PurchaseLine,Item."No.",JobTask."Job No.");

      // 3. Verify: Verify error message is correct.
      Assert.ExpectedError(JobNoErr);
    END;

    [Test]
    PROCEDURE UndoPurchReceiptWithJob@237();
    VAR
      Item@1002 : Record 27;
      JobTask@1004 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1006 : Record 32;
      PurchRcptLine@1005 : Record 121;
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO] Verify that Source Type/No is filled in ILEs and VEs when undoing purchase receipt.

      // [GIVEN] Receved Purchase Order with Job.
      Initialize;
      CreateItemWithVendorNo(Item,Item."Reordering Policy"::Order);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,Item."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Undo Purchase Receipt.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      UndoPurchRcpt(PurchaseLine);

      // [THEN] There are no Item Ledger or Value entries with empty Source Type/Source No.
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Order No.",PurchaseLine."Document No.");
        SETRANGE("Order Line No.",PurchaseLine."Line No.");
        FINDLAST;
        VerifyUndoLedgerEntrySource(
          ItemLedgerEntry."Document Type"::"Purchase Receipt","Document No.","Line No.",
          ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."Buy-from Vendor No.");
      END;
    END;

    [Test]
    PROCEDURE UndoPurchReturnWithJob@246();
    VAR
      Item@1002 : Record 27;
      JobTask@1004 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1006 : Record 32;
      ReturnShipmentLine@1005 : Record 6651;
    BEGIN
      // [FEATURE] [Undo Shipment]
      // [SCENARIO] Verify that Source Type/No and Unit of Measure Code is filled in ILEs and VEs when undoing purchase return.

      // [GIVEN] Shipped Purchase Return Order with Job.
      Initialize;
      CreateItemWithVendorNo(Item,Item."Reordering Policy"::Order);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,Item."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Undo Purchase Return.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      UndoPurchReturn(Item."No.");

      // [THEN] There are no Item Ledger or Value entries with empty Source Type/Source No.
      WITH ReturnShipmentLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        FINDLAST;
        VerifyUndoLedgerEntrySource(
          ItemLedgerEntry."Document Type"::"Purchase Return Shipment","Document No.","Line No.",
          ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."Buy-from Vendor No.");
      END;
      // [THEN] Unit of measure code is filled in all item ledger entries
      VerifyItemLedgerEntryUnitOfMeasure(Item);
    END;

    [Test]
    PROCEDURE TransferSourceValuesUT@262();
    VAR
      ItemLedgEntry@1006 : Record 32;
      ValueEntry@1005 : Record 5802;
      ItemJnlLine@1000 : Record 83;
      UndoPostingMgt@1001 : Codeunit 5817;
    BEGIN
      // [FEATURE] [Undo Posting Management]
      // [SCENARIO] Verify that Source values are tranferred to Item Journal Line from ILE/VE when function TransferSourceValues called.

      // [GIVEN] Existing Item Ledger Entry and correspondent Value Entry with source values.
      Initialize;
      MockUpILE(ItemLedgEntry);
      MockUpVE(ItemLedgEntry."Entry No.",ValueEntry);

      // [WHEN] Call TransferSourceValues.
      UndoPostingMgt.TransferSourceValues(ItemJnlLine,ItemLedgEntry."Entry No.");

      // [THEN] Values are transferred correctly.
      VerifyTransferredSource(ItemJnlLine,ItemLedgEntry,ValueEntry);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseInvoiceWithLCYJobPricesInclVAT@180();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1011 : Decimal;
      TotalUnitCostLCY@1012 : Decimal;
    BEGIN
      // [SCENARIO 120877] Verify Total Unit Cost/(LCY) in Job LE when Purch. Doc. Price Incl. VAT = TRUE, Job - LCY/Incoice - LCY
      // [GIVEN] Job/Job Task with no Currency defined
      Initialize;
      CreateJobWithJobTask(JobTask);
      // [GIVEN] Purchase Invoice (LCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,JobTask,'',1,TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated without including VAT Amount
      VerifyJobLedgerEntryTotalCostValues(DocumentNo,JobTask."Job No.",TotalUnitCost,TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseInvoiceWithFCYJobPricesInclVAT@200();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 120877] Verify Total Unit Cost/(LCY) in Job LE when Purch. Doc. Price Incl. VAT = TRUE,  Job - LCY/Incoice - FCY
      // [GIVEN] Job/Job Task with no Currency defined
      Initialize;
      CreateJobWithJobTask(JobTask);
      // [GIVEN] Purchase Invoice (FCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,JobTask,FindFCY,1,TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated without including VAT Amount
      VerifyJobLedgerEntryTotalCostValues(DocumentNo,JobTask."Job No.",TotalUnitCost,TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostFCYPurchaseInvoiceWithFCYJobPricesInclVAT@223();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 120877] Verify Total Unit Cost/(LCY) in Job LE when Purch. Doc. Price Incl. VAT = TRUE,  Job - FCY/Incoice - FCY
      // [GIVEN] Job/Job Task with Currency defined
      Initialize;
      CreateJobWithCurrecy(JobTask,FindFCY);
      // [GIVEN] Purchase Order (FCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,JobTask,FindFCY,1,TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated without including VAT Amount
      VerifyJobLedgerEntryTotalCostValues(DocumentNo,JobTask."Job No.",TotalUnitCost,TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostFCYPurchaseInvoiceWithLCYJobPricesInclVAT@224();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 120877] Verify Total Unit Cost/(LCY) in Job LE when Purch. Doc. Price Incl. VAT = TRUE,  Job - FCY/Incoice - LCY
      // [GIVEN] Job/Job Task with Currency defined
      Initialize;
      CreateJobWithCurrecy(JobTask,FindFCY);
      // [GIVEN] Purchase Order (LCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,JobTask,'',1,TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated without including VAT Amount
      VerifyJobLedgerEntryTotalCostValues(DocumentNo,JobTask."Job No.",TotalUnitCost,TotalUnitCostLCY);
    END;

    [Test]
    [HandlerFunctions(PageHandler)]
    PROCEDURE PurchCrMemoWithoutReturnShipmentAndPreventNegativeInventory@182();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      PurchHeader@1001 : Record 38;
      PurchLine@1003 : Record 39;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Prevent Negative Inventory]
      // [SCENARIO 363738] Post negative Item Ledger Entry for Credit Memo with Job when "Return Shipment on Credit Memo" = No and "Prevent Negative Inventory" = yes

      Initialize;
      PurchasesPayablesSetup.GET;
      // [GIVEN] "Return Shipment on Credit Memo" = No
      UpdateReturnShipmentOnCreditMemo(FALSE);
      // [GIVEN] Posted Purchase Invoice with Job and Item with option "Prevent Negative Inventory" = Yes
      PostPurchOrderWithItemPreventNegativeInventory(PurchHeader,PurchLine);
      // [GIVEN] Purchase Credit Memo with line copied from Posted Purchase Invoice
      CreatePurchaseHeader(PurchHeader."Document Type"::"Credit Memo",PurchHeader."Buy-from Vendor No.",PurchHeader);
      PurchHeader.GetPstdDocLinesToRevere;

      // [WHEN] Post Purchase Credit Memo
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Negative Purchase Credit Memo Item Ledger Entry posted
      VerifyPurcCrMemoItemLedgerEntry(PurchLine,DocumentNo);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseCrMemoWithLCYJobPrices@189();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1011 : Decimal;
      TotalUnitCostLCY@1012 : Decimal;
    BEGIN
      // [SCENARIO 364512] Verify negative Total Unit Cost/(LCY) in Job Ledger Entry when Posting Purch. Cr. Memo with LCY and Job with LCY
      // [GIVEN] Job/Job Task with no Currency defined

      Initialize;
      CreateJobWithJobTask(JobTask);
      // [GIVEN] Purchase Credit Memo (LCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",JobTask,'',
        1 / LibraryRandom.RandIntInRange(3,5),TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Credit Memo
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated with negative amount
      VerifyJobLedgerEntryTotalCostValues(
        DocumentNo,JobTask."Job No.",
        -TotalUnitCost,
        -TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostLCYPurchaseCrMemoWithFCYJobPrices@186();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 364512] Verify negative Total Unit Cost/(LCY) in Job Ledger Entry when Posting Purch. Cr. Memo with FCY and Job with LCY
      // [GIVEN] Job/Job Task with no Currency defined
      Initialize;
      CreateJobWithJobTask(JobTask);
      // [GIVEN] Purchase Credit Memo (FCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",JobTask,FindFCY,
        1 / LibraryRandom.RandIntInRange(3,5),TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Credit Memo
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated with negative amount
      VerifyJobLedgerEntryTotalCostValues(
        DocumentNo,JobTask."Job No.",
        -TotalUnitCost,
        -TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostFCYPurchaseCrMemoWithFCYJobPrices@185();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 364512] Verify negative Total Unit Cost/(LCY) in Job Ledger Entry when Posting Purch. Cr. Memo with FCY and Job with FCY
      // [GIVEN] Job/Job Task with Currency defined
      Initialize;
      CreateJobWithCurrecy(JobTask,FindFCY);
      // [GIVEN] Purchase Credit Memo (FCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",JobTask,FindFCY,
        1 / LibraryRandom.RandIntInRange(3,5),TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Credit Memo
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated with negative amount
      VerifyJobLedgerEntryTotalCostValues(
        DocumentNo,JobTask."Job No.",
        -TotalUnitCost,
        -TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE PostFCYPurchaseCrMemoWithLCYJobPrices@183();
    VAR
      JobTask@1001 : Record 1001;
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1003 : Code[20];
      TotalUnitCost@1012 : Decimal;
      TotalUnitCostLCY@1011 : Decimal;
    BEGIN
      // [SCENARIO 364512] Verify negative Total Unit Cost/(LCY) in Job Ledger Entry when Posting Purch. Cr. Memo with LCY and Job with FCY
      // [GIVEN] Job/Job Task with Currency defined
      Initialize;
      CreateJobWithCurrecy(JobTask,FindFCY);
      // [GIVEN] Purchase Credit Memo (LCY) with G/L Account line and Job/Job Task defined
      CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",JobTask,'',
        1 / LibraryRandom.RandIntInRange(3,5),TotalUnitCostLCY,TotalUnitCost);
      // [WHEN] User Posts Purchase Credit Memo
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entries Total Unit Cost/(LCY) are calculated with negative amount
      VerifyJobLedgerEntryTotalCostValues(
        DocumentNo,JobTask."Job No.",
        -TotalUnitCost,
        -TotalUnitCostLCY);
    END;

    [Test]
    PROCEDURE UndoPurchReceiptWithJobReversesCostAmount@193();
    VAR
      Item@1000 : Record 27;
      JobTask@1002 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      ValueEntry@1001 : Record 5802;
      PostedPurchRcptNo@1005 : Code[20];
      PurchRcptToRevertNo@1007 : Code[20];
      CostAmount@1006 : Decimal;
      Qty@1008 : Decimal;
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 371776] Cost amount is reversed after udoing purchase receipt with linked job

      Initialize;
      // [GIVEN] Item "I" valued by average cost
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);

      // [GIVEN] Post purchase receipt "P1" for item "I" with linked job, cost amount = "X"
      CreateJobWithJobTask(JobTask);
      CreateJobPurchaseOrderWithItem(PurchaseHeader,PurchaseLine,JobTask,Item."No.");
      CostAmount := PurchaseLine."Line Amount";
      Qty := PurchaseLine.Quantity;
      PostedPurchRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Post purchase receipt "P2" for the same item "I" with linked job, but with different cost amount
      PurchaseHeader."No." := '';
      CreateJobPurchaseOrderWithItem(PurchaseHeader,PurchaseLine,JobTask,Item."No.");
      PurchRcptToRevertNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Run cost adjustment for item "I" to update cost amount in job consumption entries
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [GIVEN] Undo purchase receipt "P2"
      UndoPurchRcpt(PurchaseLine);

      // [WHEN] Run cost adjustment for item "I"
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Cost amount in purchase receipt "P2" is fully reversed
      // [THEN] Cost amount in job consumption linked to purchase receipt "P1" is "-X"
      VerifyItemLedgerEntry(
        ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.",Item."No.",
        ValueEntry."Document Type"::"Purchase Receipt",PostedPurchRcptNo,
        JobTask."Job No.",-Qty,0,0,-CostAmount);
      VerifyValueEntryReversedAmount(ValueEntry."Document Type"::"Purchase Receipt",PurchRcptToRevertNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE UndoPurchReceiptWithJobAndSNTrackingReversesCostAmount@192();
    VAR
      Item@1000 : Record 27;
      JobTask@1002 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      ValueEntry@1007 : Record 5802;
      PostedPurchRcptNo@1005 : Code[20];
      PurchRcptToRevertNo@1001 : Code[20];
      CostAmount@1006 : Decimal;
    BEGIN
      // [FEATURE] [Undo Receipt] [Item Tracking]
      // [SCENARIO 371776] Cost amount is reversed after udoing purchase receipt with linked job and item SN tracking

      Initialize;
      // [GIVEN] Item "I" valued by average cost tracked by serial number
      CreateSerialTrackedItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);

      // [GIVEN] Post purchase receipt "P1" for item "I" with linked job and serial number tracking
      CreateJobWithJobTask(JobTask);
      CreateJobPurchaseOrderWithItem(PurchaseHeader,PurchaseLine,JobTask,Item."No.");
      PurchaseLine.OpenItemTrackingLines;
      CostAmount := PurchaseLine."Direct Unit Cost";
      PostedPurchRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Post purchase receipt "P2" for the same item "I" with linked job, but with different cost amount
      PurchaseHeader."No." := '';
      CreateJobPurchaseOrderWithItem(PurchaseHeader,PurchaseLine,JobTask,Item."No.");
      PurchaseLine.OpenItemTrackingLines;
      PurchRcptToRevertNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Run cost adjustment for item "I"
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [GIVEN] Undo purchase receipt "P2"
      UndoPurchRcpt(PurchaseLine);

      // [WHEN] Run cost adjustment for item "I"
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Cost amount in purchase receipt "P2" is fully reversed
      // [THEN] Cost amount in job consumption linked to purchase receipt "P1" is "-X"
      VerifyItemLedgerEntry(
        ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.",Item."No.",
        ValueEntry."Document Type"::"Purchase Receipt",PostedPurchRcptNo,
        JobTask."Job No.",-1,0,0,-CostAmount);
      VerifyValueEntryReversedAmount(ValueEntry."Document Type"::"Purchase Receipt",PurchRcptToRevertNo);
    END;

    [Test]
    PROCEDURE AdjustCostTwiceWithJobPurchReceipt@250();
    VAR
      Item@1000 : Record 27;
      JobTask@1002 : Record 1001;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      ValueEntry@1007 : Record 5802;
      ReleasePurchaseDocument@1005 : Codeunit 415;
      PostedPurchRcptNo@1009 : Code[20];
      ItemJnlDocNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Adjust Cost - Item Entries] [Item Application]
      // [SCENARIO 375119] Positive Adjustment is cost adjusted when applied to negative adjustment of Job Purchase.

      Initialize;
      // [GIVEN] Item valued by average cost
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);

      // [GIVEN] Receive Job Purchase Order
      CreateJobWithJobTask(JobTask);
      CreateJobPurchaseOrderWithItem(PurchaseHeader,PurchaseLine,JobTask,Item."No.");
      PostedPurchRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Post Positive Adjustment applied to negative adjustment posted by Purchase Order
      ItemJnlDocNo := PostAppliedPosAdjustment(PurchaseLine,PostedPurchRcptNo);

      // [GIVEN] Run cost adjustment
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [GIVEN] Change Direct Unit Cost in Purchase Line, Invoice Purchase Order
      ReleasePurchaseDocument.Reopen(PurchaseHeader);
      WITH PurchaseLine DO BEGIN
        FIND;
        VALIDATE("Direct Unit Cost","Direct Unit Cost" + 0.01);
        MODIFY(TRUE);
      END;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [WHEN] Run cost adjustment
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Positive Adjustment is adjusted as well.
      VerifyItemLedgerEntry(
        ValueEntry."Item Ledger Entry Type"::"Positive Adjmt.",Item."No.",
        ValueEntry."Document Type"::" ",ItemJnlDocNo,'',PurchaseLine.Quantity,
        PurchaseLine.Quantity,PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost",0);
    END;

    [Test]
    PROCEDURE JobPricesOnPurchRcptLineWhenPostingPartially@191();
    VAR
      PurchHeader@1002 : Record 38;
      PurchLine@1004 : Record 39;
    BEGIN
      // [FEATURE] [Purchase Receipt]
      // [SCENARIO 375061] Job Prices should be recalculated according to "Qty. to Receive" on Purchase Receipt Line

      Initialize;
      // [GIVEN] Purchase Order with Job Task attached, Quantity = "A", "Qty. to Receive" = "A" / 2, "Job Line Amount" = "X", "Job Total Price" = "Y"
      CreatePurchOrderWithJobTaskAndPartialQtyToReceive(PurchHeader,PurchLine);

      // [WHEN] Post both purchase receipts
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      // [THEN] Purchase Receipt Line posted with "Job Line Amount" = "X" / 2, "Job Total Price" = "Y" / 2
      VerifyJobTotalPricesOnPurchRcptLines(PurchLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobConsumptionOnValueEntryWithSameDocAndDiffItem@296();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJournalLine@1003 : Record 210;
      ValueEntry@1005 : Record 5802;
      JobLedgEntry@1006 : Record 169;
      DocNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Rounding]
      // [SCENARIO 375691] Job Consumption calculation should not consider Value Entries with the same "Document No." but different "Item No."

      Initialize;
      // [GIVEN] Job with Job Task "X"
      CreateJobWithJobTask(JobTask);
      DocNo := LibraryUtility.GenerateGUID;

      // [GIVEN] Value Entry with type = "Rounding", Item = "A" and Job Task = "X"
      MockRoundingValueEntry(ValueEntry,JobTask,DocNo);

      // [GIVEN] Job Planning Line with Job Task = "X", Item = "B" and "Unit Cost" = 100
      CreateJobPlanningLineWithDocNo(JobPlanningLine,JobTask,DocNo,ABS(ValueEntry."Invoiced Quantity"));

      // [GIVEN] Job Journal Line for Job Planning Line
      CreateJobJournalLineWithDocNo(JobJournalLine,JobPlanningLine);

      // [WHEN] Post Job Journal Line
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Job Ledger Entry created with Job Task = "X", Item = "B" and "Unit Cost" = 100
      FindJobLedgerEntry(JobLedgEntry,DocNo,JobTask."Job No.");
      JobLedgEntry.TESTFIELD("Total Cost (LCY)",JobJournalLine."Total Cost (LCY)");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE PostUsageWithoutLinkToJobPlanningLineWithTracking@215();
    VAR
      Item@1000 : Record 27;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobJournalLine@1003 : Record 210;
      Quantity@1006 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 380046] Usage from Job Journal Line is automatically link to match Job Planning Line if tracking exists for this line

      Initialize;

      // [GIVEN] Job "X" with "Apply Usage Link"
      CreateItemWithVendorNo(Item,Item."Reordering Policy"::"Lot-for-Lot");
      CreateJobTaskWithApplyUsageLink(JobTask);

      // [GIVEN] Job Planning Line with Item "Y", Quantity = 100
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Item,Item."No.",LibraryRandom.RandInt(10),TRUE);
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::"Both Schedule and Contract");
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(50,100));
      JobPlanningLine.MODIFY(TRUE);

      // [GIVEN] Calculated Plan for Job Planning Line. Reservation Entry for Job "X", Item "Y" and Quantity = -100 is generated.
      CalculatePlanAndCarryOutActionMessageForRequisitionWorksheet(Item,Item."No.");

      // [GIVEN] Posted Purchase Order generated from Plan
      FindAndPostPurchHeader(Item."No.");

      // [GIVEN] Positive adjustment of Item "Y". Quantity = 10
      Quantity := LibraryRandom.RandIntInRange(10,20);
      PostPositiveAdjustment(Item."No.",Quantity);

      // [GIVEN] Job Journal Line with Job "X", Item "Y" and Quantity = 10
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Item,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",Item."No.");
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);

      // [WHEN] Post Job Journal Line
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] "Qty. Posted" in Job Planning line created with Job "X", Item "Y" is 10
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD("Qty. Posted",Quantity);

      // [THEN] Reservation Entry for Job "X", Item "Y" has Quantity = -90
      VerifyJobPlanningTrackingReservationEntry(JobTask."Job No.",Item."No.",JobPlanningLine."Qty. Posted" - JobPlanningLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE RestoreDimensionFromJobOnClearJobTaskNo@11();
    VAR
      PurchaseLine@1000 : Record 39;
      JobTask@1001 : Record 1001;
      ShortcutDimension1Code@1002 : Code[20];
      DimSetID@1003 : Integer;
    BEGIN
      // [SCENARIO 380045] Restore dimensions from Job No. when Job Task No. without dimension is cleared in Purchase Line.
      // [FEATURE] [Job] [Dimensions] [UT]

      Initialize;

      // [GIVEN] Create Job "JOB" with Job Task "JT"
      // [GIVEN] Assign global dimension "DIM1" for "JOB", but not to "JT"
      CreateJobWithGlobalDimension(JobTask);

      // [GIVEN] Create Purchase Order "PO" with one Purchase Line
      // [GIVEN] Assign "JOB" to Purchase Line
      // [GIVEN] "DIM1" is now assigned to Purchase Line
      // [GIVEN] PurchaseLine."Dimension Set ID" "DS1" is now updated
      CreatePurchaseDocumentWithMarkedGlobalDim(JobTask,PurchaseLine,ShortcutDimension1Code,DimSetID);

      // [GIVEN] Validate PurchaseLine."Job Task No." with a "JT" with no dimensions
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.MODIFY(TRUE);

      // [WHEN] Validate PurchaseLine."Job Task No." with blank value
      PurchaseLine.VALIDATE("Job Task No.",'');
      PurchaseLine.MODIFY(TRUE);

      // [THEN] PurchaseLine."Shortcut Dimension 1 Code" is restored back to "DIM1"
      // [THEN] PurchaseLine."Dimension Set ID" is restored back to "DS1"
      PurchaseLine.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      PurchaseLine.TESTFIELD("Dimension Set ID",DimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE DimensionShortcutNotClearedWhenJobTaskSelected@123();
    VAR
      PurchaseLine@1002 : Record 39;
      JobTask@1001 : Record 1001;
      ShortcutDimension1Code@1000 : Code[20];
    BEGIN
      // [SCENARIO 380045] When Job Task is validated a Shortcut Dimension Code is not overwritten by a blank value
      // [FEATURE] [Job] [Dimensions] [UT]

      Initialize;

      // [GIVEN] Create Job "JOB" with Job Task "JT"
      // [GIVEN] Assign global dimension "DIM1" for "JOB", but not to "JT"
      CreateJobWithGlobalDimension(JobTask);

      // [GIVEN] Create Purchase Order "PO" with one Purchase Line
      // [GIVEN] Assign "JOB" to Purchase Line
      // [GIVEN] "DIM1" is now assigned to Purchase Line
      CreatePurchaseDocumentWithMarkedDimShortcuts(JobTask,PurchaseLine,ShortcutDimension1Code);

      // [WHEN] Validate PurchaseLine."Job Task No." with "JT" with no dimensions
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.MODIFY(TRUE);

      // [THEN] PurchaseLine."Shortcut Dimension 1 Code" is not changed and equal to "DIM1"
      PurchaseLine.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
    END;

    [Test]
    PROCEDURE NegativeOrderWithJobIsPostedWithItemAcquisition@221();
    VAR
      Location@1003 : Record 14;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      ItemLedgerEntry@1004 : Record 32;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Purchase Order]
      // [SCENARIO 380652] Purchase Order with negative quantity and job is posted together with a paired entry of item acquisition. The Order is fully applied to this acquisition.
      Initialize;

      // [GIVEN] Negative inventory is disallowed.
      // [GIVEN] Purchase Order for negative quantity with Job No. and Job Task No. selected.
      LibraryInventory.SetPreventNegativeInventory(TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseDocumentWithLocationAndJob(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,Location.Code,-1);

      // [WHEN] Post the Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] The Purchase Order is successfully posted.
      // [THEN] Item Ledger Entry with "Negative Adjmt." type and positive quantity with the Job No. (acquisition) is created.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Receipt",DocumentNo,
        PurchaseLine."Job No.",-PurchaseLine.Quantity,0,0,-PurchaseLine."Line Amount");
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Receipt",DocumentNo,
        PurchaseLine."Job No.",PurchaseLine.Quantity,0,0,PurchaseLine."Line Amount");

      // [THEN] The Order is fully applied to the acquisition.
      VerifyItemApplicationEntry(PurchaseLine);
    END;

    [Test]
    PROCEDURE PositiveReturnOrderWithJobIsPostedWithItemAcquisition@222();
    VAR
      Location@1004 : Record 14;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      ItemLedgerEntry@1001 : Record 32;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Purchase Return Order]
      // [SCENARIO 380652] Purchase Return Order with positive quantity and job is posted together with a paired entry of item acquisition. The Return Order is fully applied to this acquisition.
      Initialize;

      // [GIVEN] Negative inventory is disallowed.
      // [GIVEN] Purchase Return Order for positive quantity with Job No. and Job Task No. selected.
      LibraryInventory.SetPreventNegativeInventory(TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseDocumentWithLocationAndJob(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",Location.Code,1);

      // [WHEN] Post the Return Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] The Return Order is successfully posted.
      // [THEN] Item Ledger Entry with "Negative Adjmt." type and positive quantity with the Job No. (acquisition) is created.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",PurchaseLine.Quantity,0,0,PurchaseLine."Line Amount");
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",-PurchaseLine.Quantity,0,0,-PurchaseLine."Line Amount");

      // [THEN] The Return is fully applied to the acquisition.
      VerifyItemApplicationEntry(PurchaseLine);
    END;

    [Test]
    PROCEDURE NegativeReturnOrderWithJobIsPostedWithItemWriteOff@225();
    VAR
      Location@1004 : Record 14;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      ItemLedgerEntry@1001 : Record 32;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Purchase Return Order]
      // [SCENARIO 380652] Purchase Return Order with negative quantity and job is posted together with a paired entry of item write-off. The write-off is fully applied to this Return.
      Initialize;

      // [GIVEN] Negative inventory is disallowed.
      // [GIVEN] Purchase Return Order for negative quantity with Job No. and Job Task No. selected.
      LibraryInventory.SetPreventNegativeInventory(TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseDocumentWithLocationAndJob(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",Location.Code,-1);

      // [WHEN] Post the Return Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] The Return Order is successfully posted.
      // [THEN] Item Ledger Entry with "Negative Adjmt." type and negative quantity with the Job No. (write-off) is created.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",PurchaseLine.Quantity,0,0,PurchaseLine."Line Amount");
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",
        ItemLedgerEntry."Document Type"::"Purchase Return Shipment",DocumentNo,
        PurchaseLine."Job No.",-PurchaseLine.Quantity,0,0,-PurchaseLine."Line Amount");

      // [THEN] The write-off is fully applied to the Return.
      VerifyItemApplicationEntry(PurchaseLine);
    END;

    [Test]
    PROCEDURE PostPurchaseInvoiceWithJobAndVATGroups@229();
    VAR
      PurchaseHeader@1003 : Record 38;
      VATBusPostingGroup@1009 : Record 323;
      VATProdPostingGroupArray@1010 : ARRAY [6] OF Record 324;
      VATPostingSetupArray@1011 : ARRAY [6] OF Record 325;
      JobTask@1002 : Record 1001;
      GenBusPostingGroupCode@1018 : Code[10];
      GenProdPostingGroupCode@1017 : Code[10];
      PostedDocumentNo@1012 : Code[20];
      GLAccountNo@1013 : Code[20];
      VendorNo@1014 : Code[20];
      ItemNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 380416] Job Ledger Entry is pointing to a correct General Ledger Entry when Purchase Invoice has been posted with GL Accounts with various VAT Production Posting Groups.

      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateGenPostingGroups(GenProdPostingGroupCode,GenBusPostingGroupCode);
      CreateVATPostingGroupsArray(VATBusPostingGroup,VATProdPostingGroupArray,VATPostingSetupArray);
      GLAccountNo := SetupGLAccount(VATPostingSetupArray[1],GenBusPostingGroupCode,GenProdPostingGroupCode);
      ItemNo := LibraryInventory.CreateItemNoWithPostingSetup(GenProdPostingGroupCode,VATProdPostingGroupArray[1].Code);
      VendorNo := SetupVendorWithVATPostingGroup(VATBusPostingGroup.Code,GenProdPostingGroupCode);

      // [GIVEN] Job with Job Task "JT".
      // [GIVEN] Created Purchase Invoice, where are 8 G/L Account/Item lines have various VAT Prod. Posting Group and "JT"
      CreatePurchaseInvoiceWithJobsWithVATGroups(
        PurchaseHeader,JobTask,VATProdPostingGroupArray,VATBusPostingGroup.Code,VendorNo,GLAccountNo,ItemNo);

      // [WHEN] Post the Purchase Invoice.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Posted Job Ledger Entries, where "Ledger Entry Type" is "G/L Account", are mapped 1-to-1 and 1-to-many to G/L Entries by "Ledger Entry No.".
      // [THEN] Posted Job Ledger Entries, where "Ledger Entry Type" is "Item", are mapped 1-to-1 to Item Ledger Entries by "Ledger Entry No.".
      VerifyJobLedgerEntriesWithGL(PostedDocumentNo,JobTask."Job No.",GLAccountNo,PurchaseHeader."Document Type");
      VerifyJobLedgerEntriesWithItemLedger(PostedDocumentNo,JobTask."Job No.");
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      PurchasePrice@1003 : Record 7012;
      SalesPrice@1002 : Record 7002;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF Initialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdatePrepaymentAccounts;
      // Removing special prices
      PurchasePrice.DELETEALL(TRUE);
      SalesPrice.DELETEALL(TRUE);
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");

      Initialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PostJobPurchaseOrder@93(JobCurrency@1005 : Code[10];PurchaseOrderCurrency@1004 : Code[10]);
    VAR
      JobTask@1006 : Record 1001;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
    BEGIN
      // 1. Setup: Create a Purchase Order with Job selected on the Purchase Lines. Setup Currency on Job and Purchase Order as per
      // parameter passed. Save Purchase Line in temporary table.
      Initialize;
      CreateJobWithCurrecy(JobTask,JobCurrency);
      CreatePurchaseOrderWithCurrency(PurchaseHeader,PurchaseOrderCurrency);
      CreatePurchaseLines(PurchaseHeader);
      AttachJobTaskToPurchaseDoc(JobTask,PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryJob.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check the entries created after Posting of Purchase Order.
      VerifyJobInfoOnPurchRcptLines(TempPurchaseLine);
      VerifyItemLedger(TempPurchaseLine);
      VerifyValueEntries(TempPurchaseLine);
      LibraryJob.VerifyPurchaseDocPostingForJob(TempPurchaseLine)
    END;

    LOCAL PROCEDURE PostJobPurchaseOrderWithTypeGLAccount@137(JobCurrency@1007 : Code[10];PurchaseOrderCurrency@1006 : Code[10]);
    VAR
      JobTask@1005 : Record 1001;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1000 : Code[20];
      JobLedgerEntryTotalCostLCY@1008 : Decimal;
      GLEntryTotalCostLCY@1002 : Decimal;
      TotalCost@1009 : Decimal;
      UnitCostLCY@1001 : Decimal;
    BEGIN
      // 1. Setup: Create a Purchase Order with Job
      Initialize;
      CreateJobWithCurrecy(JobTask,JobCurrency);
      CreatePurchaseOrderWithCurrency(PurchaseHeader,PurchaseOrderCurrency);
      CreateGLPurchaseLine(PurchaseHeader);
      AttachJobTaskToPurchaseDoc(JobTask,PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      CalculatePurchaseLineAmountValue(PurchaseLine,JobCurrency,JobLedgerEntryTotalCostLCY,TotalCost);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      GLEntryTotalCostLCY := CalculatePurchaseLineAmountValueGL(PurchaseLine,PurchaseHeader."Currency Factor");
      UnitCostLCY := PurchaseLine."Unit Cost (LCY)";

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check the GL Entry amount with JobLedger "Total Cost (LCY)"
      VerifyJobLedgerEntryValue(DocumentNo,JobTask."Job No.",JobLedgerEntryTotalCostLCY,UnitCostLCY);
      VerifyGLEntryValue(DocumentNo,GLEntryTotalCostLCY,PurchaseLine."No.");
    END;

    LOCAL PROCEDURE PostJobPurchaseOrderWithTypeItem@163(JobCurrency@1007 : Code[10];PurchaseOrderCurrency@1006 : Code[10]);
    VAR
      JobTask@1005 : Record 1001;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      GeneralPostingSetup@1002 : Record 252;
      DocumentNo@1000 : Code[20];
      JobLedgerEntryTotalCostLCY@1009 : Decimal;
      GLEntryTotalCostLCY@1008 : Decimal;
      TotalCost@1010 : Decimal;
      UnitCostLCY@1001 : Decimal;
    BEGIN
      // 1. Setup: Create a Purchase Order with Job
      Initialize;
      CreateJobWithCurrecy(JobTask,JobCurrency);
      CreatePurchaseOrderWithCurrency(PurchaseHeader,PurchaseOrderCurrency);
      CreateItemPurchaseLine(PurchaseHeader);
      AttachJobTaskToPurchaseDoc(JobTask,PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      CalculatePurchaseLineAmountValue(PurchaseLine,PurchaseOrderCurrency,JobLedgerEntryTotalCostLCY,TotalCost);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      GLEntryTotalCostLCY := CalculatePurchaseLineAmountValueGL(PurchaseLine,PurchaseHeader."Currency Factor");
      UnitCostLCY := PurchaseLine."Unit Cost (LCY)";
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");

      // 2. Exercise: Post the Purchase Order as Receive and Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Check the GL Entry amount with JobLedger "Total Cost (LCY)"
      VerifyJobLedgerEntryValue(DocumentNo,JobTask."Job No.",JobLedgerEntryTotalCostLCY,UnitCostLCY);
      VerifyGLEntryValue(DocumentNo,GLEntryTotalCostLCY,GeneralPostingSetup."Purch. Account");
    END;

    LOCAL PROCEDURE PreparePurchHeaderWithJobPlanningNo@165(Quantity@1005 : Decimal;QtyToReceive@1006 : Decimal);
    VAR
      JobPlanningLine@1003 : Record 1003;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Setup: Create Purchase Order with Job Planning Line No. and update Quantity To Receive on Purchase Line.
      PreparePurchHeaderAndJobPlanningLine(PurchaseHeader,JobPlanningLine,Quantity,QtyToReceive);

      // 2. Exercise: Post Purchase Order with partial Quantity.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify: Verify Quantity on Job Planning Line.
      VerifyQuantityOnJobPlanningLine(JobPlanningLine,Quantity);
    END;

    LOCAL PROCEDURE PreparePurchHeaderAndJobPlanningLine@171(VAR PurchaseHeader@1007 : Record 38;VAR JobPlanningLine@1003 : Record 1003;Quantity@1001 : Decimal;QtyToReceive@1008 : Decimal);
    VAR
      Item@1004 : Record 27;
      JobTask@1002 : Record 1001;
    BEGIN
      CreatePurchaseOrderWithExpectedReceiptDate(PurchaseHeader,LibraryInventory.CreateItem(Item),Quantity);
      CreateJobAndJobPlanningLine(JobPlanningLine,Item."No.",Quantity);
      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      AttachJobToPurchaseDocument(JobTask,PurchaseHeader,JobPlanningLine."Line No.");
      UpdatePurchLineQtyToReceive(PurchaseHeader,QtyToReceive);
    END;

    LOCAL PROCEDURE CalculateCurrencyFactor@141(CurrencyCode@1000 : Code[10]) : Decimal;
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      EXIT(CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount");
    END;

    LOCAL PROCEDURE CalculateJobLedgerEntryQuantity@104(DocumentNo@1001 : Code[20];JobNo@1000 : Code[20]) Quantity : Decimal;
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      REPEAT
        Quantity += JobLedgerEntry.Quantity;
      UNTIL JobLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculatePurchaseLineQuantityToInvoice@114(VAR TempPurchaseLine@1000 : TEMPORARY Record 39) Quantity : Decimal;
    BEGIN
      TempPurchaseLine.FINDSET;
      REPEAT
        Quantity += TempPurchaseLine."Qty. to Invoice";
      UNTIL TempPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@143(VAR Item@1005 : Record 27;StartDate@1000 : Date;EndDate@1004 : Date);
    VAR
      RequisitionWkshName@1001 : Record 245;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CalculatePlanAndCarryOutActionMessageForRequisitionWorksheet@144(Item@1000 : Record 27;ItemNo@1001 : Code[20]);
    BEGIN
      CalculatePlanForRequisitionWorksheet(Item,WORKDATE,WORKDATE);
      AcceptAndCarryOutActionMessageForRequisitionWorksheet(ItemNo);
    END;

    LOCAL PROCEDURE CreateItemWithMultipleUOM@129() : Code[20];
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1004 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateJobTaskWithApplyUsageLink@216(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobAndJobPlanningLine@73(VAR JobPlanningLine@1000 : Record 1003;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine.Type::Item,ItemNo,Quantity,TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@18(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001;Type@1003 : Option;ItemNo@1004 : Code[20];Quantity@1005 : Decimal;UsageLink@1002 : Boolean);
    BEGIN
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,Type,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.VALIDATE("Usage Link",UsageLink);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithDocNo@265(VAR JobPlanningLine@1001 : Record 1003;JobTask@1002 : Record 1001;DocNo@1000 : Code[20];NewQuantity@1003 : Decimal);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        CreateJobPlanningLine(JobPlanningLine,JobTask,
          Type::Item,CreateItem,NewQuantity,TRUE);
        VALIDATE("Document No.",DocNo);
        VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithDocNo@273(VAR JobJournalLine@1000 : Record 210;JobPlanningLine@1001 : Record 1003);
    VAR
      JobJnlBatch@1002 : Record 237;
    BEGIN
      LibraryJob.CreateJobJournalLineForPlan(JobPlanningLine,LibraryJob.UsageLineTypeBoth,1,JobJournalLine);
      JobJournalLine.VALIDATE("Document No.",JobPlanningLine."Document No.");
      JobJournalLine.MODIFY(TRUE);
      // Disable "No. Series" in order to post Job Journal Line with specific "Document No."
      JobJnlBatch.GET(JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name");
      JobJnlBatch.VALIDATE("No. Series",'');
      JobJnlBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimForJob@60(JobNo@1000 : Code[20];ValuePosting@1004 : Option);
    VAR
      DefaultDimension@1001 : Record 352;
      Dimension@1002 : Record 348;
      DimensionValue@1003 : Record 349;
      LibraryDimension@1005 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      DimensionValue.SETRANGE("Dimension Code",Dimension.Code);
      DimensionValue.FINDFIRST;

      IF ValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Job,JobNo,Dimension.Code,'')
      ELSE
        LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Job,JobNo,Dimension.Code,DimensionValue.Code);

      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInvoiceWithGetReceipt@21(PurchaseOrderNo@1000 : Code[20];VAR PurchaseHeader@1002 : Record 38);
    VAR
      PurchRcptLine@1001 : Record 121;
      PurchaseLine@1003 : Record 39;
      PurchGetReceipt@1004 : Codeunit 74;
    BEGIN
      // Create a new Purchase Invoice - Purchase Header. Create Purchase Invoice Lines by Get Receipt Lines function for the Purchase
      // Receipt created earlier.
      PurchRcptLine.SETRANGE("Order No.",PurchaseOrderNo);
      PurchRcptLine.FINDFIRST;

      CreatePurchaseHeader(PurchaseHeader."Document Type"::Invoice,PurchRcptLine."Buy-from Vendor No.",PurchaseHeader);

      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      // Remove the header.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.FINDFIRST;
      PurchaseLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderForJobTask@1(VAR PurchaseHeader@1000 : Record 38);
    VAR
      JobTask@1002 : Record 1001;
      Vendor@1003 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::Order,Vendor."No.",PurchaseHeader);
      CreatePurchaseLines(PurchaseHeader);

      AttachJobTaskToPurchaseDoc(JobTask,PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJobTask@36(VAR PurchaseHeader@1000 : Record 38;JobTask@1001 : Record 1001;DocumentType@1003 : Option;Type@1004 : Option;No@1007 : Code[20]);
    VAR
      Vendor@1005 : Record 23;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Take Random Quantity.
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseHeader(DocumentType,Vendor."No.",PurchaseHeader);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,LibraryRandom.RandDec(10,2));
      AttachJobToPurchaseDocument(JobTask,PurchaseHeader,0);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithMarkedGlobalDim@219(VAR JobTask@1000 : Record 1001;VAR PurchaseLine@1001 : Record 39;VAR ShortcutDimension1Code@1002 : Code[20];VAR DimSetID@1003 : Integer);
    VAR
      Vendor@1004 : Record 23;
      PurchaseHeader@1005 : Record 38;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.MODIFY(TRUE);
      ShortcutDimension1Code := PurchaseLine."Shortcut Dimension 1 Code";
      DimSetID := PurchaseLine."Dimension Set ID";
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithMarkedDimShortcuts@220(VAR JobTask@1000 : Record 1001;VAR PurchaseLine@1001 : Record 39;VAR ShortcutDimension1Code@1002 : Code[20]);
    VAR
      Vendor@1004 : Record 23;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.MODIFY(TRUE);
      ShortcutDimension1Code := PurchaseLine."Shortcut Dimension 1 Code";
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@77(DocumentType@1002 : Option;VendorNo@1003 : Code[20];VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");  // Input random Vendor Cr. Memo No.
      PurchaseHeader.VALIDATE("Document Date",CALCDATE(STRSUBSTNO('<-%1D>',LibraryRandom.RandInt(10)),WORKDATE));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithReserveItemAndUpdateAdjustmentAccount@69(PurchaseHeader@1000 : Record 38);
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1005 : Record 39;
      VATPostingSetup@1002 : Record 325;
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithReserveOption(Item.Reserve::Always),
        LibraryRandom.RandDec(10,2));  // Used Random value for Quantity.
      UpdateAdjustmentAccounts(
        PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group",
        CreateGLAccountWithVAT(GeneralPostingSetup,VATPostingSetup));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));  // Used Random value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithGLAccountLineAttachedToJobTask@187(VAR PurchaseHeader@1002 : Record 38;DocType@1008 : Option;JobTask@1007 : Record 1001;CurrencyCode@1004 : Code[10];Factor@1010 : Decimal;VAR TotalCostLCY@1006 : Decimal;VAR TotalCost@1009 : Decimal);
    VAR
      Vendor@1000 : Record 23;
      VATPostingSetup@1001 : Record 325;
      PurchaseLine@1003 : Record 39;
      GLAccount@1005 : Record 15;
      Job@1012 : Record 167;
    BEGIN
      Job.GET(JobTask."Job No.");
      Vendor.GET(CreateVendorWithSetup(VATPostingSetup));
      CreatePurchaseHeader(DocType,Vendor."No.",PurchaseHeader);
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Prices Including VAT",TRUE);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(
          VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase),
        LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Qty. to Invoice",ROUND(PurchaseLine.Quantity * Factor,1));
      PurchaseLine.MODIFY(TRUE);
      AttachJobToPurchaseDocument(JobTask,PurchaseHeader,0);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      CalculatePurchaseLineAmountValue(PurchaseLine,Job."Currency Code",TotalCostLCY,TotalCost);
    END;

    LOCAL PROCEDURE CreatePurchOrderWithJobTaskAndPartialQtyToReceive@212(VAR PurchHeader@1001 : Record 38;VAR PurchLine@1000 : Record 39);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreatePurchaseHeader(PurchHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo,PurchHeader);
      CreateItemPurchaseLine(PurchHeader);
      AttachJobTaskToPurchaseDoc(JobTask,PurchHeader);
      UpdatePurchaseLineQuantities(PurchHeader);
      GetPurchaseLines(PurchHeader,PurchLine);
      PurchLine.VALIDATE("Job Unit Price",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@67(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::Order,VendorNo,PurchaseHeader);
      CreatePurchaseLineWithReserveItemAndUpdateAdjustmentAccount(PurchaseHeader);
      AttachJobToPurchaseDocument(JobTask,PurchaseHeader,0);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithLocationAndJob@258(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1002 : Record 39;DocumentType@1001 : Option;LocationCode@1006 : Code[10];SignFactor@1000 : Integer);
    VAR
      JobTask@1004 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocumentWithJobTask(
        PurchaseHeader,JobTask,DocumentType,PurchaseLine.Type::Item,CreateItem);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE(Quantity,SignFactor * PurchaseLine.Quantity);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPurchaseOrderWithItem@209(VAR PurchHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;JobTask@1002 : Record 1001;ItemNo@1003 : Code[20]);
    BEGIN
      CreatePurchaseHeader(PurchHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo,PurchHeader);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      AttachJobToPurchaseDocument(JobTask,PurchHeader,0);
      PurchaseLine.FIND; // return line with "Job No." attached
    END;

    LOCAL PROCEDURE PostPurchOrderWithItemPreventNegativeInventory@188(VAR PurchHeader@1000 : Record 38;VAR PurchaseLine@1003 : Record 39);
    VAR
      Item@1002 : Record 27;
      JobTask@1001 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Prevent Negative Inventory",Item."Prevent Negative Inventory"::Yes);
      Item.MODIFY(TRUE);

      CreateJobPurchaseOrderWithItem(PurchHeader,PurchaseLine,JobTask,Item."No.");
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccountWithVAT@140(GeneralPostingSetup@1001 : Record 252;VATPostingSetup@1000 : Record 325) : Code[20];
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Purchase);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateItem@124() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      EXIT(LibraryInventory.CreateItem(Item));
    END;

    LOCAL PROCEDURE CreateItemWithReserveOption@6(Reserve@1000 : Option) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Reserve,Reserve);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithVendorNo@136(VAR Item@1002 : Record 27;Policy@1001 : Option);
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.VALIDATE("Reordering Policy",Policy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSerialTrackedItem@198(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryItemTracking.AddSerialNoTrackingInfo(Item);
    END;

    LOCAL PROCEDURE CreateJobPurchaseOrderWithTracking@202(VAR PurchaseHeader@1013 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1015 : Code[20];CurrencyCode@1002 : Code[10]);
    VAR
      JobTask@1001 : Record 1001;
      Vendor@1000 : Record 23;
    BEGIN
      CreateJobWithCurrecy(JobTask,CurrencyCode);

      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(9));
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(99,2));
        MODIFY(TRUE);
        OpenItemTrackingLines;
      END;

      AttachJobTaskToPurchaseDoc(JobTask,PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@102(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobWithGlobalDimension@218(VAR JobTask@1000 : Record 1001);
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      CreateJobWithJobTask(JobTask);
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Job,JobTask."Job No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CalculatePurchaseLineAmountValue@157(VAR PurchaseLine@1000 : Record 39;CurrencyCode@1002 : Code[10];VAR TotalCostLCY@1004 : Decimal;VAR TotalCost@1005 : Decimal);
    VAR
      Currency@1003 : Record 4;
      CurrencyExchRate@1006 : Record 330;
      PurchaseHeader@1007 : Record 38;
      JobTotalCostLCY@1008 : Decimal;
      JobUnitCost@1009 : Decimal;
      AmountRoundingPrecision@1010 : Decimal;
    BEGIN
      PurchaseLine.FINDSET;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      REPEAT
        IF CurrencyCode <> '' THEN BEGIN
          Currency.GET(CurrencyCode);
          AmountRoundingPrecision := Currency."Amount Rounding Precision";
          JobUnitCost := ROUND(
              CurrencyExchRate.ExchangeAmtLCYToFCY(
                PurchaseHeader."Posting Date",
                CurrencyCode,
                PurchaseLine."Unit Cost (LCY)",
                CurrencyExchRate.ExchangeRate(PurchaseHeader."Posting Date",CurrencyCode)),
              Currency."Unit-Amount Rounding Precision");
        END ELSE BEGIN
          AmountRoundingPrecision := LibraryERM.GetAmountRoundingPrecision;
          JobUnitCost := PurchaseLine."Unit Cost (LCY)"
        END;
        JobTotalCostLCY :=
          PurchaseLine."Qty. to Invoice" * ROUND(PurchaseLine."Unit Cost (LCY)",LibraryERM.GetUnitAmountRoundingPrecision);
        TotalCostLCY += ROUND(JobTotalCostLCY,AmountRoundingPrecision);
        TotalCost += ROUND(JobUnitCost * PurchaseLine."Qty. to Invoice",AmountRoundingPrecision);
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculatePurchaseLineAmountValueGL@181(VAR PurchaseLine@1000 : Record 39;CurrencyFactor@1002 : Decimal) Total : Decimal;
    BEGIN
      PurchaseLine.FINDSET;
      REPEAT
        IF CurrencyFactor <> 0 THEN
          Total += ROUND(PurchaseLine."Line Amount" / CurrencyFactor,LibraryERM.GetAmountRoundingPrecision)
        ELSE
          Total += ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost",LibraryERM.GetAmountRoundingPrecision);
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateJobWithReserveOption@106(VAR Job@1000 : Record 167);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE(Reserve,Job.Reserve::Always);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithCurrecy@154(VAR JobTask@1000 : Record 1001;JobCurrency@1001 : Code[10]);
    BEGIN
      CreateJobWithJobTask(JobTask);
      UpdateCurrencyOnJob(JobTask."Job No.",JobCurrency);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithCurrency@155(VAR PurchaseHeader@1000 : Record 38;CurrencyCode@1001 : Code[10]);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::Order,Vendor."No.",PurchaseHeader);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLines@24(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1005 : Record 39;
      GeneralPostingSetup@1006 : Record 252;
      VATPostingSetup@1007 : Record 325;
      Counter@1001 : Integer;
    BEGIN
      // Create Purchase Lines in multiple of 4 of each Job Line Type as blank, Schedule, Contract, Both Schedule and
      // Contract and Type as Item and G/L Account.
      FindVATPostingSetup(VATPostingSetup);
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FOR Counter := 1 TO 4 DO BEGIN
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
        PurchaseLine.VALIDATE(Description,FORMAT(LibraryUtility.GenerateGUID));
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100) / 10);
        PurchaseLine.MODIFY(TRUE);
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateGLAccountWithVAT(GeneralPostingSetup,VATPostingSetup),
          LibraryRandom.RandInt(10));
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100) / 10);
        PurchaseLine.VALIDATE(Description,FORMAT(LibraryUtility.GenerateGUID));
        PurchaseLine.MODIFY(TRUE)
      END;
    END;

    LOCAL PROCEDURE CreateGLPurchaseLine@139(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      GeneralPostingSetup@1002 : Record 252;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        CreateGLAccountWithVAT(GeneralPostingSetup,VATPostingSetup),LibraryRandom.RandDec(15,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(15,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemPurchaseLine@166(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,
        CreateItem,LibraryRandom.RandDec(15,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(15,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@103(GenBusPostingGroup@1000 : Code[10];VATBusPostingGroup@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithSetup@190(VAR VATPostingSetup@1000 : Record 325) : Code[20];
    VAR
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      EXIT(CreateVendor(GeneralPostingSetup."Gen. Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group"));
    END;

    LOCAL PROCEDURE CreateGenPostingGroups@227(VAR GenProdPostingGroupCode@1001 : Code[10];VAR GenBusPostingGroupCode@1000 : Code[10]);
    VAR
      GenBusPostingGroup@1002 : Record 250;
      GenProdPostingGroup@1003 : Record 251;
      GeneralPostingSetup@1004 : Record 252;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProdPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusPostingGroup.Code,GenProdPostingGroup.Code);
      GenBusPostingGroupCode := GenBusPostingGroup.Code;
      GenProdPostingGroupCode := GenProdPostingGroup.Code;
    END;

    LOCAL PROCEDURE CreateVATPostingGroupsArray@228(VAR VATBusPostingGroup@1000 : Record 323;VAR VATProdPostingGroupArray@1001 : ARRAY [6] OF Record 324;VAR VATPostingSetupArray@1002 : ARRAY [6] OF Record 325);
    VAR
      CurrentGroupNo@1004 : Integer;
      VATRate@1003 : Integer;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      FOR CurrentGroupNo := 1 TO ARRAYLEN(VATProdPostingGroupArray) DO BEGIN
        LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroupArray[CurrentGroupNo]);
        LibraryERM.CreateVATPostingSetup(
          VATPostingSetupArray[CurrentGroupNo],VATBusPostingGroup.Code,
          VATProdPostingGroupArray[CurrentGroupNo].Code);
        VATRate := LibraryRandom.RandIntInRange(5,50);
        IF CurrentGroupNo IN [3,4] THEN
          VATRate := 0;
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("VAT %",VATRate);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountNo);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountNo);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE(
          "VAT Identifier",
          COPYSTR(
            LibraryERM.CreateRandomVATIdentifierAndGetCode,1,MAXSTRLEN(VATPostingSetupArray[CurrentGroupNo]."VAT Identifier")));
        VATPostingSetupArray[CurrentGroupNo].MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithJobsWithVATGroups@234(VAR PurchaseHeader@1000 : Record 38;VAR JobTask@1001 : Record 1001;VATProdPostingGroupArray@1002 : ARRAY [6] OF Record 324;VATBusPostingGroupCode@1003 : Code[10];VendorNo@1004 : Code[20];GLAccountNo@1005 : Code[20];ItemNo@1013 : Code[20]);
    VAR
      PurchaseLine@1007 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::Item,ItemNo,VATBusPostingGroupCode,VATProdPostingGroupArray[1].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::"G/L Account",GLAccountNo,VATBusPostingGroupCode,VATProdPostingGroupArray[2].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::Item,ItemNo,VATBusPostingGroupCode,VATProdPostingGroupArray[3].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::Item,ItemNo,VATBusPostingGroupCode,VATProdPostingGroupArray[3].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::"G/L Account",GLAccountNo,VATBusPostingGroupCode,VATProdPostingGroupArray[4].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::"G/L Account",GLAccountNo,VATBusPostingGroupCode,VATProdPostingGroupArray[5].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::"G/L Account",GLAccountNo,VATBusPostingGroupCode,VATProdPostingGroupArray[6].Code);
      CreatePurchLineWithJobsAndVATPostingGroups(
        PurchaseHeader,JobTask,PurchaseLine.Type::"G/L Account",GLAccountNo,VATBusPostingGroupCode,VATProdPostingGroupArray[6].Code);
    END;

    LOCAL PROCEDURE CreatePurchLineWithJobsAndVATPostingGroups@226(PurchaseHeader@1007 : Record 38;JobTask@1006 : Record 1001;OptionType@1003 : Option;CodeNo@1004 : Code[20];VATBusPostingGroupCode@1001 : Code[10];VATProdPostingGroupCode@1002 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
      LineAmount@1000 : Decimal;
    BEGIN
      WITH PurchaseLine DO BEGIN
        LineAmount := LibraryRandom.RandDecInRange(100,500,2);
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,OptionType,CodeNo,LibraryRandom.RandDecInRange(100,500,2));
        VALIDATE("Direct Unit Cost",LineAmount);
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Job Line Type","Job Line Type"::"Both Schedule and Contract");
        VALIDATE("Job Unit Price",LineAmount);
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetupGLAccount@233(VATPostingSetup@1001 : Record 325;GenBusPostingGroupCode@1003 : Code[10];GenProdPostingGroupCode@1004 : Code[10]) : Code[20];
    VAR
      GLAccount@1002 : Record 15;
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(GenBusPostingGroupCode,GenProdPostingGroupCode);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.UpdateGLAccountWithPostingSetup(
        GLAccount,GLAccount."Gen. Posting Type"::Purchase,GeneralPostingSetup,VATPostingSetup);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE SetupVendorWithVATPostingGroup@231(VATBusPostingGroupCode@1001 : Code[10];GenProdPostingGroupCode@1002 : Code[10]) : Code[20];
    VAR
      GeneralPostingSetup@1000 : Record 252;
      Vendor@1003 : Record 23;
    BEGIN
      Vendor.GET(LibraryPurchase.CreateVendorWithVATBusPostingGroup(VATBusPostingGroupCode));
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,Vendor."Gen. Bus. Posting Group",GenProdPostingGroupCode);
      WITH GeneralPostingSetup DO BEGIN
        VALIDATE("Direct Cost Applied Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Inventory Adjmt. Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("COGS Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Sales Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Purch. Account",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
      END;
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetReceiptLineOnPurchaseInvoice@22(VAR PurchaseHeader@1002 : Record 38;OrderNo@1000 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
      PurchaseLine@1003 : Record 39;
      PurchGetReceipt@1004 : Codeunit 74;
    BEGIN
      // Create a new Purchase Invoice - Purchase Header. Create Purchase Invoice Lines by Get Receipt Lines function for the Purchase Receipt created earlier.
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.FINDFIRST;

      CreatePurchaseHeader(PurchaseHeader."Document Type"::Invoice,PurchRcptLine."Buy-from Vendor No.",PurchaseHeader);
      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandDec(10,2));  // Used Random value for Quantity.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));  // Used Random value for Direct Unit Cost.
      PurchaseLine.VALIDATE("VAT Prod. Posting Group",PurchRcptLine."VAT Prod. Posting Group");
      PurchaseLine.MODIFY(TRUE);
      PurchaseLine.ShowItemChargeAssgnt;
    END;

    LOCAL PROCEDURE AttachJobToPurchaseDocument@85(JobTask@1003 : Record 1001;PurchaseHeader@1001 : Record 38;JobPlanningLineNo@1002 : Integer);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      WITH PurchaseLine DO BEGIN
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Job Line Type","Job Line Type"::Schedule);
        VALIDATE("Job Planning Line No.",JobPlanningLineNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AttachJobTaskToPurchaseDoc@65(JobTask@1003 : Record 1001;PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
      Counter@1002 : Integer;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      REPEAT
        Counter += 1;
        PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
        PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
        PurchaseLine.VALIDATE("Job Line Type",Counter MOD 4); // Remainder of division by 4 ensures selection of each Job Line Type.
        PurchaseLine.MODIFY(TRUE)
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AcceptAndCarryOutActionMessageForRequisitionWorksheet@147(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        VALIDATE("Accept Action Message",TRUE);
        MODIFY(TRUE);
      END;
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE SetupDocumentDimPurchaseLine@53(PurchaseLine@1003 : Record 39);
    VAR
      DefaultDimension@1000 : Record 352;
      DimSetEntry@1002 : Record 480;
      LibraryDimension@1001 : Codeunit 131001;
      DimSetID@1005 : Integer;
    BEGIN
      FindDefaultDim(DefaultDimension,PurchaseLine."Job No.");
      DimSetID := PurchaseLine."Dimension Set ID";

      FilterDocumentDim(DimSetEntry,DimSetID,DefaultDimension);

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Same Code" THEN
        // Setup dimension value code same as Default Dimension.
        IF NOT DimSetEntry.FINDFIRST THEN BEGIN
          DimSetID :=
            LibraryDimension.CreateDimSet(DimSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END ELSE BEGIN
          DimSetID := LibraryDimension.EditDimSet(DimSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Code Mandatory"
      THEN
        // Setup a dimension.
        IF NOT DimSetEntry.FINDFIRST THEN BEGIN
          DimSetID :=
            LibraryDimension.CreateDimSet(DimSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"No Code" THEN
        // Delete dimension.
        IF DimSetEntry.FINDFIRST THEN BEGIN
          DimSetID := LibraryDimension.DeleteDimSet(DimSetID,DefaultDimension."Dimension Code");
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE SetupDocumentDimLineError@68(PurchaseLine@1003 : Record 39);
    VAR
      DefaultDimension@1000 : Record 352;
      DimensionValue@1001 : Record 349;
      DimSetEntry@1006 : Record 480;
      LibraryDimension@1004 : Codeunit 131001;
      DimSetID@1002 : Integer;
    BEGIN
      FindDefaultDim(DefaultDimension,PurchaseLine."Job No.");
      DimSetID := PurchaseLine."Dimension Set ID";

      FilterDocumentDim(DimSetEntry,DimSetID,DefaultDimension);

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Same Code" THEN BEGIN
        // Setup dimension value code different from that for Default Dimension to generate error.
        LibraryDimension.FindDimensionValue(DimensionValue,DefaultDimension."Dimension Code");
        DimensionValue.SETFILTER(Code,'<>%1',DefaultDimension."Dimension Value Code");
        DimensionValue.FINDFIRST;
        IF NOT DimSetEntry.FINDFIRST THEN BEGIN
          DimSetID := LibraryDimension.CreateDimSet(DimSetID,DefaultDimension."Dimension Code",DimensionValue.Code);
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END ELSE BEGIN
          DimSetID := LibraryDimension.EditDimSet(DimSetID,DefaultDimension."Dimension Code",DimensionValue.Code);
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;
      END;

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Code Mandatory"
      THEN
        // Setup blank dimension to generate error.
        IF DimSetEntry.FINDFIRST THEN BEGIN
          DimSetID := LibraryDimension.DeleteDimSet(DimSetID,DefaultDimension."Dimension Code");
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;

      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"No Code" THEN
        // Setup dimension to generate error.
        IF NOT DimSetEntry.FINDFIRST THEN BEGIN
          LibraryDimension.FindDimensionValue(DimensionValue,DefaultDimension."Dimension Code");
          DimensionValue.FINDFIRST;
          DimSetID := LibraryDimension.CreateDimSet(DimSetID,DefaultDimension."Dimension Code",DimensionValue.Code);
          PurchaseLine.VALIDATE("Dimension Set ID",DimSetID);
          PurchaseLine.MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@149(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE FindDefaultDim@50(VAR DefaultDimension@1000 : Record 352;JobNo@1001 : Code[20]);
    BEGIN
      DefaultDimension.SETRANGE("Table ID",DATABASE::Job);
      DefaultDimension.SETRANGE("No.",JobNo);
      DefaultDimension.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFCY@58() : Code[10];
    VAR
      Currency@1001 : Record 4;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      Currency.SETFILTER(Code,'<>%1',GeneralLedgerSetup."LCY Code");
      Currency.SETRANGE("Amount Rounding Precision",GeneralLedgerSetup."Amount Rounding Precision");
      Currency.NEXT(LibraryRandom.RandInt(Currency.COUNT));
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE FindGLEntry@10(VAR GLEntry@1002 : Record 17;DocumentNo@1000 : Code[20];DocumentType@1001 : Option);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterDocumentDim@63(VAR DimSetEntry@1003 : Record 480;DimSetID@1000 : Integer;DefaultDimension@1002 : Record 352);
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@113(VAR JobLedgerEntry@1002 : Record 169;DocumentNo@1000 : Code[20];JobNo@1001 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindLocation@133() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.SETRANGE("Use As In-Transit",FALSE);
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.NEXT(LibraryRandom.RandInt(Location.COUNT));
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE FindVATPostingSetup@151(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindItemLedgEntry@184(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];EntryType@1002 : Option;DocType@1003 : Option;DocNo@1004 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Document Type",DocType);
      ItemLedgerEntry.SETRANGE("Document No.",DocNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAndPostPurchHeader@213(ItemNo@1000 : Code[20]);
    VAR
      PurchHeader@1001 : Record 38;
      PurchLine@1002 : Record 39;
    BEGIN
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.",ItemNo);
      PurchLine.FINDFIRST;
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      PurchHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE)
    END;

    LOCAL PROCEDURE GetPurchaseLines@25(PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
    END;

    LOCAL PROCEDURE GetAndUpdatePurchaseLines@38(PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Return Qty. to Ship",PurchaseLine.Quantity / 2);  // Update Return Qty to Ship for posting Return Order partially.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddPurchaseLineWithNegativeQuantity@207(VAR PurchaseLineWithNegativeQuantity@1002 : Record 39;PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLineWithNegativeQuantity,
        PurchaseHeader,PurchaseLine.Type::Item,PurchaseLine."No.",-LibraryRandom.RandDecInDecimalRange(1,PurchaseLine.Quantity,2));

      WITH PurchaseLineWithNegativeQuantity DO BEGIN
        VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
        VALIDATE("Job No.",PurchaseLine."Job No.");
        VALIDATE("Job Task No.",PurchaseLine."Job Task No.");
        VALIDATE("Job Line Type","Job Line Type"::Schedule);
        VALIDATE("Job Planning Line No.",0);
        MODIFY(TRUE);
      END;
      PurchaseLine.SETRANGE(Type);
    END;

    LOCAL PROCEDURE GetPurchaseLineAndFillJobNo@150(VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20];JobNo@1001 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        VALIDATE("Job No.",JobNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetBaseUnitOfMeasureCode@196(ItemNo@1001 : Code[20]) : Code[10];
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE OpenDemandOverviewPage@54(JobNo@1002 : Code[20];JobTaskNo@1000 : Code[20]);
    VAR
      JobPlanningLines@1001 : TestPage 1007;
    BEGIN
      JobPlanningLines.OPENVIEW;
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);
      JobPlanningLines.FILTER.SETFILTER("Job Task No.",JobTaskNo);
      JobPlanningLines.DemandOverview.INVOKE;
    END;

    LOCAL PROCEDURE OpenReservationPage@31(JobNo@1002 : Code[20];JobTaskNo@1000 : Code[20]);
    VAR
      JobPlanningLines@1001 : TestPage 1007;
    BEGIN
      JobPlanningLines.OPENVIEW;
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);
      JobPlanningLines.FILTER.SETFILTER("Job Task No.",JobTaskNo);
      JobPlanningLines.Reserve.INVOKE;
    END;

    LOCAL PROCEDURE OpenReservationPageFromPurchaseOrder@57(No@1002 : Code[20]);
    VAR
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENVIEW;
      PurchaseOrder.FILTER.SETFILTER("No.",No);
      PurchaseOrder.PurchLines.Reserve.INVOKE;
    END;

    LOCAL PROCEDURE PostPartialPurchaseOrder@112(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      UpdatePurchaseLineQuantities(PurchaseHeader);
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post Purchase Order as Receive.
    END;

    LOCAL PROCEDURE PostAppliedPosAdjustment@199(PurchaseLine@1000 : Record 39;DocumentNo@1005 : Code[20]) : Code[20];
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
      ItemLedgEntry@1004 : Record 32;
    BEGIN
      SetupItemJnlBatch(ItemJournalBatch);
      WITH ItemJournalLine DO BEGIN
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
          "Entry Type"::"Positive Adjmt.",PurchaseLine."No.",PurchaseLine.Quantity);
        VALIDATE("Location Code",PurchaseLine."Location Code");
        FindItemLedgEntry(
          ItemLedgEntry,PurchaseLine."No.",ItemLedgEntry."Entry Type"::"Negative Adjmt.",
          ItemLedgEntry."Document Type"::"Purchase Receipt",DocumentNo);
        VALIDATE("Applies-from Entry",ItemLedgEntry."Entry No.");
        MODIFY(TRUE);
        LibraryInventory.PostItemJournalLine("Journal Template Name","Journal Batch Name");
        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE PostPositiveAdjustment@208(ItemNo@1000 : Code[20];Qty@1001 : Decimal);
    VAR
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      SetupItemJnlBatch(ItemJournalBatch);
      WITH ItemJournalLine DO BEGIN
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
          "Entry Type"::"Positive Adjmt.",ItemNo,Qty);
        LibraryInventory.PostItemJournalLine("Journal Template Name","Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE SetupItemJnlBatch@210(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE PurchaseOrderWithJobTask@92(VAR PurchaseHeader@1004 : Record 38);
    VAR
      PurchaseLine@1002 : Record 39;
      JobTask@1000 : Record 1001;
      Vendor@1003 : Record 23;
    BEGIN
      // Used Random value for Direct Unit Cost and Quantity.
      LibraryPurchase.CreateVendor(Vendor);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseHeader(PurchaseHeader."Document Type"::Order,Vendor."No.",PurchaseHeader);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      AttachJobToPurchaseDocument(JobTask,PurchaseHeader,0);
    END;

    LOCAL PROCEDURE InvokeCopyPurchaseDocument@33(VAR PurchaseHeader@1004 : Record 38;DocNo@1002 : Code[20]);
    VAR
      CopyPurchaseDocument@1005 : Report 492;
      DocType@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocType::"Posted Invoice",DocNo,FALSE,TRUE);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE MockUpILE@267(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      EntryNo@1001 : Integer;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        FINDLAST;
        EntryNo := "Entry No.";
        CLEAR(ItemLedgEntry);
        "Entry No." := EntryNo + 1;
        "Source Type" := "Source Type"::Vendor;
        "Source No." := LibraryUtility.GenerateGUID;
        "Country/Region Code" := LibraryUtility.GenerateGUID;
        INSERT;
      END
    END;

    LOCAL PROCEDURE MockUpVE@269(ItemLedgEntryNo@1000 : Integer;VAR ValueEntry@1001 : Record 5802);
    VAR
      EntryNo@1002 : Integer;
    BEGIN
      WITH ValueEntry DO BEGIN
        FINDLAST;
        EntryNo := "Entry No.";
        CLEAR(ValueEntry);
        "Entry No." := EntryNo + 1;
        "Item Ledger Entry No." := ItemLedgEntryNo;
        "Source Posting Group" := LibraryUtility.GenerateGUID;
        "Salespers./Purch. Code" := LibraryUtility.GenerateGUID;
        INSERT;
      END
    END;

    LOCAL PROCEDURE MockRoundingValueEntry@206(VAR ValueEntry@1002 : Record 5802;JobTask@1000 : Record 1001;DocNo@1001 : Code[20]);
    BEGIN
      WITH ValueEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(ValueEntry,FIELDNO("Entry No."));
        "Item Ledger Entry Type" := "Item Ledger Entry Type"::"Negative Adjmt.";
        "Entry Type" := "Entry Type"::Rounding;
        "Item No." := CreateItem;
        "Document No." := DocNo;
        "Job No." := JobTask."Job No.";
        "Job Task No." := JobTask."Job Task No.";
        "Invoiced Quantity" := -LibraryRandom.RandInt(10);
        "Cost Amount (Actual)" := -LibraryRandom.RandDec(100,2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateAdjustmentAccounts@7(GenBusPostingGroup@1001 : Code[20];GenProdPostingGroup@1002 : Code[20];InventoryAdjmtAccount@1004 : Code[20]);
    VAR
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(GenBusPostingGroup,GenProdPostingGroup);
      GeneralPostingSetup.VALIDATE("Inventory Adjmt. Account",InventoryAdjmtAccount);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAutomaticCostPosting@97(AutomaticCostPosting@1001 : Boolean;AutomaticCostAdjustment@1004 : Option);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCurrencyOnJob@138(No@1002 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      Job@1000 : Record 167;
    BEGIN
      Job.GET(No);
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemUnitOfMeasure@122(PurchaseLine@1000 : Record 39;QtyPerUnitOfMeasure@1001 : Decimal);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      ItemUnitOfMeasure.GET(PurchaseLine."No.",PurchaseLine."Unit of Measure Code");
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      ItemUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateJobPlanningLineQuantity@96(VAR JobPlanningLine@1000 : Record 1003;Quantity@1001 : Decimal);
    BEGIN
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateJobStatus@125(VAR Job@1001 : Record 167;No@1000 : Code[20]);
    BEGIN
      Job.GET(No);
      Job.VALIDATE(Status,Job.Status::Planning);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@108(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1002 : Record 38);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      ItemUnitOfMeasure.SETRANGE("Item No.",PurchaseLine."No.");
      ItemUnitOfMeasure.SETFILTER(Code,'<>%1',PurchaseLine."Unit of Measure Code");
      ItemUnitOfMeasure.FINDFIRST;
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));  // Use Random because value is not important.
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningDateOnJobPlanninglLine@132(JobPlanningLine@1000 : Record 1003;PlanningDate@1001 : Date);
    BEGIN
      JobPlanningLine.VALIDATE("Planning Date",PlanningDate);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLineQuantities@111(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Update Partial Quantities to Receive and Invoice on Purchase Line.
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      REPEAT
        PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine.Quantity / 2);
        PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine."Qty. to Invoice");
        PurchaseLine.MODIFY(TRUE);
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePurchasePrepaymentAccount@100(PurchaseLine@1000 : Record 39;PurchPrepaymentsAccount@1001 : Code[20]);
    VAR
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("Purch. Prepayments Account",PurchPrepaymentsAccount);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReturnShipmentOnCreditMemo@79(ReturnShipmentOnCreditMemo@1000 : Boolean);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Return Shipment on Credit Memo",ReturnShipmentOnCreditMemo);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNoOnPurchaseHeader@130(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."Vendor Invoice No." + '_1');  // Need to update Invoice No. due to Posting of Prepayment Invoice.
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoPurchRcpt@264(VAR PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
      UndoPurchRcptLine@1002 : Codeunit 5813;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchLine."Document No.");
      PurchRcptLine.SETRANGE("Order Line No.",PurchLine."Line No.");
      UndoPurchRcptLine.SetHideDialog(TRUE);
      UndoPurchRcptLine.RUN(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoPurchReturn@268(ItemNo@1000 : Code[20]);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
      UndoReturnShptLine@1002 : Codeunit 5814;
    BEGIN
      ReturnShipmentLine.SETRANGE(Type,ReturnShipmentLine.Type::Item);
      ReturnShipmentLine.SETRANGE("No.",ItemNo);
      UndoReturnShptLine.SetHideDialog(TRUE);
      UndoReturnShptLine.RUN(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UpdatePurchLineQtyToReceive@172(PurchaseHeader@1000 : Record 38;QtyToReceive@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchLineQtyToInvoice@175(PurchaseHeader@1000 : Record 38;QtyToInvoice@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchLineWithQtyToReceiveAndInvoice@176(VAR JobPlanningLine@1001 : Record 1003;VAR PurchaseHeader@1000 : Record 38;Quantity@1007 : Decimal;QtyToReceive@1004 : Decimal;QtyToInvoice@1006 : Decimal);
    BEGIN
      PreparePurchHeaderAndJobPlanningLine(PurchaseHeader,JobPlanningLine,Quantity,QtyToReceive);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);
      UpdatePurchLineQtyToReceive(PurchaseHeader,QtyToReceive);
      UpdatePurchLineQtyToInvoice(PurchaseHeader,QtyToInvoice);
    END;

    LOCAL PROCEDURE EnqueueVariables@214(ItemNumber@1000 : Code[20];QuantityOnJobPlanningLine@1001 : Decimal;OriginalQuantity@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNumber);
      LibraryVariableStorage.Enqueue(QuantityOnJobPlanningLine);
      LibraryVariableStorage.Enqueue(OriginalQuantity);
    END;

    LOCAL PROCEDURE VerifyJobInfoOnPurchInvoice@29(OrderPurchaseHeader@1000 : Record 38;InvoicePurchaseHeader@1003 : Record 38);
    VAR
      PurchRcptLine@1001 : Record 121;
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderPurchaseHeader."No.");
      PurchRcptLine.FINDSET;
      Assert.AreNotEqual(PurchRcptLine."Job No.",'','No job info on receipt line');
      GetPurchaseLines(InvoicePurchaseHeader,PurchaseLine);
      Assert.AreEqual(PurchRcptLine.COUNT,PurchaseLine.COUNT,'# purchase invoice lines');
      REPEAT
        PurchaseLine.TESTFIELD("Job No.",PurchRcptLine."Job No.");
        PurchaseLine.TESTFIELD("Job Task No.",PurchRcptLine."Job Task No.");
        PurchaseLine.TESTFIELD("Job Line Type",PurchRcptLine."Job Line Type");
        PurchaseLine.TESTFIELD("Job Unit Price (LCY)",PurchRcptLine."Job Unit Price (LCY)");
        PurchaseLine.TESTFIELD("Job Line Amount (LCY)",PurchRcptLine."Job Line Amount (LCY)");
        PurchaseLine.TESTFIELD("Job Line Disc. Amount (LCY)",PurchRcptLine."Job Line Disc. Amount (LCY)");
        PurchaseLine.NEXT;
      UNTIL PurchRcptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryDim@59(DocNo@1000 : Code[20];DimSetID@1004 : Integer);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1002 : Record 123;
      JobLedgerEntry@1003 : Record 169;
    BEGIN
      // Verify job ledger entry dimension ID is same as purchase invoice line.
      PurchInvHeader.SETRANGE("Order No.",DocNo);
      PurchInvHeader.FINDFIRST;
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDSET;
      REPEAT
        JobLedgerEntry.SETRANGE("Document No.",PurchInvLine."Document No.");
        JobLedgerEntry.SETRANGE("No.",PurchInvLine."No.");
        JobLedgerEntry.FINDFIRST;
        Assert.AreEqual(JobLedgerEntry."Dimension Set ID",PurchInvLine."Dimension Set ID",
          STRSUBSTNO(WrongDimJobLedgerEntryError,JobLedgerEntry."Entry No.",DimSetID,JobLedgerEntry."Dimension Set ID"));
      UNTIL PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTotalCostAndPriceOnJobLedgerEntry@204(ItemNo@1001 : Code[20];DirectUnitCost@1002 : Decimal;DirectUnitCostLCY@1003 : Decimal;UnitPrice@1004 : Decimal;UnitPriceLCY@1005 : Decimal);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        SETRANGE("No.",ItemNo);
        FINDSET;
        REPEAT
          Assert.AreNearlyEqual(
            DirectUnitCost,"Total Cost",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Cost"),DirectUnitCost));
          Assert.AreNearlyEqual(
            UnitPriceLCY,"Total Price (LCY)",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Price (LCY)"),UnitPriceLCY));
          Assert.AreNearlyEqual(
            DirectUnitCostLCY,"Total Cost (LCY)",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Cost (LCY)"),DirectUnitCostLCY));
          Assert.AreNearlyEqual(
            UnitPrice,"Total Price",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Price"),UnitPrice));
          Assert.AreNearlyEqual(
            UnitPrice,"Line Amount",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Line Amount"),UnitPrice));
          Assert.AreNearlyEqual(
            UnitPriceLCY,"Line Amount (LCY)",LibraryERM.GetAmountRoundingPrecision,
            STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Line Amount (LCY)"),UnitPriceLCY));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionErrorMessage@64(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      DefaultDimension@1002 : Record 352;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      FindDefaultDim(DefaultDimension,PurchaseLine."Job No.");
      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Code Mandatory" THEN
        Assert.ExpectedError(
          STRSUBSTNO(
            CodeMandatoryDimensionError,PurchaseHeader."No.",PurchaseLine."Line No.",
            DefaultDimension.FIELDCAPTION("Dimension Value Code"),
            DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",PurchaseLine."Job No."));
      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Same Code" THEN
        Assert.ExpectedError(
          STRSUBSTNO(
            SameCodeDimensionError,PurchaseHeader."No.",PurchaseLine."Line No.",
            DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
            DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",PurchaseLine."Job No."));
      IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"No Code" THEN
        Assert.ExpectedError(
          STRSUBSTNO(
            NoCodeDimensionError,PurchaseHeader."No.",PurchaseLine."Line No.",
            DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",PurchaseLine."Job No."));
    END;

    LOCAL PROCEDURE VerifyJobInfoOnPurchRcptLines@70(VAR PurchaseLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchaseLine."Document No.");
      REPEAT
        PurchRcptLine.SETRANGE("Line No.",PurchaseLine."Line No.");
        PurchRcptLine.FINDFIRST;
        PurchRcptLine.TESTFIELD("Job No.",PurchaseLine."Job No.");
        PurchRcptLine.TESTFIELD("Job Task No.",PurchaseLine."Job Task No.");
        PurchRcptLine.TESTFIELD("Job Line Type",PurchaseLine."Job Line Type");
        PurchRcptLine.TESTFIELD("Job Unit Price",PurchaseLine."Job Unit Price");
        PurchRcptLine.TESTFIELD("Job Total Price",PurchaseLine."Job Total Price");
        PurchRcptLine.TESTFIELD("Job Line Amount",PurchaseLine."Job Line Amount");
        PurchRcptLine.TESTFIELD("Job Line Discount Amount",PurchaseLine."Job Line Discount Amount");
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyModifyPurchaseDocJobInfo@37(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // prevent roll back
      COMMIT;
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      REPEAT
        ASSERTERROR PurchaseLine.VALIDATE("Job No.",'');
        ASSERTERROR PurchaseLine.VALIDATE("Job Task No.",'');
        ASSERTERROR PurchaseLine.VALIDATE("Job Line Type",PurchaseLine."Job Line Type" + 1);  // Add 1 to change option type.
        ASSERTERROR PurchaseLine.VALIDATE("Job Unit Price",LibraryRandom.RandInt(100));
        ASSERTERROR PurchaseLine.VALIDATE("Job Line Amount",LibraryRandom.RandInt(100));
        ASSERTERROR PurchaseLine.VALIDATE("Job Line Discount Amount",LibraryRandom.RandInt(100));
        ASSERTERROR PurchaseLine.VALIDATE("Job Line Discount %",LibraryRandom.RandInt(100));
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyJobInfo@47(VAR PurchaseLine@1000 : Record 39);
    VAR
      Item@1002 : Record 27;
    BEGIN
      REPEAT
        IF PurchaseLine.Type = PurchaseLine.Type::Item THEN BEGIN
          Item.GET(PurchaseLine."No.");
          Assert.AreNearlyEqual(
            PurchaseLine."Unit Price (LCY)",PurchaseLine."Job Unit Price (LCY)",0.001,
            'Job unit Price LCY and unitr price LCY match on the Purchase Line');
        END ELSE BEGIN
          PurchaseLine.TESTFIELD("Job Unit Price (LCY)",0);
          PurchaseLine.TESTFIELD("Job Line Discount Amount",0);
        END;
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemApplicationEntry@230(PurchaseLine@1003 : Record 39);
    VAR
      InboundItemLedgerEntry@1001 : Record 32;
      OutboundItemLedgerEntry@1000 : Record 32;
      ItemApplicationEntry@1002 : Record 339;
    BEGIN
      InboundItemLedgerEntry.SETRANGE("Job No.",PurchaseLine."Job No.");
      InboundItemLedgerEntry.SETRANGE(Positive,TRUE);
      InboundItemLedgerEntry.FINDFIRST;

      OutboundItemLedgerEntry.SETRANGE("Job No.",PurchaseLine."Job No.");
      OutboundItemLedgerEntry.SETRANGE(Positive,FALSE);
      OutboundItemLedgerEntry.FINDFIRST;

      WITH ItemApplicationEntry DO BEGIN
        SETRANGE("Item Ledger Entry No.",OutboundItemLedgerEntry."Entry No.");
        SETRANGE("Inbound Item Entry No.",InboundItemLedgerEntry."Entry No.");
        SETRANGE("Outbound Item Entry No.",OutboundItemLedgerEntry."Entry No.");
        FINDFIRST;
        TESTFIELD(Quantity,-InboundItemLedgerEntry.Quantity);
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedger@72(VAR PurchaseLine@1000 : Record 39);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      ExpectedCount@1001 : Integer;
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDSET;
      REPEAT
        ItemLedgerEntry.SETRANGE(Description,PurchaseLine.Description);
        IF PurchaseLine."Job No." = '' THEN
          ExpectedCount := 1
        ELSE
          ExpectedCount := 2;
        Assert.AreEqual(ExpectedCount,ItemLedgerEntry.COUNT,'# item ledger entries');
        ItemLedgerEntry.FINDSET;
        REPEAT
          ItemLedgerEntry.TESTFIELD("Job No.",PurchaseLine."Job No.");
          ItemLedgerEntry.TESTFIELD("Job Task No.",PurchaseLine."Job Task No.")
        UNTIL ItemLedgerEntry.NEXT = 0
      UNTIL PurchaseLine.NEXT = 0;

      // Clear filter applied on temporary table.
      PurchaseLine.SETRANGE(Type);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@82(EntryType@1002 : Option;ItemNo@1001 : Code[20];DocumentType@1008 : Option;DocumentNo@1003 : Code[20];JobNo@1006 : Code[20];Quantity@1004 : Decimal;InvoicedQuantity@1005 : Decimal;CostAmountActual@1007 : Decimal;CostAmountExpected@1009 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgEntry(ItemLedgerEntry,ItemNo,EntryType,DocumentType,DocumentNo);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
      ItemLedgerEntry.TESTFIELD("Job No.",JobNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Invoiced Quantity",InvoicedQuantity);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",CostAmountActual);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Expected)",CostAmountExpected);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryUnitOfMeasure@197(Item@1001 : Record 27);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",Item."No.");
        FINDSET;
        REPEAT
          TESTFIELD("Unit of Measure Code",Item."Base Unit of Measure");
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyPurcCrMemoItemLedgerEntry@235(PurchLine@1001 : Record 39;DocNo@1002 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgEntry(
        ItemLedgerEntry,PurchLine."No.",ItemLedgerEntry."Entry Type"::Purchase,
        ItemLedgerEntry."Document Type"::"Purchase Credit Memo",DocNo);
      Assert.AreEqual(PurchLine."Job No.",ItemLedgerEntry."Job No.",ItemLedgerEntry.FIELDCAPTION("Job No."));
      Assert.AreEqual(-PurchLine.Quantity,ItemLedgerEntry.Quantity,ItemLedgerEntry.FIELDCAPTION(Quantity));
    END;

    LOCAL PROCEDURE VerifyGLEntry@75(VAR PurchaseLine@1000 : Record 39);
    VAR
      JobLedgerEntry@1003 : Record 169;
      PurchInvHeader@1002 : Record 122;
    BEGIN
      // assign the document no. to find the job ledger entries.
      CASE PurchaseLine."Document Type" OF
        PurchaseLine."Document Type"::Order:
          PurchInvHeader.SETRANGE("Order No.",PurchaseLine."Document No.");
        PurchaseLine."Document Type"::Invoice:
          PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseLine."Document No.");
        ELSE
          Assert.Fail(STRSUBSTNO('Unsupported document type %1',PurchaseLine."Document Type"));
      END;
      Assert.AreEqual(1,PurchInvHeader.COUNT,'# purchase invoices');
      PurchInvHeader.FINDFIRST;

      PurchaseLine.SETFILTER("Job No.",'<>''''');

      JobLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      Assert.AreEqual(PurchaseLine.COUNT,JobLedgerEntry.COUNT,'Number of job ledger entries and purchase lines should be equal.');

      LibraryJob.VerifyGLEntries(JobLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@80(PurchaseHeader@1000 : Record 38;Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      GetPurchaseLines(PurchaseHeader,PurchaseLine);
      PurchaseLine.CALCFIELDS("Reserved Quantity");
      PurchaseLine.TESTFIELD("Reserved Quantity",Quantity);
    END;

    LOCAL PROCEDURE VerifyValueEntries@84(VAR PurchaseLine@1000 : Record 39);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDSET;
      REPEAT
        ValueEntry.SETRANGE(Description,PurchaseLine.Description);
        Assert.IsFalse(ValueEntry.ISEMPTY,'value entries not found');
        ValueEntry.FINDSET;
        REPEAT
          ValueEntry.TESTFIELD("Job No.",PurchaseLine."Job No.");
          ValueEntry.TESTFIELD("Job Task No.",PurchaseLine."Job Task No.")
        UNTIL ValueEntry.NEXT = 0
      UNTIL PurchaseLine.NEXT = 0;

      // Clear filter applied on temporary table.
      PurchaseLine.SETRANGE(Type);
    END;

    LOCAL PROCEDURE VerifyValueEntry@74(ItemLedgerEntryType@1007 : Option;DocumentType@1008 : Option;ItemNo@1006 : Code[20];DocumentNo@1005 : Code[20];JobNo@1004 : Code[20];CostAmountExpected@1002 : Decimal;CostAmountActual@1001 : Decimal);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Item Ledger Entry Type",ItemLedgerEntryType);
      ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDFIRST;

      ValueEntry.TESTFIELD("Job No.",JobNo);
      ValueEntry.TESTFIELD("Cost Amount (Expected)",CostAmountExpected);
      ValueEntry.TESTFIELD("Cost Amount (Actual)",CostAmountActual);
    END;

    LOCAL PROCEDURE VerifyValueEntryReversedAmount@211(DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.CALCSUMS("Cost Amount (Expected)","Cost Amount (Actual)");
      Assert.AreEqual(0,ValueEntry."Cost Amount (Expected)",STRSUBSTNO(WrongTotalCostAmtErr,DocumentNo));
      Assert.AreEqual(0,ValueEntry."Cost Amount (Actual)",STRSUBSTNO(WrongTotalCostAmtErr,DocumentNo));
    END;

    LOCAL PROCEDURE VerifyGLEntryAmountInclVAT@8(VAR GLEntry@1000 : Record 17;Amount@1001 : Decimal);
    VAR
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount + GLEntry."VAT Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount,TotalGLAmount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyJobOnGLEntry@52(JobNo@1001 : Code[20];DocumentNo@1000 : Code[20];DocumentType@1005 : Option);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo,DocumentType);
      GLEntry.TESTFIELD("Job No.",JobNo);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@20(PurchaseLine@1004 : Record 39;DocumentNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."Job No.");
      JobLedgerEntry.TESTFIELD("No.",PurchaseLine."No.");
      JobLedgerEntry.TESTFIELD(Quantity,Quantity);
      JobLedgerEntry.TESTFIELD("Unit of Measure Code",PurchaseLine."Unit of Measure Code");
      JobLedgerEntry.TESTFIELD("Qty. per Unit of Measure",PurchaseLine."Qty. per Unit of Measure");
      JobLedgerEntry.TESTFIELD("Direct Unit Cost (LCY)",PurchaseLine."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyLastJobLedgerEntryLine@243(PurchaseLine@1004 : Record 39;DocumentNo@1001 : Code[20];ExpectedQuantitiy@1002 : Decimal);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Job No.",PurchaseLine."Job No.");
        FINDLAST;
        TESTFIELD("No.",PurchaseLine."No.");
        TESTFIELD(Quantity,ExpectedQuantitiy);
        TESTFIELD("Unit of Measure Code",PurchaseLine."Unit of Measure Code");
        TESTFIELD("Qty. per Unit of Measure",PurchaseLine."Qty. per Unit of Measure");
        TESTFIELD("Direct Unit Cost (LCY)",PurchaseLine."Direct Unit Cost");
      END;
    END;

    LOCAL PROCEDURE VerifyDocumentDateOnJobLedgerEntry@164(JobNo@1004 : Code[20];DocumentNo@1005 : Code[20];DocumentDate@1006 : Date);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      JobLedgerEntry.TESTFIELD("Document Date",DocumentDate);
    END;

    LOCAL PROCEDURE VerifyJobNoInGLEntry@110(DocumentNo@1000 : Code[20];DocumentType@1001 : Option;GLAccountNo@1002 : Code[20];JobNo@1003 : Code[20]);
    VAR
      GLEntry@1004 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      FindGLEntry(GLEntry,DocumentNo,DocumentType);
      GLEntry.TESTFIELD("Job No.",JobNo);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryValue@134(DocumentNo@1002 : Code[20];JobNo@1003 : Code[20];TotalCostLCY@1005 : Decimal;UnitCostLCY@1006 : Decimal);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      JobLedgerEntry.TESTFIELD("Total Cost (LCY)",TotalCostLCY);
      JobLedgerEntry.TESTFIELD("Unit Cost (LCY)",UnitCostLCY);
    END;

    LOCAL PROCEDURE VerifyGLEntryValue@158(DocumentNo@1004 : Code[20];Amount@1001 : Decimal;GLAccountNo@1002 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      FindGLEntry(GLEntry,DocumentNo,GLEntry."Document Type"::Invoice);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyUndoLedgerEntrySource@274(DocumentType@1001 : Option;DocumentNo@1004 : Code[20];DocumentLineNo@1005 : Integer;EntryType@1006 : Option;SourceNo@1003 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Line No.",DocumentLineNo);
        SETRANGE("Entry Type",EntryType);
        FINDLAST;
        Assert.AreEqual(
          SourceNo,"Source No.",
          STRSUBSTNO(EmptyValueErr,FIELDCAPTION("Source No."),TABLECAPTION));
      END;

      WITH ValueEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Line No.",DocumentLineNo);
        SETRANGE("Entry Type",EntryType);
        FINDLAST;
        Assert.AreEqual(
          SourceNo,"Source No.",
          STRSUBSTNO(EmptyValueErr,FIELDCAPTION("Source No."),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyTransferredSource@270(ItemJnlLine@1000 : Record 83;ItemLedgEntry@1001 : Record 32;ValueEntry@1002 : Record 5802);
    BEGIN
      WITH ItemJnlLine DO BEGIN
        Assert.AreEqual(
          ItemLedgEntry."Source Type","Source Type",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Source Type"),ItemLedgEntry."Source Type"));
        Assert.AreEqual(
          ItemLedgEntry."Source No.","Source No.",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Source No."),ItemLedgEntry."Source No."));
        Assert.AreEqual(
          ItemLedgEntry."Country/Region Code","Country/Region Code",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Country/Region Code"),ItemLedgEntry."Country/Region Code"));
        Assert.AreEqual(
          ValueEntry."Source Posting Group","Source Posting Group",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Source Posting Group"),ValueEntry."Source Posting Group"));
        Assert.AreEqual(
          ValueEntry."Salespers./Purch. Code","Salespers./Purch. Code",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Salespers./Purch. Code"),ValueEntry."Salespers./Purch. Code"));
      END;
    END;

    LOCAL PROCEDURE VerifyQuantityOnJobPlanningLine@169(JobPlanningLine@1000 : Record 1003;Quantity@1001 : Decimal);
    BEGIN
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
      JobPlanningLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryTotalCostValues@194(DocumentNo@1002 : Code[20];JobNo@1003 : Code[20];TotalCost@1005 : Decimal;TotalCostLCY@1006 : Decimal);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      WITH JobLedgerEntry DO BEGIN
        Assert.AreEqual(
          TotalCost,"Total Cost",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Cost"),TotalCost));
        Assert.AreEqual(
          TotalCostLCY,"Total Cost (LCY)",
          STRSUBSTNO(ValueMustMatchErr,FIELDCAPTION("Total Cost (LCY)"),TotalCostLCY));
      END;
    END;

    LOCAL PROCEDURE VerifyJobTotalPricesOnPurchRcptLines@195(PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
      AmountRoundingPrecision@1002 : Decimal;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Order No.",PurchLine."Document No.");
        CALCSUMS(
          "Job Line Amount","Job Line Amount (LCY)","Job Total Price","Job Total Price (LCY)");
        AmountRoundingPrecision := LibraryERM.GetAmountRoundingPrecision;
        Assert.AreNearlyEqual(
          "Job Line Amount",PurchLine."Job Line Amount",AmountRoundingPrecision,FIELDCAPTION("Job Line Amount"));
        Assert.AreNearlyEqual(
          "Job Line Amount (LCY)",PurchLine."Job Line Amount (LCY)",AmountRoundingPrecision,FIELDCAPTION("Job Line Amount (LCY)"));
        Assert.AreNearlyEqual(
          "Job Total Price",PurchLine."Job Total Price",AmountRoundingPrecision,FIELDCAPTION("Job Total Price"));
        Assert.AreNearlyEqual(
          "Job Total Price (LCY)",PurchLine."Job Total Price (LCY)",AmountRoundingPrecision,FIELDCAPTION("Job Total Price (LCY)"));
      END;
    END;

    LOCAL PROCEDURE VerifyJobPlanningTrackingReservationEntry@217(JobNo@1000 : Code[20];ItemNo@1001 : Code[20];TrackedQty@1002 : Decimal);
    VAR
      Job@1003 : Record 167;
      ReservationEntry@1004 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",DATABASE::"Job Planning Line");
        SETRANGE("Source Subtype",Job.Status::Order);
        SETRANGE("Source ID",JobNo);
        FINDFIRST;
        TESTFIELD(Quantity,TrackedQty);
      END;
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntriesWithGL@239(DocumentNo@1004 : Code[20];JobNo@1006 : Code[20];GLAccountNo@1002 : Code[20];DocumentType@1003 : Option);
    VAR
      GLEntry@1001 : Record 17;
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      JobLedgerEntry.SETRANGE(Type,JobLedgerEntry.Type::"G/L Account");
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      FindGLEntry(GLEntry,DocumentNo,DocumentType);
      GLEntry.FINDSET;
      REPEAT
        WITH JobLedgerEntry DO BEGIN
          SETRANGE("Ledger Entry Type","Ledger Entry Type"::"G/L Account");
          SETRANGE("Ledger Entry No.",GLEntry."Entry No.");
          FINDFIRST;
          CALCSUMS("Line Amount (LCY)");
          TESTFIELD("Line Amount (LCY)",GLEntry.Amount);
        END;
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntriesWithItemLedger@245(DocumentNo@1002 : Code[20];JobNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      JobLedgerEntry@1005 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo);
      JobLedgerEntry.SETRANGE(Type,JobLedgerEntry.Type::Item);
      JobLedgerEntry.FINDSET;
      REPEAT
        JobLedgerEntry.TESTFIELD("Ledger Entry Type",JobLedgerEntry."Ledger Entry Type"::Item);
        ItemLedgerEntry.GET(JobLedgerEntry."Ledger Entry No.");
        ItemLedgerEntry.TESTFIELD("Item No.",JobLedgerEntry."No.");
        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        // JobLedgerEntry is always linked to ItemLedgerEntry with 1-to-1 relation.
        ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",-JobLedgerEntry."Line Amount (LCY)");
      UNTIL JobLedgerEntry.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@48(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PageHandler@51(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    BEGIN
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentHandler@28(VAR ItemChargeAssignmentPurch@1000 : TestPage 5805);
    BEGIN
      ItemChargeAssignmentPurch.SuggestItemChargeAssignment.INVOKE;
      ItemChargeAssignmentPurch.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ItemChargeAssignMenuHandler@27(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // This is for Equally only.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@23(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE NoQuantityOnReservePageHandler@15(VAR Reservation@1000 : TestPage 498);
    BEGIN
      // Verify that no Quantity available when there is no source available to Reserve from.
      Reservation."Total Quantity".ASSERTEQUALS(0);
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@14(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      Reservation.QtyToReserveBase.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      Reservation."Total Quantity".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLineHandler@78(VAR Reservation@1000 : TestPage 498);
    VAR
      QuantityOnJobPlanningLine@1001 : Variant;
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      LibraryVariableStorage.Dequeue(QuantityOnJobPlanningLine);
      Reservation.QtyToReserveBase.ASSERTEQUALS(QuantityOnJobPlanningLine);
      Reservation.QtyReservedBase.ASSERTEQUALS(QuantityOnJobPlanningLine);
      Reservation."Total Quantity".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      Reservation."Current Reserved Quantity".ASSERTEQUALS(QuantityOnJobPlanningLine);
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DemandOverviewPageHandler@83(VAR DemandOverview@1000 : TestPage 5830);
    BEGIN
      DemandOverview.FILTER.SETFILTER("Item No.",LibraryVariableStorage.DequeueText);
      DemandOverview.FILTER.SETFILTER(Type,DemandOverview.Type.GETOPTION(4));  // Use 4 as the Index for Supply.
      DemandOverview.FILTER.SETFILTER(Type,DemandOverview.Type.GETOPTION(6));  // Use 6 as the Index for Demand.
      DemandOverview.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderReserveFromCurrentLineHandler@95(VAR Reservation@1000 : TestPage 498);
    VAR
      CancelReservation@1003 : Boolean;
      QuantityOnJobPlanningLine@1001 : Decimal;
      OriginalQuantity@1002 : Decimal;
    BEGIN
      CancelReservation := LibraryVariableStorage.DequeueBoolean;
      IF CancelReservation THEN BEGIN
        // 2. Exercise.
        Reservation.CancelReservationCurrentLine.INVOKE;

        // 3. Verify: Verify Reservation page for Item No.,Quantity Reserved and Current Reserved Quantity.
        Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
        Reservation.QtyReservedBase.ASSERTEQUALS(0);
        Reservation."Current Reserved Quantity".ASSERTEQUALS(0);
      END ELSE BEGIN
        // 2. Exercise.
        Reservation."Reserve from Current Line".INVOKE;

        // 3. Verify: Verify Reservation page.
        Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
        QuantityOnJobPlanningLine := LibraryVariableStorage.DequeueDecimal;
        OriginalQuantity := LibraryVariableStorage.DequeueDecimal;
        Reservation.QtyToReserveBase.ASSERTEQUALS(OriginalQuantity);
        Reservation.QtyReservedBase.ASSERTEQUALS(QuantityOnJobPlanningLine);
        Reservation."Total Quantity".ASSERTEQUALS(QuantityOnJobPlanningLine);
        Reservation."Current Reserved Quantity".ASSERTEQUALS(-QuantityOnJobPlanningLine);
      END;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@232(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Serial No.".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@205(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Purchase] [Job]

      Unsupported version tags:
      SE: Unable to Execute

      Check various functionalities of Purchase.
       1. Verify GL Entry after posting a Purchase Order with Job.
       2. Verify GL Entry after posting a Purchase Credit Memo using function Return Shipment on Credit Memo.
       3. Verify GL Entry after posting a Purchase Invoice create through Get Receipt Line function.
       4. Verify the error message while reserving the Item from Job Order to Purchase Order when Type is Resource on Job Planning Line.
       5. Verify the error message while reserving the Item from Job Order to Purchase Order when Planning Date is blank on Job Planning Line.
       6. Verify reservation lines when Planning Date is earlier than Expected Receipt Date on Job Planning Line.
       7. Verify reservation lines when Planning Date is later than Expected Receipt Date on Job Planning Line.
       8. Verify reservation lines when Quantity is negative on Job Planning Line.
       9. Verify reservation lines when Location is different on Job Planning Line from Purchase Order.
      10. Verify Reserved Quantity on Reservation window when reserve Item from Purchase Order to Job Order.
      11. Verify Job Ledger Entry after posting a Purchase Credit Memo with Job.
      12. Verify Job Ledger Entry after posting the partial Purchase Return Order when Lines are created from the Copy Document function.
      13. Verify the Demand Overview Page for Reserved Quantity for Job Planning Lines.
      14. Verify Reserved Quantity for an existing reservation between Jobs and Production Order can be modified and be reserved again.
      15. Verify that it is not possible to open Reservation Entries if Usage Link is not enabled in the Job Planning Line.
      16. Verify the value of Reserve field on the Job Planning Line.
      17. Verify Reservation Line and Purchase line after Reservation with Purchase Order as supply and Job Planning Line as demand.
      18. Verify Reservation Line and Purchase line after cancelled the Reservation when Purchase Order as supply and Job Planning Line as demand.
      19. Verify relationship between Usage Link and Reserve.
      20. Verify error message when change the value of Reserve field on Job Planning Line while Usage Link is unchecked.
      21. Verify Item Ledger Entries and Value Entries generated against Item Ledger Entry after posting Purchase Return order As Ship with Job No.
      22. Verify Item Ledger Entries and Value Entries generated against Item Ledger Entry after posting Purchase Return order As Ship and then as Invoice with Job No.
      23. Verify Job No. in GL Entry after Posting Prepayment Invoice for Purchase Order.
      24. Verify Job No. in GL Entries after Posting Prepayment Invoice and then Posting Purchase Order.
      25. Verify Partial Posting of Purchase Order with Job carries correct Quantities in Job Ledger Entries.
      26. Verify that multiple partial postings of Purchase Order with Job carries correct Quantity in Job Ledger Entries.
      27. Verify Reserve field on Job Planning Line is updated from Job when Usage Link is checked and Item has Reserve as Optional and Job has Always.
      28. Verify Job Ledger Entry after posting Purchase Order with Job where "Qty. per Unit of Measure" is different from "Base unit of measure".
      29. Verify Ledger Entry Type and Ledger Entry No. after posting a Purchase Order with Job.
      30. Verify Error Message while posting Purchase Order with Job when Job has Status Planning.
      31. Verify that correct Job Currency Code and Job Currency Factor populated on Purchase Line created with Job having Currency code.
      32. Verify Total Cost and Total Cost LCY after Receiving Purchase Order with Job having Currency attached and Invoice it after removing Currency Code from Job.
      33. Verify an error message pops up when fill in Job No. in Purchase Order Line with Reservation Entry exists.
      34. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Purchase Order & Job not having the Currency .
      35. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Purchase Order having Currency & Job not having the Currency.
      36. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Purchase Order not having currency & Job having the Currency.
      37. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Purchase Order & Job having the Currency Code.
      38. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Item Purchase Order & Job not having the Currency .
      39. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Item Purchase Order having Currency & Job not having the Currency.
      40. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Item Purchase Order not having currency & Job having the Currency.
      41. Verify amount values of "G/L Entry" and "Job Ledger Entry"  are correct and equal (or) Not When Item Purchase Order & Job having the Currency Code.
      42. Verify Document Date on Job Ledger Entry.
      43. Verify Quantity on Job Planning Line when Purchase Order posted with full Quantity.
      44. Verify Quantity on Job Planning Line when Purchase Order posted with partial Quantity.
      45. Verify Quantity on Job Planning Line when Purchase Order posted with Remaining Quantity.
      46. Verify Quantity on Job Planning Line when Purchase Order after updating Qty. to Invoice posted with partial Quantity.
      47. Verify Quantity on Job Planning Line when Purchase Order after updating Qty. to Invoice posted with full Quantity.
      48. Verify Job Remaining Qty. on Purchase Line when Job Planning Line No. is updated.

      Covers Test Cases: 264163
       ---------------------------------------------------------------------------------------------
       Test Function Name                                                                 TFS ID
       ---------------------------------------------------------------------------------------------
       PurchaseOrderWithItemReserveAsAlways,PurchaseCreditMemoWithItemReserveAsAlways     259257

      Covers Test Cases: 264215
       ---------------------------------------------------------------------------------------------
       Test Function Name                                                                 TFS ID
       ---------------------------------------------------------------------------------------------
       PurchaseInvoiceUsingGetReceiptLine                                                 235039

      Covers Test cases: 274063
       ----------------------------------------------------------------------------------------------------
       Test Function Name                                                                          TFS ID
       ----------------------------------------------------------------------------------------------------
       JobOrderReservationWithResourceShouldFail, JobOrderReservationWithoutPlanningDate,
       JobOrderReservationWithEarlierPlanningDate, JobOrderReservationWithLaterPlanningDate,
       JobOrderReservationWithNegativeQuantity, JobOrderReservationWithWrongLocation,              178020
       ReserveItemFromJobOrderToPurchaseOrder                                                      178030

      Covers Test Cases: 274958
       ----------------------------------------------------------------------------------------------------
       Test Function Name                                                                           TFS ID
       ----------------------------------------------------------------------------------------------------
       PostPurchaseCreditMemoWithJob                                                                202817
       PostPartialPurchaseReturnOrderWithCopyDocument                                               145238

      Covers Test Cases: 274080
       --------------------------------------------------------------------------------------------------------
       Test Function Name                                                                               TFS ID
       --------------------------------------------------------------------------------------------------------
       DemandOverviewForJobPlanningLines                                                                177895
       ReservationBetweenJobAndProductionOrder                                                          177918
       OpenReservationWindowWithUsageLinkDisabledShouldFail                                             177986
       ReserveFieldOnJobPlanningLine, ReservationFromPurchaseOrder, CancelReservationFromPurchaseOrder  178017
       RelationBetweenUsageLinkAndReserveOnJob, UsageLinkErrorWhileChangeReserveField                   178024

      Covers Test Cases: 274950
       ---------------------------------------------------------------------------------------------
       Test Function Name                                                                 TFS ID
       ---------------------------------------------------------------------------------------------
       PostPurchaseReturnOrderAsShip, PostPurchaseReturnOrderAsShipAndInvoice             261346

      Covers Test Cases: 274951
       -----------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                             TFS ID
       -----------------------------------------------------------------------------------------------------------------------
        PrepaymentPurchaseOrderWithJob, PostPurchaseOrderWithPrepaymentAndJob, PartiallyPostedPurchaseOrderWithJob     267133

      Covers Test Cases: 280990
       ---------------------------------------------------
       Test Function Name                      TFS ID
       ---------------------------------------------------
       ReceivePurchaseOrderTwiceWithJob        268716

      Covers Test Cases: 265327
       -----------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                             TFS ID
       -----------------------------------------------------------------------------------------------------------------------
       PostJobPurchaseOrderAsReceiveAndUpdateItemUOM,PostJobPurchaseOrderAsInvoiceAfterUpdateItemUOM                   207401

      Covers Test Cases: 281984
       ------------------------------------------------------
       Test Function Name                             TFS ID
       ------------------------------------------------------
       ReserveOnJobPlanningLineWithUsageLinkChecked   178043

      Covers Test Cases: 281985
       ----------------------------------------------------------------
       Test Function Name                                     TFS ID
       ----------------------------------------------------------------
       PostPurchaseOrderWithJob                              173710
       PostingPurchaseOrderErrorWhenJobStatusPlanning        173720

      Covers Test Cases: 281986
       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
       JobCurrencyOnPurchaseOrderLine, UpdateJobCurrencyAfterReceivingPurchaseOrder      281445

      Covers Test Cases: N/A
       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
       FillInJobNoInPurchaseLineWhenReservationEntryExists                               50669

      Covers Test Cases: 53460
       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
      PostLCYPurchaseOrderWithLCYJob,PostFCYPurchaseOrderWithLCYJob
      PostLCYPurchaseOrderWithrFCYJob,PostFCYPurchaseOrderWithFCYJob

      Covers Test Cases: 59226
       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
      PostLCYItemPurchaseOrderWithLCYJob,PostFCYItemPurchaseOrderWithLCYJob
      PostLCYItemPurchaseOrderWithrFCYJob,PostFCYItemPurchaseOrderWithFCYJob

      Bug Id: 70619
      --------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------
      DocumentDateOnJobLedgerEntry

      Covers Test Cases for Bug ID: 70644
       ------------------------------------------------------------------------
       Test Function Name
       ------------------------------------------------------------------------
      JobPlanningLineWithFullQuantity,JobPlanningLineWithPartialQuantity
      PreparePurchHeaderWithRemainingQty

      Covers Test Cases for Bug ID: 72945
      ------------------------------------------------------------------------
      Test Function Name
      ------------------------------------------------------------------------
      JobPlanningLineOnPurchaseOrderPartialQtyToInvoice,JobPlanningLineOnPurchaseOrderFullQtyToInvoice,
      JobRemainingQtyOnPurchaseLine

      Covers Test Cases: N/A
       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
       UndoPurchReceiptWithJob                                                           361434
       UndoPurchReturnWithJob                                                            361434
       TransferSourceValuesUT                                                            361434

       --------------------------------------------------------------------------------------------
       Test Function Name                                                                TFS ID
       --------------------------------------------------------------------------------------------
       AdjustCostTwiceWithJobPurchReceipt                                                375346
    }
    END.
  }
}

