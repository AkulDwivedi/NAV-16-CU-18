OBJECT Codeunit 134451 ERM Fixed Assets
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryERM@1014 : Codeunit 131300;
      LibraryFixedAsset@1006 : Codeunit 131330;
      LibrarySales@1007 : Codeunit 130509;
      LibraryPurchase@1015 : Codeunit 130512;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryDimension@1030 : Codeunit 131001;
      LibraryRandom@1000 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      GLIntegrationDisposalError@1011 : TextConst 'ENU="%1 must be equal to ''Yes''  in %2: %3=%4. Current value is ''No''."';
      AllowCorrectionError@1012 : TextConst 'ENU="%1 must have a value in %2: %3=%4. It cannot be zero or empty."';
      UnknownError@1008 : TextConst 'ENU=Unknown error.';
      DateConfirmMessage@1002 : TextConst 'ENU=Posting Date %1 is different from Work Date %2.Do you want to continue?';
      NoOfYears@1021 : Integer;
      DepreciationBookCode2@1020 : Code[10];
      FixedAssetNo2@1019 : Code[20];
      GenJournalTemplateName@1009 : Code[10];
      GenJournalBatchName@1013 : Code[10];
      FAJournalTemplateName@1005 : Code[10];
      FAJournalBatchName@1010 : Code[10];
      DepreciationBookError@1018 : TextConst 'ENU=The %1 does not exist.';
      FADepreciationCreateError@1017 : TextConst 'ENU=FA Depreciation Book must be created for Fixed Asset No. %1';
      FADepreciationNotCreateError@1016 : TextConst 'ENU=FA Depreciation Book must not be created for Fixed Asset No. %1';
      NoOfYearsError@1025 : TextConst 'ENU=Total Number of Period No.must be equal to %1. Current value is %2.';
      ErrorText@1024 : TextConst 'ENU=Error Message Must be same.';
      MinNoOfYearError@1023 : TextConst 'ENU=You must specify No. of Years.';
      MaxNoOfYearError@1022 : TextConst 'ENU=No. of Years must be less than 200.';
      BlankCopyFromFANoError@1027 : TextConst 'ENU=You must specify a number in the Copy from FA No. field.';
      BlankFirstFANoError@1026 : TextConst 'ENU=You must specify a number in First FA No. field or use the FA No. Series.';
      CopyFixedAssetError@1028 : TextConst 'ENU=%1 must be equal to %2.';
      WrongDeprDaysErr@1029 : TextConst 'ENU=Wrong number of depreciation days.';
      MixedDerpFAUntilPostingDateErr@1052 : TextConst '@@@=%1 - Fixed Asset No.;ENU=The value in the Depr. Until FA Posting Date field must be the same on lines for the same fixed asset %1.';
      CannotPostSameMultipleFAWhenDeprBookValueZeroErr@1051 : TextConst '@@@=%1 - Fixed Asset No.;ENU=You cannot select the Depr. Until FA Posting Date check box because there is no previous acquisition entry for fixed asset %1.';

    [Test]
    PROCEDURE PostFAJournalWithMultipleLine@2();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1000 : Record 5600;
      FAJournalLine@1002 : Record 5621;
    BEGIN
      // Test the Posting of Fixed Asset Journal with multiple lines.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group and Create multiple FA Journal Line for
      // Acquisition Cost,Write-Down,Custom 1,Custom 2.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);
      CreateMultipleFAJournalLine(FAJournalLine,FixedAsset."No.",DepreciationBook.Code);

      // 2.Exercise: Post FA Journal Line.
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify FA Ledger Entry exist.
      VerifyFALedgerEntry(FixedAsset."No.",DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE PostCalculateDepreciation@10();
    VAR
      DepreciationBook@1005 : Record 5611;
      FixedAsset@1004 : Record 5600;
      FAJournalLine@1002 : Record 5621;
    BEGIN
      // Test the Posting of Calculated Depreciation.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group, Create and Post multiple FA Journal Line for Acquisition Cost,
      // Write-Down,Custom 1,Custom 2 .
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateMultipleFAJournalLine(FAJournalLine,FixedAsset."No.",DepreciationBook.Code);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 2.Exercise: Calculate Depreciation and Change "Document No." in FA Journal line and Post FA Journal Line.
      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);

      PostDepreciationWithDocumentNo(DepreciationBook.Code);

      // 3.Verify: Verify FA Ledger Entry for Depreciation.
      VerifyDepreciationFALedger(FixedAsset."No.",DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE PostSalesInvIntegrationError@18();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
    BEGIN
      // Test the Posting of Sales Invoice without Integration- Disposal on Depreciation.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group. Create Customer, Create Sales Invoice with dimension.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      CreateSalesLine(SalesLine,SalesHeader,FixedAsset."No.",DepreciationBook.Code);

      // 2.Exercise: Post Sales Invoice.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3.Verify: Verify "Depreciation Book" Integration- Disposal Error.
      Assert.AreEqual(
        STRSUBSTNO(
          GLIntegrationDisposalError,
          DepreciationBook.FIELDCAPTION("G/L Integration - Disposal"),DepreciationBook.TABLECAPTION,
          DepreciationBook.FIELDCAPTION(Code),DepreciationBook.Code),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE PostPurchInvWithUseDuplicationList@32();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      PurchHeader@1001 : Record 38;
      PurchLine@1000 : Record 39;
      PurchLine2@1004 : Record 39;
      DepreciationBook2@1002 : Record 5611;
    BEGIN
      // Test the Posting of Sales Invoice with two lines Fixed Assets with "Use Duplication List".

      // 1.Setup: Create Fixed Asset,2 Depreciation Books, FA Posting Group, Create Customer, Create Sales Invoice with 2 lines.
      Initialize;

      CreateDeprBookPartOfDuplicationList(DepreciationBook);
      CreateDeprBookPartOfDuplicationList(DepreciationBook2);

      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook2.Code,FixedAsset."FA Posting Group");

      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      CreatePurchLine(PurchLine,PurchHeader,FixedAsset."No.",DepreciationBook.Code);
      CreatePurchLine(PurchLine2,PurchHeader,FixedAsset."No.",DepreciationBook2.Code);

      // 2.Exercise: Post Sales Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // 3.Verify: Verify FA Ledger Entry.
      VerifyFALedgerEntry(FixedAsset."No.",DepreciationBook2.Code);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PostSalesInvoiceWithFixedAsset@21();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FAJournalLine@1003 : Record 5621;
      SalesHeader@1009 : Record 36;
      FALedgerEntry@1000 : Record 5601;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test the Posting of Sales Invoice with Fixed Asset.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group, Create and Post multiple FA Journal Line for
      // Acquisition Cost,Write-Down,Custom 1,Custom 2. Create Customer, Create Sales Invoice with dimension.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateMultipleFAJournalLine(FAJournalLine,FixedAsset."No.",DepreciationBook.Code);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);
      PostDepreciationWithDocumentNo(DepreciationBook.Code);

      SellFixedAsset(SalesHeader,SalesHeader."Document Type"::Invoice,FixedAsset."No.",DepreciationBook.Code);
      ModifyIntegrationInBook(DepreciationBook);

      // 2.Exercise: Post Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ExecuteUIHandler;

      // 3.Verify: Verify FA Ledger Entry for Sales Invoice.
      VerifySalesFALedgerEntry(DocumentNo,FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Acquisition Cost");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PostSalesOrderAllowCorrError@23();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FAJournalLine@1003 : Record 5621;
      SalesHeader@1009 : Record 36;
    BEGIN
      // Test the Posting of Sales Order without Allow Correction of Disposal on Depreciation.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group, Create and Post multiple FA Journal Line for Acquisition Cost,
      // Write-Down,Custom 1,Custom 2. Create Customer, Create and post Sales Invoice with dimension and create Sales Order.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateMultipleFAJournalLine(FAJournalLine,FixedAsset."No.",DepreciationBook.Code);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);
      PostDepreciationWithDocumentNo(DepreciationBook.Code);
      ModifyIntegrationInBook(DepreciationBook);

      SellFixedAsset(SalesHeader,SalesHeader."Document Type"::Invoice,FixedAsset."No.",DepreciationBook.Code);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ExecuteUIHandler;

      CLEAR(SalesHeader);
      SellFixedAsset(SalesHeader,SalesHeader."Document Type"::Order,FixedAsset."No.",DepreciationBook.Code);

      // 2.Exercise: Post Sales Order.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3.Verify: Verify "Depreciation Book" Allow Correction of Disposal Error.
      Assert.AreEqual(
        STRSUBSTNO(
          AllowCorrectionError,
          DepreciationBook.FIELDCAPTION("Allow Correction of Disposal"),DepreciationBook.TABLECAPTION,
          DepreciationBook.FIELDCAPTION(Code),DepreciationBook.Code),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ProceedsOnDisposalAndGainLoss@26();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FAJournalLine@1003 : Record 5621;
      SalesHeader@1009 : Record 36;
      FALedgerEntry@1001 : Record 5601;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test the Posting of Sales Order with Fixed Asset.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Posting Group, Create and Post multiple FA Journal Line for Acquisition Cost,
      // Write-Down,Custom 1,Custom 2. Create Customer, Create and post Sales Invoice with dimension.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);
      UpdateAllowCorrectionInBook(DepreciationBook);

      CreateMultipleFAJournalLine(FAJournalLine,FixedAsset."No.",DepreciationBook.Code);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);
      PostDepreciationWithDocumentNo(DepreciationBook.Code);
      ModifyIntegrationInBook(DepreciationBook);

      SellFixedAsset(SalesHeader,SalesHeader."Document Type"::Invoice,FixedAsset."No.",DepreciationBook.Code);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2.Exercise: Create and Post Sales Order.
      CLEAR(SalesHeader);
      SellFixedAsset(SalesHeader,SalesHeader."Document Type"::Order,FixedAsset."No.",DepreciationBook.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ExecuteUIHandler;

      // 3.Verify: Verify "Proceeds on Disposal" and "Gain/Loss" FA Ledger Entry for Sales Order.
      VerifySalesFALedgerEntry(DocumentNo,FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Proceeds on Disposal");
      VerifySalesFALedgerEntry(DocumentNo,FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Gain/Loss");
    END;

    [Test]
    PROCEDURE AcquisitionCostNoIntegration@12();
    VAR
      FAJournalLine@1007 : Record 5621;
      FAJournalBatch@1005 : Record 5620;
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1001 : Record 5600;
      Amount@1006 : Decimal;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Acquisition Cost.

      // 1.Setup: Create Fixed Asset, Depreciation Book,FA Depreciation Book With FA Posting Group and remove check marks from
      // Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFixedAssetSetup(DepreciationBook);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateFAJournalBatch(FAJournalBatch);

      // Random Number Generator for Amount.
      Amount := LibraryRandom.RandDec(10000,2);

      // 2.Exercise: Post a Line in FA Journal with FA Posting Type Acquisition Cost.
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FixedAsset."No.",
        DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that the Amount is posted in FA Ledger Entry correctly.
      VerifyAcquisitionFALedgerEntry(FixedAsset."No.",Amount);
    END;

    [Test]
    PROCEDURE DepreciationNoIntegration@33();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Depreciation.

      // Post a Line in FA Journal with FA Posting Type Depreciation.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::Depreciation,FALedgerEntry."FA Posting Type"::Depreciation,-1);
    END;

    [Test]
    PROCEDURE WriteDownNoIntegration@29();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Write-Down.

      // Post a Line in FA Journal with FA Posting Type Write-Down.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::"Write-Down",FALedgerEntry."FA Posting Type"::"Write-Down",-1);
    END;

    [Test]
    PROCEDURE AppreciationNoIntegration@25();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Appreciation.

      // Post a Line in FA Journal with FA Posting Type Appreciation.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::Appreciation,FALedgerEntry."FA Posting Type"::Appreciation,1);
    END;

    [Test]
    PROCEDURE Custom1NoIntegration@36();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Custom 1.

      // Post a Line in FA Journal with FA Posting Type Custom 1.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::"Custom 1",FALedgerEntry."FA Posting Type"::"Custom 1",-1);
    END;

    [Test]
    PROCEDURE Custom2NoIntegration@37();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Custom 2.

      // Post a Line in FA Journal with FA Posting Type Custom 2.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::"Custom 2",FALedgerEntry."FA Posting Type"::"Custom 2",-1);
    END;

    [Test]
    PROCEDURE SalvageValueNoIntegration@19();
    VAR
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal with FA Posting Type Salvage Value.

      // Post a Line in FA Journal with FA Posting Type Salvage Value.
      PostingWithoutIntegration(FAJournalLine."FA Posting Type"::"Salvage Value",FALedgerEntry."FA Posting Type"::"Salvage Value",-1);
    END;

    LOCAL PROCEDURE PostingWithoutIntegration@15(FAJnlLineFAPostingType@1001 : Option;FALedgerEntryFAPostingType@1004 : Option;AmountSign@1005 : Integer);
    VAR
      FAJournalLine@1000 : Record 5621;
      DepreciationBook@1008 : Record 5611;
      FAJournalBatch@1010 : Record 5620;
      FixedAsset@1003 : Record 5600;
      Amount@1006 : Decimal;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal.

      // 1.Setup: Create Fixed Asset, Depreciation Book,FA Depreciation Book With FA Posting Group and remove check marks from
      // Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFixedAssetSetup(DepreciationBook);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateFAJournalBatch(FAJournalBatch);

      // Random Number Generator for Amount.
      Amount := LibraryRandom.RandDec(10000,2);

      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FixedAsset."No.",
        DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      Amount := ROUND(Amount / 4) * AmountSign;  // Division by 4 is required to calculate Amount less than the original Amount."
      GetNewFAJournalBatch(FAJournalBatch);

      // 2.Exercise: Post a Line in FA Journal.
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJnlLineFAPostingType,FixedAsset."No.",DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that the Amount is posted in FA Ledger Entry correctly.
      VerifyAmountInFALedgerEntry(FixedAsset."No.",FALedgerEntryFAPostingType,Amount);
    END;

    [Test]
    PROCEDURE MaintenanceNoIntegration@38();
    VAR
      FAJournalLine@1007 : Record 5621;
      DepreciationBook@1003 : Record 5611;
      FAJournalBatch@1004 : Record 5620;
      FixedAsset@1000 : Record 5600;
      Amount@1006 : Decimal;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal.

      // 1.Setup: Create Fixed Asset, Depreciation Book,FA Depreciation Book With FA Posting Group and remove check marks from
      // Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFixedAssetSetup(DepreciationBook);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      CreateFAJournalBatch(FAJournalBatch);

      // Random Number Generator for Amount.
      Amount := LibraryRandom.RandDec(10000,2);

      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FixedAsset."No.",
        DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      Amount := -ROUND(Amount / 4);  // Division by 4 is required to calculate Amount less than the original Amount."
      GetNewFAJournalBatch(FAJournalBatch);

      // 2.Exercise: Post a Line in FA Journal with FA Posting Type Maintenance.
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::Maintenance,FixedAsset."No.",
        DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that the Amount is posted in Maintenance Ledger Entry correctly.
      VerifyMaintenanceLedgerEntry(FixedAsset."No.",Amount);
    END;

    [Test]
    PROCEDURE FAJournalDisposal@31();
    VAR
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1004 : Record 5611;
      FAJournalBatch@1003 : Record 5620;
      FAJournalLine@1007 : Record 5621;
      FALedgerEntry@1009 : Record 5601;
      Amount@1006 : Decimal;
    BEGIN
      // Test the Posting of Fixed Asset in FA Journal.

      // 1.Setup: Create Fixed Asset, Depreciation Book,FA Depreciation Book With FA Posting Group and remove check marks from
      // Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFixedAssetSetup(DepreciationBook);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      SetupPartialIntegrationInBook(DepreciationBook);

      CreateFAJournalBatch(FAJournalBatch);
      Amount := LibraryRandom.RandDec(10000,2);

      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FixedAsset."No.",
        DepreciationBook.Code,Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      GetNewFAJournalBatch(FAJournalBatch);

      // 2.Exercise: Post a Line in FA Journal with FA Posting Type Disposal.
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::Disposal,FixedAsset."No.",
        DepreciationBook.Code,-Amount);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that the Amount is posted in FA Ledger Entry correctly.
      VerifyAmountInFALedgerEntry(FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Proceeds on Disposal",-Amount);
    END;

    [Test]
    [HandlerFunctions(FADepreciationBooksHandler)]
    PROCEDURE CreateFADepreciationBooksError@50();
    VAR
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // Test error occurs on running Create FA Depreciation Books report without Depreciation Book Code and Copy From FA No.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Create FA Depreciation Books Report with Depreciation Book Code as blank and Copy From FA No as blank.
      // Set Depreciation Book and Copy From FA No. into FA Depreciation Books Handler.
      ASSERTERROR RunCreateFADepreciationBooks(FixedAsset,'','');

      // 3. Verify: Verify error occurs on running Create FA Depreciation Books Report without Depreciation Book Code and Copy From FA No.
      Assert.ExpectedError(STRSUBSTNO(DepreciationBookError,DepreciationBook.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(FADepreciationBooksHandler)]
    PROCEDURE FixedAssetInactiveTrue@49();
    VAR
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1000 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      // Test FA Depreciation Book must not be created for Inactive Fixed Asset.

      // 1. Setup: Create Fixed Asset with Inactive as True. Create Depreciation Book.
      Initialize;
      CreateInactiveFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      COMMIT;  // COMMIT needs before running batch report.

      // 2. Exercise: Run Create FA Depreciation Books Report with Copy From FA No as blank.
      // Set Depreciation Book and Copy From FA No. into FA Depreciation Books Handler.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunCreateFADepreciationBooks(FixedAsset,DepreciationBook.Code,'');

      // 3. Verify: Verify FA Depreciation Book must not be created for Inactive Fixed Asset.
      Assert.IsFalse(
        FADepreciationBook.GET(FixedAsset."No.",DepreciationBook.Code),STRSUBSTNO(FADepreciationNotCreateError,FixedAsset."No."));
    END;

    [Test]
    [HandlerFunctions(FADepreciationBooksHandler)]
    PROCEDURE FixedAssetInactiveFalse@44();
    VAR
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1000 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      // Test FA Depreciation Book must be created for active Fixed Asset.

      // 1. Setup: Create Fixed Asset with Inactive as False. Create Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      COMMIT;  // COMMIT needs before running batch report.

      // 2. Exercise: Run Create FA Depreciation Books Report with Copy From FA No as blank.
      // Set Depreciation Book and Copy From FA No. into FA Depreciation Books Handler.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunCreateFADepreciationBooks(FixedAsset,DepreciationBook.Code,'');

      // 3. Verify: Verify FA Depreciation Book must be created for active Fixed Asset.
      Assert.IsTrue(
        FADepreciationBook.GET(FixedAsset."No.",DepreciationBook.Code),STRSUBSTNO(FADepreciationCreateError,FixedAsset."No."));
    END;

    [Test]
    [HandlerFunctions(RequestPageHandler)]
    PROCEDURE MinNoOfYearInDepreciationTable@43();
    VAR
      DepreciationTableHeader@1002 : Record 5642;
      DepreciationTableCard@1000 : TestPage 5659;
    BEGIN
      // Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
      // No. of Years is equal to 0 and check Error for Minimum No. of Year.

      // 1.Setup: Create Depreciation Table with Period Length.
      Initialize;
      CreateDepreciationTable(DepreciationTableHeader);
      NoOfYears := 0;

      // 2.Exercise: Run Create Sum of Digits Table Report.
      COMMIT;  // COMMIT is important here before use Depreciation Table Card Page.
      DepreciationTableCard.OPENVIEW;
      DepreciationTableCard.FILTER.SETFILTER(Code,DepreciationTableHeader.Code);
      ASSERTERROR DepreciationTableCard.CreateSumOfDigitsTable.INVOKE;

      // 3.Verify: Check Error for Minimum No. of Year.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MinNoOfYearError) > 0,ErrorText);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandler)]
    PROCEDURE NoOfYearInDepreciationTable@42();
    VAR
      DepreciationTableHeader@1001 : Record 5642;
      DepreciationTableLine@1002 : Record 5643;
      DepreciationTableCard@1000 : TestPage 5659;
    BEGIN
      // Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
      // No. of Years and Verify Depreciation Table Line.

      // 1.Setup: Create Depreciation Table with Period Length.
      Initialize;
      CreateDepreciationTable(DepreciationTableHeader);
      NoOfYears := LibraryRandom.RandInt(200);

      // 2.Exercise: Run Create Sum of Digits Table Report.
      COMMIT;  // COMMIT is important here before use Depreciation Table Card Page.
      DepreciationTableCard.OPENVIEW;
      DepreciationTableCard.FILTER.SETFILTER(Code,DepreciationTableHeader.Code);
      DepreciationTableCard.CreateSumOfDigitsTable.INVOKE;

      // 3.Verify: Check total number of Period No. for Depreciation Table.
      DepreciationTableLine.SETRANGE("Depreciation Table Code",DepreciationTableCard.Code.VALUE);
      Assert.AreEqual(DepreciationTableLine.COUNT,NoOfYears,STRSUBSTNO(NoOfYearsError,NoOfYears,DepreciationTableLine.COUNT));
    END;

    [Test]
    [HandlerFunctions(RequestPageHandler)]
    PROCEDURE MaxNoOfYearInDepreciationTable@55();
    VAR
      DepreciationTableHeader@1002 : Record 5642;
      DepreciationTableCard@1000 : TestPage 5659;
    BEGIN
      // Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
      // No. of Years is equal to 201 and check Error for maximum No. of Year.

      // 1.Setup: Create Depreciation Table with Period Length.
      Initialize;
      CreateDepreciationTable(DepreciationTableHeader);
      NoOfYears := LibraryRandom.RandInt(10) + 200;  // 200 maximum No. of Year.

      // 2.Exercise: Run Create Sum of Digits Table Report.
      COMMIT;  // COMMIT is important here before use Depreciation Table Card Page.
      DepreciationTableCard.OPENVIEW;
      DepreciationTableCard.FILTER.SETFILTER(Code,DepreciationTableHeader.Code);
      ASSERTERROR DepreciationTableCard.CreateSumOfDigitsTable.INVOKE;

      // 3.Verify: Check Error for Maximum No. of Year.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MaxNoOfYearError) > 0,ErrorText);
    END;

    [Test]
    [HandlerFunctions(GenJournalBatchesHandler,FAJournalSetupGenBatchHandler)]
    PROCEDURE GenBatchNameOnFAJnlSetupLookUp@60();
    VAR
      GenJournalTemplate@1003 : Record 80;
      GenJournalBatch@1004 : Record 232;
      DepreciationBook@1005 : Record 5611;
    BEGIN
      // Verify program opens General Journal batch on clicking lookup on 'Gen. Jnl. Batch Name' on FA Journal Setup.

      // 1.Setup: Find Depreciation Book,FA Journal Template and FA Journal Batch.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.FindGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      // Variables 'GenJournalTemplateName' and 'GenJournalBatchName' are declared Global as they are used in Handler method.
      GenJournalTemplateName := GenJournalTemplate.Name;
      GenJournalBatchName := GenJournalBatch.Name;

      // 2.Exercise: From Depreciation Book open FA Journal Setup page.
      OpenFAJnlSetupFromDepBook(DepreciationBook.Code);

      // 3.Verify: Verification is done in 'GenJournalBatchesHandler' handler method.
    END;

    [Test]
    [HandlerFunctions(FAJournalSetupFABatchHandler,FAJournalBatchesHandler)]
    PROCEDURE FABatchNameOnFAJnlSetupLookUp@57();
    VAR
      FAJournalTemplate@1002 : Record 5619;
      FAJournalBatch@1003 : Record 5620;
      DepreciationBook@1001 : Record 5611;
    BEGIN
      // Verify program populates FA Journal Batch Name list when lookup is invoked on 'FA Journal Batch Name' field on FA Journal Setup.

      // 1.Setup: Find Depreciation Book,FA Journal Template and FA Journal Batch.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.FindFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);

      // Variables 'FAJournalTemplateName' and 'FAJournalBatchName' are declared Global as they are used in Handler method.
      FAJournalTemplateName := FAJournalTemplate.Name;
      FAJournalBatchName := FAJournalBatch.Name;

      // 2.Exercise: From Depreciation Book open FA Journal Setup page.
      OpenFAJnlSetupFromDepBook(DepreciationBook.Code);

      // 3.Verify: Verification is done in 'FAJournalBatchesHandler' handler method.
    END;

    [Test]
    PROCEDURE CopyFixedAssetsWithCopyFromFANoBlankError@136();
    VAR
      FixedAsset@1000 : Record 5600;
      NoOfFixedAssetCopied@1001 : Integer;
    BEGIN
      // Test error occurs on running Copy Fixed Asset Report with Copy From FA No. as blank.

      // 1. Setup: Create New Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      NoOfFixedAssetCopied := LibraryRandom.RandInt(10);  // Using Random Generator to Copy the Number of Fixed Asset.

      // 2. Exercise:  Run Copy Fixed Asset Report with Copy From FA No. as blank.
      ASSERTERROR RunCopyFixedAsset(FixedAsset."No.",'',NoOfFixedAssetCopied,'',FALSE);

      // 3. Verify: Verify error occurs on running Copy Fixed Asset Report with Copy From FA No. as blank.
      Assert.AreEqual(STRSUBSTNO(BlankCopyFromFANoError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE CopyFixedAssetsWithFirstFANoBlankError@138();
    VAR
      FixedAsset@1000 : Record 5600;
      NoOfFixedAssetCopied@1001 : Integer;
    BEGIN
      // Test error occurs on running Copy Fixed Asset Report with First FA No. as blank and FA No. Series as false.

      // 1. Setup: Create New Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      NoOfFixedAssetCopied := LibraryRandom.RandInt(10);  // Using Random Generator to Copy the Number of Fixed Asset.

      // 2. Exercise: Run Copy Fixed Asset Report with First FA No. as blank and FA No. Series as false.
      ASSERTERROR RunCopyFixedAsset(FixedAsset."No.",FixedAsset."No.",NoOfFixedAssetCopied,'',FALSE);

      // 3. Verify: Verify error occurs on running Copy Fixed Asset Report with First FA No. as blank and FA No. Series as false.
      Assert.AreEqual(STRSUBSTNO(BlankFirstFANoError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE CopyFixedAssetsWithFANoSeriesFalse@144();
    VAR
      FixedAsset@1000 : Record 5600;
      FixedAssetCount@1001 : Integer;
      NoOfFixedAssetCopied@1002 : Integer;
    BEGIN
      // Test the Copy Fixed Assets functionality with Use FA No. Series as false.

      // 1.Setup: Create Fixed Asset
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FixedAssetCount := FixedAsset.COUNT;
      NoOfFixedAssetCopied := LibraryRandom.RandInt(10);  // Using Random Generator to Copy the Number of Fixed Asset.

      // 2.Exercise: Run the Copy Fixed Assets with Use FA No. Series as false.
      RunCopyFixedAsset(FixedAsset."No.",FixedAsset."No.",NoOfFixedAssetCopied,GenerateFixedAssetNo,FALSE);

      // 3.Verify: New count of Fixed Asset should be Equal to total of Previous Fixed Asset count and No of fixed assets copied.
      Assert.AreEqual(FixedAssetCount + NoOfFixedAssetCopied,FixedAsset.COUNT,CopyFixedAssetError);
    END;

    [Test]
    PROCEDURE FALedgerEntriesUsingStatistics@63();
    VAR
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1005 : Record 5611;
      FixedAssetCard@1000 : TestPage 5600;
      FixedAssetStatistics@1002 : TestPage 5602;
      FALedgerEntries@1003 : TestPage 5604;
    BEGIN
      // Test to verify that FA Ledger entries page gets opened by invoking drill down on Fixed Asset Statistics page.

      // 1.Setup: Create Fixed Asset and Depreciation Book and set newly created Depreciation Book Code on Fixed Asset Card.
      // Open Fixed Asset Statistics page from Fixed Asset card.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      FixedAssetCard.OPENEDIT;
      FixedAssetCard.FILTER.SETFILTER("No.",FixedAsset."No.");
      FixedAssetCard.DepreciationBook."Depreciation Book Code".SETVALUE(DepreciationBook.Code);
      FixedAssetStatistics.TRAP;
      FixedAssetCard."Page Fixed Asset Statistics".INVOKE;

      // 2.Exercise: Invoke drill down on Book Value field of Fixed Asset Statistics page.
      FALedgerEntries.TRAP;
      FixedAssetStatistics."Book Value".DRILLDOWN;

      // 3.Verify: Verify that FA Ledger Entries page gets opened.
    END;

    [Test]
    PROCEDURE WriteDownDepreciationTypeEnabled@35();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // [SCENARIO 361344] Depreciation started from the next day of the last operation with "Depreciation Type" = TRUE.
      Initialize;

      // [GIVEN] Posted Acq. Cost and Write-Down operations with "FA Posting Date" = WORKDATE.
      CreateFixedAssetWithSetup(FixedAsset,DepreciationBook);
      CreateAndPostAcqCostAndWriteDownFAJnlLines(FixedAsset."No.",DepreciationBook.Code);
      // [GIVEN] Set "Depreciation Type" TRUE in FA Posting Type Setup for Write-Down
      SetDeprTypeFAPostingTypeSetupWriteDown(DepreciationBook.Code);

      // [WHEN] Calculate depreciation with "FA Posting Date" = WORKDATE + 1. Post FA Journal.
      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);
      PostDepreciationWithDocumentNo(DepreciationBook.Code);

      // [THEN] Number of depreciation days in FA Ledger Entry equals 1
      VerifyFALedgEntryDeprDays(FixedAsset."No.",DepreciationBook.Code,1);
    END;

    [Test]
    PROCEDURE WriteDownDepreciationTypeDisabled@72();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // [SCENARIO 361344] Depreciation started from the same day of the last operation with "Depreciation Type" = FALSE.
      Initialize;

      // [GIVEN] Posted Acq. Cost and Write-Down operations with "FA Posting Date" = WORKDATE.
      CreateFixedAssetWithSetup(FixedAsset,DepreciationBook);
      CreateAndPostAcqCostAndWriteDownFAJnlLines(FixedAsset."No.",DepreciationBook.Code);
      // [GIVEN] Set "Depreciation Type" FALSE in FA Posting Type Setup for Write-Down
      ResetDeprTypeFAPostingTypeSetupWriteDown(DepreciationBook.Code);

      // [WHEN] Calculate depreciation with "FA Posting Date" = WORKDATE + 1. Post FA Journal.
      RunCalculateDepreciation(FixedAsset."No.",DepreciationBook.Code);
      PostDepreciationWithDocumentNo(DepreciationBook.Code);

      // [THEN] Number of depreciation days in FA Ledger Entry equals 2
      VerifyFALedgEntryDeprDays(FixedAsset."No.",DepreciationBook.Code,2);
    END;

    [Test]
    PROCEDURE FAJnlLineDimDuplicationListNoGLIntegration@51();
    VAR
      FAJnlLine@1003 : Record 5621;
      ShortcutDimValueCode@1004 : ARRAY [2] OF Code[20];
      FANo@1005 : Code[20];
      DeprBookCode@1006 : Code[10];
      DuplListDeprBookCode@1007 : Code[10];
    BEGIN
      // [SCENARIO 363280] Post FA Jnl. Line with dimensions and "Use Duplication List"
      Initialize;
      // [GIVEN] Fixed Asset with two Depreciation Books "DB1", "DB2"
      // [GIVEN] "DB1" and "DB2": "G/L Integration - Acq. Cost" = FALSE, "DB2": "Part of Duplication List" = TRUE
      CreateFAAndDuplListSetup(FANo,DeprBookCode,DuplListDeprBookCode,FALSE);
      // [GIVEN] FA Jnl. Line for "DB1", "Use Duplication List" = TRUE, Shortcut Dimension Codes = "DimVal1" and "DimVal2"
      CreateFAJnlLineWithDimensionsAndUseDuplicationList(FAJnlLine,ShortcutDimValueCode,FANo,DeprBookCode);
      // [WHEN] Post FA Jnl. Line
      LibraryFixedAsset.PostFAJournalLine(FAJnlLine);
      // [THEN] FA Jnl. Line for "DB2" created: "Shortcut Dimension 1 Code" = "DimVal1", "Shortcut Dimension 2 Code" = "DimVal2"
      VerifyFAJnlLineDimUseDuplicationList(DuplListDeprBookCode,ShortcutDimValueCode);
    END;

    [Test]
    PROCEDURE GenJnlLineDimDuplicationListGLIntegration@69();
    VAR
      GenJnlLine@1003 : Record 81;
      ShortcutDimValueCode@1004 : ARRAY [2] OF Code[20];
      FANo@1007 : Code[20];
      DeprBookCode@1006 : Code[10];
      DuplListDeprBookCode@1005 : Code[10];
    BEGIN
      // [SCENARIO 363280] Post Gen. Jnl. Line with dimensions and "Use Duplication List"
      Initialize;
      // [GIVEN] Fixed Asset with two Depreciation Books "DB1", "DB2"
      // [GIVEN] "DB1" and "DB2": "G/L Integration - Acq. Cost" = TRUE, "DB2": "Part of Duplication List" = TRUE
      CreateFAAndDuplListSetup(FANo,DeprBookCode,DuplListDeprBookCode,TRUE);
      // [GIVEN] Gen. Jnl. Line for "DB1", "Use Duplication List" = TRUE, Shortcut Dimension Codes = "DimVal1" and "DimVal2"
      CreateGenJnlLineWithDimensionsAndUseDuplicationList(GenJnlLine,ShortcutDimValueCode,FANo,DeprBookCode);
      // [WHEN] Post Gen. Jnl. Line
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      // [THEN] Gen. Jnl. Line for "DB2" created: "Shortcut Dimension 1 Code" = "DimVal1", "Shortcut Dimension 2 Code" = "DimVal2"
      VerifyGenJnlLineDimUseDuplicationList(DuplListDeprBookCode,ShortcutDimValueCode);
    END;

    [Test]
    PROCEDURE FADepreciationBookAfterPostFAJournal@1005();
    VAR
      FixedAsset@1006 : Record 5600;
      DepreciationBook@1008 : Record 5611;
      FADepreciationBook@1009 : Record 5612;
      DocumentNo@1011 : Code[20];
    BEGIN
      // Test to validate Amount on FA Depreciation Book After Post FA Journal Line.

      // Setup: Create FA Depreciation Book, Fixed Asset, FA Journal Line and post FA Journal Line.
      Initialize;
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code);

      // Exercise: Create and Post FA Journal Line.
      DocumentNo := CreateAndPostFAJournalLine(FixedAsset."No.",DepreciationBook.Code);

      // Verify: Verify FA Depreciation Book.
      VerifyFADepreciationBook(FixedAsset."No.",DocumentNo,DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE GLEntryVATEntryLinkForFASalesAccOnDispLoss@41();
    VAR
      GLEntry@1005 : Record 17;
      FANo@1002 : Code[20];
      DocumentNo@1001 : Code[20];
      GLAccountNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [G/L Entry - VAT Entry Link] [VAT] [Sales]
      // [SCENARIO 202344] VATEntry is linked to "VAT" GLEntry with "G/L Account No." = FAPostingGroup."Sales Acc. on Disp. (Loss)" when sale fixed asset with "Depr. until FA Posting Date" = TRUE
      Initialize;

      // [GIVEN] Fixed Asset with "Sales Acc. on Disp. (Loss)" = "DispLossGLAcc", "Disposal Calculation Method" = "Gross", "VAT on Net Disposal Entries" = TRUE
      FANo := CreateFAWithBookGrossAndNetDisposal;

      // [GIVEN] Acquisistion cost on "Posting Date" = 01-01-2019
      CreateAndPostFAJournalLine(FANo,GetFADeprBookCode(FANo));

      // [WHEN] Sale fixed asset (sales invoice "SI") on "Posting Date" = 01-02-2019 with "Depr. until FA Posting Date" = TRUE
      DocumentNo := CreatePostFixedAssetSalesInvoice(CALCDATE('<1M>',WORKDATE),FANo,LibraryRandom.RandDecInRange(1000,2000,2));

      // [THEN] There is a GLEntry "X" with "Document Type" = "Invoice", "Document No." = "SI", "Gen. Posting Type" = "Sale", "G/L Account No." = "DispLossGLAcc"
      GLAccountNo := GetFASalesAccOnDispLoss(FANo);
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo,GLEntry."Gen. Posting Type"::Sale,GLAccountNo);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithDifferentDeprUntilFAPostingDate@177();
    VAR
      PurchaseHeader@1000 : Record 38;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // [FEATURE] [Acquisition Cost] [Depr. Until FA Posting Date]
      // [SCENARIO 201778] Stans gets error when he posts purchase invoice with two lines for the same fixed asset and mixed "Depr. until FA Posting Date" attribute
      Initialize;

      // [GIVEN] Purchase invoice with two lines for the same fixed asset
      // [GIVEN] Line[1] Type = Fixed Asset, "No." = "FA" and "Depr. until FA Posting Date" = TRUE
      // [GIVEN] Line[2] Type = Fixed Asset, "No." = "FA" and "Depr. until FA Posting Date" = FALSE
      CreatePurchInvoiceWithTwoFixedAsset(PurchaseHeader,FixedAsset,TRUE,FALSE);

      // [WHEN] Post invoice
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] Error "The value in the Depr. Until FA Posting Date field must be the same on lines for the same fixed asset."
      Assert.ExpectedError(STRSUBSTNO(MixedDerpFAUntilPostingDateErr,FixedAsset."No."));
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithSameDeprUntilFAPostingDate@176();
    VAR
      PurchaseHeader@1000 : Record 38;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // [FEATURE] [Acquisition Cost] [Depr. Until FA Posting Date]
      // [SCENARIO 201778] Stans gets error when he posts purchase invoice with two lines for the same fixed asset where "Depr. until FA Posting Date" = TRUE and there is no acqusition cost registered
      Initialize;

      // [GIVEN] Purchase invoice with two lines for the same fixed asset
      // [GIVEN] Line[1] Type = Fixed Asset, "No." = "FA" and "Depr. until FA Posting Date" = TRUE
      // [GIVEN] Line[2] Type = Fixed Asset, "No." = "FA" and "Depr. until FA Posting Date" = TRUE
      // [GIVEN] There is no any acqusition cost registered for the fixed asset
      CreatePurchInvoiceWithTwoFixedAsset(PurchaseHeader,FixedAsset,TRUE,TRUE);

      // [WHEN] Post invoice
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] Error "You cannot post multiple purchase lines for the same fixed asset FA when Depr. Until FA Posting Date is TRUE and you've already registered depreciation."
      Assert.ExpectedError(STRSUBSTNO(CannotPostSameMultipleFAWhenDeprBookValueZeroErr,FixedAsset."No."));
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Use global variables for Test Request Page Handler.
      NoOfYears := 0;
      CLEAR(DepreciationBookCode2);
      CLEAR(FixedAssetNo2);
      CLEAR(GenJournalTemplateName);
      CLEAR(GenJournalBatchName);
      CLEAR(FAJournalTemplateName);
      CLEAR(FAJournalBatchName);
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateFAJnlTemplateName; // Bug #328391
      LibraryERMCountryData.UpdateFAPostingGroup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryFixedAsset.CreateFAIncomeTaxAccPeriod(WORKDATE);
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SellFixedAsset@46(VAR SalesHeader@1000 : Record 36;DocumentType@1004 : Option;FANo@1001 : Code[20];DepreciationBookCode@1002 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,LibrarySales.CreateCustomerNo);
      SalesHeader.VALIDATE("Posting Date",CALCDATE('<1D>',WORKDATE));
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesLine,SalesHeader,FANo,DepreciationBookCode);
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLine@1016(FixedAssetNo@1017 : Code[20];DepreciationBookCode@1018 : Code[10]) DocumentNo : Code[20];
    VAR
      FAJournalBatch@1020 : Record 5620;
      FAJournalLine@1021 : Record 5621;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FixedAssetNo,DepreciationBookCode,
        LibraryRandom.RandDecInRange(10000,20000,2));  // Use random value for Amount.
      DocumentNo := FAJournalLine."Document No.";
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateDepreciationTable@45(VAR DepreciationTableHeader@1000 : Record 5642);
    BEGIN
      LibraryFixedAsset.CreateDepreciationTableHeader(DepreciationTableHeader);
      DepreciationTableHeader.VALIDATE("Period Length",DepreciationTableHeader."Period Length"::Year);
      DepreciationTableHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDeprBookPartOfDuplicationList@108(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      CreateFixedAssetSetup(DepreciationBook);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",TRUE);
      DepreciationBook.VALIDATE("Part of Duplication List",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@56(FANo@1001 : Code[20];DepreciationBookCode@1002 : Code[10];FAPostingGroup@1003 : Code[10]);
    VAR
      FADepreciationBook@1004 : Record 5612;
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Random Number Generator for Ending date.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFixedAssetSetup@13(VAR DepreciationBook@1002 : Record 5611);
    VAR
      FAJournalSetup@1004 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
      UpdateFAPostingTypeSetup(DepreciationBook.Code);
    END;

    LOCAL PROCEDURE CreateFAAndDuplListSetup@79(VAR FANo@1000 : Code[20];VAR DeprBookCode@1001 : Code[10];VAR DuplListDeprBookCode@1002 : Code[10];AcqCostGLIntegration@1006 : Boolean);
    VAR
      FixedAsset@1004 : Record 5600;
      DeprBook@1003 : Record 5611;
      DuplListDeprBook@1005 : Record 5611;
    BEGIN
      CreateFixedAssetWithSetup(FixedAsset,DeprBook);
      CreateDeprBookPartOfDuplicationList(DuplListDeprBook);
      CreateFADepreciationBook(FixedAsset."No.",DuplListDeprBook.Code,FixedAsset."FA Posting Group");
      SetupAcqCostGLIntegration(DeprBook,AcqCostGLIntegration);
      SetupAcqCostGLIntegration(DuplListDeprBook,AcqCostGLIntegration);
      FANo := FixedAsset."No.";
      DeprBookCode := DeprBook.Code;
      DuplListDeprBookCode := DuplListDeprBook.Code;
    END;

    LOCAL PROCEDURE CreateInactiveFixedAsset@104(VAR FixedAsset@1001 : Record 5600);
    BEGIN
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE(Inactive,TRUE);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleFAJournalLine@4(VAR FAJournalLine@1001 : Record 5621;FANo@1002 : Code[20];DepreciationBookCode@1003 : Code[10]);
    VAR
      FAJournalBatch@1000 : Record 5620;
    BEGIN
      // Using Random Number Generator for Amount.
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",
        FANo,DepreciationBookCode,LibraryRandom.RandIntInRange(1000,2000));
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Write-Down",
        FANo,DepreciationBookCode,-LibraryRandom.RandDec(100,2));
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Custom 1",
        FANo,DepreciationBookCode,-LibraryRandom.RandDec(100,2));
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Custom 2",
        FANo,DepreciationBookCode,-LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateFAJournalLine@11(VAR FAJournalLine@1001 : Record 5621;FAJournalBatch@1006 : Record 5620;FAPostingType@1004 : Option;FANo@1002 : Code[20];DepreciationBookCode@1003 : Code[10];Amount@1000 : Decimal);
    BEGIN
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Document Type",FAJournalLine."Document Type"::" ");
      FAJournalLine.VALIDATE("Document No.",FAJournalLine."Journal Batch Name" + FORMAT(FAJournalLine."Line No."));
      FAJournalLine.VALIDATE("Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      FAJournalLine.VALIDATE("FA No.",FANo);
      FAJournalLine.VALIDATE(Amount,Amount);
      FAJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAJournalBatch@65(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1002 : Record 5619;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalBatch.VALIDATE("No. Series",'');
      FAJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@22(VAR SalesLine@1002 : Record 37;SalesHeader@1003 : Record 36;FANo@1001 : Code[20];DepreciationBookCode@1000 : Code[10]);
    BEGIN
      // Using Random Number Generator for Amount and Quantity.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Fixed Asset",FANo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchLine@71(VAR PurchLine@1002 : Record 39;PurchHeader@1003 : Record 38;FANo@1001 : Code[20];DepreciationBookCode@1000 : Code[10]);
    BEGIN
      // Using Random Number Generator for Amount and Quantity.
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::"Fixed Asset",FANo,LibraryRandom.RandInt(10));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      PurchLine.VALIDATE("Use Duplication List",TRUE);
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFixedAssetWithSetup@58(VAR FixedAsset@1000 : Record 5600;VAR DepreciationBook@1001 : Record 5611);
    BEGIN
      CreateFixedAssetSetup(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateFAWithBookGrossAndNetDisposal@80() : Code[20];
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1000 : Record 5612;
    BEGIN
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      DepreciationBook.VALIDATE("Disposal Calculation Method",DepreciationBook."Disposal Calculation Method"::Gross);
      DepreciationBook.MODIFY(TRUE);
      UpdateIntegrationInBook(DepreciationBook,TRUE,TRUE,TRUE);
      UpdateFAPostingTypeSetup(DepreciationBook.Code);

      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code);
      FADepreciationBook.VALIDATE("FA Posting Group",FixedAsset."FA Posting Group");
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);
      FADepreciationBook.VALIDATE("No. of Depreciation Years",LibraryRandom.RandInt(5));
      FADepreciationBook.MODIFY(TRUE);
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE CreateAndPostAcqCostAndWriteDownFAJnlLines@59(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10]);
    VAR
      FAJournalLine@1004 : Record 5621;
      FAJournalBatch@1002 : Record 5620;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);

      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Acquisition Cost",FANo,
        DeprBookCode,LibraryRandom.RandDec(1000,2));
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FAJournalLine."FA Posting Type"::"Write-Down",FANo,
        DeprBookCode,-LibraryRandom.RandDec(100,2));

      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateFAJnlLineWithDimensionsAndUseDuplicationList@70(VAR FAJnlLine@1003 : Record 5621;VAR ShortcutDimValueCode@1006 : ARRAY [2] OF Code[20];FANo@1000 : Code[20];DeprBookCode@1001 : Code[10]);
    VAR
      FAJnlBatch@1002 : Record 5620;
      DimValue@1005 : Record 349;
    BEGIN
      CreateFAJournalBatch(FAJnlBatch);
      CreateFAJournalLine(
        FAJnlLine,FAJnlBatch,FAJnlLine."FA Posting Type"::"Acquisition Cost",FANo,DeprBookCode,LibraryRandom.RandInt(100));
      WITH FAJnlLine DO BEGIN
        VALIDATE("Use Duplication List",TRUE);
        LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(1));
        VALIDATE("Shortcut Dimension 1 Code",DimValue.Code);
        LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(2));
        VALIDATE("Shortcut Dimension 2 Code",DimValue.Code);
        MODIFY(TRUE);
        ShortcutDimValueCode[1] := "Shortcut Dimension 1 Code";
        ShortcutDimValueCode[2] := "Shortcut Dimension 2 Code";
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithDimensionsAndUseDuplicationList@73(VAR GenJnlLine@1003 : Record 81;VAR ShortcutDimValueCode@1006 : ARRAY [2] OF Code[20];FANo@1000 : Code[20];DeprBookCode@1001 : Code[10]);
    VAR
      GenJnlTemplate@1002 : Record 80;
      GenJnlBatch@1005 : Record 232;
      DimValue@1007 : Record 349;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      LibraryERM.CreateGenJournalBatch(GenJnlBatch,GenJnlTemplate.Name);
      WITH GenJnlLine DO BEGIN
        LibraryERM.CreateGeneralJnlLineWithBalAcc(
          GenJnlLine,GenJnlTemplate.Name,GenJnlBatch.Name,"Document Type"::" ",
          "Account Type"::"Fixed Asset",FANo,"Bal. Account Type"::"G/L Account",
          LibraryERM.CreateGLAccountNo,LibraryRandom.RandInt(100));
        VALIDATE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
        VALIDATE("Depreciation Book Code",DeprBookCode);
        VALIDATE("Use Duplication List",TRUE);
        LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(1));
        VALIDATE("Shortcut Dimension 1 Code",DimValue.Code);
        LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(2));
        VALIDATE("Shortcut Dimension 2 Code",DimValue.Code);
        MODIFY(TRUE);
        ShortcutDimValueCode[1] := "Shortcut Dimension 1 Code";
        ShortcutDimValueCode[2] := "Shortcut Dimension 2 Code";
      END;
    END;

    LOCAL PROCEDURE CreatePostFixedAssetSalesInvoice@86(PostingDate@1002 : Date;FANo@1001 : Code[20];UnitPrice@1000 : Decimal) : Code[20];
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Fixed Asset",FANo,1);
      SalesLine.VALIDATE("Depreciation Book Code",GetFADeprBookCode(FANo));
      SalesLine.VALIDATE("Depr. until FA Posting Date",TRUE);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);

      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePurchInvoiceWithTwoFixedAsset@180(VAR PurchaseHeader@1001 : Record 38;VAR FixedAsset@1004 : Record 5600;DeprUntilPostingDate1@1002 : Boolean;DeprUntilPostingDate2@1003 : Boolean);
    VAR
      PurchaseLine@1000 : Record 39;
      DepreciationBook@1006 : Record 5611;
    BEGIN
      CreateFixedAssetSetup(DepreciationBook);
      CreateFixedAssetWithSetup(FixedAsset,DepreciationBook);
      UpdateIntegrationInBook(DepreciationBook,FALSE,FALSE,FALSE);

      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FixedAsset."No.",LibraryRandom.RandIntInRange(100,200));
      PurchaseLine.VALIDATE("Depr. until FA Posting Date",DeprUntilPostingDate1);
      PurchaseLine.MODIFY(TRUE);

      CLEAR(PurchaseLine);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FixedAsset."No.",LibraryRandom.RandIntInRange(100,200));
      PurchaseLine.VALIDATE("Depr. until FA Posting Date",DeprUntilPostingDate2);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GenerateFixedAssetNo@147() : Code[20];
    VAR
      FixedAsset@1000 : Record 5600;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FixedAsset.FIELDNO("No."),DATABASE::"Fixed Asset"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Fixed Asset",FixedAsset.FIELDNO("No."))));
    END;

    LOCAL PROCEDURE GetFALedgerEntryAmount@1050(DocumentNo@1051 : Code[20];FANo@1052 : Code[20]) : Decimal;
    VAR
      FALedgerEntry@1053 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("Document No.",DocumentNo);
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      EXIT(FALedgerEntry.Amount);
    END;

    LOCAL PROCEDURE GetNewFAJournalBatch@17(VAR FAJournalBatch@1000 : Record 5620);
    BEGIN
      FAJournalBatch.Name := INCSTR(FAJournalBatch.Name);
    END;

    LOCAL PROCEDURE GetVATEntryAmount@7(VATEntry@1000 : Record 254) : Decimal;
    BEGIN
      IF VATEntry.Amount <> 0 THEN
        EXIT(VATEntry.Amount);
      EXIT(VATEntry."Unrealized Amount");
    END;

    LOCAL PROCEDURE GetFASalesAccOnDispLoss@85(FANo@1000 : Code[20]) : Code[20];
    VAR
      FixedAsset@1002 : Record 5600;
      FAPostingGroup@1001 : Record 5606;
    BEGIN
      FixedAsset.GET(FANo);
      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      EXIT(FAPostingGroup."Sales Acc. on Disp. (Loss)");
    END;

    LOCAL PROCEDURE GetFADeprBookCode@82(FANo@1000 : Code[20]) : Code[10];
    VAR
      FADepreciationBook@1001 : Record 5612;
    BEGIN
      WITH FADepreciationBook DO BEGIN
        SETRANGE("FA No.",FANo);
        FINDFIRST;
        EXIT("Depreciation Book Code");
      END;
    END;

    LOCAL PROCEDURE ModifyIntegrationInBook@24(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("G/L Integration - Disposal",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindSalesInvoiceGLEntryWithVATAmount@95(VAR GLEntry@1000 : Record 17;DocumentNo@1002 : Code[20];VATAmount@1001 : Decimal);
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Gen. Posting Type","Gen. Posting Type"::Sale);
        SETRANGE("VAT Amount",VATAmount);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindSalesInvoiceVATEntry@96(VAR VATEntry@1000 : Record 254;DocumentNo@1001 : Code[20]);
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::Sale);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindGLEntry@92(VAR GLEntry@1004 : Record 17;DocumentType@1003 : Option;DocumentNo@1002 : Code[20];GenPostingType@1001 : Option;GLAccountNo@1000 : Code[20]);
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Gen. Posting Type",GenPostingType);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE OpenFAJnlSetupFromDepBook@53(DepreciationBookCode@1001 : Code[10]);
    VAR
      DepreciationBookCard@1000 : TestPage 5610;
    BEGIN
      DepreciationBookCard.OPENVIEW;
      DepreciationBookCard.FILTER.SETFILTER(Code,DepreciationBookCode);
      DepreciationBookCard."Page FA Journal Setup".INVOKE;
    END;

    LOCAL PROCEDURE PostDepreciationWithDocumentNo@9(DepreciationBookCode@1004 : Code[10]);
    VAR
      FAJournalLine@1005 : Record 5621;
      FAJournalSetup@1003 : Record 5605;
      FAJournalBatch@1002 : Record 5620;
    BEGIN
      FAJournalSetup.GET(DepreciationBookCode,'');
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalSetup."FA Jnl. Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalSetup."FA Jnl. Batch Name");
      FAJournalLine.FINDFIRST;

      FAJournalBatch.GET(FAJournalLine."Journal Template Name",FAJournalLine."Journal Batch Name");
      FAJournalBatch.VALIDATE("No. Series",'');
      FAJournalBatch.MODIFY(TRUE);

      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE RunCalculateDepreciation@3(FixedAssetNo@1001 : Code[20];DepreciationBookCode@1003 : Code[10]);
    VAR
      FixedAsset@1002 : Record 5600;
      CalculateDepreciation@1000 : Report 5692;
    BEGIN
      CLEAR(CalculateDepreciation);
      FixedAsset.SETRANGE("No.",FixedAssetNo);

      CalculateDepreciation.SETTABLEVIEW(FixedAsset);
      CalculateDepreciation.InitializeRequest(
        DepreciationBookCode,CALCDATE('<1D>',WORKDATE),FALSE,0,CALCDATE('<1D>',WORKDATE),FixedAssetNo,FixedAsset.Description,FALSE);
      CalculateDepreciation.USEREQUESTPAGE(FALSE);
      CalculateDepreciation.RUN;
    END;

    LOCAL PROCEDURE RunCopyFixedAsset@68(FANo@1005 : Code[20];CopyFromFANo@1004 : Code[20];NoOfFixedAssetCopied@1003 : Integer;FirstFANo@1002 : Code[20];UseFANoSeries@1001 : Boolean);
    VAR
      CopyFixedAsset@1000 : Report 5685;
    BEGIN
      CLEAR(CopyFixedAsset);
      CopyFixedAsset.SetFANo(FANo);
      CopyFixedAsset.InitializeRequest(CopyFromFANo,NoOfFixedAssetCopied,FirstFANo,UseFANoSeries);
      CopyFixedAsset.USEREQUESTPAGE(FALSE);
      CopyFixedAsset.RUN;
    END;

    LOCAL PROCEDURE RunCreateFADepreciationBooks@52(VAR FixedAsset@1003 : Record 5600;DepreciationBookCode@1002 : Code[10];FixedAssetNo@1001 : Code[20]);
    VAR
      CreateFADepreciationBooks@1000 : Report 5689;
    BEGIN
      DepreciationBookCode2 := DepreciationBookCode;
      FixedAssetNo2 := FixedAssetNo;
      CLEAR(CreateFADepreciationBooks);
      CreateFADepreciationBooks.SETTABLEVIEW(FixedAsset);
      CreateFADepreciationBooks.RUN;
    END;

    LOCAL PROCEDURE SetupPartialIntegrationInBook@39(VAR DepreciationBook@1001 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Allow Correction of Disposal",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",FALSE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDeprTypeFAPostingTypeSetupWriteDown@81(DeprBookCode@1001 : Code[10]);
    VAR
      FAPostingTypeSetup@1000 : Record 5604;
    BEGIN
      FAPostingTypeSetup.GET(DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Write-Down");
      FAPostingTypeSetup.VALIDATE("Depreciation Type",TRUE);
      FAPostingTypeSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupAcqCostGLIntegration@67(VAR DeprBook@1000 : Record 5611;AcqCostGLIntegration@1001 : Boolean);
    BEGIN
      DeprBook.VALIDATE("G/L Integration - Acq. Cost",AcqCostGLIntegration);
      DeprBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ResetDeprTypeFAPostingTypeSetupWriteDown@90(DeprBookCode@1001 : Code[10]);
    VAR
      FAPostingTypeSetup@1000 : Record 5604;
    BEGIN
      FAPostingTypeSetup.GET(DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Write-Down");
      FAPostingTypeSetup.VALIDATE("Depreciation Type",FALSE);
      FAPostingTypeSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateIntegrationInBook@1(VAR DepreciationBook@1000 : Record 5611;Depreciation@1002 : Boolean;Disposal@1003 : Boolean;VATOnNetDisposalEntries@1001 : Boolean);
    BEGIN
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",Depreciation);
      DepreciationBook.VALIDATE("G/L Integration - Write-Down",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Appreciation",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",Disposal);
      DepreciationBook.VALIDATE("G/L Integration - Custom 1",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 2",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Maintenance",FALSE);
      DepreciationBook.VALIDATE("VAT on Net Disposal Entries",VATOnNetDisposalEntries);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAllowCorrectionInBook@27(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Allow Correction of Disposal",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@34(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
    BEGIN
      FAJournalSetup2.SETRANGE("Depreciation Book Code",LibraryFixedAsset.GetDefaultDeprBook);
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDeprBookVATNetDisposal@54(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("VAT on Net Disposal Entries",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAPostingTypeSetup@88(DepreciationBookCode@1000 : Code[10]);
    VAR
      FAPostingTypeSetup@1001 : Record 5604;
    BEGIN
      FAPostingTypeSetup.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FAPostingTypeSetup.MODIFYALL("Include in Gain/Loss Calc.",TRUE);
    END;

    LOCAL PROCEDURE VerifyAcquisitionFALedgerEntry@14(FANo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFALedgerEntry@5(FANo@1000 : Code[20];DepreciationBookCode@1001 : Code[10]);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD("Depreciation Book Code",DepreciationBookCode)
    END;

    LOCAL PROCEDURE VerifySalesFALedgerEntry@40(DocumentNo@1001 : Code[20];FANo@1000 : Code[20];FAPostingType@1003 : Option);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("Document Type",FALedgerEntry."Document Type"::Invoice);
      FALedgerEntry.SETRANGE("FA Posting Type",FAPostingType);
      FALedgerEntry.SETRANGE("Document No.",DocumentNo);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD("FA No.",FANo);
    END;

    LOCAL PROCEDURE VerifyDepreciationFALedger@6(FANo@1000 : Code[20];DepreciationBookCode@1001 : Code[10]);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntry."FA Posting Type"::Depreciation);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD("Depreciation Book Code",DepreciationBookCode)
    END;

    LOCAL PROCEDURE VerifyAmountInFALedgerEntry@16(FANo@1000 : Code[20];FALedgerEntryFAPostingType@1003 : Option;Amount@1001 : Decimal);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntryFAPostingType);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFADepreciationBook@1046(FANo@1047 : Code[20];DocumentNo@1102 : Code[20];DepreciationBookCode@1048 : Code[10]);
    VAR
      FADepreciationBook@1050 : Record 5612;
      Amount@1054 : Decimal;
    BEGIN
      Amount := GetFALedgerEntryAmount(DocumentNo,FANo);
      FADepreciationBook.SETRANGE("FA No.",FANo);
      FADepreciationBook.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.FINDFIRST;
      FADepreciationBook.CALCFIELDS("Book Value");
      FADepreciationBook.CALCFIELDS("Acquisition Cost");
      FADepreciationBook.TESTFIELD("Book Value",Amount);
      FADepreciationBook.TESTFIELD("Acquisition Cost",Amount);
    END;

    LOCAL PROCEDURE VerifyMaintenanceLedgerEntry@30(FANo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      MaintenanceLedgerEntry@1002 : Record 5625;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.FINDFIRST;
      MaintenanceLedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFALedgEntryDeprDays@87(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];ExpectedDeprDays@1002 : Integer);
    VAR
      FALedgEntry@1003 : Record 5601;
    BEGIN
      WITH FALedgEntry DO BEGIN
        SETRANGE("FA No.",FANo);
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE("FA Posting Type","FA Posting Type"::Depreciation);
        FINDFIRST;
        Assert.AreEqual(ExpectedDeprDays,"No. of Depreciation Days",WrongDeprDaysErr);
      END;
    END;

    LOCAL PROCEDURE VerifyFAJnlLineDimUseDuplicationList@89(DuplicatedDeprBookCode@1001 : Code[10];ShortcutDimValueCode@1000 : ARRAY [2] OF Code[20]);
    VAR
      DuplicatedFAJnlLine@1002 : Record 5621;
    BEGIN
      DuplicatedFAJnlLine.SETRANGE("Depreciation Book Code",DuplicatedDeprBookCode);
      DuplicatedFAJnlLine.FINDFIRST;
      Assert.AreEqual(
        ShortcutDimValueCode[1],DuplicatedFAJnlLine."Shortcut Dimension 1 Code",
        DuplicatedFAJnlLine.FIELDCAPTION("Shortcut Dimension 1 Code"));
      Assert.AreEqual(
        ShortcutDimValueCode[2],DuplicatedFAJnlLine."Shortcut Dimension 2 Code",
        DuplicatedFAJnlLine.FIELDCAPTION("Shortcut Dimension 2 Code"));
    END;

    LOCAL PROCEDURE VerifyGenJnlLineDimUseDuplicationList@98(DuplicatedDeprBookCode@1001 : Code[10];ShortcutDimValueCode@1000 : ARRAY [2] OF Code[20]);
    VAR
      GenJnlLine@1002 : Record 81;
    BEGIN
      GenJnlLine.SETRANGE("Depreciation Book Code",DuplicatedDeprBookCode);
      GenJnlLine.FINDFIRST;
      Assert.AreEqual(
        ShortcutDimValueCode[1],GenJnlLine."Shortcut Dimension 1 Code",
        GenJnlLine.FIELDCAPTION("Shortcut Dimension 1 Code"));
      Assert.AreEqual(
        ShortcutDimValueCode[2],GenJnlLine."Shortcut Dimension 2 Code",
        GenJnlLine.FIELDCAPTION("Shortcut Dimension 2 Code"));
    END;

    [RequestPageHandler]
    PROCEDURE FADepreciationBooksHandler@61(VAR CreateFADepreciationBooks@1000 : TestRequestPage 5689);
    BEGIN
      CreateFADepreciationBooks.DepreciationBook.SETVALUE(DepreciationBookCode2);
      CreateFADepreciationBooks.CopyFromFANo.SETVALUE(FixedAssetNo2);
      CreateFADepreciationBooks.OK.INVOKE;
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy Messages.
      IF CONFIRM(STRSUBSTNO(DateConfirmMessage,CALCDATE('<1D>',WORKDATE),WORKDATE)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@20(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler for the Confirmation message and always send reply as TRUE.
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandler@48(VAR CreateSumOfDigitsTable@1000 : TestRequestPage 5683);
    BEGIN
      CreateSumOfDigitsTable.NoOfYears.SETVALUE(NoOfYears); // Value is important here, No. of Years can not be greater then 200.
      CreateSumOfDigitsTable.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE FAJournalSetupGenBatchHandler@66(VAR FAJournalSetup@1000 : TestPage 5609);
    BEGIN
      FAJournalSetup."Gen. Jnl. Template Name".SETVALUE(GenJournalTemplateName);
      FAJournalSetup."Gen. Jnl. Batch Name".SETVALUE(GenJournalBatchName);
      FAJournalSetup."Gen. Jnl. Batch Name".LOOKUP;
    END;

    [PageHandler]
    PROCEDURE FAJournalSetupFABatchHandler@47(VAR FAJournalSetup@1000 : TestPage 5609);
    BEGIN
      // Set values on FA Journal Setup page and invoke Lookup on it to open FA Journal Batches page.
      FAJournalSetup."FA Jnl. Template Name".SETVALUE(FAJournalTemplateName);
      FAJournalSetup."FA Jnl. Batch Name".SETVALUE(FAJournalBatchName);
      FAJournalSetup."FA Jnl. Batch Name".LOOKUP;
    END;

    [ModalPageHandler]
    PROCEDURE GenJournalBatchesHandler@64(VAR GeneralJournalBatches@1000 : TestPage 251);
    BEGIN
      GeneralJournalBatches.Name.ASSERTEQUALS(GenJournalBatchName);
    END;

    [ModalPageHandler]
    PROCEDURE FAJournalBatchesHandler@62(VAR FAJournalBatches@1001 : TestPage 5633);
    BEGIN
      FAJournalBatches.Name.ASSERTEQUALS(FAJournalBatchName);
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset]
      Unsupported version tags:
      NA: Unable to Execute

      Test the Dimension on Fixed Asset.
       1. Test the Posting of Fixed Asset Journal with multiple lines.
       2. Test the Posting of Calculated Depreciation.
       3. Test the Posting of Sales Invoice without Integration- Disposal on Depreciation.
       4. Test the Posting of Sales Invoice with Fixed Asset.
       5. Test the Posting of Sales Order without Allow Correction of Disposal on Depreciation.
       6. Test the Posting of Sales Order with Fixed Asset.
       7. Test the Posting of Fixed Asset in FA Journal.
       8. Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
          No. of Years is equal to 0 and check Error for minimum No. of Year.
       9. Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
          No. of Years and Verify Depreciation Table Line.
      10. Create Depreciation Table with Period Length, Run create Sum of Digits Table Report with
          No. of Years is equal to 201 and check Error for maximum No. of Year.
      11. Verify program opens General Journal batch on clicking lookup on 'Gen. Jnl. Batch Name' on FA Journal Setup.
      12. Verify program populates FA Journal Batch Name list when lookup is invoked on 'FA Journal Batch Name' field
          on FA Journal Setup.
      13. Test error occurs on running Copy Fixed Asset Report with Copy From FA No. as blank.
      14. Test error occurs on running Copy Fixed Asset Report with First FA No. as blank and FA No. Series as false.
      15. Test the Copy Fixed Assets functionality with Use FA No. Series as false.
      16. Test to verify that FA Ledger entries page gets opened by invoking drill down on Fixed Asset Statistics page.
      17. Test to validate Amount on FA Depreciation Book After Post FA Journal Line.

      TFS_TS_ID = 206078
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      PostFAJournalWithMultipleLine,PostCalculateDepreciation,          141386
      PostSalesInvIntegrationError,PostSalesInvoiceWithFixedAsset,
      PostSalesOrderAllowCorrError,ProceedsOnDisposalAndGainLoss

      TFS_TS_ID = 205990
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      AcquisitionCostNoIntegration, DepreciationNoIntegration,          141546
      WriteDownNoIntegration, AppreciationNoIntegration,
      Custom1NoIntegration, Custom2NoIntegration,
      SalvageValueNoIntegration, MaintenanceNoIntegration,
      FAJournalDisposal

      TFS_TS_ID = 259684
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      CreateFADepreciationBooksError,FixedAssetInactiveTrue             129072
      FixedAssetInactiveFalse

      TFS_TS_ID = 259812
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      MinNoOfYearInDepreciationTable,NoOfYearInDepreciationTable,       129066
      MaxNoOfYearInDepreciationTable

      TFS_TS_ID = 260082
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      GenBatchNameOnFAJnlSetupLookUp                                    255710

      TFS_TS_ID = 260083
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      FABatchNameOnFAJnlSetupLookUp                                     256791

      TFS_TS_ID = 261072
      Covers Test case:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      CopyFixedAssetsWithCopyFromFANoBlankError                         129068
      CopyFixedAssetsWithFirstFANoBlankError                            129068
      CopyFixedAssetsWithFANoSeriesFalse                                129068

      TFS_TS_ID = 262759
      Covers Test case:
      -------------------------------------------------------------------------
      Test Function Name                                                TFS ID
      -------------------------------------------------------------------------
      FALedgerEntriesUsingStatistics                                    143247

      TFS_TS_ID = 288483
      Covers Test cases:
      ------------------------------------------------------------------------
      Test Function Name
      ------------------------------------------------------------------------
      FADepreciationBookAfterPostFAJournal                              277858
    }
    END.
  }
}

