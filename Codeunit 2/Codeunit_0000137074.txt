OBJECT Codeunit 137074 SCM Capacity Requirements
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibraryPlanning@1016 : Codeunit 132203;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryManufacturing@1008 : Codeunit 132202;
      LibrarySales@1023 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1004 : Codeunit 130000;
      CalendarMgt@1021 : Codeunit 99000755;
      IsInitialized@1001 : Boolean;
      WorkCenterEfficiencyError@1012 : TextConst 'ENU="Efficiency must have a value in Work Center: No.=%1. It cannot be zero or empty."';
      MachineCenterEfficiencyError@1003 : TextConst 'ENU="Efficiency must have a value in Machine Center: No.=%1. It cannot be zero or empty."';
      MachineCenterCapacityError@1005 : TextConst 'ENU="Capacity must have a value in Machine Center: No.=%1. It cannot be zero or empty."';
      WorkCenterCapacityError@1011 : TextConst 'ENU="Capacity must have a value in Work Center: No.=%1. It cannot be zero or empty."';
      MachineCenterBlockedError@1007 : TextConst 'ENU="Blocked must be equal to ''No''  in Machine Center: No.=%1. Current value is ''Yes''."';
      WorkCenterCenterBlockedError@1010 : TextConst 'ENU="Blocked must be equal to ''No''  in Work Center: No.=%1. Current value is ''Yes''."';
      GreaterEqualZeroError@1002 : TextConst 'ENU=The value must be greater than or equal to 0.';
      FirmPlannedProductionOrderCreated@1014 : TextConst 'ENU=Firm Planned Prod. Order';
      ProdOrderLineQuantityError@1015 : TextConst 'ENU=Quantity must have a value in Prod. Order Line';
      MachineCenterNoError@1017 : TextConst 'ENU=Operation %1 does not have a work center or a machine center defined';
      TopItemTotalCostErr@1018 : TextConst 'ENU="Total Cost for top item Line No. = %1 is not correct in BOM Cost Shares"';
      WorkCenterWarningErr@1019 : TextConst 'ENU="Warning for Work Center Line No. = %1 is not correct in BOM Cost Shares"';
      WorkCenterTotalCostErr@1020 : TextConst 'ENU="Total Cost for Work Center Line No. = %1 is not correct in BOM Cost Shares"';
      BOMCostShareQtyErr@1022 : TextConst 'ENU=Wrong BOM Cost Share "Qty. per Parent" value';
      BOMCostShareCapCostErr@1073 : TextConst 'ENU=Wrong BOM Cost Share "Rolled-Up Capacity Cost"  value';

    [Test]
    PROCEDURE WorkCenterLoadWithFirmPlannedProductionOrder@12();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WorkCenter@1002 : Record 99000754;
      WorkCenterLoad@1003 : TestPage 99000887;
      CapacityAvailable@1005 : Decimal;
      CapacityEfficiency@1006 : Decimal;
    BEGIN
      // Setup: Create Production Item with Routing.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Calculate Capacity values for verifying Capacity on Page - Work Center Load.
      FindWorkCenter(WorkCenter,Item."Routing No.");
      CalculateCapacity(CapacityAvailable,CapacityEfficiency,WorkCenter,ProductionOrder."Starting Date");

      // Exercise: Open Work Center page.
      OpenWorkCenterLoadPage(WorkCenterLoad,WorkCenter."No.");

      // Verify: Verify Capacity Available and Capacity Efficiency on Page - Work Center Load.
      VerifyWorkCenterLoad(WorkCenterLoad,ProductionOrder."Starting Date",CapacityAvailable,CapacityEfficiency);
    END;

    [Test]
    PROCEDURE MachineCenterWithNegativeEfficiencyError@45();
    BEGIN
      // Setup.
      Initialize;
      MachineCenterWithNegativeCapacityAndEfficiency(TRUE);  // Efficiency as True.
    END;

    [Test]
    PROCEDURE MachineCenterWithNegativeCapacityError@5();
    BEGIN
      // Setup.
      Initialize;
      MachineCenterWithNegativeCapacityAndEfficiency(FALSE);  // Efficiency as False.
    END;

    LOCAL PROCEDURE MachineCenterWithNegativeCapacityAndEfficiency@9(Efficiency@1000 : Boolean);
    VAR
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1007 : Record 99000758;
      MachineCenterCard@1008 : TestPage 99000760;
    BEGIN
      // Create Work Center and Machine Center.
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      OpenMachineCenterCard(MachineCenterCard,MachineCenter."No.");

      // Exercise: Update Efficiency and Capacity with negative value on Machine Center Card Page. Use page because Efficiency and Capacity Field Property Min Value defined as 0.
      IF Efficiency THEN
        ASSERTERROR MachineCenterCard.Efficiency.SETVALUE(-LibraryRandom.RandDec(10,2))
      ELSE
        ASSERTERROR MachineCenterCard.Capacity.SETVALUE(-LibraryRandom.RandDec(10,2));

      // Verify: Verify Error message when updating negative value.
      Assert.ExpectedError(GreaterEqualZeroError);
    END;

    [Test]
    PROCEDURE MachineCenterWithZeroCapacityAndCalculateMachineCenterCalendarError@13();
    VAR
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1009 : Record 99000758;
    BEGIN
      // Setup: Create Work Center. Create Machine Center with Zero Capacity.
      Initialize;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",0);  // Capacity as 0 required.

      // Exercise: Calculate Machine Center Calendar.
      ASSERTERROR LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // Verify: Verify Error message for Machine Center Capacity zero.
      Assert.ExpectedError(STRSUBSTNO(MachineCenterCapacityError,MachineCenter."No."));
    END;

    [Test]
    PROCEDURE MachineCenterWithZeroEfficiencyAndCalculateMachineCenterCalendarError@19();
    VAR
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1009 : Record 99000758;
    BEGIN
      // Setup: Create Work Center. Create Machine Center with Zero Efficiency.
      Initialize;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(100,2));
      UpdateMachineCenterWithZeroEfficiency(MachineCenter);

      // Exercise: Calculate Machine Center Calendar.
      ASSERTERROR LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // Verify: Verify Error message for Machine Center Efficiency zero.
      Assert.ExpectedError(STRSUBSTNO(MachineCenterEfficiencyError,MachineCenter."No."));
    END;

    [Test]
    PROCEDURE WorkCenterWithZeroCapacityAndCalculateWorkCenterCalendarError@46();
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      // Setup: Create Work Center with Zero Capacity.
      Initialize;
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      UpdateWorkCenterWithZeroCapacity(WorkCenter);

      // Exercise: Calculate Work Center Calendar.
      ASSERTERROR LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // Verify: Verify Error message for Work Center Capacity zero.
      Assert.ExpectedError(STRSUBSTNO(WorkCenterCapacityError,WorkCenter."No."));
    END;

    [Test]
    PROCEDURE WorkCenterWithZeroEfficiencyAndCalculateWorkCenterCalendarError@68();
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      // Setup: Create Work Center with Zero Efficiency.
      Initialize;
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      UpdateWorkCenterWithZeroEfficiency(WorkCenter);

      // Exercise: Calculate Work Center Calendar.
      ASSERTERROR LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // Verify: Verify Error message for Work Center Efficiency zero.
      Assert.ExpectedError(STRSUBSTNO(WorkCenterEfficiencyError,WorkCenter."No."));
    END;

    [Test]
    PROCEDURE WorkCenterWithNegativeEfficiencyError@4();
    BEGIN
      // Setup.
      Initialize;
      WorkCenterWithNegativeCapacityAndEfficiency(TRUE);  // Efficiency as True.
    END;

    [Test]
    PROCEDURE WorkCenterWithNegativeCapacityError@15();
    BEGIN
      // Setup.
      Initialize;
      WorkCenterWithNegativeCapacityAndEfficiency(FALSE);  // Efficiency as False.
    END;

    LOCAL PROCEDURE WorkCenterWithNegativeCapacityAndEfficiency@20(Efficiency@1000 : Boolean);
    VAR
      WorkCenter@1002 : Record 99000754;
      WorkCenterCard@1007 : TestPage 99000754;
    BEGIN
      // Create Work Center.
      CreateWorkCenter(WorkCenter);
      OpenWorkCenterCard(WorkCenterCard,WorkCenter."No.");

      // Exercise: Update Efficiency and Capacity with negative value on Work Center Card Page. Use page because Efficiency and Capacity Field Property Min Value defined as 0.
      IF Efficiency THEN
        ASSERTERROR WorkCenterCard.Efficiency.SETVALUE(-LibraryRandom.RandDec(10,2))
      ELSE
        ASSERTERROR WorkCenterCard.Capacity.SETVALUE(-LibraryRandom.RandDec(10,2));

      // Verify: Verify Error message when updating negative value.
      Assert.ExpectedError(GreaterEqualZeroError);
    END;

    [Test]
    PROCEDURE RoutingWithBlockedMachineCenterError@10();
    VAR
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1009 : Record 99000758;
      RoutingHeader@1000 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
    BEGIN
      // Setup: Create Work Center and Create Blocked Machine Center. Create Routing Header.
      Initialize;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(100,2));
      UpdateMachineCenterBlocked(MachineCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // Exercise: Create Routing line with Blocked Machine Center.
      ASSERTERROR CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Machine Center",MachineCenter."No.",FALSE);

      // Verify: Verify Error message for Blocked Machine Center.
      Assert.ExpectedError(STRSUBSTNO(MachineCenterBlockedError,MachineCenter."No."));
    END;

    [Test]
    PROCEDURE RoutingWithBlockedWorkCenterError@34();
    VAR
      WorkCenter@1002 : Record 99000754;
      RoutingHeader@1000 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
    BEGIN
      // Setup: Create Blocked Work Center. Create Routing Header.
      Initialize;
      CreateWorkCenter(WorkCenter);
      UpdateWorkCenterBlocked(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // Exercise: Create Routing line with Blocked Work Center.
      ASSERTERROR CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Work Center",WorkCenter."No.",FALSE);

      // Verify: Verify Error message for Blocked Work Center.
      Assert.ExpectedError(STRSUBSTNO(WorkCenterCenterBlockedError,WorkCenter."No."));
    END;

    [Test]
    [HandlerFunctions(CalculateStandardCostMenuHandler)]
    PROCEDURE CalculateStandardCostForItemWithRouting@11();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      RoutingLine@1006 : Record 99000764;
      ProductionBOMLine@1009 : Record 99000772;
      CalculateStandardCost@1002 : Codeunit 5812;
      StandardCost@1004 : Decimal;
    BEGIN
      // Setup: Create Production Item with Routing. Update Costing Method as Standard on Items.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      FindProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      ChildItem.GET(ProductionBOMLine."No.");
      UpdateStandardCostingMethodOnItem(Item);
      UpdateStandardCostingMethodOnItem(ChildItem);

      // Update Unit Cost Per on Routing Line and update Unit Cost Calculation on Work Center.
      UpdateUnitCostPerOnRoutingLineAndReCertify(RoutingLine,Item."Routing No.");
      UpdateUnitCostCalculationOnWorkCenter(RoutingLine."No.");

      // Calculation of Standard Cost for verification.
      StandardCost := RoutingLine."Unit Cost per" + ChildItem."Standard Cost" * ProductionBOMLine."Quantity per";

      // Exercise: Calculate Standard Cost.
      CalculateStandardCost.CalcItem(Item."No.",FALSE);  // Use Assembly List - False.

      // Verify: Verify New Standard Cost on Item record updated after Calculate Standard Cost.
      Item.GET(Item."No.");
      Item.TESTFIELD("Standard Cost",StandardCost);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ProdOrderRoutingLineWithMoveAndWaitTime@17();
    VAR
      Item@1005 : Record 27;
      RoutingLine@1004 : Record 99000764;
      SalesHeader@1007 : Record 36;
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      // Setup: Create Production Item with Routing and Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateSalesOrder(SalesHeader,Item."No.");

      // Exercise: Create Firm Planned Production Order from Sales Order.
      CreateFirmPlannedProductionOrderFromSalesOrder(SalesHeader);

      // Verify: Verify Move Time and Wait Time on Production Order Routing Line.
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");
      VerifyOperationsTimeOnProdOrderRoutingLine(ProdOrderLine."Prod. Order No.",Item."Routing No.",RoutingLine.Type::"Work Center");
      VerifyOperationsTimeOnProdOrderRoutingLine(
        ProdOrderLine."Prod. Order No.",Item."Routing No.",RoutingLine.Type::"Machine Center");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ProdOrderRoutingLineWithStartingDateAndTimeForFirmPlannedProdOrderFromSalesOrder@25();
    BEGIN
      // Setup.
      Initialize;
      ProdOrderRoutingLineWithStartingDateAndTime(TRUE);  // Firm Planned Prod Order From Sales Order as True.
    END;

    [Test]
    PROCEDURE ProdOrderRoutingLineWithStartingDateAndTimeForFirmPlannedProdOrder@26();
    BEGIN
      // Setup.
      Initialize;
      ProdOrderRoutingLineWithStartingDateAndTime(FALSE);  // Firm Planned Prod Order From Sales Order as False.
    END;

    LOCAL PROCEDURE ProdOrderRoutingLineWithStartingDateAndTime@21(FirmPlannedProdOrderFromSalesOrder@1000 : Boolean);
    VAR
      RoutingLine@1004 : Record 99000764;
      Item@1005 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ProdOrderLine@1007 : Record 5406;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Create Production Item with Routing and Firm Planned Production Order.
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      IF FirmPlannedProdOrderFromSalesOrder THEN BEGIN
        CreateSalesOrder(SalesHeader,Item."No.");
        CreateFirmPlannedProductionOrderFromSalesOrder(SalesHeader);
      END ELSE
        CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");

      // Exercise: Update Starting Date and Starting Time on Production Order Line different from previous value.
      UpdateStartingDateAndTimeOnProdOrderLine(ProdOrderLine);

      // Verify: Verify Starting Date and Starting Time on Production Order Routing Line.
      VerifyStartingDateAndTimeOnProdOrderRoutingLine(ProdOrderLine,Item."Routing No.",RoutingLine.Type::"Machine Center");
    END;

    [Test]
    PROCEDURE FirmPlannedProductionOrderWithoutCalculateLineZeroQuantityError@23();
    VAR
      Item@1005 : Record 27;
      ProductionOrder@1009 : Record 5405;
      ProdOrderLine@1011 : Record 5406;
    BEGIN
      // Setup: Create Production Item with Routing and Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Update Quantity as Zero on Production Order Line.
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");
      UpdateProdOrderLineWithZeroQuantity(ProdOrderLine);

      // Exercise: Refresh Production Order with Calculate Line - False.
      ASSERTERROR LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // Verify: Verify Error message for Zero Production Order line Quantity.
      Assert.ExpectedError(ProdOrderLineQuantityError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ProdOrderCapacityNeedWithFirmPlannedProdOrderFromSalesOrderForWorkCenter@44();
    VAR
      WorkCenter@1009 : Record 99000754;
      Item@1004 : Record 27;
      SalesHeader@1002 : Record 36;
      ProdOrderCapacityNeed@1001 : Record 5410;
      ProdOrderLine@1005 : Record 5406;
      WorkCenterLoad@1003 : TestPage 99000887;
      ProdOrderCapacityNeedPage@1000 : TestPage 99000820;
    BEGIN
      // Setup: Create Item with routing Setup and Sales Order. Create Firm Planned Production Order from Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateSalesOrder(SalesHeader,Item."No.");
      CreateFirmPlannedProductionOrderFromSalesOrder(SalesHeader);
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");

      // Open Work Center Load Page.
      FindWorkCenter(WorkCenter,Item."Routing No.");
      OpenWorkCenterLoadPage(WorkCenterLoad,WorkCenter."No.");
      FilterOnWorkCenterLoadPage(WorkCenterLoad,ProdOrderLine."Starting Date");
      ProdOrderCapacityNeedPage.TRAP;

      // Exercise: Drilldown Allocated Quantity on Work Center Load Page and Open Prod Order Capacity Need Page.
      WorkCenterLoad.MachineCenterLoadLines.AllocatedQty.DRILLDOWN;

      // Verify: Verify Allocated Time on Production Order Capacity Need Page.
      VerifyProdOrderCapacityNeed(
        ProdOrderCapacityNeedPage,ProdOrderCapacityNeed.Type::"Work Center",WorkCenter."No.",ProdOrderLine."Starting Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ProdOrderCapacityNeedWithFirmPlannedProdOrderFromSalesOrderForMachineCenter@39();
    VAR
      RoutingLine@1009 : Record 99000764;
      Item@1008 : Record 27;
      SalesHeader@1006 : Record 36;
      ProdOrderCapacityNeed@1001 : Record 5410;
      ProdOrderLine@1003 : Record 5406;
      MachineCenterLoad@1002 : TestPage 99000889;
      ProdOrderCapacityNeedPage@1000 : TestPage 99000820;
    BEGIN
      // Setup: Create Item with routing Setup and Sales Order. Create Firm Planned Production Order from Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateSalesOrder(SalesHeader,Item."No.");
      CreateFirmPlannedProductionOrderFromSalesOrder(SalesHeader);
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");

      // Open Machine Center Load page.
      FindRoutingLine(RoutingLine,Item."Routing No.",RoutingLine.Type::"Machine Center");
      OpenMachineCenterLoadPage(MachineCenterLoad,RoutingLine."No.");
      FilterOnMachineCenterLoadPage(MachineCenterLoad,ProdOrderLine."Starting Date");
      ProdOrderCapacityNeedPage.TRAP;

      // Exercise: Drilldown Allocated Quantity on Machine Center Load Page and Open Prod Order Capacity Need Page.
      MachineCenterLoad.MachineCLoadLines.AllocatedQty.DRILLDOWN;

      // Verify: Verify Allocated Time on Production Order Capacity Need Page.
      VerifyProdOrderCapacityNeed(
        ProdOrderCapacityNeedPage,ProdOrderCapacityNeed.Type::"Machine Center",RoutingLine."No.",ProdOrderLine."Starting Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ProdOrderRoutingLineWithSendAheadQuantity@38();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1005 : Record 36;
      ProductionOrder@1007 : Record 5405;
      ProdOrderRoutingLine@1009 : Record 5409;
      ProdOrderLine@1013 : Record 5406;
    BEGIN
      // Setup: Create Item with routing Setup and Sales Order. Create Firm Planned Production Order from Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateSalesOrder(SalesHeader,Item."No.");
      CreateFirmPlannedProductionOrderFromSalesOrder(SalesHeader);

      // Update Send Ahead Quantity on Routing Line.
      UpdateSendAheadQuantityOnRoutingLineAndReCertify(Item."Routing No.");
      FindFirmPlannedProdOrderLine(ProdOrderLine,Item."No.");
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");

      // Exercise: Refresh Production Order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // Verify: Verify Send Ahead Quantity on Production Order Routing Line.
      VerifySendAheadQuantityOnProdOrderRoutingLine(
        ProductionOrder."No.",Item."Routing No.",ProdOrderRoutingLine.Type::"Machine Center");
      VerifySendAheadQuantityOnProdOrderRoutingLine(ProductionOrder."No.",Item."Routing No.",ProdOrderRoutingLine.Type::"Work Center");
    END;

    [Test]
    PROCEDURE PlanningRoutingLineWithOperationsTimeAndCalcRegenPlan@35();
    VAR
      RoutingLine@1003 : Record 99000764;
      Item@1004 : Record 27;
      SalesHeader@1006 : Record 36;
    BEGIN
      // Setup: Create Item with routing Setup and Reorder Policy as Lot For Lot. Create Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      UpdateLotForLotReorderingPolicyOnItem(Item);
      CreateSalesOrder(SalesHeader,Item."No.");

      // Exercise: Calculate Plan for Planning Worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Move Time and Wait Time on Planning Routing Line.
      VerifyOperationsTimeOnPlanningRoutingLine(Item."Routing No.",RoutingLine.Type::"Work Center");
      VerifyOperationsTimeOnPlanningRoutingLine(Item."Routing No.",RoutingLine.Type::"Machine Center");
    END;

    [Test]
    PROCEDURE PlanningRoutingLineWithSendAheadQuantityAndCalcRegenPlan@32();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      PlanningRoutingLine@1002 : Record 99000830;
    BEGIN
      // Setup: Create Item with routing Setup and Reorder Policy as Lot For Lot. Update Send Ahead Quantity on Routing line and Create Sales Order.
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      UpdateLotForLotReorderingPolicyOnItem(Item);

      UpdateSendAheadQuantityOnRoutingLineAndReCertify(Item."Routing No.");
      CreateSalesOrder(SalesHeader,Item."No.");

      // Exercise: Calculate Plan for Planning Worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Send Ahead Quantity on Planning Routing Line.
      VerifySendAheadQuantityOnPlanningRoutingLine(Item."Routing No.",PlanningRoutingLine.Type::"Work Center");
      VerifySendAheadQuantityOnPlanningRoutingLine(Item."Routing No.",PlanningRoutingLine.Type::"Machine Center");
    END;

    [Test]
    PROCEDURE RoutingWithoutMachineCenterError@51();
    VAR
      RoutingHeader@1000 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
    BEGIN
      // Setup: Create Routing Header, Routing Line.
      Initialize;
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Machine Center",'',FALSE);  // Machine Center No. should be empty.

      // Exercise: Update Routing Status to Certified.
      ASSERTERROR UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      // Verify: Verify Machine Center No. blank error when change Status of Routing.
      Assert.ExpectedError(STRSUBSTNO(MachineCenterNoError,RoutingLine."Operation No."));
    END;

    [Test]
    [HandlerFunctions(CalculateStandardCostMenuHandler,BOMCostSharesPageHandler)]
    PROCEDURE RunBOMCostSharesForItemWithUnitCostCalcuWorkCenterOnRtngLine@52();
    VAR
      CalculateStandardCost@1001 : Codeunit 5812;
      Item@1000 : Record 27;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      // Setup: Create Production Item with Routing without filling Setup Time/Run Time/Wait Time/Move Time.
      Initialize;
      CreateProductionItemWithoutRoutingTime(Item);

      // Update Unit Cost Per on Routing Line and update Unit Cost Calculation on Work Center.
      UpdateUnitCostPerOnRoutingLineAndReCertify(RoutingLine,Item."Routing No.");
      UpdateUnitCostCalculationOnWorkCenter(RoutingLine."No.");

      // Exercise: Calculate Standard Cost.
      CalculateStandardCost.CalcItem(Item."No.",FALSE);  // Use Assembly List - False.

      Item.GET(Item."No.");
      LibraryVariableStorage.Enqueue(Item."No.");
      LibraryVariableStorage.Enqueue(RoutingLine."Routing No.");
      LibraryVariableStorage.Enqueue('');

      RunBOMCostSharesPage(Item);

      // Verify: Cost fields on BOM Cost Shares page: In BOMCostSharesPageHandler.
    END;

    [Test]
    PROCEDURE ModifyOperationDateOnProdRoutingLine@67();
    VAR
      Item@1001 : Record 27;
      RoutingLine@1004 : Record 99000764;
      ProdOrder@1006 : Record 5405;
      MachineCenter@1003 : Record 99000758;
      ProdOrderRoutingLine@1000 : Record 5409;
      StartingDateTime@1002 : DateTime;
    BEGIN
      // Setup: Create Production Item with Routing, create and refresh Firm Planned Production Order.
      CreateProductionItemWithRoutingSetup(Item,FALSE);
      CreateAndRefreshFirmPlannedProductionOrder(ProdOrder,Item."No.",LibraryRandom.RandIntInRange(5,100));
      FindRoutingLine(RoutingLine,ProdOrder."Routing No.",RoutingLine.Type::"Machine Center");
      MachineCenter.GET(RoutingLine."No.");

      // Exercise: Update Send-Ahead Quantity, Concurrent Capacities and Starting Date-Time on the first Prod. Order Routing Line.
      UpdateProdOrderRoutingLine(
        ProdOrderRoutingLine,ProdOrder."No.",RoutingLine.Type,RoutingLine."No.",
        ProdOrder.Quantity - LibraryRandom.RandInt(4),MachineCenter.Capacity); // Send-Ahead Quantity should be less than ProdOrder.Quantity.

      StartingDateTime :=
        ProdOrderRoutingLine."Starting Date-Time" +
        ROUND(
          (ProdOrderRoutingLine."Setup Time" + ProdOrderRoutingLine."Wait Time" + ProdOrderRoutingLine."Move Time" +
           ProdOrderRoutingLine."Run Time" * ProdOrderRoutingLine."Send-Ahead Quantity" /
           ProdOrderRoutingLine."Concurrent Capacities") *
          CalendarMgt.TimeFactor(MachineCenter."Setup Time Unit of Meas. Code"),1);

      // Verify: Verify Starting Date-Time on the second Production Order Routing Line.
      VerifyStartingDateTimeOnProdOrderRoutingLine(
        ProdOrder."Routing No.",ProdOrder."No.",RoutingLine.Type::"Work Center",StartingDateTime);
    END;

    [Test]
    [HandlerFunctions(BOMCostSharesVerifyQtyPageHandler)]
    PROCEDURE CheckBOMCostShareLineQtyWithMultipleUOM@84();
    VAR
      Item@1000 : Record 27;
      RoutingLine@1006 : Record 99000764;
      WorkCenter@1002 : Record 99000754;
      ExpectedQty@1001 : Decimal;
    BEGIN
      // Verify BOM Cost Shares "Qty. per Parent" value when multiple UOM is used
      Initialize;
      CreateProductionItemWithRoutingSetup(Item,TRUE);
      FindRoutingLine(RoutingLine,Item."Routing No.",RoutingLine.Type::"Machine Center");
      FindWorkCenter(WorkCenter,Item."Routing No.");

      ExpectedQty :=
        ROUND(
          CalcRoutingLineQtyBase(RoutingLine) /
          CalendarMgt.TimeFactor(WorkCenter."Unit of Measure Code"),
          0.0001);

      LibraryVariableStorage.Enqueue(RoutingLine."No.");
      LibraryVariableStorage.Enqueue(ExpectedQty);
      RunBOMCostSharesPage(Item);

      // Verify Quantity field on BOM Cost Shares page: In BOMCostSharesVerifyQtyPageHandler.
    END;

    [Test]
    [HandlerFunctions(CalculateStandardCostMenuHandler,BOMCostSharesPageHandler)]
    PROCEDURE BOMCostSharePageBlankItemFilter@73();
    VAR
      ItemFilter@1002 : Record 27;
      Item@1000 : Record 27;
      RoutingLine@1006 : Record 99000764;
      CalculateStandardCost@1001 : Codeunit 5812;
    BEGIN
      // [FEATURE] [BOM Cost Share]
      // [SCENARIO 377878] BOM Cost Share Page should not calculate Tree for Items without BOM and Routing
      Initialize;

      // [GIVEN] Item "X" without BOM and Routing
      CreateItem(Item,Item."Replenishment System"::Purchase);

      // [GIVEN] Item "Y" with Routing and BOM
      CreateProductionItemWithoutRoutingTime(Item);
      CalculateStandardCost.CalcItem(Item."No.",FALSE);
      FindRoutingLine(RoutingLine,Item."Routing No.",RoutingLine.Type::"Work Center");
      Item.GET(Item."No.");
      LibraryVariableStorage.Enqueue(Item."No.");
      LibraryVariableStorage.Enqueue(RoutingLine."Routing No.");
      LibraryVariableStorage.Enqueue('');

      // [WHEN] Run BOM Cost Share Page with ItemFilter blank
      ItemFilter.INIT;
      RunBOMCostSharesPage(ItemFilter);

      // [THEN] Cost fields for Item "Y" are calculated where Item "X" is not considered
      // Verify through BOMCostSharesPageHandler
    END;

    [Test]
    [HandlerFunctions(BOMCostSharesCapCostHandler)]
    PROCEDURE BOMCostShareDifferentTimeUnit@69();
    VAR
      Item@1005 : Record 27;
      RoutingNo@1006 : Code[20];
      WorkCenterNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [BOM Cost Share] [Rounding]
      // [SCENARIO 377848] BOM Cost Shares should increase rounding precision while transmission time unit
      Initialize;

      // [GIVEN] Work Center "W" with Unit of Measure Code = "Hours" and Direct Unit Cost = 10000
      WorkCenterNo := CreateWorkCenterWithDirectCost(10000);

      // [GIVEN] Routing "R" with Work Center "W" and Run time = 60 Minutes
      RoutingNo := CreateRoutingWithRunTime(WorkCenterNo,60);

      // [GIVEN] Item "I" with Routing "R"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);

      // [WHEN] Run Cost Share for Item "I"
      LibraryVariableStorage.Enqueue(WorkCenterNo);
      LibraryVariableStorage.Enqueue(10000);
      RunBOMCostSharesPage(Item);

      // [THEN] BOM Cost Share is created with Rolled-Up Capacity Cost = 10000
      // Verify in BOMCostSharesCapCostHandler
    END;

    [Test]
    PROCEDURE ConcurrentCapacitiesOnProdOrderRoutingLine@80();
    VAR
      Item@1005 : Record 27;
      RoutingLine@1004 : Record 99000764;
      ProdOrder@1003 : Record 5405;
      ProdOrderRoutingLine@1001 : Record 5409;
    BEGIN
      // [FEATURE] [Routing] [Production Order]
      // [SCENARIO 378850] Concurrent Capacities of Prod. Order Routing Line should not be blank if Capacity is greater then 1
      Initialize;

      // [GIVEN] Machine Center "M" with "Capacity" > 1 and "Concurrent Capacities" = 0
      CreateProductionItemWithRoutingSetup(Item,FALSE);

      // [GIVEN] Create and refresh Production Order
      CreateAndRefreshFirmPlannedProductionOrder(ProdOrder,Item."No.",LibraryRandom.RandIntInRange(5,100));

      // [WHEN] Set "Routing No." to "M" on Prod. Order Routing Line
      FindRoutingLine(RoutingLine,ProdOrder."Routing No.",RoutingLine.Type::"Machine Center");
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrder."No.",RoutingLine.Type,RoutingLine."No.");
      ProdOrderRoutingLine.VALIDATE("No.");

      // [THEN] Concurrent Capacity is 1
      ProdOrderRoutingLine.TESTFIELD("Concurrent Capacities",1);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      COMMIT;

      IsInitialized := TRUE
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@1(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Standard Cost",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItemWithRoutingSetup@2(VAR Item@1000 : Record 27;IsMultipleUOM@1004 : Boolean);
    VAR
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      RoutingHeader@1003 : Record 99000763;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Replenishment System"::Purchase);
      CreateRoutingSetup(RoutingHeader,IsMultipleUOM);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Item."Base Unit of Measure");
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItemWithoutRoutingTime@59(VAR Item@1000 : Record 27);
    VAR
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      RoutingHeader@1003 : Record 99000763;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Replenishment System"::Purchase);
      CreateRoutingWithoutTimeSetup(RoutingHeader);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Item."Base Unit of Measure");
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@7(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1003 : Code[20];BaseUnitOfMeasure@1000 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,1);  // Quantity per as 1.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@76(VAR RoutingHeader@1001 : Record 99000763;IsMultipleUOM@1002 : Boolean);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Machine Center",MachineCenter."No.",IsMultipleUOM);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Work Center",WorkCenter."No.",IsMultipleUOM);
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateRoutingWithoutTimeSetup@56(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingLine@1006 : Record 99000764;
      OperationNo@1002 : Code[10];
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',OperationNo,RoutingLine.Type::"Work Center",WorkCenter."No.");
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateRoutingWithRunTime@110(WorkCenterNo@1001 : Code[20];RunTime@1005 : Decimal) : Code[20];
    VAR
      RoutingHeader@1004 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      CapacityUnitOfMeasure@1002 : Record 99000780;
      OperationNo@1000 : Code[10];
    BEGIN
      CapacityUnitOfMeasure.SETRANGE(Type,CapacityUnitOfMeasure.Type::Minutes);
      CapacityUnitOfMeasure.FINDFIRST;

      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,RoutingLine.Type::"Work Center",WorkCenterNo);
      WITH RoutingLine DO BEGIN
        VALIDATE("Run Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
        VALIDATE("Run Time",RunTime);
        MODIFY(TRUE);
      END;
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      EXIT(RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateWorkCenterWithDirectCost@100(DirectCost@1002 : Decimal) : Code[20];
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      WorkCenter@1001 : Record 99000754;
    BEGIN
      CapacityUnitOfMeasure.SETRANGE(Type,CapacityUnitOfMeasure.Type::Hours);
      CapacityUnitOfMeasure.FINDFIRST;

      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      WITH WorkCenter DO BEGIN
        VALIDATE("Unit of Measure Code",CapacityUnitOfMeasure.Code);
        VALIDATE("Direct Unit Cost",DirectCost);
        MODIFY(TRUE);
      END;

      EXIT(WorkCenter."No.");
    END;

    LOCAL PROCEDURE CreateMachineCenter@71(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(100,2));
      WITH MachineCenter DO BEGIN
        VALIDATE("Setup Time",LibraryRandom.RandDec(10,2));
        VALIDATE("Wait Time",LibraryRandom.RandDec(10,2));
        VALIDATE("Move Time",LibraryRandom.RandDec(10,2));
        VALIDATE(Capacity,LibraryRandom.RandIntInRange(3,5)); // Any value except 1.
        MODIFY(TRUE);
      END;
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateRoutingLine@41(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;Type@1004 : Option;No@1002 : Code[20];IsMultipleUOM@1005 : Boolean);
    VAR
      CapacityUnitOfMeasure@1006 : Record 99000780;
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,Type,No);
      WITH RoutingLine DO BEGIN
        VALIDATE("Setup Time",LibraryRandom.RandDec(10,2));
        VALIDATE("Run Time",LibraryRandom.RandDec(10,2));
        VALIDATE("Wait Time",LibraryRandom.RandDec(10,2));
        VALIDATE("Move Time",LibraryRandom.RandDec(10,2));
        IF IsMultipleUOM THEN BEGIN
          LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::"100/Hour");
          VALIDATE("Setup Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
          LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Minutes);
          VALIDATE("Run Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
          LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Hours);
          VALIDATE("Wait Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
          LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Days);
          VALIDATE("Move Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
        END;
        MODIFY(TRUE)
      END;
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
    END;

    LOCAL PROCEDURE FindLastOperationNo@40(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrder@101(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE OpenWorkCenterLoadPage@28(VAR WorkCenterLoad@1006 : TestPage 99000887;WorkCenterNo@1000 : Code[20]);
    VAR
      WorkCenterCard@1004 : TestPage 99000754;
    BEGIN
      OpenWorkCenterCard(WorkCenterCard,WorkCenterNo);
      WorkCenterLoad.TRAP;
      WorkCenterCard."Page Work Center Load".INVOKE;
    END;

    LOCAL PROCEDURE OpenMachineCenterLoadPage@64(VAR MachineCenterLoad@1006 : TestPage 99000889;MachineCenterNo@1000 : Code[20]);
    VAR
      MachineCenterCard@1004 : TestPage 99000760;
    BEGIN
      OpenMachineCenterCard(MachineCenterCard,MachineCenterNo);
      MachineCenterLoad.TRAP;
      MachineCenterCard."Page Machine Center Load".INVOKE;
    END;

    LOCAL PROCEDURE OpenMachineCenterCard@24(VAR MachineCenterCard@1000 : TestPage 99000760;No@1001 : Code[20]);
    BEGIN
      MachineCenterCard.OPENEDIT;
      MachineCenterCard.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE OpenWorkCenterCard@33(VAR WorkCenterCard@1000 : TestPage 99000754;No@1001 : Code[20]);
    BEGIN
      WorkCenterCard.OPENEDIT;
      WorkCenterCard.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE UpdateMachineCenterBlocked@36(VAR MachineCenter@1000 : Record 99000758);
    BEGIN
      // Block Machine Center.
      MachineCenter.VALIDATE(Blocked,TRUE);
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkCenterBlocked@29(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      // Block Work Center.
      WorkCenter.VALIDATE(Blocked,TRUE);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateMachineCenterWithZeroEfficiency@42(VAR MachineCenter@1000 : Record 99000758);
    BEGIN
      MachineCenter.VALIDATE(Efficiency,0);  // Set Zero Efficiency.
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkCenterWithZeroEfficiency@14(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      WorkCenter.VALIDATE(Efficiency,0);  // Set Zero Efficiency.
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkCenterWithZeroCapacity@22(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      WorkCenter.VALIDATE(Capacity,0);  // Set Zero Capacity.
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateCapacity@8(VAR CapacityAvailable@1003 : Decimal;VAR CapacityEfficiency@1004 : Decimal;WorkCenter@1000 : Record 99000754;StartingDate@1002 : Date);
    BEGIN
      // Calculate Capacity Available and Capacity Efficiency values.
      WorkCenter.SETRANGE("Date Filter",StartingDate);
      WorkCenter.CALCFIELDS("Capacity (Effective)","Prod. Order Need (Qty.)");
      CapacityAvailable := WorkCenter."Capacity (Effective)" - WorkCenter."Prod. Order Need (Qty.)";
      IF WorkCenter."Capacity (Effective)" <> 0 THEN
        CapacityEfficiency := ROUND(WorkCenter."Prod. Order Need (Qty.)" / WorkCenter."Capacity (Effective)" * 100,0.1);  // Calculation formula taken from Page - Work Center Load Lines.
    END;

    LOCAL PROCEDURE CalcRoutingLineQtyBase@81(RoutingLine@1000 : Record 99000764) : Decimal;
    BEGIN
      WITH RoutingLine DO
        EXIT(
          "Setup Time" * CalendarMgt.TimeFactor("Setup Time Unit of Meas. Code") +
          "Run Time" * CalendarMgt.TimeFactor("Run Time Unit of Meas. Code") +
          "Wait Time" * CalendarMgt.TimeFactor("Wait Time Unit of Meas. Code") +
          "Move Time" * CalendarMgt.TimeFactor("Move Time Unit of Meas. Code"));
    END;

    LOCAL PROCEDURE FindWorkCenter@3(VAR WorkCenter@1000 : Record 99000754;RoutingNo@1002 : Code[20]);
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,RoutingLine.Type::"Work Center");
      WorkCenter.GET(RoutingLine."No.");
    END;

    LOCAL PROCEDURE FindRoutingLine@70(VAR RoutingLine@1003 : Record 99000764;RoutingNo@1002 : Code[20];Type@1000 : Option);
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE(Type,Type);
      RoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateStatusOnRoutingHeader@54(VAR RoutingHeader@1000 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStandardCostingMethodOnItem@66(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostCalculationOnWorkCenter@103(WorkCenterNo@1001 : Code[20]);
    VAR
      WorkCenter@1000 : Record 99000754;
    BEGIN
      WorkCenter.GET(WorkCenterNo);
      WorkCenter.VALIDATE("Unit Cost Calculation",WorkCenter."Unit Cost Calculation"::Units);
      WorkCenter.VALIDATE("Specific Unit Cost",TRUE);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindProductionBOMLine@96(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateUnitCostPerOnRoutingLine@120(VAR RoutingLine@1000 : Record 99000764);
    BEGIN
      RoutingLine.VALIDATE("Unit Cost per",LibraryRandom.RandDec(10,2));
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostPerOnRoutingLineAndReCertify@18(VAR RoutingLine@1000 : Record 99000764;RoutingNo@1001 : Code[20]);
    VAR
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      RoutingHeader.GET(RoutingNo);
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::New);
      FindRoutingLine(RoutingLine,RoutingNo,RoutingLine.Type::"Work Center");
      UpdateUnitCostPerOnRoutingLine(RoutingLine);
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE UpdateSendAheadQuantityOnRoutingLineAndReCertify@83(RoutingNo@1001 : Code[20]);
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1000 : Record 99000764;
    BEGIN
      RoutingHeader.GET(RoutingNo);
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::New);
      UpdateSendAheadQuantityOnRoutingLine(RoutingNo,RoutingLine.Type::"Work Center");
      UpdateSendAheadQuantityOnRoutingLine(RoutingNo,RoutingLine.Type::"Machine Center");
      UpdateStatusOnRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE UpdateSendAheadQuantityOnRoutingLine@85(RoutingNo@1001 : Code[20];Type@1003 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      RoutingLine.VALIDATE("Send-Ahead Quantity",LibraryRandom.RandDec(10,2));
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AreSameMessages@30(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE CreateSalesOrder@49(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE FindProdOrderRoutingLine@57(VAR ProdOrderRoutingLine@1000 : Record 5409;ProdOrderNo@1001 : Code[20];Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.SETRANGE(Type,Type);
      ProdOrderRoutingLine.SETRANGE("No.",No);
      ProdOrderRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFirmPlannedProdOrderLine@102(VAR ProdOrderLine@1000 : Record 5406;ItemNo@1001 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPlanningRoutingLine@58(VAR PlanningRoutingLine@1000 : Record 99000830;Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      PlanningRoutingLine.SETRANGE(Type,Type);
      PlanningRoutingLine.SETRANGE("No.",No);
      PlanningRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateStartingDateAndTimeOnProdOrderLine@37(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      ProdOrderLine.VALIDATE("Starting Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      ProdOrderLine.VALIDATE("Starting Time",TIME);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrderLineWithZeroQuantity@48(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      ProdOrderLine.VALIDATE(Quantity,0);  // Set Zero Quantity.
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrderRoutingLine@77(VAR ProdOrderRoutingLine@1003 : Record 5409;ProdOrderNo@1001 : Code[20];Type@1004 : Option;RoutingLineNo@1002 : Code[20];SendAheadQuantity@1005 : Decimal;ConcurrentCapacities@1006 : Decimal);
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo,Type,RoutingLineNo);
      WITH ProdOrderRoutingLine DO BEGIN
        VALIDATE("Send-Ahead Quantity",SendAheadQuantity);
        VALIDATE("Concurrent Capacities",ConcurrentCapacities);
        VALIDATE("Starting Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
        VALIDATE("Starting Time",080000T); // To make sure the Starting Time of the next Operation won't exceed the ending time of current working day.
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateFirmPlannedProductionOrderFromSalesOrder@78(SalesHeader@1000 : Record 36);
    VAR
      ProductionOrder@1001 : Record 5405;
      OrderType@1002 : 'ItemOrder,ProjectOrder';
    BEGIN
      LibraryVariableStorage.Enqueue(FirmPlannedProductionOrderCreated);  // Enqueue value for Message Handler.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(
        SalesHeader,ProductionOrder.Status::"Firm Planned",OrderType::ProjectOrder);
    END;

    LOCAL PROCEDURE FilterOnWorkCenterLoadPage@47(VAR WorkCenterLoad@1000 : TestPage 99000887;PeriodStart@1003 : Date);
    VAR
      PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Period';
      AmountType@1001 : 'Net Change,Balance at Date';
    BEGIN
      WorkCenterLoad.PeriodType.SETVALUE(PeriodType::Day);
      WorkCenterLoad.AmountType.SETVALUE(AmountType::"Net Change");
      WorkCenterLoad.MachineCenterLoadLines.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
    END;

    LOCAL PROCEDURE FilterOnMachineCenterLoadPage@43(VAR MachineCenterLoad@1000 : TestPage 99000889;PeriodStart@1003 : Date);
    VAR
      PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Period';
      AmountType@1001 : 'Net Change,Balance at Date';
    BEGIN
      MachineCenterLoad.PeriodType.SETVALUE(PeriodType::Day);
      MachineCenterLoad.AmountType.SETVALUE(AmountType::"Net Change");
      MachineCenterLoad.MachineCLoadLines.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
    END;

    LOCAL PROCEDURE UpdateLotForLotReorderingPolicyOnItem@106(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyWorkCenterLoad@31(WorkCenterLoad@1000 : TestPage 99000887;PeriodStart@1006 : Date;CapacityAvailable@1007 : Decimal;CapacityEfficiency@1008 : Decimal);
    BEGIN
      // Verify Work Center Load Page.
      FilterOnWorkCenterLoadPage(WorkCenterLoad,PeriodStart);
      WorkCenterLoad.MachineCenterLoadLines.CapacityAvailable.ASSERTEQUALS(CapacityAvailable);
      WorkCenterLoad.MachineCenterLoadLines.CapacityEfficiency.ASSERTEQUALS(CapacityEfficiency);
    END;

    LOCAL PROCEDURE VerifyOperationsTimeOnProdOrderRoutingLine@65(ProductionOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20];Type@1004 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrderNo,Type,RoutingLine."No.");
      ProdOrderRoutingLine.TESTFIELD("Wait Time",RoutingLine."Wait Time");
      ProdOrderRoutingLine.TESTFIELD("Move Time",RoutingLine."Move Time");
    END;

    LOCAL PROCEDURE VerifyOperationsTimeOnPlanningRoutingLine@55(RoutingNo@1002 : Code[20];Type@1004 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
      PlanningRoutingLine@1003 : Record 99000830;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindPlanningRoutingLine(PlanningRoutingLine,Type,RoutingLine."No.");
      PlanningRoutingLine.TESTFIELD("Wait Time",RoutingLine."Wait Time");
      PlanningRoutingLine.TESTFIELD("Move Time",RoutingLine."Move Time");
    END;

    LOCAL PROCEDURE VerifySendAheadQuantityOnPlanningRoutingLine@50(RoutingNo@1002 : Code[20];Type@1004 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
      PlanningRoutingLine@1003 : Record 99000830;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindPlanningRoutingLine(PlanningRoutingLine,Type,RoutingLine."No.");
      PlanningRoutingLine.TESTFIELD("Send-Ahead Quantity",RoutingLine."Send-Ahead Quantity");
    END;

    LOCAL PROCEDURE VerifySendAheadQuantityOnProdOrderRoutingLine@63(ProdOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20];Type@1004 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo,Type,RoutingLine."No.");
      ProdOrderRoutingLine.TESTFIELD("Send-Ahead Quantity",RoutingLine."Send-Ahead Quantity");
    END;

    LOCAL PROCEDURE VerifyStartingDateAndTimeOnProdOrderRoutingLine@62(ProdOrderLine@1005 : Record 5406;RoutingNo@1002 : Code[20];Type@1004 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrderLine."Prod. Order No.",Type,RoutingLine."No.");
      ProdOrderRoutingLine.TESTFIELD("Starting Time",ProdOrderLine."Starting Time");
      ProdOrderRoutingLine.TESTFIELD("Starting Date",ProdOrderLine."Starting Date");
    END;

    LOCAL PROCEDURE VerifyProdOrderCapacityNeed@61(ProdOrderCapacityNeedPage@1000 : TestPage 99000820;Type@1001 : Option;No@1002 : Code[20];StartingDate@1004 : Date);
    VAR
      ProdOrderCapacityNeed@1003 : Record 5410;
    BEGIN
      ProdOrderCapacityNeedPage.FILTER.SETFILTER(Type,FORMAT(Type));
      ProdOrderCapacityNeed.SETRANGE("Requested Only",FALSE);
      ProdOrderCapacityNeed.SETRANGE("No.",No);
      ProdOrderCapacityNeed.SETRANGE(Date,StartingDate);
      ProdOrderCapacityNeed.FINDSET;
      REPEAT
        ProdOrderCapacityNeedPage.FILTER.SETFILTER("Time Type",FORMAT(ProdOrderCapacityNeed."Time Type"));
        ProdOrderCapacityNeedPage."Allocated Time".ASSERTEQUALS(ProdOrderCapacityNeed."Allocated Time");
      UNTIL ProdOrderCapacityNeed.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyStartingDateTimeOnProdOrderRoutingLine@87(RoutingNo@1002 : Code[20];ProdOrderNo@1005 : Code[20];Type@1004 : Option;StartingDateTime@1001 : DateTime);
    VAR
      RoutingLine@1000 : Record 99000764;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      FindRoutingLine(RoutingLine,RoutingNo,Type);
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo,Type,RoutingLine."No.");
      ProdOrderRoutingLine.TESTFIELD("Starting Date-Time",StartingDateTime);
    END;

    LOCAL PROCEDURE RunBOMCostSharesPage@60(VAR Item@1000 : Record 27);
    VAR
      BOMCostShares@1001 : Page 5872;
    BEGIN
      BOMCostShares.InitItem(Item);
      BOMCostShares.RUN;
    END;

    [StrMenuHandler]
    PROCEDURE CalculateStandardCostMenuHandler@16(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Calculate Standard Cost for All Level.
      Choice := 2;
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesPageHandler@72(VAR BOMCostShares@1010 : TestPage 5872);
    VAR
      Item@1002 : Record 27;
      BOMBuffer@1001 : Record 5870;
      RoutingLine@1015 : Record 99000764;
      VariantVar1@1005 : Variant;
      VariantVar2@1003 : Variant;
      VariantVar3@1000 : Variant;
      ItemNo@1008 : Code[20];
      RoutingNo@1016 : Code[20];
      ExpWarning@1004 : Text;
    BEGIN
      LibraryVariableStorage.Dequeue(VariantVar1);
      LibraryVariableStorage.Dequeue(VariantVar2);
      LibraryVariableStorage.Dequeue(VariantVar3);

      ItemNo := VariantVar1;
      Item.GET(ItemNo);
      RoutingNo := VariantVar2;
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.FINDFIRST;
      ExpWarning := VariantVar3;

      BOMCostShares.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::Item));
      BOMCostShares.FILTER.SETFILTER("No.",ItemNo);
      BOMCostShares.FIRST;
      Assert.AreEqual(Item."Standard Cost",BOMCostShares."Total Cost".ASDECIMAL,STRSUBSTNO(TopItemTotalCostErr,ItemNo));

      BOMCostShares.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::"Work Center"));
      BOMCostShares.FILTER.SETFILTER("No.",RoutingLine."Work Center No.");
      BOMCostShares.FIRST;

      Assert.AreEqual(ExpWarning,FORMAT(BOMCostShares.HasWarning),STRSUBSTNO(WorkCenterWarningErr,RoutingLine."Work Center No."));
      Assert.AreEqual(
        RoutingLine."Unit Cost per",BOMCostShares."Total Cost".ASDECIMAL,
        STRSUBSTNO(WorkCenterTotalCostErr,RoutingLine."Work Center No."));
      BOMCostShares.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesVerifyQtyPageHandler@88(VAR BOMCostShares@1010 : TestPage 5872);
    VAR
      BOMBuffer@1001 : Record 5870;
      Variant@1005 : Variant;
      MachineCenterNo@1008 : Code[20];
      ExpectedQty@1000 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(Variant);
      MachineCenterNo := Variant;
      LibraryVariableStorage.Dequeue(Variant);
      ExpectedQty := Variant;

      BOMCostShares.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::"Machine Center"));
      BOMCostShares.FILTER.SETFILTER("No.",MachineCenterNo);
      BOMCostShares.FIRST;
      Assert.AreEqual(ExpectedQty,BOMCostShares."Qty. per Parent".ASDECIMAL,BOMCostShareQtyErr);
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesCapCostHandler@75(VAR BOMCostShares@1010 : TestPage 5872);
    VAR
      BOMBuffer@1001 : Record 5870;
      WorkCenterNo@1008 : Text;
      ExpectedCapCost@1000 : Decimal;
    BEGIN
      WorkCenterNo := LibraryVariableStorage.DequeueText;
      ExpectedCapCost := LibraryVariableStorage.DequeueDecimal;

      BOMCostShares.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::"Work Center"));
      BOMCostShares.FILTER.SETFILTER("No.",WorkCenterNo);
      BOMCostShares.FIRST;
      Assert.AreEqual(ExpectedCapCost,BOMCostShares."Rolled-up Capacity Cost".ASDECIMAL,BOMCostShareCapCostErr);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@27(Message@1001 : Text[1024]);
    VAR
      ExpectedMessage@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(Message,ExpectedMessage),Message);
    END;

    BEGIN
    {
      // [FEATURE] [Capacity] [SCM]
      Tests for Capacity Requirements:
        1. Verify Work Center Load with Firm Planned Production Order.
        2. Verify Error message when set Negative Efficiency on Machine Center.
        3. Verify Error message when set Negative Capacity on Machine Center.
        4. Verify Error message when set Capacity as Zero value on Machine Center and Calculate Machine Center Calendar.
        5. Verify Error message when set Efficiency as Zero value on Machine Center and Calculate Machine Center Calendar.
        6. Verify Error message when set Capacity as Zero value on Work Center and Calculate Work Center Calendar.
        7. Verify Error message when set Efficiency as Zero value on Work Center and Calculate Work Center Calendar.
        8. Verify Error message when set Negative Efficiency on Work Center.
        9. Verify Error message when set Negative Capacity on Work Center.
       10. Verify Error message when create Routing with Blocked Machine Center.
       11. Verify Error message when create Routing with Blocked Work Center.
       12. Verify Item Standard Cost, Item with Costing Method as Standard and Update Unit Cost Per on Routing Line, update Unit Cost Calculation on Work Center. Calculate Standard Cost for Item.
       13. Verify Move Time and Wait Time on Production Order Routing Line when create Firm Planned Production Order from Sales Order.
       14. Verify Starting Date and Starting Time on Production Order Routing Line when create Firm Planned Production Order from Sales Order and Update Starting Date and Time on Production Order Line.
       15. Verify Starting Date and Starting Time on Production Order Routing Line when create Firm Planned Production Order and Update Starting Date and Time on Production Order Line.
       16. Verify Error message for Production Order line Quantity when create Firm Planned Production Order and Update Quantity on Production Order line as Zero and Refresh Production Order without Calculate Line.
       17. Verify Allocated Time on Production Order Capacity Need Page for Work Center and create Firm Planned Production Order from Sales Order.
       18. Verify Allocated Time on Production Order Capacity Need Page for Machine Center and create Firm Planned Production Order from Sales Order.
       19. Verify Send Ahead Quantity on Production Order Routing Line when create Firm Planned Production Order from Sales Order,Update Send Ahead Quantity on Routing line and Refreash Production Order.
       20. Verify Move Time and Wait Time on Planning Routing Line with Sales Order and Calculate Plan for Planning Worksheet.
       21. Verify Send Ahead Quantity on Planning Routing Line with Sales Order. Update Send Ahead Quantity on Routing Line and Calculate Plan for Planning Worksheet.
       22. Verify Error message when Machine Center No. as blank on Routing Line.
       23. Verify BOM Cost Shares page is correct when Production Item without Routing Time setup and Unit Cost Calculation is Units in Work Center.
       24. Verify the Starting Date-Time is correct after modifying operation date of previous Prod. Routing Line with Send Ahead Quantity and Concurrent Capacities.
       25. Verify BOM Cost Shares "Qty. per Prent" value when multiple UOM is used

      Covers Test Cases : 298546 and 300396
      ----------------------------------------------------------------------------------
       Test Function                                                             TFS ID
      ----------------------------------------------------------------------------------
       WorkCenterLoadWithFirmPlannedProductionOrder                              127958
       MachineCenterWithNegativeEfficiencyError                                  127958
       MachineCenterWithNegativeCapacityError                                    127958
       MachineCenterWithZeroCapacityAndCalculateMachineCenterCalendarError       127958
       MachineCenterWithZeroEfficiencyAndCalculateMachineCenterCalendarError     127958
       WorkCenterWithZeroCapacityAndCalculateWorkCenterCalendarError             127958
       WorkCenterWithZeroEfficiencyAndCalculateWorkCenterCalendarError           127958
       WorkCenterWithNegativeEfficiencyError                                     127958
       WorkCenterWithNegativeCapacityError                                       127958
       RoutingWithBlockedMachineCenterError                                      127958
       RoutingWithBlockedWorkCenterError                                         127958

      Covers Test Cases : 298547
      -----------------------------------------------------------------------------------------------
       Test Function                                                                          TFS ID
      -----------------------------------------------------------------------------------------------
        CalculateStandardCostForItemWithRouting                                               127560
        ProdOrderRoutingLineWithMoveAndWaitTime                                               127961
        ProdOrderRoutingLineWithStartingDateAndTimeForFirmPlannedProdOrderFromSalesOrder      127961
        ProdOrderRoutingLineWithStartingDateAndTimeForFirmPlannedProdOrder                    127961
        FirmPlannedProductionOrderWithoutCalculateLineZeroQuantityError                       127961

      Covers Test Cases : 301523
      -----------------------------------------------------------------------------------------------
       Test Function                                                                          TFS ID
      -----------------------------------------------------------------------------------------------
        ProdOrderCapacityNeedWithFirmPlannedProdOrderFromSalesOrderForWorkCenter              127961
        ProdOrderCapacityNeedWithFirmPlannedProdOrderFromSalesOrderForMachineCenter           127961
        ProdOrderRoutingLineWithSendAheadQuantity                                             127961
        PlanningRoutingLineWithOperationsTimeAndCalcRegenPlan                                 127961
        PlanningRoutingLineWithSendAheadQuantityAndCalcRegenPlan                              127961

      Covers Test Cases : 302727
      -----------------------------------------------------------------------------------------------
       Test Function                                                                          TFS ID
      -----------------------------------------------------------------------------------------------
        RoutingWithoutMachineCenterError                                                      245741

      Covers Test Cases
      -----------------------------------------------------------------------------------------------
       Test Function                                                                          TFS ID
      -----------------------------------------------------------------------------------------------
        RunBOMCostSharesPageForProductionItem                                                 344032
        ModifyOperationDateOnProdRoutingLine                                                  89750

      CheckBOMCostShareLineQtyWithMultipleUOM                                                 104595
    }
    END.
  }
}

