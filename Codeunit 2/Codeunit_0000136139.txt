OBJECT Codeunit 136139 Service Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1001 : Codeunit 130509;
      LibraryService@1003 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      Amount@1010 : Decimal;
      PeriodStart@1015 : Date;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Clear the global variables.
      Amount := 0;
      CLEAR(PeriodStart);
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,GainLossGroupsMatrixHandler)]
    PROCEDURE ContractGainLossGroups@259();
    VAR
      ContractGroup@1009 : Record 5966;
      ServiceContractHeader@1002 : Record 5965;
      ContractGainLossEntry@1007 : Record 5969;
      SignServContractDoc@1006 : Codeunit 5944;
      ContractGainLossGroups@1008 : TestPage 6066;
    BEGIN
      // Test Contract Gain/Loss (Groups) Matrix after signing the Service Contract.

      // 1. Setup: Create Contract Group, Service Contract Header, Service Contract Line, update Contract Group Code on Service
      // Contract Header and sign the Service Contract.
      Initialize;
      LibraryService.CreateContractGroup(ContractGroup);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,'');
      CreateServiceContractLine(ServiceContractHeader);
      UpdateContractGroupCode(ServiceContractHeader,ContractGroup.Code);
      UpdateServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      FindContractGainLossEntry(ContractGainLossEntry,ServiceContractHeader."Contract No.");

      // Assign global variable for page handler.
      Amount := ContractGainLossEntry.Amount;
      PeriodStart := ContractGainLossEntry."Change Date";

      // 2. Exercise: Run Show Matrix from Contract Gain/Loss (Groups) page with Period Start Date and Group filter.
      ContractGainLossGroups.OPENEDIT;
      ContractGainLossGroups.PeriodStart.SETVALUE(ContractGainLossEntry."Change Date");
      ContractGainLossGroups.GroupFilter.SETVALUE(ServiceContractHeader."Contract Group Code");
      COMMIT;
      ContractGainLossGroups.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Contract Gain/Loss (Groups) Matrix performed on Contract Gain/Loss (Groups) Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,GainLossCustomerMatrixHandler)]
    PROCEDURE ContractGainLossCustomers@29();
    VAR
      Customer@1000 : Record 18;
      ShipToAddress@1001 : Record 222;
      ServiceContractHeader@1002 : Record 5965;
      ContractGainLossEntry@1007 : Record 5969;
      SignServContractDoc@1006 : Codeunit 5944;
      ContractGainLossCustomers@1008 : TestPage 6067;
    BEGIN
      // Test Contract Gain/Loss (Customers) Matrix after signing the Service Contract.

      // 1. Setup: Create Service Contract Header, create Ship to Address for Customer, update it on Service Contract Header, Service
      // Contract Line and sign the Service Contract.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateShipToAddress(ShipToAddress,Customer."No.");
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateAndUpdateShipToAddress(ServiceContractHeader,ShipToAddress.Code);
      CreateServiceContractLine(ServiceContractHeader);
      UpdateServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      FindContractGainLossEntry(ContractGainLossEntry,ServiceContractHeader."Contract No.");

      // Assign global variable for page handler.
      Amount := ContractGainLossEntry.Amount;
      PeriodStart := ContractGainLossEntry."Change Date";

      // 2. Exercise: Run Show Matrix from Contract Gain/Loss (Customers) page with Period Start date, Customer No. and Ship to Code
      // filter.
      ContractGainLossCustomers.OPENEDIT;
      ContractGainLossCustomers.PeriodStart.SETVALUE(ContractGainLossEntry."Change Date");
      ContractGainLossCustomers.CustomerNo.SETVALUE(ServiceContractHeader."Customer No.");
      ContractGainLossCustomers.ShipToCodeFilter.SETVALUE(ShipToAddress.Code);
      COMMIT;
      ContractGainLossCustomers.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Contract Gain/Loss (Customers) Matrix performed on Contract Gain/Loss (Customers) Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,ContractGainLossMatrixHandler)]
    PROCEDURE ContractGainLossReasons@90();
    VAR
      Customer@1000 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ReasonCode@1010 : Record 231;
      ContractGainLossEntry@1007 : Record 5969;
      ContractGainLossReasons@1008 : TestPage 6068;
      ServiceContract@1011 : TestPage 6050;
    BEGIN
      // Test Contract Gain/Loss Matrix after signing the Service Contract.

      // 1. Setup: Create Reason Code, Service Contract Header, Service Contract Line, update Cancel Reason Code on Service
      // Contract Header, open Service Contract page and update Status to Canceled.
      Initialize;
      LibraryService.CreateReasonCode(ReasonCode);
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractHeader);
      UpdateCancelReasonCode(ServiceContractHeader,ReasonCode.Code);
      UpdateServiceContractHeader(ServiceContractHeader);

      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.Status.SETVALUE(ServiceContractHeader.Status::Canceled);
      FindContractGainLossEntry(ContractGainLossEntry,ServiceContractHeader."Contract No.");

      // Assign global variable for page handler.
      Amount := ContractGainLossEntry.Amount;
      PeriodStart := ContractGainLossEntry."Change Date";

      // 2. Exercise: Run Show Matrix from Contract Gain/Loss (Reasons) page with Period Start date and Reason filter.
      ContractGainLossReasons.OPENEDIT;
      ContractGainLossReasons.PeriodStart.SETVALUE(ContractGainLossEntry."Change Date");
      ContractGainLossReasons.ReasonFilter.SETVALUE(ReasonCode.Code);
      COMMIT;
      ContractGainLossReasons.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Contract Gain/Loss Matrix performed on Contract Gain/Loss Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,ResponsibilityMatrixHandler)]
    PROCEDURE ContractGainLossResponsibility@52();
    VAR
      ResponsibilityCenter@1009 : Record 5714;
      ServiceContractHeader@1002 : Record 5965;
      ContractGainLossEntry@1007 : Record 5969;
      SignServContractDoc@1006 : Codeunit 5944;
      ContractGainLossRespCtr@1008 : TestPage 6069;
    BEGIN
      // Test Contract Gain/Loss (Responsibility Center) Matrix after signing the Service Contract.

      // 1. Setup: Create Responsibility Center, Service Contract Header, Service Contract Line, update Responsibility Center on
      // Service Contract Header and sign the Service Contract.
      Initialize;
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,'');
      CreateServiceContractLine(ServiceContractHeader);
      UpdateResponsibilityCenter(ServiceContractHeader,ResponsibilityCenter.Code);
      UpdateServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      FindContractGainLossEntry(ContractGainLossEntry,ServiceContractHeader."Contract No.");

      // Assign global variable for page handler.
      Amount := ContractGainLossEntry.Amount;
      PeriodStart := ContractGainLossEntry."Change Date";

      // 2. Exercise: Run Show Matrix from Contract Gain/Loss (Responsibility Center) page with Period Start Date and
      // Responsibility Center filter.
      ContractGainLossRespCtr.OPENEDIT;
      ContractGainLossRespCtr.PeriodStart.SETVALUE(ContractGainLossEntry."Change Date");
      ContractGainLossRespCtr.RespCrFilter.SETVALUE(ResponsibilityCenter.Code);
      COMMIT;
      ContractGainLossRespCtr.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Contract Gain/Loss (Responsibility Center) Matrix performed on Contract Gain/Loss
      // (Responsibility Center) Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContractTemplateListHandler,MessageHandler,GainLossContractsMatrixHandler)]
    PROCEDURE ContractGainLossContracts@50();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ContractGainLossEntry@1007 : Record 5969;
      SignServContractDoc@1006 : Codeunit 5944;
      ContractGainLossContracts@1008 : TestPage 6071;
    BEGIN
      // Test Contract Gain/Loss (Contracts) Matrix after signing the Service Contract.

      // 1. Setup: Create Service Contract Header, Service Contract Line and sign the Service Contract.
      Initialize;
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,'');
      CreateServiceContractLine(ServiceContractHeader);
      UpdateServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      FindContractGainLossEntry(ContractGainLossEntry,ServiceContractHeader."Contract No.");

      // Assign global variable for page handler.
      Amount := ContractGainLossEntry.Amount;
      PeriodStart := ContractGainLossEntry."Change Date";

      // 2. Exercise: Run Show Matrix from Contract Gain/Loss (Contracts) page with Period Start date and Contract filter.
      ContractGainLossContracts.OPENEDIT;
      ContractGainLossContracts.PeriodStart.SETVALUE(ContractGainLossEntry."Change Date");
      ContractGainLossContracts.ContractFilter.SETVALUE(ServiceContractHeader."Contract No.");
      COMMIT;
      ContractGainLossContracts.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Contract Gain/Loss (Contracts) Matrix performed on Contract Gain/Loss (Contracts) Matrix
      // page handler.
    END;

    LOCAL PROCEDURE CreateAndUpdateShipToAddress@139(VAR ServiceContractHeader@1000 : Record 5965;ShipToCode@1003 : Code[10]);
    BEGIN
      ServiceContractHeader.VALIDATE("Ship-to Code",ShipToCode);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLine@241(ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceContractLine@1000 : Record 5964;
      ServiceItem@1002 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // Use Random for Line Cost and Line Value.
      ServiceContractLine.VALIDATE("Line Cost",RANDOM(10000) + LibraryUtility.GenerateRandomFraction);
      ServiceContractLine.VALIDATE("Line Value",RANDOM(1000) + LibraryUtility.GenerateRandomFraction);
      ServiceContractLine.VALIDATE("Service Period",ServiceContractHeader."Service Period");
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindContractGainLossEntry@1(VAR ContractGainLossEntry@1000 : Record 5969;ContractNo@1001 : Code[20]);
    BEGIN
      ContractGainLossEntry.SETRANGE("Contract No.",ContractNo);
      ContractGainLossEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateCancelReasonCode@18(VAR ServiceContractHeader@1001 : Record 5965;CancelReasonCode@1000 : Code[10]);
    BEGIN
      ServiceContractHeader.VALIDATE("Cancel Reason Code",CancelReasonCode);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractGroupCode@40(VAR ServiceContractHeader@1001 : Record 5965;ContractGroupCode@1000 : Code[10]);
    BEGIN
      ServiceContractHeader.VALIDATE("Contract Group Code",ContractGroupCode);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateResponsibilityCenter@56(VAR ServiceContractHeader@1000 : Record 5965;ResponsibilityCenter@1001 : Code[10]);
    BEGIN
      ServiceContractHeader.VALIDATE("Responsibility Center",ResponsibilityCenter);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceContractHeader@247(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",ServiceContractHeader."Service Period");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@110(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ContractGainLossMatrixHandler@97(VAR ContractGainLossMatrix@1000 : TestPage 9263);
    BEGIN
      ContractGainLossMatrix.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
      ContractGainLossMatrix.TotalGainLoss.ASSERTEQUALS(Amount);
      ContractGainLossMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,'<Precision,2><Standard Format,0>'));
    END;

    [ModalPageHandler]
    PROCEDURE ContractTemplateListHandler@123(VAR ServiceContractTemplateList@1000 : TestPage 6056);
    BEGIN
      ServiceContractTemplateList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GainLossContractsMatrixHandler@219(VAR ContrGLossContrMatrix@1000 : TestPage 9267);
    BEGIN
      ContrGLossContrMatrix.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
      ContrGLossContrMatrix.TotalGainLoss.ASSERTEQUALS(Amount);
      ContrGLossContrMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,'<Precision,2><Standard Format,0>'));
    END;

    [ModalPageHandler]
    PROCEDURE GainLossCustomerMatrixHandler@57(VAR ContrGLossCustMatrix@1000 : TestPage 9261);
    BEGIN
      ContrGLossCustMatrix.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
      ContrGLossCustMatrix.TotalGainLoss.ASSERTEQUALS(Amount);
      ContrGLossCustMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,'<Precision,2><Standard Format,0>'));
    END;

    [ModalPageHandler]
    PROCEDURE GainLossGroupsMatrixHandler@17(VAR ContrGainLossGrpsMatrix@1000 : TestPage 9259);
    BEGIN
      ContrGainLossGrpsMatrix.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
      ContrGainLossGrpsMatrix.TotalGainLoss.ASSERTEQUALS(Amount);
      ContrGainLossGrpsMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,'<Precision,2><Standard Format,0>'));
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@137(Question@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ResponsibilityMatrixHandler@61(VAR ContrGLossResCtrMatrix@1000 : TestPage 9265);
    BEGIN
      ContrGLossResCtrMatrix.FILTER.SETFILTER("Period Start",FORMAT(PeriodStart));
      ContrGLossResCtrMatrix.TotalGainLoss.ASSERTEQUALS(Amount);
      ContrGLossResCtrMatrix.Field1.ASSERTEQUALS(FORMAT(Amount,0,'<Precision,2><Standard Format,0>'));
    END;

    BEGIN
    {
      // [FEATURE] [Contract Gain/Loss] [Service]
      Test for Service Matrix Management:
        1. Test Contract Gain/Loss (Groups) Matrix after signing the Service Contract.
        2. Test Contract Gain/Loss (Customers) Matrix after signing the Service Contract.
        3. Test Contract Gain/Loss Matrix after signing the Service Contract.
        4. Test Contract Gain/Loss (Responsibility Center) Matrix after signing the Service Contract.
        5. Test Contract Gain/Loss (Contracts) Matrix after signing the Service Contract.

      TFS_TS_ID = 258664
      Covers Test cases:
      -----------------------------------------
      Test Function Name                 TFS ID
      -----------------------------------------
      ContractGainLossGroups             128889
      ContractGainLossCustomers          128890
      ContractGainLossReasons            128891
      ContractGainLossResponsibility     128892
      ContractGainLossContracts          128893
    }
    END.
  }
}

