OBJECT Codeunit 136301 Job Consumption Service
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryJob@1002 : Codeunit 131920;
      LibrarySales@1003 : Codeunit 130509;
      LibraryService@1001 : Codeunit 131902;
      LibraryUtility@1009 : Codeunit 131000;
      Initialized@1000 : Boolean;
      UndoConsumptionJobError@1004 : TextConst 'ENU=You cannot undo consumption on the line because it has been already posted to Jobs.';
      QuantityConsumedErrorServTier@1008 : TextConst 'ENU="Quantity Consumed must be equal to ''0''  in %1: %2=%3, %4=%5, %6=%7. Current value is ''%8''."';
      JobBlockedError@1024 : TextConst 'ENU=%1 %2 must not be blocked with type %3.';
      UnknownError@1006 : TextConst 'ENU=Unknown error.';

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibrarySales@1000 : Codeunit 130509;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySales.SetCreditWarningsToNoWarnings;

      Initialized := TRUE;
      COMMIT
    END;

    [Test]
    PROCEDURE ServiceOrderFullJobConsumption@8();
    BEGIN
      // Covers document number TC1.1 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating entries after posting Service Order with Full Job consumption.

      ConsumeService(1);
    END;

    [Test]
    PROCEDURE ServiceOrderPartJobConsumption@1();
    BEGIN
      // Covers document number TC1.2 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating entries after posting Service Order with Partial Job consumption.

      ConsumeService(LibraryUtility.GenerateRandomFraction);
    END;

    LOCAL PROCEDURE ConsumeService@6(ConsumptionFactor@1000 : Decimal);
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // 1. Setup: Create a new Service Order with Job attached on Service Lines.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,ConsumptionFactor);

      // 2. Exercise: Save the Service Lines in temporary table and post the Service Order as Ship and Consume.
      GetServiceLines(ServiceHeader,ServiceLine);
      CopyServiceLines(ServiceLine,TempServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Check that the Job Ledger Entry, Job Planning Lines correspond to the relevant Service Line. Check that the field
      // Posted Service Shipment No. of the Job Ledger Entry is updated to show Service Shipment No.
      VerifyServiceDocPostingForJob(TempServiceLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE UndoConsumptionErrorForJob@7();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceShipmentHeader@1001 : Record 5990;
      ServiceShipmentLine@1003 : Record 5991;
    BEGIN
      // Covers document number TC1.3 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating that the system generates an error on performing Undo Consumption
      // for Service Lines that have been posted to Jobs.

      // 1. Setup: Create a new Service Order with Job attached on Service Lines. Post the Service Order as Ship and Consume.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,1);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Find Service Shipment Lines and Undo Consumption.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDFIRST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);

      // 3. Verify: Check that the application generates an error if Undo Consumption is performed for Service Lines that have been posted
      // to Jobs.
      Assert.AreEqual(STRSUBSTNO(UndoConsumptionJobError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE JobNoChangeAftrConsumption@12();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1002 : Record 5902;
      Job@1003 : Record 167;
    BEGIN
      // Covers document number TC1.4 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating that the system generates an error on changing Job No. field
      // for Service Line that has been posted to Jobs.

      // 1. Setup: Setup and post the Service Order as Ship and Consume. Create a new Job.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,LibraryUtility.GenerateRandomFraction);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      GetServiceLines(ServiceHeader,ServiceLine);

      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",ServiceLine."Bill-to Customer No.");
      Job.MODIFY(TRUE);

      // 2. Exercise: Change Job No. field.
      ASSERTERROR ServiceLine.VALIDATE("Job No.",Job."No.");

      // 3. Verify: Check that the application generates an error if Job No. field is changed for Service Line that has been
      // posted to Jobs.
      VerifyJobConsumedError(ServiceLine);
    END;

    [Test]
    PROCEDURE JobTaskNoChangeAftrConsumption@20();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1002 : Record 5902;
      JobTask@1003 : Record 1001;
      Job@1001 : Record 167;
    BEGIN
      // Covers document number TC1.4 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating that the system generates an error on changing Job Task No. field
      // for Service Line that has been posted to Jobs.

      // 1. Setup: Setup and post the Service Order as Ship and Consume. Create a new Job Task.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,LibraryUtility.GenerateRandomFraction);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      GetServiceLines(ServiceHeader,ServiceLine);
      Job.GET(ServiceLine."Job No.");
      LibraryJob.CreateJobTask(Job,JobTask);

      // 2. Exercise: Change Job Task No. field.
      ASSERTERROR ServiceLine.VALIDATE("Job Task No.",JobTask."Job Task No.");

      // 3. Verify: Check that the application generates an error if Job Task No. field is changed for Service Line that has been
      // posted to Jobs.
      VerifyJobConsumedError(ServiceLine);
    END;

    [Test]
    PROCEDURE LineTypeChangeAftrConsumption@19();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Covers document number TC1.4 - refer to TFS ID 19910.
      // Test integration of Jobs with Service Management by validating that the system generates an error on changing Job Line Type field
      // for Service Line that has been posted to Jobs.

      // 1. Setup: Setup and post the Service Order as Ship and Consume.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,LibraryUtility.GenerateRandomFraction);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      GetServiceLines(ServiceHeader,ServiceLine);

      // 2. Exercise: Change Job Line Type field.
      ASSERTERROR ServiceLine.VALIDATE("Job Line Type",ServiceLine."Job Line Type"::" ");

      // 3. Verify: Check that the application generates an error if Job Line Type field is changed for Service Line that has been
      // posted to Jobs.
      VerifyJobConsumedError(ServiceLine);
    END;

    [Test]
    PROCEDURE BlockedJobOnServiceLineError@80();
    VAR
      Job@1000 : Record 167;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1002 : Record 5902;
    BEGIN
      // Covers document number TC-PP-JB-2 - refer to TFS ID 20892.
      // Test that it is impossible to specify Job No., assigned to a blocked job, on the Service Line.

      // 1. Setup: Create a new Job and set Blocked as All.
      Initialize;
      LibraryJob.CreateJob(Job);
      Job.VALIDATE(Blocked,Job.Blocked::All);
      Job.MODIFY(TRUE);

      // 2. Exercise: Create a new Service Order - Service Header, Service Line and try to assign the blocked Job on the Service Line.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Job."Bill-to Customer No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryJob.FindItem);
      ASSERTERROR ServiceLine.VALIDATE("Job No.",Job."No.");

      // 3. Verify: Check that the application generates an error on assignment of blocked Job to Job No. field of Service Line.
      Assert.AreEqual(STRSUBSTNO(JobBlockedError,Job.TABLECAPTION,Job."No.",Job.Blocked),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE BlankJobFieldsAfterJobChange@105();
    VAR
      ServiceHeader@1000 : Record 5900;
      Job@1001 : Record 167;
    BEGIN
      // Covers document number TC-PP-JB-3 - refer to TFS ID 20892.
      // Test that the Job Task No. field is validated correctly after the Job No. field value has been changed.

      // 1. Setup: Create a new Service Order with a new Job attached on Service Lines. Create Service Lines for G/L Account. Create one
      // more new Job.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,1);

      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",ServiceHeader."Bill-to Customer No.");
      Job.MODIFY(TRUE);

      // 2. Exercise: Change the Job No. on Service Lines as No. of new job created.
      ModifyJobNoOnServiceLines(ServiceHeader,Job."No.");

      // 3. Verify: Check that the Job Task No. and Job Line Type fields are blank after changing Job No. on Service Line.
      VerifyJobFieldsOnServiceLines(ServiceHeader);
    END;

    [Test]
    PROCEDURE BlankJobFieldsAfterJobDeletion@106();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Covers document number TC-PP-JB-3 - refer to TFS ID 20892.
      // Test that the Job Task No. field is validated correctly after the Job No. field value has been deleted.

      // 1. Setup: Create a new Service Order with Job attached on Service Lines. Create Service Lines for G/L Account.
      Initialize;
      CreateServiceOrderWithJob(ServiceHeader,1);

      // 2. Exercise: Change the Job No. on Service Lines as blank.
      ModifyJobNoOnServiceLines(ServiceHeader,'');

      // 3. Verify: Check that the Job Task No. and Job Line Type fields are blank after deleting Job No. value on Service Line.
      VerifyJobFieldsOnServiceLines(ServiceHeader);
    END;

    LOCAL PROCEDURE AttachJobTaskToServiceDoc@18(JobTask@1004 : Record 1001;VAR ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1002 : Record 5902;
      Counter@1003 : Integer;
    BEGIN
      GetServiceLines(ServiceHeader,ServiceLine);
      REPEAT
        Counter += 1;
        ServiceLine.VALIDATE("Job No.",JobTask."Job No.");
        ServiceLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
        ServiceLine.VALIDATE("Job Line Type",Counter MOD 4);  // Remainder of division by 4 ensures selection of each Job Line Type.
        ServiceLine.MODIFY(TRUE)
      UNTIL ServiceLine.NEXT = 0
    END;

    LOCAL PROCEDURE CopyServiceLines@11(VAR FromServiceLine@1000 : Record 5902;VAR ToServiceLine@1001 : Record 5902);
    BEGIN
      IF FromServiceLine.FINDSET THEN
        REPEAT
          ToServiceLine.INIT;
          ToServiceLine := FromServiceLine;
          ToServiceLine.INSERT;
        UNTIL FromServiceLine.NEXT = 0
    END;

    LOCAL PROCEDURE CreateServiceOrderWithJob@5(VAR ServiceHeader@1001 : Record 5900;ConsumptionFactor@1004 : Decimal);
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1006 : Record 5902;
      Job@1000 : Record 167;
      JobTask@1007 : Record 1001;
      Customer@1003 : Record 18;
      Counter@1005 : Integer;
    BEGIN
      // Create a new Job, Service Order - Service Header, Service Item Line and Service Lines of Job Line Type as blank,
      // Schedule, Contract, Both Schedule and Contract and Type as Item and Resource.

      LibraryJob.CreateJob(Job);

      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Shipping Advice",Customer."Shipping Advice"::Partial);
      Customer.MODIFY(TRUE);
      Job.VALIDATE("Bill-to Customer No.",Customer."No.");
      Job.MODIFY(TRUE);

      LibraryJob.CreateJobTask(Job,JobTask);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Job."Bill-to Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      FOR Counter := 1 TO 4 DO BEGIN
        CreateServiceLine(ServiceItemLine,ServiceLine.Type::Item,ConsumptionFactor,ServiceLine);
        CreateServiceLine(ServiceItemLine,ServiceLine.Type::Resource,ConsumptionFactor,ServiceLine);
      END;

      AttachJobTaskToServiceDoc(JobTask,ServiceHeader)
    END;

    LOCAL PROCEDURE CreateServiceLine@17(ServiceItemLine@1000 : Record 5901;Type@1007 : Integer;ConsumptionFactor@1009 : Decimal;VAR ServiceLine@1004 : Record 5902);
    VAR
      ServiceHeader@1001 : Record 5900;
      ConsumableNo@1002 : Code[20];
    BEGIN
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");

      ConsumableNo := LibraryJob.FindConsumable(LibraryJob.Service2JobConsumableType(Type));
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,ConsumableNo);

      ServiceLine.VALIDATE(Description,FORMAT(LibraryUtility.GenerateGUID));
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(10));
      ServiceLine.VALIDATE("Location Code",'');

      // Multiply by ConsumptionFactor to determine Full/Partial Qty. to Ship and Qty. to Consume.
      ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * ConsumptionFactor);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine."Qty. to Ship");
      ServiceLine.MODIFY(TRUE)
    END;

    LOCAL PROCEDURE GetServiceLines@32(ServiceHeader@1001 : Record 5900;VAR ServiceLine@1000 : Record 5902);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE ModifyJobNoOnServiceLines@112(ServiceHeader@1000 : Record 5900;JobNo@1001 : Code[20]);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      GetServiceLines(ServiceHeader,ServiceLine);
      REPEAT
        ServiceLine.VALIDATE("Job No.",JobNo);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyServiceDocPostingForJob@3(ServiceLine@1000 : Record 5902);
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
      TempJobJournalLine@1002 : TEMPORARY Record 210;
    BEGIN
      // Get the document number from the posted shipment.
      WITH ServiceLine DO
        CASE "Document Type" OF
          "Document Type"::Order:
            ServiceShipmentHeader.SETRANGE("Order No.","Document No.");
          "Document Type"::Invoice:
            ServiceShipmentHeader.SETRANGE("Order No.","Document No.");
          ELSE
            Assert.Fail(STRSUBSTNO('Unsupported service document type: %1',"Document Type"))
        END;
      Assert.AreEqual(1,ServiceShipmentHeader.COUNT,'# service shipment headers.');
      ServiceShipmentHeader.FINDFIRST;

      // Use a job journal line to verify.
      WITH TempJobJournalLine DO BEGIN
        "Job No." := ServiceLine."Job No.";
        "Job Task No." := ServiceLine."Job Task No.";
        "Document No." := ServiceShipmentHeader."No.";
        "Line Type" := ServiceLine."Job Line Type";
        Description := ServiceLine.Description;
        Quantity := ServiceLine."Qty. to Consume";
        "Unit Cost (LCY)" := ServiceLine."Unit Cost (LCY)";
        "Unit Price (LCY)" := ServiceLine."Unit Price";
        INSERT
      END;

      LibraryJob.VerifyJobJournalPosting(FALSE,TempJobJournalLine)
    END;

    LOCAL PROCEDURE VerifyJobConsumedError@10(ServiceLine@1000 : Record 5902);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(QuantityConsumedErrorServTier,ServiceLine.TABLECAPTION,ServiceLine.FIELDCAPTION("Document Type"),
          ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),ServiceLine."Document No.",
          ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No.",ServiceLine."Quantity Consumed"),
        GETLASTERRORTEXT,UnknownError);
    END;

    LOCAL PROCEDURE VerifyJobFieldsOnServiceLines@118(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      GetServiceLines(ServiceHeader,ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD("Job Task No.",'');
        ServiceLine.TESTFIELD("Job Line Type",ServiceLine."Job Line Type"::" ");
      UNTIL ServiceLine.NEXT = 0
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    BEGIN
    {
      // [FEATURE] [Service] [Job]
      Test for Jobs on Purchase Order and Service Integration:
        1.  Test integration of Jobs with Service Management by validating entries after posting Service Order with full Job consumption.
        2.  Test integration of Jobs with Service Management by validating entries after posting Service Order with partial Job
            consumption.
        3.  Test integration of Jobs with Service Management by validating that the system generates an error on performing Undo
            Consumption for Service Lines that have been posted to Jobs.
        4.  Test integration of Jobs with Service Management by validating that the system generates an error on changing
            Job related fields for Service Line that has been posted to Jobs.
        5.  Test that validation rules related to the Jobs integration are valid for the Service Line.
            a. TC-PP-JB-2 - Test that it is impossible to specify Job No., assigned to a blocked Job, on the Service Line.
            b. TC-PP-JB-3 - Test the Job Task No. and Job Line Type field after the Job No. Field has been changed.
    }
    END.
  }
}

