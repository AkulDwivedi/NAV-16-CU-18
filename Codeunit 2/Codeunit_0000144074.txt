OBJECT Codeunit 144074 TCS Form 27EQ Validations
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500003 : Record 79;
      TcsNatureOfCollection@1500017 : Record 16507;
      AssesseeCode@1500027 : Record 13727;
      NodNocHeader@1500026 : Record 13786;
      TCSSetup@1500029 : Record 16508;
      LibraryVariableStorage@1500007 : Codeunit 131004;
      LibraryReportDataset@1500006 : Codeunit 131007;
      LibrarySetupStorage@1500008 : Codeunit 131009;
      LibraryRandom@1500009 : Codeunit 130440;
      LibraryJournals@1500020 : Codeunit 131306;
      LibrarySales@1500028 : Codeunit 130509;
      LibraryUtility@1500004 : Codeunit 131000;
      LibraryERM@1500002 : Codeunit 131300;
      LibraryTCS@1500005 : Codeunit 143008;
      LibraryTDS@1500010 : Codeunit 143000;
      Assert@1500001 : Codeunit 130000;
      isInitialized@1500040 : Boolean;
      WrongInfoErr@1500025 : TextConst 'ENU=There are no records with the selected options.';
      TCANErr@1500023 : TextConst 'ENU=Select T.C.A.N. No.';
      FormEQMsg@1500022 : TextConst 'ENU=There is no change in report.';
      PRNoErr@1500021 : TextConst 'ENU=Please enter Provisional Receipt No.';
      eTCSQuarterErr@1500019 : TextConst 'ENU=Please enter Quarter.';
      eTCSFinancialYearErr@1500018 : TextConst 'ENU=Please enter Financial Year.';
      eTCSFilingDateErr@1500016 : TextConst 'ENU=Please enter Filling Date.';
      eTCSFillingErr@1500015 : TextConst '@@@="%1 = T.C.A.N No.";ENU=No records found for the given T.C.A.N. No. %1';
      ErrorTxt@1500014 : TextConst 'ENU=was not found';
      ErrorMisMatchTxt@1500013 : TextConst 'ENU=Error does not match';
      Form27EQTCANErr@1500012 : TextConst 'ENU=Select a T.C.A.N. No.';
      CorrectForm27EQQuarterErr@1500011 : TextConst 'ENU=No records were found for the given Quarter.';
      RevisedeTCSErr@1500000 : TextConst '@@@="%1 = Quarter";ENU=No records were found for %1.';
      ReportFrequencyErr@1500037 : TextConst 'ENU=Select a report frequency.';
      FinancialYearErr@1500036 : TextConst 'ENU=Select a financial year.';
      FullNameErr@1500035 : TextConst 'ENU=Enter a person name.';
      DesignationErr@1500034 : TextConst 'ENU=Enter a designation.';
      PrintDateErr@1500033 : TextConst 'ENU=Enter a printing date.';
      PartialInfoErr@1500032 : TextConst 'ENU=There are no records with the selected options.';
      eTCSErr@1500030 : TextConst 'ENU=You must print Form 27EQ before generating e TCS.';

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSReportFinancialYearValidation@1500045();
    VAR
      SalesHeader@1500000 : Record 36;
      GenJournalLine@1500003 : Record 81;
      ReportFrequency@1500004 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(2,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSReportPrintingDateValidation@1500051();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500004 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(5,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSReportDesignationValidation@1500049();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500004 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(4,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Designation is left blank
      Assert.ExpectedError(DesignationErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSReportFrequencyValidation@1500043();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500004 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(1,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSReportFullNameValidation@1500048();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500004 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(3,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Full Name is left blank
      Assert.ExpectedError(FullNameErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQForSalesDocumentWthTCSTCANValidation@1500041();
    VAR
      SalesHeader@1500001 : Record 36;
      GenJournalLine@1500004 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(6,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.Select T.C.A.N
      Assert.ExpectedError(Form27EQTCANErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyStatusUpdateOfFiledeTCSOriginalReturnsin27EQ@1500022();
    VAR
      SalesHeader@1500007 : Record 36;
      GenJournalLine@1500000 : Record 81;
      PRNNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 163768] TCS - Updating the status of filed e-tcs original returns in 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS , Update Challan Details , Printing Form 27EQ, Generate eTCS , Filing eTCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      FilingeTCS(PRNNo);

      // [THEN] Verifying Return Status
      VerifyGenerateReturnStatus(PRNNo);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyGenerationOfForm27EQWrongInfoQuaterValue@1500029();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163764] TCS -Generation of Form 27EQ with Wrong Information
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q5,FALSE);

      // [THEN] Expected Error has been thrown i.e.There are no records with the selected options.
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyGenerationOfForm27EQWrongFinancialYear@1500024();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163764] TCS -Generation of Form 27EQ with Wrong Information
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(8,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.There are no records with the selected options.
      Assert.ExpectedError(WrongInfoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyGenerationOfForm27EQWrongQuater@1500023();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163764] TCS -Generation of Form 27EQ with Wrong Information
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q2,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.There are no records with the selected options.
      Assert.ExpectedError(WrongInfoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE VerifyGenerationOfeTCSAfterForm27EQ@1500028();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163766] TCS - Generation of eTCS with form 27B after Form 27EQ in the required format
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS , Update Challan Details , Generate Certificate , Printing Form 27EQ, Generate eTCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      GenerateCertificateNos;
      COMMIT;
      GenerateForm27EQAndeTCS;

      // [THEN] Verified Report eTCS
      VerifyeTCSIsGenerated(ReportFrequency::Q1);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE VerifyGenerationOfeTCSBeforeForm27EQ@1500004();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163765] TCS -Verify whether eTCS generated without printing Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS , Update Challan Details , Generate Certificate ,Generate eTCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      GenerateCertificateNos;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      ASSERTERROR GenerateeTCS;

      // [THEN] Expected Error has been thrown i.e.Please print Form 27EQ before generating e TCS.
      Assert.ExpectedError(eTCSErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyGenerationOfForm27EQPartialInfo@1500000();
    VAR
      GenJournalLine@1500005 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163763] TCS -Generation of Form 27EQ with Partial Information
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journals with TCS , Payment of TCS
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.There are no records with the selected options.
      Assert.ExpectedError(PartialInfoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyForm27EQforSalesDocumentWthTCS@1500018();
    VAR
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500001 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163762] TCS -Sales Order Posting with TCS Nature of collection, Payment of TCS and Generating Form 27EQ
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      VerifyTCSChallanFields(GenJournalLine."Document No.");
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Verified the report values with the values in the TCS Challan Register
      VerifyValuesOnForm27EQPreview(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE Form27EQFieldReportFrequencyValidation@1500012();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163905] TCS - Validate Report Frequency
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup
      Initialize;

      // [WHEN] Run Report Form27EQ with blank Report Frequency
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(1,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
    END;

    [Test]
    [HandlerFunctions(Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE Form27EQFieldFinancialYearValidation@1500011();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163905] TCS - Validate Financial Year
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period Setup
      Initialize;

      // [WHEN] Run Report Form27EQ with blank Financial Year
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(2,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
    END;

    [Test]
    [HandlerFunctions(Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE Form27EQFieldFullNameValidation@1500009();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163905] TCS - Validate Full Name
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period Setup
      Initialize;

      // [WHEN] Run Report Form27EQ with blank FullName
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(3,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Full Name is left blank
      Assert.ExpectedError(FullNameErr);
    END;

    [Test]
    [HandlerFunctions(Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE Form27EQFieldDesignationValidation@1500008();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163905] Validate Designation
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period Setup
      Initialize;

      // [WHEN] Run Report Form27EQ with blank Designation
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(4,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Designation is left blank
      Assert.ExpectedError(DesignationErr);
    END;

    [Test]
    [HandlerFunctions(Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE Form27EQFieldPrintingDateValidation@1500001();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163905] Validate Prinitng Date.
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period Setup
      Initialize;

      // [WHEN] Run Report Form27EQ with blank Printing Date
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(5,ReportFrequency::Q1,FALSE);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e. Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler)]
    PROCEDURE VerifyPreviewOfForm27EQonGeneralJournal@1500026();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      // [SCENARIO 163769] TCS -Check whether Form 27 EQ prints for General Journal Transaction
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;

      // [THEN] Verified the Form 27EQ report Preview
      VerifyValuesOnForm27EQPreview(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler)]
    PROCEDURE VerifyPreviewOfForm27EQonSalesOrder@1500003();
    VAR
      SalesHeader@1500000 : Record 36;
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 163769] TCS -Check whether Form 27 EQ prints for Sales Order Transaction
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;

      // [THEN] Verified the Form 27EQ report Preview
      VerifyValuesOnForm27EQPreview(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyUpdateOfFilledeTCSForMissingQuarter@1500040();
    VAR
      GenJournalLine@1500000 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500003 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163783] TCS - Check if the system is updating `Filed e-TCS' option in case of any missing Parameter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      UpdateForm27EQandeTCSFieldValues(1,ReportFrequency::Q1,TRUE);
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Verified expected error "Please Enter Quarter" when Quarter is Blank
      Assert.ExpectedError(eTCSQuarterErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation)]
    PROCEDURE VerifyGenerationOfForm27EQWrongTCAN@1500020();
    VAR
      GenJournalLine@1500002 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163764] TCS -Generation of Form 27EQ with Wrong Information
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS with TCS , Payment of TCS
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      UpdateForm27EQandeTCSFieldValues(7,ReportFrequency::Q1,FALSE);
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Expected Error has been thrown i.e.There are no records with the selected options.
      Assert.ExpectedError(WrongInfoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyUpdateOfFilledeTCSForMissingTCANNo@1500002();
    VAR
      GenJournalLine@1500002 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163783] TCS - Check if the system is updating `Filed e-TCS' option in case of any missing Parameter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      UpdateForm27EQandeTCSFieldValues(6,ReportFrequency::Q1,TRUE);
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Expected Error for blank Report T.C.A.N Location has been thrown : Select T.C.A.N No.
      Assert.ExpectedError(TCANErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyUpdateOfFilledeTCSForMissingFinancialYear@1500037();
    VAR
      GenJournalLine@1500002 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163783] TCS - Check if the system is updating `Filed e-TCS' option in case of any missing Parameter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      UpdateForm27EQandeTCSFieldValues(2,ReportFrequency::Q1,TRUE);
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Expected Error for blank Report Frequency has been thrown : Please enter Quarter
      Assert.ExpectedError(eTCSFinancialYearErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyUpdateOfFilledeTCSForMissingFilingDate@1500061();
    VAR
      GenJournalLine@1500002 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163783] TCS - Check if the system is updating `Filed e-TCS' option in case of any missing Parameter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      UpdateForm27EQandeTCSFieldValues(5,ReportFrequency::Q1,TRUE);
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Expected Error for blank Report Filing Date has been thrown : Please enter Filing Date
      Assert.ExpectedError(eTCSFilingDateErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyUpdateOfFilledeTCSForMissingProvisionRecieptNo@1500036();
    VAR
      GenJournalLine@1500002 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163783] TCS - Check if the system is updating `Filed e-TCS' option in case of any missing Parameter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post General Journal with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      UpdateForm27EQandeTCSFieldValues(9,ReportFrequency::Q1,TRUE);
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Expected Error for blank Report Provisional Receipt No. has been thrown : Please enter Provisional Receipt No.
      Assert.ExpectedError(PRNoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyNoReportisGeneratedAfterRectificationinParties@1500007();
    VAR
      SalesHeader@1500001 : Record 36;
      GenJournalLine@1500000 : Record 81;
      PRNNo@1500004 : Code[20];
      ReportFrequency@1500002 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163771] TCS -Check whether eTCS generated after filling the eTCS
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      GenerateForm27EQAndeTCS;
      FilingeTCS(PRNNo);
      CreateAndPostGeneralLinesWithPayTCS(GenJournalLine,LibraryRandom.RandDec(1000,2),
        GenJournalLine."Document Type"::Invoice);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      REPORT.RUN(REPORT::"Form 27EQ");
      VerifyValuesOnForm27EQPreview(GenJournalLine."Document No.");
      ASSERTERROR GenerateeTCS;

      // [THEN] Verified that no report is generated
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,ErrorTxt),ErrorMisMatchTxt);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,CorrectForm27EQRequestPageHandler)]
    PROCEDURE VerifyCorrectForm27EQEntriesQuarterValidationForCollector@1500035();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500002 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163775] TCS -Check whether system is allowing using "Correct 27EQ entries" option for the Quarter having no records for Collecter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details , Correct Form 27EQ Entries
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateFormCorrect27EQEntries(1,ReportFrequency::Q2);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 27EQ Entries");

      // [THEN] Expected Error has been thrown i.e. No records were found for the given Quarter.
      Assert.ExpectedError(CorrectForm27EQQuarterErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,CorrectForm27EQRequestPageHandler)]
    PROCEDURE VerifyCorrectForm27EQEntriesQuarterValidationForParty@1500038();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500002 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      // [SCENARIO 163775] TCS -Check whether system is allowing using "Correct 27EQ entries" option for the Quarter having no records for Party
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details , Correct Form 27EQ Entries
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateFormCorrect27EQEntries(2,ReportFrequency::Q2);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 27EQ Entries");

      // [THEN] Expected Error has been thrown i.e. No records were found for the given Quarter.
      Assert.ExpectedError(CorrectForm27EQQuarterErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateRevisedeTCSRequestPageHandler)]
    PROCEDURE VerifyGenerationOfRevisedeTDSWhenNoCorrections@1500044();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500002 : Record 81;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163778] TCS -Check the generation of revised form 27EQ/e-TCS when there are no corrections for the particular Quarter
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details , Generate eTCS , Generate Revised eTCS
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      GenerateForm27EQAndeTCS;
      ASSERTERROR GenerateRevisedeTCS;

      // [THEN] Expected Error has been thrown i.e. No records were found for the given Quarter.
      Assert.ExpectedError(STRSUBSTNO(RevisedeTCSErr,ReportFrequency::Q1));
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27EQRequestPageHandlerFieldValidation,UpdateChallanRequestPageHandlerFieldValidation,GenerateFileeTCSRequestPageHandler)]
    PROCEDURE VerifyFilledeTCSForQuarterWhicheTCSNotGenerated@1500034();
    VAR
      SalesHeader@1500003 : Record 36;
      GenJournalLine@1500005 : Record 81;
      PRNNo@1500002 : Code[20];
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163781] TCS - Check if system allows entering the parameters of `Filed e-TCS' option for the particular Quarter for which e-TCS has not been generated
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      REPORT.RUN(REPORT::"Form 27EQ");
      ASSERTERROR FilingeTCS(PRNNo);

      // [THEN] Verified expected error "No records found for the given T.C.A.N."
      Assert.ExpectedError(STRSUBSTNO(eTCSFillingErr,CompanyInformation."T.C.A.N. No."));
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanRequestPageHandlerFieldValidation,Form27EQRequestPageHandlerFieldValidation,GenerateeTCSRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE VerifyPreviewofForm27EQAfterChangingCompanyAndCustInfo@1500032();
    VAR
      SalesHeader@1500000 : Record 36;
      OldTCSBatchHeader@1500001 : Record 16515;
      TCSBatchHeader@1500002 : Record 16515;
      GenJournalLine@1500006 : Record 81;
      ReportFrequency@1500005 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      // [SCENARIO 163770] TCS -Check whether Form 27 EQ prints for General Journal Transaction after changing Company Information and Customer
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax Accounting Period setup , NOD/NOC Setup , TCS Nature of Collection , Assesssee Code
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS Nature of collection , Create and Post TCS Payment , Update Challan Details
      CreateAndPostSalesDocWithTCSAndPayTCS(SalesHeader,GenJournalLine,SalesHeader."Document Type"::Order);
      UpdateChallanDetailAndChallanRegister(GenJournalLine."Document No.");
      GenerateCertificateNos;
      GenerateForm27EQAndeTCS;
      FindTCSBatchHeader(TCSBatchHeader,LibraryTCS.GetCurrentFinancialYear,ReportFrequency::Q1);
      LibraryTCS.Form27EQReportFieldsValidation;
      UpdateCustomerPANStatustoPANAPPLIED(NodNocHeader."No.");
      OldTCSBatchHeader := TCSBatchHeader;
      GenerateForm27EQAndeTCS;
      FindTCSBatchHeader(TCSBatchHeader,LibraryTCS.GetCurrentFinancialYear,ReportFrequency::Q1);

      // [THEN] Verified the TCS batch header for the changes
      VerifyValuesOfTCSBatchHeaderAfterChange(OldTCSBatchHeader,TCSBatchHeader);
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      RollbackChangesMadeToDataBase;
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;
      CompanyInformation.GET;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      CompanyInformation.VALIDATE("T.C.A.N. No.",LibraryTCS.CreateTCANNo);
      CompanyInformation.MODIFY(TRUE);
      LibraryTCS.Form27EQReportFieldsValidation;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      isInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateAndPostPaymentJournalWithPayTCS@1500019(VAR GenJournalLine@1500001 : Record 81);
    VAR
      GenJournalTemplate@1500091 : Record 80;
      GenJournalBatch@1500092 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(GenJournalTemplate.Name);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",TCSSetup."TCS Account No.",
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
      PayTCS(GenJournalBatch.Name);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE UpdateTCSChallanDetails@1500052(PayTCSDocNo@1500001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(PayTCSDocNo);
      COMMIT;
      REPORT.RUN(REPORT::"Update TCS Challan Details");
    END;

    LOCAL PROCEDURE UpdateTCSRegisterDetails@1500046(PayTCSDocNo@1500001 : Code[20]);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
      UpdateTCSChallanRegister@1500002 : Report 16522;
      UpdatedTCSAmount@1500003 : Decimal;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegister.FINDFIRST;
      UpdatedTCSAmount := LibraryRandom.RandDec(100,2);
      UpdateTCSChallanRegister.SETTABLEVIEW(TCSChallanRegister);
      UpdateTCSChallanRegister.UpdateChallan(UpdatedTCSAmount,UpdatedTCSAmount,UpdatedTCSAmount,TCSChallanRegister."Entry No.");
      UpdateTCSChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateTCSChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateForm27EQandeTCSFieldValues@1500010(FieldNumber@1500000 : Integer;Quater@1500001 : ' ,Q1,Q2,Q3,Q4';FileeTCS@1170000008 : Boolean) : Code[20];
    VAR
      FinancialYear@1500009 : Code[10];
      TCANNo@1500008 : Code[10];
      PRNNo@1500006 : Code[20];
      FullName@1500005 : Text;
      Designation@1500004 : Text;
      ReportFrequency@1500003 : ' ,Q1,Q2,Q3,Q4';
      PrintingDate@1500002 : Date;
    BEGIN
      ReportFrequency := Quater;
      FinancialYear := LibraryTCS.GetCurrentFinancialYear;
      FullName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      Designation := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10);
      PrintingDate := WORKDATE;
      TCANNo := CompanyInformation."T.C.A.N. No.";
      PRNNo := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      CASE FieldNumber OF
        1:
          ReportFrequency := ReportFrequency::" ";
        2:
          FinancialYear := '';
        3:
          FullName := '';
        4:
          Designation := '';
        5:
          PrintingDate := 0D;
        6:
          TCANNo := '';
        7:
          TCANNo := LibraryTCS.CreateTCANNo;
        8:
          FinancialYear := FORMAT(DATE2DMY(CALCDATE('<1Y>',WORKDATE),3));
        9:
          PRNNo := '';
      END;
      LibraryVariableStorage.Enqueue(FinancialYear);
      LibraryVariableStorage.Enqueue(ReportFrequency);
      EnqueueValuesInUpdateForm27EQ(FileeTCS,FullName,Designation,PrintingDate,TCANNo,PRNNo);
      EXIT(PRNNo);
    END;

    LOCAL PROCEDURE UpdateFormCorrect27EQEntries@1500039(FieldNumber@1500000 : Integer;Quarter@1500001 : ' ,Q1,Q2,Q3,Q4,Q5');
    VAR
      CorrectionType@1500002 : ' ,Collector,Party';
    BEGIN
      CASE FieldNumber OF
        1:
          CorrectionType := CorrectionType::Collector;
        2:
          CorrectionType := CorrectionType::Party;
      END;
      LibraryVariableStorage.Enqueue(Quarter);
      LibraryVariableStorage.Enqueue(CorrectionType);
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500027();
    VAR
      TCSChallanRegister@1500003 : Record 16516;
      TCSEntry@1500002 : Record 16514;
      TCSBatchHeader@1500001 : Record 16515;
      Form27EQEntry@1500000 : Record 16517;
    BEGIN
      TCSChallanRegister.DELETEALL;
      Form27EQEntry.DELETEALL;
      TCSEntry.DELETEALL;
      TCSBatchHeader.DELETEALL;
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithTCSAndPayTCS@1500062(VAR SalesHeader@1500001 : Record 36;VAR GenJournalLine@1500002 : Record 81;DocumentType@1500005 : Option);
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeader."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandDec(10,0));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,0));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateAndPostPaymentJournalWithPayTCS(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyValuesOnForm27EQPreview@1500437(TCSDocNo@1170000000 : Code[20]);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",TCSDocNo);
      TCSChallanRegister.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      TCSChallanRegister.CALCFIELDS("Total TCS Amount","Total eCess Amount","Total SHE Cess Amount","Total Surcharge Amount");
      LibraryReportDataset.AssertElementWithValueExists(
        'TCS_Challan_Register__TCS_Interest_Amount_',TCSChallanRegister."TCS Interest Amount");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__Challan_No__',TCSChallanRegister."Challan No.");
      LibraryReportDataset.AssertElementWithValueExists(
        'TCS_Challan_Register__Challan_Date_',FORMAT(TCSChallanRegister."Challan Date"));
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__BSR_Code_',TCSChallanRegister."BSR Code");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__Check___DD_No__',TCSChallanRegister."Check / DD No.");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__TCS_Others_',TCSChallanRegister."TCS Others");
      LibraryReportDataset.AssertElementWithValueExists(
        'TCS_Challan_Register__Total_TCS_Amount_',TCSChallanRegister."Total TCS Amount");
      LibraryReportDataset.AssertElementWithValueExists(
        'TCS_Challan_Register__Total_Surcharge_Amount_',TCSChallanRegister."Total Surcharge Amount");
      LibraryReportDataset.AssertElementWithValueExists(
        'Total_eCess_Amount_____Total_SHE_Cess_Amount_',
        TCSChallanRegister."Total eCess Amount" + TCSChallanRegister."Total SHE Cess Amount");
    END;

    LOCAL PROCEDURE VerifyTCSChallanFields@1500006(PayTCSDocNo@1500000 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSEntry.FINDSET;
      REPEAT
        TCSEntry.TESTFIELD("Challan No.",'');
        TCSEntry.TESTFIELD("Challan Date",0D);
        TCSEntry.TESTFIELD("BSR Code",'');
        TCSEntry.TESTFIELD("Bank Name",'');
      UNTIL TCSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyeTCSIsGenerated@1500074(ReportFrequency@1500000 : Option);
    VAR
      TCSBatchHeader@1500002 : Record 16515;
    BEGIN
      FindTCSBatchHeader(TCSBatchHeader,LibraryTCS.GetCurrentFinancialYear,ReportFrequency);
      Assert.AreEqual(TRUE,TCSBatchHeader."Normal eTCS Generated",TCSBatchHeader.FIELDNAME("Normal eTCS Generated"));
    END;

    LOCAL PROCEDURE VerifyGenerateReturnStatus@1500017(PRNNo@1500004 : Code[20]);
    VAR
      TCSBatchHeader@1500002 : Record 16515;
      IncomeTaxAccPeriod@1500000 : Record 13724;
      ReportFrequency@1500001 : ' ,Q1,Q2,Q3,Q4,Q5';
    BEGIN
      IncomeTaxAccPeriod.SETRANGE("Financial Year for eTDS/TCS",LibraryTCS.GetCurrentFinancialYear);
      IncomeTaxAccPeriod.FINDFIRST;
      TCSBatchHeader.SETRANGE("Financial Year",IncomeTaxAccPeriod."Financial Year for eTDS/TCS");
      TCSBatchHeader.SETRANGE("Assessment Year",IncomeTaxAccPeriod."Assessment Year for eTDS/TCS");
      TCSBatchHeader.SETRANGE(Quarter,ReportFrequency::Q1);
      TCSBatchHeader.SETRANGE(Revised,FALSE);
      TCSBatchHeader.SETRANGE("Original RRR No.",PRNNo);
      TCSBatchHeader.SETRANGE("Previous RRR No.",'');
      TCSBatchHeader.SETRANGE("No. of Revision",0);
      TCSBatchHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLinesWithPayTCS@1500033(VAR GenJournalLine@1500007 : Record 81;InvoiceAmount@1500002 : Decimal;DocumentType@1500001 : Option);
    VAR
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"G/L Account",'',GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,InvoiceAmount);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",NodNocHeader."No.");
        VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateAndPostPaymentJournalWithPayTCS(GenJournalLine);
    END;

    LOCAL PROCEDURE GenerateCertificateNos@1500021();
    BEGIN
      COMMIT;
      REPORT.RUN(REPORT::"Generate TCS Certificate Nos.");
    END;

    LOCAL PROCEDURE UpdateCustomerPANStatustoPANAPPLIED@1500054(CustomerNo@1500002 : Code[20]);
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      WITH Customer DO BEGIN
        VALIDATE("P.A.N. Status","P.A.N. Status"::PANAPPLIED);
        VALIDATE("P.A.N. Reference No.",
          LibraryUtility.GenerateRandomCode(FIELDNO("P.A.N. Reference No."),DATABASE::Customer));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetailAndChallanRegister@1500047(DocumentNo@1500000 : Code[20]);
    BEGIN
      UpdateTCSChallanDetails(DocumentNo);
      UpdateTCSRegisterDetails(DocumentNo);
    END;

    LOCAL PROCEDURE GenerateForm27EQAndeTCS@1500030();
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      COMMIT;
      UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,FALSE);
      REPORT.RUN(REPORT::"Form 27EQ");
      GenerateeTCS;
    END;

    LOCAL PROCEDURE FindTCSBatchHeader@1500068(VAR TCSBatchHeader@1500002 : Record 16515;FinYear@1500001 : Code[6];Quarter@1500000 : Integer);
    BEGIN
      TCSBatchHeader.SETRANGE("Collector T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      TCSBatchHeader.SETRANGE("Financial Year",FinYear);
      TCSBatchHeader.SETRANGE(Quarter,Quarter);
      TCSBatchHeader.FINDLAST;
    END;

    LOCAL PROCEDURE GenerateeTCS@1500067();
    VAR
      GenerateeTCS@1500000 : TestPage 16528;
    BEGIN
      GenerateeTCS.OPENEDIT;
      GenerateeTCS.GenerateForm.SETVALUE(TRUE);
      GenerateeTCS.Action1500005.INVOKE;
    END;

    LOCAL PROCEDURE GenerateRevisedeTCS@1500056();
    VAR
      GenerateRevisedeTCS@1500000 : TestPage 16532;
    BEGIN
      GenerateRevisedeTCS.OPENEDIT;
      GenerateRevisedeTCS.GenerateForm.SETVALUE(TRUE);
      GenerateRevisedeTCS.Action1500006.INVOKE;
    END;

    [Normal]
    LOCAL PROCEDURE FilingeTCS@1500013(VAR PRNNo@1500001 : Code[20]);
    VAR
      GenerateeTCS@1500002 : TestPage 16528;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      PRNNo := UpdateForm27EQandeTCSFieldValues(0,ReportFrequency::Q1,TRUE);
      GenerateeTCS.OPENEDIT;
      GenerateeTCS.GenerateForm.SETVALUE(TRUE);
      GenerateeTCS."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE PayTCS@1500005(JournalBatchName@1500126 : Code[20]);
    VAR
      PaymentJournal@1500127 : TestPage 256;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      PaymentJournal.Action1500045.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE EnqueueValuesInUpdateForm27EQ@1500063(FileeTCS@1500001 : Boolean;FullName@1500000 : Text;Designation@1500002 : Text;PrintingDate@1500003 : Date;TCANNo@1500004 : Code[10];PRNNo@1500005 : Code[20]);
    BEGIN
      IF NOT FileeTCS THEN BEGIN
        LibraryVariableStorage.Enqueue(FullName);
        LibraryVariableStorage.Enqueue(Designation);
        LibraryVariableStorage.Enqueue(PrintingDate);
        LibraryVariableStorage.Enqueue(TCANNo);
      END ELSE BEGIN
        LibraryVariableStorage.Enqueue(PrintingDate);
        LibraryVariableStorage.Enqueue(TCANNo);
        LibraryVariableStorage.Enqueue(PRNNo);
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOfTCSBatchHeaderAfterChange@1500031(OldTCSBatchHeader@1500001 : Record 16515;TCSBatchHeader@1500000 : Record 16515);
    BEGIN
      Assert.AreEqual(OldTCSBatchHeader."Collector Address",TCSBatchHeader."Collector Address",FormEQMsg);
      Assert.AreEqual(OldTCSBatchHeader."Collector Phone No.",TCSBatchHeader."Collector Phone No.",FormEQMsg);
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500073(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    VAR
      GeneralJournalTemplateName@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateChallanRequestPageHandlerFieldValidation@1500025(VAR UpdateTCSChallan@1500113 : TestRequestPage 16520);
    VAR
      TCSDocNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TCSDocNo);
      UpdateTCSChallan.Control1500001.SETVALUE(TCSDocNo);
      UpdateTCSChallan.Control1500002.SETVALUE(FORMAT(LibraryRandom.RandInt(1000)));
      UpdateTCSChallan.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSChallan.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      UpdateTCSChallan.Control1500009.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7));
      UpdateTCSChallan.Control1500010.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSChallan.Control1500012.SETVALUE(WORKDATE);
      UpdateTCSChallan.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form27EQRequestPageHandlerFieldValidation@1500014(VAR Form27EQ@1500113 : TestRequestPage 16518);
    VAR
      FinancialYear@1500005 : Variant;
      FullName@1500004 : Variant;
      Designation@1500003 : Variant;
      ReportFrequency@1500002 : Variant;
      PrintingDate@1500001 : Variant;
      TCANNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(ReportFrequency);
      LibraryVariableStorage.Dequeue(FullName);
      LibraryVariableStorage.Dequeue(Designation);
      LibraryVariableStorage.Dequeue(PrintingDate);
      LibraryVariableStorage.Dequeue(TCANNo);
      Form27EQ.Control1500010.SETVALUE(TCANNo);
      Form27EQ.Control1500004.SETVALUE(ReportFrequency);
      Form27EQ.Control1500012.SETVALUE(FinancialYear);
      Form27EQ.Control1500002.SETVALUE(FullName);
      Form27EQ.Control1500001.SETVALUE(Designation);
      Form27EQ."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27EQ.Control1500000.SETVALUE(PrintingDate);
      Form27EQ.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27EQ.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CorrectForm27EQRequestPageHandler@1500042(VAR Correct27EQEntries@1500001 : TestRequestPage 16523);
    VAR
      ReportFrequency@1500002 : Variant;
      CorrectionType@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ReportFrequency);
      LibraryVariableStorage.Dequeue(CorrectionType);
      Correct27EQEntries.Control1500007.SETVALUE(ReportFrequency);
      Correct27EQEntries.Control1500005.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      Correct27EQEntries.Control1500002.SETVALUE(CorrectionType);
      Correct27EQEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500002 : TestRequestPage 16517);
    VAR
      IncomeTaxAccPeriod@1500001 : Record 13724;
      PartyType@1500000 : ' ,Party,Customer,Vendor';
    BEGIN
      IncomeTaxAccPeriod.SETRANGE("Financial Year for eTDS/TCS",LibraryTCS.GetCurrentFinancialYear);
      IncomeTaxAccPeriod.FINDFIRST;
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Customer);
      GenerateCertificateNos.Control1280005.SETVALUE(NodNocHeader."No.");
      GenerateCertificateNos.Control1280007.SETVALUE(TCSSetup."TCS Type");
      GenerateCertificateNos.StartDate.SETVALUE(IncomeTaxAccPeriod."Starting Date");
      GenerateCertificateNos.EndDate.SETVALUE(LibraryTCS.GetRequiredDateFromWorkDate(LibraryRandom.RandInt(1)));
      GenerateCertificateNos.ReceiptNumber.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(8,0),1,8));
      GenerateCertificateNos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateFileeTCSRequestPageHandler@1500015(VAR UpdateFilingStatus@1500000 : TestRequestPage 16525);
    VAR
      FinancialYear@1500005 : Variant;
      ReportFrequency@1500004 : Variant;
      PrintingDate@1500003 : Variant;
      TCANNo@1500002 : Variant;
      PRNNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(ReportFrequency);
      LibraryVariableStorage.Dequeue(PrintingDate);
      LibraryVariableStorage.Dequeue(TCANNo);
      LibraryVariableStorage.Dequeue(PRNNo);
      UpdateFilingStatus.Control1500009.SETVALUE(TCANNo);
      UpdateFilingStatus.Control1500001.SETVALUE(ReportFrequency);
      UpdateFilingStatus.Control1500000.SETVALUE(FinancialYear);
      UpdateFilingStatus.Control1500004.SETVALUE(PrintingDate);
      UpdateFilingStatus.Control1500006.SETVALUE(PRNNo);
      UpdateFilingStatus.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTCSRequestPageHandler@1500071(VAR GenerateeTCS@1500001 : TestRequestPage 16524);
    VAR
      FileManagement@1500003 : Codeunit 419;
      FileName@1500002 : Variant;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      FileName := FileManagement.ServerTempFileName('txt');
      GenerateeTCS.FileName.SETVALUE(FileName);
      GenerateeTCS.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      GenerateeTCS.Control1500005.SETVALUE(ReportFrequency::Q1);
      GenerateeTCS.Control1500013.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      GenerateeTCS.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTCS.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTCS.Control1500011.SETVALUE(WORKDATE);
      GenerateeTCS.Control2.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTCS.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTCS.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTCS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedeTCSRequestPageHandler@1500050(VAR GenerateRevisedeTCS@1500003 : TestRequestPage 16526);
    VAR
      FileManagement@1500002 : Codeunit 419;
      FileName@1500001 : Variant;
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      FileName := FileManagement.ServerTempFileName('txt');
      GenerateRevisedeTCS.FileName.SETVALUE(FileName);
      GenerateRevisedeTCS.Control1500011.SETVALUE(CompanyInformation."T.C.A.N. No.");
      GenerateRevisedeTCS.Control1500005.SETVALUE(ReportFrequency::Q1);
      GenerateRevisedeTCS.Control1500013.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      GenerateRevisedeTCS.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateRevisedeTCS.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateRevisedeTCS."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateRevisedeTCS.Control1500009.SETVALUE(WORKDATE);
      GenerateRevisedeTCS.Control2.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateRevisedeTCS.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateRevisedeTCS.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateRevisedeTCS.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@1500016(Question@1500001 : Text;VAR Reply@1500000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1500000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

