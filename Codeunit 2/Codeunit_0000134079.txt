OBJECT Codeunit 134079 ERM Inv Discount by Currency
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1016 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      DocumentType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      InvoiceDiscountError@1008 : TextConst 'ENU=Invoice Discount must be %1.';
      InvoiceDiscountAmount@1007 : Decimal;
      FieldError@1009 : TextConst 'ENU=%1 must be %2 in %3.';
      InvDiscountAmountInvoicing@1012 : Decimal;
      AmountInclVAT@1011 : Decimal;
      TotalInclVAT@1013 : Decimal;
      VATAmount@1014 : Decimal;
      TotalExclVAT@1015 : Decimal;
      isInitialized@1000 : Boolean;
      IsVerify@1010 : Boolean;

    [Test]
    PROCEDURE InvoiceDiscPurchaseCreditMemo@7();
    BEGIN
      // Covers documents TC_ID=5327 and 5328.
      // Check that Invoice Discount amount calculated on Purchase Credit Memo as per discount mentioned on Vendor.

      // Setup.
      Initialize;
      CreateAndVerifyInvoiceDiscForPurchase(DocumentType::"Credit Memo");
    END;

    [Test]
    PROCEDURE InvoiceDiscForPurchaseInvoice@19();
    BEGIN
      // Covers documents TC_ID=5328,5329 and 5331.
      // Check that Invoice Discount amount calculated on Purchase Invoice as per discount mentioned on Vendor.

      // Setup.
      Initialize;
      CreateAndVerifyInvoiceDiscForPurchase(DocumentType::Invoice);
    END;

    [Test]
    PROCEDURE InvoiceDiscForPurchaseOrder@27();
    BEGIN
      // Covers documents TC_ID=5328,5333, 5334 and 5339.
      // Check that Invoice Discount amount calculated on Purchase Order as per discount mentioned on Vendor.

      // Setup.
      Initialize;
      CreateAndVerifyInvoiceDiscForPurchase(DocumentType::Order);
    END;

    [Test]
    PROCEDURE InvoiceDiscForSalesCreditMemo@12();
    BEGIN
      // Covers documents TC_ID=5328, 5340 and 5348.
      // Check that Invoice Discount amount calculated on Sales Credit Memo as per discount mentioned on Customer.

      // Setup.
      Initialize;
      CreateAndVerifyInvoiceDiscForSales(DocumentType::"Credit Memo");
    END;

    [Test]
    PROCEDURE InvoiceDiscForSalesInvoice@33();
    BEGIN
      // Covers documents TC_ID=5328,5349,5350 and 5351.
      // Check that Invoice Discount amount calculated on Sales Invoice as per discount mentioned on Customer.

      // Setup.
      Initialize;
      CreateAndVerifyInvoiceDiscForSales(DocumentType::Invoice);
    END;

    LOCAL PROCEDURE CreateAndVerifyInvoiceDiscForPurchase@3(DocType@1001 : Option);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Exercise: Create Purchase Header and Line for Credit Memo, Invoice and Order and Calculate Invoice Discount for Vendor on Purchase Line.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,CreateCurrency,DocType);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);

      // Verify: Verify Invoice Discount on Purchase Line for Vendor.
      VerifyInvoiceDiscForVendor(PurchaseLine,PurchaseHeader.Amount);
    END;

    LOCAL PROCEDURE CreateAndVerifyInvoiceDiscForSales@48(DocType@1001 : Option);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Exercise: Create Sales Header and Line for Credit Memo and Invoice and Calculate Invoice Discount for Customer on Sales Line.
      CreateSalesDocument(SalesHeader,SalesLine,CreateCurrency,DocType);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS(Amount);
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);

      // Verify: Verify Invoice Discount on Sales Line for Customer.
      VerifyInvoiceDiscForCustomer(SalesLine,SalesHeader.Amount);
    END;

    [Test]
    [HandlerFunctions(GeneralSalesOrderStatisticsHandler)]
    PROCEDURE InvDiscAmountOnSalesLine@35();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1005 : Record 37;
      InvDiscAmountForLine@1003 : Decimal;
    BEGIN
      // Check Invoice Discount Amount on Sales Lines after entering Invoice Discount Amount in Sales Order Statistics window.

      // Setup: Create Sales Order and add new Sales Line.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine);
      CreateAndModifySalesLine(SalesLine2,SalesHeader,SalesLine.Quantity,SalesLine."Unit Price");

      // InvDiscountAmount is a global variable and used on Statistics page.
      // Assigning value to Invoice Discount Amount to make sure InvDiscountAmount is always less than total amount of Order.
      InvoiceDiscountAmount := SalesLine."Line Amount";
      InvDiscAmountForLine := ROUND(InvoiceDiscountAmount / 2);

      // Exercise: Open Sales Order Statistics Page and assign Invoice Discount Amount in Handler (SalesOrderStatisticsHandler).
      OpenSalesOrderStatistics(SalesHeader."No.");

      // Verify: Verify Invoice Discount Amount on Sales Line.
      VerifySalesLineInvDiscAmount(SalesHeader."No.",SalesLine."No.",InvDiscAmountForLine);
      VerifySalesLineInvDiscAmount(SalesHeader."No.",SalesLine2."No.",InvDiscAmountForLine);
    END;

    [Test]
    [HandlerFunctions(GeneralSalesOrderStatisticsHandler)]
    PROCEDURE InvDiscForPartialSalesOrder@34();
    VAR
      GeneralPostingSetup@1005 : Record 252;
      GLEntry@1000 : Record 17;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1004 : Record 37;
      Amount@1003 : Decimal;
      PostedDocumentNo@1006 : Code[20];
    BEGIN
      // Check Amount on GL Entry after posting Sales Order with partial Invoice.

      // Setup: Create Sales Order with Random Unit Price.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine);
      CreateAndModifySalesLine(SalesLine2,SalesHeader,SalesLine.Quantity,SalesLine."Unit Price");

      // InvDiscountAmount is a global variable which is used to assign Invoice Discount Amount on Statistics page (SalesOrderStatisticsHandler).
      // Assigning value to InvDiscountAmount to make sure Inv. Discount Amount is always less than total amount of Order.
      InvoiceDiscountAmount := SalesLine."Line Amount";
      Amount := ROUND(InvoiceDiscountAmount / 2);
      OpenSalesOrderStatistics(SalesHeader."No.");
      UpdateQtyToShip(SalesLine2,SalesHeader."No.");
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      // Exercise: Post Sales Order and find GL Entry.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      FindGLEntry(GLEntry,PostedDocumentNo,GeneralPostingSetup."Sales Inv. Disc. Account");

      // Verify: Verify GL Entry for Invoice Discount Amount.
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsHandler)]
    PROCEDURE InvDiscAmountOnPurchLine@36();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1003 : Record 39;
      InvDiscAmountForLine@1004 : Decimal;
    BEGIN
      // Check Invoice Discount Amount on Purchase Line after entering Invoice Discount Amount in Purchase Order Statistics window.

      // Setup: Create Purchase Order and add new Purchase Line.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      CreateAndModifyPurchaseLine(PurchaseLine2,PurchaseHeader,PurchaseLine.Quantity,PurchaseLine."Direct Unit Cost");

      // InvDiscountAmount is a global variable which is used to assign Invoice Discount Amount on Statistics page. Assigning value to InvDiscountAmount to make sure Inv. Discount Amount is always less than total amount of Order.
      InvoiceDiscountAmount := PurchaseLine."Line Amount";
      InvDiscAmountForLine := ROUND(InvoiceDiscountAmount / 2);

      // Exercise: Open Purchase Order Statistics Page and assign Invoice Discount Amount in Handler (PurchaseOrderStatisticsHandler).
      OpenPurchaseOrderStatistics(PurchaseHeader."No.");

      // Verify: Verify Invoice Discount Amount on Purchase Line.
      VerifyPurchLineInvDiscAmount(PurchaseHeader."No.",PurchaseLine."No.",InvDiscAmountForLine);
      VerifyPurchLineInvDiscAmount(PurchaseHeader."No.",PurchaseLine2."No.",InvDiscAmountForLine);
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsHandler)]
    PROCEDURE InvDiscForPartialPurchOrder@37();
    VAR
      GeneralPostingSetup@1005 : Record 252;
      GLEntry@1000 : Record 17;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1007 : Record 39;
      PostedDocumentNo@1001 : Code[20];
      Amount@1006 : Decimal;
    BEGIN
      // Check Amount on GL Entry after posting Purchase Order with partial Invoice.

      // Setup: Create Purchase Order with Random Quantity and Direct Unit Cost.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      CreateAndModifyPurchaseLine(PurchaseLine2,PurchaseHeader,PurchaseLine.Quantity,PurchaseLine."Direct Unit Cost");

      // InvDiscountAmount is a global variable which is used to assign Invoice Discount Amount on Statistics page (PurchaseOrderStatisticsHandler).
      // Assigning value to InvDiscountAmount to make sure Inv. Discount Amount is always less than total amount of Order.
      InvoiceDiscountAmount := PurchaseLine."Line Amount";
      Amount := ROUND(InvoiceDiscountAmount / 2);
      OpenPurchaseOrderStatistics(PurchaseHeader."No.");
      UpdateQtyToReceive(PurchaseLine2,PurchaseHeader."No.");
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");

      // Exercise: Post Purchase Order and find GL Entry.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      FindGLEntry(GLEntry,PostedDocumentNo,GeneralPostingSetup."Purch. Inv. Disc. Account");

      // Verify: Verify GL Entry for Invoice Discount Amount.
      Assert.AreNearlyEqual(
        -Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),-Amount,GLEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(GeneralSalesOrderStatisticsHandler)]
    PROCEDURE InvoiceDiscountAmountsOnSalesOrderStatistics@46();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1003 : Record 37;
    BEGIN
      // Check Invoice Discount Amount on General and Invoicing tab of Sales Order Statistics window after modifying Quantity to Invoice on Sales lines.

      // Setup: Create Sales Order with Random Quantity and Unit Price.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine);
      CreateAndModifySalesLine(SalesLine2,SalesHeader,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(100,2));
      InvoiceDiscountAmount := SalesLine."Line Amount"; // InvoiceDiscountAmount is a global variable and is assigned to make sure discount is less than total Order amount.
      OpenSalesOrderStatistics(SalesHeader."No.");

      // Exercise: Update Quantity to Invoice on Sales line.
      UpdateQtyToInvoice(SalesLine,SalesHeader."No.",SalesLine.Quantity / 2);
      UpdateQtyToInvoice(SalesLine2,SalesHeader."No.",0);
      FindSalesLine(SalesLine,SalesHeader."No.",SalesLine."No.");

      // Calculation is done for distributed Inv. Discount Amount on Sales Lines for Invoicing.
      InvDiscountAmountInvoicing :=
        ROUND(
          InvoiceDiscountAmount *
          SalesLine."Qty. to Invoice" * SalesLine."Unit Price" / (SalesLine."Line Amount" + SalesLine2."Line Amount"));

      // Verify: IsVerify is a global variable and Verification is done in 'GeneralSalesOrderStatisticsHandler'.
      IsVerify := TRUE;
      OpenSalesOrderStatistics(SalesHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(InvoiceDiscountAmount);
      CLEAR(InvDiscountAmountInvoicing);
      CLEAR(AmountInclVAT);
      CLEAR(TotalInclVAT);
      CLEAR(VATAmount);
      CLEAR(TotalExclVAT);
      CLEAR(IsVerify);
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@22(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;CurrencyCode@1004 : Code[10];DocumentType@1005 : Option) : Code[20];
    VAR
      Counter@1002 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor(CurrencyCode));

      // Create multiple Purchase Lines. Make sure that No. of Lines always greater than 2 to better Testability.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(8) DO BEGIN
        // Required Random Value for Quantity field value is not important.
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,
          LibraryRandom.RandDec(100,2));

        IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Credit Memo" THEN
          PurchaseLine.VALIDATE("Qty. to Receive",0);  // Value not required for Purchase Credit Memo.

        // Required Random Value for "Direct Unit Cost" field value is not important.
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesDocument@2(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1000 : Record 37;CurrencyCode@1004 : Code[10];DocumentType@1001 : Option) : Code[20];
    VAR
      Counter@1006 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer(CurrencyCode));

      // Create multiple Sales Lines. Make sure that No. of Lines always greater than 2 to better Testability.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(8) DO BEGIN
        // Required Random Value for Quantity field value is not important.
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,
          SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(100,2));
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo" THEN
          SalesLine.VALIDATE("Qty. to Ship",0); // Value not required for Sales Credit Memo.

        // Required Random Value for "Unit Price" field value is not important.
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithVAT@47(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      // Create Sales Order with VAT and Price Incl. VAT.
      // Use Random values for Quantity more than 10 and Unit Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      ModifySalesHeaderForPriceInclVAT(SalesHeader,TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,
        LibraryRandom.RandDecInRange(10,20,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@6(CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);

      CreateInvoiceDiscForVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@16(CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);

      CreateInvoiceDiscForCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateInvoiceDiscForVendor@24(Vendor@1000 : Record 23);
    VAR
      VendorInvoiceDisc@1002 : Record 24;
    BEGIN
      // Required Random Value for "Minimum Amount" and "Discount %" fields value is not important.
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,Vendor."No.",Vendor."Currency Code",LibraryRandom.RandDec(100,2));
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInvoiceDiscForCustomer@31(Customer@1000 : Record 18);
    VAR
      CustInvoiceDisc@1002 : Record 19;
    BEGIN
      // Required Random Value for "Minimum Amount" and "Discount %" fields value is not important.
      LibraryERM.CreateInvDiscForCustomer(
        CustInvoiceDisc,Customer."No.",Customer."Currency Code",LibraryRandom.RandDec(100,2));
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      // Create Customer, Item and Sales Order with one Sales line. Take random value for Quantity and Unit Price.
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateAndModifySalesLine(SalesLine,SalesHeader,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@38(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      // Create Vendor, Item and Purchase Order with one Purchase line. Take random value for Quantity and Direct Unit Cost.
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreateAndModifyPurchaseLine(
        PurchaseLine,PurchaseHeader,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateAndModifySalesLine@25(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Quantity@1004 : Decimal;UnitPrice@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyPurchaseLine@21(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;Quantity@1004 : Decimal;DirectUnitCost@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindSalesLine@18(VAR SalesLine@1000 : Record 37;DocumentNo@1002 : Code[20];No@1003 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@23(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20];No@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLEntry@28(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20];GLAccountNo@1002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetSalesInvDiscAmount@11(SalesLine@1000 : Record 37) TotalInvDiscAmount : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
      SalesLine.FINDSET;
      REPEAT
        TotalInvDiscAmount += SalesLine."Inv. Discount Amount";
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPurchaseInvDiscAmount@15(PurchaseLine@1000 : Record 39) TotalInvDiscAmount : Decimal;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLine.SETRANGE("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
      PurchaseLine.FINDSET;
      REPEAT
        TotalInvDiscAmount += PurchaseLine."Inv. Discount Amount";
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ModifySalesHeaderForPriceInclVAT@45(VAR SalesHeader@1000 : Record 36;PriceInclVAT@1001 : Boolean);
    BEGIN
      SalesHeader.VALIDATE("Prices Including VAT",PriceInclVAT);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenSalesOrderStatistics@17(No@1001 : Code[20]);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.Statistics.INVOKE;
    END;

    LOCAL PROCEDURE OpenPurchaseOrderStatistics@30(No@1001 : Code[20]);
    VAR
      PurchaseOrder@1000 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENVIEW;
      PurchaseOrder.FILTER.SETFILTER("No.",No);
      PurchaseOrder.Statistics.INVOKE;
    END;

    LOCAL PROCEDURE UpdateQtyToShip@26(SalesLine@1001 : Record 37;DocumentNo@1000 : Code[20]);
    BEGIN
      FindSalesLine(SalesLine,DocumentNo,SalesLine."No.");
      SalesLine.VALIDATE("Qty. to Ship",0); // To not post the current line.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToReceive@44(PurchaseLine@1001 : Record 39;DocumentNo@1000 : Code[20]);
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentNo,PurchaseLine."No.");
      PurchaseLine.VALIDATE("Qty. to Receive",0); // To not post the current line.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToInvoice@55(SalesLine@1001 : Record 37;DocumentNo@1000 : Code[20];QtyToInvoice@1002 : Decimal);
    BEGIN
      FindSalesLine(SalesLine,DocumentNo,SalesLine."No.");
      SalesLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscForVendor@5(PurchaseLine@1002 : Record 39;LineAmount@1003 : Decimal);
    VAR
      VendorInvoiceDisc@1001 : Record 24;
      Currency@1000 : Record 4;
      InvDiscountAmount@1004 : Decimal;
    BEGIN
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      VendorInvoiceDisc.SETRANGE(Code,PurchaseLine."Buy-from Vendor No.");
      VendorInvoiceDisc.SETRANGE("Currency Code",PurchaseLine."Currency Code");
      VendorInvoiceDisc.FINDFIRST;
      Currency.GET(PurchaseLine."Currency Code");
      Currency.InitRoundingPrecision;
      InvDiscountAmount := GetPurchaseInvDiscAmount(PurchaseLine);
      Assert.AreNearlyEqual(
        LineAmount * VendorInvoiceDisc."Discount %" / 100,InvDiscountAmount,Currency."Amount Rounding Precision",
        STRSUBSTNO(InvoiceDiscountError,InvDiscountAmount));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscForCustomer@14(SalesLine@1002 : Record 37;LineAmount@1003 : Decimal);
    VAR
      CustInvoiceDisc@1001 : Record 19;
      Currency@1000 : Record 4;
      InvDiscountAmount@1004 : Decimal;
    BEGIN
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      CustInvoiceDisc.SETRANGE(Code,SalesLine."Sell-to Customer No.");
      CustInvoiceDisc.SETRANGE("Currency Code",SalesLine."Currency Code");
      CustInvoiceDisc.FINDFIRST;
      Currency.GET(SalesLine."Currency Code");
      Currency.InitRoundingPrecision;
      InvDiscountAmount := GetSalesInvDiscAmount(SalesLine);
      Assert.AreNearlyEqual(
        LineAmount * CustInvoiceDisc."Discount %" / 100,InvDiscountAmount,Currency."Amount Rounding Precision",
        STRSUBSTNO(InvoiceDiscountError,InvDiscountAmount));
    END;

    LOCAL PROCEDURE VerifySalesLineInvDiscAmount@39(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];InvDiscountAmount@1000 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,DocumentNo,ItemNo);
      Assert.AreNearlyEqual(
        InvDiscountAmount,SalesLine."Inv. Discount Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountError,InvDiscountAmount));
    END;

    LOCAL PROCEDURE VerifyPurchLineInvDiscAmount@41(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];InvDiscountAmount@1000 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentNo,ItemNo);
      Assert.AreNearlyEqual(
        InvDiscountAmount,PurchaseLine."Inv. Discount Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountError,InvDiscountAmount));
    END;

    [ModalPageHandler]
    PROCEDURE GeneralSalesOrderStatisticsHandler@20(VAR SalesOrderStatistics@1001 : TestPage 402);
    BEGIN
      IF IsVerify THEN BEGIN
        Assert.AreEqual(
          InvoiceDiscountAmount,SalesOrderStatistics.InvDiscountAmount_General.ASDECIMAL,
          STRSUBSTNO(InvoiceDiscountError,InvoiceDiscountAmount));
        Assert.AreEqual(
          InvDiscountAmountInvoicing,SalesOrderStatistics.InvDiscountAmount_Invoicing.ASDECIMAL,
          STRSUBSTNO(InvoiceDiscountError,InvDiscountAmountInvoicing));
      END ELSE BEGIN
        SalesOrderStatistics.InvDiscountAmount_General.SETVALUE(InvoiceDiscountAmount);
        SalesOrderStatistics.OK.INVOKE;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderStatisticsHandler@32(VAR PurchaseOrderStatistics@1001 : TestPage 403);
    BEGIN
      PurchaseOrderStatistics.InvDiscountAmount_General.SETVALUE(InvoiceDiscountAmount);
      PurchaseOrderStatistics.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Invoice Discount] [FCY]
      Unsupported version tags:
      NA: Unable to Compile
      SE: Unable to Execute

      Test for ERM - Check Invoice Discount for Sales and Purchase Documents.
        1. Calculate Invoice Discount On Purchase Credit Memo.
        2. Calculate Invoice Discount On Purchase Invoice.
        3. Calculate Invoice Discount On Purchase Order.
        4. Calculate Invoice Discount On Sales Credit Memo.
        5. Calculate Invoice Discount On Sales Invoice.
        6. Check Inv. Discount Amount on Sales Line after entering the Inv. Discount Amount in the Statistics window.
        7. Check Invoice Amount on GL Entry after posting Sales Order with partial Invoice.
        8. Check Invoice discount on GL Account while posting Sales Order with partial invoice and entering new Sales Invoice line.
        9. Check Inv. Discount Amount on Purchase Line after entering the Inv. Discount Amount in the Statistics window.
       10. Check Invoice Amount on GL Entry after posting Purchase Order with partial Invoice.
       11. Check Invoice discount on GL Account while posting Purchase order with partial invoice and entering new Purchase Invoice line.
       12. Check Invoice Discount Amount on General and Invoicing tab of Sales Order Statistics window after modifying Quantity to Invoice on Sales lines.
       13. Check various VAT fields on Statistics window after modifying Inv. Discount Amount on Invoicing tab.

      This test code unit replaces Manual Test Suite (TS5326).
      TFS_TS_ID = 20575,20576,20577,20579,20582

      Cover Test cases:
        TC-5327 TFS_TC_ID=124312
        TC-5328 TFS_TC_ID=124313
        TC-5329 TFS_TC_ID=124314
        TC-5331 TFS_TC_ID=124316
        TC-5333 TFS_TC_ID=124317
        TC-5334 TFS_TC_ID=124318
        TC-5339 TFS_TC_ID=124319
        TC-5340 TFS_TC_ID=124320
        TC-5348 TFS_TC_ID=124321
        TC-5349 TFS_TC_ID=124322
        TC-5350 TFS_TC_ID=124323
        TC-5351 TFS_TC_ID=124324

        Covers Test Cases: 261354
        ------------------------------------------------------------------------------------------
        Test Function Name                                                              TFS ID
        ------------------------------------------------------------------------------------------
        InvDiscAmountOnSalesLine,InvDiscForPartialSalesOrder,
        InvDiscAmountOnPurchLine,InvDiscForPartialPurchOrder                             244475

        Covers Test Cases: 263215
        -----------------------------------------------------------
        Test Function Name                                TFS ID
        -----------------------------------------------------------
        InvoiceDiscountAmountsOnSalesOrderStatistics     127348
        VariousVATAmountsOnSalesOrderStatistics          127352
    }
    END.
  }
}

