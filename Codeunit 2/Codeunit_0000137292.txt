OBJECT Codeunit 137292 SCM Inventory Costing Orders
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryCosting@1008 : Codeunit 132200;
      LibraryERM@1029 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryManufacturing@1023 : Codeunit 132202;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryPlanning@1038 : Codeunit 132203;
      LibrarySales@1006 : Codeunit 130509;
      LibraryService@1002 : Codeunit 131902;
      LibraryUtility@1019 : Codeunit 131000;
      LibraryVariableStorage@1028 : Codeunit 131004;
      LibraryWarehouse@1005 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      ApplFromItemEntryNoError@1010 : TextConst 'ENU="Positive must be equal to ''No''  in Item Ledger Entry: Entry No.=%1. Current value is ''Yes''."';
      AvailabilityWarning@1037 : TextConst 'ENU=There are availability warnings on one or more lines.';
      BaseCalendarError@1009 : TextConst 'ENU=There is no Base Calendar Change within the filter.';
      ChangeAverageCostCalcType@1034 : TextConst 'ENU=If you change the Average Cost Calc. Type, the program must adjust all item entries.';
      ChangeAverageCostCalcTypeMessage@1036 : TextConst 'ENU=Average Cost Calc. Type has been changed to';
      ChangeExpectedCostPostingToGL@1031 : TextConst 'ENU=If you change the Expected Cost Posting to G/L, the program must update table Post Value Entry to G/L.';
      ExpectedCostPostingToGLMessage@1032 : TextConst 'ENU=Expected Cost Posting to G/L has been changed to Yes.';
      CloseInventoryPeriodError@1025 : TextConst 'ENU=The Inventory Period cannot be closed because there is at least one item with unadjusted entries in the current period.';
      CostAmountMustBeSame@1011 : TextConst 'ENU=Cost Amount must be same';
      GlobalItemNo@1017 : Code[20];
      GlobalVendorNo@1020 : Code[20];
      GlobalQuantity@1012 : Decimal;
      GlobalItemTrackingAction@1016 : 'SelectEntriesLotNo,AssignLotNo';
      ItemFilter@1024 : TextConst 'ENU=%1|%2|%3';
      ItemTrackingLotNoError@1015 : TextConst 'ENU=Variant  cannot be fully applied';
      NothingToPostError@1014 : TextConst 'ENU=There is nothing to post.';
      OrderTrackingMessage@1021 : TextConst 'ENU=There are no order tracking entries for this line.';
      RecordFoundError@1026 : TextConst 'ENU=Record must not Found.';
      ReservationError@1013 : TextConst 'ENU=Applies-to Entry must not be filled out when reservations exist in Item Ledger Entry';
      ReturnOrderTrackingError@1027 : TextConst 'ENU=You must use form Item Tracking Lines to enter Appl.-to Item Entry, if item tracking is used.';
      SalesPriceWorksheetError@1018 : TextConst 'ENU=The Sales Price Worksheet does not exist.';
      TrackingAndActionMessage@1022 : TextConst 'ENU=The change will not affect existing entries.';
      UndoShipmentLine@1033 : TextConst 'ENU=Do you want to undo the selected shipment line';
      ValueNotMatchedError@1030 : TextConst 'ENU=Value must be same.';
      ReservationDisruptedWarningMsg@1039 : TextConst 'ENU=One or more reservation entries exist for the item';

    [Test]
    PROCEDURE TransferLineWithReceiptDate@8();
    VAR
      TransferLine@1000 : Record 5741;
      TransferHeader@1001 : Record 5740;
    BEGIN
      // Verify Receipt Date on Transfer Line.

      // Setup: Create Transfer Header and Line with Base Calendar.
      Initialize;
      CreateTransferOrderWithBaseCalendar(TransferLine);

      // Exercise.
      TransferHeader.GET(TransferLine."Document No.");

      // Verify: Receipt Date on Transfer Line.
      TransferLine.TESTFIELD("Receipt Date",TransferHeader."Receipt Date");
    END;

    [Test]
    PROCEDURE TransferLineWithShipmentDate@98();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1000 : Record 5741;
      TransferOrder@1007 : TestPage 5740;
      ShipmentDate@1006 : Date;
    BEGIN
      // Verify Shipment Date on Transfer Line with updated Transfer Header's Shipment Date.

      // Setup: Create Transfer Header and Line with Base Calendar.
      Initialize;
      CreateTransferOrderWithBaseCalendar(TransferLine);
      TransferHeader.GET(TransferLine."Document No.");
      ShipmentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',TransferHeader."Receipt Date");  // Random value is taken for Shipment Date and 'D' is used for Day.

      // Exercise: Update Shipment Date on Transfer Order page.
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      TransferOrder."Shipment Date".SETVALUE(ShipmentDate);

      // Verify: Shipment Date on Transfer Line.
      TransferLine.TESTFIELD("Shipment Date",TransferHeader."Shipment Date");
    END;

    [Test]
    PROCEDURE BaseCalendarChangeError@46();
    VAR
      BaseCalendar@1005 : Record 7600;
      BaseCalendarChange@1003 : Record 7601;
    BEGIN
      // Verify Working Day on Base Calendar Changes must not exist.

      // Setup: Create Base Calendar and Base Calendar Change.
      Initialize;
      LibraryService.CreateBaseCalendar(BaseCalendar);
      CreateBaseCalendarChange(BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange.Day::Tuesday,BaseCalendarChange.Day::Wednesday);
      CreateBaseCalendarChange(BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange.Day::Thursday,BaseCalendarChange.Day::Friday);

      BaseCalendarChange.SETRANGE("Base Calendar Code",BaseCalendar.Code);
      BaseCalendarChange.SETRANGE(Day,BaseCalendarChange.Day::Saturday);  // 'Saturday' is taken as Working Day in Base Calendar Change.

      // Exercise.
      ASSERTERROR BaseCalendarChange.FINDFIRST;

      // Verify: Verify that Working Day must not exist in Base Calendar Changes.
      Assert.ExpectedError(STRSUBSTNO(BaseCalendarError));
    END;

    [Test]
    PROCEDURE PurchaseReceiptApplyFromItemEntry@1();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      PurchaseLine@1004 : Record 39;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Application using Appl.-from Item Entry field on Service Line.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        FALSE);  // Using Random value for Quantity.
      SetupApplyServiceDocument(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",FALSE);

      // Exercise.
      ModifyServiceLine(ServiceLine,ItemLedgerEntry."Entry No.");

      // Verify: Verify Appl.-from Item Entry of Service Order must be same as Item Ledger Entry.
      ServiceLine.TESTFIELD("Appl.-from Item Entry",ItemLedgerEntry."Entry No.");
    END;

    [Test]
    PROCEDURE ApplyToEntryOnPurchaseReturnOrder@68();
    VAR
      Item@1002 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchaseLine2@1013 : Record 39;
    BEGIN
      // Verify Application using Appl.-to Item Entry field on Purchase Return Order.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        FALSE);  // Using Random value for Quantity.
      CreatePurchaseDocument(
        PurchaseLine2,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.",PurchaseLine."No.",
        PurchaseLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",TRUE);

      // Exercise.
      ModifyPurchaseLine(PurchaseLine2,ItemLedgerEntry."Entry No.");

      // Verify: Verify Appl.-to Item Entry of Purchase Return Order must be same as Item Ledger Entry.
      PurchaseLine2.TESTFIELD("Appl.-to Item Entry",ItemLedgerEntry."Entry No.");
    END;

    [Test]
    PROCEDURE ApplyToEntryAndAdjustmentOnReturnOrder@118();
    VAR
      Item@1002 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchaseHeader2@1012 : Record 38;
      PurchaseLine2@1013 : Record 39;
      ValueEntry@1017 : Record 5802;
      LineAmount@1014 : Decimal;
      LineAmount2@1015 : Decimal;
      CostAmountExpected@1016 : Decimal;
    BEGIN
      // Verify Adjusted Cost Amount in Value Entry.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        FALSE);  // Using Random value for Quantity.
      LineAmount := PurchaseLine."Line Amount";

      CreatePurchaseHeader(PurchaseHeader2,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader2,PurchaseLine2.Type::Item,PurchaseLine."No.",PurchaseLine.Quantity);
      LineAmount2 := PurchaseLine2."Line Amount";
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",TRUE);
      ModifyPurchaseLine(PurchaseLine2,ItemLedgerEntry."Entry No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,FALSE);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(PurchaseLine2."No.",'');
      CostAmountExpected := LineAmount2 - LineAmount;

      // Verify: Verify Adjusted Cost Amount in Value Entry.
      ValueEntry.SETRANGE("Item No.",PurchaseLine."No.");
      ValueEntry.SETRANGE(Adjustment,TRUE);
      ValueEntry.FINDFIRST;
      Assert.AreEqual(CostAmountExpected,ValueEntry."Cost Amount (Expected)",CostAmountMustBeSame);
    END;

    [Test]
    PROCEDURE ErrorUsingApplyFromItemEntry@200();
    VAR
      Item@1000 : Record 27;
      ItemLedgerEntry@1001 : Record 32;
      PurchaseLine@1004 : Record 39;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Error while applying on Service Credit Memo.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::LIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        FALSE);  // Using Random value for Quantity.
      SetupApplyServiceDocument(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",TRUE);

      // Exercise.
      ASSERTERROR ServiceLine.VALIDATE("Appl.-from Item Entry",ItemLedgerEntry."Entry No.");

      // Verify: Verify Error while validating Appl.-from Item Entry on Service Order.
      Assert.ExpectedError(STRSUBSTNO(ApplFromItemEntryNoError,ItemLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ItemTrackingPageHandler)]
    PROCEDURE PurchaseReceiptErrorUsingLotNo@74();
    VAR
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Error while posting Service Order with Item Tracking Lot Number.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order.
      Initialize;
      LibraryVariableStorage.Enqueue(AvailabilityWarning);
      ServiceDocumentWithPurchaseOrder(
        ServiceLine,GlobalItemTrackingAction::AssignLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // Exercise.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // Verify.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemTrackingLotNoError) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ErrorUsingApplToItemEntry@149();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Error while Applying Return Order with 'Entry No.' from  Item Ledger Entry.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order with Item Tracking.
      Initialize;
      ServiceDocumentWithPurchaseOrder(
        ServiceLine,GlobalItemTrackingAction::SelectEntriesLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::"Return Order",GlobalVendorNo,ServiceLine."No.",ServiceLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,ServiceLine."No.",TRUE);

      // Exercise.
      ASSERTERROR PurchaseLine.VALIDATE("Appl.-to Item Entry",ItemLedgerEntry."Entry No.");

      // Verify: Verify error message while Applying Purchase Return Order.
      Assert.ExpectedError(STRSUBSTNO(ReturnOrderTrackingError));
    END;

    [Test]
    PROCEDURE PostServiceCreditMemoError@19();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Error while posting Service Credit Memo.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        FALSE);  // Using Random value for Quantity.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      CreateServiceDocument(
        ServiceLine,ServiceHeader."Document Type"::"Credit Memo",ServiceHeader."Customer No.",PurchaseLine."No.",
        PurchaseLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",FALSE);
      ModifyServiceLine(ServiceLine,ItemLedgerEntry."Entry No.");

      // Exercise: Post Service Credit Memo.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // Verify: Verify Error while validating posting Service Credit Memo.
      Assert.ExpectedError(NothingToPostError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PurchaseLineTrackingPageHandler)]
    PROCEDURE ApplyToEntryUsingOrderTracking@2();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Verify Order Tracking page values using Item Ledger Entries.

      // Setup: Create and Receive Purchase Order and Return Order.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAndActionMessage);
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::"Tracking & Action Msg."),
        LibraryRandom.RandDec(10,2),FALSE);  // Using Random value for Quantity.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLine."No.",PurchaseLine.Quantity);
      GlobalQuantity := PurchaseLine.Quantity;
      GlobalItemNo := PurchaseLine."No.";

      // Exercise: Open Order Tracking page from Purchase Line.
      OpenOrderTracking(PurchaseLine);

      // Verify: Verification done in 'PurchaseLineTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingActionMessage@97();
    VAR
      Item@1002 : Record 27;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Verify Tracking Message using Order Tracking Policy as 'Tracking & Action Msg.'.

      // Setup: Create and Receive Purchase Order.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAndActionMessage);
      LibraryVariableStorage.Enqueue(OrderTrackingMessage);
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::"Tracking & Action Msg."),
        LibraryRandom.RandDec(10,2),FALSE);  // Using Random value for Quantity.
      GlobalQuantity := PurchaseLine.Quantity;

      // Exercise: Open Order Tracking page from Purchase Line.
      OpenOrderTracking(PurchaseLine);

      // Verify: Verification done in 'MessageHandler' and 'OrderTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,AutoReservUsingReservationPageHandler)]
    PROCEDURE ReservationErrorUsingServiceReturnOrder@13();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Reservation error while posting Purchase Return Order with Appl.-to Item Entry.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order and create a Purchase Return Order and perform Reservation.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAndActionMessage);
      LibraryVariableStorage.Enqueue(UndoShipmentLine);
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::"Tracking Only"),
        LibraryRandom.RandDec(10,2),FALSE);  // Using Random value for Quantity.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      UndoShipment(ServiceHeader."No.");
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLine."No.",PurchaseLine.Quantity);
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",TRUE);
      ModifyPurchaseLine(PurchaseLine,ItemLedgerEntry."Entry No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      LibraryVariableStorage.Enqueue(ReservationDisruptedWarningMsg);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Reservation error while posting Purchase Return Order with Appl.-to Item Entry
      Assert.ExpectedError(ReservationError);
    END;

    [Test]
    PROCEDURE PostValueEntryToGLWithZeroPurchaseCost@16();
    BEGIN
      // Post Value Entry to G/L is correct with Zero Cost - Purchase and Verify Quantity, Actual/Expected Cost in Item Ledger Entry.
      Initialize;
      PostValueEntryToGLWithZeroCost;
    END;

    [Test]
    PROCEDURE PostValueEntryToGLWithZeroCostACYCostAmount@22();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // This test case verifies Post Value Entry to G/L and ACY Cost Amount is correct with Zero costs in Purchase transaction.

      // Setup: Create Currency and updated then same on General Ledger Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      UpdateAddCurrencySetup(CreateCurrency);
      PostValueEntryToGLWithZeroCost;

      // Tear Down: Rollback Inventory Setup.
      UpdateAddCurrencySetup(GeneralLedgerSetup."Additional Reporting Currency");
    END;

    LOCAL PROCEDURE PostValueEntryToGLWithZeroCost@65();
    VAR
      Item@1003 : Record 27;
      InventorySetup@1008 : Record 313;
      ProductionBOMHeader@1011 : Record 99000771;
      ProductionOrder@1007 : Record 5405;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      ItemNo@1000 : Code[20];
      Component@1001 : Code[20];
      Component2@1002 : Code[20];
      Quantity@1006 : Decimal;
      ProductionQuantity@1010 : Decimal;
    BEGIN
      // This test case verifies Post Value Entry to G/L and ACY Cost Amount is correct with Zero costs in Purchase transaction.

      // Setup: Create Purchase Order for Production and Component Item. Post as Receive.
      Quantity := 10 + LibraryRandom.RandInt(100);  // Using Random value for Quantity.
      ProductionQuantity := LibraryRandom.RandInt(Quantity);  // Using Random value of Quantity for Production Quantity.
      ItemNo :=
        SetupProductionItem(
          Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",LibraryRandom.RandDec(10,2));  // Using Random value for Standard Cost.
      Component := SetupProductionItem(Item."Costing Method"::FIFO,Item."Replenishment System"::Purchase,0);  // Using 0 for Standard Cost.
      Component2 := SetupProductionItem(Item."Costing Method"::FIFO,Item."Replenishment System"::Purchase,0);  // Using 0 for Standard Cost.

      // Added Production BOM No. on Item.
      Item.GET(ItemNo);
      Item.VALIDATE(
        "Production BOM No.",LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,Component,Component2,1));
      Item.MODIFY(TRUE);
      UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Average Cost Calc. Type"::Item);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Component,Quantity);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Component2,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Create Production Order, Refresh, Post Production Jounral and change status from Release to Finish.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,ProductionQuantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,TRUE,FALSE);
      PostProductionJournal(ProductionOrder);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Exercise: Run Adjust Cost Item Entries report.
      LibraryCosting.AdjustCostItemEntries(STRSUBSTNO(ItemFilter,ItemNo,Component,Component2),'');

      // Verify: Verify Quantity Expected/Actual Cost ACY for Component Item in Item Ledger Entry.
      VerifyItemLedgerEntry(Component,TRUE,Quantity);
      VerifyItemLedgerEntry(Component,FALSE,-ProductionQuantity);
    END;

    [Test]
    PROCEDURE RevaluationUsingServiceAndPurchaseOrder@20();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ItemJournalLine@1002 : Record 83;
      Vendor@1003 : Record 23;
    BEGIN
      // Verify Reservation using Item with Order Tracking Policy as Tracking Only.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Order,Vendor."No.",
        CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Create and post Service Order and run Adjust Cost Item Entrie batch job.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryCosting.AdjustCostItemEntries(PurchaseLine."No.",'');

      // Exercise.
      CreateItemJournalForRevaluation(ItemJournalLine,PurchaseLine."No.");

      // Verify: Verify Revaluated value in the Revaluation Journal.
      Item.GET(PurchaseLine."No.");
      ItemJournalLine.SETRANGE("Item No.",PurchaseLine."No.");
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Unit Cost (Revalued)",Item."Last Direct Cost");
      ItemJournalLine.TESTFIELD("Inventory Value (Revalued)",ROUND(Item."Last Direct Cost" * PurchaseLine.Quantity));
    END;

    [Test]
    PROCEDURE VarianceInValueEntryUsingItemWithStandardCost@75();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ValueEntry@1008 : Record 5802;
      Vendor@1010 : Record 23;
    BEGIN
      // Verify Variance entry from Value Entry using Item with Standard Cost.

      // Setup: Create and Receive Purchase Invoice, Create and Ship Service Order.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Invoice,Vendor."No.",
        CreateItem(Item."Costing Method"::Standard,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Create and post Service Order.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Item.GET(PurchaseLine."No.");
      UpdateItemCostInfo(Item);

      // Exercise: Create Service Credit Memo using Item with Standard Cost.
      CreateServiceDocument(
        ServiceLine,ServiceHeader."Document Type"::"Credit Memo",ServiceHeader."Customer No.",Item."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // Verify: Verify Variance entry from Value Entry using Item with Standard Cost.
      ValueEntry.SETRANGE("Item No.",ServiceLine."No.");
      ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::Variance);
      ValueEntry.FINDFIRST;
      Assert.AreEqual(ValueEntry."Cost Amount (Actual)",-ROUND(Item."Last Direct Cost" * PurchaseLine.Quantity),CostAmountMustBeSame);
    END;

    [Test]
    PROCEDURE ValueEntryLinesUsingAdjustment@86();
    VAR
      Customer@1005 : Record 18;
      Item@1001 : Record 27;
      ItemLedgerEntry@1006 : Record 32;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ValueEntry@1008 : Record 5802;
      Vendor@1010 : Record 23;
    BEGIN
      // Verify that there should be showing all value entries for Direct Cost, Variance, Service Shipment, Service Credit Memo and Adjustment.

      // Setup: Create and post Purchase Invoice, Create and Ship Service Order and Create Service Credit Memo.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Invoice,Vendor."No.",
        CreateItem(Item."Costing Method"::Standard,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Create and post Service Order.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Item.GET(PurchaseLine."No.");
      UpdateItemCostInfo(Item);

      // Create Customer, Create and apply Service Credit Memo.
      LibrarySales.CreateCustomer(Customer);
      CreateServiceDocument(
        ServiceLine,ServiceHeader."Document Type"::"Credit Memo",ServiceHeader."Customer No.",Item."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      FindItemLedgerEntry(ItemLedgerEntry,ServiceLine."No.",FALSE);
      ModifyServiceLine(ServiceLine,ItemLedgerEntry."Entry No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(ServiceLine."No.",'');

      // Verify: Verify that there should be showing all value entries for Direct Cost, Variance, Service Shipment, Service Credit Memo and Adjustment.
      VerifyValueEntryLines(
        ValueEntry,ServiceLine."No.",ValueEntry."Entry Type"::"Direct Cost",ValueEntry."Document Type"::"Purchase Invoice",FALSE);
      VerifyValueEntryLines(
        ValueEntry,ServiceLine."No.",ValueEntry."Entry Type"::Variance,ValueEntry."Document Type"::"Purchase Invoice",FALSE);
      VerifyValueEntryLines(
        ValueEntry,ServiceLine."No.",ValueEntry."Entry Type"::"Direct Cost",ValueEntry."Document Type"::"Service Shipment",FALSE);
      VerifyValueEntryLines(
        ValueEntry,ServiceLine."No.",ValueEntry."Entry Type"::"Direct Cost",ValueEntry."Document Type"::"Service Credit Memo",FALSE);
      VerifyValueEntryLines(
        ValueEntry,ServiceLine."No.",ValueEntry."Entry Type"::"Direct Cost",ValueEntry."Document Type"::"Service Credit Memo",TRUE);
    END;

    [Test]
    PROCEDURE ErrorWithCreditMemoUsingCloseInventoryPeriod@174();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1007 : Record 5902;
      Vendor@1010 : Record 23;
      InventoryPeriod@1015 : Record 5814;
    BEGIN
      // Verify Close Inventory Period error.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Order,Vendor."No.",
        CreateItem(Item."Costing Method"::Standard,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Create and post Service Order.
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // Exercise.
      ASSERTERROR CloseInventoryPeriod(InventoryPeriod,ServiceLine."No.",FALSE);

      // Verify: Verify Close Invetory Period error.
      Assert.ExpectedError(STRSUBSTNO(CloseInventoryPeriodError));
    END;

    [Test]
    PROCEDURE AdjustmentUsingItemJournal@66();
    VAR
      Item@1002 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalLine@1003 : Record 83;
      ItemJournalLine2@1005 : Record 83;
      ItemLedgerEntry@1006 : Record 32;
      ItemNo@1001 : Code[20];
    BEGIN
      // Verify Item Ledger Entry for Positive and Negative Adjustment and Item Application Entry.

      // Setup: Create Item and Item Journal Line for Positive and Negative Adjustment.
      Initialize;
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      ItemNo := CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo);
      CreateItemJournalLine(
        ItemJournalLine2,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine2."Entry Type"::"Negative Adjmt.",ItemNo);

      // Exercise.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Verify: Verify Item Ledger Entry for Positive and Negative Adjustment and Item Application Entry.
      VerifyItemLedgerCostAmount(
        ItemLedgerEntry,ItemNo,ItemJournalLine.Quantity,ROUND(ItemJournalLine.Quantity * ItemJournalLine."Unit Cost"),TRUE);
      VerifyItemLedgerCostAmount(
        ItemLedgerEntry,ItemNo,-ItemJournalLine2.Quantity,-ROUND(ItemJournalLine2.Quantity * ItemJournalLine2."Unit Cost"),FALSE);
      VerifyItemApplicationEntry(ItemLedgerEntry."Entry No.",-ItemJournalLine2.Quantity);
    END;

    [Test]
    PROCEDURE AdjustCostItemEntriesUsingItemJournal@250();
    VAR
      Item@1002 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalLine@1003 : Record 83;
      ItemJournalLine2@1005 : Record 83;
      ValueEntry@1008 : Record 5802;
      ItemNo@1001 : Code[20];
    BEGIN
      // Verify Adjusted Cost Amount in Value Entry.

      // Setup: Create Item and Item Journal Line for Positive and Negative Adjustment.
      Initialize;
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      ItemNo := CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo);
      ModifyItemJournalLine(ItemJournalLine);
      CreateItemJournalLine(
        ItemJournalLine2,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine2."Entry Type"::"Negative Adjmt.",ItemNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Exercise:
      LibraryCosting.AdjustCostItemEntries(ItemNo,'');  // Using blank value for Item Category.

      // Verify: Verify Adjusted Cost Amount in Value Entry.
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE(Adjustment,TRUE);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Cost Amount (Actual)",ROUND(ValueEntry."Valued Quantity" * ValueEntry."Cost per Unit"));
    END;

    [Test]
    [HandlerFunctions(ViewAppliedEntriesPageHandler)]
    PROCEDURE ApplicationWorksheetUsingItemJournal@312();
    VAR
      Item@1001 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalLine@1003 : Record 83;
      ApplicationWorksheet@1010 : TestPage 521;
    BEGIN
      // Verify Applied Quantity on View Applied Entries page.

      // Setup: Create Item, post Item Journal Line for Positive and Negative Adjustment and open Application Worksheet page.
      Initialize;
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      GlobalItemNo := CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",GlobalItemNo,LibraryRandom.RandInt(50));  // Taking Random Quantity.

      ModifyItemJournalLine(ItemJournalLine);
      LibraryVariableStorage.Enqueue(-ItemJournalLine.Quantity);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",GlobalItemNo,ItemJournalLine.Quantity);  // Taking Random Quantity.
      GlobalQuantity := -ItemJournalLine.Quantity;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      ApplicationWorksheet.OPENEDIT;
      ApplicationWorksheet.FILTER.SETFILTER("Item No.",GlobalItemNo);

      // Exercise: Open View Applied Entres page.
      ApplicationWorksheet.AppliedEntries.INVOKE;

      // Verify: Verification done in 'ViewAppliedEntriesPageHandler' page handler.
    END;

    [Test]
    PROCEDURE PostValueEntryToGLWithZeroSalesCost@21();
    VAR
      InventorySetup@1009 : Record 313;
      Item@1001 : Record 27;
      ItemJournalBatch@1003 : Record 233;
      ItemJournalTemplate@1008 : Record 82;
      ItemJournalLine@1002 : Record 83;
      PostValueEntryToGL@1004 : Record 5811;
      SalesLine@1005 : Record 37;
      ItemNo@1000 : Code[20];
    BEGIN
      // Post Value Entry to G/L is correct with Zero Cost - Sales and Verify Item in Post Value Entry To G/L.

      // Setup: Create Item Journal for Positive Entry, Make Sales Order Post as Ship and Update Unit Cost with 0 value.Again Post same Order as Invoice.
      Initialize;
      InventorySetup.GET;
      UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Average Cost Calc. Type"::Item);
      ItemNo := SetupProductionItem(Item."Costing Method"::FIFO,Item."Replenishment System"::Purchase,0);  // Using 0 for Standard Cost.
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateSalesOrder(SalesLine,ItemJournalLine."Item No.",ItemJournalLine.Quantity);
      PostSalesDocument(SalesLine,TRUE,FALSE);  // FALSE for Invoice.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      UpdateUnitCostOnSalesLine(SalesLine,0);  // Using 0 for UnitCostLCY.

      // Post  Sales Order as Invoice and Run Adjust Cost Item Entries Batch Job.
      PostSalesDocument(SalesLine,FALSE,TRUE);  // TRUE for Invoice.
      LibraryCosting.AdjustCostItemEntries(ItemJournalLine."Item No.",'');

      // Exercise: Run Post Inventory Cost to G/L Report.
      LibraryCosting.PostInvtCostToGL(FALSE,WORKDATE,'');

      // Verify: Verify Post Value Entry To G/L should not exist any entry for given Item.
      PostValueEntryToGL.SETRANGE("Item No.",ItemJournalLine."Item No.");
      Assert.IsFalse(PostValueEntryToGL.FINDFIRST,RecordFoundError);

      // Tear Down: Rollback Inventory Setup.
      UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Average Cost Calc. Type");
    END;

    [Test]
    PROCEDURE ItemUnitCostUsingRevaluationJournal@85();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      PurchaseLine@1004 : Record 39;
      SalesLine@1005 : Record 37;
    BEGIN
      // Verify Unit Cost on the Item Card with Unit Cost (Calculated) on Revaluation Journal.

      // Setup: Create and Receive Purchase Order.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(10,2),
        TRUE);  // Using Random value for Quantity.

      // Create Sales Order and run Adjust Cost Item Entries batch job.
      CreateSalesOrder(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity);
      LibraryCosting.AdjustCostItemEntries(PurchaseLine."No.",'');

      // Exercise.
      CreateItemJournalForRevaluation(ItemJournalLine,PurchaseLine."No.");

      // Verify: Verify Unit Cost on the Item Card with Unit Cost (Calculated) on Revaluation Journal.
      Item.GET(PurchaseLine."No.");
      ItemJournalLine.SETRANGE("Item No.",PurchaseLine."No.");
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Unit Cost (Calculated)",Item."Unit Cost");
      ItemJournalLine.TESTFIELD("Inventory Value (Revalued)",ROUND(Item."Unit Cost" * PurchaseLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemReclassJournalUsingNewLocationCode@30();
    VAR
      ItemLedgerEntry@1006 : Record 32;
      InventorySetup@1010 : Record 313;
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Applies-to Entry Reclassification Journal and Invoiced Quantity must be same as Item Ledger Entry.

      // Setup: Update Inventory Setup, create Reclassification Journal Line for Positive and Negative Adjustment and find Item Ledger Entry.
      Initialize;
      InventorySetup.GET;
      LibraryVariableStorage.Enqueue(ChangeExpectedCostPostingToGL);
      LibraryVariableStorage.Enqueue(ExpectedCostPostingToGLMessage);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcType);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcTypeMessage);
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateInventorySetup(InventorySetup,TRUE,TRUE,InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant");
      ReclassificationJournalUsingAdjustment(ReclassificationItemJournalLine);
      FindItemLedgerEntry(ItemLedgerEntry,ReclassificationItemJournalLine."Item No.",FALSE);

      // Exercise: Apply Reclassification Journal Line with Item Ledger Entry.
      ReclassificationItemJournalLine.VALIDATE("Applies-to Entry",ItemLedgerEntry."Entry No.");
      ReclassificationItemJournalLine.MODIFY(TRUE);
      LibraryCosting.AdjustCostItemEntries(ReclassificationItemJournalLine."Item No.",'');

      // Verify: Verify Applies-to Entry on Reclassification Journal must be same as Item Ledger Entry.
      ReclassificationItemJournalLine.TESTFIELD("Applies-to Entry",ItemLedgerEntry."Entry No.");

      // Tear Down: Rollback Sales and Receivables Setup.
      LibraryVariableStorage.Enqueue(ChangeExpectedCostPostingToGL);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcType);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcTypeMessage);
      UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Average Cost Calc. Type");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,PostedSalesDocumentLinePageHandler)]
    PROCEDURE CostAmountExpectedWithPartialSalesReturnOrder@35();
    VAR
      Item@1002 : Record 27;
      InventorySetup@1001 : Record 313;
      ItemLedgerEntry@1006 : Record 32;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify Cost Amount Expected is reversed when Sales Return Order is not fully Invoiced using Get Posted Document Lines To Reverse.

      // Setup: Create and post Purchase Order, Sales Order.Create and post Sales Return Order with partial Quantity.
      Initialize;
      LibraryVariableStorage.Enqueue(ChangeExpectedCostPostingToGL);
      LibraryVariableStorage.Enqueue(ExpectedCostPostingToGLMessage);
      InventorySetup.GET;
      UpdateInventorySetup(InventorySetup,FALSE,TRUE,InventorySetup."Average Cost Calc. Type"::Item);
      LibraryERM.SetUseLegacyGLEntryLocking(FALSE);
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None),LibraryRandom.RandDec(100,2),
        TRUE);  // Using Random value for Quantity.
      CreateAndPostSalesOrder(SalesHeader,PurchaseLine."No.",PurchaseLine.Quantity / 2);  // Sale Partial Quantity.
      CreatePostSalesReturnOrderShipOnly(SalesLine,SalesHeader."Sell-to Customer No.");
      PostPartialSalesReturn(SalesLine);

      // Exercise:
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Reversed Cost Amount Expected on Item Ledger Entry.
      Item.GET(SalesLine."No.");
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Sales Return Receipt");
      FindItemLedgerEntry(ItemLedgerEntry,SalesLine."No.",TRUE);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)");
      Assert.AreNearlyEqual(
        ItemLedgerEntry."Cost Amount (Expected)",ROUND(Item."Last Direct Cost" * SalesLine."Qty. to Invoice"),
        LibraryERM.GetAmountRoundingPrecision,ValueNotMatchedError);

      // Tear Down: Rollback Inventory Setup.
      LibraryVariableStorage.Enqueue(ChangeExpectedCostPostingToGL);
      UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Average Cost Calc. Type");
    END;

    [Test]
    [HandlerFunctions(SuggestSalesPriceOnWkshRequestPageHandler)]
    PROCEDURE SuggestSalesPriceWithCreatedNewPricesFalse@58();
    VAR
      Item@1007 : Record 27;
      SalesPrice@1000 : Record 7002;
      CustomerPriceGroup@1005 : Code[10];
      ItemNo@1001 : Code[20];
      UnitPrice@1004 : Decimal;
    BEGIN
      // Verify Suggest Sales Price on Worksheet function with Create New Prices FALSE.

      // Setup: Create Items, Customer Price Group ,Sales Prices and using Random value for Unit Price.
      Initialize;
      ItemNo := CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None);
      UnitPrice := LibraryRandom.RandDec(100,1);
      CustomerPriceGroup := CreateCustomerPriceGroup;
      SetupSuggestSalesPrice(SalesPrice,CustomerPriceGroup,CustomerPriceGroup,0,ItemNo,WORKDATE,FALSE,UnitPrice);  // Using 0 for Random date not required.

      // Verify: Verify Sales Price Worksheet.
      VerifySalesPriceWorksheet(SalesPrice,SalesPrice."Starting Date",ItemNo,SalesPrice."Sales Code",UnitPrice,UnitPrice);
      VerifySalesPriceWorksheet(
        SalesPrice,SalesPrice."Starting Date",SalesPrice."Item No.",SalesPrice."Sales Code",SalesPrice."Unit Price",
        SalesPrice."Unit Price");
    END;

    [Test]
    [HandlerFunctions(SuggestSalesPriceOnWkshRequestPageHandler)]
    PROCEDURE SuggestSalesPriceWithDifferentEndingDate@51();
    VAR
      Item@1003 : Record 27;
      SalesPrice@1000 : Record 7002;
      SalesPriceWorksheet@1002 : Record 7023;
      ItemNo@1001 : Code[20];
      CustomerPriceGroup@1005 : Code[10];
      UnitPrice@1004 : Decimal;
    BEGIN
      // Verify Suggest Sales Price not Created if New Prices FALSE and apply Filter with different Ending Date.

      // Setup: Create Items, Customer Price Group ,Sales Prices and using Random value for Unit Price.
      Initialize;
      ItemNo := CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None);
      UnitPrice := LibraryRandom.RandDec(100,1);
      CustomerPriceGroup := CreateCustomerPriceGroup;
      SetupSuggestSalesPrice(
        SalesPrice,CustomerPriceGroup,CustomerPriceGroup,LibraryRandom.RandInt(5),ItemNo,WORKDATE,FALSE,UnitPrice);  // Calculate Random value to Calculate Ending Date.

      // Exercise: Run Suggest Sales Price on Worksheet.
      ASSERTERROR SalesPriceWorksheet.GET(
          SalesPrice."Starting Date",SalesPrice."Ending Date",SalesPrice."Sales Type",SalesPrice."Sales Code",'',ItemNo,'',
          SalesPrice."Unit of Measure Code",0);  // 0 for Minimum Amount.

      // Verify: Verify Sales Price Worksheet Error.
      Assert.ExpectedError(SalesPriceWorksheetError);
    END;

    [Test]
    [HandlerFunctions(SuggestSalesPriceOnWkshRequestPageHandler)]
    PROCEDURE SuggestSalesPriceWithCreatedNewPricesTrue@50();
    VAR
      Item@1001 : Record 27;
      SalesPrice@1000 : Record 7002;
      CustomerPriceGroup@1005 : Code[10];
      CustomerPriceGroup2@1007 : Code[10];
      ItemNo@1008 : Code[20];
      StartingDate@1003 : Date;
      UnitPrice@1004 : Decimal;
    BEGIN
      // Verify Suggest Sales Price on Worksheet function with Create New Prices TRUE.

      // Setup: Create Items, Customer Price Group ,Sales Prices and using Random value for Unit Price.
      Initialize;
      ItemNo := CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None);
      UnitPrice := LibraryRandom.RandDec(100,1);
      CustomerPriceGroup := CreateCustomerPriceGroup;
      CustomerPriceGroup2 := CreateCustomerPriceGroup;
      StartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);  // Calculate Random Starting Date.
      SetupSuggestSalesPrice(SalesPrice,CustomerPriceGroup,CustomerPriceGroup2,0,ItemNo,StartingDate,TRUE,UnitPrice);  // Using 0 for Random date not required.

      // Verify: Verify Sales Price Worksheet.
      VerifySalesPriceWorksheet(SalesPrice,WORKDATE,ItemNo,CustomerPriceGroup2,0,UnitPrice);
      VerifySalesPriceWorksheet(SalesPrice,WORKDATE,SalesPrice."Item No.",CustomerPriceGroup2,0,SalesPrice."Unit Price");
    END;

    [Test]
    [HandlerFunctions(SuggestSalesPriceOnWkshRequestPageHandler)]
    PROCEDURE SuggestSalesPriceWithNewPricesTrueAndDifferentCustomePriceGroup@47();
    VAR
      Item@1001 : Record 27;
      SalesPrice@1000 : Record 7002;
      CustomerPriceGroup@1005 : Code[10];
      CustomerPriceGroup2@1007 : Code[10];
      ItemNo@1009 : Code[20];
      StartingDate@1008 : Date;
      UnitPrice@1004 : Decimal;
    BEGIN
      // Verify Suggest Sales Price not Created if New Prices TRUE and apply Filter with different Customer Price Group.

      // Setup: Create Items, Customer Price Group ,Sales Prices and using Random value for Unit Price.
      Initialize;
      ItemNo := CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None);
      UnitPrice := LibraryRandom.RandDec(100,1);
      CustomerPriceGroup := CreateCustomerPriceGroup;
      CustomerPriceGroup2 := CreateCustomerPriceGroup;

      StartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);  // Calculate Random Starting Date.
      SetupSuggestSalesPrice(SalesPrice,CustomerPriceGroup,CustomerPriceGroup2,0,ItemNo,StartingDate,TRUE,UnitPrice);  // Using 0 for Random date not required.

      // Exercise: Run Suggest Sales Price on Worksheet.
      ASSERTERROR VerifySalesPriceWorksheet(SalesPrice,WORKDATE,ItemNo,CustomerPriceGroup,0,UnitPrice);

      // Verify: Verify Sales Price Worksheet Error.
      Assert.ExpectedError(SalesPriceWorksheetError);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE PostSalesOrderWithDropShptAndSpclOrder@61();
    VAR
      Item@1000 : Record 27;
      Customer@1001 : Record 18;
      SalesPrice@1003 : Record 7002;
      SalesLine@1002 : Record 37;
      PurchasePrice@1005 : Record 7012;
      SalesHeader@1007 : Record 36;
      PurchaseHeader@1016 : Record 38;
      PurchaseHeader1@1004 : Record 38;
      LineDicountPct@1006 : Decimal;
      DocumentNo@1017 : Code[20];
    BEGIN
      // Verify Line Discount and Unit Price on posted Sales Invoice created from Drop Shipment and Special Order.

      // Setup: Create Item, create Vendor, Customer and update Line Discount, Unit Price.
      Initialize;
      Item.GET(CreateAndUpdateItem(CreateVendor));
      LibrarySales.CreateCustomer(Customer);

      // Use random for Unit Price and Minimum Quantity.
      CreateAndUpdateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::Customer,Customer."No.",Item."No.",Item."Base Unit of Measure",WORKDATE,WORKDATE,
        LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2));
      LineDicountPct := LibraryRandom.RandDec(10,2);  // Take random for Line Discount Pct.
      CreateLineDiscForCustomer(SalesPrice,LineDicountPct);
      CreateAndUpdatePurchasePrice(PurchasePrice,Item."Vendor No.",Item."No.");
      CreateLineDiscForVendor(PurchasePrice);

      // Create Sales Order with Drop Shipment and Special Order, Get Sales Order On Requisition Worksheet and Carry Out Action Msg.
      CreateAndUpdateSalesLine(
        SalesHeader,Item."No.",Customer."No.",SalesPrice."Minimum Quantity" + LibraryRandom.RandDec(10,2));  // Take Quantity more than Minimum Quantity.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      GetSalesOrderOnReqWkshtAndCarryOutActionMsg(Item."No.");

      // Receive Purchase Order.
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Item."Vendor No.");
      PurchaseHeader.FINDFIRST;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Get Drop Shipment order in new Purchase Order.
      // because it's not allowed to get both Special Order and Drop Shipment in single Purchase Order,
      CreatePurchaseHeader(PurchaseHeader1,PurchaseHeader1."Document Type"::Order,Item."Vendor No.");
      PurchaseHeader1.VALIDATE("Sell-to Customer No.",Customer."No.");
      PurchaseHeader1.MODIFY(TRUE);
      LibraryPurchase.GetDropShipment(PurchaseHeader1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,FALSE);

      // Exercise: Post Sales Order.
      DocumentNo := PostSalesDocument(SalesLine,TRUE,TRUE);

      // Verify: Verify Line Discount and Unit Price On Posted Sales Invoice Line.
      VerifySalesInvoiceLine(DocumentNo,TRUE,SalesPrice."Unit Price",LineDicountPct);
      VerifySalesInvoiceLine(DocumentNo,FALSE,SalesPrice."Unit Price",LineDicountPct);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      // Clear Global variables.
      GlobalItemNo := '';
      GlobalVendorNo := '';
      GlobalQuantity := 0;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CloseInventoryPeriod@161(VAR InventoryPeriod@1000 : Record 5814;ItemNo@1004 : Code[20];ReOpen@1003 : Boolean);
    VAR
      CloseInventoryPeriod@1002 : Codeunit 5820;
    BEGIN
      LibraryCosting.AdjustCostItemEntries(ItemNo,'');  // Using blank value for Item Category.
      LibraryInventory.CreateInventoryPeriod(InventoryPeriod,WORKDATE);
      CloseInventoryPeriod.SetReOpen(ReOpen);
      CloseInventoryPeriod.SetHideDialog(TRUE);
      CloseInventoryPeriod.RUN(InventoryPeriod);
    END;

    LOCAL PROCEDURE CreateAndModifyLocation@11(VAR Location@1001 : Record 14;BaseCalendarCode@1002 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Base Calendar Code",BaseCalendarCode);
      EVALUATE(Location."Inbound Whse. Handling Time",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');  // Random value is taken for Handling Time and 'D' is used for Day.
      Location.VALIDATE("Outbound Whse. Handling Time",Location."Inbound Whse. Handling Time");
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesPrice@45(VAR SalesPrice@1000 : Record 7002;SalesType@1007 : Option;SalesCode@1004 : Code[20];ItemNo@1002 : Code[20];BaseUnitOfMeasure@1001 : Code[10];StartingDate@1006 : Date;EndingDate@1003 : Date;UnitPrice@1005 : Decimal;MinimumQuantity@1008 : Decimal);
    BEGIN
      LibraryCosting.CreateSalesPrice(SalesPrice,SalesType,SalesCode,ItemNo,StartingDate,'','',BaseUnitOfMeasure,MinimumQuantity);
      SalesPrice.VALIDATE("Unit Price",UnitPrice);
      SalesPrice.VALIDATE("Ending Date",EndingDate);
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesLine@131(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];CustomerNo@1003 : Code[20];Quantity@1006 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLineWithPurchCode(SalesHeader,ItemNo,CreatePurchasingCode(TRUE,FALSE),Quantity);
      CreateSalesLineWithPurchCode(SalesHeader,ItemNo,CreatePurchasingCode(FALSE,TRUE),Quantity);
    END;

    LOCAL PROCEDURE CreateAndUpdateItem@69(VendorNo@1000 : Code[20]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None));
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdatePurchasePrice@99(VAR PurchasePrice@1002 : Record 7012;VendorNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendorNo,ItemNo,WORKDATE,'','','',LibraryRandom.RandDec(10,2));  // Use random for Minimum Quanity.
      PurchasePrice.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));  // Use random for Direct Unit Cost.
      PurchasePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBaseCalendarChange@3(VAR BaseCalendarChange@1005 : Record 7601;BaseCalendarCode@1001 : Code[10];Day@1003 : Option;Day2@1004 : Option);
    BEGIN
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendarCode,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,Day);  // '0D' is taken for blank date.
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendarCode,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,Day2);  // '0D' is taken for blank date.
    END;

    LOCAL PROCEDURE CreateCurrency@23() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomerPriceGroup@41() : Code[10];
    VAR
      CustomerPriceGroup@1000 : Record 6;
    BEGIN
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      CustomerPriceGroup.VALIDATE("Allow Invoice Disc.",TRUE);
      CustomerPriceGroup.VALIDATE("Allow Line Disc.",TRUE);
      CustomerPriceGroup.MODIFY(TRUE);
      EXIT(CustomerPriceGroup.Code);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@73(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1002 : Code[10];JournalBatchName@1003 : Code[10];EntryType@1006 : Option;ItemNo@1005 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,JournalTemplateName,JournalBatchName,EntryType,ItemNo,LibraryRandom.RandInt(100));  // Taking Random Quantity.
    END;

    LOCAL PROCEDURE CreateLineDiscForCustomer@104(SalesPrice@1000 : Record 7002;LineDiscountPct@1001 : Decimal);
    VAR
      SalesLineDiscount@1002 : Record 7004;
    BEGIN
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,SalesPrice."Item No.",SalesLineDiscount."Sales Type"::Customer,
        SalesPrice."Sales Code",WORKDATE,'','','',SalesPrice."Minimum Quantity");
      SalesLineDiscount.VALIDATE("Line Discount %",LineDiscountPct);
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLineDiscForVendor@109(PurchasePrice@1004 : Record 7012);
    VAR
      PurchaseLineDiscount@1002 : Record 7014;
    BEGIN
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,PurchasePrice."Item No.",PurchasePrice."Vendor No.",WORKDATE,'','','',PurchasePrice."Minimum Quantity");
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));  // Take random for Line Discount.
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithBaseCalendar@14(VAR TransferLine@1017 : Record 5741);
    VAR
      BaseCalendar@1000 : Record 7600;
      BaseCalendar2@1005 : Record 7600;
      BaseCalendarChange@1012 : Record 7601;
    BEGIN
      LibraryService.CreateBaseCalendar(BaseCalendar);
      LibraryService.CreateBaseCalendar(BaseCalendar2);
      CreateBaseCalendarChange(BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange.Day::Saturday,BaseCalendarChange.Day::Sunday);
      CreateBaseCalendarChange(BaseCalendarChange,BaseCalendar2.Code,BaseCalendarChange.Day::Sunday,BaseCalendarChange.Day::Monday);
      CreateTransferOrderWithModifiedLocation(TransferLine,BaseCalendar.Code,BaseCalendar2.Code);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithModifiedLocation@64(VAR TransferLine@1002 : Record 5741;BaseCalendarCode@1000 : Code[10];BaseCalendarCode2@1001 : Code[10]);
    VAR
      Location@1005 : Record 14;
      Location2@1004 : Record 14;
    BEGIN
      CreateAndModifyLocation(Location,BaseCalendarCode);
      CreateAndModifyLocation(Location2,BaseCalendarCode2);
      CreateTransferOrder(TransferLine,Location.Code,Location2.Code);
    END;

    LOCAL PROCEDURE CreateTransferOrder@95(VAR TransferLine@1006 : Record 5741;LocationCode@1002 : Code[10];LocationCode2@1003 : Code[10]);
    VAR
      Location@1000 : Record 14;
      TransferHeader@1005 : Record 5740;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(Location);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationCode,LocationCode2,Location.Code);
      LibraryWarehouse.CreateTransferLine(
        TransferHeader,TransferLine,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));  // Random value taken for Quantity.
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@29(VAR PurchaseLine@1002 : Record 39;DocumentType@1003 : Option;BuyFromVendorNo@1004 : Code[20];No@1005 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));  // Using Random value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@5(VAR PurchaseHeader@1003 : Record 38;DocumentType@1000 : Option;BuyFromVendorNo@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCode@116(DropShipment@1000 : Boolean;SpecialOrder@1001 : Boolean) : Code[10];
    VAR
      Purchasing@1002 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",DropShipment);
      Purchasing.VALIDATE("Special Order",SpecialOrder);
      Purchasing.MODIFY(TRUE);
      EXIT(Purchasing.Code);
    END;

    LOCAL PROCEDURE CreateItem@6(CostingMethod@1003 : Option;OrderTrackingPolicy@1004 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemJournalForRevaluation@56(VAR ItemJournalLine@1001 : Record 83;ItemNo@1000 : Code[20]);
    VAR
      ItemJournalBatch@1002 : Record 233;
      Item@1003 : Record 27;
      CalculatePer@1005 : 'Item Ledger Entry,Item';
      CalcBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      CreateRevaluationJournalBatch(ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryCosting.CalculateInventoryValue(
        ItemJournalLine,Item,WORKDATE,LibraryUtility.GetGlobalNoSeriesCode,CalculatePer::Item,FALSE,FALSE,FALSE,CalcBase::" ",FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@7(VAR ServiceLine@1000 : Record 5902;No@1004 : Code[20];Quantity@1008 : Decimal);
    VAR
      Customer@1001 : Record 18;
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1005 : Record 5901;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateServiceDocument(ServiceLine,ServiceHeader."Document Type"::Order,Customer."No.",No,Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@40(VAR SalesLine@1005 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      UpdateUnitCostOnSalesLine(SalesLine,LibraryRandom.RandDec(100,1));  // Using Random for UnitCostLCY.
    END;

    LOCAL PROCEDURE CreateServiceDocument@44(VAR ServiceLine@1000 : Record 5902;DocumentType@1004 : Option;CustomerNo@1001 : Code[20];No@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      ServiceHeader@1006 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,No);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Using Random value for Unit Cost.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTrackedItem@27(LotNos@1003 : Code[10];SerialNos@1002 : Code[10];LotSpecificTracking@1006 : Boolean;SerialNoSpecificTracking@1004 : Boolean;CostingMethod@1000 : Option) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,FindItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking));
      EVALUATE(Item."Expiration Calculation",'<' + FORMAT(RANDOM(5)) + 'D>'); // Using Random value for Expiration Calculation.
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@10(VAR PurchaseLine@1004 : Record 39;No@1012 : Code[20];Quantity@1002 : Decimal;Invoice@1000 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseDocument(PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor,No,Quantity);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@57(VAR SalesHeader@1002 : Record 36;No@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesLine,No,Quantity);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      SalesLine.MODIFY(TRUE);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostSalesReturnOrderShipOnly@78(VAR SalesLine@1002 : Record 37;SellToCustomerNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SellToCustomerNo);
      SalesReturnOrderGetPostedDocumentLinesToReverse(SalesHeader."No.");
      FindAndUpdateSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    LOCAL PROCEDURE CreateRevaluationJournalBatch@32(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateSalesLineWithPurchCode@138(SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];PurchasingCode@1001 : Code[10];Quantity@1004 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@18() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE EnqueVariables@37(BaseUnitOfMeasure@1003 : Code[10];CustomerPriceGroup@1000 : Code[10];EndingDate@1001 : Date;NewPrices@1002 : Boolean);
    VAR
      SalesPrice@1004 : Record 7002;
    BEGIN
      LibraryVariableStorage.Enqueue(CustomerPriceGroup);  // Enque Customer Price Group
      LibraryVariableStorage.Enqueue(EndingDate); // EndingDate
      LibraryVariableStorage.Enqueue(NewPrices);  // New Price
      LibraryVariableStorage.Enqueue(SalesPrice."Sales Type"::"Customer Price Group");
      LibraryVariableStorage.Enqueue(WORKDATE);  // StartDate
      LibraryVariableStorage.Enqueue(BaseUnitOfMeasure);
    END;

    LOCAL PROCEDURE FindAndUpdateSalesLine@38(VAR SalesLine@1002 : Record 37;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETFILTER(Type,'<>''''');
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemTrackingCode@54(LotSpecificTracking@1002 : Boolean;SerialNoSpecificTracking@1003 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.SETRANGE("Lot Specific Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Specific Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@31(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];Positive@1002 : Boolean);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE(Positive,Positive);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrderLine@34(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@82(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetSalesOrderOnReqWkshtAndCarryOutActionMsg@88(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1003 : Record 246;
      RequisitionWkshName@1002 : Record 245;
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate.Name,RequisitionWkshName.Name);
      LibraryPlanning.GetSpecialOrder(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE ModifyServiceLine@9(VAR ServiceLine@1000 : Record 5902;EntryNo@1001 : Integer);
    BEGIN
      ServiceLine.VALIDATE("Appl.-from Item Entry",EntryNo);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyPurchaseLine@12(VAR PurchaseLine@1000 : Record 39;EntryNo@1001 : Integer);
    BEGIN
      PurchaseLine.VALIDATE("Appl.-to Item Entry",EntryNo);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyItemJournalLine@28(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Taking Random Unit Cost.
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenOrderTracking@52(VAR PurchaseLine@1001 : Record 39);
    VAR
      PurchaseOrderSubform@1000 : Page 54;
    BEGIN
      PurchaseOrderSubform.SETRECORD(PurchaseLine);
      PurchaseOrderSubform.ShowTracking;
    END;

    LOCAL PROCEDURE PostProductionJournal@43(VAR ProductionOrder@1001 : Record 5405);
    VAR
      ProdOrderLine@1003 : Record 5406;
      ItemJournalLine@1002 : Record 83;
      ProductionJournalMgt@1000 : Codeunit 5510;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;

      ProductionJournalMgt.InitSetupValues;
      ProductionJournalMgt.SetTemplateAndBatchName;
      ProductionJournalMgt.CreateJnlLines(ProductionOrder,ProdOrderLine."Line No.");
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Document No.",ProductionOrder."No.");
      ItemJournalLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithItemTracking@33(VAR PurchaseLine@1001 : Record 39;LotNos@1006 : Code[10];SerialNos@1005 : Code[10];LotSpecificTracking@1003 : Boolean;SerialNoSpecificTracking@1002 : Boolean;ItemTrackingAction@1004 : Option;CostingMethod@1007 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      GlobalItemNo := CreateTrackedItem(LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking,CostingMethod);  // Assign Item No. to global variable and blank value is taken for Serial No.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,GlobalItemNo,LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      GlobalVendorNo := PurchaseHeader."Buy-from Vendor No.";
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      GlobalItemTrackingAction := ItemTrackingAction;
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostPartialSalesReturn@48(VAR SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" / 2);
      SalesLine.MODIFY(TRUE);
      PostSalesDocument(SalesLine,FALSE,TRUE);  // Invoice partial Quantity.
    END;

    LOCAL PROCEDURE PostSalesDocument@81(SalesLine@1000 : Record 37;Ship@1003 : Boolean;Invoice@1001 : Boolean) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice));
    END;

    LOCAL PROCEDURE ReclassificationJournalUsingAdjustment@24(VAR ReclassificationItemJournalLine@1000 : Record 83);
    VAR
      Item@1013 : Record 27;
      ItemJournalLine@1002 : Record 83;
      ItemJournalBatch@1012 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
      Location@1001 : Record 14;
      ReclassificationItemJournalTemplate@1004 : Record 82;
      ReclassificationItemJournalBatch@1003 : Record 233;
      ItemNo@1006 : Code[20];
      Quantity@1007 : Decimal;
    BEGIN
      // Use Random value for Quantity.
      Quantity := LibraryRandom.RandDec(100,2);
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Transfer);
      ItemNo := CreateItem(Item."Costing Method"::Average,Item."Order Tracking Policy"::None);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",ItemNo,Quantity + LibraryRandom.RandDec(10,2));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      LibraryWarehouse.CreateLocation(Location);
      SelectItemJournalBatch(ReclassificationItemJournalBatch,ReclassificationItemJournalTemplate.Type::Transfer);
      LibraryInventory.CreateItemJournalLine(
        ReclassificationItemJournalLine,ReclassificationItemJournalBatch."Journal Template Name",
        ReclassificationItemJournalBatch.Name,ReclassificationItemJournalLine."Entry Type"::Transfer,ItemNo,
        -LibraryRandom.RandDec(10,2));
      ReclassificationItemJournalLine.VALIDATE("New Location Code",Location.Code);
      ReclassificationItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunSuggestSalesPriceOnWkshReport@15(CustomerPriceGroup@1002 : Code[10];StartingDate@1003 : Date;EndingDate@1004 : Date);
    VAR
      SalesPrice@1000 : Record 7002;
      SuggestSalesPriceOnWksh@1001 : Report 7052;
    BEGIN
      CLEAR(SuggestSalesPriceOnWksh);
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group");
      SalesPrice.SETRANGE("Sales Code",CustomerPriceGroup);
      SalesPrice.SETRANGE("Starting Date",StartingDate);
      SalesPrice.SETRANGE("Ending Date",EndingDate);
      SuggestSalesPriceOnWksh.SETTABLEVIEW(SalesPrice);
      SuggestSalesPriceOnWksh.USEREQUESTPAGE(TRUE);
      SuggestSalesPriceOnWksh.RUNMODAL;
    END;

    LOCAL PROCEDURE SalesReturnOrderGetPostedDocumentLinesToReverse@36(No@1001 : Code[20]);
    VAR
      SalesReturnOrder@1000 : TestPage 6630;
    BEGIN
      COMMIT;
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",No);
      SalesReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE SetupApplyServiceDocument@25(VAR ServiceLine@1000 : Record 5902;No@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      CreateAndUpdateServiceLine(ServiceLine,No,Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      CreateServiceDocument(ServiceLine,ServiceHeader."Document Type"::"Credit Memo",ServiceHeader."Customer No.",No,Quantity);
    END;

    LOCAL PROCEDURE ServiceDocumentWithPurchaseOrder@49(VAR ServiceLine@1003 : Record 5902;TrackingAction@1001 : Option;LotNo@1002 : Code[10];LotSpecific@1004 : Boolean;SerialSpecific@1005 : Boolean;GlobalAction@1006 : Option);
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1007 : Record 39;
      ServiceHeader@1008 : Record 5900;
    BEGIN
      PostPurchaseOrderWithItemTracking(
        PurchaseLine,LotNo,LibraryUtility.GetGlobalNoSeriesCode,LotSpecific,SerialSpecific,GlobalAction,Item."Costing Method"::FIFO);
      CreateAndUpdateServiceLine(ServiceLine,GlobalItemNo,PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      GlobalItemTrackingAction := TrackingAction;
    END;

    LOCAL PROCEDURE SetupProductionItem@84(CostingMethod@1003 : Option;ReplenishmentSystem@1008 : Option;StandardCost@1007 : Decimal) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(CreateItem(CostingMethod,Item."Order Tracking Policy"::None));
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Standard Cost",StandardCost);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE SetupSuggestSalesPrice@55(VAR SalesPrice@1005 : Record 7002;CustomerPriceGroup@1008 : Code[10];CustomerPriceGroup2@1009 : Code[10];Range@1003 : Integer;ItemNo@1000 : Code[20];StartingDate@1010 : Date;NewPrice@1011 : Boolean;UnitPrice@1002 : Decimal);
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      SalesPriceWorksheet@1004 : Record 7023;
      EndingDate@1001 : Date;
    BEGIN
      Item.GET(ItemNo);
      Item2.GET(CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::None));
      EndingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);  // Calculate Random Ending Date.

      CreateAndUpdateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup,Item."No.",Item."Base Unit of Measure",
        StartingDate,EndingDate,UnitPrice,0);
      CreateAndUpdateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup,Item2."No.",Item2."Base Unit of Measure",
        StartingDate,EndingDate,LibraryRandom.RandDec(100,1),0);
      SalesPriceWorksheet.DELETEALL;
      EnqueVariables(Item."Base Unit of Measure",CustomerPriceGroup2,CALCDATE('<' + FORMAT(Range) + 'M>',EndingDate),NewPrice);  // Calcualte Ending Date Parameter as different Tests required.
      COMMIT;

      // Exercise: Run Suggest Sales Price on Worksheet.
      RunSuggestSalesPriceOnWkshReport(CustomerPriceGroup,StartingDate,EndingDate);
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@26(VAR ItemJournalBatch@1002 : Record 233;Type@1001 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE UpdateAddCurrencySetup@42(CurrencyCode@1001 : Code[10]);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Additional Reporting Currency" := CurrencyCode;
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoShipment@77(OrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      ServiceShipmentLine.FINDFIRST;
      LibraryService.UndoShipmentLinesByServiceDocNo(ServiceShipmentLine."Document No.");
    END;

    LOCAL PROCEDURE UpdateInventorySetup@53(InventorySetup@1001 : Record 313;AutomaticCostPosting@1000 : Boolean;ExpectedCostPostingtoGL@1002 : Boolean;AverageCostCalcType@1003 : Option);
    BEGIN
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,AutomaticCostPosting,ExpectedCostPostingtoGL,InventorySetup."Automatic Cost Adjustment",AverageCostCalcType,
        InventorySetup."Average Cost Period"::Day);
    END;

    LOCAL PROCEDURE UpdateItemCostInfo@145(VAR Item@1001 : Record 27);
    VAR
      ItemCost@1000 : Decimal;
    BEGIN
      ItemCost := LibraryRandom.RandInt(10); // Using Random value for all below used field.
      Item.VALIDATE("Indirect Cost %",ItemCost);
      Item.VALIDATE("Overhead Rate",ItemCost);
      Item.VALIDATE("Standard Cost",ItemCost);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnSalesLine@67(VAR SalesLine@1000 : Record 37;UnitCostLCY@1003 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Unit Cost (LCY)",UnitCostLCY);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@17(ItemNo@1002 : Code[20];Positive@1003 : Boolean;Quantity@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,Positive);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Expected)",0);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",0);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Expected) (ACY)",0);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual) (ACY)",0);
    END;

    LOCAL PROCEDURE VerifyValueEntryLines@129(VAR ValueEntry@1000 : Record 5802;ItemNo@1004 : Code[20];EntryType@1001 : Option;DocumentType@1002 : Option;Adjustment@1003 : Boolean);
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Entry Type",EntryType);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE(Adjustment,Adjustment);
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyItemLedgerCostAmount@117(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;CostAmountActual@1003 : Decimal;Positive@1004 : Boolean);
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,Positive);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",CostAmountActual);
    END;

    LOCAL PROCEDURE VerifyItemApplicationEntry@227(EntryNo@1003 : Integer;Quantity@1002 : Decimal);
    VAR
      ItemApplicationEntry@1000 : Record 339;
    BEGIN
      ItemApplicationEntry.SETRANGE("Item Ledger Entry No.",EntryNo);
      ItemApplicationEntry.SETRANGE("Cost Application",FALSE);
      ItemApplicationEntry.FINDFIRST;
      ItemApplicationEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesPriceWorksheet@83(SalesPrice@1000 : Record 7002;StartingDate@1006 : Date;ItemNo@1003 : Code[20];SalesCode@1005 : Code[20];CurrentUnitPrice@1004 : Decimal;NewUnitPrice@1002 : Decimal);
    VAR
      SalesPriceWorksheet@1001 : Record 7023;
    BEGIN
      SalesPriceWorksheet.GET(
        StartingDate,SalesPrice."Ending Date",SalesPrice."Sales Type",SalesCode,SalesPrice."Currency Code",ItemNo,
        SalesPrice."Variant Code",SalesPrice."Unit of Measure Code",SalesPrice."Minimum Quantity");
      SalesPriceWorksheet.TESTFIELD("New Unit Price",NewUnitPrice);
      SalesPriceWorksheet.TESTFIELD("Current Unit Price",CurrentUnitPrice);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceLine@62(DocumentNo@1000 : Code[20];DropShipment@1001 : Boolean;UnitPrice@1002 : Decimal;LineDiscountPct@1003 : Decimal);
    VAR
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE("Drop Shipment",DropShipment);
      SalesInvoiceLine.FINDFIRST;

      SalesInvoiceLine.TESTFIELD("Unit Price",UnitPrice);
      SalesInvoiceLine.TESTFIELD("Line Discount %",LineDiscountPct);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@60(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      COMMIT;
      CASE GlobalItemTrackingAction OF
        GlobalItemTrackingAction::SelectEntriesLotNo:
          ItemTrackingLines."Select Entries".INVOKE;
        GlobalItemTrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@173(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinePageHandler@71(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE('Posted Invoices');
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseLineTrackingPageHandler@142(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Item No.".ASSERTEQUALS(GlobalItemNo);
      OrderTracking."Total Quantity".ASSERTEQUALS(GlobalQuantity);
      OrderTracking.Quantity.ASSERTEQUALS(-GlobalQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@128(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(GlobalQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE AutoReservUsingReservationPageHandler@92(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestSalesPriceOnWkshRequestPageHandler@59(VAR SuggestSalesPriceOnWksh@1000 : TestRequestPage 7052);
    VAR
      CustomerPriceGroupCode@1001 : Variant;
      EndDate@1006 : Variant;
      NewPrices@1005 : Variant;
      SalesType@1004 : Variant;
      StartDate@1003 : Variant;
      UnitOfMeasureCode@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerPriceGroupCode);
      LibraryVariableStorage.Dequeue(EndDate);
      LibraryVariableStorage.Dequeue(NewPrices);
      LibraryVariableStorage.Dequeue(SalesType);
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(UnitOfMeasureCode);

      SuggestSalesPriceOnWksh.SalesType.SETVALUE(SalesType);
      SuggestSalesPriceOnWksh.SalesCodeCtrl.SETVALUE(CustomerPriceGroupCode);
      SuggestSalesPriceOnWksh.UnitOfMeasureCode.SETVALUE(UnitOfMeasureCode);
      SuggestSalesPriceOnWksh.ToStartDateCtrl.SETVALUE(StartDate);
      SuggestSalesPriceOnWksh.ToEndDateCtrl.SETVALUE(EndDate);
      SuggestSalesPriceOnWksh.CreateNewPrices.SETVALUE(NewPrices);
      SuggestSalesPriceOnWksh.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE ViewAppliedEntriesPageHandler@72(VAR ViewAppliedEntries@1000 : TestPage 522);
    VAR
      AppliedQuantity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AppliedQuantity);
      ViewAppliedEntries.FILTER.SETFILTER("Item No.",GlobalItemNo);
      ViewAppliedEntries."Invoiced Quantity".ASSERTEQUALS(GlobalQuantity);
      ViewAppliedEntries.ApplQty.ASSERTEQUALS(AppliedQuantity);
      ViewAppliedEntries.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@63(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@39(ExpectedMessage@1000 : Text[1024]);
    VAR
      Message@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Message);  // Dequeue variable.
      Assert.IsTrue(STRPOS(ExpectedMessage,Message) > 0,ExpectedMessage);
    END;

    [ModalPageHandler]
    PROCEDURE SalesListPageHandler@79(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Inventory Costing] [SCM]
      Test for Costing Orders:
        1. Verify Receipt Date on Transfer Line.
        2. Verify Shipment Date on Transfer Line with updated Transfer Header's Shipment Date.
        3. Verify Working Day on Base Calendar Changes must not exist.
        4. Verify Application using Appl.-from Item Entry field on Service Line.
        5. Verify Application using Appl.-to Item Entry field on Purchase Return Order.
        6. Verify Adjusted Cost Amount in Value Entry.
        7. Verify Error while applying on Service Credit Memo.
        8. Verify Error while posting Service Order with Item Tracking Lot Number.
        9. Verify Error while Applying Return Order with 'Entry No.' from  Item Ledger Entry.
       10. Verify Error while posting Service Credit Memo.
       11. Verify Order Tracking page values using Item Ledger Entries.
       12. Verify Tracking Message using Order Tracking Policy as 'Tracking & Action Msg.'.
       13. Verify Reservation error while posting Purchase Return Order with Appl.-to Item Entry.
       14. Post Value Entry to G/L is correct with Zero Cost - Purchase.
       15. Verify Reservation using Item with Order Tracking Policy as Tracking Only.
       16. Verify Variance entry from Value Entry using Item with Standard Cost.
       17. Verify that there should be showing all value entries for Direct Cost, Variance, Service Shipment, Service Credit Memo and Adjustment.
       18. Verify Close Inventory Period error.
       19. Verify Item Ledger Entry for Positive and Negative Adjustment and Item Application Entry.
       20. Verify Adjusted Cost Amount in Value Entry.
       21. Verify Applied Quantity on View Applied Entries page.
       22. Post Value Entry to G/L is correct with Zero Cost - Sales.
       23. Post Value Entry to G/L is correct with Zero costs - ACY Cost Amount.
       24. Verify Unit Cost on the Item Card with Unit Cost (Calculated) on Revaluation Journal.
       25. Verify Applies-to Entry on Reclassification Journal must be same as Item Ledger Entry.
       26. Verify Cost Amount Expected is reversed when Sales Return Order is not fully Invoiced using Get Posted Document Lines To Reverse.
       27. Verify Suggest Sales Price on Worksheet function works well when Create New Prices is FALSE.
       28. Verify Error for Suggest Sales Price on Worksheet function works well when Create New Prices is FALSE.
       29. Verify Suggest Sales Price on Worksheet function works well when Create New Prices is TRUE.
       30. Verify Error that not possible to create Suggest Sales Price on Worksheet when Create New Prices is TRUE and Different Customer Price Group.
       31. Verify Line Discount and Unit Price on posted Sales document created from Drop Shipment and Special Order.

      Covers Test cases: for WI - 287256
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      TransferLineWithReceiptDate, TransferLineWithShipmentDate, BaseCalendarChangeError                    128856

      Covers Test cases: for WI - 290206
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      PurchaseReceiptApplyFromItemEntry, ApplyToEntryOnPurchaseReturnOrder                                  128083
      ApplyToEntryAndAdjustmentOnReturnOrder, ErrorUsingApplyFromItemEntry
      PurchaseReceiptErrorUsingLotNo, ErrorUsingApplToItemEntry, PostServiceCreditMemoError                 128084

      Covers Test cases: for WI - 292556
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      ApplyToEntryUsingOrderTracking, OrderTrackingActionMessage                                            128085
      ReservationErrorUsingServiceReturnOrder

      Covers Test cases: for WI - 273853
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      PostValueEntryToGLWithZeroPurchaseCost                                                                226913
      PostValueEntryToGLWithZeroCostACYCostAmount                                                           226915
      PostValueEntryToGLWithZeroSalesCost                                                                   226918

      Covers Test cases: for WI - 290207
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      RevaluationUsingServiceAndPurchaseOrder, VarianceInValueEntryUsingItemWithStandardCost                128086
      ValueEntryLinesUsingAdjustment
      ErrorWithCreditMemoUsingCloseInventoryPeriod                                                          128087

      Covers Test cases: for WI - 286286
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      AdjustmentUsingItemJournal, AdjustCostItemEntriesUsingItemJournal
      ApplicationWorksheetUsingItemJournal                                                                  235381

      Covers Test cases: for WI - 243265
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      ItemUnitCostUsingRevaluationJournal                                                                   229557

      Covers Test cases: for WI - 243264
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      ItemReclassJournalUsingNewLocationCode                                                                127695

      Covers Test cases: for WI - 295267
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      CostAmountExpectedWithPartialSalesReturnOrder                                                         143095

      Covers Test cases: for WI - 295390
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      SuggestSalesPriceWithCreatedNewPricesFalse,SuggestSalesPriceWithDifferentEndingDate                   230005
      SuggestSalesPriceWithCreatedNewPricesTrue,
      SuggestSalesPriceWithNewPricesTrueAndDifferentCustomePriceGroup                                       230006

      Covers Test cases: for WI - 315156
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      ------------------------------------------------------------------------------------------------------------
      PostSalesOrderWithDropShptAndSpclOrder                                                                128224
    }
    END.
  }
}

