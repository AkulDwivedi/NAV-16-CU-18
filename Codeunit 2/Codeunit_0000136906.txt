OBJECT Codeunit 136906 Job Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1010 : Codeunit 131300;
      LibraryJob@1003 : Codeunit 131920;
      LibraryResource@1006 : Codeunit 130511;
      Assert@1002 : Codeunit 130000;
      LibraryService@1001 : Codeunit 131902;
      LibraryReportDataset@1004 : Codeunit 131007;
      IsInitialized@1000 : Boolean;
      GLAccountCap@1005 : TextConst '@@@=do not translate;ENU=GLAcc__No__';
      WIPAmountCap@1009 : TextConst '@@@=do not translate;ENU=JobBuffer__Amount_1_';

    LOCAL PROCEDURE Initialize@42();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      UpdateJobPostingGroup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,JobWIPToGLReportHandler)]
    PROCEDURE JobWIPToGLBeforeJobPostWIPToGL@26();
    VAR
      Job@1001 : Record 167;
      JobPostingGroup@1002 : Record 208;
    BEGIN
      // Test functionality of Job WIP To G/L before running Job Post WIP To G/L.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP.
      Initialize;
      CreateInitialSetupForJob(Job);
      RunJobCalculateWIP(Job);

      // 2. Exercise: Run Job WIP To G/L report.
      RunJobWIPToGL(Job);

      // 3. Verify: Verify blank WIP Amount.
      LibraryReportDataset.LoadDataSetFile;
      JobPostingGroup.GET(Job."Job Posting Group");
      LibraryReportDataset.SetRange(GLAccountCap,JobPostingGroup."Job Costs Applied Account");
      Assert.IsFalse(
        LibraryReportDataset.GetNextRow,STRSUBSTNO('No records exist for account:%1',JobPostingGroup."Job Costs Applied Account"));
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,ConfirmHandlerTrue,MessageHandler,JobWIPToGLReportHandler)]
    PROCEDURE JobWIPToGLAfterJobPostWIPToGL@1();
    VAR
      Job@1001 : Record 167;
      TotalCost@1002 : Decimal;
    BEGIN
      // Test functionality of Job WIP To G/L after Job Post WIP To G/L.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP. Run Job Post WIP To G/L.
      Initialize;
      TotalCost := CreateInitialSetupForJob(Job);
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);

      // 2. Exercise: Run Job WIP To G/L report.
      RunJobWIPToGL(Job);

      // 3. Verify: Verify WIP Amount On Job WIP To G/L report.
      VerifyWIPAmountOnJobWIPToGL(Job."Job Posting Group",-TotalCost);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLine@6(VAR JobJournalLine@1001 : Record 210;JobTask@1000 : Record 1001;JobPlanningLine@1002 : Record 1003);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeContract,LibraryJob.ResourceType,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",JobPlanningLine."No.");
      JobJournalLine.VALIDATE(Quantity,JobPlanningLine.Quantity / 2);  // Use partial Quantity.
      JobJournalLine.VALIDATE("Unit Cost",JobPlanningLine."Unit Cost");
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateInitialSetupForJob@50(VAR Job@1001 : Record 167) : Decimal;
    VAR
      JobWIPMethod@1000 : Record 1006;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1004 : Record 210;
    BEGIN
      CreateJobWIPMethod(
        JobWIPMethod,JobWIPMethod."Recognized Costs"::"At Completion",JobWIPMethod."Recognized Sales"::"At Completion");
      CreateJobWithWIPMethod(Job,JobWIPMethod.Code);
      CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Posting,JobTask."WIP-Total"::" ");
      CreateJobPlanningLine(JobPlanningLine,JobTask);
      CreateAndPostJobJournalLine(JobJournalLine,JobTask,JobPlanningLine);
      CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Total,JobTask."WIP-Total"::Total);
      EXIT(JobJournalLine."Total Cost");
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@13(VAR JobPlanningLine@1001 : Record 1003;JobTask@1000 : Record 1001);
    BEGIN
      // Use Random values for Quantity and Unit Cost because values are not important.
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",LibraryResource.CreateResourceNo);
      JobPlanningLine.VALIDATE(Quantity,RANDOM(100));
      JobPlanningLine.VALIDATE("Unit Cost",RANDOM(100));
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobTask@10(VAR JobTask@1000 : Record 1001;Job@1001 : Record 167;JobTaskType@1003 : Option;WIPTotal@1002 : Option);
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE("Job Task Type",JobTaskType);
      JobTask.VALIDATE("WIP-Total",WIPTotal);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWIPMethod@2(VAR JobWIPMethod@1000 : Record 1006;RecognizedCosts@1001 : Option;RecognizedSales@1002 : Option);
    BEGIN
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);
      JobWIPMethod.VALIDATE("Recognized Costs",RecognizedCosts);
      JobWIPMethod.VALIDATE("Recognized Sales",RecognizedSales);
      JobWIPMethod.MODIFY(TRUE)
    END;

    LOCAL PROCEDURE CreateJobWithWIPMethod@23(VAR Job@1001 : Record 167;WIPMethod@1000 : Code[20]);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("WIP Method",WIPMethod);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunJobCalculateWIP@21(Job@1000 : Record 167);
    VAR
      JobCalculateWIP@1001 : Report 1086;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      CLEAR(JobCalculateWIP);
      JobCalculateWIP.SETTABLEVIEW(Job);

      // Use Document No. as Job No. because value is not important.
      JobCalculateWIP.InitializeRequest(Job."No.");
      JobCalculateWIP.USEREQUESTPAGE(FALSE);
      JobCalculateWIP.RUN;
    END;

    LOCAL PROCEDURE RunJobPostWIPToGL@22(Job@1000 : Record 167);
    VAR
      JobPostWIPToGL@1001 : Report 1085;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      CLEAR(JobPostWIPToGL);
      JobPostWIPToGL.SETTABLEVIEW(Job);
      JobPostWIPToGL.RUN;
    END;

    LOCAL PROCEDURE RunJobWIPToGL@3(Job@1001 : Record 167);
    VAR
      JobWIPToGL@1000 : Report 1010;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      CLEAR(JobWIPToGL);
      JobWIPToGL.SETTABLEVIEW(Job);
      COMMIT;
      JobWIPToGL.RUN;
    END;

    LOCAL PROCEDURE UpdateJobPostingGroup@15();
    VAR
      JobPostingGroup@1002 : Record 208;
    BEGIN
      IF JobPostingGroup.FINDSET THEN
        REPEAT
          JobPostingGroup.VALIDATE("WIP Costs Account",LibraryERM.CreateGLAccountNo);
          JobPostingGroup.VALIDATE("Job Costs Applied Account",LibraryERM.CreateGLAccountNo);
          JobPostingGroup.MODIFY(TRUE);
        UNTIL JobPostingGroup.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWIPAmountOnJobWIPToGL@5(Code@1001 : Code[20];TotalCost@1003 : Decimal);
    VAR
      JobPostingGroup@1000 : Record 208;
    BEGIN
      JobPostingGroup.GET(Code);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(GLAccountCap,JobPostingGroup."Job Costs Applied Account");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,JobPostingGroup.FIELDCAPTION("Job Costs Applied Account"));
      LibraryReportDataset.AssertCurrentRowValue(WIPAmountCap,TotalCost);
    END;

    [RequestPageHandler]
    PROCEDURE JobPostWIPToGLHandler@8(VAR JobPostWIPToGL@1000 : TestRequestPage 1085);
    BEGIN
      JobPostWIPToGL.ReversalPostingDate.SETVALUE(FORMAT(WORKDATE));
      JobPostWIPToGL.ReversalDocumentNo.SETVALUE(FORMAT(RANDOM(10)));  // Use random Reversal Document No.
      JobPostWIPToGL.UseReversalDate.SETVALUE(TRUE);
      JobPostWIPToGL.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@54(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@14(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE JobWIPToGLReportHandler@4(VAR JobWIPtoGLRequestPage@1000 : TestRequestPage 1010);
    BEGIN
      JobWIPtoGLRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Job WIP To G/L] [Job]
      Unsupported version tags:
      SE: Unable to Execute

       1. Test functionality of Job WIP To G/L before running Job Post WIP To G/L.
       2. Test functionality of Job WIP To G/L after Job Post WIP To G/L.

      Covers Test Cases for WI - 264729
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        JobWIPToGLBeforeJobPostWIPToGL, JobWIPToGLAfterJobPostWIPToGL                                            173558
    }
    END.
  }
}

