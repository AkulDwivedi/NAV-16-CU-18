OBJECT Codeunit 134712 Autom. Payment Registration.UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryVariableStorage@1003 : Codeunit 131004;

    [Test]
    PROCEDURE t273_BankAccountNo_ValidateFor_TypeBankReconciliation@2();
    VAR
      BankAccReconciliation@1001 : Record 273;
      BankAccNo@1000 : Code[20];
    BEGIN
      Initialize;

      BankAccNo := CreateBankAcc;

      BankAccReconciliation.INIT;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccNo);
      BankAccReconciliation.INSERT(TRUE);

      ValidateLastStmntsNos(BankAccNo,'1','');
    END;

    [Test]
    PROCEDURE t273_BankAccountNo_ValidateFor_TypeBankReconciliation_LastStmntNoIsExists@15();
    VAR
      BankAccount@1002 : Record 270;
      BankAccReconciliation@1001 : Record 273;
      BankAccNo@1000 : Code[20];
    BEGIN
      Initialize;

      BankAccNo := CreateBankAcc;

      BankAccount.GET(BankAccNo);
      BankAccount."Last Statement No." := '0';
      BankAccount.MODIFY;

      BankAccReconciliation.INIT;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccNo);
      BankAccReconciliation.INSERT(TRUE);

      ValidateLastStmntsNos(BankAccNo,'1','');
      Assert.AreEqual('1',BankAccReconciliation."Statement No.",'Wrong "Statement No." on BankAccReconciliation.');
    END;

    [Test]
    PROCEDURE t273_BankAccountNo_ValidateFor_TypePaymentApplication@3();
    VAR
      BankAccReconciliation@1001 : Record 273;
      BankAccNo@1000 : Code[20];
    BEGIN
      Initialize;

      BankAccNo := CreateBankAcc;

      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Payment Application";
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccNo);
      BankAccReconciliation.INSERT(TRUE);

      ValidateLastStmntsNos(BankAccNo,'','1');
      Assert.AreEqual('1',BankAccReconciliation."Statement No.",'Wrong "Statement No." on BankAccReconciliation.');
    END;

    [Test]
    PROCEDURE t237_CreateNewBankPaymentAppBatch@4();
    VAR
      BankAccReconciliationCaller@1000 : Record 273;
      BankAccReconciliation@1001 : Record 273;
      BankAccNo@1002 : Code[20];
    BEGIN
      Initialize;

      BankAccNo := CreateBankAcc;
      BankAccReconciliationCaller.CreateNewBankPaymentAppBatch(BankAccNo,BankAccReconciliation);

      ValidateLastStmntsNos(BankAccNo,'','1');
      Assert.AreEqual(
        BankAccReconciliation."Statement Type"::"Payment Application",BankAccReconciliation."Statement Type",
        '2. Wrong "Statement Type" on Bank Acc Reconciliation.');
      Assert.AreEqual(BankAccNo,BankAccReconciliation."Bank Account No.",'3. Wrong "Bank Account No." on Bank Acc Reconciliation.');
    END;

    [Test]
    PROCEDURE t237_CreateNewBankPaymentAppBatch_WrongBancAcc@5();
    VAR
      BankAccReconciliationCaller@1002 : Record 273;
      BankAccReconciliation@1001 : Record 273;
      BankAccNo@1000 : Code[20];
    BEGIN
      Initialize;

      BankAccNo := COPYSTR(CREATEGUID,1,20);
      ASSERTERROR
        BankAccReconciliationCaller.CreateNewBankPaymentAppBatch(BankAccNo,BankAccReconciliation);

      Assert.ExpectedError(BankAccNo);
    END;

    [Test]
    PROCEDURE t273_SetFiltersOnBankAccReconLineTable@1();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      TestStatementNo@1002 : Code[20];
    BEGIN
      Initialize;

      InsertDummyBankReconHeaderAndLine(0,'0',BankAccReconciliation);
      InsertDummyBankReconHeaderAndLine(1,'0',BankAccReconciliation);
      TestStatementNo := 'TEST1';
      InsertDummyBankReconHeaderAndLine(1,TestStatementNo,BankAccReconciliation);

      BankAccReconciliation.SetFiltersOnBankAccReconLineTable(
        BankAccReconciliation,BankAccReconciliationLine);

      BankAccReconciliationLine.FINDFIRST;

      Assert.AreEqual(
        1,BankAccReconciliationLine.COUNT,'1.Wrong filtering on BankAccReconciliationLine table.');

      Assert.AreEqual(
        TestStatementNo,BankAccReconciliationLine."Statement No.",'2.Wrong filtering on BankAccReconciliationLine table.');
    END;

    [Test]
    [HandlerFunctions(UIConfirmHandler)]
    PROCEDURE Post_YesNo@23();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      Initialize;

      InsertDummyBankReconHeaderAndLine(1,'0',BankAccReconciliation);
      BankAccReconciliation.SetFiltersOnBankAccReconLineTable(
        BankAccReconciliation,BankAccReconciliationLine);

      BankAccReconciliationLine.FINDFIRST;

      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Bank Acc. Recon. Post (Yes/No)",BankAccReconciliation);
      Assert.ExpectedError(BankAccReconciliationLine.FIELDCAPTION("Account No."));
    END;

    LOCAL PROCEDURE Initialize@7();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE InsertDummyBankReconHeaderAndLine@12(StatementType@1002 : Option;StatementNo@1003 : Code[20];VAR BankAccReconciliation@1001 : Record 273);
    VAR
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := StatementType;
      BankAccReconciliation."Bank Account No." := CreateBankAcc;
      BankAccReconciliation."Statement No." := StatementNo;
      BankAccReconciliation.INSERT;

      BankAccReconciliationLine.INIT;
      BankAccReconciliationLine."Statement Type" := StatementType;
      BankAccReconciliationLine."Bank Account No." := BankAccReconciliation."Bank Account No.";
      BankAccReconciliationLine."Statement No." := StatementNo;
      BankAccReconciliationLine."Statement Amount" := 1;
      BankAccReconciliationLine.INSERT;
    END;

    LOCAL PROCEDURE CreateBankAcc@9() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      BankAccount.INIT;
      BankAccount."No." := COPYSTR(CREATEGUID,1,20);
      BankAccount.INSERT;

      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE ValidateLastStmntsNos@11(BankAccNo@1000 : Code[20];ExpLastStatementNo@1001 : Code[20];ExpLastPaymentStatementNo@1002 : Code[20]);
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      BankAccount.GET(BankAccNo);

      Assert.AreEqual(ExpLastStatementNo,BankAccount."Last Statement No.",'Wrong Last Statement No.');
      Assert.AreEqual(ExpLastPaymentStatementNo,BankAccount."Last Payment Statement No.",'Wrong Last Payment Statement No.');
    END;

    [ConfirmHandler]
    PROCEDURE UIConfirmHandler@18(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Bank Reconciliation]
    }
    END.
  }
}

