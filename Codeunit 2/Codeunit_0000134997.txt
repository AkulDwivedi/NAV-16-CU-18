OBJECT Codeunit 134997 Reminder - Add. Line fee
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1110 : Codeunit 131300;
      LibrarySales@1109 : Codeunit 130509;
      LibraryUtility@1106 : Codeunit 131000;
      LibraryRandom@1105 : Codeunit 130440;
      Assert@1104 : Codeunit 130000;
      LibraryVariableStorage@1103 : Codeunit 131004;
      IsInitialized@1102 : Boolean;
      ReminderLineMustExistErr@1100 : TextConst 'ENU=The Reminder Line does not exists. Filters: %1.';
      ReminderLineMustNotExistErr@1099 : TextConst 'ENU=The Reminder Line should not exists. Filters: %1.';
      MustMatchErr@1098 : TextConst 'ENU=Field %1 of %2 did not contain correct value.';
      ConstRmdTextPos@1097 : 'Beginning,Ending';
      MinDocumentValue@1096 : Decimal;
      MaxDocumentValue@1095 : Decimal;
      MustNotMatchErr@1094 : TextConst 'ENU=Field %1 of %2 must not match the expected value.';
      NumberReminderLineErr@1093 : TextConst 'ENU=The number of Reminder Lines did not match the expected.';
      AmountMustBePositiveErr@1092 : TextConst 'ENU=Amount must be positive';
      NoOpenEntriesErr@1091 : TextConst 'ENU=There is no open Cust. Ledger Entry with Document No.';
      LineFeeAlreadyAppliedErr@1121 : TextConst 'ENU=The Line Fee for Invoice %1 on reminder level %2 has already been issued.';
      LineFeeAmountErr@1001 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=Line Fee amount must be positive and non-zero for Line Fee applied to %1 %2.';
      AppliesToDocErr@1002 : TextConst 'ENU=Line Fee has to be applied to an open overdue document.';
      EntryNotOverdueErr@1003 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Table name";ENU=%1 %2 in %3 is not overdue.';
      MultipleLineFeesSameDocErr@1004 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=You cannot issue multiple line fees for the same level for the same document. Error with line fees for %1 %2.';
      ReminderHdrExistsErr@1006 : TextConst 'ENU=A reminder exists for customer %1 which there should not.';
      CountMismatchErr@1005 : TextConst 'ENU=The number of entries in %1 did not match the expected.';

    [Test]
    PROCEDURE RenameReminderTerms@1();
    VAR
      ReminderTerms@1001 : Record 292;
      ReminderLevel@1002 : Record 293;
      CurrencyForReminderLvl@1003 : Record 329;
      ReminderText@1004 : Record 294;
      AdditionalFeeSetup@1005 : Record 1050;
      Currency@1008 : Record 4;
      Text@1010 : Text[100];
      ReminderTermsCode@1000 : Code[10];
      NewReminderTermsCode@1009 : Code[10];
      Level@1006 : Integer;
      Index@1007 : Integer;
    BEGIN
      // [SCENARIO TFS=107048] Reminder Terms can be renamed and all related items are renamed accordingly
      Initialize(FALSE);

      // [GIVEN] Reminder Terms (R)
      ReminderTermsCode := CreateReminderTerms(FALSE,FALSE,FALSE);

      // [GIVEN] R have two Reminder Levels (L1 and L2)
      FOR Level := 1 TO 2 DO
        CreateReminderTermsLevel(ReminderTermsCode,Level,Level,'',0,0,FALSE,Level);

      // [GIVEN] L1 and L2 have 3 currencies set up
      Currency.FINDSET;
      FOR Level := 1 TO 2 DO
        FOR Index := 1 TO 3 DO BEGIN
          CreateCurrencyforReminderLevel(ReminderTermsCode,Level,Currency.Code,0,0);
          Currency.NEXT;
        END;

      // [GIVEN] L1 and L2 have 2 Reminder texts associated
      FOR Level := 1 TO 2 DO
        FOR Index := 1 TO 2 DO BEGIN
          Text := STRSUBSTNO('Random text: %1-%2',Level,Index);
          AddReminderText(ReminderTermsCode,Level,ReminderText.Position::Ending,Text);
        END;

      // [GIVEN] L1 and L2 have 2 10 Additional Fee Setup lines associated
      FOR Level := 1 TO 2 DO
        FOR Index := 1 TO 10 DO
          CreateAdditionalFeeSetupLine(ReminderTermsCode,Level,FALSE,'',Index);

      // [WHEN] Reminder Terms R is renamed to R'
      NewReminderTermsCode := LibraryUtility.GenerateRandomCode(ReminderTerms.FIELDNO(Code),DATABASE::"Reminder Terms");
      Assert.AreNotEqual(NewReminderTermsCode,ReminderTermsCode,'Random code is not unique');
      ReminderTerms.GET(ReminderTermsCode);
      ReminderTerms.RENAME(NewReminderTermsCode);
      COMMIT;

      // [THEN] All sub records are renamed as well
      ReminderLevel.SETRANGE("Reminder Terms Code",NewReminderTermsCode);
      Assert.AreEqual(2,ReminderLevel.COUNT,STRSUBSTNO(CountMismatchErr,ReminderLevel.TABLECAPTION));

      CurrencyForReminderLvl.SETRANGE("Reminder Terms Code",NewReminderTermsCode);
      FOR Level := 1 TO 2 DO BEGIN
        CurrencyForReminderLvl.SETRANGE("No.",Level);
        Assert.AreEqual(3,CurrencyForReminderLvl.COUNT,STRSUBSTNO(CountMismatchErr,CurrencyForReminderLvl.TABLECAPTION));
      END;

      ReminderText.SETRANGE("Reminder Terms Code",NewReminderTermsCode);
      FOR Level := 1 TO 2 DO BEGIN
        ReminderText.SETRANGE("Reminder Level",Level);
        Assert.AreEqual(2,ReminderText.COUNT,STRSUBSTNO(CountMismatchErr,ReminderText.TABLECAPTION));
      END;

      AdditionalFeeSetup.SETRANGE("Reminder Terms Code",NewReminderTermsCode);
      FOR Level := 1 TO 2 DO BEGIN
        AdditionalFeeSetup.SETRANGE("Reminder Level No.",Level);
        Assert.AreEqual(10,AdditionalFeeSetup.COUNT,STRSUBSTNO(CountMismatchErr,AdditionalFeeSetup.TABLECAPTION));
      END;
    END;

    [Test]
    PROCEDURE CreateReminderSingleCustomer@1091();
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1005 : Record 296;
      CustLedgEntry@1003 : Record 21;
      CustNo@1000 : Code[20];
      ReminderTermCode@1001 : Code[10];
      InvoiceA@1002 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] A reminder is created when an open CLE is present for a single customer with reminder terms setup at posting time
      Initialize(TRUE);

      // [GIVEN] A customer A with Reminder Terms Code R_a set up
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A posted sales invoice (I_a) for Customer A
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] I_a is overdue
      // [WHEN] "Create Reminders" action is invoked
      RunCreateReminderReport(CustNo,WORKDATE,CustLedgEntry);

      // [THEN] A Reminder is created for customer A with Reminder Terms Code R_a
      ReminderHeader.SETRANGE("Customer No.",CustNo);
      ReminderHeader.FINDLAST;
      Assert.AreEqual(ReminderTermCode,ReminderHeader."Reminder Terms Code",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Reminder Terms Code"),ReminderHeader.TABLECAPTION));

      // [THEN] The reminder have a line for Invoice I_a
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderHeader."No.",Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);
    END;

    [Test]
    PROCEDURE CreateReminderTwoCustomers@1092();
    VAR
      ReminderHeader@1005 : Record 295;
      ReminderLine@1004 : Record 296;
      CustLedgEntry@1003 : Record 21;
      CustNoA@1002 : Code[20];
      CustNoB@1006 : Code[20];
      ReminderTermCodeA@1001 : Code[10];
      ReminderTermCodeB@1007 : Code[10];
      InvoiceA@1000 : Code[20];
      InvoiceB@1008 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Two reminders are created when two open CLE are present for two different customers with reminder terms setup at posting time
      Initialize(TRUE);

      // [GIVEN] A customer A with Reminder Terms Code R_a set up
      CreateStandardReminderTermSetupWithCust(CustNoA,ReminderTermCodeA,TRUE);

      // [GIVEN] A customer A with Reminder Terms Code R_b set up
      CreateStandardReminderTermSetupWithCust(CustNoB,ReminderTermCodeB,TRUE);

      // [GIVEN] A sales invoice is posted for each customer (I_a and I_b)
      InvoiceA := PostSalesInvoice(CustNoA,CALCDATE('<-10D>',WORKDATE));
      InvoiceB := PostSalesInvoice(CustNoB,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] I_a and I_b are overdue
      // [WHEN] "Create Reminders" action is invoked
      RunCreateReminderReport(CustNoA,WORKDATE,CustLedgEntry);
      RunCreateReminderReport(CustNoB,WORKDATE,CustLedgEntry);

      // [THEN] A Reminder is created for customer A with Reminder Terms Code R_a
      ReminderHeader.SETRANGE("Customer No.",CustNoA);
      ReminderHeader.FINDLAST;
      Assert.AreEqual(ReminderTermCodeA,ReminderHeader."Reminder Terms Code",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Reminder Terms Code"),ReminderHeader.TABLECAPTION));

      // [THEN] The reminder have a line for Invoice I_a
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderHeader."No.",Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Reminder is created for customer A with Reminder Terms Code R_b
      ReminderHeader.SETRANGE("Customer No.",CustNoB);
      ReminderHeader.FINDLAST;
      Assert.AreEqual(ReminderTermCodeB,ReminderHeader."Reminder Terms Code",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Reminder Terms Code"),ReminderHeader.TABLECAPTION));

      // [THEN] The reminder have a line for Invoice I_b
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderHeader."No.",Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceB);
    END;

    [Test]
    PROCEDURE CreateReminderEmptyRmdTerms@1096();
    VAR
      ReminderHeader@1008 : Record 295;
      CustLedgEntry@1006 : Record 21;
      Customer@1005 : Record 18;
      CustNo@1004 : Code[20];
      ReminderTermCode@1003 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] A reminder is NOT created, if the customer does not have the terms setup on the customer card and CLE Rmd Terms is blank
      Initialize(TRUE);

      // [GIVEN] A customer A with Reminder Terms Code NOT set up
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Reminder Terms Code",'');
      Customer.MODIFY;

      // [GIVEN] A posted sales invoice (I_a) for Customer A with empty Reminder Terms Code
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] I_a is overdue
      // [WHEN] "Create Reminders" action is invoked
      RunCreateReminderReport(CustNo,WORKDATE,CustLedgEntry);

      // [THEN] No reminders are created
      ReminderHeader.SETRANGE("Customer No.",CustNo);
      Assert.AreEqual(0,ReminderHeader.COUNT,STRSUBSTNO(ReminderHdrExistsErr,CustNo));

      // Delete so the customer is not picked up in other tests
      Customer.DELETE;
    END;

    [Test]
    [HandlerFunctions(ConfirmNoHandler)]
    PROCEDURE CreateReminderAlreadyExists@1101();
    VAR
      CustLedgEntry@1004 : Record 21;
      CustNo@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] A reminder is not created when a reminder already exists for that Customer, Reminder Terms Code and Currency
      Initialize(TRUE);

      // [GIVEN] A customer A with Reminder Terms Code R_a set up
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A posted sales invoice (I_a) for Customer A
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] I_a is overdue
      // [GIVEN] "Create Reminders" action is invoked for customer A
      RunCreateReminderReport(CustNo,WORKDATE,CustLedgEntry);

      // [WHEN] "Create Reminders" action is invoked again for all customers
      RunCreateReminderReport('',WORKDATE,CustLedgEntry);

      // [THEN] A Confirm dialog is shown indicating a problem
    END;

    [Test]
    [HandlerFunctions(ConfirmNoHandler)]
    PROCEDURE CreateReminderNoLevels@2();
    VAR
      ReminderLevel@1000 : Record 293;
      ReminderHeader@1003 : Record 295;
      CustLedgEntry@1004 : Record 21;
      CustNo@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] A reminder is not created and no errors are thrown when trying to create a reminder for a reminder term without any levels
      Initialize(TRUE);

      // [GIVEN] A customer A with Reminder Terms Code R_a set up without any levels
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermCode);
      ReminderLevel.DELETEALL(TRUE);

      // [GIVEN] A posted sales invoice (I_a) for Customer A
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] I_a is overdue
      // [WHEN] "Create Reminders" action is invoked for all customers
      RunCreateReminderReport('',WORKDATE,CustLedgEntry);

      // [THEN] A confirm dialog is shown indicating a problem
      // [THEN] No error is thrown
      // [THEN] No reminder is created for customer A
      ReminderHeader.SETRANGE("Customer No.",CustNo);
      Assert.AreEqual(0,ReminderHeader.COUNT,
        STRSUBSTNO(CountMismatchErr,ReminderHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestSalesInvWithoutLineFee1stRmd@1084();
    VAR
      ReminderLine@1003 : Record 296;
      ReminderNo@1002 : Code[20];
      InvoiceA@1084 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Add. Line Fee is NOT suggested for a sales invoice as the reminder terms associated with it does not have Add. Line Fee set up
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) that have Line Fee Amount = 0 for level 1
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,FALSE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] No Line Fee is added for invoice A
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
    END;

    [Test]
    PROCEDURE SuggestSalesInvWithLineFee1stRmd@1083();
    VAR
      ReminderLine@1004 : Record 296;
      ReminderLevel@1083 : Record 293;
      ReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Add. Line Fee is suggested on 1st reminder for sales invoice with reminder terms that have Add. Line Fee set up
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) that have Line Fee Amount = X, where X > 0 for level 1 and Line Fee description = D
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Line Fee line is added with amount = X and description = D
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      ReminderLevel.GET(ReminderTermCode,1);
      Assert.AreEqual(ReminderLevel."Add. Fee per Line Description",ReminderLine.Description,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE SuggestSalesInvWith1LineFee2ndRmd@1082();
    VAR
      ReminderLine@1005 : Record 296;
      FirstReminderNo@1004 : Code[20];
      SecondReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Second reminder for a sales invoice and line fee was applied on the 1st reminder, is not suggested again
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) is created
      // [GIVEN] A customer setup with Reminder Term N
      // [GIVEN] Level 1 for N has Line Fee amount = X, where X > 0 and Description = Dx
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] Level 2 for N has Line Fee amount = 0
      CreateReminderTermsLevel(ReminderTermCode,5,4,'',0,0,FALSE,2);

      // [GIVEN] A sales invoice (A) is posted for the customer
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] The first reminder is issued for invoice A with Line Fee
      FirstReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-6D>',WORKDATE));
      IssueReminder(FirstReminderNo);

      // [GIVEN] The invoice and Line Fee is NOT paid
      // [GIVEN] The invoice due date + 2nd reminder grace period < TODAY
      // [WHEN] A 2nd reminder is created for the customer
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A reminder line is added for invoice A
      // [THEN] A reminder line of type Customer Ledger Entry is added refering to the first reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] No Line Fee lines are added
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,SecondReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE SuggestSalesInvWith12LineFee2ndRmd@1081();
    VAR
      ReminderLine@1006 : Record 296;
      ReminderLevel@1005 : Record 293;
      FirstReminderNo@1004 : Code[20];
      SecondReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Second reminder for a sales invoice and with line fee set up for level 1 AND 2
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) is created
      // [GIVEN] A customer setup with Reminder Term N
      // [GIVEN] Level 1 for N has Line Fee amount = X, where X > 0
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] Level 2 for N has Line Fee amount = Y, where y > 0
      CreateReminderTermsLevel(ReminderTermCode,5,4,'',0,LibraryRandom.RandDecInRange(1,100,2),FALSE,2);
      ReminderLevel.GET(ReminderTermCode,2);

      // [GIVEN] A sales invoice (A) is posted for the customer
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] The first reminder is issued for invoice A with Line Fee
      FirstReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-6D>',WORKDATE));
      IssueReminder(FirstReminderNo);

      // [GIVEN] The invoice and Line Fee is NOT paid
      // [GIVEN] The invoice due date + 2nd reminder grace period < TODAY
      // [WHEN] A 2nd reminder is created for the customer
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A reminder line is added for invoice A
      // [THEN] A reminder line of type Customer Ledger Entry is added refering to the first reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Line Fee line is created with amount = Y
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(ReminderLevel."Add. Fee per Line Amount (LCY)",ReminderLine.Amount,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE SuggestSalesInvWithLineFee2ndRmdMultiple@1080();
    VAR
      ReminderLine@1009 : Record 296;
      CustLedgEntryLineFeeOn@1007 : Record 21;
      FirstReminderNo@1006 : Code[20];
      SecondReminderNo@1005 : Code[20];
      FirstIssuedReminderNo@1004 : Code[20];
      InvoiceA@1003 : Code[20];
      InvoiceB@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Reminder with two previous posted Line Fees that are not paid
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) that have level 1 set up with Line Fee Amount = X, where X > 0, and no Line Fee on level 2
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      CreateReminderTermsLevel(ReminderTermCode,5,4,'',0,0,FALSE,2);

      // [GIVEN] Two sales invoices (A and B) are posted for the customer
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      InvoiceB := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] The first reminder (R1) is issued for invoice A and B with Line Fee X
      FirstReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-6D>',WORKDATE));
      FirstIssuedReminderNo := IssueReminder(FirstReminderNo);

      // [GIVEN] The invoices and Line Fees are NOT paid
      // [GIVEN] The invoice due date + 2nd reminder grace period < TODAY
      // [WHEN] A 2nd reminder is created for the customer with Apply Line Fee on Invoices
      CustLedgEntryLineFeeOn.SETRANGE("Document Type",CustLedgEntryLineFeeOn."Document Type"::Invoice);
      SecondReminderNo := CreateReminderAndSuggestLines(CustNo,WORKDATE,CustLedgEntryLineFeeOn);

      // [THEN] A reminder line is added for invoice A
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A reminder line is added for invoice B
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceB);

      // [THEN] A reminder line is added for Reminder R1
      WITH ReminderLine DO
        VerifyReminderLineExists(
          ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Reminder,FirstIssuedReminderNo);

      // [THEN] No Line Fee is added to the Reminder
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,SecondReminderNo,Type::"Line Fee",0,'');
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE SuggestSalesInvWithLineFee2ndRmdNotAppliedBefore@1079();
    VAR
      ReminderLine@1007 : Record 296;
      ReminderLevel@1079 : Record 293;
      FirstReminderNo@1006 : Code[20];
      SecondReminderNo@1005 : Code[20];
      InvoiceA@1003 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Second reminder for a sales invoice with reminder terms that have Line Fee on level 1 and 2, but the user did not issue line fee on the 1st reminder, the line fee is suggested
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) is created
      // [GIVEN] Level 1 for N has Line Fee amount = X, where X > 0 and Description = Dx
      // [GIVEN] Level 2 for N has Line Fee amount = Y, where y > 0 and Description = Dy
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      CreateReminderTermsLevel(ReminderTermCode,5,5,'',0,LibraryRandom.RandDecInRange(1,100,2),FALSE,2);
      ReminderLevel.GET(ReminderTermCode,2);

      // [GIVEN] A sales invoice (A) is posted for the customer
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-15D>',WORKDATE));

      // [GIVEN] The first reminder (R1) is issued for invoice A with Line Fee X but where the user deleted the Line Fee before issuing
      FirstReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-8D>',WORKDATE));
      WITH ReminderLine DO BEGIN
        GetReminderLines(ReminderLine,FirstReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
        DELETE(TRUE);
      END;
      IssueReminder(FirstReminderNo);

      // [GIVEN] The invoice is NOT paid
      // [GIVEN] The invoice due date + 2nd reminder grace period < TODAY
      // [WHEN] A 2nd reminder (R2) is created for the customer
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A reminder line is added for invoice A
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Line Fee line is added for invoice A with amount Y and description Dy
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(ReminderLevel."Add. Fee per Line Amount (LCY)",ReminderLine.Amount,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestSalesInvoiceValidateLineFeeText@1078();
    VAR
      ReminderLine@1005 : Record 296;
      ReminderLevel@1004 : Record 293;
      ReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] The Add. Line Fee text is generated according to the reminder terms setup and have reference to the invoice in question
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) is created
      // [GIVEN] Level 1 for N has Line Fee amount = X, where X > 0 and Description = Dx
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] The Line Fee description (Dx) contains a substitute for invoice number
      ReminderLevel.GET(ReminderTermCode,1);
      ReminderLevel."Add. Fee per Line Description" := 'Something %8';
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A Line Fee line is added with amount = X and description = Dx' where the invoice A No. is substituted into the description
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(
        STRSUBSTNO('Something %1',InvoiceA),
        ReminderLine.Description,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(UpdateReminderTextRequestPageHandler)]
    PROCEDURE SuggestUpdateReminderTextTotalCorrect@1077();
    VAR
      ReminderLine@1008 : Record 296;
      ReminderLine2@1007 : Record 296;
      ReminderTermCode@1005 : Code[10];
      CustNo@1004 : Code[20];
      InvoiceA@1003 : Code[20];
      ReminderNo@1002 : Code[20];
      AmountX@1001 : Decimal;
      AmountA@1000 : Decimal;
      TextAmount@1010 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] Update reminder text includes the Add. Line Fee entries to be posted into the total amount of the reminder
      Initialize(FALSE);

      // [GIVEN] Reminder terms set up without additional fee and with Line Fee = X, where X > 0
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      AddReminderText(ReminderTermCode,1,ConstRmdTextPos::Ending,'Total due: %7');

      // [GIVEN] A reminder with over due invoice (A) and Line Fee for invoice A
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);
      WITH ReminderLine2 DO
        VerifyReminderLineExists(ReminderLine2,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);
      AmountA := ReminderLine2."Remaining Amount" + ReminderLine2.Amount + ReminderLine2."VAT Amount";

      WITH ReminderLine2 DO
        VerifyReminderLineExists(ReminderLine2,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      AmountX := ReminderLine2."Remaining Amount" + ReminderLine2.Amount + ReminderLine2."VAT Amount";

      // [GIVEN] All Reminder Lines with Line Type = "Ending Text" is removed from the Reminder
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Ending Text");
      ReminderLine.DELETEALL;

      // [WHEN] User invokes "Update Reminder Text"
      UpdateReminderText(ReminderNo,1);

      // [THEN] The ending text contains A+X as the amount
      ReminderLine.SETFILTER(Description,'<>%1','');
      ReminderLine.FINDFIRST;
      EVALUATE(TextAmount,DELSTR(ReminderLine.Description,1,STRLEN('Total due: ')));
      Assert.AreNearlyEqual(
        AmountX + AmountA,
        TextAmount,
        1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(UpdateReminderTextRequestPageHandler)]
    PROCEDURE SuggestUpdateReminderTextLineFeeAmountChanged@1076();
    VAR
      ReminderLine@1008 : Record 296;
      ReminderLine2@1007 : Record 296;
      ReminderTermCode@1005 : Code[10];
      CustNo@1004 : Code[20];
      InvoiceA@1003 : Code[20];
      ReminderNo@1002 : Code[20];
      AmountY@1001 : Decimal;
      AmountA@1000 : Decimal;
      TextAmount@1010 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] The reminder text (with the total) can be updated when the Line Fee Amount is changed manually
      Initialize(FALSE);

      // [GIVEN] Reminder terms set up without additional fee and with Line Fee = X, where X > 0
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      AddReminderText(ReminderTermCode,1,ConstRmdTextPos::Ending,'Total due: %7');

      // [GIVEN] A reminder with over due invoice (A) and Line Fee for invoice A
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);
      WITH ReminderLine2 DO
        VerifyReminderLineExists(ReminderLine2,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);
      AmountA := ReminderLine2."Remaining Amount" + ReminderLine2.Amount + ReminderLine2."VAT Amount";

      // [GIVEN] User changes the Line Fee Amount to Y
      WITH ReminderLine2 DO
        VerifyReminderLineExists(ReminderLine2,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      ReminderLine2.VALIDATE(Amount,LibraryRandom.RandDecInRange(1,100,2));
      ReminderLine2.MODIFY;
      AmountY := ReminderLine2."Remaining Amount" + ReminderLine2.Amount + ReminderLine2."VAT Amount";

      // [GIVEN] All Reminder Lines with Line Type = "Ending Text" is removed from the Reminder
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Ending Text");
      ReminderLine.DELETEALL;

      // [WHEN] User invokes "Update Reminder Text"
      UpdateReminderText(ReminderNo,1);

      // [THEN] The total of the reminder is A+Y
      ReminderLine.SETFILTER(Description,'<>%1','');
      ReminderLine.FINDFIRST;
      EVALUATE(TextAmount,DELSTR(ReminderLine.Description,1,STRLEN('Total due: ')));
      Assert.AreNearlyEqual(
        AmountY + AmountA,
        TextAmount,
        1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestLineFeeGLAccountSetup@1075();
    VAR
      CustomerPostingGroup@1006 : Record 92;
      ReminderLine@1005 : Record 296;
      ReminderTermCode@1004 : Code[10];
      CustNo@1003 : Code[20];
      GLAccountNo@1002 : Code[20];
      InvoiceA@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] The G/L account of Add. Line Fee fees are taken from Customer Posting Group setup (without VAT setup)
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0 for level 1
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A G/L account (M) is created without VAT
      // [GIVEN] G/L Account M is setup as default account for Line Fee in Customer Posting Group
      CustomerPostingGroup.FINDFIRST;
      GLAccountNo := CustomerPostingGroup."Add. Fee per Line Account";

      // [GIVEN] An overdue sales invoice for a customer with reminder terms R
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [WHEN] A reminder for the customer is created
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-6D>',WORKDATE));

      // [THEN] The G/L account of the Line Fee Reminder line is M
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(GLAccountNo,ReminderLine."No.",
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION("No."),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestLineFeeEmptyDocumentType@1106();
    VAR
      CustLedgerEntry@1007 : Record 21;
      CustomerPostingGroup@1006 : Record 92;
      ReminderLine@1005 : Record 296;
      ReminderTermCode@1004 : Code[10];
      CustNo@1003 : Code[20];
      GLAccountNo@1002 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Additional Fee per Line is applied on Customer Ledger Entry with Doc.Type set to blank
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0 for level 1
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      CustomerPostingGroup.FINDFIRST;
      GLAccountNo := CustomerPostingGroup."Add. Fee per Line Account";

      // [GIVEN] An overdue gen. journal line for a customer with reminder terms R
      PostCustGenJnlLine(CustNo);

      // [WHEN] A reminder for the customer is created
      ReminderNo :=
        CreateReminderAndSuggestLinesLineFeeOnAll(
          CustNo,CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(10,100)) + 'D>',WORKDATE));
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDLAST;

      // [THEN] The Line Fee Reminder line is created
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::" ",CustLedgerEntry."Document No.");
      Assert.AreEqual(GLAccountNo,ReminderLine."No.",
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION("No."),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestTwiceInvoke@1073();
    VAR
      CustLedgEntryLineFeeOn@1005 : Record 21;
      ReminderLine@1004 : Record 296;
      ReminderNo@1003 : Code[20];
      ReminderTermCode@1002 : Code[10];
      CustNo@1001 : Code[20];
      NumberOfLines@1000 : Integer;
    BEGIN
      // [SCENARIO TFS=107048] Suggest lines is executed twice without resulting in conflicts
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A over due sales invoice for a customer with reminder terms R
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] A reminder for the customer is created with Q Reminder Lines
      CustLedgEntryLineFeeOn.RESET;
      ReminderNo := CreateReminderAndSuggestLines(CustNo,WORKDATE,CustLedgEntryLineFeeOn);
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      NumberOfLines := ReminderLine.COUNT;

      // [WHEN] "Suggest Reminder Lines" are invoked again
      SuggestReminderLines(ReminderNo,CustLedgEntryLineFeeOn);

      // [THEN] No errors is thrown
      // [THEN] The number of lines is Q
      Assert.AreEqual(NumberOfLines,ReminderLine.COUNT,NumberReminderLineErr);
    END;

    [Test]
    PROCEDURE SuggestValidatePostingAndDueDate@1072();
    VAR
      ReminderHeader@1005 : Record 295;
      ReminderLine@1004 : Record 296;
      CustNo@1003 : Code[20];
      ReminderTermCode@1002 : Code[10];
      InvoiceA@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] The posting date of a Add. Line Fee line is equal the Reminder document date and Due date is equal the Reminder due date
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A over due sales invoice for a customer with reminder terms R
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [WHEN] A reminder for the customer is created
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);
      ReminderHeader.GET(ReminderNo);

      // [THEN] The posting date of the Line Fee is equal to the Reminder document date
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(ReminderHeader."Posting Date",ReminderLine."Posting Date",
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION("Posting Date"),ReminderLine.TABLECAPTION));

      // [THEN] The Due Date of the Line Fee is equal to the due date of the reminder due date
      Assert.AreEqual(ReminderHeader."Due Date",ReminderLine."Due Date",
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION("Due Date"),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestLineFeeSumOnSelectedDocType@1071();
    VAR
      CustLedgEntryLineFeeOn@1006 : Record 21;
      ReminderLine@1005 : Record 296;
      ReminderNo@1004 : Code[20];
      CustNo@1003 : Code[20];
      ReminderTermCode@1002 : Code[10];
      InvoiceA@1001 : Code[20];
      CreditMemoB@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Add. Line Fee is only applied to the selected document types
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0 for level 1
      // [GIVEN] A customer with reminder terms R
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] An overdue Credit Memo for the customer
      MaxDocumentValue := 1000;
      CreditMemoB := PostCreditMemo(CustNo,CALCDATE('<-14D>',WORKDATE));

      // [GIVEN] An overdue Invoice for the customer
      MinDocumentValue := 1001;
      MaxDocumentValue := 100000;
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] A reminder is created for the customer
      // [WHEN] A suggest lines is invoked with Document Type for Line Fee set to Credit Memo
      CustLedgEntryLineFeeOn.SETRANGE("Document Type",CustLedgEntryLineFeeOn."Document Type"::"Credit Memo");
      ReminderNo := CreateReminderAndSuggestLines(CustNo,WORKDATE,CustLedgEntryLineFeeOn);

      // [THEN] A reminder line is created for the Credit Memo
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::"Credit Memo",CreditMemoB);

      // [THEN] Line Fee is added for the overdue Credit Memo
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::"Credit Memo",CreditMemoB);

      // [THEN] A reminder line is created for the Invoice
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Line Fee is NOT added for the overdue Invoice
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
    END;

    [Test]
    PROCEDURE SuggestDifferentCurrencyExists@1070();
    VAR
      ReminderLine@1000 : Record 296;
      Customer@1001 : Record 18;
      FeeAmountX@1003 : Decimal;
      ReminderTermCode@1004 : Code[10];
      CustNo@1005 : Code[20];
      InvoiceA@1006 : Code[20];
      ReminderNo@1007 : Code[20];
      CurrencyCode@1002 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] Customer uses a different currencly that LCY, the Line Fee is picked from the reminder level currency table instead
      Initialize(FALSE);

      // [GIVEN] Currency G with exchange rate
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(CALCDATE('<-1Y>',WORKDATE),2,1);

      // [GIVEN] A Reminder term (R) with level 1 setup for currency G with Line Fee amount = X, where X > 0.
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      FeeAmountX := LibraryRandom.RandDecInRange(1,100,2);
      CreateCurrencyforReminderLevel(ReminderTermCode,1,CurrencyCode,0,FeeAmountX);

      // [GIVEN] A customer (C) with currency G
      Customer.GET(CustNo);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] A sales invoice (I_a) is posted for customer C with currency G
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] Invoice I_a is overdue
      // [WHEN] A reminder is created for customer C with currency G
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A Reminder line is created for Invoice I_a
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Line Fee line is created for Invoice I_a with amount X
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreEqual(FeeAmountX,ReminderLine.Amount,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestDifferentCurrencyNotExists@1069();
    VAR
      ReminderLine@1007 : Record 296;
      Customer@1006 : Record 18;
      ReminderLevel@1009 : Record 293;
      FeeAmountX@1005 : Decimal;
      FeeAmountY@1010 : Decimal;
      ReminderTermCode@1004 : Code[10];
      CustNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderNo@1001 : Code[20];
      CurrencyCodeH@1000 : Code[10];
      CurrencyCodeG@1008 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] Customer uses a different currencly that LCY, the Line Fee is picked from the reminder level currency table instead.
      // Calculates the line fee based on the LCY fee.
      Initialize(FALSE);

      // [GIVEN] Currency G and H with fixed exchange rates
      CurrencyCodeG := LibraryERM.CreateCurrencyWithExchangeRate(CALCDATE('<-1Y>',WORKDATE),2,1);
      CurrencyCodeH := LibraryERM.CreateCurrencyWithExchangeRate(CALCDATE('<-1Y>',WORKDATE),3,1);

      // [GIVEN] A Reminder term (R) with level 1 setup for currency G with Line Fee amount = X, where X > 0 and Line Fee Amount Y for LCY.
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      FeeAmountX := LibraryRandom.RandDecInRange(1,100,2);
      CreateCurrencyforReminderLevel(ReminderTermCode,1,CurrencyCodeG,0,FeeAmountX);
      ReminderLevel.GET(ReminderTermCode,1);
      FeeAmountY := ReminderLevel."Add. Fee per Line Amount (LCY)";

      // [GIVEN] A customer (C) with currency H
      Customer.GET(CustNo);
      Customer.VALIDATE("Currency Code",CurrencyCodeH);
      Customer.MODIFY(TRUE);

      // [GIVEN] A sales invoice (I_a) is posted for customer C with currency H
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] Invoice I_a is overdue
      // [WHEN] A reminder is created for customer C with currency H
      ReminderLine.DELETEALL;
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] A Reminder line is created for Invoice I_a
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] A Line Fee line is created for Invoice I_a with 3 times amount Y
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      Assert.AreNearlyEqual(3 * FeeAmountY,ReminderLine.Amount,1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestTNoInterest@1094();
    VAR
      ReminderLine@1006 : Record 296;
      ReminderHeader@1005 : Record 295;
      ReminderTermCode@1003 : Code[10];
      CustNo@1002 : Code[20];
      InvoiceA@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=TFS=107048] When Reminder Terms is not set up to Calculate interest then the outstanding document was posted,
      // then no interest is calculated when the reminder is issued
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) with Calculate Interest = No and Post Interest = Yes
      // [GIVEN] A customer setup with Reminder Term N
      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      CreateStandardReminderTermSetupWithCustAndFinChrg(CustNo,ReminderTermCode,FALSE,FALSE,TRUE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Interest is NOT calculated for invoice A
      Assert.AreEqual(0.0,ReminderLine.Amount,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The reminder header have Post Interest = Yes
      ReminderHeader.GET(ReminderNo);
      Assert.AreEqual(TRUE,ReminderHeader."Post Interest",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Post Interest"),ReminderHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestTCalcInterestTPostCNoPost@1102();
    VAR
      ReminderLine@1005 : Record 296;
      ReminderHeader@1004 : Record 295;
      ReminderTerms@1006 : Record 292;
      ReminderTermCode@1003 : Code[10];
      CustNo@1002 : Code[20];
      InvoiceA@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=TFS=107048] When Reminder Terms is set up to Calculate interest and post it when the outstanding document was posted,
      // and then the Reminder Terms is setup to NOT post the interest at time of issuing the reminder, the interest amount is shown on the reminder
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) with Calculate Interest = Yes and Post Interest = Yes
      // [GIVEN] A customer setup with Reminder Term N
      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      CreateStandardReminderTermSetupWithCustAndFinChrg(CustNo,ReminderTermCode,FALSE,TRUE,TRUE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));

      // [GIVEN] Reminder Terms N is changed to Post Interest = No
      ReminderTerms.GET(ReminderTermCode);
      ReminderTerms."Post Interest" := FALSE;
      ReminderTerms.MODIFY(TRUE);

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Interest is calculated for invoice A
      Assert.AreNotEqual(0.0,ReminderLine.Amount,
        STRSUBSTNO(MustNotMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The reminder header have Post Interest = No
      ReminderHeader.GET(ReminderNo);
      Assert.AreEqual(FALSE,ReminderHeader."Post Interest",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Post Interest"),ReminderHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestTCalcInterestCPost@1104();
    VAR
      ReminderLine@1006 : Record 296;
      ReminderHeader@1005 : Record 295;
      ReminderTermCode@1003 : Code[10];
      CustNo@1002 : Code[20];
      InvoiceA@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=TFS=107048] When Reminder Terms is set up to Calculate interest and post it, the interest amount is shown on the reminder
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) with Calculate Interest = Yes and Post Interest = Yes
      // [GIVEN] A customer setup with Reminder Term N
      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      CreateStandardReminderTermSetupWithCustAndFinChrg(CustNo,ReminderTermCode,FALSE,TRUE,TRUE);

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Interest is calculated for invoice A
      Assert.AreNotEqual(0.0,ReminderLine.Amount,
        STRSUBSTNO(MustNotMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The reminder header have Post Interest = Yes
      ReminderHeader.GET(ReminderNo);
      Assert.AreEqual(TRUE,ReminderHeader."Post Interest",
        STRSUBSTNO(MustMatchErr,ReminderHeader.FIELDCAPTION("Post Interest"),ReminderHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestSalesInvWithDynamicAddFee@1086();
    VAR
      ReminderLine@1004 : Record 296;
      CustLedgerEntry@1005 : Record 21;
      ReminderLevel@1006 : Record 293;
      ReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Additional fee is added to reminder when Single Dynamics calculation type is choosen and setup
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (N) that have CalculationType = Single Dynamic
      // [GIVEN] N applies 10% of the remaining amount as an Additional Fee on reminders
      // [GIVEN] A customer setup with Reminder Term N
      CreateStandardRmdTermSetupWithSingleDynCalc(ReminderTermCode,CustNo,10);

      // [GIVEN] Additional Fee (LCY) on Reminder Level is 0
      ReminderLevel.GET(ReminderTermCode,1);
      Assert.AreEqual(0,ReminderLevel."Additional Fee (LCY)",
        STRSUBSTNO(MustMatchErr,ReminderLevel.FIELDCAPTION("Additional Fee (LCY)"),ReminderLevel.TABLECAPTION));

      // [GIVEN] A sales invoice (A) is posted for the customer
      // [GIVEN] The invoice due date + Reminder grace period < TODAY
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-5D>',WORKDATE));
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,InvoiceA,CustNo);

      // [WHEN] A reminder is created for the customer
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] Invoice A is added to the reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Additional fee is added with 10% of InvoiceA
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"G/L Account",0,'');
      Assert.AreNearlyEqual(CustLedgerEntry."Remaining Amount" * 0.1,ReminderLine.Amount,1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CreateLineFeeSumOnReminder@1068();
    VAR
      CustLedgEntryLineFeeOn@1006 : Record 21;
      ReminderLine@1005 : Record 296;
      ReminderNo@1004 : Code[20];
      CustNo@1003 : Code[20];
      ReminderTermCode@1002 : Code[10];
      InvoiceA@1001 : Code[20];
      CreditMemoB@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Add. Line Fee is added to Credit Memo when selected on the Create Reminder request page
      Initialize(FALSE);

      // [GIVEN] Reminder terms (R) set up without additional fee and with Line Fee = X, where X > 0 for level 1
      // [GIVEN] A customer with reminder terms R
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] An overdue Credit Memo for the customer
      MaxDocumentValue := 1000;
      CreditMemoB := PostCreditMemo(CustNo,CALCDATE('<-14D>',WORKDATE));

      // [GIVEN] An overdue Invoice for the customer
      MinDocumentValue := 1001;
      MaxDocumentValue := 100000;
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [WHEN] A new reminder is created via the Create Reminders report for the customer with Document Type for Line Fee set to Credit Memo
      CustLedgEntryLineFeeOn.SETRANGE("Document Type",CustLedgEntryLineFeeOn."Document Type"::"Credit Memo");
      ReminderNo := RunCreateReminderReport(CustNo,WORKDATE,CustLedgEntryLineFeeOn);

      // [THEN] A reminder line is created for the Credit Memo
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::"Credit Memo",CreditMemoB);

      // [THEN] Line Fee is added for the overdue Credit Memo
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::"Credit Memo",CreditMemoB);

      // [THEN] A reminder line is created for the Invoice
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);

      // [THEN] Line Fee is NOT added for the overdue Invoice
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
    END;

    [Test]
    PROCEDURE EditChangeLineType@1067();
    VAR
      ReminderHeader@1003 : Record 295;
      ReminderLine@1002 : Record 296;
      CustNo@1001 : Code[20];
      ReminderTermCode@1000 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] User can change the line type to "Line fee" on reminder lines
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustNo);
      ReminderHeader.VALIDATE("Posting Date",WORKDATE);
      ReminderHeader.VALIDATE("Document Date",WORKDATE);
      ReminderHeader.MODIFY(TRUE);

      // [GIVEN] User added a Reminder line
      ReminderLine.INIT;
      ReminderLine.VALIDATE("Reminder No.",ReminderHeader."No.");
      ReminderLine.INSERT(TRUE);

      // [GIVEN] User adds a description and Amount to the line
      ReminderLine.Description := 'A description';
      ReminderLine.Amount := 10;
      ReminderLine.MODIFY(TRUE);

      // [WHEN] User tries to change the type of the Reminder Line to Line Fee
      ReminderLine.VALIDATE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.MODIFY(TRUE);

      // [THEN] The line type is changed
      // [THEN] All other fields on the line is cleared
      Assert.AreEqual(0,ReminderLine.Amount,STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE EditChangePostingDate@1066();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the posting date to an arbitrary date
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the posting date to TODAY+2D for the Line Fee line
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee",
          "Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Posting Date",CALCDATE('<+2D>',WORKDATE));
      ReminderLine.MODIFY(TRUE);

      // [THEN] The date is saved
    END;

    [Test]
    PROCEDURE EditChangeDueDate@1065();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the due date to an arbitrary date
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the Due date to TODAY+7D
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee",
          "Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Due Date",CALCDATE('<+2D>',WORKDATE));
      ReminderLine.MODIFY(TRUE);

      // [THEN] The date is saved
    END;

    [Test]
    PROCEDURE EditChangeAmount@1064();
    VAR
      ReminderLine@1002 : Record 296;
      ReminderNo@1001 : Code[20];
      AmountY@1000 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the amount of a Line Fee to any positive amount
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the Amount to Y, where Y > 0 and Y != X
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee",
          "Document Type"::Invoice,'');
      AmountY := LibraryRandom.RandDecInRange(1,100,2);
      WHILE AmountY = ReminderLine.Amount DO
        AmountY := LibraryRandom.RandDecInRange(1,100,2);
      ReminderLine.VALIDATE(Amount,AmountY);
      ReminderLine.MODIFY(TRUE);

      // [THEN] The amount is changed to Y
    END;

    [Test]
    PROCEDURE EditChangeAmountNegative@1063();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the amount of a Line Fee to any amount
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the Amount to Y, where Y < 0 and Y != X
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee",
          "Document Type"::Invoice,'');
      ASSERTERROR ReminderLine.VALIDATE(Amount,-LibraryRandom.RandDecInRange(1,100,2));

      // [THEN] An error is thrown saying the amount can't be negative
      Assert.ExpectedError(AmountMustBePositiveErr);
    END;

    [Test]
    PROCEDURE EditChangeDescription@1062();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the description of a Line Fee
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the description of the Line Fee line
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee",
          "Document Type"::Invoice,'');
      ReminderLine.VALIDATE(Description,'Some description');
      ReminderLine.MODIFY(TRUE);

      // [THEN] The description is saved
    END;

    [Test]
    PROCEDURE EditChangeAppliesTo@1059();
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1003 : Record 296;
      ReminderLevel@1002 : Record 293;
      ReminderNo@1001 : Code[20];
      InvoiceA@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change the Applies To field for a Add. Line Fee on the Reminder
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice created via Suggest Lines
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;
      ReminderHeader.GET(ReminderNo);

      // [GIVEN] The Reminder Term level has a description with document no. substituion
      ReminderLevel.GET(ReminderHeader."Reminder Terms Code",1);
      ReminderLevel."Add. Fee per Line Description" := 'Line Fee %8';
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A overdue sales invoice exists
      InvoiceA := PostSalesInvoice(ReminderHeader."Customer No.",CALCDATE('<-10D>',WORKDATE));

      // [WHEN] User tries to change the Applies To field to another overdue invoice that does not have a Line Fee applied to it
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Applies-to Document Type",ReminderLine."Applies-to Document Type"::Invoice);
      ReminderLine.VALIDATE("Applies-to Document No.",InvoiceA);
      ReminderLine.MODIFY(TRUE);

      // [THEN] The change is accepted
      // [THEN] The line description is updated with the new Document No.
      Assert.AreEqual(
        STRSUBSTNO('Line Fee %1',InvoiceA),ReminderLine.Description,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE EditChangeAppliesToNotOverDue@1058();
    VAR
      ReminderHeader@1003 : Record 295;
      ReminderLine@1002 : Record 296;
      ReminderNo@1001 : Code[20];
      InvoiceA@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is not able to change the Applies To field to a invoice that is not overdue for a Add. Line Fee on the Reminder
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;
      ReminderHeader.GET(ReminderNo);

      // [GIVEN] An NOT overdue invoice for the same customer
      InvoiceA := PostSalesInvoice(ReminderHeader."Customer No.",CALCDATE('<+10D>',WORKDATE));

      // [WHEN] User tries to change the Applies To field to another invoice that is not overdue
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Applies-to Document Type",ReminderLine."Applies-to Document Type"::Invoice);
      ASSERTERROR ReminderLine.VALIDATE("Applies-to Document No.",InvoiceA);

      // [THEN] An error is thrown
      Assert.ExpectedError(STRSUBSTNO('Document No. %1 in Cust. Ledger Entry is not overdue.',InvoiceA));
    END;

    [Test]
    PROCEDURE EditChangeAppliesToNotSameCustomer@1057();
    VAR
      ReminderLine@1006 : Record 296;
      PaymentTermsCode@1005 : Code[10];
      ReminderTermCode@1004 : Code[10];
      InvoiceB@1003 : Code[20];
      CustNoA@1002 : Code[20];
      CustNoB@1001 : Code[20];
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is not able to change the Applies To field to a invoice that does not belong to the customer for a Add. Line Fee on the Reminder
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      PaymentTermsCode := CreatePaymentTerms(1);
      ReminderTermCode := CreateReminderTerms(TRUE,FALSE,FALSE);
      CreateReminderTermsLevel(ReminderTermCode,1,1,'',0,LibraryRandom.RandDecInRange(1,100,2),FALSE,1);
      CustNoA := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);
      PostSalesInvoice(CustNoA,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNoA,CALCDATE('<-6D>',WORKDATE));

      // [GIVEN] A posted invoice (overdue) for another customer
      CustNoB := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);
      InvoiceB := PostSalesInvoice(CustNoB,CALCDATE('<-10D>',WORKDATE));

      // [WHEN] User tries to change the Applies To field to another invoice that does not belong to the customer of the Reminder
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Applies-to Document Type",ReminderLine."Applies-to Document Type"::Invoice);
      ASSERTERROR ReminderLine.VALIDATE("Applies-to Document No.",InvoiceB);

      // [THEN] An error is thrown
      Assert.ExpectedError(NoOpenEntriesErr);
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE EditChangeAppliesToLevelAlreadyApplied@1056();
    VAR
      ReminderHeader@1005 : Record 295;
      ReminderLine@1004 : Record 296;
      InvoiceA@1003 : Code[20];
      CustNo@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
    BEGIN
      // [SCENARIO TFS=107048] User is not able to issue Line Fee on same level for same invoice
      Initialize(FALSE);

      // [GIVEN] A Reminder Term (R) is setup with Line Fee on level 1 with amount = X
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] An overdue sales invoice (I_a) for customer C
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] A reminder (R_1) is created for customer C with Reminder Term R without a reminder line for I_a
      CreateReminderHeader(ReminderHeader,CustNo,WORKDATE);

      // [GIVEN] A Reminder Line with type Line Fee is added for invoice I_a with amount X
      CreateReminderLineOfTypeLineFee(ReminderLine,ReminderHeader."No.",ReminderLine."Applies-to Document Type"::Invoice,InvoiceA);

      // [GIVEN] Reminder R_1 is issued
      IssueReminder(ReminderHeader."No.");

      // [GIVEN] A reminder (R_2) is created for customer C without lines
      CreateReminderHeader(ReminderHeader,CustNo,WORKDATE);

      // [GIVEN] A Reminder Line of type Line Fee is added to R_2
      // [WHEN] The user attempts to apply the Line Fee to invoice I_A
      ReminderLine.INIT;
      ReminderLine.VALIDATE("Reminder No.",ReminderHeader."No.");
      ReminderLine.VALIDATE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.INSERT(TRUE);
      ReminderLine.VALIDATE("Applies-to Document Type",ReminderLine."Applies-to Document Type"::Invoice);
      ASSERTERROR ReminderLine.VALIDATE("Applies-to Document No.",InvoiceA);

      // [THEN] An error is thrown that level 1 Line Fee already have been issued for invoice I_a
      Assert.ExpectedError(STRSUBSTNO(LineFeeAlreadyAppliedErr,InvoiceA,1))
    END;

    [Test]
    PROCEDURE EditChangeAppliesToLevelDoesNotExists@1055();
    VAR
      ReminderLine@1002 : Record 296;
      GLAccount@1001 : Record 15;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change Apply-to to a Reminder Term Level that does not exists
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee on level 1. Level 2 does NOT exists
      // [GIVEN] An overdue invoice I_A for customer C
      // [GIVEN] A reminder (R_1) with an overdue Invoice (I_a) and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User tries to change the "No. of Reminders" to 2 for the Line Fee line for invoice I_A
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("No. of Reminders",2);

      // [THEN] The description of the Reminder Line is set to that of the G/L account.
      GLAccount.GET(ReminderLine."No.");
      Assert.AreEqual(
        GLAccount.Name,ReminderLine.Description,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));

      // [THEN] The amount of the Reminder Line is set to zero
      Assert.AreEqual(0,ReminderLine.Amount,STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE EditChangeAppliesToLevelDoesNotExistsNoGLAcc@1054();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change Apply-to to a Reminder Term Level that does not exists. No G/L account selected
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee on level 1. Level 2 does NOT exists
      // [GIVEN] An overdue invoice I_A for customer C
      // [GIVEN] A reminder (R_1) with an overdue Invoice (I_a) and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] No G/L account is setup for the Line Fee Line
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("No.",'');
      ReminderLine.MODIFY(TRUE);

      // [WHEN] User tries to change the "No. of Reminders" to 2 for the Line Fee line for invoice I_A
      ReminderLine.VALIDATE("No. of Reminders",2);

      // [THEN] The description of the Reminder Line is cleared
      Assert.AreEqual(
        '',ReminderLine.Description,STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));

      // [THEN] The amount of the Reminder Line is set to zero
      Assert.AreEqual(0,ReminderLine.Amount,STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE EditChangeAppliesToLevelWithoutLineFee@1053();
    VAR
      ReminderLine@1004 : Record 296;
      GLAccount@1003 : Record 15;
      ReminderNo@1002 : Code[20];
      ReminderTermCode@1001 : Code[10];
      CustNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to change Apply-to to a Reminder Term Level that does not have a Line Fee
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee on level 1.
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] Reminder Term R has a level 2, with a Line Fee description but Line Fee Amount = 0
      CreateReminderTermsLevel(ReminderTermCode,5,5,'',0,0,FALSE,2);

      // [GIVEN] A reminder with an overdue Invoice (I_a) and Line Fee (X) for the invoice
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [WHEN] User tries to change the "No. of Reminders" to 2 for the Line Fee line for invoice I_A
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("No. of Reminders",2);

      // [THEN] The description of the Reminder Line is set to that of the G/L account.
      GLAccount.GET(ReminderLine."No.");
      Assert.AreEqual(
        GLAccount.Name,ReminderLine.Description,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Description),ReminderLine.TABLECAPTION));

      // [THEN] The amount of the Reminder Line is set to zero
      Assert.AreEqual(0,ReminderLine.Amount,STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE EditDeleteLineFeeLine@1052();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] User is able to delete a suggested line of Line Fee
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue Invoice and Line Fee (X) for the invoice
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [WHEN] User attempts to delete the Line Fee line
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.DELETE(TRUE);

      // [THEN] The line is deleted
      WITH ReminderLine DO
        VerifyReminderLineDoesNotExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue1stRmdSingleInvoiceNoFee@1051();
    VAR
      ReminderLevel@1004 : Record 293;
      CustLedgerEntry@1006 : Record 21;
      IssuedReminderLine@1008 : Record 298;
      CustNo@1000 : Code[20];
      ReminderTermCode@1001 : Code[10];
      InvoiceA@1002 : Code[20];
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1007 : Code[20];
      LineFeeX@1005 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] 1st reminder for single invoice with line fee: A single Cust. Ledg Entry is posted for the reminder
      Initialize(FALSE);

      // [GIVEN] The Reminder Term R is set to Posted Line Fee = Yes
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      LineFeeX := ReminderLevel."Add. Fee per Line Amount (LCY)";

      // [GIVEN] A reminder with Reminder Term R with a overdue sales invoice and a Line Fee X
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [GIVEN] No additional fee or interest on the reminder
      // [WHEN] The Reminder is issued
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [THEN] A Customer Ledger Entry is posted with amount = X
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,IssuedReminderNo,CustNo);
      Assert.AreNearlyEqual(LineFeeX,CustLedgerEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.TABLECAPTION));

      // [THEN] The Applies-to Doc is saved in the Issued Reminder Line table
      IssuedReminderLine.SETRANGE("Reminder No.",IssuedReminderNo);
      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"Line Fee");
      IssuedReminderLine.FINDFIRST;
      Assert.AreEqual(InvoiceA,IssuedReminderLine."Applies-To Document No.",
        STRSUBSTNO(MustMatchErr,IssuedReminderLine.FIELDCAPTION("Applies-To Document No."),IssuedReminderLine.TABLECAPTION));
      Assert.AreEqual(IssuedReminderLine."Applies-To Document Type"::Invoice,IssuedReminderLine."Applies-To Document Type",
        STRSUBSTNO(MustMatchErr,IssuedReminderLine.FIELDCAPTION("Applies-To Document Type"),IssuedReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue1stRmdSingleInvoiceNoFeeNoPost@1050();
    VAR
      CustLedgerEntry@1007 : Record 21;
      ReminderTerms@1009 : Record 292;
      IssuedReminderHeader@1010 : Record 297;
      CustNo@1005 : Code[20];
      ReminderTermCode@1004 : Code[10];
      ReminderNo@1002 : Code[20];
      IssuedReminderNo@1001 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] 1st reminder for single invoice with line fee with Reminder Terms says not to post line fees: Nothing it posted
      Initialize(FALSE);

      // [GIVEN] The Reminder Term R is set to Posted Line Fee = No
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderTerms.GET(ReminderTermCode);
      ReminderTerms.VALIDATE("Post Add. Fee per Line",FALSE);
      ReminderTerms.VALIDATE("Post Additional Fee",FALSE);
      ReminderTerms.MODIFY(TRUE);

      // [GIVEN] A reminder with Reminder Term R with a over due sales invoice and a Line Fee X
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [GIVEN] No additional fee or interest on the reminder
      // [WHEN] The Reminder is issued
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [THEN] The Reminder document is posted
      IssuedReminderHeader.GET(IssuedReminderNo);

      // [THEN] No customer ledger entries are created
      ASSERTERROR FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,IssuedReminderNo,CustNo);
      Assert.ExpectedErrorCode('DB:NothingInsideFilter');
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue1stRmdMultipleInvoiceNoFee@1049();
    VAR
      CustLedgerEntry@1006 : Record 21;
      ReminderLevel@1005 : Record 293;
      CustNo@1000 : Code[20];
      ReminderTermCode@1001 : Code[10];
      LineFeeX@1004 : Decimal;
      ReminderNo@1002 : Code[20];
      IssuedReminderNo@1003 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] 1st reminder for multiple invoice with line fees
      Initialize(FALSE);

      // [GIVEN] Customer C with Reminder Term R with Line Fee X
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      LineFeeX := ReminderLevel."Add. Fee per Line Amount (LCY)";

      // [GIVEN] A reminder with 3 overdue sales invoices and a Line Fees for all invoices (X_1, X_2 and X_3)
      PostSalesInvoice(CustNo,CALCDATE('<-12D>',WORKDATE));
      PostSalesInvoice(CustNo,CALCDATE('<-11D>',WORKDATE));
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [GIVEN] No additional fee or interest on the reminder
      // [WHEN] The Reminder is issued
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [THEN] A Customer Ledger Entry is posted with amount = X_1+X_2+X_3
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,IssuedReminderNo,CustNo);
      Assert.AreNearlyEqual(LineFeeX * 3,CustLedgerEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue1stRmdMultipleInvoiceMixedLineFees@1048();
    VAR
      CustLedgerEntry@1006 : Record 21;
      ReminderLevel@1005 : Record 293;
      ReminderLine@1008 : Record 296;
      CustNo@1004 : Code[20];
      ReminderTermCode@1003 : Code[10];
      LineFeeX@1002 : Decimal;
      ReminderNo@1001 : Code[20];
      IssuedReminderNo@1000 : Code[20];
      InvoiceA@1007 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Reminder with multiple invoices, some with line fees
      Initialize(FALSE);

      // [GIVEN] Customer C with Reminder Term R with Line Fee X
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      LineFeeX := ReminderLevel."Add. Fee per Line Amount (LCY)";

      // [GIVEN] A reminder with 3 overdue sales invoices and a Line Fees on two of them (X_1 and X_2)
      PostSalesInvoice(CustNo,CALCDATE('<-12D>',WORKDATE));
      PostSalesInvoice(CustNo,CALCDATE('<-11D>',WORKDATE));
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      ReminderLine.DELETE(TRUE);

      // [GIVEN] No additional fee or interest on the reminder
      // [WHEN] The Reminder is issued
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [THEN] A Customer Ledger Entry is posted with amount = X_1+X_2
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,IssuedReminderNo,CustNo);
      Assert.AreNearlyEqual(LineFeeX * 2,CustLedgerEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue1stRmdSingleInvoiceWithFee@1047();
    VAR
      ReminderTerms@1012 : Record 292;
      ReminderLevel@1001 : Record 293;
      CustomerPostingGroup@1000 : Record 92;
      GLEntry@1008 : Record 17;
      CustLedgerEntry@1011 : Record 21;
      Customer@1013 : Record 18;
      GLAccountA@1002 : Code[20];
      GLAccountB@1003 : Code[20];
      CustNo@1004 : Code[20];
      ReminderTermCode@1005 : Code[10];
      ReminderNo@1006 : Code[20];
      IssuedReminderNo@1007 : Code[20];
      AmountY@1009 : Decimal;
      LineFeeX@1010 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] 1st reminder for single invoice with Add. Line Fee and a fee on the reminder: The fee is posted to a seperate G/L account than the line fee.
      Initialize(FALSE);

      // [GIVEN] A reminder with 2 overdue sales invoices and a Line Fee for all the invoices (X_1 and X_2)
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      PostSalesInvoice(CustNo,CALCDATE('<-12D>',WORKDATE));
      PostSalesInvoice(CustNo,CALCDATE('<-11D>',WORKDATE));
      Customer.GET(CustNo);

      // [GIVEN] Customer Posting Group have G/L account A for Additional fees and G/L account B for Line Fees without VAT
      FindTwoGLAccounts(GLAccountA,GLAccountB,Customer."VAT Bus. Posting Group");
      CustomerPostingGroup.MODIFYALL("Additional Fee Account",GLAccountA);
      CustomerPostingGroup.MODIFYALL("Add. Fee per Line Account",GLAccountB);

      // [GIVEN] The reminder has an additional fee of Y
      ReminderLevel.GET(ReminderTermCode,1);
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandDecInRange(1,100,2));
      ReminderLevel.MODIFY(TRUE);
      ReminderTerms.GET(ReminderTermCode);
      ReminderTerms.VALIDATE("Post Additional Fee",TRUE);
      ReminderTerms.MODIFY(TRUE);
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [WHEN] The Reminder is issued
      IssuedReminderNo := IssueReminder(ReminderNo);

      AmountY := ReminderLevel."Additional Fee (LCY)";
      LineFeeX := ReminderLevel."Add. Fee per Line Amount (LCY)";

      // [THEN] The reminder is posted to Customer Ledger Entries with amount Y+X_1+X_2
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,IssuedReminderNo,CustNo);
      Assert.AreNearlyEqual(LineFeeX * 2 + AmountY,CustLedgerEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.TABLECAPTION));

      // [THEN] A G/L entry is posted to G/L account A with amount Y
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Reminder);
      GLEntry.SETRANGE("Document No.",IssuedReminderNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountA);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(-AmountY,GLEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));

      // [THEN] Two G/L entry is posted to G/L account B with amount X_1+X_2
      GLEntry.SETRANGE("G/L Account No.",GLAccountB);
      GLEntry.FINDSET;
      REPEAT
        Assert.AreNearlyEqual(-LineFeeX,GLEntry.Amount,1,
          STRSUBSTNO(MustMatchErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      UNTIL GLEntry.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE Issue2ndRmdSingleInvoiceWithNewLineFee@1046();
    VAR
      ReminderLine@1003 : Record 296;
      CustLedgerEntry@1008 : Record 21;
      CustNo@1000 : Code[20];
      ReminderTermCode@1001 : Code[10];
      AmountY@1002 : Decimal;
      ReminderNo@1004 : Code[20];
      SecondReminderNo@1006 : Code[20];
      SecondIssuedReminderNo@1007 : Code[20];
      InvoiceA@1005 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] 2nd reminder for an invoice, where line fee is issued only on the second reminder
      Initialize(FALSE);

      // [GIVEN] Reminder Term T for level 1 has Line Fee amount = X, where X > 0
      // [GIVEN] The customer C uses a Reminder term T
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] Reminder Term T for level 2 has Line Fee amount = Y, where Y > 0
      AmountY := LibraryRandom.RandDecInRange(1,100,2);
      CreateReminderTermsLevel(ReminderTermCode,3,3,'',0,AmountY,FALSE,2);

      // [GIVEN] An overdue invoice (I_a) for customer (C)
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] The 1st reminder (R_1) is issued for invoice I_a, but the user deleted the Line Fee before issuing it
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-5D>',WORKDATE));
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceA);
      ReminderLine.DELETE(TRUE);
      IssueReminder(ReminderNo);

      // [GIVEN] A 2nd reminder (R_2) is created for invoice I_a and Line Fee of Y is suggested for the invoice
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [GIVEN] The reminder does not have additional fee or interests
      // [WHEN] The reminder is issued
      SecondIssuedReminderNo := IssueReminder(SecondReminderNo);

      // [THEN] A Customer Ledger Entry is posted for the Reminder R_2 with amount = Y
      FindOpenCustomerLedgerEntriesExclVAT(CustLedgerEntry,SecondIssuedReminderNo,CustNo);
      Assert.AreNearlyEqual(AmountY,CustLedgerEntry.Amount,1,
        STRSUBSTNO(MustMatchErr,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAmount@1045();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] An empty amount for the Add. Line Fee throws an error
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] The user sets the Line Fee Amount to 0
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE(Amount,0);
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating an error with the Line Fee Amount
      Assert.ExpectedError(
        STRSUBSTNO(LineFeeAmountErr,ReminderLine."Applies-to Document Type",ReminderLine."Applies-to Document No."));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAmountNegative@1044();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] A negative amount for the Add. Line Fee throws an error
      Initialize(FALSE);

      // [GIVEN] A reminder with an overdue sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] The user sets the Line Fee Amount to X, where X < 0
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.Amount := -LibraryRandom.RandDecInRange(1,100,2);
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating an error with the Line Fee Amount
      Assert.ExpectedError(
        STRSUBSTNO(LineFeeAmountErr,ReminderLine."Applies-to Document Type",ReminderLine."Applies-to Document No."));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateGLAccount@1043();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] An empty G/L account throws an error
      Initialize(FALSE);

      // [GIVEN] A reminder with a over due sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] The user removes the G/L account for the Line Fee line
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("No.",'');
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating an error with the G/L account
      Assert.ExpectedErrorCode('TestField');
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAppliesToEmpty@1041();
    VAR
      ReminderLine@1001 : Record 296;
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Line Fee throws an error when Applies-To is empty
      Initialize(FALSE);

      // [GIVEN] A reminder with a over due sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] The user clears the Applies To for the Line Fee
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine.VALIDATE("Applies-to Document No.",'');
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating that an Applies-to Document has to be set
      Assert.ExpectedError(AppliesToDocErr);
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAppliesToNotOverDue@1040();
    VAR
      ReminderHeader@1002 : Record 295;
      ReminderLine@1001 : Record 296;
      CustLedgerEntry@1004 : Record 21;
      ReminderNo@1000 : Code[20];
      InvoiceA@1003 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Line Fee Applies To throws an error when the Apply To Invoice is not overdue
      Initialize(FALSE);

      // [GIVEN] A reminder with a over due sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;
      ReminderHeader.GET(ReminderNo);

      // [GIVEN] An invoice that is NOT overdue
      InvoiceA := PostSalesInvoice(ReminderHeader."Customer No.",WORKDATE);

      // [GIVEN] The user changes the Applies To for the Line Fee to a Invoice that is not overdue
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine."Applies-to Document No." := InvoiceA;
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating that the invoice have to be overdue
      Assert.ExpectedError(STRSUBSTNO(EntryNotOverdueErr,
          ReminderLine.FIELDCAPTION("Document No."),InvoiceA,CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAppliesToAnotherCustomer@1038();
    VAR
      ReminderLine@1007 : Record 296;
      PaymentTermsCode@1000 : Code[10];
      ReminderTermCode@1001 : Code[10];
      CustNoN@1002 : Code[20];
      CustNoM@1003 : Code[20];
      InvoiceA@1004 : Code[20];
      InvoiceB@1005 : Code[20];
      ReminderNo@1006 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Line Fee Applies To throws an error when the Apply To Invoice belongs to another customer
      Initialize(FALSE);

      // A Reminder Term (M) with Line Fee setup
      PaymentTermsCode := CreatePaymentTerms(1);
      ReminderTermCode := CreateReminderTerms(TRUE,FALSE,FALSE);
      CreateReminderTermsLevel(ReminderTermCode,1,1,'',0,LibraryRandom.RandDecInRange(1,100,2),FALSE,1);

      // [GIVEN] Two customers N and M
      CustNoN := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);
      CustNoM := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);

      // [GIVEN] A invoice I_a that is overdue for customer N
      InvoiceA := PostSalesInvoice(CustNoN,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] A invoice I_b that is overdue for customer M
      InvoiceB := PostSalesInvoice(CustNoM,CALCDATE('<-10D>',WORKDATE));

      // [GIVEN] A reminder with a overdue sales invoice I_b and a Line Fee for customer M
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNoM,WORKDATE);

      // [GIVEN] The user is able to overwrite, and changes the Applies To for the Line Fee to a Invoice I_a
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,InvoiceB);
      ReminderLine."Applies-to Document No." := InvoiceA;
      ReminderLine.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating that the invoice does not belong to the customer
      Assert.ExpectedErrorCode('DB:NothingInsideFilter');
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE IssueValidateAppliesToMultipleFees@1103();
    VAR
      ReminderLine@1008 : Record 296;
      ReminderLine2@1000 : Record 296;
      ReminderNo@1006 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Line Fee Applies To throws an error when trying to apply multiple line fees to same document on same reminder
      Initialize(FALSE);

      // [GIVEN] A reminder with a over due sales invoice and a Line Fee
      ReminderNo := CreateReminderWithOverdueInvoiceAndLineFee;

      // [GIVEN] The user changes the Applies To for the Line Fee to a Invoice that is not overdue
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,ReminderNo,Type::"Line Fee","Document Type"::Invoice,'');
      ReminderLine2.INIT;
      ReminderLine2.VALIDATE("Reminder No.",ReminderNo);
      ReminderLine2.VALIDATE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine2.INSERT(TRUE);

      ReminderLine2.VALIDATE("Applies-to Document Type",ReminderLine."Applies-to Document Type"::Invoice);
      ReminderLine2.VALIDATE("Applies-to Document No.",ReminderLine."Applies-to Document No.");
      ReminderLine2.MODIFY(TRUE);

      // [WHEN] The Reminder is issued
      ASSERTERROR IssueReminder(ReminderNo);

      // [THEN] An error is thrown indicating that the invoice have to be overdue
      Assert.ExpectedError(
        STRSUBSTNO(MultipleLineFeesSameDocErr,ReminderLine."Applies-to Document Type",ReminderLine."Applies-to Document No."));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE PostNoInterestOnLineFeeFinCharge@1037();
    VAR
      ReminderLevel@1009 : Record 293;
      FinanceChrgMemoLine@1008 : Record 303;
      Customer@1007 : Record 18;
      CustNo@1006 : Code[20];
      ReminderTermCode@1005 : Code[10];
      FinanceChrgTermCode@1004 : Code[10];
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1002 : Code[20];
      FinanceChrgNo@1037 : Code[20];
      AmountZ@1000 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] Post process: Interest is not applied to Line Fees on Reminders, only to Additional fees when "Add. Line Fee in Interest" = FALSE
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee set up for level 1 and additional fee Z
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      AmountZ := LibraryRandom.RandDecInRange(1,100,2);
      ReminderLevel.VALIDATE("Additional Fee (LCY)",AmountZ);
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and "Add. Line Fee in Interest" = FALSE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,FALSE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] An Issued Reminder (IR_1) with reminder for Invoice I_a and Line Fee X for I_a
      PostSalesInvoice(CustNo,CALCDATE('<-30D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-20D>',WORKDATE));
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [GIVEN] IR_1 is overdue
      // [WHEN] A Finance Charge is created and lines are suggested (i.e. interest rate is calculated)
      FinanceChrgNo := CreateFinChrgAndSuggestLines(CustNo,WORKDATE);

      // [THEN] The interest is calculated only on Z
      FinanceChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChrgNo);
      FinanceChrgMemoLine.SETRANGE("Document Type",FinanceChrgMemoLine."Document Type"::Reminder);
      FinanceChrgMemoLine.SETRANGE("Document No.",IssuedReminderNo);
      FinanceChrgMemoLine.FINDFIRST;
      Assert.AreNearlyEqual(AmountZ * 0.02 / 30 * 20,FinanceChrgMemoLine.Amount,1,
        STRSUBSTNO(MustMatchErr,FinanceChrgMemoLine.FIELDCAPTION(Amount),FinanceChrgMemoLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE PostNoInterestOnLineFeeFinChargeNoAddFee@1035();
    VAR
      FinanceChrgMemoLine@1008 : Record 303;
      Customer@1007 : Record 18;
      CustNo@1006 : Code[20];
      ReminderTermCode@1005 : Code[10];
      FinanceChrgTermCode@1004 : Code[10];
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1002 : Code[20];
      FinanceChrgNo@1000 : Code[20];
    BEGIN
      // [SCENARIO TFS=107048] Post process: Interest is not applied to Line Fees on Reminders when "Add. Line Fee in Interest" = FALSE
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee set up for level 1 and NO additional fee
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and "Add. Line Fee in Interest" = FALSE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,FALSE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] An Issued Reminder (IR_1) with reminder for Invoice I_a and Line Fee X for I_a
      PostSalesInvoice(CustNo,CALCDATE('<-30D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-20D>',WORKDATE));
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [GIVEN] IR_1 is overdue
      // [WHEN] A Finance Charge is created and lines are suggested (i.e. interest rate is calculated)
      FinanceChrgNo := CreateFinChrgAndSuggestLines(CustNo,WORKDATE);

      // [THEN] No lines is added for IR_1 as only Line Fees is issued
      FinanceChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChrgNo);
      FinanceChrgMemoLine.SETRANGE("Document Type",FinanceChrgMemoLine."Document Type"::Reminder);
      FinanceChrgMemoLine.SETRANGE("Document No.",IssuedReminderNo);
      Assert.AreEqual(0,FinanceChrgMemoLine.COUNT,
        STRSUBSTNO(MustMatchErr,'Row Count',FinanceChrgMemoLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE PostNoInterestOnLineFeeReminder@1034();
    VAR
      ReminderLevel@1011 : Record 293;
      ReminderLine@1010 : Record 296;
      Customer@1009 : Record 18;
      CustNo@1008 : Code[20];
      ReminderTermCode@1007 : Code[10];
      FinanceChrgTermCode@1006 : Code[10];
      ReminderNo@1005 : Code[20];
      IssuedReminderNo@1004 : Code[20];
      SecondReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      AmountZ@1000 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] Post process: Interest is not applied to Line Fees on Reminders, only to Additional fees when "Add. Line Fee in Interest" = FALSE
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee set up for level 1 and additional fee Z
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      AmountZ := LibraryRandom.RandDecInRange(1,100,2);
      ReminderLevel.VALIDATE("Additional Fee (LCY)",AmountZ);
      ReminderLevel.VALIDATE("Calculate Interest",TRUE);
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and "Add. Line Fee in Interest" = FALSE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,FALSE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] An Issued Reminder (IR_1) with reminder for Invoice I_a and Line Fee X for I_a
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-30D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-20D>',WORKDATE));
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [GIVEN] IR_1 is overdue
      // [WHEN] A 2nd Reminder is created with R (and interest is calculated)
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] The interest on I_a is calculated
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);
      Assert.AreNearlyEqual(ReminderLine."Remaining Amount" * 0.02,ReminderLine.Amount,ReminderLine."Remaining Amount" / 1000,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The interest is calculated for IR_1 based only on Z
      WITH ReminderLine DO
        VerifyReminderLineExists(
          ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Reminder,IssuedReminderNo);
      Assert.AreNearlyEqual(AmountZ * 0.02 / 30 * 20,ReminderLine.Amount,1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The remaining amount of IR_1 is not equal to Z (i.e. it includes the Line Fee)
      Assert.AreNotEqual(ReminderLine."Remaining Amount",AmountZ,
        STRSUBSTNO(MustNotMatchErr,ReminderLine.FIELDCAPTION("Remaining Amount"),ReminderLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE PostInterestOnLineFeeFinCharge@1085();
    VAR
      ReminderLevel@1009 : Record 293;
      FinanceChrgMemoLine@1008 : Record 303;
      Customer@1007 : Record 18;
      CustNo@1006 : Code[20];
      ReminderTermCode@1005 : Code[10];
      FinanceChrgTermCode@1004 : Code[10];
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1002 : Code[20];
      FinanceChrgNo@1037 : Code[20];
      AmountZ@1000 : Decimal;
      AmountX@1010 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] Post process: Interest is applied to Line Fees and to Additional fees on reminders when "Add. Line Fee in Interest" = TRUE
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee set up for level 1 and additional fee Z
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      AmountZ := LibraryRandom.RandDecInRange(1,100,2);
      AmountX := ReminderLevel."Add. Fee per Line Amount (LCY)";
      ReminderLevel.VALIDATE("Additional Fee (LCY)",AmountZ);
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,TRUE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] An Issued Reminder (IR_1) with reminder for Invoice I_a and Line Fee X for I_a
      PostSalesInvoice(CustNo,CALCDATE('<-30D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-20D>',WORKDATE));
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [GIVEN] IR_1 is overdue
      // [WHEN] A Finance Charge is created and lines are suggested (i.e. interest rate is calculated)
      FinanceChrgNo := CreateFinChrgAndSuggestLines(CustNo,WORKDATE);

      // [THEN] The interest is calculated on Z+X
      FinanceChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChrgNo);
      FinanceChrgMemoLine.SETRANGE("Document Type",FinanceChrgMemoLine."Document Type"::Reminder);
      FinanceChrgMemoLine.SETRANGE("Document No.",IssuedReminderNo);
      FinanceChrgMemoLine.FINDFIRST;
      Assert.AreNearlyEqual((AmountZ + AmountX) * 0.02 / 30 * 20,FinanceChrgMemoLine.Amount,1,
        STRSUBSTNO(MustMatchErr,FinanceChrgMemoLine.FIELDCAPTION(Amount),FinanceChrgMemoLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(IssueRemindersRequestPageHandler)]
    PROCEDURE PostInterestOnLineFeeReminder@1042();
    VAR
      ReminderLevel@1011 : Record 293;
      ReminderLine@1010 : Record 296;
      Customer@1009 : Record 18;
      CustNo@1008 : Code[20];
      ReminderTermCode@1007 : Code[10];
      FinanceChrgTermCode@1006 : Code[10];
      ReminderNo@1005 : Code[20];
      IssuedReminderNo@1004 : Code[20];
      SecondReminderNo@1003 : Code[20];
      InvoiceA@1002 : Code[20];
      AmountZ@1000 : Decimal;
      AmountX@1012 : Decimal;
    BEGIN
      // [SCENARIO TFS=107048] Post process: Interest is applied to Line Fees and to Additional fees from reminders when "Add. Line Fee in Interest" = TRUE
      Initialize(FALSE);

      // [GIVEN] A reminder term (R) with Line Fee set up for level 1 with additional fee Z and Line Fee X
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      AmountZ := LibraryRandom.RandDecInRange(1,100,2);
      AmountX := ReminderLevel."Add. Fee per Line Amount (LCY)";
      ReminderLevel.VALIDATE("Additional Fee (LCY)",AmountZ);
      ReminderLevel.VALIDATE("Calculate Interest",TRUE);
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,TRUE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);

      // [GIVEN] An Issued Reminder (IR_1) with reminder for Invoice I_a and Line Fee X for I_a
      InvoiceA := PostSalesInvoice(CustNo,CALCDATE('<-30D>',WORKDATE));
      ReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-20D>',WORKDATE));
      IssuedReminderNo := IssueReminder(ReminderNo);

      // [GIVEN] IR_1 is overdue
      // [WHEN] A 2nd Reminder is created with R (and interest is calculated)
      SecondReminderNo := CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,WORKDATE);

      // [THEN] The interest on I_a is calculated
      WITH ReminderLine DO
        VerifyReminderLineExists(ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Invoice,InvoiceA);
      Assert.AreNearlyEqual(ReminderLine."Remaining Amount" * 0.02,ReminderLine.Amount,ReminderLine."Remaining Amount" / 1000,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The interest is calculated for IR_1 based on X+Z
      WITH ReminderLine DO
        VerifyReminderLineExists(
          ReminderLine,SecondReminderNo,Type::"Customer Ledger Entry","Document Type"::Reminder,IssuedReminderNo);
      Assert.AreNearlyEqual((AmountZ + AmountX) * 0.02 / 30 * 20,ReminderLine.Amount,1,
        STRSUBSTNO(MustMatchErr,ReminderLine.FIELDCAPTION(Amount),ReminderLine.TABLECAPTION));

      // [THEN] The remaining amount of IR_1 is not equal to Z (i.e. it includes the Line Fee)
      Assert.AreNotEqual(ReminderLine."Remaining Amount",AmountZ,
        STRSUBSTNO(MustNotMatchErr,ReminderLine.FIELDCAPTION("Remaining Amount"),ReminderLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE Initialize@1027(ClearExtReminders@1005 : Boolean);
    VAR
      CustomerPostingGroup@1000 : Record 92;
      ReminderHeader@1004 : Record 295;
    BEGIN
      LibraryRandom.SetSeed(1);
      ResetDocumentValueRange;
      LibraryVariableStorage.Clear;

      IF ClearExtReminders THEN
        ReminderHeader.DELETEALL(TRUE);

      IF IsInitialized THEN
        EXIT;

      IsInitialized := TRUE;

      CustomerPostingGroup.FINDFIRST;
      CustomerPostingGroup.MODIFYALL("Add. Fee per Line Account",CustomerPostingGroup."Additional Fee Account");
    END;

    LOCAL PROCEDURE ResetDocumentValueRange@1026();
    BEGIN
      MinDocumentValue := 1;
      MaxDocumentValue := 100000;
    END;

    LOCAL PROCEDURE CreateCurrencyforReminderLevel@1025(ReminderTermsCode@1005 : Code[10];Level@1002 : Integer;CurrencyCode@1004 : Code[10];AdditionalFee@1001 : Decimal;LineFee@1003 : Decimal);
    VAR
      CurrencyForReminderLevel@1000 : Record 329;
    BEGIN
      WITH CurrencyForReminderLevel DO BEGIN
        INIT;
        VALIDATE("Reminder Terms Code",ReminderTermsCode);
        VALIDATE("No.",Level);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Additional Fee",AdditionalFee);
        VALIDATE("Add. Fee per Line",LineFee);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCustomerWithReminderAndPaymentTerms@1024(ReminderTermsCode@1002 : Code[10];PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",ReminderTermsCode);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.")
    END;

    LOCAL PROCEDURE CreateCustomerWithReminderTermsAddFeePerLine@1098(VAR CustNo@1003 : Code[20];VAR ReminderTermCode@1005 : Code[10];WithLineFee@1002 : Boolean;CurrencyCode@1004 : Code[10];LineFee@1001 : Decimal);
    VAR
      PaymentTermsCode@1000 : Code[10];
    BEGIN
      PaymentTermsCode := CreatePaymentTerms(1);
      ReminderTermCode := CreateReminderTerms(TRUE,FALSE,TRUE);
      IF WithLineFee THEN
        CreateReminderTermsLevel(ReminderTermCode,1,1,CurrencyCode,0,LineFee,FALSE,1)
      ELSE
        CreateReminderTermsLevel(ReminderTermCode,1,1,'',0,0,FALSE,1);

      CustNo := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@1023(DueDateDays@1002 : Integer) : Code[10];
    VAR
      PaymentTerms@1001 : Record 3;
      DueDateCalcFormula@1000 : DateFormula;
    BEGIN
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(DueDateCalcFormula,'<+' + FORMAT(DueDateDays) + 'D>');
      PaymentTerms.VALIDATE("Due Date Calculation",DueDateCalcFormula);
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code)
    END;

    LOCAL PROCEDURE CreateReminderHeader@1022(VAR ReminderHeader@1002 : Record 295;CustNo@1000 : Code[20];PostingDate@1001 : Date);
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustNo);
      ReminderHeader.VALIDATE("Posting Date",PostingDate);
      ReminderHeader.VALIDATE("Document Date",PostingDate);
      ReminderHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderAndSuggestLines@1021(CustomerNo@1004 : Code[20];PostingDate@1002 : Date;VAR CustLedgEntryLineFeeOn@1003 : Record 21) : Code[20];
    VAR
      ReminderHeader@1000 : Record 295;
    BEGIN
      CreateReminderHeader(ReminderHeader,CustomerNo,PostingDate);

      SuggestReminderLines(ReminderHeader."No.",CustLedgEntryLineFeeOn);
      EXIT(ReminderHeader."No.")
    END;

    LOCAL PROCEDURE CreateReminderAndSuggestLinesLineFeeOnAll@1020(CustomerNo@1002 : Code[20];PostingDate@1001 : Date) : Code[20];
    VAR
      CustLedgEntryLineFeeOn@1000 : Record 21;
    BEGIN
      CustLedgEntryLineFeeOn.RESET;
      EXIT(CreateReminderAndSuggestLines(CustomerNo,PostingDate,CustLedgEntryLineFeeOn));
    END;

    LOCAL PROCEDURE CreateReminderWithOverdueInvoiceAndLineFee@1019() : Code[20];
    VAR
      CustNo@1001 : Code[20];
      ReminderTermCode@1000 : Code[10];
    BEGIN
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      PostSalesInvoice(CustNo,CALCDATE('<-10D>',WORKDATE));
      EXIT(CreateReminderAndSuggestLinesLineFeeOnAll(CustNo,CALCDATE('<-6D>',WORKDATE)));
    END;

    LOCAL PROCEDURE SuggestReminderLines@1018(ReminderNo@1004 : Code[20];VAR CustLedgEntryLineFeeOn@1003 : Record 21);
    VAR
      ReminderHeader@1002 : Record 295;
      CustLedgerEntry@1001 : Record 21;
      ReminderMake@1000 : Codeunit 392;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      ReminderMake.SuggestLines(ReminderHeader,CustLedgerEntry,FALSE,FALSE,CustLedgEntryLineFeeOn);
      ReminderMake.Code;
    END;

    LOCAL PROCEDURE CreateReminderLineOfTypeLineFee@1017(VAR ReminderLine@1003 : Record 296;ReminderNo@1001 : Code[20];DocType@1002 : Option;DocNo@1000 : Code[20]);
    BEGIN
      ReminderLine.INIT;
      ReminderLine.VALIDATE("Reminder No.",ReminderNo);
      ReminderLine.INSERT(TRUE);
      ReminderLine.VALIDATE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.VALIDATE("Applies-to Document Type",DocType);
      ReminderLine.VALIDATE("Applies-to Document No.",DocNo);
      ReminderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCreateReminderReport@1016(CustNo@1005 : Code[20];PostingDate@1003 : Date;VAR CustLedgEntryLineFeeOn@1004 : Record 21) : Code[20];
    VAR
      Customer@1001 : Record 18;
      ReminderHeader@1000 : Record 295;
      CreateReminders@1002 : Report 188;
    BEGIN
      CreateReminders.InitializeRequest(PostingDate,PostingDate,TRUE,FALSE,FALSE);
      IF CustNo <> '' THEN BEGIN
        Customer.SETRANGE("No.",CustNo);
        CreateReminders.SETTABLEVIEW(Customer);
      END;
      CreateReminders.SetApplyLineFeeOnFilters(CustLedgEntryLineFeeOn);
      CreateReminders.USEREQUESTPAGE(FALSE);
      CreateReminders.RUN;

      IF CustNo <> '' THEN
        ReminderHeader.SETRANGE("Customer No.",CustNo);
      IF ReminderHeader.FINDLAST THEN
        EXIT(ReminderHeader."No.");
      EXIT('');
    END;

    LOCAL PROCEDURE CreateFinChrgAndSuggestLines@11200013(CustomerNo@1002 : Code[20];PostingDate@1003 : Date) : Code[20];
    VAR
      FinanceChargeMemoHeader@1000 : Record 302;
    BEGIN
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,CustomerNo);
      FinanceChargeMemoHeader.VALIDATE("Posting Date",PostingDate);
      FinanceChargeMemoHeader.VALIDATE("Document Date",PostingDate);
      FinanceChargeMemoHeader.MODIFY(TRUE);

      FinanceChargeMemoHeader.SETRANGE("No.",FinanceChargeMemoHeader."No.");
      REPORT.RUNMODAL(REPORT::"Suggest Fin. Charge Memo Lines",FALSE,FALSE,FinanceChargeMemoHeader);

      EXIT(FinanceChargeMemoHeader."No.")
    END;

    LOCAL PROCEDURE CreateReminderTerms@1015(PostLineFee@1001 : Boolean;PostInterest@1002 : Boolean;PostAddFee@1004 : Boolean) : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      ReminderTerms.VALIDATE("Post Interest",PostInterest);
      ReminderTerms.VALIDATE("Post Add. Fee per Line",PostLineFee);
      ReminderTerms.VALIDATE("Post Additional Fee",PostAddFee);
      ReminderTerms.VALIDATE("Note About Line Fee on Report",'%1 %2 %3 %4');
      ReminderTerms.MODIFY(TRUE);
      EXIT(ReminderTerms.Code)
    END;

    LOCAL PROCEDURE CreateReminderTermsLevel@1014(ReminderTermsCode@1008 : Code[10];DueDateDays@1004 : Integer;GracePeriodDays@1009 : Integer;CurrencyCode@1007 : Code[10];AdditionalFee@1003 : Decimal;LineFee@1006 : Decimal;CalculateInterest@1002 : Boolean;Level@1005 : Integer);
    VAR
      ReminderLevel@1001 : Record 293;
      DueDateCalcFormula@1000 : DateFormula;
      GracePeriodCalcFormula@1010 : DateFormula;
    BEGIN
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(DueDateCalcFormula,'<+' + FORMAT(DueDateDays) + 'D>');
      EVALUATE(GracePeriodCalcFormula,'<+' + FORMAT(GracePeriodDays) + 'D>');
      ReminderLevel.VALIDATE("No.",Level);
      ReminderLevel.VALIDATE("Due Date Calculation",DueDateCalcFormula);
      ReminderLevel.VALIDATE("Grace Period",GracePeriodCalcFormula);
      ReminderLevel.VALIDATE("Calculate Interest",CalculateInterest);
      ReminderLevel.VALIDATE("Add. Fee per Line Description",
        LibraryUtility.GenerateRandomCode(ReminderLevel.FIELDNO("Add. Fee per Line Description"),DATABASE::"Reminder Level"));
      IF CurrencyCode <> '' THEN
        CreateCurrencyforReminderLevel(ReminderTermsCode,Level,CurrencyCode,AdditionalFee,LineFee)
      ELSE BEGIN
        ReminderLevel.VALIDATE("Add. Fee per Line Amount (LCY)",LineFee);
        ReminderLevel.VALIDATE("Additional Fee (LCY)",AdditionalFee);
      END;
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAdditionalFeeSetupLine@7(ReminderTermsCode@1000 : Code[10];Level@1001 : Integer;PerLine@1002 : Boolean;Currency@1003 : Code[10];Threshold@1004 : Decimal);
    VAR
      AdditionalFeeSetup@1005 : Record 1050;
    BEGIN
      WITH AdditionalFeeSetup DO BEGIN
        INIT;
        "Reminder Terms Code" := ReminderTermsCode;
        "Reminder Level No." := Level;
        "Charge Per Line" := PerLine;
        "Currency Code" := Currency;
        "Threshold Remaining Amount" := Threshold;
        "Additional Fee Amount" := LibraryRandom.RandDecInRange(0,100,2);
        "Additional Fee %" := LibraryRandom.RandDecInRange(0,100,2);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateStandardReminderTermSetupWithCust@1013(VAR CustNo@1003 : Code[20];VAR ReminderTermCode@1001 : Code[10];WithLineFee@1002 : Boolean);
    BEGIN
      CreateCustomerWithReminderTermsAddFeePerLine(
        CustNo,ReminderTermCode,WithLineFee,'',LibraryRandom.RandDecInRange(1,100,2));
    END;

    LOCAL PROCEDURE CreateStandardReminderTermSetupWithCustAndFinChrg@1113(VAR CustNo@1003 : Code[20];VAR ReminderTermCode@1001 : Code[10];WithLineFee@1002 : Boolean;CalcInterest@1004 : Boolean;PostInterest@1005 : Boolean);
    VAR
      ReminderTerms@1006 : Record 292;
      ReminderLevel@1009 : Record 293;
      Customer@1008 : Record 18;
      FinanceChrgTermCode@1007 : Code[10];
    BEGIN
      CreateCustomerWithReminderTermsAddFeePerLine(
        CustNo,ReminderTermCode,WithLineFee,'',LibraryRandom.RandDecInRange(1,100,2));

      ReminderTerms.GET(ReminderTermCode);
      ReminderTerms."Post Interest" := PostInterest;
      ReminderTerms.MODIFY(TRUE);
      ReminderLevel.GET(ReminderTermCode,1);
      ReminderLevel."Calculate Interest" := CalcInterest;
      ReminderLevel.MODIFY(TRUE);

      // [GIVEN] A Finance Charge Term (T) with 2% interest and with "Add. Line Fee in Interest" = TRUE
      FinanceChrgTermCode := CreateFinChrgTerms(2,0,5,TRUE,FALSE,TRUE);
      Customer.GET(CustNo);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChrgTermCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStandardRmdTermSetupWithSingleDynCalc@1088(VAR ReminderTermCode@1000 : Code[10];VAR CustNo@1001 : Code[20];Percentage@1002 : Decimal);
    VAR
      ReminderLevel@1006 : Record 293;
      AdditionalFeeSetup@1007 : Record 1050;
      PaymentTermsCode@1005 : Code[10];
    BEGIN
      CreateStandardReminderTermSetupWithCust(CustNo,ReminderTermCode,TRUE);
      PaymentTermsCode := CreatePaymentTerms(1);
      ReminderTermCode := CreateReminderTerms(TRUE,FALSE,TRUE);

      CreateReminderTermsLevel(ReminderTermCode,1,1,'',0,0,FALSE,1);

      ReminderLevel.GET(ReminderTermCode,1);
      ReminderLevel."Add. Fee Calculation Type" := ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic";
      ReminderLevel.MODIFY(TRUE);

      WITH AdditionalFeeSetup DO BEGIN
        INIT;
        "Reminder Terms Code" := ReminderTermCode;
        "Reminder Level No." := 1;
        "Charge Per Line" := FALSE;
        "Currency Code" := '';
        "Threshold Remaining Amount" := 0;
        "Additional Fee %" := Percentage;
        INSERT(TRUE);
      END;

      CustNo := CreateCustomerWithReminderAndPaymentTerms(ReminderTermCode,PaymentTermsCode);
    END;

    LOCAL PROCEDURE CreateFinChrgTerms@11200015(InterestRate@1004 : Decimal;AddFee@1006 : Decimal;GracePeriod@1003 : Integer;PostInterest@1005 : Boolean;PostAddFee@1002 : Boolean;IncludeLineFeeInInterest@1007 : Boolean) : Code[10];
    VAR
      FinanceChargeTerms@1001 : Record 5;
      DueDateCalcFormula@1000 : DateFormula;
    BEGIN
      LibraryERM.CreateFinanceChargeTerms(FinanceChargeTerms);
      FinanceChargeTerms.VALIDATE("Interest Rate",InterestRate);
      FinanceChargeTerms.VALIDATE("Interest Period (Days)",30);
      FinanceChargeTerms.VALIDATE("Additional Fee (LCY)",AddFee);
      FinanceChargeTerms.VALIDATE(
        "Interest Calculation Method",FinanceChargeTerms."Interest Calculation Method"::"Average Daily Balance");
      EVALUATE(DueDateCalcFormula,'<+' + FORMAT(GracePeriod) + 'D>');
      FinanceChargeTerms.VALIDATE("Grace Period",DueDateCalcFormula);
      FinanceChargeTerms.VALIDATE("Post Interest",PostInterest);
      FinanceChargeTerms.VALIDATE("Post Additional Fee",PostAddFee);
      FinanceChargeTerms.VALIDATE("Add. Line Fee in Interest",IncludeLineFeeInInterest);
      FinanceChargeTerms.MODIFY(TRUE);
      EXIT(FinanceChargeTerms.Code);
    END;

    LOCAL PROCEDURE AddReminderText@1012(ReminderTermCode@1004 : Code[10];Level@1002 : Integer;Position@1003 : Option;Text@1001 : Text[100]);
    VAR
      ReminderText@1000 : Record 294;
      NextLineNo@1005 : Integer;
    BEGIN
      ReminderText.SETRANGE("Reminder Terms Code",ReminderTermCode);
      ReminderText.SETRANGE("Reminder Level",Level);
      IF ReminderText.FINDLAST THEN;
      NextLineNo := ReminderText."Line No." + 1000;

      ReminderText.INIT;
      ReminderText."Reminder Terms Code" := ReminderTermCode;
      ReminderText."Reminder Level" := Level;
      ReminderText.Position := Position;
      ReminderText.Text := Text;
      ReminderText."Line No." := NextLineNo;
      ReminderText.INSERT(TRUE);
    END;

    LOCAL PROCEDURE UpdateReminderText@1011(ReminderNo@1002 : Code[20];Level@1001 : Integer);
    VAR
      ReminderHeader@1000 : Record 295;
    BEGIN
      COMMIT;
      ReminderHeader.SETRANGE("No.",ReminderNo);
      LibraryVariableStorage.Enqueue(Level);
      REPORT.RUNMODAL(REPORT::"Update Reminder Text",TRUE,FALSE,ReminderHeader);
    END;

    LOCAL PROCEDURE FindOpenCustomerLedgerEntriesExclVAT@1010(VAR CustLedgerEntry@1002 : Record 21;IssuedReminderNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document No.",IssuedReminderNo);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.FINDSET;
      CustLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
      CustLedgerEntry.Amount -= GetVATOfCustLedgEntry(CustLedgerEntry);
    END;

    LOCAL PROCEDURE GetVATOfCustLedgEntry@1200(VAR CustLedgEntry@1000 : Record 21) : Decimal;
    VAR
      VATEntry@1001 : Record 254;
      Amount@1002 : Decimal;
    BEGIN
      VATEntry.SETRANGE("Document No.",CustLedgEntry."Document No.");
      VATEntry.SETRANGE("Document Type",CustLedgEntry."Document Type");
      IF VATEntry.FINDSET THEN
        REPEAT
          Amount += VATEntry.Amount;
        UNTIL VATEntry.NEXT = 0;
      EXIT(-Amount);
    END;

    LOCAL PROCEDURE FindTwoGLAccounts@1129(VAR GLAccountA@1002 : Code[20];VAR GLAccountB@1003 : Code[20];VATBusGroup@1004 : Code[20]);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      GetValidVATPostingSetup(VATPostingSetup,VATBusGroup);
      GLAccountA := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,2); // Sale
      VATPostingSetup.NEXT;
      GLAccountB := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,2); // Sale
      UpdateDefaultVATProdGroup(GLAccountA);
      UpdateDefaultVATProdGroup(GLAccountB);
    END;

    LOCAL PROCEDURE GetValidVATPostingSetup@3(VAR VATPostingSetup@1000 : Record 325;VATBusGroup@1001 : Code[20]);
    BEGIN
      WITH VATPostingSetup DO BEGIN
        IF VATBusGroup <> '' THEN
          SETRANGE("VAT Bus. Posting Group",VATBusGroup);
        SETRANGE("VAT Calculation Type","VAT Calculation Type"::"Normal VAT");
        SETFILTER("Sales VAT Account",'<>%1','');
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE UpdateDefaultVATProdGroup@12(AccountNo@1000 : Code[20]);
    VAR
      GLAccount@1001 : Record 15;
      GenProdPostingGroup@1002 : Record 251;
    BEGIN
      GLAccount.GET(AccountNo);
      IF GenProdPostingGroup.GET(GLAccount."Gen. Prod. Posting Group") THEN BEGIN
        IF GenProdPostingGroup."Auto Insert Default" THEN
          GenProdPostingGroup."Def. VAT Prod. Posting Group" := GLAccount."VAT Prod. Posting Group";
        GenProdPostingGroup.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetReminderLines@1008(VAR ReminderLine@1004 : Record 296;ReminderHeaderNo@1002 : Code[20];Type@1003 : ' ,G/L Account,Customer Ledger Entry,Line Fee';DocumentType@1001 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1000 : Code[20]) : Boolean;
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeaderNo);
      ReminderLine.SETRANGE(Type,Type);
      IF Type = ReminderLine.Type::"Line Fee" THEN BEGIN
        IF DocumentType <> 0 THEN
          ReminderLine.SETRANGE("Applies-to Document Type",DocumentType);
        IF DocumentNo <> '' THEN
          ReminderLine.SETRANGE("Applies-to Document No.",DocumentNo);
      END ELSE BEGIN
        IF DocumentType <> 0 THEN
          ReminderLine.SETRANGE("Document Type",DocumentType);
        IF DocumentNo <> '' THEN
          ReminderLine.SETRANGE("Document No.",DocumentNo);
      END;

      EXIT(ReminderLine.FINDSET);
    END;

    LOCAL PROCEDURE VerifyReminderLineExists@1007(VAR ReminderLine@1004 : Record 296;ReminderHeaderNo@1002 : Code[20];Type@1003 : ' ,G/L Account,Customer Ledger Entry,Line Fee';DocumentType@1001 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1000 : Code[20]);
    BEGIN
      Assert.IsTrue(
        GetReminderLines(ReminderLine,ReminderHeaderNo,Type,DocumentType,DocumentNo),
        STRSUBSTNO(ReminderLineMustExistErr,ReminderLine.GETFILTERS));
    END;

    LOCAL PROCEDURE VerifyReminderLineDoesNotExists@1006(VAR ReminderLine@1004 : Record 296;ReminderHeaderNo@1002 : Code[20];Type@1003 : ' ,G/L Account,Customer Ledger Entry,Line Fee';DocumentType@1001 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1000 : Code[20]);
    BEGIN
      Assert.IsFalse(
        GetReminderLines(ReminderLine,ReminderHeaderNo,Type,DocumentType,DocumentNo),
        STRSUBSTNO(ReminderLineMustNotExistErr,ReminderLine.GETFILTERS));
    END;

    LOCAL PROCEDURE IssueReminder@1005(ReminderHeaderNo@1003 : Code[20]) : Code[20];
    VAR
      IssuedReminderHeader@1002 : Record 297;
      ReminderHeader@1001 : Record 295;
      IssueReminders@1000 : Report 190;
    BEGIN
      ReminderHeader.GET(ReminderHeaderNo);
      ReminderHeader.SETRANGE("No.",ReminderHeaderNo);
      CLEAR(IssueReminders);
      IssueReminders.SETTABLEVIEW(ReminderHeader);
      COMMIT;
      IssueReminders.RUN;

      IssuedReminderHeader.SETFILTER("Customer No.",ReminderHeader."Customer No.");
      IssuedReminderHeader.FINDLAST;
      EXIT(IssuedReminderHeader."No.")
    END;

    LOCAL PROCEDURE PostSalesInvoice@1004(CustomerNo@1004 : Code[20];PostingDate@1003 : Date) : Code[20];
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.FindItem(Item);
      LibrarySales.CreateSalesLine(
        SalesLine,
        SalesHeader,
        SalesLine.Type::Item,
        Item."No.",
        LibraryRandom.RandDecInRange(MinDocumentValue,MaxDocumentValue,2));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE)); // Ship, Invoice
    END;

    LOCAL PROCEDURE PostCreditMemo@1002(CustomerNo@1004 : Code[20];PostingDate@1003 : Date) : Code[20];
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.FindItem(Item);
      LibrarySales.CreateSalesLine(
        SalesLine,
        SalesHeader,
        SalesLine.Type::Item,
        Item."No.",
        LibraryRandom.RandDecInRange(MinDocumentValue,MaxDocumentValue,2));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE)); // Ship, Invoice
    END;

    LOCAL PROCEDURE PostCustGenJnlLine@1120(CustNo@1000 : Code[20]);
    VAR
      GenJournalLine@1008 : Record 81;
      GenJournalBatch@1005 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::Customer,CustNo,LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [RequestPageHandler]
    PROCEDURE IssueRemindersRequestPageHandler@1001(VAR IssueReminders@1000 : TestRequestPage 190);
    BEGIN
      IssueReminders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateReminderTextRequestPageHandler@1000(VAR UpdateText@1001 : TestRequestPage 187);
    VAR
      Level@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Level);
      UpdateText.ReminderLevelNo.SETVALUE(Level);
      UpdateText.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmNoHandler@1151(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    BEGIN
    END.
  }
}

