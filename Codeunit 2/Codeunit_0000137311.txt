OBJECT Codeunit 137311 SCM Kitting - Printout Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      AssemblySetup@1015 : Record 905;
      ItemATO@1001 : Record 27;
      ItemATS@1040 : Record 27;
      ItemJournalTemplate@1035 : Record 82;
      ItemJournalBatch@1036 : Record 233;
      Location@1038 : Record 14;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryCosting@1005 : Codeunit 132200;
      LibraryAssembly@1013 : Codeunit 132207;
      LibraryWarehouse@1010 : Codeunit 132204;
      LibraryDimension@1025 : Codeunit 131001;
      LibrarySales@1032 : Codeunit 130509;
      LibraryReportDataset@1000 : Codeunit 131007;
      LibraryVariableStorage@1023 : Codeunit 131004;
      LibraryResource@1021 : Codeunit 130511;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1007 : Codeunit 130440;
      isInitialized@1006 : Boolean;
      WorkDate2@1020 : Date;
      MsgUpdateDim@1022 : TextConst 'ENU=Do you want to update the Dimensions on the lines?';

    LOCAL PROCEDURE Initialize@8();
    VAR
      MfgSetup@1000 : Record 99000765;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      CLEARLASTERROR;
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      MfgSetup.GET;
      WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
      LibraryCosting.AdjustCostItemEntries('','');
      LibraryCosting.PostInvtCostToGL(FALSE,WorkDate2,'');

      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Item/Resource Card",
        LibraryUtility.GetGlobalNoSeriesCode);

      SetupLocation(Location);
      SetupItemJournal;

      LibraryAssembly.SetupAssemblyItem(
        ItemATS,ItemATS."Costing Method"::Standard,ItemATS."Costing Method"::Standard,ItemATS."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));
      CreateAndSetVariantsOnAsmListForItem(ItemATS);

      LibraryAssembly.SetupAssemblyItem(
        ItemATO,ItemATO."Costing Method"::Standard,ItemATO."Costing Method"::Standard,ItemATO."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));
      CreateAndSetVariantsOnAsmListForItem(ItemATO);

      ItemATO.VALIDATE("Assembly Policy",ItemATO."Assembly Policy"::"Assemble-to-Order");
      ItemATO.MODIFY(TRUE);

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SetupLocation@2(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1004 : Record 7301;
      Bin@1003 : Record 7354;
    BEGIN
      CLEAR(Location);
      Location.INIT;
      LibraryWarehouse.CreateLocation(Location);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := TRUE;
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(Bin,Location.Code,'ToBin','','');
      Location.VALIDATE("To-Assembly Bin Code",Bin.Code);
      LibraryWarehouse.CreateBin(Bin,Location.Code,'FromBin','','');
      Location.VALIDATE("From-Assembly Bin Code",Bin.Code);

      Location.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE SetupItemJournal@138();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE SetShortcutDimensions@1115(AssemblyHeader@1000 : Record 900;Num@1001 : Integer);
    VAR
      DimensionValue@1002 : Record 349;
      DimensionSetEntry@1010 : Record 480;
      GeneralLedgerSetup@1003 : Record 98;
      ShortcutDimensionCode@1004 : Code[20];
      DimensionSetID@1007 : Integer;
    BEGIN
      GeneralLedgerSetup.GET;
      IF Num = 1 THEN
        ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code"
      ELSE
        ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 2 Code";

      DimensionSetID := AssemblyHeader."Dimension Set ID";
      LibraryDimension.FindDimensionValue(DimensionValue,ShortcutDimensionCode);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,ShortcutDimensionCode,DimensionValue.Code);
      AssemblyHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      AssemblyHeader.MODIFY(TRUE);

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,AssemblyHeader."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      DimensionSetEntry.FINDFIRST;

      IF Num = 1 THEN
        AssemblyHeader.VALIDATE(
          "Shortcut Dimension 1 Code",
          LibraryDimension.FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"))
      ELSE
        AssemblyHeader.VALIDATE(
          "Shortcut Dimension 2 Code",
          LibraryDimension.FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      AssemblyHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSetVariantsOnAsmListForItem@78(Item@1001 : Record 27);
    VAR
      BOMComponent@1000 : Record 90;
      ItemVariant@1002 : Record 5401;
    BEGIN
      BOMComponent.SETRANGE("Parent Item No.",Item."No.");
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      IF BOMComponent.FINDSET THEN
        REPEAT
          LibraryInventory.CreateItemVariant(ItemVariant,BOMComponent."No.");
          BOMComponent.VALIDATE("Variant Code",ItemVariant.Code);
          BOMComponent.MODIFY(TRUE);
        UNTIL BOMComponent.NEXT = 0;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@48(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    [ConfirmHandler]
    PROCEDURE DimensionsChangeConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,MsgUpdateDim) > 0,STRSUBSTNO('Wrong question: %1',Question));

      Reply := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE MakeLongDescriptionOnLine@31(AssemblyHeader@1000 : Record 900;VAR TempAssemblyLine@1001 : TEMPORARY Record 901);
    VAR
      AssemblyLine@1006 : Record 901;
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.FINDFIRST;
      AssemblyLine.VALIDATE(Description,PADSTR(LibraryUtility.GenerateGUID,49,'.') + '!');
      AssemblyLine.MODIFY(TRUE);

      TempAssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      TempAssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      TempAssemblyLine.SETRANGE("No.",AssemblyLine."No.");
      TempAssemblyLine.FINDFIRST;
      TempAssemblyLine.VALIDATE(Description,AssemblyLine.Description);
      TempAssemblyLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearJournal@22(ItemJournalTemplate@1002 : Record 82;ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE CreateSalesOrder@230(VAR SalesHeader@1000 : Record 36;ItemNo1@1001 : Code[20];ItemNo2@1004 : Code[20];LocationCode@1006 : Code[10];VAR SalesLine1@1002 : Record 37;VAR SalesLine2@1005 : Record 37;SalesQty@1008 : Integer);
    VAR
      ShipmentDate@1003 : Date;
    BEGIN
      ShipmentDate := CALCDATE('<+' + FORMAT(LibraryRandom.RandInt(30)) + 'D>',WorkDate2);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLineWithShipmentDate(SalesLine1,SalesHeader,SalesLine1.Type::Item,ItemNo1,ShipmentDate,SalesQty);
      IF ItemNo2 <> '' THEN
        LibrarySales.CreateSalesLineWithShipmentDate(SalesLine2,SalesHeader,SalesLine2.Type::Item,ItemNo2,ShipmentDate,SalesQty);
    END;

    [Normal]
    LOCAL PROCEDURE AddInventoryNonDirectLocation@36(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Qty@1002 : Integer;BinCode@1004 : Code[20]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      ClearJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPrintoutPostedAO@26(AssemblyHeaderNo@1001 : Code[20];SalesOrderNo@1007 : Code[20];ShowDimensions@1008 : Boolean;Reversed@1006 : Boolean);
    VAR
      PostedAssemblyHeader@1003 : Record 910;
    BEGIN
      PostedAssemblyHeader.RESET;
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeaderNo);
      Assert.IsTrue(PostedAssemblyHeader.FINDFIRST,'Assembly order is not posted');

      COMMIT;
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(ShowDimensions);
      REPORT.RUN(REPORT::"Posted Assembly Order",TRUE,FALSE,PostedAssemblyHeader);

      LibraryReportDataset.LoadDataSetFile;
      VerifyPrintoutPostedAOHeader(PostedAssemblyHeader,SalesOrderNo,ShowDimensions,Reversed);
      VerifyPrintoutPostedAOLines(PostedAssemblyHeader,ShowDimensions);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPrintoutPostedAOHeader@13(PostedAssemblyHeader@1001 : Record 910;SalesOrderNo@1002 : Code[20];ShowDimensions@1004 : Boolean;Reversed@1011 : Boolean);
    VAR
      PostedSalesShipmentHeader@1003 : Record 110;
      DimensionSetEntry@1005 : Record 480;
      UnitOfMeasure@1006 : Record 204;
      ExpDimensionLine@1000 : Text;
    BEGIN
      LibraryReportDataset.SetRange('No_PostedAssemblyHeader',PostedAssemblyHeader."No.");
      LibraryReportDataset.GetNextRow;

      IF SalesOrderNo <> '' THEN BEGIN
        PostedSalesShipmentHeader.SETRANGE("Order No.",SalesOrderNo);
        PostedSalesShipmentHeader.FINDFIRST;
        LibraryReportDataset.AssertCurrentRowValue('LinkedSalesShipment',PostedSalesShipmentHeader."No.");
      END;

      LibraryReportDataset.AssertCurrentRowValue('OrderNo_PostedAssemblyHeader',PostedAssemblyHeader."Order No.");
      LibraryReportDataset.AssertCurrentRowValue('PostingDate_PostedAssemblyHeader',FORMAT(PostedAssemblyHeader."Posting Date"));
      LibraryReportDataset.AssertCurrentRowValue('ItemNo_PostedAssemblyHeader',PostedAssemblyHeader."Item No.");
      LibraryReportDataset.AssertCurrentRowValue('Description_PostedAssemblyHeader',PostedAssemblyHeader.Description);
      LibraryReportDataset.AssertCurrentRowValue('AssembledQuantity_PostedAssemblyHeader',PostedAssemblyHeader.Quantity);
      UnitOfMeasure.GET(PostedAssemblyHeader."Unit of Measure Code");
      LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasure_PostedAssemblyHeader',UnitOfMeasure.Description);
      LibraryReportDataset.AssertCurrentRowValue('Reversed_PostedAssemblyHeader',FORMAT(Reversed));

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PostedAssemblyHeader."Dimension Set ID");
      ExpDimensionLine := GetDimensionString(DimensionSetEntry);

      IF ShowDimensions AND (ExpDimensionLine <> '') THEN
        LibraryReportDataset.AssertCurrentRowValue('DimText',ExpDimensionLine);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPrintoutPostedAOLines@11(PostedAssemblyHeader@1001 : Record 910;ShowDimensions@1002 : Boolean);
    VAR
      PostedAssemblyLine@1000 : Record 911;
      DimensionSetEntry@1008 : Record 480;
      UnitOfMeasure@1007 : Record 204;
      DimValue@1003 : Variant;
      ExpDimensionLine@1004 : Text;
      ActDimensionLine@1005 : Text;
    BEGIN
      PostedAssemblyLine.SETRANGE("Document No.",PostedAssemblyHeader."No.");
      PostedAssemblyLine.SETRANGE(Type,PostedAssemblyLine.Type::Item,PostedAssemblyLine.Type::Resource);
      PostedAssemblyLine.FINDSET;

      REPEAT
        LibraryReportDataset.SetRange('LineNo_PostedAssemblyLine',PostedAssemblyLine."Line No.");
        LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PostedAssemblyLine."Dimension Set ID");
        ExpDimensionLine := GetDimensionString(DimensionSetEntry);

        WHILE LibraryReportDataset.GetNextRow DO BEGIN
          LibraryReportDataset.AssertCurrentRowValue('Type_PostedAssemblyLine',FORMAT(PostedAssemblyLine.Type));
          LibraryReportDataset.AssertCurrentRowValue('No_PostedAssemblyLine',PostedAssemblyLine."No.");
          LibraryReportDataset.AssertCurrentRowValue('Description_PostedAssemblyLine',PostedAssemblyLine.Description);
          LibraryReportDataset.AssertCurrentRowValue('Quantity_PostedAssemblyLine',PostedAssemblyLine.Quantity);
          LibraryReportDataset.AssertCurrentRowValue('Quantityper_PostedAssemblyLine',PostedAssemblyLine."Quantity per");
          UnitOfMeasure.GET(PostedAssemblyLine."Unit of Measure Code"); // the report prints the UOM description
          LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasureDescription_PostedAssemblyLine',UnitOfMeasure.Description);

          IF ShowDimensions AND (ExpDimensionLine <> '') THEN BEGIN
            LibraryReportDataset.FindCurrentRowValue('DimText2',DimValue);
            ActDimensionLine += FORMAT(DimValue) + '; ';
          END;
        END;

        IF ShowDimensions AND (ExpDimensionLine <> '') THEN
          Assert.IsTrue(STRPOS(DELCHR(ActDimensionLine,'=','; '),DELCHR(ExpDimensionLine,'=','; ')) > 0,'Wrong dim.')
        ELSE
          Assert.AreEqual('',DELCHR(ActDimensionLine,'=','; '),'Dimension should not be printed.');

      UNTIL PostedAssemblyLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE GetDimensionString@5(VAR DimensionSetEntry@1000 : Record 480) : Text;
    VAR
      DimText@1001 : Text;
    BEGIN
      IF DimensionSetEntry.ISEMPTY THEN
        EXIT;

      REPEAT
        DimText += STRSUBSTNO('%1 - %2',DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code") + '; ';
      UNTIL DimensionSetEntry.NEXT = 0;

      EXIT(COPYSTR(DimText,1,STRLEN(DimText) - 2));
    END;

    [Normal]
    LOCAL PROCEDURE CreateATS@21(Item@1001 : Record 27;PostingDate@1002 : Date) : Code[20];
    VAR
      AssemblyHeader@1006 : Record 900;
      TempAssemblyLine@1009 : TEMPORARY Record 901;
    BEGIN
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,Item."No.",Location.Code,LibraryRandom.RandDec(10,2),'');

      // Set dimensions
      SetShortcutDimensions(AssemblyHeader,1);
      SetShortcutDimensions(AssemblyHeader,2);

      // Prepare posting
      AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);
      MakeLongDescriptionOnLine(AssemblyHeader,TempAssemblyLine);
      AssemblyHeader.VALIDATE("Posting Date",PostingDate);
      AssemblyHeader.MODIFY(TRUE);
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,0);

      EXIT(AssemblyHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE PostATS@18(AssemblyHeaderNo@1001 : Code[20]);
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,AssemblyHeaderNo);

      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
    END;

    [Normal]
    LOCAL PROCEDURE CreateATO@29(Item@1004 : Record 27;PostingDate@1005 : Date;VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      AssemblyHeader@1006 : Record 900;
      SalesLine@1003 : Record 37;
      QtyFromStock@1001 : Integer;
    BEGIN
      CreateSalesOrder(SalesHeader,Item."No.",'',Location.Code,SalesLine,SalesLine,LibraryRandom.RandIntInRange(5,10));
      Assert.IsTrue(SalesLine.AsmToOrderExists(AssemblyHeader),'There is no asm order');

      // Prepare posting
      QtyFromStock := 1;
      SalesLine.VALIDATE("Qty. to Assemble to Order",SalesLine."Qty. to Assemble to Order" - QtyFromStock);
      SalesLine.MODIFY(TRUE);

      AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      AssemblyHeader.VALIDATE("Posting Date",PostingDate);
      AssemblyHeader.MODIFY(TRUE);

      AddInventoryNonDirectLocation(Item."No.",Location.Code,QtyFromStock,Location."From-Assembly Bin Code");
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,0);

      EXIT(AssemblyHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE PostATO@23(SalesHeader@1004 : Record 36);
    BEGIN
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,PostedAssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutPostedATS@27();
    VAR
      AssemblyHeaderNo@1000 : Code[20];
      SalesOrderNo@1001 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATS(ItemATS,WorkDate2);
      PostATS(AssemblyHeaderNo);
      SalesOrderNo := '';

      VerifyPrintoutPostedAO(AssemblyHeaderNo,SalesOrderNo,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(PostedAssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutPostedATO@19();
    VAR
      SalesHeader@1000 : Record 36;
      AssemblyHeaderNo@1001 : Code[20];
      SalesOrderNo@1002 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATO(ItemATO,WorkDate2,SalesHeader);
      PostATO(SalesHeader);
      SalesOrderNo := SalesHeader."No.";

      VerifyPrintoutPostedAO(AssemblyHeaderNo,SalesOrderNo,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,PostedAssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutPostedATSShowDimensions@7();
    VAR
      AssemblyHeaderNo@1000 : Code[20];
      SalesOrderNo@1001 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATS(ItemATS,WorkDate2);
      PostATS(AssemblyHeaderNo);
      SalesOrderNo := '';

      VerifyPrintoutPostedAO(AssemblyHeaderNo,SalesOrderNo,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,PostedAssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutPostedATSUndo@20();
    VAR
      PostedAssemblyHeader@1003 : Record 910;
      AssemblyHeaderNo@1000 : Code[20];
      SalesOrderNo@1001 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATS(ItemATS,WorkDate2 + 1);
      PostATS(AssemblyHeaderNo);

      PostedAssemblyHeader.RESET;
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeaderNo);
      Assert.IsTrue(PostedAssemblyHeader.FINDFIRST,'Assembly order is not posted');

      LibraryAssembly.UndoPostedAssembly(PostedAssemblyHeader,TRUE,'');
      SalesOrderNo := '';

      VerifyPrintoutPostedAO(AssemblyHeaderNo,SalesOrderNo,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,PostedAssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutPostedATSLongOrders@24();
    VAR
      TestItemATS@1002 : Record 27;
      AssemblyHeaderNo@1000 : Code[20];
      SalesOrderNo@1003 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      LibraryAssembly.SetupAssemblyItem(
        TestItemATS,ItemATS."Costing Method"::Standard,ItemATS."Costing Method"::Standard,ItemATS."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(2,5),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));

      AssemblyHeaderNo := CreateATS(TestItemATS,WorkDate2 + 1);
      PostATS(AssemblyHeaderNo);
      SalesOrderNo := '';

      VerifyPrintoutPostedAO(AssemblyHeaderNo,SalesOrderNo,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,AssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutAssemblyComponentsATS@1();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyHeaderNo@1002 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATS(ItemATS,WorkDate2);
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,AssemblyHeaderNo);
      AssemblyHeader.SETRANGE("Document Type",AssemblyHeader."Document Type"::Order);
      AssemblyHeader.SETRANGE("No.",AssemblyHeaderNo);

      REPORT.RUN(REPORT::"Assembly Order",TRUE,FALSE,AssemblyHeader);

      LibraryReportDataset.LoadDataSetFile;
      VerifyComponentsReportAOHeader(AssemblyHeader);
      VerifyComponentsReportAOLines(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(AssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutAssemblyComponentsATO@63();
    VAR
      AssemblyHeader@1000 : Record 900;
      SalesHeader@1003 : Record 36;
      AssemblyHeaderNo@1002 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      AssemblyHeaderNo := CreateATO(ItemATO,WorkDate2,SalesHeader);
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,AssemblyHeaderNo);

      REPORT.RUN(REPORT::"Assembly Order",TRUE,FALSE,AssemblyHeader);

      LibraryReportDataset.LoadDataSetFile;
      VerifyComponentsReportAOHeader(AssemblyHeader);
      VerifyComponentsReportAOLines(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,DimensionsChangeConfirmHandler,AssemblyOrderRequestPageHandler)]
    PROCEDURE PrintoutAssemblyComponentsLongOrders@62();
    VAR
      AssemblyHeader@1003 : Record 900;
      TestItemATS@1002 : Record 27;
      AssemblyHeaderNo@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      LibraryAssembly.SetupAssemblyItem(
        TestItemATS,ItemATS."Costing Method"::Standard,ItemATS."Costing Method"::Standard,ItemATS."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(2,5),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));

      AssemblyHeaderNo := CreateATS(TestItemATS,WorkDate2 + 1);

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,AssemblyHeaderNo);
      REPORT.RUN(REPORT::"Assembly Order",TRUE,FALSE,AssemblyHeader);

      LibraryReportDataset.LoadDataSetFile;
      VerifyComponentsReportAOHeader(AssemblyHeader);
      VerifyComponentsReportAOLines(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(PickInstructionRequestPageHandler)]
    PROCEDURE PrintoutSalesOrderPickListATO@6();
    VAR
      Item@1005 : Record 27;
      SalesLine@1004 : Record 37;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Setup.
      Initialize;

      CreateATO(ItemATO,WorkDate2,SalesHeader);

      // Add non ATO lines to the Sales Header
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RANDOM(10));
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");

      // VERIFY: Run report and verify
      COMMIT;
      REPORT.RUN(REPORT::"Pick Instruction",TRUE,FALSE,SalesHeader);

      LibraryReportDataset.LoadDataSetFile;
      VerifySalesPickListReportHeader(SalesHeader);
      VerifySalesPickListReportLines(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(PickInstructionRequestPageHandler)]
    PROCEDURE PrintoutSalesPickListLongOrders@9();
    VAR
      SalesHeader@1004 : Record 36;
      TestItemATO@1001 : Record 27;
      Count@1005 : Integer;
    BEGIN
      // Setup.
      Initialize;

      LibraryAssembly.SetupAssemblyItem(
        TestItemATO,ItemATO."Costing Method"::Standard,ItemATO."Costing Method"::Standard,ItemATO."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(3,5),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));

      TestItemATO.VALIDATE("Assembly Policy",TestItemATO."Assembly Policy"::"Assemble-to-Order");
      TestItemATO.MODIFY(TRUE);
      CreateATO(TestItemATO,WorkDate2 + 1,SalesHeader);

      FOR Count := 1 TO 2 DO BEGIN
        CLEAR(TestItemATO);
        LibraryAssembly.SetupAssemblyItem(
          TestItemATO,ItemATO."Costing Method"::Standard,ItemATO."Costing Method"::Standard,ItemATO."Replenishment System"::Assembly,
          Location.Code,FALSE,
          LibraryRandom.RandInt(3),
          LibraryRandom.RandInt(3),
          LibraryRandom.RandInt(3),
          LibraryRandom.RandInt(3));
        TestItemATO.VALIDATE("Assembly Policy",TestItemATO."Assembly Policy"::"Assemble-to-Order");
        TestItemATO.MODIFY(TRUE);
        AddATOToSalesOrder(TestItemATO,WorkDate2 + 1,SalesHeader);
      END;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");

      COMMIT;
      REPORT.RUN(REPORT::"Pick Instruction",TRUE,FALSE,SalesHeader);
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesPickListReportHeader(SalesHeader);
      VerifySalesPickListReportLines(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(PickInstructionRequestPageHandler)]
    PROCEDURE PrintoutSalesOrderPickListWithNoATO@33();
    VAR
      Item@1005 : Record 27;
      Resource@1006 : Record 156;
      SalesLine@1004 : Record 37;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Setup.
      Initialize;

      // CREATE: Sales order with all line types and verify report
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RANDOM(10));
      CLEAR(SalesLine);
      CLEAR(Item);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",0);

      LibraryResource.FindResource(Resource);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Resource,Resource."No.",RANDOM(10));
      CLEAR(SalesLine);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"G/L Account",'',RANDOM(10));
      CLEAR(SalesLine);

      // VERIFY: Run report and verify only sales line of item header are displayed.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");

      COMMIT;
      REPORT.RUN(REPORT::"Pick Instruction",TRUE,FALSE,SalesHeader);
      LibraryReportDataset.LoadDataSetFile;

      VerifySalesPickListReportHeader(SalesHeader);
      VerifySalesPickListReportLines(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(PickInstructionRequestPageHandler)]
    PROCEDURE PrintoutSalesOrderPickListLastLineATO@53();
    VAR
      Item@1005 : Record 27;
      SalesLine@1004 : Record 37;
      SalesHeader@1003 : Record 36;
      TestItemATO@1006 : Record 27;
    BEGIN
      // Setup.
      Initialize;

      // SETUP: Create the ATO item and a regular item
      LibraryInventory.CreateItem(Item);

      LibraryAssembly.SetupAssemblyItem(
        TestItemATO,ItemATO."Costing Method"::Standard,ItemATO."Costing Method"::Standard,ItemATO."Replenishment System"::Assembly,
        Location.Code,FALSE,
        LibraryRandom.RandIntInRange(1,10),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,3),
        LibraryRandom.RandIntInRange(1,10));

      TestItemATO.VALIDATE("Assembly Policy",TestItemATO."Assembly Policy"::"Assemble-to-Order");
      TestItemATO.MODIFY(TRUE);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",Location.Code);
      SalesHeader.MODIFY(TRUE);

      // EXECUTE: Add item sales line followed by an ATO item
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RANDOM(10));
      AddATOToSalesOrder(TestItemATO,WorkDate2 + 1,SalesHeader);

      CLEAR(SalesLine);

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",TestItemATO."No.");
      SalesLine.FINDFIRST;

      SalesLine.VALIDATE(Quantity,0);
      SalesLine.MODIFY(TRUE);

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");

      // VERIFY: Run report and verify
      COMMIT;
      REPORT.RUN(REPORT::"Pick Instruction",TRUE,FALSE,SalesHeader);
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesPickListReportHeader(SalesHeader);
      VerifySalesPickListReportLines(SalesHeader);
    END;

    [Normal]
    LOCAL PROCEDURE AddATOToSalesOrder@109(Item@1004 : Record 27;PostingDate@1005 : Date;VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      AssemblyHeader@1006 : Record 900;
      SalesLine@1003 : Record 37;
      QtyFromStock@1001 : Integer;
      ShipmentDate@1008 : Date;
    BEGIN
      ShipmentDate := CALCDATE('<+' + FORMAT(LibraryRandom.RandInt(30)) + 'D>',WorkDate2);
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ShipmentDate,LibraryRandom.RandIntInRange(5,10));
      Assert.IsTrue(SalesLine.AsmToOrderExists(AssemblyHeader),'There is no asm order');

      // Prepare posting
      QtyFromStock := 1;
      SalesLine.VALIDATE("Qty. to Assemble to Order",SalesLine."Qty. to Assemble to Order" - QtyFromStock);
      SalesLine.MODIFY(TRUE);

      AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      AssemblyHeader.VALIDATE("Posting Date",PostingDate);
      AssemblyHeader.MODIFY(TRUE);

      AddInventoryNonDirectLocation(Item."No.",Location.Code,QtyFromStock,Location."From-Assembly Bin Code");
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,0);

      EXIT(AssemblyHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyComponentsReportAOHeader@28(VAR AssemblyHeader@1001 : Record 900);
    VAR
      ATOLink@1010 : Record 904;
    BEGIN
      LibraryReportDataset.SetRange('No_AssemblyHeader',AssemblyHeader."No.");
      LibraryReportDataset.GetNextRow;

      IF ATOLink.GET(AssemblyHeader."Document Type",AssemblyHeader."No.") THEN
        LibraryReportDataset.AssertCurrentRowValue('SalesDocNo',ATOLink."Document No.");

      LibraryReportDataset.AssertCurrentRowValue('ItemNo_AssemblyHeader',AssemblyHeader."Item No.");
      LibraryReportDataset.AssertCurrentRowValue('Description_AssemblyHeader',AssemblyHeader.Description);
      LibraryReportDataset.AssertCurrentRowValue('Quantity_AssemblyHeader',AssemblyHeader.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('QuantityToAssemble_AssemblyHeader',AssemblyHeader."Quantity to Assemble");
      LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasureCode_AssemblyHeader',AssemblyHeader."Unit of Measure Code");
      LibraryReportDataset.AssertCurrentRowValue('DueDate_AssemblyHeader',FORMAT(AssemblyHeader."Due Date"));
      LibraryReportDataset.AssertCurrentRowValue('StartingDate_AssemblyHeader',FORMAT(AssemblyHeader."Starting Date"));
      LibraryReportDataset.AssertCurrentRowValue('EndingDate_AssemblyHeader',FORMAT(AssemblyHeader."Ending Date"));
      LibraryReportDataset.AssertCurrentRowValue('LocationCode_AssemblyHeader',AssemblyHeader."Location Code");

      IF AssemblyHeader."Bin Code" <> '' THEN
        LibraryReportDataset.AssertCurrentRowValue('BinCode_AssemblyHeader',AssemblyHeader."Bin Code");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyComponentsReportAOLines@14(VAR AssemblyHeader@1001 : Record 900);
    VAR
      AssemblyLine@1000 : Record 901;
    BEGIN
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item,AssemblyLine.Type::Resource);
      AssemblyLine.FINDSET;

      REPEAT
        LibraryReportDataset.SetRange('No_AssemblyLine',AssemblyLine."No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('Description_AssemblyLine',AssemblyLine.Description);
        LibraryReportDataset.AssertCurrentRowValue('QuantityPer_AssemblyLine',AssemblyLine."Quantity per");
        LibraryReportDataset.AssertCurrentRowValue('Quantity_AssemblyLine',AssemblyLine.Quantity);
        LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasureCode_AssemblyLine',AssemblyLine."Unit of Measure Code");
        LibraryReportDataset.AssertCurrentRowValue('LocationCode_AssemblyLine',AssemblyLine."Location Code");
        LibraryReportDataset.AssertCurrentRowValue('BinCode_AssemblyLine',AssemblyLine."Bin Code");
        LibraryReportDataset.AssertCurrentRowValue('VariantCode_AssemblyLine',AssemblyLine."Variant Code");
        LibraryReportDataset.AssertCurrentRowValue('QuantityToConsume_AssemblyLine',AssemblyLine."Quantity to Consume");
        LibraryReportDataset.AssertCurrentRowValue('DueDate_AssemblyLine',FORMAT(AssemblyLine."Due Date"));
      UNTIL AssemblyLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifySalesPickListReportHeader@10(VAR SalesHeader@1001 : Record 36);
    BEGIN
      LibraryReportDataset.SetRange('No_SalesHeader',SalesHeader."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('CustomerNo_SalesHeader',SalesHeader."Sell-to Customer No.");
      LibraryReportDataset.AssertCurrentRowValue('CustomerName_SalesHeader',SalesHeader."Sell-to Customer Name");
    END;

    [Normal]
    LOCAL PROCEDURE VerifySalesPickListReportLines@12(VAR SalesHeader@1001 : Record 36);
    VAR
      AssemblyHeader@1014 : Record 900;
      AssemblyLine@1017 : Record 901;
      SalesLine@1006 : Record 37;
      AssembleToOrderLink@1010 : Record 904;
      UnitOfMeasure@1003 : Record 204;
      AsmExists@1000 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDSET;

      REPEAT
        LibraryReportDataset.SetRange('LineNo_SalesLine',SalesLine."Line No.");
        LibraryReportDataset.GetNextRow;

        LibraryReportDataset.AssertCurrentRowValue('ItemNo_SalesLine',SalesLine."No.");
        LibraryReportDataset.AssertCurrentRowValue('Description_SalesLine',SalesLine.Description);
        LibraryReportDataset.AssertCurrentRowValue('VariantCode_SalesLine',SalesLine."Variant Code");
        LibraryReportDataset.AssertCurrentRowValue('LocationCode_SalesLine',SalesLine."Location Code");
        LibraryReportDataset.AssertCurrentRowValue('BinCode_SalesLine',SalesLine."Bin Code");
        LibraryReportDataset.AssertCurrentRowValue('ShipmentDate_SalesLine',FORMAT(SalesLine."Shipment Date"));
        LibraryReportDataset.AssertCurrentRowValue('Quantity_SalesLine',SalesLine.Quantity);
        LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasure_SalesLine',SalesLine."Unit of Measure");
        LibraryReportDataset.AssertCurrentRowValue('QuantityToShip_SalesLine',SalesLine."Qty. to Ship");
        LibraryReportDataset.AssertCurrentRowValue('QuantityShipped_SalesLine',SalesLine."Quantity Shipped");
        LibraryReportDataset.AssertCurrentRowValue('QtyToAsm',SalesLine."Qty. to Assemble to Order");

        AsmExists := FALSE;
        WITH AssembleToOrderLink DO BEGIN
          RESET;
          SETCURRENTKEY(Type,"Document Type","Document No.","Document Line No.");
          SETRANGE(Type,Type::Sale);
          SETRANGE("Document Type",SalesLine."Document Type");
          SETRANGE("Document No.",SalesLine."Document No.");
          SETRANGE("Document Line No.",SalesLine."Line No.");
          AsmExists := FINDFIRST AND AssemblyHeader.GET("Assembly Document Type","Assembly Document No.");
          IF AsmExists THEN BEGIN
            // verify the lines
            AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
            AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
            AssemblyLine.FINDSET;

            REPEAT
              LibraryReportDataset.SetRange('No_AssemblyLine',AssemblyLine."No.");
              LibraryReportDataset.GetNextRow;

              LibraryReportDataset.AssertCurrentRowValue('Description_AssemblyLine',AssemblyLine.Description);
              LibraryReportDataset.AssertCurrentRowValue('QuantityPer_AssemblyLine',AssemblyLine."Quantity per");
              LibraryReportDataset.AssertCurrentRowValue('Quantity_AssemblyLine',AssemblyLine.Quantity);
              UnitOfMeasure.GET(AssemblyLine."Unit of Measure Code");
              LibraryReportDataset.AssertCurrentRowValue('UnitOfMeasure_AssemblyLine',UnitOfMeasure.Description);
              LibraryReportDataset.AssertCurrentRowValue('LocationCode_AssemblyLine',AssemblyLine."Location Code");
              LibraryReportDataset.AssertCurrentRowValue('BinCode_AssemblyLine',AssemblyLine."Bin Code");
              LibraryReportDataset.AssertCurrentRowValue('VariantCode_AssemblyLine',AssemblyLine."Variant Code");
              LibraryReportDataset.AssertCurrentRowValue('QuantityToConsume_AssemblyLine',AssemblyLine."Quantity to Consume");
            UNTIL AssemblyLine.NEXT = 0;
          END;
        END;

      UNTIL SalesLine.NEXT = 0;
    END;

    [RequestPageHandler]
    PROCEDURE PostedAssemblyOrderRequestPageHandler@116(VAR PostedAssemblyOrder@1000 : TestRequestPage 910);
    VAR
      NoOfCopies@1001 : Variant;
      ShowDimensions@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfCopies);
      LibraryVariableStorage.Dequeue(ShowDimensions);

      PostedAssemblyOrder."No. of copies".SETVALUE(NoOfCopies);
      PostedAssemblyOrder."Show Dimensions".SETVALUE(ShowDimensions);
      PostedAssemblyOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AssemblyOrderRequestPageHandler@72(VAR AssemblyOrder@1000 : TestRequestPage 902);
    BEGIN
      AssemblyOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PickInstructionRequestPageHandler@79(VAR PickInstruction@1000 : TestRequestPage 214);
    BEGIN
      PickInstruction.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Reports] [SCM]
    }
    END.
  }
}

