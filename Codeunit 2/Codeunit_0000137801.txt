OBJECT Codeunit 137801 SCM - Planning UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      WrongQuantityInReqLine@1001 : TextConst '@@@=Example: The quantity 11 is wrong. It must be either 12 or 8.;ENU=The quantity %1 is wrong. It must be either %2 or %3.';
      LibraryInventory@1006 : Codeunit 132201;
      LibraryPurchase@1008 : Codeunit 130512;
      LibraryWarehouse@1010 : Codeunit 132204;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1003 : Boolean;
      OpenWorksheetErr@1005 : TextConst '@@@="[Page ID] must have a value in [Table Caption]: [PK Field Name]=[PK Field Value]. It cannot be zero or empty.";ENU="%1 must have a value in %2: %3=%4. It cannot be zero or empty."';
      UnexpectedRequisitionLineErr@1007 : TextConst 'ENU=Requisition line is unexpected.';
      LeadTimeCalcNegativeErr@1009 : TextConst 'ENU=The amount of time to replenish the item must not be negative.';

    [Test]
    PROCEDURE VSTF325404@1();
    BEGIN
      PlanUnitTestScenario(2,5,10,PAGE::"Planning Worksheet");
    END;

    [Test]
    [HandlerFunctions(ReqWorkheetMPH)]
    PROCEDURE OpenReqWorksheetOnRequisitionLine@4();
    VAR
      RequisitionWorksheetTemplateName@1000 : Code[10];
    BEGIN
      // Setup
      RequisitionWorksheetTemplateName := InitOpenWorksheetFromRequisitionLineScenario(PAGE::"Req. Worksheet");

      // Execute and Verify
      // We call ShowDocument function (codeunit 5530) and expect defined Worksheet Page to be opened
      // If ShowDocument opens another page test fails due to test's Page Handler is not passed
      VerifyShowDocumentOnRequisitionLine(RequisitionWorksheetTemplateName);
    END;

    [Test]
    [HandlerFunctions(PlanningWorkheetMPH,ReqWorksheetTemplateListMPH)]
    PROCEDURE OpenPlanningWorksheetOnRequisitionLine@7();
    VAR
      RequisitionWorksheetTemplateName@1000 : Code[10];
    BEGIN
      // Setup
      RequisitionWorksheetTemplateName := InitOpenWorksheetFromRequisitionLineScenario(PAGE::"Planning Worksheet");

      // Execute and Verify
      // We call ShowDocument function (codeunit 5530) and expect defined Worksheet Page to be opened
      // If ShowDocument opens another page then test fails due to test's Page Handler is not passed
      VerifyShowDocumentOnRequisitionLine(RequisitionWorksheetTemplateName);
    END;

    [Test]
    PROCEDURE ErrorOpenWorksheetOnRequisitionLine@8();
    VAR
      ReqWkshTemplate@1001 : Record 244;
      RequisitionWorksheetTemplateName@1000 : Code[10];
    BEGIN
      // Setup
      RequisitionWorksheetTemplateName := InitOpenWorksheetFromRequisitionLineScenario(0);

      // Execute: Error should be thrown due to Page ID is not set in Req. Worksheet Template
      ASSERTERROR VerifyShowDocumentOnRequisitionLine(RequisitionWorksheetTemplateName);

      // Verify
      WITH ReqWkshTemplate DO
        Assert.ExpectedError(
          STRSUBSTNO(
            OpenWorksheetErr,
            FIELDCAPTION("Page ID"),
            TABLECAPTION,
            FIELDCAPTION(Name),
            RequisitionWorksheetTemplateName));
    END;

    [Test]
    PROCEDURE PurchaseReturnWithNegativeQty@6();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1001 : Record 39;
      ReqWkshTemplate@1002 : Record 244;
      ManufacturingSetup@1004 : Record 99000765;
      RequisitionLine@1005 : Record 246;
      InventoryProfileOffsetting@1003 : Codeunit 99000854;
    BEGIN
      // [SCENARIO 360985] Verify planning system doesn't generate plan for Purchase Return with negative quantity
      // [GIVEN] Purchase Return Order with negative Quantity
      CreateItem(Item,LibraryRandom.RandInt(10),0,LibraryRandom.RandIntInRange(10,20));
      MockPurchaseLine(PurchaseLine,Item."No.");
      CreateReqWkshTemplate(ReqWkshTemplate,PAGE::"Req. Worksheet");

      // [WHEN] Calc. Regenerative plan
      ManufacturingSetup.INIT;
      InventoryProfileOffsetting.CalculatePlanFromWorksheet(
        Item,ManufacturingSetup,ReqWkshTemplate.Name,'',WORKDATE,WORKDATE,TRUE,FALSE);

      // [THEN] There is no generated planning lines
      RequisitionLine.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
      Assert.IsTrue(RequisitionLine.ISEMPTY,UnexpectedRequisitionLineErr);
    END;

    [Test]
    PROCEDURE ItemLeadTimeCalculationCanBeSetPositive@9();
    VAR
      Item@1001 : Record 27;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Item] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Item if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Item "X".
      LibraryInventory.CreateItem(Item);

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      Item.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      Item.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE ItemLeadTimeCalculationCannotBeSetNegative@19();
    VAR
      Item@1001 : Record 27;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Item] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Item if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Item "X".
      LibraryInventory.CreateItem(Item);

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR Item.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    [Test]
    PROCEDURE SKULeadTimeCalculationCanBeSetPositive@37();
    VAR
      StockkeepingUnit@1001 : Record 5700;
      Location@1002 : Record 14;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Stockkeeping Unit if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Stockkeeping Unit "X".
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location.Code,'','');

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      StockkeepingUnit.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      StockkeepingUnit.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE SKULeadTimeCalculationCannotBeSetNegative@36();
    VAR
      StockkeepingUnit@1001 : Record 5700;
      Location@1002 : Record 14;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Stockkeeping Unit if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Stockkeeping Unit "X".
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location.Code,'','');

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR StockkeepingUnit.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    [Test]
    PROCEDURE ItemVendorLeadTimeCalculationCanBeSetPositive@33();
    VAR
      ItemVendor@1001 : Record 99;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Item Vendor] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Item Vendor if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Item Vendor "X".
      LibraryInventory.CreateItemVendor(ItemVendor,LibraryPurchase.CreateVendorNo,LibraryInventory.CreateItemNo);

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      ItemVendor.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      ItemVendor.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE ItemVendorLeadTimeCalculationCannotBeSetNegative@32();
    VAR
      ItemVendor@1001 : Record 99;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Item Vendor] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Item Vendor if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Item Vendor "X".
      LibraryInventory.CreateItemVendor(ItemVendor,LibraryPurchase.CreateVendorNo,LibraryInventory.CreateItemNo);

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR ItemVendor.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    [Test]
    PROCEDURE VendorLeadTimeCalculationCanBeSetPositive@35();
    VAR
      Vendor@1001 : Record 23;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Vendor] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Vendor if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Vendor "X".
      LibraryPurchase.CreateVendor(Vendor);

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      Vendor.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      Vendor.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE VendorLeadTimeCalculationCannotBeSetNegative@34();
    VAR
      Vendor@1001 : Record 23;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Vendor] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Vendor if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Vendor "X".
      LibraryPurchase.CreateVendor(Vendor);

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR Vendor.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    [Test]
    PROCEDURE PurchaseHeaderLeadTimeCalculationCanBeSetPositive@23();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Purchase] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Purchase Header if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Purchase Header "X".
      MockPurchaseOrder(PurchaseHeader,PurchaseLine);

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      PurchaseHeader.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      PurchaseHeader.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE PurchaseHeaderLeadTimeCalculationCannotBeSetNegative@22();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Purchase] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Purchase Header if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Purchase Header "X".
      MockPurchaseOrder(PurchaseHeader,PurchaseLine);

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR PurchaseHeader.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    [Test]
    PROCEDURE PurchaseLineLeadTimeCalculationCanBeSetPositive@41();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Purchase] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation can be updated on Purchase Line if the resulting replenishment time is non-negative.
      Initialize;

      // [GIVEN] Purchase Line "X".
      MockPurchaseOrder(PurchaseHeader,PurchaseLine);

      // [WHEN] Update Lead Time Calculation formula on "X" with a non-negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandIntInRange(5,10),LibraryRandom.RandInt(5)));
      PurchaseLine.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Lead Time Calculation field is updated.
      PurchaseLine.TESTFIELD("Lead Time Calculation",LeadTimeCalcFormula);
    END;

    [Test]
    PROCEDURE PurchaseLineLeadTimeCalculationCannotBeSetNegative@40();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      LeadTimeCalcFormula@1000 : DateFormula;
    BEGIN
      // [FEATURE] [Purchase] [Lead Time Calculation]
      // [SCENARIO 202530] Lead Time Calculation cannot be updated on Purchase Line if the resulting replenishment time is negative.
      Initialize;

      // [GIVEN] Purchase Line "X".
      MockPurchaseOrder(PurchaseHeader,PurchaseLine);

      // [WHEN] Update Lead Time Calculation formula on "X" with a negative time span.
      EVALUATE(LeadTimeCalcFormula,STRSUBSTNO('<%1M-%2M>',LibraryRandom.RandInt(5),LibraryRandom.RandIntInRange(6,10)));
      ASSERTERROR PurchaseLine.VALIDATE("Lead Time Calculation",LeadTimeCalcFormula);

      // [THEN] Error is thrown.
      Assert.ExpectedError(LeadTimeCalcNegativeErr);
    END;

    LOCAL PROCEDURE Initialize@18();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitOpenWorksheetFromRequisitionLineScenario@2(PageID@1001 : Integer) : Code[10];
    BEGIN
      EXIT(
        PlanUnitTestScenario(
          LibraryRandom.RandInt(5),
          LibraryRandom.RandInt(5),
          LibraryRandom.RandIntInRange(10,20),
          PageID));
    END;

    LOCAL PROCEDURE PlanUnitTestScenario@10(SafetyStockQty@1000 : Decimal;ReorderPoint@1001 : Decimal;MaxInventory@1002 : Decimal;PageID@1008 : Integer) : Code[10];
    VAR
      Item@1003 : Record 27;
      SalesLine@1004 : Record 37;
      ReqWkshTemplate@1005 : Record 244;
      ManufacturingSetup@1006 : Record 99000765;
      InventoryProfileOffsetting@1007 : Codeunit 99000854;
    BEGIN
      // Make item
      CreateItem(Item,SafetyStockQty,ReorderPoint,MaxInventory);

      // Make demand
      CreateSalesLine(SalesLine,Item);

      // create template
      CreateReqWkshTemplate(ReqWkshTemplate,PageID);

      // EXERCISE
      ManufacturingSetup.INIT;
      InventoryProfileOffsetting.CalculatePlanFromWorksheet(
        Item,ManufacturingSetup,ReqWkshTemplate.Name,'',SalesLine."Shipment Date",SalesLine."Shipment Date" + 30,TRUE,FALSE);

      // VERIFY
      VerifyReqLines(Item,ReqWkshTemplate.Name,SalesLine."Outstanding Qty. (Base)");

      EXIT(ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItem@11(VAR Item@1000 : Record 27;SafetyStockQty@1001 : Decimal;ReorderPoint@1002 : Decimal;MaxInventory@1003 : Decimal);
    VAR
      ItemUnitOfMeasure@1004 : Record 5404;
    BEGIN
      Item."No." := LibraryUtility.GenerateRandomCode(Item.FIELDNO("No."),DATABASE::Item);

      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");

      Item."Reordering Policy" := Item."Reordering Policy"::"Maximum Qty.";
      Item."Safety Stock Quantity" := SafetyStockQty;
      Item."Reorder Point" := ReorderPoint;
      Item."Maximum Inventory" := MaxInventory;
      Item."Base Unit of Measure" := ItemUnitOfMeasure.Code;
      Item."Purch. Unit of Measure" := Item."Base Unit of Measure";
      Item.INSERT;
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@12(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20]);
    BEGIN
      ItemUnitOfMeasure."Item No." := ItemNo;
      ItemUnitOfMeasure.Code := LibraryUtility.GenerateRandomCode(ItemUnitOfMeasure.FIELDNO(Code),DATABASE::"Item Unit of Measure");
      ItemUnitOfMeasure.INSERT;
    END;

    LOCAL PROCEDURE CreateSalesLine@13(VAR SalesLine@1000 : Record 37;VAR Item@1001 : Record 27);
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      SalesLine."Document No." := LibraryUtility.GenerateRandomCode(SalesLine.FIELDNO("Document No."),DATABASE::"Sales Line");
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := Item."No.";
      SalesLine."Shipment Date" := WORKDATE;
      SalesLine."Outstanding Qty. (Base)" := Item."Maximum Inventory";
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE MockPurchaseOrder@26(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      WITH PurchaseHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Purchase Header");
        INSERT;
      END;

      WITH PurchaseLine DO BEGIN
        INIT;
        "Document Type" := PurchaseHeader."Document Type";
        "Document No." := PurchaseHeader."No.";
        Type := Type::Item;
        "No." := LibraryInventory.CreateItemNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockPurchaseLine@17(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        "Document Type" := "Document Type"::"Return Order";
        "Document No." := LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Purchase Line");
        Type := Type::Item;
        "No." := ItemNo;
        "Expected Receipt Date" := WORKDATE;
        "Outstanding Qty. (Base)" := -LibraryRandom.RandDec(100,2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateReqWkshTemplate@14(VAR ReqWkshTemplate@1000 : Record 244;PageID@1001 : Integer);
    BEGIN
      WITH ReqWkshTemplate DO BEGIN
        Name := LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Req. Wksh. Template");
        Type := Type::Planning;
        "Page ID" := PageID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE VerifyReqLines@15(VAR Item@1000 : Record 27;ReqWkshTempName@1001 : Code[10];SalesLineQuantity@1002 : Decimal);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Requisition worksheet should contain 2 lines:
      // 1 line has quantity Item."Safety Stock Quantity" + SalesLine."Outstanding Qty. (Base)"
      // 1 line has quantity Item."Maximum Inventory" - Item."Safety Stock Quantity"
      WITH RequisitionLine DO BEGIN
        SETRANGE("Worksheet Template Name",ReqWkshTempName);
        FINDSET;
        REPEAT
          IF NOT (Quantity IN [Item."Safety Stock Quantity" + SalesLineQuantity,
                               Item."Maximum Inventory" - Item."Safety Stock Quantity"])
          THEN
            ERROR(
              WrongQuantityInReqLine,Quantity,
              Item."Safety Stock Quantity" + SalesLineQuantity,
              Item."Maximum Inventory" - Item."Safety Stock Quantity");
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyShowDocumentOnRequisitionLine@5(RequisitionWorksheetTemplateName@1001 : Code[10]);
    VAR
      RequisitionLine@1003 : Record 246;
      CalcItemAvailability@1002 : Codeunit 5530;
      RecRef@1000 : RecordRef;
    BEGIN
      // Will open Planning Worksheet for Requisuition Line.
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWorksheetTemplateName);
      RequisitionLine.FINDFIRST;
      RecRef.GETTABLE(RequisitionLine);
      CalcItemAvailability.ShowDocument(RecRef.RECORDID);
    END;

    [ModalPageHandler]
    PROCEDURE PlanningWorkheetMPH@21(VAR PlanningWorksheet@1000 : TestPage 99000852);
    BEGIN
      // Just close page
      PlanningWorksheet.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReqWorkheetMPH@16(VAR ReqWorksheet@1000 : TestPage 291);
    BEGIN
      // Just close page
      ReqWorksheet.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReqWorksheetTemplateListMPH@3(VAR ReqWorksheetTemplateList@1000 : TestPage 292);
    BEGIN
      // Just close page
      ReqWorksheetTemplateList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
    }
    END.
  }
}

