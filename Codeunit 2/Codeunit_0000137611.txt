OBJECT Codeunit 137611 SCM Costing Rollup Sev 1
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryCosting@1014 : Codeunit 132200;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryPurchase@1018 : Codeunit 130512;
      LibrarySales@1010 : Codeunit 130509;
      LibraryManufacturing@1016 : Codeunit 132202;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryPatterns@1002 : Codeunit 132212;
      LibraryDimension@1013 : Codeunit 131001;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1004 : Codeunit 130000;
      LibraryItemTracking@1007 : Codeunit 130502;
      IsInitialized@1005 : Boolean;
      Text001@1006 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';
      CannotApplyErr@1008 : TextConst 'ENU=You cannot apply';
      SelectADimensionValueErr@1009 : TextConst 'ENU=Select a Dimension Value';
      IncorrectNoValueEntriesErr@1011 : TextConst 'ENU=Incorrect number of Value Entries';
      IncorrectNoGLEntriesErr@1012 : TextConst 'ENU=Incorrect number of G/L Entries for Value Entry %1';

    [Test]
    PROCEDURE PS40530@1();
    VAR
      FinalItem@1000 : Record 27;
      CompItem@1001 : Record 27;
      ProdOrderLine@1002 : Record 5406;
      ItemJournalBatch@1003 : Record 233;
      ToLocation@1004 : Record 14;
      Qty@1005 : Decimal;
    BEGIN
      Initialize;
      Qty := 1;

      // setup production
      SetupProduction(
        FinalItem,CompItem,ProdOrderLine,'',FinalItem."Costing Method"::FIFO,CompItem."Costing Method"::FIFO,WORKDATE,Qty,Qty);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(FinalItem."No." + '|' + CompItem."No.",'');

      // Post output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,WORKDATE,Qty,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // create location
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);

      // Reclassify into second location.
      LibraryPatterns.POSTReclassificationJournalLine(FinalItem,WORKDATE,'',ToLocation.Code,'','','',Qty);

      // fill inventory with component
      CreateInventory(CompItem,10,'',0);

      ASSERTERROR
        CreateAndPostConsumption(FinalItem,ProdOrderLine,ToLocation);
      Assert.AreEqual(STRSUBSTNO(Text001,FinalItem."No."),GETLASTERRORTEXT,'');
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE PS52326@2();
    VAR
      OldInventorySetup@1000 : Record 313;
      Item@1001 : Record 27;
      FromLocation@1002 : Record 14;
      ToLocation@1003 : Record 14;
      PurchaseHeader@1004 : Record 38;
      SalesHeader@1005 : Record 36;
    BEGIN
      Initialize;
      OldInventorySetup.GET;
      SetInventorySetup(
        OldInventorySetup,TRUE,
        OldInventorySetup."Automatic Cost Posting",
        OldInventorySetup."Expected Cost Posting to G/L",OldInventorySetup."Automatic Cost Adjustment");

      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::Average,0,0,0,'');

      // create locations
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);

      // fill inventory with item
      CreateInventory(Item,142.7,FromLocation.Code,8.458);

      // create and post transfer
      CreateAndPostTransfer(FromLocation,ToLocation,Item,132.5);

      // Post Receipt of negative purchase
      PostNegativePurchase(PurchaseHeader,Item,FromLocation,-28.7);

      // undo purchase
      PostUndoReceipt(PurchaseHeader,Item);

      // Adjustment
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Sales order for item and ToLocation
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,ToLocation.Code,'',3.9,WORKDATE,0,TRUE,TRUE);

      // Adjustment
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify adjustment
      LibraryCosting.CheckAdjustment(Item);

      // restore Inventory Setup
      SetInventorySetup(
        OldInventorySetup,FALSE,
        OldInventorySetup."Automatic Cost Posting",
        OldInventorySetup."Expected Cost Posting to G/L",OldInventorySetup."Automatic Cost Adjustment");
    END;

    [Test]
    PROCEDURE PS52587@3();
    VAR
      OldInventorySetup@1000 : Record 313;
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      SalesHeader@1003 : Record 36;
      StockkeepingUnit@1004 : Record 5700;
      PostingDate@1005 : Date;
    BEGIN
      Initialize;
      OldInventorySetup.GET;
      SetInventorySetup(OldInventorySetup,TRUE,FALSE,FALSE,OldInventorySetup."Automatic Cost Adjustment"::Never);
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,0,0,0,'');

      // create location
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location.Code,Item."No.",'');

      PostingDate := WORKDATE;

      // fill inventory with item
      CreateInventory(Item,10,Location.Code,5);
      WORKDATE := PostingDate + 1;
      CreateInventory(Item,10,Location.Code,0);

      // Sales order - shipment only
      WORKDATE := PostingDate + 2;
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,Location.Code,'',15,WORKDATE,0,TRUE,FALSE);

      // revaluation remaining quantity
      WORKDATE := PostingDate + 3;
      RevaluateItem(Item,WORKDATE,5);

      // invoice sales through invoice and Get Shipment
      WORKDATE := PostingDate + 4;
      PostInvoiceOfShipment(SalesHeader,Item,WORKDATE);

      // Sales after revaluation
      WORKDATE := PostingDate + 5;
      CLEAR(SalesHeader);
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,Location.Code,'',3,WORKDATE,0,TRUE,TRUE);

      // Adjustment
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify adjustment
      LibraryCosting.CheckAdjustment(Item);

      // restore Inventory Setup
      SetInventorySetup(
        OldInventorySetup,FALSE,
        OldInventorySetup."Automatic Cost Posting",
        OldInventorySetup."Expected Cost Posting to G/L",OldInventorySetup."Automatic Cost Adjustment");

      WORKDATE := PostingDate;
    END;

    [Test]
    PROCEDURE VSTF207811@4();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      SalesHeader@1004 : Record 36;
      Customer@1005 : Record 18;
      ItemTrackingCode@1008 : Record 6502;
      ExactCostReversing@1006 : Boolean;
      Qty@1007 : Decimal;
    BEGIN
      Initialize;
      Qty := 102.53;

      SalesReceivablesSetup.GET;
      ExactCostReversing := SalesReceivablesSetup."Exact Cost Reversing Mandatory";
      SetSalesSetup(SalesReceivablesSetup,TRUE);

      // item tracking for item - lot tracking only
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,0,0,0,ItemTrackingCode.Code);

      // create location, customer
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibrarySales.CreateCustomer(Customer);

      // setup of VAT posting group for item according to customer
      SetVATPostingGroupInItem(Item,Customer);

      // create inventory for item
      CreateInventoryWithIT(Item,Qty,Item."No.",Location.Code);

      // special sales
      PostSalesWithDiscount(SalesHeader,Item,Location,Customer,Qty);

      // Sales Credit Memo
      CreateAndPostSalesCreditMemo(SalesHeader,Customer);

      LibraryCosting.CheckAdjustment(Item);

      SetSalesSetup(SalesReceivablesSetup,ExactCostReversing);
    END;

    [Test]
    PROCEDURE VSTF217370@5();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      ItemOne@1001 : Record 27;
      ItemTwo@1002 : Record 27;
      Location@1003 : Record 14;
      PurchaseHeader@1004 : Record 38;
      Vendor@1005 : Record 23;
      ExactCostReversing@1006 : Boolean;
    BEGIN
      Initialize;

      PurchasesPayablesSetup.GET;
      ExactCostReversing := PurchasesPayablesSetup."Exact Cost Reversing Mandatory";
      SetPurchaseSetup(PurchasesPayablesSetup,TRUE);

      // create 2 items, one location
      LibraryPatterns.MAKEItem(ItemOne,ItemOne."Costing Method"::FIFO,0,0,0,'');
      LibraryPatterns.MAKEItem(ItemTwo,ItemTwo."Costing Method"::FIFO,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // Create Purchase Order for 2 items, receive
      CreateAndReceivePurchOrderWith2Items(PurchaseHeader,ItemOne,ItemTwo,Location,1,100,1,100);
      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");

      // Create Purchase Invoice for previous receipt and post it
      CreateAndPostPurchInvoice(Vendor);

      // Create Purchase Return Order for previous receipt
      CreateAndShipPurchReturnOrder(Vendor,ItemTwo,PurchaseHeader."No.");

      // Create Purchase Credit Memo for previous shipment
      CreateAndPostPurchCreditMemo(Vendor);

      // restore purchase setup
      SetPurchaseSetup(PurchasesPayablesSetup,ExactCostReversing);
    END;

    [Test]
    PROCEDURE VSTF217583@6();
    VAR
      ArrayOfItem@1000 : ARRAY [3] OF Record 27;
      ProductionOrder@1001 : Record 5405;
      Quantity@1002 : Decimal;
    BEGIN
      Initialize;

      // create 3 items with Item Tracking and BOM between
      ProductionSetupFor217583(ArrayOfItem);

      // create inventory for components
      Quantity := 1000;
      CreateInventoryWithIT(ArrayOfItem[1],Quantity,ArrayOfItem[1]."No.",'');
      CreateInventoryWithIT(ArrayOfItem[2],Quantity,ArrayOfItem[2]."No.",'');

      // Create Released Production Order
      CreateAndPostRelProdOrder(ProductionOrder,ArrayOfItem,Quantity);
    END;

    [Test]
    PROCEDURE VSTF329160@7();
    VAR
      OldInventorySetup@1002 : Record 313;
      Item@1000 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ProdOrderLine@1006 : Record 5406;
      ItemJnlBatch@1005 : Record 233;
      ItemJnlLine@1009 : Record 83;
      UnitCost@1001 : Decimal;
      Quantity@1004 : Decimal;
      FirstOutputEntryNo@1007 : Integer;
      NegativeOutputEntryNo@1011 : Integer;
    BEGIN
      Initialize;
      OldInventorySetup.GET;
      SetInventorySetup(OldInventorySetup,TRUE,FALSE,FALSE,OldInventorySetup."Automatic Cost Adjustment"::Never);

      // Setup Item: Unit Cost = Last Direct Cost
      UnitCost := 25;
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::Average,UnitCost,0,0,'');
      Item."Last Direct Cost" := UnitCost;
      Item.MODIFY;

      // Setup Production Order
      Quantity := 10;
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",Quantity);
      ProductionOrder.VALIDATE("Starting Date-Time",CURRENTDATETIME);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,FALSE,FALSE,FALSE);

      // Post output for production with same quantity twice
      FindProdOrderLine(ProdOrderLine,ProductionOrder);
      LibraryPatterns.MAKEOutputJournalLine(ItemJnlBatch,ProdOrderLine,WORKDATE,Quantity,UnitCost);
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
      FirstOutputEntryNo := FindLastItemLedgEntry;
      LibraryPatterns.MAKEOutputJournalLine(ItemJnlBatch,ProdOrderLine,WORKDATE,Quantity,UnitCost);
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);

      // Post negative output for production - same quantity applied to first output entry
      LibraryPatterns.MAKEOutputJournalLine(ItemJnlBatch,ProdOrderLine,WORKDATE,-Quantity,UnitCost);
      FindLastJournalLine(ItemJnlBatch,ItemJnlLine);
      ItemJnlLine."Applies-to Entry" := FirstOutputEntryNo;
      ItemJnlLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);

      // Add Item as component to production order
      AddComponentToProd(ProdOrderLine,Item."No.",1);

      // Post consumption negative quantity applied from entry negative output
      LibraryPatterns.MAKEConsumptionJournalLine(ItemJnlBatch,ProdOrderLine,Item,WORKDATE,'','',-Quantity,UnitCost);
      FindLastJournalLine(ItemJnlBatch,ItemJnlLine);
      NegativeOutputEntryNo := FindLastItemLedgEntry;
      ItemJnlLine."Applies-from Entry" := NegativeOutputEntryNo;
      ItemJnlLine.MODIFY;
      ASSERTERROR LibraryInventory.PostItemJournalBatch(ItemJnlBatch);

      // Verify error and that posting is blocked *)
      Assert.ExpectedError(CannotApplyErr);

      // *) Finish production order and adjust cost - adjust cost was looping when the above step was alowed
      // LibraryManufacturing.ChangeProdOrderStatus(ProductionOrder,ProductionOrder.Status::Finished,WORKDATE,FALSE);
      // LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Restore Inventory Setup
      SetInventorySetup(
        OldInventorySetup,FALSE,
        OldInventorySetup."Automatic Cost Posting",
        OldInventorySetup."Expected Cost Posting to G/L",OldInventorySetup."Automatic Cost Adjustment");
    END;

    [Test]
    PROCEDURE VSTF245349@8();
    VAR
      OldInventorySetup@1000 : Record 313;
      Location@1001 : Record 14;
      Dimension@1002 : Record 348;
      Item@1003 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1005 : Record 83;
      DefaultDimension@1008 : Record 352;
      InvtPostingGroupCode@1006 : Code[10];
      AccountNo@1007 : Code[20];
    BEGIN
      Initialize;
      OldInventorySetup.GET;
      SetInventorySetup(OldInventorySetup,TRUE,TRUE,FALSE,OldInventorySetup."Automatic Cost Adjustment"::Always);

      // create location
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // Setup dimension for inventory account
      SetupDimensionInInventoryAccount(Location.Code,InvtPostingGroupCode,Dimension,AccountNo);

      // create item
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,0,0,0,'');
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroupCode);
      Item.MODIFY;

      // posting Sales - the first posting should show error

      ASSERTERROR
        CreateAndPostSalesWithDimensions(Item,Dimension,Location.Code,FALSE);
      Assert.ExpectedError(SelectADimensionValueErr);
      CLEARLASTERROR;

      // now we will post sales with dimension so it should pass
      CreateAndPostSalesWithDimensions(Item,Dimension,Location.Code,TRUE);

      // Creating Phys. Inventory Journal
      CreatePhysInvtJournal(ItemJournalBatch,ItemJournalLine,Item);

      // the first posting should show error
      ASSERTERROR LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      Assert.ExpectedError(SelectADimensionValueErr);
      CLEARLASTERROR;

      // set dimension to Phys. Inventory
      AddDimensionToPhysInvt(ItemJournalLine,Dimension);

      // Validation - posting has to be successful
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // restore Inventory Setup
      SetInventorySetup(
        OldInventorySetup,FALSE,
        OldInventorySetup."Automatic Cost Posting",
        OldInventorySetup."Expected Cost Posting to G/L",OldInventorySetup."Automatic Cost Adjustment");

      // restore dimension setup
      WITH DefaultDimension DO BEGIN
        INIT;
        VALIDATE("Table ID",DATABASE::"G/L Account");
        VALIDATE("No.",AccountNo);
        VALIDATE("Dimension Code",Dimension.Code);
        DELETE;
      END;
    END;

    [Test]
    PROCEDURE VSTF342568@9();
    VAR
      Item@1002 : Record 27;
      ValueEntry@1001 : Record 5802;
      PostValueEntryToGL@1000 : Record 5811;
      GLItemLedgerRelation@1004 : Record 5823;
      PostInventoryCostToGL@1003 : Report 1002;
      FileMgt@1007 : Codeunit 419;
    BEGIN
      Initialize;

      // create item
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::FIFO,0,0,0,'');

      // create and post 3 inventory entries
      CreateInventory(Item,1,'',2);
      CreateInventory(Item,1,'',0);
      CreateInventory(Item,1,'',3);

      // validation - 3 value entries posted
      ValueEntry.SETRANGE("Item No.",Item."No.");
      Assert.AreEqual(3,ValueEntry.COUNT,IncorrectNoValueEntriesErr);

      // insert entry for 0 cost value entry
      ValueEntry.FINDLAST;
      WITH PostValueEntryToGL DO BEGIN
        "Value Entry No." := ValueEntry."Entry No." - 1;
        "Item No." := ValueEntry."Item No.";
        "Posting Date" := ValueEntry."Posting Date";
        INSERT;
      END;

      // post cost to G/L
      WITH PostInventoryCostToGL DO BEGIN
        CLEAR(PostInventoryCostToGL);
        PostValueEntryToGL.SETRANGE("Item No.",Item."No.");
        SETTABLEVIEW(PostValueEntryToGL);
        USEREQUESTPAGE := FALSE;
        InitializeRequest(1,'',TRUE);
        SAVEASPDF(FileMgt.ServerTempFileName(''));
      END;

      // validation
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.FINDSET;
      REPEAT
        GLItemLedgerRelation.SETRANGE("Value Entry No.",ValueEntry."Entry No.");
        IF ValueEntry."Cost Amount (Actual)" <> 0 THEN
          Assert.AreEqual(2,GLItemLedgerRelation.COUNT,
            STRSUBSTNO(IncorrectNoGLEntriesErr,ValueEntry."Entry No."))
        ELSE
          Assert.AreEqual(0,GLItemLedgerRelation.COUNT,
            STRSUBSTNO(IncorrectNoGLEntriesErr,ValueEntry."Entry No."));
      UNTIL ValueEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE Initialize@100();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryPatterns.SETNoSeries;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SetupProduction@101(VAR ParentItem@1000 : Record 27;VAR CompItem@1001 : Record 27;VAR ProdOrderLine@1003 : Record 5406;LocationCode@1004 : Code[10];ParentCostingMethod@1005 : Option;CompCostingMethod@1006 : Option;ProdOrderDate@1007 : Date;ProducedQty@1008 : Decimal;QtyPer@1009 : Decimal);
    VAR
      ProductionOrder@1010 : Record 5405;
      ProductionBOMHeader@1011 : Record 99000771;
    BEGIN
      // Setup produced and component item.
      LibraryPatterns.MAKEItem(ParentItem,ParentCostingMethod,LibraryRandom.RandDec(100,2),0,0,'');
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::"Prod. Order");
      ParentItem.MODIFY;

      LibraryPatterns.MAKEItem(CompItem,CompCostingMethod,LibraryRandom.RandDec(100,2),0,0,'');

      // Setup BOM and Routing.
      LibraryPatterns.MAKEProductionBOM(ProductionBOMHeader,ParentItem,CompItem,QtyPer,'');

      // Released production order.
      LibraryPatterns.MAKEProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem,LocationCode,'',ProducedQty,ProdOrderDate);
      FindProdOrderLine(ProdOrderLine,ProductionOrder);
    END;

    LOCAL PROCEDURE FindProdOrderLine@102(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateInventory@103(Item@1000 : Record 27;Quantity@1001 : Decimal;LocationCode@1002 : Code[10];UnitAmount@1003 : Decimal);
    VAR
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);

      LibraryPatterns.MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,'',WORKDATE,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,UnitAmount);

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndPostConsumption@104(FinalItem@1000 : Record 27;ProdOrderLine@1001 : Record 5406;Location@1002 : Record 14);
    VAR
      ProductionOrder@1003 : Record 5405;
      ItemJournalBatch@1004 : Record 233;
      ProdOrderComponent@1005 : Record 5407;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Consumption);

      ProdOrderComponent.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");

      // run calculation of consumption
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      ConsumptionJournalCalcConsumption(ProductionOrder,ProdOrderComponent,ItemJournalBatch,WORKDATE,0);

      // add a new line with for item manually
      LibraryPatterns.MAKEItemJournalLine(
        ItemJournalLine,ItemJournalBatch,FinalItem,Location.Code,'',WORKDATE,ItemJournalLine."Entry Type"::"Negative Adjmt.",1,0);
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::Consumption);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      ItemJournalLine.MODIFY(TRUE);

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE ConsumptionJournalCalcConsumption@16(VAR ProductionOrder@1002 : Record 5405;VAR ProdOrderComponent@1005 : Record 5407;ItemJournalBatch@1001 : Record 233;PostingDate@1000 : Date;CalcBasedOn@1003 : Option);
    VAR
      ProductionOrder2@1007 : Record 5405;
      ProdOrderComponent2@1006 : Record 5407;
      CalcConsumption@1004 : Report 5405;
    BEGIN
      COMMIT;
      CalcConsumption.InitializeRequest(PostingDate,CalcBasedOn);
      CalcConsumption.SetTemplateAndBatchName(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // settings filters on the Prod Order
      IF ProductionOrder.HASFILTER THEN
        ProductionOrder2.COPYFILTERS(ProductionOrder)
      ELSE BEGIN
        ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
        ProductionOrder2.SETRANGE(Status,ProductionOrder.Status);
        ProductionOrder2.SETRANGE("No.",ProductionOrder."No.");
      END;
      CalcConsumption.SETTABLEVIEW(ProductionOrder2);

      // settings filters on the Prod Order components
      IF ProdOrderComponent.HASFILTER THEN
        ProdOrderComponent2.COPYFILTERS(ProdOrderComponent)
      ELSE BEGIN
        ProdOrderComponent.GET(ProdOrderComponent.Status,ProdOrderComponent."Prod. Order No.",
          ProdOrderComponent."Prod. Order Line No.",ProdOrderComponent."Line No.");
        ProdOrderComponent2.SETRANGE(Status,ProdOrderComponent.Status);
        ProdOrderComponent2.SETRANGE("Prod. Order No.",ProdOrderComponent."Prod. Order No.");
        ProdOrderComponent2.SETRANGE("Prod. Order Line No.",ProdOrderComponent."Prod. Order Line No.");
        ProdOrderComponent2.SETRANGE("Line No.",ProdOrderComponent."Line No.");
      END;
      CalcConsumption.SETTABLEVIEW(ProdOrderComponent2);

      CalcConsumption.USEREQUESTPAGE(FALSE);
      CalcConsumption.RUNMODAL;
    END;

    LOCAL PROCEDURE SetInventorySetup@105(InventorySetup@1000 : Record 313;NewSetup@1001 : Boolean;AutomaticCostPosting@1002 : Boolean;ExpectedCostPosting@1003 : Boolean;AutomaticCostAdjustment@1004 : Integer);
    VAR
      SavedInventorySetup@1005 : Record 313;
    BEGIN
      WITH InventorySetup DO BEGIN
        IF NewSetup THEN BEGIN
          "Average Cost Calc. Type" := "Average Cost Calc. Type"::"Item & Location & Variant";
          "Average Cost Period" := "Average Cost Period"::Day;
          "Automatic Cost Posting" := AutomaticCostPosting;
          "Expected Cost Posting to G/L" := ExpectedCostPosting;
          "Automatic Cost Adjustment" := AutomaticCostAdjustment;
        END ELSE BEGIN
          SavedInventorySetup.GET;
          SavedInventorySetup."Average Cost Calc. Type" := "Average Cost Calc. Type";
          SavedInventorySetup."Average Cost Period" := "Average Cost Period";
          SavedInventorySetup."Automatic Cost Posting" := AutomaticCostPosting;
          SavedInventorySetup."Expected Cost Posting to G/L" := ExpectedCostPosting;
          SavedInventorySetup."Automatic Cost Adjustment" := AutomaticCostAdjustment;
          InventorySetup := SavedInventorySetup;
        END;
        MODIFY;
      END;
      CODEUNIT.RUN(CODEUNIT::"Change Average Cost Setting",InventorySetup);
    END;

    LOCAL PROCEDURE CreateAndPostTransfer@106(FromLocation@1000 : Record 14;ToLocation@1001 : Record 14;Item@1002 : Record 27;Qty@1003 : Decimal);
    VAR
      TransferHeader@1004 : Record 5740;
      InTransitLocation@1005 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(InTransitLocation);
      InTransitLocation.VALIDATE("Use As In-Transit",TRUE);
      InTransitLocation.MODIFY;

      LibraryPatterns.POSTTransferOrder(
        TransferHeader,Item,FromLocation,ToLocation,InTransitLocation,'',Qty,WORKDATE,WORKDATE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostNegativePurchase@107(VAR PurchaseHeader@1000 : Record 38;VAR Item@1001 : Record 27;VAR Location@1002 : Record 14;Qty@1003 : Decimal);
    BEGIN
      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,Item,Location.Code,'',Qty,WORKDATE,0,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostUndoReceipt@108(VAR PurchaseHeader@1000 : Record 38;VAR Item@1001 : Record 27);
    VAR
      PurchRcptLine@1002 : Record 121;
      UndoPurchaseReceiptLine@1003 : Codeunit 5813;
    BEGIN
      PurchRcptLine.SETCURRENTKEY("Buy-from Vendor No.");
      PurchRcptLine.SETRANGE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      PurchRcptLine.SETRANGE(Type,PurchRcptLine.Type::Item);
      PurchRcptLine.SETRANGE("No.",Item."No.");
      PurchRcptLine.FINDFIRST;

      UndoPurchaseReceiptLine.SetHideDialog(TRUE);
      UndoPurchaseReceiptLine.RUN(PurchRcptLine);
    END;

    LOCAL PROCEDURE RevaluateItem@109(VAR Item@1000 : Record 27;RevaluationDate@1001 : Date;RevaluationCost@1002 : Decimal);
    VAR
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      LibraryPatterns.CalculateInventoryValueRun(
        ItemJournalBatch,Item,RevaluationDate,0,Item."Costing Method" <> Item."Costing Method"::Average,
        Item."Costing Method" <> Item."Costing Method"::Average,
        FALSE,0,FALSE,'','');

      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Unit Cost (Revalued)",RevaluationCost);
      ItemJournalLine.MODIFY;

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE PostInvoiceOfShipment@110(VAR SalesHeader@1000 : Record 36;VAR Item@1001 : Record 27;PostingDate@1002 : Date);
    VAR
      InvoiceSalesHeader@1003 : Record 36;
      Customer@1004 : Record 18;
      SalesShipmentHeader@1005 : Record 110;
      SalesShipmentLine@1006 : Record 111;
      SalesGetShipment@1007 : Codeunit 64;
    BEGIN
      Customer.GET(SalesHeader."Sell-to Customer No.");
      LibrarySales.CreateSalesHeader(InvoiceSalesHeader,InvoiceSalesHeader."Document Type"::Invoice,Customer."No.");
      InvoiceSalesHeader.VALIDATE("Posting Date",PostingDate);
      InvoiceSalesHeader.MODIFY(TRUE);

      SalesShipmentHeader.SETCURRENTKEY("Order No.");
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.FINDFIRST;

      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.SETRANGE("No.",Item."No.");
      SalesGetShipment.SetSalesHeader(InvoiceSalesHeader);
      SalesGetShipment.CreateInvLines(SalesShipmentLine);

      LibrarySales.PostSalesDocument(InvoiceSalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SetSalesSetup@111(VAR SalesReceivablesSetup@1000 : Record 311;NewSetup@1001 : Boolean);
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        "Exact Cost Reversing Mandatory" := NewSetup;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetVATPostingGroupInItem@112(VAR Item@1000 : Record 27;VAR Customer@1001 : Record 18);
    VAR
      VATPostingSetup@1002 : Record 325;
    BEGIN
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.SETRANGE("VAT %",0);
      VATPostingSetup.FINDFIRST;

      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.MODIFY;
    END;

    LOCAL PROCEDURE PostSalesWithDiscount@113(VAR SalesHeader@1000 : Record 36;VAR Item@1001 : Record 27;VAR Location@1002 : Record 14;VAR Customer@1003 : Record 18;Qty@1004 : Decimal);
    VAR
      SalesLine@1005 : Record 37;
      ReservationEntry@1006 : Record 337;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Qty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.VALIDATE("Unit Price",215);
      SalesLine.VALIDATE("Line Discount %",15);
      SalesLine.MODIFY(TRUE);

      // Lot No for sales
      LibraryItemTracking.CreateSalesOrderItemTracking(ReservationEntry,SalesLine,'',Item."No.",Qty);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesCreditMemo@114(VAR SalesHeader@1000 : Record 36;VAR Customer@1001 : Record 18);
    VAR
      SalesInvoiceLine@1002 : Record 113;
      CopyDocumentMgt@1003 : Codeunit 6620;
      LinesNotCopied@1004 : Integer;
      MissingExCostRevLink@1005 : Boolean;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");
      LibrarySales.SetCorrDocNoSales(SalesHeader);

      // Get Posted Document Line to Reverse
      SalesInvoiceLine.SETCURRENTKEY("Sell-to Customer No.",Type,"Document No.");
      SalesInvoiceLine.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;

      CopyDocumentMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE);
      CopyDocumentMgt.CopySalesInvLinesToDoc(SalesHeader,SalesInvoiceLine,LinesNotCopied,MissingExCostRevLink);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SetPurchaseSetup@115(VAR PurchasePayablesSetup@1000 : Record 312;NewSetup@1001 : Boolean);
    BEGIN
      WITH PurchasePayablesSetup DO BEGIN
        GET;
        "Exact Cost Reversing Mandatory" := NewSetup;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateAndReceivePurchOrderWith2Items@116(VAR PurchaseHeader@1000 : Record 38;VAR ItemOne@1001 : Record 27;VAR ItemTwo@1002 : Record 27;VAR Location@1003 : Record 14;QtyOne@1004 : Decimal;CostOne@1005 : Decimal;QtyTwo@1006 : Decimal;CostTwo@1007 : Decimal);
    VAR
      PurchaseLine@1008 : Record 39;
    BEGIN
      LibraryPatterns.MAKEPurchaseOrder(PurchaseHeader,PurchaseLine,ItemOne,Location.Code,'',QtyOne,WORKDATE,CostOne);

      // second line
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemTwo."No.",QtyTwo);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.VALIDATE("Direct Unit Cost",CostTwo);
      PurchaseLine.MODIFY(TRUE);

      // Receive only
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchInvoice@117(VAR Vendor@1000 : Record 23);
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchRcptLine@1002 : Record 121;
      PurchGetReceipt@1003 : Codeunit 74;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");

      PurchRcptLine.SETCURRENTKEY("Buy-from Vendor No.");
      PurchRcptLine.SETRANGE("Buy-from Vendor No.",Vendor."No.");

      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndShipPurchReturnOrder@118(VAR Vendor@1000 : Record 23;VAR Item@1001 : Record 27;PurchaseOrderNo@1002 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
      ItemLedgerEntry@1004 : Record 32;
      PurchaseLine@1005 : Record 39;
      CopyPurchaseDocument@1006 : Report 492;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Vendor."No.");

      // copy document functionality
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(2,PurchaseOrderNo,FALSE,TRUE);  // parameter 2 mean Order, report has own OptionCaption
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUNMODAL;

      // setting "Appl.-to Entry"
      ItemLedgerEntry.FINDLAST;
      Assert.AreEqual(Item."No.",ItemLedgerEntry."Item No.",'');

      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FIND('+');
      REPEAT
        PurchaseLine.VALIDATE("Appl.-to Item Entry",ItemLedgerEntry."Entry No.");
        PurchaseLine.MODIFY;
        ItemLedgerEntry."Entry No." -= 1;
      UNTIL PurchaseLine.NEXT(-1) = 0;

      // Ship only
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchCreditMemo@119(VAR Vendor@1000 : Record 23);
    VAR
      PurchaseHeader@1001 : Record 38;
      ReturnShipmentLine@1002 : Record 6651;
      PurchGetReturnShipments@1003 : Codeunit 6648;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",Vendor."No.");

      ReturnShipmentLine.SETCURRENTKEY("Buy-from Vendor No.");
      ReturnShipmentLine.SETRANGE("Buy-from Vendor No.",Vendor."No.");

      PurchGetReturnShipments.SetPurchHeader(PurchaseHeader);
      PurchGetReturnShipments.CreateInvLines(ReturnShipmentLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE ProductionSetupFor217583@120(VAR Item@1000 : ARRAY [3] OF Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      // item tracking for all items - lot tracking only
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);

      // 3 items, the first and seconds are components, the third is final product
      LibraryPatterns.MAKEItem(Item[1],Item[1]."Costing Method"::FIFO,LibraryRandom.RandDec(100,2),0,0,ItemTrackingCode.Code);
      LibraryPatterns.MAKEItem(Item[2],Item[2]."Costing Method"::FIFO,LibraryRandom.RandDec(100,2),0,0,ItemTrackingCode.Code);
      LibraryPatterns.MAKEItem(Item[3],Item[3]."Costing Method"::FIFO,LibraryRandom.RandDec(100,2),0,0,ItemTrackingCode.Code);

      // Setup BOM - 2 components
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item[3]."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item[1]."No.",1);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item[2]."No.",1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY;

      // update final item
      Item[3].VALIDATE("Replenishment System",Item[3]."Replenishment System"::"Prod. Order");
      Item[3].VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item[3].MODIFY;
    END;

    LOCAL PROCEDURE CreateInventoryWithIT@121(VAR Item@1000 : Record 27;Quantity@1001 : Decimal;LotNo@1002 : Code[20];LocationCode@1006 : Code[10]);
    VAR
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1004 : Record 83;
      ReservationEntry@1005 : Record 337;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);

      LibraryPatterns.MAKEItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,LocationCode,'',WORKDATE,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,1);

      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservationEntry,ItemJournalLine,'',LotNo,Quantity);

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndPostRelProdOrder@122(VAR ProductionOrder@1000 : Record 5405;VAR ArrayOfItem@1001 : ARRAY [3] OF Record 27;Quantity@1002 : Decimal);
    VAR
      ProdOrderLine@1003 : Record 5406;
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      // create and refresh production order
      LibraryPatterns.MAKEProductionOrder(ProductionOrder,ProductionOrder.Status::Released,ArrayOfItem[3],'','',Quantity,WORKDATE);
      FindProdOrderLine(ProdOrderLine,ProductionOrder);

      // post consumption of component 1
      CreateAndPostConsumptionWithIT(ProdOrderLine,ArrayOfItem[1]."No.",ArrayOfItem[1]."No.",Quantity);

      // we need to know ILE created by posting output
      ItemLedgerEntry.FINDLAST;

      // post output according to scenario - positive, negative, positive output split into many output lines
      CreateAndPostOutputWithIT(ProdOrderLine,0);
      CreateAndPostOutputWithIT(ProdOrderLine,ItemLedgerEntry."Entry No." + 1);
      CreateAndPostOutputWithIT(ProdOrderLine,0);

      // post consumption of component 2
      CreateAndPostConsumptionWithIT(ProdOrderLine,ArrayOfItem[2]."No.",ArrayOfItem[2]."No.",Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionWithIT@123(VAR ProdOrderLine@1000 : Record 5406;ItemNo@1001 : Code[20];LotNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ProductionOrder@1004 : Record 5405;
      ItemJournalBatch@1005 : Record 233;
      ProdOrderComponent@1006 : Record 5407;
      ItemJournalLine@1007 : Record 83;
      ReservationEntry@1008 : Record 337;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Consumption);

      ProdOrderComponent.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);

      // run calculation of consumption for given item
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      ConsumptionJournalCalcConsumption(ProductionOrder,ProdOrderComponent,ItemJournalBatch,WORKDATE,1);

      FindLastJournalLine(ItemJournalBatch,ItemJournalLine);

      // add item tracking
      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservationEntry,ItemJournalLine,'',LotNo,Quantity);

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndPostOutputWithIT@124(VAR ProdOrderLine@1000 : Record 5406;ApplyEntryNo@1001 : Integer);
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
      ReservationEntry@1004 : Record 337;
      LineNo@1005 : Integer;
      i@1006 : Integer;
      Quantity@1007 : Decimal;
    BEGIN
      IF ApplyEntryNo = 0 THEN BEGIN
        LibraryManufacturing.OutputJournalExplodeOrderLineRouting(ItemJournalBatch,ProdOrderLine,WORKDATE);
        Quantity := 9;
      END ELSE BEGIN
        CreateOutputJnlLine(ItemJournalBatch,ProdOrderLine);
        Quantity := -9;
      END;

      FindLastJournalLine(ItemJournalBatch,ItemJournalLine);

      // according to scenario we have to post more output then planned and has to be split into 115 posting lines
      LineNo := ItemJournalLine."Line No.";
      ItemJournalLine.VALIDATE("Output Quantity",Quantity);
      ItemJournalLine.MODIFY;

      // add item tracking for the first line
      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservationEntry,ItemJournalLine,'',ItemJournalLine."Item No.",Quantity);
      IF ApplyEntryNo > 0 THEN BEGIN
        // posting reverse output
        ReservationEntry."Appl.-to Item Entry" := ApplyEntryNo;
        ReservationEntry.MODIFY;
      END;

      // creating the remaining ouput lines
      FOR i := 1 TO 114 DO BEGIN
        LineNo += 10000;
        ItemJournalLine."Line No." := LineNo;
        ItemJournalLine.INSERT;

        // add item tracking for the new line line
        ReservationEntry."Source Ref. No." := LineNo;
        ReservationEntry."Entry No." += 1;
        IF ApplyEntryNo > 0 THEN BEGIN
          // posting reverse output
          ApplyEntryNo += 1;
          ReservationEntry."Appl.-to Item Entry" := ApplyEntryNo;
        END;
        ReservationEntry.INSERT;
      END;

      // posting output
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE AddComponentToProd@28(ProdOrderLine@1000 : Record 5406;ItemNo@1003 : Code[20];QtyPer@1002 : Decimal);
    VAR
      ProdOrderComp@1001 : Record 5407;
      LastLineNo@1004 : Integer;
    BEGIN
      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      IF ProdOrderComp.FINDLAST THEN
        LastLineNo := ProdOrderComp."Line No.";

      ProdOrderComp.INIT;
      ProdOrderComp.Status := ProdOrderLine.Status;
      ProdOrderComp."Prod. Order No." := ProdOrderLine."Prod. Order No.";
      ProdOrderComp."Prod. Order Line No." := ProdOrderLine."Line No.";
      ProdOrderComp."Line No." := LastLineNo + 10000;
      ProdOrderComp.VALIDATE("Item No.",ItemNo);
      ProdOrderComp.VALIDATE("Quantity per",QtyPer);
      ProdOrderComp.INSERT;
    END;

    LOCAL PROCEDURE FindLastJournalLine@125(VAR ItemJournalBatch@1000 : Record 233;VAR ItemJournalLine@1001 : Record 83);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindLastItemLedgEntry@24() : Integer;
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.FINDLAST;
      EXIT(ItemLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE CreateOutputJnlLine@126(VAR ItemJournalBatch@1000 : Record 233;VAR ProdOrderLine@1001 : Record 5406);
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Output);

      Item.GET(ProdOrderLine."Item No.");
      LibraryInventory.MakeItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Entry Type"::"Positive Adjmt.",0);
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::Output);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      ItemJournalLine.VALIDATE("Item No.",ProdOrderLine."Item No.");
      ItemJournalLine.SetUpNewLine(ItemJournalLine);
      ItemJournalLine.INSERT;
    END;

    LOCAL PROCEDURE SetupDimensionInInventoryAccount@127(LocationCode@1000 : Code[10];VAR InvtPostingGroupCode@1001 : Code[10];VAR Dimension@1002 : Record 348;VAR AccountNo@1006 : Code[20]);
    VAR
      InventoryPostingSetup@1003 : Record 5813;
      GeneralLedgerSetup@1004 : Record 98;
      DefaultDimension@1005 : Record 352;
      DimensionValue@1007 : Record 349;
    BEGIN
      GeneralLedgerSetup.GET;

      InventoryPostingSetup.SETRANGE("Location Code",LocationCode);
      InventoryPostingSetup.FINDFIRST;

      InvtPostingGroupCode := InventoryPostingSetup."Invt. Posting Group Code";
      AccountNo := InventoryPostingSetup."Inventory Account";

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",AccountNo);
      DefaultDimension.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 2 Code");
      DefaultDimension.SETRANGE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      IF NOT DefaultDimension.FINDFIRST THEN BEGIN
        LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");
        LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::"G/L Account",AccountNo,
          GeneralLedgerSetup."Global Dimension 2 Code",DimensionValue.Code);
        DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
        DefaultDimension.MODIFY;
      END;
      Dimension.GET(DefaultDimension."Dimension Code");
    END;

    LOCAL PROCEDURE CreateAndPostSalesWithDimensions@128(VAR Item@1000 : Record 27;VAR Dimension@1001 : Record 348;LocationCode@1002 : Code[10];AddDimensions@1006 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      DimensionValue@1005 : Record 349;
    BEGIN
      // create Sales order
      LibraryPatterns.MAKESalesOrder(SalesHeader,SalesLine,Item,LocationCode,'',4,WORKDATE,10);

      // add dimension to sales line
      IF AddDimensions THEN BEGIN
        DimensionValue.SETRANGE("Dimension Code",Dimension.Code);
        DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
        DimensionValue.FINDFIRST;

        SalesLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
        SalesLine.MODIFY;
      END;

      // post Ship + Invoice
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePhysInvtJournal@129(VAR ItemJournalBatch@1000 : Record 233;VAR ItemJournalLine@1001 : Record 83;VAR Item@1002 : Record 27);
    VAR
      CalculateInventory@1003 : Report 790;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::"Phys. Inventory");
      LibraryInventory.MakeItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Entry Type"::"Positive Adjmt.",0);

      COMMIT;  // Commit required before running this Report.
      CLEAR(CalculateInventory);
      Item.SETRANGE("No.",Item."No.");
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.SetHideValidationDialog(TRUE);
      CalculateInventory.InitializeRequest(WORKDATE,ItemJournalLine."Document No.",FALSE);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.RUN;

      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.FINDLAST;
      ItemJournalLine.VALIDATE("Qty. (Phys. Inventory)",0);
      ItemJournalLine.VALIDATE("Unit Amount",7.5);
      ItemJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE AddDimensionToPhysInvt@130(VAR ItemJournalLine@1000 : Record 83;VAR Dimension@1001 : Record 348);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",Dimension.Code);
      DimensionValue.FINDLAST;

      ItemJournalLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      ItemJournalLine.INSERT;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      // The codeunit contains tests for costing rollup priority 1
      // The scenarios are based on either Product Studio or VSTF  bugsE

      1) PS 40530 (Vedbaek SE)
      2) PS 52326 (Vedbaek SE)
      3) PS 52587 (Vedbaek SE)
      4) VSTF207811
      5) VSTF217370
      6) VSTF217583
      7) VSTF329160
      8) VSTF245349
      9) VSTF342568
    }
    END.
  }
}

