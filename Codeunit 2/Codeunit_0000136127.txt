OBJECT Codeunit 136127 Test Planning/Req.Wksh
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemDescription@1002 : TextConst 'ENU=TESTITEMXXX';
      TESTTEXT@1001 : TextConst 'ENU=NTF_TEST_NTF_TEST';
      Text001@1004 : TextConst 'ENU=No service item has a non-blocked customer and non-blocked item. Execution stops.';
      LibrarySales@1007 : Codeunit 130509;
      CalculationOption@1000 : 'PlanningRegenerate,PlanningNetChange,Requisition';
      Text003@1005 : TextConst 'ENU=Service Order %1 does not exist.';
      IsInitialized@1006 : Boolean;

    [Test]
    PROCEDURE PlanForServiceDemandNetChange@3();
    VAR
      ExpectedNumberOfRows@1001 : Integer;
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 1
      // Setup
      DemandQuantity := 25;
      ExpectedNumberOfRows := 1;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningNetChange;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanAfterNeededByDateNetChange@12();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      ServiceOrderNo@1007 : Code[20];
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      NewPostingDate@1001 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 2
      // Setup
      ExpectedNumberOfRows := 1;
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      NewPostingDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningNetChange;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      ServiceOrderNo := CreateServiceDemand(DemandQuantity);
      ChangePostingDate(ServiceOrderNo,NewPostingDate);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      ValidateRequisitionLineDueDate(ItemNo,GetServiceHeaderOrderDate(ServiceOrderNo));
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE MultipleDemandsSameDayNetChang@16();
    VAR
      DemandQuantity@1002 : Decimal;
      DemandQuantity2@1004 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
      ExpectedNoOfLines@1001 : Integer;
    BEGIN
      // TEST 3
      // Setup
      ExpectedNoOfLines := 1;
      DemandQuantity := 25;
      DemandQuantity2 := 30;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningNetChange;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      CreateServiceDemand(DemandQuantity2);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNoOfLines,DemandQuantity + DemandQuantity2,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanForJobDemandNetChange@6();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 4
      // Setup
      ExpectedNumberOfRows := 1;
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<30D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningNetChange;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanAfterNeededByDateOnJobNetC@13();
    VAR
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 5
      // Setup
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-15D>',WORKDATE);
      CalculationEndDate := CALCDATE('<-10D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningNetChange;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,0,0,'Demand, end date before needed by date');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanForServiceDemandRegenerat@25();
    VAR
      ExpectedNumberOfRows@1001 : Integer;
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 6
      // Setup
      DemandQuantity := 25;
      ExpectedNumberOfRows := 1;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningRegenerate;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanAfterNeededByDateRegenerat@24();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      ServiceOrderNo@1007 : Code[20];
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      NewPostingDate@1001 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 7
      // Setup
      ExpectedNumberOfRows := 1;
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      NewPostingDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningRegenerate;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      ServiceOrderNo := CreateServiceDemand(DemandQuantity);
      ChangePostingDate(ServiceOrderNo,NewPostingDate);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      ValidateRequisitionLineDueDate(ItemNo,GetServiceHeaderOrderDate(ServiceOrderNo));
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE MultipleDemandsOnTheSameDayReg@23();
    VAR
      ExpectedNoOfLines@1001 : Integer;
      DemandQuantity@1002 : Decimal;
      DemandQuantity2@1004 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 8
      // Setup
      ExpectedNoOfLines := 1;
      DemandQuantity := 25;
      DemandQuantity2 := 30;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningRegenerate;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      CreateServiceDemand(DemandQuantity2);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNoOfLines,DemandQuantity + DemandQuantity2,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanForJobDemandRegenerative@22();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 9
      ExpectedNumberOfRows := 1;
      // Setup
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<30D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningRegenerate;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE PlanAfterNeededByDateOnJobRege@21();
    VAR
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 10
      // Setup
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-15D>',WORKDATE);
      CalculationEndDate := CALCDATE('<-10D>',WORKDATE);
      CalculationOption := CalculationOption::PlanningRegenerate;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
      // Validate
      ValidateRequisitionLines(ItemNo,0,0,'Demand, end date before needed by date');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE ReqWkshPlanForServiceDemand@30();
    VAR
      ExpectedNumberOfRows@1001 : Integer;
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 11
      // Setup
      DemandQuantity := 25;
      ExpectedNumberOfRows := 1;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::Requisition;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      // Execute
      CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE ReqWkshPlanAfterNeededByDate@29();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      ServiceOrderNo@1007 : Code[20];
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      NewPostingDate@1001 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 12
      // Setup
      ExpectedNumberOfRows := 1;
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      NewPostingDate := CALCDATE('<5D>',WORKDATE);
      CalculationOption := CalculationOption::Requisition;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      ServiceOrderNo := CreateServiceDemand(DemandQuantity);
      ChangePostingDate(ServiceOrderNo,NewPostingDate);
      // Execute
      CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      ValidateRequisitionLineDueDate(ItemNo,GetServiceHeaderOrderDate(ServiceOrderNo));
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE ReqWkshMultipleDemandsSameDay@28();
    VAR
      ExpectedNoOfLines@1001 : Integer;
      DemandQuantity@1002 : Decimal;
      DemandQuantity2@1004 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 13
      // Setup
      ExpectedNoOfLines := 1;
      DemandQuantity := 25;
      DemandQuantity2 := 30;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<3D>',WORKDATE);
      CalculationOption := CalculationOption::Requisition;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateServiceDemand(DemandQuantity);
      CreateServiceDemand(DemandQuantity2);
      // Execute
      CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNoOfLines,DemandQuantity + DemandQuantity2,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE ReqWkshPlanForJobDemand@27();
    VAR
      DemandQuantity@1002 : Decimal;
      ExpectedNumberOfRows@1003 : Integer;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 14
      ExpectedNumberOfRows := 1;
      // Setup
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-5D>',WORKDATE);
      CalculationEndDate := CALCDATE('<30D>',WORKDATE);
      CalculationOption := CalculationOption::Requisition;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      // Validate
      ValidateRequisitionLines(ItemNo,ExpectedNumberOfRows,DemandQuantity,'Demand');
      // Tear down
      TearDown(ItemNo);
    END;

    [Test]
    PROCEDURE ReqWPlanAfterNeededByDateOnJob@26();
    VAR
      DemandQuantity@1002 : Decimal;
      CalculationStartDate@1008 : Date;
      CalculationEndDate@1009 : Date;
      ItemNo@1000 : Code[20];
    BEGIN
      // TEST 15
      // Setup
      DemandQuantity := 25;
      CalculationStartDate := CALCDATE('<-15D>',WORKDATE);
      CalculationEndDate := CALCDATE('<-10D>',WORKDATE);
      CalculationOption := CalculationOption::Requisition;
      ItemNo := InitScenario(CalculationStartDate,CalculationEndDate,CalculationOption);
      CreateJobDemand(DemandQuantity);
      // Execute
      CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      // Validate
      ValidateRequisitionLines(ItemNo,0,0,'Demand, end date before needed by date');
      // Tear down
      TearDown(ItemNo);
    END;

    LOCAL PROCEDURE InitScenario@35(CalculationStartDate@1001 : Date;CalculationEndDate@1002 : Date;CalculationOption@1003 : 'PlanningRegenerate,PlanningNetChange,Requisition') : Code[20];
    VAR
      ItemNo@1000 : Code[20];
    BEGIN
      Initialize;
      LibrarySales.SetCreditWarningsToNoWarnings;
      ItemNo := CreateTestItem;
      CleanUpSupplyAndDemand;
      CASE CalculationOption OF
        CalculationOption::PlanningRegenerate,
        CalculationOption::PlanningNetChange:
          CalculatePlanPlanningWorksheet(ItemNo,CalculationStartDate,CalculationEndDate,CalculationOption);
        CalculationOption::Requisition:
          CalculatePlanRequisitionWorksh(ItemNo,CalculationStartDate,CalculationEndDate);
      END;
      ValidateRequisitionLines(ItemNo,0,0,'No demand');
      EXIT(ItemNo);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@34();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE GetServiceHeaderOrderDate@37(ServiceOrderNo@1000 : Code[20]) : Date;
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceOrderNo);
      EXIT(ServiceHeader."Order Date");
    END;

    LOCAL PROCEDURE GetRequisitionWkshTemplate@2() : Code[10];
    VAR
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      CLEAR(RequisitionWkshName);
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.FINDFIRST;
      EXIT(RequisitionWkshName."Worksheet Template Name");
    END;

    LOCAL PROCEDURE GetRequisitionWkshBatch@9() : Code[10];
    VAR
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      CLEAR(RequisitionWkshName);
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.FINDFIRST;
      EXIT(RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE CreateTestItem@7() : Code[20];
    VAR
      ItemRec@1001 : Record 27;
      ItemNo@1000 : Code[20];
      UnitOfMeasureCode@1002 : Code[10];
    BEGIN
      ItemNo := GetItem;
      UnitOfMeasureCode := CreateUnitOfMeasure(ItemNo);
      ItemRec.GET(ItemNo);
      ItemRec.VALIDATE("Base Unit of Measure",UnitOfMeasureCode);
      ItemRec.VALIDATE("Reordering Policy",ItemRec."Reordering Policy"::"Lot-for-Lot");
      ItemRec.MODIFY(TRUE);
      EXIT(ItemNo);
    END;

    LOCAL PROCEDURE CreateUnitOfMeasure@4(ItemNo@1002 : Code[20]) : Code[10];
    VAR
      UnitOfMeasure@1000 : Record 204;
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      UnitOfMeasure.FINDFIRST;
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.VALIDATE("Item No.",ItemNo);
      ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasure.Code);
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",1);
      IF NOT ItemUnitOfMeasure.MODIFY THEN
        ItemUnitOfMeasure.INSERT;
      EXIT(UnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE SetRequisitionLineFilter@10(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      CLEAR(RequisitionLine);
      RequisitionLine.SETRANGE("Worksheet Template Name",GetRequisitionWkshTemplate);
      RequisitionLine.SETRANGE("Journal Batch Name",GetRequisitionWkshBatch);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
    END;

    LOCAL PROCEDURE ChangePostingDate@14(ServiceOrderNo@1000 : Code[20];NewPostingDate@1002 : Date);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      IF NOT ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceOrderNo) THEN
        ERROR(Text003,ServiceOrderNo);
      ServiceHeader.VALIDATE("Posting Date",NewPostingDate);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculatePlanPlanningWorksheet@8(ItemNo@1002 : Code[20];StartDate@1000 : Date;EndDate@1001 : Date;CalcOption@1003 : 'PlanningRegenerate,PlanningNetChange,Requisition');
    VAR
      ItemRec@1005 : Record 27;
      CalculatePlanPlanWksh@1004 : Report 99001017;
    BEGIN
      CLEAR(CalculatePlanPlanWksh);
      CalculatePlanPlanWksh.SetTemplAndWorksheet(GetRequisitionWkshTemplate,GetRequisitionWkshBatch,
        CalcOption = CalcOption::PlanningRegenerate);
      ItemRec.SETRANGE("No.",ItemNo);
      CalculatePlanPlanWksh.SETTABLEVIEW(ItemRec);
      CalculatePlanPlanWksh.InitializeRequest(StartDate,EndDate,FALSE);
      CalculatePlanPlanWksh.USEREQUESTPAGE := FALSE;
      CalculatePlanPlanWksh.RUNMODAL;
    END;

    LOCAL PROCEDURE CalculatePlanRequisitionWorksh@32(ItemNo@1002 : Code[20];StartDate@1000 : Date;EndDate@1001 : Date);
    VAR
      ItemRec@1003 : Record 27;
      CalculatePlanReqWksh@1004 : Report 699;
    BEGIN
      CLEAR(CalculatePlanReqWksh);
      CalculatePlanReqWksh.SetTemplAndWorksheet(GetRequisitionWkshTemplate,GetRequisitionWkshBatch);
      ItemRec.SETRANGE("No.",ItemNo);
      CalculatePlanReqWksh.SETTABLEVIEW(ItemRec);
      CalculatePlanReqWksh.InitializeRequest(StartDate,EndDate);
      CalculatePlanReqWksh.USEREQUESTPAGE := FALSE;
      CalculatePlanReqWksh.RUNMODAL;
    END;

    LOCAL PROCEDURE ValidateRequisitionLineDueDate@1(ItemNo@1000 : Code[20];CheckDate@1001 : Date);
    VAR
      RequisitionLine@1002 : Record 246;
      Assert@1003 : Codeunit 130000;
    BEGIN
      SetRequisitionLineFilter(RequisitionLine,ItemNo);
      IF RequisitionLine.FINDFIRST THEN
        REPEAT
          Assert.AreEqual(CheckDate,RequisitionLine."Due Date",'Requisition Line Due Date');
        UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateRequisitionLines@15(ItemNo@1002 : Code[20];NoOflinesExpected@1003 : Integer;QuantityExpected@1004 : Decimal;Descr@1005 : Text[100]);
    VAR
      RequisitionLine@1000 : Record 246;
      Assert@1006 : Codeunit 130000;
      Sum@1001 : Decimal;
    BEGIN
      SetRequisitionLineFilter(RequisitionLine,ItemNo);
      Assert.AreEqual(NoOflinesExpected,RequisitionLine.COUNT,STRSUBSTNO('Requisition Worksheet Lines %1',Descr));
      Sum := 0;
      IF RequisitionLine.FINDFIRST THEN
        REPEAT
          Sum += RequisitionLine.Quantity;
        UNTIL RequisitionLine.NEXT = 0;
      Assert.AreEqual(QuantityExpected,Sum,'Requisition Worksheet Lines Quantity sum');
    END;

    LOCAL PROCEDURE FindItem@11(VAR Item@1000 : Record 27) : Code[20];
    VAR
      InventoryPostingGroup@1002 : Record 94;
      GenProductPostingGroup@1003 : Record 251;
    BEGIN
      IF Item.GET(ItemDescription) THEN
        EXIT(ItemDescription);

      InventoryPostingGroup.FINDFIRST;
      GenProductPostingGroup.SETFILTER("Def. VAT Prod. Posting Group",'<>%1','');
      GenProductPostingGroup.FINDFIRST;

      Item.INIT;
      Item.VALIDATE("No.",ItemDescription);
      Item.INSERT(TRUE);
      Item.VALIDATE("Unit Price",10);
      Item.VALIDATE(Description,ItemDescription);
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);
      Item.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      Item.MODIFY(TRUE);
      EXIT(ItemDescription);
    END;

    LOCAL PROCEDURE GetItem@31() : Code[20];
    VAR
      ItemRec@1000 : Record 27;
    BEGIN
      EXIT(FindItem(ItemRec));
    END;

    LOCAL PROCEDURE CleanUpSupplyAndDemand@33();
    VAR
      SalesHeader@1000 : Record 36;
      PurchHeader@1001 : Record 38;
      ServiceHeader@1002 : Record 5900;
      Job@1003 : Record 167;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        IF FIND('-') THEN
          REPEAT
            IF "Bill-to Name" = TESTTEXT THEN
              DELETE(TRUE);
          UNTIL NEXT = 0;
      END;

      WITH PurchHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        IF FIND('-') THEN
          REPEAT
            IF "Pay-to Name" = TESTTEXT THEN
              DELETE(TRUE);
          UNTIL NEXT = 0;
      END;

      WITH ServiceHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        IF FIND('-') THEN
          REPEAT
            IF "Bill-to Name" = TESTTEXT THEN
              DELETE(TRUE);
          UNTIL NEXT = 0;
      END;

      WITH Job DO
        IF FIND('-') THEN
          REPEAT
            IF "Description 2" = TESTTEXT THEN
              DELETE(TRUE);
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE CreateServiceDemand@18(ItemQty@1005 : Integer) : Code[20];
    VAR
      Item@1006 : Record 27;
      ServiceItem@1007 : Record 5940;
      ServiceHeader@1004 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      NeededBy@1008 : Date;
      LocationCode@1009 : Code[10];
      VariantCode@1010 : Code[10];
    BEGIN
      NeededBy := WORKDATE;
      LocationCode := '';
      VariantCode := '';
      FindItem(Item);
      FindServiceItem(ServiceItem);

      ServiceHeader.INIT;
      ServiceHeader.VALIDATE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.INSERT(TRUE);
      ServiceHeader.VALIDATE("Customer No.",ServiceItem."Customer No.");
      ServiceHeader.VALIDATE("Bill-to Name",TESTTEXT);
      ServiceHeader.MODIFY;

      ServiceItemLine.INIT;
      ServiceItemLine.VALIDATE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.VALIDATE("Document No.",ServiceHeader."No.");
      ServiceItemLine.VALIDATE("Line No.",10000);
      ServiceItemLine.INSERT(TRUE);
      ServiceItemLine.VALIDATE("Service Item No.",ServiceItem."No.");

      ServiceItemLine.MODIFY;

      ServiceLine.INIT;
      ServiceLine.VALIDATE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.VALIDATE("Document No.",ServiceHeader."No.");
      ServiceLine.VALIDATE("Line No.",10000);
      ServiceLine.VALIDATE("Service Item Line No.",10000);
      ServiceLine.INSERT(TRUE);
      ServiceLine.SetHideReplacementDialog(TRUE);
      ServiceLine.VALIDATE(Type,ServiceLine.Type::Item);
      ServiceLine.VALIDATE("No.",Item."No.");
      ServiceLine.VALIDATE(Quantity,ItemQty);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE("Variant Code",VariantCode);
      ServiceLine.VALIDATE("Needed by Date",NeededBy);
      ServiceLine.MODIFY;

      EXIT(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE CreateJobDemand@17(ItemQty@1001 : Integer) : Code[20];
    VAR
      Item@1008 : Record 27;
      Customer@1009 : Record 18;
      JobRec@1000 : Record 167;
      JobTaskLineRec@1004 : Record 1001;
      JobPlanningLineRec@1005 : Record 1003;
      JobTaskNo@1006 : Code[20];
      DocNo@1007 : Code[20];
      LocationCode@1012 : Code[10];
      VariantCode@1011 : Code[10];
      PlanDate@1010 : Date;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      FindItem(Item);
      LocationCode := '';
      VariantCode := '';
      PlanDate := WORKDATE;

      JobRec.INIT;
      JobRec.INSERT(TRUE);
      JobRec.VALIDATE("Apply Usage Link",TRUE);
      JobRec.VALIDATE("Bill-to Customer No.",Customer."No.");
      JobRec.VALIDATE("Description 2",TESTTEXT);
      JobRec.MODIFY;
      JobTaskNo := '10';
      // Job Task Line:
      JobTaskLineRec.INIT;
      JobTaskLineRec.VALIDATE("Job No.",JobRec."No.");
      JobTaskLineRec.VALIDATE("Job Task No.",JobTaskNo);
      JobTaskLineRec.VALIDATE("Job Task Type",JobTaskLineRec."Job Task Type"::Posting);
      JobTaskLineRec.INSERT(TRUE);
      // Job Planning Line:
      JobPlanningLineRec.INIT;
      JobPlanningLineRec."Job No." := JobRec."No.";
      JobPlanningLineRec."Job Task No." := JobTaskNo;
      JobPlanningLineRec."Line No." := 10;
      JobPlanningLineRec.VALIDATE("Planning Date",PlanDate);
      JobPlanningLineRec.VALIDATE("Usage Link",TRUE);
      JobPlanningLineRec.INSERT(TRUE);
      DocNo := DELCHR(FORMAT(TODAY),'=','-/') + '_' + DELCHR(FORMAT(TIME),'=',':');
      JobPlanningLineRec.VALIDATE("Document No.",DocNo);
      JobPlanningLineRec.VALIDATE(Type,JobPlanningLineRec.Type::Item);
      JobPlanningLineRec.VALIDATE("No.",Item."No.");
      JobPlanningLineRec.VALIDATE(Quantity,ItemQty);
      JobPlanningLineRec.VALIDATE("Location Code",LocationCode);
      JobPlanningLineRec.VALIDATE("Variant Code",VariantCode);
      JobPlanningLineRec.MODIFY;

      EXIT(JobRec."No.");
    END;

    LOCAL PROCEDURE FindServiceItem@19(VAR ServiceItem@1000 : Record 5940);
    VAR
      Item@1001 : Record 27;
      Customer@1002 : Record 18;
    BEGIN
      ServiceItem.FINDFIRST;
      REPEAT
        Customer.GET(ServiceItem."Customer No.");
        Item.GET(ServiceItem."Item No.");
        IF (Customer.Blocked = Customer.Blocked::" ") AND NOT Item.Blocked THEN
          EXIT;
      UNTIL ServiceItem.NEXT = 0;
      ERROR(Text001);
    END;

    LOCAL PROCEDURE TearDown@5(ItemNo@1001 : Code[20]);
    VAR
      ItemRec@1000 : Record 27;
      RequisitionLine@1002 : Record 246;
    BEGIN
      CleanUpSupplyAndDemand;
      SetRequisitionLineFilter(RequisitionLine,ItemNo);
      RequisitionLine.DELETEALL(TRUE);
      IF ItemRec.GET(ItemNo) THEN
        ItemRec.DELETE(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Requisition]
      Unsupported version tags:
      Codeunit 136127

      DEPENDENCY: Codeunit 130000 (Assert)

      Test: Planning Worksheet and Requisition Worksheet (Same/same)

      ALL THE FOLLOWING TESTS BELOW ARE EACH CARRIED OUT 3 TIMES:

      1) Planning worksheet, option NetChange     (CalculationOption = CalculationOption::PlanningNetChange)
      2) Planning worksheet, option Regenerative  (CalculationOption = CalculationOption::PlanningRegenerate)
      3) Requisition Worksheet                    (CalculationOption = CalculationOption::Requisition)

      The execution order is:
      1. CalculationOption = CalculationOption::PlanningNetChange
      Test 1 > Test 2 > Test 3 > Test 4 > Test 5
      2. CalculationOption = CalculationOption::PlanningRegenerate
      Test 1 > Test 2 > Test 3 > Test 4 > Test 5
      3. CalculationOption = CalculationOption::Requisition
      Test 1 > Test 2 > Test 3 > Test 4 > Test 5

      TEST 1 + 6 + 11: (Net change / Regenerative / Requisition worksheet)
      Plan for Service Demand.
      - Change setup for Item I to use Reordering Policy "Lot-for-Lot".
      - Create Service Order for Demand with Quantity X for Item  I with inventory 0.
      - Run Planning Worksheet
      - Set Filter to plan for Item I, Start Date and End Date before and after Service
      - Verify that plan contains purchase order for same amount as order (X).

      TEST 2 + 7 + 12:
      Plan after needed by date on Service Order.
      - Change setup for Item I to use Reordering Policy "Lot-for-Lot".
      - Create Service Order for Demand with Quantity X for Item  I with inventory 0. Change Posting date >
        than Needed by Date.
      - Run Planning Worksheet
      - Set Filter to plan for Item I, Set End Date before Posting Date and After Needed by Date
      - Verify that plan contains purchase order for same amount as order (X) and the Due Date = Needed By.

      TEST 3 + 8 + 13:
      Multiple Demands on the same day should end up in one purchase order.
      - Change setup for Item I to use Reordering Policy "Lot-for-Lot".
      - Create Service Order Demand with Quantity X1, Date=D for Item  I with inventory 0.
      - Create Sales Order Demand with Quantity X2, Date=D for Item  I
      - Run Planning Worksheet
      - Set Filter to plan for Item I, Set End Date before Posting Date and After Needed by Date
      - Verify that plan contains One purchase order for (X1+X2).

      TEST 4 + 9 + 14:
      Plan for Job Demand.
      - Change setup for Item I to use Reordering Policy "Lot-for-Lot".
      - Create a Job, Task Line and Job Planning Line for Demand with Quantity X for Item  I with inventory 0.
      - Run Planning Worksheet
      - Set Filter to plan for Item I, Start Date and End Date before and after Planning date on Planning Line
      - Verify that plan contains purchase order for same amount as planning Line(X).

      TEST 5 + 10 + 15:
      Plan after needed by date on Job.
      - Change setup for Item I to use Reordering Policy "Lot-for-Lot".
      - Create a Job, Task Line and Job Planning Line for Demand with Quantity X for Item , Planning Date = D I with inventory 0.
      - Run Planning Worksheet
      - Set Filter to plan for Item I, End Date before Planning date on Planning Line
      - Verify that plan is empty.
    }
    END.
  }
}

