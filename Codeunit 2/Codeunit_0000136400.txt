OBJECT Codeunit 136400 Resource Employee
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryHumanResource@1000 : Codeunit 131901;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      IncrementErrorMessage@1003 : TextConst 'ENU=Employee No must be incremented as per the setup.';
      EditableError@1004 : TextConst 'ENU=%1 should not be editable.';
      ValidationError@1011 : TextConst 'ENU=%1 %2 must not exist after deletion.';
      EmployeeNoSeriesCode@1015 : Code[20];

    [Normal]
    LOCAL PROCEDURE Initialize@6();
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryHumanResource.SetupEmployeeNumberSeries;

      IsInitialized := TRUE;
      COMMIT;
      CLEAR(EmployeeNoSeriesCode);  // Clear global variable.
    END;

    [Test]
    PROCEDURE EmployeeNoIncrement@9();
    VAR
      Employee@1000 : Record 5200;
      NoSeriesManagement@1003 : Codeunit 396;
      NextEmployeeNo@1001 : Code[20];
    BEGIN
      // Covers document number TC00062 - refer to TFS ID 21680.
      // Test Employee No. is incremented automatically as per the setup.

      // 1. Setup: Get next employee no from No Series.
      Initialize;
      NextEmployeeNo := NoSeriesManagement.GetNextNo(LibraryHumanResource.SetupEmployeeNumberSeries,WORKDATE,FALSE);

      // 2. Exercise:  Create new Employee.
      CreateEmployee(Employee);

      // 3. Verify: Check that the application generates an error if Employee No. is not incremented automatically as per the setup.
      Assert.AreEqual(NextEmployeeNo,Employee."No.",IncrementErrorMessage);
    END;

    [Test]
    PROCEDURE CreationOfEmployee@15();
    VAR
      Employee@1000 : Record 5200;
    BEGIN
      // Create new Employee and verify Employee exists after creation.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Employee.
      LibraryHumanResource.CreateEmployee(Employee);

      // 3. Verify: Check that the Employee has been created.
      Employee.GET(Employee."No.");
    END;

    [Test]
    PROCEDURE DeletionOfEmployee@14();
    VAR
      Employee@1000 : Record 5200;
      EmployeeNo@1001 : Code[20];
    BEGIN
      // Create new Employee, delete and verify Employee has been deleted.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      EmployeeNo := Employee."No.";

      // 2. Exercise: Delete the Employee.
      Employee.DELETE(TRUE);

      // 3. Verify: Try to get the Employee and make sure that it cannot be found.
      Assert.IsFalse(Employee.GET(EmployeeNo),STRSUBSTNO(ValidationError,Employee.TABLECAPTION,EmployeeNo));
    END;

    [Test]
    PROCEDURE ModificationOfEmployee@13();
    VAR
      Employee@1000 : Record 5200;
      LibraryUtility@1001 : Codeunit 131000;
      Address@1005 : Text[50];
      Address2@1004 : Text[50];
    BEGIN
      // Create new Employee and verify Address after modification in Employee.

      // 1. Setup: Create employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);

      // 2. Exercise: Input the Employee Address.
      Address :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Employee.FIELDNO(Address),DATABASE::Employee),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Employee,Employee.FIELDNO(Address)));
      Address2 :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Employee.FIELDNO("Address 2"),DATABASE::Employee),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Employee,Employee.FIELDNO("Address 2")));
      EditEmployeeAddress(Employee,Address,Address2);

      // 3. Verify: Check Address and Address 2 have correct value in Employee.
      Employee.GET(Employee."No.");  // Get refreshed instance.
      Employee.TESTFIELD(Address,Address);
      Employee.TESTFIELD("Address 2",Address2);
    END;

    [Test]
    PROCEDURE CreateEmployeeHavingExistingNo@32();
    VAR
      Employee@1003 : Record 5200;
      FirstEmployeeNo@1000 : Code[20];
    BEGIN
      // Create new Employee with No. of existing Employee and verify that application generates an error message.

      // 1. Setup: Create first Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      FirstEmployeeNo := Employee."No.";
      CLEAR(Employee);

      // 2. Exercise:Try to create another Employee with No. of existing Employee.
      Employee.INIT;
      Employee.VALIDATE("No.",FirstEmployeeNo);
      ASSERTERROR Employee.INSERT(TRUE);

      // 3. Verify: Verify that application generates an error message.
      Assert.AssertRecordAlreadyExists;
    END;

    [Test]
    PROCEDURE RenameEmployeeHavingExistingNo@12();
    VAR
      Employee@1003 : Record 5200;
      FirstEmployeeNo@1000 : Code[20];
    BEGIN
      // Create new Employee, rename with No. of existing Employee and verify that application generates an error message.

      // 1. Setup: Create first employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      FirstEmployeeNo := Employee."No.";
      CLEAR(Employee);
      LibraryHumanResource.CreateEmployee(Employee);

      // 2. Exercise: Create another employee and rename it with existing employee.
      ASSERTERROR Employee.RENAME(FirstEmployeeNo);

      // 3. Verify: Verify that application generates an error message.
      Assert.AssertRecordAlreadyExists;
    END;

    [Test]
    [HandlerFunctions(NoSeriesListModalHandler)]
    PROCEDURE EmployeeNoAssistEdit@16();
    VAR
      HumanResourcesSetup@1002 : Record 5218;
      EmployeeCard@1004 : TestPage 5200;
    BEGIN
      // Test Employee No. is incremented by AssistEdit automatically as per the setup.

      // 1. Setup: Find Next Employee No.
      HumanResourcesSetup.GET;

      // 2. Exercise: Genrate New Employee No. by click on AssistEdit Button with No. Series Code.
      EmployeeCard.OPENNEW;
      EmployeeCard."No.".ASSISTEDIT; // Get No. Series Code in EmployeeNoSeriesCode.

      // 3. Verify: No. Series Code must match with No. Series Code in Setup.
      HumanResourcesSetup.TESTFIELD("Employee Nos.",EmployeeNoSeriesCode);
    END;

    [Test]
    PROCEDURE NonEditablePostCodePage@24();
    VAR
      PostCodes@1001 : TestPage 367;
    BEGIN
      // Test Post Codes Page is non editable in View mode.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Open Post Codes Page in View mode.
      PostCodes.OPENVIEW;

      // 3. Verify: Verify Post Codes Page is non editable.
      // As the fields are non editable so Pages is also non editable.
      Assert.IsFalse(PostCodes.Code.EDITABLE,STRSUBSTNO(EditableError,PostCodes.Code.CAPTION));
      Assert.IsFalse(PostCodes.City.EDITABLE,STRSUBSTNO(EditableError,PostCodes.City.CAPTION));
    END;

    [Test]
    PROCEDURE NonEditableCountryRegionPage@18();
    VAR
      CountriesRegions@1000 : TestPage 10;
    BEGIN
      // Test Country Region Page is non editable in View mode.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Open Country Region Page in View mode.
      CountriesRegions.OPENVIEW;

      // 3. Verify: Verify Country Region Pages is non editable.
      // As the fields are non editable so Pages is also non editable.
      Assert.IsFalse(CountriesRegions.Code.EDITABLE,STRSUBSTNO(EditableError,CountriesRegions.Code.CAPTION));
    END;

    [Test]
    PROCEDURE NonEditableCausesOfInactivityPage@22();
    VAR
      CausesofInactivity@1000 : TestPage 5214;
    BEGIN
      // Test Causes Of Inactivity Page is non editable in View mode.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Open Causes Of Inactivity Page in View mode.
      CausesofInactivity.OPENVIEW;

      // 3. Verify: Verify Causes Of Inactivity Page is non editable.
      // As the fields are non editable so Page is also non editable.
      Assert.IsFalse(CausesofInactivity.Code.EDITABLE,STRSUBSTNO(EditableError,CausesofInactivity.Code.CAPTION));
    END;

    [Test]
    PROCEDURE NonEditableUnionsPage@23();
    VAR
      Unions@1000 : TestPage 5213;
    BEGIN
      // Test Unions Page is non editable in View mode.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Open Unions Page in View mode.
      Unions.OPENVIEW;

      // 3. Verify: Verify Unions Page is non editable.
      // As the fields are non editable so Page is also non editable.
      Assert.IsFalse(Unions.Code.EDITABLE,STRSUBSTNO(EditableError,Unions.Code.CAPTION));
    END;

    LOCAL PROCEDURE CreateEmployee@7(VAR Employee@1000 : Record 5200);
    BEGIN
      LibraryHumanResource.CreateEmployee(Employee);
      Employee."Employment Date" := WORKDATE;
      Employee.VALIDATE("Alt. Address Start Date",WORKDATE);
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE EditEmployeeAddress@11(Employee@1000 : Record 5200;Address@1004 : Text[50];Address2@1003 : Text[50]);
    BEGIN
      Employee.VALIDATE(Address,Address);
      Employee.VALIDATE("Address 2",Address2);
      Employee.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE NoSeriesListModalHandler@17(VAR NoSeriesList@1000 : TestPage 571);
    BEGIN
      EmployeeNoSeriesCode := NoSeriesList.Code.VALUE;
    END;

    BEGIN
    {
      // [FEATURE] [Employee]
      Test for Human Resource Date Verification:
       1.  Test for user should not be able to allow entering Birth Date greater than Employment Date /Inactive date/Termination Date.
       2.  Test for user should not be able to enter Inactive Date prior to Employment Date.
       3.  Test for user should not be able to enter Termination Date prior to Employment Date.
       4.  Test for user should not be able to enter Alt. Address End Date lesser than the Alt. Address Start Date.
       5.  Test for on Misc. Article Information page, user should not be able to enter To Date prior to From Date.
       6.  Test for on Qualification menu option, user should not be able to enter To Date prior to From Date.
       7.  Test for Employee No. is incremented automatically as per the setup.
       8.  Create new Employee and verify Employee exists.
       9.  Create new Employee, delete and verify Employee does not exist.
       10. Create new Employee and verify Address after modification in Employee.
       11. Create new Employee with No. of existing Employee and verify that application generates an error message.
       12. Create new Employee, rename with No. of existing Employee and verify that application generates an error message.
       13. Test Employee No. is incremented by AssistEdit automatically as per the setup.
       14. Test Post Codes, Country Region Pages are non editable in View mode.
       15. Test Causes Of Inactivity Page is non editable in View mode.
       16. Test Unions Page is non editable in View mode.

      TFS_TS_ID = 21680
      Covers Test cases:
        TC00225 TFS_TC_ID=123208
        TC00056 TFS_TC_ID=122967
        TC00226 TFS_TC_ID=123207
        TC00053 TFS_TC_ID=122964
        TC00058 TFS_TC_ID=122918
        TC00059 TFS_TC_ID=122919
        TC00062 TFS_TC_ID=122971

      TFS_TS_ID = 245061
      Covers Test cases:
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      CreationOfEmployee,EmployeeNoAssistEdit                    130714
      DeletionOfEmployee                                         130716
      ModificationOfEmployee                                     130715
      CreateEmployeeHavingExistingNo                             130717
      RenameEmployeeHavingExistingNo                             130718

      TFS_TS_ID = 273131
      Covers Test cases:
      -------------------------------------------------------------------
      Test Function Name                                          TFS ID
      -------------------------------------------------------------------
      NonEditablePostCodePage                                     122965
      NonEditableCountryRegionPage                                122965
      NonEditableCausesOfInactivityPage                           122966
      NonEditableUnionsPage                                       122968
    }
    END.
  }
}

