OBJECT Codeunit 136303 Job Consumption - Usage Link
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryResource@1011 : Codeunit 130511;
      LibraryJob@1001 : Codeunit 131920;
      LibraryRandom@1007 : Codeunit 130440;
      LibraryVariableStorage@1009 : Codeunit 131004;
      Initialized@1002 : Boolean;
      UnitPriceErr@1008 : TextConst 'ENU=Unit Price is not correct, please refer setup in Job Resource Price.';
      ConfirmUsageWithBlankLineTypeQst@1004 : TextConst 'ENU=Usage will not be linked to the job planning line because the Line Type field is empty.\\Do you want to continue?';
      PostJournalLineQst@1010 : TextConst 'ENU=Do you want to post the journal lines?';
      JobPlanningLineRenameErr@1012 : TextConst '@@@="%1 = Job Number field name; %2 = Job Task Number field name; %3 = Job Planning Line table name";ENU=You cannot change the %1 or %2 of this %3.';

    [Test]
    PROCEDURE JobUsageLinking@1();
    VAR
      JobTask@1001 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Create planning lines for a job task with apply usage link enabled.
      // Verify that usage link is enabled for the created planning lines of type that include schedule.
      // Verify that usage link cannot be disabled for the created planning lines of type that include schedule.
      // Verify that usage link is disabled for the created planning lines of type that excludes schedule.
      // Verify that usage link cannot be enabled for the created planning lines of type that exclude schedule.

      // Setup
      Initialize;

      CreateJobWithTaskAndApplyUsageLink(JobTask);

      // Exercise
      CreateJobPlanningLinePerType(JobTask,JobPlanningLine);

      // Verify
      WITH JobPlanningLine DO BEGIN
        SETRANGE("Schedule Line",TRUE);
        FINDSET;
        REPEAT
          Assert.IsTrue("Usage Link",FIELDCAPTION("Usage Link"));
          VALIDATE("Usage Link",FALSE);
          // should still be true
          Assert.IsTrue("Usage Link",FIELDCAPTION("Usage Link"));
        UNTIL NEXT = 0;
      END;

      WITH JobPlanningLine DO BEGIN
        SETRANGE("Schedule Line",FALSE);
        FINDFIRST;
        Assert.IsFalse("Usage Link",FIELDCAPTION("Usage Link"));
        ASSERTERROR VALIDATE("Usage Link",TRUE);
      END;
    END;

    [Test]
    PROCEDURE JobNoUsageLinking@4();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // Create planning lines for a job task with apply usage link disabled.
      // Verify that usage link is disabled for the created planning lines.
      // Verify that usage link can be enabled for planning lines of type that includes schedule.
      // Verify that usage link cannot be enabled for planning lines of type that excludes schedule.

      // Setup
      Initialize;

      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // Exercise
      CreateJobPlanningLinePerType(JobTask,JobPlanningLine);

      // Verify
      WITH JobPlanningLine DO BEGIN
        SETRANGE("Schedule Line",TRUE);
        FINDSET;
        REPEAT
          Assert.IsFalse("Usage Link",'Usage link for line type that includes schedule');
          VALIDATE("Usage Link",TRUE);
          Assert.IsTrue("Usage Link",'Enabling usage link.');
        UNTIL NEXT = 0;
      END;

      WITH JobPlanningLine DO BEGIN
        SETRANGE("Schedule Line",FALSE);
        FINDFIRST;
        Assert.IsFalse("Usage Link",'Usage link for line type that excludes schedule');
        ASSERTERROR VALIDATE("Usage Link",TRUE);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledItem@21();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledItemDefault@28();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothItem@24();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothItemDefault@29();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledResource@22();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledResourceDefault@30();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothResource@27();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothResourceDefault@31();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledGL@23();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkScheduledGLDefault@32();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothGL@26();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = FALSE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE LinkBothGLDefault@33();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule & Contract) with an explicit link (Job."Apply Usage Link" = TRUE), post execution, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,TRUE,LibraryJob.JobConsumption)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DeleteUsedPlanningLine@47();
    VAR
      JobLedgerEntry@1000 : Record 169;
      JobUsageLink@1001 : Record 1020;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // [SCENARIO] Check that Planning lines cannot be deleted if usage has been posted.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,TRUE,LibraryJob.JobConsumption);

      JobLedgerEntry.FINDLAST;
      JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
      JobUsageLink.FINDFIRST;
      JobPlanningLine.GET(JobUsageLink."Job No.",JobUsageLink."Job Task No.",JobUsageLink."Line No.");
      ASSERTERROR JobPlanningLine.DELETE(TRUE)
    END;

    [Test]
    PROCEDURE LinkScheduledServiceItem@163();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule) with an explicit link, post execution via Service Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.ServiceConsumption)
    END;

    [Test]
    PROCEDURE LinkBothServiceItem@159();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule & Contract) with an explicit link, post execution via Service Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.ServiceConsumption)
    END;

    [Test]
    PROCEDURE LinkScheduledServiceResource@157();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule) with an explicit link, post execution via Service Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.ServiceConsumption)
    END;

    [Test]
    PROCEDURE LinkBothServiceResource@155();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Resource, "Line Type" = Schedule & Contract) with an explicit link, post execution via Service Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.ServiceConsumption)
    END;

    [Test]
    PROCEDURE LinkScheduledGenJournal@152();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule) with an explicit link, post execution via Gen. Journal, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.GenJournalConsumption)
    END;

    [Test]
    PROCEDURE LinkBothGenJournal@114();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule & Contract) with an explicit link, post execution via Gen. Journal, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.GenJournalConsumption)
    END;

    [Test]
    PROCEDURE LinkScheduledPurchaseItem@154();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule) with an explicit link, post execution via Purchase Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.PurchaseConsumption)
    END;

    [Test]
    PROCEDURE LinkBothPurchaseItem@156();
    BEGIN
      // [SCENARIO] Use a planning line (Type = Item, "Line Type" = Schedule & Contract) with an explicit link, post execution via Purchase Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.PurchaseConsumption)
    END;

    [Test]
    PROCEDURE LinkScheduledPurchaseGL@158();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule) with an explicit link, post execution via Purchase Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,FALSE,LibraryJob.PurchaseConsumption)
    END;

    [Test]
    PROCEDURE LinkBothPurchaseGL@160();
    BEGIN
      // [SCENARIO] Use a planning line (Type = G/L Account, "Line Type" = Schedule & Contract) with an explicit link, post execution via Purchase Document, verify that link created and Quantities and Amounts are correct.

      UseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,FALSE,LibraryJob.PurchaseConsumption)
    END;

    LOCAL PROCEDURE UseLinked@134(ConsumableType@1005 : Option;LineTypeToMatch@1006 : Option;ApplyUsageLink@1008 : Boolean;Source@1012 : Option);
    VAR
      Job@1002 : Record 167;
      JobTask@1010 : Record 1001;
      JobPlanningLine@1011 : Record 1003;
      BeforeJobPlanningLine@1003 : Record 1003;
      NewJobPlanningLine@1007 : Record 1003;
      JobJournalLine@1000 : Record 210;
      JobLedgerEntry@1001 : Record 169;
      DateForm@1009 : DateFormula;
      LineCount@1004 : Integer;
    BEGIN
      // Use a planning line with an explicit link
      // via job journal, gl journal, purchase, or service (Source).
      // Verify remaining quantity
      // Verify that the usage link is created.
      // Verify that the planning line's amounts and quantities are updated.

      // can only link to a planning line which type includes schedule
      Assert.IsTrue(
        LineTypeToMatch IN [LibraryJob.PlanningLineTypeSchedule,LibraryJob.PlanningLineTypeBoth],
        'Line type should include schedule.');

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LineTypeToMatch,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      BeforeJobPlanningLine := JobPlanningLine;

      // to make it more difficult
      CreateSimilarJobPlanningLines(JobPlanningLine);

      // with an explicit link, we can even have earlier planning lines that are identical
      NewJobPlanningLine := JobPlanningLine;
      EVALUATE(DateForm,'<-1W>');
      NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE(DateForm,JobPlanningLine."Planning Date"));
      NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      NewJobPlanningLine.INSERT(TRUE);
      LineCount := JobPlanningLine.COUNT;

      // Exercise
      LibraryJob.UseJobPlanningLineExplicit(JobPlanningLine,LibraryJob.UsageLineTypeBlank,1,Source,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - the Remaining Qty. field on the journal line is correct
      JobJournalLine.TESTFIELD("Remaining Qty.",BeforeJobPlanningLine."Remaining Qty." - JobJournalLine.Quantity);

      // Verify - line type is taken from planning line
      Assert.AreEqual(
        LibraryJob.UsageLineType(JobPlanningLine."Line Type"),
        JobJournalLine."Line Type",
        'Journal line type should the same as planning line type.');

      // Verify - usage link has been created
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - no new planning lines are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      // Verify - JobPlanningLine@Pre - JobJournalLine = JobPlanningLine@Post
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkScheduledItem@38();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: Item, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkUseScheduledItemDefault@34();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: Item, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkUseBothItem@35();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: Item, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkBothItemDefault@36();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: Item, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkScheduledResource@41();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: Resource, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkScheduledResDefault@40();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: Resource, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkBothResource@39();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: Resource, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkBothResourceDefault@37();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: Resource, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkScheduledGL@45();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: G/L Account, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkScheduledGLDefault@44();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: G/L Account, Line Type: Schedule) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkBothGL@43();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": FALSE, Type: G/L Account, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PLinkBothGLDefault@42();
    BEGIN
      // [SCENARIO] Verify that usage links created and Qtys and Amts are correct when planning line (Job."Apply Usage Link": TRUE, Type: G/L Account, Line Type: Schedule & Contract) used completely via job journal in two steps with an explicit link.

      PartialUseLinked(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    LOCAL PROCEDURE PartialUseLinked@12(ConsumableType@1007 : Option;LineTypeToMatch@1006 : Option;ApplyUsageLink@1005 : Boolean);
    VAR
      Job@1008 : Record 167;
      JobTask@1009 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      BeforeJobPlanningLine@1001 : Record 1003;
      NewJobPlanningLine@1010 : Record 1003;
      JobJournalLine@1002 : Record 210;
      JobLedgerEntry@1003 : Record 169;
      DateForm@1012 : DateFormula;
      LineCount@1004 : Integer;
    BEGIN
      // Use a planning line via job journal in two parts with an explicit link.
      // Verify that the usage links are created.
      // Verify that the planning line's amounts and quantities are updated.

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to link to
      LibraryJob.CreateJobPlanningLine(LineTypeToMatch,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE(Quantity,RANDOM(100) + 100); // 100 < Quantity <= 200
      JobPlanningLine.MODIFY(TRUE);
      BeforeJobPlanningLine := JobPlanningLine;

      // to make it more difficult
      CreateSimilarJobPlanningLines(JobPlanningLine);

      // with an explicit link, we can even have earlier planning lines that are identical
      NewJobPlanningLine := JobPlanningLine;
      EVALUATE(DateForm,'<-1W>');
      NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE(DateForm,JobPlanningLine."Planning Date"));
      NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      NewJobPlanningLine.INSERT(TRUE);
      LineCount := JobPlanningLine.COUNT;

      // Exercise - use 1 to 99% of planning line
      LibraryJob.UseJobPlanningLineExplicit(JobPlanningLine,LibraryJob.UsageLineTypeBlank,RANDOM(99) / 100,LibraryJob.JobConsumption,
        JobJournalLine);
      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - Remaining Qty. field on the journal line
      JobJournalLine.TESTFIELD("Remaining Qty.",BeforeJobPlanningLine."Remaining Qty." - JobJournalLine.Quantity);

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - no new planning lines are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      // Verify - JobPlanningLine@Pre - JobJournalLine = JobPlanningLine@Post
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine);

      // Exercise - use the rest
      BeforeJobPlanningLine := JobPlanningLine;
      LibraryJob.UseJobPlanningLineExplicit(JobPlanningLine,LibraryJob.UsageLineTypeBlank,1,LibraryJob.JobConsumption,JobJournalLine);
      // refresh
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - no new planning lines are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      // Verify - JobPlanningLine@Pre - JobJournalLine = JobPlanningLine@Post
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchScheduledItem@16();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchScheduledItem@8();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchScheduledItem@14();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchScheduledItem@15();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchBothItem@55();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchBothItem@54();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchBothItem@53();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchBothItem@52();
    BEGIN
      UseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchScheduledResource@61();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchScheduledResource@60();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchScheduledResource@59();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchScheduledResource@58();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchBothResource@57();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchBothResource@56();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchBothResource@51();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchBothResource@50();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchScheduledGL@69();
    BEGIN
      UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchScheduledGL@68();
    BEGIN
      UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchScheduledGL@67();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchScheduledGL@66();
    BEGIN
      ASSERTERROR UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BlankMatchBothGL@65();
    BEGIN
      UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleMatchBothGL@64();
    BEGIN
      UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractMatchBothGL@63();
    BEGIN
      UseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothMatchBothGL@62();
    BEGIN
      UseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    LOCAL PROCEDURE UseMatched@7(ConsumableType@1011 : Option;UsageLineType@1008 : Option;LineTypeToMatch@1010 : Option;ApplyUsageLink@1009 : Boolean);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      BeforeJobPlanningLine@1006 : Record 1003;
      JobPlanningLine@1002 : Record 1003;
      JobLedgerEntry@1004 : Record 169;
      JobJournalLine@1005 : Record 210;
      LineCount@1007 : Integer;
    BEGIN
      // Use a planning line via job journal that by matching.
      // Verfiy that the line type is taken from the planning line and cannot be changed.
      // Verify that the usage link is created.
      // Verify that the planning line's amounts and quantities are updated.

      // can only link to a planning line which type includes schedule
      Assert.IsTrue(
        LineTypeToMatch IN [LibraryJob.PlanningLineTypeSchedule,LibraryJob.PlanningLineTypeBoth],
        'Line type should include schedule.');

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LineTypeToMatch,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      BeforeJobPlanningLine := JobPlanningLine;

      // to make it more difficult
      CreateSimilarJobPlanningLines(JobPlanningLine);
      LineCount := JobPlanningLine.COUNT;

      // Exercise
      LibraryJob.UseJobPlanningLine(JobPlanningLine,UsageLineType,1,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - no new planning line are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      // Verify - JobPlanningLine@Pre - JobJournalLine = JobPlanningLine@Post
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchScheduledItem@96();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchScheduledItem@95();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchScheduledItem@94();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchScheduledItem@93();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchBothItem@92();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchBothItem@91();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchBothItem@90();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchBothItem@89();
    BEGIN
      PartialUseMatched(LibraryJob.ItemType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchScheduledResource@88();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchScheduledRes@87();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchScheduledRes@86();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchScheduledResource@85();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchBothResource@84();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchBothResource@83();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchBothResource@82();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchBothResource@81();
    BEGIN
      PartialUseMatched(LibraryJob.ResourceType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchScheduledGL@80();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchScheduledGL@79();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchScheduledGL@78();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchScheduledGL@77();
    BEGIN
      ASSERTERROR
        PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeSchedule,FALSE);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBlankMatchBothGL@76();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBlank,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PScheduleMatchBothGL@75();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeSchedule,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PContractMatchBothGL@74();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeContract,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PBothMatchBothGL@73();
    BEGIN
      PartialUseMatched(LibraryJob.GLAccountType,LibraryJob.UsageLineTypeBoth,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    LOCAL PROCEDURE PartialUseMatched@6(ConsumableType@1011 : Option;UsageLineType@1010 : Option;LineTypeToMatch@1009 : Option;ApplyUsageLink@1008 : Boolean);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      BeforeJobPlanningLine@1006 : Record 1003;
      JobPlanningLine@1002 : Record 1003;
      JobLedgerEntry@1004 : Record 169;
      JobJournalLine@1005 : Record 210;
      LineCount@1007 : Integer;
    BEGIN
      // Use a planning line via job journal by matching in two steps.
      // Verify that the usage links are created.
      // Verffy that no new planning lines are created.
      // Verify that the planning line's amounts and quantities are updated.

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LineTypeToMatch,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      BeforeJobPlanningLine := JobPlanningLine;

      // to make it more difficult
      CreateSimilarJobPlanningLines(JobPlanningLine);
      LineCount := JobPlanningLine.COUNT;

      // Exercise - use 1 - 99% of the planning line
      LibraryJob.UseJobPlanningLine(JobPlanningLine,UsageLineType,RANDOM(99) / 100,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - no new planning lines are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine);

      // Exercise - use the rest
      BeforeJobPlanningLine := JobPlanningLine;
      LibraryJob.UseJobPlanningLine(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,1,JobJournalLine);

      // refresh
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verfiy - no new planning lines are created
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      // Verify - JobPlanningLine@Pre - JobJournalLine = JobPlanningLine@Post
      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledItem@108();
    BEGIN
      ExcessUseMatched(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledItemDefault@107();
    BEGIN
      ExcessUseMatched(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothItem@106();
    BEGIN
      ExcessUseMatched(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothItemDefault@105();
    BEGIN
      ExcessUseMatched(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledResource@104();
    BEGIN
      ExcessUseMatched(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledResourceDefault@103();
    BEGIN
      ExcessUseMatched(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothResource@102();
    BEGIN
      ExcessUseMatched(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothResourceDefault@101();
    BEGIN
      ExcessUseMatched(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledGL@100();
    BEGIN
      ExcessUseMatched(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessScheduledGLDefault@99();
    BEGIN
      ExcessUseMatched(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothGL@98();
    BEGIN
      ExcessUseMatched(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessBothGLDefault@97();
    BEGIN
      ExcessUseMatched(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,TRUE)
    END;

    LOCAL PROCEDURE ExcessUseMatched@71(ConsumableType@1005 : Option;LineTypeToMatch@1006 : Option;ApplyUsageLink@1008 : Boolean);
    VAR
      Job@1002 : Record 167;
      JobTask@1003 : Record 1001;
      JobPlanningLine@1007 : Record 1003;
      BeforeJobPlanningLine@1009 : Record 1003;
      JobJournalLine@1000 : Record 210;
      JobLedgerEntry@1001 : Record 169;
      LineCount@1004 : Integer;
    BEGIN
      // Use more than planned by matching via job journal.
      // Verify that the usage links are created.
      // Verify that the planning line's amounts and quantities are updated.
      // Verfiy that correct planning line(s) is created for the remainder.

      // can only match a planning line which type includes schedule
      Assert.IsTrue(
        LineTypeToMatch IN [LibraryJob.PlanningLineTypeSchedule,LibraryJob.PlanningLineTypeBoth],
        'Line type should include schedule.');

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LineTypeToMatch,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      LineCount := JobPlanningLine.COUNT;

      // Exercise - use three (random) times the planned quantity
      BeforeJobPlanningLine := JobPlanningLine;
      LibraryJob.UseJobPlanningLine(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,3,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - the original planning line is completed
      VerifyJobPlanningLineDone(JobPlanningLine);

      // Verify - an extra planning line is created
      Assert.AreEqual(LineCount + 1,JobPlanningLine.COUNT,'One planning line should have been created.');

      // Verfiy - transaction correctly registered in ledger
      LibraryJob.VerifyJobLedger(JobJournalLine);

      // Verify - the correct planning line(s) are created
      UseFromPlan(JobJournalLine,BeforeJobPlanningLine);
      LibraryJob.VerifyPlanningLines(JobJournalLine,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE MatchMultipleItemLines@19();
    BEGIN
      MatchMultipleLines(LibraryJob.ItemType,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE MatchMultipleItemLinesDefault@48();
    BEGIN
      MatchMultipleLines(LibraryJob.ItemType,TRUE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE MatchMultipleGLLines@111();
    BEGIN
      MatchMultipleLines(LibraryJob.GLAccountType,FALSE)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE MatchMultipleGLLinesDefault@72();
    BEGIN
      MatchMultipleLines(LibraryJob.GLAccountType,TRUE)
    END;

    LOCAL PROCEDURE MatchMultipleLines@11(ConsumableType@1007 : Option;ApplyUsageLink@1000 : Boolean);
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1005 : Record 210;
      JobLedgerEntry@1006 : Record 169;
      LineCount@1004 : Integer;
    BEGIN
      // Use multiple planning lines at once via job journal by matching.
      // Verify that the usage links are created.
      // Verify that the planning line's amounts and quantities are updated.

      // Setup
      Initialize;
      CreateJob(ApplyUsageLink,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);
      JobPlanningLine."Line No." := JobPlanningLine."Line No." + 10000;
      JobPlanningLine.INSERT(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      LineCount := JobPlanningLine.COUNT;

      // Exercise - use both planning lines and more at once
      LibraryJob.UseJobPlanningLine(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,3,JobJournalLine);

      // Verify - an extra planning line is created
      Assert.AreEqual(LineCount + 1,JobPlanningLine.COUNT,'One extra planning line should have been created');

      // Verify - the original two planning lines are linked to the ledger entry, and completely used
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      JobPlanningLine.SETRANGE(Description,JobPlanningLine.Description);
      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'The original planning lines should be in the filter');
      JobPlanningLine.FINDSET;
      REPEAT
        VerifyUsageLink(JobPlanningLine,JobLedgerEntry);
        VerifyJobPlanningLineDone(JobPlanningLine)
      UNTIL JobPlanningLine.NEXT = 0;

      // Verify - the newly created line is linked to the ledger entry
      JobPlanningLine.SETRANGE(Description,JobJournalLine.Description);
      JobPlanningLine.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ScheduleNoMatchItem@120();
    BEGIN
      UsageLinkNoMatch(LibraryJob.ItemType,LibraryJob.UsageLineTypeSchedule)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ContractNoMatchItem@119();
    BEGIN
      UsageLinkNoMatch(LibraryJob.ItemType,LibraryJob.UsageLineTypeContract)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BothNoMatchItem@118();
    BEGIN
      UsageLinkNoMatch(LibraryJob.ItemType,LibraryJob.UsageLineTypeBoth)
    END;

    LOCAL PROCEDURE UsageLinkNoMatch@13(ConsumableType@1009 : Option;UsageLineType@1008 : Option);
    VAR
      Job@1007 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJournalLine@1003 : Record 210;
      TempJobJournalLine@1004 : TEMPORARY Record 210;
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      // Use something for a job that was not planned for.
      // Verify that the usage link is created.
      // Verify that usage link is enabled for the created planning line

      // Setup
      Initialize;
      CreateJob(TRUE,FALSE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobJournalLineForType(UsageLineType,ConsumableType,JobTask,JobJournalLine);

      // Exercise
      LibraryJob.CopyJobJournalLines(JobJournalLine,TempJobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      // Verify - a new, linked line is created
      JobPlanningLine.SETRANGE(Description,TempJobJournalLine.Description);
      JobPlanningLine.SETFILTER("Line Type",'%1|%2',LibraryJob.PlanningLineTypeSchedule,LibraryJob.PlanningLineTypeBoth);
      Assert.AreEqual(1,JobPlanningLine.COUNT,'Only one line of type that includes schedule should have been created');
      JobPlanningLine.FINDFIRST;
      JobLedgerEntry.SETRANGE(Description,TempJobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      // Verify - the created line is correct
      LibraryJob.VerifyJobJournalPosting(TRUE,TempJobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DeleteSelectedJobPlanningLine@49();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobJournalLine@1003 : Record 210;
    BEGIN
      // Deleting the selected job planning line from the job journal line results in an error when posting.

      // trigger message handler
      MESSAGE('');

      // Setup
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobTask,JobPlanningLine);

      // Exercise
      LibraryJob.CreateJobJournalLineForPlan(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,1,JobJournalLine);
      JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      JobJournalLine.MODIFY(TRUE);
      JobPlanningLine.DELETE(TRUE);

      // Verfiy
      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,'The Job Planning Line does not exist.') = 1,'Unexpected error');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourceNegativeMatchNegative@115();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that pland and execution matched when executing plan (negative Quantity) for Job Planning Line (Type = Resource) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      MatchQuantities(QtyToPost,QtyToPost / 3,LibraryJob.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemNegativeMatchNegative@124();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution matched when executing plan (negative Quantity) for Job Planning Line (Type = Item) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      MatchQuantities(QtyToPost,QtyToPost / 3,LibraryJob.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountNegativeMatchNegative@125();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that pland and execution matched when executing plan (negative Quantity) for Job Planning Line (Type = G/L Account) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      MatchQuantities(QtyToPost,QtyToPost / 3,LibraryJob.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourcePositiveMatchNegative@122();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (negative Quantity) for Job Planning Line (Type = Resource) with usage link flag (positive Quantity), do not set link to plan.

      QtyToPost := RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemPositiveMatchNegative@121();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (negative Quantity) for Job Planning Line (Type = Item) with usage link flag (positive Quantity), do not set link to plan.

      QtyToPost := RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ItemType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountPositiveMatchNegative@117();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (negative Quantity) for Job Planning Line (Type = G/L Account) with usage link flag (positive Quantity), do not set link to plan.

      QtyToPost := RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.GLAccountType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourceNegativeMatchPositive@129();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (positive Quantity) for Job Planning Line (Type = Resource) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemNegativeMatchPositive@128();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (positive Quantity) for Job Planning Line (Type = Resource) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountNegativeMatchPositive@127();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Match]
      // [SCENARIO] Verify that plan and execution are not matched when executing plan (positive Quantity) for Job Planning Line (Type = Resource) with usage link flag (negative Quantity), do not set link to plan.

      QtyToPost := -RANDOM(100);
      // these should not match!
      ASSERTERROR MatchQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType);
      Assert.AreEqual('Assert.IsTrue failed. Usage link should have been created',GETLASTERRORTEXT,'Unexpected error')
    END;

    LOCAL PROCEDURE MatchQuantities@109(QtyToPost@1000 : Decimal;QtyToMatch@1001 : Decimal;ConsumableType@1009 : Option);
    VAR
      Job@1002 : Record 167;
      JobTask@1003 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      BeforeJobPlanningLine@1005 : Record 1003;
      JobJournalLine@1006 : Record 210;
      JobLedgerEntry@1007 : Record 169;
      LineCount@1008 : Integer;
    BEGIN
      // Usage and plan should only match if their quantities have the same sign
      // Verify correct planning line is (not) created
      // Verify resulting amounts and quantities

      Assert.AreNotEqual(0,QtyToPost,'Quantitiy to post should not be zero.');
      Assert.AreNotEqual(0,QtyToMatch,'Quantitiy to post should not be zero.');

      // Users may use up to five decimal places
      QtyToPost := ROUND(QtyToPost,0.00001);
      QtyToMatch := ROUND(QtyToMatch,0.00001);

      // Setup
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,QtyToMatch);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      BeforeJobPlanningLine := JobPlanningLine;

      LineCount := JobPlanningLine.COUNT;

      // Exercise
      IF (QtyToPost < 0) AND (ConsumableType = LibraryJob.ItemType) THEN BEGIN
        // Before crediting, use item first
        JobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
        JobPlanningLine.VALIDATE(Quantity,ABS(QtyToPost));
        JobPlanningLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
        JobPlanningLine.INSERT(TRUE);
        LineCount += 1;
        LibraryJob.UseJobPlanningLineExplicit(
          JobPlanningLine,LibraryJob.UsageLineTypeSchedule,1,LibraryJob.JobConsumption,JobJournalLine);
        JobPlanningLine := BeforeJobPlanningLine
      END;
      LibraryJob.UseJobPlanningLine(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,QtyToPost / QtyToMatch,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify - usage is linked
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      IF (QtyToPost > 0) <> (QtyToPost > 0) THEN BEGIN
        // Different sign: no match => verify new line
        Assert.AreEqual(LineCount + 1,JobPlanningLine.COUNT,'One planning line should have been created.');
        LibraryJob.VerifyPlanningLines(JobJournalLine,TRUE)
      END ELSE BEGIN
        // Same sign: match => verify updated planning line
        IF ABS(QtyToPost) > ABS(QtyToMatch) THEN BEGIN
          // Excess posted: new line => verify
          Assert.AreEqual(LineCount + 1,JobPlanningLine.COUNT,'One planning line should have been created.');
          VerifyJobPlanningLineDone(JobPlanningLine);
          // Calculate remaining usage (i.e, the "new" journal line)
          UseFromPlan(JobJournalLine,BeforeJobPlanningLine);
          LibraryJob.VerifyPlanningLines(JobJournalLine,TRUE);
        END ELSE BEGIN
          // Partially posted
          Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');
          VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine)
        END
      END
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourceNegativeLinkNegative@144();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = Resource) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,QtyToPost / 3,LibraryJob.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemNegativeLinkNegative@143();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = Item) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,QtyToPost / 3,LibraryJob.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountNegativeLinkNegative@142();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = G/L Account) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,QtyToPost / 3,LibraryJob.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourcePositiveLinkNegative@141();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = Resource) with usage link (positive Quantity), set link to plan explicitly.

      QtyToPost := RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemPositiveLinkNegative@140();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = Item) with usage link (positive Quantity), set link to plan explicitly.

      QtyToPost := RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountPositiveLinkNegative@139();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (negative Quantity) for Job Planning Line (Type = G/L Account) with usage link (positive Quantity), set link to plan explicitly.

      QtyToPost := RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResourceNegativeLinkPositive@138();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (positive Quantity) for Job Planning Line (Type = Resource) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ItemNegativeLinkPositive@137();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (positive Quantity) for Job Planning Line (Type = Item) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLAccountNegativeLinkPositive@136();
    VAR
      QtyToPost@1000 : Decimal;
    BEGIN
      // [SCENARIO] Verify that Quantities and Amounts are correct when executing plan (positive Quantity) for Job Planning Line (Type = G/L Account) with usage link (negative Quantity), set link to plan explicitly.

      QtyToPost := -RANDOM(100);
      LinkQuantities(QtyToPost,-QtyToPost / 3,LibraryJob.GLAccountType)
    END;

    LOCAL PROCEDURE LinkQuantities@135(QtyToPost@1000 : Decimal;QtyToMatch@1001 : Decimal;ConsumableType@1009 : Option);
    VAR
      Job@1002 : Record 167;
      JobTask@1003 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      BeforeJobPlanningLine@1005 : Record 1003;
      JobJournalLine@1006 : Record 210;
      JobLedgerEntry@1007 : Record 169;
      LineCount@1008 : Integer;
    BEGIN
      Assert.AreNotEqual(0,QtyToPost,'Quantitiy to post should not be zero.');
      Assert.AreNotEqual(0,QtyToMatch,'Quantitiy to post should not be zero.');

      // Users may use up to five decimal places
      QtyToPost := ROUND(QtyToPost,0.00001);
      QtyToMatch := ROUND(QtyToMatch,0.00001);

      // Setup
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,ConsumableType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,QtyToMatch);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);

      AssertNoDiscounts(JobPlanningLine);
      BeforeJobPlanningLine := JobPlanningLine;

      // to make it more difficult
      CreateSimilarJobPlanningLines(JobPlanningLine);
      LineCount := JobPlanningLine.COUNT;

      // Exercise
      IF (QtyToPost < 0) AND (ConsumableType = LibraryJob.ItemType) THEN BEGIN
        // Before crediting, use item first
        JobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
        JobPlanningLine.VALIDATE(Quantity,ABS(QtyToPost));
        JobPlanningLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
        JobPlanningLine.INSERT(TRUE);
        LineCount += 1;
        LibraryJob.UseJobPlanningLineExplicit(
          JobPlanningLine,LibraryJob.UsageLineTypeBlank,1,LibraryJob.JobConsumption,JobJournalLine);
        JobPlanningLine := BeforeJobPlanningLine
      END;

      LibraryJob.UseJobPlanningLineExplicit(
        JobPlanningLine,LibraryJob.UsageLineTypeBlank,QtyToPost / QtyToMatch,LibraryJob.JobConsumption,JobJournalLine);

      // refresh
      JobPlanningLine.GET(Job."No.",JobTask."Job Task No.",JobPlanningLine."Line No.");

      // Verify
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      Assert.AreEqual(LineCount,JobPlanningLine.COUNT,'No planning lines should have been created.');

      VerifyJobPlanningLine(BeforeJobPlanningLine,JobPlanningLine,JobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseMoreSpecificItemLocation@123();
    BEGIN
      Initialize;
      Assert.AreEqual(0,UseItemVariations('A','','A',GetLocationA),'No planning lines should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseMoreSpecificItemVariant@130();
    BEGIN
      Initialize;
      Assert.AreEqual(0,UseItemVariations('',GetLocationA,'A',GetLocationA),'No planning lines should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseLessSpecificItemLocation@146();
    BEGIN
      Initialize;
      Assert.AreEqual(1,UseItemVariations('A',GetLocationA,'A',''),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseLessSpecificItemVariant@145();
    BEGIN
      Initialize;
      Assert.AreEqual(1,UseItemVariations('A',GetLocationA,'',GetLocationA),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseDifferentItemLocation@162();
    BEGIN
      Initialize;
      Assert.AreEqual(1,UseItemVariations('A',GetLocationA,'A',GetLocationB),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseDifferentItemVariant@161();
    BEGIN
      Initialize;
      Assert.AreEqual(1,UseItemVariations('A',GetLocationA,'B',GetLocationA),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseSameItemLocation@166();
    BEGIN
      Initialize;
      Assert.AreEqual(0,UseItemVariations('',GetLocationA,'',GetLocationA),'No planning lines should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseSameItemVariant@165();
    BEGIN
      Initialize;
      Assert.AreEqual(0,UseItemVariations('A','','A',''),'No planning lines should have been created.')
    END;

    LOCAL PROCEDURE UseItemVariations@116(VariantCodePlan@1000 : Code[10];LocationCodePlan@1001 : Code[10];VariantCodeUse@1002 : Code[10];LocationCodeUse@1003 : Code[10]) : Integer;
    VAR
      Job@1004 : Record 167;
      JobTask@1005 : Record 1001;
      JobPlanningLine@1006 : Record 1003;
      JobJournalLine@1007 : Record 210;
      JobLedgerEntry@1009 : Record 169;
      LineCount@1008 : Integer;
    BEGIN
      // Use an item with variant and location codes for a planning line with variant and location codes
      // Verify that a line is matched or a new line is created.

      // Setup
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Variant Code",CreateItemVariant(JobPlanningLine."No.",VariantCodePlan));
      JobPlanningLine.VALIDATE("Location Code",LocationCodePlan);
      JobPlanningLine.MODIFY(TRUE);

      LineCount := JobPlanningLine.COUNT;

      // Exercise
      LibraryJob.CreateJobJournalLineForPlan(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,1,JobJournalLine);
      JobJournalLine.VALIDATE("Variant Code",CreateItemVariant(JobJournalLine."No.",VariantCodeUse));
      JobJournalLine.VALIDATE("Location Code",LocationCodeUse);
      JobJournalLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);

      // get the original or the newly created line (if one was created)
      JobPlanningLine.FINDLAST;

      // verify
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      EXIT(JobPlanningLine.COUNT - LineCount)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseMoreSpecificResource@126();
    BEGIN
      Assert.AreEqual(0,UseResourceVariations('','A'),'No planning lines should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseLessSpecificResource@149();
    BEGIN
      Assert.AreEqual(1,UseResourceVariations('A',''),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseDifferentResourceWorkType@150();
    BEGIN
      Assert.AreEqual(1,UseResourceVariations('A','B'),'One planning line should have been created.')
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE UseSameResourceWorkType@151();
    BEGIN
      Assert.AreEqual(0,UseResourceVariations('A','A'),'No planning lines should have been created.')
    END;

    LOCAL PROCEDURE UseResourceVariations@170(WorkTypeCodePlan@1000 : Code[10];WorkTypeCodeUse@1001 : Code[10]) : Integer;
    VAR
      Job@1004 : Record 167;
      JobTask@1005 : Record 1001;
      JobPlanningLine@1006 : Record 1003;
      JobJournalLine@1007 : Record 210;
      JobLedgerEntry@1009 : Record 169;
      LineCount@1008 : Integer;
    BEGIN
      // Use a resource work type code for a planning line with work type code
      // Verify that a usage link is created
      // Return the number of planning lines created

      // Setup
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // this is the planning line we want to match
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Work Type Code",CreateWorkType(WorkTypeCodePlan));
      JobPlanningLine.MODIFY(TRUE);

      LineCount := JobPlanningLine.COUNT;

      // Exercise
      LibraryJob.CreateJobJournalLineForPlan(JobPlanningLine,LibraryJob.UsageLineTypeSchedule,1,JobJournalLine);
      JobJournalLine.VALIDATE("Work Type Code",CreateWorkType(WorkTypeCodeUse));
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);

      // get the original or the newly created line (if one was created)
      JobPlanningLine.FINDLAST;

      // verify
      JobLedgerEntry.SETRANGE(Description,JobJournalLine.Description);
      JobLedgerEntry.FINDFIRST;
      VerifyUsageLink(JobPlanningLine,JobLedgerEntry);

      EXIT(JobPlanningLine.COUNT - LineCount)
    END;

    [Test]
    PROCEDURE ResourcePriceWhenWorkTypeCodeMatched@113();
    VAR
      JobTask@1005 : Record 1001;
      Resource@1002 : Record 156;
      JobResourcePrice@1000 : Record 1012;
      WorkTypeCode@1010 : Code[10];
      UnitPrice@1012 : Decimal;
    BEGIN
      // Test Unit Price is suggested correctly according to JobResourcePrice setup when WorkTypeCode matched. Cover scenario 359275.
      // Setup: Create a Job, Job Task and Resource with UOM.
      ResourcePriceSuggestedSetup(JobTask,Resource,WorkTypeCode);

      // Create 2 Job Resource Price Lines.
      UnitPrice := LibraryRandom.RandDec(100,2);
      CreateJobResourcePriceWithUnitPrice(JobTask,JobResourcePrice.Type::All,'','',LibraryRandom.RandDec(100,2)); // WorkTypeCode is blank
      CreateJobResourcePriceWithUnitPrice(JobTask,JobResourcePrice.Type::All,'',WorkTypeCode,UnitPrice);

      // Exercise: Create a Job Planning & Journal Line
      // Verify: Unit Price is suggested correctly according to JobResourcePrice setup when WorkTypeCode matched.
      Assert.AreEqual(
        UnitPrice,CreateJobPlanningLineWithWorkTypeCode(JobTask,Resource."No.",WorkTypeCode),UnitPriceErr);
      Assert.AreEqual(
        UnitPrice,CreateJobJournalLineWithWorkTypeCode(JobTask,Resource."No.",WorkTypeCode),UnitPriceErr);
    END;

    [Test]
    PROCEDURE ResourcePriceWhenResoureNoMatchedButWorkTypeCodeNotMatched@171();
    VAR
      JobTask@1005 : Record 1001;
      Resource@1002 : Record 156;
      Resource2@1003 : Record 156;
      JobResourcePrice@1001 : Record 1012;
      WorkTypeCode@1010 : Code[10];
      WorkTypeCode2@1004 : Code[10];
      UnitPrice@1000 : Decimal;
    BEGIN
      // Unit Price is suggested correctly according to JobResourcePrice setup when ResoureNo matched but WorkTypeCode not matched.
      // Setup: Create a Job, Job Task and Resource
      ResourcePriceSuggestedSetup(JobTask,Resource,WorkTypeCode);
      CreateResourceWithWorkTypeCodeAndUOM(Resource2,WorkTypeCode2);

      // Create 1 Job Resource Price Lines
      UnitPrice := LibraryRandom.RandDec(100,2);
      CreateJobResourcePriceWithUnitPrice(JobTask,JobResourcePrice.Type::All,'','',UnitPrice);
      CreateJobResourcePriceWithUnitPrice(
        JobTask,JobResourcePrice.Type::"Group(Resource)",CreateResourceGroup(Resource),
        WorkTypeCode,LibraryRandom.RandDec(100,2));
      CreateJobResourcePriceWithUnitPrice(
        JobTask,JobResourcePrice.Type::"Group(Resource)",CreateResourceGroup(Resource2),
        WorkTypeCode2,LibraryRandom.RandDec(100,2));

      // Exercise: Create a Job Planning & Journal Line
      // Verify: Unit Price is suggested correctly according to JobResourcePrice setup when ResoureNo matched but WorkTypeCode not matched.
      Assert.AreEqual(
        UnitPrice,CreateJobPlanningLineWithWorkTypeCode(JobTask,Resource2."No.",WorkTypeCode),UnitPriceErr);
      Assert.AreEqual(
        UnitPrice,CreateJobJournalLineWithWorkTypeCode(JobTask,Resource2."No.",WorkTypeCode),UnitPriceErr);
    END;

    [Test]
    PROCEDURE ResourcePriceWhenResourceWithGroupNoAndWorkTypeCode@133();
    VAR
      JobTask@1005 : Record 1001;
      Resource@1002 : Record 156;
      JobResourcePrice@1000 : Record 1012;
      WorkTypeCode@1010 : Code[10];
      UnitPrice@1001 : Decimal;
    BEGIN
      // Test Unit Price is suggested correctly according to JobResourcePrice setup when Resource with Group No. and Work Type Code. Cover scenario PS42257 (TFS211740)
      // Setup: Create a Job, Job Task and Resource
      ResourcePriceSuggestedSetup(JobTask,Resource,WorkTypeCode);
      CreateResourceGroup(Resource);

      // Create 1 Job Resource Price Lines.
      UnitPrice := LibraryRandom.RandDec(100,2);
      CreateJobResourcePriceWithUnitPrice(JobTask,JobResourcePrice.Type::All,'','',UnitPrice);

      // Exercise: Create a Job Planning & Journal Line
      // Verify: Unit Price is suggested correctly according to JobResourcePrice setup when Resource with Group No. and Work Type Code.
      Assert.AreEqual(
        UnitPrice,CreateJobPlanningLineWithWorkTypeCode(JobTask,Resource."No.",WorkTypeCode),UnitPriceErr);
      Assert.AreEqual(
        UnitPrice,CreateJobJournalLineWithWorkTypeCode(JobTask,Resource."No.",WorkTypeCode),UnitPriceErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmSpecificMessageHandler,MessageHandler)]
    PROCEDURE ConfirmUsagePostingWithBlankLineAndApplyUsageEnabled@70();
    VAR
      JobTask@1000 : Record 1001;
      JobJournalLine@1001 : Record 210;
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      // [SCENARIO 380473] Confirmation is raised when post usage with blank "Line Type" and "Apply Usage Link"

      Initialize;

      // [GIVEN] Job with "Apply Usage Link"
      CreateJobWithTaskAndApplyUsageLink(JobTask);

      // [GIVEN] Job Journal Line for Usage with blank "Line Type"
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBlank,LibraryJob.ItemType,JobTask,JobJournalLine);
      SetSourceForConfirmSpecificMessageHandler(TRUE);

      // [WHEN] Post Job Journal Line and confirm message "The Line Type of Job Journal Line was not defined. Do you want to continue?"
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Job Ledger Entry for Usage is posted
      JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
      JobLedgerEntry.SETRANGE("Job No.",JobTask."Job No.");
      Assert.RecordIsNotEmpty(JobLedgerEntry);
    END;

    [Test]
    [HandlerFunctions(ConfirmSpecificMessageHandler)]
    PROCEDURE CancelConfirmationUsagePostingWithBlankLineAndApplyUsageEnabled@174();
    VAR
      JobTask@1002 : Record 1001;
      JobJournalLine@1001 : Record 210;
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      // [SCENARIO 380473] No entries are posted if cancel confirmation when post usage with blank "Line Type" and "Apply Usage Link"

      Initialize;

      // [GIVEN] Job with "Apply Usage Link"
      CreateJobWithTaskAndApplyUsageLink(JobTask);

      // [GIVEN] Job Journal Line for Usage with blank "Line Type"
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBlank,LibraryJob.ItemType,JobTask,JobJournalLine);
      SetSourceForConfirmSpecificMessageHandler(FALSE);

      // [WHEN] Post Job Journal Line and cancel confirmation message "The Line Type of Job Journal Line was not defined. Do you want to continue?"
      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Job Ledger Entry for Usage is not posted
      JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
      JobLedgerEntry.SETRANGE("Job No.",JobTask."Job No.");
      Assert.RecordIsEmpty(JobLedgerEntry);
    END;

    [Test]
    PROCEDURE JobUsageLinkTableRelationRenameJob_UT@221();
    VAR
      Job1@1000 : Record 167;
      Job2@1005 : Record 167;
      JobTask1@1001 : Record 1001;
      JobTask2@1004 : Record 1001;
      JobPlanningLine1@1002 : Record 1003;
      JobPlanningLine2@1006 : Record 1003;
      JobUsageLink@1003 : Record 1020;
      JobTaskNo@1007 : Code[20];
      JobPlanningLineNo@1008 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 380845] Renaming of "Job" or "Job Task" causes proper update in "Job Usage Link" table
      JobTaskNo := LibraryUtility.GenerateGUID;
      JobPlanningLineNo := 10000;
      MockJobPlanningLine(Job1,JobTask1,JobPlanningLine1,JobTaskNo,JobPlanningLineNo);
      MockJobUsageLink(JobUsageLink,Job1."No.",JobTask1."Job Task No.",JobPlanningLine1."Line No.");

      MockJobPlanningLine(Job2,JobTask2,JobPlanningLine2,JobTaskNo,JobPlanningLineNo);
      MockJobUsageLink(JobUsageLink,Job2."No.",JobTask2."Job Task No.",JobPlanningLine2."Line No.");

      Job2.RENAME(LibraryUtility.GenerateGUID);

      JobUsageLink.SETRANGE("Job No.",Job1."No.");
      Assert.AreEqual(1,JobUsageLink.COUNT,'Wrong number of Job Usage Links');
      JobUsageLink.SETRANGE("Job No.",Job2."No.");
      Assert.AreEqual(1,JobUsageLink.COUNT,'Wrong number of Job Usage Links');
    END;

    [Test]
    PROCEDURE JobUsageLinkTableRelationRenameJobTask_UT@270();
    VAR
      Job1@1000 : Record 167;
      Job2@1005 : Record 167;
      JobTask1@1001 : Record 1001;
      JobTask2@1004 : Record 1001;
      JobPlanningLine1@1002 : Record 1003;
      JobPlanningLine2@1006 : Record 1003;
      JobUsageLink@1003 : Record 1020;
      JobTaskNo@1007 : Code[20];
      JobPlanningLineNo@1008 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 380845] Renaming of "Job Task" causes proper update in "Job Usage Link" table
      JobTaskNo := LibraryUtility.GenerateGUID;
      JobPlanningLineNo := 10000;
      MockJobPlanningLine(Job1,JobTask1,JobPlanningLine1,JobTaskNo,JobPlanningLineNo);
      MockJobUsageLink(JobUsageLink,Job1."No.",JobTask1."Job Task No.",JobPlanningLine1."Line No.");

      MockJobPlanningLine(Job2,JobTask2,JobPlanningLine2,JobTaskNo,JobPlanningLineNo);
      MockJobUsageLink(JobUsageLink,Job2."No.",JobTask2."Job Task No.",JobPlanningLine2."Line No.");

      JobTask2.RENAME(Job2."No.",LibraryUtility.GenerateGUID);

      JobUsageLink.SETRANGE("Job Task No.",JobTask1."Job Task No.");
      Assert.AreEqual(1,JobUsageLink.COUNT,'Wrong number of Job Usage Links');
      JobUsageLink.SETRANGE("Job Task No.",JobTask2."Job Task No.");
      Assert.AreEqual(1,JobUsageLink.COUNT,'Wrong number of Job Usage Links');
    END;

    [Test]
    PROCEDURE JobUsageLinkTableRelationRenameJobPlanningLine_UT@274();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1006 : Record 1003;
      JobTaskNo@1007 : Code[20];
      JobPlanningLineNo@1008 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 380845] User can't change job planning line
      JobTaskNo := LibraryUtility.GenerateGUID;
      JobPlanningLineNo := 10000;
      MockJobPlanningLine(Job,JobTask,JobPlanningLine,JobTaskNo,JobPlanningLineNo);

      ASSERTERROR JobPlanningLine.RENAME(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No." + 1);

      Assert.ExpectedError(
        STRSUBSTNO(
          JobPlanningLineRenameErr,
          JobPlanningLine.FIELDCAPTION("Job No."),
          JobPlanningLine.FIELDCAPTION("Job Task No."),
          JobPlanningLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE Initialize@17();
    VAR
      PurchasePrice@1002 : Record 7012;
      SalesPrice@1003 : Record 7002;
      SalesLineDiscount@1005 : Record 7004;
      LibrarySales@1004 : Codeunit 130509;
      LibraryERMCountryData@1009 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF Initialized THEN
        EXIT;

      // Removing special prices, discounts
      PurchasePrice.DELETEALL(TRUE);
      SalesPrice.DELETEALL(TRUE);
      SalesLineDiscount.DELETEALL(TRUE);

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySales.SetCreditWarningsToNoWarnings;
      UpdateCustNoSeries; // required for FI

      Initialized := TRUE;

      COMMIT;
    END;

    LOCAL PROCEDURE CreateJobResourcePriceWithUnitPrice@153(JobTask@1002 : Record 1001;JobResourcePriceType@1001 : Option;Code@1005 : Code[20];WorkTypeCode@1003 : Code[10];UnitPrice@1004 : Decimal);
    VAR
      JobResourcePrice@1000 : Record 1012;
    BEGIN
      LibraryJob.CreateJobResourcePrice(
        JobResourcePrice,JobTask."Job No.",JobTask."Job Task No.",JobResourcePriceType,Code,WorkTypeCode,'');
      JobResourcePrice.VALIDATE("Unit Price",UnitPrice);
      JobResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithWorkTypeCode@167(JobTask@1001 : Record 1001;ResourceNo@1003 : Code[20];WorkTypeCode@1000 : Code[10]) : Decimal;
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      WITH JobPlanningLine DO BEGIN
        VALIDATE("No.",ResourceNo);
        VALIDATE("Work Type Code",WorkTypeCode);
        MODIFY(TRUE);
        EXIT("Unit Price");
      END
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithWorkTypeCode@168(JobTask@1001 : Record 1001;ResourceNo@1002 : Code[20];WorkTypeCode@1004 : Code[10]) : Decimal;
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeContract,LibraryJob.ResourceType,JobTask,JobJournalLine);
      WITH JobJournalLine DO BEGIN
        VALIDATE("No.",ResourceNo);
        VALIDATE("Work Type Code",WorkTypeCode);
        MODIFY(TRUE);
        EXIT("Unit Price");
      END
    END;

    LOCAL PROCEDURE CreateJob@18(ApplyUsageLink@1002 : Boolean;BothAllowed@1000 : Boolean;VAR Job@1001 : Record 167);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",ApplyUsageLink);
      Job.VALIDATE("Allow Schedule/Contract Lines",BothAllowed);
      Job.MODIFY(TRUE)
    END;

    LOCAL PROCEDURE CreateJobWithTaskAndApplyUsageLink@181(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateResourceGroup@173(Resource@1001 : Record 156) : Code[10];
    VAR
      ResourceGroup@1000 : Record 152;
    BEGIN
      LibraryResource.CreateResourceGroup(ResourceGroup);
      Resource.VALIDATE("Resource Group No.",ResourceGroup."No.");
      Resource.MODIFY(TRUE);
      EXIT(ResourceGroup."No.");
    END;

    LOCAL PROCEDURE CreateResourceWithWorkTypeCodeAndUOM@164(VAR Resource@1000 : Record 156;VAR WorkTypeCode@1001 : Code[10]);
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
      WorkTypeCode := FORMAT(LibraryRandom.RandIntInRange(1000000,9999999));
      CreateWorkType(WorkTypeCode);
      UpdateWorkTypeForUnitOfMeasureCode(WorkTypeCode,Resource."Base Unit of Measure");
    END;

    LOCAL PROCEDURE CreateSimilarJobPlanningLines@20(JobPlanningLine@1000 : Record 1003);
    VAR
      NewJobPlanningLine@1001 : Record 1003;
      Job@1002 : Record 167;
      DateForm@1003 : DateFormula;
    BEGIN
      // Create planning lines similar to <JobPlanningLine>

      // same, but later
      NewJobPlanningLine := JobPlanningLine;
      EVALUATE(DateForm,'<+1W>');
      NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE(DateForm,JobPlanningLine."Planning Date"));
      NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      NewJobPlanningLine.INSERT(TRUE);

      // earlier, but contract line
      NewJobPlanningLine := JobPlanningLine;
      EVALUATE(DateForm,'<-1W>');
      NewJobPlanningLine.VALIDATE("Line Type",LibraryJob.PlanningLineTypeContract);
      NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE(DateForm,JobPlanningLine."Planning Date"));
      NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      NewJobPlanningLine.INSERT(TRUE);

      // earlier, but usage link disabled
      Job.GET(JobPlanningLine."Job No.");
      IF NOT Job."Apply Usage Link" THEN BEGIN
        NewJobPlanningLine := JobPlanningLine;
        NewJobPlanningLine.VALIDATE("Usage Link",FALSE);
        NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE(DateForm,JobPlanningLine."Planning Date"));
        NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
        NewJobPlanningLine.INSERT(TRUE)
      END;

      // earlier, but opposite sign for quantity
      NewJobPlanningLine := JobPlanningLine;
      NewJobPlanningLine.VALIDATE(Quantity,-JobPlanningLine.Quantity);
      NewJobPlanningLine.VALIDATE("Planning Date",CALCDATE('<-1W>',JobPlanningLine."Planning Date"));
      NewJobPlanningLine.VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
      NewJobPlanningLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLinePerType@2(JobTask@1000 : Record 1001;VAR JobPlanningLine@1001 : Record 1003);
    BEGIN
      // Create planning line for all line types

      WITH JobPlanningLine DO BEGIN
        LibraryJob.CreateJobPlanningLine("Line Type"::Schedule,Type::Resource,JobTask,JobPlanningLine);
        LibraryJob.CreateJobPlanningLine("Line Type"::"Both Schedule and Contract",Type::Resource,JobTask,JobPlanningLine);
        LibraryJob.CreateJobPlanningLine("Line Type"::Contract,Type::Resource,JobTask,JobPlanningLine)
      END;

      JobPlanningLine.SETRANGE("Job No.",JobTask."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.FINDSET
    END;

    LOCAL PROCEDURE CreateItemVariant@148(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10]) : Code[10];
    VAR
      ItemVariant@1002 : Record 5401;
    BEGIN
      IF (VariantCode = '') OR ItemVariant.GET(ItemNo,VariantCode) THEN
        EXIT(VariantCode);

      ItemVariant.INIT;
      ItemVariant.VALIDATE("Item No.",ItemNo);
      ItemVariant.VALIDATE(Code,VariantCode);
      ItemVariant.INSERT(TRUE);
      EXIT(VariantCode)
    END;

    LOCAL PROCEDURE CreateWorkType@172(WorkTypeCode@1000 : Code[10]) : Code[10];
    VAR
      WorkType@1001 : Record 200;
    BEGIN
      IF WorkType.GET(WorkTypeCode) THEN
        EXIT(WorkTypeCode);

      WorkType.INIT;
      WorkType.VALIDATE(Code,WorkTypeCode);
      WorkType.INSERT(TRUE);
      EXIT(WorkTypeCode)
    END;

    LOCAL PROCEDURE MockJobPlanningLine@281(VAR Job@1000 : Record 167;VAR JobTask@1001 : Record 1001;VAR JobPlanningLine@1002 : Record 1003;JobTaskNo@1003 : Code[20];JobPlanningLineNo@1004 : Integer);
    BEGIN
      Job.INIT;
      Job."No." := LibraryUtility.GenerateGUID;
      Job.INSERT;

      JobTask.INIT;
      JobTask."Job No." := Job."No.";
      JobTask."Job Task No." := JobTaskNo;
      JobTask.INSERT;

      JobPlanningLine.INIT;
      JobPlanningLine."Job No." := JobTask."Job No.";
      JobPlanningLine."Job Task No." := JobTask."Job Task No.";
      JobPlanningLine."Line No." := JobPlanningLineNo;
      JobPlanningLine.INSERT;
    END;

    LOCAL PROCEDURE MockJobUsageLink@275(VAR JobUsageLink@1000 : Record 1020;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];LineNo@1003 : Integer);
    BEGIN
      JobUsageLink.INIT;
      JobUsageLink."Job No." := JobNo;
      JobUsageLink."Job Task No." := JobTaskNo;
      JobUsageLink."Line No." := LineNo;
      JobUsageLink."Entry No." := LibraryRandom.RandInt(10);
      JobUsageLink.INSERT;
    END;

    LOCAL PROCEDURE ResourcePriceSuggestedSetup@169(VAR JobTask@1011 : Record 1001;VAR Resource@1005 : Record 156;VAR WorkTypeCode@1012 : Code[10]);
    VAR
      Job@1000 : Record 167;
    BEGIN
      Initialize;
      CreateJob(TRUE,TRUE,Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateResourceWithWorkTypeCodeAndUOM(Resource,WorkTypeCode);
    END;

    LOCAL PROCEDURE UpdateWorkTypeForUnitOfMeasureCode@147(WorkTypeCode@1000 : Code[10];BaseUnitOfMeasure@1001 : Code[10]);
    VAR
      WorkType@1002 : Record 200;
    BEGIN
      WorkType.GET(WorkTypeCode);
      WorkType.VALIDATE("Unit of Measure Code",BaseUnitOfMeasure);
      WorkType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyUsageLink@9(JobPlanningLine@1000 : Record 1003;JobLedgerEntry@1001 : Record 169);
    VAR
      JobUsageLink@1002 : Record 1020;
    BEGIN
      Assert.IsTrue(
        JobUsageLink.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.",
          JobLedgerEntry."Entry No."),'Usage link should have been created');

      JobPlanningLine.TESTFIELD("Usage Link",TRUE)
    END;

    LOCAL PROCEDURE VerifyJobPlanningLine@10(BeforeJobPlanningLine@1000 : Record 1003;AfterJobPlanningLine@1002 : Record 1003;JobJournalLine@1001 : Record 210);
    VAR
      Precision@1006 : Decimal;
      Sign@1003 : Integer;
    BEGIN
      Assert.AreNotEqual(0,BeforeJobPlanningLine.Quantity,'No planned quantity.');

      // Get the sign of the planned quantity
      Sign := BeforeJobPlanningLine.Quantity / ABS(BeforeJobPlanningLine.Quantity);

      WITH AfterJobPlanningLine DO BEGIN
        TESTFIELD(
          Quantity,
          Sign * Max(Sign * BeforeJobPlanningLine.Quantity,Sign * (JobJournalLine.Quantity + BeforeJobPlanningLine."Qty. Posted")));
        TESTFIELD("Qty. Posted",BeforeJobPlanningLine."Qty. Posted" + JobJournalLine.Quantity);
        TESTFIELD("Qty. to Transfer to Journal",Quantity - (JobJournalLine.Quantity + BeforeJobPlanningLine."Qty. Posted"));
        TESTFIELD("Remaining Qty.",Quantity - "Qty. Posted");

        TESTFIELD("Posted Total Cost",BeforeJobPlanningLine."Posted Total Cost" + ROUND(JobJournalLine."Total Cost"));
        TESTFIELD(
          "Posted Total Cost (LCY)",BeforeJobPlanningLine."Posted Total Cost (LCY)" + ROUND(JobJournalLine."Total Cost (LCY)"));
        Assert.AreNearlyEqual(
          BeforeJobPlanningLine."Posted Line Amount" + JobJournalLine."Line Amount","Posted Line Amount",0.01,
          'Posted line Amoung on After Line Matches');

        Precision := LibraryJob.GetAmountRoundingPrecision("Currency Code");
        TESTFIELD("Remaining Total Cost",ROUND("Remaining Qty." * "Unit Cost",Precision));
        TESTFIELD("Remaining Total Cost (LCY)",ROUND("Remaining Qty." * "Unit Cost",Precision));
        TESTFIELD("Remaining Line Amount",ROUND("Remaining Qty." * "Unit Price"));
        TESTFIELD("Remaining Line Amount (LCY)",ROUND("Remaining Qty." * "Unit Price (LCY)"))
      END
    END;

    LOCAL PROCEDURE VerifyJobPlanningLineDone@112(JobPlanningLine@1000 : Record 1003);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        TESTFIELD("Remaining Qty.",0);
        TESTFIELD("Remaining Total Cost",0);
        TESTFIELD("Remaining Line Amount",0);
        TESTFIELD("Qty. Posted",Quantity)
      END
    END;

    LOCAL PROCEDURE AssertNoDiscounts@25(JobPlanningLine@1000 : Record 1003);
    VAR
      Precision@1001 : Decimal;
    BEGIN
      Precision := LibraryJob.GetAmountRoundingPrecision(JobPlanningLine."Currency Code");
      WITH JobPlanningLine DO BEGIN
        TESTFIELD("Total Cost",ROUND(Quantity * "Unit Cost",Precision));
        TESTFIELD("Total Price",ROUND(Quantity * "Unit Price",Precision));
        TESTFIELD("Line Discount %",0);
        TESTFIELD("Line Discount Amount",0);
        TESTFIELD("Line Amount","Total Price");
        TESTFIELD("Remaining Qty.",Quantity);
        TESTFIELD("Remaining Total Cost","Total Cost");
        TESTFIELD("Remaining Line Amount","Line Amount")
      END
    END;

    LOCAL PROCEDURE UseFromPlan@110(VAR JobJournalLine@1000 : Record 210;VAR JobPlanningLine@1001 : Record 1003);
    VAR
      RemainingUsage@1003 : Decimal;
    BEGIN
      Assert.AreEqual(JobJournalLine.Type,JobPlanningLine.Type,'Incompatible types.');
      RemainingUsage := JobJournalLine.Quantity - JobPlanningLine."Remaining Qty.";

      // idem
      IF (RemainingUsage > 0) <> (JobPlanningLine."Remaining Qty." > 0) THEN
        RemainingUsage := 0;
      JobJournalLine.VALIDATE(Quantity,RemainingUsage)
    END;

    LOCAL PROCEDURE Max@46(x@1000 : Decimal;y@1001 : Decimal) : Decimal;
    BEGIN
      IF x > y THEN
        EXIT(x);
      EXIT(y)
    END;

    LOCAL PROCEDURE SetSourceForConfirmSpecificMessageHandler@176(ConfirmPostingOfBlankLineType@1000 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(PostJournalLineQst);
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(ConfirmUsageWithBlankLineTypeQst);
      LibraryVariableStorage.Enqueue(ConfirmPostingOfBlankLineType);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmSpecificMessageHandler@190(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Assert.ExpectedMessage(LibraryVariableStorage.DequeueText,Question);
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE GetLocationA@131() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF LibraryVariableStorage.Length < 1 THEN BEGIN
        LibraryJob.FindLocation(Location);
        LibraryInventory.UpdateInventoryPostingSetup(Location);
        LibraryVariableStorage.Enqueue(Location.Code);
        EXIT(Location.Code);
      END;
      EXIT(LibraryVariableStorage.PeekText(1));
    END;

    LOCAL PROCEDURE GetLocationB@132() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF LibraryVariableStorage.Length < 2 THEN BEGIN
        Location.SETFILTER(Code,'<>%1',GetLocationA);
        LibraryJob.FindLocation(Location);
        LibraryInventory.UpdateInventoryPostingSetup(Location);
        LibraryVariableStorage.Enqueue(Location.Code);
        EXIT(Location.Code);
      END;
      EXIT(LibraryVariableStorage.PeekText(2));
    END;

    LOCAL PROCEDURE UpdateCustNoSeries@198();
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Customer Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Usage Link] [Job]
      Test Cases for SCM Warehouse.
        1 ~ 136. Test basic functions for Job Comsumption.
        137. Test Unit Price is suggested correctly according to JobResourcePrice setup when WorkTypeCode matched. Cover scenario 359275.
        138. Test Unit Price is suggested correctly according to JobResourcePrice setup when ResoureNo matched but WorkTypeCode not matched.
        139. Test Unit Price is suggested correctly according to JobResourcePrice setup when Resource with Group No. and Work Type Code. Cover scenario PS42257 (TFS211740)

        Covers Test Cases for WI
        ---------------------------------------------------------------------------
        Test Function Name                                                   TFS ID
        ---------------------------------------------------------------------------
        JobUsageLinking
        JobNoUsageLinking
        LinkScheduledItem
        LinkScheduledItemDefault
        LinkBothItem
        LinkBothItemDefault
        LinkScheduledResource
        LinkScheduledResourceDefault
        LinkBothResource
        LinkBothResourceDefault
        LinkScheduledGL
        LinkScheduledGLDefault
        LinkBothGL
        LinkBothGLDefault
        DeleteUsedPlanningLine
        LinkScheduledServiceItem
        LinkBothServiceItem
        LinkScheduledServiceResource
        LinkBothServiceResource
        LinkScheduledGenJournal
        LinkBothGenJournal
        LinkScheduledPurchaseItem
        LinkBothPurchaseItem
        LinkScheduledPurchaseGL
        LinkBothPurchaseGL
        PLinkScheduledItem
        PLinkUseScheduledItemDefault
        PLinkUseBothItem
        PLinkBothItemDefault
        PLinkScheduledResource
        PLinkScheduledResDefault
        PLinkBothResource
        PLinkBothResourceDefault
        PLinkScheduledGL
        PLinkScheduledGLDefault
        PLinkBothGL
        PLinkBothGLDefault
        BlankMatchScheduledItem
        ScheduleMatchScheduledItem
        ContractMatchScheduledItem
        BothMatchScheduledItem
        BlankMatchBothItem
        ScheduleMatchBothItem
        ContractMatchBothItem
        BothMatchBothItem
        BlankMatchScheduledResource
        ScheduleMatchScheduledResource
        ContractMatchScheduledResource
        BothMatchScheduledResource
        BlankMatchBothResource
        ScheduleMatchBothResource
        ContractMatchBothResource
        BothMatchBothResource
        BlankMatchScheduledGL
        ScheduleMatchScheduledGL
        ContractMatchScheduledGL
        BothMatchScheduledGL
        BlankMatchBothGL
        ScheduleMatchBothGL
        ContractMatchBothGL
        BothMatchBothGL
        PBlankMatchScheduledItem
        PScheduleMatchScheduledItem
        PContractMatchScheduledItem
        PBothMatchScheduledItem
        PBlankMatchBothItem
        PScheduleMatchBothItem
        PContractMatchBothItem
        PBothMatchBothItem
        PBlankMatchScheduledResource
        PScheduleMatchScheduledRes
        PContractMatchScheduledRes
        PBothMatchScheduledResource
        PBlankMatchBothResource
        PScheduleMatchBothResource
        PContractMatchBothResource
        PBothMatchBothResource
        PBlankMatchScheduledGL
        PScheduleMatchScheduledGL
        PContractMatchScheduledGL
        PBothMatchScheduledGL
        PBlankMatchBothGL
        PScheduleMatchBothGL
        PContractMatchBothGL
        PBothMatchBothGL
        ExcessScheduledItem
        ExcessScheduledItemDefault
        ExcessBothItem
        ExcessBothItemDefault
        ExcessScheduledResource
        ExcessScheduledResourceDefault
        ExcessBothResource
        ExcessBothResourceDefault
        ExcessScheduledGL
        ExcessScheduledGLDefault
        ExcessBothGL
        ExcessBothGLDefault
        MatchMultipleItemLines
        MatchMultipleItemLinesDefault
        MatchMultipleGLLines
        MatchMultipleGLLinesDefault
        BlankNoMatchItem
        ScheduleNoMatchItem
        ContractNoMatchItem
        BothNoMatchItem
        DeleteSelectedJobPlanningLine
        ResourceNegativeMatchNegative
        ItemNegativeMatchNegative
        GLAccountNegativeMatchNegative
        ResourcePositiveMatchNegative
        ItemPositiveMatchNegative
        GLAccountPositiveMatchNegative
        ResourceNegativeMatchPositive
        ItemNegativeMatchPositive
        GLAccountNegativeMatchPositive
        ResourceNegativeLinkNegative
        ItemNegativeLinkNegative
        GLAccountNegativeLinkNegative
        ResourcePositiveLinkNegative
        ItemPositiveLinkNegative
        GLAccountPositiveLinkNegative
        ResourceNegativeLinkPositive
        ItemNegativeLinkPositive
        GLAccountNegativeLinkPositive
        UseMoreSpecificItemLocation
        UseMoreSpecificItemVariant
        UseLessSpecificItemLocation
        UseLessSpecificItemVariant
        UseDifferentItemLocation
        UseDifferentItemVariant
        UseSameItemLocation
        UseSameItemVariant
        UseMoreSpecificResource
        UseLessSpecificResource
        UseDifferentResourceWorkType
        UseSameResourceWorkType

        Covers Test Cases for WI - 104042
        ---------------------------------------------------------------------------
        Test Function Name                                                   TFS ID
        ---------------------------------------------------------------------------
        ResourcePriceWhenWorkTypeCodeMatched                                 104042
        ResourcePriceWhenResoureNoMatchedButWorkTypeCodeNotMatched           104042
        ResourcePriceWhenResourceWithGroupNoAndWorkTypeCode                  104042
    }
    END.
  }
}

