OBJECT Codeunit 136119 Service Standard Codes
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryService@1002 : Codeunit 131902;
      LibrarySales@1032 : Codeunit 130509;
      LibraryUtility@1001 : Codeunit 131000;
      ServiceItemGroupCode2@1009 : Code[10];
      StandardServiceCode2@1008 : Code[10];
      isInitialized@1000 : Boolean;
      StdServiceCodeMustNotExist@1011 : TextConst 'ENU=%1 must not exist.';
      StdServiceLinesMustNotExist@1007 : TextConst 'ENU=%1%2 must not exist.';
      TypeError@1005 : TextConst 'ENU="%1 must not be %2 in %3 %4=''%5'',%6=''%7''."';
      TypeErrorServiceTier@1004 : TextConst 'ENU="%1 must not be %2 in %3: %4=%5, %6=%7"';
      UnknownError@1006 : TextConst 'ENU=Unknown error.';
      CurrencyNotMatching@1010 : TextConst 'ENU=%1 of the standard service code must be equal to %2 on the %3.';
      QuantityMustbePositive@1012 : TextConst 'ENU="%1 must be positive in %2 %3=''%4'',%5=''%6''."';
      ServiceLineMustNotExist@1013 : TextConst 'ENU=There is no %1 within the filter.Filters: %2: %3, %4: %5';
      ExpectedConfirm@1014 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      LibraryERM@1500000 : Codeunit 131300;

    LOCAL PROCEDURE Initialize@20();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(LibraryService);
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountsInServiceContractAccountGroups;
      LibraryERMCountryData.UpdateAccountInServiceCosts;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryService.SetupServiceMgtNoSeries;
      COMMIT;
      isInitialized := TRUE;
    END;

    [Test]
    PROCEDURE RenameStdCode@2();
    VAR
      StandardServiceCode@1002 : Record 5996;
      StandardServiceLine@1003 : Record 5997;
      NewStandardServiceCode@1000 : Code[10];
      OldStandardServiceCode@1001 : Code[10];
    BEGIN
      // Covers document number TC-SSC-01, TC-PP-SSC-02 - refer to TFS ID 20924.
      // Test that it is possible to create a new Standard Service Code with the Standard Service Lines attached and rename it.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create a new Standard Service Code with Standard Service Lines of all Type. Rename the Standard Service Code.
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      OldStandardServiceCode := StandardServiceCode.Code;
      NewStandardServiceCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(StandardServiceCode.FIELDNO(Code),DATABASE::"Standard Service Code"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Standard Service Code",StandardServiceCode.FIELDNO(Code)));
      StandardServiceCode.RENAME(NewStandardServiceCode);

      // 3. Verify: Standard Service Code and related Standard Service Lines are renamed.
      Assert.IsFalse(StandardServiceCode.GET(OldStandardServiceCode),STRSUBSTNO(StdServiceCodeMustNotExist,OldStandardServiceCode));
      StandardServiceLine.SETRANGE("Standard Service Code",NewStandardServiceCode);
      StandardServiceLine.FINDFIRST;
    END;

    [Test]
    PROCEDURE ChangeQuantityOnStdCode@3();
    BEGIN
      // Covers document number TC-PP-SSC-03 - refer to TFS 20924.
      // Test that it is possible to enter, change the value in the Quantity field for all Standard Service Line types.

      QuantityOnStdCode(RANDOM(10));  // Required field - value is not important to test case.
    END;

    [Test]
    PROCEDURE ClearQuantityOnStdCode@48();
    BEGIN
      // Covers document number TC-PP-SSC-03 - refer to TFS ID 20924.
      // Test that it is possible to clear the value in the Quantity field for all Standard Service Line types.

      QuantityOnStdCode(0);  // To Clear the Quantity on Standard Service Line.
    END;

    [Test]
    PROCEDURE NegativeQuantityOnStdCode@49();
    BEGIN
      // Covers document number TC-PP-SSC-03 - refer to TFS 20924.
      // Test that it is not possible to enter Negative Quantity field for all Standard Service Line types.

      QuantityOnStdCode(-RANDOM(10));  // Required field - value is not important to test case.
    END;

    LOCAL PROCEDURE QuantityOnStdCode@12(Quantity@1002 : Decimal);
    VAR
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // 1. Setup: Create a new Standard Service Code with Standard Service Lines for all type.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // 2. Exercise: Change the Quantity on Standard Service Lines.
      IF Quantity < 0 THEN
        ASSERTERROR UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode.Code,Quantity)
      ELSE
        UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode.Code,Quantity);

      // 3. Verify: Quantity updated on Standard Service Lines.
      IF Quantity < 0 THEN
        Assert.AreEqual(
          STRSUBSTNO(QuantityMustbePositive,StandardServiceLine.FIELDCAPTION(Quantity),StandardServiceLine.TABLECAPTION,
            StandardServiceLine.FIELDCAPTION("Standard Service Code"),StandardServiceCode.Code,
            StandardServiceLine.FIELDCAPTION("Line No."),StandardServiceLine."Line No."),
          ConvertMessage(GETLASTERRORTEXT),
          UnknownError)
      ELSE
        VerifyQuantityOnStdServiceLine(StandardServiceCode.Code,Quantity);
    END;

    [Test]
    PROCEDURE UpdateOnBlankStdCode@42();
    VAR
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-03, TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that application generates an error on enter, change value in the Quantity or Amount field for Standard Service Line
      // with type blank.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create a new Standard Service Code and Standard Service Line with Type blank.
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode.Code);

      // 3. Verify: Error is generated on updating the Quantity or Amount field on Standard Service Line with Type blank.
      COMMIT; // Commit is important to the Test Case.
      VerifyQuantityAmountOnBlank(StandardServiceLine,StandardServiceCode.Code);
    END;

    [Test]
    PROCEDURE ChangeAmountOnStdCodeGL@4();
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is possible to enter, change value in the Amount Excl. VAT field for Standard Service Line with type G/L Account.

      AmountOnStdCodeGL(RANDOM(10));  // Required field - value is not important to test case.
    END;

    [Test]
    PROCEDURE ClearAmountOnStdCodeGL@32();
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is possible to clear value in the Amount Excl. VAT field for Standard Service Line with type G/L Account.

      AmountOnStdCodeGL(0);
    END;

    LOCAL PROCEDURE AmountOnStdCodeGL@9(Amount@1000 : Decimal);
    VAR
      StandardServiceCode@1002 : Record 5996;
      StandardServiceLine@1001 : Record 5997;
    BEGIN
      // 1. Setup: Create a new Standard Service Code with Standard Service Line of type G/L Account.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // 2. Exercise: Change the value in Amount Excl. VAT field on Standard Service Line.
      StandardServiceLine.VALIDATE("Amount Excl. VAT",Amount);
      StandardServiceLine.MODIFY(TRUE);

      // 3. Verify: Amount Excl. VAT updated on Standard Service Line.
      StandardServiceLine.TESTFIELD("Amount Excl. VAT",Amount);
    END;

    [Test]
    PROCEDURE ChangeAmountOnStdCodeItem@38();
    VAR
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is not possible to enter, change value in the Amount Excl. VAT field for Standard Service Line with type Item.

      ChangeAmountOnStdCode(StandardServiceLine.Type::Item);
    END;

    [Test]
    PROCEDURE ChangeAmountOnStdCodeResource@39();
    VAR
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is not possible to enter, change value in the Amount Excl. VAT field for Standard Service Line with type Resource.

      ChangeAmountOnStdCode(StandardServiceLine.Type::Resource);
    END;

    [Test]
    PROCEDURE ChangeAmountOnStdCodeCost@40();
    VAR
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is not possible to enter, change value in the Amount Excl. VAT field for Standard Service Line with type Cost.

      ChangeAmountOnStdCode(StandardServiceLine.Type::Cost);
    END;

    LOCAL PROCEDURE ChangeAmountOnStdCode@61(Type@1002 : ' ,Item,Resource,Cost');
    VAR
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-04 - refer to TFS ID 20924.
      // Test that it is not possible to enter, change value in the Amount Excl. VAT field for Standard Service Line with type Cost.

      // 1. Setup: Create a new Standard Service Code with Standard Service Line with type.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);

      IF Type = Type::Item THEN
        CreateStdServiceLineItem(StandardServiceCode.Code);
      IF Type = Type::Resource THEN
        CreateStdServiceLineResource(StandardServiceCode.Code);
      IF Type = Type::Cost THEN
        CreateStdServiceLineCost(StandardServiceCode.Code);

      // 2. Exercise: Change value in the Amount Excl. VAT field for Standard Service Line.
      ASSERTERROR StandardServiceLine.VALIDATE("Amount Excl. VAT",RANDOM(10));  // Required field - value is not important to test case.

      // 3. Verify: Error is generated on updating the Amount Excl. VAT field on Standard Service Line.
      Assert.AreEqual(
        STRSUBSTNO(
          TypeError,StandardServiceLine.FIELDCAPTION(Type),StandardServiceLine.Type,
          StandardServiceLine.TABLECAPTION,StandardServiceLine.FIELDCAPTION("Standard Service Code"),
          StandardServiceLine."Standard Service Code",StandardServiceLine.FIELDCAPTION("Line No."),StandardServiceLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),
        UnknownError);
    END;

    [Test]
    PROCEDURE DeleteStdCode@5();
    VAR
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      // Covers document number TC-PP-SSC-05 - refer to TFS ID 20924.
      // Test that deleting a Standard Service Code, the Standard Service Lines attached are deleted as well.

      // 1. Setup: Create a new Standard Service Code with Standard Service Lines for all Types.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // 2. Exercise: Delete the Standard Service Code.
      StandardServiceCode.DELETE(TRUE);

      // 3. Verify: Standard Service Code and Standard service lines are deleted.
      StandardServiceLine.SETRANGE("Standard Service Code",StandardServiceCode.Code);
      Assert.IsFalse(
        StandardServiceLine.FINDFIRST,
        STRSUBSTNO(StdServiceLinesMustNotExist,StandardServiceCode.Code,StandardServiceLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE StdCodeToServiceItemGroup@11();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemGroup@1000 : Record 5904;
      ServiceItemLine@1004 : Record 5901;
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1005 : Record 5997;
      StandardServiceItemGrCode@1002 : Record 5998;
    BEGIN
      // Covers document number TC-SSC-06 - refer to TFS ID 20924.
      // Test that it is possible to assign Standard Service Codes to a Service Item Group.

      // 1. Setup: Create a new Standard Service Code with Standard Service Lines for all Types.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // 2. Exercise: Create a new Service Item Group and assign the Standard Service Code.
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      StandardServiceCode2 := StandardServiceCode.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);

      // 3. Verify: Standard Service Code is assigned to the Service Item Group.
      StandardServiceItemGrCode.GET(ServiceItemGroup.Code,StandardServiceCode.Code);
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE EmptyStdCodeToServiceItemGroup@22();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemGroup@1003 : Record 5904;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1005 : Record 5902;
      StandardServiceCode@1002 : Record 5996;
      StandardServiceItemGrCode@1000 : Record 5998;
    BEGIN
      // Covers document number TC-SSC-06 - refer to TFS ID 20924.
      // Test that it is possible to assign Empty Standard Service Codes to a Service Item Group.

      // 1. Setup: Create a new empty Standard Service Code.
      Initialize;
      LibraryService.CreateStandardServiceCode(StandardServiceCode);

      // 2. Exercise: Create a new Service Item Group and assign the Standard Service Code.
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      LibraryService.CreateStandardServiceItemGr(StandardServiceItemGrCode,ServiceItemGroup.Code,StandardServiceCode.Code);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      StandardServiceCode2 := StandardServiceCode.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);

      // 3. Verify: Standard Service Code is assigned to the Service Item Group.
      StandardServiceItemGrCode.GET(ServiceItemGroup.Code,StandardServiceCode.Code);
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      Assert.IsFalse(
        ServiceLine.FINDFIRST,
        STRSUBSTNO(
          ServiceLineMustNotExist,ServiceLine.TABLECAPTION,ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",
          ServiceLine.FIELDCAPTION("Document No."),ServiceLine."Document No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeWithAssigned@13();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemGroup@1005 : Record 5904;
      ServiceItemLine@1004 : Record 5901;
      StandardServiceCode@1000 : Record 5996;
      StandardServiceLine@1002 : Record 5997;
      StandardServiceItemGrCode@1001 : Record 5998;
      StandardServiceCodeItem@1008 : Code[10];
      StandardServiceCodeResCost@1009 : Code[10];
    BEGIN
      // Covers document number TC-SSC-07 - refer to TFS ID 20924.
      // Test that if the Service Item Group Code field on the Service Item Line contains a Service Item Group Code with the
      // Standard Service Code assigned, then by running the Get Std. Service Codes function it is possible to insert Standard
      // Service Lines attached to any existing Standard Service Code.

      // 1. Setup: Create a new Service Item Group. Create Service Order with Service item line for the Service Item Group Code.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);

      // 2. Exercise: Create Standard Service Code and Run the Get Std. Service Codes function for the Service Item Group Code with
      // Standard Service Code assigned, Run the Get Std. Service Codes function to insert Standard Service Lines attached to
      // any existing Standard Service Code.
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);
      StandardServiceCodeItem := StandardServiceCode.Code;

      GetStdCodeForResourceCost(StandardServiceCode,ServiceItemLine);
      StandardServiceCodeResCost := StandardServiceCode.Code;
      GetStdCodeForGL(StandardServiceCode,ServiceItemLine);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCodeItem);
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCodeResCost);
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeWOAssigned@15();
    VAR
      ServiceItemGroup@1000 : Record 5904;
      StandardServiceCode@1009 : Record 5996;
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      StandardServiceCodeResCost@1001 : Code[10];
    BEGIN
      // Covers document number TC-SSC-08 - refer to TFS ID 20924.
      // Test that if the Service Item Group Code field on the service item line contains a service item group code without the
      // Standard Service Code assigned, then by running the Get Std. Service Codes function it is possible to insert standard
      // service lines attached to any existing Standard Service Code.

      // 1. Setup: Create a new Service Item Group. Create Service Order with Service item line for the Service Item Group Code.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);

      // 2. Exercise: Run the Get Std. Service Codes function with New Standard Service Code.
      // Run the Get Std. Service Codes function without Service Item Group Code and Assign new Standard Service Code.
      GetStdCodeForResourceCost(StandardServiceCode,ServiceItemLine);
      StandardServiceCodeResCost := StandardServiceCode.Code;
      GetStdCodeForGL(StandardServiceCode,ServiceItemLine);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes for which
      // Get Std. Service Codes was run.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCodeResCost);
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeNoServiceItemGroup@17();
    VAR
      StandardServiceCode@1009 : Record 5996;
      ServiceItemGroup@1007 : Record 5904;
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      StandardServiceCodeGL@1001 : Code[10];
    BEGIN
      // Covers document number TC-SSC-09 - refer to TFS ID 20924.
      // Test that if the Service Item Group Code field on the service item line is empty, then by running the Get Std. Service Codes
      // function it is possible to insert standard service lines attached to any existing Standard Service Code.

      // 1. Setup: Create a new Service Order. Create a new Service Item Group.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      // 2. Exercise: Run the Get Std. Service Codes function insert standard service lines attached to the existing
      // Standard Service Code.
      GetStdCodeForGL(StandardServiceCode,ServiceItemLine);
      StandardServiceCodeGL := StandardServiceCode.Code;
      GetStdCodeForResourceCost(StandardServiceCode,ServiceItemLine);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes for which
      // Get Std. Service Codes was run.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCodeGL);
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeWithContractNo@8();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemGroup@1004 : Record 5904;
      ServiceItemLine@1002 : Record 5901;
      StandardServiceCode@1008 : Record 5996;
      StandardServiceLine@1003 : Record 5997;
      StandardServiceItemGrCode@1000 : Record 5998;
    BEGIN
      // Covers document number TC-SSC-10 - refer to TFS ID 20924.
      // Test that if the service item line has the Contract No., the Warranty,  the Fault Reason Code , the Fault Area Code, the Symptom
      // Code, the Fault Code and the Resolution Code field values specified, the Get Std. Service Codes function for this
      // service item line inserts standard service lines attached to any existing Standard Service Code.

      // 1. Setup: Create a new Service Item Group. Create Service Order with Service item line for the Service Item Group Code.
      // Create a new Standard Service Code.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);
      LibraryService.CreateStandardServiceCode(StandardServiceCode);

      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);
      StandardServiceCode2 := StandardServiceCode.Code;

      // 2. Exercise: Update the Service Line with Contract No., Warranty, Fault Reason Code, Fault Area Code, Symptom Code
      // Fault Code and the Resolution Code. Run the Get Std. Service Codes on Service Order with new Standard Service Code.
      UpdateServiceItemLine(ServiceItemLine);
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);

      // 3. Verify: Service Line is update with Standard Service Lines attached to existing Standard Service Codes.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeCurrencyDiffHeader@30();
    VAR
      Currency@1003 : Record 4;
      ServiceHeader@1001 : Record 5900;
      ServiceItemGroup@1005 : Record 5904;
      ServiceItemLine@1002 : Record 5901;
      StandardServiceCode@1007 : Record 5996;
      StandardServiceLine@1004 : Record 5997;
      StandardServiceItemGrCode@1000 : Record 5998;
      LibraryERM@1006 : Codeunit 131300;
    BEGIN
      // Covers document number TC-SSC-11 - refer to TFS ID 20924.
      // Test that if the Currency Code specified on the Service Header and that assigned to the Standard Service Code are different then
      // it is impossible to run the Get Std. Service Codes function.

      // 1. Setup: Create New Service Item Group, Create a new Service Order with Service Item Line for the Service Item Group.
      // Create a new Standard Service Code.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);
      LibraryService.CreateStandardServiceCode(StandardServiceCode);

      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);
      StandardServiceCode2 := StandardServiceCode.Code;

      // 2. Exercise: Update Currency on Service Header.
      LibraryERM.FindCurrency(Currency);
      ServiceHeader.VALIDATE("Currency Code",Currency.Code);
      ServiceHeader.MODIFY(TRUE);

      // 3. Verify: Error generated for Currency difference on Service Header and Standard Service Code on running Get Std. Service Codes.
      ASSERTERROR StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);
      VerifyCurrencyNotMatching(ServiceHeader,StandardServiceCode);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE PostAfterGetStdCode@43();
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceItemGroup@1000 : Record 5904;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Covers document number TC-SSC-13 - refer to TFS ID 20924.
      // Test that it is possible to post the Service Lines which were inserted by the Get Std. Service Codes function on the
      // service order.

      // 1. Setup: Create New Service Item Group, Create a new Service Order with Service Item Line for the Service Item Group.
      // Run Get Std. Service Codes on the Service Order for the new Standard Service Code.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItemLine.MODIFY(TRUE);
      GetStdCodeForItem(ServiceItemLine);

      // 2. Exercise: Update Quantity, Qty. to Ship and post the Service Order as Ship. Update Qty. to Consume and post the Service
      // Order as Ship and Consume. Update Qty. to Invoice and post the Service Order as Invoice.
      UpdatePartialQtyToShip(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");

      UpdateQtyToConsume(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");

      UpdateQtyToInvoice(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Service Shipment Line and Service Invoice Lines are created with the same Type and No as on Service Line.
      VerifyServiceShipment(ServiceHeader."No.");
      VerifyServiceInvoice(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeOnInvoice@14();
    VAR
      ServiceHeader@1007 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-14 - refer to TFS ID 20924.
      // Test that by running the Get Std. Service Codes function on Service Invoice it is possible to insert standard service
      // lines attached to any existing standard service code.

      GetStdCodeOnServiceDocument(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeOnCrMemo@50();
    VAR
      ServiceHeader@1006 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-17 - refer to TFS ID 20924.
      // Test that by running the Get Std. Service Codes function on Service Credit Memo it is possible to insert standard service
      // lines attached to any existing standard service code.

      GetStdCodeOnServiceDocument(ServiceHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GetStdCodeOnServiceDocument@86(DocumentType@1000 : Option);
    VAR
      Customer@1007 : Record 18;
      ServiceHeader@1006 : Record 5900;
      StandardServiceCode@1003 : Record 5996;
      ServiceItemGroup@1002 : Record 5904;
    BEGIN
      // 1. Setup: Create a new Service Document as per Parameter.
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,Customer."No.");

      // 2. Exercise: Create Service Item Group Code, Run the Get Std. Service Codes on Service Document for the
      // Standard Service Code.
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      CreateStdServiceResourceCost(StandardServiceCode);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes for which
      // Get Std. Service Codes was runs.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeCurrencyDiffInvoice@25();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-15 - refer to TFS ID 20924.
      // Test that if the currency code specified on the Service Invoice is different from the one assigned to the Standard Service Code,
      // it is impossible to run the Get Std. Service Codes function.

      GetStdCodeCurrencyDiff(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeCurrencyDiffCrMemo@37();
    VAR
      ServiceHeader@1004 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-18 - refer to TFS ID 20924.
      // Test that if the currency code on the service header is different from that assigned to the standard service code,
      // it is impossible to run the Get Std. Service Codes function.

      GetStdCodeCurrencyDiff(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Normal]
    LOCAL PROCEDURE GetStdCodeCurrencyDiff@75(DocumentType@1007 : Option);
    VAR
      Currency@1006 : Record 4;
      Customer@1005 : Record 18;
      ServiceHeader@1004 : Record 5900;
      ServiceItemGroup@1003 : Record 5904;
      StandardServiceCode@1002 : Record 5996;
      LibraryERM@1000 : Codeunit 131300;
    BEGIN
      // 1. Setup: Create New Service Item Group, Create a new Service Document with Service Item Line as per parameter
      // Create a new Standard Service Code.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,Customer."No.");
      CreateStdServiceResourceCost(StandardServiceCode);
      StandardServiceCode2 := StandardServiceCode.Code;

      // 2. Exercise: Update Currency on Service Header.
      LibraryERM.FindCurrency(Currency);
      ServiceHeader.VALIDATE("Currency Code",Currency.Code);
      ServiceHeader.MODIFY(TRUE);

      // 3. Verify: Error generated for Currency difference on Service Header and Standard Service Code on running Get Std. Service Codes.
      ASSERTERROR StandardServiceCode.InsertServiceLines(ServiceHeader);
      VerifyCurrencyNotMatching(ServiceHeader,StandardServiceCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServContrctTemplateListHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeOnInvoiceForContract@51();
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItemGroup@1004 : Record 5904;
      StandardServiceCode@1001 : Record 5996;
    BEGIN
      // Covers document number TC-SSC-16 - refer to TFS ID 20924.
      // Test that by running the Get Std. Service Codes function on the Contract-related Service Invoice, it is possible to insert
      // Standard Service Lines attached to any existing Standard Service Code.

      // 1. Setup: Create a Service Contract. Sign and Invoice the Service Contract.
      CreateAndSignServiceContract(ServiceContractHeader);

      // 2. Exercise: Create Service Item Group Code. Create Standard Service Code. Run the Get Std. Service Codes on Service Invoice
      // for the Standard Service Code.
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceHeader.FINDFIRST;

      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      CreateStdServiceResourceCost(StandardServiceCode);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes for which
      // Get Std. Service Codes was runs.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServContrctTemplateListHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE GetStdCodeOnCrMemoForContract@47();
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItemGroup@1004 : Record 5904;
      StandardServiceCode@1001 : Record 5996;
    BEGIN
      // Covers document number TC-SSC-19 - refer to TFS ID 20924.
      // Test that by running the Get Std. Service Codes function on the Contract-related Service Credit Memo, it is possible to
      // insert Standard Service Lines attached to any existing Standard Service Code.

      // 1. Setup: Create a Service Contract. Sign and Invoice the Service Contract.
      CreateAndSignServiceContract(ServiceContractHeader);
      COMMIT;  // Commit is Important to the Test Case.
      // 2. Exercise: Post Service Invoice and create Service Credit Memo from Service Contract.
      // Create Service Item Group Code, Run the Get Std. Service Codes on Service Credit Memo for the Standard Service Code.
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      REPORT.RUNMODAL(REPORT::"Batch Post Service Invoices",FALSE,TRUE,ServiceHeader);
      ServiceContractHeader.FIND;
      ModifyServiceContractStatus(ServiceContractHeader);
      CreateServiceCreditMemo(ServiceContractHeader."Contract No.");

      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::"Credit Memo");
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceHeader.FINDFIRST;

      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      CreateStdServiceResourceCost(StandardServiceCode);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      // 3. Verify: Service Lines is update with Standard Service Lines attached to existing Standard Service Codes for which
      // Get Std. Service Codes was runs.
      VerifyServiceLine(ServiceHeader."Document Type",ServiceHeader."No.",StandardServiceCode.Code);
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE PostInvoiceAfterGetStdCode@59();
    VAR
      ServiceHeader@1006 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-20 - refer to TFS ID 20924.
      // Test that it is possible to post a service invoice with the service lines inserted by the Get Std. Service Codes function.

      PostDocumentAfterGetStdCode(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE PostCrMemoAfterGetStdCode@46();
    VAR
      ServiceHeader@1006 : Record 5900;
    BEGIN
      // Covers document number TC-SSC-21 - refer to TFS ID 20924.
      // Test that it is possible to post a Service Credit Memo with the Service Lines inserted by the Get Std. Service Codes function.

      PostDocumentAfterGetStdCode(ServiceHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PostDocumentAfterGetStdCode@44(DocumentType@1004 : Option);
    VAR
      Customer@1007 : Record 18;
      ServiceHeader@1006 : Record 5900;
      StandardServiceCode@1003 : Record 5996;
      StandardServiceLine@1008 : Record 5997;
      ServiceItemGroup@1002 : Record 5904;
      SrvLine@1500001 : Record 5902;
      GenPostingSetup@1500000 : Record 252;
    BEGIN
      // 1. Setup: Create Service Document as per parameter. Create Service Item Group Code, Run the Get Std. Service Codes on
      // Service Document for the Standard Service Code.

      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,Customer."No.");
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // Required field - value is not important to test case.
      UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode.Code,RANDOM(10));

      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      //Create Gen. Posting Setup
      SrvLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      SrvLine.SETRANGE("Document No.",ServiceHeader."No.");
      SrvLine.FINDSET;
        REPEAT
          GenPostingSetup.SETRANGE("Gen. Bus. Posting Group",SrvLine."Gen. Bus. Posting Group");
          GenPostingSetup.SETRANGE("Gen. Prod. Posting Group",SrvLine."Gen. Prod. Posting Group");
          IF FALSE = GenPostingSetup.FINDFIRST THEN
            LibraryERM.CreateGeneralPostingSetup(GenPostingSetup,SrvLine."Gen. Bus. Posting Group",SrvLine."Gen. Prod. Posting Group");
        UNTIL SrvLine.NEXT = 0;
      // 2. Exercise: Post the Service Document.
      ExecuteConfirmHandlerInvoiceES;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Check Service Ledger Entry, Customer Ledger Entries, Detailed Customer Ledger Entries, Resource Leger Entry,
      // VAT Entry and GL entries are created correctly for the posted Service Document.
      IF ServiceHeader."Document Type" = ServiceHeader."Document Type"::Invoice THEN
        VerifyPostedInvoice(ServiceHeader)
      ELSE
        VerifyPostedCreditMemo(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServContrctTemplateListHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE PostInvoiceContractGetStdCode@54();
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItemGroup@1004 : Record 5904;
      StandardServiceCode@1001 : Record 5996;
      StandardServiceLine@1010 : Record 5997;
      SrvLine@1500001 : Record 5902;
      GenPostingSetup@1500000 : Record 252;
    BEGIN
      // Covers document number TC-SSC-20 - refer to TFS ID 20924.
      // Test that it is possible to post a service invoice created for Service Contract with the service lines inserted by the
      // Get Std. Service Codes function.

      // 1. Setup: Create a Service Contract. Sign and Invoice the Service Contract.
      // Create Service Item Group Code. Create Standard Service Code. Run the Get Std. Service Codes on Service Invoice
      // for the Standard Service Code.
      CreateAndSignServiceContract(ServiceContractHeader);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Invoice);
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceHeader.FINDFIRST;

      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // Required field - value is not important to test case.
      UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode.Code,RANDOM(10));

      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      //Create Gen. Posting Setup
      SrvLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      SrvLine.SETRANGE("Document No.",ServiceHeader."No.");
      SrvLine.FINDSET;
        REPEAT
          GenPostingSetup.SETRANGE("Gen. Bus. Posting Group",SrvLine."Gen. Bus. Posting Group");
          GenPostingSetup.SETRANGE("Gen. Prod. Posting Group",SrvLine."Gen. Prod. Posting Group");
          IF FALSE = GenPostingSetup.FINDFIRST THEN
            LibraryERM.CreateGeneralPostingSetup(GenPostingSetup,SrvLine."Gen. Bus. Posting Group",SrvLine."Gen. Prod. Posting Group");
        UNTIL SrvLine.NEXT = 0;

      // 2. Exercise: Post the Service Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Check Service Ledger Entry, Customer Ledger Entries, Detailed Customer Ledger Entries, Resource Leger Entry,
      // VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyPostedInvoice(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServContrctTemplateListHandler,ModalFormHandlerServItemGroup)]
    PROCEDURE PostCrMemoContractGetStdCode@55();
    VAR
      ServiceContractHeader@1008 : Record 5965;
      ServiceHeader@1006 : Record 5900;
      ServiceItemGroup@1005 : Record 5904;
      StandardServiceCode@1002 : Record 5996;
      StandardServiceLine@1010 : Record 5997;
      SrvLine@1500001 : Record 5902;
      GenPostingSetup@1500000 : Record 252;
    BEGIN
      // Covers document number TC-SSC-21 - refer to TFS ID 20924.
      // Test that it is possible to post a Service Credit Memo created for Service Contract with the Service Lines inserted by the
      // Get Std. Service Codes function.

      // 1. Setup: Create a Service Contract. Sign and Invoice the Service Contract.
      CreateAndSignServiceContract(ServiceContractHeader);
      COMMIT;  // Commit is Important to the Test Case.

      // 2. Exercise: Post Service Invoice and create Service Credit Memo from Service Contract.
      // Create Service Item Group Code, Run the Get Std. Service Codes on Service Credit Memo for the Standard Service Code.
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      REPORT.RUNMODAL(REPORT::"Batch Post Service Invoices",FALSE,TRUE,ServiceHeader);
      ServiceContractHeader.FIND;
      ModifyServiceContractStatus(ServiceContractHeader);
      CreateServiceCreditMemo(ServiceContractHeader."Contract No.");

      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::"Credit Memo");
      ServiceHeader.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceHeader.FINDFIRST;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;

      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);

      // Required field - value is not important to test case.
      UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode.Code,RANDOM(10));

      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceCode.InsertServiceLines(ServiceHeader);

      //Create Gen. Posting Setup
      SrvLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      SrvLine.SETRANGE("Document No.",ServiceHeader."No.");
      SrvLine.FINDSET;
        REPEAT
          GenPostingSetup.SETRANGE("Gen. Bus. Posting Group",SrvLine."Gen. Bus. Posting Group");
          GenPostingSetup.SETRANGE("Gen. Prod. Posting Group",SrvLine."Gen. Prod. Posting Group");
          IF FALSE = GenPostingSetup.FINDFIRST THEN
            LibraryERM.CreateGeneralPostingSetup(GenPostingSetup,SrvLine."Gen. Bus. Posting Group",SrvLine."Gen. Prod. Posting Group");
        UNTIL SrvLine.NEXT = 0;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Check Service Ledger Entry, Customer Ledger Entries, Detailed Customer Ledger Entries, Resource Leger Entry, VAT Entry
      // and GL entries are created correctly for the posted Credit Memo.
      VerifyPostedCreditMemo(ServiceHeader);
    END;

    [Test]
    PROCEDURE DeleteStandardServiceItemGroupCode@80();
    VAR
      ServiceItemGroup@1002 : Record 5904;
      StandardServiceItemGrCode@1001 : Record 5998;
      StandardServiceCode@1000 : Record 5996;
    BEGIN
      // Check that Standard Service Code still exists after deleting a related Standard Service Item Group Code.

      // 1. Setup: Create Service Item Group, Standard Service Code and group them using Standard Service Item Group.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      LibraryService.CreateStandardServiceItemGr(StandardServiceItemGrCode,ServiceItemGroup.Code,StandardServiceCode.Code);

      // 2. Exercise: Delete Standard Service Item Group having Standard Service Code attached.
      StandardServiceItemGrCode.DELETE(TRUE);

      // 3. Verify: Verify that after deleting Standard Service Item Group, Standard Service Code still exists.
      StandardServiceCode.GET(StandardServiceCode.Code);
    END;

    LOCAL PROCEDURE CalcTotalAmtShippedLineCrMemo@74(PreAssignedNo@1001 : Code[20]) TotalAmount : Decimal;
    VAR
      ServiceCrMemoHeader@1002 : Record 5994;
      ServiceCrMemoLine@1003 : Record 5995;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      ServiceCrMemoLine.FINDSET;
      REPEAT
        TotalAmount += -ServiceCrMemoLine."Amount Including VAT";
      UNTIL ServiceCrMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcTotalAmtShippedLineInvoice@76(PreAssignedNo@1001 : Code[20]) TotalAmount : Decimal;
    VAR
      ServiceInvoiceLine@1003 : Record 5993;
      ServiceInvoiceHeader@1002 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDSET;
      REPEAT
        TotalAmount += ServiceInvoiceLine."Amount Including VAT";
      UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE ConvertMessage@7(ErrorMessage@1001 : Text[1024]) : Text[1024];
    VAR
      NewLine@1000 : Text[1];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndSignServiceContract@52(VAR ServiceContractHeader@1003 : Record 5965);
    VAR
      Customer@1002 : Record 18;
      ServiceContractLine@1000 : Record 5964;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      // Create Service Item, Service Contract Header, Service Contract Line. Sign and Invoice the Service Contract.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceContractLine@53(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Cost",RANDOM(10));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Line Value",RANDOM(10));  // Use Random because value is not important.
      ServiceContractLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceCreditMemo@62(ContractNo@1000 : Code[20]);
    VAR
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      ServiceContractLine.SETRANGE("Contract No.",ContractNo);
      ServiceContractLine.FINDFIRST;
      LibraryService.CreateContractLineCreditMemo(ServiceContractLine,TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@29(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLine@1001 : Record 5901);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
    END;

    LOCAL PROCEDURE CreateStdServiceResourceCost@10(VAR StandardServiceCode@1003 : Record 5996);
    BEGIN
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      CreateStdServiceLineCost(StandardServiceCode.Code);
    END;

    LOCAL PROCEDURE CreateStdServiceLineCost@81(StandardServiceCode@1002 : Code[10]);
    VAR
      ServiceCost@1000 : Record 5905;
      StandardServiceLine@1001 : Record 5997;
    BEGIN
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode);
      ServiceCost.SETRANGE("Service Zone Code",'');
      LibraryService.FindServiceCost(ServiceCost);
      StandardServiceLine.VALIDATE(Type,StandardServiceLine.Type::Cost);
      StandardServiceLine.VALIDATE("No.",ServiceCost.Code);
      StandardServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStdServiceLineGL@41(VAR StandardServiceLine@1000 : Record 5997;StandardServiceCode@1002 : Code[10]);
    VAR
      LibraryERM@1003 : Codeunit 131300;
    BEGIN
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode);
      StandardServiceLine.VALIDATE(Type,StandardServiceLine.Type::"G/L Account");
      StandardServiceLine.VALIDATE("No.",LibraryERM.CreateGLAccountWithSalesSetup);
      StandardServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStdServiceLineItem@19(StandardServiceCode@1003 : Code[10]);
    VAR
      StandardServiceLine@1001 : Record 5997;
      LibraryInventory@1002 : Codeunit 132201;
    BEGIN
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode);
      StandardServiceLine.VALIDATE(Type,StandardServiceLine.Type::Item);
      StandardServiceLine.VALIDATE("No.",LibraryInventory.CreateItemNo);
      StandardServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStdServiceLineResource@16(StandardServiceCode@1002 : Code[10]);
    VAR
      StandardServiceLine@1001 : Record 5997;
      LibraryResource@1003 : Codeunit 130511;
    BEGIN
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode);
      StandardServiceLine.VALIDATE(Type,StandardServiceLine.Type::Resource);
      StandardServiceLine.VALIDATE("No.",LibraryResource.CreateResourceNo);
      StandardServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ExecuteConfirmHandlerInvoiceES@83();
    BEGIN
      IF CONFIRM(STRSUBSTNO(ExpectedConfirm)) THEN;
    END;

    LOCAL PROCEDURE FindServiceLine@79(VAR ServiceLine@1000 : Record 5902;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE GetStdCodeForGL@18(VAR StandardServiceCode@1001 : Record 5996;VAR ServiceItemLine@1003 : Record 5901);
    VAR
      StandardServiceItemGrCode@1002 : Record 5998;
      StandardServiceLine@1000 : Record 5997;
    BEGIN
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineGL(StandardServiceLine,StandardServiceCode.Code);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);
    END;

    LOCAL PROCEDURE GetStdCodeForItem@31(ServiceItemLine@1003 : Record 5901);
    VAR
      StandardServiceItemGrCode@1002 : Record 5998;
      StandardServiceCode@1001 : Record 5996;
    BEGIN
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      CreateStdServiceLineItem(StandardServiceCode.Code);
      CreateStdServiceLineResource(StandardServiceCode.Code);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);
    END;

    LOCAL PROCEDURE GetStdCodeForResourceCost@23(VAR StandardServiceCode@1001 : Record 5996;VAR ServiceItemLine@1003 : Record 5901);
    VAR
      ServiceItemGroup@1000 : Record 5904;
      StandardServiceItemGrCode@1002 : Record 5998;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroupCode2 := ServiceItemGroup.Code;
      CreateStdServiceResourceCost(StandardServiceCode);
      StandardServiceCode2 := StandardServiceCode.Code;
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);
    END;

    [Normal]
    LOCAL PROCEDURE ModifyServiceContractHeader@56(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",ServiceContractHeader."Service Period");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ModifyServiceContractStatus@57(VAR ServiceContractHeader@1000 : Record 5965);
    VAR
      LockOpenServContract@1001 : Codeunit 5943;
    BEGIN
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
      ServiceContractHeader.VALIDATE("Expiration Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQtyToShip@35(DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      REPEAT
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Required field - value is not important to test case.
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQtyToConsume@33(DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine."Qty. to Ship");
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQtyToInvoice@34(DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      REPEAT
        ServiceLine.VALIDATE(
          "Qty. to Invoice",
          (ServiceLine."Quantity Shipped" - ServiceLine."Quantity Consumed") * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQuantityOnStdServiceLine@66(VAR StandardServiceLine@1003 : Record 5997;StandardServiceCode@1001 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      StandardServiceLine.SETRANGE("Standard Service Code",StandardServiceCode);
      StandardServiceLine.FINDSET;
      REPEAT
        StandardServiceLine.VALIDATE(Quantity,Quantity);
        StandardServiceLine.MODIFY(TRUE);
      UNTIL StandardServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceItemLine@28(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      FaultReasonCode@1002 : Record 5917;
      FaultCode@1005 : Record 5918;
      ResolutionCode@1006 : Record 5919;
    BEGIN
      // Update the Service Line with Contract No., Warranty, Fault Reason Code, Fault Area Code, Symptom Code Fault Code and
      // Resolution Code.
      FaultReasonCode.FINDFIRST;
      FaultCode.FINDFIRST;
      ResolutionCode.FINDFIRST;
      ServiceItemLine.VALIDATE(Warranty,TRUE);
      ServiceItemLine.VALIDATE("Fault Reason Code",FaultReasonCode.Code);
      ServiceItemLine.VALIDATE("Fault Area Code",FaultCode."Fault Area Code");
      ServiceItemLine.VALIDATE("Symptom Code",FaultCode."Symptom Code");
      ServiceItemLine.VALIDATE("Fault Code",FaultCode.Code);
      ServiceItemLine.VALIDATE("Resolution Code",ResolutionCode.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@68(DocumentType@1003 : Option;DocumentNo@1002 : Code[20];PostingDate@1001 : Date);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",DocumentType);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.TESTFIELD("Posting Date",PostingDate);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDetailedCustLedgerEntry@67(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];TotalAmount@1005 : Decimal);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.FINDSET;
      REPEAT
        DetailedCustLedgEntry.TESTFIELD(Amount,TotalAmount);
      UNTIL DetailedCustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryCrMemo@65(PreAssignedNo@1001 : Code[20]);
    VAR
      ServiceCrMemoHeader@1003 : Record 5994;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::"Credit Memo");
      GLEntry.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source Type",GLEntry."Source Type"::Customer);
        GLEntry.TESTFIELD("Source No.",ServiceCrMemoHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceCrMemoHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryInvoice@64(PreAssignedNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source Type",GLEntry."Source Type"::Customer);
        GLEntry.TESTFIELD("Source No.",ServiceInvoiceHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedCreditMemo@71(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceCrMemoHeader@1000 : Record 5994;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceCrMemoHeader.FINDFIRST;

      VerifyServiceLedgerEntry(ServiceHeader."Document Type",ServiceCrMemoHeader."No.",ServiceHeader."Customer No.");
      VerifyCustomerLedgerEntry(ServiceHeader."Document Type",ServiceCrMemoHeader."No.",ServiceCrMemoHeader."Posting Date");
      VerifyDetailedCustLedgerEntry(
        ServiceHeader."Document Type",ServiceCrMemoHeader."No.",CalcTotalAmtShippedLineCrMemo(ServiceHeader."No."));
      VerifyResourceEntryCrMemo(ServiceHeader."No.");
      VerifyGLEntryCrMemo(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE VerifyPostedInvoice@72(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;

      VerifyServiceLedgerEntry(ServiceHeader."Document Type",ServiceInvoiceHeader."No.",ServiceHeader."Customer No.");
      VerifyCustomerLedgerEntry(ServiceHeader."Document Type",ServiceInvoiceHeader."No.",ServiceInvoiceHeader."Posting Date");
      VerifyDetailedCustLedgerEntry(
        ServiceHeader."Document Type",ServiceInvoiceHeader."No.",CalcTotalAmtShippedLineInvoice(ServiceHeader."No."));
      VerifyResourceEntryInvoice(ServiceHeader."No.");
      VerifyGLEntryInvoice(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE VerifyQuantityAmountOnBlank@63(StandardServiceLine@1000 : Record 5997;StandardServiceCode@1001 : Code[10]);
    BEGIN
      // Required field - value is not important to test case.
      ASSERTERROR UpdateQuantityOnStdServiceLine(StandardServiceLine,StandardServiceCode,RANDOM(10));
      Assert.AreEqual(
        STRSUBSTNO(
          TypeErrorServiceTier,StandardServiceLine.FIELDCAPTION(Type),StandardServiceLine.Type,
          StandardServiceLine.TABLECAPTION,StandardServiceLine.FIELDCAPTION("Standard Service Code"),
          StandardServiceLine."Standard Service Code",StandardServiceLine.FIELDCAPTION("Line No."),StandardServiceLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),
        UnknownError);

      ASSERTERROR StandardServiceLine.VALIDATE("Amount Excl. VAT",RANDOM(10));  // Required field - value is not important to test case.
      VerifyStandardServiceLineType(StandardServiceLine);
    END;

    LOCAL PROCEDURE VerifyQuantityOnStdServiceLine@21(StandardServiceCode@1000 : Code[10];Quantity@1002 : Decimal);
    VAR
      StandardServiceLine@1001 : Record 5997;
    BEGIN
      StandardServiceLine.SETRANGE("Standard Service Code",StandardServiceCode);
      StandardServiceLine.FINDSET;
      REPEAT
        StandardServiceLine.TESTFIELD(Quantity,Quantity);
      UNTIL StandardServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceEntryCrMemo@69(PreAssignedNo@1003 : Code[20]);
    VAR
      ServiceCrMemoLine@1001 : Record 5995;
      ServiceCrMemoHeader@1004 : Record 5994;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      ServiceCrMemoLine.SETRANGE(Type,ServiceCrMemoLine.Type::Resource);
      ServiceCrMemoLine.FINDFIRST;
      ResLedgerEntry.SETRANGE("Document No.",ServiceCrMemoLine."Document No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Quantity,ServiceCrMemoLine.Quantity);
      ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
      ResLedgerEntry.TESTFIELD("Order No.",PreAssignedNo);
      ResLedgerEntry.TESTFIELD("Order Line No.",ServiceCrMemoLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyResourceEntryInvoice@70(PreAssignedNo@1003 : Code[20]);
    VAR
      ServiceInvoiceLine@1001 : Record 5993;
      ServiceInvoiceHeader@1000 : Record 5992;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.SETRANGE(Type,ServiceInvoiceLine.Type::Resource);
      ServiceInvoiceLine.FINDFIRST;
      ResLedgerEntry.SETRANGE("Document No.",ServiceInvoiceLine."Document No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Quantity,-ServiceInvoiceLine.Quantity);
      ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
      ResLedgerEntry.TESTFIELD("Order No.",PreAssignedNo);
      ResLedgerEntry.TESTFIELD("Order Line No.",ServiceInvoiceLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyCurrencyNotMatching@6(ServiceHeader@1003 : Record 5900;StandardServiceCode@1002 : Record 5996);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          CurrencyNotMatching,StandardServiceCode.FIELDCAPTION("Currency Code"),
          ServiceHeader.FIELDCAPTION("Currency Code"),ServiceHeader.TABLECAPTION),
        ConvertMessage(GETLASTERRORTEXT),
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@45(DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1004 : Record 5993;
    BEGIN
      // Verify that the values of the fields Type and No. of Service Invoice Line are equal to the value of the
      // field Type and No. of the relevant Service Line.
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",ServiceLine."Line No.");
        ServiceInvoiceLine.TESTFIELD(Type,ServiceLine.Type);
        ServiceInvoiceLine.TESTFIELD("No.",ServiceLine."No.");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@73(DocumentType@1004 : Option;DocumentNo@1001 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",DocumentType);
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Customer No.",CustomerNo);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLine@27(DocumentType@1004 : Option;DocumentNo@1003 : Code[20];StandardServiceCode@1001 : Code[10]);
    VAR
      StandardServiceLine@1000 : Record 5997;
      ServiceLine@1002 : Record 5902;
    BEGIN
      StandardServiceLine.SETRANGE("Standard Service Code",StandardServiceCode);
      StandardServiceLine.FINDSET;
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      REPEAT
        ServiceLine.SETRANGE(Type,StandardServiceLine.Type);
        ServiceLine.SETRANGE("No.",StandardServiceLine."No.");
        ServiceLine.FINDFIRST;
        ServiceLine.TESTFIELD(Quantity,StandardServiceLine.Quantity);
      UNTIL StandardServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceShipment@36(DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceShipmentLine@1004 : Record 5991;
    BEGIN
      // Verify that the values of the fields Type and No. of Service Shipment Line are equal to the value of the
      // field Type and No. of the relevant Service Line.
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      REPEAT
        ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
        ServiceShipmentLine.FINDFIRST;
        ServiceShipmentLine.TESTFIELD(Type,ServiceLine.Type);
        ServiceShipmentLine.TESTFIELD("No.",ServiceLine."No.");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyStandardServiceLineType@1(StandardServiceLine@1000 : Record 5997);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          TypeError,StandardServiceLine.FIELDCAPTION(Type),StandardServiceLine.Type,
          StandardServiceLine.TABLECAPTION,StandardServiceLine.FIELDCAPTION("Standard Service Code"),
          StandardServiceLine."Standard Service Code",StandardServiceLine.FIELDCAPTION("Line No."),StandardServiceLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyVATEntry@77(DocumentType@1000 : Option;DocumentNo@1002 : Code[20];PostingDate@1001 : Date);
    VAR
      VATEntry@1003 : Record 254;
    BEGIN
      VATEntry.SETRANGE("Document Type",DocumentType);
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDFIRST;
      VATEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@26(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerServItemGroup@24(VAR StandardServItemGrCodes@1003 : Page 5959;VAR Response@1000 : Action);
    VAR
      StandardServiceItemGrCode@1002 : Record 5998;
    BEGIN
      LibraryService.CreateStandardServiceItemGr(StandardServiceItemGrCode,ServiceItemGroupCode2,StandardServiceCode2);
      StandardServItemGrCodes.SETRECORD(StandardServiceItemGrCode);
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@58(MessageTest@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ServContrctTemplateListHandler@60(VAR ServiceContractTemplateList@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceESConfirmHandler@82(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := (Question = ExpectedConfirm);
    END;

    BEGIN
    {
      // [FEATURE] [Standard Service Code] [Service]
      Unsupported version tags:
      NA: Unable to Execute

      Test for Standard Service Codes:
        1. Creating a Standard Service Code.
           a. TC-SSC-01 - Create a New Standard Service Code.
           b. TC-SSC-02 - Rename a New Standard Service Code.
           c. TC-SSC-03 - Change the Quantity Field Value on the Standard Service Line.
           d. TC-SSC-04 - Change the Amount Excl. VAT Field on the Standard Service Line.
           e. TC-SSC-05 - Delete the Standard Service Code.
        2. Assigning a Standard Service Code to a Service Item Group.
           a. TC-SSC-06 - Assign a Standard Service Code to a Service item Group.
        3. Running the Get Std. Service Codes Function on the Service Order.
           a. TC-SSC-07 - Run the Get Std. Service Codes Function when the Service Item Group Code Field Contains a Code with the
                          Standard Service Code Assigned.
           b. TC-SSC-08 - Run the Get Std. Service Codes Function when the Service Item Group Code Field Contains a Code Without a
                          Standard Service Code Assigned.
           c. TC-SSC-09 - Get Std. Service Codes Function when the Service Item Group Code Field Is Empty.
           d. TC-SSC-10 - Run the Get Std. Service Codes Function when the Service Item Line Has Contract No., Warranty and
                          Fault Reason Code, Fault Reporting Codes and Resolution Code Specified.
           e. TC-SSC-11 - Run the Get Std. Service Codes Function when the Currency Code Values for the Service Header and the
                          Standard Service Code are Different.
        4. Posting of Service Lines after Running the Get Std. Service Codes Function.
           a. TC-SSC-13 - Post the Service Lines after Running the Get Std. Service Codes Function.
        5. Running the Get Std. Service Codes Function on the Service Invoice.
           a. TC-SSC-14 - Run the Get Std. Service Codes Function on the Service Invoice.
           b. TC-SSC-15 - Run the Get Std. Service Codes Function when the Currency Code Values for the Service Invoice and the
                          Standard Service Code are Different.
           c. TC-SSC-16 - Run the Get Std. Service Codes Function on the Service Invoice Created for the Service Contract.
        6. Running the Get Std. Service Codes Function on the Service Credit Memo.
           a. TC-SSC-17 - Run the Get Std. Service Codes Function on the Service Credit Memo.
           b. TC-SSC-18 - Run the Get Std. Service Codes Function when the Currency Code Values for the Service Credit Memo and the
                          Standard Service Code are Different.
           c. TC-SSC-19 - Run the Get Std. Service Codes Function on the Service Credit Memo Created for the Service Contract.
        7. Posting of Service Documents after Running the Get Std. Service Codes Function.
           a. TC-SSC-20 - Post a Service Invoice After Running the Get Std. Service Codes Function.
           b. TC-SSC-21 - Post a Service Credit Memo After Running the Get Std. Service Codes Function.
        8. Test that Standard Service Code still exists after deleting a related Standard Service Item Group Code.

      TFS_TS_ID = 20924
      Covers Test cases:
        TFS_TC_ID=12216 and 32008
        TFS_TC_ID=12217 and 32009
        TFS_TC_ID=12218 and 32010
        TFS_TC_ID=12219 and 32011
        TFS_TC_ID=12220 and 32012
        TFS_TC_ID=12221 and 32013
        TFS_TC_ID=12222 and 32014

      Covers Test Cases: TFS_TS_ID = 274950
        -----------------------------------------------------------------------
        Test Function Name                                           TFS ID
        -----------------------------------------------------------------------
        DeleteStandardServiceItemGroupCode                           261344
    }
    END.
  }
}

