OBJECT Codeunit 134376 ERM Reminders - Grace Period
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryERM@1007 : Codeunit 131300;
      LibrarySales@1001 : Codeunit 130509;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountErr@1005 : TextConst '@@@={Locked};ENU=%1 must be equal to %2 in %3.';

    [Test]
    PROCEDURE ReminderNotOverdue@1();
    VAR
      Customer@1000 : Record 18;
      PostedInvoiceNo@1005 : Code[20];
      ReminderNo@1001 : Code[20];
    BEGIN
      // Check that no Reminder Lines exists for a Document that is not Overdue.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);

      // Exercise: Make payment for the Invoice and Create Reminder for the Customer.
      MakePaymentOfInvoice(Customer."No.",PostedInvoiceNo,WORKDATE);
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>'),FALSE,TRUE);

      // Verify: Verify that no Reminder Lines exists.
      VerifyNoReminderLines(ReminderNo);
    END;

    [Test]
    PROCEDURE ReminderBeforeGracePeriod@3();
    BEGIN
      // Check that No Reminder Lines exists for a Document that is created before Grace Period End.

      Initialize;
      FirstLevelReminderWithNoLines('<-1D>');
    END;

    [Test]
    PROCEDURE ReminderOnGracePeriod@2();
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on the Grace Period.

      Initialize;
      FirstLevelReminderWithNoLines('<0D>');
    END;

    LOCAL PROCEDURE FirstLevelReminderWithNoLines@12(Period@1000 : Text[10]);
    VAR
      Customer@1003 : Record 18;
      PostedInvoiceNo@1002 : Code[20];
      ReminderNo@1001 : Code[20];
    BEGIN
      // Setup: Create and Post Sales Invoice.
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);

      // Exercise: Create Reminder as per the option Selected.
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,Period),FALSE,TRUE);

      // Verify: Verify that no Reminder Lines exists.
      VerifyNoReminderLines(ReminderNo);
    END;

    [Test]
    PROCEDURE ReminderAfterGracePeriod@4();
    VAR
      Customer@1002 : Record 18;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Check the Amount and Additional Fee on Reminder Lines After the Grace Period End.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);

      // Create Reminder and Verify Additional Fee and Amount on Reminder Lines.
      CreateReminderAndVerifyLines(Customer,PostedInvoiceNo);
    END;

    [Test]
    PROCEDURE ReminderNegativeAmount@22();
    VAR
      Customer@1002 : Record 18;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Check the Amount and Additional Fee on Reminder Lines With a Negative Amount.

      // Setup: Create and Post Sales Invoice and then Create and Post Credit Memo.
      Initialize;
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);
      CreateAndPostSalesCreditMemo(Customer."No.",Customer."Reminder Terms Code");

      // Create Reminder and Verify Additional Fee and Amount on Reminder Lines.
      CreateReminderAndVerifyLines(Customer,PostedInvoiceNo);
    END;

    [Test]
    PROCEDURE ReminderOnFirstGracePeriod@10();
    VAR
      Customer@1002 : Record 18;
      ReminderLevel@1003 : Record 293;
      PostedInvoiceNo@1001 : Code[20];
      ReminderDate@1004 : Date;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on Second Reminder with First Level Grace Period.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      ReminderDate := CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<0D>');
      CreateReminderAndVerifyNoLines(Customer."No.",ReminderDate);
    END;

    [Test]
    PROCEDURE ReminderOnSecondGracePeriod@18();
    VAR
      Customer@1005 : Record 18;
      ReminderLevel@1004 : Record 293;
      PostedInvoiceNo@1003 : Code[20];
      ReminderDate@1001 : Date;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on Second Reminder with Second Level Grace Period.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      ReminderLevel.NEXT;
      ReminderDate := CALCDATE(ReminderLevel."Grace Period",GetSalesInvoiceDueDate(PostedInvoiceNo));
      CreateReminderAndVerifyNoLines(Customer."No.",ReminderDate);
    END;

    [Test]
    PROCEDURE ReminderBothGracePeriod@17();
    VAR
      Customer@1005 : Record 18;
      ReminderLevel@1004 : Record 293;
      PostedInvoiceNo@1003 : Code[20];
      ReminderDate@1001 : Date;
      FirstGracePeriod@1006 : DateFormula;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on a Date after Both Level Grace Period ends.
      // SecondLevelReminder(NextLevelGracePeriod::"Both Periods");

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      FirstGracePeriod := ReminderLevel."Grace Period";
      ReminderLevel.NEXT;
      ReminderDate := CALCDATE(FirstGracePeriod,CALCDATE(ReminderLevel."Grace Period",GetSalesInvoiceDueDate(PostedInvoiceNo)));
      CreateReminderAndVerifyNoLines(Customer."No.",ReminderDate);
    END;

    [Test]
    PROCEDURE ReminderOnFirstReminderDueDate@20();
    VAR
      Customer@1006 : Record 18;
      ReminderLevel@1005 : Record 293;
      PostedInvoiceNo@1004 : Code[20];
      ReminderDate@1002 : Date;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on a Date after First Level Grace Period and First Reminder Due Date.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      ReminderLevel.NEXT;
      ReminderDate :=
        CALCDATE(ReminderLevel."Grace Period",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>'));
      CreateReminderAndVerifyNoLines(Customer."No.",ReminderDate);
    END;

    [Test]
    PROCEDURE ReminderOnDueDatSecGracePeriod@21();
    VAR
      Customer@1006 : Record 18;
      ReminderLevel@1005 : Record 293;
      PostedInvoiceNo@1004 : Code[20];
      ReminderDate2@1001 : Date;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on a Date after Second Level Grace Period and First Reminder Due Date.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      ReminderLevel.NEXT;
      ReminderDate2 :=
        CALCDATE(ReminderLevel."Grace Period",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>'));
      CreateReminderAndVerifyNoLines(Customer."No.",ReminderDate2);
    END;

    [Test]
    PROCEDURE ReminderAfterSecondGracePeriod@26();
    VAR
      Customer@1006 : Record 18;
      ReminderLevel@1005 : Record 293;
      PostedInvoiceNo@1004 : Code[20];
      ReminderNo@1003 : Code[20];
      ReminderDate@1001 : Date;
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on a Date after Second Level Grace Period and First Reminder Due Date.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Calculate Reminder Date based on Sales Header Due Date and First Grace Period End.
      ReminderLevel.NEXT;
      ReminderDate :=
        CALCDATE('<1D>',
          CALCDATE(
            ReminderLevel."Grace Period",
            CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>')));

      // Create Level Two Reminder as per the option selected.
      ReminderNo := CreateReminder(Customer."No.",ReminderDate,FALSE,TRUE);

      // Verify: Verify Amount and Additional Fee on Reminder Lines.
      VerifyAmountOnReminderLines(ReminderNo,PostedInvoiceNo);
      VerifyAddnlFeeOnReminderLines(ReminderNo,Customer."Reminder Terms Code",ReminderLevel."No.");
    END;

    [Test]
    PROCEDURE ReminderOnThirdGracePeriod@25();
    VAR
      ReminderNo@1000 : Code[20];
    BEGIN
      // Check that no Reminder Lines exists after Suggesting Lines on Third Level Grace Period.

      // Setup:
      Initialize;
      CreateThirdLevelReminder(ReminderNo,'<0D>');

      // Verify:
      VerifyNoReminderLines(ReminderNo);
    END;

    [Test]
    PROCEDURE ReminderAfterThirdGracePeriod@36();
    VAR
      PostedInvoiceNo@1004 : Code[20];
      ReminderNo@1003 : Code[20];
    BEGIN
      // Check the Amount and Additional Fee on Reminder Lines after Third Level Grace Period Starts.

      // Setup:
      Initialize;
      PostedInvoiceNo := CreateThirdLevelReminder(ReminderNo,'<1D>');

      // Verify: Verify Amount and Additional Fee on Reminder Lines.
      VerifyAmountAndAddnlFeeOnLines(ReminderNo,PostedInvoiceNo);
    END;

    LOCAL PROCEDURE CreateThirdLevelReminder@52(VAR ReminderNo@1003 : Code[20];Period@1004 : Text[30]) PostedInvoiceNo : Code[20];
    VAR
      Customer@1008 : Record 18;
      ReminderLevel@1007 : Record 293;
      ReminderDate@1001 : Date;
      ReminderDate2@1000 : Date;
      DateDifference@1002 : DateFormula;
    BEGIN
      // Setup: Create and Post Sales Invoice. Create and Issue Level 1 Reminder.
      PostedInvoiceNo := CreateAndIssueFirstReminder(Customer,ReminderLevel);

      // Create Level Two Reminder and Issue it. Take Reminder Date just after Second Grace Period Ends.
      ReminderLevel.NEXT;
      ReminderDate :=
        CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",
            CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>')));
      CreateAndIssueReminder(Customer."No.",ReminderDate,FALSE);

      // Exercise: Create Level 3 Reminder.
      ReminderLevel.NEXT;
      EVALUATE(DateDifference,Period);
      ReminderDate2 := CALCDATE(DateDifference,CALCDATE(ReminderLevel."Grace Period",ReminderDate));
      ReminderNo := CreateReminder(Customer."No.",ReminderDate2,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE ReminderOnGracePeriodDueDate@33();
    VAR
      Customer@1008 : Record 18;
      ReminderLevel@1007 : Record 293;
      PostedInvoiceNo@1004 : Code[20];
      ReminderNo@1003 : Code[20];
      ReminderDate@1002 : Date;
      ReminderDate2@1001 : Date;
    BEGIN
      // Setup: Add Due Date Calculation on Reminder Levels.
      Initialize;
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);
      AddDueDateCalcOnReminderLevel(Customer."Reminder Terms Code");

      // Exercise: Create Level One Reminder for the Customer and issue it. Use Reminder Date just after First Grace Period End.
      ReminderLevel.SETRANGE("Reminder Terms Code",Customer."Reminder Terms Code");
      ReminderLevel.FINDSET;
      ReminderDate := CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>');
      CreateAndIssueReminder(Customer."No.",ReminderDate,TRUE);

      // Create Level Two Reminder for the Customer. Take Reminder Date Just After Second Grace Period End.
      ReminderLevel.NEXT;
      ReminderDate2 := CALCDATE(ReminderLevel."Grace Period",CALCDATE(ReminderLevel."Grace Period",ReminderDate));
      ReminderNo := CreateReminder(Customer."No.",ReminderDate2,TRUE,TRUE);

      // Verify: Verify the Due Date on Reminder Header according to the Reminder Level Due Date Calculation.
      VerifyDueDateOnReminderHeader(ReminderNo,ReminderLevel."Due Date Calculation");
    END;

    [Test]
    PROCEDURE ReminderForMultipleInvoices@42();
    VAR
      Customer@1008 : Record 18;
      SalesHeader@1007 : Record 36;
      ReminderHeader@1006 : Record 295;
      NoSeriesManagement@1002 : Codeunit 396;
      Counter@1000 : Integer;
      PostedInvoiceNo@1001 : Code[20];
      ReminderNo@1003 : Code[20];
    BEGIN
      // Setup: Create a Customer. Create Multiple Sales Invoices with newly created Item and a Random Quantity. Post the Sales Invoices.
      Initialize;
      CreateCustomer(Customer);

      // Create Multiple Sales Invoices using Random and Post them.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO BEGIN
        CreateSalesInvoice(SalesHeader,Customer."No.",Customer."Reminder Terms Code");
        PostedInvoiceNo := NoSeriesManagement.GetNextNo(SalesHeader."Posting No. Series",WORKDATE,FALSE);
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      END;

      // Exercise: Create Level One Reminder for the Customer. Use Reminder Date just after First Grace Period End.
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>'),FALSE,TRUE);

      // Verify: Verify Amount and Additional Fee on Reminder Lines.
      ReminderHeader.GET(ReminderNo);
      VerifyAmountMultiInvoiceLines(Customer."No.",ReminderNo);
      VerifyAddnlFeeOnReminderLines(ReminderNo,Customer."Reminder Terms Code",ReminderHeader."Reminder Level");
    END;

    [Test]
    PROCEDURE ReminderLineCheck@35();
    VAR
      Customer@1000 : Record 18;
      ReminderLevel@1003 : Record 293;
      ReminderNo@1004 : Code[20];
      PostedInvoiceNo@1002 : Code[20];
    BEGIN
      // Create and Verify the Reminder Lines.

      // Setup.
      Initialize;
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);

      // Exercise: Create Reminder for the Customer and calculating Reminder Date using LibraryRandom.
      ReminderNo :=
        CreateReminder(
          Customer."No.",
          CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>'),
          FALSE,TRUE);

      // Verify: Check Whether Lines are created in Reminder Line and verify a field.
      ReminderLevel.SETRANGE("Reminder Terms Code",Customer."Reminder Terms Code");
      ReminderLevel.FINDFIRST;
      VerifyReminderLine(ReminderNo,ReminderLevel."Additional Fee (LCY)");
    END;

    [Test]
    PROCEDURE ReminderWithOverdueEntriesYes@29();
    VAR
      ReminderNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 243869] Check that no Overdue Entry exist while Suggesting Reminder Line and Entries With Overdue Amount Field is set to TRUE.

      // Create and suggest Reminder when Include Entries with Overdue Amount = TRUE.
      Initialize;
      ReminderNo := RemindersWithOverdueEntries(TRUE);

      // Verify: Verify that the Invoice that is Not Due is not appearing in the Reminder Lines.
      Assert.IsFalse(VerifyOverdueEntry(ReminderNo),'<Not Due> Reminder Line must not exist.');
    END;

    [Test]
    PROCEDURE ReminderWithOverdueEntriesNo@45();
    VAR
      ReminderNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 243869] Check that not Overdue Entry exist while Suggesting Reminder Line and Entries With Overdue Amount Field is set to FALSE.

      // Create and suggest Reminder when Include Entries with Overdue Amount = FALSE.
      Initialize;
      ReminderNo := RemindersWithOverdueEntries(FALSE);

      // Verify: Verify that the Invoice that is Not Due is also appearing in the Reminder Lines.
      Assert.IsFalse(VerifyOverdueEntry(ReminderNo),'<Not Due> Reminder Line must not exist.');
    END;

    LOCAL PROCEDURE RemindersWithOverdueEntries@46(OverDueEntriesOnly@1002 : Boolean) ReminderNo : Code[20];
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1004 : Record 36;
      ReminderDate@1003 : Date;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Setup: Create and Post Sales Invoice. Issue Reminder and again Post Sales Invoice for Customer. Take Random Reminder Due Date.
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);
      ReminderDate :=
        CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      CreateAndIssueReminder(Customer."No.",ReminderDate,FALSE);
      CreateSalesInvoice(SalesHeader,Customer."No.",Customer."Reminder Terms Code");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Create another Reminder for the same Customer.
      ReminderNo := CreateReminder(Customer."No.",ReminderDate,FALSE,OverDueEntriesOnly);
    END;

    [Test]
    PROCEDURE ReminderWithGracePeriodOverdue@40();
    VAR
      Customer@1005 : Record 18;
      PostedInvoiceNo@1003 : Code[20];
      ReminderNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 375725] Reminder Line should not be created when Due Date plus Grace Period is more then Reminder Date and "Only Entries with Overdue Amounts" = TRUE

      Initialize;
      // [GIVEN] Customer with Reminder Code and Grace Period = 20 days
      CreateCustomer(Customer);

      // [GIVEN] Posted Sales Invoice "A" with Due Date = 01.01
      // This sales invoice needed to make sure that Reminder will be created
      CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",WORKDATE);

      // [GIVEN] Posted Sales Invoice "B" with Due Date = 01.02
      PostedInvoiceNo := CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",CALCDATE('<1M>',WORKDATE));

      // [WHEN] Create Reminder with Reminder Date = 19.02, "Only Entries with Overdue Amounts" = TRUE
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<-1D>'),TRUE,TRUE);

      // [THEN] Reminder Line for Posted Sales Invoice "B" was not added
      VerifyReminderLineDoesNotExist(ReminderNo,PostedInvoiceNo);
    END;

    [Test]
    PROCEDURE ReminderWithGracePeriodNotDue@9();
    VAR
      Customer@1005 : Record 18;
      PostedInvoiceNo@1003 : Code[20];
      ReminderNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 379031] Reminder Line should be created when Due Date plus Grace Period is more then Reminder Date and "Only Entries with Overdue Amounts" = FALSE

      Initialize;
      // [GIVEN] Customer with Reminder Code and Grace Period = 20 days
      CreateCustomer(Customer);

      // [GIVEN] Posted Sales Invoice "A" with Due Date = 01.01
      // This sales invoice needed to make sure that Reminder will be created
      CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",WORKDATE);

      // [GIVEN] Posted Sales Invoice "B" with Due Date = 01.02
      PostedInvoiceNo := CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",CALCDATE('<1M>',WORKDATE));

      // [WHEN] Create Reminder with Reminder Date = 19.02, "Only Entries with Overdue Amounts" = FALSE
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<-1D>'),TRUE,FALSE);

      // [THEN] Reminder Line for Posted Sales Invoice "B" is added
      VerifyReminderLineExists(ReminderNo,PostedInvoiceNo);
    END;

    [Test]
    PROCEDURE ReminderWithGracePeriodBoardDate@49();
    VAR
      Customer@1000 : Record 18;
      ReminderLine@1001 : Record 296;
      PostedInvoiceNo@1002 : Code[20];
      ReminderNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 379271] Reminder Line should be created when Due Date plus Grace Period is equally then Reminder Date and "Only Entries with Overdue Amounts" = FALSE
      Initialize;

      // [GIVEN] Customer with Reminder Code and Grace Period = 20 days and Payment Terms Code = "P"
      CreateCustomerWithPaymentTerms(Customer);
      // [GIVEN] Posted Sales Invoice "A" with Due Date = 01.01
      CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",WORKDATE);
      // [GIVEN] Posted Sales Invoice "B" with Due Date = 01.02
      PostedInvoiceNo := CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",CALCDATE('<1M>',WORKDATE));

      // [WHEN] Create Reminder with Reminder Date = 20.02, "Only Entries with Overdue Amounts" = FALSE
      ReminderNo := CreateReminder(Customer."No.",GetSalesInvoiceDueDate(PostedInvoiceNo) + 1,TRUE,FALSE);

      // [THEN] Reminder Line for Posted Sales Invoice "B" is added to section "Not Due"
      FilterReminderLine(
        ReminderLine,ReminderNo,PostedInvoiceNo,ReminderLine."Line Type"::"Not Due",ReminderLine."Document Type"::Invoice);
      Assert.RecordIsNotEmpty(ReminderLine);
      // [THEN] Reminder Line for Posted Sales Invoice "B" is not added to section ReminderLine
      FilterReminderLine(
        ReminderLine,ReminderNo,PostedInvoiceNo,ReminderLine."Line Type"::"Reminder Line",ReminderLine."Document Type"::Invoice);
      Assert.RecordIsEmpty(ReminderLine);
    END;

    [Test]
    PROCEDURE ReminderWithGRacePeriodPaymentOrRefund@70();
    VAR
      Customer@1000 : Record 18;
      ReminderLine@1001 : Record 296;
      PaymentNo@1002 : Code[20];
      ReminderNo@1003 : Code[20];
      PostedInvoiceNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 379583] Reminder Line should be created when Due Date plus Grace Period and "Only Entries with Overdue Amounts" = TRUE with document type = Payment of Refund
      Initialize;

      // [GIVEN] Customer with Reminder Code and Grace Period = 20 days
      CreateCustomer(Customer);
      // [GIVEN] Posted Sales Invoice "A" with Due Date = 01.01
      // This sales invoice needed to make sure that Reminder will be created
      PostedInvoiceNo := CreateAndPostSalesInvoiceWithPostingDate(Customer."No.",WORKDATE);
      // [GIVEN] Posted Payment "B" with Due Date = 01.02
      PaymentNo := MakePaymentOfInvoice(Customer."No.",PostedInvoiceNo,CALCDATE('<1M>',WORKDATE));

      // [WHEN] Create Reminder with Reminder Date = 05.02, "Only Entries with Overdue Amounts" = TRUE
      ReminderNo := CreateReminder(Customer."No.",GetPaymentDueDate(PaymentNo) + 5,TRUE,TRUE);

      // [THEN] Reminder Line for Payment "B" is added to section "Not Due"
      FilterReminderLine(ReminderLine,ReminderNo,PaymentNo,ReminderLine."Line Type"::"Not Due",ReminderLine."Document Type"::Payment);
      Assert.RecordIsNotEmpty(ReminderLine);
    END;

    LOCAL PROCEDURE Initialize@11();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AddDueDateCalcOnReminderLevel@48(ReminderTermsCode@1001 : Code[10]);
    VAR
      ReminderLevel@1000 : Record 293;
    BEGIN
      // Update Random Due Date Calculation on First Grace Period of Reminder Level.
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDSET;
      REPEAT
        EVALUATE(ReminderLevel."Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      UNTIL ReminderLevel.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateReminderDate@43(ReminderTermsCode@1000 : Code[10];PostedInvoiceNo@1003 : Code[20];Period@1001 : Text[10]) ReminderDate : Date;
    VAR
      ReminderLevel@1002 : Record 293;
      DateDifference@1004 : DateFormula;
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDFIRST;
      EVALUATE(DateDifference,Period);
      ReminderDate := CALCDATE(DateDifference,CALCDATE(ReminderLevel."Grace Period",GetSalesInvoiceDueDate(PostedInvoiceNo)));
    END;

    LOCAL PROCEDURE CreateAndIssueFirstReminder@19(VAR Customer@1000 : Record 18;VAR ReminderLevel@1001 : Record 293) PostedInvoiceNo : Code[20];
    VAR
      ReminderDate@1002 : Date;
    BEGIN
      // Setup: Create and Post Sales Invoice. Create Level 1 Reminder and Issue it.
      PostedInvoiceNo := CreateAndPostSalesInvoice(Customer);

      // Find Reminder Level, Create Level 1 and Level 2 Reminders for Customer and Issue them.
      ReminderLevel.SETRANGE("Reminder Terms Code",Customer."Reminder Terms Code");
      ReminderLevel.FINDSET;
      ReminderDate := CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>');
      CreateAndIssueReminder(Customer."No.",ReminderDate,FALSE);
    END;

    LOCAL PROCEDURE CreateAndIssueReminder@30(CustomerNo@1002 : Code[20];ReminderDate@1000 : Date;GracePeriodDueDate@1001 : Boolean);
    VAR
      ReminderNo@1003 : Code[20];
    BEGIN
      ReminderNo := CreateReminder(CustomerNo,ReminderDate,GracePeriodDueDate,TRUE);
      IssueReminder(ReminderNo,ReminderDate);
    END;

    LOCAL PROCEDURE CreateAndPostSalesCreditMemo@47(CustomerNo@1000 : Code[20];ReminderTermsCode@1001 : Code[10]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateSalesCreditMemo(SalesHeader,CustomerNo,ReminderTermsCode);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@24(VAR Customer@1000 : Record 18) PostedInvoiceNo : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateCustomer(Customer);
      CreateSalesInvoice(SalesHeader,Customer."No.",Customer."Reminder Terms Code");
      PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceWithPostingDate@63(CustNo@1000 : Code[20];PostingDate@1001 : Date) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateCustomer@8(VAR Customer@1000 : Record 18);
    BEGIN
      // Create a New Customer and update Reminder Terms.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",CreateReminderTerms);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerms@50(VAR Customer@1000 : Record 18);
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      CreateCustomer(Customer);
      LibraryERM.FindPaymentTerms(PaymentTerms);
      Customer."Payment Terms Code" := PaymentTerms.Code;
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@23(VAR GenJournalLine@1001 : Record 81;CustomerNo@1005 : Code[20];Amount@1006 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Create General Journal Lines to Make Payment for the Customer.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,-Amount);
    END;

    LOCAL PROCEDURE CreateReminder@28(CustomerNo@1005 : Code[20];ReminderDate@1006 : Date;GracePeriodDueDate@1000 : Boolean;OverdueEntriesOnly@1002 : Boolean) ReminderNo : Code[20];
    VAR
      CustLedgerEntry@1004 : Record 21;
      ReminderHeader@1001 : Record 295;
      CustLedgEntryLineFeeOn@1007 : Record 21;
      ReminderMake@1003 : Codeunit 392;
    BEGIN
      // Create Reminder Header with Document Date.
      CreateReminderHeader(ReminderHeader,GracePeriodDueDate,CustomerNo,ReminderDate);

      // Suggest Reminder Lines with Options: Overdue Entries Only,Include Entries On Hold.
      ReminderMake.SuggestLines(ReminderHeader,CustLedgerEntry,OverdueEntriesOnly,FALSE,CustLedgEntryLineFeeOn);
      ReminderMake.Code;
      ReminderNo := ReminderHeader."No.";
    END;

    LOCAL PROCEDURE CreateReminderAndVerifyLines@65(Customer@1000 : Record 18;PostedInvoiceNo@1001 : Code[20]);
    VAR
      ReminderNo@1002 : Code[20];
    BEGIN
      // Exercise: Create Reminder after First Grace Period.
      ReminderNo :=
        CreateReminder(Customer."No.",CalculateReminderDate(Customer."Reminder Terms Code",PostedInvoiceNo,'<1D>'),FALSE,TRUE);

      // Verify: Verify Amount and Additional Fee on Reminder Lines.
      VerifyAmountAndAddnlFeeOnLines(ReminderNo,PostedInvoiceNo);
    END;

    LOCAL PROCEDURE CreateReminderAndVerifyNoLines@34(CustomerNo@1001 : Code[20];ReminderDate@1000 : Date);
    VAR
      ReminderNo@1002 : Code[20];
    BEGIN
      // Create Level Two Reminder as per the option selected
      ReminderNo := CreateReminder(CustomerNo,ReminderDate,FALSE,TRUE);

      // Verify: Verify thay no Reminder Lines exists.
      VerifyNoReminderLines(ReminderNo);
    END;

    LOCAL PROCEDURE CreateReminderHeader@5(VAR ReminderHeader@1000 : Record 295;GracePeriodDueDate@1004 : Boolean;CustomerNo@1002 : Code[20];DocumentDate@1003 : Date);
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.VALIDATE("Document Date",DocumentDate);
      IF NOT GracePeriodDueDate THEN
        ReminderHeader.VALIDATE("Due Date",ReminderHeader."Document Date");
      ReminderHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderLevel@6(ReminderTermsCode@1000 : Code[10];GracePeriod@1002 : Integer;AdditionalFee@1003 : Decimal);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      // Create Reminder Level with a Random Grace Period and a Random Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(GracePeriod) + 'D>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",AdditionalFee);
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTerms@7() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
      Counter@1002 : Integer;
      GracePeriod@1003 : Integer;
      AdditionalFee@1001 : Decimal;
    BEGIN
      // Create a new Reminder Term and take Random Minimum Amount Greater than 10.
      LibraryERM.CreateReminderTerms(ReminderTerms);
      ReminderTerms.VALIDATE("Minimum Amount (LCY)",10 * LibraryRandom.RandDec(10,2));
      ReminderTerms.MODIFY(TRUE);

      // Create Levels for Reminder Term, Create Random Reminder Levels. Minimum 3 Levels are required. Take a Random Grace Period,
      // Additional Fee. Make sure that the next Reminder Level has a greater Grace Period and Additional Fee than Earlier one.
      GracePeriod := 5 * LibraryRandom.RandInt(5);
      AdditionalFee := 10 * LibraryRandom.RandInt(10);
      FOR Counter := 1 TO 2 + LibraryRandom.RandInt(5) DO BEGIN
        CreateReminderLevel(ReminderTerms.Code,GracePeriod,AdditionalFee);
        GracePeriod := GracePeriod + LibraryRandom.RandInt(5);
        AdditionalFee += AdditionalFee;
      END;
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateSalesCreditMemo@39(VAR SalesHeader@1002 : Record 36;SellToCustomerNo@1004 : Code[20];ReminderTermsCode@1000 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
      ReminderTerms@1001 : Record 292;
    BEGIN
      // Create a Sales Header.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SellToCustomerNo);

      // Create Sales Line with Random Quantity. Update Unit Price and Quantity to Ship on Sales Line.
      ReminderTerms.GET(ReminderTermsCode);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,
        SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",ReminderTerms."Minimum Amount (LCY)");
      SalesLine.VALIDATE("Qty. to Ship",0);  // Qty to Ship must be zero in Sales Credit Memo.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@31(VAR SalesHeader@1001 : Record 36;CustomerNo@1004 : Code[20];ReminderTermsCode@1005 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
      ReminderTerms@1002 : Record 292;
      Counter@1006 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);

      // Create Multiple Sales Lines with Random Quantity and Unit Price. Take Unit Price greater than Reminder Terms Minimum Amount.
      ReminderTerms.GET(ReminderTermsCode);
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,
          SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
        SalesLine.VALIDATE("Unit Price",10 + LibraryRandom.RandDec(10,2) * ReminderTerms."Minimum Amount (LCY)");
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSalesInvoiceDueDate@38(No@1000 : Code[20]) : Date;
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET(No);
      EXIT(SalesInvoiceHeader."Due Date");
    END;

    LOCAL PROCEDURE GetPaymentDueDate@53(PaymentNo@1000 : Code[20]) : Date;
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.SETRANGE("Document No.",PaymentNo);
      CustLedgerEntry.FINDFIRST;
      EXIT(CustLedgerEntry."Due Date");
    END;

    LOCAL PROCEDURE IssueReminder@37(ReminderNo@1002 : Code[20];ReminderDate@1001 : Date);
    VAR
      ReminderHeader@1000 : Record 295;
      ReminderIssue@1003 : Codeunit 393;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      ReminderIssue.Set(ReminderHeader,FALSE,ReminderDate);
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE MakePaymentOfInvoice@14(CustomerNo@1005 : Code[20];DocumentNo@1006 : Code[20];PostingDate@1001 : Date) : Code[20];
    VAR
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1004 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS(Amount);
      CreateGeneralJournalLine(GenJournalLine,CustomerNo,CustLedgerEntry.Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE FilterReminderLine@44(VAR ReminderLine@1000 : Record 296;ReminderNo@1002 : Code[20];DocumentNo@1001 : Code[20];LineType@1003 : Option;DocumentType@1004 : Option);
    BEGIN
      WITH ReminderLine DO BEGIN
        SETRANGE("Reminder No.",ReminderNo);
        SETRANGE("Line Type",LineType);
        SETRANGE(Type,Type::"Customer Ledger Entry");
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
      END;
    END;

    LOCAL PROCEDURE VerifyAddnlFeeOnReminderLines@16(ReminderNo@1000 : Code[20];ReminderTermsCode@1005 : Code[10];ReminderLevelNo@1003 : Integer);
    VAR
      ReminderLine@1001 : Record 296;
      ReminderLevel@1004 : Record 293;
    BEGIN
      ReminderLevel.GET(ReminderTermsCode,ReminderLevelNo);
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Additional Fee");
      ReminderLine.SETFILTER(Type,'<>''''');
      ReminderLine.FINDFIRST;
      Assert.AreEqual(
        ReminderLevel."Additional Fee (LCY)",ReminderLine.Amount,
        STRSUBSTNO(AmountErr,ReminderLine.FIELDCAPTION(Amount),ReminderLevel."Additional Fee (LCY)",
          ReminderLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyAmountAndAddnlFeeOnLines@54(ReminderNo@1000 : Code[20];PostedDocumentNo@1001 : Code[20]);
    VAR
      ReminderHeader@1002 : Record 295;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      VerifyAmountOnReminderLines(ReminderHeader."No.",PostedDocumentNo);
      VerifyAddnlFeeOnReminderLines(ReminderHeader."No.",ReminderHeader."Reminder Terms Code",ReminderHeader."Reminder Level");
    END;

    LOCAL PROCEDURE VerifyAmountMultiInvoiceLines@60(CustomerNo@1001 : Code[20];ReminderNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
      ReminderLine@1003 : Record 296;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Reminder Line");
      ReminderLine.SETRANGE("Document Type",ReminderLine."Document Type"::Invoice);
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"Customer Ledger Entry");
      ReminderLine.FINDSET;

      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS("Original Amount");
        Assert.AreNearlyEqual(
          CustLedgerEntry."Original Amount",ReminderLine."Original Amount",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
          STRSUBSTNO(AmountErr,ReminderLine.FIELDCAPTION("Original Amount"),CustLedgerEntry."Original Amount",
            ReminderLine.TABLECAPTION));
        ReminderLine.NEXT;
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyAmountOnReminderLines@15(ReminderNo@1000 : Code[20];DocumentNo@1003 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
      SalesInvoiceHeader@1005 : Record 112;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Reminder Line");
      ReminderLine.SETRANGE("Document Type",ReminderLine."Document Type"::Invoice);
      ReminderLine.FINDFIRST;
      SalesInvoiceHeader.GET(DocumentNo);
      SalesInvoiceHeader.CALCFIELDS("Amount to Customer");
      Assert.AreNearlyEqual(
        SalesInvoiceHeader."Amount to Customer",ReminderLine."Original Amount",LibraryERM.GetInvoiceRoundingPrecisionLCY,
        STRSUBSTNO(AmountErr,ReminderLine.FIELDCAPTION("Original Amount"),
          SalesInvoiceHeader."Amount to Customer",ReminderLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyDueDateOnReminderHeader@32(ReminderHeaderNo@1003 : Code[20];DueDateCalculation@1002 : DateFormula);
    VAR
      ReminderHeader@1000 : Record 295;
      DueDate@1001 : Date;
    BEGIN
      ReminderHeader.GET(ReminderHeaderNo);
      DueDate := CALCDATE(DueDateCalculation,ReminderHeader."Document Date");
      Assert.AreEqual(
        DueDate,ReminderHeader."Due Date",'Due Date must be calculated according to Reminder Level Due Date Calculation.');
    END;

    LOCAL PROCEDURE VerifyNoReminderLines@13(ReminderNo@1000 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      Assert.IsTrue(ReminderLine.ISEMPTY,'Reminder Lines must not exist.');
    END;

    LOCAL PROCEDURE VerifyOverdueEntry@75(ReminderNo@1001 : Code[20]) : Boolean;
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"Customer Ledger Entry");
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Not Due");
      EXIT(ReminderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE VerifyReminderLine@27(ReminderNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      ReminderLine@1004 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"G/L Account");
      ReminderLine.FINDFIRST;
      ReminderLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyReminderLineDoesNotExist@57(ReminderNo@1000 : Code[20];PostedInvoiceNo@1002 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
    BEGIN
      FilterReminderLine(
        ReminderLine,ReminderNo,PostedInvoiceNo,ReminderLine."Line Type"::"Reminder Line",ReminderLine."Document Type"::Invoice);
      Assert.RecordIsEmpty(ReminderLine);
    END;

    LOCAL PROCEDURE VerifyReminderLineExists@41(ReminderNo@1000 : Code[20];PostedInvoiceNo@1002 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
    BEGIN
      FilterReminderLine(
        ReminderLine,ReminderNo,PostedInvoiceNo,ReminderLine."Line Type"::"Not Due",ReminderLine."Document Type"::Invoice);
      Assert.RecordIsNotEmpty(ReminderLine);
    END;

    BEGIN
    {
      // [FEATURE] [Reminder] [Reminder Grace Period]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute

      Test to verify functionality of Reminder with Grace Period and Due Dates.
        1. Create and Verify the Reminder for a document that is not Overdue.
        2. Create and Verify the Reminder for a document on a date before Grace Period End.
        3. Create and Verify the Reminder for a document on a date of Grace Period End.
        4. Create and Verify the Reminder for a document on a date After Grace Period End.
        5. Create and Verify the Reminder for a document With Negative Amount.
        6. Create and Verify the Second Reminder for a document on a Date of First Grace Period End.
        7. Create and Verify the Second Reminder for a document on a Date of Second Grace Period End.
        8. Create and Verify the Second Reminder for a document on a Date of First and Second Grace Period End.
        9. Create and Verify the Second Reminder for a document on a Date of First Grace Period End and First Reminder Due Date.
       10. Create and Verify the Second Reminder for a document on a Date of Second Grace Period End and First Reminder Due Date.
       11. Create and Verify the Second Reminder for a document After Date of First, Second Grace Period and First Reminder Due Date.
       12. Create and Verify the Third Reminder for a document on the Date of Third Grace Period.
       13. Create and Verify the Third Reminder for a document After the Date of Third Grace Period.
       14. Create and Verify the Reminder Due Date as per Reminder Level Due Date Calculation.
       15. Create and Verify the Reminder for multiple documents.
       16. Check that Reminder Line Exist after Suggesting Reminder Lines.
       17. Check that no Overdue Entry exist while Suggesting Reminder Line and Entries With Overdue Amount Field is set to TRUE.
       18. Check that Overdue Entry exist while Suggesting Reminder Line and Entries With Overdue Amount Field is set to FALSE.

      There is no Test Case TFS IDs associated for these cases.
      Covers Test Cases for WI: 118884
        ------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                    TFS ID
        ------------------------------------------------------------------------------------------------------------------
        ReminderNotOverdue, ReminderBeforeGracePeriod, ReminderOnGracePeriod,
        ReminderAfterGracePeriod, ReminderNegativeAmount, ReminderOnFirstGracePeriod,
        ReminderOnSecondGracePeriod, ReminderBothGracePeriod,                                                 118884
        ReminderOnFirstReminderDueDate, ReminderOnDueDatSecGracePeriod
        ReminderAfterSecondGracePeriod, ReminderOnThirdGracePeriod,
        ReminderAfterThirdGracePeriod, ReminderOnGracePeriodDueDate, ReminderForMultipleInvoices

        Covers Test Cases for WI: 243594
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        ReminderLineCheck                                        121718

        Covers Test Cases for WI: 253543
        ------------------------------------------------------------------------------
        Test Function Name                                              TFS ID
        ------------------------------------------------------------------------------
        ReminderWithOverdueEntriesYes, ReminderWithOverdueEntriesNo     243869
    }
    END.
  }
}

