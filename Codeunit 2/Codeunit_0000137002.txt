OBJECT Codeunit 137002 SCM WIP Costing Addnl Currency
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryCosting@1004 : Codeunit 132200;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryManufacturing@1005 : Codeunit 132202;
      LibraryERM@1090 : Codeunit 131300;
      isInitialized@1001 : Boolean;

    [Test]
    [HandlerFunctions(AdjustAddnlCurrConfirmHandler,AdjustAddnlCurrReportHandler)]
    PROCEDURE WIPAddnlReportingCurrency@99();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1003 : Record 39;
      Item@1004 : Record 27;
      CurrencyExchangeRate@1002 : Record 330;
      Currency@1008 : Record 4;
      ItemJournalBatch@1009 : Record 233;
      InventorySetup@1011 : Record 313;
      ProductionOrderNo@1000 : Code[20];
      AutomaticCostAdjustment@1015 : 'Never,Day,Week,Month,Quarter,Year,Always';
      AverageCostCalcType@1014 : ' ,Item,Item & Location & Variant';
      AverageCostPeriod@1013 : ' ,Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // [FEATURE] [Cost Standard]
      // [SCENARIO] Verify correct conversion for additional reporting currency when adjusting Item.

      // [GIVEN] Posted Purchase Order with Item having costing method Standard, Released Production Order created and refreshed.
      Initialize;
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,TRUE,FALSE,AutomaticCostAdjustment::Never,AverageCostCalcType::Item,AverageCostPeriod::Day);
      LibraryERM.SetAddReportingCurrency('');

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,CreateItem(Item."Costing Method"::Standard));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ProductionOrderNo := CreateRelProductionOrder(PurchaseLine);
      RefreshRelProductionOrder(ProductionOrderNo,FALSE);

      // [GIVEN] Consumption and Output Journals posted.
      CreateItemJournal(ItemJournalBatch,PurchaseLine,ItemJournalBatch."Template Type"::Consumption,ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      CreateItemJournal(ItemJournalBatch,PurchaseLine,ItemJournalBatch."Template Type"::Output,ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [WHEN] Adjust Addnl. Reporting Currency report executed after update of Addnl. Reporting Currency on G/L Setup.
      // [WHEN] Adjust Cost Item Entries report is run.
      UpdateAddnlReportingCurrency(CurrencyExchangeRate,Currency);
      LibraryCosting.AdjustCostItemEntries(PurchaseLine."No.",'');

      // [THEN] Amount & Additional-Currency Amount in G/L Entry for Inventory & WIP Accounts are correct.
      VerifyInvtWIPAmntGLEntry(CurrencyExchangeRate,Currency."Amount Rounding Precision",PurchaseLine."No.");
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@44();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateItem@1(ItemCostingMethod@1003 : Option) : Code[20];
    VAR
      Item@1001 : Record 27;
      FlushingMethod@1000 : 'Manual,Forward,Backward';
    BEGIN
      LibraryManufacturing.CreateItemManufacturing(
        Item,ItemCostingMethod,RANDOM(10),Item."Reordering Policy"::"Lot-for-Lot",FlushingMethod::Manual,'','');
      EXIT(Item."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseOrder@5(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1000 : Code[20]) : Code[20];
    BEGIN
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,ItemNo);
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseHeader@18(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      // Create Purchase Header with a selected Vendor No. and a random Vendor Invoice No.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseLine@20(VAR PurchaseLine@1003 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20]);
    BEGIN
      // Create Purchase Line with a random Item Quantity.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,RANDOM(10));
    END;

    [Normal]
    LOCAL PROCEDURE CreateRelProductionOrder@7(PurchaseLine@1000 : Record 39) : Code[20];
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,PurchaseLine."No.",PurchaseLine.Quantity);
      ProductionOrder.VALIDATE("Starting Time",TIME);
      ProductionOrder.VALIDATE("Due Date",WORKDATE);
      ProductionOrder.MODIFY(TRUE);
      EXIT(ProductionOrder."No.");
    END;

    [Normal]
    LOCAL PROCEDURE RefreshRelProductionOrder@30(ProductionOrderNo@1001 : Code[20];Direction@1002 : Boolean);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Refresh Released Production Order with False for Direction Backward.
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("No.",ProductionOrderNo);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,Direction,TRUE,TRUE,TRUE,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemJournal@8(VAR ItemJournalBatch@1001 : Record 233;PurchaseLine@1002 : Record 39;ItemJournalTemplateType@1003 : Option;ProductionOrderNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1005 : Record 83;
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      // Create Journals for Consumption and Output.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType,ItemJournalTemplate.Name);
      CreateConsumptionOutputJournal(ItemJournalLine,PurchaseLine,ItemJournalTemplate,ItemJournalBatch,ProductionOrderNo);
    END;

    [Normal]
    LOCAL PROCEDURE CreateConsumptionOutputJournal@11(VAR ItemJournalLine@1002 : Record 83;PurchaseLine@1003 : Record 39;ItemJournalTemplate@1000 : Record 82;ItemJournalBatch@1004 : Record 233;ProductionOrderNo@1006 : Code[20]);
    BEGIN
      // Create Consumption Journal or Output Journal depending on the Entry type.
      IF ItemJournalTemplate.Type = ItemJournalTemplate.Type::Consumption THEN
        ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::Consumption
      ELSE
        ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::Output;

      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type",
        PurchaseLine."No.",PurchaseLine.Quantity);

      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrderNo);
      IF ItemJournalTemplate.Type = ItemJournalTemplate.Type::Output THEN BEGIN
        ItemJournalLine.VALIDATE("Output Quantity",PurchaseLine.Quantity);
        ItemJournalLine.VALIDATE("Source No.",ProductionOrderNo);
        ItemJournalLine.VALIDATE("Order Line No.",ItemJournalLine."Line No.");
      END;
      ItemJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateAddnlReportingCurrency@4(VAR CurrencyExchangeRate@1002 : Record 330;VAR Currency@1000 : Record 4);
    VAR
      GeneralLedgerSetup@1003 : TestPage 118;
    BEGIN
      // Set Residual Gains Account and Residual Losses Account for Currency.
      UpdateResidualAccountsCurrency(CurrencyExchangeRate,Currency);
      COMMIT;

      // Update Additional Reporting Currency on G/L setup to execute Adjust Additional Reporting Currency report.
      GeneralLedgerSetup.OPENEDIT;
      GeneralLedgerSetup."Additional Reporting Currency".SETVALUE(Currency.Code);
      GeneralLedgerSetup.OK.INVOKE;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateResidualAccountsCurrency@16(VAR CurrencyExchangeRate@1001 : Record 330;VAR Currency@1002 : Record 4);
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      CurrencyExchangeRate.SETRANGE("Currency Code",Currency.Code);
      CurrencyExchangeRate.FINDFIRST;
      // Update Residual Gains Account and Residual Losses Account for the selected Currency.
      Currency.VALIDATE("Residual Gains Account",SelectGLAccountNo);
      Currency.VALIDATE("Residual Losses Account",SelectGLAccountNo);
      Currency.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectGLAccountNo@22() : Code[10];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      // Select Account from General Ledger Account of type Posting.
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.FINDFIRST;
      EXIT(GLAccount."No.");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyInvtWIPAmntGLEntry@14(CurrencyExchangeRate@1001 : Record 330;CurrencyAmntRoundingPrecision@1005 : Decimal;ItemNo@1004 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
      InventoryPostingSetup@1003 : Record 5813;
      ItemLedgerEntry@1000 : Record 32;
      Item@1006 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",Item."Inventory Posting Group");
      InventoryPostingSetup.FINDFIRST;

      // Select Quantity posted from Consumption Journal.
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Consumption);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDLAST;

      // Select Inventory Account and Check Amounts for Inventory Account.
      GLEntry.SETRANGE("G/L Account No.",InventoryPostingSetup."Inventory Account");
      GLEntry.FINDLAST;
      CheckGLEntryAmnt(GLEntry,ItemNo,ItemLedgerEntry.Quantity);
      CheckGLEntryAddnlCurrencyAmnt(CurrencyAmntRoundingPrecision,CurrencyExchangeRate,GLEntry);

      // Select WIP Account Check Amounts for WIP Account.
      GLEntry.SETRANGE("G/L Account No.",InventoryPostingSetup."WIP Account");
      GLEntry.FINDLAST;
      CheckGLEntryAmnt(GLEntry,ItemNo,ABS(ItemLedgerEntry.Quantity));
      CheckGLEntryAddnlCurrencyAmnt(CurrencyAmntRoundingPrecision,CurrencyExchangeRate,GLEntry);
    END;

    [Normal]
    LOCAL PROCEDURE CheckGLEntryAmnt@28(GLEntry@1001 : Record 17;ItemNo@1000 : Code[20];ItemLedgerEntryQuantity@1003 : Integer);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);

      // Check the generated amount and calculated Amount are equal.
      GLEntry.TESTFIELD(Amount,Item."Standard Cost" * ItemLedgerEntryQuantity);
    END;

    [Normal]
    LOCAL PROCEDURE CheckGLEntryAddnlCurrencyAmnt@29(CurrencyAmntRoundingPrecision@1004 : Decimal;CurrencyExchangeRate@1003 : Record 330;GLEntry@1001 : Record 17);
    BEGIN
      // Check the generated Additional Currency Amount and calculated Additional-Currency Amount are equal.
      GLEntry.TESTFIELD(
        "Additional-Currency Amount",
        ROUND(CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount" *
          GLEntry.Amount,
          CurrencyAmntRoundingPrecision));
    END;

    [ConfirmHandler]
    PROCEDURE AdjustAddnlCurrConfirmHandler@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler: Set Reply to True to select the Yes button.
      Reply := TRUE;
    END;

    [ReportHandler]
    PROCEDURE AdjustAddnlCurrReportHandler@13(VAR AdjustAddReportingCurrency@1000 : Report 86);
    BEGIN
      // Report Handler: Update request form with random Document No, Retained Earnings Account and run the
      // Adjust Additional Reporting Currency report.
      AdjustAddReportingCurrency.InitializeRequest(FORMAT(RANDOM(100)),SelectGLAccountNo);
      AdjustAddReportingCurrency.USEREQUESTPAGE(FALSE);
      AdjustAddReportingCurrency.RUN;
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Cost Item Entries] [ACY] [SCM]
      Test for WIP Costing:
        1. Test Conversion when selecting additional reporting currency.

      This test code unit replaces Manual Test Suite (19684).

      TFS_TS_ID = 19684
      Covers Test cases:
        TC1300 TFS_TC_ID = 32228 and 12618
    }
    END.
  }
}

