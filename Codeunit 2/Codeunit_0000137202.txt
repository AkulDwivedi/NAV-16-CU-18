OBJECT Codeunit 137202 SCM Analysis Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1002 : Codeunit 132201;
      LibraryDimension@1006 : Codeunit 131001;
      isInitialized@1000 : Boolean;
      ItemNo@1003 : Code[20];
      CustomerNo@1005 : Code[20];
      DimensionCode@1007 : Code[20];

    [Test]
    [HandlerFunctions(ItemListPageHandler)]
    PROCEDURE AnalysisLineForItem@2();
    VAR
      Item@1000 : Record 27;
      AnalysisLine@1002 : Record 7114;
      InsertAnalysisLine@1001 : Codeunit 7111;
      AnalysisLineTemplateName@1003 : Code[10];
    BEGIN
      // Setup: Create Item. Create Analysis Line template and partial Analysis Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      ItemNo := Item."No.";
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::Item);

      // Exercise: Insert Analysis Line with Type - Item.
      InsertAnalysisLine.InsertItems(AnalysisLine);

      // Verify: Check that the Analysis line for the particular Template and Type is available.
      VerifyAnalysisLine(AnalysisLine.Type::Item,AnalysisLineTemplateName);
    END;

    [Test]
    [HandlerFunctions(DimensionValueListPageHandler)]
    PROCEDURE AnalysisLineForItemGroups@7();
    VAR
      AnalysisLine@1002 : Record 7114;
      Dimension@1010 : Record 348;
      InventorySetup@1008 : Record 313;
      InsertAnalysisLine@1001 : Codeunit 7111;
      AnalysisLineTemplateName@1000 : Code[10];
    BEGIN
      // Setup: Select Dimension Code. Update Item group Dimension code. Create Analysis Line template and partial Analysis Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      DimensionCode := Dimension.Code;
      InventorySetup.GET;
      UpdateInventorySetup(DimensionCode);
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::"Item Group");

      // Exercise: Insert Analysis Line with Type - Item Group.
      InsertAnalysisLine.InsertItemGrDim(AnalysisLine);

      // Verify: Check that the Analysis line for the particular Template and Type is available.
      VerifyAnalysisLine(AnalysisLine.Type::"Item Group",AnalysisLineTemplateName);

      // Tear Down.
      UpdateInventorySetup(InventorySetup."Item Group Dimension Code");
    END;

    [Test]
    [HandlerFunctions(CustomerListPageHandler)]
    PROCEDURE AnalysisLineForCustomer@3();
    VAR
      Customer@1000 : Record 18;
      AnalysisLine@1002 : Record 7114;
      InsertAnalysisLine@1001 : Codeunit 7111;
      LibrarySales@1004 : Codeunit 130509;
      AnalysisLineTemplateName@1003 : Code[10];
    BEGIN
      // Setup: Create Customer. Create Analysis Line template and partial Analysis Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CustomerNo := Customer."No.";
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::Customer);

      // Exercise: Insert Analysis Line with Type - Customer.
      InsertAnalysisLine.InsertCust(AnalysisLine);

      // Verify: Check that the Analysis line for the particular Template and Type is available.
      VerifyAnalysisLine(AnalysisLine.Type::Customer,AnalysisLineTemplateName);
    END;

    [Test]
    [HandlerFunctions(DimensionValueListPageHandler)]
    PROCEDURE AnalysisLineForCustomerGroups@11();
    VAR
      AnalysisLine@1002 : Record 7114;
      SalesReceivablesSetup@1008 : Record 311;
      InsertAnalysisLine@1001 : Codeunit 7111;
      AnalysisLineTemplateName@1000 : Code[10];
    BEGIN
      // Setup: Select Customer Group Dimension Code. Create Analysis Line template and partial Analysis Line.
      Initialize;
      SalesReceivablesSetup.GET;
      DimensionCode := SalesReceivablesSetup."Customer Group Dimension Code";
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::"Customer Group");

      // Exercise: Insert Analysis Line with Type - Customer Group.
      InsertAnalysisLine.InsertCustGrDim(AnalysisLine);

      // Verify: Check that the Analysis line for the particular Template and Type is available.
      VerifyAnalysisLine(AnalysisLine.Type::"Customer Group",AnalysisLineTemplateName);
    END;

    [Test]
    [HandlerFunctions(DimensionValueListPageHandler)]
    PROCEDURE AnalysisLineForSalesperson@9();
    VAR
      AnalysisLine@1002 : Record 7114;
      SalesReceivablesSetup@1008 : Record 311;
      InsertAnalysisLine@1001 : Codeunit 7111;
      AnalysisLineTemplateName@1000 : Code[10];
    BEGIN
      // Setup: Select Salesperson Dimension Code. Create Analysis Line template and partial Analysis Line.
      Initialize;
      SalesReceivablesSetup.GET;
      DimensionCode := SalesReceivablesSetup."Salesperson Dimension Code";
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::"Sales/Purchase person");

      // Exercise: Insert Analysis Line with Type - Sales/Purchase person.
      InsertAnalysisLine.InsertSalespersonPurchaser(AnalysisLine);

      // Verify: Check that the Analysis line for the particular Template and Type is available.
      VerifyAnalysisLine(AnalysisLine.Type::"Sales/Purchase person",AnalysisLineTemplateName);
    END;

    [Test]
    [HandlerFunctions(ItemListPageHandler)]
    PROCEDURE AnalysesLineRowRefNoLength@5();
    VAR
      Item@1003 : Record 27;
      AnalysisLine@1002 : Record 7114;
      InsertAnalysisLine@1001 : Codeunit 7111;
      AnalysisLineTemplateName@1000 : Code[10];
    BEGIN
      // [FEATURE] [UT] [Analysis Line]
      // [SCENARIO 375383] Lenght of "Row Ref No." field of "Analysis Line" table should be brought into line with lenght of "No." field of "Item" table

      // [GIVEN] Item "I" with "No." = "X", where lenght of "X" is 20
      ItemNo := PADSTR(Item."No.",MAXSTRLEN(Item."No."),'0');
      Item.INIT;
      Item."No." := ItemNo;
      Item.INSERT;
      AnalysisLineTemplateName := CreatePartialAnalysisLine(AnalysisLine,AnalysisLine.Type::Item);

      // [WHEN] "Insert Lines" for Item "I" into Analyses Line
      InsertAnalysisLine.InsertItems(AnalysisLine);

      // [THEN] Analyses Line is created with "Row Ref No." = "X"
      WITH AnalysisLine DO BEGIN
        SETRANGE("Analysis Line Template Name",AnalysisLineTemplateName);
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        TESTFIELD("Row Ref. No.",ItemNo);
      END;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateInventorySetup@15(ItemGroupDimensionCode@1000 : Code[20]);
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Item Group Dimension Code",ItemGroupDimensionCode);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePartialAnalysisLine@19(VAR AnalysisLine@1000 : Record 7114;Type@1001 : Option) AnalysisLineTemplateName : Code[10];
    VAR
      AnalysisLineTemplate@1002 : Record 7112;
      LibraryUtility@1003 : Codeunit 131000;
      RecRef@1004 : RecordRef;
    BEGIN
      // Create New Analysis Line Template and partial Analysis Line.
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisLineTemplate."Analysis Area"::Sales);
      AnalysisLine.VALIDATE("Analysis Area",AnalysisLine."Analysis Area"::Sales);
      AnalysisLine.VALIDATE("Analysis Line Template Name",AnalysisLineTemplate.Name);
      RecRef.GETTABLE(AnalysisLine);
      AnalysisLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,AnalysisLine.FIELDNO("Line No.")));
      AnalysisLine.VALIDATE(Type,Type);
      AnalysisLineTemplateName := AnalysisLine."Analysis Line Template Name";
    END;

    LOCAL PROCEDURE VerifyAnalysisLine@14(Type@1002 : Option;AnalysisLineTemplateName@1000 : Code[10]);
    VAR
      AnalysisLine@1001 : Record 7114;
    BEGIN
      // Verify that Analysis line record for the particular Analysis line template is available.
      AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLineTemplateName);
      AnalysisLine.SETRANGE(Type,Type);
      AnalysisLine.FINDFIRST;
    END;

    [ModalPageHandler]
    PROCEDURE ItemListPageHandler@1(VAR ItemList@1000 : Page 31;VAR Response@1001 : Action);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      ItemList.SETRECORD(Item);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionValueListPageHandler@8(VAR DimensionValueList@1001 : Page 560;VAR Response@1000 : Action);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      DimensionValueList.SETRECORD(DimensionValue);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerListPageHandler@6(VAR CustomerList@1001 : Page 22;VAR Response@1000 : Action);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerList.SETRECORD(Customer);
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [Analysis Line] [SCM]
      Test Analysis Lines:
       1. Create Item. Create Analysis Line template and Analysis Line.
          Check Analysis Line record of Type: Item is inserted successfully.
       2. Select Dimension Code. Create Analysis Line template and Analysis Line.
          Check Analysis Line record of Type: Item Group is inserted successfully.
       3. Create Customer. Create Analysis Line template and Analysis Line.
          Check Analysis Line record of Type: Customer is inserted successfully.
       4. Select Customer Group Dimension Code. Create Analysis Line template and Analysis Line.
          Check Analysis Line record of Type: Customer Group is inserted successfully.
       5. Select Salesperson Dimension Code. Create Analysis Line template and Analysis Line.
          Check Analysis Line record of Type: Sales/purchase person is inserted successfully.

        Covers Test Cases:
        -------------------------------------------------------------------
        Test Function Name                       TFS ID
        -------------------------------------------------------------------
        AnalysisLineForItem                      129300
        AnalysisLineForItemGroups                129300
        AnalysisLineForCustomer                  129300
        AnalysisLineForCustomerGroups            129300
        AnalysisLineForSalesperson               129300
    }
    END.
  }
}

