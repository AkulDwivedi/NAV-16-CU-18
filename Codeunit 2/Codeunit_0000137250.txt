OBJECT Codeunit 137250 SCM Inventory Order Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryManufacturing@1008 : Codeunit 132202;
      LibraryPlanning@1005 : Codeunit 132203;
      LibraryPurchase@1012 : Codeunit 130512;
      LibrarySales@1011 : Codeunit 130509;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      WhseItemLineRegister@1007 : TextConst 'ENU=Do you want to register the journal lines?';
      WhseItemLineRegistered@1009 : TextConst 'ENU=The journal lines were successfully registered.';
      OrderTrackingPolicyMsg@1015 : TextConst 'ENU=The change will not affect existing entries.';
      OpenOrderTrackingMsg@1013 : TextConst 'ENU=There are no order tracking entries for this line.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingForReleasedProductionOrder@9();
    VAR
      ProdOrderLine@1017 : Record 5406;
    BEGIN
      // Verify Order Tracking Line for Released Production Order created after Calculate Regenerative Plan and Carry Out Action Message on Planning Worksheet.

      // Setup.
      Initialize;
      SetupForReleasedProductionOrder(ProdOrderLine);

      // Exercise: Open Order Tracking Page.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking Line for Production Order. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgFromPlannedProdOrder@19();
    VAR
      ComponentItem@1000 : Record 27;
      ComponentItem2@1001 : Record 27;
      ProductionItem@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder2@1008 : Record 5405;
      ProdOrderLine@1006 : Record 5406;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Production and Component Item.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. on Production Item and creation of Planned & Firm Planned Production Orders.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per quantity is 1 in BOM Line.
      Quantity := LibraryRandom.RandInt(50);  // Random Integer Value required.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,ProductionItem."No.",Quantity,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::"Firm Planned",ProductionOrder2."Source Type"::Item,ComponentItem2."No.",Quantity,
        WORKDATE);
      EnqueueForOrderTracking(ProductionOrder2.Quantity,Quantity,0,ProductionOrder2."Source No.");  // Enqueue values for Order Tracking page handler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder2.Status,ProductionOrder2."Source No.",'');  // Use blank for Location Code.

      // Exercise: Check order tracking for Firm Planned Production Order Line.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking Line for Firm Planned Production Order Line which have Component Item, used in another Released Prod. Order as a component. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForCompFromPlannedProdOrder@57();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
      Quantity@1003 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Firm Planned Production Order Component Item, which have Planned Production Order.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);  // Random Integer Value required.
      SetupForOrderTracking(ProductionOrder,Quantity);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder);
      ProdOrderComponent.FINDFIRST;  // Find component Item 1.
      EnqueueForOrderTracking(ProductionOrder.Quantity,-Quantity,0,ProdOrderComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check order tracking for Component items of Firm Planned Production Order Line.
      OpenOrderTrkgForProductionComponent(ProdOrderComponent);

      // Verify: Verify Order Tracking Line for Firm Planned Production Order Component Item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForUnpalnnedCompOnFirmPlannedProdOrder@60();
    VAR
      ProductionOrder@1003 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
      Quantity@1000 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Firm Planned Production Order Component Item which used in another Firm Planned Prod. Order as a Component Item.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);  // Random Integer Value required.
      SetupForOrderTracking(ProductionOrder,Quantity);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder);
      ProdOrderComponent.FINDLAST;  // Find component Item 2.
      EnqueueForOrderTracking(ProductionOrder.Quantity,-Quantity,0,ProdOrderComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check order tracking for Component items of Firm Planned Production Order Line.
      OpenOrderTrkgForProductionComponent(ProdOrderComponent);

      // Verify: Verify Order Tracking Line for Firm Planned Production Order Component Item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForPlanningCompFromPurchOrder@93();
    VAR
      RequisitionLine@1000 : Record 246;
      PlanningComponent@1005 : Record 99000829;
      Quantity@1001 : Decimal;
      PurchaseQuantity@1004 : Decimal;
      UntrackedQuantity@1002 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Planning line Component Item, which have Purchase Order.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(15);  // Random Integer Value required.
      PurchaseQuantity := Quantity + LibraryRandom.RandInt(5);
      SetupForPlanningWkstComponentOrderTrkg(RequisitionLine,Quantity,PurchaseQuantity);
      UntrackedQuantity := RequisitionLine.Quantity - PurchaseQuantity;
      FindPlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.FINDFIRST;  // Find Component Item 1.
      EnqueueForOrderTracking(
        RequisitionLine.Quantity,UntrackedQuantity - RequisitionLine.Quantity,UntrackedQuantity,PlanningComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise.
      OpenOrderTrkgForPlanningComponent(PlanningComponent);

      // Verify: Verify Order Tracking Line for Planning line Component Item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForPlanningCompFromPlanningLine@68();
    VAR
      RequisitionLine@1000 : Record 246;
      PlanningComponent@1005 : Record 99000829;
      Quantity@1001 : Decimal;
      PurchaseQuantity@1004 : Decimal;
      UntrackedQuantity@1002 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Planning line Component Item, which have another Planning line.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(15);  // Random Integer Value required.
      PurchaseQuantity := Quantity + LibraryRandom.RandInt(5);
      SetupForPlanningWkstComponentOrderTrkg(RequisitionLine,Quantity,PurchaseQuantity);
      UntrackedQuantity := RequisitionLine.Quantity - Quantity;
      FindPlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.FINDLAST;  // Find Component Item 2.
      EnqueueForOrderTracking(
        RequisitionLine.Quantity,UntrackedQuantity - RequisitionLine.Quantity,UntrackedQuantity,PlanningComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise.
      OpenOrderTrkgForPlanningComponent(PlanningComponent);

      // Verify: Verify Order Tracking Line for Planning line Component Item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForRelProdOrderFromPlanningLine@38();
    VAR
      ComponentItem@1000 : Record 27;
      ComponentItem2@1001 : Record 27;
      ProductionItem@1002 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      RequisitionLine@1011 : Record 246;
      ProductionOrder@1007 : Record 5405;
      ProdOrderLine@1012 : Record 5406;
      SchedulingDirection@1008 : 'Back';
      UntrackedQuantity@1006 : Decimal;
      Quantity@1009 : Decimal;
      TemplateType@1004 : 'Req.,For. Labor,Planning';
    BEGIN
      // Verify: Verify Order Tracking Line for Component Item on Released Production Order Line, which have Planning Line and used as component of Production item on Planning Line.

      // Setup: Create Production and Component Item.
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking & Action Msg.");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,
        ComponentItem2."Order Tracking Policy"::"Tracking & Action Msg.");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",
        ProductionItem."Order Tracking Policy"::"Tracking & Action Msg.");

      // Update BOM No. on Production Item and creation of Planning Line, Calculate Quantity and Untracked Quantity.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per quantity is 1 in BOM Line.
      Quantity := LibraryRandom.RandInt(15);  // Random Integer Value required.
      CreateRequisitiontLine(RequisitionLine,TemplateType::Planning,ComponentItem2."No.",Quantity,WORKDATE);
      UntrackedQuantity := Quantity;  // Save Planning Line Quantity for ComponentItem2 as a Untracked Quantity.
      CreateRequisitiontLine(
        RequisitionLine,TemplateType::Planning,ProductionItem."No.",Quantity + LibraryRandom.RandInt(5),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));

      // Refresh Planning and Production Order & Create Released Production Orders.
      FindRequisitionLine(RequisitionLine,ProductionItem."No.",'');  // Used blank for Location.
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,SchedulingDirection::Back,TRUE,TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ComponentItem2."No.",
        RequisitionLine.Quantity,WORKDATE);
      Quantity := RequisitionLine.Quantity - UntrackedQuantity;  // Calculate Order Tracking quantity.
      EnqueueForOrderTracking(ProductionOrder.Quantity,Quantity,UntrackedQuantity,ProductionOrder."Source No.");  // Enqueue values for Order Tracking page handler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."Source No.",'');  // Use blank for Location Code.

      // Excercise. Check order tracking for Released Production Order Line.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking Line for Component Item on Released Production Order Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgFromItemLedgerEntry@58();
    VAR
      PlanningComponent@1002 : Record 99000829;
      RequisitionLine@1003 : Record 246;
      PurchaseQuantity@1000 : Decimal;
      Quantity@1001 : Decimal;
      UntrackedQuantity@1004 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Component Lines of Planning Worksheet Line, component item partially received from purchase order.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Random Integer Value required.
      PurchaseQuantity := Quantity + LibraryRandom.RandInt(10);  // Purchase Quantity should be more than Requisition Line Quantity.
      SetupForPlanningWkshLineOrderTrkg(RequisitionLine,Quantity,PurchaseQuantity);
      FindPlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.FINDFIRST;  // Find Component Item 1.
      UntrackedQuantity := RequisitionLine.Quantity - PurchaseQuantity;
      EnqueueForOrderTracking(
        RequisitionLine.Quantity,UntrackedQuantity - RequisitionLine.Quantity,UntrackedQuantity,PlanningComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check order tracking for Requistition Line Component Items.
      OpenOrderTrkgForPlanningComponent(PlanningComponent);

      // Verify Order Tracking Line for Component Lines of Planning Worksheet Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgFromPlanningWksh@40();
    VAR
      PlanningComponent@1003 : Record 99000829;
      RequisitionLine@1002 : Record 246;
      PurchaseQuantity@1000 : Decimal;
      Quantity@1001 : Decimal;
      UntrackedQuantity@1004 : Decimal;
    BEGIN
      // Verify Order Tracking Line for Component Lines of Planning Worksheet Line, component item partially exist in Planning Worksheet Line.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Random Integer Value required.
      PurchaseQuantity := Quantity + LibraryRandom.RandInt(10);  // Purchase Quantity should be more than Requisition Line Quantity.
      SetupForPlanningWkshLineOrderTrkg(RequisitionLine,Quantity,PurchaseQuantity);
      FindPlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.FINDLAST;  // Find Component Item 2.
      UntrackedQuantity := RequisitionLine.Quantity - Quantity;
      EnqueueForOrderTracking(
        RequisitionLine.Quantity,UntrackedQuantity - RequisitionLine.Quantity,UntrackedQuantity,PlanningComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check order tracking for Requistition Line Component Items.
      OpenOrderTrkgForPlanningComponent(PlanningComponent);

      // Verify Order Tracking Line for Component Lines of Planning Worksheet Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgOnRlsdProdOrderFromPlanningWkshLine@83();
    VAR
      ComponentItem@1002 : Record 27;
      ComponentItem2@1009 : Record 27;
      ProductionItem@1000 : Record 27;
      ComponentItem3@1003 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionOrder@1007 : Record 5405;
      ProdOrderLine@1001 : Record 5406;
      RequisitionLine@1010 : Record 246;
      Quantity@1014 : Decimal;
      UntrackedQuantity@1011 : Decimal;
      Direction@1004 : 'Forward,Backward';
      TemplateType@1006 : 'Req.,For. Labor,Planning';
    BEGIN
      // Verify Order Tracking Line for Released Production Order after creating Planning Line for Source item.

      // Setup: Create Production and Component Item.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem3,ComponentItem3."Replenishment System"::Purchase,ComponentItem3."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. on Production Item and creation of Planning Line.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per Quantity is 1 in BOM Line.
      Quantity := LibraryRandom.RandInt(10);  // Random Integer Value required.
      CreateRequisitiontLine(RequisitionLine,TemplateType::Planning,ComponentItem2."No.",Quantity,WORKDATE);
      UntrackedQuantity := Quantity;  // Save Planning Line Quantity for ComponentItem2 as a Untracked Quantity.
      CreateRequisitiontLine(
        RequisitionLine,TemplateType::Planning,ProductionItem."No.",Quantity + LibraryRandom.RandInt(10),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      FindRequisitionLine(RequisitionLine,ProductionItem."No.",'');
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,Direction::Forward,TRUE,TRUE);

      // Creation of Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ComponentItem2."No.",
        RequisitionLine.Quantity,WORKDATE);
      Quantity := ProductionOrder.Quantity - UntrackedQuantity;  // Save Reserve Quantity from Rel. Prod. Order as a Quantity.
      EnqueueForOrderTracking(ProductionOrder.Quantity,Quantity,UntrackedQuantity,ProductionOrder."Source No.");  // Enqueue values for Order Tracking page handler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."Source No.",'');  // Use blank for Location Code.

      // Exercise: Check order tracking for Released Production Order Line.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking Line for Released Production Order Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgOnFirmPlannedProdOrder@53();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      // Verify Order Tracking Line for Firm Planned Production Order Line.

      // Setup.
      Initialize;
      SetupForFirmPlannedProdOrderLine(ProductionOrder,FALSE);
      EnqueueForOrderTracking(ProductionOrder.Quantity,ProductionOrder.Quantity,0,ProductionOrder."Source No.");  // Enqueue values for Order Tracking page handler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."Source No.",'');  // Use blank for Location Code.

      // Exercise: Check order tracking for Firm Planned Production Order Line.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking Line for Firm Planned Production Order Line which have Component Item as a source item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgOnCompOfFirmPlannedProdOrder@54();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      // Verify Order Tracking Line for Component Line of Firm Planned Production Order.

      // Setup.
      Initialize;
      SetupForFirmPlannedProdOrderLine(ProductionOrder,TRUE);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder);
      ProdOrderComponent.FINDFIRST;  // Find component Item 1.
      EnqueueForOrderTracking(ProductionOrder.Quantity,-ProductionOrder.Quantity,0,ProdOrderComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check order tracking for Firm Planned Production Order's Component Items.
      OpenOrderTrkgForProductionComponent(ProdOrderComponent);

      // Verify: Verify Order Tracking Line for Firm Planned Production Order Component which used in Planned Prod. Order as a Source Item. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgFromRlsdProdOrder@13();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      // Verify Order Tracking Line for Component Lines of Released Production Order, component item have another Released Production Order.

      // Setup.
      Initialize;
      SetupForRlsdProdOrderComponentLineTrkg(ProductionOrder);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder);
      ProdOrderComponent.FINDLAST;  // Find component Item 2.
      EnqueueForOrderTracking(ProductionOrder.Quantity,-ProductionOrder.Quantity,0,ProdOrderComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check Production Order's Component Lines Order Tracking.
      OpenOrderTrkgForProductionComponent(ProdOrderComponent);

      // Verify: Verify Order Tracking Line for Production Order Component Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgFromRequisitionLine@10();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      // Verify Order Tracking Line for Component Lines of Released Production Order, component item have Requisition Line.

      // Setup.
      Initialize;
      SetupForRlsdProdOrderComponentLineTrkg(ProductionOrder);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder);
      ProdOrderComponent.FINDFIRST;  // Find component Item 1.
      EnqueueForOrderTracking(ProductionOrder.Quantity,-ProductionOrder.Quantity,0,ProdOrderComponent."Item No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check Production Order's Component Lines Order Tracking.
      OpenOrderTrkgForProductionComponent(ProdOrderComponent);

      // Verify: Verify Order Tracking Line for Produciton Order Component Line from Requisition Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForPostedPurchaseReceipt@34();
    VAR
      Item@1006 : Record 27;
      PurchaseHeader@1004 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Verify Order Tracking for Purchase Receipt Line.

      // Setup.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only");
      Quantity := LibraryRandom.RandInt(5);  // Random Integer Value required.
      CreateAndPostPurchaseOrder(PurchaseHeader,Item."No.",Quantity);
      EnqueueForOrderTracking(Quantity,Quantity,Quantity,Item."No.");

      // Exercise: Check Purchase Receipt Line Order Tracking.
      OpenOrderTrkgForPurchaseReceipt(PurchaseHeader."Last Receiving No.");

      // Verify: Verify Order Tracking for Purchase Receipt Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForSalesOrderLineFromUnpostedPurchOrder@36();
    VAR
      Item@1003 : Record 27;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1004 : Record 38;
      Quantity@1001 : Decimal;
      SalesQuantity@1000 : Decimal;
    BEGIN
      // Verify Order Tracking for Sale Order Line which have item that reserved as a Item Ledger Entry and Purchase Order.

      // Setup.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only");
      Quantity := LibraryRandom.RandInt(5);  // Random Integer Value required.
      SalesQuantity := Quantity + LibraryRandom.RandInt(5);  // Random Integer Value required.
      CreateAndPostPurchaseOrder(PurchaseHeader,Item."No.",Quantity);

      // Create Purchase Order and Sales Order
      CreatePurchaseDocument(PurchaseHeader,Item."No.",SalesQuantity - Quantity);
      CreateSalesOrder(SalesLine,'',Item."No.",SalesQuantity);  // Used blank for Location Code.

      EnqueueForOrderTracking(SalesLine.Quantity,-Quantity,0,Item."No.");  // Enqueue values for Order Tracking page handler.
      EnqueueForOrderTracking(SalesLine.Quantity,Quantity - SalesQuantity,0,Item."No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check Sales Order Line Order Tracking.
      OpenOrderTrkgForSales(SalesLine);

      // Verify: Verify Order Tracking Line for Sales Order Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrkgForSalesOrderLineFromPostedPurchOrder@41();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      PurchaseHeader@1004 : Record 38;
      Quantity@1002 : Decimal;
      SalesQuantity@1003 : Decimal;
    BEGIN
      // Verify Order Tracking for Sale Order Line which have item that reserved as a Item Ledger Entry.

      // Setup.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only");
      Quantity := LibraryRandom.RandInt(5);  // Random Integer Value required.
      CreateAndPostPurchaseOrder(PurchaseHeader,Item."No.",Quantity);
      SalesQuantity := Quantity + LibraryRandom.RandInt(5);  // Random Integer Value required.
      CreateSalesOrder(SalesLine,'',Item."No.",SalesQuantity);  // Used blank for Location Code.
      EnqueueForOrderTracking(SalesLine.Quantity,-Quantity,SalesQuantity - Quantity,Item."No.");  // Enqueue values for Order Tracking page handler.

      // Exercise: Check Sales Order Line Order Tracking.
      OpenOrderTrkgForSales(SalesLine);

      // Verify: Verify Order Tracking Line for Sales Order Line. Verification done in OrderTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingHdrPageHandler)]
    PROCEDURE OrderTrkgForSimulatedProdOrder@20();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProductionOrder2@1002 : Record 5405;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      ProdOrderLine@1005 : Record 5406;
    BEGIN
      // Verify Order Tracking for Simulated Production Order Line which have item that exist in another Simulated Prod. Order and Sales Quotes.

      // Setup: Create Item, Simulated Production Order, Sales Quote.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking & Action Msg.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Simulated,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(35),WORKDATE);
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::Simulated,ProductionOrder2."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(30),WORKDATE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,CreateCustomer(''));  // Used blank for Location Code.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ProductionOrder.Quantity + ProductionOrder2.Quantity);

      LibraryVariableStorage.Enqueue(OpenOrderTrackingMsg); // Enqueue value for message handler.
      EnqueueForOrderTracking(ProductionOrder.Quantity,ProductionOrder.Quantity,ProductionOrder.Quantity,ProductionOrder."Source No.");  // Enqueue values for Order Tracking page handler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."Source No.",'');  // Used blank for Location Code.

      // Exercise: Check Simulated Prod. Order Line Order Tracking.
      OpenOrderTrkgForProduction(ProdOrderLine);

      // Verify: Verify Order Tracking for Simulated Production Order Line. Verification done in OrderTrackingHdrPageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOutActionMsg@33(Item@1000 : Record 27;LocationCode@1001 : Code[10]);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));  // Dates based on WORKDATE.
      FindRequisitionLine(RequisitionLine,Item."No.",LocationCode);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];No@1004 : Code[20]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,No,1);  // Use blank value for Version Code and 1 for Quantity per.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@30(VAR PurchaseHeader@1000 : Record 38;No@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,No,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@16(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceType@1002 : Option;SourceNo@1003 : Code[20];Quantity@1005 : Decimal;DueDate@1004 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);
      UpdateProdOrderLine(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateCustomer@37(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@14(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;OrderTrackingPolicy@1002 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@21(VAR PurchaseHeader@1002 : Record 38;No@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No,Quantity);
    END;

    LOCAL PROCEDURE CreateRequisitiontLine@135(VAR RequisitionLine@1001 : Record 246;TemplateType@1004 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Integer;DueDate@1005 : Date);
    VAR
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      FindWorksheetTemplate(RequisitionWkshName,TemplateType);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.VALIDATE("Due Date",DueDate);  // Required Due Date less Prod. Order Date.
      RequisitionLine.VALIDATE("Action Message",RequisitionLine."Action Message"::New);
      RequisitionLine.VALIDATE("Starting Date",CALCDATE('<-1D>',DueDate));  // Take 1 because Starting Date and Ending Date should be just less than 1day of Due Date.
      RequisitionLine.VALIDATE("Ending Date",RequisitionLine."Starting Date");
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@15(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10];No@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(LocationCode));
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,No,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE),
        Quantity);  // Use Random days to calculate Shipment Date.
    END;

    LOCAL PROCEDURE CreateVendor@39() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.")
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@18(VAR WarehouseJournalLine@1002 : Record 7311;Bin@1003 : Record 7354;ItemNo@1004 : Code[20]);
    VAR
      WarehouseJournalBatch@1001 : Record 7310;
      WarehouseJournalTemplate@1000 : Record 7309;
    BEGIN
      // Use Random value for Quantity.
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,Bin."Location Code",Bin."Zone Code",Bin.Code,
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE EnqueueForOrderTracking@32(ProductionOrderQuantity@1000 : Decimal;Quantity@1001 : Decimal;UntrackedQuantity@1002 : Decimal;ItemNo@1003 : Code[20]);
    BEGIN
      // Enqueue value for verification on OrderTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ProductionOrderQuantity);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(UntrackedQuantity);
      LibraryVariableStorage.Enqueue(ItemNo);
    END;

    LOCAL PROCEDURE FindPlanningComponent@80(VAR PlanningComponent@1002 : Record 99000829;RequisitionLine@1001 : Record 246);
    BEGIN
      PlanningComponent.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.",RequisitionLine."Line No.");
    END;

    LOCAL PROCEDURE FindProdOrderComponent@51(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrder@1002 : Record 5405);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
    END;

    LOCAL PROCEDURE FindProductionOrderLine@1(VAR ProdOrderLine@1000 : Record 5406;Status@1003 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.SETRANGE("Location Code",LocationCode);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@3(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWorksheetTemplate@133(VAR RequisitionWkshName@1000 : Record 245;TemplateType@1001 : Option);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",TemplateType);
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPickZone@24(LocationCode@1140 : Code[10]) : Code[10];
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
      EXIT(Zone.Code);
    END;

    LOCAL PROCEDURE OpenOrderTrkgForPlanningComponent@61(PlanningComponent@1001 : Record 99000829);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Planning Line Component.
      OrderTracking.SetPlanningComponent(PlanningComponent);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrkgForProduction@74(ProdOrderLine@1001 : Record 5406);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Production Order.
      OrderTracking.SetProdOrderLine(ProdOrderLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrkgForProductionComponent@44(ProdOrderComponent@1001 : Record 5407);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Production Order Component.
      OrderTracking.SetProdOrderComponent(ProdOrderComponent);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrkgForPurchaseReceipt@7(No@1001 : Code[20]);
    VAR
      PostedPurchaseReceipt@1000 : TestPage 136;
    BEGIN
      // Open Order Tracking page for required Posted Purchase Receipt.
      PostedPurchaseReceipt.OPENVIEW;
      PostedPurchaseReceipt.FILTER.SETFILTER("No.",No);
      PostedPurchaseReceipt.PurchReceiptLines.OrderTracking.INVOKE;
    END;

    LOCAL PROCEDURE OpenOrderTrkgForSales@47(SalesLine@1001 : Record 37);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Sales Order.
      OrderTracking.SetSalesLine(SalesLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE SetupForOrderTracking@31(VAR ProductionOrder2@1007 : Record 5405;Quantity@1009 : Decimal);
    VAR
      ComponentItem@1000 : Record 27;
      ComponentItem2@1001 : Record 27;
      ProductionItem@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder3@1008 : Record 5405;
    BEGIN
      // Setup: Create Production and Component Item.
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. on Production Item and creation of Planned & Firm Planned Production Orders.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per quantity is 1 in BOM Line.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Planned,ProductionOrder."Source Type"::Item,ComponentItem."No.",Quantity,WORKDATE);
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::"Firm Planned",ProductionOrder2."Source Type"::Item,ProductionItem."No.",Quantity,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder3,ProductionOrder3.Status::"Firm Planned",ProductionOrder3."Source Type"::Item,ComponentItem2."No.",Quantity,
        WORKDATE);
    END;

    LOCAL PROCEDURE SetupForFirmPlannedProdOrderLine@23(VAR ProductionOrder3@1001 : Record 5405;IsComponentOrderTracking@1010 : Boolean);
    VAR
      ComponentItem@1002 : Record 27;
      ComponentItem2@1009 : Record 27;
      ComponentItem3@1003 : Record 27;
      ProductionItem@1000 : Record 27;
      ProductionItem2@1004 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionBOMHeader2@1006 : Record 99000771;
      ProductionOrder@1007 : Record 5405;
      ProductionOrder2@1012 : Record 5405;
    BEGIN
      // Create Production and Component items.
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem3,ComponentItem3."Replenishment System"::Purchase,ComponentItem3."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem2,ProductionItem2."Replenishment System"::Purchase,ProductionItem2."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. in Production Items and creation of Released & Firm Planned Porduction Orders.
      UpdateItemForBomNo(
        ProductionItem2."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader2,ComponentItem3."No.",ComponentItem2."No.",1));  // Component Item per Quantity is 1 in BOM Line.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per Quantity is 1 in BOM Line.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ComponentItem."No.",
        LibraryRandom.RandInt(50),WORKDATE);
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::"Firm Planned",ProductionOrder2."Source Type"::Item,ProductionItem."No.",
        ProductionOrder.Quantity,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder3,ProductionOrder3.Status::"Firm Planned",ProductionOrder3."Source Type"::Item,ComponentItem2."No.",
        ProductionOrder.Quantity,WORKDATE);

      IF IsComponentOrderTracking THEN
        ProductionOrder3 := ProductionOrder2;
    END;

    LOCAL PROCEDURE SetupForPlanningWkstComponentOrderTrkg@71(VAR RequisitionLine@1004 : Record 246;Quantity@1011 : Decimal;PurchaseQuantity@1009 : Decimal);
    VAR
      ComponentItem@1000 : Record 27;
      ComponentItem2@1001 : Record 27;
      ProductionItem@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
      ProductionBOMHeader@1005 : Record 99000771;
      SchedulingDirection@1008 : 'Back';
      TemplateType@1007 : 'Req.,For. Labor,Planning';
    BEGIN
      // Setup: Create Production and Component Item.
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. on Production Item and creation of Planned & Firm Planned Production Orders.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per quantity is 1 in BOM Line.
      CreateRequisitiontLine(RequisitionLine,TemplateType::Planning,ComponentItem2."No.",Quantity,WORKDATE);
      CreateAndPostPurchaseOrder(PurchaseHeader,ComponentItem."No.",PurchaseQuantity);
      CreateRequisitiontLine(
        RequisitionLine,TemplateType::Planning,ProductionItem."No.",PurchaseQuantity + LibraryRandom.RandInt(5),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      FindRequisitionLine(RequisitionLine,ProductionItem."No.",'');  // Used blank for Location.
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,SchedulingDirection::Back,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SetupForPlanningWkshLineOrderTrkg@46(VAR RequisitionLine@1011 : Record 246;Quantity@1013 : Decimal;PurchaseQuantity@1007 : Decimal);
    VAR
      ComponentItem@1002 : Record 27;
      ComponentItem2@1009 : Record 27;
      ProductionItem@1000 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      PurchaseHeader@1015 : Record 38;
      Direction@1016 : 'Forward,Backward';
      TemplateType@1018 : 'Req.,For. Labor,Planning';
    BEGIN
      // Creating 3 Component Items and 2 Production Items with Order Tacking Policy and Replanishment System.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. on Production Item.
      UpdateItemForBomNo(
        ProductionItem."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem."No.",ComponentItem2."No.",1));  // Component Item per Quantity is 1 in BOM Line.

      // Creation of Planning Worksheet and Recieve/Invoice of Purchase Order.
      CreateRequisitiontLine(RequisitionLine,TemplateType::Planning,ComponentItem2."No.",Quantity,WORKDATE);
      FindRequisitionLine(RequisitionLine,ComponentItem2."No.",'');
      CreateAndPostPurchaseOrder(PurchaseHeader,ComponentItem."No.",PurchaseQuantity);
      CreateRequisitiontLine(
        RequisitionLine,TemplateType::Planning,ProductionItem."No.",PurchaseQuantity + LibraryRandom.RandInt(5),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      FindRequisitionLine(RequisitionLine,ProductionItem."No.",'');
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,Direction::Forward,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SetupForReleasedProductionOrder@27(VAR ProdOrderLine@1020 : Record 5406);
    VAR
      Bin@1002 : Record 7354;
      ChildItem@1018 : Record 27;
      ParentItem@1014 : Record 27;
      ProductionBOMHeader@1013 : Record 99000771;
      SalesLine@1000 : Record 37;
      WarehouseJournalLine@1005 : Record 7311;
    BEGIN
      // Create Production Item. Create and register Warehouse Journal Line. Create and post Item journal Line for child Item after Calculating Whse. Adjustment. Create Sales Order. Calculate Regenerative Plan and Carry Out Action Message on Planning
      // Worksheet. Change Status of create Production Order from Firm Planned to Released.

      // Enqueue value for message handler.dler.
      LibraryVariableStorage.Enqueue(WhseItemLineRegister);
      LibraryVariableStorage.Enqueue(WhseItemLineRegistered);

      WhiteLocationSetup(Bin);
      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Order Tracking Policy"::None);
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Order Tracking Policy"::None);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItem."No.");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);

      UpdateInventoryFromWarehouseJournal(WarehouseJournalLine,Bin,ChildItem);
      CreateSalesOrder(SalesLine,Bin."Location Code",ParentItem."No.",WarehouseJournalLine.Quantity / 2);  // Take less Quantity for Sales Order.

      // Enqueue value for verification on OrderTrackingPageHandler.
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);  // Enqueue to handle Negative value in Order Tracking test case
      LibraryVariableStorage.Enqueue(0);  // Taken zero value for Untracked Quantity on Order Tracking.
      LibraryVariableStorage.Enqueue(SalesLine."No.");

      CalcRegenPlanAndCarryOutActionMsg(ParentItem,Bin."Location Code");
      FindProductionOrderLine(ProdOrderLine,ProdOrderLine.Status::"Firm Planned",ParentItem."No.",Bin."Location Code");
      LibraryManufacturing.ChangeStatusFirmPlanToReleased(
        ProdOrderLine."Prod. Order No.",ProdOrderLine.Status::"Firm Planned",ProdOrderLine.Status::Released);
      FindProductionOrderLine(ProdOrderLine,ProdOrderLine.Status::Released,ParentItem."No.",Bin."Location Code");
    END;

    LOCAL PROCEDURE SetupForRlsdProdOrderComponentLineTrkg@6(VAR ProductionOrder2@1001 : Record 5405);
    VAR
      ComponentItem@1000 : Record 27;
      ProductionItem@1002 : Record 27;
      ComponentItem2@1003 : Record 27;
      ProductionItem2@1004 : Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      ProductionOrder@1007 : Record 5405;
      RequisitionLine@1010 : Record 246;
      TemplateType@1005 : 'Req.,For. Labor,Planning';
    BEGIN
      // Setup. Create 3 Component Items and 2 Production Items with Order Tacking Policy and Replanishment System.
      Initialize;
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(ComponentItem,ComponentItem."Replenishment System"::Purchase,ComponentItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem,ProductionItem."Replenishment System"::"Prod. Order",ProductionItem."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ComponentItem2,ComponentItem2."Replenishment System"::Purchase,ComponentItem2."Order Tracking Policy"::"Tracking Only");
      LibraryVariableStorage.Enqueue(OrderTrackingPolicyMsg);  // Enqueue value for message handler.
      CreateItem(
        ProductionItem2,ProductionItem2."Replenishment System"::Purchase,ProductionItem2."Order Tracking Policy"::"Tracking Only");

      // Update BOM No. in Production Items and creation of Released Porduction Order and Requisition Line.
      UpdateItemForBomNo(
        ProductionItem2."No.",
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(
          ProductionBOMHeader,ComponentItem2."No.",ComponentItem."No.",1));  // Component Item per Quantity is 1 in BOM Line.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ComponentItem2."No.",
        LibraryRandom.RandInt(50),CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      CreateRequisitiontLine(
        RequisitionLine,TemplateType::"Req.",ComponentItem."No.",ProductionOrder.Quantity,
        CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      CreateAndRefreshProdOrder(
        ProductionOrder2,ProductionOrder2.Status::Released,ProductionOrder2."Source Type"::Item,ProductionItem2."No.",
        ProductionOrder.Quantity,WORKDATE);
    END;

    LOCAL PROCEDURE UpdateInventoryFromWarehouseJournal@35(VAR WarehouseJournalLine@1000 : Record 7311;Bin@1001 : Record 7354;Item@1002 : Record 27);
    VAR
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,Item."No.");
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        FALSE);  // false for Batch Job.
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemForBomNo@2(ItemNo@1003 : Code[20];ProdctionBOMNo@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.VALIDATE("Production BOM No.",ProdctionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrderLine@25(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Due Date",ProductionOrder."Due Date");
      ProdOrderLine.VALIDATE("Starting Date",CALCDATE('<-1D>',ProdOrderLine."Due Date"));  // Take 1 because Starting Date and Ending Date should be just less than 1day of Due Date.
      ProdOrderLine.VALIDATE("Ending Date",ProdOrderLine."Starting Date");
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyOrderTracking@49(VAR OrderTracking@1004 : TestPage 99000822);
    VAR
      UntrackedQuantity@1003 : Variant;
      TotalQuantity@1002 : Variant;
      Quantity@1005 : Variant;
      ItemNo@1000 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(TotalQuantity);
      LibraryVariableStorage.Dequeue(Quantity);
      LibraryVariableStorage.Dequeue(UntrackedQuantity);
      LibraryVariableStorage.Dequeue(ItemNo);

      OrderTracking.CurrItemNo.ASSERTEQUALS(ItemNo);
      OrderTracking."Total Quantity".ASSERTEQUALS(TotalQuantity);
      OrderTracking."Untracked Quantity".ASSERTEQUALS(UntrackedQuantity);
      OrderTracking."Item No.".ASSERTEQUALS(ItemNo);
      OrderTracking.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingHeader@17(VAR OrderTracking@1004 : TestPage 99000822);
    VAR
      UntrackedQuantity@1003 : Variant;
      TotalQuantity@1002 : Variant;
      Quantity@1005 : Variant;
      ItemNo@1000 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(TotalQuantity);
      LibraryVariableStorage.Dequeue(Quantity);
      LibraryVariableStorage.Dequeue(UntrackedQuantity);
      LibraryVariableStorage.Dequeue(ItemNo);

      OrderTracking.CurrItemNo.ASSERTEQUALS(ItemNo);
      OrderTracking."Total Quantity".ASSERTEQUALS(TotalQuantity);
      OrderTracking."Untracked Quantity".ASSERTEQUALS(UntrackedQuantity);
      OrderTracking."Total Quantity".ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE WhiteLocationSetup@22(VAR Bin@1000 : Record 7354);
    VAR
      Location@1001 : Record 14;
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,1);  // Use 1 for No. of Bins per Zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      LibraryWarehouse.FindBin(Bin,Location.Code,FindPickZone(Location.Code),1);  // 1 is for Bin Index.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@5(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@8(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@12(VAR OrderTracking@1001 : TestPage 99000822);
    BEGIN
      // Verify required Quantity values - Total Quantity, Untracked Quantity, Quantity and Item No.
      VerifyOrderTracking(OrderTracking);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingHdrPageHandler@28(VAR OrderTracking@1001 : TestPage 99000822);
    BEGIN
      // Verify required Quantity values - Total Quantity, Untracked Quantity and Item No.
      VerifyOrderTrackingHeader(OrderTracking);
    END;

    BEGIN
    {
      // [FEATURE] [Order Tracking] [SCM]
      Test for Order Tracking:
        1. Verify Order Tracking Line for Released Production Order created after Calculate Regenerative Plan and Carry Out Action Message on Planning Worksheet.
        2. Verify Order Tracking Line for Firm Planned Production Order Line which have Component Item, used in another Released Prod. Order as a component.
        3. Verify Order Tracking Line for Firm Planned Production Order Component Item, which have Planned Production Order.
        4. Verify Order Tracking Line for Firm Planned Production Order Component Item which used in another Firm Planned Prod. Order as a Component Item.
        5. Verify Order Tracking Line for Planning line Component Item, which have Purchase Order.
        6. Verify Order Tracking Line for Planning line Component Item, which have another Planning line.
        7. Verify Order Tracking Line for Component Lines of Planning Worksheet Line, component item partially received from purchase order.
        8. Verify Order Tracking Line for Component Item on Released Production Order Line, which have Planning Line and used as component of Production item on Planning Line. Verification done in OrderTrackingPageHandler.
        9. Verify Order Tracking Line for Component Lines of Planning Worksheet Line, component item partially exist in Planning Worksheet Line.
       10. Verify Order Tracking Line for Released Production Order after creating Planning Line for Source item.
       11. Verify Order Tracking Line for Firm Planned Production Order Line which have Component Item as a source item.
       12. Verify Order Tracking Line for Firm Planned Production Order Component which used in Planned Prod. Order as a Source Item.
       13. Verify Order Tracking Line for Component Lines of Released Production Order, component item have another Released Production Order.
       14. Verify Order Tracking Line for Component Lines of Released Production Order, component item have Requisition Line.
       15. Verify Order Tracking for Purchase Receipt Line.
       16. Verify Order Tracking for Sale Order Line which have item that reserved as a Item Ledger Entry and Purchase Order.
       17. Verify Order Tracking for Sale Order Line which have item that reserved as a Item Ledger Entry.
       18. Verify Order Tracking for Simulated Production Order Line which have item that exist in anothter Simulated Prod. Order and Sales Quotes.

      Covers Test cases: for WI - 290187
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      OrderTrackingForReleasedProductionOrder                                         135580

      Covers Test cases: for WI - 299299
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      OrderTrkgFromPlannedProdOrder                                                   126573
      OrderTrkgForComponentFromPlannedProdOrder
      OrderTrkgForUnpalnnedComponentOnFirmPlannedProdOrder
      OrderTrkgForPlanningComponentFromPurchOrder                                     126575
      OrderTrkgForPlanningComponentFromPlanningLine
      OrderTrkgForRelProdOrderFromPlanningLine

      Covers Test cases: for WI - 299301
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      OrderTrkgFromItemLedgerEntry,OrderTrkgFromPlanningWksh                          121563
      OrderTrkgOnRlsdProdOrderFromPlanningWkshLine
      OrderTrkgOnFirmPlannedProdOrder
      OrderTrkgOnCompOfFirmPlannedProdOrder                                           126589

      Covers Test cases: for WI - 299644
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      OrderTrkgFromRlsdProdOrder,OrderTrkgFromRequisitionLine                         121562

      Covers Test cases: for WI - 299298
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      OrderTrkgForPostedPurchaseReceipt                                               126571
      OrderTrkgForSalesOrderLineFromUnpostedPurchOrder
      OrderTrkgForSalesOrderLineFromPostedPurchOrder
      OrderTrkgForSimulatedProdOrder                                                  138665
    }
    END.
  }
}

