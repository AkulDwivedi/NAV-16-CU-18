OBJECT Codeunit 136128 Service Navigate Form
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempDocumentEntry@1007 : TEMPORARY Record 265;
      LibrarySales@1004 : Codeunit 130509;
      LibraryService@1001 : Codeunit 131902;
      IsInitialized@1000 : Boolean;
      PostingDate@1003 : Date;
      DocumentNo@1006 : Code[20];
      ExpectedConfirm@1002 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(NavigateFormHandler)]
    PROCEDURE ServiceInvoice@2();
    VAR
      ServiceInvoiceHeader@1008 : Record 5992;
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Covers document number 128923 refer to Test Suite ID 166761.
      // This test case checks the Navigate functionality for Posted Service Invoice.

      // 1. Setup: Create Service Header, Service Item Line, Service Line, Customer and Item.
      Initialize;
      InitGlobalVariables;
      CreateServiceOrder(ServiceHeader);

      // 2. Exercise: Post the Service Order as Invoice and open Navigate form.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;

      // Set global variable for form handler.
      PostingDate := ServiceInvoiceHeader."Posting Date";
      DocumentNo := ServiceInvoiceHeader."No.";

      ServiceInvoiceHeader.Navigate;

      // 3. Verify: Verify No of entries for all related tables.
      VerifyInvoiceAndCrMemo(ServiceInvoiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(NavigateFormHandler)]
    PROCEDURE ServiceShipment@5();
    VAR
      ServiceShipmentHeader@1007 : Record 5990;
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Covers document number 128922 refer to Test Suite ID 166761.
      // This test case checks the Navigate functionality for Posted Service Shipment.

      // 1. Setup: Create Service Header, Service Item Line, Service Line, Customer and Item.
      Initialize;
      InitGlobalVariables;
      CreateServiceOrder(ServiceHeader);

      // 2. Exercise: Post the Service Order as Ship and open Navigate form.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDFIRST;

      // Set global variable for form handler.
      PostingDate := ServiceShipmentHeader."Posting Date";
      DocumentNo := ServiceShipmentHeader."No.";

      ServiceShipmentHeader.Navigate;

      // 3. Verify: Verify No of entries for all related tables.
      VerifyShipment(ServiceShipmentHeader."No.");
    END;

    [Test]
    [HandlerFunctions(NavigateFormHandler,InvoiceESConfirmHandler)]
    PROCEDURE ServiceCreditMemo@6();
    VAR
      ServiceCrMemoHeader@1001 : Record 5994;
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Covers document number 128924 refer to Test Suite ID 166761.
      // This test case checks the Navigate functionality for posted Service Credit Memo.

      // 1. Setup: Create Service Header, Service Line, Customer and Item.
      Initialize;
      InitGlobalVariables;
      CreateServiceCreditMemo(ServiceHeader);

      // 2. Exercise: Post the Service Credit Memo and open Navigate form.
      ExecuteConfirmHandlerInvoiceES;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceCrMemoHeader.FINDFIRST;

      // Set global variable for form handler.
      PostingDate := ServiceCrMemoHeader."Posting Date";
      DocumentNo := ServiceCrMemoHeader."No.";

      ServiceCrMemoHeader.Navigate;

      // 3. Verify: Verify No of entries for all related tables.
      VerifyInvoiceAndCrMemo(ServiceCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE CreateServiceCreditMemo@11(VAR ServiceHeader@1000 : Record 5900);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",Customer."No.");
      CreateServiceLine(ServiceHeader,0);
    END;

    LOCAL PROCEDURE CreateServiceOrder@7(VAR ServiceHeader@1000 : Record 5900);
    VAR
      ServiceItemLine@1004 : Record 5901;
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLine(ServiceHeader,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceLine@13(VAR ServiceHeader@1000 : Record 5900;LineNo@1004 : Integer);
    VAR
      Item@1003 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(100));  // Using RANDOM value for Quantity.
      ServiceLine.VALIDATE("Service Item Line No.",LineNo);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@15(VAR Item@1000 : Record 27);
    VAR
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",RANDOM(10));  // Using RANDOM value for Unit Price.
      Item.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ExecuteConfirmHandlerInvoiceES@10();
    BEGIN
      IF CONFIRM(STRSUBSTNO(ExpectedConfirm)) THEN;
    END;

    LOCAL PROCEDURE InitGlobalVariables@12();
    BEGIN
      CLEAR(TempDocumentEntry);
      CLEAR(PostingDate);
      DocumentNo := '';
    END;

    [PageHandler]
    PROCEDURE NavigateFormHandler@1(VAR Navigate@1000 : Page 344);
    BEGIN
      Navigate.SetDoc(PostingDate,DocumentNo);
      Navigate.UpdateNavigateForm(FALSE);
      Navigate.FindRecordsOnOpen;

      TempDocumentEntry.DELETEALL;
      Navigate.ReturnDocumentEntry(TempDocumentEntry);
    END;

    LOCAL PROCEDURE VerifyInvoiceAndCrMemo@9(DocumentNo2@1006 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      VATEntry@1001 : Record 254;
      CustLedgerEntry@1002 : Record 21;
      DetailedCustLedgEntry@1003 : Record 379;
      ValueEntry@1004 : Record 5802;
      ServiceLedgerEntry@1005 : Record 5907;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"G/L Entry",GLEntry.COUNT);

      CustLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Cust. Ledger Entry",CustLedgerEntry.COUNT);

      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Detailed Cust. Ledg. Entry",DetailedCustLedgEntry.COUNT);

      ValueEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Value Entry",ValueEntry.COUNT);

      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Service Ledger Entry",ServiceLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyShipment@8(DocumentNo2@1006 : Code[20]);
    VAR
      ServiceLedgerEntry@1005 : Record 5907;
      ItemLedgerEntry@1007 : Record 32;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Service Ledger Entry",ServiceLedgerEntry.COUNT);

      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo2);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Item Ledger Entry",ItemLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyNavigateRecords@3(VAR TempDocumentEntry2@1001 : TEMPORARY Record 265;TableID@1000 : Integer;NoOfRecords@1002 : Integer);
    BEGIN
      TempDocumentEntry2.SETRANGE("Table ID",TableID);
      TempDocumentEntry2.FINDFIRST;
      TempDocumentEntry2.TESTFIELD("No. of Records",NoOfRecords);
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceESConfirmHandler@24(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := (Question = ExpectedConfirm);
    END;

    BEGIN
    {
      // [FEATURE] [Navigate] [Service]
      Unsupported version tags:
      NA: Unable to Compile

      1. Test case checks the Navigate functionality for posted Service Invoice.
      2. Test case checks the Navigate functionality for posted Service Shipment.
      3. Test case checks the Navigate functionality for posted Service Credit Memo.

      TFS_TS_ID = 166761
      Covers Test cases:
        TFS_TC_ID=128923
        TFS_TC_ID=128922
        TFS_TC_ID=128924
    }
    END.
  }
}

