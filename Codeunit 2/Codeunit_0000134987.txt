OBJECT Codeunit 134987 ERM Financial Reports III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryPurchase@1025 : Codeunit 130512;
      LibraryFiscalYear@1028 : Codeunit 131302;
      LibraryReportDataset@1008 : Codeunit 131007;
      LibraryVariableStorage@1009 : Codeunit 131004;
      LibraryERMCountryData@1007 : Codeunit 131305;
      LibraryAccSchedule@1026 : Codeunit 131304;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryCFHelper@1017 : Codeunit 131332;
      LibraryUTUtility@1027 : Codeunit 131008;
      LibrarySetupStorage@1035 : Codeunit 131009;
      Assert@1001 : Codeunit 130000;
      ReportSaveErr@1024 : TextConst 'ENU=Enter the starting date for the first period.';
      ValidateErr@1023 : TextConst 'ENU=Error must be Same.';
      ValidationErr@1002 : TextConst '@@@=%1 FieldName, %2 Value;ENU=%1 must be %2 in Report.';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      DocEntryTableNameLbl@1014 : TextConst 'ENU=DocEntryTableName';
      DocEntryNoofRecordsLbl@1013 : TextConst 'ENU=DocEntryNoofRecords';
      PostingDateLbl@1012 : TextConst 'ENU=PstDate_BankAccLedgEntry';
      CreditAmtBankAccLedgEntryLbl@1011 : TextConst 'ENU=CreditAmt_BankAccLedgEntry';
      CreditAmtLCYBankAccLedgEntryLbl@1015 : TextConst 'ENU=CreditAmtLCY_BankAccLedgEntry';
      RowNotFoundErr@1000 : TextConst '@@@="%1=Field Caption;%2=Field Value;";ENU=There is no dataset row corresponding to Element Name %1 with value %2.';
      IndentationLevelLbl@1004 : TextConst '@@@=%1 the amount of indentation.;ENU=Indentation Level : %1';
      IsInitialized@1020 : Boolean;
      AmountTextMsg@1016 : TextConst 'ENU=Amount text must be same in Check Preview.';
      AppToDocTypeToUpdate@1018 : 'Invoice,Credit Memo';
      CustVendNameLbl@1010 : TextConst 'ENU=Cust_Vend_Name';
      AmountLcyCapTxt@1019 : TextConst 'ENU=AmountLcy';
      AmountPmtToleranceCapTxt@1022 : TextConst 'ENU=AmountPmtTolerance';
      AmountBalLcyCapTxt@1021 : TextConst 'ENU=AmountBalLcy';
      EntryType@1029 : ' ,Invoice,Credit Memo,Payment';
      AmountToApplyDiscTolSalesTxt@1030 : TextConst 'ENU=Amount_to_Apply____AmountDiscounted___AmountPmtDiscTolerance___AmountPmtTolerance_';
      AmountToApplyDiscTolPurchTxt@1031 : TextConst 'ENU=Amount_to_Apply____AmountDiscounted___AmountPmtDiscTolerance___AmountPmtTolerance__Control3036';
      AmountTotalDiscTolAppliedTxt@1032 : TextConst 'ENU=Amount___TotalAmountDiscounted___TotalAmountPmtDiscTolerance___TotalAmountPmtTolerance___AmountApplied';
      FormatTok@1033 : TextConst '@@@={Locked};ENU=<Precision,%1:%2><Standard Format,1>';

    [Test]
    [HandlerFunctions(BalanceCompPrevYearReqPageHandler)]
    PROCEDURE BalCompPrevYearNoOption@78();
    VAR
      BalanceCompPrevYear@1000 : Report 37;
    BEGIN
      // Check Balance Compare Previous Year Report without any option selected.

      // Setup.
      Initialize;
      CLEAR(BalanceCompPrevYear);

      // Exercise.
      COMMIT;
      ASSERTERROR BalanceCompPrevYear.RUN;

      // Verify: Verify Error Raised during Save Report.
      Assert.AreEqual(STRSUBSTNO(ReportSaveErr),GETLASTERRORTEXT,ValidateErr);
    END;

    [Test]
    [HandlerFunctions(BalanceCompPrevYearReqPageHandler)]
    PROCEDURE BalCompPrevYearNoneRounding@77();
    BEGIN
      // Check Balance Compare Previous Year Report with None Rounding Factor. Take 1 for Devinding Amount.
      Initialize;
      SetupAndVerifyBalCompPrevYear(RoundingFactor::None,1,GetGLDecimals);
    END;

    [Test]
    [HandlerFunctions(BalanceCompPrevYearReqPageHandler)]
    PROCEDURE BalCompPrevYear1Rounding@76();
    BEGIN
      // Check Balance Compare Previous Year Report with 1 Rounding Factor. Take 1 for Deviding Amount.
      Initialize;
      SetupAndVerifyBalCompPrevYear(RoundingFactor::"1",1,'0');
    END;

    [Test]
    [HandlerFunctions(BalanceCompPrevYearReqPageHandler)]
    PROCEDURE BalCompPrevYear1000Rounding@75();
    BEGIN
      // Check Balance Compare Previous Year Report with 1000 Rounding Factor. Take 1000 for Deviding Amount.
      Initialize;
      SetupAndVerifyBalCompPrevYear(RoundingFactor::"1000",1000,'1');
    END;

    [Test]
    [HandlerFunctions(BalanceCompPrevYearReqPageHandler)]
    PROCEDURE BalCompPrevYear1000000Rounding@74();
    BEGIN
      // Check Balance Compare Previous Year Report with 1000000 Rounding Factor. Take 1000000 for Deviding Amount.
      Initialize;
      SetupAndVerifyBalCompPrevYear(RoundingFactor::"1000000",1000000,'1');
    END;

    LOCAL PROCEDURE SetupAndVerifyBalCompPrevYear@73(RoundingFactor2@1004 : Option;RoundingFactorAmount@1009 : Decimal;Decimals@1002 : Text[5]);
    VAR
      GLAccount@1003 : Record 15;
      GenJournalLine@1001 : Record 81;
      BalanceCompPrevYear@1000 : Report 37;
      Indent@1005 : 'None,0,1,2,3,4,5';
      PeriodEndingDate@1008 : Date;
    BEGIN
      // Setup.
      PostGenLinesCustomPostingDate(GenJournalLine);
      FindGLAccount(GLAccount,GenJournalLine."Account No.",WORKDATE,WORKDATE);
      Indent := GetIndentValue(GLAccount.Indentation);  // Get Indentation Value According to Report's Indent Option.

      // Exercise.
      CLEAR(BalanceCompPrevYear);
      GLAccount.SETRANGE("No.",GenJournalLine."Account No.");
      BalanceCompPrevYear.SETTABLEVIEW(GLAccount);
      BalanceCompPrevYear.InitializeRequest(WORKDATE,0D,0D,0D,RoundingFactor2,Indent); // Take OD for all fields as workdate will flow.
      COMMIT;
      BalanceCompPrevYear.RUN;

      // Verify: Verify Saved Report with Different Fields value.
      FindGLAccount(GLAccount,GenJournalLine."Account No.",WORKDATE,WORKDATE);
      GLAccount.CALCFIELDS("Debit Amount","Credit Amount");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('G_L_Account___No__',GenJournalLine."Account No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'G_L_Account___No__',GenJournalLine."Account No."));
      VerifyTextAmountInXMLFile(
        'ColumnValuesAsText_1_',FormatAmount(ROUND(GLAccount."Debit Amount" / RoundingFactorAmount,0.1),Decimals));

      PeriodEndingDate := CALCDATE('<-1D>',CALCDATE('<+1M>',DMY2DATE(1,DATE2DMY(WORKDATE,2),DATE2DMY(WORKDATE,3))));

      FindGLAccount(GLAccount,GenJournalLine."Account No.",0D,PeriodEndingDate);
      GLAccount.CALCFIELDS("Balance at Date");
      LibraryReportDataset.Reset;
      LibraryReportDataset.AssertElementWithValueExists('PeriodEndingDate',FORMAT(PeriodEndingDate));
      LibraryReportDataset.AssertElementWithValueExists('PreviousEndingDate',FORMAT(CALCDATE('<-1Y>',PeriodEndingDate)));
      LibraryReportDataset.AssertElementWithValueExists(
        'STRSUBSTNO___1___2__PreviousStartingDate_PreviousEndingDate_',
        STRSUBSTNO('%1..%2',FORMAT(CALCDATE('<-1Y>',WORKDATE)),FORMAT(CALCDATE('<-1Y>',PeriodEndingDate))));
      LibraryReportDataset.AssertElementWithValueExists(
        'STRSUBSTNO___1___2__PeriodStartingDate_PeriodEndingDate_',
        STRSUBSTNO('%1..%2',FORMAT(WORKDATE),FORMAT(PeriodEndingDate)));

      LibraryReportDataset.SetRange('G_L_Account___No__',GenJournalLine."Account No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'G_L_Account___No__',GenJournalLine."Account No."));
      VerifyTextAmountInXMLFile(
        'ColumnValuesAsText_3_',FormatAmount(ROUND(GLAccount."Balance at Date" / RoundingFactorAmount,0.1),Decimals));

      FindGLAccount(GLAccount,GenJournalLine."Account No.",CALCDATE('<-1Y>',WORKDATE),CALCDATE('<-1Y>',PeriodEndingDate));
      GLAccount.CALCFIELDS("Debit Amount","Credit Amount");
      VerifyTextAmountInXMLFile(
        'ColumnValuesAsText_7_',FormatAmount(ROUND(GLAccount."Debit Amount" / RoundingFactorAmount,0.1),Decimals));

      FindGLAccount(GLAccount,GenJournalLine."Account No.",0D,CALCDATE('<-1Y>',PeriodEndingDate));
      GLAccount.CALCFIELDS("Balance at Date");
      VerifyTextAmountInXMLFile(
        'ColumnValuesAsText_5_',FormatAmount(ROUND(GLAccount."Balance at Date" / RoundingFactorAmount,0.1),Decimals));
    END;

    [Test]
    [HandlerFunctions(TrialBalanceByPeriodReqPageHandler)]
    PROCEDURE TrialBalByPeriodNoOption@71();
    VAR
      TrialBalanceByPeriod@1000 : Report 38;
    BEGIN
      // Check Trial Balance By Period without any option Selected.

      // Setup.
      Initialize;
      CLEAR(TrialBalanceByPeriod);

      // Exercise.
      COMMIT;
      ASSERTERROR TrialBalanceByPeriod.RUN;

      // Verify: Verify Error Raised during Save Report.
      Assert.AreEqual(STRSUBSTNO(ReportSaveErr),GETLASTERRORTEXT,ValidateErr);
    END;

    [Test]
    [HandlerFunctions(TrialBalanceByPeriodReqPageHandler)]
    PROCEDURE TrialBalByPeriodNoneOption@68();
    BEGIN
      // Check Trial Balance By Period with None Rounding Factor. Take 1 for Deviding Amount.
      Initialize;
      SetupAndVerifyTrialBalByPeriod(RoundingFactor::None,1,GetGLDecimals);
    END;

    [Test]
    [HandlerFunctions(TrialBalanceByPeriodReqPageHandler)]
    PROCEDURE TrialBalByPeriod1Rounding@66();
    BEGIN
      // Check Trial Balance By Period with 1 Rounding Factor. Take 1 for Deviding Amount.
      Initialize;
      SetupAndVerifyTrialBalByPeriod(RoundingFactor::"1",1,'0');
    END;

    [Test]
    [HandlerFunctions(TrialBalanceByPeriodReqPageHandler)]
    PROCEDURE TrialBalByPeriod1000Rounding@65();
    BEGIN
      // Check Trial Balance By Period with 1000 Rounding Factor. Take 1000 for Deviding Amount.
      Initialize;
      SetupAndVerifyTrialBalByPeriod(RoundingFactor::"1000",1000,'1');
    END;

    [Test]
    [HandlerFunctions(TrialBalanceByPeriodReqPageHandler)]
    PROCEDURE TrialBalByPeriod100000Rounding@64();
    BEGIN
      // Check Trial Balance By Period with 1000000 Rounding Factor. Take 1000000 for Deviding Amount.
      Initialize;
      SetupAndVerifyTrialBalByPeriod(RoundingFactor::"1000000",1000000,'1');
    END;

    LOCAL PROCEDURE SetupAndVerifyTrialBalByPeriod@44(RoundingFactor2@1004 : Option;RoundingFactorAmount@1002 : Decimal;Decimals@1006 : Text[5]);
    VAR
      GLAccount@1003 : Record 15;
      GenJournalLine@1001 : Record 81;
      TrialBalanceByPeriod@1000 : Report 38;
      Indent@1005 : 'None,0,1,2,3,4,5';
      StartingDate@1009 : Date;
    BEGIN
      // Setup.
      PostGenLinesCustomPostingDate(GenJournalLine);
      StartingDate := LibraryFiscalYear.GetAccountingPeriodDate(GenJournalLine."Posting Date");
      FindGLAccount(GLAccount,GenJournalLine."Account No.",GenJournalLine."Posting Date",GenJournalLine."Posting Date");
      Indent := GetIndentValue(GLAccount.Indentation);  // Get Indentation Value According to GLAccount.

      // Exercise. Take Starting Date with 1 Month Back.
      CLEAR(TrialBalanceByPeriod);
      GLAccount.SETRANGE("No.",GenJournalLine."Account No.");
      TrialBalanceByPeriod.SETTABLEVIEW(GLAccount);
      TrialBalanceByPeriod.InitializeRequest(CALCDATE('<-1M>',StartingDate),RoundingFactor2,Indent);
      COMMIT;
      TrialBalanceByPeriod.RUN;

      // Verify: Verify Saved Report with Different Fields value.
      FindGLAccount(GLAccount,GenJournalLine."Account No.",GenJournalLine."Posting Date",GenJournalLine."Posting Date");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('G_L_Account___No__',GLAccount."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'G_L_Account___No__',GLAccount."No."));
      VerifyTextAmountInXMLFile(
        'ColumnValuesAsText_3_',FormatAmount(ROUND(GenJournalLine.Amount / RoundingFactorAmount,0.1),Decimals));
      LibraryReportDataset.Reset;
      LibraryReportDataset.AssertElementWithValueExists('G_L_Account__TABLECAPTION__________GLFilter',
        GLAccount.TABLECAPTION + ': ' + GLAccount.GETFILTERS);
      LibraryReportDataset.AssertElementWithValueExists('Text015___FORMAT_Indent_',STRSUBSTNO(IndentationLevelLbl,Indent));
    END;

    [Test]
    [HandlerFunctions(ForeignCurrencyBalanceReqPageHandler)]
    PROCEDURE ForeignCurrencyBalance@96();
    VAR
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1000 : Record 232;
      GLAccount@1002 : Record 15;
      Currency@1012 : Record 4;
      BankAccount@1006 : Record 270;
      ForeignCurrencyBalance@1005 : Report 503;
      BankAccountNo@1009 : Code[20];
      CurrencyCode@1003 : Code[10];
      CurrentValueLCY@1011 : Decimal;
    BEGIN
      // Verify Balance in G/L Account after Posting General Journal Line.

      // 1. Setup: Create Currency and Post the General Journal Line with Foreign Currency.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      BankAccountNo := CreateBankAccountWithCurrency(CurrencyCode);
      LibraryERM.CreateGLAccount(GLAccount);
      ClearGeneralJournalLines(GenJournalBatch);

      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccountNo);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Save the Previewed report.
      CLEAR(ForeignCurrencyBalance);
      Currency.SETRANGE(Code,CurrencyCode);
      ForeignCurrencyBalance.SETTABLEVIEW(Currency);
      COMMIT;
      ForeignCurrencyBalance.RUN;

      // Verify: Verify Saved Report with Field value.
      GLAccount.CALCFIELDS(Balance);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('StrsubNototalCurrCode','Total ' + CurrencyCode);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'StrsubNototalCurrCode','Total ' + CurrencyCode));
      LibraryReportDataset.AssertCurrentRowValue('CalcTotalBalanceLCY',-GLAccount.Balance);

      Currency.GET(CurrencyCode);
      Currency.CALCFIELDS("Customer Balance (LCY)","Vendor Balance (LCY)");
      BankAccount.GET(BankAccountNo);
      BankAccount.CALCFIELDS("Balance (LCY)");
      CurrentValueLCY := Currency."Customer Balance (LCY)" - Currency."Vendor Balance (LCY)" + BankAccount."Balance (LCY)";
      LibraryReportDataset.AssertCurrentRowValue('CalcTotalCurrBalanceLCY',CurrentValueLCY);
    END;

    [Test]
    [HandlerFunctions(BankAccountStatementReportReqPageHandler)]
    PROCEDURE CheckBankAccountStatementReport@56();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1001 : Record 270;
      BankAccountStatementLine@1004 : Record 276;
      BankAccountStatementReport@1005 : Report 1407;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Verify Statement Amount in Bank Account Statement Report.

      // Setup: Post a General Journal Line for payment with Manual Check and Bank AccReconciliation.
      Initialize;
      DocumentNo := PostJournalGeneralLineForManualCheck(BankAccount);
      CreateSuggestedBankReconciliation(BankAccReconciliation,BankAccount."No.");
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // Exercise: Save Bank Account Statement Report.
      CLEAR(BankAccountStatementReport);
      BankAccountStatementLine.SETRANGE("Document No.",DocumentNo);
      BankAccountStatementReport.SETTABLEVIEW(BankAccountStatementLine);
      COMMIT;
      BankAccountStatementReport.RUN;

      // Verify: Verify Bank Account Statement Report.
      BankAccountStatementLine.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('TrnsctnDte_BnkAcStmtLin',FORMAT(BankAccountStatementLine."Transaction Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'TrnsctnDte_BnkAcStmtLin',FORMAT(BankAccountStatementLine."Transaction Date")));
      LibraryReportDataset.AssertCurrentRowValue('Amt_BankAccStmtLineStmt',BankAccountStatementLine."Statement Amount");
    END;

    [Test]
    PROCEDURE AmountTextOnCheckPreview@26();
    VAR
      GenJournalLine@1000 : Record 81;
      PaymentTerms@1009 : Record 3;
      Check@1001 : Report 1401;
      PaymentJournal@1006 : TestPage 256;
      PaymentDiscountAmount@1010 : Decimal;
      AppliedToDocNo@1011 : Code[20];
      NumberText@1013 : ARRAY [2] OF Text[80];
      VendorNo@1005 : Code[20];
      ActualValue@1003 : Text;
    BEGIN
      // Check Amount Text on Check Preview Page after Calculating Payment discount on Payment Journal.

      // Setup: Create General Journal Line with Invoice and Payment.
      Initialize;
      CreatePaymentTerms(PaymentTerms);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);

      // Random Values Required to make amount more than 100;
      CreateGenJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,VendorNo,
        -(LibraryRandom.RandDec(100,2) + 100),GenJournalLine."Bank Payment Type"::"Computer Check");
      AppliedToDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentDiscountAmount := ROUND(GenJournalLine.Amount - (GenJournalLine.Amount * PaymentTerms."Discount %" / 100));

      CreateGenJournalLine(GenJournalLine,GenJournalLine."Document Type"::Payment,VendorNo,0,
        GenJournalLine."Bank Payment Type"::"Computer Check");
      ModifyGenJournalLine(GenJournalLine,-PaymentDiscountAmount,AppliedToDocNo);

      // Below function required for changing the Amount in Text.
      Check.InitTextVariable;
      Check.FormatNoText(NumberText,-PaymentDiscountAmount,'');

      // Exercise: Open Check Preview Page through Payment Journal.
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(GenJournalLine."Journal Batch Name");
      ActualValue := LibraryERM.CheckPreview(PaymentJournal);

      // Verify: Verify Amount Text on Check Preview Page.
      Assert.AreEqual(NumberText[1],ActualValue,'Amount message should be same.');
    END;

    [Test]
    [HandlerFunctions(DocumentEntriesReqPageHandler,NavigatePageHandler)]
    PROCEDURE AmountInLCYOnDocumentEntriesReport@24();
    VAR
      VendorLedgerEntry@1003 : Record 25;
    BEGIN
      // Verify Document Entries Report with Bank Account Ledger Entry and Check Ledger Entry with LCY Amount
      DocumentEntriesWithBankAndCheckLedger(VendorLedgerEntry,TRUE);
      LibraryReportDataset.AssertCurrentRowValue(CreditAmtLCYBankAccLedgEntryLbl,VendorLedgerEntry."Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(DocumentEntriesReqPageHandler,NavigatePageHandler)]
    PROCEDURE AmountInFCYOnDocumentEntriesReport@33();
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      // Verify Document Entries Report with Bank Account Ledger Entry and Check Ledger Entry with FCY Amount
      DocumentEntriesWithBankAndCheckLedger(VendorLedgerEntry,FALSE);
      LibraryReportDataset.AssertCurrentRowValue(CreditAmtBankAccLedgEntryLbl,VendorLedgerEntry.Amount);
    END;

    LOCAL PROCEDURE DocumentEntriesWithBankAndCheckLedger@1(VAR VendorLedgerEntry@1007 : Record 25;AmountInLCY@1006 : Boolean);
    VAR
      GenJournalLine@1000 : Record 81;
      BankAccountLedgerEntry@1003 : Record 271;
      CheckLedgerEntry@1004 : Record 272;
      PaymentTerms@1001 : Record 3;
      BankAccountLedgerEntries@1002 : TestPage 372;
      VendorNo@1008 : Code[20];
    BEGIN
      // Setup: Create vendor payment General Journal Line with Bank Account No. with Currency Code as Balancing Account.
      Initialize;
      LibraryERM.FindPaymentTerms(PaymentTerms);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);
      CreateGenJournalLine(GenJournalLine,GenJournalLine."Document Type"::Payment,VendorNo,LibraryRandom.RandDec(100,2),
        GenJournalLine."Bank Payment Type"::"Manual Check");  // Using Random value for Amount.
      GenJournalLine.VALIDATE("Bal. Account No.",CreateBankAccountWithCurrency(CreateCurrencyAndExchangeRate));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(AmountInLCY);  // Enqueue for DocumentEntriesReqPageHandler.
      BankAccountLedgerEntries.OPENVIEW;
      BankAccountLedgerEntries.FILTER.SETFILTER("Bal. Account No.",VendorNo);

      // Exercise.
      BankAccountLedgerEntries.Action21.INVOKE;  // Navigate;

      // Verify:
      BankAccountLedgerEntry.SETRANGE("Bal. Account No.",VendorNo);
      LibraryReportDataset.LoadDataSetFile;
      VerifyDocumentEntries(BankAccountLedgerEntry.TABLECAPTION,BankAccountLedgerEntry.COUNT);
      CheckLedgerEntry.SETRANGE("Bal. Account No.",VendorNo);
      VerifyDocumentEntries(CheckLedgerEntry.TABLECAPTION,CheckLedgerEntry.COUNT);
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VerifyDocumentEntries(VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry.COUNT);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)",Amount);
      LibraryReportDataset.SetRange(PostingDateLbl,FORMAT(VendorLedgerEntry."Posting Date"));
      LibraryReportDataset.GetNextRow;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE AmountTextOnCheckPreviewWithCurrency@129();
    VAR
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1000 : Record 81;
      Vendor@1004 : Record 23;
      Check@1001 : Report 1401;
      PaymentJournal@1006 : TestPage 256;
      CurrencyCode@1002 : Code[10];
      PaymentAmount@1012 : Decimal;
      NumberText@1013 : ARRAY [2] OF Text[80];
      ActualValue@1003 : Text;
    BEGIN
      // Check Amount Text on Check Preview Page after Suggest Vendor Payment on Payment Journal.

      // Setup: Create and Post General Journal Line with Invoice and Suggest Vendor Payment.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Vendor."No.",
        -LibraryRandom.RandDec(100,2),GenJournalLine."Bank Payment Type"::"Computer Check");
      UpdateGenJornalLineCurrency(GenJournalLine,CurrencyCode);
      PaymentAmount := ROUND(GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreatePaymentGeneralBatch(GenJournalBatch);
      SuggestVendorPayment(GenJournalLine,GenJournalBatch,Vendor."No.",CreateBankAccountWithCurrency(CurrencyCode),TRUE);

      // Below function required for changing the Amount in Text.
      Check.InitTextVariable;
      Check.FormatNoText(NumberText,-PaymentAmount,CurrencyCode);

      // Exercise: Open Check Preview Page through Payment Journal.
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(GenJournalLine."Journal Batch Name");
      ActualValue := LibraryERM.CheckPreview(PaymentJournal);

      // Verify: Check Amount Text on Check Preview Page after Suggest Vendor Payment on Payment Journal.
      Assert.AreEqual(NumberText[1],ActualValue,AmountTextMsg);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SuggestVendorPaymentsRequestPageHandler,PrintCheckReqPageHandler)]
    PROCEDURE PrintVendCheckForUpdatedAppToCrMemoAmount@4();
    BEGIN
      // [FEATURE] [Report] [Check] [Rounding]
      // [SCENARIO] Run report "Check" for Invoice applied to Credit Memo where total amount is decimal value
      PrintVendCheckForUpdatedAmount(AppToDocTypeToUpdate::"Credit Memo",2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SuggestVendorPaymentsRequestPageHandler,PrintCheckReqPageHandler)]
    PROCEDURE PrintVendCheckForUpdatedAppToInvoiceAmount@58();
    BEGIN
      // [FEATURE] [Report] [Check] [Rounding]
      // [SCENARIO] Run report "Check" for Credit Memo applied to Invoice where total amount is decimal value
      PrintVendCheckForUpdatedAmount(AppToDocTypeToUpdate::Invoice,2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SuggestVendorPaymentsRequestPageHandler,PrintCheckReqPageHandler)]
    PROCEDURE PrintVendCheckForUpdatedAppToCrMemoAmountRounded@37();
    BEGIN
      // [FEATURE] [Report] [Check] [Rounding]
      // [SCENARIO 156205] Run report "Check" for Invoice applied to Credit Memo where total amount is integer value
      // [GIVEN] Total Amount = 34;
      // [GIVEN] GLSetup."Amount Rounding Precision" = 0.01
      // [WHEN] Run "Check" report
      // [THEN] CheckAmountText = 34.00
      PrintVendCheckForUpdatedAmount(AppToDocTypeToUpdate::"Credit Memo",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SuggestVendorPaymentsRequestPageHandler,PrintCheckReqPageHandler)]
    PROCEDURE PrintVendCheckForUpdatedAppToInvoiceAmountRounded@23();
    BEGIN
      // [FEATURE] [Report] [Check] [Rounding]
      // [SCENARIO 156205] Run report "Check" for Credit Memo applied to Invoice where total amount is integer value
      // [GIVEN] Total Amount = 34;
      // [GIVEN] GLSetup."Amount Rounding Precision" = 0.01
      // [WHEN] Run "Check" report
      // [THEN] CheckAmountText = 34.00
      PrintVendCheckForUpdatedAmount(AppToDocTypeToUpdate::Invoice,0);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.DisableActivateChequeNoOnGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGenJournalTemplate;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      UpdateIntrastatCountryCode; // Required for Intrastat.
      LibraryERMCountryData.UpdateLocalPostingSetup;

      IsInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE BankAccountSum@28(BankAccReconciliation@1000 : Record 273) Sum : Decimal;
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FINDSET;
      REPEAT
        Sum += BankAccReconciliationLine."Statement Amount";
      UNTIL BankAccReconciliationLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateBankAccount@29() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
      BankAccountPostingGroup@1001 : Record 277;
    BEGIN
      // Create Bank Account with Random Last Statement No.
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccountPostingGroup.FINDFIRST;
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.VALIDATE("Last Statement No.",FORMAT(LibraryRandom.RandInt(10)));
      BankAccount.VALIDATE("Last Check No.",FORMAT(LibraryRandom.RandInt(10)));
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateSuggestedBankReconciliation@60(VAR BankAccReconciliation@1000 : Record 273;BankAccountNo@1001 : Code[20]);
    BEGIN
      CreateBankReconciliation(BankAccReconciliation,BankAccountNo);
      SuggestBankReconciliationLines(BankAccReconciliation);

      // Balance Bank Account Reconciliation.
      BankAccReconciliation.VALIDATE(
        "Statement Ending Balance",BankAccReconciliation."Balance Last Statement" + BankAccountSum(BankAccReconciliation));
      BankAccReconciliation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@39(PaymentTermsCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGenJournalLine@35(VAR GenJournalLine@1011 : Record 81;DocumentType@1008 : Option;AccountNo@1009 : Code[20];Amount@1010 : Decimal;BankPaymentType@1000 : Option);
    VAR
      GenJournalBatch@1004 : Record 232;
      BankAccount@1006 : Record 270;
    BEGIN
      CreatePaymentGeneralBatch(GenJournalBatch);
      LibraryERM.FindBankAccount(BankAccount);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccount."No.");
      GenJournalLine.VALIDATE("Bank Payment Type",BankPaymentType);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearGeneralJournalLines@83(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE CreateBankAccountWithCurrency@54(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankReconciliation@25(VAR BankAccReconciliation@1001 : Record 273;BankAccountNo@1000 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccountNo,
        BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.VALIDATE("Statement Date",WORKDATE);
      BankAccReconciliation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@31() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Residual Gains Account",FindGLAccountNo);
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      Currency.VALIDATE("Realized G/L Gains Account",FindGLAccountNo);
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized G/L Gains Account");
      Currency.MODIFY(TRUE);

      // Create Currency Exchange Rate.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@36(VAR PaymentTerms@1000 : Record 3);
    BEGIN
      // Take Random Values for Discount %.
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentGeneralBatch@34(VAR GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Payments);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreatePostVendorInvCrMemoSuggestPayments@45(VAR VendorNo@1002 : Code[20];VAR InvoiceAmount@1001 : Decimal;VAR CrMemoAmount@1000 : Decimal;VAR BankAccount@1005 : Record 270;VAR BatchName@1007 : Code[10];Precision@1008 : Integer);
    VAR
      PaymentTerms@1004 : Record 3;
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1006 : Record 232;
    BEGIN
      LibraryCFHelper.CreateDefaultPaymentTerms(PaymentTerms);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);

      InvoiceAmount := LibraryRandom.RandDecInDecimalRange(50,100,Precision) * 2;
      CrMemoAmount := LibraryRandom.RandDecInDecimalRange(10,50,Precision) * 2; // credit memo amount should be less then invoice's

      WITH GenJournalLine DO BEGIN
        CreateGenJournalLine(GenJournalLine,"Document Type"::Invoice,VendorNo,-InvoiceAmount,"Bank Payment Type"::" ");
        LibraryERM.PostGeneralJnlLine(GenJournalLine);

        CreateGenJournalLine(GenJournalLine,"Document Type"::"Credit Memo",VendorNo,CrMemoAmount,"Bank Payment Type"::" ");
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;

      BankAccount.GET(CreateBankAccount);
      CreatePaymentGeneralBatch(GenJournalBatch);
      SuggestVendorPayment(GenJournalLine,GenJournalBatch,VendorNo,BankAccount."No.",FALSE);
      BatchName := GenJournalLine."Journal Batch Name";
    END;

    LOCAL PROCEDURE SuggestVendorPayment@49(VAR GenJournalLine@1002 : Record 81;GenJournalBatch@1003 : Record 232;VendorNo@1000 : Code[20];BalAccountNo@1006 : Code[20];SummarizePerVend@1001 : Boolean);
    VAR
      SuggestVendorPayments@1009 : Report 393;
    BEGIN
      GenJournalLine."Journal Template Name" := GenJournalBatch."Journal Template Name";
      GenJournalLine."Journal Batch Name" := GenJournalBatch.Name;
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue(BalAccountNo);
      LibraryVariableStorage.Enqueue(SummarizePerVend);
      COMMIT;  // Commit required to run report.
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE UpdateGenJornalLineCurrency@32(GenJournalLine@1000 : Record 81;CurrencyCode@1001 : Code[10]);
    BEGIN
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLAccountNo@16() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE ModifyGenJournalLine@41(VAR GenJournalLine@1000 : Record 81;Amount@1001 : Decimal;AppliedToDocNo@1002 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliedToDocNo);
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostGenLinesCustomPostingDate@89(VAR GenJournalLine@1001 : Record 81);
    VAR
      GLAccount@1003 : Record 15;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE(Indentation,LibraryRandom.RandInt(5));  // Set Random for Indendation.
      GLAccount.MODIFY(TRUE);

      // Taking 1000 for multiplication with Devinding Rounding Factor.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(1000,2) * 1000);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(1000,2) * 1000);
      GenJournalLine.VALIDATE("Posting Date",CALCDATE('<-1Y>',WORKDATE));  // Take Previous Year Date.
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostJournalGeneralLineForManualCheck@7(VAR BankAccount@1004 : Record 270) : Code[20];
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Find General Journal Template and Batch for posting Manual check.
      ClearGeneralJournalLines(GenJournalBatch);
      BankAccount.GET(CreateBankAccount);

      // Generate a journal line.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",CreateBankAccount,LibraryRandom.RandDec(1000,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccount."No.");
      GenJournalLine.VALIDATE("Bank Payment Type",GenJournalLine."Bank Payment Type"::"Manual Check");
      GenJournalLine.MODIFY(TRUE);

      // Post the Journal General Line for Payment through check.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE OpenPaymentJournalAndPrintCheck@70(BankAccount@1000 : Record 270;BatchName@1001 : Code[10]);
    VAR
      PaymentJournal@1002 : TestPage 256;
    BEGIN
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      LibraryVariableStorage.Enqueue(BankAccount."Last Check No.");
      LibraryVariableStorage.Enqueue(TRUE);

      COMMIT;

      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE := BatchName;
      PaymentJournal.PrintCheck.INVOKE;
    END;

    LOCAL PROCEDURE FindGLAccount@90(VAR GLAccount@1003 : Record 15;No@1000 : Code[20];DateFilter@1001 : Date;DateFilter2@1002 : Date);
    BEGIN
      GLAccount.SETRANGE("No.",No);
      GLAccount.SETRANGE("Date Filter",DateFilter,DateFilter2);
      GLAccount.FINDFIRST;
    END;

    LOCAL PROCEDURE FindUpdateGenJnlLine@9(AccountNo@1001 : Code[20];AppToDocType@1000 : Option;NewAmount@1002 : Decimal);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Applies-to Doc. Type",AppToDocType);
        FINDFIRST;
        VALIDATE(Amount,NewAmount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetIndentValue@91(Indentation@1000 : Integer) IndentValue : Integer;
    VAR
      Indent@1001 : 'None,0,1,2,3,4,5';
    BEGIN
      // Get Indent Option according to Random Parameter's Value.
      CASE Indentation OF
        1:
          IndentValue := Indent::"1";
        2:
          IndentValue := Indent::"2";
        3:
          IndentValue := Indent::"3";
        4:
          IndentValue := Indent::"4";
        5:
          IndentValue := Indent::"5";
      END;
    END;

    LOCAL PROCEDURE GetGLDecimals@46() : Text[5];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."Amount Decimal Places");
    END;

    LOCAL PROCEDURE SuggestBankReconciliationLines@27(VAR BankAccReconciliation@1001 : Record 273);
    VAR
      BankAccount@1002 : Record 270;
      SuggestBankAccReconLines@1000 : Report 1496;
    BEGIN
      CLEAR(SuggestBankAccReconLines);
      SuggestBankAccReconLines.SetStmt(BankAccReconciliation);
      SuggestBankAccReconLines.SETTABLEVIEW(BankAccount);
      SuggestBankAccReconLines.InitializeRequest(WORKDATE,WORKDATE,FALSE);
      SuggestBankAccReconLines.USEREQUESTPAGE(FALSE);
      SuggestBankAccReconLines.RUN;
    END;

    LOCAL PROCEDURE UpdateIntrastatCountryCode@100();
    VAR
      CompanyInformation@1000 : Record 79;
      CountryRegion@1001 : Record 9;
    BEGIN
      CompanyInformation.GET;
      CountryRegion.GET(CompanyInformation."Country/Region Code");
      IF CountryRegion."Intrastat Code" = '' THEN BEGIN
        CountryRegion."Intrastat Code" := CountryRegion.Code;
        CountryRegion.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PrintVendCheckForUpdatedAmount@80(AppToDocTypeToUpd@1009 : Option;Precision@1004 : Integer);
    VAR
      BankAccount@1006 : Record 270;
      VendorNo@1000 : Code[20];
      BatchName@1007 : Code[10];
      InvoiceAmount@1002 : Decimal;
      CrMemoAmount@1003 : Decimal;
    BEGIN
      // Setup: create and post invoice and credit memo, suggest vendor payment, decrease amount
      Initialize;

      LibraryERM.SetAmountRoundingPrecision(0.01);
      CreatePostVendorInvCrMemoSuggestPayments(VendorNo,InvoiceAmount,CrMemoAmount,BankAccount,BatchName,Precision);

      CASE AppToDocTypeToUpd OF
        AppToDocTypeToUpdate::Invoice:
          // decrease invoice amount (less than before, but grater that credit memo)
          DecreaseVendorAppToInvoiceAmount(InvoiceAmount,CrMemoAmount,VendorNo);
        AppToDocTypeToUpdate::"Credit Memo":
          // decrease credit memo amount
          DecreaseVendorAppToCrMemoAmount(CrMemoAmount,VendorNo);
      END;

      // Excercise: open payment journal and print check
      OpenPaymentJournalAndPrintCheck(BankAccount,BatchName);

      // Verify: total amount should be equal to difference between invoice and credit memo
      VerifyCheckTotalAmount(InvoiceAmount,CrMemoAmount);
    END;

    LOCAL PROCEDURE DecreaseVendorAppToCrMemoAmount@55(VAR CrMemoAmount@1000 : Decimal;VendorNo@1002 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      CrMemoAmount := ROUND(CrMemoAmount / 2);
      FindUpdateGenJnlLine(VendorNo,GenJournalLine."Applies-to Doc. Type"::"Credit Memo",-CrMemoAmount);
    END;

    LOCAL PROCEDURE DecreaseVendorAppToInvoiceAmount@59(VAR InvoiceAmount@1003 : Decimal;CrMemoAmount@1000 : Decimal;VendorNo@1002 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      InvoiceAmount := ROUND((InvoiceAmount + CrMemoAmount) / 2);
      FindUpdateGenJnlLine(VendorNo,GenJournalLine."Applies-to Doc. Type"::Invoice,InvoiceAmount);
    END;

    LOCAL PROCEDURE FormatAmount@112(Amount@1000 : Decimal;Decimals@1001 : Text[5]) ValueAsText : Text;
    VAR
      ZeroValue@1002 : Decimal;
    BEGIN
      IF Amount = 0 THEN
        EXIT('');

      ValueAsText := FORMAT(Amount,0,LibraryAccSchedule.GetCustomFormatString(FORMAT(Decimals)));
      IF EVALUATE(ZeroValue,ValueAsText) AND (ZeroValue = 0) THEN
        EXIT('');
    END;

    LOCAL PROCEDURE VerifyDocumentEntries@111(DocEntryTableName@1000 : Text[50];RowValue@1001 : Integer);
    BEGIN
      LibraryReportDataset.SetRange(DocEntryTableNameLbl,DocEntryTableName);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(DocEntryNoofRecordsLbl,RowValue)
    END;

    LOCAL PROCEDURE VerifyTextAmountInXMLFile@10(ElementName@1000 : Text[250];ExpectedValue@1001 : Text);
    VAR
      TextAmount@1002 : Variant;
      TextValue@1004 : Text;
    BEGIN
      LibraryReportDataset.FindCurrentRowValue(ElementName,TextAmount);
      EVALUATE(TextValue,TextAmount);
      Assert.AreEqual(ExpectedValue,TextValue,ValidationErr);
    END;

    LOCAL PROCEDURE VerifyCheckTotalAmount@30(InvoiceAmount@1000 : Decimal;CrMemoAmount@1001 : Decimal);
    VAR
      DotNetMath@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Math";
      FormatString@1002 : Text;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('TotalText','Total');
      Assert.IsTrue(LibraryReportDataset.GetNextRow,STRSUBSTNO(RowNotFoundErr,'TotalText','Total'));
      LibraryReportDataset.AssertCurrentRowValue('TotalLineAmount',InvoiceAmount - CrMemoAmount);
      FormatString :=
        STRSUBSTNO(
          FormatTok,
          DotNetMath.Log10(1 / LibraryERM.GetAmountRoundingPrecision),
          DotNetMath.Log10(1 / LibraryERM.GetAmountRoundingPrecision));
      LibraryReportDataset.AssertCurrentRowValue('CheckAmountText',FORMAT(InvoiceAmount - CrMemoAmount,0,FormatString));
    END;

    [RequestPageHandler]
    PROCEDURE DocumentEntriesReqPageHandler@3(VAR DocumentEntries@1000 : TestRequestPage 35);
    VAR
      CurrecnyInLcy@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CurrecnyInLcy);
      DocumentEntries.Control3.SETVALUE(CurrecnyInLcy);  // Boolean Show Amount in LCY
      DocumentEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [PageHandler]
    PROCEDURE NavigatePageHandler@2(VAR Navigate@1000 : TestPage 344);
    BEGIN
      Navigate.Print.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BalanceCompPrevYearReqPageHandler@5(VAR BalanceCompPrevYear@1000 : TestRequestPage 37);
    BEGIN
      BalanceCompPrevYear.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BankAccountStatementReportReqPageHandler@15(VAR BankAccountStatement@1001 : TestRequestPage 1407);
    BEGIN
      BankAccountStatement.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ForeignCurrencyBalanceReqPageHandler@43(VAR ForeignCurrencyBalance@1000 : TestRequestPage 503);
    BEGIN
      ForeignCurrencyBalance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE TrialBalanceByPeriodReqPageHandler@69(VAR TrialBalanceByPeriod@1000 : TestRequestPage 38);
    BEGIN
      TrialBalanceByPeriod.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PrintCheckReqPageHandler@12(VAR Check@1000 : TestRequestPage 1401);
    VAR
      Value@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      Check.BankAccount.SETVALUE(Value);
      LibraryVariableStorage.Dequeue(Value);
      Check.LastCheckNo.SETVALUE(Value);
      LibraryVariableStorage.Dequeue(Value);
      Check.OneCheckPerVendorPerDocumentNo.SETVALUE(Value);

      Check.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsRequestPageHandler@11(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      VendorNo@1001 : Variant;
      BankAccountNo@1002 : Variant;
      SummarizePerVend@1005 : Variant;
      BalAccountType@1003 : 'G/L Account,,,Bank Account';
      BankPmtType@1004 : ' ,Computer Check,Manual Check';
    BEGIN
      LibraryVariableStorage.Dequeue(VendorNo);
      LibraryVariableStorage.Dequeue(BankAccountNo);
      LibraryVariableStorage.Dequeue(SummarizePerVend);
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNo);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(SummarizePerVend);
      SuggestVendorPayments.BalAccountType.SETVALUE(BalAccountType::"Bank Account");
      SuggestVendorPayments.BalAccountNo.SETVALUE(BankAccountNo);
      SuggestVendorPayments.BankPaymentType.SETVALUE(BankPmtType::"Computer Check");
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));
      SuggestVendorPayments.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@151(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE VendorPrePaymentJournalHandler@18(VAR VendorPrePaymentJournal@1000 : TestRequestPage 317);
    BEGIN
      VendorPrePaymentJournal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE VendorPrePmtOnSalesInvWithPmtDiscAndCrMemo@232();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1004 : Record 21;
      AppliesToID@1002 : Code[20];
      EntryAmount@1003 : ARRAY [3] OF Decimal;
      PmtDiscPossible@1006 : Decimal;
    BEGIN
      // [SCENARIO 359950.1]  Test to verify the Payment Journal - Pre-Check Report shows payment discount correctly when printing invoice and credit memo.

      Initialize;
      CreateCustomer(Customer);
      AppliesToID := LibraryUTUtility.GetNewCode;
      // [GIVEN] Invoice with amount X and payment discount P less then X
      CreateCustLedgerEntryWithSpecificAmountAndAppliesToID(
        CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,Customer."No.",LibraryRandom.RandDec(100,2),AppliesToID);
      PmtDiscPossible := ROUND(CustLedgerEntry."Amount (LCY)" / LibraryRandom.RandIntInRange(3,5));
      UpdateCustLedgEntryWithPmtDisc(CustLedgerEntry,PmtDiscPossible);

      // [GIVEN] Credit memo with amount Y less then X
      // [GIVEN] Payment with amount Z less then (X - Y - P)
      CalcEntriesAmount(EntryAmount,CustLedgerEntry."Amount (LCY)",CustLedgerEntry."Remaining Pmt. Disc. Possible");
      CreateCustLedgerEntryWithSpecificAmountAndAppliesToID(
        CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",
        Customer."No.",EntryAmount[EntryType::"Credit Memo"],AppliesToID);
      CreateGenJournalLineWithAppliesToID(
        GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",EntryAmount[EntryType::Payment],AppliesToID);

      // [WHEN] Run Payment PreCheck report on both invoice with pmt. discount and credit memo
      RunVendorPrePaymentJournal(Customer."No.");

      // [THEN] Payment discount P is not show in report as separate amount (unapplied amount) but include to invoice amount
      VerifyInvAndPmtDiscInPreCheckReport(
        AmountToApplyDiscTolSalesTxt,-(EntryAmount[EntryType::Invoice] - PmtDiscPossible),PmtDiscPossible);
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE VendorPrePmtOnPurchInvWithPmtDiscAndCrMemo@231();
    VAR
      Vendor@1005 : Record 23;
      GenJournalLine@1004 : Record 81;
      VendLedgEntry@1003 : Record 25;
      AppliesToID@1002 : Code[20];
      EntryAmount@1001 : ARRAY [3] OF Decimal;
      PmtDiscPossible@1000 : Decimal;
    BEGIN
      // [SCENARIO 359950.2]  Test to verify the Payment Journal - Pre-Check Report shows payment discount correctly when printing invoice and credit memo.

      Initialize;
      CreateVendor(Vendor);
      AppliesToID := LibraryUTUtility.GetNewCode;
      // [GIVEN] Invoice with amount X and payment discount P less then X
      CreateVendLedgerEntryWithSpecificAmountAndAppliesToID(
        VendLedgEntry,VendLedgEntry."Document Type"::Invoice,Vendor."No.",-LibraryRandom.RandDec(100,2),AppliesToID);
      PmtDiscPossible := ROUND(VendLedgEntry."Amount (LCY)" / LibraryRandom.RandIntInRange(3,5));
      UpdateVendLedgEntryWithPmtDisc(VendLedgEntry,PmtDiscPossible);

      // [GIVEN] Credit memo with amount Y less then X
      // [GIVEN] Payment with amount Z less then (X - Y - P)
      CalcEntriesAmount(EntryAmount,VendLedgEntry."Amount (LCY)",VendLedgEntry."Remaining Pmt. Disc. Possible");
      CreateVendLedgerEntryWithSpecificAmountAndAppliesToID(
        VendLedgEntry,VendLedgEntry."Document Type"::"Credit Memo",Vendor."No.",EntryAmount[EntryType::"Credit Memo"],AppliesToID);
      CreateGenJournalLineWithAppliesToID(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",EntryAmount[EntryType::Payment],AppliesToID);

      // [WHEN] Run Payment PreCheck report on both invoice with pmt. discount and credit memo
      RunVendorPrePaymentJournal(Vendor."No.");

      // [THEN] Payment discount P is not show in report as separate amount (unapplied amount) but include to invoice amount
      VerifyInvAndPmtDiscInPreCheckReport(
        AmountToApplyDiscTolPurchTxt,-(EntryAmount[EntryType::Invoice] - PmtDiscPossible),PmtDiscPossible);
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE OnAfterGetRecordGenJnlLineCustPaymentJnlPreCheck@221();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1004 : Record 21;
    BEGIN
      // Test to verify the Gen. Journal Line - OnAfterGetRecord trigger of the Report ID: 10087, Payment Journal - Pre-Check Report for Amount and Description for Gen. Journal Line Account Type Customer.
      // Setup.
      Initialize;
      CreateCustomer(Customer);
      CreateCustLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,Customer."No.");
      UpdateCustLedgEntryWithPmtDisc(CustLedgerEntry,LibraryRandom.RandDec(10,2));
      CreateGenJournalLineWithAppliesToDocType(
        GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Document Type"::Invoice);

      // Exercise.
      RunVendorPrePaymentJournal(Customer."No.");

      // Verify: Verify the Customer Description and Amount LCY after running Payment Journal Pre Check Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(CustVendNameLbl,Customer.Name);
      LibraryReportDataset.AssertElementWithValueExists(AmountLcyCapTxt,GenJournalLine."Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE OnAfterGetRecordGenJnlLineVendPaymentJnlPreCheck@220();
    VAR
      GenJournalLine@1000 : Record 81;
      VendorLedgerEntry@1008 : Record 25;
      Vendor@1007 : Record 23;
    BEGIN
      // Test to verify the Gen. Journal Line - OnAfterGetRecord trigger of the Report ID: 10087, Payment Journal - Pre-Check Report for Amount and Description for Gen. Journal Line Account Type Vendor.
      // Setup.
      Initialize;
      CreateVendor(Vendor);
      CreateVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",'');  // Blank Purchaser Code.
      CreateGenJournalLineWithAppliesToDocType(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",GenJournalLine."Document Type"::Invoice);

      // Exercise.
      RunVendorPrePaymentJournal(Vendor."No.");

      // Verify: Verify the Vendor Description and Amount LCY after running Payment Journal Pre Check Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(CustVendNameLbl,Vendor.Name);
      LibraryReportDataset.AssertElementWithValueExists(AmountLcyCapTxt,GenJournalLine."Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE OnAfterGetRecordGenJnlLineCustPaymtToleranceJnlPreChk@194();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1004 : Record 21;
    BEGIN
      // Test to verify the Gen. Journal Line - OnAfterGetRecord trigger of the Report ID: 10087, Payment Journal - Pre-Check Report for Accepted Payment Tolerance of Account Type Customer.
      // Setup.
      Initialize;
      CreateCustomer(Customer);
      CreateCustLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,Customer."No.");
      UpdateCustLedgEntryWithPmtDisc(CustLedgerEntry,LibraryRandom.RandDec(10,2));
      CreateGenJournalLineWithAppliesToDocType(
        GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Document Type"::Invoice);
      UpdateAppliesToDocumentNoOnGenJournalLine(GenJournalLine,CustLedgerEntry."Document No.");

      // Exercise.
      RunVendorPrePaymentJournal(Customer."No.");

      // Verify: Verify the Customer Accepted Payment Tolerance and Amount Bal. LCY after running Payment Journal Pre Check Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(AmountPmtToleranceCapTxt,-CustLedgerEntry."Accepted Payment Tolerance");
      LibraryReportDataset.AssertElementWithValueExists(AmountBalLcyCapTxt,GenJournalLine."Balance (LCY)");
    END;

    [Test]
    [HandlerFunctions(VendorPrePaymentJournalHandler)]
    PROCEDURE OnAfterGetRecordGenJnlLineVendPaymtToleranceJnlPreChk@435();
    VAR
      GenJournalLine@1000 : Record 81;
      VendorLedgerEntry@1008 : Record 25;
      Vendor@1007 : Record 23;
    BEGIN
      // Test to verify the Gen. Journal Line - OnAfterGetRecord trigger of the Report ID: 10087, Payment Journal - Pre-Check Report for Accepted Payment Tolerance of Account Type Vendor.
      // Setup.
      Initialize;
      CreateVendor(Vendor);
      CreateVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",'');  // Blank Purchaser Code.
      CreateGenJournalLineWithAppliesToDocType(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",GenJournalLine."Document Type"::Invoice);
      UpdateAppliesToDocumentNoOnGenJournalLine(GenJournalLine,VendorLedgerEntry."Document No.");

      // Exercise.
      RunVendorPrePaymentJournal(Vendor."No.");

      // Verify: Verify the Vendor Accepted Payment Tolerance as Zero and Amount Bal. LCY after running Payment Journal Pre Check Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(AmountPmtToleranceCapTxt,0);  // Zero Accepted Payment Tolerance.
      LibraryReportDataset.AssertElementWithValueExists(AmountBalLcyCapTxt,GenJournalLine."Balance (LCY)");
    END;

    LOCAL PROCEDURE CreateCustomer@281(VAR Customer@1000 : Record 18);
    BEGIN
      Customer."No." := LibraryUTUtility.GetNewCode;
      Customer.Name := LibraryUTUtility.GetNewCode;
      Customer.INSERT;
    END;

    LOCAL PROCEDURE CreateVendor@104(VAR Vendor@1000 : Record 23);
    BEGIN
      Vendor."No." := LibraryUTUtility.GetNewCode;
      Vendor.Name := LibraryUTUtility.GetNewCode;
      Vendor.INSERT;
    END;

    LOCAL PROCEDURE CreateGenJournalLineWithAppliesToDocType@225(VAR GenJournalLine@1000 : Record 81;AccountType@1005 : Option;AccountNo@1003 : Code[20];AppliesToDocType@1004 : Option);
    BEGIN
      CreateGenJournalLine2(GenJournalLine,AccountType,AccountNo,LibraryRandom.RandDec(10,2));
      GenJournalLine."Applies-to Doc. Type" := AppliesToDocType;
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateGenJournalLineWithAppliesToID@249(VAR GenJournalLine@1003 : Record 81;AccountType@1002 : Option;AccountNo@1001 : Code[20];AmountLCY@1004 : Decimal;AppliesToID@1000 : Code[20]);
    BEGIN
      CreateGenJournalLine2(GenJournalLine,AccountType,AccountNo,AmountLCY);
      GenJournalLine."Applies-to ID" := AppliesToID;
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateCustLedgerEntry@222(VAR CustLedgerEntry@1000 : Record 21;DocType@1003 : Option;CustNo@1002 : Code[20]);
    VAR
      CustLedgerEntry2@1001 : Record 21;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        CustLedgerEntry2.SETRANGE("Document Type",DocType);
        CustLedgerEntry2.FINDLAST;
        "Entry No." := CustLedgerEntry2."Entry No." + 1;
        "Document Type" := DocType;
        "Document No." := LibraryUTUtility.GetNewCode;
        "Customer No." := CustNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateVendLedgerEntry@278(VAR VendLedgerEntry@1000 : Record 25;DocType@1003 : Option;VendNo@1002 : Code[20]);
    VAR
      VendLedgerEntry2@1001 : Record 25;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        VendLedgerEntry2.SETRANGE("Document Type",DocType);
        VendLedgerEntry2.FINDLAST;
        "Entry No." := VendLedgerEntry2."Entry No." + 1;
        "Document Type" := DocType;
        "Document No." := LibraryUTUtility.GetNewCode;
        "Vendor No." := VendNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateVendorLedgerEntry@218(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1002 : Code[20];PurchaserCode@1003 : Code[10]);
    VAR
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      VendorLedgerEntry2.FINDLAST;
      VendorLedgerEntry."Entry No." := VendorLedgerEntry2."Entry No." + 1;
      VendorLedgerEntry."Vendor No." := VendorNo;
      VendorLedgerEntry."Posting Date" := WORKDATE;
      VendorLedgerEntry."Due Date" := WORKDATE;
      VendorLedgerEntry."Pmt. Discount Date" := WORKDATE;
      VendorLedgerEntry."Purchase (LCY)" := LibraryRandom.RandDec(10,2);
      VendorLedgerEntry."Accepted Payment Tolerance" := LibraryRandom.RandDec(10,2);
      VendorLedgerEntry."Original Pmt. Disc. Possible" := -LibraryRandom.RandDec(10,2);
      VendorLedgerEntry.Open := TRUE;
      VendorLedgerEntry."Document Type" := VendorLedgerEntry."Document Type"::Invoice;
      VendorLedgerEntry."Purchaser Code" := PurchaserCode;
      VendorLedgerEntry.INSERT;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntryWithPmtDisc@263(VAR CustLedgerEntry@1000 : Record 21;RemPmtDiscPossible@1001 : Decimal);
    BEGIN
      CustLedgerEntry."Remaining Pmt. Disc. Possible" := RemPmtDiscPossible;
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntryWithPmtDisc@275(VAR VendLedgerEntry@1001 : Record 25;RemPmtDiscPossible@1000 : Decimal);
    BEGIN
      VendLedgerEntry."Remaining Pmt. Disc. Possible" := RemPmtDiscPossible;
      VendLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE RunVendorPrePaymentJournal@230(AccountNo@1002 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
      VendorPrePaymentJournal@1000 : Report 317;
    BEGIN
      COMMIT;
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      CLEAR(VendorPrePaymentJournal);
      VendorPrePaymentJournal.SETTABLEVIEW(GenJournalLine);
      VendorPrePaymentJournal.RUN;  // Invokes VendorPrePaymentJournalHandler.
    END;

    LOCAL PROCEDURE UpdateAppliesToDocumentNoOnGenJournalLine@518(VAR GenJournalLine@1001 : Record 81;AppliesToDocNo@1000 : Code[20]);
    BEGIN
      GenJournalLine."Applies-to Doc. No." := AppliesToDocNo;
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateGenJournalLine2@250(VAR GenJournalLine@1000 : Record 81;AccountType@1005 : Option;AccountNo@1003 : Code[20];GenJnlLineAmount@1004 : Decimal);
    VAR
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GenJournalTemplate.INIT;
      GenJournalTemplate.Name := LibraryUTUtility.GetNewCode10;
      GenJournalTemplate.INSERT;
      GenJournalBatch.INIT;
      GenJournalBatch."Journal Template Name" := GenJournalTemplate.Name;
      GenJournalBatch.Name := LibraryUTUtility.GetNewCode10;
      GenJournalBatch.INSERT;

      GenJournalLine."Journal Template Name" := GenJournalBatch."Journal Template Name";
      GenJournalLine."Journal Batch Name" := GenJournalBatch.Name;
      GenJournalLine."Line No." := 1;
      GenJournalLine."Account Type" := AccountType;
      GenJournalLine."Account No." := AccountNo;
      GenJournalLine."Document No." := LibraryUTUtility.GetNewCode;
      GenJournalLine.Amount := GenJnlLineAmount;
      GenJournalLine."Amount (LCY)" := GenJnlLineAmount;
      GenJournalLine."Balance (LCY)" := GenJournalLine."Amount (LCY)";
      GenJournalLine.INSERT;
    END;

    LOCAL PROCEDURE CreateCustLedgerEntryWithSpecificAmountAndAppliesToID@259(VAR CustLedgerEntry@1002 : Record 21;DocType@1001 : Option;CustNo@1000 : Code[20];EntryAmount@1004 : Decimal;AppliesToID@1003 : Code[20]);
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        INIT;
        CreateCustLedgerEntry(CustLedgerEntry,DocType,CustNo);
        VALIDATE("Amount (LCY)",EntryAmount);
        VALIDATE("Remaining Amount",EntryAmount);
        Positive := "Amount (LCY)" > 0;
        "Applies-to ID" := AppliesToID;
        "Amount to Apply" := "Remaining Amount";
        "Accepted Pmt. Disc. Tolerance" := TRUE;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateVendLedgerEntryWithSpecificAmountAndAppliesToID@270(VAR VendLedgerEntry@1004 : Record 25;DocType@1003 : Option;VendNo@1002 : Code[20];EntryAmount@1001 : Decimal;AppliesToID@1000 : Code[20]);
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        INIT;
        CreateVendLedgerEntry(VendLedgerEntry,DocType,VendNo);
        VALIDATE("Amount (LCY)",EntryAmount);
        VALIDATE("Remaining Amount",EntryAmount);
        Positive := "Amount (LCY)" > 0;
        "Applies-to ID" := AppliesToID;
        "Amount to Apply" := "Remaining Amount";
        "Accepted Pmt. Disc. Tolerance" := TRUE;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CalcEntriesAmount@237(VAR EntryAmount@1001 : ARRAY [3] OF Decimal;InvAmount@1002 : Decimal;PmtDiscPossible@1000 : Decimal);
    BEGIN
      EntryAmount[EntryType::Invoice] := InvAmount;
      EntryAmount[EntryType::"Credit Memo"] :=
        -ROUND(EntryAmount[EntryType::Invoice] / LibraryRandom.RandIntInRange(3,5));
      EntryAmount[EntryType::Payment] :=
        -(EntryAmount[EntryType::Invoice] + EntryAmount[EntryType::"Credit Memo"] - PmtDiscPossible);
    END;

    LOCAL PROCEDURE VerifyInvAndPmtDiscInPreCheckReport@233(AmountToApplyDiscTolCap@1000 : Text;InvAmount@1001 : Decimal;PmtDiscAmount@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(AmountToApplyDiscTolCap,InvAmount);
      LibraryReportDataset.AssertElementWithValueNotExist(AmountTotalDiscTolAppliedTxt,PmtDiscAmount);
    END;

    BEGIN
    {
      // [FEATURE] [ERM]
      Unsupported version tags:
      SE: Unable to Execute

      Test various Financial Reports.
      1. Check Balance Compare Previous Year Report without any option selected.
      2. Check Balance Compare Previous Year Report with None Rounding Factor.
      3. Check Balance Compare Previous Year Report with 1 Rounding Factor.
      4. Check Balance Compare Previous Year Report with 1000 Rounding Factor.
      5. Check Balance Compare Previous Year Report with 1000000 Rounding Factor.
      6. Check Trial Balance By Period without any option Selected.
      7. Check Trial Balance By Period with None Rounding Factor.
      8. Check Trial Balance By Period with 1 Rounding Factor.
      9. Check Trial Balance By Period with 1000 Rounding Factor.
      10. Check Trial Balance By Period with 1000000 Rounding Factor.
      11. Check Foreign Currency Balance Report Values.
      12. Check Statement Amount in Bank Account Statement Report.
      13. Check Amount Text on Check Preview Page after Calculating Payment discount on Payment Journal.
      14. Verify Document Entries Report with Bank Account Ledger Entry and Check Ledger Entry with LCY Amount
      15. Verify Document Entries Report with Bank Account Ledger Entry and Check Ledger Entry with FCY Amount
      16. Check Amount Text on Check Preview Page after Suggest Vendor Payment on Payment Journal.
      17. Verify check total when vendor App-to credit memo amount is updated after Suggest Vendor Payment on Payment Journal.
      18. Verify check total when vendor App-to invoice amount is updated after Suggest Vendor Payment on Payment Journal.

      Covers Test cases: 250562
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      BalCompPrevYearNoOption,BalCompPrevYearNoneRounding     139313
      BalCompPrevYear1Rounding,BalCompPrevYear1000Rounding
      BalCompPrevYear1000000Rounding
      TrialBalByPeriodNoOption,TrialBalByPeriodNoneOption
      TrialBalByPeriod1Rounding,TrialBalByPeriod1000Rounding
      TrialBalByPeriod100000Rounding                          139314

      Covers Test cases: 260084
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      ForeignCurrencyBalance                                  254712

      Covers Test cases: 263398
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      CheckBankAccountStatementReport                         139363

      Covers Test cases: 264001
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      AmountTextOnCheckPreview                                122936

      Covers Test cases: 325238
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      AmountInLCYOnDocumentEntriesReport
      AmountInFCYOnDocumentEntriesReport                      139311

      Covers Test cases: 90934
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      AmountTextOnCheckPreviewWithCurrency

      PrintVendCheckForUpdatedAppToCrMemoAmount               357497
      PrintVendCheckForUpdatedAppToInvoiceAmount              357497
    }
    END.
  }
}

