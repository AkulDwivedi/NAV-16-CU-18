OBJECT Codeunit 134382 ERM Dimension Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryFixedAsset@1015 : Codeunit 131330;
      LibrarySales@1008 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryDimension@1001 : Codeunit 131001;
      LibraryVariableStorage@1009 : Codeunit 131004;
      LibraryERMCountryData@1069 : Codeunit 131305;
      isInitialized@1000 : Boolean;
      DimensionCode@1011 : Code[20];
      VendorNo@1012 : Code[20];
      AmountError@1010 : TextConst 'ENU=Amount Must be Equal to %1.';
      NoOfSuggestedLineIncorrectErr@1014 : TextConst 'ENU=Number of suggested lines is incorrect';
      ValueIncorrectErr@1013 : TextConst 'ENU=%1 value is incorrect';
      DimFactBoxDimSetIDErr@1017 : TextConst 'ENU=Dimensions FactBox contains incorrect dimension set.';

    LOCAL PROCEDURE Initialize@12();
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      ClearDimensionPriority;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE DimGeneralJournal@2();
    VAR
      DefaultDimension@1007 : Record 352;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      DocumentNo@1003 : Code[20];
      CustomerNo@1006 : Code[20];
      JournalDimSet@1004 : Integer;
    BEGIN
      Initialize;
      PrepareGeneralJournal(GenJournalBatch);

      CustomerNo := CreateCustomer;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Customer,CustomerNo);
      SetupDefaultDimensions(DefaultDimension,DATABASE::"G/L Account",GenJournalBatch."Bal. Account No.");

      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,-LibraryRandom.RandInt(1000));
      DocumentNo := GenJournalLine."Document No.";
      JournalDimSet := GenJournalLine."Dimension Set ID";

      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify customer ledger entries
      VerifyCustomerLedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    PROCEDURE DimGenJnlAllocationInherit@57();
    VAR
      DefaultDimension@1009 : Record 352;
      GenJnlAllocation@1008 : Record 221;
      GenJournalLine@1004 : Record 81;
      DocumentNo@1003 : Code[20];
      GLAccountNo@1002 : Code[20];
      JournalDimSet@1001 : Integer;
      AllocationDimSet@1000 : Integer;
    BEGIN
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      SetupDefaultDimensions(DefaultDimension,DATABASE::"G/L Account",GLAccountNo);

      DocumentNo := DimGenJnlAllocation(GenJournalLine,GenJnlAllocation,GLAccountNo,0);
      JournalDimSet := GenJournalLine."Dimension Set ID";
      AllocationDimSet := GenJnlAllocation."Dimension Set ID";

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify customer ledger entries
      VerifyCustomerLedgerEntryDim(DocumentNo,JournalDimSet);
      VerifyGLEntryDim(DocumentNo,GLAccountNo,AllocationDimSet);
    END;

    [Test]
    PROCEDURE DimGenJnlAllocationOverride@3();
    VAR
      DefaultDimension@1009 : Record 352;
      GenJnlAllocation@1006 : Record 221;
      GenJournalLine@1002 : Record 81;
      DocumentNo@1001 : Code[20];
      GLAccountNo@1008 : Code[20];
      JournalDimSet@1000 : Integer;
      AllocationDimSet@1007 : Integer;
    BEGIN
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      SetupDefaultDimensions(DefaultDimension,DATABASE::"G/L Account",GLAccountNo);

      DocumentNo := DimGenJnlAllocation(GenJournalLine,GenJnlAllocation,GLAccountNo,FindDimensionSet);
      JournalDimSet := GenJournalLine."Dimension Set ID";
      AllocationDimSet := GenJnlAllocation."Dimension Set ID";

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify customer ledger entries
      VerifyCustomerLedgerEntryDim(DocumentNo,JournalDimSet);
      VerifyGLEntryDim(DocumentNo,GLAccountNo,AllocationDimSet);
    END;

    LOCAL PROCEDURE DimGenJnlAllocation@58(VAR GenJournalLine@1000 : Record 81;VAR GenJnlAllocation@1001 : Record 221;GLAccountNo@1004 : Code[20];AllocationDimSet@1009 : Integer) DocumentNo : Code[20];
    VAR
      GenJournalBatch@1005 : Record 232;
      NoSeriesManagement@1020 : Codeunit 396;
    BEGIN
      FindGLRecurringBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      ClearGenJournalBatchAllocation(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CreateCustomer,-LibraryRandom.RandInt(1000));
      DocumentNo := NoSeriesManagement.GetNextNo(GenJournalBatch."Posting No. Series",WORKDATE,FALSE);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Recurring Method",GenJournalLine."Recurring Method"::"F  Fixed");
      EVALUATE(GenJournalLine."Recurring Frequency",'<1M>');  // Required value for posting, value is irrelevant
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.CreateGenJnlAllocation(
        GenJnlAllocation,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
      GenJnlAllocation.VALIDATE("Account No.",GLAccountNo);
      GenJnlAllocation.VALIDATE("Allocation %",100);
      GenJnlAllocation.VALIDATE("Dimension Set ID",AllocationDimSet);
      GenJnlAllocation.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE DimItemJournal@4();
    VAR
      DefaultDimension@1006 : Record 352;
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
      ItemJournalLine@1002 : Record 83;
      JournalDimSet@1003 : Integer;
      DocumentNo@1004 : Code[20];
      ItemNo@1005 : Code[20];
    BEGIN
      Initialize;

      ItemNo := FindItem;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Item,ItemNo);
      PrepareItemJournal(ItemJournalBatch,ItemJournalTemplate.Type::Item);

      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        1);

      DocumentNo := ItemJournalLine."Document No.";
      JournalDimSet := ItemJournalLine."Dimension Set ID";
      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      // Post item journal
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Verify dimensions code on Item ledger entries
      VerifyItemLedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    PROCEDURE DimItemReclassJournal@35();
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1002 : Record 83;
      DimSetEntry@1000 : Record 480;
      JournalDimSet@1003 : Integer;
      NewJournalDimSet@1007 : Integer;
      DocumentNo@1004 : Code[20];
      ItemNo@1005 : Code[20];
    BEGIN
      Initialize;

      ItemNo := FindItem;
      PrepareItemJournal(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        1);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      CLEAR(ItemJournalBatch);
      CLEAR(ItemJournalTemplate);
      CLEAR(ItemJournalLine);

      PrepareItemJournal(ItemJournalBatch,ItemJournalTemplate.Type::Transfer);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,ItemNo,
        1);
      ItemJournalLine.TESTFIELD("Value Entry Type",ItemJournalLine."Value Entry Type"::"Direct Cost");

      DocumentNo := ItemJournalLine."Document No.";
      JournalDimSet := ItemJournalLine."Dimension Set ID";

      DimSetEntry.SETFILTER("Dimension Set ID",'<>%1',JournalDimSet);
      DimSetEntry.FINDFIRST;
      NewJournalDimSet := DimSetEntry."Dimension Set ID";
      ItemJournalLine."New Dimension Set ID" := NewJournalDimSet;
      ItemJournalLine.MODIFY;

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      VerifyReclassItemLedgerEntryDim(DocumentNo,JournalDimSet,NewJournalDimSet);
    END;

    [Test]
    PROCEDURE DimResourceJournal@7();
    VAR
      DefaultDimension@1005 : Record 352;
      ResJournalLine@1000 : Record 207;
      DocumentNo@1002 : Code[20];
      ResourceNo@1004 : Code[20];
      JournalDimSet@1003 : Integer;
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(ResJournalLine.FIELDNO("Document No."),DATABASE::"Res. Journal Line"));
      ResourceNo := FindResource;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Resource,ResourceNo);

      // Create a resource journal line
      CreateResJournalLine(ResJournalLine,DocumentNo,ResourceNo);
      JournalDimSet := ResJournalLine."Dimension Set ID";

      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      // Exercise: Post resource journal batch
      PostResJournalBatch(ResJournalLine);

      // Validate: Resource ledger entries dimension set ID
      VerifyResourceLedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE DimJobJournal@8();
    VAR
      DefaultDimension@1005 : Record 352;
      JobJournalBatch@1004 : Record 237;
      JobJournalLine@1003 : Record 210;
      DocumentNo@1002 : Code[20];
      JobNo@1001 : Code[20];
      JournalDimSet@1000 : Integer;
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(JobJournalLine.FIELDNO("Document No."),DATABASE::"Job Journal Line"));
      JobNo := FindJob;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Job,JobNo);

      // Create a resource journal line
      FindJobBatch(JobJournalBatch);
      ClearJobJournalBatch(JobJournalBatch);
      CreateJobJournalLine(JobJournalLine,DocumentNo,JobNo);
      JournalDimSet := JobJournalLine."Dimension Set ID";

      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      // Exercise: Post resource journal batch
      PostJobJournalBatch(JobJournalLine);

      // Validate: Job ledger entries dimension set ID
      VerifyJobLedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    PROCEDURE DimFixedAssetJournal@9();
    VAR
      DefaultDimension@1006 : Record 352;
      FAJournalBatch@1002 : Record 5620;
      FAJournalLine@1001 : Record 5621;
      DepreciationBook@1000 : Record 5611;
      FANo@1003 : Code[20];
      DocumentNo@1005 : Code[20];
      JournalDimSet@1004 : Integer;
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(FAJournalLine.FIELDNO("Document No."),DATABASE::"FA Journal Line"));
      FANo := FindFA;
      SetupDefaultDimensions(DefaultDimension,DATABASE::"Fixed Asset",FANo);

      // Disable G/L integration for Aquisition
      DepreciationBook.GET(LibraryFixedAsset.GetDefaultDeprBook);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",FALSE);
      DepreciationBook.MODIFY(TRUE);

      FindFABatch(FAJournalBatch);
      ClearFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(FAJournalLine,DocumentNo,FANo);
      DocumentNo := FAJournalLine."Document No.";
      JournalDimSet := FAJournalLine."Dimension Set ID";

      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      // Exercise: Post resource journal batch
      PostFAJournalBatch(FAJournalLine);

      // Validate: Fixed asset ledger entries dimension set ID
      VerifyFALedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    PROCEDURE DimInsuranceJournal@10();
    VAR
      DefaultDimension@1003 : Record 352;
      InsuranceJournalBatch@1005 : Record 5634;
      InsuranceJournalLine@1004 : Record 5635;
      InsuranceNo@1002 : Code[20];
      DocumentNo@1001 : Code[20];
      JournalDimSet@1000 : Integer;
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(InsuranceJournalLine.FIELDNO("Document No."),DATABASE::
          "Insurance Journal Line"));
      InsuranceNo := FindInsurance;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Insurance,InsuranceNo);

      FindInsuranceBatch(InsuranceJournalBatch);
      ClearInsuranceJournalBatch(InsuranceJournalBatch);
      CreateInsuranceJournalLine(InsuranceJournalLine,DocumentNo,InsuranceNo);
      DocumentNo := InsuranceJournalLine."Document No.";
      JournalDimSet := InsuranceJournalLine."Dimension Set ID";

      // Verify dimension codes on journal line
      VerifyDimensionSetID(DefaultDimension,JournalDimSet);

      // Exercise: Post resource journal batch
      PostInsuranceJournalBatch(InsuranceJournalLine);

      // Validate: Insurance ledger entries dimension set ID
      VerifyInsuranceLedgerEntryDim(DocumentNo,JournalDimSet);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimGeneralJournal@5();
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1004 : Record 81;
      DimensionSetID@1003 : Integer;
      ShortcutDimCode@1001 : Code[20];
      ShortcutDimValueCode@1000 : Code[20];
    BEGIN
      Initialize;

      PrepareGeneralJournal(GenJournalBatch);
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CreateCustomer,-LibraryRandom.RandInt(1000));

      // Change shortcut dimension on the general journal line
      ShortcutDimValueCode := EvaluateShortcutDimCode(ShortcutDimCode,GenJournalLine."Shortcut Dimension 1 Code",ShortcutDimValueCode);
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      GenJournalLine.MODIFY(TRUE);
      // Verify dimension on journal line dimension is updated
      DimensionSetID := GenJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the general journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      GenJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      GenJournalLine.MODIFY(TRUE);
      GenJournalLine.ShowDimensions;
      // Verify shortcut dimension on the general journal is updated.
      ShortcutDimValueCode := GenJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimGenJnlAllocation@16();
    VAR
      GenJnlAllocation@1008 : Record 221;
      GenJournalLine@1004 : Record 81;
      DimensionSetID@1000 : Integer;
      ShortcutDimCode@1002 : Code[20];
      ShortcutDimValueCode@1001 : Code[20];
    BEGIN
      Initialize;

      DimGenJnlAllocation(GenJournalLine,GenJnlAllocation,LibraryERM.CreateGLAccountNo,0);
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      // Change shortcut dimension on the general journal allocation line
      ShortcutDimValueCode :=
        EvaluateShortcutDimCode(ShortcutDimCode,GenJnlAllocation."Shortcut Dimension 1 Code",ShortcutDimValueCode);

      GenJnlAllocation.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      GenJnlAllocation.MODIFY(TRUE);
      // Verify dimension on journal allocationline dimension is updated
      DimensionSetID := GenJnlAllocation."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the allocation line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      GenJnlAllocation.VALIDATE("Dimension Set ID",DimensionSetID);
      GenJnlAllocation.MODIFY(TRUE);
      GenJnlAllocation.ShowDimensions;
      // Verify shortcut dimension on the general journal allocation line is updated.
      ShortcutDimValueCode := GenJnlAllocation."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimItemJournal@19();
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
      ItemJournalLine@1002 : Record 83;
      DimensionSetID@1007 : Integer;
      ShortcutDimCode@1004 : Code[20];
      ShortcutDimValueCode@1003 : Code[20];
    BEGIN
      Initialize;

      PrepareItemJournal(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,FindItem,
        1);

      // Change shortcut dimension on the item journal line
      ShortcutDimValueCode :=
        EvaluateShortcutDimCode(ShortcutDimCode,ItemJournalLine."Shortcut Dimension 1 Code",ShortcutDimValueCode);
      ItemJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      ItemJournalLine.MODIFY(TRUE);

      // Verify dimension on item journal line dimension is updated
      DimensionSetID := ItemJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the item journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      ItemJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.ShowDimensions;
      // Verify shortcut dimension on the item journal is updated.
      ShortcutDimValueCode := ItemJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimResourceJournal@20();
    VAR
      ResJournalLine@1000 : Record 207;
      DocumentNo@1002 : Code[20];
      DimensionSetID@1001 : Integer;
      ShortcutDimCode@1004 : Code[20];
      ShortcutDimValueCode@1003 : Code[20];
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(ResJournalLine.FIELDNO("Document No."),DATABASE::"Res. Journal Line"));
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      // Create a resource journal line
      CreateResJournalLine(ResJournalLine,DocumentNo,FindResource);

      // Change shortcut dimension on the resource journal line
      ShortcutDimValueCode := EvaluateShortcutDimCode(ShortcutDimCode,ResJournalLine."Shortcut Dimension 1 Code",ShortcutDimValueCode);
      ResJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      ResJournalLine.MODIFY(TRUE);
      // Verify dimension on resource journal line dimension is updated
      DimensionSetID := ResJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the resource journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      ResJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ResJournalLine.MODIFY(TRUE);
      ResJournalLine.ShowDimensions;
      // Verify shortcut dimension on the resource journal is updated.
      ShortcutDimValueCode := ResJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimJobJournal@22();
    VAR
      JobJournalBatch@1004 : Record 237;
      JobJournalLine@1003 : Record 210;
      DocumentNo@1002 : Code[20];
      DimensionSetID@1006 : Integer;
      ShortcutDimCode@1001 : Code[20];
      ShortcutDimValueCode@1000 : Code[20];
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(JobJournalLine.FIELDNO("Document No."),DATABASE::"Job Journal Line"));
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      // Create a resource journal line
      FindJobBatch(JobJournalBatch);
      ClearJobJournalBatch(JobJournalBatch);
      CreateJobJournalLine(JobJournalLine,DocumentNo,FindJob);

      // Change shortcut dimension on the job journal line
      ShortcutDimValueCode := EvaluateShortcutDimCode(ShortcutDimCode,JobJournalLine."Shortcut Dimension 1 Code",ShortcutDimValueCode);
      JobJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      JobJournalLine.MODIFY(TRUE);
      // Verify dimension on job journal line dimension is updated
      DimensionSetID := JobJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the job journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      JobJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      JobJournalLine.MODIFY(TRUE);
      JobJournalLine.ShowDimensions;
      // Verify shortcut dimension on the job journal is updated.
      ShortcutDimValueCode := JobJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimFixedAssetJournal@26();
    VAR
      FAJournalBatch@1002 : Record 5620;
      FAJournalLine@1001 : Record 5621;
      FANo@1003 : Code[20];
      DocumentNo@1005 : Code[20];
      DimensionSetID@1007 : Integer;
      ShortcutDimCode@1006 : Code[20];
      ShortcutDimValueCode@1004 : Code[20];
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(FAJournalLine.FIELDNO("Document No."),DATABASE::"FA Journal Line"));
      FANo := FindFA;
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      FindFABatch(FAJournalBatch);
      ClearFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(FAJournalLine,DocumentNo,FANo);

      // Change shortcut dimension on the FA journal line
      ShortcutDimValueCode := EvaluateShortcutDimCode(ShortcutDimCode,FAJournalLine."Shortcut Dimension 1 Code",ShortcutDimValueCode);
      FAJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      FAJournalLine.MODIFY(TRUE);
      // Verify dimension on FA journal line dimension is updated
      DimensionSetID := FAJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the FA journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      FAJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      FAJournalLine.MODIFY(TRUE);
      FAJournalLine.ShowDimensions;
      // Verify shortcut dimension on the FA journal is updated.
      ShortcutDimValueCode := FAJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    [HandlerFunctions(HandleEditdimSetEntryForm)]
    PROCEDURE ShortcutDimInsuranceJournal@27();
    VAR
      InsuranceJournalBatch@1005 : Record 5634;
      InsuranceJournalLine@1004 : Record 5635;
      InsuranceNo@1002 : Code[20];
      DocumentNo@1001 : Code[20];
      DimensionSetID@1006 : Integer;
      ShortcutDimCode@1003 : Code[20];
      ShortcutDimValueCode@1000 : Code[20];
    BEGIN
      Initialize;

      EVALUATE(DocumentNo,LibraryUtility.GenerateRandomCode(InsuranceJournalLine.FIELDNO("Document No."),DATABASE::
          "Insurance Journal Line"));
      InsuranceNo := FindInsurance;
      ShortcutDimCode := FindShortcutDimension;
      ShortcutDimValueCode := FindDimensionValueCode(ShortcutDimCode);

      FindInsuranceBatch(InsuranceJournalBatch);
      ClearInsuranceJournalBatch(InsuranceJournalBatch);
      CreateInsuranceJournalLine(InsuranceJournalLine,DocumentNo,InsuranceNo);

      // Change shortcut dimension on the insurance journal journal line
      ShortcutDimValueCode := EvaluateShortcutDimCode(ShortcutDimCode,InsuranceJournalLine."Shortcut Dimension 1 Code",
          ShortcutDimValueCode);
      InsuranceJournalLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimValueCode);
      InsuranceJournalLine.MODIFY(TRUE);
      // Verify dimension on insurance journal line dimension is updated
      DimensionSetID := InsuranceJournalLine."Dimension Set ID";
      VerifyDimInJournalDimSet(ShortcutDimCode,ShortcutDimValueCode,DimensionSetID);

      // Change shortcut dimension on the insurance journal line dimension.
      DimensionSetID := LibraryDimension.DeleteDimSet(DimensionSetID,ShortcutDimCode);
      InsuranceJournalLine.VALIDATE("Dimension Set ID",DimensionSetID);
      InsuranceJournalLine.MODIFY(TRUE);
      InsuranceJournalLine.ShowDimensions;
      // Verify shortcut dimension on the insurance journal is updated.
      ShortcutDimValueCode := InsuranceJournalLine."Shortcut Dimension 1 Code";
      VerifyShortcutDim(ShortcutDimValueCode);
    END;

    [Test]
    PROCEDURE DefaultDimensionSingle@36();
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1004 : Record 81;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Test Functionality of Default Dimension Single.

      // Setup: Create Vendor with Default Dimension.
      Initialize;
      VendorNo := CreateVendor;
      SetupDefaultDimensions(DefaultDimension,DATABASE::Vendor,VendorNo);

      // Exercise: Create General Journal Line.
      PrepareGeneralJournal(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,VendorNo,-LibraryRandom.RandInt(1000));

      // Verify: Verify Dimension Code and Dimension Value Code on Dimension Set Entry.
      VerifyDimensionSetEntry(GenJournalLine."Dimension Set ID",DefaultDimension);
    END;

    [Test]
    PROCEDURE MultipleGeneralLinesWithDimension@40();
    VAR
      GenJournalLine@1001 : Record 81;
      GLEntry@1010 : Record 17;
      TempGenJournalLine@1000 : TEMPORARY Record 81;
    BEGIN
      // Check GLEntry Dimension after posting multiple General Journal Lines.

      // Setup: Create Multiple General Journal Lines with two different Dimensions.
      Initialize;
      CreateMultipleJournalLinesWithDimension(GenJournalLine);
      TempGenJournalLine := GenJournalLine;
      TempGenJournalLine.INSERT;

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify all GLEntries are created with Dimension which are used at the time of posting.
      TempGenJournalLine.FINDSET;
      REPEAT
        GLEntry.SETRANGE("Document No.",TempGenJournalLine."Document No.");
        GLEntry.SETRANGE("G/L Account No.",TempGenJournalLine."Account No.");
        GLEntry.SETRANGE("Global Dimension 2 Code",TempGenJournalLine."Shortcut Dimension 2 Code");
        GLEntry.FINDFIRST;
      UNTIL TempGenJournalLine.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler,DimensionSelectionMultiplePageHandler)]
    PROCEDURE PaymentJournalAccordingToByDimension@73();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check that Payment Journal contains correct entries filtered according to 'By Dimension' field value after executing the Suggest Vendor Payment.

      // Setup: Create and Post multiple General Journal Lines with two different Dimensions.
      Initialize;
      CreateMultipleJournalLinesWithDimension(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Run Suggest Vendor Payments report.
      OpenSuggestVendorPayments;

      // Verify.
      FindGeneralJournalLine(GenJournalLine);
      GenJournalLine.TESTFIELD("Shortcut Dimension 2 Code",'');
    END;

    [Test]
    [HandlerFunctions(DimensionSetEntriesPageHandler)]
    PROCEDURE PurchaseInvoiceWithVendorDimensions@53();
    VAR
      DefaultDimension@1000 : Record 352;
      PurchaseHeader@1003 : Record 38;
      PurchInvHeader@1002 : Record 122;
    BEGIN
      // Check the Dimensions on Posted Purchase Invoice.

      // 1. Setup: Create Vendor with Dimension.
      Initialize;
      CreateVendorWithDimension(DefaultDimension);
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");

      // 2. Exercise: Post the Purchase Invoice.
      PurchInvHeader.GET(CreateAndPostPurchaseInvoice(PurchaseHeader,DefaultDimension."No."));  // Default Dimension."No." contains Vendor No.

      // 3. Verify: Verify Dimensions on Purchase Invoice Using Dimension Set Entries PageHandler.
      PurchInvHeader.ShowDimensions;  // Opens Dimension Set Entries Page.
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithBankAccountRequestPageHandler,DimensionSelectionMultipleFALSEPageHandler,MessageHandler,EditDimensionSetEntriesPageHandler)]
    PROCEDURE PaymentJournalLineWithVendorAndBankAccountDimensions@61();
    VAR
      DefaultDimension@1002 : Record 352;
      DefaultDimension2@1005 : Record 352;
      GenJournalLine@1001 : Record 81;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      // Check the Dimensions on running Suggest Vendor Payments on Payment Journal when Balance Account Type is Bank Account.

      // 1. Setup: Post Purchase Invoice with Vendor Dimension and Create Payment Journal Line for Created Vendor.
      Initialize;
      CreateBankAccountWithDimension(DefaultDimension);
      CreateVendorWithDimension(DefaultDimension2);
      CreateAndPostPurchaseInvoice(PurchaseHeader,DefaultDimension2."No.");  // Default Dimension2."No." contains Vendor No.
      CreatePaymentGeneralJournalLine(GenJournalLine);

      // 2. Exercise: Suggest Vendor Payment using Page. Using page Vendor dimensions and Bank Account dimensions should be updated on Payment Journal.
      // Enqueue DefaultDimension."No.",DefaultDimension2."No." in Suggest Vendor Payments With Balance Account Type Bank Request Page Handler.
      LibraryVariableStorage.Enqueue(DefaultDimension."No.");  // Default Dimension."No." contains Bank Account No.
      LibraryVariableStorage.Enqueue(DefaultDimension2."No.");
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // 3. Verify: Verify on General Journal line exist with Bank Account Dimensions and Vendor Dimensions using EditDimensionSetEntriesPageHandler.
      FindGeneralJournalLineForAccountNo(GenJournalLine,DefaultDimension."No.");
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Code");
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");
      LibraryVariableStorage.Enqueue(DefaultDimension2."Dimension Code");
      LibraryVariableStorage.Enqueue(DefaultDimension2."Dimension Value Code");
      GenJournalLine.ShowDimensions;  // Opens Edit Dimension Set Entries Page.
    END;

    [Test]
    PROCEDURE PaymentJournalWithPurchaseInvoice@65();
    VAR
      GenJournalTemplate@1003 : Record 80;
      VendorLedgerEntry@1007 : Record 25;
      GenJournalLine@1005 : Record 81;
      PurchaseInvoiceDocumentNo@1116 : Code[20];
      VendorNo@1000 : Code[20];
    BEGIN
      // Test to validate Vendor Ledger Entry after Post Purchase invoice, Payment Journal and Purchase Application with Currency Code.

      // Setup: Create Vendor with Currency code, Create and post Purchase Invoice and Payment Journal.
      Initialize;
      VendorNo := CreateVendorWithCurrencyCode;
      PurchaseInvoiceDocumentNo := CreateAndPostPurchaseInvoiceWithCurrencyCode(VendorNo);
      CreateAndPostGenJournalLine(
        GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalLine."Account Type"::Vendor,VendorNo,
        LibraryRandom.RandDec(100,2));  // Use random value for Amount.

      // Exercise: Apply and post Purchase application.
      ApplyVendorEntry(
        VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,PurchaseInvoiceDocumentNo,GenJournalLine."Journal Batch Name");
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);

      // Verify: Verify Amount in Vendor Ledger Entry after post Purchase Application.
      VerifyVendorLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE CashReceiptJournalWithSalesInvoice@55();
    VAR
      GenJournalTemplate@1003 : Record 80;
      CustLedgerEntry@1007 : Record 21;
      GenJournalLine@1005 : Record 81;
      SalesInvoiceDocumentNo@1101 : Code[20];
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test to validate Customer Ledger Entry after Post Sales invoice, Cash Receipt Journal and Sales Application with Currency Code.

      // Setup: Create Customer with Currency code, Create and Post Sales Invoice and Cash Receipt Journal.
      Initialize;
      CustomerNo := CreateCustomerWithCurrencyCode;
      SalesInvoiceDocumentNo := CreateAndPostSalesInvoiceWithCurrencyCode(CustomerNo);
      CreateAndPostGenJournalLine(
        GenJournalLine,GenJournalTemplate.Type::"Cash Receipts",GenJournalLine."Account Type"::Customer,CustomerNo,
        -1 * LibraryRandom.RandDec(100,2)); // Use random value for Amount.

      // Exercise: Apply and post Sales application.
      ApplyCustomerEntry(
        CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,SalesInvoiceDocumentNo,GenJournalLine."Journal Batch Name");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);

      // Verify: Verify Amount in Customer Ledger Entry after post Sales Application.
      VerifyCustomerLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PurchaseOrderHandler)]
    PROCEDURE ValidateDimensionsOnPurchaseOrder@45();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Order Page.
      Initialize;
      DimensionsOnPurchaseLine(PAGE::"Purchase Order",PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PurchaseInvoiceHandler)]
    PROCEDURE ValidateDimensionsOnPurchaseInvoice@71();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Invoice Page.
      Initialize;
      DimensionsOnPurchaseLine(PAGE::"Purchase Invoice",PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PurchaseQuoteHandler)]
    PROCEDURE ValidateDimensionsOnPurchaseQuote@79();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Quote Page.
      Initialize;
      DimensionsOnPurchaseLine(PAGE::"Purchase Quote",PurchaseHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PurchaseCreditMemoHandler)]
    PROCEDURE ValidateDimensionsOnPurchaseCreditMemo@83();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Credit Memo Page.
      Initialize;
      DimensionsOnPurchaseLine(PAGE::"Purchase Credit Memo",PurchaseHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,SalesOrderHandler)]
    PROCEDURE ValidateDimensionsOnSalesOrder@96();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Order Page.
      Initialize;
      DimensionsOnSalesLine(PAGE::"Sales Order",SalesHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,SalesInvoiceHandler)]
    PROCEDURE ValidateDimensionsOnSalesInvoice@95();
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      // Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Invoice Page.
      Initialize;
      DimensionsOnSalesLine(PAGE::"Sales Invoice",SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,SalesQuoteHandler)]
    PROCEDURE ValidateDimensionsOnSalesQuote@94();
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      // Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Quote Page.
      Initialize;
      DimensionsOnSalesLine(PAGE::"Sales Quote",SalesHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,SalesCreditMemoHandler)]
    PROCEDURE ValidateDimensionsOnSalesCreditMemo@92();
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      // Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Credit Memo Page.
      Initialize;
      DimensionsOnSalesLine(PAGE::"Sales Credit Memo",SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceOrderHandler)]
    PROCEDURE ValidateDimensionsOnServiceOrder@98();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Invoice Page.
      Initialize;
      DimensionsOnServiceLine(PAGE::"Service Order",ServiceHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceInvoiceHandler)]
    PROCEDURE ValidateDimensionsOnServiceInvoice@103();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Invoice Page.
      Initialize;
      DimensionsOnServiceLine(PAGE::"Service Invoice",ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceQuoteHandler)]
    PROCEDURE ValidateDimensionsOnServiceQuote@99();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Quote Page.
      Initialize;
      DimensionsOnServiceLine(PAGE::"Service Quote",ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceCreditMemoHandler)]
    PROCEDURE ValidateDimensionsOnServiceCreditMemo@102();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Credit Memo Page.
      Initialize;
      DimensionsOnServiceLine(PAGE::"Service Credit Memo",ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE DefaultDimensionsOnServiceOrder@118();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Order.
      Initialize;
      DefaultDimensionsOnServiceLine(ServiceHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE DefaultDimensionsOnServiceInvoice@119();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Invoice.
      Initialize;
      DefaultDimensionsOnServiceLine(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE DefaultDimensionsOnServiceQuote@122();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Quote.
      Initialize;
      DefaultDimensionsOnServiceLine(ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE DefaultDimensionsOnServiceCreditMemo@120();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Credit Memo.
      Initialize;
      DefaultDimensionsOnServiceLine(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageDimFilterHandler,DimensionSelectionMultipleFALSEPageHandler)]
    PROCEDURE SuggestVendorPaymentGlobalDim1Filter@134();
    BEGIN
      // Verify that program suggest correct Journal Line depending on Dimension filtering. (Global Dimension 1 Code)
      VerifySuggestVendorPaymentsGlobalDimension1Code;
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageDimFilterHandler,DimensionSelectionMultipleFALSEPageHandler)]
    PROCEDURE SuggestVendorPaymentGlobalDim2Filter@133();
    BEGIN
      // Verify that program suggest correct Journal Line depending on Dimension filtering. (Global Dimension 2 Code)
      VerifySuggestVendorPaymentsGlobalDimension2Code;
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageDimFilterHandler,DimensionSelectionMultipleFALSEPageHandler)]
    PROCEDURE SuggestVendorPaymentCurrencyFilter@131();
    BEGIN
      // Verify that program suggest correct Journal Line depending on Currency filtering.
      VerifySuggestVendorPaymentsCurrencyFilterCode;
    END;

    [Test]
    PROCEDURE GenJournalFactBoxDimensionsNewLine@21();
    VAR
      GenJournalBatch@1001 : Record 232;
      GeneralJournal@1000 : TestPage 39;
    BEGIN
      // [FEATURE] [UI] [General Journal]
      // [SCENARIO 379229] General Journal Dimensions FactBox shows empty recordset for the new line
      Initialize;
      ClearGeneralJournalTemplates;

      // [GIVEN] Existing dimension set
      CreateNewDimensionSet;

      // [WHEN] New line in the general journal is being created
      PrepareGeneralJournal(GenJournalBatch);
      COMMIT;
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal.NEW;

      // [THEN] General Journal Dimensions fact box shows empty recordset
      Assert.IsFalse(GeneralJournal."Dimension Set Entries FactBox".FIRST,DimFactBoxDimSetIDErr);
    END;

    [Test]
    PROCEDURE GenJournalFactBoxDimensionsLineWithDimensions@162();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      GeneralJournal@1000 : TestPage 39;
    BEGIN
      // [FEATURE] [UI] [General Journal]
      // [SCENARIO 379229] General Journal Dimensions FactBox shows dimension set, related to "Dimension Set Id"
      Initialize;
      ClearGeneralJournalTemplates;

      // [GIVEN] Gen. Journal Line with some dimension set "DimSetID"
      PrepareGeneralJournal(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,LibraryRandom.RandDec(100,2));
      GenJournalLine."Dimension Set ID" := CreateNewDimensionSet;
      GenJournalLine.MODIFY(TRUE);

      // [WHEN] Created line is displayed in the general journal page
      COMMIT;
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal.FIRST;

      // [THEN] General Journal Dimensions fact box shows recordset related to "DimSetID"
      VerifyGenJournalDimFactBoxDimensionSet(GeneralJournal,GenJournalLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE CreateMultipleJournalLinesWithDimension@82(VAR GenJournalLine@1005 : Record 81);
    VAR
      DimensionValue@1000 : Record 349;
      GenJournalBatch@1009 : Record 232;
      GeneralLedgerSetup@1007 : Record 98;
      Counter@1002 : Integer;
      DimensionValueCode@1001 : Code[20];
    BEGIN
      // Create Journal Lines with two different Dimensions and use Random values.
      GeneralLedgerSetup.GET;
      DimensionCode := GeneralLedgerSetup."Global Dimension 1 Code";  // Assign in Global variable.
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionValueCode := DimensionValue.Code;
      VendorNo := CreateVendor;  // Assign in Global variable.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO BEGIN  // Add 1 to create more than one line.
        CreateGeneralJournalLine(
          GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",
          GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo);
        UpdateGeneralLineForBalanceAccount(GenJournalLine,GenJournalLine."Bal. Account Type"::Vendor,VendorNo);
        GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValueCode);
        GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
        GenJournalLine.MODIFY(TRUE);
        DimensionValue.NEXT;
      END;
    END;

    LOCAL PROCEDURE CreateVendorWithCurrencyCode@67() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CreateCurrency);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@50(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;DocumentType@1000 : Option;AccountType@1005 : Option;AccountNo@1004 : Code[20]);
    VAR
      GLAccount@1007 : Record 15;
    BEGIN
      // Using Random Number Generator for Amount.
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,
        LibraryRandom.RandDec(100,2));
      UpdateGeneralLineForBalanceAccount(GenJournalLine,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithGlobalDimCurrency@135(VAR GenJournalLine@1003 : Record 81;DocumentType@1000 : Option;AccountType@1005 : Option;AccountNo@1004 : Code[20];DimValCode1@1001 : Code[20];DimValCode2@1002 : Code[20];CurrencyCode@1009 : Code[10]);
    VAR
      GLAccount@1007 : Record 15;
      GenJournalTemplate@1008 : Record 80;
      GenJournalBatch@1006 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Bal. Account Type"::"G/L Account",GLAccount."No.",AccountType,AccountNo,
        LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimValCode1);
      GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",DimValCode2);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceWithCurrencyCode@48(CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoiceWithCurrencyCode@74(VendorNo@1002 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@69(VAR GenJournalLine@1000 : Record 81;TemplateType@1007 : Option;AccountType@1005 : Option;AccountNo@1004 : Code[20];Amount@1006 : Decimal);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch,TemplateType);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateNewDimensionSet@149() DimSetId : Integer;
    VAR
      DimensionValue@1001 : Record 349;
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        LibraryDimension.CreateDimWithDimValue(DimensionValue);
        DimSetId := LibraryDimension.CreateDimSet(DimSetId,DimensionValue."Dimension Code",DimensionValue.Code);
      END;
    END;

    LOCAL PROCEDURE DimensionsOnPurchaseLine@106(PageId@1000 : Integer;DocumentType@1007 : Option);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1002 : Record 39;
      LibraryCFHelper@1004 : Codeunit 131332;
      RecordRef@1005 : RecordRef;
      DimensionValue1Code@1003 : Code[20];
      DimensionValue2Code@1001 : Code[20];
    BEGIN
      // Setup: Create Purchase Document.
      GetDimensionsValues(DimensionValue1Code,DimensionValue2Code);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,DocumentType,CreateVendor);

      // Exercise: Update Dimensions on Page.
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      PAGE.RUNMODAL(PageId,PurchaseHeader);

      // Verify: Verfying Dimensions on Purchase line after updating Dimensions on Purchase Document Page.
      LibraryCFHelper.FindPurchaseLine(PurchaseLine,PurchaseHeader);
      RecordRef.GETTABLE(PurchaseLine);
      VerifyDimensionsOnLines(RecordRef,PurchaseLine.FIELDNO("Shortcut Dimension 1 Code"),
        PurchaseLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue1Code,DimensionValue2Code);
    END;

    LOCAL PROCEDURE DimensionsOnSalesLine@100(PageId@1000 : Integer;DocumentType@1007 : Option);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      LibraryCFHelper@1002 : Codeunit 131332;
      RecordRef@1004 : RecordRef;
      DimensionValue1Code@1003 : Code[20];
      DimensionValue2Code@1001 : Code[20];
    BEGIN
      // Setup: Create Sales Document.
      GetDimensionsValues(DimensionValue1Code,DimensionValue2Code);
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CreateCustomer);

      // Exercise: Update Dimensions on Page.
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      PAGE.RUNMODAL(PageId,SalesHeader);

      // Verify: Verfying Dimensions on Sales line after updating Dimensions on Sales Document Page.
      LibraryCFHelper.FindSalesLine(SalesLine,SalesHeader);
      RecordRef.GETTABLE(SalesLine);
      VerifyDimensionsOnLines(RecordRef,SalesLine.FIELDNO("Shortcut Dimension 1 Code"),
        SalesLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue1Code,DimensionValue2Code);
    END;

    LOCAL PROCEDURE DimensionsOnServiceLine@49(PageId@1000 : Integer;DocumentType@1007 : Option);
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1002 : Record 5902;
      RecordRef@1004 : RecordRef;
      DimensionValue1Code@1003 : Code[20];
      DimensionValue2Code@1001 : Code[20];
    BEGIN
      // Setup: Create Sales Document.
      GetDimensionsValues(DimensionValue1Code,DimensionValue2Code);
      CreateServiceDocument(ServiceHeader,DocumentType,CreateCustomer);

      // Exercise: Update Dimensions on Page.
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      PAGE.RUNMODAL(PageId,ServiceHeader);

      // Verify: Verfying Dimensions on Service line after updating Dimensions on Service Document Page.
      FindServiceLine(ServiceLine,ServiceHeader);
      RecordRef.GETTABLE(ServiceLine);
      VerifyDimensionsOnLines(RecordRef,ServiceLine.FIELDNO("Shortcut Dimension 1 Code"),
        ServiceLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue1Code,DimensionValue2Code);
    END;

    LOCAL PROCEDURE DequeueDimensions@87(VAR DimensionValue1Code@1000 : Variant;VAR DimensionValue2Code@1001 : Variant);
    BEGIN
      LibraryVariableStorage.Dequeue(DimensionValue1Code);
      LibraryVariableStorage.Dequeue(DimensionValue2Code);
    END;

    LOCAL PROCEDURE DefaultDimensionsOnServiceLine@124(DocumentType@1004 : Option);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ShortcutDimCode@1005 : Code[20];
      CustomerNo@1000 : Code[20];
    BEGIN
      // Setup: Create Customer with Default dimensions.
      CustomerNo := CreateCustomer;
      ShortcutDimCode := FindShortcutDimension;
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo,ShortcutDimCode,
        FindDimensionValueCode(ShortcutDimCode));

      // Exercise: Create Service Document.
      CreateServiceDocument(ServiceHeader,DocumentType,CustomerNo);

      // Verify: Verifing Dimensions on Service Line.
      FindServiceLine(ServiceLine,ServiceHeader);
      ServiceLine.TESTFIELD("Shortcut Dimension 1 Code",ServiceHeader."Shortcut Dimension 1 Code");
      ServiceLine.TESTFIELD("Shortcut Dimension 2 Code",ServiceHeader."Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE FindGeneralJournalLine@85(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      GenJournalLine.SETRANGE("Account No.",VendorNo);
      GenJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ApplyCustomerEntry@1095(VAR ApplyingCustLedgerEntry@1096 : Record 21;DocumentType@1097 : Option;DocumentNo@1098 : Code[20];JournalBatchName@1000 : Code[20]);
    VAR
      CustLedgerEntry@1099 : Record 21;
      GLRegister@1100 : Record 45;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(ApplyingCustLedgerEntry,DocumentType,DocumentNo);
      ApplyingCustLedgerEntry.VALIDATE(Open,TRUE);
      ApplyingCustLedgerEntry.MODIFY(TRUE);
      ApplyingCustLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(ApplyingCustLedgerEntry,ApplyingCustLedgerEntry."Remaining Amount");

      // Find Posted Customer Ledger Entries.
      FindGLRegister(GLRegister,JournalBatchName);
      CustLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      CustLedgerEntry.FINDFIRST;

      // Set Applies-to ID.
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyVendorEntry@1085(VAR ApplyingVendorLedgerEntry@1086 : Record 25;DocumentType@1087 : Option;DocumentNo@1088 : Code[20];JournalBatchName@1000 : Code[20]);
    VAR
      VendorLedgerEntry@1089 : Record 25;
      GLRegister@1090 : Record 45;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(ApplyingVendorLedgerEntry,DocumentType,DocumentNo);
      ApplyingVendorLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyVendorEntry(ApplyingVendorLedgerEntry,ApplyingVendorLedgerEntry."Remaining Amount");

      // Find Posted Vendor Ledger Entries.
      FindGLRegister(GLRegister,JournalBatchName);
      VendorLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      VendorLedgerEntry.FINDFIRST;

      // Set Applies-to ID.
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE OpenSuggestVendorPayments@44();
    VAR
      PaymentJournal@1000 : TestPage 256;
    BEGIN
      DeleteAllPmtGenJnlTemplateButOne;
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.SuggestVendorPayments.INVOKE;
    END;

    LOCAL PROCEDURE DeleteAllPmtGenJnlTemplateButOne@129();
    VAR
      GenJnlTemplate@1000 : Record 80;
    BEGIN
      GenJnlTemplate.SETRANGE(Type,GenJnlTemplate.Type::Payments);
      GenJnlTemplate.FINDFIRST;
      GenJnlTemplate.SETFILTER(Name,'<>%1',GenJnlTemplate.Name);
      GenJnlTemplate.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateGeneralLineForBalanceAccount@80(VAR GenJournalLine@1000 : Record 81;BalAccountType@1001 : Option;BalAccountNo@1002 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDimensionSetID@24(VAR DefaultDimension@1000 : Record 352;DimensionSetID@1001 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      // Compare dimension set on the "Customer" / "G/L Account" to that on the journal line
      DefaultDimension.FINDSET;
      REPEAT
        DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
        DimensionSetEntry.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        Assert.AreEqual(DimensionSetEntry."Dimension Value Code",DefaultDimension."Dimension Value Code",'Dimension value mismatch');
      UNTIL DefaultDimension.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimInJournalDimSet@23(ShortcutDimCode@1000 : Code[20];ShortcutDimValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimCode);
      DimensionSetEntry.FINDFIRST;
      Assert.AreEqual(
        DimensionSetEntry."Dimension Value Code",ShortcutDimValueCode,'Wrong Dimension value on gen. Jnl. line dimension');
    END;

    LOCAL PROCEDURE VerifyGLEntryDim@33(DocumentNo@1001 : Code[20];AccountNo@1003 : Code[20];DimSetID@1002 : Integer);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",AccountNo);
      GLEntry.FINDSET;
      Assert.IsTrue(GLEntry.COUNT > 0,'No entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,GLEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntryDim@30(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDSET;
      Assert.IsTrue(CustLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,CustLedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryDim@75(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDSET;
      Assert.IsTrue(ItemLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,ItemLedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReclassItemLedgerEntryDim@63(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer;NewDimSetID@1003 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      OldFound@1004 : Boolean;
      NewFound@1005 : Boolean;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDSET;
      Assert.IsTrue(ItemLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        CASE ItemLedgerEntry."Dimension Set ID" OF
          DimSetID:
            OldFound := TRUE;
          NewDimSetID:
            NewFound := TRUE;
        END;
      UNTIL ItemLedgerEntry.NEXT = 0;

      Assert.AreEqual(TRUE,OldFound,'Old dimension set not found.');
      Assert.AreEqual(TRUE,NewFound,'New dimension set not found.');
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntryDim@86(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      ResLedgerEntry@1000 : Record 203;
    BEGIN
      ResLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ResLedgerEntry.FINDSET;
      Assert.IsTrue(ResLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,ResLedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL ResLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryDim@141(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.FINDSET;
      Assert.IsTrue(JobLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,JobLedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL JobLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyFALedgerEntryDim@163(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("Document No.",DocumentNo);
      FALedgerEntry.FINDSET;
      Assert.IsTrue(FALedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,FALedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL FALedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyInsuranceLedgerEntryDim@175(DocumentNo@1001 : Code[20];DimSetID@1002 : Integer);
    VAR
      InsCoverageLedgerEntry@1000 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("Document No.",DocumentNo);
      InsCoverageLedgerEntry.FINDSET;
      Assert.IsTrue(InsCoverageLedgerEntry.COUNT > 0,'No ledger entries were posted');

      REPEAT
        Assert.AreEqual(DimSetID,InsCoverageLedgerEntry."Dimension Set ID",'Mismatch in dimension set');
      UNTIL InsCoverageLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShortcutDim@25(ActualShortcutDimValueCode@1000 : Code[20]);
    BEGIN
      Assert.AreEqual('',ActualShortcutDimValueCode,'Shortcut Dimension value is not deleted');
    END;

    LOCAL PROCEDURE EvaluateShortcutDimCode@31(DimCode@1002 : Code[20];CurrentShortcutDimValueCode@1000 : Code[20];CompareToShortcutDimValueCode@1001 : Code[20]) : Code[10];
    BEGIN
      IF (CurrentShortcutDimValueCode <> '') AND (CurrentShortcutDimValueCode = CompareToShortcutDimValueCode) THEN
        CompareToShortcutDimValueCode := FindDiffDimensionValueCode(DimCode,CompareToShortcutDimValueCode);

      EXIT(CompareToShortcutDimValueCode);
    END;

    LOCAL PROCEDURE FindGLRecurringBatch@1(VAR GenJnlBatch@1000 : Record 232);
    VAR
      GenJnlTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.FindRecurringTemplateName(GenJnlTemplate);
      GenJnlBatch.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
      GenJnlBatch.SETFILTER(Name,'<>%1','');
      IF NOT GenJnlBatch.FINDFIRST THEN
        LibraryERM.CreateGenJournalBatch(GenJnlBatch,GenJnlTemplate.Name);
      GenJnlBatch.Recurring := GenJnlTemplate.Recurring;
      GenJnlBatch.MODIFY(TRUE);
      GenJnlBatch.SetupNewBatch;
    END;

    LOCAL PROCEDURE FindResourceBatch@78(VAR ResJournalBatch@1000 : Record 236);
    BEGIN
      ResJournalBatch.SETRANGE(Recurring,FALSE);
      ResJournalBatch.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobBatch@127(VAR JobJournalBatch@1000 : Record 237);
    BEGIN
      JobJournalBatch.SETRANGE(Recurring,FALSE);
      JobJournalBatch.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFABatch@155(VAR FAJournalBatch@1000 : Record 5620);
    BEGIN
      FAJournalBatch.SETRANGE(Recurring,FALSE);
      FAJournalBatch.FINDFIRST;

      // Disable FA number series
      FAJournalBatch.VALIDATE("No. Series",'');
      FAJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindInsuranceBatch@176(VAR InsuranceJournalBatch@1000 : Record 5634);
    BEGIN
      InsuranceJournalBatch.FINDFIRST;

      // Disable Insurance number series
      InsuranceJournalBatch.VALIDATE("No. Series",'');
      InsuranceJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@17() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@123() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindItem@70() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE FindResource@81() : Code[20];
    VAR
      Resource@1000 : Record 156;
    BEGIN
      Resource.FINDFIRST;
      EXIT(Resource."No.");
    END;

    LOCAL PROCEDURE FindJob@128() : Code[20];
    VAR
      Job@1000 : Record 167;
    BEGIN
      Job.FINDFIRST;
      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE FindJobTask@137(JobNo@1001 : Code[20]) : Code[20];
    VAR
      JobTask@1000 : Record 1001;
    BEGIN
      JobTask.SETRANGE("Job No.",JobNo);
      JobTask.SETRANGE("Job Task Type",JobTask."Job Task Type"::Posting);
      JobTask.FINDFIRST;
      EXIT(JobTask."Job Task No.");
    END;

    LOCAL PROCEDURE FindFA@157() : Code[20];
    VAR
      FixedAsset@1000 : Record 5600;
    BEGIN
      FixedAsset.FINDFIRST;
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE FindInsurance@177() : Code[20];
    VAR
      Insurance@1000 : Record 5628;
    BEGIN
      Insurance.FINDFIRST;
      EXIT(Insurance."No.");
    END;

    LOCAL PROCEDURE FindDimensionSet@51() : Integer;
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.NEXT(LibraryRandom.RandInt(DimensionSetEntry.COUNT));
      EXIT(DimensionSetEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE FindShortcutDimension@6() : Code[20];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."Shortcut Dimension 1 Code");
    END;

    LOCAL PROCEDURE FindDimensionValueCode@52(DimensionCode@1000 : Code[20]) : Code[20];
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
      DimensionValue.FINDFIRST;
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDiffDimensionValueCode@18(DimensionCode@1000 : Code[20];DimValueCode@1001 : Code[20]) : Code[20];
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
      DimensionValue.SETFILTER(Code,'<>' + DimValueCode);
      DimensionValue.FINDFIRST;
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindServiceLine@109(VAR ServiceLine@1003 : Record 5902;ServiceHeader@1000 : Record 5900);
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServiceHeader."Document Type");
        SETRANGE("Document No.",ServiceHeader."No.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindGeneralJournalLineForAccountNo@68(VAR GenJournalLine@1000 : Record 81;AccountNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      GenJournalLine.SETRANGE("Bal. Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupDefaultDimensions@121(VAR DefaultDimension@1004 : Record 352;TableID@1003 : Integer;No@1000 : Code[20]);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      ClearDefaultDimensionCodes(TableID,No);

      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,TableID,No,Dimension.Code,
        FindDimensionValueCode(Dimension.Code));

      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.FINDSET;
    END;

    LOCAL PROCEDURE ClearDimensionPriority@193();
    VAR
      DefaultDimensionPriority@1000 : Record 354;
    BEGIN
      DefaultDimensionPriority.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearGenJournalBatchAllocation@41(GenJournalBatch@1001 : Record 232);
    VAR
      GenJnlAllocation@1000 : Record 221;
    BEGIN
      GenJnlAllocation.SETFILTER("Journal Batch Name",GenJournalBatch.Name);
      GenJnlAllocation.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearJobJournalBatch@152(JobJournalBatch@1000 : Record 237);
    VAR
      JobJournalLine@1001 : Record 210;
    BEGIN
      JobJournalLine.SETFILTER("Journal Batch Name",JobJournalBatch.Name);
      JobJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearFAJournalBatch@158(FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      FAJournalLine.SETFILTER("Journal Batch Name",FAJournalBatch.Name);
      FAJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearInsuranceJournalBatch@178(InsuranceJournalBatch@1000 : Record 5634);
    VAR
      InsuranceJournalLine@1001 : Record 5635;
    BEGIN
      InsuranceJournalLine.SETFILTER("Journal Batch Name",InsuranceJournalBatch.Name);
      InsuranceJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearResourceJournalBatch@29(ResJournalBatch@1000 : Record 236);
    VAR
      ResJournalLine@1001 : Record 207;
    BEGIN
      ResJournalLine.SETFILTER("Journal Batch Name",ResJournalBatch.Name);
      ResJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearDefaultDimensionCodes@42(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearGeneralJournalTemplates@136();
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.DELETEALL;
    END;

    LOCAL PROCEDURE CreateBankAccountWithDimension@62(VAR DefaultDimension@1001 : Record 352);
    VAR
      BankAccount@1004 : Record 270;
      Dimension@1003 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Bank Account",BankAccount."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateResJournalLine@107(VAR ResJournalLine@1002 : Record 207;DocumentNo@1001 : Code[20];ResourceNo@1003 : Code[20]);
    VAR
      ResJournalBatch@1000 : Record 236;
    BEGIN
      FindResourceBatch(ResJournalBatch);
      ClearResourceJournalBatch(ResJournalBatch);
      WITH ResJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",ResJournalBatch."Journal Template Name");
        VALIDATE("Journal Batch Name",ResJournalBatch.Name);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Entry Type","Entry Type"::Usage);
        VALIDATE("Resource No.",ResourceNo);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobJournalLine@125(VAR JobJournalLine@1002 : Record 210;DocumentNo@1001 : Code[20];JobNo@1003 : Code[20]);
    VAR
      JobJournalBatch@1000 : Record 237;
    BEGIN
      FindJobBatch(JobJournalBatch);
      WITH JobJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",JobJournalBatch."Journal Template Name");
        VALIDATE("Journal Batch Name",JobJournalBatch.Name);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Entry Type","Entry Type"::Usage);
        VALIDATE("Job No.",JobNo);
        VALIDATE("Job Task No.",FindJobTask(JobNo));
        VALIDATE(Type,Type::Resource);
        VALIDATE("No.",FindResource);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateFAJournalLine@159(VAR FAJournalLine@1002 : Record 5621;DocumentNo@1001 : Code[20];FANo@1003 : Code[20]);
    VAR
      FAJournalBatch@1000 : Record 5620;
    BEGIN
      FindFABatch(FAJournalBatch);
      WITH FAJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",FAJournalBatch."Journal Template Name");
        VALIDATE("Journal Batch Name",FAJournalBatch.Name);
        VALIDATE("FA Posting Date",WORKDATE);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Document Type","Document Type"::Invoice);
        VALIDATE("FA No.",FANo);
        VALIDATE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
        VALIDATE(Amount,LibraryRandom.RandInt(1000));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@64(VAR PurchaseHeader@1000 : Record 38;VendorNo@1002 : Code[20]) : Code[20];
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateGLAccountWithVAT,LibraryRandom.RandInt(10));  // Take Random Value for Quantity.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@93(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1002 : Record 39;DocumentType@1003 : Option;VendorNo@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesDocument@97(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1003 : Option;CustomerNo@1002 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateServiceDocument@105(VAR ServiceHeader@1001 : Record 5900;DocumentType@1003 : Option;CustomerNo@1000 : Code[20]);
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1002 : Record 5902;
      LibraryService@1004 : Codeunit 131902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CreateCustomer);
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem);
      IF (DocumentType = ServiceHeader."Document Type"::Order) OR (DocumentType = ServiceHeader."Document Type"::Quote) THEN BEGIN
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrencyCode@56() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CreateCurrency);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@88(VAR GenJournalBatch@1002 : Record 232;TemplateType@1003 : Option);
    VAR
      GenJournalTemplate@1000 : Record 80;
      BankAccount@1001 : Record 270;
    BEGIN
      CreateGeneralJournalTemplate(GenJournalTemplate,TemplateType);
      LibraryERM.FindBankAccount(BankAccount);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"Bank Account");
      GenJournalBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalTemplate@91(VAR GenJournalTemplate@1000 : Record 80;Type@1001 : Option);
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccountWithVAT@60() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      VATPostingSetup@1001 : Record 325;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Purchase);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@132() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@14() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateInsuranceJournalLine@179(VAR InsuranceJournalLine@1002 : Record 5635;DocumentNo@1001 : Code[20];InsuranceNo@1003 : Code[20]);
    VAR
      InsuranceJournalBatch@1000 : Record 5634;
    BEGIN
      FindInsuranceBatch(InsuranceJournalBatch);
      WITH InsuranceJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",InsuranceJournalBatch."Journal Template Name");
        VALIDATE("Journal Batch Name",InsuranceJournalBatch.Name);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Document Type","Document Type"::Invoice);
        VALIDATE("Insurance No.",InsuranceNo);
        VALIDATE("FA No.",FindFA);
        VALIDATE(Amount,LibraryRandom.RandInt(1000));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePaymentGeneralJournalLine@66(VAR GenJournalLine@1001 : Record 81);
    VAR
      GenJournalTemplate@1000 : Record 80;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePostInvoicesWithCurrency@130(VAR GenJournalLine@1005 : Record 81;VAR VendorNo@1001 : Code[20];VAR Currency1Code@1006 : Code[10];VAR Currency2Code@1004 : Code[10]);
    VAR
      Vendor@1000 : Record 23;
      Currency@1002 : Record 4;
    BEGIN
      // 1. Setup: Create and Post Purch Invoice using different Currencies
      // for every invoice.

      LibraryPurchase.CreateVendor(Vendor);
      VendorNo := Vendor."No.";
      LibraryERM.FindCurrency(Currency);
      Currency1Code := Currency.Code;
      CreateGeneralJournalLineWithGlobalDimCurrency(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Bal. Account Type"::Vendor,Vendor."No.",'','',Currency.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Currency.NEXT;
      Currency2Code := Currency.Code;
      CreateGeneralJournalLineWithGlobalDimCurrency(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Bal. Account Type"::Vendor,Vendor."No.",'','',Currency.Code);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CLEAR(GenJournalLine);

      CreatePaymentGeneralJournalLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostInvoicesWithGlobalDimCode@138(DimensionCode@1002 : Code[20];VAR GenJournalLine@1005 : Record 81;VAR VendorNo@1001 : Code[20];VAR DimValCode@1006 : ARRAY [2] OF Code[20]);
    VAR
      Vendor@1000 : Record 23;
      DimVal@1008 : Record 349;
      Counter@1003 : Integer;
    BEGIN
      // 1. Setup: Create 2 Dimension Values for Global Dimension 1/2 Code, Post Purch Invoice using different Dimension Values
      // for every invoice.

      LibraryPurchase.CreateVendor(Vendor);
      VendorNo := Vendor."No.";

      FOR Counter := 1 TO 2 DO BEGIN
        LibraryDimension.CreateDimensionValue(DimVal,DimensionCode);
        DimValCode[Counter] := DimVal.Code;
        IF DimensionCode = LibraryERM.GetGlobalDimensionCode(1) THEN
          CreateGeneralJournalLineWithGlobalDimCurrency(
            GenJournalLine,GenJournalLine."Document Type"::Invoice,
            GenJournalLine."Bal. Account Type"::Vendor,Vendor."No.",DimVal.Code,'','')
        ELSE
          CreateGeneralJournalLineWithGlobalDimCurrency(
            GenJournalLine,GenJournalLine."Document Type"::Invoice,
            GenJournalLine."Bal. Account Type"::Vendor,Vendor."No.",'',DimVal.Code,'');
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
      CLEAR(GenJournalLine);

      CreatePaymentGeneralJournalLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@59(VAR DefaultDimension@1001 : Record 352);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,CreateVendor,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindGLRegister@47(VAR GLRegister@1000 : Record 45;JournalBatchName@1001 : Code[20]);
    BEGIN
      GLRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      GLRegister.FINDFIRST;
    END;

    LOCAL PROCEDURE GetDimensionsValues@90(VAR DimensionValue1Code@1000 : Code[20];VAR DimensionValue2Code@1001 : Code[20]);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      DimensionValue1@1003 : Record 349;
      DimensionValue2@1004 : Record 349;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue1,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.FindDimensionValue(DimensionValue2,GeneralLedgerSetup."Global Dimension 2 Code");
      DimensionValue1Code := DimensionValue1.Code;
      DimensionValue2Code := DimensionValue2.Code;
      LibraryVariableStorage.Enqueue(DimensionValue1Code);
      LibraryVariableStorage.Enqueue(DimensionValue2Code);
    END;

    LOCAL PROCEDURE PostResJournalBatch@112(VAR ResJournalLine@1000 : Record 207);
    BEGIN
      // Post resource journal batch
      CODEUNIT.RUN(CODEUNIT::"Res. Jnl.-Post Batch",ResJournalLine);
    END;

    LOCAL PROCEDURE PostJobJournalBatch@126(VAR JobJournalLine@1000 : Record 210);
    BEGIN
      // Post job journal batch
      CODEUNIT.RUN(CODEUNIT::"Job Jnl.-Post Batch",JobJournalLine);
    END;

    LOCAL PROCEDURE PostFAJournalBatch@160(VAR FAJournalLine@1000 : Record 5621);
    BEGIN
      // Post fixed asset journal batch
      CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Post Batch",FAJournalLine);
    END;

    LOCAL PROCEDURE PostInsuranceJournalBatch@180(VAR InsuranceJournalLine@1000 : Record 5635);
    BEGIN
      // Post insurance journal batch
      CODEUNIT.RUN(CODEUNIT::"Insurance Jnl.-Post Batch",InsuranceJournalLine);
    END;

    LOCAL PROCEDURE PrepareGeneralJournal@13(VAR GenJournalBatch@1001 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE PrepareItemJournal@28(VAR ItemJournalBatch@1001 : Record 233;ItemJournalTemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SuggestVendorPaymentUsingPage@72(VAR GenJournalLine@1000 : Record 81);
    VAR
      SuggestVendorPayments@1001 : Report 393;
    BEGIN
      COMMIT;  // Commit required to avoid rollback of write transaction before opening Suggest Vendor Payments Report.
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE SuggestVendorPaymentAndVerifyGlobalDim1@143(VAR GenJournalLine@1000 : Record 81;VendorNo@1001 : Code[20];DimValCode@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue(DimValCode);
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue('');
      SuggestVendorPaymentAndCount(GenJournalLine,VendorNo);
      Assert.AreEqual(
        DimValCode,GenJournalLine."Shortcut Dimension 1 Code",
        STRSUBSTNO(ValueIncorrectErr,GenJournalLine.FIELDCAPTION("Shortcut Dimension 1 Code")));
    END;

    LOCAL PROCEDURE SuggestVendorPaymentAndVerifyGlobalDim2@142(VAR GenJournalLine@1000 : Record 81;VendorNo@1001 : Code[20];DimValCode@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(DimValCode);
      LibraryVariableStorage.Enqueue('');
      SuggestVendorPaymentAndCount(GenJournalLine,VendorNo);
      Assert.AreEqual(
        DimValCode,GenJournalLine."Shortcut Dimension 2 Code",
        STRSUBSTNO(ValueIncorrectErr,GenJournalLine.FIELDCAPTION("Shortcut Dimension 2 Code")));
    END;

    LOCAL PROCEDURE SuggestVendorPaymentAndVerifyCurrency@140(VAR GenJournalLine@1000 : Record 81;VendorNo@1001 : Code[20];CurrencyCode@1002 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(CurrencyCode);
      SuggestVendorPaymentAndCount(GenJournalLine,VendorNo);
      Assert.AreEqual(
        CurrencyCode,GenJournalLine."Currency Code",
        STRSUBSTNO(ValueIncorrectErr,GenJournalLine.FIELDCAPTION("Currency Code")));
    END;

    LOCAL PROCEDURE SuggestVendorPaymentAndCount@139(VAR GenJournalLine@1000 : Record 81;VendorNo@1001 : Code[20]);
    BEGIN
      SuggestVendorPaymentUsingPage(GenJournalLine);
      WITH GenJournalLine DO BEGIN
        RESET;
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",VendorNo);
        Assert.AreEqual(1,COUNT,NoOfSuggestedLineIncorrectErr);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@39(DimensionSetID@1001 : Integer;DefaultDimension@1002 : Record 352);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.GET(DimensionSetID,DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@15(DocumentType@1103 : Option;DocumentNo@1104 : Code[20];Amount@1106 : Decimal);
    VAR
      CustLedgerEntry@1107 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(CustLedgerEntry.Amount,Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(AmountError,Amount));
      CustLedgerEntry.TESTFIELD("Remaining Amount",0);  // Remaining Amount should be 0 after post Sales Application.
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@1108(DocumentType@1109 : Option;DocumentNo@1110 : Code[20];Amount@1112 : Decimal);
    VAR
      VendorLedgerEntry@1113 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(VendorLedgerEntry.Amount,Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(AmountError,Amount));
      VendorLedgerEntry.TESTFIELD("Remaining Amount",0);  // Remaining Amount should be 0 after post Purchase Application.
    END;

    LOCAL PROCEDURE VerifyDimensionsOnLines@54(RecRef@1000 : RecordRef;ShortcutDimension1@1006 : Integer;ShortcutDimension2@1007 : Integer;DimensionValue1@1008 : Code[20];DimensionValue2@1009 : Code[20]);
    VAR
      ShortcutDim1FieldRef@1003 : FieldRef;
      ShortcutDim2FieldRef@1002 : FieldRef;
    BEGIN
      ShortcutDim1FieldRef := RecRef.FIELD(ShortcutDimension1);
      ShortcutDim2FieldRef := RecRef.FIELD(ShortcutDimension2);
      ShortcutDim1FieldRef.TESTFIELD(DimensionValue1);
      ShortcutDim2FieldRef.TESTFIELD(DimensionValue2);
    END;

    LOCAL PROCEDURE VerifySuggestVendorPaymentsGlobalDimension1Code@146();
    VAR
      GenJournalLine@1001 : Record 81;
      DimValCode@1008 : ARRAY [2] OF Code[20];
    BEGIN
      Initialize;
      CreatePostInvoicesWithGlobalDimCode(LibraryERM.GetGlobalDimensionCode(1),GenJournalLine,VendorNo,DimValCode);
      // Verify a line is suggested for every Dimension Value of Global Dimension 1
      SuggestVendorPaymentAndVerifyGlobalDim1(GenJournalLine,VendorNo,DimValCode[1]);
      GenJournalLine.DELETE;
      SuggestVendorPaymentAndVerifyGlobalDim1(GenJournalLine,VendorNo,DimValCode[2]);
    END;

    LOCAL PROCEDURE VerifySuggestVendorPaymentsGlobalDimension2Code@145();
    VAR
      GenJournalLine@1001 : Record 81;
      DimValCode@1008 : ARRAY [2] OF Code[20];
    BEGIN
      Initialize;
      CreatePostInvoicesWithGlobalDimCode(LibraryERM.GetGlobalDimensionCode(2),GenJournalLine,VendorNo,DimValCode);
      // Verify a line is suggested for every Dimension Value of Global Dimension 2
      SuggestVendorPaymentAndVerifyGlobalDim2(GenJournalLine,VendorNo,DimValCode[1]);
      GenJournalLine.DELETE;
      SuggestVendorPaymentAndVerifyGlobalDim2(GenJournalLine,VendorNo,DimValCode[2]);
    END;

    LOCAL PROCEDURE VerifySuggestVendorPaymentsCurrencyFilterCode@144();
    VAR
      GenJournalLine@1001 : Record 81;
      Currency1Code@1008 : Code[10];
      Currency2Code@1009 : Code[10];
    BEGIN
      Initialize;
      CreatePostInvoicesWithCurrency(GenJournalLine,VendorNo,Currency1Code,Currency2Code);
      // Verify a line is suggested for every Currency
      SuggestVendorPaymentAndVerifyCurrency(GenJournalLine,VendorNo,Currency1Code);
      GenJournalLine.DELETE;
      SuggestVendorPaymentAndVerifyCurrency(GenJournalLine,VendorNo,Currency2Code);
    END;

    LOCAL PROCEDURE VerifyGenJournalDimFactBoxDimensionSet@170(VAR GeneralJournal@1000 : TestPage 39;ExpectedDimSetId@1002 : Integer);
    VAR
      FactBoxDimSetId@1001 : Integer;
    BEGIN
      IF GeneralJournal."Dimension Set Entries FactBox".FIRST THEN
        REPEAT
          FactBoxDimSetId :=
            LibraryDimension.CreateDimSet(
              FactBoxDimSetId,
              GeneralJournal."Dimension Set Entries FactBox"."Dimension Code".VALUE,
              GeneralJournal."Dimension Set Entries FactBox"."Dimension Value Code".VALUE);
        UNTIL NOT GeneralJournal."Dimension Set Entries FactBox".NEXT;
      Assert.AreEqual(ExpectedDimSetId,FactBoxDimSetId,DimFactBoxDimSetIDErr);
    END;

    [ModalPageHandler]
    PROCEDURE HandleEditdimSetEntryForm@11(VAR EditDimSetEntries@1000 : Page 480;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@32(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionMultiplePageHandler@77(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,DimensionCode);
      DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsRequestPageHandler@76(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      GLAccount@1001 : Record 15;
      BalAccountType@1002 : 'G/L Account,,,Bank Account';
    BEGIN
      SuggestVendorPayments.BalAccountNo.SETVALUE('');
      LibraryERM.FindGLAccount(GLAccount);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(CALCDATE('<CM>',WORKDATE));
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(TRUE);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(VendorNo);
      SuggestVendorPayments.BalAccountType.SETVALUE(BalAccountType::"G/L Account");
      SuggestVendorPayments.BalAccountNo.SETVALUE(GLAccount."No.");
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNo);
      SuggestVendorPayments.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsRequestPageDimFilterHandler@147(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      GLAccount@1001 : Record 15;
      VendorNo1@1003 : Variant;
      DimVal1@1005 : Variant;
      DimVal2@1004 : Variant;
      CurrencyCode@1006 : Variant;
      BalAccountType@1002 : 'G/L Account,,,Bank Account';
    BEGIN
      LibraryVariableStorage.Dequeue(VendorNo1);
      LibraryVariableStorage.Dequeue(DimVal1);
      LibraryVariableStorage.Dequeue(DimVal2);
      LibraryVariableStorage.Dequeue(CurrencyCode);
      SuggestVendorPayments.BalAccountNo.SETVALUE('');
      LibraryERM.FindGLAccount(GLAccount);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(CALCDATE('<CM>',WORKDATE));
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(FALSE);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(VendorNo1);
      SuggestVendorPayments.BalAccountType.SETVALUE(BalAccountType::"G/L Account");
      SuggestVendorPayments.BalAccountNo.SETVALUE(GLAccount."No.");
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNo1);
      SuggestVendorPayments.Vendor.SETFILTER("Global Dimension 1 Filter",DimVal1);
      SuggestVendorPayments.Vendor.SETFILTER("Global Dimension 2 Filter",DimVal2);
      SuggestVendorPayments.Vendor.SETFILTER("Currency Filter",CurrencyCode);
      SuggestVendorPayments.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionMultipleFALSEPageHandler@43(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionSelectionMultiple.Selected.SETVALUE(FALSE);
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSetEntriesPageHandler@38(VAR DimensionSetEntries@1000 : TestPage 479);
    VAR
      VendorDimensionValueCode@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorDimensionValueCode);
      DimensionSetEntries.DimensionValueCode.ASSERTEQUALS(VendorDimensionValueCode);
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesPageHandler@37(VAR EditDimensionSetEntries@1000 : TestPage 480);
    VAR
      BankAccountDimensionCode@1004 : Variant;
      BankAccountDimensionValueCode@1003 : Variant;
      VendorDimensionCode@1001 : Variant;
      VendorDimensionValueCode@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BankAccountDimensionCode);
      LibraryVariableStorage.Dequeue(BankAccountDimensionValueCode);
      LibraryVariableStorage.Dequeue(VendorDimensionCode);
      LibraryVariableStorage.Dequeue(VendorDimensionValueCode);
      EditDimensionSetEntries.FILTER.SETFILTER("Dimension Code",BankAccountDimensionCode);
      EditDimensionSetEntries.DimensionValueCode.ASSERTEQUALS(BankAccountDimensionValueCode);
      EditDimensionSetEntries.FILTER.SETFILTER("Dimension Code",VendorDimensionCode);
      EditDimensionSetEntries.DimensionValueCode.ASSERTEQUALS(VendorDimensionValueCode);
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithBankAccountRequestPageHandler@46(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      BankAccountNo@1001 : Variant;
      VendorNumber@1002 : Variant;
      BalAccountType@1004 : 'G/L Account,,,Bank Account';
    BEGIN
      SuggestVendorPayments.BalAccountNo.SETVALUE('');
      SuggestVendorPayments.BalAccountType.SETVALUE(BalAccountType::"Bank Account");
      LibraryVariableStorage.Dequeue(BankAccountNo);  // Dequeue DefaultDimension."No." as Bank Account No..
      LibraryVariableStorage.Dequeue(VendorNumber);  // Dequeue DefaultDimension."No." as Vendor No.
      SuggestVendorPayments.BalAccountNo.SETVALUE(BankAccountNo);
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNumber);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(FALSE);
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;  // Opens Dimension Selection Multiple Page.
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));
      SuggestVendorPayments.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@34(Message@1000 : Text[1024]);
    BEGIN
      // Dummy Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderHandler@84(VAR PurchaseOrder@1000 : TestPage 50);
    VAR
      DimensionValue1Code@1002 : Variant;
      DimensionValue2Code@1001 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      PurchaseOrder."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      PurchaseOrder."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseInvoiceHandler@115(VAR PurchaseInvoice@1000 : TestPage 51);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      PurchaseInvoice."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      PurchaseInvoice."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseQuoteHandler@116(VAR PurchaseQuote@1000 : TestPage 49);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      PurchaseQuote."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      PurchaseQuote."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseCreditMemoHandler@117(VAR PurchaseCreditMemo@1000 : TestPage 52);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      PurchaseCreditMemo."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      PurchaseCreditMemo."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderHandler@113(VAR SalesOrder@1000 : TestPage 42);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      SalesOrder."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      SalesOrder."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE SalesInvoiceHandler@111(VAR SalesInvoice@1000 : TestPage 43);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      SalesInvoice."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      SalesInvoice."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE SalesQuoteHandler@110(VAR SalesQuote@1000 : TestPage 41);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      SalesQuote."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      SalesQuote."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE SalesCreditMemoHandler@108(VAR SalesCreditMemo@1000 : TestPage 44);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      SalesCreditMemo."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      SalesCreditMemo."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceOrderHandler@104(VAR ServiceOrder@1000 : TestPage 5900);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      ServiceOrder."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      ServiceOrder."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceInvoiceHandler@101(VAR ServiceInvoice@1000 : TestPage 5933);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      ServiceInvoice."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      ServiceInvoice."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceQuoteHandler@114(VAR ServiceQuote@1000 : TestPage 5964);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      ServiceQuote."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      ServiceQuote."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceCreditMemoHandler@89(VAR ServiceCreditMemo@1000 : TestPage 5935);
    VAR
      DimensionValue1Code@1001 : Variant;
      DimensionValue2Code@1002 : Variant;
    BEGIN
      DequeueDimensions(DimensionValue1Code,DimensionValue2Code);
      ServiceCreditMemo."Shortcut Dimension 1 Code".SETVALUE(DimensionValue1Code);
      ServiceCreditMemo."Shortcut Dimension 2 Code".SETVALUE(DimensionValue2Code);
    END;

    BEGIN
    {
      // [FEATURE] [Dimension]
      Unsupported version tags:
      NA: Unable to Compile

      Test posting of various Journals with Dimension.
      1. Check posting of BOM Journal when Dimension Value Posting = Code Mandatory for both parent and component item and also check
         Dimension and Quantity of component item on Item Ledger Entries after posting.
      2. Test Functionality of Default Dimension Single.
      3. Check GLEntry Dimension after posting multiple General Journal Lines.
      4. Check that Payment Journal contains correct entries filtered according to 'By Dimension' field value after executing the Suggest Vendor Payment.
      5. Verify that program populate correct Dimensions on Posted Purchase Invoice.
      6. Verify that program populate correct Dimensions after running Suggest Vendor Payments on Payment Journal when Balance Account Type is Bank Account.
      7. Test to validate Vendor Ledger Entry after Post Purchase invoice, Payment Journal and Purchase Application with Currency Code.
      8. Test to validate Customer Ledger Entry after Post Sales invoice, Cash Receipt Journal and Sales Application with Currency Code.
      9. Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Order Page.
      10. Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Invoice Page.
      11. Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Quote Page.
      12. Verify that program populate correct Dimensions on Purchase Line when Dimensions are updated on Purchase Credit Memo Page.
      13. Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Order Page.
      14. Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Invoice Page.
      15. Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Quote Page.
      16. Verify that program populate correct Dimensions on Sales Line when Dimensions are updated on Sales Credit Memo Page.
      17. Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Order Page.
      18. Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Invoice Page.
      19. Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Quote Page.
      20. Verify that program populate correct Dimensions on Service Line when Dimensions are updated on Service Credit memo Page.
      21. Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Order.
      22. Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Invoice.
      23. Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Quote.
      24. Verify that program populate correct dimensions on Service Line when Customer created with default dimensions on Service Credit Memo.
      25. Verify that program suggest correct Journal Line depending on Dimension/Currency filtering.

        Covers Test Cases - 259772
        ---------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------
        DimBOMJournal                        245725

        Covers Test Cases - 261076
        ---------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------
        DefaultDimensionSingle               199625

        Covers Test Cases - 277341
        ---------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------
        MultipleGeneralLinesWithDimension,
        PaymentJournalAccordingToByDimension  276353

        Covers Test cases: 288335
        -----------------------------------------------------------------
        Test Function Name                                        TFS ID
        -----------------------------------------------------------------
        PurchaseInvoiceWithVendorDimensions,
        PaymentJournalLineWithVendorAndBankAccountDimensions      288334

        Covers Test Cases - 286571
        ---------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------
        PaymentJournalWithPurchaseInvoice,
        CashReceiptJournalWithSalesInvoice    286569

        Covers Test Cases for Bug Id's: 53760 & 54441
        ------------------------------------------------------------------------------------------
        Test Function Name                                                          TFS ID
        ------------------------------------------------------------------------------------------
        ValidateDimensionsOnPurchaseOrder,ValidateDimensionsOnPurchaseInvoice,
        ValidateDimensionsOnPurchaseQuote,ValidateDimensionsOnPurchaseCreditMemo,
        ValidateDimensionsOnSalesOrder,ValidateDimensionsOnSalesInvoice,
        ValidateDimensionsOnSalesQuote,ValidateDimensionsOnSalesCreditMemo,
        ValidateDimensionsOnServiceOrder,ValidateDimensionsOnServiceInvoice,
        ValidateDimensionsOnServiceQuote,ValidateDimensionsOnServiceCreditMemo,
        DefaultDimensionsOnServiceOrder,DefaultDimensionsOnServiceInvoice,
        DefaultDimensionsOnServiceQuote,DefaultDimensionsOnServiceCreditMemo
    }
    END.
  }
}

