OBJECT Codeunit 134047 ERM VAT Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      VATPostingSetup2@1024 : Record 325;
      Assert@1003 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryMarketing@1015 : Codeunit 131900;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1001 : Codeunit 130509;
      LibraryVariableStorage@1026 : Codeunit 131004;
      LibraryRandom@1000 : Codeunit 130440;
      FormatError@1009 : TextConst 'ENU=The entered VAT Registration number is not in agreement with the format specified for Country/Region Code %1.The following formats are acceptable: %2';
      VATFormatError@1006 : TextConst 'ENU=VAT Registration No. must be %1 for %2: %3.';
      ErrorMustAppear@1007 : TextConst 'ENU=Error message must appear after wrong VAT Registration No. updation.';
      CountryRegionError@1008 : TextConst 'ENU=%1 must be exist.';
      MultiCustomerMsg@1012 : TextConst 'ENU=This VAT registration number has already been entered for the following customers: %1';
      MultiVendorMsg@1011 : TextConst 'ENU=This VAT registration number has already been entered for the following vendors: %1';
      MultiContactMsg@1010 : TextConst 'ENU=This VAT registration number has already been entered for the following contacts: %1';
      VendorNo@1013 : Code[20];
      CustomerNo@1014 : Code[20];
      ContactNo@1016 : Code[20];
      IsInitialized@1002 : Boolean;
      UnexpectedMsg@1017 : TextConst 'ENU=Unexpected message dialog: %1';
      ExpectedMessage@1018 : TextConst 'ENU=The VAT Registration number is not valid.The first character (T Element) of the number is invalid.Do you still want to save it?';
      ExpectedMessage2@1019 : TextConst 'ENU=The VAT Registration number is not valid.The length of the number exceeds the maximum limit of 9 characters.Do you still want to save it?';
      Selection@1023 : 'All fields,Selected fields';
      VATetc@1022 : Boolean;
      SalesAccounts@1021 : Boolean;
      PurchaseAccounts@1020 : Boolean;
      VATError@1025 : TextConst 'ENU=%1 must be %2 in %3.';

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE InvalidVATFormatOnCompany@8();
    VAR
      CompanyInformation@1004 : Record 79;
      CountryRegionCode@1005 : Code[10];
      VATFormat@1002 : Text[20];
    BEGIN
      // Check Error Message after entering wrong VAT Registration No. on Company.

      // Setup: Create new Country/Region. Create VAT Registration No. Format. Change Country/Region in Company Information.
      Initialize;
      VATFormat := CreateCountryVATRegistration(CountryRegionCode);
      ModifyCompanyInformation(CompanyInformation,CountryRegionCode);

      // Exercise: Put an Invalid VAT Registration No in Company Information.
      ASSERTERROR CompanyInformation.VALIDATE("VAT Registration No.",'Test.' + FORMAT(100 + LibraryRandom.RandInt(899)));

      // Verify: Verify the Error Message appeared while changing VAT Registration No.
      Assert.AreEqual(STRSUBSTNO(FormatError,CountryRegionCode,VATFormat),ConvertMessage(GETLASTERRORTEXT),ErrorMustAppear);
    END;

    [Test]
    [HandlerFunctions(LengthConfirmHandler)]
    PROCEDURE ValidVATFormatOnCompany@9();
    VAR
      CompanyInformation@1004 : Record 79;
      CountryRegionCode@1001 : Code[10];
      CountryRegionCodeOld@1005 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Check VAT Registration No. after entering valid VAT Registration No. on Company.

      // Setup: Create new Country/Region. Create VAT Registration No. Format. Change Country/Region in Company Information.
      Initialize;
      CreateCountryVATRegistration(CountryRegionCode);
      CountryRegionCodeOld := ModifyCompanyInformation(CompanyInformation,CountryRegionCode);
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));  // Create Valid Random VAT Registration No.

      // Exercise: Enter valid VAT Registration No in Company Information.
      CompanyInformation.VALIDATE("VAT Registration No.",VATRegistrationNo);
      CompanyInformation.MODIFY(TRUE);

      // Verify: Check that Correct VAT Registration No. updated in Company Information.
      Assert.AreEqual(
        VATRegistrationNo,CompanyInformation."VAT Registration No.",STRSUBSTNO(VATFormatError,VATRegistrationNo,
          CompanyInformation.TABLECAPTION,CompanyInformation.Name));

      // Tear Down: Rollback Company Information, Delete Country created during Setup.
      ModifyCompanyInformation(CompanyInformation,CountryRegionCodeOld);
      DeleteCountryRegion(CountryRegionCode);
    END;

    [Test]
    [HandlerFunctions(LengthConfirmHandler)]
    PROCEDURE InvalidVATFormatOnCustomer@1();
    VAR
      CompanyInformation@1004 : Record 79;
      Customer@1005 : Record 18;
      CountryRegionCode@1000 : Code[10];
      VATFormat@1002 : Text[20];
    BEGIN
      // Verify Error after providing wrong VAT Registration No. for an existing Customer without Country Code.

      // Setup: Create new Country/Region. Create VAT Registration No. Format. Change Country/Region in Company Information.
      // Find a Customer and update its Country/Region Code.
      Initialize;
      VATFormat := CreateCountryVATRegistration(CountryRegionCode);
      ModifyCompanyInformation(CompanyInformation,CountryRegionCode);
      LibrarySales.CreateCustomer(Customer);

      // Exercise: Enter an invalid VAT Registration No for Customer. Taking Random value greater than 999 to produce
      // invalide values for VAT Registration No.
      ASSERTERROR Customer.VALIDATE("VAT Registration No.",'TEST.' + FORMAT(999 + LibraryRandom.RandInt(10)));

      // Verify: Verify the Error Message appeared while changing VAT Registration No.
      Assert.AreEqual(STRSUBSTNO(FormatError,CountryRegionCode,VATFormat),ConvertMessage(GETLASTERRORTEXT),ErrorMustAppear);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE ValidVATFormatOnCustomer@10();
    VAR
      Customer@1005 : Record 18;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify Valid VAT Registration No. for a new customer, enter Country Code different from the Company's.

      // Setup: Create new Country/Region. Create VAT Registration No. Format and update Company Information. Create a new Country
      // and multiple VAT Registration No. Formats for it. Create Customer and update the later created Country Code on it.
      // Take Random Values to create a Valid VAT Registration Code for Customer.
      Initialize;
      CreateCountryWithMultipleVAT(CountryRegionCode);
      CreateAndUpdateCountryCustomer(Customer,CountryRegionCode);
      VATRegistrationNo := 'TEST1.' + FORMAT(100 + LibraryRandom.RandInt(899)) + '.1';

      // Exercise: Enter a valid VAT Registration No for Customer according to second VAT Registration No. Format.
      Customer.VALIDATE("VAT Registration No.",VATRegistrationNo);
      Customer.MODIFY(TRUE);

      // Verify: Verify that Correct VAT Registration No. updated on Customer.
      Assert.AreEqual(
        VATRegistrationNo,Customer."VAT Registration No.",STRSUBSTNO(VATFormatError,VATRegistrationNo,Customer.TABLECAPTION,
          Customer."No."));

      // Tear Down: Rollback Company Information, Delete Customer and Countries created.
      Customer.DELETE(TRUE);
      DeleteCountryRegion(CountryRegionCode);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE ValidVATFormatOnVendor@3();
    VAR
      Vendor@1005 : Record 23;
      Vendor2@1001 : Record 23;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify VAT Registration No. for an existing Vendor, enter Country Code different from the Company's.

      // Setup: Create new Country/Region. Create VAT Registration No. Format and update Company Information. Create a new Country
      // and multiple VAT Registration No. Formats for it. Find a Vendor and update the later created Country Code on it.
      // Take Random Values to create a Valid VAT Registration Code for Vendor.
      Initialize;
      CreateCountryWithMultipleVAT(CountryRegionCode);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor2.GET(Vendor."No.");
      UpdateCountryOnVendor(Vendor,CountryRegionCode);
      VATRegistrationNo := 'TEST1.' + FORMAT(100 + LibraryRandom.RandInt(899)) + '.1';

      // Exercise: Enter a valid VAT Registration No in Vendor Card according to second VAT Registration No. Format.
      UpdateVendorVATRegistration(Vendor,VATRegistrationNo);

      // Verify: Verify that Correct VAT Registration No. updated on vendor.
      Assert.AreEqual(
        VATRegistrationNo,Vendor."VAT Registration No.",STRSUBSTNO(VATFormatError,VATRegistrationNo,Vendor.TABLECAPTION,Vendor."No."));

      // Tear Down: Rollback Vendor VAT Registration, Company Information and Delete Countries created.
      UpdateVendorVATRegistration(Vendor,Vendor2."VAT Registration No.");
      UpdateCountryOnVendor(Vendor,Vendor2."Country/Region Code");
      DeleteCountryRegion(CountryRegionCode);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE InvalidVATFormatOnVendor@4();
    VAR
      CompanyInformation@1004 : Record 79;
      Vendor@1005 : Record 23;
      CountryRegionCode@1006 : Code[10];
      VATFormat@1000 : Text[20];
    BEGIN
      // Verify Error Message for a new Vendor without Country Code after entering wrong VAT Registration No.

      // Setup: Create new Country/Region, VAT Registration No. Format. Modify Company Information and Create Vendor.
      Initialize;
      VATFormat := CreateCountryVATRegistration(CountryRegionCode);
      ModifyCompanyInformation(CompanyInformation,CountryRegionCode);
      LibraryPurchase.CreateVendor(Vendor);

      // Exercise: Put an Invalid VAT Registration No. for Vendor. Take Random Value for VAT Registration No.
      ASSERTERROR Vendor.VALIDATE("VAT Registration No.",'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899)) + '.1');

      // Verify: Verify the Error Message appeared while changing VAT Registration No.
      Assert.AreEqual(STRSUBSTNO(FormatError,CountryRegionCode,VATFormat),ConvertMessage(GETLASTERRORTEXT),ErrorMustAppear);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE ValidVATFormatOnContact@17();
    VAR
      CompanyInformation@1004 : Record 79;
      Contact@1005 : Record 5050;
      CountryRegionCode@1006 : Code[10];
      CountryRegionCodeOld@1007 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify VAT Registration No. for a new contact without Country Code and with Valid VAT Format.

      // Setup: Create new Country/Region, VAT Registration No. Format. Modify Company Information and Create Contact.
      // Take Random Values to create a valid VAT Registration No.
      Initialize;
      CreateCountryVATRegistration(CountryRegionCode);
      CountryRegionCodeOld := ModifyCompanyInformation(CompanyInformation,CountryRegionCode);
      LibraryMarketing.CreateContact(Contact);
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));

      // Exercise: Put a valid VAT Registration No. in Contact Card.
      Contact.VALIDATE("VAT Registration No.",VATRegistrationNo);
      Contact.MODIFY(TRUE);

      // Verify: Verify that correct VAT Registration No. updated on Contact.
      Assert.AreEqual(
        VATRegistrationNo,Contact."VAT Registration No.",STRSUBSTNO(VATFormatError,VATRegistrationNo,Contact.TABLECAPTION,
          Contact."No."));

      // Tear Down: Rollback Company Information, Delete Contact, Country Code.
      Contact.DELETE(TRUE);
      ModifyCompanyInformation(CompanyInformation,CountryRegionCodeOld);
      DeleteCountryRegion(CountryRegionCode);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE InvalidVATFormatOnContact@14();
    VAR
      Contact@1005 : Record 5050;
      CountryRegionCode@1006 : Code[10];
      VATFormat@1007 : Text[20];
    BEGIN
      // Verify Error Message for a Contact after entering wrong VAT Registration No.

      // Setup: Create new Country/Region, VAT Registration No. Format. Find a Contact and Update Country Code on it.
      Initialize;
      VATFormat := CreateCountryVATRegistration(CountryRegionCode);
      LibraryMarketing.FindContact(Contact);
      UpdateCountryOnContact(Contact,CountryRegionCode);

      // Exercise: Put an invalid VAT Registration No. in Contact Card. Use Random Values to create it.
      ASSERTERROR Contact.VALIDATE("VAT Registration No.",'Test' + FORMAT(LibraryRandom.RandInt(100)));

      // Verify: Verify the Error Message appeared while changing VAT Registration No.
      Assert.AreEqual(STRSUBSTNO(FormatError,CountryRegionCode,VATFormat),ConvertMessage(GETLASTERRORTEXT),ErrorMustAppear);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE CountryRegionDeletion@13();
    VAR
      CountryRegion@1001 : Record 9;
      CountryRegionCode@1005 : Code[10];
    BEGIN
      // Check Error Message after entering wrong VAT Registration No. on Company.

      // Setup: Create new Country/Region and VAT Registration No. Format.
      Initialize;
      CreateCountryVATRegistration(CountryRegionCode);

      // Exercise: Delete Created Country Region.
      DeleteCountryRegion(CountryRegionCode);

      // Verify: Verify that Counrtry Region is no more after deletion.
      Assert.IsFalse(CountryRegion.GET(CountryRegionCode),STRSUBSTNO(CountryRegionError,CountryRegion.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(MessageHandlerVendor,InvalidCharConfirmHandler)]
    PROCEDURE DuplicateVATOnVendor@16();
    VAR
      Vendor@1001 : Record 23;
      Vendor2@1002 : Record 23;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify Message for VAT Registration No. after entering same VAT Registration No. on two Vendors.

      // Setup: Create Country, VAT Registration. Create Vendor with the newly created Country and VAT Registration.
      Initialize;
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));
      CreateCountryVATRegistration(CountryRegionCode);
      CreateVendorWithCountryVAT(Vendor,CountryRegionCode,VATRegistrationNo);
      VendorNo := Vendor."No.";  // Store Vendor No. to use it in Verification.

      // Exercise: Create another Vendor and update the same Country and VAT Registration No. as used on first Vendor.
      CreateVendorWithCountryVAT(Vendor2,CountryRegionCode,VATRegistrationNo);

      // Verify: Verify the message appeared.
      // -------------------------------------------------------------------------------
      // Verification done in Message Handler for Vendor: MessageHandlerVendor.
      // -------------------------------------------------------------------------------

      // Tear Down: Delete Country and Vendors created.
      DeleteCountryRegion(CountryRegionCode);
      Vendor.DELETE(TRUE);
      Vendor2.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE DuplicateVATOnVendorCustomer@27();
    VAR
      Vendor@1001 : Record 23;
      Customer@1002 : Record 18;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify VAT Registration No. on Customer after entering same VAT Registration No. on a Vendor and on a Customer.

      // Setup: Create Country, VAT Registration Format. Update the same on Vendor.
      Initialize;
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));
      CreateCountryVATRegistration(CountryRegionCode);
      CreateVendorWithCountryVAT(Vendor,CountryRegionCode,VATRegistrationNo);

      // Exercise: Update VAT Registration No. and Country on Customer as used on Vendor.
      CreateCustomerWithCountryVAT(Customer,CountryRegionCode,VATRegistrationNo);

      // Verify: Verify that Correct VAT Registration No. updated on Customer and no warning appears.
      Assert.AreEqual(
        Vendor."VAT Registration No.",Customer."VAT Registration No.",STRSUBSTNO(VATFormatError,VATRegistrationNo,
          Customer.TABLECAPTION,Customer."No."));

      // Tear Down: Delete Country, Customer and Vendor created.
      DeleteCountryRegion(CountryRegionCode);
      Customer.DELETE(TRUE);
      Vendor.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandlerCustomer,InvalidCharConfirmHandler)]
    PROCEDURE DuplicateVATOnCustomer@21();
    VAR
      Customer@1002 : Record 18;
      Customer2@1003 : Record 18;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify Message for VAT Registration No. after entering the same VAT Registration No. on two Customers.

      // Setup: Create Country, VAT Registration format, Create Customer and attach the Country and VAT Registration No.
      Initialize;
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));
      CreateCountryVATRegistration(CountryRegionCode);
      CreateCustomerWithCountryVAT(Customer,CountryRegionCode,VATRegistrationNo);
      CustomerNo := Customer."No.";

      // Exercise: Create another Customer and attach same Country and VAT Registration No.
      CreateCustomerWithCountryVAT(Customer2,CountryRegionCode,VATRegistrationNo);

      // Verify: Verify the message appeared.
      // --------------------------------------------------------------------------------
      // Verification done in Message Handler for Customer: MessageHandlerCustomer
      // --------------------------------------------------------------------------------

      // Tear Down: Delete Country and Customers created.
      DeleteCountryRegion(CountryRegionCode);
      Customer.DELETE(TRUE);
      Customer2.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandlerCustomer,InvalidCharConfirmHandler)]
    PROCEDURE DuplicateVATOnMultipleCustomer@37();
    VAR
      Customer@1003 : Record 18;
      Customer2@1001 : Record 18;
      Customer3@1002 : Record 18;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify Message for VAT Registration No. after entering the same VAT Registration No. on more than two Customers.

      // Setup: Create Country and VAT Registration Format. Create Customers with same VAT Registration No.
      Initialize;
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));
      CreateCountryVATRegistration(CountryRegionCode);
      CreateCustomerWithCountryVAT(Customer,CountryRegionCode,VATRegistrationNo);
      CustomerNo := Customer."No.";
      CreateCustomerWithCountryVAT(Customer2,CountryRegionCode,VATRegistrationNo);

      // Exercise: Update Country and VAT Registration on another new Customer
      CreateCustomerWithCountryVAT(Customer3,CountryRegionCode,VATRegistrationNo);

      // Verify: Verify the message appeared.
      // --------------------------------------------------------------------------------
      // Verification done in Message Handler for Customer: MessageHandlerCustomer.
      // --------------------------------------------------------------------------------

      // Tear Down: Delete Country, Customers created.
      DeleteCountryRegion(CountryRegionCode);
      Customer.DELETE(TRUE);
      Customer2.DELETE(TRUE);
      Customer3.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandlerContact,InvalidCharConfirmHandler)]
    PROCEDURE DuplicateVATOnContact@28();
    VAR
      Customer@1003 : Record 18;
      Vendor@1001 : Record 23;
      Contact@1004 : Record 5050;
      Contact2@1005 : Record 5050;
      CountryRegionCode@1006 : Code[10];
      VATRegistrationNo@1000 : Text[20];
    BEGIN
      // Verify Message for VAT Registration No. after entering the same VAT Registration No. on Vendor, Customer and Contacts.

      // Setup: Create Country with VAT Registration, Vendor, Customer, Contact and update Country and VAT Registration No.
      Initialize;
      VATRegistrationNo := 'TEST.' + FORMAT(100 + LibraryRandom.RandInt(899));
      CreateCountryVATRegistration(CountryRegionCode);
      CreateVendorWithCountryVAT(Vendor,CountryRegionCode,VATRegistrationNo);
      CreateCustomerWithCountryVAT(Customer,CountryRegionCode,VATRegistrationNo);
      CreateContactWithCountryVAT(Contact,CountryRegionCode,VATRegistrationNo);
      ContactNo := Contact."No.";

      // Exercise: Create a new Contact and update same Country and VAT Registration No. on Contact.
      CreateContactWithCountryVAT(Contact2,CountryRegionCode,VATRegistrationNo);

      // Verify: Verify the message appeared.
      // ---------------------------------------------------------------------------
      // Verification done in Message Handler for Contact: MessageHandlerContact.
      // ---------------------------------------------------------------------------

      // Tear Down: Delete Country, Customer, Vendor and Contacts created.
      DeleteCountryRegion(CountryRegionCode);
      Customer.DELETE(TRUE);
      Vendor.DELETE(TRUE);
      Contact.DELETE(TRUE);
      Contact2.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE VATFormatForBlankCountryCode@33();
    VAR
      CountriesRegions@1000 : TestPage 10;
    BEGIN
      // Check VAT Reg. No. Format Action is not enable when try to create new VAT Reg. No. Format for a blank Country/Region Code.

      // Setup.
      Initialize;

      // Exercise: Open Country/Regions page with blank Country code.
      CountriesRegions.OPENNEW;

      // Verify.
      Assert.IsFalse(
        CountriesRegions."Page VAT Registration No. Formats".ENABLED,'VAT Registration No. Formats button must not be enabled.');
    END;

    [Test]
    [HandlerFunctions(InvalidCharConfirmHandler)]
    PROCEDURE DeleteCountryRegionVATFormat@41();
    VAR
      VATRegistrationNoFormats@1000 : TestPage 575;
      CountryRegionCode@1002 : Code[10];
      VATFormat@1001 : Text[20];
    BEGIN
      // Check VAT Reg. No. Format is deleted after deleting Country/Region Code.

      // Setup: Create new Country/Region and Create VAT Registration No. Format for it.
      Initialize;
      VATFormat := CreateCountryVATRegistration(CountryRegionCode);

      // Exercise: Delete Country/Region Code.
      DeleteCountryRegion(CountryRegionCode);

      // Verify: Verify VAT Format does not exist on VAT Registration No. Formats page.
      VATRegistrationNoFormats.OPENVIEW;
      VATRegistrationNoFormats.FILTER.SETFILTER("Country/Region Code",CountryRegionCode);
      ASSERTERROR VATRegistrationNoFormats.Format.ASSERTEQUALS(VATFormat);
    END;

    [Test]
    [HandlerFunctions(CopyFieldHandler,ConfirmHandler)]
    PROCEDURE CopyVATSetupAllFields@32();
    VAR
      VATPostingSetup@1004 : Record 325;
    BEGIN
      // Copy VAT Posting Setup with all fields and Verify.

      // Setup: Create VAT Posting Setup.
      Initialize;
      Selection := Selection::"All fields";
      VATetc := TRUE;
      SalesAccounts := TRUE;
      PurchaseAccounts := TRUE;
      CreateVATPostingSetup(VATPostingSetup);

      // Exercise: Copy VAT Posting Setup with all fields.
      FindVATPostingSetup;
      COMMIT;
      CopyVATPostingSetup(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");  // Use CopyAllFieldHandler here.

      // Verify: Check VAT Posting Setup with copied Setup.
      VerifyVATPostingSetup(VATPostingSetup);
    END;

    [Test]
    [HandlerFunctions(CopyFieldHandler,ConfirmHandler)]
    PROCEDURE CopyVATSetupSelectedFields@117();
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      // Copy VAT Posting Setup with selected fields and Verify.

      // Setup: Create VAT Posting Setup.
      Initialize;
      Selection := Selection::"Selected fields";
      VATetc := TRUE;
      SalesAccounts := TRUE;
      PurchaseAccounts := FALSE;
      CreateVATPostingSetup(VATPostingSetup);

      // Exercise: Copy VAT Posting Setup with selected fields.
      FindVATPostingSetup;
      COMMIT;
      CopyVATPostingSetup(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");    // Use CopySelectedFieldHandler here.

      // Verify: Check VAT Posting Setup with copied Setup.
      VerifyVATPostingSetup(VATPostingSetup);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE VATRegistrationAfterUpdatingBalanceAccount@39();
    VAR
      Customer@1000 : Record 18;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      GLAccount@1003 : Record 15;
    BEGIN
      // Check that VAT Registration No. updated on General Journal Line after updating Balance Account No. with a Customer having VAT Registration No.

      // Setup: Find a Customer, Create General Journal Line for GL Account.
      Initialize;
      LibrarySales.CreateCustomerWithVATRegNo(Customer);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);

      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        GLAccount."No.");

      // Exercise: Update Balance Account As Customer in General Journal Line.
      UpdateBalanceAccountInGeneralJournalLine(GenJournalLine,GenJournalLine."Bal. Account Type"::Customer,Customer."No.");

      // Verify: Verify that VAT Registration No. updated on General Journal Line after updating Balance Account No.
      VerifyVATRegistrationOnGeneralJournalLine(GenJournalLine,Customer."VAT Registration No.");

      // Tear Down: Clear General Journal Line.
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE BlankVATRegistrationAfterUpdatingBalanceAccount@59();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      GLAccount@1003 : Record 15;
    BEGIN
      // Check that VAT Registration No. field is blank on General Journal Line after updating Balance Account with GL Account.

      // Setup: Create General Journal Line for GL Account.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        GLAccount."No.");

      // Exercise: Update Balance Account as GL Account in General Journal Line.
      GLAccount.NEXT;
      UpdateBalanceAccountInGeneralJournalLine(GenJournalLine,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccount."No.");

      // Verify: Verify that VAT Registration No. is blank on General Journal Line after updating Balance Account No.
      VerifyVATRegistrationOnGeneralJournalLine(GenJournalLine,'');

      // Tear Down: Clear General Journal Line.
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE VATRegistrationForCustomerOnJournalLine@75();
    VAR
      Customer@1000 : Record 18;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check VAT Registration No. on General Journal Line with a Customer having VAT Registration No.

      // Setup.
      Initialize;
      LibrarySales.CreateCustomerWithVATRegNo(Customer);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);

      // Exercise: Create General Journal Line for Customer.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::Customer,Customer."No.");

      // Verify: Verify that VAT Registration No. field updated on General Journal Line.
      VerifyVATRegistrationOnGeneralJournalLine(GenJournalLine,Customer."VAT Registration No.");

      // Tear Down: Clear the General Journal Line.
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    [Test]
    [HandlerFunctions(CopyVatPostingSetupRequestPageHandler,ConfirmHandler)]
    PROCEDURE CheckValueOnVATPostingSetup@76();
    VAR
      VATPostingSetupWithAccounts@1000 : Record 325;
      VATPostingSetup@1001 : Record 325;
      VATPostingSetupCard@1002 : TestPage 473;
    BEGIN
      // Verify that Program Copy New Accounts in Vat Posting Setup Card through Copy Functionality.

      // Setup: Find And Create VAT Posting Setup.
      Initialize;
      FindVATPostingSetupWithAccounts(VATPostingSetupWithAccounts);
      CreateVATPostingSetup(VATPostingSetup);
      LibraryVariableStorage.Enqueue(VATPostingSetupWithAccounts."VAT Bus. Posting Group");
      LibraryVariableStorage.Enqueue(VATPostingSetupWithAccounts."VAT Prod. Posting Group");

      // Exercise: Copy VAT Posting Setup.
      CopyVATPostingSetupCard(VATPostingSetupCard,VATPostingSetup);

      // Verify: Check VAT Posting Setup with copied Setup On Page.
      VerifyVATPostingSetupWithAccounts(VATPostingSetupCard,VATPostingSetupWithAccounts);
    END;

    [Test]
    [HandlerFunctions(CopyGenPostingSetupRequestPageHandler,ConfirmHandler)]
    PROCEDURE CheckValueOnGenPostingSetup@77();
    VAR
      GenPostingSetupWithAccounts@1000 : Record 252;
      GenPostingSetup@1001 : Record 252;
      GenPostingSetupCard@1002 : TestPage 395;
    BEGIN
      // Verify that program copy new values in General Posting Setup card through copy functionality.

      // Setup: Find And Create VAT Posting Setup.
      Initialize;
      FindGenPostingSetupWithAccounts(GenPostingSetupWithAccounts);
      CreateGenPostingSetup(GenPostingSetup);
      LibraryVariableStorage.Enqueue(GenPostingSetupWithAccounts."Gen. Bus. Posting Group");
      LibraryVariableStorage.Enqueue(GenPostingSetupWithAccounts."Gen. Prod. Posting Group");

      // Exercise: Copy General Posting Setup.
      CopyGenPostingSetupCard(GenPostingSetupCard,GenPostingSetup);

      // Verify: Check General Posting Setup with copied Setup On Page.
      VerifyGenPostingSetupWithAccounts(GenPostingSetupCard,GenPostingSetupWithAccounts);
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ExecuteUIHandler;
      LibraryVariableStorage.Clear;

      // Clear global variable.
      Selection := Selection::"All fields";
      VATetc := FALSE;
      SalesAccounts := FALSE;
      PurchaseAccounts := FALSE;

      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ConvertMessage@25(ErrorMessage@1000 : Text[1024]) : Text[1024];
    VAR
      NewLine@1001 : Text[2];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      NewLine[2] := 10;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    LOCAL PROCEDURE CopyVATPostingSetup@55(VATBusPostingGroup@1001 : Code[10];VATProdPostingGroup@1002 : Code[10]);
    VAR
      VATPostingSetupPage@1000 : TestPage 472;
    BEGIN
      VATPostingSetupPage.OPENEDIT;
      VATPostingSetupPage.FILTER.SETFILTER("VAT Bus. Posting Group",VATBusPostingGroup);
      VATPostingSetupPage.FILTER.SETFILTER("VAT Prod. Posting Group",VATProdPostingGroup);
      VATPostingSetupPage.Copy.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndUpdateCountryCustomer@20(VAR Customer@1001 : Record 18;CountryRegionCode@1000 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Country/Region Code",CountryRegionCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactWithCountryVAT@35(VAR Contact@1002 : Record 5050;CountryRegionCode@1001 : Code[10];VATRegistrationNo@1000 : Text[20]);
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE("Country/Region Code",CountryRegionCode);
      Contact.VALIDATE("VAT Registration No.",VATRegistrationNo);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCountryVATRegistration@24(VAR CountryRegionCode@1003 : Code[10]) VATFormat : Text[20];
    VAR
      CountryRegion@1000 : Record 9;
    BEGIN
      LibraryERM.CreateCountryRegion(CountryRegion);
      CountryRegionCode := CountryRegion.Code;
      VATFormat := CreateVATRegistrationNoFormat(CountryRegionCode);
    END;

    LOCAL PROCEDURE CreateCountryWithMultipleVAT@15(VAR CountryRegionCode@1000 : Code[10]);
    VAR
      VATRegistrationNoFormat@1001 : Record 381;
    BEGIN
      CreateCountryVATRegistration(CountryRegionCode);
      LibraryERM.CreateVATRegistrationNoFormat(VATRegistrationNoFormat,CountryRegionCode);
      VATRegistrationNoFormat.VALIDATE(Format,'TEST1.###.1');  // Taking Hard Coded Value because of Format Restriction.
      VATRegistrationNoFormat.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithCountryVAT@31(VAR Customer@1002 : Record 18;CountryRegionCode@1001 : Code[10];VATRegistrationNo@1000 : Text[20]);
    BEGIN
      CreateAndUpdateCountryCustomer(Customer,CountryRegionCode);
      Customer.VALIDATE("VAT Registration No.",VATRegistrationNo);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1000(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;DocumentType@1004 : Option;AccountType@1003 : Option;AccountNo@1002 : Code[20]);
    BEGIN
      // Use Random Amount for General Journal Line.
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,
        LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateVATRegistrationNoFormat@6(CountryRegionCode@1001 : Code[10]) : Text[20];
    VAR
      VATRegistrationNoFormat@1000 : Record 381;
    BEGIN
      LibraryERM.CreateVATRegistrationNoFormat(VATRegistrationNoFormat,CountryRegionCode);
      VATRegistrationNoFormat.VALIDATE(Format,'TEST.###');  // Taking Hard Coded Value because of Format Restriction.
      VATRegistrationNoFormat.MODIFY(TRUE);
      EXIT(VATRegistrationNoFormat.Format);
    END;

    LOCAL PROCEDURE CreateVendorWithCountryVAT@29(VAR Vendor@1000 : Record 23;CountryRegionCode@1002 : Code[10];VATRegistrationNo@1001 : Text[20]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      UpdateCountryOnVendor(Vendor,CountryRegionCode);
      UpdateVendorVATRegistration(Vendor,VATRegistrationNo);
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@44(VAR VATPostingSetup@1002 : Record 325);
    VAR
      VATBusinessPostingGroup@1001 : Record 323;
      VATProductPostingGroup@1000 : Record 324;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProductPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateGenPostingSetup@45(VAR GenPostingSetup@1000 : Record 252);
    VAR
      GenBusinessPostingGroup@1002 : Record 250;
      GenProductPostingGroup@1001 : Record 251;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GenPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
    END;

    LOCAL PROCEDURE DeleteCountryRegion@12(CountryRegionCode@1000 : Code[10]);
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      CountryRegion.GET(CountryRegionCode);
      CountryRegion.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindVATPostingSetupWithAccounts@42(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETFILTER("Sales VAT Account",'<>%1','');
      VATPostingSetup.SETFILTER("Purchase VAT Account",'<>%1','');
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindGenPostingSetupWithAccounts@43(VAR GenPostingSetup@1000 : Record 252);
    BEGIN
      GenPostingSetup.SETFILTER("Sales Account",'<>%1','');
      GenPostingSetup.SETFILTER("Purch. Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GenPostingSetup);
    END;

    LOCAL PROCEDURE FindVATPostingSetup@49();
    BEGIN
      VATPostingSetup2.SETFILTER("Sales VAT Account",'<>%1','');
      VATPostingSetup2.SETFILTER("Purchase VAT Account",'<>%1','');
      LibraryERM.FindVATPostingSetup(VATPostingSetup2,VATPostingSetup2."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE ModifyCompanyInformation@2(VAR CompanyInformation@1000 : Record 79;CountryRegionCode@1001 : Code[10]) OldCountryCode : Code[10];
    BEGIN
      CompanyInformation.GET;
      OldCountryCode := CompanyInformation."Country/Region Code";
      CompanyInformation.VALIDATE("Country/Region Code",CountryRegionCode);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBalanceAccountInGeneralJournalLine@1032(GenJournalLine@1002 : Record 81;BalAccountType@1001 : Option;BalAccountNo@1000 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCountryOnVendor@11(VAR Vendor@1000 : Record 23;CountryRegionCode@1001 : Code[10]);
    BEGIN
      Vendor.VALIDATE("Country/Region Code",CountryRegionCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCountryOnContact@19(VAR Contact@1000 : Record 5050;CountryRegionCode@1001 : Code[10]);
    BEGIN
      Contact.VALIDATE("Country/Region Code",CountryRegionCode);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorVATRegistration@18(VAR Vendor@1000 : Record 23;VATRegistrationNo@1001 : Text[20]);
    BEGIN
      Vendor.VALIDATE("VAT Registration No.",VATRegistrationNo);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyVATPostingSetup@100(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.GET(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      IF VATetc THEN
        VATPostingSetup.TESTFIELD("VAT %",VATPostingSetup2."VAT %")
      ELSE
        VATPostingSetup.TESTFIELD("VAT %",0);
      IF SalesAccounts THEN
        VATPostingSetup.TESTFIELD("Sales VAT Account",VATPostingSetup2."Sales VAT Account")
      ELSE
        VATPostingSetup.TESTFIELD("Sales VAT Account",'');
      IF PurchaseAccounts THEN
        VATPostingSetup.TESTFIELD("Purchase VAT Account",VATPostingSetup2."Purchase VAT Account")
      ELSE
        VATPostingSetup.TESTFIELD("Purchase VAT Account",'');
    END;

    LOCAL PROCEDURE VerifyVATRegistrationOnGeneralJournalLine@1030(GenJournalLine@1001 : Record 81;VATRegistrationNo@1000 : Text[20]);
    BEGIN
      GenJournalLine.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
      Assert.AreEqual(
        VATRegistrationNo,GenJournalLine."VAT Registration No.",
        STRSUBSTNO(VATError,GenJournalLine.FIELDCAPTION("VAT Registration No."),VATRegistrationNo,GenJournalLine.TABLECAPTION));
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerContact@36(Msg@1000 : Text[1024]);
    BEGIN
      IF STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiContactMsg,ContactNo)) = 1 THEN
        EXIT;
      Assert.IsTrue(STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiContactMsg,ContactNo)) = 1,STRSUBSTNO(UnexpectedMsg,Msg));
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerCustomer@23(Msg@1000 : Text[1024]);
    BEGIN
      IF STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiCustomerMsg,CustomerNo)) = 1 THEN
        EXIT;
      Assert.IsTrue(STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiCustomerMsg,CustomerNo)) = 1,STRSUBSTNO(UnexpectedMsg,Msg));
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerVendor@22(Msg@1000 : Text[1024]);
    BEGIN
      IF STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiVendorMsg,VendorNo)) = 1 THEN
        EXIT;
      Assert.IsTrue(STRPOS(ConvertMessage(Msg),STRSUBSTNO(MultiVendorMsg,VendorNo)) = 1,STRSUBSTNO(UnexpectedMsg,Msg));
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) OR CONFIRM(STRSUBSTNO(ExpectedMessage2)) THEN ;
    END;

    LOCAL PROCEDURE CopyVATPostingSetupCard@79(VAR VATPostingSetupCard@1000 : TestPage 473;VATPostingSetup@1001 : Record 325);
    BEGIN
      VATPostingSetupCard.OPENEDIT;
      VATPostingSetupCard.FILTER.SETFILTER("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      VATPostingSetupCard.FILTER.SETFILTER("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      COMMIT;
      VATPostingSetupCard.Copy.INVOKE;
    END;

    LOCAL PROCEDURE CopyGenPostingSetupCard@80(VAR GenPostingSetupCard@1002 : TestPage 395;GenPostingSetup@1001 : Record 252);
    BEGIN
      GenPostingSetupCard.OPENEDIT;
      GenPostingSetupCard.FILTER.SETFILTER("Gen. Bus. Posting Group",GenPostingSetup."Gen. Bus. Posting Group");
      GenPostingSetupCard.FILTER.SETFILTER("Gen. Prod. Posting Group",GenPostingSetup."Gen. Prod. Posting Group");
      COMMIT;
      GenPostingSetupCard.Copy.INVOKE;
    END;

    LOCAL PROCEDURE VerifyVATPostingSetupWithAccounts@81(VATPostingSetupPageCard@1000 : TestPage 473;VATPostingSetup@1001 : Record 325);
    BEGIN
      VATPostingSetupPageCard."Sales VAT Account".ASSERTEQUALS(VATPostingSetup."Sales VAT Account");
      VATPostingSetupPageCard."Purchase VAT Account".ASSERTEQUALS(VATPostingSetup."Purchase VAT Account");
    END;

    LOCAL PROCEDURE VerifyGenPostingSetupWithAccounts@82(GenPostingSetupCard@1000 : TestPage 395;GenPostingSetup@1001 : Record 252);
    BEGIN
      GenPostingSetupCard."Sales Account".ASSERTEQUALS(GenPostingSetup."Sales Account");
      GenPostingSetupCard."Purch. Account".ASSERTEQUALS(GenPostingSetup."Purch. Account");
    END;

    [ConfirmHandler]
    PROCEDURE LengthConfirmHandler@26(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE InvalidCharConfirmHandler@30(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyFieldHandler@34(VAR CopyVATPostingSetup@1000 : TestRequestPage 85);
    BEGIN
      CopyVATPostingSetup.VATBusPostingGroup.SETVALUE(VATPostingSetup2."VAT Bus. Posting Group");
      CopyVATPostingSetup.VATProdPostingGroup.SETVALUE(VATPostingSetup2."VAT Prod. Posting Group");
      CopyVATPostingSetup.Copy.SETVALUE(Selection);
      IF Selection IN [Selection::"Selected fields"] THEN BEGIN
        CopyVATPostingSetup.VATetc.SETVALUE(VATetc);
        CopyVATPostingSetup.SalesAccounts.SETVALUE(SalesAccounts);
        CopyVATPostingSetup.PurchaseAccounts.SETVALUE(PurchaseAccounts);
      END;
      CopyVATPostingSetup.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyVatPostingSetupRequestPageHandler@83(VAR CopyVatPostingSetup@1000 : TestRequestPage 85);
    VAR
      VATBusinessPostingGroup@1001 : Variant;
      VATProdPostingGroup@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VATBusinessPostingGroup);
      LibraryVariableStorage.Dequeue(VATProdPostingGroup);
      CopyVatPostingSetup.VATBusPostingGroup.SETVALUE(VATBusinessPostingGroup);
      CopyVatPostingSetup.VATProdPostingGroup.SETVALUE(VATProdPostingGroup);
      CopyVatPostingSetup.SalesAccounts.SETVALUE(TRUE);
      CopyVatPostingSetup.PurchaseAccounts.SETVALUE(TRUE);
      CopyVatPostingSetup.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyGenPostingSetupRequestPageHandler@84(VAR CopyGenPostingSetup@1002 : TestRequestPage 87);
    VAR
      GenBusinessPostingGroup@1001 : Variant;
      GenProdPostingGroup@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GenBusinessPostingGroup);
      LibraryVariableStorage.Dequeue(GenProdPostingGroup);
      CopyGenPostingSetup.GenBusPostingGroup.SETVALUE(GenBusinessPostingGroup);
      CopyGenPostingSetup.GenProdPostingGroup.SETVALUE(GenProdPostingGroup);
      CopyGenPostingSetup.SalesAccounts.SETVALUE(TRUE);
      CopyGenPostingSetup.PurchaseAccounts.SETVALUE(TRUE);
      CopyGenPostingSetup.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@40(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [VAT Registration No.]
      Test VAT Format on Company, Customer, Vendor and Contacts.
        1. Enter wrong VAT Registration No. on Company and verify correct MESSAGE.
        2. Enter correct VAT Registration No. on Company and verify no MESSAGE.
        3. For an existing Customer without Country Code, change to wrong VAT Registration No and verify correct MESSAGE.
        4. For a new Customer, enter Country Code different from Company's, enter correct VAT and verify no MESSAGE.
        5. For existing Vendor enter Country Code different from Company's, enter Correct VAT Registration No. and verify no MESSAGE.
        6. For a new Vendor without Country Code, enter wrong VAT Registration No. and verify correct MESSAGE.
        7. For a new Contact without Country Code, enter correct VAT Registration No. and verify no Message.
        8. For an existing Contact with Country Code, enter incorrect VAT Registration No. and verify correct Message.
        9. Check Error Message after entering wrong VAT Registration No. on Company.
       10. Check warning message after entering duplicate VAT Registration No. on Vendors.
       11. Check VAT Registration No. on Customer after entering duplicate VAT Registration No. on Vendor and then on Customer.
       12. Check warning message after entering duplicate VAT Registration No. on Customers.
       13. Check warning message after entering duplicate VAT Registration No. on multiple Customers.
       14. Check warning message after entering duplicate VAT Registration No. on Customer, Vendor and then on Contacts.
       15. Check VAT Reg. No. Format Action is not enable when try to create new VAT Reg. No. Format for a blank Country/Region Code.
       16. Check VAT Reg. No. Format is deleted after deleting Country/Region Code.
       17. Check Copy VAT Posting Setup Report functionality with all fields.
       18. Check Copy VAT Posting Setup Report functionality with selected fields.
       19. Check VAT Registration No. updated when Balance Account updated on General Journal Line as Customer with VAT Registration.
       20. Check that VAT Registration No. is blank when Balance Account is of G/L Account Type.
       21. Check VAT Registration No. on General Journal Line after updating Account Type as Customer having VAT Registration code attached to it.
       22. Verify that Program Copy New Accounts in Vat Posting Setup Card through Copy Functionality.
       23. Verify that Program Copy New Accounts in General Posting Setup Card through Copy Functionality.

      Covers Test Cases for WI - 206881
        ---------------------------------------------------
        Test Function Name                    TFS ID
        ---------------------------------------------------
        InvalidVATFormatOnCompany          126869, 126875
        ValidVATFormatOnCompany            126870, 126875
        InvalidVATFormatOnCustomer         126871, 126875
        ValidVATFormatOnCustomer           127715, 126875
        ValidVATFormatOnVendor             126872, 126875
        InvalidVATFormatOnVendor           126873, 126875
        ValidVATFormatOnContact            126874, 126875
        InvalidVATFormatOnContact          126874, 126875

      Covers Test Cases for WI - 217040
        ---------------------------------------------------
        Test Function Name                    TFS ID
        ---------------------------------------------------
        CountryRegionDeletion               126866,126867

      Covers Test Cases for WI - 217041
        -------------------------------------------------------------
        Test Function Name                    TFS ID
        -------------------------------------------------------------
        DuplicateVATOnVendor                 126876, 126881
        DuplicateVATOnVendorCustomer         126877
        DuplicateVATOnCustomer               126877, 126878
        DuplicateVATOnMultipleCustomer       126877, 126878, 126879
        DuplicateVATOnContact                126678, 126879, 126880

      Covers Test Cases for WI - 261248
        ----------------------------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------------------------
        VATFormatForBlankCountryCode,DeleteCountryRegionVATFormat                126865,126866,126867,126868

      Covers Test Cases for WI - 251063
        -------------------------------------------------------------
        Test Function Name                    TFS ID
        -------------------------------------------------------------
        CopyVATSetupAllFields                 128959
        CopyVATSetupSelectedFields            128959

      Covers Test Cases for WI - 265503
        ------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                     TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------------------
        VATRegistrationAfterUpdatingBalanceAccount, BlankVATRegistrationAfterUpdatingBalanceAccount, VATRegistrationForCustomerOnJournalLine   254608

      BUG ID 317187
      -----------------------------------------------------------------------------
        Test Function Name                                                   TFS ID
      -----------------------------------------------------------------------------
        CheckValueOnVATPostingSetup,CheckValueOnGenPostingSetup
    }
    END.
  }
}

