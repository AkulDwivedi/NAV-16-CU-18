OBJECT Codeunit 134391 ERM Sales Batch Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1009 : Codeunit 130440;
      LibraryVariableStorage@1000 : Codeunit 131004;
      LibrarySales@1003 : Codeunit 130509;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryWorkflow@1005 : Codeunit 131101;
      LibrarySetupStorage@1007 : Codeunit 131009;
      isInitialized@1001 : Boolean;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoice@23();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,FALSE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",0D,FALSE);

      // Verify that Posted Sales Invoice Exists.
      VerifyPostedSalesInvoice(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoiceDiffPostingDate@28();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,FALSE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);

      // Verify that Posted Sales Invoice Exists.
      VerifyPostedSalesInvoice(SalesHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoiceCalcInvDisc@80();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,TRUE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",0D,TRUE);

      // Verify that Posted Sales Invoice Exists.
      VerifyPostedSalesInvoice(SalesHeader."No.",SalesHeader."Posting Date",TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoiceCalcInvDiscAndReplacePostingDate@5();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // [SCENARIO 204056] Batch Posting of Sales Invoice with Replace Posting Date and Calc. Inv. Discount options for special Sales Setup
      Initialize;

      // [GIVEN] Sales Setup has "Posted Invoice Nos." = "Invoice Nos." and "Shipment on Invoice" = No
      UpdateShipmentOnInvoiceOnSalesReceivablesSetup;

      // [GIVEN] Released Sales Invoice with posting nos are already assigned
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [WHEN] Run Batch Post Sales Invoice with Replace Posting Date, Replace Document Date, Calc. Inv. Discount options
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Posting Date" + 1,TRUE);

      // [THEN] InvoiceDiscount is calculated and Posting Date is updated
      VerifyPostedSalesInvoice(SalesHeader."No.",SalesHeader."Posting Date" + 1,TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoices@118();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,FALSE);
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::Invoice,FALSE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales Invoice Exists.
      VerifyPostedSalesInvoice(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      VerifyPostedSalesInvoice(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesCrMemos,MessageHandler)]
    PROCEDURE BatchPostSalesCrMemo@94();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Credit Memo.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Sales Credit Memo.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",0D,FALSE);

      // Verify that Posted Sales Credit Memo Exists.
      VerifyPostedSalesCrMemo(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesCrMemos,MessageHandler)]
    PROCEDURE BatchPostSalesCrMemoDiffPostingDate@96();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);

      // Verify that Posted Sales Credit Memo Exists.
      VerifyPostedSalesCrMemo(SalesHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesCrMemos,MessageHandler)]
    PROCEDURE BatchPostSalesCrMemoCalcInvDisc@95();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo",TRUE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No.",0D,TRUE);

      // Verify that Posted Sales Credit Memo Exists.
      VerifyPostedSalesCrMemo(SalesHeader."No.",SalesHeader."Posting Date",TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesCrMemos,MessageHandler)]
    PROCEDURE BatchPostSalesCrMemos@119();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
    BEGIN
      Initialize;

      // Create Sales Credit Memo.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE);
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Sales Credit Memo.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales Credit Memo Exists.
      VerifyPostedSalesCrMemo(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      VerifyPostedSalesCrMemo(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesInvoices,MessageHandler)]
    PROCEDURE BatchPostSalesInvoicesWithApprovals@3();
    VAR
      Workflow@1003 : Record 1501;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release Sales Invoice.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice,FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.SalesInvoiceApprovalWorkflowCode);

      // Create a sales invoice.
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::Invoice,FALSE);

      // Batch Post Sales Invoice.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales Invoice Exists.
      VerifyPostedSalesInvoice(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedSalesInvoice(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesCrMemos,MessageHandler)]
    PROCEDURE BatchPostSalesCrMemosWithApprovals@9();
    VAR
      Workflow@1003 : Record 1501;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release Sales cr. memo.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.SalesCreditMemoApprovalWorkflowCode);

      // Create a sales cr. memo.
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Sales cr. memo.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales cr. memo Exists.
      VerifyPostedSalesCrMemo(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedSalesCrMemo(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesOrders,MessageHandler)]
    PROCEDURE BatchPostSalesOrdersWithApprovals@11();
    VAR
      Workflow@1003 : Record 1501;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release Sales order.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.SalesOrderApprovalWorkflowCode);

      // Create a sales order.
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::Order,FALSE);

      // Batch Post Sales Order.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales Order Exists.
      VerifyPostedSalesOrder(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedSalesOrder(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostSalesReturnOrders,MessageHandler)]
    PROCEDURE BatchPostSalesReturnOrdersWithApprovals@12();
    VAR
      Workflow@1003 : Record 1501;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release Sales return order.
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.SalesReturnOrderApprovalWorkflowCode);

      // Create a sales return order.
      CreateSalesDocument(SalesHeader2,SalesHeader."Document Type"::"Return Order",FALSE);

      // Batch Post Sales return order.
      RunBatchPostSales(SalesHeader."Document Type",SalesHeader."No." + '|' + SalesHeader2."No.",0D,FALSE);

      // Verify that Posted Sales return order Exists.
      VerifyPostedSalesReturnOrder(SalesHeader."No.",SalesHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedSalesReturnOrder(SalesHeader2."No.",SalesHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    LOCAL PROCEDURE CreateCustomer@25(InvDisc@1001 : Boolean) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      IF InvDisc THEN
        CreateCustomerDiscount(Customer."No.");
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerDiscount@130(CustomerNo@1001 : Code[20]);
    VAR
      CustInvDisc@1000 : Record 19;
    BEGIN
      CustInvDisc.INIT;
      CustInvDisc.VALIDATE(Code,CustomerNo);
      CustInvDisc.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      CustInvDisc.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@6(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;InvDisc@1003 : Boolean);
    VAR
      Item@1004 : Record 27;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer(InvDisc));
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCalcInvDiscSalesReceivablesSetup@19(CalcInvDisc@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDisc);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateShipmentOnInvoiceOnSalesReceivablesSetup@7();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",SalesReceivablesSetup."Invoice Nos.");
      SalesReceivablesSetup."Shipment on Invoice" := FALSE;
      SalesReceivablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE RunBatchPostSales@2(DocumentType@1004 : Option;DocumentNoFilter@1001 : Text;PostingDate@1002 : Date;CalcInvDisc@1003 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      UpdateCalcInvDiscSalesReceivablesSetup(CalcInvDisc);
      LibraryVariableStorage.Enqueue(DocumentNoFilter);
      LibraryVariableStorage.Enqueue(PostingDate);

      COMMIT;
      CASE DocumentType OF
        SalesHeader."Document Type"::Invoice:
          REPORT.RUNMODAL(REPORT::"Batch Post Sales Invoices",TRUE,TRUE,SalesHeader);
        SalesHeader."Document Type"::"Credit Memo":
          REPORT.RUNMODAL(REPORT::"Batch Post Sales Credit Memos",TRUE,TRUE,SalesHeader);
        SalesHeader."Document Type"::Order:
          REPORT.RUNMODAL(REPORT::"Batch Post Sales Orders",TRUE,TRUE,SalesHeader);
        SalesHeader."Document Type"::"Return Order":
          REPORT.RUNMODAL(REPORT::"Batch Post Sales Return Orders",TRUE,TRUE,SalesHeader);
      END;
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@10(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesInvoiceLine@1003 : Record 113;
    BEGIN
      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;
      SalesInvoiceHeader.TESTFIELD("Posting Date",PostingDate);
      SalesInvoiceHeader.TESTFIELD("Document Date",PostingDate); // TFS ID 203294
      SalesInvoiceLine.SETFILTER("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.FINDFIRST;
      Assert.AreEqual(InvDisc,SalesInvoiceLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedSalesCrMemo@109(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
      SalesCrMemoLine@1003 : Record 115;
    BEGIN
      SalesCrMemoHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesCrMemoHeader.FINDFIRST;
      SalesCrMemoHeader.TESTFIELD("Posting Date",PostingDate);
      SalesCrMemoLine.SETFILTER("Document No.",SalesCrMemoHeader."No.");
      SalesCrMemoLine.FINDFIRST;
      Assert.AreEqual(InvDisc,SalesCrMemoLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedSalesOrder@13(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesInvoiceLine@1003 : Record 113;
    BEGIN
      SalesInvoiceHeader.SETFILTER("Order No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;
      SalesInvoiceHeader.TESTFIELD("Posting Date",PostingDate);
      SalesInvoiceLine.SETFILTER("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.FINDFIRST;
      Assert.AreEqual(InvDisc,SalesInvoiceLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedSalesReturnOrder@14(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
      SalesCrMemoLine@1003 : Record 115;
    BEGIN
      SalesCrMemoHeader.SETFILTER("Return Order No.",PreAssignedNo);
      SalesCrMemoHeader.FINDFIRST;
      SalesCrMemoHeader.TESTFIELD("Posting Date",PostingDate);
      SalesCrMemoLine.SETFILTER("Document No.",SalesCrMemoHeader."No.");
      SalesCrMemoLine.FINDFIRST;
      Assert.AreEqual(InvDisc,SalesCrMemoLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostSalesInvoices@33(VAR BatchPostSalesInvoices@1000 : TestRequestPage 297);
    VAR
      SalesHeader@1003 : Record 36;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
      RunReplacePostingDate@1005 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostSalesInvoices."Sales Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostSalesInvoices."Sales Header".SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::Invoice));

      BatchPostSalesInvoices.PostingDate.SETVALUE(PostingDate);
      RunReplacePostingDate := FORMAT(PostingDate) <> '';
      BatchPostSalesInvoices.ReplacePostingDate.SETVALUE(RunReplacePostingDate);
      BatchPostSalesInvoices.ReplaceDocumentDate.SETVALUE(RunReplacePostingDate);
      // CalcInvDiscount is set from Sales Setup
      BatchPostSalesInvoices.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostSalesCrMemos@102(VAR BatchPostSalesCrMemos@1000 : TestRequestPage 298);
    VAR
      SalesHeader@1003 : Record 36;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostSalesCrMemos."Sales Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostSalesCrMemos."Sales Header".SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::"Credit Memo"));

      BatchPostSalesCrMemos.PostingDate.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostSalesCrMemos.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostSalesCrMemos.ReplacePostingDate.SETVALUE(FALSE);
      // CalcInvDiscount is set from Sales Setup
      BatchPostSalesCrMemos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostSalesOrders@15(VAR BatchPostSalesOrders@1000 : TestRequestPage 296);
    VAR
      SalesHeader@1003 : Record 36;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostSalesOrders."Sales Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostSalesOrders."Sales Header".SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::Order));

      BatchPostSalesOrders.PostingDate.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostSalesOrders.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostSalesOrders.ReplacePostingDate.SETVALUE(FALSE);
      BatchPostSalesOrders.Ship.SETVALUE(TRUE);
      BatchPostSalesOrders.Invoice.SETVALUE(TRUE);
      BatchPostSalesOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostSalesReturnOrders@16(VAR BatchPostSalesReturnOrders@1000 : TestRequestPage 6655);
    VAR
      SalesHeader@1003 : Record 36;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostSalesReturnOrders."Sales Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostSalesReturnOrders."Sales Header".SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::"Return Order"));

      BatchPostSalesReturnOrders.PostingDateReq.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostSalesReturnOrders.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostSalesReturnOrders.ReplacePostingDate.SETVALUE(FALSE);
      BatchPostSalesReturnOrders.ReceiveReq.SETVALUE(TRUE);
      BatchPostSalesReturnOrders.InvReq.SETVALUE(TRUE);
      BatchPostSalesReturnOrders.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Batch Post] [Sales]
    }
    END.
  }
}

