OBJECT Codeunit 137351 SCM Inventory Reports - IV
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryCosting@1008 : Codeunit 132200;
      LibraryERM@1005 : Codeunit 131300;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryItemTracking@1022 : Codeunit 130502;
      LibraryManufacturing@1024 : Codeunit 132202;
      LibraryPurchase@1011 : Codeunit 130512;
      LibraryReportDataset@1023 : Codeunit 131007;
      LibrarySales@1016 : Codeunit 130509;
      LibraryUtility@1015 : Codeunit 131000;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryAccountSchedule@1035 : Codeunit 131304;
      LibraryRandom@1002 : Codeunit 130440;
      ErrorTypeRef@1033 : 'None,Division by Zero,Period Error,Invalid Formula,Cyclic Formula,All';
      isInitialized@1000 : Boolean;
      Amount@1003 : TextConst 'ENU=Amount';
      AnalysisTemplateError@1036 : TextConst 'ENU=The %1 does not exist.';
      AnalysisLineDateFilterError@1038 : TextConst 'ENU=Specify a filter for the Date Filter field in the Analysis Line table.';
      AnalysisViewCodeError@1017 : TextConst 'ENU=Enter an analysis view code.';
      ColumnTemplateError@1004 : TextConst 'ENU=Enter a column template.';
      DateFilterText@1020 : TextConst '@@@=%1 Workdate;ENU=w';
      DivisionByZero@1019 : TextConst 'ENU=%1/0';
      DateFilterError@1013 : TextConst 'ENU=Enter a date filter.';
      ErrorTxt@1032 : TextConst 'ENU=* ERROR *';
      NotAvailable@1034 : TextConst 'ENU=Not Available';
      PostingMessage@1026 : TextConst 'ENU=Do you want to post the journal lines?';
      PostedLinesMessage@1027 : TextConst 'ENU=The journal lines were successfully posted.';
      RevaluationLinesCreated@1007 : TextConst 'ENU=Revaluation journal lines have also been created.';
      StartingDateError@1030 : TextConst 'ENU=You cannot base a date calculation on an undefined date.';
      StatusDateError@1012 : TextConst 'ENU=Enter the Status Date';
      ValueNotMatchedError@1010 : TextConst 'ENU=Value not matched.';
      InventoryCostPostedToGLCap@1014 : TextConst 'ENU=Inventory Cost Posted to G/L';
      RowNotFoundErr@1018 : TextConst '@@@="%1=Field Caption,%2 = Field Value";ENU=There is no dataset row corresponding to Element Name %1 with value %2.';
      ExpandBOMErr@1021 : TextConst 'ENU=BOM component should not exist for Item %1';
      ColumnFormulaMsg@1028 : TextConst '@@@=%1 - text of Column formula;ENU=Column formula: %1.';
      ColumnFormulaErrorMsg@1029 : TextConst '@@@=%1 - text of ErrorTypeRef;ENU=Error: %1.';
      IncorrectExpectedMessageErr@1031 : TextConst 'ENU=Incorrect Expected Message';
      WrongSourceFilterErr@1037 : TextConst 'ENU=Source filter is incorrect';

    [Test]
    PROCEDURE ValueEntryAfterPostingSalesOrder@21();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesLine@1002 : Record 37;
      ValueEntry@1003 : Record 5802;
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      // Verify Value Entry after posting Sales Order.

      // Setup: Create Item, create and post Item Journal Line.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");

      // Exercise.
      // Use Random months to change Posting Date.
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),CreateCustomer);  // Use Random value for Quantity.
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.SETRANGE("No.",Item."No.");
      SalesInvoiceLine.FINDFIRST;

      // Verify: Verify Cost Amount on Value Entry.
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale);
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Cost Amount (Actual)",-ROUND(Item."Standard Cost" * SalesLine.Quantity));
      ValueEntry.TESTFIELD("Document No.",SalesInvoiceLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(ItemAgeCompositionValueRequestPageHandler)]
    PROCEDURE ItemAgeCompositionReportAfterPostingSalesOrder@8();
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Item Age Composition Report after posting Sales Order.

      // Setup: Create Item, create and post Item Journal Line and Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      CreateAndPostSalesOrder(SalesLine,Item."No.",ItemJournalLine.Quantity / 2,WORKDATE,CreateCustomer);  // Post partial Quantity.

      // Exercise.
      COMMIT;
      RunItemAgeCompositionValueReport(Item."No.");

      // Verify: Verify Item Age Composition Report.
      Item.CALCFIELDS(Inventory);
      VerifyItemAgeCompositionReport(Item."No.",ROUND(Item.Inventory * Item."Standard Cost"));
    END;

    [Test]
    [HandlerFunctions(ImplementStandardCostChangePageHandler,MessageHandler)]
    PROCEDURE RevaluationJournalLinesUsingStdCostWorksheet@15();
    VAR
      Item@1000 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      StandardCostWorksheet@1003 : Record 5841;
      StandardCostWorksheetName@1001 : Record 5840;
    BEGIN
      // Verify creation of Revaluation Journal Lines using Standard Cost Worksheet.

      // Setup: Create Item, Standard Cost Worksheet Name.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      LibraryInventory.CreateStandardCostWorksheetName(StandardCostWorksheetName);

      // Exercise.
      SuggestAndImplementStandardCostChanges(ItemJournalBatch,Item,StandardCostWorksheetName.Name);

      // Verify: Verify Revaluation Journal Line created through Standard Cost Worksheet.
      StandardCostWorksheet.GET(StandardCostWorksheetName.Name,StandardCostWorksheet.Type::Item,Item."No.");
      VerifyItemJournalLine(ItemJournalBatch,Item."No.",StandardCostWorksheet."New Standard Cost");
    END;

    [Test]
    [HandlerFunctions(ImplementStandardCostChangePageHandler,MessageHandler)]
    PROCEDURE StandardCostUpdationUsingStdCostWorksheet@10();
    VAR
      Item@1017 : Record 27;
      ItemJournalBatch@1016 : Record 233;
      StandardCostWorksheet@1012 : Record 5841;
      StandardCostWorksheetName@1011 : Record 5840;
    BEGIN
      // Verify updated Standard Cost on Item when Cost is updated using Standard Cost Worksheet.

      // Setup: Create Item and Standard Cost Worksheet Name.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      LibraryInventory.CreateStandardCostWorksheetName(StandardCostWorksheetName);

      // Exercise.
      SuggestAndImplementStandardCostChanges(ItemJournalBatch,Item,StandardCostWorksheetName.Name);

      // Verify: Verify updated Standard Cost.
      StandardCostWorksheet.GET(StandardCostWorksheetName.Name,StandardCostWorksheet.Type::Item,Item."No.");
      Item.GET(Item."No.");
      Item.TESTFIELD("Standard Cost",StandardCostWorksheet."New Standard Cost");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PhysicalInventoryJournalWithSerialNo@82();
    VAR
      Bin@1006 : Record 7354;
      Item@1008 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1000 : Record 83;
      ItemJournalTemplate@1002 : Record 82;
      PurchaseLine@1001 : Record 39;
      SerialNo@1005 : ARRAY [10] OF Code[20];
      Count@1007 : Integer;
      TrackingOption@1003 : 'AssignSerialNo,SelectEntries';
    BEGIN
      // Verify available Serial Nos on Physical Inventory Journal after calculating Inventory.

      // Setup: Create Item with Tracking Code, create Location with Bin, create and receive Purchase Order with Tracking Lines. Run Calculate Inventory on Phys. Inventory Journal.
      Initialize;
      CreateLocationWithBin(Bin);
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCodeSerialSpecific);  // Use blank value for Lot No.
      CreateAndModifyPurchaseOrder(PurchaseLine,Item."No.",Bin."Location Code",Bin.Code);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      Count := StoreSerialNos(SerialNo,PurchaseLine."No.");
      PostPurchaseOrder(PurchaseLine,TRUE,FALSE);

      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::"Phys. Inventory");
      RunCalculateInventoryReport(ItemJournalBatch,PurchaseLine."No.");
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(Count);  // Enqueue value for ItemTrackingSummaryPageHandler.
      EnqueueSerialNos(SerialNo,Count);

      // Exercise: Open Item Tracking Lines from Phys. Inventory Journal.
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // False for IsReclass.

      // Verify: Verify Phys. Inventory Journal and Serial No. on Item Tracking Line in ItemTrackingSummaryPageHandler.
      VerifyPhysicalInventoryJournal(ItemJournalBatch,PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(StatusRequestPageHandler)]
    PROCEDURE StatusReportWithDateError@12();
    BEGIN
      // Verify Status report for blank Status Date.

      // Setup.
      Initialize;

      // Enqueue values for StatusRequestPageHandler.
      LibraryVariableStorage.Enqueue(0D);  // 0D for Status Date.
      LibraryVariableStorage.Enqueue('');  // Blank for File name.

      // Exercise.
      COMMIT;
      ASSERTERROR RunStatusReport('');  // Use blank for Item No.

      // Verify.
      Assert.ExpectedError(StatusDateError);
    END;

    [Test]
    [HandlerFunctions(StatusRequestPageHandler)]
    PROCEDURE StatusReportAfterPostingPurchaseOrder@14();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Status Report after posting Purchase Order.

      // Setup: Create and post Purchase Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreatePurchaseOrder(PurchaseLine,Item."No.",'');
      DocumentNo := PostPurchaseOrder(PurchaseLine,TRUE,FALSE);

      // Enqueue values for StatusRequestPageHandler.
      COMMIT;
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(PurchaseLine."No.");

      // Exercise.
      RunStatusReport(PurchaseLine."No.");

      // Verify: Verify Quantity and Unit Cost on Status report.
      VerifyStatusReport(PurchaseLine,DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ItemVendorCatalogRequestPageHandler)]
    PROCEDURE ItemVendorCatalogReport@30();
    VAR
      Item@1000 : Record 27;
      ItemVendor@1001 : Record 99;
      PurchasePrice@1002 : Record 7012;
    BEGIN
      // Verify Item Vendor Catalog report.

      // Setup: Create Item, Vendor, Purchase Price and Item Vendor.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      LibraryCosting.CreatePurchasePrice(
        PurchasePrice,CreateVendor,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",LibraryRandom.RandDec(10,2));  // Use Random value for Minimum Quantity and blank for Currency code, Variant code.
      CreateItemVendorWithVendorItemNo(ItemVendor,PurchasePrice."Vendor No.",Item."No.");

      // Exercise.
      COMMIT;
      RunItemVendorReport(Item."No.");

      // Verify: Verify Item No. and Vendor Item No. on Item Vendor Catalog report.
      VerifyItemVendorCatalogReport(ItemVendor);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalRequestPageHandler)]
    PROCEDURE ItemDimensionTotalAnalysisViewCodeError@34();
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
      ItemAnalysisView@1000 : Record 7152;
      SetValue@1002 : 'IncludeDimension,NotIncludeDimension';
    BEGIN
      // Verify error on Item Dimension Total report for blank Analysis View Code.

      // Setup: Create Item Analysis View, Analysis Column Template.
      Initialize;
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");

      // Enqueue values for 'ItemDimensionTotalRequestPageHandler' and 'AnalysisDimSelectionLevelPageHandler'.
      LibraryVariableStorage.Enqueue(SetValue::NotIncludeDimension);
      EnqueueValuesForItemDimensionTotalReport(ItemAnalysisView."Analysis Area",'',AnalysisColumnTemplate.Name,'');

      // Exercise.
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify.
      Assert.ExpectedError(AnalysisViewCodeError);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalPageHandlerForColumnTemplate)]
    PROCEDURE ItemDimensionTotalColumnTemplateError@36();
    VAR
      ItemAnalysisView@1002 : Record 7152;
    BEGIN
      // Verify error on Item Dimension Total report for blank Column Template.

      // Setup: Create Item Analysis View.
      Initialize;
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);

      // Enqueue values 'ItemDimensionTotalPageHandlerForColumnTemplate'.
      EnqueueValuesForItemDimensionTotalReport(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,'','');

      // Exercise.
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify.
      Assert.ExpectedError(ColumnTemplateError);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalRequestPageHandler)]
    PROCEDURE ItemDimensionTotalReportDateFilterError@35();
    VAR
      AnalysisColumnTemplate@1002 : Record 7116;
      ItemAnalysisView@1001 : Record 7152;
      SetValue@1000 : 'IncludeDimension,NotIncludeDimension';
    BEGIN
      // Verify error on Item Dimension Total report for blank Date Filter.

      // Setup: Create Item Analysis View, Analysis Column Template.
      Initialize;
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Inventory);
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");

      // Enqueue values 'ItemDimensionTotalRequestPageHandler' and 'AnalysisDimSelectionLevelPageHandler'.
      LibraryVariableStorage.Enqueue(SetValue::NotIncludeDimension);
      EnqueueValuesForItemDimensionTotalReport(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,AnalysisColumnTemplate.Name,'');

      // Exercise.
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify.
      Assert.ExpectedError(DateFilterError);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimensionTotalReportWithSalesAnalysisArea@20();
    VAR
      AnalysisColumn@1004 : Record 7118;
      DefaultDimension@1005 : Record 352;
      Item@1003 : Record 27;
      ItemAnalysisView@1001 : Record 7152;
      ItemLedgerEntry@1002 : Record 32;
      SalesLine@1009 : Record 37;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Verify Item Dimension Total report for Sales Analysis Area.

      // Setup: Create Item, Customer, create and post Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CustomerNo := CreateCustomer;
      UpdateCustomerDimension(DefaultDimension,CustomerNo);
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,CustomerNo);  // Use Random value for Quantity.
      SetupDimTotalReportWithAnalysisArea(ItemAnalysisView,
        DefaultDimension,ItemAnalysisView."Analysis Area"::Sales,AnalysisColumn."Value Type"::"Cost Amount");

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify: Verify Quantity and Cost Amount(Actual) on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyItemDimensionTotalReport(
        DefaultDimension."Dimension Code",ItemLedgerEntry.Quantity,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimensionTotalReportWithInventoryAnalysisArea@54();
    VAR
      AnalysisColumn@1023 : Record 7118;
      DefaultDimension@1022 : Record 352;
      Item@1021 : Record 27;
      ItemAnalysisView@1020 : Record 7152;
      ItemJournalLine@1000 : Record 83;
      ItemLedgerEntry@1019 : Record 32;
    BEGIN
      // Verify Item Dimension Total report for Inventory Analysis Area.

      // Setup: Create Item, Customer, create and post Item Journal Line.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      SetupDimTotalReportWithAnalysisArea(ItemAnalysisView,
        DefaultDimension,ItemAnalysisView."Analysis Area"::Inventory,AnalysisColumn."Value Type"::"Cost Amount");

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify: Verify Quantity and Cost Amount(Actual) on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyItemDimensionTotalReport(
        DefaultDimension."Dimension Code",ItemLedgerEntry.Quantity,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(ItemDimensionTotalRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimensionTotalReportWithPurchaseAnalysisArea@55();
    VAR
      AnalysisColumn@1021 : Record 7118;
      DefaultDimension@1020 : Record 352;
      Item@1019 : Record 27;
      ItemAnalysisView@1018 : Record 7152;
      ItemLedgerEntry@1017 : Record 32;
      PurchaseLine@1013 : Record 39;
    BEGIN
      // Verify Item Dimension Total report for Inventory Analysis Area.

      // Setup: Create Item, Vendor, create and post Purchase Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateVendorDimension(DefaultDimension,CreateVendor);
      CreatePurchaseOrder(PurchaseLine,Item."No.",DefaultDimension."No.");
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);
      SetupDimTotalReportWithAnalysisArea(ItemAnalysisView,
        DefaultDimension,ItemAnalysisView."Analysis Area"::Purchase,AnalysisColumn."Value Type"::"Cost Amount");

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Total",TRUE,FALSE,ItemAnalysisView);

      // Verify: Verify Quantity and Cost Amount(Actual) on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyItemDimensionTotalReport(
        DefaultDimension."Dimension Code",ItemLedgerEntry.Quantity,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForSale@17();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1004 : Record 32;
      SalesLine@1002 : Record 37;
      PrintCostShare@1003 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for Sale.

      // Setup: Create Item, Create and Post Item Journal Line, Create and Post Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,CreateCustomer);  // Use Random value for Quantity.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");

      // Exercise.
      COMMIT;
      RunCostSharesBreakdownReport(Item."No.",PrintCostShare::Sale,FALSE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      VerifyCostSharesBreakdownReport(ItemLedgerEntry,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForInventory@38();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for Inventory.

      // Setup: Create Item, Create and Post Item Journal Line.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");

      // Exercise.
      COMMIT;
      RunCostSharesBreakdownReport(Item."No.",PrintCostShare::Inventory,FALSE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      VerifyCostSharesBreakdownReport(ItemLedgerEntry,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler,ConfirmHandler,MessageHandler,CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForWIPInventory@19();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionOrder@1006 : Record 5405;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for WIP Inventory.

      // Setup: Create Child Item, Create and Post Item Journal Line for Child Item. Create and modify Parent Item with Production BOM.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."No.",Item2."Base Unit of Measure",1);
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");

      // Create Released Production Order and Post Production Journal.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",ItemJournalLine.Quantity / 2);

      // Enqueue values for Confirm and Message Handlers.
      LibraryVariableStorage.Enqueue(PostingMessage);
      LibraryVariableStorage.Enqueue(PostedLinesMessage);
      CreateAndPostProductionJournal(ProductionOrder);
      FindItemLedgerEntry(ItemLedgerEntry,Item2."No.",ItemLedgerEntry."Entry Type"::Output);

      // Exercise.
      COMMIT;
      RunCostSharesBreakdownReport(Item2."No.",PrintCostShare::"WIP Inventory",FALSE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      VerifyCostSharesBreakdownReport(ItemLedgerEntry,ItemLedgerEntry.Quantity * Item2."Unit Cost");
      AssertReportValue('NewMatOvrHd_PrintInvCstShrBuf',ItemLedgerEntry.Quantity * Item2."Overhead Rate");
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportInDetail@72();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1004 : Record 32;
      SalesLine@1002 : Record 37;
      PrintCostShare@1003 : 'Sale,Inventory,WIP Inventory';
      RevaluationCost@1006 : Decimal;
      AdjustedAmount@1008 : Decimal;
    BEGIN
      // Verify Cost Shares Breakdown report in detail.

      // Setup: Create Item, Create and Post Item Journal Line, Create and Post Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,CreateCustomer);  // Use Random value for Quantity.

      // Post Revaluation Journal.
      AdjustedAmount := CreateAndPostRevaluationJournal(Item."No.");
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      RevaluationCost :=
        ROUND(ItemLedgerEntry.Quantity * (AdjustedAmount / ItemJournalLine.Quantity),LibraryERM.GetAmountRoundingPrecision);

      // Exercise.
      COMMIT;
      RunCostSharesBreakdownReport(Item."No.",PrintCostShare::Sale,TRUE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      VerifyCostSharesBreakdownReport(
        ItemLedgerEntry,ItemLedgerEntry."Cost Amount (Actual)" - RevaluationCost);
      AssertReportValue('NewReval_PrintInvCstShrBuf',RevaluationCost);
    END;

    [Test]
    [HandlerFunctions(ItemBudgetRequestPageHandler)]
    PROCEDURE ItemBudgetReportStartingDateError@117();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      ValueType@1004 : 'Sales Amount,Cost Amount,Quantity';
    BEGIN
      // Verify error on Item Budget report for blank Starting Date.

      // Setup: Create Item Budget Entry.
      Initialize;
      SetupItemBudgetWithAnalysisArea(ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,ValueType::"Sales Amount",0D,FALSE);  // FALSE for Amount Whole in 1000s only.

      // Exercise: Run Item Budget report.
      COMMIT;
      ASSERTERROR RunItemBudgetReport(ItemBudgetEntry."Item No.");

      // Verify: Verify error for blank Starting Date.
      Assert.ExpectedError(StartingDateError);
    END;

    [Test]
    [HandlerFunctions(ItemBudgetRequestPageHandler)]
    PROCEDURE ItemBudgetReportWithPurchAnalysisArea@116();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      ValueType@1004 : 'Sales Amount,Cost Amount,Quantity';
    BEGIN
      // Verify Item Budget report for Purchase Analysis area.

      // Setup: Create Item Budget Entry.
      Initialize;
      SetupItemBudgetWithAnalysisArea(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Purchase,ValueType::"Cost Amount",WORKDATE,FALSE);  // FALSE for Amount Whole in 1000s only.

      // Exercise: Run Item Budget report.
      COMMIT;
      RunItemBudgetReport(ItemBudgetEntry."Item No.");

      // Verify: Verify Cost Amount on Item Budget report.
      VerifyItemBudgetReport(ItemBudgetEntry."Item No.",ItemBudgetEntry."Cost Amount");
    END;

    [Test]
    [HandlerFunctions(ItemBudgetRequestPageHandler)]
    PROCEDURE ItemBudgetReportWithSalesAnalysisArea@114();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      ValueType@1004 : 'Sales Amount,Cost Amount,Quantity';
    BEGIN
      // Verify Item Budget report for Sales Analysis area.

      // Setup: Create Item Budget Entry.
      Initialize;
      SetupItemBudgetWithAnalysisArea(ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,ValueType::"Sales Amount",WORKDATE,FALSE);  // FALSE for Amount Whole in 1000s only.

      // Exercise: Run Item Budget report.
      COMMIT;
      RunItemBudgetReport(ItemBudgetEntry."Item No.");

      // Verify: Verify Sales Amount on Item Budget report.
      VerifyItemBudgetReport(ItemBudgetEntry."Item No.",ItemBudgetEntry."Sales Amount");
    END;

    [Test]
    [HandlerFunctions(ItemBudgetRequestPageHandler)]
    PROCEDURE ItemBudgetReportWithWholeAmountOptionTrue@113();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      ValueType@1004 : 'Sales Amount,Cost Amount,Quantity';
    BEGIN
      // Verify Item Budget report with Whole Amount in 1000s True.

      // Setup: Create Item Budget Entry.
      Initialize;
      SetupItemBudgetWithAnalysisArea(ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,ValueType::"Sales Amount",WORKDATE,TRUE);  // TRUE for Amount Whole in 1000s only.

      // Exercise: Run Item Budget report.
      COMMIT;
      RunItemBudgetReport(ItemBudgetEntry."Item No.");

      // Verify: Verify Sales Amount on Item Budget report.
      VerifyItemBudgetReport(ItemBudgetEntry."Item No.",ROUND(ItemBudgetEntry."Sales Amount" / 1000,1,'<'));
    END;

    [Test]
    [HandlerFunctions(ItemDimensionDetailRequestPageHandler)]
    PROCEDURE ItemDimDetailReportAnalysisViewCodeError@112();
    BEGIN
      // Verify error on Item Dimension Detail report for blank Analysis View Code.
      ItemDimDetailReportError('',AnalysisViewCodeError);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionDetailRequestPageHandler)]
    PROCEDURE ItemDimDetailReportDateFilterError@111();
    BEGIN
      // Verify error on Item Dimension Detail report for blank Date Filter.
      ItemDimDetailReportError(CreateItemAnalysisView,DateFilterError);
    END;

    LOCAL PROCEDURE ItemDimDetailReportError@68(ItemAnalysisViewCode@1002 : Code[10];Error@1003 : Text[50]);
    VAR
      ItemAnalysisView@1001 : Record 7152;
      SetValue@1000 : 'IncludeDimension,NotIncludeDimension';
    BEGIN
      // Setup.
      Initialize;

      // Enqueue values 'ItemDimensionDetailRequestPageHandler'.
      LibraryVariableStorage.Enqueue(SetValue::NotIncludeDimension);
      EnqueueValuesForItemDimensionDetailReport(ItemAnalysisView."Analysis Area"::Sales,ItemAnalysisViewCode,'');

      // Exercise: Run Item Dimension Detail report.
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Item Dimensions - Detail",TRUE,FALSE);

      // Verify.
      Assert.ExpectedError(Error);
    END;

    [Test]
    [HandlerFunctions(ItemDimensionDetailRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimDetailReportWithSalesAnalysisArea@110();
    VAR
      DefaultDimension@1005 : Record 352;
      Item@1003 : Record 27;
      ItemAnalysisView@1001 : Record 7152;
      ItemLedgerEntry@1002 : Record 32;
      SalesLine@1009 : Record 37;
    BEGIN
      // Verify Item Dimension Total report for Sales Analysis Area.

      // Setup: Create Item, Customer, create and post Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateCustomerDimension(DefaultDimension,CreateCustomer);
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,DefaultDimension."No.");  // Use Random value for Quantity.
      SetupDimDetailReportWithAnalysisArea(DefaultDimension,ItemAnalysisView."Analysis Area"::Sales);

      // Exercise: Run Item Dimension Detail report.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Detail",TRUE,FALSE);

      // Verify: Verify Quantity and Cost Amount(Actual) on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Sales Amount (Actual)");
      VerifyItemDimensionDetailReport(
        Item."No.",ItemLedgerEntry.Quantity,'TempValEntrySaleAmtActExp',ItemLedgerEntry."Sales Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(ItemDimensionDetailRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimDetailReportWithInvtAnalysisArea@109();
    VAR
      DefaultDimension@1022 : Record 352;
      Item@1021 : Record 27;
      ItemAnalysisView@1020 : Record 7152;
      ItemJournalLine@1000 : Record 83;
      ItemLedgerEntry@1019 : Record 32;
    BEGIN
      // Verify Item Dimension Total report for Inventory Analysis Area.

      // Setup: Create Item, Customer, create and post Item Journal Line.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      SetupDimDetailReportWithAnalysisArea(DefaultDimension,ItemAnalysisView."Analysis Area"::Inventory);

      // Exercise: Run Item Dimension Detail report.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Detail",TRUE,FALSE);

      // Verify: Verify Quantity and Cost Amount(Actual) on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyItemDimensionDetailReport(
        Item."No.",ItemLedgerEntry.Quantity,'TVECostAmtActExpNonInvtbl',ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(ItemDimensionDetailRequestPageHandler,AnalysisDimSelectionLevelPageHandler)]
    PROCEDURE ItemDimDetailReportWithPurchAnalysisArea@106();
    VAR
      DefaultDimension@1020 : Record 352;
      Item@1019 : Record 27;
      ItemAnalysisView@1018 : Record 7152;
      ItemLedgerEntry@1017 : Record 32;
      PurchaseLine@1013 : Record 39;
    BEGIN
      // Verify Item Dimension Total report for Inventory Analysis Area.

      // Setup: Create Item, Vendor, create and post Purchase Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateVendorDimension(DefaultDimension,CreateVendor);
      CreatePurchaseOrder(PurchaseLine,Item."No.",DefaultDimension."No.");
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);
      SetupDimDetailReportWithAnalysisArea(DefaultDimension,ItemAnalysisView."Analysis Area"::Purchase);

      // Exercise: Run Item Dimension Detail report.
      COMMIT;
      REPORT.RUN(REPORT::"Item Dimensions - Detail",TRUE,FALSE);

      // Verify: Verify Quantity on Item Dimension Total report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyItemDimensionDetailReport(
        Item."No.",ItemLedgerEntry.Quantity,'TVECostAmtActExpNonInvtbl',ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(InvtCostAndPriceListRequestPageHandler)]
    PROCEDURE InvtCostAndPriceListUsingSKUTrue@61();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Verify Unit Cost of Item with Average Cost.

      // Create Setup to generate Inventory Cost and Price List Report with Use Stockkeeping as True.
      Initialize;
      InvtCostAndPriceListSetup(Item);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify: Verify Unit Cost of Item with Average Cost.
      VerifyInvtCostAndPriceListReport(Item."No.");
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportAnalysisLineTemplateError@101();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      // Verify Analysis report for blank Analysis Line Template.

      // Setup.
      Initialize;
      AnalysisReportError('','',STRSUBSTNO(AnalysisTemplateError,AnalysisLineTemplate.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportAnalysisColumnTemplateError@99();
    VAR
      AnalysisLineTemplate@1001 : Record 7112;
      AnalysisColumnTemplate@1000 : Record 7116;
      ItemAnalysisView@1003 : Record 7152;
    BEGIN
      // Verify Analysis report for blank Analysis Column Template.

      // Setup: Create Analysis Line Template.
      Initialize;
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisView."Analysis Area"::Inventory);
      AnalysisReportError(AnalysisLineTemplate.Name,'',STRSUBSTNO(AnalysisTemplateError,AnalysisColumnTemplate.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportDateFilterError@98();
    VAR
      AnalysisLineTemplate@1001 : Record 7112;
      AnalysisColumnTemplate@1004 : Record 7116;
      ItemAnalysisView@1003 : Record 7152;
    BEGIN
      // Verify Analysis report for blank Date Filter.

      // Setup: Create Analysis Line Template and Analysis Column Template.
      Initialize;
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisView."Analysis Area"::Inventory);
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area"::Inventory);
      AnalysisReportError(AnalysisLineTemplate.Name,AnalysisColumnTemplate.Name,AnalysisLineDateFilterError);
    END;

    LOCAL PROCEDURE AnalysisReportError@97(AnalysisLineTemplateName@1006 : Code[10];AnalysisColumnTemplateName@1007 : Code[10];Error@1005 : Text[1024]);
    VAR
      AnalysisReportName@1000 : Record 7111;
      ItemAnalysisView@1001 : Record 7152;
      ShowError@1002 : 'None,Division by Zero,Period Error,Both';
    BEGIN
      // Create Analysis report name and enqueue values for 'AnalysisRequestPageHandler'.
      CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area"::Inventory);
      EnqueueValuesForAnalysisReport(
        ItemAnalysisView."Analysis Area"::Inventory,AnalysisReportName.Name,AnalysisLineTemplateName,AnalysisColumnTemplateName,0D,
        ShowError::None);  // Take 0D for blank Date Filter.

      // Exercise.
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify.
      Assert.ExpectedError(Error);
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportWithPurchaseAnalysisArea@102();
    VAR
      AnalysisColumn@1016 : Record 7118;
      Item@1015 : Record 27;
      ItemAnalysisView@1014 : Record 7152;
      ItemLedgerEntry@1013 : Record 32;
      PurchaseLine@1012 : Record 39;
      ShowError@1011 : 'None,Division by Zero,Period Error,Both';
      RowRefNo@1000 : Code[10];
    BEGIN
      // Verify Analysis report for Purchase Analysis Area.

      // Setup: Create Item, create and post Purchase Order.
      Initialize;
      RowRefNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PurchaseLine.FIELDNO("Location Code"),DATABASE::"Purchase Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Location Code")));
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreatePurchaseOrder(PurchaseLine,Item."No.",CreateVendor);
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);  // Post as Receive and Invoice.
      SetupAnalysisReportWithAnalysisArea(
        ItemAnalysisView."Analysis Area"::Purchase,AnalysisColumn."Value Type"::"Cost Amount",ShowError::None,WORKDATE,Item."No.",
        RowRefNo);

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify: Verify Quantity and Cost Amount on Analysis report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyIAnalysisReport(RowRefNo,ItemLedgerEntry.Quantity,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportWithSalesAnalysisArea@56();
    VAR
      AnalysisColumn@1001 : Record 7118;
      Item@1000 : Record 27;
      ItemAnalysisView@1002 : Record 7152;
      ItemLedgerEntry@1003 : Record 32;
      SalesLine@1005 : Record 37;
      ShowError@1010 : 'None,Division by Zero,Period Error,Both';
      RowRefNo@1004 : Code[10];
    BEGIN
      // Verify Analysis report for Sales Analysis Area.

      // Setup: Create Item, create and post Sales Order.
      Initialize;
      RowRefNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(SalesLine.FIELDNO("Location Code"),DATABASE::"Sales Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Sales Line",SalesLine.FIELDNO("Location Code")));
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,CreateCustomer);  // Use Random value for Quantity.
      SetupAnalysisReportWithAnalysisArea(
        ItemAnalysisView."Analysis Area"::Sales,AnalysisColumn."Value Type"::"Sales Amount",ShowError::None,WORKDATE,Item."No.",
        RowRefNo);

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify: Verify Quantity and Sales Amount on Analysis report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Sales Amount (Actual)");
      VerifyIAnalysisReport(RowRefNo,ItemLedgerEntry.Quantity,ItemLedgerEntry."Sales Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportWithInventoryAnalysisArea@104();
    VAR
      AnalysisColumn@1016 : Record 7118;
      Item@1015 : Record 27;
      ItemAnalysisView@1014 : Record 7152;
      ItemLedgerEntry@1013 : Record 32;
      ItemJournalLine@1012 : Record 83;
      ShowError@1011 : 'None,Division by Zero,Period Error,Both';
      RowRefNo@1000 : Code[10];
    BEGIN
      // Verify Analysis report for Inventory Analysis Area.

      // Setup: Create Item, create and post Item Journal Line.
      Initialize;
      RowRefNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Location Code"),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Location Code")));
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      SetupAnalysisReportWithAnalysisArea(
        ItemAnalysisView."Analysis Area"::Inventory,AnalysisColumn."Value Type"::"Cost Amount",ShowError::None,WORKDATE,Item."No.",
        RowRefNo);

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify: Verify Quantity and Cost Amount on Analysis report.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyIAnalysisReport(RowRefNo,ItemLedgerEntry.Quantity,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportShowErrorDivisionByZero@94();
    VAR
      AnalysisColumn@1004 : Record 7118;
      ItemAnalysisView@1002 : Record 7152;
      ItemJournalLine@1006 : Record 83;
      Item@1000 : Record 27;
      ShowError@1003 : 'None,Division by Zero,Period Error,Both';
      AnalysisColumnTemplateName@1001 : Code[10];
      RowRefNo@1005 : Code[10];
    BEGIN
      // Verify Analysis report for Show error as Division By Zero.

      // Setup: Create Item, create and post Item Journal Line.
      Initialize;
      RowRefNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Location Code"),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Location Code")));
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      AnalysisColumnTemplateName :=
        SetupAnalysisReportWithAnalysisArea(
          ItemAnalysisView."Analysis Area"::Inventory,AnalysisColumn."Value Type"::"Cost Amount",ShowError::"Division by Zero",
          WORKDATE,Item."No.",RowRefNo);
      UpdateAnalysisColumn(ItemAnalysisView."Analysis Area"::Inventory,AnalysisColumnTemplateName);

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify: Verify report for Show error as Division By Zero.
      VerifyAnalysisReportForShowError(RowRefNo,ErrorTxt);
    END;

    [Test]
    [HandlerFunctions(AnalysisRequestPageHandler)]
    PROCEDURE AnalysisReportShowErrorPeriodError@93();
    VAR
      AnalysisColumn@1015 : Record 7118;
      ItemAnalysisView@1014 : Record 7152;
      ItemJournalLine@1013 : Record 83;
      Item@1012 : Record 27;
      ShowError@1011 : 'None,Division by Zero,Period Error,Both';
      RowRefNo@1000 : Code[10];
    BEGIN
      // Verify Analysis report for Show error as Period error.

      // Setup: Create Item, create and post Item Journal Line.
      Initialize;
      RowRefNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Location Code"),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Location Code")));
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      SetupAnalysisReportWithAnalysisArea(
        ItemAnalysisView."Analysis Area"::Inventory,AnalysisColumn."Value Type"::"Cost Amount",ShowError::"Period Error",31129999D,
        Item."No.",RowRefNo);  // Take 31/12/9999 as per report design.

      // Exercise.
      COMMIT;
      REPORT.RUN(REPORT::"Analysis Report",TRUE,FALSE);

      // Verify: Verify report for Show error as Period error.
      VerifyAnalysisReportForShowError(RowRefNo,NotAvailable);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportRequestPageHandler,InventoryAnalysisMatrixPageHandler,VerifyDrillDownMessageHandler)]
    PROCEDURE AnalysisReportMatrixDrillDownDivisionByZero@80();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisColumnTemplate@1003 : Record 7116;
      AnalysisLine@1004 : Record 7114;
      AnalysisLineTemplate@1000 : Record 7112;
      AnalysisReportName@1006 : Record 7111;
      Item@1001 : Record 27;
      ItemAnalysisView@1002 : Record 7152;
      Formula@1008 : Code[80];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 363269] Drill Down cell with Formula on Inventory Analysis Matrix shows error message in case of division by zero
      Initialize;

      // [GIVEN] Analysis Column with "Formula" = "1 / 0"
      Formula := '1/0';
      LibraryInventory.CreateItem(Item);

      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Inventory);
      CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");
      CreateAnalysisColumn(AnalysisColumn,ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,LibraryUtility.GenerateGUID);
      UpdateAnalysisColumnFormula(AnalysisColumn,Formula);

      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisView."Analysis Area");
      CreateAndModifyAnalysisLine(
        AnalysisLine,ItemAnalysisView."Analysis Area",AnalysisLineTemplate.Name,Item."No.",GetRndLocationCode,AnalysisLine.Type::Item);

      LibraryVariableStorage.Enqueue(STRSUBSTNO(ColumnFormulaMsg,Formula));
      LibraryVariableStorage.Enqueue(STRSUBSTNO(ColumnFormulaErrorMsg,ErrorTypeRef::"Division by Zero"));

      // [WHEN] Run Drill Down on Formula on Inventory Analysis Matrix page
      OpenAnalysisReportInventory(AnalysisReportName.Name,AnalysisLineTemplate.Name,AnalysisColumnTemplate.Name);

      // [THEN] Drill Down Message shows text of Formula
      // [THEN] Drill Down Message shows Error Type
      // Verification is done in VerifyDrillDownMessageHandler
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE CostSharesBreakdownReportForInventoryWithDifferentTransaction@9();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesLine@1006 : Record 37;
      DocumentNo@1009 : Code[20];
      Qty@1004 : Decimal;
      MaterialDirectCost@1010 : Decimal;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for Inventory when there are different kind types of transaction.

      // Setup: Create Item, Create and Post an Item Journal.
      Initialize;
      Qty := 10 + LibraryRandom.RandDec(10,2); // Just make sure there are enough Item on Inventory.
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournal(
        ItemJournalLine,Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Qty,LibraryRandom.RandDec(10,2));

      // Create and Post Sales Order.
      CreateAndPostSalesOrder(SalesLine,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE,CreateCustomer);

      // Create and post Sales Return Order by Get Posted Document To Reverse.
      DocumentNo := CreateAndPostSalesReturnOrderByGetPostedDocToReverse(SalesLine."Sell-to Customer No.");

      // Exercise: Run Cost Shares Breakdown Report.
      COMMIT;
      RunCostSharesBreakdownReport(Item."No.",PrintCostShare::Inventory,TRUE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      // Verify Quantity and Material Direct Cost for Item Journal.
      Item.GET(Item."No.");
      LibraryReportDataset.LoadDataSetFile;
      MaterialDirectCost := (Qty - SalesLine.Quantity) * ItemJournalLine."Unit Cost";
      VerifyCostSharesBreakdownReportForInventory(ItemJournalLine."Document No.",Qty - SalesLine.Quantity,MaterialDirectCost);

      // Verify Quantity and Material Direct Cost for Sales Return Order.
      MaterialDirectCost := SalesLine.Quantity * Item."Unit Cost";
      VerifyCostSharesBreakdownReportForInventory(DocumentNo,SalesLine.Quantity,MaterialDirectCost);
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForInventoryWithDebtInventory@62();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : ARRAY [3] OF Record 83;
      Qty@1004 : Decimal;
      UnitCost@1005 : Decimal;
      MaterialDirectCost@1010 : Decimal;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for Inventory when Item with different Unit Cost is not enough on Inventory.

      // Setup: Create Item, Create and Post 3 Item Journals. One for Sale, another two for Positive Adjmt.
      Initialize;
      Qty := LibraryRandom.RandDec(10,2);
      UnitCost := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournal(ItemJournalLine[1],Item."No.",ItemJournalLine[1]."Entry Type"::"Positive Adjmt.",Qty,UnitCost);
      CreateAndPostItemJournal(ItemJournalLine[2],Item."No.",ItemJournalLine[2]."Entry Type"::"Positive Adjmt.",Qty,UnitCost + 1);
      CreateAndPostItemJournal(ItemJournalLine[3],Item."No.",ItemJournalLine[3]."Entry Type"::Sale,3 * Qty,UnitCost); // Sale 3 times Quantity to make debt inventory.

      // Exercise: Run Cost Shares Breakdown Report.
      COMMIT;
      RunCostSharesBreakdownReport(Item."No.",PrintCostShare::Inventory,TRUE);

      // Verify: Verify Quantity and Material Direct Cost Applied in the report.
      // Verify Quantity and Material Direct Cost for Debt Inventory.
      Item.GET(Item."No.");
      LibraryReportDataset.LoadDataSetFile;
      MaterialDirectCost :=
        Qty * ItemJournalLine[1]."Unit Cost" + Qty * ItemJournalLine[2]."Unit Cost" - 3 * Qty * Item."Unit Cost";
      VerifyCostSharesBreakdownReportForInventory(ItemJournalLine[3]."Document No.",-Qty,MaterialDirectCost);
    END;

    [Test]
    [HandlerFunctions(PostInventoryCostToGLRequestPageHandler)]
    PROCEDURE InvAmountOnPostInventoryCostToGLTestReport@128();
    VAR
      ItemNo@1003 : Code[20];
    BEGIN
      // Verify Inventory Cost Posted to GL Caption with Inventory Amount exist on generated report.

      // Setup: Create and Post Purchase Order.
      Initialize;
      ItemNo := CreateAndPostPurchaseOrder;

      // Exercise: Run Post Inventory Cost To G/L Report.
      RunPostInventoryCostToGL(ItemNo);

      // Verify: Verified Inventory Cost Posted to GL Caption with Inventory Amount.
      VerifyAmountsOnInventoryCostToGL(ItemNo);
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForInventoryWithPartialRevaluation@132();
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalLine2@1003 : Record 83;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
      AdjustedAmount@1005 : Decimal;
    BEGIN
      // Verify Cost Shares Breakdown report for Inventory with doing partial Revaluation.

      // Setup: Create Item, Create and Post a Positive Adjmt. Item Journal, then post a Negative Adjmt. Item Journal with partial quantity.
      // Do Revaluation for remaining quantity of the Item in inventory
      Initialize;
      SetupCostSharesBreakdownReportWithPartialRevaluation(ItemJournalLine,ItemJournalLine2,AdjustedAmount);

      // Exercise: Run Cost Shares Breakdown Report for Inventory.
      RunCostSharesBreakdownReport(ItemJournalLine."Item No.",PrintCostShare::Inventory,TRUE);

      // Verify: Verify Quantity, Material Direct Cost Applied, Revaluation and Total Amount in the report for Positive Adjmt. Item Ledger Entry
      VerifyFieldsOnCostSharesBreakdownReport(
        ItemJournalLine."Document No.",ItemJournalLine.Quantity - ItemJournalLine2.Quantity,
        ItemJournalLine.Quantity * ItemJournalLine."Unit Cost" - ItemJournalLine2.Quantity * ItemJournalLine2."Unit Cost",
        AdjustedAmount);
    END;

    [Test]
    [HandlerFunctions(CostSharesBreakdownRequestPageHandler)]
    PROCEDURE CostSharesBreakdownReportForInventoryWithRevaluationForTransferQty@131();
    VAR
      PurchaseLine@1004 : Record 39;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1008 : Record 32;
      PrintCostShare@1002 : 'Sale,Inventory,WIP Inventory';
    BEGIN
      // Verify Cost Shares Breakdown report for Inventory with doing Revaluation for Transfered Quantity.

      // Setup: Create Item, Location, Post purchase order for the item with the location.
      // Post transfer Order for the item to move partial quantity to a new location. Do Revaluation for the remaining Quantity in
      // the old location and do revaluation for the transfered quantity in the new location.
      Initialize;
      SetupCostSharesBreakdownReportWithRevaluationForTransferQty(ItemJournalLine,PurchaseLine);

      // Exercise: Run Cost Shares Breakdown Report For Inventory.
      RunCostSharesBreakdownReport(ItemJournalLine."Item No.",PrintCostShare::Inventory,TRUE);
      FindItemLedgerEntryWithDocType(
        ItemLedgerEntry,ItemJournalLine."Item No.",ItemLedgerEntry."Document Type"::"Transfer Receipt");

      // Verify: Verify Quantity, Material Direct Cost Applied, Revaluation and Total Amount in the report for Transfer Receipt Item Ledger Entry
      VerifyFieldsOnCostSharesBreakdownReport(
        ItemLedgerEntry."Document No.",ItemJournalLine.Quantity,
        ItemJournalLine.Quantity * PurchaseLine."Direct Unit Cost",ItemJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(BOMCostSharesPageHandler)]
    PROCEDURE BOMCostSharesWithMultipleProdBOMLevels@134();
    VAR
      BOMItem@1002 : Record 27;
      TopBOMItem@1001 : Record 27;
      BOMItemNo@1004 : Code[20];
      QtyPer@1000 : Decimal;
    BEGIN
      // Setup: Create Top BOM Item with BOM Item as Component. Create Child Item for BOM Item.
      CreateItemWithUnitCost(TopBOMItem,TopBOMItem."Replenishment System"::"Prod. Order",LibraryRandom.RandInt(10));
      QtyPer := LibraryRandom.RandInt(10);
      BOMItemNo := CreateSetupForProductionBOM(TopBOMItem."No.",QtyPer);
      CreateSetupForProductionBOM(BOMItemNo,LibraryRandom.RandInt(10));

      // Exercise: Run BOM Cost Shares Page for Top BOM Item.
      // Verify: Verify Rolled-up Material Cost of the 2nd BOM which is a Purchase Item and it does not account cost from its component.
      BOMItem.GET(BOMItemNo);
      LibraryVariableStorage.Enqueue(BOMItem."Unit Cost" * QtyPer);
      LibraryVariableStorage.Enqueue(BOMItem."No.");
      RunBOMCostSharesPage(TopBOMItem);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportRequestPageHandler,InventoryAnalysisMatrixRequestPageHandler2)]
    PROCEDURE AnalysisReportWithFormatPrecision@142();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisColumnTemplate@1003 : Record 7116;
      AnalysisLine@1004 : Record 7114;
      AnalysisLineTemplate@1000 : Record 7112;
      AnalysisReportName@1006 : Record 7111;
      Item@1001 : Record 27;
      ItemAnalysisView@1002 : Record 7152;
      Value@1008 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Analysis Matrix]
      // [SCENARIO] Verify that values in Inventory Analysis Matrix are formatted to have max 2 digits in fraction.

      // [GIVEN] Value in Analysis Matrix column having long fraction: 0,115.
      Initialize;
      Value := 0.115;
      LibraryInventory.CreateItem(Item);
      AnalysisReportWithAnalysisView(
        AnalysisReportName,AnalysisLineTemplate,AnalysisColumnTemplate,ItemAnalysisView."Analysis Area"::Inventory,
        AnalysisColumn."Value Type"::"Cost Amount",GetRndLocationCode,Item."No.");
      CreateAndModifyAnalysisLine(
        AnalysisLine,ItemAnalysisView."Analysis Area"::Inventory,AnalysisLineTemplate.Name,FORMAT(Value),
        GetRndLocationCode,AnalysisLine.Type::Formula);
      LibraryVariableStorage.Enqueue(AnalysisLine."Row Ref. No.");  // Enqueue AnalysisLine."Row Ref. No." value in InventoryAnalysisMatrixRequestPageHandler2.
      LibraryVariableStorage.Enqueue(FORMAT(Value,0,LibraryAccountSchedule.GetAutoFormatString));  // Enqueue expected column value in InventoryAnalysisMatrixRequestPageHandler2.

      // [WHEN] Open Analysis Matrix.
      OpenAnalysisReportInventory(AnalysisReportName.Name,AnalysisLineTemplate.Name,AnalysisColumnTemplate.Name);

      // [THEN] Value on Page: 0,12.
      // Verification is done in InventoryAnalysisMatrixRequestPageHandler2.
    END;

    [Test]
    [HandlerFunctions(SetAnalysisReportRequestFilterPageHandler,InventoryAnalysisMatrixVerifyFilterPageHandler)]
    PROCEDURE LongSourceNoFilterAcceptedByInventoryAnalysisMatrix@83();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisColumnTemplate@1003 : Record 7116;
      AnalysisLine@1004 : Record 7114;
      AnalysisLineTemplate@1000 : Record 7112;
      AnalysisReportName@1006 : Record 7111;
      Item@1001 : ARRAY [2] OF Record 27;
      ItemAnalysisView@1002 : Record 7152;
    BEGIN
      // [FEATURE] [UI] [Inventory Analysis Reports]
      // [SCENARIO 381039] The page "Inventory Analysis Matrix" should accept source no. filter longer than 30 symbols
      Initialize;

      // [GIVEN] 2 items, each with 20 symbols long "No."
      MockItemWithLongNo(Item[1]);
      MockItemWithLongNo(Item[2]);

      // [GIVEN] Create analysis view, analysis report, analysis column template and analysis line template
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Inventory);
      CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");
      CreateAnalysisColumn(AnalysisColumn,ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,LibraryUtility.GenerateGUID);

      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisView."Analysis Area");
      CreateAndModifyAnalysisLine(
        AnalysisLine,ItemAnalysisView."Analysis Area",AnalysisLineTemplate.Name,Item[1]."No.",
        GetRndLocationCode,AnalysisLine.Type::Item);

      // [GIVEN] Open "Inventory Analysis Report" page, set "Source No. Filter" = "ITEM1|ITEM2". Filter length is 41 characters
      // [WHEN] Invoke "Show Matrix" action
      LibraryVariableStorage.Enqueue(AnalysisLine."Source Type Filter"::Item);
      LibraryVariableStorage.Enqueue(Item[1]."No." + '|' + Item[2]."No.");
      OpenAnalysisReportInventory(AnalysisReportName.Name,AnalysisLineTemplate.Name,AnalysisColumnTemplate.Name);

      // [THEN] Filter is transferred from "Inventory Analysis Report" to "Inventory Analysis Matrix"
      // Verification is done in InventoryAnalysisMatrixVerifyFilterPageHandler
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1003 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      UpdateInventorySetupCostPosting;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AnalysisReportWithAnalysisView@125(VAR AnalysisReportName@1004 : Record 7111;VAR AnalysisLineTemplate@1013 : Record 7112;VAR AnalysisColumnTemplate@1012 : Record 7116;AnalysisArea@1007 : Option;ValueType@1008 : Option;RowRefNo@1010 : Code[10];ItemNo@1009 : Code[20]) : Code[10];
    VAR
      ItemJournalLine@1003 : Record 83;
      AnalysisColumn@1002 : Record 7118;
      AnalysisLine@1001 : Record 7114;
      ItemAnalysisView@1000 : Record 7152;
    BEGIN
      // Create Item Analysis View and Analysis report name.
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,AnalysisArea);
      CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Create Analysis Column Template amd Analysis Columns.
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");
      CreateAndModifyAnalysisColumn(
        ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,ItemJournalLine.FIELDCAPTION(Quantity),
        AnalysisColumn."Value Type"::Quantity);
      CreateAndModifyAnalysisColumn(ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,Amount,ValueType);

      // Create Analysis Line Template and Analysis Line.
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisView."Analysis Area");
      CreateAndModifyAnalysisLine(
        AnalysisLine,ItemAnalysisView."Analysis Area",AnalysisLineTemplate.Name,ItemNo,RowRefNo,AnalysisLine.Type::Item);
      EXIT(AnalysisLine."Row Ref. No.");
    END;

    LOCAL PROCEDURE AssertReportValue@150(ElementName@1000 : Text;ExpectedValue@1001 : Decimal);
    VAR
      VarDecimal@1002 : Variant;
      ActValue@1003 : Variant;
    BEGIN
      LibraryReportDataset.FindCurrentRowValue(ElementName,VarDecimal);
      ActValue := VarDecimal;
      Assert.AreNearlyEqual(ExpectedValue,ActValue,LibraryERM.GetAmountRoundingPrecision,ValueNotMatchedError);
    END;

    LOCAL PROCEDURE CalculateItemAverageCost@74() : Decimal;
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      Item@1004 : Record 27;
      ItemCostManagement@1002 : Codeunit 5804;
      ItemAverageCost@1001 : Decimal;
      AverageCostACY@1000 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ItemCostManagement.CalculateAverageCost(Item,ItemAverageCost,AverageCostACY);  // Average Cost ACY calculated in Item Cost Management.
      ItemAverageCost := ROUND(ItemAverageCost,GeneralLedgerSetup."Unit-Amount Rounding Precision");
      EXIT(ItemAverageCost);
    END;

    LOCAL PROCEDURE CreateAnalysisReportName@119(VAR AnalysisReportName@1000 : Record 7111;AnalysisArea@1001 : Option);
    BEGIN
      AnalysisReportName.INIT;
      AnalysisReportName.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisReportName.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(AnalysisReportName.FIELDNO(Name),DATABASE::"Analysis Report Name"));
      AnalysisReportName.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@44(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1003 : Code[20];BaseUnitOfMeasure@1000 : Code[10];QtyPer@1004 : Decimal);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QtyPer);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSetupForProductionBOM@135(BOMItemNo@1000 : Code[20];QtyPer@1003 : Decimal) : Code[20];
    VAR
      ChildItem@1001 : Record 27;
      BOMItem@1004 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithUnitCost(ChildItem,ChildItem."Replenishment System"::Purchase,LibraryRandom.RandInt(10));
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.",ChildItem."Base Unit of Measure",QtyPer);
      BOMItem.GET(BOMItemNo);
      UpdateProductionBOMOnItem(BOMItem,ProductionBOMHeader."No.");
      EXIT(ChildItem."No.");
    END;

    LOCAL PROCEDURE CreateAndModifyAnalysisColumn@57(AnalysisArea@1001 : Option;AnalysisColumnTemplate@1002 : Code[10];ColumnHeader@1003 : Text[50];ValueType@1004 : Option);
    VAR
      AnalysisColumn@1000 : Record 7118;
    BEGIN
      CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate,ColumnHeader);
      AnalysisColumn.VALIDATE(Invoiced,TRUE);
      AnalysisColumn.VALIDATE("Value Type",ValueType);
      AnalysisColumn.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisColumn@145(VAR AnalysisColumn@1000 : Record 7118;AnalysisArea@1001 : Option;AnalysisColumnTemplate@1002 : Code[10];ColumnHeader@1003 : Text[50]);
    BEGIN
      LibraryERM.CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate);
      AnalysisColumn.VALIDATE("Column No.",COPYSTR(LibraryUtility.GenerateGUID,1,AnalysisColumn.FIELDNO("Column No.")));
      AnalysisColumn.VALIDATE("Column Header",ColumnHeader);
      AnalysisColumn.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyAnalysisLine@120(VAR AnalysisLine@1000 : Record 7114;AnalysisArea@1001 : Option;AnalysisLineTemplateName@1002 : Code[10];Range@1004 : Code[20];RowRefNo@1003 : Code[10];Type@1005 : Option);
    BEGIN
      LibraryInventory.CreateAnalysisLine(AnalysisLine,AnalysisArea,AnalysisLineTemplateName);
      AnalysisLine.VALIDATE(Type,Type);
      AnalysisLine.VALIDATE("Row Ref. No.",RowRefNo);
      AnalysisLine.VALIDATE(Range,Range);
      AnalysisLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyPurchaseOrder@71(VAR PurchaseLine@1001 : Record 39;ItemNo@1003 : Code[20];LocationCode@1005 : Code[10];BinCode@1006 : Code[20]);
    BEGIN
      CreatePurchaseOrder(PurchaseLine,ItemNo,'');
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@7(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,10 + LibraryRandom.RandDec(10,2));  // Use Random Quantity.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@45(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];EntryType@1004 : Option;Qty@1000 : Decimal;UnitCost@1006 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Qty);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.Amount := ItemJournalLine."Unit Cost" * Qty; // It is necessary to Validate this field to update Item."Unit Cost".
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostRevaluationJournal@63(ItemNo@1000 : Code[20]) : Decimal;
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1006 : Record 233;
    BEGIN
      CreateRevaluationJournal(ItemJournalLine,ItemJournalBatch,ItemNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(ItemJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreateRevaluationJournal@52(VAR ItemJournalLine@1007 : Record 83;VAR ItemJournalBatch@1001 : Record 233;ItemNo@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      ItemJournalTemplate@1006 : Record 82;
      CalculatePer@1005 : 'Item Ledger Entry,Item';
      CalcBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Revaluation);
      LibraryCosting.CreateRevaluationJournal(
        ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Document No.",CalculatePer::"Item Ledger Entry",FALSE,FALSE,FALSE,
        CalcBase::" ",FALSE);

      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Unit Cost (Revalued)",ItemJournalLine."Unit Cost (Calculated)" + LibraryRandom.RandDec(10,2));  // Use Random value for Unit Cost Revalued.
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@60(VAR SalesLine@1002 : Record 37;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;PostingDate@1005 : Date;CustomerNo@1006 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnOrderByGetPostedDocToReverse@75(CustomerNo@1003 : Code[20]) PostedDocumentNo : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      SalesHeader.GetPstdDocLinesToRevere;
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE); // Post as Receive.
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@49(VAR ProductionOrder@1002 : Record 5405;Status@1003 : Option;SourceNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateItemAnalysisView@103(VAR ItemAnalysisView@1000 : Record 7152;AnalysisArea@1001 : Option;DimensionCode@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,AnalysisArea);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",DimensionCode);
      ItemAnalysisView.MODIFY(TRUE);
      UpdateItemAnalysisView(ItemAnalysisView.Code);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@137() : Code[20];
    VAR
      Item@1002 : Record 27;
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseLine,LibraryInventory.CreateItem(Item),'');
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItem@1(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Standard Cost",LibraryRandom.RandDec(10,2));  // Use Random value for Standard Cost.
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Use Random value for UnitPrice.
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithUnitCost@136(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;UnitCost@1002 : Decimal);
    BEGIN
      CreateItem(Item,ReplenishmentSystem);
      Item.VALIDATE("Unit Cost",UnitCost);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAnalysisView@48() : Code[10];
    VAR
      ItemAnalysisView@1000 : Record 7152;
    BEGIN
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      EXIT(ItemAnalysisView.Code);
    END;

    LOCAL PROCEDURE CreateItemBudgetEntry@59(VAR ItemBudgetEntry@1000 : Record 7134;AnalysisArea@1002 : 'Sales,Purchase';ItemNo@1003 : Code[20]);
    BEGIN
      // Multiply by 1000 to generate random Sales Amount and Cost Amount in multiples of 1000.
      LibraryInventory.CreateItemBudgetEntry(ItemBudgetEntry,AnalysisArea,FindItemBudgetName(AnalysisArea),WORKDATE,ItemNo);
      CASE AnalysisArea OF
        AnalysisArea::Sales:
          ItemBudgetEntry.VALIDATE("Sales Amount",1000 * LibraryRandom.RandDec(10,2));
        AnalysisArea::Purchase:
          ItemBudgetEntry.VALIDATE("Cost Amount",1000 * LibraryRandom.RandDec(10,2));
      END;
      ItemBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@69(VAR ItemJournalBatch@1002 : Record 233;TemplateType@1000 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,TemplateType);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
      LibraryUtility.GenerateGUID;  // To avoid 'Item Journal Batch already exists' error.
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeSerialSpecific@28() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemVendorWithVendorItemNo@11(VAR ItemVendor@1000 : Record 99;VendorNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemVendor(ItemVendor,VendorNo,ItemNo);
      ItemVendor.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@67() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateLocationWithBin@122(VAR Bin@1000 : Record 7354);
    VAR
      Location@1001 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');  // Use blank value for Zone Code and Bin Type Code.
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@58(VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Use random value for Quantity.
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@73(ItemNo@1000 : Code[20];SKUCreationMethod@1002 : Option);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateVendor@81() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrder@139(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1005 : Code[10];ItemNo@1003 : Code[20];Quantity@1006 : Decimal);
    VAR
      TransferLine@1002 : Record 5741;
      Location@1001 : Record 14;
      Location2@1004 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateInTransitLocation(Location2);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,Location.Code,Location2.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE EnqueueSerialNos@22(SerialNo@1003 : ARRAY [10] OF Code[20];Count@1000 : Integer);
    VAR
      Iteration@1002 : Integer;
    BEGIN
      FOR Iteration := 1 TO Count DO
        LibraryVariableStorage.Enqueue(SerialNo[Iteration]);  // Enqueue value for ItemTrackingSummaryPageHandler.
    END;

    LOCAL PROCEDURE EnqueueValuesForAnalysisReport@84(AnalysisArea@1005 : Option;AnalysisReportName@1004 : Code[10];AnalysisLineTemplate@1003 : Code[10];AnalysisColumnTemplate@1002 : Code[10];DateFilter@1001 : Date;ShowError@1000 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(AnalysisArea);
      LibraryVariableStorage.Enqueue(AnalysisReportName);
      LibraryVariableStorage.Enqueue(AnalysisLineTemplate);
      LibraryVariableStorage.Enqueue(AnalysisColumnTemplate);
      LibraryVariableStorage.Enqueue(DateFilter);
      LibraryVariableStorage.Enqueue(ShowError);
    END;

    LOCAL PROCEDURE EnqueueValuesForItemBudgetReport@107(ItemBudgetEntry@1001 : Record 7134;ValueType@1000 : Option;Date@1003 : Date;ShowAmount@1005 : Boolean);
    BEGIN
      // Enqueue values for 'ItemBudgetRequestPageHandler'.
      LibraryVariableStorage.Enqueue(ItemBudgetEntry."Analysis Area");
      LibraryVariableStorage.Enqueue(ItemBudgetEntry."Budget Name");
      LibraryVariableStorage.Enqueue(ValueType);
      LibraryVariableStorage.Enqueue(Date);
      LibraryVariableStorage.Enqueue(ShowAmount);
      LibraryVariableStorage.Enqueue(ItemBudgetEntry."Item No.");
    END;

    LOCAL PROCEDURE EnqueueValuesForItemDimensionDetailReport@76(AnalysisArea@1001 : Option;AnaysisViewCode@1003 : Code[10];DateFilter@1000 : Text[250]);
    BEGIN
      LibraryVariableStorage.Enqueue(AnalysisArea);
      LibraryVariableStorage.Enqueue(AnaysisViewCode);
      LibraryVariableStorage.Enqueue(DateFilter);
    END;

    LOCAL PROCEDURE EnqueueValuesForItemDimensionTotalReport@37(AnalysisArea@1001 : Option;AnaysisViewCode@1003 : Code[10];ColumnTemplate@1005 : Code[10];DateFilter@1000 : Text[250]);
    BEGIN
      LibraryVariableStorage.Enqueue(AnalysisArea);
      LibraryVariableStorage.Enqueue(AnaysisViewCode);
      LibraryVariableStorage.Enqueue(ColumnTemplate);
      LibraryVariableStorage.Enqueue(DateFilter);
    END;

    LOCAL PROCEDURE FindItemBudgetName@66(AnalysisArea@1001 : Option) : Code[10];
    VAR
      ItemBudgetName@1000 : Record 7132;
    BEGIN
      ItemBudgetName.SETRANGE("Analysis Area",AnalysisArea);
      ItemBudgetName.FINDFIRST;
      EXIT(ItemBudgetName.Name);
    END;

    LOCAL PROCEDURE FindItemJournalLine@16(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@92(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];EntryType@1002 : Option);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntryWithDocType@144(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetRndLocationCode@124() : Code[10];
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Location Code"),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Location Code"))));
    END;

    LOCAL PROCEDURE InvtCostAndPriceListSetup@64(VAR Item@1001 : Record 27);
    VAR
      Bin@1004 : Record 7354;
      PurchaseLine@1002 : Record 39;
      SKUCreationMethod@1000 : 'Location,Variant,Location & Variant';
    BEGIN
      CreateItem(Item,Item."Costing Method"::Average);
      CreateStockkeepingUnit(Item."No.",SKUCreationMethod::Location);
      CreateLocationWithBin(Bin);
      CreateAndModifyPurchaseOrder(PurchaseLine,Item."No.",Bin."Location Code",Bin.Code);
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);

      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      LibraryVariableStorage.Enqueue(TRUE);
      REPORT.RUN(REPORT::"Inventory Cost and Price List",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE MockItemWithLongNo@156(VAR Item@1000 : Record 27);
    BEGIN
      Item."No." := LibraryUtility.GenerateGUID + LibraryUtility.GenerateGUID;
      Item.INSERT;
    END;

    LOCAL PROCEDURE CreateAndPostProductionJournal@50(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1002 : Record 5406;
      ProductionJournalMgt@1001 : Codeunit 5510;
    BEGIN
      // Create Production Journal.
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");

      // Posting of Production Journal is done in 'ProductionJournalPageHandler'.
    END;

    LOCAL PROCEDURE OpenAnalysisReportInventory@123(AnalysisReportName@1000 : Code[10];AnalysisLineTemplateName@1001 : Code[10];AnalysisColumnTemplateName@1002 : Code[10]);
    VAR
      AnalysisReportInventory@1003 : TestPage 9377;
    BEGIN
      AnalysisReportInventory.OPENEDIT;
      AnalysisReportInventory.FILTER.SETFILTER(Name,AnalysisReportName);
      AnalysisReportInventory."Analysis Line Template Name".SETVALUE(AnalysisLineTemplateName);
      AnalysisReportInventory."Analysis Column Template Name".SETVALUE(AnalysisColumnTemplateName);
      AnalysisReportInventory.EditAnalysisReport.INVOKE;  // Edit Analysis Report page Handled by EditAnalysisReportPageHandler.
    END;

    LOCAL PROCEDURE PostPurchaseOrder@86(PurchaseLine@1000 : Record 39;Receive@1002 : Boolean;Invoice@1001 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice));
    END;

    LOCAL PROCEDURE RunCalculateInventoryReport@78(ItemJournalBatch@1001 : Record 233;ItemNo@1005 : Code[20]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryInventory.CalculateInventory(ItemJournalLine,ItemNo,WORKDATE,TRUE);
    END;

    LOCAL PROCEDURE RunCostSharesBreakdownReport@43(No@1002 : Code[20];CostSharePrint@1004 : Option;ShowDetails@1005 : Boolean);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(CostSharePrint);
      LibraryVariableStorage.Enqueue(ShowDetails);
      REPORT.RUN(REPORT::"Cost Shares Breakdown",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunImplementStandardCostChangeReport@47(StdCostWorksheetName@1000 : Code[10]);
    VAR
      ImplementStandardCostChange@1001 : Report 5855;
    BEGIN
      CLEAR(ImplementStandardCostChange);
      ImplementStandardCostChange.SetStdCostWksh(StdCostWorksheetName);
      ImplementStandardCostChange.USEREQUESTPAGE(TRUE);
      COMMIT;
      ImplementStandardCostChange.RUN;
    END;

    LOCAL PROCEDURE RunItemAgeCompositionValueReport@32(No@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      PeriodLength@1001 : DateFormula;
    BEGIN
      Item.SETRANGE("No.",No);
      EVALUATE(PeriodLength,'<1M>');  // Use 1M for monthly Period.
      LibraryVariableStorage.Enqueue(WORKDATE - 1);
      LibraryVariableStorage.Enqueue(PeriodLength);
      REPORT.RUN(REPORT::"Item Age Composition - Value",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunItemBudgetReport@85(No@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      REPORT.RUN(REPORT::"Item Budget",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunItemVendorReport@23(No@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      REPORT.RUN(REPORT::"Item/Vendor Catalog",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunStatusReport@42(No@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      REPORT.RUN(REPORT::Status,TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunPostInventoryCostToGL@127(ItemNo@1002 : Code[20]);
    VAR
      PostValueEntryToGL@1001 : Record 5811;
    BEGIN
      PostValueEntryToGL.SETRANGE("Item No.",ItemNo);
      PostValueEntryToGL.SETRANGE("Posting Date",WORKDATE);
      COMMIT;
      REPORT.RUN(REPORT::"Post Inventory Cost to G/L",TRUE,FALSE,PostValueEntryToGL);
    END;

    LOCAL PROCEDURE RunBOMCostSharesPage@209(VAR Item@1000 : Record 27);
    VAR
      BOMCostShares@1001 : Page 5872;
    BEGIN
      BOMCostShares.InitItem(Item);
      BOMCostShares.RUN;
    END;

    LOCAL PROCEDURE StoreSerialNos@130(VAR SerialNo@1003 : ARRAY [10] OF Code[20];ItemNo@1001 : Code[20]) : Integer;
    VAR
      ReservationEntry@1000 : Record 337;
      Count@1002 : Integer;
    BEGIN
      Count := 1;
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        SerialNo[Count] := ReservationEntry."Serial No.";
        Count += 1;
      UNTIL ReservationEntry.NEXT = 0;
      EXIT(ReservationEntry.COUNT);
    END;

    [HandlerFunctions(AnalysisRequestPageHandler)]
    LOCAL PROCEDURE SetupAnalysisReportWithAnalysisArea@88(AnalysisArea@1011 : Option;ValueType@1009 : Option;ShowError@1000 : Option;DateFilter@1010 : Date;ItemNo@1012 : Code[20];RowRefNo@1005 : Code[10]) : Code[10];
    VAR
      AnalysisLineTemplate@1001 : Record 7112;
      AnalysisColumnTemplate@1003 : Record 7116;
      AnalysisReportName@1004 : Record 7111;
    BEGIN
      AnalysisReportWithAnalysisView(
        AnalysisReportName,AnalysisLineTemplate,AnalysisColumnTemplate,AnalysisArea,ValueType,RowRefNo,ItemNo);

      // Enqueue values for 'AnalysisRequestPageHandler'.
      EnqueueValuesForAnalysisReport(
        AnalysisArea,AnalysisReportName.Name,AnalysisLineTemplate.Name,AnalysisColumnTemplate.Name,DateFilter,ShowError);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE SetupDimDetailReportWithAnalysisArea@105(DefaultDimension@1013 : Record 352;AnalysisArea@1014 : Option);
    VAR
      ItemAnalysisView@1002 : Record 7152;
      SetValue@1000 : 'IncludeDimension,NotIncludeDimension';
    BEGIN
      CreateAndUpdateItemAnalysisView(ItemAnalysisView,AnalysisArea,DefaultDimension."Dimension Code");

      // Enqueue values 'ItemDimensionDetailRequestPageHandler' and 'AnalysisDimSelectionLevelPageHandler'.
      LibraryVariableStorage.Enqueue(SetValue::IncludeDimension);
      EnqueueValuesForItemDimensionDetailReport(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,DateFilterText);
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Code");
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE SetupDimTotalReportWithAnalysisArea@39(VAR ItemAnalysisView@1001 : Record 7152;VAR DefaultDimension@1013 : Record 352;AnalysisArea@1014 : Option;ValueType@1015 : Option);
    VAR
      AnalysisColumnTemplate@1004 : Record 7116;
      AnalysisColumn@1008 : Record 7118;
      ItemJournalLine@1007 : Record 83;
      SetValue@1000 : 'IncludeDimension,NotIncludeDimension';
    BEGIN
      CreateAndUpdateItemAnalysisView(ItemAnalysisView,AnalysisArea,DefaultDimension."Dimension Code");

      // Create Analysis Column Template and Analysis Column.
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisView."Analysis Area");
      CreateAndModifyAnalysisColumn(
        ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,ItemJournalLine.FIELDCAPTION(Quantity),
        AnalysisColumn."Value Type"::Quantity);
      CreateAndModifyAnalysisColumn(ItemAnalysisView."Analysis Area",AnalysisColumnTemplate.Name,Amount,ValueType);

      // Enqueue values 'ItemDimensionTotalRequestPageHandler' and 'AnalysisDimSelectionLevelPageHandler'.
      LibraryVariableStorage.Enqueue(SetValue::IncludeDimension);
      EnqueueValuesForItemDimensionTotalReport(
        ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,AnalysisColumnTemplate.Name,DateFilterText);
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Code");
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE SetupItemBudgetWithAnalysisArea@79(VAR ItemBudgetEntry@1003 : Record 7134;AnalysisArea@1000 : Option;ValueType@1001 : Option;Date@1005 : Date;ShowAmount@1004 : Boolean);
    VAR
      Item@1002 : Record 27;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateItemBudgetEntry(ItemBudgetEntry,AnalysisArea,Item."No.");
      EnqueueValuesForItemBudgetReport(ItemBudgetEntry,ValueType,Date,ShowAmount);
    END;

    LOCAL PROCEDURE SetupCostSharesBreakdownReportWithPartialRevaluation@129(VAR ItemJournalLine@1000 : Record 83;VAR ItemJournalLine2@1001 : Record 83;VAR AdjustedAmount@1002 : Decimal);
    VAR
      Item@1003 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No."); // Increase inventory for Item
      CreateAndPostItemJournal(
        ItemJournalLine2,Item."No.",ItemJournalLine."Entry Type"::"Negative Adjmt.",
        ItemJournalLine.Quantity / 2,ItemJournalLine."Unit Cost"); // Decrease partial Quantity in inventory

      AdjustedAmount := CreateAndPostRevaluationJournal(Item."No."); // Do Revaluation for remaining quantity in inventory
    END;

    LOCAL PROCEDURE SetupCostSharesBreakdownReportWithRevaluationForTransferQty@138(VAR ItemJournalLine@1000 : Record 83;VAR PurchaseLine@1001 : Record 39);
    VAR
      Item@1003 : Record 27;
      Bin@1002 : Record 7354;
      TransferHeader@1004 : Record 5740;
      ItemJournalBatch@1005 : Record 233;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateLocationWithBin(Bin);
      CreateAndModifyPurchaseOrder(PurchaseLine,Item."No.",Bin."Location Code",Bin.Code);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      PostPurchaseOrder(PurchaseLine,TRUE,TRUE);
      CreateAndPostTransferOrder(TransferHeader,Bin."Location Code",Item."No.",PurchaseLine.Quantity / 2); // Transfered Partial Quantity to another location

      CreateRevaluationJournal(ItemJournalLine,ItemJournalBatch,Item."No."); // Do Revaluation for remaining quantity in inventory
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
        SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
        FINDLAST; // Find the Revaluation journal line for the transfered Quantity
        VALIDATE("Unit Cost (Revalued)","Unit Cost (Calculated)" + LibraryRandom.RandDec(10,2)); // Use Random value for Unit Cost Revalued.
        MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name); // Do Revaluation for Transfered Quantity
    END;

    LOCAL PROCEDURE SuggestAndImplementStandardCostChanges@27(VAR ItemJournalBatch@1001 : Record 233;Item@1003 : Record 27;StdCostWorksheetName@1000 : Code[10]);
    VAR
      ItemJournalLine@1015 : Record 83;
      ItemJournalTemplate@1014 : Record 82;
      SalesLine@1013 : Record 37;
      StandardCostWorksheet@1002 : Record 5841;
    BEGIN
      // Create and post Item Journal Line and Sales Order.
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.");
      CreateAndPostSalesOrder(SalesLine,Item."No.",ItemJournalLine.Quantity / 2,WORKDATE,CreateCustomer);  // Post partial Quantity.

      // Suggest Standard Cost on Standard Cost Worksheet and update Standard Cost.
      LibraryCosting.SuggestItemStandardCost(Item,StdCostWorksheetName,1,'');  // StandardCostAdjustmentFactor is 1 and StandardCostRoundingMethod is blank.
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Revaluation);

      // Enqueue values for ImplementStandardCostChangePageHandler and Message Handler.
      LibraryVariableStorage.Enqueue(ItemJournalBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(ItemJournalBatch.Name);
      LibraryVariableStorage.Enqueue(RevaluationLinesCreated);

      StandardCostWorksheet.GET(StdCostWorksheetName,StandardCostWorksheet.Type::Item,Item."No.");
      StandardCostWorksheet.VALIDATE("New Standard Cost",LibraryRandom.RandDec(10,2));  // Use Random value for updating Standard Cost.
      StandardCostWorksheet.MODIFY(TRUE);

      // Implement Standard Cost Changes on Standard Cost Worksheet.
      RunImplementStandardCostChangeReport(StdCostWorksheetName);
    END;

    LOCAL PROCEDURE UpdateAnalysisColumn@87(AnalysisArea@1002 : Option;AnalysisColumnTemplateName@1000 : Code[10]);
    VAR
      AnalysisColumn@1001 : Record 7118;
    BEGIN
      AnalysisColumn.SETRANGE("Analysis Area",AnalysisArea);
      AnalysisColumn.SETRANGE("Analysis Column Template",AnalysisColumnTemplateName);
      AnalysisColumn.FINDFIRST;
      UpdateAnalysisColumnFormula(AnalysisColumn,STRSUBSTNO(DivisionByZero,AnalysisColumn."Column No."));
    END;

    LOCAL PROCEDURE UpdateAnalysisColumnFormula@159(VAR AnalysisColumn@1000 : Record 7118;Formula@1001 : Code[80]);
    BEGIN
      AnalysisColumn.VALIDATE("Column Type",AnalysisColumn."Column Type"::Formula);
      AnalysisColumn.VALIDATE(Formula,Formula);
      AnalysisColumn.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCustomerDimension@41(VAR DefaultDimension@1006 : Record 352;CustomerNo@1002 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
      LibraryDimension@1001 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,CustomerNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateItemAnalysisView@108(Code@1000 : Code[10]);
    VAR
      ItemAnalysisViewList@1001 : TestPage 7151;
    BEGIN
      ItemAnalysisViewList.OPENEDIT;
      ItemAnalysisViewList.FILTER.SETFILTER(Code,Code);
      ItemAnalysisViewList."Codeunit Update Item Analysis View".INVOKE;
    END;

    LOCAL PROCEDURE UpdateItemDimension@140(VAR DefaultDimension@1006 : Record 352;ItemNo@1002 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
      LibraryDimension@1001 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@46(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.VALIDATE("Overhead Rate",LibraryRandom.RandDec(5,2));  // Use Random value for Overhead Rate.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorDimension@141(VAR DefaultDimension@1006 : Record 352;VendorNo@1002 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
      LibraryDimension@1001 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,VendorNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyIAnalysisReport@90(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;Amount@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('RowRefNo_AnlysLine',ItemNo);
      LibraryReportDataset.GetNextRow;
      AssertReportValue('ColumnValuesAsText1',Quantity);
      AssertReportValue('ColumnValuesAsText2',Amount);
    END;

    LOCAL PROCEDURE VerifyAnalysisReportForShowError@89(ItemNo@1000 : Code[20];ErrorText@1001 : Text[50]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('RowRefNo_AnlysLine',ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ColumnValuesAsText1',ErrorText);
    END;

    LOCAL PROCEDURE VerifyCostSharesBreakdownReport@53(ItemLedgerEntry@1000 : Record 32;MaterialDirectCost@1003 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('CostShareBufDocumentNo',ItemLedgerEntry."Document No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('CostShareBufNewQuantity',ItemLedgerEntry.Quantity);
      AssertReportValue('NewMatrl_PrintInvCstShrBuf',MaterialDirectCost);
    END;

    LOCAL PROCEDURE VerifyCostSharesBreakdownReportForInventory@126(DocumentNo@1000 : Code[20];Quantity@1001 : Decimal;MaterialDirectCost@1003 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange('CostShareBufDocumentNo',DocumentNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('CostShareBufNewQuantity',Quantity);
      AssertReportValue('NewMatrl_PrintInvCstShrBuf',MaterialDirectCost);
    END;

    LOCAL PROCEDURE VerifyItemAgeCompositionReport@18(ItemNo@1001 : Code[20];ExpectedValue@1005 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('InvtValue5_Item',ExpectedValue);
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@6(ItemJournalBatch@1001 : Record 233;ItemNo@1003 : Code[20];StandardCost@1000 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
      UnitCost@1004 : Decimal;
    BEGIN
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Item No.",ItemNo);
      UnitCost := ROUND(ItemJournalLine."Unit Cost (Revalued)");
      Assert.AreNearlyEqual(UnitCost,StandardCost,LibraryERM.GetAmountRoundingPrecision,ValueNotMatchedError);
    END;

    LOCAL PROCEDURE VerifyItemVendorCatalogReport@29(ItemVendor@1001 : Record 99);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Purchase_Price__Vendor_No__',ItemVendor."Vendor No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ItemVend__Vendor_Item_No__',ItemVendor."Vendor Item No.");
      LibraryReportDataset.AssertCurrentRowValue('Item__No__',ItemVendor."Item No.");
    END;

    LOCAL PROCEDURE VerifyItemBudgetReport@95(ItemNo@1000 : Code[20];CostAmount@1004 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ItemBudgetedAmount1',CostAmount);
    END;

    LOCAL PROCEDURE VerifyItemDimensionDetailReport@96(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;AmountElementName@1004 : Text;Amount@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('TempValueEntryItemNo',ItemNo);
      LibraryReportDataset.AssertElementWithValueExists(AmountElementName,Amount);
      WHILE LibraryReportDataset.GetNextRow DO
        LibraryReportDataset.AssertCurrentRowValue('TempValueEntryValuedQty',Quantity);
    END;

    LOCAL PROCEDURE VerifyItemDimensionTotalReport@115(DimensionCode@1000 : Code[20];Quantity@1001 : Decimal;Amount@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DimCode1',DimensionCode);
      LibraryReportDataset.GetNextRow;
      AssertReportValue('ColumnValuesAsText11',Quantity);
      AssertReportValue('ColumnValuesAsText21',Amount);
    END;

    LOCAL PROCEDURE VerifyInvtCostAndPriceListReport@65(ItemNo@1010 : Code[20]);
    VAR
      StockkeepingUnit@1000 : Record 5700;
      ItemAverageCost@1005 : Decimal;
    BEGIN
      ItemAverageCost := CalculateItemAverageCost;
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.FINDSET;
      LibraryReportDataset.LoadDataSetFile;

      REPEAT
        LibraryReportDataset.SetRange('LocationCode_StockKeepingUnit',StockkeepingUnit."Location Code");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('No_Item',StockkeepingUnit."Item No.");
        LibraryReportDataset.AssertCurrentRowValue('AverageCost_StockKeepingUnit',ItemAverageCost);
        Assert.IsFalse(LibraryReportDataset.GetNextRow,'More than one record found for ' + StockkeepingUnit."Location Code");
      UNTIL StockkeepingUnit.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPhysicalInventoryJournal@5(ItemJournalBatch@1002 : Record 233;PurchaseLine@1000 : Record 39);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch);
      ItemJournalLine.TESTFIELD("Item No.",PurchaseLine."No.");
      ItemJournalLine.TESTFIELD("Location Code",PurchaseLine."Location Code");
      ItemJournalLine.TESTFIELD("Bin Code",PurchaseLine."Bin Code");
    END;

    LOCAL PROCEDURE VerifyStatusReport@33(PurchaseLine@1001 : Record 39;DocumentNo@1000 : Code[20]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_ItemLedgerEntry',DocumentNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('No_Item',PurchaseLine."No.");
      LibraryReportDataset.AssertCurrentRowValue('RemainingQty',PurchaseLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('UnitCost',PurchaseLine."Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE VerifyAmountsOnInventoryCostToGL@174(ItemNo@1000 : Code[20]);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('InventoryCostPostedtoGLCaption',InventoryCostPostedToGLCap);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'InventoryCostPostedtoGLCaption',InventoryCostPostedToGLCap));
      WITH ValueEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        LibraryReportDataset.AssertCurrentRowValue('InvtAmt',"Cost Posted to G/L");
        LibraryReportDataset.AssertCurrentRowValue('DirCostAmt',-"Cost Posted to G/L");
      END;
    END;

    LOCAL PROCEDURE VerifyFieldsOnCostSharesBreakdownReport@151(DocumentNo@1000 : Code[20];Quantity@1001 : Decimal;MaterialDirectCost@1003 : Decimal;Revaluation@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      VerifyCostSharesBreakdownReportForInventory(DocumentNo,Quantity,MaterialDirectCost);
      AssertReportValue('NewReval_PrintInvCstShrBuf',Revaluation);
      AssertReportValue('TotalPrintInvtCostShareBuf',MaterialDirectCost + Revaluation);
    END;

    LOCAL PROCEDURE UpdateInventorySetupCostPosting@195();
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",FALSE);
      InventorySetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisDimSelectionLevelPageHandler@40(VAR AnalysisDimSelectionLevel@1000 : TestPage 7161);
    VAR
      AnalysisDimSelectionBuffer@1001 : Record 7158;
      Code@1002 : Variant;
      DimensionValue@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Code);
      LibraryVariableStorage.Dequeue(DimensionValue);
      AnalysisDimSelectionLevel.FILTER.SETFILTER(Code,Code);
      AnalysisDimSelectionLevel.Level.SETVALUE(AnalysisDimSelectionBuffer.Level::"Level 1");
      AnalysisDimSelectionLevel."Dimension Value Filter".SETVALUE(DimensionValue);
      AnalysisDimSelectionLevel.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE AnalysisRequestPageHandler@77(VAR AnalysisReport@1000 : TestRequestPage 7112);
    VAR
      AnalysisArea@1006 : Variant;
      AnalysisReportName@1005 : Variant;
      AnalysisLineName@1003 : Variant;
      AnalysisColumnName@1002 : Variant;
      DateFilter@1004 : Variant;
      ShowError@1009 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(AnalysisArea);
      LibraryVariableStorage.Dequeue(AnalysisReportName);
      LibraryVariableStorage.Dequeue(AnalysisLineName);
      LibraryVariableStorage.Dequeue(AnalysisColumnName);
      LibraryVariableStorage.Dequeue(DateFilter);
      LibraryVariableStorage.Dequeue(ShowError);
      AnalysisReport.AnalysisArea.SETVALUE(AnalysisArea);
      AnalysisReport.AnalysisReportName.SETVALUE(AnalysisReportName);
      AnalysisReport.AnalysisLineName.SETVALUE(AnalysisLineName);
      AnalysisReport.AnalysisColumnName.SETVALUE(AnalysisColumnName);
      AnalysisReport.DateFilter.SETVALUE(DateFilter);
      AnalysisReport.ShowError.SETVALUE(ShowError);

      AnalysisReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@3(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ImplementStandardCostChangePageHandler@2(VAR ImplementStandardCostChange@1000 : TestRequestPage 5855);
    VAR
      BatchName@1002 : Variant;
      TemplateName@1001 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(TemplateName);
      LibraryVariableStorage.Dequeue(BatchName);
      ImplementStandardCostChange.PostingDate.SETVALUE(WORKDATE);
      ImplementStandardCostChange.ItemJournalTemplate.SETVALUE(TemplateName);
      ImplementStandardCostChange.ItemJournalBatchName.SETVALUE(BatchName);
      ImplementStandardCostChange.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ItemBudgetRequestPageHandler@91(VAR ItemBudget@1000 : TestRequestPage 7130);
    VAR
      FileName@1001 : Variant;
      AnalysisArea@1006 : Variant;
      ItemBudgetName@1005 : Variant;
      ShowValueAs@1003 : Variant;
      StartingDate@1002 : Variant;
      ShowAmount@1004 : Variant;
    BEGIN
      // Dequeue variable.
      LibraryVariableStorage.Dequeue(AnalysisArea);
      LibraryVariableStorage.Dequeue(ItemBudgetName);
      LibraryVariableStorage.Dequeue(ShowValueAs);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(ShowAmount);
      LibraryVariableStorage.Dequeue(FileName);

      ItemBudget.AnalysisArea.SETVALUE(AnalysisArea);
      ItemBudget.ItemBudgetFilterCtrl.SETVALUE(ItemBudgetName);
      ItemBudget.ShowValueAs.SETVALUE(ShowValueAs);
      ItemBudget.StartingDate.SETVALUE(StartingDate);
      ItemBudget.AmountsInWhole1000s.SETVALUE(ShowAmount);
      ItemBudget.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemDimensionTotalRequestPageHandler@31(VAR ItemDimensionsTotal@1000 : TestRequestPage 7151);
    VAR
      AnalysisArea@1006 : Variant;
      AnaysisViewCode@1005 : Variant;
      ColumnTemplate@1003 : Variant;
      DateFilter@1001 : Variant;
      SetValueVariant@1004 : Variant;
      SetValue@1002 : 'IncludeDimension,NotIncludeDimension';
      SetValue2@1007 : Option;
    BEGIN
      // Dequeue variable.
      LibraryVariableStorage.Dequeue(SetValueVariant);
      LibraryVariableStorage.Dequeue(AnalysisArea);
      LibraryVariableStorage.Dequeue(AnaysisViewCode);
      LibraryVariableStorage.Dequeue(ColumnTemplate);
      LibraryVariableStorage.Dequeue(DateFilter);
      ItemDimensionsTotal.AnalysisArea.SETVALUE(AnalysisArea);
      ItemDimensionsTotal.AnalysisViewCode.SETVALUE(AnaysisViewCode);
      ItemDimensionsTotal.ColumnTemplate.SETVALUE(ColumnTemplate);
      ItemDimensionsTotal.DateFilter.SETVALUE(DateFilter);
      SetValue2 := SetValueVariant;
      IF SetValue2 = SetValue::IncludeDimension THEN
        ItemDimensionsTotal.IncludeDimensions.ASSISTEDIT;

      ItemDimensionsTotal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemDimensionDetailRequestPageHandler@70(VAR ItemDimensionsDetail@1000 : TestRequestPage 7150);
    VAR
      AnalysisArea@1006 : Variant;
      AnaysisViewCode@1005 : Variant;
      DateFilter@1001 : Variant;
      SetValueVariant@1004 : Variant;
      SetValue@1002 : 'IncludeDimension,NotIncludeDimension';
      SetValue2@1007 : Option;
    BEGIN
      // Dequeue variable.
      LibraryVariableStorage.Dequeue(SetValueVariant);
      LibraryVariableStorage.Dequeue(AnalysisArea);
      LibraryVariableStorage.Dequeue(AnaysisViewCode);
      LibraryVariableStorage.Dequeue(DateFilter);
      ItemDimensionsDetail.AnalysisArea.SETVALUE(AnalysisArea);
      ItemDimensionsDetail.AnalysisViewCode.SETVALUE(AnaysisViewCode);

      ItemDimensionsDetail.DateFilterCtrl.SETVALUE(DateFilter);
      SetValue2 := SetValueVariant;
      IF SetValue2 = SetValue::IncludeDimension THEN
        ItemDimensionsDetail.IncludeDimensions.ASSISTEDIT;

      ItemDimensionsDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemDimensionTotalPageHandlerForColumnTemplate@25(VAR ItemDimensionsTotal@1000 : TestRequestPage 7151);
    VAR
      AnalysisArea@1006 : Variant;
      AnaysisViewCode@1005 : Variant;
      ColumnTemplate@1003 : Variant;
      DateFilter@1001 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(AnalysisArea);
      LibraryVariableStorage.Dequeue(AnaysisViewCode);
      LibraryVariableStorage.Dequeue(ColumnTemplate);
      LibraryVariableStorage.Dequeue(DateFilter);

      ItemDimensionsTotal.AnalysisArea.SETVALUE(AnalysisArea);
      ItemDimensionsTotal.AnalysisViewCode.SETVALUE(AnaysisViewCode);
      ItemDimensionsTotal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@13(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      OptionValue@1001 : Variant;
      OptionString@1003 : 'AssignSerialNo,SelectEntries';
      TrackingOption@1002 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        OptionString::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@26(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      SerialNo@1001 : Variant;
      Iteration@1002 : Variant;
      Count@1003 : Integer;
      IterationCount@1004 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(Iteration);  // Dequeue variable.
      IterationCount := Iteration;  // To convert Variant into Integer.
      ItemTrackingSummary.FIRST;
      FOR Count := 1 TO IterationCount DO BEGIN
        LibraryVariableStorage.Dequeue(SerialNo);  // Dequeue variable.
        ItemTrackingSummary."Serial No.".ASSERTEQUALS(SerialNo);
        ItemTrackingSummary.NEXT;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@100(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@51(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.Post.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE StatusRequestPageHandler@24(VAR Status@1000 : TestRequestPage 706);
    VAR
      Date@1002 : Variant;
      Name@1001 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(Date);
      LibraryVariableStorage.Dequeue(Name);
      Status.StatusDate.SETVALUE(Date);
      Status.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [PageHandler]
    PROCEDURE EditAnalysisReportRequestPageHandler@121(VAR InventoryAnalysisReport@1000 : TestPage 7119);
    BEGIN
      COMMIT;  // Due to limitation in Page testability Commit is required for this Test case.
      InventoryAnalysisReport.ShowMatrix.INVOKE;  // Show Matrix page Handled by InventoryAnalysisMatrixRequestPageHandler.
    END;

    [PageHandler]
    PROCEDURE SetAnalysisReportRequestFilterPageHandler@152(VAR InventoryAnalysisReport@1000 : TestPage 7119);
    VAR
      SourceNoFilter@1001 : Text;
    BEGIN
      InventoryAnalysisReport.CurrentSourceTypeFilter.SETVALUE(LibraryVariableStorage.DequeueInteger);
      SourceNoFilter := LibraryVariableStorage.DequeueText;
      InventoryAnalysisReport.CurrentSourceTypeNoFilter.SETVALUE(SourceNoFilter);

      LibraryVariableStorage.Enqueue(SourceNoFilter); // Value will be verified in InventoryAnalysisMatrixVerifyFilterPageHandler
      InventoryAnalysisReport.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InventoryAnalysisMatrixRequestPageHandler2@147(VAR InventoryAnalysisMatrix@1000 : TestPage 9201);
    VAR
      ReferenceNumber@1002 : Variant;
      FormattedValue@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ReferenceNumber);
      LibraryVariableStorage.Dequeue(FormattedValue);
      InventoryAnalysisMatrix.FILTER.SETFILTER("Row Ref. No.",ReferenceNumber);
      InventoryAnalysisMatrix.Field1.ASSERTEQUALS(FormattedValue);
    END;

    [ModalPageHandler]
    PROCEDURE InventoryAnalysisMatrixPageHandler@149(VAR InventoryAnalysisMatrix@1000 : TestPage 9201);
    BEGIN
      InventoryAnalysisMatrix.Field1.DRILLDOWN;
    END;

    [ModalPageHandler]
    PROCEDURE InventoryAnalysisMatrixVerifyFilterPageHandler@143(VAR InventoryAnalysisMatrix@1000 : TestPage 9201);
    BEGIN
      Assert.AreEqual(
        LibraryVariableStorage.DequeueText,InventoryAnalysisMatrix.FILTER.GETFILTER("Source No. Filter"),WrongSourceFilterErr);
    END;

    [MessageHandler]
    PROCEDURE VerifyDrillDownMessageHandler@157(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,IncorrectExpectedMessageErr);
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,IncorrectExpectedMessageErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1173(Message@1170 : Text[1024];VAR Reply@1171 : Boolean);
    VAR
      ExpectedMessage@1172 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE ItemAgeCompositionValueRequestPageHandler@185(VAR ItemAgeCompositionValue@1174 : TestRequestPage 5808);
    VAR
      EndingDate@1000 : Variant;
      PeriodLength@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(EndingDate);
      LibraryVariableStorage.Dequeue(PeriodLength);

      ItemAgeCompositionValue.EndingDate.SETVALUE(EndingDate);
      ItemAgeCompositionValue.PeriodLength.SETVALUE(PeriodLength);
      ItemAgeCompositionValue.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemVendorCatalogRequestPageHandler@187(VAR ItemVendorCatalog@1174 : TestRequestPage 720);
    BEGIN
      ItemVendorCatalog.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostSharesBreakdownRequestPageHandler@189(VAR CostSharesBreakdown@1174 : TestRequestPage 5848);
    VAR
      StartDate@1000 : Variant;
      EndDate@1001 : Variant;
      CostSharesPrint@1002 : Variant;
      ShowDetails@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(EndDate);
      LibraryVariableStorage.Dequeue(CostSharesPrint);
      LibraryVariableStorage.Dequeue(ShowDetails);

      CostSharesBreakdown.Control5.SETVALUE(StartDate);
      CostSharesBreakdown.Control3.SETVALUE(EndDate);
      CostSharesBreakdown.Control1.SETVALUE(CostSharesPrint);
      CostSharesBreakdown.Control9.SETVALUE(ShowDetails);
      CostSharesBreakdown.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtCostAndPriceListRequestPageHandler@190(VAR InventoryCostAndPriceList@1174 : TestRequestPage 716);
    VAR
      UseStockkeepingUnit@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(UseStockkeepingUnit);

      InventoryCostAndPriceList.Control1.SETVALUE(UseStockkeepingUnit);
      InventoryCostAndPriceList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesPageHandler@118(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE PostInventoryCostToGLRequestPageHandler@133(VAR PostInventoryCostToGL@1000 : TestRequestPage 1002);
    BEGIN
      PostInventoryCostToGL.PostMethod.SETVALUE(FORMAT(PostInventoryCostToGL.PostMethod.GETOPTION(2)));
      PostInventoryCostToGL.DocumentNo.SETVALUE('');
      PostInventoryCostToGL.Post.SETVALUE(TRUE);
      PostInventoryCostToGL.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesPageHandler@210(VAR BOMCostShares@1000 : TestPage 5872);
    VAR
      RolledupMaterialCost@1001 : Variant;
      ItemNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(RolledupMaterialCost);
      LibraryVariableStorage.Dequeue(ItemNo);
      BOMCostShares.EXPAND(TRUE);
      BOMCostShares.NEXT;
      BOMCostShares."No.".ASSERTEQUALS(ItemNo);
      BOMCostShares.HasWarning.ASSERTEQUALS(TRUE);
      BOMCostShares."Rolled-up Material Cost".ASSERTEQUALS(RolledupMaterialCost);

      // Verify no component item expanded.
      BOMCostShares.EXPAND(TRUE);
      Assert.IsFalse(BOMCostShares.NEXT,STRSUBSTNO(ExpandBOMErr,ItemNo));
      BOMCostShares.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [SCM]
      Test for Inventory Reports:
       1. Verify Value Entry after posting Sales Order.
       2. Verify Item Age Composition Report after posting Sales Order.
       3. Verify creation of Revaluation Journal Lines using Standard Cost Worksheet.
       4. Verify updated Standard Cost on Item when Cost is updated using Standard Cost Worksheet.
       5. Verify available Serial Nos on Physical Inventory Journal after calculating Inventory.
       6. Verify Status report for blank Status Date.
       7. Verify Status Report after posting Purchase Order.
       8. Verify Item Vendor Catalog report.
       9. Verify error on Item Dimension Total report for blank Analysis View Code.
      10. Verify error on Item Dimension Total report for blank Column Template.
      11. Verify error on Item Dimension Total report for blank Date Filter.
      12. Verify Item Dimension Total report for Inventory Analysis Area.
      13. Verify Item Dimension Total report for Sales Analysis Area.
      14. Verify Item Dimension Total report for Purchase Analysis Area.
      15. Verify Cost Shares Breakdown report for Sale.
      16. Verify Cost Shares Breakdown report for Inventory.
      17. Verify Cost Shares Breakdown report for WIP Inventory.
      18. Verify Cost Shares Breakdown report in detail.
      19. Verify error on Item Budget report for blank Starting Date.
      20. Verify Item Budget report for Sales Analysis Area.
      21. Verify Item Budget report for Purchase Analysis Area.
      22. Verify Item Budget report with Whole Amount in 1000s True.
      23. Verify error on Item Dimension Detail report for blank Analysis View Code.
      24. Verify error on Item Dimension Detail report for blank Date Filter.
      25. Verify Item Dimension Detail report for Inventory Analysis Area.
      26. Verify Item Dimension Detail report for Sales Analysis Area.
      27. Verify Item Dimension Detail report for Purchase Analysis Area.
      28. Verify Unit Cost of Item with Average Cost.
      29. Verify Analysis report for blank Analysis Line Template.
      30. Verify Analysis report for blank Analysis Column Template.
      31. Verify Analysis report for blank Date Filter.
      32. Verify Analysis report for Purchase Analysis Area.
      33. Verify Analysis report for Sales Analysis Area.
      34. Verify Analysis report for Inventory Analysis Area.
      35. Verify Analysis report for Show error as Division by Zero.
      36. Verify Analysis report for Show error as Period error.
      37. Verify Analysis report for Show Matrix when Show Error as Division by Zero.
      38. Verify Cost Shares Breakdown report for Inventory when there are different kind types of transaction.
      39. Verify Cost Shares Breakdown report for Inventory when Item with different Unit Cost is not enough on inventory.
      40. Verify Inventory Cost Posted to GL Caption with Inventory Amount exist on generated report.
      41. Verify Cost Shares Breakdown report for Inventory with doing partial Revaluation.
      42. Verify Cost Shares Breakdown report for Inventory with doing Revaluation for Transfered Quantity.
      43. Verify report BOM Cost Shares should not account for cost from Prod. BOM components if this is a Purchase item.

      Covers Test cases: for WI - 243256
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      ValueEntryAfterPostingSalesOrder,ItemAgeCompositionReportAfterPostingSalesOrder,
      RevaluationJournalLinesUsingStdCostWorksheet,StandardCostUpdationUsingStdCostWorksheet         232419

      Covers Test cases: for WI - 243261
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      PhysicalInventoryJournalWithSerialNo                                                           142539

      Covers Test cases: for WI - 295269
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      StatusReportWithDateError,StatusReportAfterPostingPurchaseOrder                                135461

      Covers Test cases: for WI - 295795
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      ItemVendorCatalogReport                                                                        139413
      ItemDimensionTotalAnalysisViewCodeError, ItemDimensionTotalColumnTemplateError,
      ItemDimensionTotalReportDateFilterError,ItemDimensionTotalReportWithInventoryAnalysisArea,
      ItemDimensionTotalReportWithSalesAnalysisArea,ItemDimensionTotalReportWithPurchaseAnalysisArea 139547

      Covers Test cases: for WI - 294462
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      CostSharesBreakdownReportForSale, CostSharesBreakdownReportForInventory,
      CostSharesBreakdownReportForWIPInventory, CostSharesBreakdownReportInDetail                    139515

      Covers Test cases: for WI - 298159
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      ItemBudgetReportStartingDateError,ItemBudgetReportWithPurchAnalysisArea,
      ItemBudgetReportWithSalesAnalysisArea,ItemBudgetReportWithWholeAmountOptionTrue                139545
      ItemDimDetailReportAnalysisViewCodeError,ItemDimDetailReportDateFilterError,
      ItemDimDetailReportWithSalesAnalysisArea,ItemDimDetailReportWithInvtAnalysisArea,
      ItemDimDetailReportWithPurchAnalysisArea                                                       139546

      Covers Test cases: for WI - 295146
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      InvtCostAndPriceListUsingSKUTrue                                                               127687

      Covers Test cases: for WI - 299168
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      AnalysisReportAnalysisLineTemplateError,AnalysisReportAnalysisColumnTemplateError,
      AnalysisReportDateFilterError,AnalysisReportWithPurchaseAnalysisArea,
      AnalysisReportWithSalesAnalysisArea,AnalysisReportWithInventoryAnalysisArea,
      AnalysisReportShowErrorDivisionByZero,AnalysisReportShowErrorPeriodError                       139544

      Covers Test cases: for Bug ID - 315603
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      AnalysisReportWithShowMartrixError                                                             307811

      Covers Test cases: for Bug ID - 340461
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      CostSharesBreakdownReportForInventoryWithDifferentTransaction                                  340461
      CostSharesBreakdownReportForInventoryWithDebtInventory                                         340461

      Covers Test cases: for Bug ID - 52472
      ------------------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ------------------------------------------------------------------------------------
      InvAmountOnPostInventoryCostToGLTestReport

      Covers Test cases: for Bug ID - 53677
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      CostSharesBreakdownReportForInventoryWithPartialRevaluation
      CostSharesBreakdownReportForInventoryWithRevaluationForTransferQty

      Covers Test cases: for Merge bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      BOMCostSharesWithMultipleProdBOMLevels                                                         97722

      Covers Test cases: for Merge bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      AnalysisReportWithFormatPrecision                                                              .....
    }
    END.
  }
}

