OBJECT Codeunit 134336 ERM Purch. Doc. Reports - II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1004 : Codeunit 131300;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryReportDataset@1020 : Codeunit 131007;
      LibraryRandom@1002 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      WarningText@1014 : TextConst 'ENU=The documents are not listed according to Posting Date because they were not entered in that order.';

    [Test]
    [HandlerFunctions(VendorLabelReportRequestPageHandler)]
    PROCEDURE VendorLabel36x70mm3Columns@16();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Vendor Label Report with Label Format 36 x 70 mm (3 columns).
      Initialize;
      VendorLabelReport(LabelFormat::"36 x 70 mm (3 columns)",3);
    END;

    [Test]
    [HandlerFunctions(VendorLabelReportRequestPageHandler)]
    PROCEDURE VendorLabel37x70mm3Columns@28();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Vendor Label Report with Label Format 37 x 70 mm (3 columns).
      Initialize;
      VendorLabelReport(LabelFormat::"37 x 70 mm (3 columns)",3);
    END;

    [Test]
    [HandlerFunctions(VendorLabelReportRequestPageHandler)]
    PROCEDURE VendorLabel36x105mm2Columns@33();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Vendor Label Report with Label Format 36 x 105 mm (2 columns).
      Initialize;
      VendorLabelReport(LabelFormat::"36 x 105 mm (2 columns)",2);
    END;

    [Test]
    [HandlerFunctions(VendorLabelReportRequestPageHandler)]
    PROCEDURE VendorLabel37x105mm2Columns@31();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Vendor Label Report with Label Format 37 x 105 mm (2 columns).
      Initialize;
      VendorLabelReport(LabelFormat::"37 x 105 mm (2 columns)",2);
    END;

    LOCAL PROCEDURE VendorLabelReport@36(LabelFormat@1014 : Option;NumberOfColumns@1000 : Integer);
    VAR
      Vendor@1003 : Record 23;
      Vendor2@1015 : Record 23;
      Vendor3@1016 : Record 23;
      VendorLabels@1001 : Report 310;
    BEGIN
      // Setup: Create Three Vendor with Complete Address.
      Initialize;
      CreateVendorWithAddress(Vendor);
      CreateVendorWithAddress(Vendor2);
      CreateVendorWithAddress(Vendor3);

      // Exercise.
      COMMIT;
      CLEAR(VendorLabels);
      Vendor.SETFILTER("No.",'%1|%2|%3',Vendor."No.",Vendor2."No.",Vendor3."No.");
      VendorLabels.SETTABLEVIEW(Vendor);
      VendorLabels.InitializeRequest(LabelFormat);
      VendorLabels.RUN;

      // Verify: Verify All Vendor with Different Label Format.
      LibraryReportDataset.LoadDataSetFile;
      VerifyLabels(Vendor,1,NumberOfColumns);
      VerifyLabels(Vendor2,2,NumberOfColumns);
      VerifyLabels(Vendor3,3,NumberOfColumns);
    END;

    [Test]
    [HandlerFunctions(PurchaseInvoiceNosReportRequestPageHandler)]
    PROCEDURE PurchaseInvoiceNos@54();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Purchase Invoice Nos. Report.

      // Setup.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);

      // Exercise.
      SavePurchaseInvoiceNosReport(DocumentNo,DocumentNo);

      // Verify.
      VerifyPurchaseInvoiceNosReport(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PurchaseInvoiceNosReportRequestPageHandler)]
    PROCEDURE PurchaseInvoiceNosWarning@51();
    VAR
      PurchaseHeader@1004 : Record 38;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1006 : Code[20];
    BEGIN
      // Check Warning on Purchase Invoice Nos. Report.

      // Setup: Create and Post two Purchase Invoices on different Posting Dates. Take second Posting Date lesser than first
      // Invoice Posting Date to generate warning on Report. Take random difference between Dates.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);
      DocumentNo2 := UpdateAndPostPurchaseDocument(PurchaseHeader."Document Type"::Invoice);

      // Exercise.
      SavePurchaseInvoiceNosReport(DocumentNo,DocumentNo2);

      // Verify: Check Warnings on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',FORMAT(WarningText));
    END;

    [Test]
    [HandlerFunctions(PurchaseCrMemoNosReportRequestPageHandler)]
    PROCEDURE PurchaseCrMemoNos@50();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Purchase Credit Memo Nos. Report.

      // Setup.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise.
      SavePurchCreditMemoNosReport(DocumentNo,DocumentNo);

      // Verify.
      VerifyPurchCreditMemoNosReport(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PurchaseCrMemoNosReportRequestPageHandler)]
    PROCEDURE PurchaseCrMemoNosWarning@49();
    VAR
      PurchaseHeader@1004 : Record 38;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1006 : Code[20];
    BEGIN
      // Check Warning on Purchase Credit Memo Nos. Report.

      // Setup: Create and Post two Purchase Credit Memo on different Posting Dates. Take second Posting Date lesser than first
      // Credit Memo Posting Date to generate warning on Report. Take random difference between Dates.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");
      DocumentNo2 := UpdateAndPostPurchaseDocument(PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise.
      SavePurchCreditMemoNosReport(DocumentNo,DocumentNo2);

      // Verify: Verify Warning Message on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',FORMAT(WarningText));
    END;

    [Test]
    [HandlerFunctions(VendorDocumentNosReportRequestPageHandler)]
    PROCEDURE VendorDocumentNos@48();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Vendor Document Nos. Report.

      // Setup.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // Exercise.
      SaveVendorDocumentsNosReport(DocumentNo,DocumentNo);

      // Verify.
      VerifyVendorDocumentsNosReport(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VendorDocumentNosReportRequestPageHandler)]
    PROCEDURE VendorDocumentNosWarning@45();
    VAR
      PurchaseHeader@1004 : Record 38;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1006 : Code[20];
    BEGIN
      // Check Warning Message on Vendor Document Nos. Report.

      // Setup: Create and Post two Purchase Invoice on different Posting Dates. Take second Posting Date lesser than first
      // Invoice Posting Date to generate warning on Report. Take random difference between Dates.
      Initialize;
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);
      DocumentNo2 := UpdateAndPostPurchaseDocument(PurchaseHeader."Document Type"::Invoice);

      // Exercise:
      SaveVendorDocumentsNosReport(DocumentNo,DocumentNo2);

      // Verify: Verify Warning Message on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',FORMAT(WarningText));
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));   // Using RANDOM value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@66(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option) DocumentNo : Code[20];
    BEGIN
      // Create a Purchase Document Without Currency.
      CreatePurchaseDocument(PurchaseHeader,DocumentType,CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@112(VAR PurchaseHeader@1002 : Record 38;DocumentType@1001 : Option;ItemNo@1004 : Code[20];CurrencyCode@1000 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Use Random Value.
    END;

    LOCAL PROCEDURE CreateVendor@94() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithAddress@37(VAR Vendor@1000 : Record 23);
    VAR
      PostCode@1003 : Record 225;
      CountryRegion@1001 : Record 9;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);  // Creation of Post Code is required to avoid special characters in existing ones.
      CountryRegion.FINDFIRST;
      Vendor.GET(CreateVendor);
      Vendor.VALIDATE(
        Address,COPYSTR(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Address),DATABASE::Vendor),1,
          LibraryUtility.GetFieldLength(DATABASE::Vendor,Vendor.FIELDNO(Address))));
      Vendor.VALIDATE(
        "Address 2",COPYSTR(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Address 2"),DATABASE::Vendor),1,
          LibraryUtility.GetFieldLength(DATABASE::Vendor,Vendor.FIELDNO("Address 2"))));
      Vendor.VALIDATE("Country/Region Code",CountryRegion.Code);
      Vendor.VALIDATE("Post Code",PostCode.Code);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SavePurchaseInvoiceNosReport@57(No@1000 : Code[20];No2@1001 : Code[20]);
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchaseInvoiceNos@1002 : Report 324;
    BEGIN
      PurchInvHeader.SETFILTER("No.",'%1|%2',No,No2);
      CLEAR(PurchaseInvoiceNos);
      PurchaseInvoiceNos.SETTABLEVIEW(PurchInvHeader);
      PurchaseInvoiceNos.RUN;
    END;

    LOCAL PROCEDURE SavePurchCreditMemoNosReport@62(No@1000 : Code[20];No2@1001 : Code[20]);
    VAR
      PurchCrMemoHdr@1003 : Record 124;
      PurchaseCreditMemoNos@1002 : Report 325;
    BEGIN
      PurchCrMemoHdr.SETFILTER("No.",'%1|%2',No,No2);
      CLEAR(PurchaseCreditMemoNos);
      PurchaseCreditMemoNos.SETTABLEVIEW(PurchCrMemoHdr);
      PurchaseCreditMemoNos.RUN;
    END;

    LOCAL PROCEDURE SaveVendorDocumentsNosReport@60(DocumentNo@1000 : Code[20];DocumentNo2@1001 : Code[20]);
    VAR
      VendorLedgerEntry@1003 : Record 25;
      VendorDocumentNos@1002 : Report 328;
    BEGIN
      VendorLedgerEntry.SETFILTER("Document No.",'%1|%2',DocumentNo,DocumentNo2);
      CLEAR(VendorDocumentNos);
      VendorDocumentNos.SETTABLEVIEW(VendorLedgerEntry);
      VendorDocumentNos.RUN;
    END;

    LOCAL PROCEDURE UpdateAndPostPurchaseDocument@70(DocumentType@1001 : Option) DocumentNo : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Take Posting Date Earlier than Workdate.
      CreatePurchaseDocument(PurchaseHeader,DocumentType,CreateItem,'');
      PurchaseHeader.VALIDATE(
        "Posting Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'M>',PurchaseHeader."Posting Date"));
      PurchaseHeader.MODIFY(TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE VerifyLabels@42(Vendor@1000 : Record 23;Index@1005 : Integer;NumberOfColumns@1006 : Integer);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
      Column@1007 : Integer;
    BEGIN
      Column := ((Index - 1) MOD NumberOfColumns) + 1;
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('VendAddr_%1__1_',Column),Vendor."No.");
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('VendAddr_%1__2_',Column),Vendor.Address);
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('VendAddr_%1__3_',Column),Vendor."Address 2");

      CountryRegion.GET(Vendor."Country/Region Code");
      FormatAddress.FormatPostCodeCity(PostCodeCity,County,Vendor.City,Vendor."Post Code",Vendor.County,CountryRegion.Code);

      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('VendAddr_%1__4_',Column),PostCodeCity);
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('VendAddr_%1__5_',Column),CountryRegion.Name);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceNosReport@103(No@1001 : Code[20]);
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.GetNextRow;

      PurchInvHeader.GET(No);
      LibraryReportDataset.AssertCurrentRowValue('PurchInvHeader__Pay_to_Vendor_No__',PurchInvHeader."Pay-to Vendor No.");
      LibraryReportDataset.AssertCurrentRowValue('PurchInvHeader__Source_Code_',PurchInvHeader."Source Code");
      LibraryReportDataset.AssertCurrentRowValue('PurchInvHeader__Pay_to_Name_',PurchInvHeader."Pay-to Name");
    END;

    LOCAL PROCEDURE VerifyPurchCreditMemoNosReport@61(No@1001 : Code[20]);
    VAR
      PurchCrMemoHdr@1000 : Record 124;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.GetNextRow;

      PurchCrMemoHdr.GET(No);
      LibraryReportDataset.AssertCurrentRowValue('PurchCrMemoHeader__Pay_to_Vendor_No__',PurchCrMemoHdr."Pay-to Vendor No.");
      LibraryReportDataset.AssertCurrentRowValue('PurchCrMemoHeader__Source_Code_',PurchCrMemoHdr."Source Code");
      LibraryReportDataset.AssertCurrentRowValue('PurchCrMemoHeader__Pay_to_Name_',PurchCrMemoHdr."Pay-to Name");
    END;

    LOCAL PROCEDURE VerifyVendorDocumentsNosReport@59(DocumentNo@1001 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.GetNextRow;

      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;

      LibraryReportDataset.AssertCurrentRowValue('VendLedgerEntry__Vendor_No__',VendorLedgerEntry."Vendor No.");
      LibraryReportDataset.AssertCurrentRowValue('VendLedgerEntry__Source_Code_',VendorLedgerEntry."Source Code");
      LibraryReportDataset.AssertCurrentRowValue('VendLedgerEntry__Document_No__',VendorLedgerEntry."Document No.");
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@56(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE VendorLabelReportRequestPageHandler@117(VAR VendorLabels@1000 : TestRequestPage 310);
    BEGIN
      VendorLabels.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PurchaseInvoiceNosReportRequestPageHandler@118(VAR PurchaseInvoiceNos@1000 : TestRequestPage 324);
    BEGIN
      PurchaseInvoiceNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PurchaseCrMemoNosReportRequestPageHandler@119(VAR PurchaseCrMemoNos@1000 : TestRequestPage 325);
    BEGIN
      PurchaseCrMemoNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE VendorDocumentNosReportRequestPageHandler@120(VAR VendorDocumentNos@1000 : TestRequestPage 328);
    BEGIN
      VendorDocumentNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Purchase]
      Test - Various Purchase Reports.
      1. Check Vendor Label Report with Label Format 36 x 70 mm (3 columns).
      2. Check Vendor Label Report with Label Format 37 x 70 mm (3 columns).
      3. Check Vendor Label Report with Label Format 36 x 105 mm (2 columns).
      4. Check Vendor Label Report with Label Format 37 x 105 mm (2 columns).
      5. Check Purchase Invoice Nos. Report with default values and With Warning Message.
      6. Check Purchase Credit Memo Nos. Report with default values and With Warning Message.
      7. Check Vendor Document Nos. Report with default values and with Warning Message.

      Covers Test Cases for WI - 245240
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      VendorLabel36x70mm3Columns,VendorLabel37x70mm3Columns               139578
      VendorLabel36x105mm2Columns,VendorLabel37x105mm2Columns

      Covers Test cases for WI - 245253
      -------------------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      -------------------------------------------------------------------------------------
      PurchaseInvoiceNos, PurchaseInvoiceNosWarning                       139339
      PurchaseCrMemoNos, PurchaseCrMemoNosWarning                         139340
      VendorDocumentNos, VendorDocumentNosWarning                         139341
    }
    END.
  }
}

