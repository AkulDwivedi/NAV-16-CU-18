OBJECT Codeunit 137916 SCM Assembly Reservation I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=VAR
            MfgSetup@1000 : Record 99000765;
          BEGIN
            MfgSetup.GET;
            WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
          END;

  }
  CODE
  {
    VAR
      LibraryAssembly@1005 : Codeunit 132207;
      LibraryInventory@1117 : Codeunit 132201;
      LibrarySales@1001 : Codeunit 130509;
      Assert@1002 : Codeunit 130000;
      WorkDate2@1004 : Date;
      Initialized@1003 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@29();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ReservationPage,AvailToReservePage)]
    PROCEDURE TestAsmHeaderItemLedEntries@1();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
    BEGIN
      Initialize;
      CreateItem(ParentItem);
      CreateItem(ChildItem);
      AddItemToInventory(ChildItem,1);
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,ParentItem."No.",'',1,'');
      LibraryAssembly.CreateAssemblyLine(AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,ChildItem."No.",'',1,1,'');

      AssemblyLine.ShowReservation;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPage@4(VAR Reservation@1000 : TestPage 498);
    BEGIN
      COMMIT;
      Reservation.AvailableToReserve.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailToReservePage@5(VAR AvailableItemLedgEntries@1000 : TestPage 504);
    BEGIN
      AvailableItemLedgEntries.FIRST;

      Assert.IsTrue(AvailableItemLedgEntries."Entry Type".VALUE = 'Positive Adjmt.',
        'AvailableItemLedgEntries wrong entry type');
    END;

    [Test]
    [HandlerFunctions(ReservationPage,AvailToReserveAsmHeaderPage)]
    PROCEDURE TestAsmHeaderFromSalesLine@2();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
    BEGIN
      Initialize;
      CreateItem(ParentItem);
      CreateItem(ChildItem);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipment Date",WorkDate2);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ParentItem."No.",916);

      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,ParentItem."No.",'',916,'');
      LibraryAssembly.CreateAssemblyLine(AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,ChildItem."No.",'',916,1,'');

      SalesLine.ShowReservation;
    END;

    [ModalPageHandler]
    PROCEDURE AvailToReserveAsmLinePage@9(VAR AvailableAsmLinesPage@1000 : TestPage 926);
    BEGIN
      AvailableAsmLinesPage.FIRST;

      Assert.IsTrue(AvailableAsmLinesPage."Remaining Quantity".VALUE = '917',
        'AvailableAsmLinesPage wrong Remaining Quantity');
    END;

    LOCAL PROCEDURE CreateItem@10(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE AddItemToInventory@3(Item@1000 : Record 27;Qty@1001 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournalTemplate@1003 : Record 82;
      ItemJournalBatch@1004 : Record 233;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      ItemJournalBatch.SETRANGE("Template Type",ItemJournalBatch."Template Type"::Item);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(ReservationPage,AvailToReserveAsmLinePage)]
    PROCEDURE TestAsmLineFromPurchaseLine@6();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1009 : Record 39;
      LibraryPurchase@1401 : Codeunit 130512;
    BEGIN
      Initialize;
      CreateItem(ParentItem);
      CreateItem(ChildItem);
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,ParentItem."No.",'',917,'');
      LibraryAssembly.CreateAssemblyLine(AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,ChildItem."No.",'',917,1,'');

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ChildItem."No.",917);

      AssemblyLine."Due Date" := CALCDATE('<3D>',PurchaseLine."Expected Receipt Date");
      AssemblyLine.MODIFY;
      PurchaseLine.ShowReservation;
    END;

    [ModalPageHandler]
    PROCEDURE AvailToReserveAsmHeaderPage@8(VAR AvailableAsmHeadersPage@1000 : TestPage 925);
    BEGIN
      AvailableAsmHeadersPage.FIRST;
      Assert.IsTrue(AvailableAsmHeadersPage."Remaining Quantity".VALUE = '916',
        'AvailableAsmHeadersPage wrong Remaining Quantity');
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Reservation] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      US: Unable to Execute
    }
    END.
  }
}

