OBJECT Codeunit 134386 ERM Sales Documents II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryCosting@1014 : Codeunit 132200;
      LibraryERM@1007 : Codeunit 131300;
      LibraryAssembly@1028 : Codeunit 132207;
      LibrarySales@1002 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1022 : Codeunit 131004;
      LibraryInventory@1055 : Codeunit 132201;
      LibraryUtility@1023 : Codeunit 131000;
      LibrarySetupStorage@1026 : Codeunit 131009;
      LibraryService@1027 : Codeunit 131902;
      isInitialized@1000 : Boolean;
      AmountErr@1008 : TextConst '@@@="%1 = Field Name, %2 = Amount, %3 = Table Name";ENU=%1 must be %2 in %3.';
      PostingErr@1004 : TextConst 'ENU=There is nothing to post.';
      UnknownErr@1003 : TextConst 'ENU=Unknown error.';
      EditableErr@1011 : TextConst '@@@="%1 = Control Name";ENU=%1 should not be editable.';
      InvoiceDiscountErr@1017 : TextConst '@@@="%1 = Control Name, %2 = Amount";ENU=%1 must be %2.';
      SalesDocumentFoundErr@1013 : TextConst '@@@="%1 = Table Name, %2 = Document No.";ENU=%1 must not exist for order No %2.';
      SalesInvoiceMustBeDeletedErr@1021 : TextConst 'ENU=Sales Invoice must be deleted.';
      BlankSellToCustomerFieldErr@1025 : TextConst 'ENU=Sell-to Customer No. field must be empty.';
      DocumentType@1024 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      RecurrentDocumentDateErr@1009 : TextConst 'ENU=Document Date must be the same as in Create Recurring Sales Inv. report.';
      RecurrentExpiredDateErr@1010 : TextConst 'ENU=No sales invoice must be created for expired Valid To Date in Standard Customer Sales Code.';
      IncorrectSalesTypeToCopyPricesErr@1019 : TextConst 'ENU=To copy sales prices, The Sales Type Filter field must contain Customer.';
      MultipleCustomersSelectedErr@1018 : TextConst 'ENU=More than one customer uses these sales prices. To copy prices, the Sales Code Filter field must contain one customer only.';

    [Test]
    PROCEDURE SalesInvoice@4();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Invoice, Post and Verify Sales Invoice Header and Line.

      // Setup: Create Sales Invoice.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Post Sales Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Check Sell To Customer No., Item No., Quantity in Sales Invoice Header and Line.
      VerifySalesInvoice(GetSalesInvoiceHeaderNo(SalesHeader."No."),SalesLine);
    END;

    [Test]
    PROCEDURE SalesCreditMemo@9();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Create Sales Credit Memo, Post and Verify Sales Cr.Memo Header and Line.

      // Setup: Create Sales Credit Memo.
      Initialize;
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Post Sales Credit Memo.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Check Sell To Customer No., Item No., Quantity in Sales Credit Memo Header and Line.
      VerifySalesCreditMemo(GetSalesCreditMemoHeaderNo(SalesHeader."No."),SalesLine);
    END;

    [Test]
    PROCEDURE ErrorDialogOnSalesOrder@5();
    VAR
      SalesHeader@1001 : Record 36;
      Assert@1000 : Codeunit 130000;
    BEGIN
      // Create Sales Order Header, Post and Verify posting error.

      // Setup: Create Sales Order Header.
      Initialize;
      CreateSaleHeader(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise: Post Sales Order.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Check the Error message.
      Assert.AreEqual(STRSUBSTNO(PostingErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE ErrorDialogOnSalesQuote@2();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1002 : Record 36;
      Assert@1001 : Codeunit 130000;
    BEGIN
      // Create Sales Quote Header then make Order, post the Order and Verify posting error.

      // Setup: Create Sales Quote Header.
      Initialize;
      CreateSaleHeader(SalesHeader,SalesHeader."Document Type"::Quote);

      // Exercise: Create Sales Order form Sales Quote and Post Sales Order.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);
      GetSalesOrderHeader(SalesHeader2,SalesHeader."No.");
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Verify: Check the Error message.
      Assert.AreEqual(STRSUBSTNO(PostingErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler)]
    PROCEDURE SalesOrderStandardSalesCode@57();
    VAR
      SalesHeader@1004 : Record 36;
      StandardSalesLine@1001 : Record 171;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      // Check Sales Code Line are copied correctly in Sales Line.

      // Setup: Update Stock Out Warning.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");

      // Exercise: Create Sales Order with Sales Code.
      CreateSalesOrderWithSalesCode(SalesHeader,StandardSalesLine,CreateItem,'','');

      // Verify: Verify Sales Code Line are copied correctly in Sales Line.
      VerifySalesLine(StandardSalesLine,SalesHeader."No.",'','');
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler)]
    PROCEDURE SalesOrderCopyStandardCode@101();
    VAR
      SalesHeader@1009 : Record 36;
      SalesHeader2@1010 : Record 36;
      SalesReceivablesSetup@1002 : Record 311;
      StandardSalesLine@1003 : Record 171;
      PostedSaleInvoiceNo@1000 : Code[20];
      DocumentType@1011 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // Verify Posted Sales Line of one document is copied correctly in Sales Line of second document.

      // Setup: Update Stock OutW Warning and Create and post Sales Order with Sales Code.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      CreateSalesOrderWithSalesCode(SalesHeader,StandardSalesLine,CreateItem,'','');
      ModifyUnitPrice(SalesHeader);
      PostedSaleInvoiceNo := PostSalesOrder(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      COMMIT;  // COMMIT is required here.

      // Exercise: Copy Sales Document.
      SalesCopyDocument(SalesHeader2,PostedSaleInvoiceNo,DocumentType::"Posted Invoice",FALSE);

      // Verify: Verify values on Copy Sales Lines .
      VerifyCopySalesLine(PostedSaleInvoiceNo,SalesHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(CreateRecurringSalesInvHandler,MessageHandler)]
    PROCEDURE RecurringSalesInvoiceDocumentDate@7();
    VAR
      SalesHeader@1004 : Record 36;
      StandardSalesLine@1001 : Record 171;
      StandardCustomerSalesCode@1000 : Record 172;
      DocumentDate@1008 : Date;
    BEGIN
      // Check Document Date correct on sales invoice created from reccuring report
      Initialize;
      CreateStandardSalesLinesWithItemForCustomer(StandardSalesLine,StandardCustomerSalesCode);
      COMMIT;

      DocumentDate := WORKDATE + LibraryRandom.RandInt(10);
      SalesHeader.GET(SalesHeader."Document Type"::Invoice,RunReccuringSalesIvoice(DocumentDate,StandardSalesLine));

      Assert.AreEqual(DocumentDate,SalesHeader."Document Date",RecurrentDocumentDateErr);
    END;

    [Test]
    [HandlerFunctions(CreateRecurringSalesInvHandler,MessageHandler)]
    PROCEDURE RecurringSalesInvoiceValidToDate@141();
    VAR
      SalesHeader@1004 : Record 36;
      StandardSalesLine@1001 : Record 171;
      StandardCustomerSalesCode@1000 : Record 172;
      DocumentDate@1008 : Date;
    BEGIN
      // Check That No Sales Invoices Created For Expired Standard Customer Code
      Initialize;

      CreateStandardSalesLinesWithItemForCustomer(StandardSalesLine,StandardCustomerSalesCode);
      StandardCustomerSalesCode."Valid To date" := WORKDATE - LibraryRandom.RandInt(10);
      StandardCustomerSalesCode.MODIFY;
      COMMIT;
      DocumentDate := WORKDATE + LibraryRandom.RandInt(10);
      Assert.IsFalse(
        SalesHeader.GET(SalesHeader."Document Type"::Invoice,RunReccuringSalesIvoice(DocumentDate,StandardSalesLine)),
        RecurrentExpiredDateErr);
    END;

    [Test]
    PROCEDURE CustomerPaymentMethodCash@14();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      // To test posting of Sales Order including Customer of Payment Method code as Cash.

      Initialize;
      // Payment Term Code With Balance Account Type as G/L Account and With Balance Account No.
      CustomerPaymentMethodCheck(CreatePaymentMethodCode(PaymentMethod."Bal. Account Type"::"G/L Account"));
    END;

    [Test]
    PROCEDURE CustomerPaymentMethodAccount@10();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      // To test posting of Sales Order including Customer of Payment Method code as Account.

      Initialize;
      // Payment Term Code With Balance Account Type as G/L Account and Without Balance Account No.
      CustomerPaymentMethodCheck(CreatePaymentMethodCode(PaymentMethod."Bal. Account Type"::"Bank Account"));
    END;

    LOCAL PROCEDURE CustomerPaymentMethodCheck@13(PaymentMethodCode@1003 : Code[10]);
    VAR
      SalesHeader@1002 : Record 36;
      Amount@1000 : Decimal;
      PostedSaleInvoiceNo@1001 : Code[20];
    BEGIN
      // Setup: Create Sales Order with Payment Method Code of Customer.
      Amount := CreateOrderPaymentMethod(SalesHeader,PaymentMethodCode);

      // Exercise: Post Sales Order as Ship and Invoice True.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      PostedSaleInvoiceNo := FindPostedSalesOrderToInvoice(SalesHeader."No.");

      // Verify: Verify Customer Ledger Entry and GL Entry.
      VerifyCustomerLedgerEntry(PostedSaleInvoiceNo,-Amount);
      VerifyAmountOnGLEntry(PostedSaleInvoiceNo,GetReceivableAccNo(SalesHeader."Bill-to Customer No."),Amount);
    END;

    [Test]
    PROCEDURE ModifyCustomerLedgerEntry@117();
    VAR
      CustLedgerEntry@1002 : Record 21;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PostedSaleInvoiceNo@1003 : Code[20];
    BEGIN
      // To modify Customer Ledger Entry after posting of order and verify same.

      // Setup: Create Sales Order with Partial Invoice.
      Initialize;
      CreateAndModifySalesOrder(SalesHeader,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      PostedSaleInvoiceNo := FindPostedSalesOrderToInvoice(SalesHeader."No.");

      // Exercise: Modify Customer Ledger Entry.
      ModifyCustLedgerEntry(CustLedgerEntry,PostedSaleInvoiceNo,SalesHeader."Sell-to Customer No.");

      // Verify: Verify Due Date,Payment Discount Date and Remaining Payment Disc Possible on Customer Ledger Entry.
      VerifyCustLedgerEntryDisc(CustLedgerEntry,PostedSaleInvoiceNo);
    END;

    [Test]
    PROCEDURE CustomerCreationByPage@12();
    VAR
      TempCustomer@1001 : TEMPORARY Record 18;
    BEGIN
      // To create a new Customer with Page and verify it.

      // Setup.
      Initialize;

      // Exercise: Create Customer with Page.
      CreateTempCustomer(TempCustomer);
      CreateCustomerCard(TempCustomer);

      // Verify: Verify values on Customer.
      VerifyCustomer(TempCustomer);
    END;

    [Test]
    [HandlerFunctions(CreditLimitHandler,SalesStatisticsPageHandler)]
    PROCEDURE CustomerCreditLimitWarning@1();
    VAR
      Customer@1003 : Record 18;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesReceivablesSetup@1001 : Record 311;
      SalesInvoice@1007 : TestPage 43;
      CreditLimit@1000 : Decimal;
    BEGIN
      // Verify values on Check Credit Limit warning page invoked by Sales Invoice.

      // Setup: Set StockOut warning and Credit Warnings,Create Customer and Item and Create a Sales Invoice.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");
      LibrarySales.CreateCustomer(Customer);
      CreditLimit := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(CreditLimit);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");

      // Taking Random values for Quantity and Unit Cost.
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.SalesLines.Type.SETVALUE(FORMAT(SalesLine.Type::Item));
      SalesInvoice.SalesLines."No.".SETVALUE(CreateItem);
      SalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandInt(5));
      SalesInvoice.SalesLines."Unit Price".SETVALUE(CreditLimit + LibraryRandom.RandDec(100,2));

      // Open Statistics Page to calculate Total Amount.
      SalesInvoice.Statistics.INVOKE;

      // Exercise: Set Customer Credit Limit to invoke Credit Limit Warning.
      ModifyCreditLimitLCY(Customer."No.",CreditLimit);
      SalesInvoice.SalesLines."Unit Price".SETVALUE(SalesInvoice.SalesLines."Unit Price".VALUE);

      // Verify: Verification is done in CreditLimitHandler.
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsHandler)]
    PROCEDURE NotEditableFieldsOnSalesInvoiceStatistics@15();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesInvoice@1003 : TestPage 43;
    BEGIN
      // Verify that some fields on Sales Statistics page are uneditable after calculating Invoice Discount on Sales Invoice.

      // Setup: Create Sales Invoice taking random values for Amount and Unit Price and calculate Invoice Discount.
      Initialize;
      CreateSaleHeader(SalesHeader,SalesHeader."Document Type"::Invoice);
      SalesHeader.VALIDATE("Prices Including VAT",FALSE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      SalesHeader.CalcInvDiscForHeader;

      // Exercise: Open Sales Statistics page from Sales Invoice page.
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.Statistics.INVOKE;

      // Verify: Verification is done in SalesStatisticsHandler method.
    END;

    [Test]
    [HandlerFunctions(SalesOptionDialogHandler)]
    PROCEDURE CancelSalesOrderPostingUsingOptionDialogBox@28();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Order, Cancel Posting Using Option Dialog Box.

      // Setup: Create Sales Order.
      Initialize;
      LibraryVariableStorage.Enqueue(0);  // To Cancel Sales Order.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Cancel Option Dialog Box for Posting Sales Order Using String Menu Handler.
      CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      // Verify: Verify Sales Invoice and Shipment Header.
      VerifySalesInvoiceAndShipmentHeader(SalesHeader."No.");
    END;

    [Test]
    [HandlerFunctions(SalesOptionDialogHandler)]
    PROCEDURE ShipSalesOrderUsingOptionDialogBox@59();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Order, Post as Ship and verify Sales Shipment Line for the posted order.

      // Setup: Create Sales Order.
      Initialize;
      LibraryVariableStorage.Enqueue(1);  // To Ship.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Ship Sales Order Using Option Dialog Box Handler.
      CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      // Verify: Verify the Sales Shipment Line for the shipment done.
      VerifySalesShipment(SalesLine,GetSalesShipmentHeaderNo(SalesHeader."No."));
    END;

    [Test]
    [HandlerFunctions(SalesOptionDialogHandler)]
    PROCEDURE InvoiceSalesOrderWithoutShip@86();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Order, Post as Invoice and verify Error Without Ship.

      // Setup: Create Sales Order.
      Initialize;
      LibraryVariableStorage.Enqueue(2);  // To Invoice.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Invoice Sales Order Without Ship Using Option Dialog Box Handler.
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      // Verify: Verify Error while posting Invoice without Ship.
      Assert.AreEqual(STRSUBSTNO(PostingErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    [HandlerFunctions(SalesOptionDialogHandler)]
    PROCEDURE ShipAndInvoiceSalesOrderUsingOptionDialogBox@17();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Order, Post as Ship and Invoice and verify Sales Invoice Line.

      // Setup: Create Sales Order.
      Initialize;
      LibraryVariableStorage.Enqueue(3);  // To Receive And Invoice.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Ship and Invoice Sales Order Using Option Dialog Box Handler.
      CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      // Verify: Verify Sales Shipment and Sales Invoice Line for the posted Sales Order.
      VerifySalesShipment(SalesLine,GetSalesShipmentHeaderNo(SalesHeader."No."));
      VerifySalesInvoice(GetSalesInvoiceHeaderNoOrder(SalesHeader."No."),SalesLine);
    END;

    [Test]
    [HandlerFunctions(SalesOptionDialogHandler)]
    PROCEDURE InvoiceAferShipUsingOptionDialogBox@92();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Order, Post as Ship first than as Invoice and verify Sales Invoice Line.

      // Setup: Create Sales Order and Ship Using Option Dialog Box Handler.
      Initialize;
      LibraryVariableStorage.Enqueue(1);  // To Ship.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);
      CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);
      LibraryVariableStorage.Enqueue(2);  // To Invoice.

      // Exercise: Invoice Sales after Shipping Order Using Option Dialog Box Handler.
      CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      // Verify: Verify Sales Invoice Line for the posted Sales Order.
      VerifySalesInvoice(GetSalesInvoiceHeaderNoOrder(SalesHeader."No."),SalesLine);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithItemSalesPrices@31();
    VAR
      SalesHeader@1004 : Record 36;
      SalesReceivablesSetup@1001 : Record 311;
      SalesPrice@1006 : Record 7002;
      SalesInvoice@1007 : TestPage 43;
    BEGIN
      // Verify that the Unit Price of the Sales Price of the Item gets populated on the Sales Invoice Line created for that particular Customer and Item.

      // Setup: Set StockOut warning and Credit Warnings,Create a Customer and an Item and set its Sales Price taking random Minimum Quantity and Unit Price.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");
      CreateSalesPriceWithUnitPrice(
        SalesPrice,CreateCustomer,CreateItem,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));

      // Exercise: Create a Sales Invoice for the new Item with Quantity same as Minimum Quantity of Sales Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,SalesPrice."Sales Code");
      OpenAndUpdateSalesInvoicePage(SalesInvoice,SalesHeader."No.",SalesPrice."Item No.",SalesPrice."Minimum Quantity");

      // Verify: Verify that the Unit Price in the Sales Line is equal to the Unit Price of the Sales Price of the Item.
      SalesInvoice.SalesLines."Unit Price".ASSERTEQUALS(SalesPrice."Unit Price");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,CreditLimitLCYHandler)]
    PROCEDURE CustomerCreditLimitWithItemSalesPrices@40();
    VAR
      Customer@1003 : Record 18;
      Customer2@1008 : Record 18;
      SalesHeader@1004 : Record 36;
      SalesReceivablesSetup@1001 : Record 311;
      SalesPrice@1006 : Record 7002;
      SalesInvoice@1007 : TestPage 43;
      UnitPrice@1012 : Decimal;
      CreditLimit@1000 : Decimal;
    BEGIN
      // Verify that Unit Price gets updated when Sell-to Customer No gets changed and verify values on Check Credit Limit warning page invoked on Sales Invoice.

      // Setup: Set Stock Out warning and Credit Warnings, Create 2 Customers and set Credit Limit for 2nd Customer taking random values.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomer(Customer2);
      UpdateCreditLimitInCustomer(Customer2,LibraryRandom.RandDec(100,2));
      CreditLimit := Customer2."Credit Limit (LCY)"; // This variable is used for validation in Handler method.
      LibraryVariableStorage.Enqueue(Customer2."No.");
      LibraryVariableStorage.Enqueue(CreditLimit);
      UnitPrice := Customer2."Credit Limit (LCY)" + LibraryRandom.RandDec(100,2);

      // Create an Item and set its Sales Prices for 2 new Customers taking random Minimum Quantity and Unit Price.
      CreateSalesPriceWithUnitPrice(
        SalesPrice,Customer."No.",CreateItem,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      CreateSalesPriceWithUnitPrice(SalesPrice,Customer2."No.",SalesPrice."Item No.",SalesPrice."Minimum Quantity",UnitPrice);

      // Create a Sales Invoice for the new Item for 1st Customer with Quantity more than Minimum Quantity of Sales Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      OpenAndUpdateSalesInvoicePage(
        SalesInvoice,SalesHeader."No.",SalesPrice."Item No.",SalesPrice."Minimum Quantity" + LibraryRandom.RandInt(5));

      // Exercise: Change the Sell-to Customer No. to 2nd Customer in the Sales Invoice.
      SalesInvoice."Sell-to Customer No.".SETVALUE(Customer2."No.");
      SalesInvoice.OK.INVOKE;

      // Verify: Verification of data on Check Credit Limit dialog is done in 'CreditLimitLCYHandler' and also verify that Unit Price gets updated
      // to the Unit Price of the 2nd Customer in the Sales Price of the Item.
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.SalesLines."Unit Price".ASSERTEQUALS(UnitPrice);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsHandler)]
    PROCEDURE InvoiceDiscountOnStatisticsForSalesOrder@35();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Check Invoice Discount Amount on Statistics when Cust. Invoice Discount are defined with Minimum Amount.

      // Setup: Create Sales Order.
      Initialize;
      CreateSalesOrderWithReceivableSetup(SalesHeader,SalesLine);

      // Exercise: Open Sales Order Statistics page.
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(0);
      OpenSalesOrderStatistics(SalesHeader."No.");

      // Verify: Verification is done in 'SalesOrderStatisticsHandler' for zero amount.
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE SalesInvoiceUsingGetShipmentLines@34();
    VAR
      GeneralPostingSetup@1006 : Record 252;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Check GL Entry for posted Sales Invoice after creating through Get Shipment Lines.

      // Setup: Update Sales & Receivable Setup and Create Sales Order.
      Initialize;
      CreateSalesOrderWithReceivableSetup(SalesHeader,SalesLine);
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      // Exercise: Create and Post Sales Invoice.
      DocumentNo := CreateAndPostSalesInvoice(SalesHeader);

      // Verify: Verify GL Entry for Posted Sales Invoice.
      VerifyAmountOnGLEntry(DocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE SalesInvoiceUsingChangedVATPostingGroup@126();
    VAR
      Customer@1004 : Record 18;
      SalesHeader@1002 : Record 36;
      InvSalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      // Check GL Entry for posted Sales Invoice after creating through Get Shipment Lines.

      // Setup: Create Sales Order.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Customer."No.",SalesLine.Type::Item,CreateItem);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");

      // Create Invoice with another VAT Business Posting Group
      LibrarySales.CreateSalesHeader(InvSalesHeader,InvSalesHeader."Document Type"::Invoice,Customer."No.");
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>%1',InvSalesHeader."VAT Bus. Posting Group");
      VATPostingSetup.FINDFIRST;
      InvSalesHeader.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      InvSalesHeader.MODIFY;
      SalesLine.VALIDATE("Document Type",InvSalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",InvSalesHeader."No.");

      // Verify: Get Shipment Lines produce error
      ASSERTERROR LibrarySales.GetShipmentLines(SalesLine);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler,SalesOrderStatisticsHandler)]
    PROCEDURE InvoiceDiscountOnStatisticsForShippedSalesOrder@33();
    VAR
      CustInvoiceDisc@1006 : Record 19;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      Amount@1007 : Decimal;
      InvDiscountAmountInvoicing@1000 : Decimal;
    BEGIN
      // Check Program calculates the Invoice Discounts only on balance amount on General tab of Statistics.

      // Setup: Update Sales & Receivable Setup, Create and Ship Sales Order, Create and Post Sales Invoice.
      Initialize;
      CreateSalesOrderWithReceivableSetup(SalesHeader,SalesLine);
      CustInvoiceDisc.SETRANGE(Code,SalesHeader."Sell-to Customer No.");
      CustInvoiceDisc.FINDFIRST;
      Amount := ROUND(SalesLine."Line Amount" * CustInvoiceDisc."Discount %" / 100);
      CreateAndPostSalesInvoice(SalesHeader);

      // Add line in Shipped Sales Order.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesLine."No.",LibraryRandom.RandDec(10,2));
      ModifySalesLineUnitPrice(SalesLine,CustInvoiceDisc."Minimum Amount" + LibraryRandom.RandDec(10,2));

      // InvDiscountAmountInvoicing and InvDiscountAmountGeneral are global variable and used in handler for verification.
      InvDiscountAmountInvoicing := SalesLine.Quantity * SalesLine."Unit Price" * CustInvoiceDisc."Discount %" / 100;
      LibraryVariableStorage.Enqueue(InvDiscountAmountInvoicing);
      LibraryVariableStorage.Enqueue(InvDiscountAmountInvoicing + Amount);

      // Exercise: Open Sales Order Statistics page.
      OpenSalesOrderStatistics(SalesHeader."No.");

      // Verify: Verification is done in 'SalesOrderStatisticsHandler'.
    END;

    [Test]
    [HandlerFunctions(MoveNegativeSalesLinesHandler,ConfirmHandlerNo)]
    PROCEDURE SalesReturnOrderNavigate@67();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Test Navigate functionality for Sales Return Order.

      // Setup: Create Sales Return Order, perform MoveNegativeLines from Return Order page using 'MoveNegativeSalesLinesHandler' to create Sales Order and then post created Sales Order.
      // Use Random for Quantity on Sales Line.
      Initialize;
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer,SalesLine.Type::Item,CreateItem);
      SalesHeader.VALIDATE("External Document No.",SalesHeader."Sell-to Customer No.");
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesLine."No.",-LibraryRandom.RandDec(10,2));
      COMMIT;
      OpenSalesReturnOrder(SalesHeader."No.");
      SalesHeader2.SETRANGE("Document Type",SalesHeader2."Document Type"::Order);
      SalesHeader2.SETRANGE("External Document No.",SalesHeader."External Document No.");
      SalesHeader2.FINDFIRST;
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Number of entries for all related tables.
      VerifyNavigateEntry(SalesHeader."Sell-to Customer No.");
    END;

    [Test]
    PROCEDURE VATEntryForSalesInvoiceWithICPartner@71();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      SalesInvoiceHeader@1009 : Record 112;
      PostedDocumentNo@1005 : Code[20];
    BEGIN
      // Check value on VAT Entry after posting Sales Invoice with IC Partner.

      // Setup: Create Sales Invoice with IC Partner Code.
      Initialize;
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CreateCustomer,SalesLine.Type::"G/L Account",CreateGLAccount);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Using Random Number Generator for Random Unit Price.
      SalesLine.VALIDATE("IC Partner Code",FindICPartner);
      SalesLine.VALIDATE("IC Partner Reference",FindICGLAccount);
      SalesLine.MODIFY(TRUE);

      // Exercise: Post Sales Invoice.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Value on VAT Entry.
      SalesInvoiceHeader.GET(PostedDocumentNo);
      SalesInvoiceHeader.CALCFIELDS(Amount);
    END;

    [Test]
    PROCEDURE SalesUnitPriceAndLineDiscount@109();
    VAR
      SalesPrice@1004 : Record 7002;
      SalesLineDiscount@1000 : Record 7004;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify Sales unit Price and Line Discount.

      // Setup: Create Sales Price and Sales Line Discount.
      Initialize;
      CreateSalesPrice(SalesPrice);
      CreateSalesLineDiscount(SalesLineDiscount,SalesPrice);

      // Exercise: Create Sales Order.
      CreateSalesOrder(SalesLine,SalesPrice);

      // Verify: Verify Sales unit Price and Line Discount on Sales Line.
      VerifyUnitPriceAndLineDiscountOnSalesLine(SalesLine,SalesPrice."Minimum Quantity" / 2,0,0);
      VerifyUnitPriceAndLineDiscountOnSalesLine(SalesLine,SalesPrice."Minimum Quantity",SalesPrice."Unit Price",0);
      VerifyUnitPriceAndLineDiscountOnSalesLine(
        SalesLine,SalesPrice."Minimum Quantity" * 2,SalesPrice."Unit Price",SalesLineDiscount."Line Discount %");
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE SalesInvoiceUsingGetShipmentLinesWithBlockedCustomer@70();
    VAR
      Customer@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      CustomerNo@1007 : Code[20];
      CustomerNo2@1008 : Code[20];
      ShipmentNo@1000 : Code[20];
    BEGIN
      // Check Sales Shipment for Posted Sales Invoice after creating through Get Shipment Lines.

      // Setup: Create two Customers, Sales Order and post as Ship option.
      Initialize;
      CustomerNo := CreateCustomer;
      CustomerNo2 := CreateCustomer;
      Customer.GET(CustomerNo2);
      Customer.VALIDATE("Bill-to Customer No.",CustomerNo);  // First created Customer used as Bill-to Customer No. for the second created Customer.
      Customer.MODIFY(TRUE);

      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo2,SalesLine.Type::Item,CreateItem);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDec(10,2));
      ShipmentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      FindBlockedCustomer(Customer,CustomerNo);

      // Create a Sales Invoice by using Get Shipment Lines.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo2);
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LibrarySales.GetShipmentLines(SalesLine);

      // Exercise: Post Sales Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Shipment Entry for Posted Sales Invoice after creating through Get Shipment Lines.
      VerifySalesShipment(SalesLine,ShipmentNo);
    END;

    [Test]
    [HandlerFunctions(NoSeriesListPageHandler)]
    PROCEDURE SalesOrderCreation@99();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesReceivablesSetup@1004 : Record 311;
      No@1003 : Code[20];
      CustomerNo@1001 : Code[20];
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify creation of Sales Order using page.

      // Setup: Update Sales And Receivable Setup, Create Customer and Item.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      ItemNo := CreateItem;
      CustomerNo := CreateCustomer;

      // Exercise: Create Sales Order.
      No := CreateSalesOrderWithPage(CustomerNo,ItemNo);

      // Verify: Verify Sales Order is created with given Customer and Item.
      SalesHeader.GET(SalesHeader."Document Type"::Order,No);
      SalesHeader.TESTFIELD("Sell-to Customer No.",CustomerNo);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("No.",ItemNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerYes,MessageHandler,NoSeriesListPageHandler,ItemTrackingSummaryPageHandler,PostedItemTrackingLinesPageHadler)]
    PROCEDURE ItemTrackingOnPostedSalesDocument@95();
    VAR
      SalesHeader@1008 : Record 36;
      SalesReceivablesSetup@1003 : Record 311;
      No@1007 : Code[20];
      DocumentNo@1010 : Code[20];
      ItemNo@1002 : Code[20];
    BEGIN
      // Verify Item Tracking Lines on Posted Sales Document.

      // Setup: Update Sales And Receivable Setup, Create and Post Item Journal Line and create Sales Order with Item Tracking Lines.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      ItemNo := CreateAndAssignItemTrackingOnItemJournal;
      No := CreateAndAssignItemTrackingOnSalesOrder(CreateCustomer,ItemNo);
      SalesHeader.GET(SalesHeader."Document Type"::Order,No);
      UpdateGeneralPostingSetup(SalesHeader."Sell-to Customer No.",ItemNo);

      // Exercise.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Item Tracking Lines on Posted Sales Document.
      VerifyItemTrackingOnPostedSalesDocument(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(NoSeriesListPageHandler,DimensionSetEntriesPageHandler)]
    PROCEDURE DimensionOnSalesOrder@105();
    VAR
      SalesReceivablesSetup@1003 : Record 311;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify Dimension on Sales Order through page.

      // Setup: Update Sales And Receivable Setup and Create Item.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");

      // Exercise: Create Customer with Dimension and Sales Order.
      DocumentNo := CreateSalesOrderWithPage(CreateCustomerWithDimension,CreateItem);

      // Verify: Verify Dimension on Sales Order.
      VerifyDimensionOnSalesOrder(DocumentNo);
    END;

    [Test]
    PROCEDURE SalesInvoiceDelete@97();
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Verify that Sales Invoice can be deleted.

      // Setup: Create a Customer and a Sales Invoice.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,Customer."No.",SalesLine.Type::Item,CreateItem);

      // Exercise: Delete the data of newly created Sales Invoice.
      SalesHeader.DELETE(TRUE);

      // Verify: Verify that the Sales Invoice gets deleted successfully.
      Assert.IsFalse(SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesHeader."No."),SalesInvoiceMustBeDeletedErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE SalesOrderWithDifferentBillToCustomerNo@103();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test to validate Program populates information on Individual tab on Sales Order according to Bill To Customer No.

      // Setup: Create Sales Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer,SalesLine.Type::Item,CreateItem);

      // Exercise: Change Bill To Customer No.
      CustomerNo := CreateCustomer;
      SalesHeader.VALIDATE("Bill-to Customer No.",CustomerNo);
      SalesHeader.MODIFY(TRUE);

      // Verify: Sales Order With Different Bill To Customer No.
      VerifySalesOrder(SalesHeader."No.",CustomerNo,SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE DueDateOnSalesCreditMemoAfterCopyDocument@118();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Due Date is calculated on Sales Credit memo after running Copy Sales Document Report.
      DueDateOnSalesDocumentAfterCopyDocument(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE DueDateOnSalesReturnOrderAfterCopyDocument@123();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Due Date is calculated on Sales Return Order after running Copy Sales Document Report.
      DueDateOnSalesDocumentAfterCopyDocument(SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler)]
    PROCEDURE SalesLineWithStandardSalesCodeDimension@119();
    VAR
      DimensionValue1@1003 : Record 349;
      DimensionValue2@1005 : Record 349;
      SalesHeader@1004 : Record 36;
      StandardSalesLine@1001 : Record 171;
      GeneralLedgerSetup@1002 : Record 98;
      LibraryDimension@1000 : Codeunit 131001;
    BEGIN
      // Check Sales Code Line with Dimensions are copied correctly in Sales Line.

      // Setup: Create Dimension Value.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue1,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue2,GeneralLedgerSetup."Shortcut Dimension 2 Code");

      // Exercise: Create Sales Order with Sales Code.
      CreateSalesOrderWithSalesCode(SalesHeader,StandardSalesLine,CreateItem,DimensionValue1.Code,DimensionValue2.Code);

      // Verify: Verify Sales Code Line are copied correctly in Sales Line.
      VerifySalesLine(StandardSalesLine,SalesHeader."No.",DimensionValue1.Code,DimensionValue2.Code);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler,CreditLimitHandler)]
    PROCEDURE CheckCreditLimitCustomerTotalAmount@128();
    VAR
      SalesHeader@1003 : Record 36;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      // Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines.

      // Setup: Set StockOut warning and Credit Warnings.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      CreateDocWithLineAndGetShipmentLine(SalesHeader);
      OpenSalesOrderPageWithNewOrder(SalesHeader."Sell-to Customer No.");
      // Verify: Verification of the LineAmount is done in CreditLimitHandler.
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler,CreditLimitHandler)]
    PROCEDURE CheckCreditLimitCustomerTotalAmountFromLine@130();
    VAR
      SalesHeader@1003 : Record 36;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      // Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines.
      // in case of Unit Price line validation

      // Setup: Set StockOut warning and Credit Warnings.
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      CreateDocWithLineAndGetShipmentLine(SalesHeader);
      OpenSalesInvoicePageAndValidateUnitPrice(SalesHeader."No.");
      // Verify: Verification of the Credit Limit is done in CreditLimitHandler.
    END;

    LOCAL PROCEDURE CreateDocWithLineAndGetShipmentLine@131(VAR NewSalesHeader@1000 : Record 36);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      CreditLimit@1001 : Decimal;
      TotalAmount@1004 : Decimal;
    BEGIN
      // Create and Ship Sales Order.
      CreditLimit := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(CreditLimit);

      CreateSalesDocumentFillUnitPrice(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomerWithCreditLimit(CreditLimit),
        CreditLimit + LibraryRandom.RandDec(100,2)); // Set Unit Price more than Credit Limit.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      TotalAmount := CalcTotalLineAmount(SalesHeader."Document Type",SalesHeader."No.");

      // Create Sales Invoice and Get Shipment Lines.
      CreateSalesDocumentFillUnitPrice(
        NewSalesHeader,SalesLine,NewSalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.",
        LibraryRandom.RandDec(100,2));

      TotalAmount += CalcTotalLineAmount(NewSalesHeader."Document Type",NewSalesHeader."No.");
      LibraryVariableStorage.Enqueue(TotalAmount);

      GetSalesDocumentShipmentLines(NewSalesHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreditLimitModalPageHandler,CheckAvailabilityHandler)]
    PROCEDURE SalesInvoiceCopyDocBlankLines@132();
    VAR
      SalesLine@1000 : Record 37;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1004 : Record 36;
      PostedSaleInvoiceNo@1002 : Code[20];
    BEGIN
      // Create Sales Invoice with blank lines, copy Sales Document and check Sell-to Customer No.

      // Setup: Create Sales Invoice and post it.
      Initialize;
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CreateCustomer,SalesLine.Type::Item,CreateItem);
      CreateSalesBlankLines(SalesHeader);
      PostedSaleInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      COMMIT;

      // Exercise: Copy Sales Document.
      SalesCopyDocument(SalesHeader2,PostedSaleInvoiceNo,DocumentType::"Posted Invoice",FALSE);

      // Verify Sell-to Customer No. in copied lines.
      VerifySalesBlankLinesOnCopiedDocument(SalesHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE LineDiscInPriceInclVATInvWithShptLinesFromPriceExclVATOrder@231();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      LineDiscAmt@1002 : Decimal;
      VATPercent@1005 : Decimal;
    BEGIN
      // [FEATURE] [Discount]
      // [SCENARIO 109009] Line Discount Amount of Invoice with PricesInclVAT=TRUE generated by GetShptLines function from order with PricesExclVAT=FALSE is increased by VAT %
      Initialize;
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Ship sales order with line discount LineDiscAmt and Prices Including VAT = FALSE
      CreateShipSalesOrderWithPricesInclVATAndLineDisc(SalesHeader,VATPercent,LineDiscAmt,FALSE);

      // [GIVEN] Sales Invoice with Prices Including VAT = TRUE
      CreateSalesInvWithPricesInclVAT(SalesLine,SalesHeader."Sell-to Customer No.",TRUE);

      // [WHEN] Invoice Line created from Shipment Line
      LibrarySales.GetShipmentLines(SalesLine);

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(SalesLine."Document No.",ROUND(LineDiscAmt * (1 + VATPercent / 100)));
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE LineDiscInPriceExclVATInvWithShptLinesFromPriceInclVATOrder@230();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      LineDiscAmt@1000 : Decimal;
      VATPercent@1004 : Decimal;
    BEGIN
      // [FEATURE] [Discount]
      // [SCENARIO 109009] Line Discount Amount of Invoice with PricesExclVAT=FALSE generated by GetShptLines function from order with PricesInclVAT=TRUE is decreased by VAT %
      Initialize;
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Ship sales order with line discount LineDiscAmt and Prices Including VAT = TRUE
      CreateShipSalesOrderWithPricesInclVATAndLineDisc(SalesHeader,VATPercent,LineDiscAmt,TRUE);

      // [GIVEN] Sales Invoice with Prices Including VAT = FALSE
      CreateSalesInvWithPricesInclVAT(SalesLine,SalesHeader."Sell-to Customer No.",FALSE);

      // [WHEN] Invoice Line created from Shipment Line
      LibrarySales.GetShipmentLines(SalesLine);

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(SalesLine."Document No.",ROUND(LineDiscAmt / (1 + VATPercent / 100)));
    END;

    [Test]
    PROCEDURE DeleteLineWithExtendedTextInSaleOrder@160();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1001 : Record 37;
      SalesCalcDiscountByType@1014 : Codeunit 56;
    BEGIN
      // [FEATURE] [Extended Text] [Sales Order] [Invoice Discount]
      // [SCENARIO 363756] Sales Line is deleted from Sales Order when there is Extended Text and "Calc Inv. Discount" is TRUE
      Initialize;
      UpdateSalesReceivablesSetupForCalcInvDiscount(TRUE);

      // [GIVEN] Item "X" with Extended Text
      CreateItemAndExtendedText(Item);

      // [GIVEN] Sales Header
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Line with Item, second Sales Line with Extended Text
      CreateSalesLineWithExtendedText(SalesHeader,Item."No.");

      // [GIVEN] Sales - Calc Discount By Type calculation
      SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,SalesHeader);
      COMMIT; // Commit to close transaction.

      // [WHEN] Delete Sales Line with Item
      DeleteSalesLine(SalesHeader."No.",SalesLine.Type::Item,Item."No.");

      // [THEN] Sales Lines with Extended Text of "X" deleted
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("No.",Item."No.");
      Assert.RecordIsEmpty(SalesLine);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE DeleteLineWithExtendedTextInSaleOrderWithShptLines@180();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1001 : Record 37;
      SalesCalcDiscountByType@1014 : Codeunit 56;
      LineDiscAmt@1007 : Decimal;
      VATPercent@1003 : Decimal;
    BEGIN
      // [FEATURE] [Extended Text] [Sales Order] [Invoice Discount]
      // [SCENARIO 363756] Sales Line is deleted from Sales Invoice when there is Extended Text and Shipment Lines
      Initialize;
      UpdateSalesReceivablesSetupForCalcInvDiscount(TRUE);
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Ship sales order with line discount LineDiscAmt and Prices Including VAT = FALSE
      CreateShipSalesOrderWithPricesInclVATAndLineDisc(SalesHeader,VATPercent,LineDiscAmt,FALSE);

      // [GIVEN] Sales Invoice with Prices Including VAT = TRUE
      CreateSalesInvWithPricesInclVAT(SalesLine,SalesHeader."Sell-to Customer No.",TRUE);

      // [WHEN] Invoice Line created from Shipment Line
      LibrarySales.GetShipmentLines(SalesLine);

      // [GIVEN] Item "X" with Extended Text
      CreateItemAndExtendedText(Item);
      // [GIVEN] Sales Line with Item, second Sales Line with Extended Text
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CreateSalesLineWithExtendedText(SalesHeader,Item."No.");

      // [GIVEN] Sales - Calc Discount By Type calculation
      SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,SalesHeader);
      COMMIT; // Commit to close transaction.

      // [WHEN] Delete Sales Line with Item
      DeleteSalesLine(SalesHeader."No.",SalesLine.Type::Item,Item."No.");

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(SalesLine."Document No.",ROUND(LineDiscAmt * (1 + VATPercent / 100)));
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningMPH)]
    PROCEDURE CheckCreditLimitSalesOrderLineAmountIncrease@142();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesHeader@1003 : Record 36;
      NewUnitPrice@1006 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Sales Order] [Credit Limit]
      // [SCENARIO 363418] Credit Limit Warning Page correctly shows values in case of Sales Order Line Amount increase
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      // [GIVEN] Customer with "Credit Limit" = 199.99 (100 + 70 + 30 - 0.01)
      // [GIVEN] Posted Sales Order 1 with Line Amount = 100.
      // [GIVEN] Sales Order 2 with Line Amount = 70.
      // [GIVEN] Sales Order 3 with Line Amount = 15.
      DocumentNo := CreditLimitSalesDocLineUnitPriceIncrease(SalesHeader."Document Type"::Order,NewUnitPrice);
      // [WHEN] Change Line Amount from 15 to 30 in Sales Order 3
      OpenSalesOrderAndValidateUnitPrice(DocumentNo,NewUnitPrice);

      // [THEN] Credit Limit Warning page is shown with following values:
      // [THEN] "Outstanding Amt. (LCY)" = 100 (70 + 30)
      // [THEN] "Current Amount (LCY)" = 30
      // [THEN] "Total Amount (LCY)" = 200 (100 + 70 + 30)
      // [THEN] "Credit Limit (LCY)" = 199.99

      // Verify in CreditLimitWarningMPH
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningMPH)]
    PROCEDURE CheckCreditLimitSalesOrderLineAmountDecrease@140();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesHeader@1003 : Record 36;
      NewUnitPrice@1006 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Sales Order] [Credit Limit]
      // [SCENARIO 363418] Credit Limit Warning Page correctly shows values in case of Sales Order Line Amount decrease
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      // [GIVEN] Customer with "Credit Limit" = 184.99 (100 + 70 + 15 - 0.01)
      // [GIVEN] Posted Sales Order 1 with Line Amount = 100.
      // [GIVEN] Sales Order 2 with Line Amount = 70.
      // [GIVEN] Sales Order 3 with Line Amount = 30.
      DocumentNo := CreditLimitSalesDocLineUnitPriceDecrease(SalesHeader."Document Type"::Order,NewUnitPrice);

      // [WHEN] Change Line Amount from 30 to 15 in Sales Order 3
      OpenSalesOrderAndValidateUnitPrice(DocumentNo,NewUnitPrice);

      // [THEN] Credit Limit Warning page is shown with following values:
      // [THEN] "Outstanding Amt. (LCY)" = 85 (70 + 15)
      // [THEN] "Current Amount (LCY)" = 15
      // [THEN] "Total Amount (LCY)" = 185 (100 + 70 + 15)
      // [THEN] "Credit Limit (LCY)" = 184.99

      // Verify in CreditLimitWarningMPH
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningMPH)]
    PROCEDURE CheckCreditLimitSalesInvoiceLineAmountIncrease@137();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesHeader@1003 : Record 36;
      NewUnitPrice@1001 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Sales Invoice] [Credit Limit]
      // [SCENARIO 363418] Credit Limit Warning Page correctly shows values in case of Sales Invoice Line Amount increase
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      // [GIVEN] Customer with "Credit Limit" = 199.99 (100 + 70 + 30 - 0.01)
      // [GIVEN] Posted Sales Invoice 1 with Line Amount = 100.
      // [GIVEN] Sales Invoice 2 with Line Amount = 70.
      // [GIVEN] Sales Invoice 3 with Line Amount = 15.
      DocumentNo := CreditLimitSalesDocLineUnitPriceIncrease(SalesHeader."Document Type"::Invoice,NewUnitPrice);

      // [WHEN] Change Line Amount from 15 to 30 in Sales Invoice 3
      OpenSalesInvoiceAndValidateUnitPrice(DocumentNo,NewUnitPrice);

      // [THEN] Credit Limit Warning page is shown with following values:
      // [THEN] "Outstanding Amt. (LCY)" = 100 (70 + 30)
      // [THEN] "Current Amount (LCY)" = 30
      // [THEN] "Total Amount (LCY)" = 200 (100 + 70 + 30)
      // [THEN] "Credit Limit (LCY)" = 199.99

      // Verify in CreditLimitWarningMPH
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningMPH)]
    PROCEDURE CheckCreditLimitSalesInvoiceLineAmountDecrease@147();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesHeader@1003 : Record 36;
      NewUnitPrice@1006 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Sales Invoice] [Credit Limit]
      // [SCENARIO 363418] Credit Limit Warning Page correctly shows values in case of Sales Invoice Line Amount decrease
      Initialize;
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      // [GIVEN] Customer with "Credit Limit" = 184.99 (100 + 70 + 15 - 0.01)
      // [GIVEN] Posted Sales Invoice 1 with Line Amount = 100.
      // [GIVEN] Sales Invoice 2 with Line Amount = 70.
      // [GIVEN] Sales Invoice 3 with Line Amount = 30.
      DocumentNo := CreditLimitSalesDocLineUnitPriceDecrease(SalesHeader."Document Type"::Invoice,NewUnitPrice);

      // [WHEN] Change Line Amount from 30 to 15 in Sales Invoice 3
      OpenSalesInvoiceAndValidateUnitPrice(DocumentNo,NewUnitPrice);

      // [THEN] Credit Limit Warning page is shown with following values:
      // [THEN] "Outstanding Amt. (LCY)" = 85 (70 + 15)
      // [THEN] "Current Amount (LCY)" = 15
      // [THEN] "Total Amount (LCY)" = 185 (100 + 70 + 15)
      // [THEN] "Credit Limit (LCY)" = 184.99

      // Verify in CreditLimitWarningMPH
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler,MessageHandler)]
    PROCEDURE CheckAssemblyOrderCreatedWithinStdCustSalesCode@333();
    VAR
      SalesHeader@1000 : Record 36;
      StandardSalesLine@1001 : Record 171;
      Item@1002 : Record 27;
      AssemblyHeader@1003 : Record 900;
    BEGIN
      // [FEATURE] [Standard Sales Code] [Assembly]
      // [SCENARIO 371759] The Assembly Order should be created when a Standard Code with an Assembled Item is applied to a Sales Order
      Initialize;

      // [GIVEN] Std Cust. Sales Code for Assembly Item
      CreateAssembledItem(Item);

      // [WHEN] Get Std Cust. Sales Code on Sales Order, where Sales Line Quantity is "X"
      CreateSalesOrderWithSalesCode(SalesHeader,StandardSalesLine,Item."No.",'','');

      // [THEN] Assemly Order is created, where Quantity is "X"
      WITH AssemblyHeader DO BEGIN
        SETRANGE("Item No.",Item."No.");
        FINDFIRST;
        TESTFIELD(Quantity,StandardSalesLine.Quantity);
      END;
    END;

    [Test]
    PROCEDURE UT_DeleteCustomerPriceGroupWithSalesPrice@195();
    VAR
      CustomerPriceGroup@1000 : Record 6;
      SalesPrice@1001 : Record 7002;
    BEGIN
      // [FEATURE] [UT] [Customer Price Group] [Sales Price]
      // [SCENARIO 364564] Delete related "Sales Price" when "Customer Price Group" is deleted

      // [GIVEN] Customer Price Group = "X"
      // [GIVEN] Sales Price with "Sales Type" = "Customer Price Group" and "Sales Code" = "X"
      Initialize;
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup.Code,
        LibraryInventory.CreateItemNo,WORKDATE,'','','',LibraryRandom.RandInt(100));

      // [WHEN] Delete Customer Price Group
      CustomerPriceGroup.DELETE(TRUE);

      // [THEN] Sales Price is removed
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group");
      SalesPrice.SETRANGE("Sales Code",CustomerPriceGroup.Code);
      Assert.RecordIsEmpty(SalesPrice);
    END;

    [Test]
    PROCEDURE UT_RenameSalesPriceOnCustomerPriceGroupRename@196();
    VAR
      CustomerPriceGroup@1001 : Record 6;
      SalesPrice@1000 : Record 7002;
      NewCustPriceGroupCode@1002 : Code[10];
      OldCustPriceGroupCode@1003 : Code[10];
    BEGIN
      // [FEATURE] [UT] [Customer Price Group] [Sales Price]
      // [SCENARIO 364564] Rename related "Sales Price" when "Customer Price Group" is renamed

      // [GIVEN] Customer Price Group = "X"
      // [GIVEN] Sales Price with "Sales Type" = "Customer Price Group" and "Sales Code" = "X"
      Initialize;
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup.Code,
        LibraryInventory.CreateItemNo,WORKDATE,'','','',LibraryRandom.RandInt(100));
      OldCustPriceGroupCode := CustomerPriceGroup.Code;
      NewCustPriceGroupCode := LibraryUtility.GenerateGUID;

      // [WHEN] Rename Customer Price Group from "X" to "Y"
      CustomerPriceGroup.RENAME(NewCustPriceGroupCode);

      // [THEN] Sales Price with "Sales Code" = "Y" is created
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group");
      SalesPrice.SETRANGE("Sales Code",NewCustPriceGroupCode);
      Assert.RecordIsNotEmpty(SalesPrice);
      // [THEN] Sales Price with "Sales Code" = "X" is removed
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group");
      SalesPrice.SETRANGE("Sales Code",OldCustPriceGroupCode);
      Assert.RecordIsEmpty(SalesPrice);
    END;

    [Test]
    PROCEDURE UT_RenamingSalesPriceWhenRenameCustomer@190();
    VAR
      Customer@1000 : Record 18;
      SalesPrice@1001 : Record 7002;
      OldCustomerNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [UT] [Customer] [Sales Price]
      // [SCENARIO 382057] "Sales Price" record has been renamed in case of rename of related customer
      Initialize;

      // [GIVEN] Customer "A" with Sales Price: "Sales Type" = "Customer", "Sales Code" = "A"
      LibrarySales.CreateCustomer(Customer);
      OldCustomerNo := Customer."No.";
      LibrarySales.CreateSalesPrice(
        SalesPrice,LibraryInventory.CreateItemNo,SalesPrice."Sales Type"::Customer,Customer."No.",WORKDATE,'','','',0,0);

      // [WHEN] Rename customer from "A" to "B"
      Customer.RENAME(LibraryUtility.GenerateGUID);

      // [THEN] There is no sales price record with "Sales Type" = "Customer", "Sales Code" = "A"
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code",OldCustomerNo);
      Assert.RecordIsEmpty(SalesPrice);

      // [THEN] There is a sales price record with "Sales Type" = "Customer", "Sales Code" = "B"
      SalesPrice.SETRANGE("Sales Code",Customer."No.");
      Assert.RecordIsNotEmpty(SalesPrice);
    END;

    [Test]
    PROCEDURE UT_RenamingSalesLineDiscountWhenRenameCustomer@188();
    VAR
      Customer@1000 : Record 18;
      SalesLineDiscount@1001 : Record 7004;
      OldCustomerNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [UT] [Customer] [Sales Line Discount]
      // [SCENARIO 382057] "Sales Line Discount" record has been renamed in case of rename of related customer
      Initialize;

      // [GIVEN] Customer "A" with Sales Line Discount: "Sales Type" = "Customer", "Sales Code" = "A"
      LibrarySales.CreateCustomer(Customer);
      OldCustomerNo := Customer."No.";
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,LibraryInventory.CreateItemNo,
        SalesLineDiscount."Sales Type"::Customer,Customer."No.",
        WORKDATE,'','',SalesLineDiscount."Unit of Measure Code",0);

      // [WHEN] Rename customer from "A" to "B"
      Customer.RENAME(LibraryUtility.GenerateGUID);

      // [THEN] There is no sales line discount record with "Sales Type" = "Customer", "Sales Code" = "A"
      SalesLineDiscount.SETRANGE("Sales Type",SalesLineDiscount."Sales Type"::Customer);
      SalesLineDiscount.SETRANGE("Sales Code",OldCustomerNo);
      Assert.RecordIsEmpty(SalesLineDiscount);

      // [THEN] There is a sales line discount record with "Sales Type" = "Customer", "Sales Code" = "B"
      SalesLineDiscount.SETRANGE("Sales Code",Customer."No.");
      Assert.RecordIsNotEmpty(SalesLineDiscount);
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewSalesQuoteFromCustomerCard@157();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      SalesQuote@1002 : TestPage 41;
    BEGIN
      // [FEATURE] [Quote] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Sales Quote from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Sales Quote
      SalesQuote.TRAP;
      CustomerCard.NewSalesQuote.INVOKE;
      SalesQuote."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewSalesOrderFromCustomerCard@143();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      SalesOrder@1002 : TestPage 42;
    BEGIN
      // [FEATURE] [Order] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Sales Order from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Sales Order
      SalesOrder.TRAP;
      CustomerCard.NewSalesOrder.INVOKE;
      SalesOrder."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewBlanketSalesOrderFromCustomerCard@170();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      BlanketSalesOrder@1002 : TestPage 507;
    BEGIN
      // [FEATURE] [Blanket Order] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Blanket Sales Order from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Blanket Sales Order
      BlanketSalesOrder.TRAP;
      CustomerCard.NewBlanketSalesOrder.INVOKE;
      BlanketSalesOrder."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewSalesReturnOrderFromCustomerCard@166();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      SalesReturnOrder@1002 : TestPage 6630;
    BEGIN
      // [FEATURE] [Return Order] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Sales Return Order from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Sales Return Order
      SalesReturnOrder.TRAP;
      CustomerCard.NewSalesReturnOrder.INVOKE;
      SalesReturnOrder."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewSalesInvoiceFromCustomerCard@171();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      SalesInvoice@1002 : TestPage 43;
    BEGIN
      // [FEATURE] [Invoice] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Sales Invoice from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Sales Invoice
      SalesInvoice.TRAP;
      CustomerCard.NewSalesInvoice.INVOKE;
      SalesInvoice."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    [HandlerFunctions(CreditLimitLCYHandler)]
    PROCEDURE CustCreditLimitOnNewSalesCreditMemoFromCustomerCard@168();
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      Customer@1001 : Record 18;
      CustomerCard@1000 : TestPage 21;
      SalesCreditMemo@1002 : TestPage 44;
    BEGIN
      // [FEATURE] [Credit Memo] [Credit Limit] [UI]
      // [SCENARIO 378849] Customer credit limit warning page is shown when create new Sales Credit Memo from customer card
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      // [GIVEN] Customer with Credit Limit and overdue balance
      CreateCustomerWithCreditLimitAndOverdue(Customer);
      // [GIVEN] Open Customer Card
      CustomerCard.OPENEDIT;
      CustomerCard.GOTORECORD(Customer);

      // [WHEN] Perform page action: New Sales Document -> Sales Credit Memo
      SalesCreditMemo.TRAP;
      CustomerCard.NewSalesCreditMemo.INVOKE;
      SalesCreditMemo."Ship-to Address 2".SETVALUE(''); // dummy validate to move page cursor from "No." field

      // [THEN] Customer credit limit warning page is opened
      // Verify page values in "CreditLimitLCYHandler" handler
    END;

    [Test]
    PROCEDURE SalesPriceMinimumQuantityWithMaxValue@177();
    VAR
      SalesPrice@1000 : Record 7002;
      SalesPrices@1001 : TestPage 7002;
    BEGIN
      // [FEATURE] [Sales Price] [UT] [UI]
      // [SCENARIO 381273] User should be able to input value with 5 decimals in "Minimum Quantity" field of Sales Price table
      CreateSalesPriceWithMinimumQuantity(SalesPrice,0.12345);
      SalesPrices.OPENVIEW;
      SalesPrices.SalesTypeFilter.SETVALUE(SalesPrice."Sales Type"::"All Customers");
      SalesPrices.GOTORECORD(SalesPrice);
      Assert.AreEqual(FORMAT(0.12345),SalesPrices."Minimum Quantity".VALUE,SalesPrice.FIELDCAPTION("Minimum Quantity"));
    END;

    [Test]
    PROCEDURE SalesPriceMinimumQuantityOverMaxValue@178();
    VAR
      SalesPrice@1000 : Record 7002;
      SalesPrices@1001 : TestPage 7002;
    BEGIN
      // [FEATURE] [Sales Price] [UT] [UI]
      // [SCENARIO 381273] User should not be able to input value with more than 5 decimals in "Minimum Quantity" field of Sales Price table
      CreateSalesPriceWithMinimumQuantity(SalesPrice,0.123456);
      SalesPrices.OPENVIEW;
      SalesPrices.SalesTypeFilter.SETVALUE(SalesPrice."Sales Type"::"All Customers");
      SalesPrices.GOTORECORD(SalesPrice);
      Assert.AreNotEqual(FORMAT(0.123456),SalesPrices."Minimum Quantity".VALUE,SalesPrice.FIELDCAPTION("Minimum Quantity"));
      Assert.AreEqual(FORMAT(0.12346),SalesPrices."Minimum Quantity".VALUE,SalesPrice.FIELDCAPTION("Minimum Quantity"));
    END;

    [Test]
    PROCEDURE UI_CannotCopyPricesWhenSalesTypeFilterNotCustomer@227();
    VAR
      SalesPrices@1001 : TestPage 7002;
    BEGIN
      // [FEAUTURE] [UI] [Price] [Sales Price]
      // [SCENARIO 207389] Not possible to copy prices when "Sales Type Filter" is not Customer on "Sales Prices" page

      Initialize;

      // [GIVEN] Opened "Sales Prices" page and "Sales Type Filter" is "All Customers"
      SalesPrices.OPENEDIT;
      SalesPrices.SalesTypeFilter.SETVALUE('All Customers');

      // [WHEN] Press action "Copy Prices" on "Sales Prices" page
      ASSERTERROR SalesPrices.CopyPrices.INVOKE;

      // [THEN] Error message "Incorrect Sales Type Filter specified. Specify Customer in Sales Type Filter field and Customer No. in Sales Code Filter to copy prices." is thrown
      Assert.ExpectedError(IncorrectSalesTypeToCopyPricesErr);
    END;

    [Test]
    PROCEDURE UI_CannotCopyPricesWhenSalesCodeFilterHasMultipleVendors@226();
    VAR
      SalesPrices@1000 : TestPage 7002;
      CopyFromCustomerNo@1002 : Code[20];
      CopyToCustomerNo@1003 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Sales Price]
      // [SCENARIO 207389] Not possible to copy prices when multiple customers specified in "Sales Code Filter" on "Sa;es Prices" page

      Initialize;

      // [GIVEN] Customers "X" and "Y"
      CopyFromCustomerNo := LibrarySales.CreateCustomerNo;
      CopyToCustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Opened "Sales Prices" page. "Sales Type Filter" is "Customer", "Sales Code Filter" is "X|Y"
      SalesPrices.OPENEDIT;
      SalesPrices.SalesTypeFilter.SETVALUE('Customer');
      SalesPrices.SalesCodeFilterCtrl.SETVALUE(STRSUBSTNO('%1|%2',CopyFromCustomerNo,CopyToCustomerNo));

      // [WHEN] Press action "Copy Prices" on "Sales Prices" page
      ASSERTERROR SalesPrices.CopyPrices.INVOKE;

      // [THEN] Error message "There are more than one customer selected by Sales Code Filter. Specify a single Customer No. by Sales Code Filter to copy prices." is thrown
      Assert.ExpectedError(MultipleCustomersSelectedErr);
    END;

    [Test]
    [HandlerFunctions(SalesPricesSelectPriceOfCustomerModalPageHandler)]
    PROCEDURE UI_CopyPriceOnSalesPricesPage@224();
    VAR
      SalesPrice@1002 : Record 7002;
      SalesPrices@1004 : TestPage 7002;
      CopyToCustomerNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Sales Price]
      // [SCENARIO 207389] Copy price from one Customer to another by "Copy Prices" action on "Sa;es Prices" page

      Initialize;

      // [GIVEN] Customers "X" and "Y"
      // [GIVEN] Sales Price for Vendor "Y", "Unit Price" = 50
      // [GIVEN] Opened "Sales Prices" page. "Sales Type Filter" is "Customer", "Sales Code Filter" is "X"
      CopyPricesScenarioOnSalesPricePage(SalesPrice,CopyToCustomerNo,SalesPrices);

      // [WHEN] Press action "Copy Prices" on "Sales Prices" page and select price of Customer "Y"
      SalesPrices.CopyPrices.INVOKE;

      // [THEN] Sales Price for Customer "X" with "Direct Unit Cost" = 50 is created
      VerifyCopiedSalesPrice(SalesPrice,CopyToCustomerNo);
    END;

    [Test]
    [HandlerFunctions(SalesPricesSelectPriceOfCustomerModalPageHandler)]
    PROCEDURE UI_CopyExistingPriceOnSalesPricesPage@223();
    VAR
      SalesPrice@1002 : Record 7002;
      SalesPrices@1001 : TestPage 7002;
      CopyFromCustomerNo@1003 : Code[20];
      CopyToCustomerNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Sales Price]
      // [SCENARIO 207389] Price not copies if it's already exist when use "Copy Prices" action on "Sales Prices" page

      Initialize;

      // [GIVEN] Customers "X" and "Y"
      CopyToCustomerNo := LibrarySales.CreateCustomerNo;
      CopyFromCustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Two identical Sales Prices for Vendors "X" and "Y"
      CreateSalesPriceWithUnitPrice(
        SalesPrice,CopyFromCustomerNo,LibraryInventory.CreateItemNo,0,LibraryRandom.RandDec(100,2));
      SalesPrice."Sales Code" := CopyToCustomerNo;
      SalesPrice.INSERT;

      // [GIVEN] Opened "Sales Prices" page. "Sales Type Filter" is "Customer", "Sales Code Filter" is "X"
      SalesPrices.OPENEDIT;
      SalesPrices.SalesTypeFilter.SETVALUE('Customer');
      SalesPrices.SalesCodeFilterCtrl.SETVALUE(CopyToCustomerNo);
      LibraryVariableStorage.Enqueue(CopyFromCustomerNo); // pass to SalesPricesSelectPriceOfCustomerModalPageHandler

      // [WHEN] Press action "Copy Prices" on "Sales Prices" page and select price of Customer "Y"
      SalesPrices.CopyPrices.INVOKE;

      // [THEN] Existing Price not changed and no new Price was copied to Customer "X"
      VerifyUnchangedSalesPrice(SalesPrice);
    END;

    [Test]
    [HandlerFunctions(SalesPricesCancelPriceSelectionModalPageHandler)]
    PROCEDURE UI_DoNotSelectPriceWhenCopyPricesOnSalesPricesPage@222();
    VAR
      SalesPrice@1002 : Record 7002;
      SalesPrices@1001 : TestPage 7002;
      CopyToCustomerNo@1000 : Code[20];
    BEGIN
      // [FEAUTURE] [UI] [Price] [Sales Price]
      // [SCENARIO 207389] Price not copies if nothing is selected when use "Copy Prices" action on "Sales Prices" page

      Initialize;

      // [GIVEN] Customers "X" and "Y"
      // [GIVEN] Sales Price for Vendor "Y", "Unit Price" = 50
      // [GIVEN] Opened "Sales Prices" page. "Sales Type Filter" is "Customer", "Sales Code Filter" is "X"
      CopyPricesScenarioOnSalesPricePage(SalesPrice,CopyToCustomerNo,SalesPrices);

      // [WHEN] Press action "Copy Prices" on "Sales Prices" page and cancel selection
      SalesPrices.CopyPrices.INVOKE;

      // [THEN] No price was copied to Customer "X"
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code",CopyToCustomerNo);
      Assert.RecordCount(SalesPrice,0);
    END;

    [Test]
    PROCEDURE UT_CopySalesPriceToCustomersSalesPrice@221();
    VAR
      SalesPrice@1002 : Record 7002;
      ExistingSalesPrice@1001 : Record 7002;
      CopyFromCustomerNo@1003 : Code[20];
      CopyToCustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UT] [Price] [Sales Price]
      // [SCENARIO 207389] Copy prices with CopySalesPriceToCustomersSalesPrice function in Sales Price table

      Initialize;

      CopyToCustomerNo := LibrarySales.CreateCustomerNo;
      CopyFromCustomerNo := LibrarySales.CreateCustomerNo;
      CreateSalesPriceWithUnitPrice(
        SalesPrice,CopyFromCustomerNo,LibraryInventory.CreateItemNo,0,LibraryRandom.RandDec(100,2));

      CreateSalesPriceWithUnitPrice(
        SalesPrice,CopyFromCustomerNo,LibraryInventory.CreateItemNo,0,LibraryRandom.RandDec(100,2));
      ExistingSalesPrice := SalesPrice;
      ExistingSalesPrice."Sales Code" := CopyToCustomerNo;
      ExistingSalesPrice.INSERT;

      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code",CopyFromCustomerNo);
      SalesPrice.CopySalesPriceToCustomersSalesPrice(SalesPrice,CopyToCustomerNo);

      SalesPrice.SETRANGE("Sales Code",CopyToCustomerNo);
      Assert.RecordCount(SalesPrice,2);
    END;

    [Test]
    [HandlerFunctions(CheckCrLimitGetOverdueAmountModalPageHandler)]
    PROCEDURE BalanceDueLCYConsidersOnlyEntriesWithDueDateLessThanWorkDateOnCheckCrLimitPage@205();
    VAR
      SalesHeader@1003 : Record 36;
      CustCheckCrLimit@1000 : Codeunit 312;
      OverdueAmount@1004 : Decimal;
    BEGIN
      // [FEAUTURE] [UI] [UT]
      // [SCENARIO 218532] "Balance Due (LCY)" considers only Customer Ledger Entries with "Due Date" less than work date on "Check Credit Limit" page

      Initialize;

      // [GIVEN] Work date is 24.01.19
      // [GIVEN] Customer with two entries
      // [GIVEN] First entry has "Due Date" = 24.01.19 and Amount = 100
      // [GIVEN] Second entry has "Due Date" = 23.01.19 and Amount = 50
      CreateSalesOrderWithOverdueCust(SalesHeader,OverdueAmount);

      // [WHEN] Run Credit Limit check by function SalesHeaderCheck in codeunit "Cust-Check Cr. Limit"
      CustCheckCrLimit.SalesHeaderCheck(SalesHeader);

      // [THEN] "Check Credit Limit" page shown and "Balance Due (LCY)" is 50
      Assert.AreEqual(OverdueAmount,LibraryVariableStorage.DequeueDecimal,'Incorrect overdue amount on Check Credit Limit page');
    END;

    [Test]
    [HandlerFunctions(CheckCrLimitDrilldownOverdueAmountModalPageHandler,CustomerLedgerEntriesVerifySingleEntryWithAmountPageHandler)]
    PROCEDURE DrilldownOnBalanceDueLCYOfCheckCrLimitPageShowsOnlyOverdueEntries@209();
    VAR
      SalesHeader@1004 : Record 36;
      CustCheckCrLimit@1002 : Codeunit 312;
      OverdueAmount@1000 : Decimal;
    BEGIN
      // [FEAUTURE] [UI] [UT]
      // [SCENARIO 218532] Only Customer Ledger Entries with "Due Date" less than work date shows when drill-down field "Balance Due (LCY)" on "Check Credit Limit" page

      Initialize;

      // [GIVEN] Work date is 24.01.19
      // [GIVEN] Customer with two entries
      // [GIVEN] First entry has "Due Date" = 24.01.19 and Amount = 100
      // [GIVEN] Second entry has "Due Date" = 23.01.19 and Amount = 50
      CreateSalesOrderWithOverdueCust(SalesHeader,OverdueAmount);

      // [GIVEN] Credit Limit check called and "Check Credit Limit" page is opened
      CustCheckCrLimit.SalesHeaderCheck(SalesHeader);

      // [WHEN] Drill-down field "Balance Due (LCY)" on "Check Credit Limit" page
      // [THEN] "Customer Ledger Entries" page is shown with only one Customer Ledger Entry entry with Amount = 50
      Assert.AreEqual(
        OverdueAmount,LibraryVariableStorage.DequeueDecimal,'Incorrect amount when drill-down Balance Due on Check Credit Limit page');
    END;

    [Test]
    [HandlerFunctions(CustomerLedgerEntriesVerifySingleEntryWithAmountPageHandler)]
    PROCEDURE DrilldownOnBalanceDueLCYOfCustStatFactboxPageShowsOnlyOverdueEntries@213();
    VAR
      SalesHeader@1004 : Record 36;
      CustomerList@1001 : TestPage 22;
      OverdueAmount@1000 : Decimal;
    BEGIN
      // [FEAUTURE] [UI] [UT]
      // [SCENARIO 218532] Only Customer Ledger Entries with "Due Date" less than work date shows when drill-down field "Balance Due (LCY)" on "Customer Statistics Factbox" page

      Initialize;

      // [GIVEN] Work date is 24.01.19
      // [GIVEN] Customer with two entries
      // [GIVEN] First entry has "Due Date" = 24.01.19 and Amount = 100
      // [GIVEN] Second entry has "Due Date" = 23.01.19 and Amount = 50
      CreateSalesOrderWithOverdueCust(SalesHeader,OverdueAmount);

      // [GIVEN] "Customer List" page opens for Customer with Overdue balance = 50
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER("No.",SalesHeader."Bill-to Customer No.");
      CustomerList."Customer Statistics FactBox"."Balance Due (LCY)".ASSERTEQUALS(OverdueAmount);

      // [WHEN] Drill-down field "Balance Due (LCY)" on "Customer Statistics Factbox" page
      CustomerList."Customer Statistics FactBox"."Balance Due (LCY)".DRILLDOWN;

      // [THEN] "Customer Ledger Entries" page is shown with only one Customer Ledger Entry entry with Amount = 50
      Assert.AreEqual(
        OverdueAmount,LibraryVariableStorage.DequeueDecimal,'Incorrect amount when drill-down Balance Due on Check Credit Limit page');
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimitAndOverdue@174(VAR Customer@1005 : Record 18);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      CustomerNo@1004 : Code[20];
      GLAccountNo@1003 : Code[20];
      CreditLimit@1002 : Decimal;
    BEGIN
      CreditLimit := LibraryRandom.RandDecInRange(1000,2000,2);
      CreateCustomerAndGLAccountWithVATSetup(CustomerNo,GLAccountNo);
      ModifyCreditLimitLCY(CustomerNo,CreditLimit);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"G/L Account",GLAccountNo,1);
      ModifySalesLineUnitPrice(SalesLine,CreditLimit + LibraryERM.GetAmountRoundingPrecision);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      LibraryVariableStorage.Enqueue(CustomerNo);
      LibraryVariableStorage.Enqueue(CreditLimit);
      Customer.GET(CustomerNo);
    END;

    LOCAL PROCEDURE CreditLimitSalesDocLineUnitPriceIncrease@154(DocumentType@1007 : Option;VAR NewUnitPrice@1000 : Decimal) : Code[20];
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      CustomerNo@1001 : Code[20];
      GLAccountNo@1004 : Code[20];
      UnitPrice@1006 : Decimal;
      LineAmount@1008 : ARRAY [4] OF Decimal;
      CreditLimit@1002 : Decimal;
    BEGIN
      CreateCustomerAndGLAccountWithVATSetup(CustomerNo,GLAccountNo);

      // Create Post Sales Document to get Customer's Balance
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[1] := SalesLine."Amount Including VAT";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Create Sales Document to get "other" Outstanding
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[2] := SalesLine."Amount Including VAT";

      // Create new Sales Document to get "current" old/new Outstanding
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[3] := SalesLine."Amount Including VAT";
      UnitPrice := SalesLine."Unit Price";

      ModifySalesLineUnitPrice(SalesLine,UnitPrice * 2);
      LineAmount[4] := SalesLine."Amount Including VAT";
      NewUnitPrice := SalesLine."Unit Price";

      ModifySalesLineUnitPrice(SalesLine,UnitPrice);

      CreditLimit := ROUND(LineAmount[1] + LineAmount[2] + LineAmount[4] - 0.01);
      ModifyCreditLimitLCY(CustomerNo,CreditLimit);

      LibraryVariableStorage.Enqueue(LineAmount[2] + LineAmount[4]);
      LibraryVariableStorage.Enqueue(LineAmount[4]);
      LibraryVariableStorage.Enqueue(LineAmount[1] + LineAmount[2] + LineAmount[4]);
      LibraryVariableStorage.Enqueue(CreditLimit);

      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreditLimitSalesDocLineUnitPriceDecrease@158(DocumentType@1007 : Option;VAR NewUnitPrice@1000 : Decimal) : Code[20];
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      CustomerNo@1011 : Code[20];
      GLAccountNo@1010 : Code[20];
      UnitPrice@1006 : Decimal;
      LineAmount@1001 : ARRAY [4] OF Decimal;
      CreditLimit@1002 : Decimal;
    BEGIN
      CreateCustomerAndGLAccountWithVATSetup(CustomerNo,GLAccountNo);

      // Create Post Sales Document to get Customer's Balance
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[1] := SalesLine."Amount Including VAT";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Create Sales Document to get "other" Outstanding
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[2] := SalesLine."Amount Including VAT";

      // Create new Sales Document to get "current" old/new Outstanding
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,CustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDecInRange(100,200,2));
      LineAmount[3] := SalesLine."Amount Including VAT";
      UnitPrice := SalesLine."Unit Price";

      ModifySalesLineUnitPrice(SalesLine,UnitPrice / 2);
      LineAmount[4] := SalesLine."Amount Including VAT";
      NewUnitPrice := SalesLine."Unit Price";

      ModifySalesLineUnitPrice(SalesLine,UnitPrice);

      CreditLimit := ROUND(LineAmount[1] + LineAmount[2] + LineAmount[4] - 0.01);
      ModifyCreditLimitLCY(CustomerNo,CreditLimit);

      LibraryVariableStorage.Enqueue(LineAmount[2] + LineAmount[4]);
      LibraryVariableStorage.Enqueue(LineAmount[4]);
      LibraryVariableStorage.Enqueue(LineAmount[1] + LineAmount[2] + LineAmount[4]);
      LibraryVariableStorage.Enqueue(CreditLimit);

      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndAssignItemTrackingOnItemJournal@106() ItemNo : Code[20];
    VAR
      ItemJournalLine@1002 : Record 83;
      LibraryUtility@1000 : Codeunit 131000;
      ItemJournal@1001 : TestPage 40;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,CreateItemWithItemTrackingCode);
      ItemNo := ItemJournalLine."Item No.";
      COMMIT;
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLine."Journal Batch Name");
      LibraryVariableStorage.Enqueue(TRUE); // TRUE to handle Item Tracking Lines Page for Assigning Serial No.
      ItemJournal.ItemTrackingLines.INVOKE; // Item Tracking Lines is handled in ItemTrackingPageHandler.
      ItemJournal.Post.INVOKE;
      LibraryUtility.GenerateGUID;  // Hack to fix New General Batch Creation issue with Generate GUID.
    END;

    LOCAL PROCEDURE CreateAndAssignItemTrackingOnSalesOrder@107(CustomerNo@1001 : Code[20];ItemNo@1000 : Code[20]) No : Code[20];
    VAR
      SalesOrder@1002 : TestPage 42;
    BEGIN
      No := CreateSalesOrderWithPage(CustomerNo,ItemNo);
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      LibraryVariableStorage.Enqueue(FALSE); // FALSE to handle Item Tracking Lines Page for Selecting Entries.
      SalesOrder.SalesLines.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@50(SalesHeader@1000 : Record 36) DocumentNo : Code[20];
    VAR
      SalesHeader2@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Post Sales Order as Ship, create Sales Invoice using Get Shipment Line and post it.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      SalesLine.VALIDATE("Document Type",SalesHeader2."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader2."No.");
      LibrarySales.GetShipmentLines(SalesLine);
      DocumentNo := GetPostedDocumentNo(SalesHeader2."Posting No. Series");
      LibrarySales.PostSalesDocument(SalesHeader2,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerCard@76(Customer@1000 : Record 18);
    VAR
      CustomerCard@1001 : TestPage 21;
    BEGIN
      CustomerCard.OPENNEW;
      CustomerCard."No.".SETVALUE(Customer."No.");
      CustomerCard."Gen. Bus. Posting Group".SETVALUE(Customer."Gen. Bus. Posting Group");
      CustomerCard."VAT Bus. Posting Group".SETVALUE(Customer."VAT Bus. Posting Group");
      CustomerCard."Customer Posting Group".SETVALUE(Customer."Customer Posting Group");
      CustomerCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateCustomerInvDiscount@56(MinimumAmount@1002 : Decimal) : Code[20];
    VAR
      CustInvoiceDisc@1000 : Record 19;
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,Customer."No.",'',MinimumAmount);
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));  // Take Random Discount.
      CustInvoiceDisc.MODIFY(TRUE);
      EXIT(CustInvoiceDisc.Code);
    END;

    LOCAL PROCEDURE CreateCustWithPaymentMethod@30(PaymentMethodCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Method Code",PaymentMethodCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTermsCode@121(PaymentTermsCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      Customer.GET(CreateCustomer);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@96() : Code[20];
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1000 : Record 352;
      Customer@1004 : Record 18;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",DimensionValue."Dimension Code",DimensionValue.Code);

      // Storing Dimension Code and Dimension Value Code in Global Variables to use it in Page Handler.
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Code");
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimit@125(CreditLimitAmt@1006 : Decimal) : Code[20];
    VAR
      Customer@1004 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        LibrarySales.CreateCustomer(Customer);
        VALIDATE("Credit Limit (LCY)",CreditLimitAmt);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateItem@64() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Unit Price.
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAssembledItem@159(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        LibraryAssembly.SetupAssemblyItem(
          Item,"Costing Method"::Standard,"Costing Method"::Standard,"Replenishment System"::Assembly,
          '',FALSE,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5),
          LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
        VALIDATE("Assembly Policy","Assembly Policy"::"Assemble-to-Order");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@74() : Code[20];
    VAR
      Item@1001 : Record 27;
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      Item.GET(CreateItem);
      Item.VALIDATE("Item Tracking Code",FindItemTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemAndExtendedText@161(VAR Item@1001 : Record 27) : Text[50];
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);

      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@93(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      LibraryInventory@1003 : Codeunit 132201;
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@69(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
      LibraryInventory@1003 : Codeunit 132201;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        1);  // Take 1 as Quantity for Item Tracking.

      // Validate Document No. as combination of Journal Batch Name and Line No.
      ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateOrderPaymentMethod@80(VAR SalesHeader@1000 : Record 36;PaymentMethodCode@1001 : Code[10]) : Decimal;
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      // Using LibraryRandom for random value in Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustWithPaymentMethod(PaymentMethodCode));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      EXIT(SalesLine."Amount Including VAT");
    END;

    LOCAL PROCEDURE CreateSalesLine@48(VAR SalesLine@1001 : Record 37;SalesHeader@1000 : Record 36;Type@1002 : Option;No@1003 : Code[20];Quantity@1004 : Decimal;UnitPrice@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,Quantity);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" / 2);  // Value necessary for test case.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesBlankLines@146(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      i@1002 : Integer;
    BEGIN
      WITH SalesLine DO
        FOR i := 1 TO LibraryRandom.RandInt(5) DO BEGIN
          LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type::"G/L Account",'',0);
          VALIDATE(Description,LibraryUtility.GenerateGUID);
          MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE CreateSalesLineWithExtendedText@162(SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(20,2),
        LibraryRandom.RandDec(100,2));
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE DeleteSalesLine@163(DocumentNo@1000 : Code[20];Type@1001 : Option;ItemNo@1003 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      FindSalesLineByType(SalesLine,DocumentNo,Type,ItemNo);
      SalesLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocumentFillUnitPrice@139(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1002 : Option;CustomerNo@1004 : Code[20];UnitPrice@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      ModifySalesLineUnitPrice(SalesLine,UnitPrice);
    END;

    LOCAL PROCEDURE CreateSalesDocument@68(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1003 : Option;SelltoCustomerNo@1005 : Code[20];Type@1001 : Option;No@1004 : Code[20]);
    BEGIN
      // Create Sales Order using Random Quantity for Sales Line.
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,SelltoCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandDec(10,2));  // Using Random Number Generator for Random Quantity.
    END;

    LOCAL PROCEDURE CreateSaleHeader@6(VAR SalesHeader@1000 : Record 36;DocumentType@1002 : Option);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,Customer."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPage@81(CustomerNo@1000 : Code[20];ItemNo@1001 : Code[20]) SalesOrderNo : Code[20];
    VAR
      SalesLine@1003 : Record 37;
      SalesOrder@1002 : TestPage 42;
    BEGIN
      SalesOrder.OPENNEW;
      SalesOrder."No.".ASSISTEDIT;  // No. Series Page  is handled in 'NoSeriesListPageHandler'.
      SalesOrder."Sell-to Customer No.".SETVALUE(CustomerNo);
      SalesOrder.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      SalesOrder.SalesLines."No.".SETVALUE(ItemNo);
      SalesOrder.SalesLines.Quantity.SETVALUE(1);  // Take Quantity 1 as value is not important.
      SalesOrder.SalesLines.NEW;
      SalesOrderNo := SalesOrder."No.".VALUE;
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithReceivableSetup@41(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37);
    BEGIN
      // Create Customer with Cust. Invoice Discount and create Sales Order.
      // Use Random for Minimum Amount on Cust. Invoice Discount, Quantity and Unit Price.
      UpdateSalesReceivablesSetupForCalcInvDiscount(TRUE);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomerInvDiscount(200 + LibraryRandom.RandDec(100,2)),
        SalesLine.Type::Item,CreateItem); // Add 200 to control Minimum Amount on Cust. Invoice Discount.
      ModifySalesLineUnitPrice(SalesLine,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithSalesCode@27(VAR SalesHeader@1000 : Record 36;VAR StandardSalesLine@1001 : Record 171;ItemNo@1007 : Code[20];ShortcutDimension1Code@1003 : Code[20];ShortcutDimension2Code@1005 : Code[20]);
    VAR
      StandardSalesCode@1006 : Record 170;
      Customer@1004 : Record 18;
      StandardCustomerSalesCode@1002 : Record 172;
    BEGIN
      LibrarySales.CreateStandardSalesCode(StandardSalesCode);
      LibrarySales.CreateStandardSalesLine(StandardSalesLine,StandardSalesCode.Code);
      ModifyStandardSalesLine(StandardSalesLine,ItemNo,ShortcutDimension1Code,ShortcutDimension2Code);
      StandardSalesLine.GET(StandardSalesLine."Standard Sales Code",StandardSalesLine."Line No.");
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesCode.Code);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      StandardCustomerSalesCode.InsertSalesLines(SalesHeader);
    END;

    LOCAL PROCEDURE CreateShipSalesOrderWithPricesInclVATAndLineDisc@235(VAR SalesHeader@1002 : Record 36;VAR VATPercent@1001 : Decimal;LineDiscAmt@1005 : Decimal;PricesInclVAT@1000 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,LibrarySales.CreateCustomerNo);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        MODIFY(TRUE);

        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,
          LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(100,1000));
        VATPercent := SalesLine."VAT %";
        SalesLine.VALIDATE("Line Discount Amount",LineDiscAmt);
        SalesLine.MODIFY(TRUE);
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesInvWithPricesInclVAT@136(VAR SalesLine@1000 : Record 37;CustNo@1001 : Code[20];PricesInclVAT@1002 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Invoice,CustNo);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        MODIFY(TRUE);
        SalesLine.VALIDATE("Document Type","Document Type");
        SalesLine.VALIDATE("Document No.","No.");
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithOverdueCust@202(VAR SalesHeader@1000 : Record 36;VAR OverdueAmount@1001 : Decimal);
    VAR
      SalesReceivablesSetup@1003 : Record 311;
      CustNo@1002 : Code[20];
    BEGIN
      UpdateSalesReceivablesSetup(FALSE,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");
      CustNo := CreateCustomerWithCreditLimit(LibraryRandom.RandDec(10,2));
      MockCustLedgEntryWithDueDate(CustNo,WORKDATE);
      OverdueAmount := MockCustLedgEntryWithDueDate(CustNo,WORKDATE - 1);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustNo);
    END;

    LOCAL PROCEDURE CreateStandardSalesLinesWithItemForCustomer@133(VAR StandardSalesLine@1001 : Record 171;VAR StandardCustomerSalesCode@1000 : Record 172);
    VAR
      StandardSalesCode@1006 : Record 170;
      Customer@1004 : Record 18;
    BEGIN
      LibrarySales.CreateStandardSalesCode(StandardSalesCode);

      LibrarySales.CreateStandardSalesLine(StandardSalesLine,StandardSalesCode.Code);
      StandardSalesLine.Type := StandardSalesLine.Type::Item;
      StandardSalesLine.Quantity := LibraryRandom.RandInt(10);
      StandardSalesLine."No." := CreateItem;
      StandardSalesLine.MODIFY;

      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesCode.Code);
    END;

    LOCAL PROCEDURE CreateSalesPriceWithUnitPrice@66(VAR SalesPrice@1000 : Record 7002;CustomerNo@1002 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;UnitPriceAmount@1001 : Decimal);
    BEGIN
      LibraryCosting.CreateSalesPrice(SalesPrice,SalesPrice."Sales Type"::Customer,CustomerNo,ItemNo,WORKDATE,'','','',Quantity);
      SalesPrice.VALIDATE("Unit Price",UnitPriceAmount);
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifySalesOrder@32(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomerInvDiscount(0));
      CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10) * 2,LibraryRandom.RandDec(10,2) +
        100);
    END;

    LOCAL PROCEDURE CreateTempCustomer@75(VAR TempCustomer@1000 : TEMPORARY Record 18);
    VAR
      GenBusinessPostingGroup@1003 : Record 250;
      VATBusinessPostingGroup@1002 : Record 323;
    BEGIN
      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      LibraryERM.FindVATBusinessPostingGroup(VATBusinessPostingGroup);
      TempCustomer.INIT;
      TempCustomer.VALIDATE("No.",GenerateCustomerNo);
      TempCustomer.INSERT;
      TempCustomer.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
      TempCustomer.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
      TempCustomer.VALIDATE("Customer Posting Group",LibrarySales.FindCustomerPostingGroup);
      TempCustomer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccount@172() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      VATPostingSetup@1001 : Record 325;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Sale);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateSalesLineDiscount@113(VAR SalesLineDiscount@1001 : Record 7004;SalesPrice@1002 : Record 7002);
    BEGIN
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,SalesPrice."Item No.",SalesLineDiscount."Sales Type"::"All Customers",'',
        WORKDATE,'','',SalesPrice."Unit of Measure Code",SalesPrice."Minimum Quantity" * 2);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));  // Using Random Number Generator for Random Line Discount.
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@111(VAR SalesLine@1002 : Record 37;SalesPrice@1000 : Record 7002);
    VAR
      Customer@1003 : Record 18;
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesPrice."Item No.",SalesPrice."Minimum Quantity" / 2);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesPrice."Item No.",SalesPrice."Minimum Quantity");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesPrice."Item No.",SalesPrice."Minimum Quantity" * 2);
    END;

    LOCAL PROCEDURE CreateSalesPrice@110(VAR SalesPrice@1001 : Record 7002);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"All Customers",'',Item."No.",WORKDATE,'','',Item."Base Unit of Measure",
        LibraryRandom.RandDec(50,2));
      SalesPrice.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Using Random Number Generator for Random Unit Price.
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesPriceWithMinimumQuantity@176(VAR SalesPrice@1001 : Record 7002;MinQty@1000 : Decimal);
    BEGIN
      SalesPrice.INIT;
      SalesPrice.VALIDATE("Sales Type",SalesPrice."Sales Type"::"All Customers");
      SalesPrice.VALIDATE("Item No.",LibraryInventory.CreateItemNo);
      SalesPrice.VALIDATE("Minimum Quantity",MinQty);
      SalesPrice.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@72() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateBankAccountNo@148() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreatePaymentMethodCode@145(BalAccountType@1000 : Option) : Code[10];
    VAR
      PaymentMethod@1002 : Record 289;
    BEGIN
      LibraryERM.CreatePaymentMethod(PaymentMethod);
      WITH PaymentMethod DO BEGIN
        VALIDATE("Bal. Account Type",BalAccountType);
        CASE BalAccountType OF
          "Bal. Account Type"::"G/L Account":
            VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          "Bal. Account Type"::"Bank Account":
            VALIDATE("Bal. Account No.",CreateBankAccountNo);
        END;
        MODIFY;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateCustomerAndGLAccountWithVATSetup@165(VAR CustomerNo@1003 : Code[20];VAR GLAccountNo@1004 : Code[20]);
    VAR
      Customer@1000 : Record 18;
      GLAccount@1001 : Record 15;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
      IF NOT VATPostingSetup.GET(Customer."VAT Bus. Posting Group",GLAccount."VAT Prod. Posting Group") THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Customer."VAT Bus. Posting Group",GLAccount."VAT Prod. Posting Group");
      CustomerNo := Customer."No.";
      GLAccountNo := GLAccount."No."
    END;

    LOCAL PROCEDURE MockCustLedgEntryWithDueDate@206(CustNo@1000 : Code[20];DueDate@1001 : Date) : Decimal;
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(CustLedgerEntry,FIELDNO("Entry No."));
        "Customer No." := CustNo;
        "Posting Date" := WORKDATE;
        "Due Date" := DueDate;
        Open := TRUE;
        INSERT;
        EXIT(MockDtldCustLedgEntry("Entry No.","Customer No."));
      END;
    END;

    LOCAL PROCEDURE MockDtldCustLedgEntry@219(CustLedgEntryNo@1000 : Integer;CustNo@1002 : Code[20]) : Decimal;
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      WITH DetailedCustLedgEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(DetailedCustLedgEntry,FIELDNO("Entry No."));
        "Cust. Ledger Entry No." := CustLedgEntryNo;
        "Customer No." := CustNo;
        "Posting Date" := WORKDATE;
        Amount := LibraryRandom.RandDecInRange(100,500,2);
        "Amount (LCY)" := Amount;
        "Ledger Entry Amount" := TRUE;
        INSERT;
        EXIT("Amount (LCY)");
      END;
    END;

    LOCAL PROCEDURE CopyPricesScenarioOnSalesPricePage@236(VAR SalesPrice@1003 : Record 7002;VAR CopyToCustomerNo@1001 : Code[20];VAR SalesPrices@1002 : TestPage 7002);
    VAR
      CopyFromCustomerNo@1000 : Code[20];
    BEGIN
      CopyToCustomerNo := LibrarySales.CreateCustomerNo;
      CopyFromCustomerNo := LibrarySales.CreateCustomerNo;
      CreateSalesPriceWithUnitPrice(
        SalesPrice,CopyFromCustomerNo,LibraryInventory.CreateItemNo,0,LibraryRandom.RandDec(100,2));
      SalesPrices.OPENEDIT;
      SalesPrices.SalesTypeFilter.SETVALUE('Customer');
      SalesPrices.SalesCodeFilterCtrl.SETVALUE(CopyToCustomerNo);
      LibraryVariableStorage.Enqueue(CopyFromCustomerNo);
    END;

    LOCAL PROCEDURE RunReccuringSalesIvoice@150(DocumentDate@1000 : Date;StandardSalesLine@1003 : Record 171) : Code[20];
    VAR
      SalesLine@1002 : Record 37;
      StandardCustomerSalesCode@1005 : Record 172;
    BEGIN
      LibraryVariableStorage.Enqueue(DocumentDate);
      LibraryVariableStorage.Enqueue(WORKDATE);
      StandardCustomerSalesCode.SETRANGE(Code,StandardSalesLine."Standard Sales Code");
      REPORT.RUN(REPORT::"Create Recurring Sales Inv.",TRUE,FALSE,StandardCustomerSalesCode);

      SalesLine.SETRANGE(Type,StandardSalesLine.Type);
      SalesLine.SETRANGE("No.",StandardSalesLine."No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(SalesLine."Document No.");

      EXIT('');
    END;

    LOCAL PROCEDURE DueDateOnSalesDocumentAfterCopyDocument@124(SalesHeaderDocumentType@1000 : Option);
    VAR
      SalesHeader@1006 : Record 36;
      SalesHeader2@1598 : Record 36;
      SalesLine@1005 : Record 37;
      PaymentTerms@1004 : Record 3;
      SalesInvoiceNo@1002 : Code[20];
      DocumentType@1001 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Setup: Create and Post Sales Order and Create Sales Document.
      Initialize;
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomerWithPaymentTermsCode(PaymentTerms.Code),
        SalesLine.Type::Item,CreateItem);
      SalesInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeaderDocumentType,SalesHeader."Sell-to Customer No.");

      // Exercise: Run Copy Sales Document Report with Include Header,Recalculate Lines as True.
      SalesCopyDocument(SalesHeader2,SalesInvoiceNo,DocumentType::"Posted Invoice",TRUE);

      // Verify: Verify Due Date on Sale Header.
      VerifyDueDateOnSalesHeader(SalesHeader2,PaymentTerms."Due Date Calculation");
    END;

    LOCAL PROCEDURE FindBlockedCustomer@90(VAR Customer@1000 : Record 18;CustomerNo@1001 : Code[20]);
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE(Blocked,Customer.Blocked::Ship);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemTrackingCode@73() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("SN Specific Tracking",TRUE);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindPostedSalesOrderToInvoice@47(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesLine@116(VAR SalesLine@1002 : Record 37;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETFILTER(Type,'<>%1',Type::" ");
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE FindICPartner@83() : Code[20];
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      ICPartner.SETRANGE(Blocked,FALSE);
      ICPartner.FINDFIRST;
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE FindICGLAccount@82() : Code[20];
    VAR
      ICGLAccount@1000 : Record 410;
    BEGIN
      ICGLAccount.SETRANGE("Account Type",ICGLAccount."Account Type"::Posting);
      ICGLAccount.SETRANGE(Blocked,FALSE);
      ICGLAccount.FINDFIRST;
      EXIT(ICGLAccount."No.");
    END;

    LOCAL PROCEDURE FindSalesLineByType@175(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20];Type@1002 : Option;ItemNo@1003 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,Type);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDLAST;
    END;

    LOCAL PROCEDURE GenerateCustomerNo@53() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibraryUtility@1001 : Codeunit 131000;
    BEGIN
      EXIT(COPYSTR(LibraryUtility.GenerateRandomCode(Customer.FIELDNO("No."),DATABASE::Customer),
          1,LibraryUtility.GetFieldLength(DATABASE::Customer,Customer.FIELDNO("No."))));
    END;

    LOCAL PROCEDURE GetPostedDocumentNo@54(NoSeries@1000 : Code[10]) : Code[20];
    VAR
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      CLEAR(NoSeriesManagement);
      EXIT(NoSeriesManagement.GetNextNo(NoSeries,WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE GetSalesCreditMemoHeaderNo@26(DocumentNo@1000 : Code[20]) : Code[20];
    VAR
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Pre-Assigned No.",DocumentNo);
      SalesCrMemoHeader.FINDFIRST;
      EXIT(SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE GetSalesInvoiceHeaderNo@25(DocumentNo@1000 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",DocumentNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE GetSalesOrderHeader@3(VAR SalesHeader@1000 : Record 36;QuoteNo@1001 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("Quote No.",QuoteNo);
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE GetSalesInvoiceHeaderNoOrder@78(DocumentNo@1000 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",DocumentNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE GetSalesShipmentHeaderNo@280(DocumentNo@1000 : Code[20]) : Code[20];
    VAR
      SalesShipmentHeader@1001 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",DocumentNo);
      SalesShipmentHeader.FINDFIRST;
      EXIT(SalesShipmentHeader."No.");
    END;

    LOCAL PROCEDURE GetSalesDocumentShipmentLines@144(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LibrarySales.GetShipmentLines(SalesLine);
    END;

    LOCAL PROCEDURE GetReceivableAccNo@104(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      Customer@1000 : Record 18;
      CustomerPostingGroup@1002 : Record 92;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      EXIT(CustomerPostingGroup."Receivables Account");
    END;

    LOCAL PROCEDURE CalcTotalLineAmount@127(DocType@1002 : Option;DocNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        CALCSUMS("Amount Including VAT");
        EXIT("Amount Including VAT");
      END;
    END;

    LOCAL PROCEDURE ModifyCustLedgerEntry@61(VAR CustLedgerEntry@1005 : Record 21;DocumentNo@1001 : Code[20];CustomerNo@1006 : Code[20]);
    VAR
      CustomerLedgerEntries@1000 : TestPage 25;
      DueDate@1004 : Date;
      PmtDiscountDate@1003 : Date;
      RemainingPmtDiscPossible@1002 : Decimal;
    BEGIN
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      PmtDiscountDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      RemainingPmtDiscPossible := LibraryRandom.RandDec(10,2);
      CustomerLedgerEntries.OPENEDIT;
      CustomerLedgerEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      CustomerLedgerEntries.FILTER.SETFILTER("Customer No.",CustomerNo);
      CustomerLedgerEntries."Due Date".SETVALUE(DueDate);
      CustomerLedgerEntries."Pmt. Discount Date".SETVALUE(PmtDiscountDate);
      CustomerLedgerEntries."Remaining Pmt. Disc. Possible".SETVALUE(RemainingPmtDiscPossible);
      CustomerLedgerEntries.OK.INVOKE;
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifySalesLineUnitPrice@52(VAR SalesLine@1000 : Record 37;UnitPrice@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyStandardSalesLine@24(StandardSalesLine@1000 : Record 171;ItemNo@1003 : Code[20];ShortcutDimension1Code@1001 : Code[20];ShortcutDimension2Code@1002 : Code[20]);
    BEGIN
      StandardSalesLine.VALIDATE(Type,StandardSalesLine.Type::Item);
      StandardSalesLine.VALIDATE("No.",ItemNo);
      StandardSalesLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      StandardSalesLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      StandardSalesLine.VALIDATE("Shortcut Dimension 2 Code",ShortcutDimension2Code);
      StandardSalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyUnitPrice@138(VAR SalesHeader@1000 : Record 36) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDLAST;
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      EXIT(SalesLine."Unit Price");
    END;

    LOCAL PROCEDURE ModifyCreditLimitLCY@156(CustomerNo@1001 : Code[20];CreditLimit@1000 : Decimal);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Credit Limit (LCY)",CreditLimit);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenAndUpdateSalesInvoicePage@49(VAR SalesInvoice@1000 : TestPage 43;SalesInvoiceNo@1004 : Code[20];ItemNo@1003 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesInvoiceNo);
      SalesInvoice.SalesLines.Type.SETVALUE(FORMAT(SalesLine.Type::Item));
      SalesInvoice.SalesLines."No.".SETVALUE(ItemNo);
      SalesInvoice.SalesLines.Quantity.SETVALUE(Quantity);
    END;

    LOCAL PROCEDURE OpenSalesOrderPageWithNewOrder@153(CustomerNo@1003 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      SalesOrder@1000 : TestPage 42;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder."Sell-to Customer No.".SETVALUE(CustomerNo);
    END;

    LOCAL PROCEDURE OpenSalesOrderStatistics@45(No@1001 : Code[20]);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.Statistics.INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesReturnOrder@84(No@1000 : Code[20]);
    VAR
      SalesReturnOrder@1001 : TestPage 6630;
    BEGIN
      SalesReturnOrder.OPENVIEW;
      SalesReturnOrder.FILTER.SETFILTER("No.",No);
      SalesReturnOrder.MoveNegativeLines.INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesInvoicePageAndValidateUnitPrice@134(No@1001 : Code[20]);
    VAR
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",No);
      SalesInvoice.SalesLines."Unit Price".SETVALUE(SalesInvoice.SalesLines."Unit Price".VALUE);
    END;

    LOCAL PROCEDURE OpenSalesOrderAndValidateUnitPrice@151(DocumentNo@1001 : Code[20];NewUnitPrice@1002 : Decimal);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",DocumentNo);
      SalesOrder.SalesLines."Unit Price".SETVALUE(NewUnitPrice);
    END;

    LOCAL PROCEDURE OpenSalesInvoiceAndValidateUnitPrice@149(DocumentNo@1001 : Code[20];NewUnitPrice@1002 : Decimal);
    VAR
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",DocumentNo);
      SalesInvoice.SalesLines."Unit Price".SETVALUE(NewUnitPrice);
    END;

    LOCAL PROCEDURE PostSalesOrder@23(VAR SalesHeader@1000 : Record 36) PostedSaleInvoiceNo : Code[20];
    BEGIN
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      PostedSaleInvoiceNo := FindPostedSalesOrderToInvoice(SalesHeader."No.");
    END;

    LOCAL PROCEDURE SalesCopyDocument@36(SalesHeader@1000 : Record 36;DocumentNo@1003 : Code[20];DocumentType@1002 : Option;ReCalculateLines@1004 : Boolean);
    VAR
      CopySalesDocument@1001 : Report 292;
    BEGIN
      CopySalesDocument.SetSalesHeader(SalesHeader);
      CopySalesDocument.InitializeRequest(DocumentType,DocumentNo,TRUE,ReCalculateLines);
      CopySalesDocument.USEREQUESTPAGE(FALSE);
      CopySalesDocument.RUN;
    END;

    LOCAL PROCEDURE UpdateCreditLimitInCustomer@39(VAR Customer@1000 : Record 18;CreditLimitAmount@1001 : Decimal);
    BEGIN
      Customer.VALIDATE("Credit Limit (LCY)",CreditLimitAmount);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@22(NewStockOutWarning@1001 : Boolean;CreditWarning@1002 : Option);
    BEGIN
      LibrarySales.SetStockoutWarning(NewStockOutWarning);
      LibrarySales.SetCreditWarnings(CreditWarning);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@114(CustomerNo@1004 : Code[20];ItemNo@1005 : Code[20]);
    VAR
      Customer@1001 : Record 18;
      GLAccount@1003 : Record 15;
      GeneralPostingSetup@1002 : Record 252;
      Item@1000 : Record 27;
    BEGIN
      Customer.GET(CustomerNo);
      Item.GET(ItemNo);
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("COGS Account",GLAccount."No.");
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTextInExtendedTextLine@164(VAR ExtendedTextLine@1000 : Record 280;TextLineText@1001 : Text[50]);
    BEGIN
      ExtendedTextLine.VALIDATE(Text,TextLineText);
      ExtendedTextLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAmountOnGLEntry@51(DocumentNo@1001 : Code[20];GLAccountNo@1000 : Code[20];Amount@1003 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustomer@42(Customer@1000 : Record 18);
    VAR
      Customer2@1001 : Record 18;
    BEGIN
      Customer2.GET(Customer."No.");
      Customer2.TESTFIELD("Gen. Bus. Posting Group",Customer."Gen. Bus. Posting Group");
      Customer2.TESTFIELD("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");
      Customer2.TESTFIELD("Customer Posting Group",Customer."Customer Posting Group");
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FIND('+');
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      CustLedgerEntry.TESTFIELD("Remaining Amount",0);

      CustLedgerEntry.NEXT;
      CustLedgerEntry.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(
        Amount,CustLedgerEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,CustLedgerEntry.FIELDCAPTION(Amount),Amount,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustLedgerEntryDisc@65(CustLedgerEntry@1004 : Record 21;PostedSaleInvoiceNo@1000 : Code[20]);
    VAR
      CustLedgerEntry2@1001 : Record 21;
    BEGIN
      CustLedgerEntry2.SETRANGE("Document No.",PostedSaleInvoiceNo);
      CustLedgerEntry2.FINDFIRST;
      CustLedgerEntry2.TESTFIELD("Due Date",CustLedgerEntry."Due Date");
      CustLedgerEntry2.TESTFIELD("Pmt. Discount Date",CustLedgerEntry."Pmt. Discount Date");
      CustLedgerEntry2.TESTFIELD("Remaining Pmt. Disc. Possible",CustLedgerEntry."Remaining Pmt. Disc. Possible");
    END;

    LOCAL PROCEDURE VerifyDimensionOnSalesOrder@102(No@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.Dimensions.INVOKE;  // Dimension is Handled in 'DimensionSetEntriesPageHandler'.
    END;

    LOCAL PROCEDURE VerifyItemTrackingOnPostedSalesDocument@108(No@1004 : Code[20]);
    VAR
      PostedSalesInvoice@1000 : TestPage 132;
    BEGIN
      PostedSalesInvoice.OPENVIEW;
      PostedSalesInvoice.FILTER.SETFILTER("No.",No);
      PostedSalesInvoice.SalesInvLines.ItemTrackingEntries.INVOKE;  // PostedItemTrackingLines Page is handled in PostedItemTrackingLinesPageHadler.
    END;

    LOCAL PROCEDURE VerifyNavigateEntry@79(ExtDocNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      SalesShipmentHeader@1004 : Record 110;
      ReturnReceiptHeader@1005 : Record 6660;
      SalesCrMemoHeader@1006 : Record 114;
      Navigate@1002 : TestPage 344;
    BEGIN
      Navigate.OPENEDIT;
      Navigate.ContactType.SETVALUE(FORMAT(Navigate.ContactType.GETOPTION(3)));  // Take 3 as index for Customer option.
      Navigate.ContactNo.SETVALUE(ExtDocNo);
      Navigate.ExtDocNo.SETVALUE(ExtDocNo);
      Navigate.Find.INVOKE;

      SalesInvoiceHeader.SETRANGE("External Document No.",ExtDocNo);
      Navigate.FILTER.SETFILTER("Table ID",FORMAT(DATABASE::"Sales Invoice Header"));
      Navigate."No. of Records".ASSERTEQUALS(SalesInvoiceHeader.COUNT);
      Navigate.NEXT;

      SalesShipmentHeader.SETRANGE("External Document No.",ExtDocNo);
      Navigate.FILTER.SETFILTER("Table ID",FORMAT(DATABASE::"Sales Shipment Header"));
      Navigate."No. of Records".ASSERTEQUALS(SalesShipmentHeader.COUNT);
      Navigate.NEXT;

      ReturnReceiptHeader.SETRANGE("External Document No.",ExtDocNo);
      Navigate.FILTER.SETFILTER("Table ID",FORMAT(DATABASE::"Return Receipt Header"));
      Navigate."No. of Records".ASSERTEQUALS(ReturnReceiptHeader.COUNT);
      Navigate.NEXT;

      SalesCrMemoHeader.SETRANGE("External Document No.",ExtDocNo);
      Navigate.FILTER.SETFILTER("Table ID",FORMAT(DATABASE::"Sales Cr.Memo Header"));
      Navigate."No. of Records".ASSERTEQUALS(SalesCrMemoHeader.COUNT);
    END;

    LOCAL PROCEDURE VerifySalesInvoice@20(DocumentNo@1000 : Code[20];SalesLine@1002 : Record 37);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      SalesInvoiceHeader.GET(DocumentNo);
      SalesInvoiceHeader.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Type,SalesLine.Type);
      SalesInvoiceLine.TESTFIELD("No.",SalesLine."No.");
      SalesInvoiceLine.TESTFIELD(Quantity,SalesLine.Quantity);
      SalesInvoiceLine.TESTFIELD(Amount,SalesLine.Amount);
      SalesInvoiceLine.TESTFIELD("Unit Price",SalesLine."Unit Price");
    END;

    LOCAL PROCEDURE VerifySalesShipment@256(SalesLine@1001 : Record 37;DocumentNo@1000 : Code[20]);
    VAR
      SalesShipmentHeader@1003 : Record 110;
      SalesShipmentLine@1004 : Record 111;
    BEGIN
      SalesShipmentHeader.GET(DocumentNo);
      SalesShipmentHeader.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.FINDFIRST;
      SalesShipmentLine.TESTFIELD(Type,SalesLine.Type);
      SalesShipmentLine.TESTFIELD("No.",SalesLine."No.");
      SalesShipmentLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySalesOrder@120(SalesHeaderNo@1001 : Code[20];BillToCustomerNo@1000 : Code[20];Quantity@1004 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Verify 1: Verify Bill To Customer No in Sales Header.
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeaderNo);
      SalesHeader.TESTFIELD("Bill-to Customer No.",BillToCustomerNo);

      // Verify 2: Verify Bill To Customer No in Sales Line.
      FindSalesLine(SalesLine,SalesLine."Document Type"::Order,SalesHeaderNo);
      SalesLine.TESTFIELD("Bill-to Customer No.",BillToCustomerNo);
      SalesLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesCreditMemo@19(DocumentNo@1002 : Code[20];SalesLine@1000 : Record 37);
    VAR
      SalesCrMemoHeader@1003 : Record 114;
      SalesCrMemoLine@1004 : Record 115;
    BEGIN
      SalesCrMemoHeader.GET(DocumentNo);
      SalesCrMemoHeader.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.FINDFIRST;
      SalesCrMemoLine.TESTFIELD(Type,SalesLine.Type);
      SalesCrMemoLine.TESTFIELD("No.",SalesLine."No.");
      SalesCrMemoLine.TESTFIELD(Quantity,SalesLine.Quantity);
      SalesCrMemoLine.TESTFIELD(Amount,SalesLine.Amount);
      SalesCrMemoLine.TESTFIELD("Unit Price",SalesLine."Unit Price");
    END;

    LOCAL PROCEDURE VerifySalesBlankLinesOnCopiedDocument@167(DocumentNo@1000 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",'');
      IF SalesLine.FINDSET THEN
        REPEAT
          Assert.AreEqual('',SalesLine."Sell-to Customer No.",BlankSellToCustomerFieldErr);
        UNTIL SalesLine.NEXT = 0;
    END;

    [ModalPageHandler]
    PROCEDURE SalesCodePageHandler@18(VAR StandardCustomerSalesCodes@1000 : TestPage 173);
    BEGIN
      StandardCustomerSalesCodes.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetupForCalcInvDiscount@43(CalcInvDiscount@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDiscount);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifySalesLine@29(StandardSalesLine@1000 : Record 171;DocumentNo@1001 : Code[20];ShortcutDimension1Code@1003 : Code[20];ShortcutDimension2Code@1004 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD(Type,StandardSalesLine.Type);
      SalesLine.TESTFIELD("No.",StandardSalesLine."No.");
      SalesLine.TESTFIELD(Quantity,StandardSalesLine.Quantity);
      SalesLine.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      SalesLine.TESTFIELD("Shortcut Dimension 2 Code",ShortcutDimension2Code);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceAndShipmentHeader@88(SalesHeaderNo@1002 : Code[20]);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",SalesHeaderNo);
      Assert.IsFalse(SalesInvoiceHeader.FINDFIRST,STRSUBSTNO(SalesDocumentFoundErr,SalesInvoiceHeader.TABLECAPTION,SalesHeaderNo));
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeaderNo);
      Assert.IsFalse(SalesShipmentHeader.FINDFIRST,STRSUBSTNO(SalesDocumentFoundErr,SalesShipmentHeader.TABLECAPTION,SalesHeaderNo));
    END;

    LOCAL PROCEDURE VerifyCopySalesLine@37(PostedDocumentNo@1000 : Code[20];DocumentNo@1001 : Code[20]);
    VAR
      SalesInvoiceLine@1002 : Record 113;
      SalesLine@1003 : Record 37;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",PostedDocumentNo);
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;

      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;

      SalesLine.TESTFIELD("No.",SalesInvoiceLine."No.");
      SalesLine.TESTFIELD(Quantity,SalesInvoiceLine.Quantity);
      SalesLine.TESTFIELD("Unit Price",SalesInvoiceLine."Unit Price");
    END;

    LOCAL PROCEDURE VerifyUnitPriceAndLineDiscountOnSalesLine@115(SalesLine@1001 : Record 37;Quantity@1000 : Decimal;UnitPrice@1002 : Decimal;LineDiscountPercentage@1004 : Decimal);
    VAR
      SalesLine2@1003 : Record 37;
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine2.SETRANGE("No.",SalesLine."No.");
      SalesLine2.SETRANGE(Quantity,Quantity);
      SalesLine2.FINDFIRST;
      SalesLine2.TESTFIELD("Unit Price",UnitPrice);
      SalesLine2.TESTFIELD("Line Discount %",LineDiscountPercentage);
    END;

    LOCAL PROCEDURE VerifyDueDateOnSalesHeader@122(SalesHeader@1000 : Record 36;DueDateCalculation@1001 : DateFormula);
    VAR
      SalesHeader2@1002 : Record 36;
    BEGIN
      SalesHeader2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader2.SETRANGE("No.",SalesHeader."No.");
      SalesHeader2.FINDFIRST;
      SalesHeader2.TESTFIELD("Due Date",CALCDATE(DueDateCalculation,SalesHeader."Document Date"));
    END;

    LOCAL PROCEDURE VerifyLineDiscAmountInLine@152(DocNo@1000 : Code[20];ExpectedLineDiscAmt@1001 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesLine."Document Type"::Invoice,DocNo);
      Assert.AreEqual(
        ExpectedLineDiscAmt,SalesLine."Line Discount Amount",
        STRSUBSTNO(AmountErr,SalesLine.FIELDCAPTION("Line Discount Amount"),SalesLine."Line Discount Amount",
          SalesLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCopiedSalesPrice@234(CopiedFromSalesPrice@1000 : Record 7002;CustNo@1002 : Code[20]);
    VAR
      SalesPrice@1001 : Record 7002;
    BEGIN
      SalesPrice := CopiedFromSalesPrice;
      SalesPrice."Sales Type" := SalesPrice."Sales Type"::Customer;
      SalesPrice."Sales Code" := CustNo;
      SalesPrice.FIND;
      SalesPrice.TESTFIELD("Unit Price",CopiedFromSalesPrice."Unit Price");
    END;

    LOCAL PROCEDURE VerifyUnchangedSalesPrice@233(SalesPrice@1001 : Record 7002);
    BEGIN
      SalesPrice.FIND; // test that existing price remains unchanged
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code",SalesPrice."Sales Code");
      Assert.RecordCount(SalesPrice,1);
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitHandler@16(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      // Verify 'Credit Limit(LCY)' and 'Cust Credit Amount(LCY)' on Credit Limit warning.
      CheckCreditLimit."Credit Limit (LCY)".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.CustCreditAmountLCY.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitModalPageHandler@199(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitWarningMPH@55(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit.OrderAmountTotalLCY.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.OrderAmountThisOrderLCY.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.CustCreditAmountLCY.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit."Credit Limit (LCY)".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesStatisticsHandler@46(VAR SalesStatistics@1000 : TestPage 160);
    BEGIN
      // Verify that fields 'VAT Amount', 'Amount Excl. VAT' and 'Total Incl. VAT' are uneditable on Sales Statistics page.
       Assert.IsFalse(SalesStatistics.Amount.EDITABLE,STRSUBSTNO(EditableErr,SalesStatistics.Amount.CAPTION));
    END;

    [StrMenuHandler]
    PROCEDURE SalesOptionDialogHandler@94(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the option of the string menu.
      Choice := LibraryVariableStorage.DequeueInteger;  // Choose option.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@44(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@62(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitLCYHandler@169(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      // Verify 'Credit Limit(LCY)' on Credit Limit warning.
      CheckCreditLimit."No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      CheckCreditLimit."Credit Limit (LCY)".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderStatisticsHandler@60(VAR SalesOrderStatistics@1001 : TestPage 402);
    VAR
      InvDiscountAmountGeneral@1000 : Decimal;
      InvDiscountAmountInvoicing@1002 : Decimal;
    BEGIN
      InvDiscountAmountInvoicing := LibraryVariableStorage.DequeueDecimal;
      InvDiscountAmountGeneral := LibraryVariableStorage.DequeueDecimal;
      Assert.AreNearlyEqual(
        InvDiscountAmountGeneral,SalesOrderStatistics.InvDiscountAmount_General.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountErr,SalesOrderStatistics.InvDiscountAmount_General.CAPTION,InvDiscountAmountGeneral));
      Assert.AreNearlyEqual(
        InvDiscountAmountInvoicing,SalesOrderStatistics.InvDiscountAmount_Invoicing.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountErr,SalesOrderStatistics.InvDiscountAmount_Invoicing.CAPTION,InvDiscountAmountInvoicing));
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesHandler@58(VAR GetShipmentLines@1001 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSetEntriesPageHandler@100(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      EditDimensionSetEntries."Dimension Code".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.DimensionValueCode.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    [RequestPageHandler]
    PROCEDURE MoveNegativeSalesLinesHandler@38(VAR MoveNegativeSalesLines@1000 : TestRequestPage 6699);
    BEGIN
      // Move Negative Sales Lines Requestpage Handler.
      MoveNegativeSalesLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@87(VAR EnterQuantitytoCreate@1001 : TestPage 6513);
    BEGIN
      EnterQuantitytoCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@85(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Flag@1002 : Boolean;
    BEGIN
      IF LibraryVariableStorage.Length = 1 THEN
        Flag := LibraryVariableStorage.DequeueBoolean
      ELSE BEGIN
        LibraryVariableStorage.DequeueText; // dummy dequeue
        Flag := LibraryVariableStorage.DequeueBoolean;
      END;

      IF Flag THEN
        // Enter Quantity To Create Page is Handled in 'EnterQuantityToCreatePageHandler'.
        ItemTrackingLines."Assign Serial No.".INVOKE
      ELSE
        ItemTrackingLines."Select Entries".INVOKE;  // Item Tracking Summary Page is handled in 'ItemTrackingSummaryPageHandler'.
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Serial No.".VALUE);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@98(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@89(Message@1000 : Text[1024]);
    BEGIN
      // This Handler function is used for handling Messages.
    END;

    [ModalPageHandler]
    PROCEDURE NoSeriesListPageHandler@91(VAR NoSeriesList@1000 : TestPage 571);
    BEGIN
      NoSeriesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesPageHadler@77(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines."Serial No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    [RequestPageHandler]
    PROCEDURE CreateRecurringSalesInvHandler@129(VAR CreateRecurringSalesInv@1000 : TestRequestPage 172);
    BEGIN
      CreateRecurringSalesInv.OrderDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      CreateRecurringSalesInv.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      CreateRecurringSalesInv.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesStatisticsPageHandler@303(VAR SalesStatistics@1000 : TestPage 160);
    VAR
      TotalAmount@1001 : Decimal;
    BEGIN
      EVALUATE(TotalAmount,SalesStatistics.TotalAmount1.VALUE);
      LibraryVariableStorage.Enqueue(TotalAmount);
      SalesStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckAvailabilityHandler@304(VAR CheckAvailability@1000 : TestPage 342);
    BEGIN
      CheckAvailability.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCrLimitDrilldownOverdueAmountModalPageHandler@255(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit."Balance Due (LCY)".DRILLDOWN;
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCrLimitGetOverdueAmountModalPageHandler@173(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      LibraryVariableStorage.Enqueue(CheckCreditLimit."Balance Due (LCY)".VALUE);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [PageHandler]
    PROCEDURE CustomerLedgerEntriesVerifySingleEntryWithAmountPageHandler@258(VAR CustomerLedgerEntries@1000 : TestPage 25);
    BEGIN
      LibraryVariableStorage.Enqueue(CustomerLedgerEntries.Amount.VALUE);
      Assert.IsFalse(CustomerLedgerEntries.NEXT,'There is more than one entry in Customer Ledger Entries page');
    END;

    [ModalPageHandler]
    PROCEDURE SalesPricesSelectPriceOfCustomerModalPageHandler@232(VAR SalesPrices@1000 : TestPage 7002);
    BEGIN
      SalesPrices.SalesCodeFilterCtrl.SETVALUE(LibraryVariableStorage.DequeueText);
      SalesPrices.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesPricesCancelPriceSelectionModalPageHandler@228(VAR SalesPrices@1001 : TestPage 7002);
    BEGIN
      SalesPrices.Cancel.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Sales]
      1.  Create Sales Invoice, Post and Verify Sales Invoice Header and Line.
      2.  Create Sales Credit Memo, Post and Verify Sales Cr.Memo Header and Line.
      3.  Create Sales Order Header, Post and Verify posting error.
      4.  Create Sales Quote Header then make Order, post the Order and Verify posting error.
      5.  Check Sales Code Line are copied correctly in Sales Line.
      6.  Verify Sales Posted Sales Line of one documents are copied correctly in sales line of second document.
      7.  To test posting of Sales Order including Customer of Payment Method code as Cash.
      8.  To test posting of Sales Order including Customer of Payment Method code as Account.
      9.  To modify Customer Ledger Entry after posting of order and verify same.
      10. To create a new Customer with Page and verify it.
      11. Verify values on Check Credit Limit warning page invoked by Sales Invoice.
      12. Verify that some fields on Sales Statistics page are uneditable after calculating Invoice Discount on Sales Invoice.
      13. Create Sales Order, Cancel Posting Using Option Dialog Box.
      14. Create Sales Order, Post as Ship and verify Sales ShipmentLine after posting Sales Order.
      15. Create Sales Order, Post as Invoice and verify Error Without Ship.
      16. Create Sales Order, Post as Ship and Invoice and Verify Sales Invoice Line.
      17. Create Sales Order, Post as Ship first then as Invoice and Verify Sales Invoice Line.
      18. Verify that the Unit Price of the Sales Price of the Item gets populated on the Sales Invoice Line created for that particular Customer and Item.
      20. Verify that Unit Price gets updated when Sell-to Customer No gets changed and verify values on Check Credit Limit warning page invoked on Sales Invoice.
      21. Check Invoice Discount Amount on Statistics when Cust. Invoice Discount are defined with Minimum Amount.
      22. Check GL Entry for posted Sales Invoice after creating through Get Shipment Lines.
      23. Check Program calculates the Invoice Discounts only on balance amount on General tab of Statistics.
      24. Test Navigate functionality for Sales Return Order.
      25. Check value on VAT Entry after posting Sales Invoice with IC Partner.
      26. Verify Sales unit Price and Line Discount.
      27. Check Sales Shipment for posted Sales Invoice after creating through Get Shipment Lines.
      28. Verify creation of Sales Order using page.
      29. Verify Item Tracking Lines on Posted Sales Document.
      30. Verify Dimension on Sales Order using page.
      31. Verify that Sales Invoice can be deleted.
      32. Test to validate Program populates information on Individual tab on Sales Order according to Bill To Customer No.
      33. Test Due Date is calculated on Sales Credit memo after running Copy Sales Document Report.
      34. Test Due Date is calculated on Sales Return Order after running Copy Sales Document Report.
      35. Check Sales Code Line with Dimensions are copied correctly in Sales Line.
      36. Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines.
      37. Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines and validate Unit Price from line
      38. Line Discount Amount of with Prices Incl. VAT generated by GetShptLines function from order with Prices Excl. VAT is increased by VAT %
      39. Line Discount Amount of with Prices Excl. VAT generated by GetShptLines function from order with Prices Incl. VAT is decreased by VAT %

      Workitem ID: 259814
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SalesInvoice                                                                  129648
      SalesCreditMemo                                                               129650

      Workitem ID: 260205
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ErrorDialogOnSalesOrder                                                       129660
      ErrorDialogOnSalesQuote                                                       129661

      Workitem ID: 253877
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SalesOrderStandardSalesCode,                                                  144966
      SalesOrderCopyStandardCode                                                    144967

      Workitem ID: 257749
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CustomerPaymentMethodCash,                                                    131708
      CustomerPaymentMethodAccount                                                  131709

      Workitem ID: 257750
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ModifyCustomerLedgerEntry,                                                    131712
      CustomerCreationByPage                                                        131713

      Workitem ID: 260809
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CustomerCreditLimitWarning                                                    127757

      Workitem ID: 262324
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      NotEditableFieldsOnSalesInvoiceStatistics                                     127201

      Workitem ID: 263776
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CancelSalesOrderPostingUsingOptionDialogBox                                   129657
      ShipSalesOrderUsingOptionDialogBox                                            129658
      InvoiceSalesOrderWithoutShip                                                  129658
      ShipAndInvoiceSalesOrderUsingOptionDialogBox                                  129659
      InvoiceAferShipUsingOptionDialogBox                                           129659

      Workitem ID: 262874
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SalesInvoiceWithItemSalesPrices                                               252720
      CustomerCreditLimitWithItemSalesPrices                                        252720

      Workitem ID: 262873
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      InvoiceDiscountOnStatisticsForSalesOrder,SalesInvoiceUsingGetShipmentLines    257762
      InvoiceDiscountOnStatisticsForShippedSalesOrder

      Workitem ID: 262890
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      SalesReturnOrderNavigate                                              143223

      Workitem ID: 264423
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      VATEntryForSalesInvoiceWithICPartner                                  236599

      Workitem ID: 266435
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      SalesUnitPriceAndLineDiscount                                         129297

      Workitem ID: 265341
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      SalesInvoiceUsingGetShipmentLinesWithBlockedCustomer                  240124

      Workitem ID: 265509
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      SalesOrderCreation                                                  127871
      ItemTrackingOnPostedSalesDocument
      DimensionOnSalesOrder

      Workitem ID: 266434
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SalesInvoiceDelete                                                            131109

      Workitem ID: 293872
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SalesOrderWithDifferentBillToCustomerNo                                    279764

      Bug ID: 319285
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DueDateOnSalesCreditMemoAfterCopyDocument                                     319893
      DueDateOnSalesReturnOrderAfterCopyDocument                                    319893

      Cover Test case for BUG ID-51910
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      SalesLineWithStandardSalesCodeDimension
      Workitem ID: 352311
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CheckCreditLimitCustomerTotalAmount                                           352311
      CheckCreditLimitCustomerTotalAmountFromLine                                   353097
      LineDiscInPriceInclVATInvWithShptLinesFromPriceExclVATOrder,
      LineDiscInPriceExclVATInvWithShptLinesFromPriceInclVATOrder                   109009
    }
    END.
  }
}

