OBJECT Codeunit 134018 ERM Payment Tolerance Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryInventory@1020 : Codeunit 132201;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryPmtDiscSetup@1008 : Codeunit 131303;
      LibrarySetupStorage@1009 : Codeunit 131009;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountErrorMessage@1006 : TextConst 'ENU=%1 must be %2 in %3 %4 %5.';
      DocumentType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      ExpectedMessage@1007 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseInvoiceWithLCY@15();
    VAR
      DocumentNo@1001 : Code[20];
      ExpectedPmtTolAmount@1000 : Decimal;
    BEGIN
      // Covers Test Case 124103,124104.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Invoice without Currency.

      // Create and Post Purchase Invoice without Currency.
      DocumentNo := CreateAndPostPurchaseDocument('',DocumentType::Invoice);

      // Verify: Verify Vendor Ledger Entry Amount.
      ExpectedPmtTolAmount := CalcPaymentTolInvoiceLCY(DocumentNo);
      VerifyMaxPaymentTolInvoice(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseCreditMemoWithLCY@5();
    VAR
      PurchCrMemoHdr@1000 : Record 124;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Covers Test Case 124087,124088.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Credit Memo without Currency.

      // Create and Post Purchase Credit Memo without Currency.
      DocumentNo := CreateAndPostPurchaseDocument('',DocumentType::"Credit Memo");

      // Verify: Verify Vendor Ledger Entry Amount.
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoHdr.CALCFIELDS("Amount Including VAT");
      VerifyVendorLedgerEntry(PurchCrMemoHdr."Amount Including VAT",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseInvoiceWithFCY@16();
    VAR
      DocumentNo@1000 : Code[20];
      ExpectedPmtTolAmount@1001 : Decimal;
    BEGIN
      // Covers Test Case 124103,124104.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Invoice with Currency.

      // Create and Post Purchase Invoice with Currency.
      DocumentNo := CreateAndPostPurchaseDocument(CreateCurrency,DocumentType::Invoice);

      // Verify: Verify Vendor Ledger Entry Amount.
      ExpectedPmtTolAmount := CalcPaymentTolInvoiceFCY(DocumentNo);
      VerifyMaxPaymentTolInvoice(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseCreditMemoWithFCY@13();
    VAR
      PurchCrMemoHdr@1000 : Record 124;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Covers Test Case 124087,124088.
      // Check Vendor Ledger Entry  for Payment Tolerance after posting Purchase Credit Memo with Currency.

      // Create and Post Purchase Credit Memo with Currency.
      DocumentNo := CreateAndPostPurchaseDocument(CreateCurrency,DocumentType::"Credit Memo");

      // Verify: Verify Vendor Ledger Entry Amount.
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoHdr.CALCFIELDS("Amount Including VAT");
      VerifyVendorLedgerEntry(PurchCrMemoHdr."Amount Including VAT",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocument@4();
    VAR
      PurchaseHeader@1004 : Record 38;
      DocumentType@1007 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1003 : Code[20];
    BEGIN
      // Covers Test Case 124089.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Credit Memo and Copy Document.

      // Setup: Update General ledger Setup and Create and Post Purchase Invoice.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);

      CreatePurchaseDocument(PurchaseHeader,'',PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.INSERT(TRUE);

      // Exercise: Create and Post Purchase Credit Memo after Copy Document with Document Type Posted Invoice.
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::"Posted Invoice",DocumentNo,TRUE,TRUE);
      PurchaseHeader.SETRANGE("Applies-to Doc. No.",DocumentNo);
      PurchaseHeader.FINDFIRST;
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",DocumentNo);
      PurchaseHeader.MODIFY(TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ExecuteUIHandler;  // Need to invoke confirmation message everytime to prevent test failures in ES build.

      // Verify: Max Payment Tolerance is zero for Credit Memo applied to Invoice.
      VerifyMaxPaymentTolCreditMemo(DocumentNo,0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocumentLineOnly@10();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      DocumentType@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1004 : Code[20];
      ExpectedPmtTolAmount@1001 : Decimal;
    BEGIN
      // Covers Test Case 124090.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Credit Memo and Copy Document with Only Line.

      // Setup: Update General Ledger Setup and Create and Post Purchase invoice and take a Random quantity.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Payment Discount %",LibraryRandom.RandInt(5)); // Use Random value for Payment Discount.
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,
        LibraryRandom.RandInt(10));
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,
        LibraryRandom.RandInt(10));
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);

      // Exercise: Create and Post Purchase Credit Memo after Copy Document with Document Type Posted Invoice.
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::"Posted Invoice",DocumentNo,FALSE,TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ExecuteUIHandler;  // Need to invoke confirmation message everytime to prevent test failures in ES build.

      // Verify: Verify Max Payment Tolerance field in Vendor Ledger Entry.
      ExpectedPmtTolAmount := CalcPaymentTolCreditMemoLCY(DocumentNo);
      VerifyMaxPaymentTolCreditMemo(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocumentOpenInv@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocumentType@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1002 : Code[20];
      ExpectedPmtTolAmount@1003 : Decimal;
    BEGIN
      // Covers Test Case 124091.
      // Check Vendor Ledger Entry for Payment Tolerance after posting Purchase Credit Memo and Copy Document with Document Type Invoice.

      // Setup: Update General Ledger Setup and Create Purchase Invoice and Insert new record with Document Type Credit memo.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      CreatePurchaseDocument(PurchaseHeader,'',PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Payment Discount %",LibraryRandom.RandInt(5)); // Use Random value for Payment Discount.
      PurchaseHeader.MODIFY(TRUE);
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.INSERT(TRUE);

      // Exercise: Create and Post Purchase Credit Memo after Copy Document with Document Type Invoice.
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::Invoice,PurchaseHeader."No.",TRUE,TRUE);
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseHeader.FINDFIRST;
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ExecuteUIHandler;  // Need to invoke confirmation message everytime to prevent test failures in ES build.

      // Verify: Verify Max Payment Tolerance field in Vendor Ledger Entry.
      ExpectedPmtTolAmount := CalcPaymentTolCreditMemoLCY(DocumentNo);
      VerifyMaxPaymentTolCreditMemo(DocumentNo,ExpectedPmtTolAmount);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      ExecuteUIHandler;  // Need to invoke confirmation message everytime to prevent test failures in ES build.

      // Setup demo data.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@2(CurrencyCode@1001 : Code[10];DocType@1002 : Option) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Setup: Update General Ledger Setup and Create Purchase Document.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      CreatePurchaseDocument(PurchaseHeader,CurrencyCode,DocType);

      // Exercise: Post Purchase Document.
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateCurrency@3() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      // Use Random value for Payment Tolerance and Max Payment Tolerance Amount.
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Payment Tolerance %",LibraryRandom.RandInt(5));
      Currency.VALIDATE("Max. Payment Tolerance Amount",LibraryRandom.RandInt(5));
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateVendor@1() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      PaymentTerms@1002 : Record 3;
    BEGIN
      // Find Payment Terms Code and Update.
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::Manual);
      Vendor.VALIDATE("Block Payment Tolerance",FALSE);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItem@38() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      // Cost should be small enough to not make a document exceed Max. Payment Tolerance
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(7));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@9(VAR PurchaseHeader@1001 : Record 38;CurrencyCode@1002 : Code[10];DocumentType@1005 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
      Counter@1003 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);

      // Use Counter for Creating Multiple Purchase Lines with Random Quantity.
      FOR Counter := 1 TO LibraryRandom.RandInt(3) DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(3));
        IF DocumentType = PurchaseLine."Document Type"::"Credit Memo" THEN BEGIN
          PurchaseLine.VALIDATE("Qty. to Receive",0); // Quantity to Receive must be 0 for Purchase Credit Memo.
          PurchaseLine.MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@26(VAR VendorLedgerEntry@1000 : Record 25;DocumentNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE CalcPaymentTolInvoiceFCY@17(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      Currency@1004 : Record 4;
      PurchInvHeader@1001 : Record 122;
    BEGIN
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      Currency.GET(PurchInvHeader."Currency Code");
      EXIT(PurchInvHeader."Amount Including VAT" * Currency."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE CalcPaymentTolInvoiceLCY@23(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      PurchInvHeader@1001 : Record 122;
    BEGIN
      GeneralLedgerSetup.GET;
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      EXIT(PurchInvHeader."Amount Including VAT" * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE CalcPaymentTolCreditMemoLCY@32(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      PurchCrMemoHdr@1001 : Record 124;
    BEGIN
      GeneralLedgerSetup.GET;
      PurchCrMemoHdr.GET(DocumentNo);
      PurchCrMemoHdr.CALCFIELDS("Amount Including VAT");
      EXIT(PurchCrMemoHdr."Amount Including VAT" * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@14(Amount@1004 : Decimal;DocumentNo@1002 : Code[20]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindVendorLedgerEntry(VendorLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(Amount,VendorLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErrorMessage,VendorLedgerEntry.FIELDCAPTION(Amount),Amount,VendorLedgerEntry.TABLECAPTION,
          VendorLedgerEntry.FIELDCAPTION("Entry No."),VendorLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyMaxPaymentTolInvoice@27(DocumentNo@1001 : Code[20];ExpectedPmtTolAmount@1004 : Decimal);
    VAR
      VendorLedgerEntry@1003 : Record 25;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindVendorLedgerEntry(VendorLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(-ExpectedPmtTolAmount,VendorLedgerEntry."Max. Payment Tolerance",
        GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,VendorLedgerEntry.FIELDCAPTION(Amount),
          ExpectedPmtTolAmount,VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry.FIELDCAPTION("Entry No."),VendorLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyMaxPaymentTolCreditMemo@33(DocumentNo@1001 : Code[20];ExpectedPmtTolAmount@1003 : Decimal);
    VAR
      VendorLedgerEntry@1004 : Record 25;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindVendorLedgerEntry(VendorLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(ExpectedPmtTolAmount,VendorLedgerEntry."Max. Payment Tolerance",
        GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,VendorLedgerEntry.FIELDCAPTION(Amount),
          ExpectedPmtTolAmount,VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry.FIELDCAPTION("Entry No."),VendorLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Payment Tolerance] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile

      Test for Creating and Posting of Purchase Credit Memo using Copy Document:
        1. Test Vendor Ledger Entry after posting Purchase Invoice with LCY.
        2. Test Vendor Ledger Entry after posting Purchase Credit Memo with LCY.
        3. Test Vendor Ledger Entry after posting Purchase Invoice with FCY.
        4. Test Vendor Ledger Entry after posting Purchase Credit Memo with FCY.
        5. Test Vendor Ledger Entry after posting Purchase Credit Memo and Copy Document.
        6. Test Vendor Ledger Entry after posting Purchase Credit Memo and Copy Document with Only Line.
        7. Test Vendor Ledger Entry after posting Purchase Credit Memo and Copy Document with Document Type Invoice.

      Cover Test cases:
        TFS_TC_ID= 124103: TC6638
        TFS_TC_ID= 124104: TC6639
        TFS_TC_ID= 124087: TC6617
        TFS_TC_ID= 124088: TC6618
        TFS_TC_ID= 124089: TC6619
        TFS_TC_ID= 124090: TC6620
        TFS_TC_ID= 124091: TC6621
        TFS_TC_ID= 124093: TC6622
    }
    END.
  }
}

