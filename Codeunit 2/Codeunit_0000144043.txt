OBJECT Codeunit 144043 Service Tax As Excise
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500009 : Codeunit 130000;
      LibraryERM@1500006 : Codeunit 131300;
      LibraryServiceTax@1500005 : Codeunit 143001;
      LibraryRandom@1500004 : Codeunit 130440;
      ReverseServiceTaxHelper@1500003 : Codeunit 143006;
      ServiceTaxAsExciseHelper@1500002 : Codeunit 143003;
      ServiceTaxReportHelper@1500007 : Codeunit 143007;
      PurchaseDocumentType@1500008 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      isInitialized@1500000 : Boolean;
      UnapplyOfUsedCreditErr@1500001 : TextConst 'ENU=the Service Tax credit has already been utilized';

    [Test]
    PROCEDURE AdvPmtInvPoTDirectSalesExciseP@1500037();
    VAR
      ServiceTaxEntryDetails@1500010 : Record 16474;
      LastTransactionNo@1500000 : Integer;
      OldECCNo@1500012 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ApplyInvToAdvPmt(ServiceTaxEntryDetails,TRUE);
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);

      ServiceTaxAsExciseHelper.PostSalesInvoiceDirectExcise(
        ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3,
        ServiceTaxEntryDetails."Service Tax Group Code");

      // Verify
      ServiceTaxAsExciseHelper.VerifyExcisePaidByServiceTax(ServiceTaxEntryDetails,LastTransactionNo);

      // TearDown
      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    [Test]
    PROCEDURE AdvPmtInvPoTTakenSalesExciseCr@1500091();
    VAR
      ServiceTaxEntryDetails@1500010 : Record 16474;
      LastTransactionNo@1500000 : Integer;
      PostedSalesInvoiceDocNo@1500011 : Code[20];
      OldECCNo@1500012 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ApplyInvToAdvPmt(ServiceTaxEntryDetails,TRUE);
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);
      PostedSalesInvoiceDocNo :=
        ServiceTaxAsExciseHelper.PostSalesInvoiceWithExcise(
          ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3);

      ServiceTaxAsExciseHelper.PostExcisePayment(PostedSalesInvoiceDocNo,ServiceTaxEntryDetails);

      // Verify
      ServiceTaxAsExciseHelper.VerifyExcisePaidByServiceTax(ServiceTaxEntryDetails,LastTransactionNo);

      // TearDown
      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    [Test]
    PROCEDURE CrM1to3InvTakenSalesExciseCr@1500004();
    VAR
      ServiceTaxEntryDetails@1500000 : Record 16474;
      LastTransactionNo@1500003 : Integer;
      OldECCNo@1500006 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ApplySmallerCrMToInvSplit(ServiceTaxEntryDetails,3);
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);
      ServiceTaxAsExciseHelper.PostSalesInvoiceDirectExcise(
        ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3,
        ServiceTaxEntryDetails."Service Tax Group Code");

      // Verify
      ServiceTaxAsExciseHelper.VerifyExcisePaidByServiceTax(ServiceTaxEntryDetails,LastTransactionNo);

      // TearDown
      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    [Test]
    PROCEDURE CrMInvPaidRCTakenSalesExciseCr@1500005();
    VAR
      ServiceTaxEntryDetails@1500000 : Record 16474;
      LastTransactionNo@1500003 : Integer;
      OldECCNo@1500006 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ApplySmallerCrMToInvSplit(ServiceTaxEntryDetails,4);
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);
      ServiceTaxAsExciseHelper.PostSalesInvoiceDirectExcise(
        ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3,
        ServiceTaxEntryDetails."Service Tax Group Code");

      // Verify
      ServiceTaxAsExciseHelper.VerifyExcisePaidByServiceTax(ServiceTaxEntryDetails,LastTransactionNo);

      // TearDown
      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    [Test]
    PROCEDURE BlockedUnapplyForSTAsExciseDoc@1500003();
    VAR
      ServiceTaxEntryDetails@1500010 : Record 16474;
      OldECCNo@1500012 : Code[20];
    BEGIN
      Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ApplyInvToAdvPmt(ServiceTaxEntryDetails,FALSE);
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);
      ServiceTaxAsExciseHelper.PostSalesInvoiceDirectExcise(
        ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3,
        ServiceTaxEntryDetails."Service Tax Group Code");

      ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(ServiceTaxEntryDetails."Document No.");
      Assert.ExpectedError(UnapplyOfUsedCreditErr);

      // TearDown
      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    [Test]
    [HandlerFunctions(STaxCreditRegisterReportHandler)]
    PROCEDURE ServTaxCreditRegRepCreditForExcise@1500002();
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
      GenJournalLine@1500003 : Record 81;
      OldECCNo@1500000 : Code[20];
      PostedSalesInvoiceNo@1500001 : Code[20];
    BEGIN
      isInitialized := FALSE;
      Initialize;
      OldECCNo := ServiceTaxAsExciseHelper.SetNewGlobalECCNo;

      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,TRUE,0,0,0);
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,GenJournalLine."Document No.");
      ServiceTaxAsExciseHelper.SetServiceTaxAsExciseCredit(ServiceTaxEntryDetails);

      PostedSalesInvoiceNo :=
        ServiceTaxAsExciseHelper.PostSalesInvoiceDirectExcise(
          ServiceTaxEntryDetails."Posting Date",ServiceTaxEntryDetails."Base Amount" DIV 3,ServiceTaxEntryDetails."Service Tax Group Code");

      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(GenJournalLine,TRUE);

      ServiceTaxReportHelper.VerifyServTaxCreditRegisterUsedAsExcise(PostedSalesInvoiceNo,ServiceTaxEntryDetails.FullTaxAmount);

      ServiceTaxAsExciseHelper.SetGlobalECCNo(OldECCNo);
    END;

    LOCAL PROCEDURE Initialize@1500001() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE ApplySmallerCrMToInvSplit@1500007(VAR ServiceTaxEntryDetails@1500003 : Record 16474;Factor@1500004 : Integer);
    VAR
      GenJournalLine@1500002 : Record 81;
      CrMemoDocNo@1500001 : Code[20];
      CreditMemoAmount@1500000 : Decimal;
    BEGIN
      PostInvoiceWithSplit(GenJournalLine);
      CreditMemoAmount := -GenJournalLine.Amount DIV Factor;
      CrMemoDocNo := PostCrMemoForInvoice(GenJournalLine,CreditMemoAmount);

      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.",
        GenJournalLine."Document Type"::"Credit Memo",CrMemoDocNo);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,CrMemoDocNo);
    END;

    LOCAL PROCEDURE ApplyInvToAdvPmt@1500000(VAR ServiceTaxEntryDetails@1500002 : Record 16474;PoT@1500001 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
      PurchaseHeader@1500014 : Record 38;
      PurchaseLine@1500013 : Record 39;
      ServiceTaxSetup@1500012 : Record 16472;
      TaxAmount@1500010 : Decimal;
      BaseAmount@1500009 : Decimal;
      PostedPurchaseDocumentNo@1500008 : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,PoT,0,0,0);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,0,0);
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(
        PurchaseHeader,PurchaseLine,GenJournalLine,PurchaseDocumentType::Invoice,0,0,PoT,BaseAmount);
      PostedPurchaseDocumentNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      IF PoT THEN
        ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedPurchaseDocumentNo)
      ELSE
        ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE PostCrMemoForInvoice@1500033(GenJournalLine@1500001 : Record 81;CrMemoBaseAmount@1500000 : Decimal) : Code[20];
    VAR
      CrMemoGenJournalLine@1500003 : Record 81;
      GenJournalBatch@1500002 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH GenJournalLine DO
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(
          CrMemoGenJournalLine,GenJournalBatch,"Document Type"::"Credit Memo","Service Type (Rev. Chrg.)",
          "Account No.",CrMemoBaseAmount,"Posting Date","Service Tax Registration No.","Service Tax Group Code");
      CrMemoGenJournalLine.VALIDATE(PoT,TRUE);
      CrMemoGenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(CrMemoGenJournalLine);
      EXIT(CrMemoGenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE PostInvoiceWithSplit@1500079(VAR GenJournalLine@1500000 : Record 81) : Code[20];
    VAR
      ReverseChargeTypeOption@1500002 : ' ,Standard,GTA';
      Percentage@1500001 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Service Type (Rev. Chrg.)"::Inward,
        ReverseChargeTypeOption::Standard,TRUE,Percentage);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    [RequestPageHandler]
    PROCEDURE STaxCreditRegisterReportHandler@1500174(VAR ServTaxCreditRegister@1500000 : TestRequestPage 16592);
    BEGIN
      ServiceTaxReportHelper.ServTaxCreditRegisterReportHandler(ServTaxCreditRegister);
    END;

    BEGIN
    END.
  }
}

