OBJECT Codeunit 134379 ERM Sales Quotes
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1007 : Codeunit 131300;
      Assert@1003 : Codeunit 130000;
      LibrarySales@1002 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryResource@1006 : Codeunit 130511;
      LibraryService@1014 : Codeunit 131902;
      LibraryUtility@1013 : Codeunit 131000;
      isInitialized@1000 : Boolean;
      AmountErrorMessage@1005 : TextConst 'ENU=%1 must be %2 in %3.';
      FieldError@1004 : TextConst 'ENU=%1 not updated correctly.';
      QuoteToOrderMessage@1008 : TextConst 'ENU=Do you want to convert the quote to an order?';
      LineError@1010 : TextConst 'ENU=No. of Lines must be Equal.';
      UnknownError@1009 : TextConst 'ENU=Unexpected Error.';
      SalesDocExistErr@1011 : TextConst '@@@="%1 = Resource No. %2 = Document Type";ENU=You cannot delete resource %1 because there are one or more outstanding %2 that include this resource.';
      DialogErrorCodeTxt@1012 : TextConst 'ENU=Dialog';

    [Test]
    PROCEDURE SalesQuoteCreation@2();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1005 : Record 311;
      OldDefaultPostingDate@1004 : Option;
      OldStockoutWarning@1003 : Boolean;
    BEGIN
      // Test if the system allows to create New Sales Quote for Customer.

      // Setup.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // Exercise: Create Sales Quote.
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));

      // Verify: Verify Blanket Sales Quote.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE VATAmountOnSalesQuote@4();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      VATAmountLine@1002 : Record 290;
      SalesReceivablesSetup@1004 : Record 311;
      OldDefaultPostingDate@1007 : Option;
      OldStockoutWarning@1005 : Boolean;
      QtyType@1003 : 'General,Invoicing,Shipping';
    BEGIN
      // Test if the system calculates applicable VAT in Sales Quote.

      // Setup: Create Sales Quote with Multiple Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));

      // Calculate VAT Amount on Sales Quote.
      SalesLine.CalcVATAmountLines(QtyType::Invoicing,SalesHeader,SalesLine,VATAmountLine);

      // Verify: Verify VAT Amount on Sales Quote.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(
        SalesHeader.Amount * SalesLine."VAT %" / 100,VATAmountLine."VAT Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(
          AmountErrorMessage,VATAmountLine.FIELDCAPTION("VAT Amount"),SalesHeader.Amount * SalesLine."VAT %" / 100,
          VATAmountLine.TABLECAPTION));

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    [HandlerFunctions(SalesQuoteReportConfirmHandler)]
    PROCEDURE SalesQuoteReport@3();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      SalesQuote@1002 : Report 204;
      LibraryUtility@1004 : Codeunit 131000;
      OldDefaultPostingDate@1006 : Option;
      OldStockoutWarning@1005 : Boolean;
      FilePath@1003 : Text[1024];
    BEGIN
      // Test if the system generates Sales Quote Report.

      // Setup: Create Sales Quote with Multiple Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));

      // Exercise: Generate Report as external file for Sales Quote.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      SalesQuote.SETTABLEVIEW(SalesHeader);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      SalesQuote.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE SalesOrderFromSalesQuote@5();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1006 : Record 311;
      OldDefaultPostingDate@1005 : Option;
      OldStockoutWarning@1003 : Boolean;
      LineCount@1004 : Integer;
      ResponsibilityCenterCode@1000 : Code[10];
    BEGIN
      // [SCENARIO 215838] Test Create Sales Order from Sales Quote.

      // [GIVEN] Sales Quote "Q" where "Responsibility Center" = "RC" and Total no. of Lines = "NumL"
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));
      LineCount := FindSalesLineCount(SalesHeader."No.");
      ResponsibilityCenterCode := SalesHeader."Responsibility Center";

      // [WHEN] Create Sales Order "O" form "Q"
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // [THEN] O."Responsibility Center" = "RC" and O.SalesLine.COUNT = "NumL"
      FindSalesLine(SalesLine,SalesHeader."No.");
      Assert.AreEqual(LineCount,SalesLine.COUNT,LineError);
      FindSalesResponsibilityCenterCode(SalesHeader);
      SalesHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE SalesQuoteWithContact@11();
    VAR
      ContactBusinessRelation@1004 : Record 5054;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Create Sales Quote with Contact and check Sell to Customer is getting updated.

      // Setup: Find Contact from Contact Business Relation that have setup for a Customer.
      Initialize;
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.FINDFIRST;

      // Exercise: Create Sales Quote for Contact.
      SalesHeader.INSERT(TRUE);
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.VALIDATE("Sell-to Contact No.",ContactBusinessRelation."Contact No.");
      SalesHeader.MODIFY(TRUE);

      // Verify: Verify that New Sales Quote updated correct Sell to Customer No.
      Assert.AreEqual(
        ContactBusinessRelation."No.",SalesHeader."Sell-to Customer No.",
        STRSUBSTNO(FieldError,SalesHeader.FIELDCAPTION("Sell-to Customer No.")));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesQuoteWithCustomer@12();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1004 : Record 311;
      OldDefaultPostingDate@1003 : Option;
      OldStockoutWarning@1002 : Boolean;
    BEGIN
      // Check if the system allows changing Sell to Contact No. in Sales Quote and Check Sales Line updated for the same.

      // Setup: Create Sales Quote with Multiple Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));

      // Exercise: Update Sales Header with different Sell to Customer No.
      SalesHeader.VALIDATE("Sell-to Customer No.",CreateCustomer);
      SalesHeader.MODIFY(TRUE);

      // Verify: Verify Sell to Customer No in Sales Line table.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(
        SalesHeader."Sell-to Customer No.",SalesLine."Sell-to Customer No.",
        STRSUBSTNO(FieldError,SalesLine.FIELDCAPTION("Sell-to Customer No.")));

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE SalesOrderInvDiscFromSaleQuote@6();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1006 : Record 311;
      SalesCalcDiscount@1002 : Codeunit 60;
      OldDefaultPostingDate@1005 : Option;
      OldStockoutWarning@1004 : Boolean;
      InvDiscountAmount@1003 : Decimal;
    BEGIN
      // Check Invoice Discount has been flow correctly on Sales Order after Make Order from Sales Quote.

      // Setup: Create Sales Quote and Calculate Invoice Discount with 1 Fix Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomerInvDiscount(CreateCustomer),1);
      SalesCalcDiscount.RUN(SalesLine);
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
      InvDiscountAmount := SalesLine."Inv. Discount Amount";

      // Exercise: Make Order from Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // Verify: Verify Sales Quote Line for Invoice Discount after run Make Order.
      FindSalesLine(SalesLine,SalesHeader."No.");
      Assert.AreNearlyEqual(
        InvDiscountAmount,SalesLine."Inv. Discount Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErrorMessage,SalesLine.FIELDCAPTION("Inv. Discount Amount"),InvDiscountAmount,SalesLine.TABLECAPTION));

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    [HandlerFunctions(SalesQuoteToOrderFalse)]
    PROCEDURE SalesQuoteConfirmDialogFalse@20();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1006 : Record 311;
      OldDefaultPostingDate@1005 : Option;
      OldStockoutWarning@1004 : Boolean;
      LineCount@1000 : Integer;
    BEGIN
      // Convert Sales Quote to an Order. Click No on Confirmation Dialog Box to invoke NO Button Using Handler.

      // Setup: Create Sales Quote and store Total no. of Lines count in a variable with Multiple Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));
      LineCount := FindSalesLineCount(SalesHeader."No.");

      // Exercise: Create Sales Order form Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order (Yes/No)",SalesHeader);

      // Verify: Verify Sales Quote Exists. Verify Message on Message Dialog in SalesQuoteToOrderFalse Handler.
      Assert.AreEqual(LineCount,FindSalesLineCount(SalesHeader."No."),LineError);

      // Tear Down.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    [HandlerFunctions(SalesQuoteToOrderTrue,MessageHandler)]
    PROCEDURE SalesQuoteConfirmDialogTrue@13();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1006 : Record 311;
      OldDefaultPostingDate@1005 : Option;
      OldStockoutWarning@1003 : Boolean;
      LineCount@1004 : Integer;
    BEGIN
      // Convert Sales Quote to an Order. Click Yes on Confirmation Dialog Box to invoke YES Button Using Handler.

      // Setup: Create Sales Quote and store Total no. of Lines count in a variable with Multiple Sales Quote Line.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));
      LineCount := FindSalesLineCount(SalesHeader."No.");

      // Exercise: Create Sales Order form Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order (Yes/No)",SalesHeader);

      // Verify: Verify that New Sales Order created from Sales Quote.
      // Verify Message on Message Dialog in SalesQuoteToOrderFalse Handler.
      FindSalesLine(SalesLine,SalesHeader."No.");
      Assert.AreEqual(LineCount,SalesLine.COUNT,LineError);

      // Tear Down.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE SalesOrderFromSalesQuoteWithPostingDateBlank@18();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1006 : Record 311;
      OldDefaultPostingDate@1003 : Option;
      OldStockoutWarning@1000 : Boolean;
    BEGIN
      // Check that blank Posting Date is populating on created Sales Order from Sales Quote while Default Posting Date is set to No Date on the Sales & Receivables Setup.

      // Setup: Update Sales & Receivables Setup and create Sales Quote.
      Initialize;
      OldStockoutWarning :=
        UpdateSalesReceivablesSetup(OldDefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"No Date",FALSE);
      CreateSalesQuote(SalesHeader,SalesLine,CreateCustomer,LibraryRandom.RandInt(5));  // Take Randon value for Number of lines.
      // To avoid failure in IT, using Posting Date as Document Date when Default Posting Date: "No Date" in Sales & Receivables Setup.
      SalesHeader.VALIDATE("Document Date",SalesHeader."Posting Date");
      SalesHeader.MODIFY(TRUE);

      // Exercise: Create Sales Order from Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // Verify: Verify that New Sales Order created from Sales Quote with Posting Date blank.
      VerifyPostingDateOnOrder(SalesHeader,SalesHeader."No.");

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(OldDefaultPostingDate,OldDefaultPostingDate,OldStockoutWarning);
    END;

    [Test]
    PROCEDURE UT_DeleteResourceExistedInSalesQuote@22();
    VAR
      Resource@1001 : Record 156;
      VATPostingSetup@1002 : Record 325;
      SalesLine@1000 : Record 37;
    BEGIN
      // [FEATURE] [UT] [Resource]
      // [SCENARIO 376793] Not possible to delete resource which exists in Sales Quote

      Initialize;
      // [GIVEN] Sales Line with Type = "Resource" and "Resouce No." = "X"
      SalesLine.INIT;
      SalesLine."Document Type" := SalesLine."Document Type"::Quote;
      SalesLine.Type := SalesLine.Type::Resource;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryResource.CreateResource(Resource,VATPostingSetup."VAT Bus. Posting Group");
      SalesLine."No." := Resource."No.";
      SalesLine.INSERT;

      // [WHEN] Delete Resouce "X"
      ASSERTERROR Resource.DELETE(TRUE);

      // [THEN] Error "You cannot delete resource "X" because there one or more outstanding Quote that include this resource" shown
      Assert.ExpectedError(STRSUBSTNO(SalesDocExistErr,Resource."No.",SalesLine."Document Type"::Quote));
      Assert.ExpectedErrorCode(DialogErrorCodeTxt);
    END;

    [Test]
    PROCEDURE SalesQuoteExtendedText@28();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      ExtendedTextLine@1003 : ARRAY [2] OF Record 280;
      SalesQuote@1005 : TestPage 41;
    BEGIN
      // [SCENARIO 201839] Extended Texts are being pulled into the sales document if there are more than just one Extended Text for an item

      Initialize;

      // [GIVEN] Item with  Extended Texts "X" and "Y"
      Item.GET(CreateItem);
      CreateExtendedTextForItem(Item,ExtendedTextLine[1]);
      CreateExtendedTextForItem(Item,ExtendedTextLine[2]);

      // [GIVEN] Sales Quote
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Insert Extended Text into the Sales Line.
      SalesQuote.OPENEDIT;
      SalesQuote.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesQuote.SalesLines.InsertExtTexts.INVOKE;

      // [THEN] Desription of the Sales Line with type " " must match with "X" or "Y".
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      SalesLine.SETRANGE(Description,ExtendedTextLine[1].Text);
      Assert.RecordIsNotEmpty(SalesLine);
      SalesLine.SETRANGE(Description,ExtendedTextLine[2].Text);
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateSalesQuote@10(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CustomerNo@1004 : Code[20];NoOfLines@1003 : Integer);
    VAR
      ResponsibilityCenter@1005 : Record 5714;
      Counter@1002 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,CustomerNo);
      ResponsibilityCenter.FINDFIRST;
      SalesHeader.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      SalesHeader.MODIFY(TRUE);

      // Using Random for Quantity, value not important for Quantity.
      FOR Counter := 1 TO NoOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateCustomer@1() : Code[20];
    VAR
      Customer@1001 : Record 18;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerInvDiscount@7(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      CustInvoiceDisc@1000 : Record 19;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);  // Set Zero for Charge Amount.
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));  // Take Random Discount.
      CustInvoiceDisc.MODIFY(TRUE);
      EXIT(CustomerNo);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateExtendedTextForItem@25(Item@1002 : Record 27;VAR ExtendedTextLine@1000 : Record 280);
    VAR
      ExtendedTextHeader@1003 : Record 279;
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      LibraryUtility.FillMaxText(ExtendedTextLine,ExtendedTextLine.FIELDNO(Text));
      ExtendedTextLine.FIND;
    END;

    LOCAL PROCEDURE FindSalesLine@15(VAR SalesLine@1000 : Record 37;QuoteNo@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Quote No.",QuoteNo);
      SalesHeader.FINDFIRST;
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLineCount@19(DocumentNo@1000 : Code[20]) : Integer;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Quote);
      EXIT(SalesLine.COUNT);
    END;

    LOCAL PROCEDURE FindSalesResponsibilityCenterCode@23(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.SETRANGE("Quote No.",SalesHeader."No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPostingDateOnOrder@33(VAR SalesHeader@1001 : Record 36;QuoteNo@1002 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("Quote No.",QuoteNo);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.FINDFIRST;
      SalesHeader.TESTFIELD("Posting Date",0D);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@32(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE SalesQuoteToOrderTrue@16(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      // Confirm Handler.
      Assert.AreEqual(Question,STRSUBSTNO(QuoteToOrderMessage),UnknownError);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE SalesQuoteToOrderFalse@17(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      // Confirm Handler.
      Assert.AreEqual(Question,STRSUBSTNO(QuoteToOrderMessage),UnknownError);
      Reply := FALSE;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@21(VAR OldDefaultPostingDate@1001 : Option;DefaultPostingDate@1002 : Option;StockoutWarning@1000 : Boolean) OldStockoutWarning : Boolean;
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldDefaultPostingDate := SalesReceivablesSetup."Default Posting Date";
      OldStockoutWarning := SalesReceivablesSetup."Stockout Warning";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ConfirmHandler]
    PROCEDURE SalesQuoteReportConfirmHandler@14(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := FALSE;
    END;

    BEGIN
    {
      // [FEATURE] [Quote] [Sales]
      Unsupported version tags:
      NA: Unable to Compile

      Check the functionalities of Blanket Sales Quote.
      1. Test if the system allows to create New Sales Quote for Customer.
      2. Test if the system calculates applicable VAT in Sales Quote.
      3. Test if the system generates Sales Quote Report.
      4. Test Create Sales Order from Sales Quote.
      5. Create Sales Quote with Contact and check Sell to Customer is getting updated.
      6. Check if the system allows changing Sell to Contact No. in Sales Quote and Check Sales Line updated for the same.
      7. Check Invoice Discount has been flow correctly on Sales Order after Make Order from Sales Quote.
      8. Convert Sales Quote to an Order. Click No on Confirmation Dialog Box to invoke NO Button Using Handler.
      9. Convert Sales Quote to an Order. Click Yes on Confirmation Dialog Box to invoke YES Button Using Handler.
      10. Check that blank Posting Date is populating on created Sales Order from Sales Quote while Default Posting Date is set to No Date on the Sales & Receivables Setup.

      This test code unit replaces Manual Test Suite (TS0125).

      TS_TFS ID=21533
      Covers Test Cases:
        TFS_TC_ID= 4946 and 30730: TC00560
        TFS_TC_ID= 4947 and 30731: TC00561
        TFS_TC_ID= 4948 and 30732: TC00562
        TFS_TC_ID= 4963 and 30747: TC00556
        TFS_TC_ID= 4964 and 30748: TC00557
        TFS_TC_ID= 4965 and 30749: TC00558
        TFS_TC_ID= 4966 and 30750: TC00559

        Covers Test Cases for WI - 219040
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        SalesOrderInvDiscFromSaleQuote                           127389

      TFS_TS_ID =  261314
      Covers Test Cases:
        --------------------------------------------------------------------------------
        Test Function Name                                         TFS ID
        --------------------------------------------------------------------------------
        SalesQuoteConfirmDialogFalse                               192652,192653
        SalesQuoteConfirmDialogTrue                                192654

      Covers Test Cases for WI - 264826
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        SalesOrderFromSalesQuoteWithPostingDateBlank             263320
    }
    END.
  }
}

