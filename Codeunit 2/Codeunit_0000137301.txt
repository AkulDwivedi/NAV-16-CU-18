OBJECT Codeunit 137301 SCM Inventory Reports - I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1009 : Codeunit 132201;
      LibrarySales@1012 : Codeunit 130509;
      LibraryCosting@1028 : Codeunit 132200;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryManufacturing@1030 : Codeunit 132202;
      LibraryReportDataset@1170 : Codeunit 131007;
      LibraryReportValidation@1001 : Codeunit 131002;
      LibraryVariableStorage@1031 : Codeunit 131004;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryWarehouse@1029 : Codeunit 132204;
      LibraryRandom@1006 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      IncorrectValueInCellErr@1003 : TextConst '@@@=%1 - row % 2 - column;ENU=Row count in report Inventory Validation before posting purchase order should be the same as after posting purchase order';
      QuantityErr@1004 : TextConst 'ENU=Quantity Must Be %1 for %2  Document No. %3';

    [Test]
    [HandlerFunctions(InvtCostAndPriceListRepRequestPageHandler)]
    PROCEDURE InvtCostAndPriceListSKUFalse@7();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Create Setup to Generate Inventory Cost and Price List Report with Use Stockkeeping as False.
      Initialize;
      InvtCostAndPriceListSetup(Item,FALSE);

      // Verify: Standard Cost shown in Inventory Cost and Price List Report is equal to the Standard Cost in Item Table.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('StandardCost_Item',Item."Standard Cost");
    END;

    [Test]
    [HandlerFunctions(InvtCostAndPriceListRepRequestPageHandler)]
    PROCEDURE InvtCostAndPriceListSKUTrue@5();
    VAR
      Item@1001 : Record 27;
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      // Create Setup to Generate Inventory Cost and Price List Report with Use Stockkeeping as True.
      Initialize;
      InvtCostAndPriceListSetup(Item,TRUE);

      // Verify: Stockkeeping  units are created and Standard Cost shown in Inventory Cost and Price List Report is equal to the
      // Standard Cost in Item Table.
      StockkeepingUnit.SETRANGE("Item No.",Item."No.");
      StockkeepingUnit.FINDSET;
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.SetRange('LocationCode_StockKeepingUnit',StockkeepingUnit."Location Code");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('StandardCost_StockKeepingUnit',
          StockkeepingUnit."Standard Cost");
        LibraryReportDataset.AssertCurrentRowValue('StandardCost_Item',Item."Standard Cost");
      UNTIL StockkeepingUnit.NEXT = 0;
    END;

    LOCAL PROCEDURE InvtCostAndPriceListSetup@3(VAR Item@1001 : Record 27;UseStockkeepingUnit@1003 : Boolean);
    VAR
      SKUCreationMethod@1000 : 'Location,Variant,Location & Variant';
    BEGIN
      // Setup :Create Item with costing method as standard and Create Stockkeeping Unit.
      CreateItem(Item);
      IF UseStockkeepingUnit THEN
        CreateStockKeepingUnit(Item."No.",SKUCreationMethod::Location);

      // Exercise: Generate the Inventory Cost and Price List.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory Cost and Price List",TRUE,FALSE,Item);
    END;

    [Test]
    [HandlerFunctions(InvtListRepRequestPageHandler)]
    PROCEDURE InventoryList@1();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create Item with costing method as standard.
      Initialize;
      CreateItem(Item);

      // Exercise: Generate Inventory List Report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - List",TRUE,FALSE,Item);

      // Verify: No. shown in Inventory List Report is equal to the No. shown in Item Table.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('No_Item',Item."No.");
    END;

    [Test]
    [HandlerFunctions(InvtTransactionDetailRepRequestPageHandler)]
    PROCEDURE InventoryTransactionDetail@2();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      ItemJournalLine@1002 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Setup: Create Item with costing method as standard and update Inventory.
      Initialize;
      CreateItem(Item);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));

      // Create and Post Sales Order using Random Value.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,'',Item."No.",Item.Inventory + LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Generate Inventory - Transaction Detail Report.
      Item.SETRANGE("No.",Item."No.");
      Item.FINDFIRST;
      REPORT.RUN(REPORT::"Inventory - Transaction Detail",TRUE,FALSE,Item);

      // Verify: Document No. shown in Inventory - Transaction Detail Report is equal Document No. in Item Ledger Entry Table.
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',Item."No.");
      LibraryReportDataset.SetRange('EntryNo_ItemLedgerEntry',ItemLedgerEntry."Entry No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('DocumentNo_PItemLedgEntry',ItemLedgerEntry."Document No.");
    END;

    [Test]
    [HandlerFunctions(InvtTop10ListRepRequestPageHandler)]
    PROCEDURE InvtTop10ListLargestSalesLCY@8();
    VAR
      ItemNo@1003 : Code[20];
      ItemNo2@1002 : Code[20];
      ShowSorting@1000 : 'Largest,Smallest';
      ShowType@1001 : 'Sales (LCY),Inventory';
    BEGIN
      // Create Setup to Generate Inventory Cost Top 10 List with Show Sorting option as Largest and ShowType as Sales (LCY).
      Initialize;
      InventoryTop10ListSetup(ItemNo,ItemNo2,ShowSorting::Largest,ShowType::"Sales (LCY)");

      // Verify: Sales (LCY) shown in Inventory Top 10 List Report is equal to the Sales (LCY) in Item Table.
      VerifyTop10ListReport(ItemNo,ItemNo2);
    END;

    [Test]
    [HandlerFunctions(InvtTop10ListRepRequestPageHandler)]
    PROCEDURE InvtTop10ListSmallestSalesLCY@9();
    VAR
      ItemNo@1003 : Code[20];
      ItemNo2@1002 : Code[20];
      ShowSorting@1000 : 'Largest,Smallest';
      ShowType@1001 : 'Sales (LCY),Inventory';
    BEGIN
      // Create Setup to Generate Inventory Cost Top 10 List with Show Sorting option as Smallest and ShowType as Sales (LCY).
      Initialize;
      InventoryTop10ListSetup(ItemNo,ItemNo2,ShowSorting::Smallest,ShowType::"Sales (LCY)");

      // Verify: Sales (LCY) shown in Inventory Top 10 List Report is equal to the Sales (LCY) in Item Table.
      VerifyTop10ListReport(ItemNo,ItemNo2);
    END;

    [Test]
    [HandlerFunctions(InvtTop10ListRepRequestPageHandler)]
    PROCEDURE InvtTop10ListLargestInventory@21();
    VAR
      ItemNo@1003 : Code[20];
      ItemNo2@1002 : Code[20];
      ShowSorting@1000 : 'Largest,Smallest';
      ShowType@1001 : 'Sales (LCY),Inventory';
    BEGIN
      // Create Setup to Generate Inventory Cost Top 10 List with Show Sorting option as Largest and ShowType as Inventory.
      Initialize;
      InventoryTop10ListSetup(ItemNo,ItemNo2,ShowSorting::Largest,ShowType::Inventory);

      // Verify: Inventory shown in Inventory Top 10 List Report is equal to the Inventory in Item Table.
      VerifyTop10ListReport(ItemNo,ItemNo2);
    END;

    [Test]
    [HandlerFunctions(InvtTop10ListRepRequestPageHandler)]
    PROCEDURE InvtTop10ListSmallestInventory@20();
    VAR
      ItemNo@1003 : Code[20];
      ItemNo2@1002 : Code[20];
      ShowSorting@1000 : 'Largest,Smallest';
      ShowType@1001 : 'Sales (LCY),Inventory';
    BEGIN
      // Create Setup to Generate Inventory Cost Top 10 List with Show Sorting option as Smallest and ShowType as Inventory.
      Initialize;
      InventoryTop10ListSetup(ItemNo,ItemNo2,ShowSorting::Smallest,ShowType::Inventory);

      // Verify: Inventory shown in Inventory Top 10 List Report is equal to the Inventory in Item Table.
      VerifyTop10ListReport(ItemNo,ItemNo2);
    END;

    LOCAL PROCEDURE InventoryTop10ListSetup@37(VAR ItemNo@1004 : Code[20];VAR ItemNo2@1007 : Code[20];ShowSorting@1009 : Option;ShowType@1008 : Option);
    VAR
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Setup: Create two Items with costing method as standard. Update Inventory.
      CreateItem(Item);
      ItemNo := Item."No.";
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Negative Adjmt.",ItemNo,LibraryRandom.RandDec(100,2));
      CreateItem(Item);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));
      ItemNo2 := Item."No.";

      // Create and Post Sales Order.
      CreateSalesOrder(SalesHeader,'',Item."No.",LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Generate Inventory - Transaction Detail Report.
      COMMIT;
      LibraryVariableStorage.Enqueue(ShowSorting);
      LibraryVariableStorage.Enqueue(ShowType);
      Item.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      REPORT.RUN(REPORT::"Inventory - Top 10 List",TRUE,FALSE,Item);
    END;

    [Test]
    [HandlerFunctions(InvtReordersRequestPageHandler)]
    PROCEDURE InventoryReorderSKUFalse@15();
    BEGIN
      // Create Setup to Generate Inventory Reorder with Use Stockkeeping as False.
      Initialize;
      InventoryReorder(FALSE);
    END;

    [Test]
    [HandlerFunctions(InvtReordersRequestPageHandler)]
    PROCEDURE InventoryReorderSKUTrue@14();
    BEGIN
      // Create Setup to Generate Inventory Reorder with Use Stockkeeping as True. Value used is important for test.
      Initialize;
      InventoryReorder(TRUE);
    END;

    LOCAL PROCEDURE InventoryReorder@10(UseStockKeepingUnit@1000 : Boolean);
    VAR
      Item@1176 : Record 27;
      Location@1007 : Record 14;
      SalesHeader@1006 : Record 36;
      ItemJournalLine@1005 : Record 83;
      SKUCreationMethod@1001 : 'Location,Variant,Location & Variant';
    BEGIN
      // Setup: Create a Item and Stockkeeping Unit. Update Inventory.
      CreateItem(Item);
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);
      IF UseStockKeepingUnit THEN
        CreateStockKeepingUnit(Item."No.",SKUCreationMethod::Location);
      CreateAndPostItemJrnl(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));
      Item.CALCFIELDS(Inventory);

      // Create Sales Order.
      Location.FINDFIRST;
      CreateSalesOrder(SalesHeader,Location.Code,Item."No.",Item.Inventory + LibraryRandom.RandDec(100,2));
      Item.CALCFIELDS(Inventory,"Qty. on Sales Order");

      // Exercise: Generate the Inventory Reorder Report.
      COMMIT;
      LibraryVariableStorage.Enqueue(UseStockKeepingUnit);
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - Reorders",TRUE,FALSE,Item);

      // Verify: Value of Available Inventory in Inventory Reorders Report is equal to the Available Inventory in
      // corresponding Item Table.
      LibraryReportDataset.LoadDataSetFile;

      IF UseStockKeepingUnit THEN BEGIN
        LibraryReportDataset.SetRange('ItemNo_SKU',Item."No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('QtyAvailable_StockKeepingUnit',-Item."Qty. on Sales Order")
      END ELSE BEGIN
        LibraryReportDataset.SetRange('No_Item',Item."No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('QtyAvailable',Item.Inventory - Item."Qty. on Sales Order");
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,NonstockItemSalesRequestPageHandler)]
    PROCEDURE NonstockItemSales@12();
    VAR
      NonstockItem@1000 : Record 5718;
      SalesHeader@1001 : Record 36;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Setup: Create NonStock Item
      Initialize;
      LibraryInventory.CreateNonStockItem(NonstockItem);
      CreateSalesOrder(SalesHeader,'',NonstockItem."Vendor Item No.",LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Generate Inventory List Report.
      ItemLedgerEntry.SETRANGE("Item No.",NonstockItem."Vendor Item No.");
      REPORT.RUN(REPORT::"Nonstock Item Sales",TRUE,FALSE,ItemLedgerEntry);

      // Verify: Item No. shown in Nonstock Item Sales Report is equal to the Item No. shown in Nonstock Item Table.
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemLedgerEntryItemNo',NonstockItem."Vendor Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('InvoicedQuantity',-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(RevalPostingTestItemRequestPageHandler)]
    PROCEDURE RevaluationPostingTest@17();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
      CalculatePer@1005 : 'Item Ledger Entry,Item';
      CalculationBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      // Setup: Create Item with costing method as standard. Value important for Test.
      Initialize;
      CreateItem(Item);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100) + 10);
      Item.CALCFIELDS(Inventory);

      // Create and Post Purchase order with One Item Line.
      // Run Adjust cost and create Revaluation Journal.Update Unit Cost (Revalued).
      CreatePurchaseOrder(PurchaseHeader,Item."No.",Item.Inventory,LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation);
      Item.SETRANGE("No.",Item."No.");
      LibraryCosting.CreateRevaluationJournal(
        ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Document No.",CalculatePer::Item,FALSE,FALSE,FALSE,CalculationBase::" ",FALSE);
      UpdateRevaluationJrnl(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Exercise: Generate Revaluation Posting - Test Report.
      COMMIT;
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      LibraryVariableStorage.Enqueue(FALSE);
      REPORT.RUN(REPORT::"Revaluation Posting - Test",TRUE,FALSE,ItemJournalLine);

      // Verify: Unit Cost (Revalued) shown in Revaluation Posting - Test Report is equal to the
      // Unit Cost (Revalued) shown in Item Journal Line Table.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Item_Journal_Line__Item_No__',ItemJournalLine."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Item_Journal_Line__Unit_Cost__Revalued__',
        ItemJournalLine."Unit Cost (Revalued)");
    END;

    [Test]
    [HandlerFunctions(InvtInboundTransferRequestPageHandler)]
    PROCEDURE InventoryInboundTransfer@39();
    VAR
      Item@1001 : Record 27;
      TransferLine@1003 : Record 5741;
      Location@1007 : Record 14;
      FromLocationCode@1000 : Code[10];
      ToLocationCode@1002 : Code[10];
      InTransitLocationCode@1006 : Code[10];
    BEGIN
      // Setup: Create Item, Location and Transfer Order to New Location.
      Initialize;
      CreateItem(Item);

      // Create Transfer From Location.
      CreateLocation(Location,FALSE);
      FromLocationCode := Location.Code;

      // Create Transfer To Location.
      CreateLocation(Location,FALSE);
      ToLocationCode := Location.Code;

      // Create Intransit Location.
      CreateLocation(Location,TRUE);
      InTransitLocationCode := Location.Code;
      CreateAndRealeaseTransferOrder(TransferLine,FromLocationCode,ToLocationCode,InTransitLocationCode,Item."No.");

      // Exercise: Run Inventory Inbound Transfer report.
      COMMIT;
      TransferLine.SETRANGE("Transfer-to Code",ToLocationCode);
      REPORT.RUN(REPORT::"Inventory - Inbound Transfer",TRUE,FALSE,TransferLine);

      // Verify: Check Transfer Line Quantity equals Quantity in report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('InTransitCode_TransLine',InTransitLocationCode);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('OutstandQty_TransLine',TransferLine."Outstanding Quantity");
    END;

    [Test]
    [HandlerFunctions(InvtOrderDetailsRequestPageHandler)]
    PROCEDURE InventoryOrderDetails@42();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1002 : Record 27;
      SalesQuantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item, and Sales Order.
      Initialize;
      CreateItem(Item);
      SalesQuantity := LibraryRandom.RandDec(100,2);
      CreateSalesOrder(SalesHeader,'',Item."No.",SalesQuantity);
      SalesHeader.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      SalesHeader.MODIFY(TRUE);

      // Exercise : Run Inventory Order Details report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory Order Details",TRUE,FALSE,Item);

      // Verify : Check Sales Header Shipment with report Shipment Date.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('SalesLineDocumentNo',SalesHeader."No.");
      // The element ShipmentDate_SalesLine is formatted in the report layout.
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ShipmentDate_SalesLine',FORMAT(SalesHeader."Shipment Date"));
    END;

    [Test]
    [HandlerFunctions(InvtPurchaseOrdersRequestPageHandler)]
    PROCEDURE InventoryPurchaseOrderDetails@41();
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item, and Purchase Order with one Item Line.
      Initialize;
      CreateItem(Item);
      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",PurchaseQuantity,LibraryRandom.RandDec(100,2),1);
      PurchaseHeader.VALIDATE("Expected Receipt Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      PurchaseHeader.MODIFY(TRUE);

      // Exercise : Run Inventory Purchase Orders report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory Purchase Orders",TRUE,FALSE,Item);

      // Verify : Check Purchase Header Expected Receipt Date with Report Expected Receipt Date.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_PurchaseLine',PurchaseHeader."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ExpReceiptDt_PurchaseLine',FORMAT(PurchaseHeader."Expected Receipt Date"));
    END;

    [Test]
    [HandlerFunctions(InvtPurchaseOrdersRequestPageHandler)]
    PROCEDURE InventoryPurchaseOrderDescription@73();
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item, and Purchase Order with one Item Line.
      Initialize;
      CreateItem(Item);
      Item.VALIDATE(Description,LibraryUtility.GenerateRandomText(50));
      Item.MODIFY(TRUE);

      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",PurchaseQuantity,LibraryRandom.RandDec(100,2),1);

      // Exercise : Run Inventory Purchase Orders report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory Purchase Orders",TRUE,FALSE,Item);

      // Verify : Check Purchase Header Expected Receipt Date with Report Expected Receipt Date.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_PurchaseLine',PurchaseHeader."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Description_Item',Item.Description);
    END;

    [Test]
    [HandlerFunctions(InvtSalesStatisticsRequestPageHandler)]
    PROCEDURE InventorySalesStatistic@31();
    VAR
      Item@1005 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item, Create And Post Sales Order.
      Initialize;
      CreateItem(Item);
      SalesQuantity := LibraryRandom.RandDec(100,2);
      CreateSalesOrder(SalesHeader,'',Item."No.",SalesQuantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise : Run Inventory - Sales Statistics report.
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - Sales Statistics",TRUE,FALSE,Item);

      // Verify : Check Sales Quantity with Quantity in report
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('SalesQty',SalesQuantity);
    END;

    [Test]
    [HandlerFunctions(InvtCustomerSalesRequestPageHandler)]
    PROCEDURE InventoryCustomerSales@30();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item, Create And Post Sales Order.
      Initialize;
      CreateItem(Item);
      SalesQuantity := LibraryRandom.RandDec(100,2);
      CreateSalesOrder(SalesHeader,'',Item."No.",SalesQuantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise : Run Inventory - Customer Sales report.
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - Customer Sales",TRUE,FALSE,Item);

      // Verify : Check Sales Quantity with Quantity in report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('CustName',SalesHeader."Sell-to Customer Name");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('InvQty_ItemLedgEntry',SalesQuantity);
    END;

    [Test]
    [HandlerFunctions(InvtVendorPurchasesRequestPageHandler)]
    PROCEDURE InventoryVendorPurchases@40();
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item, Create And Post Purchase Order with one Item Line.
      Initialize;
      CreateItem(Item);
      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",PurchaseQuantity,LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Run Inventory - Vendor Purchases report.
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - Vendor Purchases",TRUE,FALSE,Item);

      // Verify : Check Purchase Quantity with Quantity in report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('VendName',PurchaseHeader."Buy-from Vendor Name");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('InvQty_ValueEntry',PurchaseQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,InvtSalesBackOrdersRequestPageHandler)]
    PROCEDURE InventorySalesBackOrders@26();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1006 : Record 27;
    BEGIN
      // Setup: Create Item, Sales Order with Back Date.
      Initialize;
      CreateItem(Item);
      CreateSalesOrder(SalesHeader,'',Item."No.",LibraryRandom.RandDec(100,2));
      SalesHeader.VALIDATE("Shipment Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      SalesHeader.MODIFY(TRUE);

      // Exercise : Run Inventory - Sales Back Orders report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Inventory - Sales Back Orders",TRUE,FALSE,Item);

      // Verify : Check Sales Header Document No. with Document No. on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_SalesLine',SalesHeader."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ShipmentDate_SalesLine',FORMAT(SalesHeader."Shipment Date"));
    END;

    [Test]
    [HandlerFunctions(StatusRequestPageHandler)]
    PROCEDURE InventoryStatus@24();
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Setup : Create Item, Update Inventory And Find Item Ledger Entry.
      Initialize;
      CreateItem(Item);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));

      // Exercise : Run Status Report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      LibraryVariableStorage.Enqueue(WORKDATE);
      REPORT.RUN(REPORT::Status,TRUE,FALSE,Item);

      // Verify : Check Item Ledger Entry Quantity with Quantity on report.
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocumentNo_ItemLedgerEntry',ItemLedgerEntry."Document No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('RemainingQty',ItemLedgerEntry.Quantity);
    END;

    [Test]
    PROCEDURE CalculateInventory@23();
    VAR
      Item@1000 : Record 27;
      ItemJournalBatch@1009 : Record 233;
      ItemJournalLine@1007 : Record 83;
      Location@1002 : Record 14;
      CalculateInventory@1005 : Report 790;
      PurchaseQuantity@1003 : Decimal;
    BEGIN
      // Setup : Create item , Location, Post Purchase Order ,Create Item Journal Batch and assign to Item Journal Line.
      Initialize;
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::"Phys. Inventory");
      CreateItem(Item);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      CreateAndPostPurchaseOrder(Item."No.",Location.Code,PurchaseQuantity);

      // Exercise : Run Calculate Inventory report.
      ItemJournalLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      ItemJournalLine."Journal Batch Name" := ItemJournalBatch.Name;  // Needed for - SetItemJnlLine of Report - CalculateInventory.
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      Item.SETRANGE("No.",Item."No.");
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.InitializeRequest(WORKDATE,LibraryUtility.GetGlobalNoSeriesCode,TRUE);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.RUN;

      // Verify : Check Purchase Quantity with Inventory Journal Line Physical Qty.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,Location.Code);
      VerifyQuantity(
        PurchaseQuantity,ItemJournalLine."Qty. (Phys. Inventory)",ItemJournalLine."Document No.",ItemJournalLine.TABLECAPTION);
      VerifyQuantity(PurchaseQuantity,ItemJournalLine."Qty. (Calculated)",ItemJournalLine."Document No.",ItemJournalLine.TABLECAPTION);
    END;

    [Test]
    PROCEDURE CreateRevaluationJournal@52();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      PurchaseHeader@1002 : Record 38;
      ItemJournalBatch@1003 : Record 233;
      CalculatePer@1006 : 'Item Ledger Entry,Item';
      CalculationBase@1005 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item with costing method as standard, Random Value important.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandInt(100) + 10;
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      Item.CALCFIELDS(Inventory);

      // Create and Post Purchase order with one Item line.
      // Run Adjust cost and create Revaluation Journal.Update Unit Cost (Revalued).
      CreatePurchaseOrder(PurchaseHeader,Item."No.",Item.Inventory,LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation);

      // Exercise: Generate Calculate Inventory Value Report.
      Item.SETRANGE("No.",Item."No.");
      LibraryCosting.CreateRevaluationJournal(
        ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Document No.",CalculatePer::Item,FALSE,FALSE,FALSE,CalculationBase::" ",FALSE);

      // Verify : Verify that Revaluation Journal is created.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,'');

      // Verify quantity on Revaluation Journal is equal to Item quantity.
      VerifyQuantity(2 * Quantity,ItemJournalLine.Quantity,ItemJournalLine."Document No.",ItemJournalLine.TABLECAPTION);
    END;

    [Test]
    [HandlerFunctions(ItemRegQuantityRequestPageHandler)]
    PROCEDURE ItemRegisterQuantity@51();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      ItemRegister@1003 : Record 46;
      ItemLedgerEntry@1006 : Record 32;
      FromEntryNo@1005 : Integer;
      ToEntryNo@1004 : Integer;
    BEGIN
      // Setup: Create Item with costing method as standard.Create Purchase order with Two Item Lines.
      Initialize;
      CreateItem(Item);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),2);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      FindItemRegister(ItemRegister,FromEntryNo,ToEntryNo,Item."No.");

      // Exercise: Generate Calculate Inventory Value Report.
      REPORT.RUN(REPORT::"Item Register - Quantity",TRUE,FALSE,ItemRegister);

      // Verify : Check Item Ledger Entry Quantity with Quantity on report.Rounding in RTC is hard coded as 1.
      ItemLedgerEntry.GET(ItemRegister."From Entry No.");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocNo_ItemLedgEntry',ItemLedgerEntry."Document No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Quantity_ItemLedgEntry',ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(PostInvtCostToGLRequestPageHandler)]
    PROCEDURE PostInventoryCostToGLPostTrue@48();
    BEGIN
      // Run Post Inventory Cost to G/L with Post as True.
      Initialize;
      PostInventoryCostToGLPost(TRUE);
    END;

    [Test]
    [HandlerFunctions(PostInvtCostToGLRequestPageHandler)]
    PROCEDURE PostInventoryCostToGLPostFalse@47();
    BEGIN
      // Run Post Inventory Cost to G/L with Post as False.
      Initialize;
      PostInventoryCostToGLPost(FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE PostInventoryCostToGLPost@46(Post@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchInvHeader@1004 : Record 122;
      PostValueEntryToGL@1002 : Record 5811;
      PostMethod@1003 : 'per Posting Group,per Entry';
    BEGIN
      // Setup: Create Item with costing method as standard.Create Purchase Order with two Item Lines and Post It.
      Initialize;
      CreateItem(Item);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),2);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      FindPurchInvHeader(PurchInvHeader,PurchaseHeader."No.");

      // Exercise: Generate the Post Inventory Cost to G/L report.
      COMMIT;
      LibraryVariableStorage.Enqueue(PostMethod::"per Posting Group");
      LibraryVariableStorage.Enqueue(PurchInvHeader."No.");
      LibraryVariableStorage.Enqueue(Post);
      REPORT.RUN(REPORT::"Post Inventory Cost to G/L",TRUE,FALSE,PostValueEntryToGL);

      // Verify: Document No shown in Inventory Cost to G/L Report is equal to the Document No shown of Purchase Invoice Header.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_PostValueEntryToGL',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ItemValueEntryDocumentNo',PurchInvHeader."No.");

      // Verify Inventory Account in Gl Entry.
      VerifyInvtAccountInGLEntry(Item."No.",PurchInvHeader."No.",Post);
    END;

    [Test]
    [HandlerFunctions(InvtValuationRequestPageHandler)]
    PROCEDURE InventoryValuationExpCostFalse@58();
    BEGIN
      Initialize;
      InventoryValuationWithExpCost(FALSE);
    END;

    [Test]
    [HandlerFunctions(InvtValuationRequestPageHandler)]
    PROCEDURE InventoryValuationExpCostTrue@57();
    BEGIN
      Initialize;
      InventoryValuationWithExpCost(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE InventoryValuationWithExpCost@56(IncludeExpectedCost@1003 : Boolean);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchInvHeader@1004 : Record 122;
    BEGIN
      // Setup: Create Item with costing method as standard.Create Purchase Order with two Item Lines.
      CreateItem(Item);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),2);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      FindPurchInvHeader(PurchInvHeader,PurchaseHeader."No.");

      // Exercise: Generate Inventory Valuation with include Expected Cost False.
      COMMIT;
      RunInvtValuationReport(Item,'',0D,WORKDATE,IncludeExpectedCost);

      // Verify Value Entry Quantity.
      LibraryReportDataset.LoadDataSetFile;
      IF IncludeExpectedCost THEN
        LibraryReportDataset.AssertElementWithValueExists('Expected_Cost_IncludedCaption','Expected Cost Included');

      VerifyValueEntryQuantity(Item."No.",PurchInvHeader."No.");
    END;

    [Test]
    PROCEDURE InventoryValuationNoDuplicateExpCostLines@68();
    VAR
      PurchaseHeader@1002 : Record 38;
      Item@1000 : Record 27;
      RowNo@1004 : Integer;
      ValueFound@1001 : Boolean;
    BEGIN
      // [FEATURE] [Inventory Valuation]
      // [SCENARIO 378286] Expected cost line should not be shown in the report "Inventory Valuation" when expected amount is 0.
      // [GIVEN] Create item
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Post purchase order as received and invoiced
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [WHEN] Run report "Inventory Valuation" with parameter "Include expected cost" = TRUE
      SaveAsExcelInventoryValuationReport(Item."No.");

      // [THEN] The string with description "Expected Cost Included" shouldn't be in this report for created item
      RowNo := LibraryReportValidation.FindRowNoFromColumnNoAndValue(
          LibraryReportValidation.FindColumnNoFromColumnCaption('Item No.'),Item."No.");
      Assert.AreNotEqual(
        'Expected Cost Included',LibraryReportValidation.GetValueAt(ValueFound,RowNo + 1,
          LibraryReportValidation.FindColumnNoFromColumnCaption('Description')),IncorrectValueInCellErr);
    END;

    [Test]
    PROCEDURE InventoryValuationDuplicateExpCostLines@75();
    VAR
      PurchaseHeader@1004 : Record 38;
      Item@1003 : Record 27;
      RowNo@1001 : Integer;
    BEGIN
      // [FEATURE] [Inventory Valuation]
      // [SCENARIO 378286] Expected cost line should be shown in the report "Inventory Valuation" when expected amount is not 0.
      // [GIVEN] Create item
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Posting the receipt in Purchase Order
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Run report "Inventory Valuation" with parameter "Include expected cost" = TRUE
      SaveAsExcelInventoryValuationReport(Item."No.");

      // [THEN] The string with description "Expected Cost Included" should be in this report for created item
      RowNo := LibraryReportValidation.FindRowNoFromColumnNoAndValue(
          LibraryReportValidation.FindColumnNoFromColumnCaption('Item No.'),Item."No.");
      LibraryReportValidation.VerifyCellValueOnWorksheet(
        RowNo + 1,LibraryReportValidation.FindColumnNoFromColumnCaption('Description'),'Expected Cost Included','1');
    END;

    [Test]
    [HandlerFunctions(CloseInvtPeriodTestRequestPageHandler)]
    PROCEDURE CloseInventoryPeriodTest@59();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ItemJournalLine@1002 : Record 83;
      InventoryPeriod@1004 : Record 5814;
    BEGIN
      // Setup: Create Item with costing method as standard and update Inventory.
      Initialize;
      CreateInventoryPeriod(InventoryPeriod);
      CreateItem(Item);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));

      // Create and Post Sales Order using Random Value.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,'',Item."No.",Item.Inventory + LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Generate Inventory - Transaction Detail Report.
      REPORT.RUN(REPORT::"Close Inventory Period - Test",TRUE,FALSE,Item);

      // Verify : Verify Item No. With Generated Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Description_Item',Item.Description);
    END;

    [Test]
    [HandlerFunctions(InvtValuationRequestPageHandler)]
    PROCEDURE InventoryValuationWithLocationAndTransfer@29();
    VAR
      Item@1000 : Record 27;
      FromLocation@1001 : Record 14;
      ToLocation@1002 : Record 14;
      IntransitLocation@1003 : Record 14;
      PurchaseQuantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item and Locations for Transfer.Create and post Purchase Order / Transfer Order with Location.
      CreateItem(Item);
      CreateLocation(FromLocation,FALSE);
      CreateLocation(ToLocation,FALSE);
      CreateLocation(IntransitLocation,TRUE);
      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      CreateAndPostPurchaseOrder(Item."No.",FromLocation.Code,PurchaseQuantity);
      CreateAndPostTransferOrder(FromLocation.Code,ToLocation.Code,IntransitLocation.Code,Item."No.",PurchaseQuantity / 2);

      // Exercise: Generate Inventory Valuation.
      COMMIT;
      RunInvtValuationReport(Item,ToLocation.Code,CALCDATE('<1D>',WORKDATE),CALCDATE('<CM>',WORKDATE),FALSE);

      // Verify: Verify Quantity of Opening Balance on Inventory Valuation Report.
      VerifyOpeningBalanceOnInvtValuationReport(PurchaseQuantity / 2);
    END;

    [Test]
    [HandlerFunctions(PostInvtCostToGLRequestPageHandler)]
    PROCEDURE CheckFilterInfoOnPostInventoryCostToGLReport@72();
    VAR
      Item@1001 : Record 27;
      PostValueEntryToGL@1002 : Record 5811;
      PostMethod@1000 : 'per Posting Group,per Entry';
    BEGIN
      // [FEATURE] [Post Inventory Cost to G/L]
      // [SCENARIO 364399] Post Inventory Cost to G/L report should show Item filter information
      Initialize;

      // [GIVEN] Item with "No." = "X"
      CreateItem(Item);

      // [WHEN] Run Post Inventory Cost to G/L report with filters on "Item No." = "X"
      COMMIT;
      PostValueEntryToGL.SETRANGE("Item No.",Item."No.");
      LibraryVariableStorage.Enqueue(PostMethod::"per Entry"); // Equeue for PostInvtCostToGLRequestPageHandler
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(TRUE);
      REPORT.RUN(REPORT::"Post Inventory Cost to G/L",TRUE,FALSE,PostValueEntryToGL);

      // [THEN] Report contains info of applied filter "X"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ValueEntryFilter',STRSUBSTNO('Item No.: %1',Item."No."));
    END;

    [Test]
    [HandlerFunctions(PostInvtCostToGLTestRequestPageHandler)]
    PROCEDURE CheckFilterInfoOnPostInventoryCostToGLTestReport@74();
    VAR
      Item@1001 : Record 27;
      PostValueEntryToGL@1002 : Record 5811;
      SalesHeader@1003 : Record 36;
      PostMethod@1000 : 'per Posting Group,per Entry';
    BEGIN
      // [FEATURE] [Post Inventory Cost to G/L Test]
      // [SCENARIO 364399] Post Inventory Cost to G/L Test report should show Item filter information
      Initialize;

      // [GIVEN] Item with "No." = "X" with Inventory Transactions
      CreateItem(Item);
      CreateSalesOrder(SalesHeader,'',Item."No.",LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] Run Post Inventory Cost to G/L Test report with filters on "Item No." = "X"
      COMMIT;
      PostValueEntryToGL.SETRANGE("Item No.",Item."No.");
      LibraryVariableStorage.Enqueue(PostMethod::"per Entry"); // Equeue for PostInvtCostToGLRequestPageHandler
      LibraryVariableStorage.Enqueue('');
      REPORT.RUN(REPORT::"Post Invt. Cost to G/L - Test",TRUE,FALSE,PostValueEntryToGL);

      // [THEN] Report contains info of applied filter "X"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ValueEntryFilter',STRSUBSTNO('Item No.: %1',Item."No."));
    END;

    [Test]
    [HandlerFunctions(InvtValuationRequestPageHandler)]
    PROCEDURE CheckItemInfoOnInventoryValuationReport@69();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // [FEATURE] [Inventory Valuation]
      // [SCENARIO 371760] Item info should not be shown in Inventory Valuation report if there are no Item Ledger Entries posted
      Initialize;

      // [GIVEN] Item "X" has no related Item Ledger Entries
      LibraryInventory.CreateItem(Item);

      // [WHEN] Run Inventory Valuation report
      COMMIT;
      RunInvtValuationReport(Item,'',0D,WORKDATE,FALSE);

      // [THEN] Report doesn't contain info for Item "X"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueNotExist('ItemNo',Item."No.");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1003 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      UpdateInventorySetupCostPosting;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItem@6(VAR Item@1001 : Record 27);
    BEGIN
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2),Item."Reordering Policy",
        Item."Flushing Method",'','');
    END;

    LOCAL PROCEDURE CreateStockKeepingUnit@32(ItemNo@1000 : Code[20];SKUCreationMethod@1002 : Option);
    VAR
      Item@1003 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod,FALSE,TRUE);
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      IF StockkeepingUnit.FINDSET THEN
        REPEAT
          StockkeepingUnit.VALIDATE(
            "Standard Cost",
            LibraryRandom.RandDecInDecimalRange(StockkeepingUnit."Standard Cost",StockkeepingUnit."Standard Cost" + 100,2));
          StockkeepingUnit.MODIFY(TRUE);
        UNTIL StockkeepingUnit.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndPostItemJrnl@25(EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233;Type@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;LocationCode@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1001 : Decimal;DirectUnitCost@1002 : Decimal;NoOfItemLines@1003 : Integer);
    VAR
      PurchaseLine@1000 : Record 39;
      Count@1005 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      FOR Count := 1 TO NoOfItemLines DO
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);

      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),
          DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocation@35(VAR Location@1000 : Record 14;InTransit@1001 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Use As In-Transit",InTransit);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRealeaseTransferOrder@36(VAR TransferLine@1001 : Record 5741;FromLocationCode@1000 : Code[10];ToLocationCode@1005 : Code[10];IntransitLocationCode@1006 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      TransferHeader@1003 : Record 5740;
      ReleaseTransferDocument@1002 : Codeunit 5708;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,IntransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,LibraryRandom.RandDec(100,2));
      ReleaseTransferDocument.RUN(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrder@11(FromLocationCode@1000 : Code[10];ToLocationCode@1005 : Code[10];IntransitLocationCode@1006 : Code[10];ItemNo@1004 : Code[20];TransferQty@1007 : Decimal);
    VAR
      TransferHeader@1003 : Record 5740;
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,IntransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,TransferQty);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@54(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];PurchaseQuantity@1004 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2),1);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,PurchaseQuantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryPeriod@50(VAR InventoryPeriod@1000 : Record 5814);
    BEGIN
      InventoryPeriod.SETRANGE("Ending Date",WORKDATE);
      IF InventoryPeriod.FINDFIRST THEN
        EXIT;

      InventoryPeriod.INIT;
      InventoryPeriod.VALIDATE("Ending Date",WORKDATE);
      InventoryPeriod.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE SelectInventoryPostingSetup@53(VAR InventoryPostingSetup@1002 : Record 5813;ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",Item."Inventory Posting Group");
      InventoryPostingSetup.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItem@16(VAR Item@1000 : Record 27;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    BEGIN
      Item.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      Item.FINDSET;
    END;

    LOCAL PROCEDURE FindItemJournalLine@33(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.SETRANGE("Location Code",LocationCode);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemRegister@44(VAR ItemRegister@1005 : Record 46;VAR FromEntryNo@1001 : Integer;VAR ToEntryNo@1002 : Integer;ItemNo@1003 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      FromEntryNo := ItemLedgerEntry."Entry No.";
      ItemLedgerEntry.FINDLAST;
      ToEntryNo := ItemLedgerEntry."Entry No.";
      ItemRegister.SETRANGE("From Entry No.",FromEntryNo);
      ItemRegister.SETRANGE("To Entry No.",ToEntryNo);
      ItemRegister.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchInvHeader@34(VAR PurchInvHeader@1000 : Record 122;OrderNo@1001 : Code[20]);
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SaveAsExcelInventoryValuationReport@81(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      InventoryValuation@1003 : Report 1001;
    BEGIN
      COMMIT;
      Item.SETRANGE("No.",ItemNo);
      InventoryValuation.SETTABLEVIEW(Item);
      InventoryValuation.InitializeRequest(0D,WORKDATE,TRUE);
      LibraryReportValidation.SetFileName(LibraryUtility.GenerateGUID);
      InventoryValuation.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
      LibraryReportValidation.OpenExcelFile;
    END;

    LOCAL PROCEDURE UpdateRevaluationJrnl@18(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      FindItemJournalLine(ItemJournalLine,JournalTemplateName,JournalBatchName,'');
      ItemJournalLine.VALIDATE("Unit Cost (Revalued)",LibraryRandom.RandDec(10,2));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunInvtValuationReport@60(Item@1003 : Record 27;LocationCode@1004 : Code[20];StartDate@1002 : Date;EndingDate@1001 : Date;IncludeExpectedCost@1000 : Boolean);
    BEGIN
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryVariableStorage.Enqueue(StartDate);
      LibraryVariableStorage.Enqueue(EndingDate);
      LibraryVariableStorage.Enqueue(IncludeExpectedCost);
      REPORT.RUN(REPORT::"Inventory Valuation",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE VerifyTop10ListReport@22(ItemNo@1001 : Code[20];ItemNo2@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      FindItem(Item,ItemNo,ItemNo2);
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        Item.CALCFIELDS(Inventory,"Sales (LCY)");
        LibraryReportDataset.SetRange('Item__No__',Item."No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('Item_Inventory',Item.Inventory);
        LibraryReportDataset.AssertCurrentRowValue('Item__Sales__LCY__',Item."Sales (LCY)");
      UNTIL Item.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyInvtAccountInGLEntry@43(ItemNo@1001 : Code[20];DocumentNo@1000 : Code[20];Post@1004 : Boolean);
    VAR
      InventoryPostingSetup@1003 : Record 5813;
      GLEntry@1002 : Record 17;
    BEGIN
      SelectInventoryPostingSetup(InventoryPostingSetup,ItemNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",InventoryPostingSetup."Inventory Account");

      // Verify row existence for Inventory Account in G/L Entry.
      Assert.AreEqual(Post,GLEntry.FINDFIRST,'Unexpected GL entries for document ' + DocumentNo);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyValueEntryQuantity@55(ItemNo@1000 : Code[20];DocumentNo@1001 : Code[20]);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.CALCSUMS("Item Ledger Entry Quantity");
      LibraryReportDataset.SetRange('ItemNo',ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('IncreaseInvoicedQty',ValueEntry."Item Ledger Entry Quantity");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyQuantity@45(ExpectedQuantity@1000 : Decimal;ActualQuantity@1001 : Decimal;DocumentNo@1003 : Code[20];TableCaption@1002 : Text[1024]);
    BEGIN
      Assert.AreEqual(ExpectedQuantity,ActualQuantity,STRSUBSTNO(QuantityErr,ActualQuantity,TableCaption,DocumentNo));
    END;

    LOCAL PROCEDURE VerifyOpeningBalanceOnInvtValuationReport@28(ExpectedOpenningBalance@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('StartingInvoicedQty',ExpectedOpenningBalance);
    END;

    LOCAL PROCEDURE UpdateInventorySetupCostPosting@195();
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",FALSE);
      InventorySetup.MODIFY(TRUE);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@19(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE InvtCostAndPriceListRepRequestPageHandler@1173(VAR InventoryCostAndPriceList@1174 : TestRequestPage 716);
    BEGIN
      InventoryCostAndPriceList.Control1.SETVALUE(TRUE); // Use Stockkeeping Units in the report.
      InventoryCostAndPriceList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtListRepRequestPageHandler@49(VAR InventoryList@1174 : TestRequestPage 701);
    BEGIN
      InventoryList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtTransactionDetailRepRequestPageHandler@63(VAR InventoryTransactionDetail@1174 : TestRequestPage 704);
    BEGIN
      InventoryTransactionDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtTop10ListRepRequestPageHandler@70(VAR InventoryTopTenList@1174 : TestRequestPage 711);
    VAR
      ShowSorting@1001 : Variant;
      ShowType@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowSorting);
      LibraryVariableStorage.Dequeue(ShowType);
      InventoryTopTenList.Control1.SETVALUE(ShowSorting); // Show sorting: Largest, Smallest.
      InventoryTopTenList.Control3.SETVALUE(ShowType); // Show Type: Sales, Inventory.
      InventoryTopTenList.Control5.SETVALUE(0); // No. of records to print.
      InventoryTopTenList.Control6.SETVALUE(FALSE); // Item not in inventory.
      InventoryTopTenList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtReordersRequestPageHandler@1170(VAR InventoryReorders@1174 : TestRequestPage 717);
    VAR
      UseStockkeepingUnit@1172 : Variant;
    BEGIN
      // Use stockkeeping units in the report.
      LibraryVariableStorage.Dequeue(UseStockkeepingUnit);
      InventoryReorders.UseStockkeepUnit.SETVALUE(UseStockkeepingUnit);
      InventoryReorders.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE NonstockItemSalesRequestPageHandler@61(VAR NonstockItemSales@1174 : TestRequestPage 5700);
    BEGIN
      NonstockItemSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RevalPostingTestItemRequestPageHandler@76(VAR RevaluationPostingTest@1174 : TestRequestPage 5812);
    VAR
      ShowDim@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowDim);
      RevaluationPostingTest.Control1.SETVALUE(ShowDim); // Show dimensions in report.
      RevaluationPostingTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtInboundTransferRequestPageHandler@82(VAR InventoryInboundTransfer@1174 : TestRequestPage 5702);
    BEGIN
      InventoryInboundTransfer.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtOrderDetailsRequestPageHandler@62(VAR InventoryOrderDetails@1174 : TestRequestPage 708);
    BEGIN
      InventoryOrderDetails.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtPurchaseOrdersRequestPageHandler@38(VAR InventoryPurchaseOrder@1174 : TestRequestPage 709);
    BEGIN
      InventoryPurchaseOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtSalesStatisticsRequestPageHandler@67(VAR InventorySalesStatistics@1174 : TestRequestPage 712);
    BEGIN
      InventorySalesStatistics.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtCustomerSalesRequestPageHandler@65(VAR InventoryCustomerSales@1174 : TestRequestPage 713);
    BEGIN
      InventoryCustomerSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtVendorPurchasesRequestPageHandler@64(VAR InventoryVendorPurchases@1174 : TestRequestPage 714);
    BEGIN
      InventoryVendorPurchases.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtSalesBackOrdersRequestPageHandler@66(VAR InventorySalesBackOrders@1174 : TestRequestPage 718);
    BEGIN
      InventorySalesBackOrders.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE StatusRequestPageHandler@71(VAR Status@1174 : TestRequestPage 706);
    VAR
      StatusDate@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StatusDate);
      Status.StatusDate.SETVALUE(StatusDate);
      Status.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemRegQuantityRequestPageHandler@78(VAR ItemRegisterQuantity@1174 : TestRequestPage 703);
    BEGIN
      ItemRegisterQuantity.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PostInvtCostToGLRequestPageHandler@86(VAR PostInventoryCostToGL@1174 : TestRequestPage 1002);
    VAR
      PostMethod@1002 : Variant;
      DocNo@1000 : Variant;
      Post@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PostMethod);
      PostInventoryCostToGL.PostMethod.SETVALUE(PostMethod); // Post Method: per entry or per Posting Group.
      LibraryVariableStorage.Dequeue(DocNo);
      PostInventoryCostToGL.DocumentNo.SETVALUE(DocNo); // Doc No. required when posting per Posting Group.
      LibraryVariableStorage.Dequeue(Post); // Post to G/L.
      PostInventoryCostToGL.Post.SETVALUE(Post);
      PostInventoryCostToGL.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PostInvtCostToGLTestRequestPageHandler@80(VAR PostInventoryCostToGLTest@1174 : TestRequestPage 1003);
    VAR
      PostMethod@1002 : Variant;
      DocNo@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PostMethod);
      PostInventoryCostToGLTest.PostingMethod.SETVALUE(PostMethod); // Post Method: per entry or per Posting Group.
      LibraryVariableStorage.Dequeue(DocNo);
      PostInventoryCostToGLTest.DocumentNo.SETVALUE(DocNo); // Doc No. required when posting per Posting Group.
      PostInventoryCostToGLTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InvtValuationRequestPageHandler@96(VAR InventoryValuation@1174 : TestRequestPage 1001);
    VAR
      StartDate@1002 : Variant;
      EndingDate@1000 : Variant;
      IncludeExpectedCost@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartDate);
      InventoryValuation.StartingDate.SETVALUE(StartDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      InventoryValuation.EndingDate.SETVALUE(EndingDate);
      LibraryVariableStorage.Dequeue(IncludeExpectedCost);
      InventoryValuation.IncludeExpectedCost.SETVALUE(IncludeExpectedCost);
      InventoryValuation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CloseInvtPeriodTestRequestPageHandler@79(VAR CloseInventoryPeriodTest@1174 : TestRequestPage 1004);
    BEGIN
      CloseInventoryPeriodTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [SCM]
      Unsupported version tags:
      US: Unable to Compile
      MX: Unable to Compile
      CA: Unable to Compile

      Test Various Inventory Reports.
      1. Report Inventory Cost and Price List.Standard Cost shown is equal to the Standard Cost in Item Table.
      2. Report Inventory Cost and Price List. Multiple Stockkeeping Units created and
         Standard Cost shown in is equal to the Standard Cost in Item Table.
      3. Report Inventory - List Check New Item created is listed.
      4. Report Inventory - Transaction Detail .  Check Item Ledger Entry Created.
      5. Report Inventory - Top 10 List Report : sorting is based on Item with Largest Sales Amount (LCY) in Item Table.
      6. Report Inventory - Top 10 List Report : sorting is based on Item with Smallest Sales Amount (LCY)in Item Table.
      7. Report Inventory - Top 10 List Report : sorting is based on Item with Largest Inventory in Item Table.
      8. Report Inventory - Top 10 List Report : sorting is based on Item with Smallest Inventory in Item Table.
      9. Report Inventory Reorder Available Inventory shown is equal to the Available Inventory in Item Table.
      10. Report Inventory Reorder Available with Use Stockkeeping Unit as True and
          Inventory shown is equal to the Available InventoUpdateRevaluationJrnlry in Item Table.
      11. Report Nonstock Item Sales. Check Nonstock Item is shown in the Report.
      12. Report Revaluation Posting - Test. Unit Cost (Calculated) shown in report is equal to Unit Cost (Calculated) shown in Item
          Journal Line Table.
      13. Verify Transfer Quantity after running Inventory - Inbound Transfer Report.
      14. Verify Shipment Date after running Inventory Order Details Report.
      15. Verify Receipt Date after run Inventory Purchase Orders Report.
      16. Verify Sales Quantity after run Inventory - Sales Statistics Report.
      17. Verify Sales Quantity after run Inventory - Customer Sales Report.
      18. Verify Purchase Line Quantity after run Inventory - Vendor Purchases Report.
      19. Verify Document No. after run Inventory - Sales Back Orders Report.
      20. Verify Quantity after run Status Report.
      21. Verify Physical And Calculated Inventory Quantity after run Batch Report Calculate Inventory.
      22. Verify Create Revaluation Journal after run batch report Create Revaluation Journal.
      23. Verify Item Register Quantity Report.
      24. Verify Post Inventory cost to G/L report with post as TRUE.
      25. Verify Post Inventory cost to G/L report with post as FALSE.
      26. Verify Inventory valuation report with include expected cost as FALSE.
      27. Verify Inventory valuation report with include expected cost as TRUE.
      28. Verify Close Inventory period report.
      29. Verify Opening Balance after posting Transfer Order on Inventory Valuation Report with Location Filter.

        Covers Test Cases for WI - 217046
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        InvtCostAndPriceListSKUFalse                      139410,142045
        InvtCostAndPriceListSKUTrue                       139410,142045
        InvtListReport                                    139355,142041
        InventoryTransactionDetail                        139401,142042
        InvtTop10ListLargestSalesLCY                      139406,142043
        InvtTop10ListSmallestSalesLCY                     139406,142043
        InvtTop10ListLargestInventory                     139406,142043
        InvtTop10ListSmallestInventory                    139406,142043
        InventoryReorderSKUFalse                          139411,142044
        InventoryReorderSKUTrue                           139411,142044
        NonstockItemSales                                 139502
        RevaluationPostingTest                            139371
        CreateRevaluationJournal                          129091
        ItemRegisterQuantity                              139400
        PostInventoryCostToGLPostTrue                     139360
        PostInventoryCostToGLPostFalse                    139360
        InventoryValuationExpCostFalse                    139359
        InventoryValuationExpCostTrue                     139359
        CloseInventoryPeriodTest                          139485

        Covers Test cases :
        --------------------------------------------------------------------------------------
        Test Function Name                               TFS ID
        --------------------------------------------------------------------------------------
        InventoryInboundTransfer                          139503
        InventoryOrderDetails                             139404
        InventoryPurchaseOrderDetails                     139405
        InventorySalesStatistic                           139407
        InventoryCustomerSales                            139408
        InventoryVendorPurchases                          139409
        InventorySalesBackOrders                          139412
        InventoryStatus                                   129141
        CalculateInventory                                129010

        Covers Test Cases for WI
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        InventoryValuationWithLocationAndTransfer         56643
    }
    END.
  }
}

