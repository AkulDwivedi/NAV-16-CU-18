OBJECT Codeunit 134082 ERM Apply Invoice EMU Currency
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryERM@1005 : Codeunit 131300;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountError@1001 : TextConst 'ENU="%1 must be %2 in \\%3 %4=%5."';

    [Test]
    PROCEDURE ApplyInvoiceWithEMUCurrency@2();
    VAR
      SalesReceivablesSetup@1011 : Record 311;
      GenJournalLine@1000 : Record 81;
      SalesHeader@1003 : Record 36;
      SalesInvoiceHeader@1004 : Record 112;
      CurrencyCode@1001 : Code[10];
      PostedDocumentNo@1005 : Code[20];
      ApplnbetweenCurrencies@1008 : 'None,EMU,All';
      Amount@1010 : Decimal;
    BEGIN
      // Check that G/L Entry has correct amount after apply EMU currency.

      // Setup: Modify Sales & Receivables Setup for EMU Currency, Create Currency, Modify Exchange Rate, Create Sales Invoice and Post
      // it.
      Initialize;
      ModifySalesAndReceivablesSetup(ApplnbetweenCurrencies,SalesReceivablesSetup."Appln. between Currencies"::EMU);

      CurrencyCode := CreateCurrency;
      ModifyExchangeRate(CurrencyCode);
      PostedDocumentNo := CreateAndPostSalesInvoice(SalesHeader,CurrencyCode);
      FindSalesInvoiceHeaderAmt(SalesInvoiceHeader,PostedDocumentNo);
      Amount := LibraryERM.ConvertCurrency(SalesInvoiceHeader."Amount Including VAT",SalesHeader."Currency Code",'',WORKDATE);
      Amount := LibraryERM.ConvertCurrency(Amount,SalesHeader."Currency Code",'',WORKDATE);

      // Exercise: Create General Lines and Apply Posted Invoice and Post with New Currency with Modification of Exchange Rate.
      CreateGeneralJournalLine(
        GenJournalLine,SalesHeader."Sell-to Customer No.",PostedDocumentNo,-SalesInvoiceHeader."Amount Including VAT");
      ModifyExchangeRate(GenJournalLine."Currency Code");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify G/L Entry for EMU Currency amount.
      VerifyGLEntry(GenJournalLine."Document No.",CurrencyCode,Amount);

      // Cleanup: Set Default value in Sales & Receivables Setup.
      ModifySalesAndReceivablesSetup(ApplnbetweenCurrencies,ApplnbetweenCurrencies);
    END;

    [Test]
    PROCEDURE ApplyInvoiceEMUCurrAdjExchRate@1();
    VAR
      SalesReceivablesSetup@1011 : Record 311;
      GenJournalLine@1000 : Record 81;
      SalesHeader@1003 : Record 36;
      SalesInvoiceHeader@1004 : Record 112;
      PostedDocumentNo@1005 : Code[20];
      ApplnbetweenCurrencies@1008 : 'None,EMU,All';
      Amount@1010 : Decimal;
    BEGIN
      // Check that G/L Entry has correct amount after apply EMU currency with Adjust Exchange Rate Batch Job.

      // Setup: Modify Sales & Receivables Setup for EMU Currency, Create Currency, Modify Exchange Rate, Create Sales Invoice and Post
      // it and Run Adjust Exchange Rate Batch Job.
      Initialize;
      ModifySalesAndReceivablesSetup(ApplnbetweenCurrencies,SalesReceivablesSetup."Appln. between Currencies"::EMU);

      PostedDocumentNo := CreateAndPostSalesInvoice(SalesHeader,CreateCurrency);
      ModifyExchangeRate(SalesHeader."Currency Code");
      LibraryERM.RunAdjustExchangeRates(SalesHeader."Currency Code",0D,WORKDATE,'Test',WORKDATE,PostedDocumentNo,FALSE);
      FindSalesInvoiceHeaderAmt(SalesInvoiceHeader,PostedDocumentNo);
      Amount := LibraryERM.ConvertCurrency(SalesInvoiceHeader."Amount Including VAT",SalesHeader."Currency Code",'',WORKDATE);

      // Exercise: Create General Lines, Apply Posted Invoice and Post with New Currency.
      CreateGeneralJournalLine(
        GenJournalLine,SalesHeader."Sell-to Customer No.",PostedDocumentNo,-SalesInvoiceHeader."Amount Including VAT");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify G/L Entry for EMU Currency amount.
      VerifyGLEntry(SalesInvoiceHeader."No.",SalesHeader."Currency Code",Amount);

      // Cleanup: Set Default value in Sales & Receivables Setup.
      ModifySalesAndReceivablesSetup(ApplnbetweenCurrencies,ApplnbetweenCurrencies);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@3(VAR SalesHeader@1001 : Record 36;CurrencyCode@1003 : Code[10]) PostedDocumentNo : Code[20];
    VAR
      SalesLine@1002 : Record 37;
      LibrarySales@1000 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer(CurrencyCode));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(50));
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@5(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@14() : Code[10];
    VAR
      GeneralLedgerSetup@1053 : Record 98;
      Currency@1001 : Record 4;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Invoice Rounding Precision",GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
      Currency.VALIDATE("EMU Currency",TRUE);
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@10() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@17(VAR GenJournalLine@1001 : Record 81;AccountNo@1003 : Code[20];AppliedToDocNo@1002 : Code[20];Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,AccountNo,0);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliedToDocNo);
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.VALIDATE("Currency Code",CreateCurrency);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeaderAmt@7(VAR SalesInvoiceHeader@1000 : Record 112;No@1001 : Code[20]);
    BEGIN
      SalesInvoiceHeader.SETRANGE("No.",No);
      SalesInvoiceHeader.FINDFIRST;
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
    END;

    LOCAL PROCEDURE ModifySalesAndReceivablesSetup@12(VAR OldApplnbetweenCurrencies@1002 : Option;ApplnbetweenCurrencies@1001 : Option);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldApplnbetweenCurrencies := SalesReceivablesSetup."Appln. between Currencies";
      SalesReceivablesSetup.VALIDATE("Appln. between Currencies",ApplnbetweenCurrencies);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyExchangeRate@13(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE("Relational Currency Code",CreateCurrency);
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@9(DocumentNo@1001 : Code[20];CurrencyCode@1004 : Code[10];Amount@1006 : Decimal);
    VAR
      Currency@1005 : Record 4;
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Bal. Account Type",GLEntry."Bal. Account Type"::"G/L Account");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDFIRST;
      Currency.GET(CurrencyCode);
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION,
          GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
    END;

    BEGIN
    {
      // [FEATURE] [General Ledger] [EMU Currency]
      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute

      Test EMU Currency on Apply Invoice with General Line and with Adjust Exchange Rate batch job.
        1. Check that G/L Entry has correct amount after apply EMU currency.
        2. Check that G/L Entry has correct amount after apply EMU currency and Adjust Exchange Rate.

        Covers Test Cases:
        --------------------------------------------------
        Test Function Name                    TFS ID
        --------------------------------------------------
        ApplyInvoiceWithEMUCurrency       123907 to 123912
        ApplyInvoiceEMUCurrAdjExchRate    123913 to 123917
    }
    END.
  }
}

