OBJECT Codeunit 136123 Service Price Including VAT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryERM@1005 : Codeunit 131300;
      LibraryResource@1008 : Codeunit 130511;
      LibraryInventory@1007 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryService@1002 : Codeunit 131902;
      IsInitialized@1000 : Boolean;
      ExpectedConfirm@1003 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      AmountErrorErr@1021 : TextConst '@@@="%1:Value1;%2:Value2;%3:TableCaption";ENU=%1 must be equal to %2 in %3.';

    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ServiceOrderPriceIncludingVAT@2();
    BEGIN
      // Covers Test Case No TC116892.
      // Test Amount Including VAT in Service Line and General Ledger Entry.

      ServiceOrderVAT(TRUE);
    END;

    [Test]
    PROCEDURE ServiceOrderPriceExcludingVAT@6();
    BEGIN
      // Covers Test Case No TC116892.
      // Test Amount Excluding VAT in Service Line and General Ledger Entry.

      ServiceOrderVAT(FALSE);
    END;

    LOCAL PROCEDURE ServiceOrderVAT@7(PriceIncludingVAT@1000 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // 1.Setup: Setup Data for Posting of Service Order.
      Initialize;
      CreateServiceOrder(ServiceHeader,PriceIncludingVAT);
      GetServiceLine(ServiceLine,ServiceHeader);
      CopyServiceLine(TempServiceLine,ServiceLine);

      // 2.Exercise: Create and Post the Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3.Verify: Verify General Ledger Entries.
      VerifyAmountIncludingVAT(TempServiceLine);
      VerifyGeneralLedgerEntry(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler)]
    PROCEDURE CreditMemoPriceIncludingVAT@9();
    BEGIN
      // Covers document number CU5912-3 - refer to TFS ID 167035.
      // Test Service Ledger Entry after Posting Service Credit Memo with Price Including VAT True.

      CreditMemoVAT(TRUE);
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler)]
    PROCEDURE CreditMemoPriceExcludingVAT@81();
    BEGIN
      // Covers document number CU5912-3 - refer to TFS ID 167035.
      // Test Service Ledger Entry after Posting Service Credit Memo with Price Including VAT True.

      CreditMemoVAT(FALSE);
    END;

    LOCAL PROCEDURE CreditMemoVAT@8(PriceIncludingVAT@1005 : Boolean);
    VAR
      ServiceHeader@1000 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // 1. Setup: Create Credit Memo with Service Lines of Type Item Resource, Cost, G/L Account and Copy Service Lines in Temporary
      // Table.
      CreateServiceCreditMemo(ServiceHeader,PriceIncludingVAT);
      GetServiceLine(ServiceLine,ServiceHeader);
      CopyServiceLine(TempServiceLine,ServiceLine);

      // 2. Exercise: Post Service Credit Memo.
      ExecuteConfirmHandlerInvoiceES;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify Service Ledger Entry.
      VerifyServiceLedgerEntry(TempServiceLine,ServiceHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@25(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];VATPercentage@1004 : Integer);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);

      // Use Random because value is not important.
      ServiceLine.VALIDATE(Quantity,RANDOM(100));
      ServiceLine.VALIDATE("Unit Price",RANDOM(100));
      ServiceLine.VALIDATE("VAT %",VATPercentage);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCreditMemo@23(VAR ServiceHeader@1000 : Record 5900;PriceIncludingVAT@1018 : Boolean);
    VAR
      ServiceLine@1002 : Record 5902;
      GLAccount@1005 : Record 15;
      Resource@1007 : Record 156;
      ServiceCost@1008 : Record 5905;
      VATPercentage@1001 : Integer;
    BEGIN
      // Service Header, Service Line with Type Item, Resource, Cost and G/L Account.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",'');
      ServiceHeader.VALIDATE("Prices Including VAT",PriceIncludingVAT);
      ServiceHeader.MODIFY(TRUE);

      LibraryERM.FindGLAccount(GLAccount);
      CreateServiceCost(ServiceCost);
      LibraryResource.FindResource(Resource);

      IF PriceIncludingVAT THEN
        VATPercentage := 10 + RANDOM(10);

      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo,VATPercentage);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Resource,Resource."No.",VATPercentage);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,VATPercentage);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::"G/L Account",GLAccount."No.",VATPercentage);
    END;

    LOCAL PROCEDURE CreateServiceLine@3(ServiceHeader@1001 : Record 5900;ServiceItemNo@1005 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
      Counter@1003 : Integer;
    BEGIN
      // To Create a new Item and Service Lines.

      // Use Random Number Generator to generate 1 to 10 service lines.
      FOR Counter := 1 TO 1 + RANDOM(9) DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
        ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);

        // Use Random for Quantity, Unit Price and VAT %.
        ServiceLine.VALIDATE(Quantity,RANDOM(10));
        ServiceLine.VALIDATE("Unit Price",RANDOM(200));
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrder@5(VAR ServiceHeader@1000 : Record 5900;PriceIncludingVAT@1004 : Boolean);
    VAR
      Customer@1003 : Record 18;
      ServiceItem@1005 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      // To Create a new Service Header, Service Item.
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      ServiceHeader.VALIDATE("Prices Including VAT",PriceIncludingVAT);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      CreateServiceLine(ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceCost@12(VAR ServiceCost@1000 : Record 5905);
    BEGIN
      LibraryService.CreateServiceCost(ServiceCost);
      ServiceCost.VALIDATE("Account No.",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceCost.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyServiceLine@40(VAR TempServiceLine@1000 : TEMPORARY Record 5902;VAR ServiceLine@1003 : Record 5902);
    BEGIN
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ExecuteConfirmHandlerInvoiceES@10();
    BEGIN
      IF CONFIRM(STRSUBSTNO(ExpectedConfirm)) THEN;
    END;

    LOCAL PROCEDURE GetServiceLine@4(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE VerifyAmountIncludingVAT@15(VAR TempServiceLine@1003 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      TempServiceLine.FINDSET;
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",TempServiceLine."Line No.");
        Assert.AreNearlyEqual(
          TempServiceLine."Amount Including VAT",ServiceInvoiceLine."Amount Including VAT",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(
            AmountErrorErr,ServiceInvoiceLine.FIELDCAPTION("Amount Including VAT"),ServiceInvoiceLine."Amount Including VAT",
            ServiceInvoiceLine.TABLECAPTION));
        Assert.AreNearlyEqual(
          TempServiceLine."Line Amount",ServiceInvoiceLine."Line Amount",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(
            AmountErrorErr,ServiceInvoiceLine.FIELDCAPTION("Line Amount"),ServiceInvoiceLine."Line Amount",
            ServiceInvoiceLine.TABLECAPTION));
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGeneralLedgerEntry@11(OrderNo@1000 : Code[20]);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source Type",GLEntry."Source Type"::Customer);
        GLEntry.TESTFIELD("Source No.",ServiceInvoiceHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@20(VAR TempServiceLine@1002 : TEMPORARY Record 5902;PreAssignedNo@1003 : Code[20]);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
      ServiceCrMemoHeader@1000 : Record 5994;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::"Credit Memo");
      ServiceLedgerEntry.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      REPEAT
        ServiceLedgerEntry.SETRANGE("Document Line No.",TempServiceLine."Line No.");
        ServiceLedgerEntry.FINDFIRST;
        ServiceLedgerEntry.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLedgerEntry.TESTFIELD(Quantity,TempServiceLine.Quantity);
        Assert.AreNearlyEqual(
          TempServiceLine."Unit Price" / (1 + TempServiceLine."VAT %" / 100),ServiceLedgerEntry."Unit Price",0.01,
          'Unit price incorrect');
      UNTIL TempServiceLine.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceESConfirmHandler@24(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := (Question = ExpectedConfirm);
    END;

    BEGIN
    {
      // [FEATURE] [Price Including VAT] [Service]
      Unsupported version tags:
      NA: Uses Sales Tax instead of VAT

      Test the posting of Service Order with and without Price Including VAT.
        1. Test the Amount Including VAT in Service Line and General Ledger Entries.
        2. Test Service Ledger Entry for Service Credit Memo with Price Including VAT True and False.

      Cover Test case:
           TFS_TC_ID= 116892.

      TFS_TS_ID = 167035
      Covered Test cases:
        TFS_TC_ID=141399
    }
    END.
  }
}

