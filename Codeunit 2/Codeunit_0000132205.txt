OBJECT Codeunit 132205 Library - Kitting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryAssembly@1005 : Codeunit 132207;
      LibraryERM@1001 : Codeunit 131300;
      LibraryInventory@2000 : Codeunit 132201;
      LibraryManufacturing@1004 : Codeunit 132202;
      LibraryResource@1006 : Codeunit 130511;
      BOMItemLineNo@1000 : Integer;
      ITEM_DESC@1002 : TextConst 'ENU=Test Calculate Sales Price';
      POSTING_GRP_DESC@1003 : TextConst 'ENU=Test Assembly Orders';

    PROCEDURE ItemMake@19(VAR Item@1002 : Record 27;ItemName@1000 : Code[20]);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      UnitOfMeasure@1003 : Record 204;
      VATProdPostingGroup@1005 : Record 324;
      InventoryPostingGroup@1006 : Record 94;
      TaxGroup@1111 : Record 321;
      GeneralPostingSetup@1010 : Record 252;
    BEGIN
      CLEAR(Item);
      Item.VALIDATE("No.",ItemName);
      Item.INSERT(TRUE);
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.VALIDATE("Item No.",Item."No.");
      UnitOfMeasure.FINDFIRST;
      ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasure.Code);
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",1);
      ItemUnitOfMeasure.INSERT(TRUE);
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      Item.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      VATProdPostingGroup.FINDLAST;
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup.Code);
      InventoryPostingGroup.FINDFIRST;
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);

      IF TaxGroup.FINDFIRST THEN
        Item.VALIDATE("Tax Group Code",TaxGroup.Code);

      Item.MODIFY(TRUE);
    END;

    PROCEDURE ItemCreate@14(ItemName@1001 : Code[20];Description@1002 : Text[30];BaseUOM@1003 : Code[10];UnitPrice@1004 : Decimal;StdCost@1005 : Decimal) : Code[20];
    VAR
      ItemUOM@1006 : Record 5404;
      Item@1000 : Record 27;
    BEGIN
      ItemMake(Item,ItemName);
      Item.VALIDATE(Description,Description);
      ItemUOM.GET(Item."No.",Item."Base Unit of Measure");
      Item.VALIDATE("Base Unit of Measure",'');
      Item.MODIFY(TRUE);
      ItemUOM.DELETE(TRUE);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,Item."No.",BaseUOM,1);
      Item.VALIDATE("Base Unit of Measure",BaseUOM);
      Item.VALIDATE("Unit Price",UnitPrice);
      Item.VALIDATE("Standard Cost",StdCost);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Unit Cost",StdCost);
      Item.VALIDATE("Single-Level Material Cost",StdCost);
      Item.VALIDATE("Rolled-up Material Cost",StdCost);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemWithNewUOM@110(Cost@1000 : Decimal;Price@1001 : Decimal) : Code[20];
    VAR
      UOM@1100 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItem(Cost,Price,UOM.Code));
    END;

    PROCEDURE CreateItem@2001(Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10]) : Code[20];
    VAR
      Item@1003 : Record 27;
      InvtPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      Item.GET(ItemCreate(noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE),ITEM_DESC,UOM,Price,Cost));
      CreateInvPostGroup(InvtPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroup.Code);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemWithNewUOMUsingItemNo@16(ItemNo@1006 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal) : Code[20];
    VAR
      UOM@1002 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItemNo(ItemNo,Cost,Price,UOM.Code));
    END;

    PROCEDURE CreateItemNo@3(Number@1006 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10]) : Code[20];
    VAR
      Item@1003 : Record 27;
      InvtPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      IF Number = '' THEN
        Number := noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE);
      Item.GET(ItemCreate(Number,ITEM_DESC,UOM,Price,Cost));
      CreateInvPostGroup(InvtPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroup.Code);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemWithLotAndNewUOM@111(Cost@1000 : Decimal;Price@1001 : Decimal;LotSize@1006 : Decimal) : Code[20];
    VAR
      UOM@1100 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItemwithLot(Cost,Price,UOM.Code,LotSize));
    END;

    PROCEDURE CreateItemwithLot@17(Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10];Lot@1006 : Decimal) : Code[20];
    VAR
      Item@1003 : Record 27;
      InvtPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      Item.GET(ItemCreate(noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE),ITEM_DESC,UOM,Price,Cost));
      Item."Lot Size" := Lot;
      CreateInvPostGroup(InvtPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroup.Code);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateStdCostItemWithNewUOM@112(Cost@1000 : Decimal;Price@1001 : Decimal;LotSize@1006 : Decimal) : Code[20];
    VAR
      UOM@1100 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItemwithStandard(Cost,Price,UOM.Code,LotSize));
    END;

    PROCEDURE CreateItemwithStandard@18(Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10];Lot@1006 : Decimal) : Code[20];
    VAR
      Item@1003 : Record 27;
      InvtPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      Item.GET(ItemCreate(noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE),ITEM_DESC,UOM,Price,Cost));
      Item."Lot Size" := Lot;
      CreateInvPostGroup(InvtPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroup.Code);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemWithLotAndNewUOMUsingItemNo@5(ItemNo@1007 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal;LotSize@1006 : Decimal) : Code[20];
    VAR
      UOM@1002 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItemwithLotNo(ItemNo,Cost,Price,UOM.Code,LotSize));
    END;

    PROCEDURE CreateItemwithLotNo@8(Number@1007 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10];Lot@1006 : Decimal) : Code[20];
    VAR
      Item@1003 : Record 27;
      InventoryPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      IF Number = '' THEN
        Number := noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE);
      Item.GET(ItemCreate(Number,ITEM_DESC,UOM,Price,Cost));
      Item."Lot Size" := Lot;
      CreateInvPostGroup(InventoryPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateStdCostItemWithNewUOMUsingItemNo@113(ItemNo@1007 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal;LotSize@1006 : Decimal) : Code[20];
    VAR
      UOM@1100 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateItemwithStandardNo(ItemNo,Cost,Price,UOM.Code,LotSize));
    END;

    PROCEDURE CreateItemwithStandardNo@7(Number@1007 : Code[20];Cost@1000 : Decimal;Price@1001 : Decimal;UOM@1002 : Code[10];Lot@1006 : Decimal) : Code[20];
    VAR
      Item@1003 : Record 27;
      InvtPostingGroup@1004 : Record 94;
      noSeriesMgt@1005 : Codeunit 396;
    BEGIN
      IF Number = '' THEN
        Number := noSeriesMgt.GetNextNo(CreateNoSeries,WORKDATE,TRUE);
      Item.GET(ItemCreate(Number,ITEM_DESC,UOM,Price,Cost));
      Item."Lot Size" := Lot;
      CreateInvPostGroup(InvtPostingGroup);
      Item.VALIDATE("Inventory Posting Group",InvtPostingGroup.Code);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    PROCEDURE CreateResourceWithNewUOM@114(Cost@1004 : Decimal;Price@1003 : Decimal) : Code[20];
    VAR
      UOM@1100 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UOM);
      EXIT(CreateResource(Cost,Price,UOM.Code));
    END;

    PROCEDURE CreateResource@6(Cost@1004 : Decimal;Price@1003 : Decimal;UOM@1002 : Code[10]) : Code[20];
    VAR
      Resource@1001 : Record 156;
      GenProductPostingGroup@1005 : Record 251;
      ResourceUnitOfMeasure@1006 : Record 205;
      LibraryUtility@1007 : Codeunit 131000;
    BEGIN
      CreateUnitOfMeasure(UOM);
      ResourceMake(Resource,LibraryUtility.GenerateGUID);
      Resource.VALIDATE("Unit Cost",Cost);
      Resource.VALIDATE("Unit Price",Price);
      LibraryResource.CreateResourceUnitOfMeasure(ResourceUnitOfMeasure,Resource."No.",UOM,1);
      ResourceUnitOfMeasure.VALIDATE("Related to Base Unit of Meas.",TRUE);
      ResourceUnitOfMeasure.MODIFY(TRUE);
      Resource.VALIDATE("Base Unit of Measure",UOM);
      CreateResourceInvPostGroup(GenProductPostingGroup);
      Resource.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      Resource.MODIFY;
      EXIT(Resource."No.");
    END;

    PROCEDURE CreateOrder@12(DueDate@1004 : Date;ItemNo@1000 : Code[20];Quantity@1001 : Decimal) : Code[20];
    VAR
      AssemblyHeader@1002 : Record 900;
    BEGIN
      CreateAssemblySetup;
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,DueDate,ItemNo,'',Quantity,'');
      EXIT(AssemblyHeader."No.");
    END;

    PROCEDURE CreateOrderNo@4(DueDate@1003 : Date;Number@1004 : Code[20];Item@1000 : Code[20];Quantity@1001 : Decimal) : Code[20];
    VAR
      AssemblyHeader@1002 : Record 900;
    BEGIN
      CreateAssemblySetup;
      CLEAR(AssemblyHeader);
      AssemblyHeader."Document Type" := AssemblyHeader."Document Type"::Order;
      AssemblyHeader."No." := Number;
      AssemblyHeader.INSERT(TRUE);
      AssemblyHeader.VALIDATE("Due Date",DueDate);
      AssemblyHeader.VALIDATE("Item No.",Item);
      AssemblyHeader.VALIDATE(Quantity,Quantity);
      AssemblyHeader.MODIFY(TRUE);
      EXIT(AssemblyHeader."No.");
    END;

    PROCEDURE CreateInvPostGroup@28(VAR InventoryPostingGroup@1000 : Record 94);
    BEGIN
      IF InventoryPostingGroup.FINDFIRST THEN
        EXIT;
      InventoryPostingGroup.Code := 'A';
      InventoryPostingGroup.Description := POSTING_GRP_DESC;
      InventoryPostingGroup.INSERT;
    END;

    PROCEDURE CreateResourceInvPostGroup@29(VAR GenProductPostingGroup@1000 : Record 251);
    BEGIN
      IF GenProductPostingGroup.FINDFIRST THEN
        EXIT;
      GenProductPostingGroup.Code := 'A';
      GenProductPostingGroup.Description := POSTING_GRP_DESC;
      GenProductPostingGroup.INSERT;
    END;

    PROCEDURE CreateNoSeries@1() : Code[10];
    VAR
      NoSeries@1001 : Record 308;
      noSeriesLine@1000 : Record 309;
    BEGIN
      NoSeries.INIT;
      NoSeries.Code := COPYSTR(CREATEGUID,1,10);    // todo: use the last instead of the first charackters
      NoSeries."Default Nos." := TRUE;
      NoSeries."Manual Nos." := TRUE;
      IF NOT NoSeries.INSERT THEN;

      noSeriesLine.INIT;
      noSeriesLine."Series Code" := NoSeries.Code;
      noSeriesLine."Starting No." := NoSeries.Code + '0000000001';
      noSeriesLine."Increment-by No." := 1;
      IF NOT noSeriesLine.INSERT THEN;

      EXIT(NoSeries.Code);
    END;

    PROCEDURE CreateAssemblySetup@2();
    VAR
      AssemblySetup@1000 : Record 905;
    BEGIN
      AssemblySetup.INIT;
      AssemblySetup."Primary Key" := '';
      AssemblySetup."Assembly Order Nos." := CreateNoSeries;
      IF NOT AssemblySetup.INSERT THEN;
    END;

    PROCEDURE CreateBOMComponentLine@54(VAR ParentItem@1000 : Record 27;Type@1001 : Option;No@1002 : Code[20];Quantity@1003 : Decimal;UOMCode@1004 : Code[10];Fixed@1005 : Boolean);
    VAR
      BOMComponent@1006 : Record 90;
    BEGIN
      CreateUnitOfMeasure(UOMCode);
      LibraryManufacturing.CreateBOMComponent(BOMComponent,ParentItem."No.",Type,No,Quantity,UOMCode);
      IF (Type = BOMComponent.Type::Resource) AND Fixed THEN BEGIN
        BOMComponent.VALIDATE("Resource Usage Type",BOMComponent."Resource Usage Type"::Fixed);
        BOMComponent.MODIFY(TRUE);
      END;
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::Assembly);
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateUnitOfMeasure@15(UOMCode@1000 : Code[10]);
    VAR
      UnitOfMeasure@1001 : Record 204;
    BEGIN
      IF NOT UnitOfMeasure.GET(UOMCode) THEN BEGIN
        UnitOfMeasure.INIT;
        UnitOfMeasure.Code := UOMCode;
        UnitOfMeasure.INSERT(TRUE);
      END;
    END;

    PROCEDURE ResourceMake@52(VAR Resource@1000 : Record 156;ResourceNo@1001 : Code[20]);
    VAR
      ResUnitOfMeasure@1002 : Record 205;
      UnitOfMeasure@1003 : Record 204;
      GenProdPostingGroup@1004 : Record 251;
      VATProdPostingGroup@1005 : Record 324;
    BEGIN
      CLEAR(Resource);
      Resource.VALIDATE("No.",ResourceNo);
      Resource.INSERT(TRUE);
      UnitOfMeasure.FINDFIRST;
      LibraryResource.CreateResourceUnitOfMeasure(ResUnitOfMeasure,ResourceNo,UnitOfMeasure.Code,1);
      Resource.VALIDATE("Base Unit of Measure",ResUnitOfMeasure.Code);
      GenProdPostingGroup.FINDLAST;
      Resource.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup.Code);
      VATProdPostingGroup.FINDFIRST;
      Resource.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup.Code);
      Resource.MODIFY(TRUE);
    END;

    PROCEDURE SetLookahead@9(LookahedFormula@1000 : Text[30]);
    VAR
      CompanyInfo@1001 : Record 79;
    BEGIN
      IF CompanyInfo.GET THEN;
      EVALUATE(CompanyInfo."Check-Avail. Period Calc.",LookahedFormula);
      CompanyInfo."Check-Avail. Time Bucket" := CompanyInfo."Check-Avail. Time Bucket"::Day;
      IF NOT CompanyInfo.INSERT THEN
        CompanyInfo.MODIFY;
    END;

    PROCEDURE AddProdBOMItem@21(VAR MfgItem@1000 : Record 27;SubItemNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      ProdBOMHeader@1004 : Record 99000771;
      ProdBOMLine@1005 : Record 99000772;
      subItem@1003 : Record 27;
    BEGIN
      IF MfgItem.IsMfgItem THEN
        ProdBOMHeader.GET(MfgItem."Production BOM No.")
      ELSE BEGIN
        ProdBOMHeader."No." := COPYSTR(MfgItem."No." + 'BOM',1,MAXSTRLEN(ProdBOMHeader."No."));
        ProdBOMHeader.Status := ProdBOMHeader.Status::Certified;
        ProdBOMHeader.INSERT;
        MfgItem."Production BOM No." := ProdBOMHeader."No.";
        MfgItem."Replenishment System" := MfgItem."Replenishment System"::"Prod. Order";
        MfgItem.MODIFY
      END;
      ProdBOMLine."Production BOM No." := ProdBOMHeader."No.";
      BOMItemLineNo += 1;
      ProdBOMLine."Line No." := BOMItemLineNo;
      ProdBOMLine.Type := ProdBOMLine.Type::Item;
      ProdBOMLine."No." := SubItemNo;
      subItem.GET(SubItemNo);
      ProdBOMLine."Unit of Measure Code" := subItem."Base Unit of Measure";
      ProdBOMLine.Quantity := Qty;
      ProdBOMLine.INSERT;
    END;

    PROCEDURE SetCopyFrom@10(CopyFrom@1001 : 'Order Header,Item/Resource Card');
    VAR
      AssemblySetup@1000 : Record 905;
    BEGIN
      AssemblySetup.GET;
      AssemblySetup."Copy Component Dimensions from" := CopyFrom;
      AssemblySetup.MODIFY;
    END;

    PROCEDURE AddLine@11(AsmHeader@1000 : Record 900;Type@1001 : Option;No@1002 : Code[20];UOMCode@1003 : Code[10];Quantity@1004 : Decimal;QtyPer@1005 : Integer;Desc@1006 : Text[50]);
    VAR
      AssemblyLine@1008 : Record 901;
    BEGIN
      LibraryAssembly.CreateAssemblyLine(AsmHeader,AssemblyLine,Type,No,UOMCode,Quantity,QtyPer,Desc);
    END;

    PROCEDURE TotalQuantity@13(AssemblyHeader@1000 : Record 900) : Decimal;
    VAR
      AssemblyLine@1001 : Record 901;
      LibraryAssembly@1003 : Codeunit 132207;
      TempCount@1002 : Decimal;
    BEGIN
      LibraryAssembly.SetLinkToLines(AssemblyHeader,AssemblyLine);
      TempCount := 0;
      IF AssemblyLine.FINDSET THEN
        REPEAT
          TempCount += AssemblyLine.Quantity;
        UNTIL AssemblyLine.NEXT = 0;
      EXIT(TempCount);
    END;

    BEGIN
    END.
  }
}

