OBJECT Codeunit 144083 Job GL Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobTask@1500005 : Record 1001;
      LibraryJob@1500001 : Codeunit 131920;
      LibraryERM@1500002 : Codeunit 131300;
      Assert@1500009 : Codeunit 130000;
      isInitialized@1500000 : Boolean;
      JobContractErr@1500003 : TextConst '@@@="%1 and %2 and %3 = Journal Template and Journal Batch and Journal Line Number";ENU="Job Line Type must not be Contract in Gen. Journal Line Journal Template Name=''%1'',Journal Batch Name=''%2'',Line No.=''%3''."';
      JobBothSchedulContractErr@1500006 : TextConst '@@@="%1 and %2 and %3 = Journal Template and Journal Batch and Journal Line Number";ENU="Job Line Type must not be Both Schedule and Contract in Gen. Journal Line Journal Template Name=''%1'',Journal Batch Name=''%2'',Line No.=''%3''."';
      JobSchedulErr@1500007 : TextConst '@@@="%1 and %2 and %3 = Journal Template and Journal Batch and Journal Line Number";ENU="CWIP G/L Type must not be   in Gen. Journal Line Journal Template Name=''%1'',Journal Batch Name=''%2'',Line No.=''%3''."';
      JobTypeErr@1500008 : TextConst '@@@="%1 = Job No.";ENU="Job Type must be equal to ''Capital WIP''  in Job: No.=%1. Current value is '' ''."';

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeContract@1500002();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with Job Line Type as Contract
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job GL Journal and Post
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Contract,JobTask,GenJournalLine);
      UpdateCWIPGLType(GenJournalLine,GenJournalLine."CWIP G/L Type"::Labor);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verified Job Line Type With Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobContractErr,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeBothScheduleAndContract@1500001();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with Job Line Type as Both Schedule and Contract
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job GL Journal and Post
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::"Both Schedule and Contract",JobTask,GenJournalLine);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verified Job Line Type With Both Schedule and Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobBothSchedulContractErr,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
          GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeSchedule@1500007();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with CWIP G/L Type as Blank
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job GL Journal and Post
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Schedule,JobTask,GenJournalLine);
      UpdateCWIPGLType(GenJournalLine,GenJournalLine."CWIP G/L Type"::" ");
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verified Job Journals with CWIP G/L Type as Blank
      Assert.ExpectedError(
        STRSUBSTNO(
          JobSchedulErr,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeScheduleAndNotCWIPJobWithCWIPGLAsMaterial@1500000();
    VAR
      GenJournalLine@1500001 : Record 81;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals withNot CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Non CWIP Job and Job Task
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job GL Journal and Post
      JobTask := JobTask2;
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Schedule,JobTask,GenJournalLine);

      ASSERTERROR GenJournalLine.VALIDATE("CWIP G/L Type",GenJournalLine."CWIP G/L Type"::Material);

      // [THEN] Verified Job Journals with not CWIP Job and CWIP G/L Type as Material
      Assert.ExpectedError(STRSUBSTNO(JobTypeErr,Job."No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeScheduleAndNotCWIPJobWithCWIPGLAsOverheads@1500013();
    VAR
      GenJournalLine@1500001 : Record 81;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with not CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Non CWIP Job and Job Task
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job GL Journal and Post
      JobTask := JobTask2;
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Schedule,JobTask,GenJournalLine);

      ASSERTERROR GenJournalLine.VALIDATE("CWIP G/L Type",GenJournalLine."CWIP G/L Type"::Overheads);

      // [THEN] Verified Job Journals with not CWIP Job and CWIP G/L Type as Overheads
      Assert.ExpectedError(STRSUBSTNO(JobTypeErr,Job."No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithJobLineTypeScheduleAndNotCWIPJobWithCWIPGLAsLabor@1500014();
    VAR
      GenJournalLine@1500001 : Record 81;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with not CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Non CWIP Job and Job Task
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job GL Journal and Post
      JobTask := JobTask2;
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Schedule,JobTask,GenJournalLine);

      ASSERTERROR GenJournalLine.VALIDATE("CWIP G/L Type",GenJournalLine."CWIP G/L Type"::Labor);

      // [THEN] Verified Job Journals with not CWIP Job and CWIP G/L Type as Labor
      Assert.ExpectedError(STRSUBSTNO(JobTypeErr,Job."No."));
    END;

    [Test]
    PROCEDURE JobGLCreationWithMultiLines@1500003();
    VAR
      GenJournalLine@1500002 : Record 81;
      RecordCount@1500000 : Integer;
    BEGIN
      // [SCENARIO 164093] Post Job G/L Journals with three Lines
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job GL Journal and Post
      CreateMultipleJobJournalLine(GenJournalLine);
      RecordCount := GenJournalLine.COUNT;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verified Job Journals with three Lines
      VerifyScheduleJobLineType(JobTask."Job No.",GenJournalLine."Document No.",RecordCount);
    END;

    LOCAL PROCEDURE Initialize@1500039();
    VAR
      Job@1500001 : Record 167;
      JobPostingGroup@1500000 : Record 208;
      LibrarySetupStorage@1500003 : Codeunit 131009;
    BEGIN
      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateMultipleJobJournalLine@1500006(VAR GenJournalLine@1500000 : Record 81);
    VAR
      i@1500001 : Integer;
      CWIPGLType@1500002 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO BEGIN
        LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Schedule,JobTask,GenJournalLine);
        CWIPGLType += 1;
        UpdateCWIPGLType(GenJournalLine,CWIPGLType);
      END;
    END;

    LOCAL PROCEDURE UpdateCWIPGLType@1500004(VAR GenJournalLine@1500000 : Record 81;CWIPGLType@1500001 : ' ,Labor,Material,Overheads');
    BEGIN
      GenJournalLine.VALIDATE("CWIP G/L Type",CWIPGLType);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyScheduleJobLineType@1500005(JobNo@1500005 : Code[20];DocumentNo@1500001 : Code[20];ExpectedCount@1500002 : Integer);
    VAR
      DummyJobLedgerEntry@1500000 : Record 169;
    BEGIN
      DummyJobLedgerEntry.SETRANGE("Job No.",JobNo);
      DummyJobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyJobLedgerEntry,ExpectedCount);
    END;

    BEGIN
    END.
  }
}

