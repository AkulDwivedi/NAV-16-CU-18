OBJECT Codeunit 137012 SCM Costing Sales Returns I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Item@1009 : Record 27;
      LibraryRandom@1007 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryCosting@1012 : Codeunit 132200;
      LibrarySales@1001 : Codeunit 130509;
      Assert@1003 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      SalesAmountMustBeSameErr@1004 : TextConst 'ENU=Sales Amount must be same.';
      ErrorGeneratedMustBeSameErr@1006 : TextConst 'ENU=Error Generated Must Be Same.';
      ApplFromItemEntryNoTxt@1008 : TextConst '@@@="Document Type=%1, Document No.=%2, Line No.=%3";ENU="Appl.-from Item Entry must have a value in Sales Line: Document Type=%1, Document No.=%2, Line No.=%3. It cannot be zero or empty."';
      MsgSalesLineTxt@1010 : TextConst 'ENU=Sales Line must not exist.';
      CorrectedInvoiceNoQst@1045 : TextConst 'ENU=have a Corrected Invoice No. Do you want to continue?';

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnsChargeAVG@19();
    BEGIN
      // Covers TFS_TC_ID 120924,120925,120926,120927,120928,120929,120930,120931,120932,120933.
      SalesReturnApplyCharge(Item."Costing Method"::Average,1,1);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnsNegChargeAVG@23();
    BEGIN
      // Covers TFS_TC_ID 121229,121230,121231,121232,121233.
      SalesReturnApplyCharge(Item."Costing Method"::Average,2,-1);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnsChargeFIFO@17();
    BEGIN
      // Covers TFS_TC_ID 120951,120953,120954,120955,120956,120958.
      SalesReturnApplyCharge(Item."Costing Method"::FIFO,0,1);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnsItemNegChargeAVG@14();
    BEGIN
      // Covers TFS_TC_ID 121186,121187,121188.
      SalesReturnApplyCharge(Item."Costing Method"::Average,1,-1);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnsItemNegChargeFIFO@12();
    BEGIN
      // Covers TFS_TC_ID 121189,121190,121191,121192.
      SalesReturnApplyCharge(Item."Costing Method"::FIFO,1,-1);
    END;

    LOCAL PROCEDURE SalesReturnApplyCharge@3(CostingMethod@1000 : Option;ChargeOnItem@1001 : Integer;SignFactor@1009 : Decimal);
    VAR
      SalesHeader@1010 : Record 36;
      SalesLine@1005 : Record 37;
      TempSalesLine@1013 : TEMPORARY Record 37;
      TempSalesLine2@1003 : TEMPORARY Record 37;
    BEGIN
      // 1. Setup: Create required Sales Setup.
      Initialize;
      ExecuteConfirmHandler;
      CreateSalesReturnSetup(SalesHeader,SalesLine,TempSalesLine,CostingMethod);

      // 2. Exercise: Create Sales Return Order and apply on sales shipment.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",TempSalesLine."Sell-to Customer No.");
      CreateSalesLines(SalesHeader,SalesLine,CostingMethod,ChargeOnItem,1);
      UpdateSalesLines(SalesLine);
      UpdateSalesLineNegativeQty(SalesLine,SignFactor);
      CreateItemChargeAssignmentLine(SalesLine,TempSalesLine."Document No.",TempSalesLine."No.");
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Run Adjust Cost Batch job.
      LibraryCosting.AdjustCostItemEntries(TempSalesLine."No.",'');

      // 3. Verify: Verify Sales Amount after charge returned.
      // Verify customer ledger entry for total amount including VAT.
      VerifySalesAmountChargeReturn(TempSalesLine,TempSalesLine2);
      VerifyCustomerLedgerEntry(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnCopyDocPostedShip@15();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      TempSalesLine@1005 : TEMPORARY Record 37;
      TempSalesLine2@1004 : TEMPORARY Record 37;
      DocumentType@1009 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Covers TFS_TC_ID 120944,120946,120948,120949,120950.
      // 1. Setup: Create required Sales setup.
      Initialize;
      ExecuteConfirmHandler;
      CreateSalesReturnSetup(SalesHeader,SalesLine,TempSalesLine,Item."Costing Method"::Average);

      // 2. Exercise: Create Sales Return Order using Copy Document of Posted Sales shipment.
      SalesCopyDocument(SalesHeader,TempSalesLine2,SalesHeader."Document Type"::"Return Order",DocumentType::"Posted Shipment");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Run Adjust Cost Batch job.
      LibraryCosting.AdjustCostItemEntries(TempSalesLine."No.",'');

      // 3. Verify: Verify customer ledger entry for total amount including VAT.
      VerifyCustomerLedgerEntry(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnCopyDocPostedCrMemo@4();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      Customer@1005 : Record 18;
      TempSalesLine@1002 : TEMPORARY Record 37;
      TempSalesLine2@1000 : TEMPORARY Record 37;
      DocumentType@1009 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Covers TFS_TC_ID 120934,120935,120936,120939,120940,120941,120942,120943.
      // 1. Setup: Create required Sales setup.
      // Update Apply From Item Entry No.
      Initialize;
      ExecuteConfirmHandler;
      UpdateSalesAndReceivableSetup(TRUE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item."Costing Method"::Average);
      Item.GET(SalesLine."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      UpdateSalesLines(SalesLine);
      UpdateApplyFromItemEntryNo(SalesLine."No.",SalesHeader);
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Create Sales Invoice using Copy Document of Posted Credit Memo.
      SalesCopyDocument(SalesHeader,TempSalesLine2,SalesHeader."Document Type"::Invoice,DocumentType::"Posted Credit Memo");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Run Adjust Cost Batch job.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // 3. Verify: Verify customer ledger entry for total amount including VAT.
      VerifyCustomerLedgerEntry(TempSalesLine2,TempSalesLine);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnApplyFromItemEntry@2();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers TFS_TC_ID 120935.
      // 1. Setup: Create required Sales setup.
      Initialize;
      ExecuteConfirmHandler;
      UpdateSalesAndReceivableSetup(TRUE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Item."Costing Method"::FIFO);
      UpdateSalesLines(SalesLine);

      // 2. Exercise: Post Sales Return Order with 'Appl.-from Item Entry = 0'.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify Apply from Item Entry Error.
      Assert.AreEqual(
        STRSUBSTNO(ApplFromItemEntryNoTxt,SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No." ),
        GETLASTERRORTEXT,ErrorGeneratedMustBeSameErr);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesReturnItemAVGFIFO@26();
    VAR
      SalesHeader@1008 : Record 36;
      SalesLine@1010 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      TempSalesLine2@1001 : TEMPORARY Record 37;
    BEGIN
      // Covers TFS_TC_ID 121234,121235,121236,121237,121238,121239,121240,121241,121242,121243,121244,121245,121246,121247,121248.
      // 1. Setup: Create required Sales setup.
      Initialize;
      ExecuteConfirmHandler;
      UpdateSalesAndReceivableSetup(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item."Costing Method"::FIFO);
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::Average,1,0);
      UpdateSalesLineNegativeQty(SalesLine,-1);
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Create Sales Return Order with Charge (Item) and apply on sales shipment to single Item.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",TempSalesLine."Sell-to Customer No.");
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,1,1);
      UpdateSalesLines(SalesLine);
      CreateItemChargeAssignmentLine(SalesLine,TempSalesLine."Document No.",TempSalesLine."No.");
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify Sales Amount after charge returned.
      // Verify customer ledger entry for total amount including VAT.
      VerifySalesAmountChargeReturn(TempSalesLine,TempSalesLine2);
      VerifyCustomerLedgerEntry(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesOrdMoveNegLine@13();
    VAR
      SalesHeader@1008 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeader2@1010 : Record 36;
      Customer@1006 : Record 18;
      TempSalesLine@1003 : TEMPORARY Record 37;
      TempSalesLine2@1002 : TEMPORARY Record 37;
      ToDocType@1004 : ',,Order,Invoice,Return Order,Credit Memo';
      FromDocType@1005 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo';
    BEGIN
      // Covers TFS_TC_ID 120924,121249,121250,121251,121252,121253,121254,127822,127823,127824.
      // 1. Setup: Create required Sales setup.
      Initialize;
      ExecuteConfirmHandler;
      UpdateSalesAndReceivableSetup(FALSE);
      CreateCustomer(Customer);

      // 2. Exercise: Create Sales Order with two Items one with (negative Quantity). Move Negative Item line to new Sales Return Order.
      // Post Sales Return Order  and Sales Order. Run Adjust cost.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,2,0);
      SalesLine.VALIDATE(Quantity,-SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);
      MoveNegativeLines(SalesHeader,SalesHeader2,FromDocType::Order,ToDocType::"Return Order");
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      FindSalesLine(SalesLine,SalesHeader2);
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries('','');

      // 3. Verify: Verify customer ledger entry for total amount including VAT.
      VerifyCustomerLedgerEntry(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    PROCEDURE SalesInvoiceChargeTwoItemsAVG@30();
    BEGIN
      // Covers TFS_TC_ID 120860,120862,120863,120864
      SalesInvoiceApplyCharge(Item."Costing Method"::Average,2);
    END;

    [Test]
    PROCEDURE SalesInvoiceChargeOneItemFIFO@1();
    BEGIN
      // Covers TFS_TC_ID 120865,120867,120868,120869.
      SalesInvoiceApplyCharge(Item."Costing Method"::FIFO,1);
    END;

    LOCAL PROCEDURE SalesInvoiceApplyCharge@38(CostingMethod@1001 : Option;NoOfItemLine@1000 : Integer);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
      TempSalesLine2@1002 : TEMPORARY Record 37;
    BEGIN
      // 1. Setup: Create required Sales setup.
      Initialize;
      CreateSalesReturnSetup(SalesHeader,SalesLine,TempSalesLine,CostingMethod);

      // 2. Exercise: Create Sales Invoice with one Charge (Item) and one or two Item line. Apply Charge on sales shipment.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,TempSalesLine."Sell-to Customer No.");
      CreateSalesLines(SalesHeader,SalesLine,CostingMethod,0,1);
      UpdateSalesLines(SalesLine);
      UpdateSalesLineNegativeQty(SalesLine,-1);
      CreateItemChargeAssignmentLine(SalesLine,TempSalesLine."Document No.",TempSalesLine."No.");
      CreateSalesLines(SalesHeader,SalesLine,CostingMethod,NoOfItemLine,0);
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries('','');

      // 3. Verify: Verify Sales Amount after charge returned.
      VerifySalesAmountChargeReturn(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    PROCEDURE SalesInvoiceApplyFromItemEntry@32();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
      TempSalesLine2@1002 : TEMPORARY Record 37;
    BEGIN
      // Covers TFS_TC_ID 120870,120872,120874.
      // 1. Setup: Create required Sales setup.
      Initialize;
      UpdateSalesAndReceivableSetup(TRUE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item."Costing Method"::FIFO);
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::Average,1,0);
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Create Sales Invoice with one Charge (Item) and two Item line,Items with different costing method.
      // Update Apply FromItem Entry No and Apply Charge on sales shipment.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,TempSalesLine."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,TempSalesLine."No.",TempSalesLine.Quantity);
      UpdateApplyFromItemEntryNo(TempSalesLine."No.",SalesHeader);
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::Average,0,1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(50,2));
      SalesLine.MODIFY(TRUE);
      CreateItemChargeAssignmentLine(SalesLine,TempSalesLine."Document No.",TempSalesLine."No.");
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,1,0);
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries('','');

      // 3. Verify: Verify Sales Amount after charge returned.
      VerifySalesAmountChargeReturn(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE SalesOrdMoveNegLineApplyEntry@33();
    VAR
      SalesHeader@1008 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeader2@1010 : Record 36;
      TempSalesLine@1003 : TEMPORARY Record 37;
      TempSalesLine2@1002 : TEMPORARY Record 37;
      ToDocType@1004 : ',,Order,Invoice,Return Order,Credit Memo';
      FromDocType@1005 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo';
    BEGIN
      // Covers TFS_TC_ID 120875,120877,120878,120879,120881,120882,120883,120884,120885,120886,120887,120888,120889.
      // 1. Setup: Create required Sales setup.
      Initialize;
      ExecuteConfirmHandler;
      CreateSalesReturnSetup(SalesHeader,SalesLine,TempSalesLine,Item."Costing Method"::FIFO);

      // 2. Exercise: Create Sales Order with two Items one with (negative Quantity). Move Negative Item line to new Sales Return Order.
      // Post Sales Return Order  and Sales Order. Run Adjust cost.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,TempSalesLine."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,TempSalesLine."No.",TempSalesLine.Quantity);
      SalesLine.VALIDATE(Quantity,-SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);
      UpdateApplyFromItemEntryNo(TempSalesLine."No.",SalesHeader);
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,1,0);
      MoveNegativeLines(SalesHeader,SalesHeader2,FromDocType::Order,ToDocType::"Return Order");
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      FindSalesLine(SalesLine,SalesHeader2);
      TransferSalesLineToTemp(TempSalesLine2,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries('','');

      // 3. Verify: Verify customer ledger entry for total amount including VAT.
      VerifyCustomerLedgerEntry(TempSalesLine,TempSalesLine2);
    END;

    [Test]
    PROCEDURE DeleteSalesOrderChargeLine@35();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
    BEGIN
      // 1. Setup: Create Sales Order with two Item Lines. Update Quantity to ship for first line to Zero.
      // Post Sales shipment. Create Item charge line and use Get shipment to apply it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,1,1);
      UpdateSalesLines(SalesLine);
      CreateSalesLines(SalesHeader,SalesLine,Item."Costing Method"::FIFO,1,0);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      SalesLine.FINDFIRST;
      CreateItemChargeAssignmentLine(SalesLine,SalesLine."Document No.",SalesLine."No.");

      // 2. Exercise: Delete Sales Line of Type Charge.
      SalesHeader.VALIDATE(Status,SalesHeader.Status::Open);
      SalesHeader.MODIFY(TRUE);
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      SalesLine.FINDFIRST;
      SalesLine.DELETE(TRUE);

      // 3. Verify: Sales Line of Type Charge does not exist.
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      Assert.IsFalse(SalesLine.FINDFIRST,STRSUBSTNO(MsgSalesLineTxt));
    END;

    LOCAL PROCEDURE Initialize@27();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesReturnSetup@36(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;VAR TempSalesLine@1003 : TEMPORARY Record 37;CostingMethod@1002 : Option);
    BEGIN
      UpdateSalesAndReceivableSetup(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CostingMethod);
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesAndReceivableSetup@11(ExactCostReversingMandatory@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      SalesReceivablesSetup.VALIDATE("Return Receipt on Credit Memo",TRUE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@9(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
    END;

    LOCAL PROCEDURE CreateItem@6(CostingMethod@1003 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocument@29(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1003 : Option;CostingMethod@1005 : Option);
    VAR
      Customer@1000 : Record 18;
    BEGIN
      CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,Customer."No.");
      CreateSalesLines(SalesHeader,SalesLine,CostingMethod,1,0);
    END;

    LOCAL PROCEDURE CreateSalesLines@21(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1003 : Record 37;CostingMethod@1008 : Option;NoOfItems@1002 : Integer;NoOfCharges@1007 : Integer);
    VAR
      ItemNo@1005 : Code[20];
      Count@1006 : Integer;
    BEGIN
      FOR Count := 1 TO NoOfItems DO BEGIN
        ItemNo := CreateItem(CostingMethod);
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      END;

      FOR Count := 1 TO NoOfCharges DO
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",
          LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE SalesHeaderCopySalesDoc@16(VAR SalesHeader@1004 : Record 36;DocType@1003 : Option;DocNo@1002 : Code[20];IncludeHeader@1001 : Boolean;RecalcLines@1000 : Boolean);
    VAR
      CopySalesDoc@1005 : Report 292;
    BEGIN
      CopySalesDoc.SetSalesHeader(SalesHeader);
      CopySalesDoc.InitializeRequest(DocType,DocNo,IncludeHeader,RecalcLines);
      CopySalesDoc.USEREQUESTPAGE(FALSE);
      CopySalesDoc.RUNMODAL;
    END;

    LOCAL PROCEDURE SalesCopyDocument@25(VAR SalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : TEMPORARY Record 37;DocumentType@1003 : Option;FromDocType@1002 : Option);
    VAR
      SalesCrMemoHeader@1004 : Record 114;
      SalesShipmentHeader@1005 : Record 110;
      SalesLine@1007 : Record 37;
      DocumentNo@1006 : Code[20];
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
        SalesCrMemoHeader.SETRANGE("Return Order No.",SalesHeader."No.");
        SalesCrMemoHeader.FINDFIRST;
        DocumentNo := SalesCrMemoHeader."No.";
      END ELSE BEGIN
        SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
        SalesShipmentHeader.FINDFIRST;
        DocumentNo := SalesShipmentHeader."No.";
      END;

      CLEAR(SalesHeader);
      SalesHeader.VALIDATE("Document Type",DocumentType);
      SalesHeader.INSERT(TRUE);
      SalesHeaderCopySalesDoc(SalesHeader,FromDocType,DocumentNo,TRUE,TRUE);
      SalesHeader.FIND;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      TransferSalesLineToTemp(TempSalesLine,SalesLine);
    END;

    LOCAL PROCEDURE UpdateSalesLineNegativeQty@24(VAR SalesLine@1001 : Record 37;SignFactor@1000 : Integer);
    BEGIN
      // Update sales line with negative qunatity and Negative Unit Price.
      SalesLine.VALIDATE(Quantity,SignFactor * SalesLine.Quantity);
      SalesLine.VALIDATE("Unit Price",SignFactor * SalesLine."Unit Price");
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLines@22(VAR SalesLine@1000 : Record 37);
    BEGIN
      // Update sales line for required fields, Random values used are important for test.
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine.FINDSET;
      REPEAT
        SalesLine.VALIDATE("Qty. to Ship",0);
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(50,2));
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateApplyFromItemEntryNo@20(ItemNo@1000 : Code[20];SalesHeader@1003 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      ItemLedgerEntry.FINDFIRST;

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDLAST;
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::"Return Order":
          SalesLine.VALIDATE(Quantity,ABS(ItemLedgerEntry.Quantity));
        SalesLine."Document Type"::Invoice:
          SalesLine.VALIDATE(Quantity,ItemLedgerEntry.Quantity);
      END;
      SalesLine.VALIDATE("Appl.-from Item Entry",ItemLedgerEntry."Entry No.");
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentLine@5(VAR SalesLine@1005 : Record 37;SalesOrderNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      ItemChargeAssignmentSales@1001 : Record 5809;
    BEGIN
      ItemChargeAssignmentSales.VALIDATE("Document Type",SalesLine."Document Type");
      ItemChargeAssignmentSales.VALIDATE("Document No.",SalesLine."Document No.");
      ItemChargeAssignmentSales.VALIDATE("Document Line No.",SalesLine."Line No.");
      ItemChargeAssignmentSales.VALIDATE("Item Charge No.",SalesLine."No.");
      ItemChargeAssignmentSales.VALIDATE("Unit Cost",SalesLine."Unit Price");
      AssignItemChargeToShipment(ItemChargeAssignmentSales,SalesOrderNo,ItemNo);
      UpdateItemChargeQtyToAssign(SalesLine."Document Type",ItemChargeAssignmentSales."Document No.",SalesLine.Quantity);
    END;

    LOCAL PROCEDURE AssignItemChargeToShipment@10(VAR ItemChargeAssignmentSales@1002 : Record 5809;SalesOrderNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
      ItemChargeAssgntSales@1000 : Codeunit 5807;
    BEGIN
      SalesShipmentLine.SETRANGE("Order No.",SalesOrderNo);
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.FINDFIRST;
      ItemChargeAssgntSales.CreateShptChargeAssgnt(SalesShipmentLine,ItemChargeAssignmentSales);
    END;

    LOCAL PROCEDURE UpdateItemChargeQtyToAssign@31(DocumentType@1003 : Option;DocumentNo@1001 : Code[20];QtyToAssign@1002 : Decimal);
    VAR
      ItemChargeAssignmentSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssignmentSales.SETRANGE("Document Type",DocumentType);
      ItemChargeAssignmentSales.SETRANGE("Document No.",DocumentNo);
      ItemChargeAssignmentSales.FINDFIRST;
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",QtyToAssign);
      ItemChargeAssignmentSales.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE MoveNegativeLines@28(VAR SalesHeader@1002 : Record 36;VAR SalesHeader2@1003 : Record 36;FromDocType@1000 : Option;ToDocType@1001 : Option);
    VAR
      CopyDocumentMgt@1004 : Codeunit 6620;
    BEGIN
      CopyDocumentMgt.SetProperties(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
      SalesHeader2."Document Type" := CopyDocumentMgt.SalesHeaderDocType(ToDocType);
      CopyDocumentMgt.CopySalesDoc(FromDocType,SalesHeader."No.",SalesHeader2);
    END;

    LOCAL PROCEDURE FindSalesLine@34(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE TransferSalesLineToTemp@18(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine.FINDSET;
      REPEAT
        TempSalesLine := SalesLine;
        TempSalesLine.INSERT;
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesAmountChargeReturn@7(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempSalesLine2@1008 : TEMPORARY Record 37);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      ExpectedSalesAmt@1004 : Decimal;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",TempSalesLine."No.");
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Sales Amount (Actual)");

      TempSalesLine2.SETRANGE(Type,TempSalesLine2.Type::"Charge (Item)");
      TempSalesLine2.FINDFIRST;

      CASE TempSalesLine2."Document Type" OF
        TempSalesLine2."Document Type"::Invoice:
          ExpectedSalesAmt :=
            TempSalesLine.Quantity * TempSalesLine."Unit Price" +
            TempSalesLine2.Quantity * TempSalesLine2."Unit Price";
        TempSalesLine2."Document Type"::"Return Order":
          ExpectedSalesAmt :=
            TempSalesLine.Quantity * TempSalesLine."Unit Price" -
            TempSalesLine2.Quantity * TempSalesLine2."Unit Price";
      END;

      Assert.AreNearlyEqual(ExpectedSalesAmt,ItemLedgerEntry."Sales Amount (Actual)",0.1,SalesAmountMustBeSameErr);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@8(VAR TempSalesLine@1005 : TEMPORARY Record 37;VAR TempSalesLine2@1004 : TEMPORARY Record 37);
    VAR
      CustLedgerEntry@1001 : Record 21;
      ActualCustLedgerAmount@1002 : Decimal;
      ExpectedSalesInvoiceAmount@1006 : Decimal;
      ExpectedSalesCrMemoAmount@1007 : Decimal;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",TempSalesLine."Sell-to Customer No.");
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS(Amount);
        ActualCustLedgerAmount += CustLedgerEntry.Amount;
      UNTIL CustLedgerEntry.NEXT = 0;

      TempSalesLine.FINDSET;
      REPEAT
        ExpectedSalesInvoiceAmount +=
          TempSalesLine.Quantity * TempSalesLine."Unit Price" + TempSalesLine."VAT %" *
          (TempSalesLine.Quantity * TempSalesLine."Unit Price") / 100;
      UNTIL TempSalesLine.NEXT = 0;

      TempSalesLine2.RESET;
      TempSalesLine2.FINDSET;
      REPEAT
        ExpectedSalesCrMemoAmount +=
          TempSalesLine2.Quantity * TempSalesLine2."Unit Price" + TempSalesLine2."VAT %" *
          (TempSalesLine2.Quantity * TempSalesLine2."Unit Price") / 100;
      UNTIL TempSalesLine2.NEXT = 0;

      Assert.AreNearlyEqual(
        ExpectedSalesInvoiceAmount - ExpectedSalesCrMemoAmount,ActualCustLedgerAmount,0.1,SalesAmountMustBeSameErr);
    END;

    [ConfirmHandler]
    PROCEDURE CorrectedInvoiceNoConfirmHandler@347(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,CorrectedInvoiceNoQst) > 0,Question);
      Reply := TRUE;
    END;

    LOCAL PROCEDURE ExecuteConfirmHandler@348();
    BEGIN
      IF CONFIRM(CorrectedInvoiceNoQst) THEN;
    END;

    BEGIN
    {
      // [FEATURE] [Return Order] [Sales] [SCM]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute
      AU: Unable to Execute
      IT: Unable to Execute
      FR: Unable to Execute
      IN: Unable to Execute
      CH: Unable to Execute (TFS ID 51234)

      Test for Costing Returns:
        1. Sales Return Order for Charge (Item),Costing method Average.
        2. Sales Return Order for Charge (Item),Costing method Average.Postive and Negative entry.
           Check Item Ledger Entry and Customer Ledger Entry.
        3. Sales Return Order for Charge (Item),Costing method FIFO.
        4. Sales Return Order for Item and Charge (Item),Costing method Average with negative Unit Price.
        5. Sales Return Order for Item and Charge (Item),Costing method FIFO with negative Unit Price.
        6. Sales Return Order Verifying Apply From Item Entry,Exact Cost Reversing Mandatory is True.
        7. Sales Order for Two Items (Costing Method:FIFO and Average, Postive and Negative entry).
        8. Sales Order for Two Items (Costing Method:FIFO, Postive and Negative entry). Move Negative Lines.
        9. Sales Return Order using Copy Document of Posted Shipment,Costing method Average.
       10. Sales Return Order using Copy Document of Posted Credit Memo,Costing method Fifo.
           Exact Cost Reversing Mandatory is True.
       11. Sales Invoice for One charge (Item) and Two Items with Costing Method Average.
       12. Sales Invoice for One charge (Item) and One Item with Costing Method FIFO.
       13. Sales Invoice for One charge (Item) and Two Items with Costing Method: FIFO and Average.
           For Item with Costing method FIFO,'Apply from item Entry'used for application.
       14. Sales Order for Two Items (Costing Method:FIFO, Postive and Negative entry). 'Apply from Item Entry'used for application
           and Move Negative Lines.
       15. Delete Sales Order Charge Line after partial posting.

      Covers Test cases:
        TC3797- TFS_TC_ID = 120924
        TC3798- TFS_TC_ID = 120925
        TC3799- TFS_TC_ID = 120926
        TC3800- TFS_TC_ID = 120927
        TC3801- TFS_TC_ID = 120928
        TC3803- TFS_TC_ID = 120929
        TC3804- TFS_TC_ID = 120930
        TC3805- TFS_TC_ID = 120931
        TC3806- TFS_TC_ID = 120932
        TC3807- TFS_TC_ID = 120933
        TC3809- TFS_TC_ID = 120934
        TC3810- TFS_TC_ID = 120935
        TC3811- TFS_TC_ID = 120936
        TC3812- TFS_TC_ID = 120937
        TC3814- TFS_TC_ID = 120939
        TC3815- TFS_TC_ID = 120940
        TC3816- TFS_TC_ID = 120941
        TC3817- TFS_TC_ID = 120942
        TC3818- TFS_TC_ID = 120943
        TC3821- TFS_TC_ID = 120944
        TC3823- TFS_TC_ID = 120946
        TC3825- TFS_TC_ID = 120948
        TC3826- TFS_TC_ID = 120949
        TC3827- TFS_TC_ID = 120950
        TC3830- TFS_TC_ID = 120951
        TC3832- TFS_TC_ID = 120953
        TC3833- TFS_TC_ID = 120954
        TC3834- TFS_TC_ID = 120955
        TC3835- TFS_TC_ID = 120956
        TC3836- TFS_TC_ID = 120958
        TC3840- TFS_TC_ID = 121186
        TC3841- TFS_TC_ID = 121187
        TC3842- TFS_TC_ID = 121188
        TC3845- TFS_TC_ID = 121189
        TC3846- TFS_TC_ID = 121190
        TC3847- TFS_TC_ID = 121191
        TC3848- TFS_TC_ID = 121192
        TC3810- TFS_TC_ID = 120935
        TC3928- TFS_TC_ID = 121229
        TC3929- TFS_TC_ID = 121230
        TC3930- TFS_TC_ID = 121231
        TC3931- TFS_TC_ID = 121232
        TC3932- TFS_TC_ID = 121233
        TC3934- TFS_TC_ID = 121234
        TC3935- TFS_TC_ID = 121235
        TC3936- TFS_TC_ID = 121236
        TC3937- TFS_TC_ID = 121237
        TC3938- TFS_TC_ID = 121238
        TC3940- TFS_TC_ID = 127822
        TC3941- TFS_TC_ID = 121239
        TC3942- TFS_TC_ID = 121240
        TC3943- TFS_TC_ID = 121241
        TC3945- TFS_TC_ID = 127823
        TC3946- TFS_TC_ID = 121242
        TC3947- TFS_TC_ID = 121243
        TC3948- TFS_TC_ID = 121244
        TC3950- TFS_TC_ID = 121245
        TC3951- TFS_TC_ID = 121246
        TC3952- TFS_TC_ID = 121247
        TC3953- TFS_TC_ID = 121248
        TC3955- TFS_TC_ID = 127824
        TC3956- TFS_TC_ID = 121249
        TC3957- TFS_TC_ID = 121250
        TC3958- TFS_TC_ID = 121251
        TC3959- TFS_TC_ID = 121252
        TC3960- TFS_TC_ID = 121253
        TC3961- TFS_TC_ID = 121254
        TC4050- TFS_TC_ID = 120860
        TC4052- TFS_TC_ID = 120862
        TC4053- TFS_TC_ID = 120863
        TC4054- TFS_TC_ID = 120864
        TC4056- TFS_TC_ID = 120865
        TC4058- TFS_TC_ID = 120867
        TC4059- TFS_TC_ID = 120868
        TC4060- TFS_TC_ID = 120869
        TC4062- TFS_TC_ID = 120870
        TC4064- TFS_TC_ID = 120872
        TC4065- TFS_TC_ID = 120874
        TC4067- TFS_TC_ID = 120875
        TC4069- TFS_TC_ID = 120877
        TC4070- TFS_TC_ID = 120878
        TC4072- TFS_TC_ID = 120879
        TC4074- TFS_TC_ID = 120881
        TC4075- TFS_TC_ID = 120882
        TC4077- TFS_TC_ID = 120883
        TC4078- TFS_TC_ID = 120884
        TC4079- TFS_TC_ID = 120885
        TC4080- TFS_TC_ID = 120886
        TC4081- TFS_TC_ID = 120887
        TC4082- TFS_TC_ID = 120888
        TC4083- TFS_TC_ID = 120889
        TC10072- Tf_TC_TD = 127530
        TC10072- Tf_TC_TD = 127670
    }
    END.
  }
}

