OBJECT Codeunit 134700 Payment Registration UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      BlankFieldErr@1008 : TextConst 'ENU=%1 must have a value in %2';
      BlankOptionErr@1002 : TextConst 'ENU=%1 must not be   in %2';
      LibraryUtility@1007 : Codeunit 131000;
      LibrarySales@1022 : Codeunit 130509;
      LibraryInventory@1023 : Codeunit 132201;
      LibraryERM@1024 : Codeunit 131300;
      LibraryService@1025 : Codeunit 131902;
      LibraryVariableStorage@1026 : Codeunit 131004;
      LibraryERMCountryData@1028 : Codeunit 131305;
      LibraryRandom@1006 : Codeunit 130440;
      isInitialized@1005 : Boolean;
      ExpectedEntryErr@1010 : TextConst 'ENU=Expected entry not found.';
      MandatoryFieldsSetErr@1003 : TextConst 'ENU=All mandatory fields are set. Function should return TRUE.';
      MandatoryFieldsNotSetErr@1012 : TextConst 'ENU=Mandatory field is not set. Function should return FALSE.';
      UnexpectedEntryErr@1009 : TextConst 'ENU=Unexpected entry found.';
      WrongCaptionErr@1011 : TextConst 'ENU=Caption is missing %1.';
      NothingToPostErr@1001 : TextConst 'ENU=There is nothing to post.';
      EmptyReceivedDateErr@1004 : TextConst 'ENU=Date Received is missing for line with Document No.';
      ConfirmCloseExpectedTrueErr@1014 : TextConst 'ENU=Expected ConfirmClose to return TRUE';
      ReloadErr@1016 : TextConst '@@@=Reload is incorrect (testing field Document Paid).;ENU=Reload is incorrect (testing field %1).';
      ReloadCountErr@1015 : TextConst 'ENU=Reload is incorrect (wrong count).';
      MaxPaymentDiscountAmount@1013 : Decimal;
      ReloadSortingErr@1029 : TextConst 'ENU=Reload is incorrect (wrong sorting).';
      ReloadCurrRecErr@1030 : TextConst 'ENU=Reload is incorrect (wrong Current Rec).';
      WrongUserErr@1017 : TextConst 'ENU=Wrong user.';
      StyleErr@1018 : TextConst 'ENU=Expected style is not correct.';
      WarningErr@1019 : TextConst 'ENU=Warning text is not correct.';
      DueDateMsg@1020 : TextConst 'ENU=The payment is overdue. You can calculate interest for late payments from customers by choosing the Finance Charge Memo button.';
      PmtDiscMsg@1021 : TextConst 'ENU=Payment Discount Date is earlier than Date Received. Payment will be registered as partial payment.';
      SalesOrderTxt@1042 : TextConst 'ENU=Sales Order';
      SalesBlanketOrderTxt@1041 : TextConst 'ENU=Sales Blanket Order';
      SalesQuoteTxt@1040 : TextConst 'ENU=Sales Quote';
      SalesInvoiceTxt@1039 : TextConst 'ENU=Sales Invoice';
      SalesReturnOrderTxt@1038 : TextConst 'ENU=Sales Return Order';
      SalesCreditMemoTxt@1037 : TextConst 'ENU=Sales Credit Memo';
      ServiceQuoteTxt@1034 : TextConst 'ENU=Service Quote';
      ServiceOrderTxt@1033 : TextConst 'ENU=Service Order';
      ServiceInvoiceTxt@1032 : TextConst 'ENU=Service Invoice';
      ServiceCreditMemoTxt@1031 : TextConst 'ENU=Service Credit Memo';
      ToleranceTxt@1027 : TextConst 'ENU=The program will search for documents with amounts between %1 and %2.';

    [Test]
    PROCEDURE CheckAutoPopulation@9();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;

      TempPaymentRegistrationBuffer.INIT;
      TempPaymentRegistrationBuffer."Remaining Amount" := LibraryRandom.RandDec(100,2);
      TempPaymentRegistrationBuffer."Original Remaining Amount" := TempPaymentRegistrationBuffer."Remaining Amount";
      TempPaymentRegistrationBuffer.INSERT;

      TempPaymentRegistrationBuffer.TESTFIELD("Amount Received",0);
      TempPaymentRegistrationBuffer.TESTFIELD("Date Received",0D);

      TempPaymentRegistrationBuffer.VALIDATE("Payment Made",TRUE);
      TempPaymentRegistrationBuffer.MODIFY(TRUE);

      TempPaymentRegistrationBuffer.TESTFIELD("Amount Received",TempPaymentRegistrationBuffer."Original Remaining Amount");
      TempPaymentRegistrationBuffer.TESTFIELD("Date Received",WORKDATE);
    END;

    [Test]
    PROCEDURE CheckNoAutoPopulation@11();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      TempPaymentRegistrationBuffer.INIT;
      TempPaymentRegistrationBuffer."Remaining Amount" := LibraryRandom.RandDec(100,2);
      TempPaymentRegistrationBuffer.INSERT;

      TempPaymentRegistrationBuffer.TESTFIELD("Amount Received",0);
      TempPaymentRegistrationBuffer.TESTFIELD("Date Received",0D);

      TempPaymentRegistrationBuffer.VALIDATE("Payment Made",TRUE);
      TempPaymentRegistrationBuffer.MODIFY(TRUE);

      TempPaymentRegistrationBuffer.TESTFIELD("Amount Received",0);
      TempPaymentRegistrationBuffer.TESTFIELD("Date Received",0D);
    END;

    [Test]
    PROCEDURE CheckOpenCustomerLedgerEntries@20();
    VAR
      CustLedgerEntry@1002 : Record 21;
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      FirstEntryNo@1003 : Integer;
    BEGIN
      Initialize;

      // Create Open Entries
      FirstEntryNo := CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Finance Charge Memo",TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Reminder,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Refund,TRUE);

      // Create Closed Entries
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,FALSE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,FALSE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",FALSE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Finance Charge Memo",FALSE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Reminder,FALSE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Refund,FALSE);

      // Exercise:
      TempPaymentRegistrationBuffer.PopulateTable;

      // Verify:
      // Valid Entries
      CustLedgerEntry.SETFILTER("Entry No.",'%1..',FirstEntryNo);
      CustLedgerEntry.SETFILTER("Document Type",'%1|%2|%3|%4|%5',
        CustLedgerEntry."Document Type"::Invoice,
        CustLedgerEntry."Document Type"::"Finance Charge Memo",
        CustLedgerEntry."Document Type"::Reminder,
        CustLedgerEntry."Document Type"::Refund,
        CustLedgerEntry."Document Type"::"Credit Memo");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.FINDSET;
      REPEAT
        Assert.IsTrue(TempPaymentRegistrationBuffer.GET(CustLedgerEntry."Entry No."),ExpectedEntryErr);
      UNTIL CustLedgerEntry.NEXT = 0;

      // Invalid Open Entries
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETFILTER("Entry No.",'%1..',FirstEntryNo);
      CustLedgerEntry.SETFILTER("Document Type",'%1',
        CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.FINDSET;
      REPEAT
        Assert.IsFalse(TempPaymentRegistrationBuffer.GET(CustLedgerEntry."Entry No."),UnexpectedEntryErr);
      UNTIL CustLedgerEntry.NEXT = 0;

      // Invalid Closed Entries
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETFILTER("Entry No.",'%1..',FirstEntryNo);
      CustLedgerEntry.SETRANGE(Open,FALSE);
      CustLedgerEntry.FINDSET;
      REPEAT
        Assert.IsFalse(TempPaymentRegistrationBuffer.GET(CustLedgerEntry."Entry No."),UnexpectedEntryErr);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    [Test]
    PROCEDURE CheckPaymentRegistrationPageCaption@3();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      PaymentRegistrationPage@1000 : TestPage 981;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);

      PaymentRegistrationPage.OPENVIEW;
      Assert.IsTrue(STRPOS(PaymentRegistrationPage.CAPTION,FORMAT(PaymentRegistrationSetup."Bal. Account Type")) > 0,
        STRSUBSTNO(WrongCaptionErr,PaymentRegistrationSetup.FIELDNAME("Bal. Account Type")));
      Assert.IsTrue(STRPOS(PaymentRegistrationPage.CAPTION,FORMAT(PaymentRegistrationSetup."Bal. Account No.")) > 0,
        STRSUBSTNO(WrongCaptionErr,PaymentRegistrationSetup.FIELDNAME("Bal. Account No.")));

      PaymentRegistrationPage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(PaymentRegistrationSetupOKPageHandler)]
    PROCEDURE CheckPaymentRegistrationPageCaptionOnRefresh@26();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      PaymentRegistrationPage@1000 : TestPage 981;
    BEGIN
      Initialize;

      PaymentRegistrationPage.OPENVIEW;
      PaymentRegistrationPage.Setup.INVOKE;

      PaymentRegistrationSetup.GET(USERID);
      Assert.IsTrue(STRPOS(PaymentRegistrationPage.CAPTION,FORMAT(PaymentRegistrationSetup."Bal. Account Type")) > 0,
        STRSUBSTNO(WrongCaptionErr,PaymentRegistrationSetup.FIELDNAME("Bal. Account Type")));
      Assert.IsTrue(STRPOS(PaymentRegistrationPage.CAPTION,FORMAT(PaymentRegistrationSetup."Bal. Account No.")) > 0,
        STRSUBSTNO(WrongCaptionErr,PaymentRegistrationSetup.FIELDNAME("Bal. Account No.")));

      PaymentRegistrationPage.CLOSE;
    END;

    [Test]
    PROCEDURE VerifyPopulateTable@1();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      CustLedgerEntry@1000 : Record 21;
      Customer@1002 : Record 18;
    BEGIN
      Initialize;

      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      CreateDetailedCustomerLedgerEntry(CustLedgerEntry."Entry No.");

      TempPaymentRegistrationBuffer.PopulateTable;
      TempPaymentRegistrationBuffer.GET(CustLedgerEntry."Entry No.");
      TempPaymentRegistrationBuffer.TESTFIELD("Source No.",CustLedgerEntry."Customer No.");
      Customer.GET(CustLedgerEntry."Customer No.");
      TempPaymentRegistrationBuffer.TESTFIELD(Name,Customer.Name);
      TempPaymentRegistrationBuffer.TESTFIELD("Document No.",CustLedgerEntry."Document No.");
      TempPaymentRegistrationBuffer.TESTFIELD("Document Type",CustLedgerEntry."Document Type");
      TempPaymentRegistrationBuffer.TESTFIELD(Description,CustLedgerEntry.Description);
      TempPaymentRegistrationBuffer.TESTFIELD("Due Date",CustLedgerEntry."Due Date");
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      TempPaymentRegistrationBuffer.TESTFIELD("Remaining Amount",CustLedgerEntry."Remaining Amount");
      TempPaymentRegistrationBuffer.TESTFIELD("Pmt. Discount Date",CustLedgerEntry."Pmt. Discount Date");
      TempPaymentRegistrationBuffer.TESTFIELD("Rem. Amt. after Discount",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible");
    END;

    [Test]
    PROCEDURE VerifyPopulateTableWithNoOpenCustLedgEntry@128();
    VAR
      CustLedgEntry@1000 : Record 21;
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      CustLedgEntry.SETRANGE(Open,TRUE);
      CustLedgEntry.MODIFYALL(Open,FALSE);
      COMMIT;

      ASSERTERROR CustLedgEntry.FINDFIRST;
      ASSERTERROR TempPaymentRegistrationBuffer.FINDFIRST;
      TempPaymentRegistrationBuffer.PopulateTable
    END;

    [Test]
    PROCEDURE ValidateAllMandatoryFieldsOkShowErrorEnabled@41();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      Assert.IsTrue(PaymentRegistrationSetup.ValidateMandatoryFields(TRUE),MandatoryFieldsSetErr);
    END;

    [Test]
    PROCEDURE ValidateAllMandatoryFieldsOk@42();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      Assert.IsTrue(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsSetErr);
    END;

    [Test]
    PROCEDURE ValidateJournalTemplateNameMandatoryShowErrorEnabled@2();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Journal Template Name" := '';
      PaymentRegistrationSetup.MODIFY;
      ASSERTERROR PaymentRegistrationSetup.ValidateMandatoryFields(TRUE);
      Assert.ExpectedError(STRSUBSTNO(BlankFieldErr,
          PaymentRegistrationSetup.FIELDNAME("Journal Template Name"),PaymentRegistrationSetup.TABLENAME))
    END;

    [Test]
    PROCEDURE ValidateJournalBatchNameMandatoryShowErrorEnabled@16();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Journal Batch Name" := '';
      PaymentRegistrationSetup.MODIFY;
      ASSERTERROR PaymentRegistrationSetup.ValidateMandatoryFields(TRUE);
      Assert.ExpectedError(STRSUBSTNO(BlankFieldErr,
          PaymentRegistrationSetup.FIELDNAME("Journal Batch Name"),PaymentRegistrationSetup.TABLENAME))
    END;

    [Test]
    PROCEDURE ValidateBalAccountTypeMandatoryShowErrorEnabled@17();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type"::" ";
      PaymentRegistrationSetup.MODIFY;
      ASSERTERROR PaymentRegistrationSetup.ValidateMandatoryFields(TRUE);
      Assert.ExpectedError(STRSUBSTNO(BlankOptionErr,
          PaymentRegistrationSetup.FIELDNAME("Bal. Account Type"),PaymentRegistrationSetup.TABLENAME))
    END;

    [Test]
    PROCEDURE ValidateBalAccountNoMandatoryShowErrorEnabled@18();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Bal. Account No." := '';
      PaymentRegistrationSetup.MODIFY;
      ASSERTERROR PaymentRegistrationSetup.ValidateMandatoryFields(TRUE);
      Assert.ExpectedError(STRSUBSTNO(BlankFieldErr,
          PaymentRegistrationSetup.FIELDNAME("Bal. Account No."),PaymentRegistrationSetup.TABLENAME))
    END;

    [Test]
    PROCEDURE ValidateNothingToPostError@14();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
      PaymentRegistrationMgt@1001 : Codeunit 980;
    BEGIN
      ASSERTERROR PaymentRegistrationMgt.ConfirmPost(TempPaymentRegistrationBuffer);
      Assert.ExpectedError(NothingToPostErr);
    END;

    [Test]
    [HandlerFunctions(HandlerConfirmYes)]
    PROCEDURE ValidateEmptyReceivedDateError@19();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
      PaymentRegistrationMgt@1001 : Codeunit 980;
    BEGIN
      TempPaymentRegistrationBuffer.INIT;
      TempPaymentRegistrationBuffer."Ledger Entry No." := -1;
      TempPaymentRegistrationBuffer."Amount Received" := -1;
      TempPaymentRegistrationBuffer."Payment Made" := TRUE;
      TempPaymentRegistrationBuffer.INSERT;

      ASSERTERROR PaymentRegistrationMgt.ConfirmPost(TempPaymentRegistrationBuffer);
      Assert.ExpectedError(EmptyReceivedDateErr);
    END;

    [Test]
    PROCEDURE ValidateNoSeriesMandatoryShowErrrorEnabled@21();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      GenJournalBatch.GET(PaymentRegistrationSetup."Journal Template Name",PaymentRegistrationSetup."Journal Batch Name");
      GenJournalBatch."No. Series" := '';
      GenJournalBatch.MODIFY;
      ASSERTERROR PaymentRegistrationSetup.ValidateMandatoryFields(TRUE);
      Assert.ExpectedError(STRSUBSTNO(BlankFieldErr,
          GenJournalBatch.FIELDNAME("No. Series"),GenJournalBatch.TABLENAME))
    END;

    [Test]
    PROCEDURE ValidateJournalTemplateNameMandatory@38();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Journal Template Name" := '';
      PaymentRegistrationSetup.MODIFY;
      Assert.IsFalse(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsNotSetErr)
    END;

    [Test]
    PROCEDURE ValidateJournalBatchNameMandatory@37();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Journal Batch Name" := '';
      PaymentRegistrationSetup.MODIFY;
      Assert.IsFalse(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsNotSetErr)
    END;

    [Test]
    PROCEDURE ValidateBalAccountTypeMandatory@36();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type"::" ";
      PaymentRegistrationSetup.MODIFY;
      Assert.IsFalse(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsNotSetErr)
    END;

    [Test]
    PROCEDURE ValidateBalAccountNoMandatory@35();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup."Bal. Account No." := '';
      PaymentRegistrationSetup.MODIFY;
      Assert.IsFalse(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsNotSetErr)
    END;

    [Test]
    PROCEDURE ValidateNoSeriesMandatory@34();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      GenJournalBatch.GET(PaymentRegistrationSetup."Journal Template Name",PaymentRegistrationSetup."Journal Batch Name");
      GenJournalBatch."No. Series" := '';
      GenJournalBatch.MODIFY;
      Assert.IsFalse(PaymentRegistrationSetup.ValidateMandatoryFields(FALSE),MandatoryFieldsNotSetErr)
    END;

    [Test]
    PROCEDURE ValidateJournalBatchWithBalAccountTypeAsGLAccount@47();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      GenJournalBatch.GET(PaymentRegistrationSetup."Journal Template Name",PaymentRegistrationSetup."Journal Batch Name");
      GenJournalBatch."Bal. Account Type" := GenJournalBatch."Bal. Account Type"::"G/L Account";
      GenJournalBatch."Bal. Account No." := LibraryERM.CreateGLAccountNo;
      GenJournalBatch.MODIFY;

      PaymentRegistrationSetup.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      PaymentRegistrationSetup.TESTFIELD("Bal. Account Type",PaymentRegistrationSetup."Bal. Account Type"::"G/L Account");
      PaymentRegistrationSetup.TESTFIELD("Bal. Account No.",GenJournalBatch."Bal. Account No.");
    END;

    [Test]
    PROCEDURE ValidateJournalBatchWithBalAccountTypeAsBankAccount@48();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      GenJournalBatch.GET(PaymentRegistrationSetup."Journal Template Name",PaymentRegistrationSetup."Journal Batch Name");
      GenJournalBatch."Bal. Account Type" := GenJournalBatch."Bal. Account Type"::"Bank Account";
      GenJournalBatch."Bal. Account No." := CreateBankAccount;
      GenJournalBatch.MODIFY;

      PaymentRegistrationSetup.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      PaymentRegistrationSetup.TESTFIELD("Bal. Account Type",PaymentRegistrationSetup."Bal. Account Type"::"Bank Account");
      PaymentRegistrationSetup.TESTFIELD("Bal. Account No.",GenJournalBatch."Bal. Account No.");
    END;

    [Test]
    PROCEDURE ValidateJournalBatchWithBalAccountTypeAsEmpty@50();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      Initialize;
      PaymentRegistrationSetup.GET(USERID);
      GenJournalBatch.GET(PaymentRegistrationSetup."Journal Template Name",PaymentRegistrationSetup."Journal Batch Name");
      GenJournalBatch."Bal. Account Type" := GenJournalBatch."Bal. Account Type"::Customer;
      GenJournalBatch.MODIFY;

      PaymentRegistrationSetup.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      PaymentRegistrationSetup.TESTFIELD("Bal. Account Type",PaymentRegistrationSetup."Bal. Account Type"::" ");
      PaymentRegistrationSetup.TESTFIELD("Bal. Account No.",GenJournalBatch."Bal. Account No.");
    END;

    [Test]
    PROCEDURE ValidateDocumentPaidInDiscDate@100();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := "Date Received" + LibraryRandom.RandInt(5);
        VALIDATE("Payment Made",TRUE);
        TESTFIELD("Amount Received","Rem. Amt. after Discount");
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidateDocumentPaidOutDiscDate@101();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := "Date Received" - LibraryRandom.RandInt(5);
        VALIDATE("Payment Made",TRUE);
        TESTFIELD("Amount Received","Original Remaining Amount");
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidateUncheckOfDocumentPaid@31();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Amount Received" := LibraryRandom.RandDec(100,2);
        "Payment Made" := TRUE;
        VALIDATE("Payment Made",FALSE);
        TESTFIELD("Date Received",0D);
        TESTFIELD("Amount Received",0);
        TESTFIELD("Remaining Amount","Original Remaining Amount");
      END;
    END;

    [Test]
    PROCEDURE ValidateReloadPersistChangedData@150();
    VAR
      CustLedgerEntry@1000 : Record 21;
      TempPaymentRegistrationBuffer@1002 : TEMPORARY Record 981;
      EntryNo@1001 : Integer;
    BEGIN
      Initialize;

      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      EntryNo := CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        PopulateTable;

        GET(EntryNo);
        "Payment Made" := TRUE;
        "Date Received" := WORKDATE;
        "Amount Received" := "Remaining Amount";
        MODIFY;

        Reload;

        GET(EntryNo);

        Assert.IsTrue("Payment Made",STRSUBSTNO(ReloadErr,FIELDNAME("Payment Made")));
        Assert.AreEqual(WORKDATE,"Date Received",STRSUBSTNO(ReloadErr,FIELDNAME("Date Received")));
        Assert.AreEqual("Remaining Amount","Amount Received",STRSUBSTNO(ReloadErr,FIELDNAME("Amount Received")));

        SETRANGE("Payment Made",TRUE);
        Assert.AreEqual(1,COUNT,ReloadCountErr);
      END;
    END;

    [Test]
    PROCEDURE ValidateReloadPersistFilter@40();
    VAR
      CustLedgerEntry@1002 : Record 21;
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      EntryNo@1000 : Integer;
    BEGIN
      Initialize;

      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      EntryNo := CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        PopulateTable;
        Assert.AreNotEqual(1,COUNT,ReloadCountErr);
        SETFILTER("Ledger Entry No.",'%1',EntryNo);
        Assert.AreEqual(1,COUNT,ReloadCountErr);
        Reload;
        Assert.AreEqual(1,COUNT,ReloadCountErr);
        FINDFIRST;
        Assert.AreEqual(EntryNo,"Ledger Entry No.",ReloadCountErr);
      END;
    END;

    [Test]
    PROCEDURE ValidateReloadPersistSorting@164();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      WITH TempPaymentRegistrationBuffer DO BEGIN
        PopulateTable;
        SETCURRENTKEY("Amount Received");
        Reload;
        Assert.AreEqual('Amount Received',CURRENTKEY,ReloadSortingErr);
      END;
    END;

    [Test]
    PROCEDURE ValidateReloadPersistCurrRec@165();
    VAR
      CustLedgerEntry@1002 : Record 21;
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      PositionBeforeReload@1003 : Text;
    BEGIN
      Initialize;

      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
      CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        PopulateTable;
        FINDLAST;
        PositionBeforeReload := GETPOSITION;
        Reload;
        Assert.AreEqual(PositionBeforeReload,GETPOSITION,ReloadCurrRecErr);
      END;
    END;

    [Test]
    PROCEDURE ValidateReloadIsGettingNewLines@151();
    VAR
      CustLedgerEntry@1000 : Record 21;
      TempPaymentRegistrationBuffer@1002 : TEMPORARY Record 981;
      EntryNo@1001 : Integer;
    BEGIN
      Initialize;

      WITH TempPaymentRegistrationBuffer DO BEGIN
        CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
        PopulateTable;
        EntryNo := CreateCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,TRUE);
        Reload;
        GET(EntryNo);
      END;
    END;

    [Test]
    PROCEDURE AmountReceivedIsSmallerThanRemainingAmount@25();
    VAR
      AmountReceived@1001 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      Initialize;

      AmountReceived := LibraryRandom.RandDec(100,2);
      RemainingAmount := AmountReceived + 1;

      VerifyAmountReceived(AmountReceived,RemainingAmount);
    END;

    [Test]
    PROCEDURE AmountReceivedIsEqualToRemainingAmount@28();
    VAR
      AmountReceived@1001 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      Initialize;

      AmountReceived := LibraryRandom.RandDec(100,2);
      RemainingAmount := AmountReceived;

      VerifyAmountReceived(AmountReceived,RemainingAmount);
    END;

    [Test]
    PROCEDURE ValidateAmountReceivedGreaterThanOrginalRemainingAmt@24();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        VALIDATE("Amount Received","Original Remaining Amount" + LibraryRandom.RandDec(100,2));
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidateAmountReceivedOutPmtDiscDateSmallerThanOriginalRemainingAmt@103();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := WORKDATE - LibraryRandom.RandInt(5);
        VALIDATE("Amount Received",
          "Original Remaining Amount" - LibraryRandom.RandDecInDecimalRange(0,"Original Remaining Amount",2));
        TESTFIELD("Remaining Amount","Original Remaining Amount" - "Amount Received");
      END;
    END;

    [Test]
    PROCEDURE ValidateAmountReceivedInPmtDiscDateGreaterThanDiscountedAmt@200();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := WORKDATE + LibraryRandom.RandInt(5);
        VALIDATE("Amount Received","Rem. Amt. after Discount" + LibraryRandom.RandDec(10,2));
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidateAmountReceivedInPmtDiscDateSmallerThanDiscountedAmt@44();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := WORKDATE + LibraryRandom.RandInt(5);
        VALIDATE("Amount Received",
          "Rem. Amt. after Discount" - LibraryRandom.RandDecInDecimalRange(0,"Rem. Amt. after Discount",2));
        TESTFIELD("Remaining Amount","Original Remaining Amount" - "Amount Received");
      END;
    END;

    [Test]
    PROCEDURE ValidateNegativeAmountReceivedGreaterThanNegativeOrginalRemainingAmt@126();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      TempPaymentRegistrationBuffer."Remaining Amount" := -TempPaymentRegistrationBuffer."Remaining Amount";
      TempPaymentRegistrationBuffer."Original Remaining Amount" := -TempPaymentRegistrationBuffer."Original Remaining Amount";

      WITH TempPaymentRegistrationBuffer DO BEGIN
        VALIDATE("Amount Received","Remaining Amount" + LibraryRandom.RandDec(100,2));
        TESTFIELD("Remaining Amount","Original Remaining Amount" - "Amount Received");
      END;
    END;

    LOCAL PROCEDURE VerifyAmountReceived@29(AmountReceived@1002 : Decimal;RemainingAmount@1001 : Decimal);
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Remaining Amount" := RemainingAmount;
        VALIDATE("Amount Received",AmountReceived);
        INSERT;
        TESTFIELD("Payment Made",TRUE);
      END;
    END;

    [Test]
    PROCEDURE ValidateDateReceivedEarlierThanPmtDiscDate@30();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := WORKDATE;
        VALIDATE("Date Received","Pmt. Discount Date" - LibraryRandom.RandInt(5));
        TESTFIELD("Payment Made",TRUE);
        TESTFIELD("Amount Received","Rem. Amt. after Discount");
      END;
    END;

    [Test]
    PROCEDURE ValidateDateReceivedLaterThanPmtDiscDate@27();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := WORKDATE;
        VALIDATE("Date Received","Pmt. Discount Date" + LibraryRandom.RandInt(5));
        TESTFIELD("Payment Made",TRUE);
        TESTFIELD("Amount Received","Original Remaining Amount");
      END;
    END;

    [Test]
    PROCEDURE ValidatePmtDiscDateAfterDateReceivedAmtReceivedGreaterThanOriginal@45();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Amount Received" := "Original Remaining Amount" + LibraryRandom.RandDec(100,2);
        VALIDATE("Pmt. Discount Date","Date Received" + LibraryRandom.RandInt(5));
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidatePmtDiscDateAfterDateReceivedAmountReceivedGreaterThanDiscounted@104();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);

      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Amount Received" := "Rem. Amt. after Discount" + LibraryRandom.RandDec(100,2);
        VALIDATE("Pmt. Discount Date","Date Received" + LibraryRandom.RandInt(5));
        TESTFIELD("Remaining Amount",0);
      END;
    END;

    [Test]
    PROCEDURE ValidatePmtDiscDateAfterDateReceivedAmountSmallerThanDiscounted@105();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Amount Received" :=
          "Rem. Amt. after Discount" - LibraryRandom.RandDecInDecimalRange(0,"Rem. Amt. after Discount",2);
        VALIDATE("Pmt. Discount Date","Date Received" + LibraryRandom.RandInt(5));
        TESTFIELD("Remaining Amount","Original Remaining Amount" - "Amount Received");
      END;
    END;

    [Test]
    PROCEDURE ValidatePmtDiscDateBeforeDateReceivedAmtReceivedSmallerThanOriginal@46();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;

      SetAutoFillDate;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Amount Received" :=
          "Original Remaining Amount" - LibraryRandom.RandDecInDecimalRange(0,"Original Remaining Amount",2);
        VALIDATE("Pmt. Discount Date","Date Received" - LibraryRandom.RandInt(5));
        TESTFIELD("Remaining Amount","Original Remaining Amount" - "Amount Received");
      END;
    END;

    [Test]
    PROCEDURE PmtDiscStyle@75();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := "Date Received" - LibraryRandom.RandInt(5);
        "Due Date" := "Date Received" + LibraryRandom.RandInt(5);
        Assert.AreEqual(GetPmtDiscStyle,'Unfavorable',StyleErr);
      END;
    END;

    [Test]
    PROCEDURE DueDateStyle@76();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Due Date" := "Date Received" - LibraryRandom.RandInt(5);
        Assert.AreEqual(GetDueDateStyle,'Unfavorable',StyleErr);
      END;
    END;

    [Test]
    PROCEDURE SetWarningTextEmpty@80();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Pmt. Discount Date" := "Date Received" + LibraryRandom.RandInt(5);
        Assert.AreEqual(GetWarning,'',WarningErr);
      END;
    END;

    [Test]
    PROCEDURE SetWarningTextDueDate@88();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Date Received" := "Pmt. Discount Date" + LibraryRandom.RandInt(5);
        Assert.AreEqual(GetWarning,FORMAT(DueDateMsg),WarningErr);
      END;
    END;

    [Test]
    PROCEDURE SetWarningTextPmtDiscTxt@89();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Date Received" := "Pmt. Discount Date" + LibraryRandom.RandInt(5);
        "Due Date" := "Date Received" + LibraryRandom.RandInt(5);
        Assert.AreEqual(GetWarning,FORMAT(PmtDiscMsg),WarningErr);
      END;
    END;

    [Test]
    PROCEDURE SetWarningTextEmptyDateReceivedEarlierThanDueDate@90();
    VAR
      TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981;
    BEGIN
      Initialize;
      InsertTempPaymentRegistrationBuffer(TempPaymentRegistrationBuffer);
      WITH TempPaymentRegistrationBuffer DO BEGIN
        "Date Received" := "Pmt. Discount Date" + LibraryRandom.RandInt(5);
        "Due Date" := "Date Received" + LibraryRandom.RandInt(5);
        "Remaining Amount" := 0;
        Assert.AreEqual(GetWarning,'',WarningErr);
      END;
    END;

    [Test]
    [HandlerFunctions(PaymentRegistrationSetupCancelPageHandler)]
    PROCEDURE RunFirstSetup@60();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
      PmtReg@1001 : TestPage 981;
    BEGIN
      PaymentRegistrationSetup.DELETEALL;

      // Expect transaction to stop because cancel is pressed
      ASSERTERROR PmtReg.OPENEDIT;
      ASSERTERROR PmtReg.OK.INVOKE;
      Assert.ExpectedError('The TestPage is not open.');
    END;

    [Test]
    [HandlerFunctions(PaymentRegistrationPromptOKPageHandler)]
    PROCEDURE RunNextSetupWithPrompt@61();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
      PmtReg@1001 : TestPage 981;
    BEGIN
      Initialize;

      WITH PaymentRegistrationSetup DO BEGIN
        GET(USERID);
        // Since we can't access User Id field on test page, we are coping UserId to Bal Account No.
        "Bal. Account No." := USERID;
        "Use this Account as Def." := FALSE;
        MODIFY;
      END;

      PrepareDefaultSetup;

      // HandlerFunctions has a verification.
      PmtReg.OPENEDIT;
      PmtReg.OK.INVOKE;
    END;

    [Test]
    PROCEDURE RunNextSetupWithNoPrompt@64();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
      PmtReg@1000 : TestPage 981;
    BEGIN
      Initialize;

      WITH PaymentRegistrationSetup DO BEGIN
        GET(USERID);
        "Use this Account as Def." := TRUE;
        MODIFY;
      END;

      PrepareDefaultSetup;

      PmtReg.OPENEDIT;
      PmtReg.OK.INVOKE;
    END;

    [Test]
    PROCEDURE ConfirmCloseNoneMarkedAsPaid@32();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      TempPaymentRegistrationBuffer."Ledger Entry No." := 1;
      TempPaymentRegistrationBuffer."Payment Made" := FALSE;
      TempPaymentRegistrationBuffer.INSERT;
      Assert.IsTrue(PaymentRegistrationMgt.ConfirmClose(TempPaymentRegistrationBuffer),ConfirmCloseExpectedTrueErr);
    END;

    [Test]
    [HandlerFunctions(HandlerConfirmYes)]
    PROCEDURE ConfirmCloseSomeMarkedAsPaidYes@33();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      TempPaymentRegistrationBuffer."Ledger Entry No." := 1;
      TempPaymentRegistrationBuffer."Payment Made" := TRUE;
      TempPaymentRegistrationBuffer.INSERT;
      Assert.IsTrue(PaymentRegistrationMgt.ConfirmClose(TempPaymentRegistrationBuffer),ConfirmCloseExpectedTrueErr);
    END;

    [Test]
    [HandlerFunctions(HandlerConfirmNo)]
    PROCEDURE ConfirmCloseSomeMarkedAsPaidNo@39();
    VAR
      TempPaymentRegistrationBuffer@1001 : TEMPORARY Record 981;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      TempPaymentRegistrationBuffer."Ledger Entry No." := 1;
      TempPaymentRegistrationBuffer."Payment Made" := TRUE;
      TempPaymentRegistrationBuffer.INSERT;
      Assert.IsFalse(PaymentRegistrationMgt.ConfirmClose(TempPaymentRegistrationBuffer),ConfirmCloseExpectedTrueErr);
    END;

    [Test]
    [HandlerFunctions(ReminderPageHandler)]
    PROCEDURE SearchReminderByDocNoShowResults@142();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ReminderHeader@1003 : Record 295;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);
      LibraryVariableStorage.Enqueue(ReminderHeader."No.");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ReminderHeader."No.",0,0);

      // Verify. Show results validated in Reminder page handler.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");

      PaymentRegistrationMgt.ShowRecords(TempDocumentSearchResult);
    END;

    [Test]
    PROCEDURE SearchReminderByRemaningAmount@141();
    VAR
      TempDocumentSearchResult@1002 : TEMPORARY Record 983;
      ReminderHeader@1001 : Record 295;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',ReminderHeader."Remaining Amount",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");
    END;

    [Test]
    PROCEDURE SearchReminderByInterestAmount@92();
    VAR
      TempDocumentSearchResult@1002 : TEMPORARY Record 983;
      ReminderHeader@1001 : Record 295;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',ReminderHeader."Interest Amount",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");
    END;

    [Test]
    PROCEDURE SearchReminderByDocNoAndAmount@159();
    VAR
      TempDocumentSearchResult@1002 : TEMPORARY Record 983;
      ReminderHeader@1001 : Record 295;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ReminderHeader."No.",ReminderHeader."Remaining Amount",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");
    END;

    [Test]
    PROCEDURE SearchReminderWithTolerance@160();
    VAR
      TempDocumentSearchResult@1002 : TEMPORARY Record 983;
      ReminderHeader@1001 : Record 295;
      PaymentRegistrationMgt@1000 : Codeunit 980;
      TolerancePct@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);

      // Exercise: Find values within tolerance, using a reference amount above the actual document amount.
      TolerancePct := LibraryRandom.RandInt(10);
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',
        (1 + TolerancePct / 100) * ReminderHeader."Remaining Amount",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");

      // Exercise: Find values within tolerance, using a reference amount below the actual document amount.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',
        (1 - (TolerancePct / 100) * (1 - TolerancePct / 100)) * ReminderHeader."Remaining Amount",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
        ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");
    END;

    [Test]
    PROCEDURE SearchReminderNegative@161();
    VAR
      TempDocumentSearchResult@1002 : TEMPORARY Record 983;
      ReminderHeader@1001 : Record 295;
      PaymentRegistrationMgt@1000 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupReminder(ReminderHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',0.5 * ReminderHeader."Remaining Amount",10);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,0,ReminderHeader."No.",
          ReminderHeader."Remaining Amount",DATABASE::"Reminder Header");
    END;

    [Test]
    [HandlerFunctions(FinChargeMemoPageHandler)]
    PROCEDURE SearchFinanceChargeMemoByDocNoShowResults@56();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      FinanceChargeMemoHeader@1003 : Record 302;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupFinanceChargeMemo(FinanceChargeMemoHeader);
      LibraryVariableStorage.Enqueue(FinanceChargeMemoHeader."No.");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,FinanceChargeMemoHeader."No.",0,0);

      // Verify. Show results validated in page handler.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");

      PaymentRegistrationMgt.ShowRecords(TempDocumentSearchResult);
    END;

    [Test]
    PROCEDURE SearchFinanceChargeMemoByAmount@65();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      FinanceChargeMemoHeader@1003 : Record 302;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupFinanceChargeMemo(FinanceChargeMemoHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',FinanceChargeMemoHeader."Remaining Amount",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");
    END;

    [Test]
    PROCEDURE SearchFinanceChargeMemoByDocNoAndAmount@66();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      FinanceChargeMemoHeader@1003 : Record 302;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupFinanceChargeMemo(FinanceChargeMemoHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");
    END;

    [Test]
    PROCEDURE SearchFinanceChargeMemoWithTolerance@81();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      FinanceChargeMemoHeader@1003 : Record 302;
      PaymentRegistrationMgt@1005 : Codeunit 980;
      TolerancePct@1000 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupFinanceChargeMemo(FinanceChargeMemoHeader);

      // Exercise: Find values within tolerance, using a reference amount above the actual document amount.
      TolerancePct := LibraryRandom.RandInt(10);
      PaymentRegistrationMgt.FindRecords(
        TempDocumentSearchResult,FinanceChargeMemoHeader."No.",
        (1 + TolerancePct / 100) * FinanceChargeMemoHeader."Remaining Amount",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");

      // Exercise: Find values within tolerance, using a reference amount below the actual document amount.
      PaymentRegistrationMgt.FindRecords(
        TempDocumentSearchResult,FinanceChargeMemoHeader."No.",
        (1 - (TolerancePct / 100) * (1 - TolerancePct / 100)) * FinanceChargeMemoHeader."Remaining Amount",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
        FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");
    END;

    [Test]
    PROCEDURE SearchFinanceChargeMemoNegative@87();
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      FinanceChargeMemoHeader@1003 : Record 302;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupFinanceChargeMemo(FinanceChargeMemoHeader);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(
        TempDocumentSearchResult,FinanceChargeMemoHeader."No.",0.5 * FinanceChargeMemoHeader."Remaining Amount",10);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,0,FinanceChargeMemoHeader."No.",
          FinanceChargeMemoHeader."Remaining Amount",DATABASE::"Finance Charge Memo Header");
    END;

    [Test]
    [HandlerFunctions(SalesOrderPageHandler)]
    PROCEDURE SearchSalesOrderByDocNoShowResults@93();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::Order,SalesOrderTxt);
    END;

    [Test]
    [HandlerFunctions(SalesInvoicePageHandler)]
    PROCEDURE SearchSalesInvoiceByDocNoShowResults@95();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::Invoice,SalesInvoiceTxt);
    END;

    [Test]
    [HandlerFunctions(SalesReturnOrderPageHandler)]
    PROCEDURE SearchSalesReturnOrderByDocNoShowResults@96();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::"Return Order",SalesReturnOrderTxt);
    END;

    [Test]
    [HandlerFunctions(SalesQuotePageHandler)]
    PROCEDURE SearchSalesQuoteByDocNoShowResults@97();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::Quote,SalesQuoteTxt);
    END;

    [Test]
    [HandlerFunctions(SalesBlanketOrderPageHandler)]
    PROCEDURE SearchSalesBlanketOrderByDocNoShowResults@148();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::"Blanket Order",SalesBlanketOrderTxt);
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoPageHandler)]
    PROCEDURE SearchSalesCrMemoByDocNoShowResults@98();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoShowResults(SalesHeader."Document Type"::"Credit Memo",SalesCreditMemoTxt);
    END;

    [Test]
    PROCEDURE SearchSalesOrderByAmount@67();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByAmount(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchSalesInvoiceByAmount@108();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByAmount(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchSalesReturnOrderByAmount@107();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByAmount(SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE SearchSalesQuoteByAmount@106();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByAmount(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchSalesCrMemoByAmount@102();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByAmount(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchSalesOrderByDocNoAndAmount@69();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoAndAmount(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchSalesInvoiceByDocNoAndAmount@113();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoAndAmount(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchSalesReturnOrderByDocNoAndAmount@112();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoAndAmount(SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE SearchSalesQuoteByDocNoAndAmount@111();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoAndAmount(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchSalesCrMemoByDocNoAndAmount@110();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderByDocNoAndAmount(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchSalesOrderWithTolerance@70();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderWithTolerance(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchSalesInvoiceWithTolerance@118();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderWithTolerance(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchSalesReturnOrderWithTolerance@117();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderWithTolerance(SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE SearchSalesQuoteWithTolerance@116();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderWithTolerance(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchSalesCrMemoWithTolerance@115();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderWithTolerance(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchSalesOrderNegative@73();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderNegative(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchSalesInvoiceNegative@122();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderNegative(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchSalesReturnOrderNegative@121();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderNegative(SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE SearchSalesQuoteNegative@120();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderNegative(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchSalesCrMemoNegative@119();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SearchSalesHeaderNegative(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ServiceOrderPageHandler)]
    PROCEDURE SearchServiceOrderByDocNoShowResults@134();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoShowResults(ServiceHeader."Document Type"::Order,ServiceOrderTxt);
    END;

    [Test]
    [HandlerFunctions(ServiceInvoicePageHandler)]
    PROCEDURE SearchServiceInvoiceByDocNoShowResults@138();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoShowResults(ServiceHeader."Document Type"::Invoice,ServiceInvoiceTxt);
    END;

    [Test]
    [HandlerFunctions(ServiceQuotePageHandler)]
    PROCEDURE SearchServiceQuoteByDocNoShowResults@137();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoShowResults(ServiceHeader."Document Type"::Quote,ServiceQuoteTxt);
    END;

    [Test]
    [HandlerFunctions(ServiceCrMemoPageHandler)]
    PROCEDURE SearchServiceCrMemoByDocNoShowResults@136();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoShowResults(ServiceHeader."Document Type"::"Credit Memo",ServiceCreditMemoTxt);
    END;

    [Test]
    PROCEDURE SearchServiceOrderByAmount@139();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByAmount(ServiceHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchServiceInvoiceByAmount@135();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByAmount(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchServiceQuoteByAmount@131();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByAmount(ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchServiceCrMemoByAmount@125();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByAmount(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchServiceOrderByDocNoAndAmount@124();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoAndAmount(ServiceHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchServiceInvoiceByDocNoAndAmount@91();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoAndAmount(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchServiceQuoteByDocNoAndAmount@86();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoAndAmount(ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchServiceCrMemoByDocNoAndAmount@79();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderByDocNoAndAmount(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchServiceOrderWithTolerance@147();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderWithTolerance(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchServiceInvoiceWithTolerance@146();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderWithTolerance(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchServiceQuoteWithTolerance@145();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderWithTolerance(ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchServiceCrMemoWithTolerance@144();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderWithTolerance(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SearchServiceOrderNegative@143();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderNegative(ServiceHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE SearchServiceInvoiceNegative@140();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderNegative(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SearchServiceQuoteNegative@83();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderNegative(ServiceHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE SearchServiceCrMemoNegative@82();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      SearchServiceHeaderNegative(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SetToleranceAndAmount@114();
    VAR
      DocumentSearch@1000 : TestPage 985;
      Tolerance@1001 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Tolerance := LibraryRandom.RandDec(100,2);
      DocumentSearch.OPENEDIT;

      // Exercise.
      DocumentSearch.Amount.SETVALUE(LibraryRandom.RandDec(100,2));
      DocumentSearch.AmountTolerance.SETVALUE(Tolerance);

      // Verify.
      DocumentSearch.Warning.ASSERTEQUALS(
        STRSUBSTNO(ToleranceTxt,FORMAT((1 - Tolerance / 100) * DocumentSearch.Amount.ASDECIMAL,0,'<Precision,2><Standard Format,0>'),
          FORMAT((1 + Tolerance / 100) * DocumentSearch.Amount.ASDECIMAL,0,'<Precision,2><Standard Format,0>')));
    END;

    [Test]
    PROCEDURE UnsetTolerance@123();
    VAR
      DocumentSearch@1000 : TestPage 985;
    BEGIN
      Initialize;

      // Setup.
      DocumentSearch.OPENEDIT;
      DocumentSearch.Amount.SETVALUE(LibraryRandom.RandDec(100,2));

      // Exercise.
      DocumentSearch.AmountTolerance.SETVALUE(LibraryRandom.RandDec(100,2));
      DocumentSearch.AmountTolerance.SETVALUE('');

      // Verify.
      DocumentSearch.Warning.ASSERTEQUALS('');
    END;

    [Normal]
    LOCAL PROCEDURE SetToleranceBoundaries@173(Tolerance@1003 : Decimal);
    VAR
      DocumentSearch@1000 : TestPage 985;
    BEGIN
      Initialize;

      // Setup.
      DocumentSearch.OPENEDIT;

      // Exercise / Verify.
      IF (Tolerance < 0) OR (Tolerance > 100) THEN
        ASSERTERROR DocumentSearch.AmountTolerance.SETVALUE(Tolerance)
      ELSE BEGIN
        DocumentSearch.AmountTolerance.SETVALUE(Tolerance);
        DocumentSearch.Warning.ASSERTEQUALS('');
      END;
    END;

    [Test]
    PROCEDURE SetToleranceBelow0@175();
    BEGIN
      SetToleranceBoundaries(-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE SetToleranceAbove100@176();
    BEGIN
      SetToleranceBoundaries(LibraryRandom.RandDecInRange(101,200,2));
    END;

    [Test]
    PROCEDURE SetToleranceTo0@179();
    BEGIN
      SetToleranceBoundaries(0);
    END;

    [Test]
    PROCEDURE SetToleranceTo100@180();
    BEGIN
      SetToleranceBoundaries(100);
    END;

    [Test]
    PROCEDURE SetToleranceWithinRange@94();
    BEGIN
      SetToleranceBoundaries(LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE GLAccountBalance@99();
    VAR
      GLEntry@1000 : Record 17;
      PaymentRegistrationSetup@1001 : Record 980;
      GenJnlLine@1005 : Record 81;
      PaymentRegistrationMgt@1006 : Codeunit 980;
      PostedAmount@1003 : Decimal;
      UnpostedAmount@1004 : Decimal;
      ActualPosted@1008 : Decimal;
      ActualUnposted@1007 : Decimal;
    BEGIN
      Initialize;

      // Setup
      PostedAmount := LibraryRandom.RandDec(100,2);
      UnpostedAmount := LibraryRandom.RandDec(100,2);

      SetPaymentRegistrationSetup(PaymentRegistrationSetup."Bal. Account Type"::"G/L Account");
      PaymentRegistrationSetup.GET(USERID);

      // Exercise
      CreateGLEntry(GLEntry,PaymentRegistrationSetup."Bal. Account No.",PostedAmount);
      CreateGnlJnlLine(GenJnlLine,PaymentRegistrationSetup,UnpostedAmount);

      PaymentRegistrationMgt.CalculateBalance(ActualPosted,ActualUnposted);

      // Verify
      Assert.AreEqual(PostedAmount,ActualPosted,'');
      Assert.AreEqual(UnpostedAmount,ActualUnposted,'');
    END;

    [Test]
    PROCEDURE BankAccountBalance@149();
    VAR
      BankAccLedgerEntry@1000 : Record 271;
      PaymentRegistrationSetup@1001 : Record 980;
      GenJnlLine@1005 : Record 81;
      PaymentRegistrationMgt@1006 : Codeunit 980;
      PostedAmount@1003 : Decimal;
      UnpostedAmount@1004 : Decimal;
      ActualPosted@1008 : Decimal;
      ActualUnposted@1007 : Decimal;
    BEGIN
      Initialize;

      // Setup
      PostedAmount := LibraryRandom.RandDec(100,2);
      UnpostedAmount := LibraryRandom.RandDec(100,2);

      SetPaymentRegistrationSetup(PaymentRegistrationSetup."Bal. Account Type"::"Bank Account");
      PaymentRegistrationSetup.GET(USERID);

      // Exercise
      CreateBankAccLedgerEntry(BankAccLedgerEntry,PaymentRegistrationSetup."Bal. Account No.",PostedAmount);
      CreateGnlJnlLine(GenJnlLine,PaymentRegistrationSetup,UnpostedAmount);

      PaymentRegistrationMgt.CalculateBalance(ActualPosted,ActualUnposted);

      // Verify
      Assert.AreEqual(PostedAmount,ActualPosted,'');
      Assert.AreEqual(UnpostedAmount,ActualUnposted,'');
    END;

    LOCAL PROCEDURE Initialize@15();
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
    BEGIN
      SetPaymentRegistrationSetup(PaymentRegistrationSetup."Bal. Account Type"::"Bank Account");
      LibraryVariableStorage.Clear;

      IF isInitialized THEN
        EXIT;
      MaxPaymentDiscountAmount := 50;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE CalcServiceAmmount@53(ServiceNo@1001 : Code[20]) ServiceTotal : Decimal;
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLine.SETFILTER("Document No.",ServiceNo);
      ServiceTotal := 0;
      IF ServiceLine.FINDSET THEN BEGIN
        REPEAT
          ServiceTotal := ServiceTotal + ServiceLine."Amount Including VAT";
        UNTIL ServiceLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateBankAccount@5() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      BankAccount.INIT;
      BankAccount."No." := LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("No."),DATABASE::"Bank Account");
      BankAccount.INSERT;
      EXIT(BankAccount."No.")
    END;

    LOCAL PROCEDURE CreateCustomerLedgerEntry@7(VAR CustLedgerEntry@1002 : Record 21;DocumentType@1000 : Option;IsOpen@1001 : Boolean) : Integer;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        IF FINDLAST THEN;
        INIT;
        "Entry No." += 1;
        "Customer No." := CreateCustomer;
        "Document Type" := DocumentType;
        Open := IsOpen;
        IF IsOpen THEN
          "Remaining Amount" := LibraryRandom.RandDec(100,2);
        "Document No." :=
          LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Cust. Ledger Entry");
        Description :=
          LibraryUtility.GenerateRandomCode(FIELDNO(Description),DATABASE::"Cust. Ledger Entry");
        "Due Date" := LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE + LibraryRandom.RandInt(10));
        "Remaining Pmt. Disc. Possible" := LibraryRandom.RandDec(MaxPaymentDiscountAmount,2);
        "Pmt. Discount Date" :=
          LibraryUtility.GenerateRandomDate(WORKDATE - LibraryRandom.RandInt(10),WORKDATE);
        INSERT;

        EXIT("Entry No.");
      END
    END;

    LOCAL PROCEDURE CreateCustomer@6() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      Customer.INIT;
      Customer."No." := LibraryUtility.GenerateRandomCode(Customer.FIELDNO("No."),DATABASE::Customer);
      Customer.Name := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      Customer.INSERT;
      EXIT(Customer."No.")
    END;

    LOCAL PROCEDURE CreateDetailedCustomerLedgerEntry@10(EntryNo@1000 : Integer);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      DetailedCustLedgEntry.INIT;
      DetailedCustLedgEntry."Cust. Ledger Entry No." := EntryNo;
      DetailedCustLedgEntry.Amount := LibraryRandom.RandDecInRange(MaxPaymentDiscountAmount,100,2);
      DetailedCustLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@12(TemplateName@1000 : Code[10]) : Code[10];
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GenJournalBatch.INIT;
      GenJournalBatch."Journal Template Name" := TemplateName;
      GenJournalBatch.Name := LibraryUtility.GenerateRandomCode(GenJournalBatch.FIELDNO(Name),DATABASE::"Gen. Journal Batch");
      GenJournalBatch."No. Series" :=
        LibraryUtility.GenerateRandomCode(GenJournalBatch.FIELDNO("No. Series"),DATABASE::"Gen. Journal Batch");
      GenJournalBatch.INSERT;
      EXIT(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateGenJournalTemplate@13() : Code[10];
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      GenJournalTemplate.INIT;
      GenJournalTemplate.Name := LibraryUtility.GenerateRandomCode(GenJournalTemplate.FIELDNO(Name),DATABASE::"Gen. Journal Template");
      GenJournalTemplate.INSERT;
      EXIT(GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGnlJnlLine@127(VAR GenJnlLine@1000 : Record 81;PaymentRegistrationSetup@1001 : Record 980;Amount@1002 : Decimal);
    BEGIN
      GenJnlLine."Journal Template Name" := CreateGenJournalTemplate;
      GenJnlLine."Journal Batch Name" := CreateGenJournalBatch(GenJnlLine."Journal Template Name");

      CASE PaymentRegistrationSetup."Bal. Account Type" OF
        PaymentRegistrationSetup."Bal. Account Type"::"Bank Account":
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
        PaymentRegistrationSetup."Bal. Account Type"::"G/L Account":
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
      END;
      GenJnlLine."Bal. Account No." := PaymentRegistrationSetup."Bal. Account No.";
      GenJnlLine.Amount := Amount;
      GenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE CreateGLEntry@129(VAR GLEntry@1000 : Record 17;BalAccNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      EntryNo@1003 : Integer;
    BEGIN
      GLEntry.FINDLAST;
      EntryNo := GLEntry."Entry No.";
      GLEntry.INIT;
      GLEntry."Entry No." := EntryNo + 1;
      GLEntry."G/L Account No." := BalAccNo;
      GLEntry.Amount := Amount;
      GLEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateBankAccLedgerEntry@109(VAR BankAccLedgerEntry@1000 : Record 271;BalAccNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      EntryNo@1003 : Integer;
    BEGIN
      BankAccLedgerEntry.FINDLAST;
      EntryNo := BankAccLedgerEntry."Entry No.";
      BankAccLedgerEntry.INIT;
      BankAccLedgerEntry."Entry No." := EntryNo + 1;
      BankAccLedgerEntry."Bank Account No." := BalAccNo;
      BankAccLedgerEntry.Amount := Amount;
      BankAccLedgerEntry.INSERT;
    END;

    [Test]
    PROCEDURE DeleteDefaultSetup@59();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      IF PaymentRegistrationSetup.GET THEN
        PaymentRegistrationSetup.DELETE;
    END;

    LOCAL PROCEDURE SetPaymentRegistrationSetup@4(AccountType@1000 : Option);
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
    BEGIN
      WITH PaymentRegistrationSetup DO BEGIN
        DELETEALL;
        INIT;
        "User ID" := USERID;
        CASE AccountType OF
          "Bal. Account Type"::"Bank Account":
            "Bal. Account No." := CreateBankAccount;
          "Bal. Account Type"::"G/L Account":
            "Bal. Account No." := LibraryERM.CreateGLAccountNo;
        END;
        "Bal. Account Type" := AccountType;
        "Journal Template Name" := CreateGenJournalTemplate;
        "Journal Batch Name" := CreateGenJournalBatch("Journal Template Name");
        "Auto Fill Date Received" := FALSE;
        "Use this Account as Def." := TRUE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SetAutoFillDate@43();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      WITH PaymentRegistrationSetup DO BEGIN
        GET(USERID);
        "Auto Fill Date Received" := TRUE;
        MODIFY;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentRegistrationSetupCancelPageHandler@71(VAR PaymentRegistrationSetupPage@1000 : TestPage 982);
    BEGIN
      PaymentRegistrationSetupPage.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentRegistrationSetupOKPageHandler@77(VAR PaymentRegistrationSetupPage@1000 : TestPage 982);
    VAR
      PaymentRegistrationSetup@1001 : Record 980;
    BEGIN
      PaymentRegistrationSetupPage."Bal. Account Type".SETVALUE(PaymentRegistrationSetup."Bal. Account Type"::"G/L Account");
      PaymentRegistrationSetupPage."Bal. Account No.".SETVALUE(LibraryERM.CreateGLAccountNo);
      PaymentRegistrationSetupPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentRegistrationPromptOKPageHandler@22(VAR PaymentRegistrationPromptPage@1001 : TestPage 980);
    BEGIN
      Assert.AreEqual(UPPERCASE(USERID),PaymentRegistrationPromptPage."Bal. Account No.".VALUE,WrongUserErr);

      PaymentRegistrationPromptPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE PrepareDefaultSetup@52();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      WITH PaymentRegistrationSetup DO BEGIN
        IF NOT GET THEN BEGIN
          "User ID" := '';
          INSERT;
        END;

        "Bal. Account No." := '';
        "Use this Account as Def." := FALSE;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertTempPaymentRegistrationBuffer@51(VAR TempPaymentRegistrationBuffer@1000 : TEMPORARY Record 981);
    BEGIN
      WITH TempPaymentRegistrationBuffer DO BEGIN
        INIT;
        "Date Received" := WORKDATE;
        "Due Date" := WORKDATE;
        "Pmt. Discount Date" := WORKDATE;
        "Rem. Amt. after Discount" := LibraryRandom.RandDec(100,2);
        "Remaining Amount" := "Rem. Amt. after Discount" + LibraryRandom.RandDec(100,2);
        "Original Remaining Amount" := "Remaining Amount";
        INSERT;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE SearchSalesHeaderByDocNoShowResults@132(DocumentType@1007 : Option;Description@1001 : Text);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      SalesHeader@1000 : Record 36;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupSalesHeader(SalesHeader,DocumentType);
      LibraryVariableStorage.Enqueue(SalesHeader."No.");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,SalesHeader."No.",0,0);

      // Verify. Show results is validated in the page handler.
      VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Amount Including VAT",DATABASE::"Sales Header");
      TempDocumentSearchResult.TESTFIELD(Description,Description);

      PaymentRegistrationMgt.ShowRecords(TempDocumentSearchResult);
    END;

    [Normal]
    LOCAL PROCEDURE SearchSalesHeaderByDocNoAndAmount@84(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      SalesHeader@1000 : Record 36;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupSalesHeader(SalesHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,SalesHeader."No.",SalesHeader."Amount Including VAT",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Amount Including VAT",DATABASE::"Sales Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchSalesHeaderByAmount@85(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      SalesHeader@1000 : Record 36;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupSalesHeader(SalesHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',SalesHeader."Amount Including VAT",0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Amount Including VAT",DATABASE::"Sales Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchSalesHeaderWithTolerance@58(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      SalesHeader@1000 : Record 36;
      PaymentRegistrationMgt@1005 : Codeunit 980;
      TolerancePct@1001 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupSalesHeader(SalesHeader,DocumentType);

      // Exercise: Find values within tolerance, using a reference amount above the actual document amount.
      TolerancePct := LibraryRandom.RandInt(10);
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,SalesHeader."No.",
        (1 + TolerancePct / 100) * SalesHeader."Amount Including VAT",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Amount Including VAT",DATABASE::"Sales Header");

      // Exercise: Find values within tolerance, using a reference amount below the actual document amount.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,SalesHeader."No.",
        (1 - (TolerancePct / 100) * (1 - TolerancePct / 100)) * SalesHeader."Amount Including VAT",TolerancePct);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Amount Including VAT",DATABASE::"Sales Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchSalesHeaderNegative@55(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      SalesHeader@1000 : Record 36;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupSalesHeader(SalesHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,SalesHeader."No.",0.5 * SalesHeader."Amount Including VAT",0);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,SalesHeader."Document Type",SalesHeader."No.",
          SalesHeader."Amount Including VAT",DATABASE::"Sales Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchServiceHeaderByDocNoShowResults@133(DocumentType@1007 : Option;Description@1001 : Text);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ServiceHeader@1000 : Record 5900;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupServiceHeader(ServiceHeader,DocumentType);
      LibraryVariableStorage.Enqueue(ServiceHeader."No.");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",0,0);

      // Verify. Show result is validated in the handler page.
      VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
        CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");
      TempDocumentSearchResult.TESTFIELD(Description,Description);

      PaymentRegistrationMgt.ShowRecords(TempDocumentSearchResult);
    END;

    [Normal]
    LOCAL PROCEDURE SearchServiceHeaderByDocNoAndAmount@68(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ServiceHeader@1000 : Record 5900;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupServiceHeader(ServiceHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",CalcServiceAmmount(ServiceHeader."No."),0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
        CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchServiceHeaderByAmount@62(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ServiceHeader@1000 : Record 5900;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupServiceHeader(ServiceHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,'',CalcServiceAmmount(ServiceHeader."No."),0);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
        CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchServiceHeaderWithTolerance@78(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ServiceHeader@1000 : Record 5900;
      PaymentRegistrationMgt@1005 : Codeunit 980;
      TolerancePct@1001 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupServiceHeader(ServiceHeader,DocumentType);

      // Exercise: Find values within tolerance, using a reference amount above the actual document amount.
      TolerancePct := LibraryRandom.RandInt(10);
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",
        (1 + TolerancePct / 100) * CalcServiceAmmount(ServiceHeader."No."),15);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
        CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");

      // Exercise: Find values within tolerance, using a reference amount below the actual document amount.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",
        (1 - (TolerancePct / 100) * (1 - TolerancePct / 100)) * CalcServiceAmmount(ServiceHeader."No."),15);

      // Verify.
      VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
        CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");
    END;

    [Normal]
    LOCAL PROCEDURE SearchServiceHeaderNegative@72(DocumentType@1007 : Option);
    VAR
      TempDocumentSearchResult@1006 : TEMPORARY Record 983;
      ServiceHeader@1000 : Record 5900;
      PaymentRegistrationMgt@1005 : Codeunit 980;
    BEGIN
      Initialize;

      // Setup.
      SetupServiceHeader(ServiceHeader,DocumentType);

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",0.5 * CalcServiceAmmount(ServiceHeader."No."),0);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
          CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No." + 'K',CalcServiceAmmount(ServiceHeader."No."),0);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
          CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");

      // Exercise.
      PaymentRegistrationMgt.FindRecords(TempDocumentSearchResult,ServiceHeader."No.",CalcServiceAmmount(ServiceHeader."No.") + 0.1,0);

      // Verify.
      ASSERTERROR VerifyDocumentSearchResult(TempDocumentSearchResult,ServiceHeader."Document Type",ServiceHeader."No.",
          CalcServiceAmmount(ServiceHeader."No."),DATABASE::"Service Header");
    END;

    [Normal]
    LOCAL PROCEDURE SetupReminder@154(VAR ReminderHeader@1000 : Record 295);
    VAR
      Customer@1001 : Record 18;
      ReminderLine@1002 : Record 296;
      Amount@1003 : Decimal;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",Customer."No.");
      ReminderHeader.MODIFY(TRUE);
      LibraryERM.CreateReminderLine(ReminderLine,ReminderHeader."No.",ReminderLine.Type::"G/L Account");
      Amount := LibraryRandom.RandDecInDecimalRange(1,100,2);
      ReminderLine.VALIDATE("Remaining Amount",Amount);
      ReminderLine.VALIDATE(Amount,Amount);
      ReminderLine.MODIFY(TRUE);
      ReminderHeader.CALCFIELDS("Remaining Amount","Interest Amount");
    END;

    [Normal]
    LOCAL PROCEDURE SetupFinanceChargeMemo@54(VAR FinanceChargeMemoHeader@1000 : Record 302);
    VAR
      Customer@1001 : Record 18;
      FinanceChargeMemoLine@1002 : Record 303;
      FinanceChargeTerms@1004 : Record 5;
      Amount@1003 : Decimal;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,Customer."No.");
      LibraryERM.CreateFinanceChargeTerms(FinanceChargeTerms);
      FinanceChargeMemoHeader.VALIDATE("Fin. Charge Terms Code",FinanceChargeTerms.Code);
      FinanceChargeMemoHeader.MODIFY(TRUE);
      LibraryERM.CreateFinanceChargeMemoLine(
        FinanceChargeMemoLine,FinanceChargeMemoHeader."No.",FinanceChargeMemoLine.Type::"G/L Account");
      Amount := LibraryRandom.RandDecInDecimalRange(1,100,2);
      FinanceChargeMemoLine.VALIDATE("Remaining Amount",Amount);
      FinanceChargeMemoLine.VALIDATE(Amount,Amount);
      FinanceChargeMemoLine.MODIFY(TRUE);
      FinanceChargeMemoHeader.CALCFIELDS("Remaining Amount","Interest Amount");
    END;

    [Normal]
    LOCAL PROCEDURE SetupSalesHeader@74(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option);
    VAR
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      Customer@1004 : Record 18;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInDecimalRange(1,100,2));
      SalesLine.MODIFY(TRUE);
      SalesHeader.CALCFIELDS("Amount Including VAT");
    END;

    [Normal]
    LOCAL PROCEDURE SetupServiceHeader@57(VAR ServiceHeader@1000 : Record 5900;DocumentType@1003 : Option);
    VAR
      ServiceLine@1001 : Record 5902;
      Item@1002 : Record 27;
      Customer@1004 : Record 18;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,Customer."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDecInDecimalRange(1,100,2));
      ServiceLine.VALIDATE("Amount Including VAT",LibraryRandom.RandDecInDecimalRange(1,100,2));
      ServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDocumentSearchResult@63(VAR TempDocumentSearchResult@1004 : TEMPORARY Record 983;DocType@1000 : Integer;DocNo@1001 : Code[20];Amount@1002 : Decimal;TableID@1003 : Integer);
    BEGIN
      TempDocumentSearchResult.GET(DocType,DocNo,TableID);
      TempDocumentSearchResult.TESTFIELD(Amount,Amount);
    END;

    [ConfirmHandler]
    PROCEDURE HandlerConfirmYes@23(Message@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE HandlerConfirmNo@49(Message@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [PageHandler]
    PROCEDURE ReminderPageHandler@155(VAR Reminder@1000 : TestPage 434);
    VAR
      ReminderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ReminderNo);
      Reminder."No.".ASSERTEQUALS(ReminderNo);
    END;

    [PageHandler]
    PROCEDURE FinChargeMemoPageHandler@152(VAR FinChargeMemo@1000 : TestPage 446);
    VAR
      FinChargeNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinChargeNo);
      FinChargeMemo."No.".ASSERTEQUALS(FinChargeNo);
    END;

    [PageHandler]
    PROCEDURE SalesOrderPageHandler@153(VAR SalesOrder@1000 : TestPage 42);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      SalesOrder."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE SalesInvoicePageHandler@156(VAR SalesInvoice@1000 : TestPage 43);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      SalesInvoice."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE SalesQuotePageHandler@157(VAR SalesQuote@1000 : TestPage 41);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      SalesQuote."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE SalesBlanketOrderPageHandler@158(VAR BlanketSalesOrder@1000 : TestPage 507);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      BlanketSalesOrder."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE SalesCrMemoPageHandler@162(VAR SalesCreditMemo@1000 : TestPage 44);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      SalesCreditMemo."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE SalesReturnOrderPageHandler@163(VAR SalesReturnOrder@1000 : TestPage 6630);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      SalesReturnOrder."No.".ASSERTEQUALS(SalesHeaderNo);
    END;

    [PageHandler]
    PROCEDURE ServiceOrderPageHandler@168(VAR ServiceOrder@1000 : TestPage 5900);
    VAR
      ServiceHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceHeaderNo);
      ServiceOrder."No.".ASSERTEQUALS(ServiceHeaderNo);
    END;

    [PageHandler]
    PROCEDURE ServiceInvoicePageHandler@169(VAR ServiceInvoice@1000 : TestPage 5933);
    VAR
      ServiceHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceHeaderNo);
      ServiceInvoice."No.".ASSERTEQUALS(ServiceHeaderNo);
    END;

    [PageHandler]
    PROCEDURE ServiceCrMemoPageHandler@170(VAR ServiceCreditMemo@1000 : TestPage 5935);
    VAR
      ServiceHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceHeaderNo);
      ServiceCreditMemo."No.".ASSERTEQUALS(ServiceHeaderNo);
    END;

    [PageHandler]
    PROCEDURE ServiceQuotePageHandler@171(VAR ServiceQuote@1000 : TestPage 5964);
    VAR
      ServiceHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceHeaderNo);
      ServiceQuote."No.".ASSERTEQUALS(ServiceHeaderNo);
    END;

    BEGIN
    {
      // [FEATURE] [Payment Registration]
    }
    END.
  }
}

