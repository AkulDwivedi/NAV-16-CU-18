OBJECT Codeunit 137288 SCM Inventory Costing III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryCosting@1016 : Codeunit 132200;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1015 : Codeunit 130502;
      LibraryManufacturing@1017 : Codeunit 132202;
      LibraryPurchase@1019 : Codeunit 130512;
      LibrarySales@1020 : Codeunit 130509;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryVariableStorage@1006 : Codeunit 131004;
      LibraryRandom@1003 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      AppliedQuantityUndoError@1009 : TextConst 'ENU="Remaining Quantity must be equal to ''1''  in Item Ledger Entry: Entry No.=%1. Current value is ''0''."';
      AvailabilityWarning@1011 : TextConst 'ENU=There are availability warnings on one or more lines.';
      DeletionError@1013 : TextConst 'ENU=Order must be deleted.';
      ItemFilter@1018 : TextConst 'ENU=%1|%2';
      InvoicedChargeItemError@1010 : TextConst 'ENU=You cannot undo line %1 because an item charge has already been invoiced.';
      UndoReceiptError@1007 : TextConst 'ENU=This receipt has already been invoiced. Undo %1 can be applied only to posted, but not invoiced receipts.';
      UndoReceiptMessage@1012 : TextConst 'ENU=Do you really want to undo the selected Receipt lines?';
      UndoReturnShipmentMessage@1008 : TextConst 'ENU=Do you really want to undo the selected Return Shipment lines?';
      UndoReturnReceiptMessage@1021 : TextConst 'ENU=Do you really want to undo the selected Return Receipt lines?';
      UndoShipmentError@1001 : TextConst 'ENU=This shipment has already been invoiced. Undo %1 can be applied only to posted, but not invoiced shipments.';
      UndoShipmentMessage@1014 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoPurchaseReceiptTrackedBySerialNumber@3();
    VAR
      PurchaseLine@1002 : Record 39;
      PurchRcptLine@1001 : Record 121;
      TempReservationEntry@1000 : TEMPORARY Record 337;
      DummyValue@1003 : Variant;
    BEGIN
      // Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line Tracked by Serial Number.

      // Setup: Create Serial Tracked Item. Create Purchase Order and assign Serial No. Receive Purchase Order.
      Initialize;
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),'',1);  // 1 is Sign Factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order,TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Purchase Receipt Line.
      UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,1,1,PurchaseLine.Quantity);  // 1 is Sign Factor.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,-1,1,PurchaseLine.Quantity);  // 1 and -1 are Sign Factors.
      PurchRcptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPurchaseInvoicedReceipt@24();
    VAR
      Item@1000 : Record 27;
      ItemChargeAssignmentPurch@1001 : Record 5805;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Verify error when undo a Invoiced Purchase Receipt.

      // Setup: Create and Invoice Purchase Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,TRUE);  // True for Invoice.
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Receipt Line.
      ASSERTERROR UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify error after undo Invoiced Receipt.
      Assert.ExpectedError(STRSUBSTNO(UndoReceiptError,ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptWithAppliedQuantity@25();
    VAR
      ItemLedgerEntry@1005 : Record 32;
      PurchaseLine@1002 : Record 39;
      SalesLine@1003 : Record 37;
      DummyValue@1000 : Variant;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify error when undo a Purchase Receipt Line with applied Quantity Tracked by Serial Number.

      // Setup: Create Serial Tracked Item. Create Purchase Order and assign Serial No. Receive Purchase Order.
      Initialize;
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),
        TrackingOption::AssignSerialNo,'',1);  // 1 is Sign Factor.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine."No.",0,TRUE);

      // Create Sales Order and assign Serial No. Ship and Invoice Sales Order.
      CreateSalesOrderWithTracking(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity,TrackingOption::SelectEntries);
      PostSalesDocument(SalesLine,TRUE);
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Receipt Line.
      ASSERTERROR UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify error after undo Receipt with applied Quantity.
      Assert.ExpectedError(STRSUBSTNO(AppliedQuantityUndoError,ItemLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoPurchaseReceiptWithChargeAssignment@27();
    VAR
      ItemChargeAssignmentPurch@1005 : Record 5805;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchRcptLine@1000 : Record 121;
      TempReservationEntry@1003 : TEMPORARY Record 337;
      DummyValue@1001 : Variant;
    BEGIN
      // Verify Item Tracking Lines and Value Entries when undo a Purchase Receipt Line With Charge Assignment.

      // Setup: Create Serial Tracked Item. Create Purchase Order and assign Serial No. Receive Purchase Order. Create Purchase Invoice for Charge Item and assign it to previous Posted Receipt.
      Initialize;
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),'',1);  // 1 is sign factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order,TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.
      FindReceiptLine(PurchRcptLine,PurchaseLine,1);  // 1 is for Sign Factor.
      PurchaseInvoiceItemChargeAssign(
        PurchaseHeader,PurchRcptLine."Buy-from Vendor No.",ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        PurchRcptLine."Document No.",PurchRcptLine."Line No.",PurchRcptLine."No.");

      // Exercise: Undo Purchase Receipt Line.
      UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,1,1,PurchaseLine.Quantity);  // 1 is Sign Factor.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,-1,1,PurchaseLine.Quantity);  // 1 and -1 are Sign Factors.
      PurchRcptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptWithInvoicedChargeAssignment@35();
    VAR
      Item@1003 : Record 27;
      ItemChargeAssignmentPurch@1002 : Record 5805;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1000 : Record 121;
    BEGIN
      // Verify error when undo a Purchase Receipt Line With Invoiced Charge Assignment.

      // Setup: Create and Receive Purchase Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.

      // Create Purchase Invoice for Charge Item and assign it to previous Posted Receipt. Post Purchase Invoice.
      FindReceiptLine(PurchRcptLine,PurchaseLine,1);  // 1 is for Sign Factor.
      PurchaseInvoiceItemChargeAssign(
        PurchaseHeader,PurchRcptLine."Buy-from Vendor No.",ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        PurchRcptLine."Document No.",PurchRcptLine."Line No.",PurchRcptLine."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Receipt Line.
      ASSERTERROR UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify error after undo Receipt Invoiced Charge Assignment.
      Assert.ExpectedError(STRSUBSTNO(InvoicedChargeItemError,PurchaseLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE CorrectionLinesUnavailableForSalesOrder@34();
    VAR
      PurchaseLine@1002 : Record 39;
      SalesLine@1003 : Record 37;
      DummyValue@1000 : Variant;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Serial numbers for the line in the undone Purchase Receipt are not available for Sales Order.

      // Setup: Create Serial Tracked Item. Create Purchase Order and assign Serial No. Receive Purchase Order.
      Initialize;
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),
        TrackingOption::AssignSerialNo,'',1);  // 1 is Sign Factor.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.
      UndoPurchaseReceipt(PurchaseLine);

      // Exercise: Create Sales Order and assign Serial No.
      CreateSalesOrderWithTracking(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity,TrackingOption::VerifyEntries);

      // Verify: Verification done in ItemTrackingSummaryPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE CorrectionLinesUnavailableForPurchaseReturnOrder@44();
    VAR
      PurchaseLine@1002 : Record 39;
      DummyValue@1001 : Variant;
      TrackingOption@1000 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Serial numbers for the line in the undone Purchase Receipt are not available for Purchase Return Order.

      // Setup: Create Serial Tracked Item. Create Purchase Order and assign Serial No. Receive Purchase Order.
      Initialize;
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),
        TrackingOption::AssignSerialNo,'',1);  // 1 is Sign Factor.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.
      UndoPurchaseReceipt(PurchaseLine);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.

      // Exercise: Create Purchase Return Order and assign Serial No.
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::"Return Order",PurchaseLine."No.",TrackingOption::VerifyEntries,'',1);  // 1 is Sign Factor.

      // Verify: Verification done in ItemTrackingSummaryPageHandler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoMultipleLinesFromPurchaseReceipt@37();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
      PurchRcptLine@1003 : Record 121;
    BEGIN
      // Verify corrective Receipt Lines when undo Multiple Lines from Purchase Receipt.

      // Setup: Create and Receive Purchase Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader,PurchaseLine.Type::Item,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine2,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Receipt Line.
      UndoMultiplePurchaseReceiptLines(PurchaseLine,PurchaseLine2."No.");

      // Verify: Verify corrective Receipt Lines.
      VerifyReceiptLine(PurchRcptLine,PurchaseLine,-1);  // -1 is Quantity factor.
      VerifyReceiptLine(PurchRcptLine,PurchaseLine2,-1);  // -1 is Quantity factor.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoNegativePurchaseReceiptTrackedBySerialNumber@2();
    VAR
      PurchaseLine@1002 : Record 39;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line with Negative Quantity Tracked by Serial Number.

      // Setup: Create Item with Item Tracking Code which is neither SN Specific nor Lot Specific. Create Purchase Order and assign Serial No. Receive Purchase Order.
      Initialize;
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateTrackedItem(FALSE,'',LibraryUtility.GetGlobalNoSeriesCode),
        TrackingOption::AssignSerialNo,AvailabilityWarning,-1);  // -1 is for SignFactor.

      // Exercise and Verification.
      PostPurchaseOrderAndVerifyUndoReceipt(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoPurchaseReceiptTrackedByLotNumber@15();
    VAR
      PurchaseLine@1002 : Record 39;
      TrackingOption@1000 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line Tracked by Lot Number.

      // Setup: Create Item with Item Tracking Code which is neither SN Specific nor Lot Specific. Create Purchase Order and assign Lot No. Receive Purchase Order.
      Initialize;
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateTrackedItem(FALSE,LibraryUtility.GetGlobalNoSeriesCode,''),
        TrackingOption::AssignLotNo,'',1);  // 1 is for SignFactor.

      // Exercise and Verification.
      PostPurchaseOrderAndVerifyUndoReceipt(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoReturnShipmentTrackedBySerialNumber@9();
    VAR
      PurchaseLine@1002 : Record 39;
      ReturnShipmentLine@1001 : Record 6651;
      TempReservationEntry@1000 : TEMPORARY Record 337;
    BEGIN
      // Verify Return Shipment Lines, Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line Tracked by Serial Number.

      // Setup: Create Item for tracking. Create Purchase Return Order and assign Serial No. Ship Purchase Return Order.
      Initialize;
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::"Return Order",
        CreateTrackedItem(FALSE,'',LibraryUtility.GetGlobalNoSeriesCode),AvailabilityWarning,1);  // 1 is Sign Factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnShipmentMessage,-1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Purchase Return Shipment Line.
      UndoReturnShipment(PurchaseLine);

      // Verify: Verify Return Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,1,-1,PurchaseLine.Quantity);  // 1 and -1 are Sign Factors.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,-1,-1,PurchaseLine.Quantity);  // -1 is Sign Factor.
      ReturnShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoInvoicedReturnShipmentError@10();
    VAR
      Item@1000 : Record 27;
      ItemChargeAssignmentPurch@1001 : Record 5805;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Verify error when undo Invoiced Purchase Return Shipment.

      // Setup: Create and Invoice Purchase Return Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::"Return Order",CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,TRUE);  // True for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Return Shipment Line.
      ASSERTERROR UndoReturnShipment(PurchaseLine);

      // Verify: Verify error after undo Invoiced Return Shipment.
      Assert.ExpectedError(STRSUBSTNO(UndoShipmentError,ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Return Shipment"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoReturnShipmentWithChargeAssignment@8();
    VAR
      ItemChargeAssignmentPurch@1005 : Record 5805;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      ReturnShipmentLine@1004 : Record 6651;
      TempReservationEntry@1001 : TEMPORARY Record 337;
    BEGIN
      // Verify Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line With Charge Assignment.

      // Setup: Create Item for tracking. Create Purchase Return Order and assign Serial No. Receive Purchase Return Order. Create Purchase Invoice for Charge Item and assign it to previous Posted Return Shipment.
      Initialize;
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::"Return Order",
        CreateTrackedItem(FALSE,'',LibraryUtility.GetGlobalNoSeriesCode),AvailabilityWarning,1);  // 1 is Sign Factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnShipmentMessage,-1);  // Enqueue value for PostedItemTrackingLinesHandler.
      FindReturnShipmentLine(ReturnShipmentLine,PurchaseLine,1);  // 1 is for Sign Factor.
      PurchaseInvoiceItemChargeAssign(
        PurchaseHeader,ReturnShipmentLine."Buy-from Vendor No.",ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Return Shipment",
        ReturnShipmentLine."Document No.",ReturnShipmentLine."Line No.",ReturnShipmentLine."No.");

      // Exercise: Undo Purchase Return Shipment Line.
      UndoReturnShipment(PurchaseLine);

      // Verify: Verify Return Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,1,-1,PurchaseLine.Quantity);  // 1 and -1 are Sign Factors.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,-1,-1,PurchaseLine.Quantity);  // -1 is Sign Factor.
      ReturnShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoReturnShipmentWithInvoicedChargeAssignmentError@21();
    VAR
      Item@1003 : Record 27;
      ItemChargeAssignmentPurch@1002 : Record 5805;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1001 : Record 39;
      ReturnShipmentLine@1000 : Record 6651;
    BEGIN
      // Verify error when undo a Purchase Return Shipment Line With Invoiced Charge Assignment.

      // Setup: Create and Ship Purchase Return Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::"Return Order",CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.

      // Create Purchase Invoice for Charge Item and assign it to previous Posted Return Shipment. Post Purchase Invoice.
      FindReturnShipmentLine(ReturnShipmentLine,PurchaseLine,1);  // 1 is for Sign Factor.
      PurchaseInvoiceItemChargeAssign(
        PurchaseHeader,ReturnShipmentLine."Buy-from Vendor No.",ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Return Shipment",
        ReturnShipmentLine."Document No.",ReturnShipmentLine."Line No.",ReturnShipmentLine."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryVariableStorage.Enqueue(UndoReturnShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Return Shipment Line.
      ASSERTERROR UndoReturnShipment(PurchaseLine);

      // Verify: Verify error after undo Return Shipment with Invoiced Charge Assignment.
      Assert.ExpectedError(STRSUBSTNO(InvoicedChargeItemError,PurchaseLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoMultipleLinesFromReturnShipment@22();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
      ReturnShipmentLine@1003 : Record 6651;
    BEGIN
      // Verify corrective Return Shipment Lines when undo Multiple Lines from Return Shipment.

      // Setup: Create and Ship Purchase Return Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::"Return Order",CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader,PurchaseLine.Type::Item,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine2,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Purchase Return Shipment Line.
      UndoMultipleReturnShipmentLines(PurchaseLine,PurchaseLine2."No.");

      // Verify: Verify corrective Return Shipment Lines.
      VerifyReturnShipmentLine(ReturnShipmentLine,PurchaseLine,-1);  // -1 is Quantity factor.
      VerifyReturnShipmentLine(ReturnShipmentLine,PurchaseLine2,-1);  // -1 is Quantity factor.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DeletePurchaseReturnOrderAfterUndo@36();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify deletion of Purchase Return Order is allowed after undo because nothing has been posted.

      // Setup: Create and Ship Purchase Return Order. Undo Return Shipment and reopen the Purchase Return Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseHeader."Document Type"::"Return Order",CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnShipmentMessage);  // Enqueue value for ConfirmHandler.
      UndoReturnShipment(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");

      // Exercise: Delete Purchase Return Order.
      PurchaseHeader.DELETE(TRUE);

      // Verify: Purchase Return Order is deleted.
      Assert.IsFalse(PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No."),DeletionError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoReturnShipmentOfNegativeQuantity@39();
    VAR
      PurchaseLine@1002 : Record 39;
      ReturnShipmentLine@1005 : Record 6651;
      TempReservationEntry@1001 : TEMPORARY Record 337;
      DummyValue@1000 : Variant;
    BEGIN
      // Verify Return Shipment Lines, Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line with Negative Quantity Tracked by Serial Number.

      // Setup: Create Serial tracked Item. Create Purchase Return Order and assign Serial No. Ship Purchase Return Order.
      Initialize;
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::"Return Order",
        CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),'',-1);  // -1 is sign factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value for ComfirmHandler.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnShipmentMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Purchase Return Shipment Line.
      UndoReturnShipment(PurchaseLine);

      // Verify: Verify Return Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,-1,1,PurchaseLine.Quantity);  // 1 and -1 are Sign Factors.
      VerifyReturnShipmentLineWithValueEntry(ReturnShipmentLine,PurchaseLine,1,1,PurchaseLine.Quantity);  // 1 is Sign Factor.
      ReturnShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterRcdPurchOrd@67();
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other when Undo Sales Shipment after receiving Purchase Order.
      UndoShptAfterPstdPurchOrd(FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterInvdPurchOrd@66();
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other when Undo Sales Shipment after invoicing Purchase Order.
      UndoShptAfterPstdPurchOrd(TRUE);
    END;

    LOCAL PROCEDURE UndoShptAfterPstdPurchOrd@65(Invoice@1007 : Boolean);
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create and Post Purchase Order. Create and Ship Sales Order. Undo Sales Shipment.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,Invoice);
      CreateShipSalesOrderAndUndoShipment(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterRcdPurchOrdWithSalesDocuments@63();
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other when Undo Shipment after receiving Purchase Order and posting Sales Order and Sales Return Order.
      UndoShptAfterPstdPurchOrdPstdSalesOrdAndSaleRetOrd(FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterInvdPurchOrdWithSalesDocuments@62();
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other when Undo Shipment after invoicing Purchase Order and posting Sales Order and Sales Return Order.
      UndoShptAfterPstdPurchOrdPstdSalesOrdAndSaleRetOrd(TRUE);
    END;

    LOCAL PROCEDURE UndoShptAfterPstdPurchOrdPstdSalesOrdAndSaleRetOrd@61(Invoice@1007 : Boolean);
    VAR
      Item@1008 : Record 27;
      ItemLedgerEntry@1003 : Record 32;
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create and Post Purchase Order. Create and Invoice Sales Order.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,Invoice);
      CreateAndPostSalesDocWithApplFromItemEntry(
        SalesLine,SalesLine."Document Type"::Order,PurchaseLine."No.",PurchaseLine.Quantity,0,TRUE);  // Use zero value for Entry No.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Sale,PurchaseLine."No.",SalesLine.Amount,FALSE);

      // Create Sales Return Order, apply with previous Sales Shipment and Invoice it.
      CreateAndPostSalesDocWithApplFromItemEntry(
        SalesLine,SalesLine."Document Type"::"Return Order",PurchaseLine."No.",PurchaseLine.Quantity,ItemLedgerEntry."Entry No.",TRUE);

      // Create and Ship Sales Order. Undo Sales Shipment.
      CreateShipSalesOrderAndUndoShipment(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterMultiplePurchaseSaleUndo@60();
    VAR
      Item@1007 : Record 27;
      ItemLedgerEntry@1003 : Record 32;
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other.

      // Setup: Create and Receive Purchase Order. Undo Purchase Receipt.
      Initialize;
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::Order,CreateVendor,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostPurchaseDocument(PurchaseLine,FALSE);
      LibraryVariableStorage.Enqueue(UndoReceiptMessage);  // Enqueue for Confirm Handler.
      UndoPurchaseReceipt(PurchaseLine);

      // Create and Ship Sales Order. Undo Sales Shipment. Again Invoice Sales Order.
      CreateShipSalesOrderAndUndoShipment(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity);
      PostSalesDocument(SalesLine,TRUE);
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Sale,PurchaseLine."No.",0,FALSE);

      // Create Sales Return Order, apply with previous Sales Shipment and Invoice it.
      CreateAndPostSalesDocWithApplFromItemEntry(
        SalesLine,SalesLine."Document Type"::"Return Order",PurchaseLine."No.",PurchaseLine.Quantity,0,TRUE);  // Use zero value for Entry No.

      // Create and Ship Sales Order. Undo Sales Shipment.
      CreateShipSalesOrderAndUndoShipment(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterUndoShptPstdSalesOrd@59();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other.

      // Setup: Create and Ship Sales Order. Undo Sales Shipment. Post Sales Order as Invoice.
      Initialize;
      CreateShipSalesOrderAndUndoShipment(
        SalesLine,CreateItem(Item."Replenishment System"::Purchase),LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      PostSalesDocument(SalesLine,TRUE);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterPostingConsumption@58();
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournalTemplate@1001 : Record 82;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other.

      // Setup: Create Production Order and Post Comsumption. Create and Ship Sales Order. Undo Sales Shipment.
      Initialize;
      CreateProductionOrderAndPostConsumptionOutput(ItemJournalLine,ItemJournalTemplate.Type::Consumption);
      CreateShipSalesOrderAndUndoShipment(SalesLine,ItemJournalLine."Item No.",LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      PostSalesDocument(SalesLine,TRUE);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShptAfterPostingOutput@57();
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemJournalTemplate@1004 : Record 82;
      SalesLine@1005 : Record 37;
    BEGIN
      // Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other.

      // Setup: Create Production Order and Post Output. Create and Ship Sales Order. Undo Sales Shipment.
      Initialize;
      CreateProductionOrderAndPostConsumptionOutput(ItemJournalLine,ItemJournalTemplate.Type::Output);
      CreateShipSalesOrderAndUndoShipment(SalesLine,ItemJournalLine."Item No.",LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');

      // Verify: Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each.
      VerifyItemLedgerEntry(SalesLine."No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoInvoicedSalesShipmentError@64();
    VAR
      Item@1000 : Record 27;
      ItemChargeAssignmentSales@1001 : Record 5809;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify error when undo Invoiced Sales Shipment.

      // Setup: Create and Invoice Sales Order.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::Order,CreateItem(Item."Replenishment System"::Purchase),LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostSalesDocument(SalesLine,TRUE);  // True for Invoice.
      LibraryVariableStorage.Enqueue(UndoShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Sales Shipment Line.
      ASSERTERROR UndoSalesShipment(SalesLine);

      // Verify: Verify error after undo Invoiced Sales Shipment.
      Assert.ExpectedError(STRSUBSTNO(UndoShipmentError,ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentWithInvoicedChargeAssignmentError@54();
    VAR
      Item@1003 : Record 27;
      ItemChargeAssignmentSales@1002 : Record 5809;
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      // Verify error when undo a Sales Shipment Line With Invoiced Charge Assignment.

      // Setup: Create and Ship Sales Order.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::Order,CreateItem(Item."Replenishment System"::Purchase),LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.

      // Create Sales Invoice for Charge Item and assign it to previous Posted Sales Shipment. Post Sales Invoice.
      FindShipmentLine(SalesShipmentLine,SalesLine,1);  // 1 is Sign Factor.
      SalesInvoiceItemChargeAssign(
        SalesHeader,SalesShipmentLine."Sell-to Customer No.",ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        SalesShipmentLine."Document No.",SalesShipmentLine."Line No.",SalesShipmentLine."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryVariableStorage.Enqueue(UndoShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Sales Shipment Line.
      ASSERTERROR UndoSalesShipment(SalesLine);

      // Verify: Verify error after undo Sales Shipment with Invoiced Charge Assignment.
      Assert.ExpectedError(STRSUBSTNO(InvoicedChargeItemError,SalesLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DeleteSalesOrderAfterUndo@91();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify deletion of Sales Order is allowed after undo because nothing has been posted.

      // Setup: Create and Ship Sales Order. Undo Sales Shipment and reopen the Sales Order.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesHeader."Document Type"::Order,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoShipmentMessage);  // Enqueue value for ConfirmHandler.
      UndoSalesShipment(SalesLine);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise: Delete Sales Order.
      SalesHeader.DELETE(TRUE);

      // Verify: Sales Order is deleted.
      Assert.IsFalse(SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No."),DeletionError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoSalesShipmentTrackedBySerialNumber@78();
    VAR
      SalesLine@1002 : Record 37;
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      // Verify Shipment Lines, Item Tracking Lines and Value Entries when undo a Sales Shipment Line Tracked by Serial Number.

      // Setup: Create and Receive Purchase Order with Serial Tracking. Create and Ship Sales Order with Serial Tracking.
      Initialize;
      PostPurchaseAndSalesOrderWithTracking(SalesLine);

      // Exercise: Undo Sales Shipment Line.
      UndoSalesShipment(SalesLine);

      // Verify: Verify Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,1,-1);  // 1 and -1 are Sign Factors.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,-1,-1);  // -1 is Sign Factor.
      SalesShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoSalesShipmentWithChargeAssignment@52();
    VAR
      ItemChargeAssignmentSales@1005 : Record 5809;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      // Verify Item Tracking Lines and Value Entries when undo a Sales Shipment Line Tracked by Serial Number With Charge Assignment.

      // Setup: Create and Receive Purchase Order with Serial Tracking. Create and Ship Sales Order with Serial Tracking. Create Sales Invoice for Charge Item and assign it to previous Posted Shipment.
      Initialize;
      PostPurchaseAndSalesOrderWithTracking(SalesLine);
      FindShipmentLine(SalesShipmentLine,SalesLine,1);  // 1 is for Sign Factor.
      SalesInvoiceItemChargeAssign(
        SalesHeader,SalesShipmentLine."Sell-to Customer No.",ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        SalesShipmentLine."Document No.",SalesShipmentLine."Line No.",SalesShipmentLine."No.");

      // Exercise: Undo Sales Shipment Line.
      UndoSalesShipment(SalesLine);

      // Verify: Verify Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,1,-1);  // 1 and -1 are Sign Factors.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,-1,-1);  // -1 is Sign Factor.
      SalesShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoMultipleLinesFromSalesShipment@92();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
      SalesShipmentLine@1003 : Record 111;
    BEGIN
      // Verify corrective Sales Shipment Lines when undo Multiple Lines from Sales Shipment.

      // Setup: Create and Ship Sales Order with multiple lines.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesHeader."Document Type"::Order,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine.Type::Item,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use random value for Quantity.
      PostSalesDocument(SalesLine2,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoShipmentMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo multiple Sales Shipment Lines.
      UndoMultipleShipmentLines(SalesLine,SalesLine2."No.");

      // Verify: Verify corrective Sales Shipment Lines.
      VerifyShipmentLine(SalesShipmentLine,SalesLine,-1);  // -1 is Quantity factor.
      VerifyShipmentLine(SalesShipmentLine,SalesLine2,-1);  // -1 is Quantity factor.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoSalesShipmentOfNegativeQuantity@90();
    VAR
      SalesLine@1004 : Record 37;
      SalesShipmentLine@1003 : Record 111;
      TempReservationEntry@1002 : TEMPORARY Record 337;
      TrackingOption@1000 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Sales Shipment Lines, Item Tracking Lines and Value Entries when undo a Sales Shipment Line with Negative Quantity Tracked by Serial Number.

      // Setup: Create and Ship Sales Order with Serial Tracking.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::Order,CreateTrackedItem(FALSE,'',LibraryUtility.GetGlobalNoSeriesCode),
        -LibraryRandom.RandInt(5));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      FindReservationEntry(TempReservationEntry,SalesLine."No.");
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoShipmentMessage,-1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Sales Shipment Line.
      UndoSalesShipment(SalesLine);

      // Verify: Verify Shipment Lines, Value Entry and Item Tracking Lines.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,1,1);  // 1 is Sign Factor.
      VerifyShipmentLineWithValueEntry(SalesShipmentLine,SalesLine,-1,1);  // 1 and -1 are Sign Factors.
      SalesShipmentLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoRetRcptTrackedBySN@107();
    VAR
      ReturnReceiptLine@1001 : Record 6661;
      SalesLine@1002 : Record 37;
      TempReservationEntry@1000 : TEMPORARY Record 337;
      DummyValue@1003 : Variant;
    BEGIN
      // Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line Tracked by Serial Number.

      // Setup: Create Serial Tracked Item. Create Sales Return Order and assign Serial No. Receive Sales Return Order.
      Initialize;
      CreateAndPostSalesReturnOrderWithTracking(TempReservationEntry,TRUE,1,'');  // 1 is for Sign factor.
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Return Receipt Line.
      UndoReturnReceipt(SalesLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,1,1);  // 1 is Sign Factor.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,-1,1);  // 1 and -1 are Sign Factors.
      ReturnReceiptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoInvdRetRcptError@106();
    VAR
      Item@1000 : Record 27;
      ItemChargeAssignmentSales@1001 : Record 5809;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify error when undo a Invoiced Return Receipt.

      // Setup: Create and Invoice Sales Return Order.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::"Return Order",CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use Random Quantity.
      PostSalesDocument(SalesLine,TRUE);  // True for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Return Receipt Line.
      ASSERTERROR UndoReturnReceipt(SalesLine);

      // Verify: Verify error after undo Invoiced Return Receipt.
      Assert.ExpectedError(STRSUBSTNO(UndoReceiptError,ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Receipt"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE UndoRetRcptWithAppliedQuantityError@105();
    VAR
      ItemLedgerEntry@1005 : Record 32;
      SalesLine@1003 : Record 37;
      SalesLine2@1004 : Record 37;
      TempReservationEntry@1000 : TEMPORARY Record 337;
      DummyValue@1006 : Variant;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify error when undo a Return Receipt Line with applied Quantity Tracked by Serial Number.

      // Setup: Create Serial Tracked Item. Create Sales Return Order and assign Serial No. Receive Sales Return Order.
      Initialize;
      CreateAndPostSalesReturnOrderWithTracking(TempReservationEntry,TRUE,1,'');  // 1 is for Sign factor.
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Sale,SalesLine."No.",0,TRUE);

      // Create Sales Order with Tracking. Ship and Invoice Sales Order.
      CreateSalesOrderWithTracking(
        SalesLine2,TempReservationEntry."Item No.",TempReservationEntry.Quantity,TrackingOption::SelectEntries);
      PostSalesDocument(SalesLine2,TRUE);  // True for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Return Receipt Line.
      ASSERTERROR UndoReturnReceipt(SalesLine);

      // Verify: Verify error after undo Receipt with applied Quantity.
      Assert.ExpectedError(STRSUBSTNO(AppliedQuantityUndoError,ItemLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoRetRcptWithChargeAssgntTrackedBySN@104();
    VAR
      ItemChargeAssignmentSales@1005 : Record 5809;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      ReturnReceiptLine@1000 : Record 6661;
      TempReservationEntry@1003 : TEMPORARY Record 337;
      DummyValue@1001 : Variant;
    BEGIN
      // Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line Tracked by Serial Number With Charge Assignment.

      // Setup: Create Serial Tracked Item. Create Sales Return Order and assign Serial No. Receive Sales Return Order.
      Initialize;
      CreateAndPostSalesReturnOrderWithTracking(TempReservationEntry,TRUE,1,'');  // 1 is for Sign factor.
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value.

      // Create Sales Invoice for Charge Item and assign it to previous Posted Receipt.
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine,1);  // 1 is for Sign Factor.
      SalesInvoiceItemChargeAssign(
        SalesHeader,ReturnReceiptLine."Sell-to Customer No.",ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Receipt",
        ReturnReceiptLine."Document No.",ReturnReceiptLine."Line No.",ReturnReceiptLine."No.");
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Return Receipt Line.
      UndoReturnReceipt(SalesLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,1,1);  // 1 is Sign Factor.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,-1,1);  // 1 and -1 are Sign Factors.
      ReturnReceiptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoRetRcptWithInvdChargeAssgntError@103();
    VAR
      Item@1003 : Record 27;
      ItemChargeAssignmentSales@1002 : Record 5809;
      ReturnReceiptLine@1000 : Record 6661;
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error when undo a Return Receipt Line With Invoiced Charge Assignment.

      // Setup: Create and Receive Sales Return Order.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::"Return Order",CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use Random Quantity.
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.

      // Create Sales Invoice for Charge Item and assign it to previous Posted Receipt. Post Sales Invoice.
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine,1);  // 1 is for Sign Factor.
      SalesInvoiceItemChargeAssign(
        SalesHeader,ReturnReceiptLine."Sell-to Customer No.",ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Receipt",
        ReturnReceiptLine."Document No.",ReturnReceiptLine."Line No.",ReturnReceiptLine."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Return Receipt Line.
      ASSERTERROR UndoReturnReceipt(SalesLine);

      // Verify: Verify error after undo Receipt Invoiced Charge Assignment.
      Assert.ExpectedError(STRSUBSTNO(InvoicedChargeItemError,SalesLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoMultipleLinesFromRetRcpt@102();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
      ReturnReceiptLine@1003 : Record 6661;
    BEGIN
      // Verify corrective Return Receipt Lines when undo Multiple Lines from Return Receipt.

      // Setup: Create and Receive Sales Return Order with multiple lines.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::"Return Order",CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use Random Quantity.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine.Type::Item,CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use Random Quantity.
      PostSalesDocument(SalesLine2,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.

      // Exercise: Undo Return Receipt Line.
      UndoMultipleReturnReceiptLines(SalesLine,SalesLine2."No.");

      // Verify: Verify corrective Receipt Lines.
      VerifyReturnReceiptLine(ReturnReceiptLine,SalesLine,-1);  // -1 is Quantity factor.
      VerifyReturnReceiptLine(ReturnReceiptLine,SalesLine2,-1);  // -1 is Quantity factor.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DeleteSalesRetOrdAfterUndo@101();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify deletion of Sales Return Order is allowed after undo because nothing has been posted.

      // Setup: Create and Receive Sales Return Order. Undo Return Receipt.
      Initialize;
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::"Return Order",CreateItem(Item."Replenishment System"::Purchase),
        LibraryRandom.RandInt(5));  // Use Random Quantity.
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.
      UndoReturnReceipt(SalesLine);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise: Delete Purchase Return Order.
      SalesHeader.DELETE(TRUE);

      // Verify: Purchase Return Order is deleted.
      Assert.IsFalse(SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No."),DeletionError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE UndoRetRcptWithNegQtyTrackedBySN@100();
    VAR
      ReturnReceiptLine@1003 : Record 6661;
      SalesLine@1002 : Record 37;
      TempReservationEntry@1000 : TEMPORARY Record 337;
    BEGIN
      // Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line with Negative Quantity Tracked by Serial Number.

      // Setup: Create Sales Return Order with negative quantity and Serial Tracking. Receive Sales Return Order.
      Initialize;
      CreateAndPostSalesReturnOrderWithTracking(TempReservationEntry,FALSE,-1,AvailabilityWarning);  // -1 is for Sign factor.
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReturnReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Return Receipt Line.
      UndoReturnReceipt(SalesLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,1,-1);  // 1 and -1 are Sign Factors.
      VerifyReturnReceiptLineWithValueEntry(ReturnReceiptLine,SalesLine,-1,-1);  // -1 is Sign Factor.
      ReturnReceiptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnSalesLineAfterUndo(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE TrackingForSalesOrdAfterUndoRetRcpt@99();
    VAR
      SalesLine@1003 : Record 37;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Serial numbers for the line in the undone Return Receipt are not available for Sales Order.

      // Setup: Create Sales Return Order and assign Serial No. Receive Sales Return Order. Undo Return Receipt.
      Initialize;
      PostSalesReturnOrderAndUndoReturnReceipt(SalesLine);

      // Exercise: Create Sales Order and select Serial No.
      CreateSalesOrderWithTracking(SalesLine,SalesLine."No.",SalesLine.Quantity,TrackingOption::VerifyEntries);

      // Verify: Verify Serial numbers on Sales Order. Verification done in ItemTrackingSummaryPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE TrackingForPurchRetOrdAfterUndoRetRcpt@98();
    VAR
      PurchaseLine@1004 : Record 39;
      SalesLine@1002 : Record 37;
      TrackingOption@1000 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verify Serial numbers for the line in the undone Return Receipt are not available for Purchase Return Order.

      // Setup: Create Sales Return Order and assign Serial No. Receive Sales Return Order. Undo Return Receipt.
      Initialize;
      PostSalesReturnOrderAndUndoReturnReceipt(SalesLine);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.

      // Exercise: Create Purchase Return Order.
      CreatePurchaseDocumentWithTracking(
        PurchaseLine,PurchaseLine."Document Type"::"Return Order",SalesLine."No.",TrackingOption::VerifyEntries,'',1);  // 1 is Sign Factor.

      // Verify: Verify Serial numbers on Purchase Return Order. Verification done in ItemTrackingSummaryPageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      InventorySetup@1000 : Record 313;
      LibraryERMCountryData@1003 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryInventory.NoSeriesSetup(InventorySetup);
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1003 : Code[20];BaseUnitOfMeasure@1000 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,1);  // Use 1 for Quantity Per.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@76(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];TemplateType@1000 : Option;EntryType@1004 : Option);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,TemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,
        LibraryRandom.RandDec(10,2));  // Use Random Quantity.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocumentWithTracking@46(VAR TempReservationEntry@1009 : TEMPORARY Record 337;DocumentType@1006 : Option;ItemNo@1005 : Code[20];ComfirmMessage@1007 : Text[1024];SignFactor@1008 : Integer);
    VAR
      PurchaseLine@1000 : Record 39;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      CreatePurchaseDocumentWithTracking(PurchaseLine,DocumentType,ItemNo,TrackingOption::AssignSerialNo,ComfirmMessage,SignFactor);
      FindReservationEntry(TempReservationEntry,PurchaseLine."No.");
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithApplFromItemEntry@71(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;No@1003 : Code[20];Quantity@1004 : Decimal;ApplyFromItemEntry@1005 : Integer;Invoice@1006 : Boolean);
    BEGIN
      CreateSalesDocument(SalesLine,DocumentType,No,Quantity);
      SalesLine.VALIDATE("Appl.-from Item Entry",ApplyFromItemEntry);
      SalesLine.MODIFY(TRUE);
      PostSalesDocument(SalesLine,Invoice);
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnOrderWithTracking@108(VAR TempReservationEntry@1002 : TEMPORARY Record 337;SNSpecific@1005 : Boolean;SignFactor@1003 : Integer;ConfirmMessage@1004 : Text[1024]);
    VAR
      SalesLine@1000 : Record 37;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      CreateSalesDocument(
        SalesLine,SalesLine."Document Type"::"Return Order",CreateTrackedItem(SNSpecific,'',LibraryUtility.GetGlobalNoSeriesCode),
        SignFactor * LibraryRandom.RandInt(5));  // Use Random Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      IF SNSpecific THEN
        LibraryVariableStorage.Enqueue(ConfirmMessage);
      SalesLine.OpenItemTrackingLines;
      FindReservationEntry(TempReservationEntry,SalesLine."No.");
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@49(VAR ProductionOrder@1002 : Record 5405;SourceNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateCustomer@13() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@95(ReplenishmentSystem@1002 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(10,2));  // Using Random value for Last Direct Cost.
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@28(SNSpecific@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,FALSE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithTracking@12(VAR PurchaseLine@1003 : Record 39;DocumentType@1000 : Option;ItemNo@1007 : Code[20];TrackingOption@1006 : Option;WarningsMessage@1002 : Text[1024];SignFactor@1001 : Integer);
    VAR
      Item@1004 : Record 27;
      ItemTrackingCode@1005 : Record 6502;
    BEGIN
      CreatePurchaseDocument(PurchaseLine,DocumentType,CreateVendor,ItemNo,SignFactor * LibraryRandom.RandInt(5));  // Use random value for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      Item.GET(ItemNo);
      ItemTrackingCode.GET(Item."Item Tracking Code");
      IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."Lot Specific Tracking" THEN
        LibraryVariableStorage.Enqueue(WarningsMessage);  // Enqueue value for ConfirmHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@41(VAR PurchaseLine@1005 : Record 39;PurchaseHeader@1000 : Record 38;Type@1003 : Option;No@1004 : Code[20];Quantity@1001 : Decimal;DirectUnitCost@1002 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@14(VAR PurchaseLine@1000 : Record 39;DocumentType@1003 : Option;VendorNo@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1001 : Integer);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesDocument@47(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;No@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,No,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithTracking@1(VAR SalesLine@1001 : Record 37;ItemNo@1000 : Code[20];Quantity@1002 : Integer;TrackingSummaryOption@1004 : Option);
    VAR
      TrackingOption@1003 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      CreateSalesDocument(SalesLine,SalesLine."Document Type"::Order,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(TrackingSummaryOption);  // Enqueue value for ItemTrackingSummaryPageHandler.
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateShipSalesOrderAndUndoShipment@68(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      CreateAndPostSalesDocWithApplFromItemEntry(SalesLine,SalesLine."Document Type"::Order,ItemNo,Quantity,0,FALSE);  // Use zero value for Entry No.
      LibraryVariableStorage.Enqueue(UndoShipmentMessage);  // Enqueue for Confirm Handler.
      UndoSalesShipment(SalesLine);
    END;

    LOCAL PROCEDURE CreateTrackedItem@32(SNSpecific@1003 : Boolean;LotNos@1001 : Code[10];SerialNos@1002 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,CreateItemTrackingCode(SNSpecific));
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateVendor@85() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE EnqueueValuesForPostedItemTrackingLines@20(VAR TempReservationEntry@1005 : TEMPORARY Record 337;Message@1004 : Text[1024];SignFactor@1006 : Integer);
    BEGIN
      LibraryVariableStorage.Enqueue(Message);  // Enqueue value for ConfirmHandler.
      TempReservationEntry.FINDSET;
      REPEAT
        LibraryVariableStorage.Enqueue(TempReservationEntry."Serial No.");
        LibraryVariableStorage.Enqueue(SignFactor * -TempReservationEntry.Quantity);
      UNTIL TempReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FilterForReceiptLine@55(VAR PurchRcptLine@1000 : Record 121;PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchaseLine."Document No.");
      PurchRcptLine.SETFILTER("No.",ItemFilter,PurchaseLine."No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterForReturnReceiptLine@115(VAR ReturnReceiptLine@1000 : Record 6661;SalesLine@1001 : Record 37;ItemNo@1002 : Code[20]);
    BEGIN
      ReturnReceiptLine.SETRANGE("Return Order No.",SalesLine."Document No.");
      ReturnReceiptLine.SETFILTER("No.",ItemFilter,SalesLine."No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterForReturnShipmentLine@56(VAR ReturnShipmentLine@1000 : Record 6651;PurchaseLine@1002 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      ReturnShipmentLine.SETRANGE("Return Order No.",PurchaseLine."Document No.");
      ReturnShipmentLine.SETFILTER("No.",ItemFilter,PurchaseLine."No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterForShipmentLine@88(VAR SalesShipmentLine@1000 : Record 111;SalesLine@1002 : Record 37;ItemNo@1001 : Code[20]);
    BEGIN
      SalesShipmentLine.SETRANGE("Order No.",SalesLine."Document No.");
      SalesShipmentLine.SETFILTER("No.",ItemFilter,SalesLine."No.",ItemNo);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@73(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1001 : Option;ItemNo@1002 : Code[20];SalesAmountActual@1004 : Decimal;Open@1003 : Boolean);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Sales Amount (Actual)",SalesAmountActual);
      ItemLedgerEntry.SETRANGE(Open,Open);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@42(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;No@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReceiptLine@31(VAR PurchRcptLine@1000 : Record 121;PurchaseLine@1001 : Record 39;QuantityFactor@1002 : Integer);
    BEGIN
      FilterForReceiptLine(PurchRcptLine,PurchaseLine,PurchaseLine."No.");
      PurchRcptLine.SETRANGE(Quantity,QuantityFactor * PurchaseLine.Quantity);
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReturnReceiptLine@114(VAR ReturnReceiptLine@1000 : Record 6661;SalesLine@1001 : Record 37;QuantityFactor@1002 : Integer);
    BEGIN
      FilterForReturnReceiptLine(ReturnReceiptLine,SalesLine,SalesLine."No.");
      ReturnReceiptLine.SETRANGE(Quantity,QuantityFactor * SalesLine.Quantity);
      ReturnReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReturnShipmentLine@11(VAR ReturnShipmentLine@1000 : Record 6651;PurchaseLine@1002 : Record 39;QuantityFactor@1001 : Integer);
    BEGIN
      FilterForReturnShipmentLine(ReturnShipmentLine,PurchaseLine,PurchaseLine."No.");
      ReturnShipmentLine.SETRANGE(Quantity,QuantityFactor * PurchaseLine.Quantity);
      ReturnShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReservationEntry@130(VAR TempReservationEntry@1000 : TEMPORARY Record 337;ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        TempReservationEntry := ReservationEntry;
        TempReservationEntry.INSERT;
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindSalesLine@109(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;No@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindShipmentLine@75(VAR SalesShipmentLine@1000 : Record 111;SalesLine@1001 : Record 37;SignFactor@1002 : Integer);
    BEGIN
      FilterForShipmentLine(SalesShipmentLine,SalesLine,SalesLine."No.");
      SalesShipmentLine.SETRANGE(Quantity,SignFactor * SalesLine.Quantity);
      SalesShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindValueEntry@40(VAR ValueEntry@1000 : Record 5802;ItemNo@1003 : Code[20];DocumentType@1001 : Option;DocumentLineNo@1002 : Integer);
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Document Line No.",DocumentLineNo);
    END;

    LOCAL PROCEDURE PostPurchaseDocument@23(PurchaseLine@1000 : Record 39;Invoice@1002 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE PostPurchaseOrderAndVerifyUndoReceipt@69(PurchaseLine@1000 : Record 39);
    VAR
      PurchRcptLine@1004 : Record 121;
      TempReservationEntry@1005 : TEMPORARY Record 337;
    BEGIN
      FindReservationEntry(TempReservationEntry,PurchaseLine."No.");
      PostPurchaseDocument(PurchaseLine,FALSE);  // False for Invoice.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoReceiptMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.

      // Exercise: Undo Purchase Receipt Line.
      UndoPurchaseReceipt(PurchaseLine);

      // Verify: Verify Receipt Lines, Value Entry and Item Tracking Lines.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,1,1,TempReservationEntry.COUNT);  // 1 is Sign Factor.
      VerifyReceiptLineWithValueEntry(PurchRcptLine,PurchaseLine,-1,1,TempReservationEntry.COUNT);   // 1 and -1 are Sign Factors.
      PurchRcptLine.ShowItemTrackingLines;  // Verify Tracking Lines in PostedItemTrackingLinesHandler.
      VerifyTrackingOnPurchaseLineAfterUndo(PurchaseLine,TempReservationEntry.COUNT);
    END;

    LOCAL PROCEDURE PostSalesDocument@72(SalesLine@1000 : Record 37;Invoice@1002 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE PostSalesReturnOrderAndUndoReturnReceipt@53(VAR SalesLine@1000 : Record 37);
    VAR
      TempReservationEntry@1002 : TEMPORARY Record 337;
      DummyValue@1001 : Variant;
    BEGIN
      CreateAndPostSalesReturnOrderWithTracking(TempReservationEntry,TRUE,1,'');
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value.
      LibraryVariableStorage.Enqueue(UndoReturnReceiptMessage);  // Enqueue value for ConfirmHandler.
      UndoReturnReceipt(SalesLine);
    END;

    LOCAL PROCEDURE PurchaseInvoiceItemChargeAssign@45(VAR PurchaseHeader@1002 : Record 38;VendorNo@1003 : Code[20];AppliesToDocType@1004 : Option;DocumentNo@1006 : Code[20];LineNo@1008 : Integer;No@1007 : Code[20]);
    VAR
      ItemChargeAssignmentPurch@1000 : Record 5805;
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,
        LibraryRandom.RandInt(5),LibraryRandom.RandDec(10,2));  // Use Random value for Direct Unit Cost and Quantity.
      LibraryInventory.CreateItemChargeAssignPurchase(ItemChargeAssignmentPurch,PurchaseLine,AppliesToDocType,DocumentNo,LineNo,No);
    END;

    LOCAL PROCEDURE PostPurchaseAndSalesOrderWithTracking@94(VAR SalesLine@1000 : Record 37);
    VAR
      PurchaseLine@1005 : Record 39;
      TempReservationEntry@1003 : TEMPORARY Record 337;
      DummyValue@1002 : Variant;
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      CreateAndPostPurchaseDocumentWithTracking(
        TempReservationEntry,PurchaseLine."Document Type"::Order,CreateTrackedItem(TRUE,'',LibraryUtility.GetGlobalNoSeriesCode),'',1);  // 1 is Sign Factor.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order,TempReservationEntry."Item No.");
      LibraryVariableStorage.Dequeue(DummyValue);  // Dequeue dummy value to balance blank Enqueued value.
      CreateSalesOrderWithTracking(SalesLine,PurchaseLine."No.",PurchaseLine.Quantity,TrackingOption::SelectEntries);
      PostSalesDocument(SalesLine,FALSE);  // False for Invoice.
      EnqueueValuesForPostedItemTrackingLines(TempReservationEntry,UndoShipmentMessage,1);  // Enqueue value for PostedItemTrackingLinesHandler.
    END;

    LOCAL PROCEDURE SalesInvoiceItemChargeAssign@84(VAR SalesHeader@1002 : Record 36;CustomerNo@1003 : Code[20];AppliesToDocType@1004 : Option;DocumentNo@1006 : Code[20];LineNo@1008 : Integer;No@1007 : Code[20]);
    VAR
      ItemChargeAssignmentSales@1000 : Record 5809;
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,
        LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Use Random value for Unit Price.
      SalesLine.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignment(ItemChargeAssignmentSales,SalesLine,AppliesToDocType,DocumentNo,LineNo,No);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@79(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoMultiplePurchaseReceiptLines@51(PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      FilterForReceiptLine(PurchRcptLine,PurchaseLine,ItemNo);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoMultipleReturnReceiptLines@111(SalesLine@1000 : Record 37;ItemNo@1002 : Code[20]);
    VAR
      ReturnReceiptLine@1001 : Record 6661;
    BEGIN
      FilterForReturnReceiptLine(ReturnReceiptLine,SalesLine,ItemNo);
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE UndoMultipleReturnShipmentLines@50(PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20]);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
    BEGIN
      FilterForReturnShipmentLine(ReturnShipmentLine,PurchaseLine,ItemNo);
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UndoMultipleShipmentLines@87(SalesLine@1000 : Record 37;ItemNo@1002 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      FilterForShipmentLine(SalesShipmentLine,SalesLine,ItemNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UndoPurchaseReceipt@5(PurchaseLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      FindReceiptLine(PurchRcptLine,PurchaseLine,1);  // 1 is Sign Factor.
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnReceipt@110(SalesLine@1000 : Record 37);
    VAR
      ReturnReceiptLine@1002 : Record 6661;
    BEGIN
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine,1);  // 1 is Sign Factor.
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE UndoReturnShipment@26(PurchaseLine@1000 : Record 39);
    VAR
      ReturnShipmentLine@1002 : Record 6651;
    BEGIN
      FindReturnShipmentLine(ReturnShipmentLine,PurchaseLine,1);  // 1 is Sign Factor.
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UndoSalesShipment@74(SalesLine@1000 : Record 37);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      FindShipmentLine(SalesShipmentLine,SalesLine,1);  // 1 is Sign Factor.
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE CreateProductionOrderAndPostConsumptionOutput@48(VAR ItemJournalLine@1001 : Record 83;TemplateType@1008 : Option);
    VAR
      Item@1000 : Record 27;
      ItemJournalTemplate@1004 : Record 82;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionOrder@1003 : Record 5405;
    BEGIN
      // Create Item and Post Item Journal Line.
      CreateAndPostItemJournalLine(
        ItemJournalLine,CreateItem(Item."Replenishment System"::Purchase),ItemJournalTemplate.Type::Item,
        ItemJournalLine."Entry Type"::"Positive Adjmt.");

      // Create Production BOM and update Production Item.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ItemJournalLine."Item No.",ItemJournalLine."Unit of Measure Code");
      Item.GET(CreateItem(Item."Replenishment System"::"Prod. Order"));
      UpdateProductionBOMOnItem(Item,ProductionBOMHeader."No.");

      // Create Production Order and Post Item Journal for Consumption/Output.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ItemJournalLine.Quantity);
      CreateAndPostItemJournalLine(ItemJournalLine,Item."No.",TemplateType,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@70(ItemNo@1000 : Code[20];Open@1003 : Boolean);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      ItemLedgerEntry2@1001 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Sale,ItemNo,0,Open);  // 0 for Sales Amount (Actual).
      FindItemLedgerEntry(ItemLedgerEntry2,ItemLedgerEntry."Entry Type"::Sale,ItemNo,0,TRUE);  // 0 for Sales Amount (Actual).
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",-ItemLedgerEntry2."Cost Amount (Actual)");
    END;

    LOCAL PROCEDURE VerifyReceiptLine@43(VAR PurchRcptLine@1001 : Record 121;PurchaseLine@1000 : Record 39;QuantitySignFactor@1004 : Integer);
    BEGIN
      FindReceiptLine(PurchRcptLine,PurchaseLine,QuantitySignFactor);
      PurchRcptLine.TESTFIELD(Correction,TRUE);
    END;

    LOCAL PROCEDURE VerifyReturnReceiptLine@116(VAR ReturnReceiptLine@1001 : Record 6661;SalesLine@1000 : Record 37;QuantitySignFactor@1004 : Integer);
    BEGIN
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine,QuantitySignFactor);
      ReturnReceiptLine.TESTFIELD(Correction,TRUE);
    END;

    LOCAL PROCEDURE VerifyReturnShipmentLine@29(VAR ReturnShipmentLine@1001 : Record 6651;PurchaseLine@1000 : Record 39;QuantitySignFactor@1004 : Integer);
    BEGIN
      FindReturnShipmentLine(ReturnShipmentLine,PurchaseLine,QuantitySignFactor);
      ReturnShipmentLine.TESTFIELD(Correction,TRUE);
    END;

    LOCAL PROCEDURE VerifyReceiptLineWithValueEntry@6(VAR PurchRcptLine@1001 : Record 121;PurchaseLine@1000 : Record 39;QuantitySignFactor@1004 : Integer;ValueQuantitySignFactor@1002 : Integer;Count@1003 : Integer);
    VAR
      ValueEntry@1005 : Record 5802;
    BEGIN
      VerifyReceiptLine(PurchRcptLine,PurchaseLine,QuantitySignFactor);
      VerifyValueEntry(
        ValueEntry."Document Type"::"Purchase Receipt",PurchRcptLine."No.",PurchRcptLine."Line No.",
        ValueQuantitySignFactor * PurchRcptLine.Quantity / Count);
    END;

    LOCAL PROCEDURE VerifyReturnReceiptLineWithValueEntry@113(VAR ReturnReceiptLine@1001 : Record 6661;SalesLine@1000 : Record 37;QuantitySignFactor@1004 : Integer;ValueQuantitySignFactor@1002 : Integer);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      VerifyReturnReceiptLine(ReturnReceiptLine,SalesLine,QuantitySignFactor);
      VerifyValueEntry(
        ValueEntry."Document Type"::"Sales Return Receipt",ReturnReceiptLine."No.",ReturnReceiptLine."Line No.",
        ValueQuantitySignFactor * ReturnReceiptLine.Quantity / SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyReturnShipmentLineWithValueEntry@38(VAR ReturnShipmentLine@1001 : Record 6651;PurchaseLine@1000 : Record 39;QuantitySignFactor@1004 : Integer;ValueQuantitySignFactor@1002 : Integer;Count@1003 : Integer);
    VAR
      ValueEntry@1005 : Record 5802;
    BEGIN
      VerifyReturnShipmentLine(ReturnShipmentLine,PurchaseLine,QuantitySignFactor);
      VerifyValueEntry(
        ValueEntry."Document Type"::"Purchase Return Shipment",ReturnShipmentLine."No.",ReturnShipmentLine."Line No.",
        ValueQuantitySignFactor * ReturnShipmentLine.Quantity / Count);
    END;

    LOCAL PROCEDURE VerifyShipmentLine@83(VAR SalesShipmentLine@1001 : Record 111;SalesLine@1000 : Record 37;QuantitySignFactor@1004 : Integer);
    BEGIN
      FindShipmentLine(SalesShipmentLine,SalesLine,QuantitySignFactor);
      SalesShipmentLine.TESTFIELD(Correction,TRUE);
    END;

    LOCAL PROCEDURE VerifyShipmentLineWithValueEntry@81(VAR SalesShipmentLine@1005 : Record 111;SalesLine@1000 : Record 37;QuantitySignFactor@1004 : Integer;ValueQuantitySignFactor@1002 : Integer);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      VerifyShipmentLine(SalesShipmentLine,SalesLine,QuantitySignFactor);
      VerifyValueEntry(
        ValueEntry."Document Type"::"Sales Shipment",SalesShipmentLine."No.",SalesShipmentLine."Line No.",
        ValueQuantitySignFactor * SalesShipmentLine.Quantity / SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyTrackingOnPurchaseLineAfterUndo@33(PurchaseLine@1000 : Record 39;Count@1002 : Integer);
    VAR
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verification done in ItemTrackingLinesPageHandler. Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryVariableStorage.Enqueue(TrackingOption::ShowEntries);
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
      LibraryVariableStorage.Enqueue(Count);
      LibraryVariableStorage.Enqueue(AvailabilityWarning);
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyTrackingOnSalesLineAfterUndo@80(SalesLine@1000 : Record 37);
    VAR
      TrackingOption@1001 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
    BEGIN
      // Verification done in ItemTrackingLinesPageHandler. Enqueue values for ItemTrackingLinesPageHandler.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      LibraryVariableStorage.Enqueue(TrackingOption::ShowEntries);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      LibraryVariableStorage.Enqueue(AvailabilityWarning);
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyValueEntry@30(DocumentType@1003 : Option;ItemNo@1004 : Code[20];DocumentLineNo@1001 : Integer;ValuedQuantity@1002 : Decimal);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      FindValueEntry(ValueEntry,ItemNo,DocumentType,DocumentLineNo);
      ValueEntry.FINDSET;
      REPEAT
        ValueEntry.TESTFIELD("Valued Quantity",ValuedQuantity);
      UNTIL ValueEntry.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@19(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@18(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Iteration@1005 : Variant;
      OptionValue@1001 : Variant;
      Quantity@1007 : Variant;
      Count@1006 : Integer;
      IterationCount@1004 : Integer;
      OptionString@1003 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
      QuantityToHandle@1008 : Integer;
      TrackingOption@1002 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        OptionString::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        OptionString::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        OptionString::ShowEntries:
          BEGIN
            LibraryVariableStorage.Dequeue(Quantity);  // Dequeue variable.
            QuantityToHandle := Quantity;  // To convert Variant into Integer.
            LibraryVariableStorage.Dequeue(Iteration);  // Dequeue variable.
            IterationCount := Iteration;  // To convert Variant into Integer.
            ItemTrackingLines.FIRST;
            FOR Count := 1 TO IterationCount DO BEGIN
              ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(QuantityToHandle / IterationCount);
              ItemTrackingLines.NEXT;
            END;
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@17(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      OptionValue@1003 : Variant;
      OptionString@1002 : 'AssignLotNo,AssignSerialNo,SelectEntries,ShowEntries,VerifyEntries';
      TrackingOption@1001 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::VerifyEntries:
          ItemTrackingSummary."Serial No.".ASSERTEQUALS('');  // Blank Serial No. as no Item Tracking Lines found.
        OptionString::SelectEntries:
          ItemTrackingSummary.OK.INVOKE;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesHandler@16(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      Quantity@1005 : Variant;
      TrackingCode@1004 : Variant;
    BEGIN
      PostedItemTrackingLines.FIRST;
      REPEAT
        LibraryVariableStorage.Dequeue(TrackingCode);  // Dequeue variable.
        LibraryVariableStorage.Dequeue(Quantity);  // Dequeue variable.
        PostedItemTrackingLines."Serial No.".ASSERTEQUALS(TrackingCode);
        PostedItemTrackingLines.Quantity.ASSERTEQUALS(Quantity);
      UNTIL NOT PostedItemTrackingLines.NEXT;
      PostedItemTrackingLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Undo] [SCM]
      Test for Undo functionality on Purchase Receipt, Return Shipment, Sales Shipment and Return Receipt:
       1. Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line Tracked by Serial Number.
       2. Verify error when undo a Invoiced Purchase Receipt.
       3. Verify error when undo a Purchase Receipt Line with applied Quantity Tracked by Serial Number.
       4. Verify Item Tracking Lines and Value Entries when undo a Purchase Receipt Line With Charge Assignment.
       5. Verify error when undo a Purchase Receipt Line With Invoiced Charge Assignment.
       6. Verify Serial numbers for the line in the undone Purchase Receipt are not available for Sales Order.
       7. Verify Serial numbers for the line in the undone Purchase Receipt are not available for Purchase Return Order.
       8. Verify corrective Receipt Lines when undo Multiple Lines from Purchase Receipt.
       9. Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line with Negative Quantity Tracked by Serial Number.
      10. Verify Receipt Lines, Item Tracking Lines and Value Entries when undo a Purchase Receipt Line Tracked by Lot Number.
      11. Verify Return Shipment Lines, Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line Tracked by Serial Number.
      12. Verify error when undo a Invoiced Purchase Return Shipment.
      13. Verify Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line With Charge Assignment.
      14. Verify error when undo a Purchase Return Shipment Line With Invoiced Charge Assignment.
      15. Verify corrective Return Shipment Lines when undo Multiple Lines from Return Shipment.
      16. Verify deletion of Purchase Return Order is allowed after undo because nothing has been posted.
      17. Verify Return Shipment Lines, Item Tracking Lines and Value Entries when undo a Purchase Return Shipment Line with Negative Quantity Tracked by Serial Number.
      18. Verify Cost Amount (actual) of the Undone and the corrected Item Ledger Entry, should balance each other after posting various types of documents.
      19. Verify error when undo a Invoiced Sales Shipment.
      20. Verify error when undo a Sales Shipment Line With Invoiced Charge Assignment.
      21. Verify deletion of Sales Order after undo is allowed because nothing has been posted.
      22. Verify Shipment Lines, Item Tracking Lines and Value Entries when undo a Sales Shipment Line Tracked by Serial Number.
      23. Verify Item Tracking Lines and Value Entries when undo a Sales Shipment Line Tracked by Serial Number With Charge Assignment.
      24. Verify corrective Sales Shipment Lines when undo Multiple Lines from Sales Shipment.
      25. Verify Sales Shipment Lines, Item Tracking Lines and Value Entries when undo a Sales Shipment Line with Negative Quantity Tracked by Serial Number.
      26. Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line Tracked by Serial Number.
      27. Verify error when undo a Invoiced Return Receipt.
      28. Verify error when undo a Return Receipt Line with applied Quantity Tracked by Serial Number.
      29. Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line Tracked by Serial Number With Charge Assignment.
      30. Verify error when undo a Return Receipt Line With Invoiced Charge Assignment.
      31. Verify corrective Return Receipt Lines when undo Multiple Lines from Return Receipt.
      32. Verify deletion of Sales Return Order is allowed after undo because nothing has been posted.
      33. Verify Return Receipt Lines, Item Tracking Lines and Value Entries when undo a Return Receipt Line with Negative Quantity Tracked by Serial Number.
      34. Verify Serial numbers for the line in the undone Return Receipt are not available for Sales Order.
      35. Verify Serial numbers for the line in the undone Return Receipt are not available for Purchase Return Order.

      TFS_TS_ID = 295169
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      UndoPurchaseReceiptTrackedBySerialNumber, UndoPurchaseInvoicedReceipt, UndoPurchaseReceiptWithAppliedQuantity,
      UndoPurchaseReceiptWithChargeAssignment, UndoPurchaseReceiptWithInvoicedChargeAssignment, CorrectionLinesUnavailableForSalesOrder
      CorrectionLinesUnavailableForPurchaseReturnOrder, UndoMultipleLinesFromPurchaseReceipt, UndoNegativePurchaseReceiptTrackedBySerialNumber
      UndoPurchaseReceiptTrackedByLotNumber                                                                                                         128290

      TFS_TS_ID = 298786
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      UndoReturnShipmentTrackedBySerialNumber, UndoInvoicedReturnShipmentError, UndoReturnShipmentWithChargeAssignment,
      UndoReturnShipmentWithInvoicedChargeAssignmentError, UndoMultipleLinesFromReturnShipment, DeletePurchaseReturnOrderAfterUndo
      UndoReturnShipmentOfNegativeQuantity                                                                                                          128290

      TFS_TS_ID = 298790
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      UndoShptAfterRcdPurchOrd, UndoShptAfterInvdPurchOrd, UndoShptAfterRcdPurchOrdWithSalesDocuments, UndoShptAfterInvdPurchOrdWithSalesDocuments,
      UndoShptAfterMultiplePurchaseSaleUndo, UndoShptAfterUndoShptPstdSalesOrd, UndoShptAfterPostingConsumption, UndoShptAfterPostingOutput         128291

      TFS_TS_ID = 301076
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      UndoInvoicedSalesShipmentError, UndoSalesShipmentWithInvoicedChargeAssignmentError, DeleteSalesOrderAfterUndo, UndoSalesShptTrackedBySN,
      UndoSalesShptWithChargeAssigntTrackedBySN, UndoMultipleLinesFromSalesShpt, UndoSalesShptWithNegQtyTrackedBySN                                 128290

      TFS_TS_ID = 301700
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      UndoRetRcptTrackedBySN, UndoInvdRetRcptError, UndoRetRcptWithAppliedQuantityError, UndoRetRcptWithChargeAssgntTrackedBySN,
      UndoRetRcptWithInvdChargeAssgntError, UndoMultipleLinesFromRetRcpt, DeleteSalesRetOrdAfterUndo,
      UndoRetRcptWithNegQtyTrackedBySN, TrackingForSalesOrdAfterUndoRetRcpt, TrackingForPurchRetOrdAfterUndoRetRcpt                                 128290
    }
    END.
  }
}

