OBJECT Codeunit 137200 SCM Inventory Movement Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1007 : Codeunit 130502;
      LibraryManufacturing@1001 : Codeunit 132202;
      LibraryPurchase@1099 : Codeunit 130512;
      LibraryWarehouse@1002 : Codeunit 132204;
      IsInitialized@1000 : Boolean;

    LOCAL PROCEDURE Initialize@25();
    VAR
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest1@1();
    VAR
      Location@1003 : Record 14;
      Bin@1002 : Record 7354;
      ItemFinal@1001 : Record 27;
      ItemComp1@1004 : Record 27;
      ItemComp2@1005 : Record 27;
      WorkCenter1@1000 : Record 99000754;
      WorkCenter2@1006 : Record 99000754;
      RoutingHeader@1008 : Record 99000763;
      ProductionOrder@1009 : Record 5405;
    BEGIN
      // items have Flushing Method = Manual
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Manual,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Post output
      PostOutput(ProductionOrder);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post consumption
      PostConsumption(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest2@16();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Forward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Forward,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post output
      ASSERTERROR PostOutput(ProductionOrder);
      IF STRPOS(GETLASTERRORTEXT,'The Bin Content does not exist.') = 0 THEN
        Assert.Fail(STRSUBSTNO('%1',GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest3@19();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Forward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Forward,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement - no one should be created
      CreateAndRegisterInvtMovement(ProductionOrder);

      // set bins with content in prod. order components
      SetBinsWithContent(ProductionOrder,Location.Code);

      // Post output
      PostOutput(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest4@17();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Backward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Backward,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post output
      ASSERTERROR PostOutput(ProductionOrder);
      IF STRPOS(GETLASTERRORTEXT,'The Bin Content does not exist.') = 0 THEN
        Assert.Fail(STRSUBSTNO('%1',GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest5@20();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Backward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Backward,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement - no one should be created
      CreateAndRegisterInvtMovement(ProductionOrder);

      // set bins with content in prod. order components
      SetBinsWithContent(ProductionOrder,Location.Code);

      // Post output
      PostOutput(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest6@18();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Pick + Forward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::"Pick + Forward",
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post output
      PostOutput(ProductionOrder);

      // Post consumption
      PostConsumption(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest7@22();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Pick + Backward
      // no item tracking is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::"Pick + Backward",
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      // purchase components
      PurchaseComponentToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post output
      PostOutput(ProductionOrder);

      // Post consumption
      PostConsumption(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PurchaseHandler)]
    PROCEDURE InventoryMovementTest10@24();
    VAR
      Location@1008 : Record 14;
      Bin@1007 : Record 7354;
      ItemFinal@1006 : Record 27;
      ItemComp1@1005 : Record 27;
      ItemComp2@1004 : Record 27;
      WorkCenter1@1003 : Record 99000754;
      WorkCenter2@1002 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // items have Flushing Method = Manual
      // Serial Number is set

      Initialize;

      // creating location with bins
      CreateLocationWithBins(Location,Bin);

      // creating two workcenters and routing which has 2 operations including Routing Link Code
      CreateRoutingWithWC(WorkCenter1,WorkCenter2,RoutingHeader);

      // creating items - one final and two components, each is linked to one operation via Routing Link Code
      CreateAllItemsWithBOM(
        ItemFinal,ItemComp1,ItemComp2,
        ItemComp1."Flushing Method"::Manual,
        COPYSTR(WorkCenter1."No.",1,10),
        COPYSTR(WorkCenter2."No.",1,10),
        RoutingHeader."No.");

      SetItemTracking(ItemComp1);

      // purchase components
      PurchaseComponentWithITToWMS(ItemComp1,ItemComp2,Location);

      // create production order
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.FINDLAST;
      PrepareReleasedProdOrder(ProductionOrder,ItemFinal,Location.Code,Bin.Code);
      AddSerialNumberToComponent(ProductionOrder);
      // Post output
      PostOutput(ProductionOrder);

      // Create and register Inventory Movement
      CreateAndRegisterInvtMovement(ProductionOrder);

      // Post consumption
      PostConsumption(ProductionOrder);

      // verify results
      VerifyConsumption(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateLocationWithBins@2(VAR Location@1003 : Record 14;VAR Bin@1004 : Record 7354);
    VAR
      i@1000 : Integer;
      j@1001 : Integer;
      BinName@1002 : Code[20];
    BEGIN
      // creating location
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,FALSE,FALSE);

      // creating 9 bins
      FOR i := 1 TO 3 DO
        FOR j := 1 TO 3 DO BEGIN
          BinName := 'B0' + FORMAT(i) + '-00' + FORMAT(j);
          LibraryWarehouse.CreateBin(Bin,Location.Code,BinName,'','');
        END;
    END;

    LOCAL PROCEDURE CreateFinalItem@4(VAR ItemRec@1002 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(ItemRec);
      ItemRec.VALIDATE("Replenishment System",ItemRec."Replenishment System"::"Prod. Order");
      ItemRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCompItem@3(VAR ItemRec@1000 : Record 27;FlushingType@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(ItemRec);
      ItemRec.VALIDATE("Flushing Method",FlushingType);
      ItemRec.VALIDATE("Replenishment System",ItemRec."Replenishment System"::Purchase);
      ItemRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetItemTracking@31(VAR ItemRec@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      ItemRec.GET(ItemRec."No.");
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      ItemRec.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      ItemRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOM@5(VAR ProdBOMHeaderRec@1004 : Record 99000771;UnitofMeasure@1005 : Code[10];ItemComp1Rec@1006 : Record 27;ItemComp2Rec@1007 : Record 27;RoutingLinkCode1@1000 : Code[10];RoutingLinkCode2@1002 : Code[10]);
    VAR
      ProdBOMLineRec@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProdBOMHeaderRec,UnitofMeasure);

      LibraryManufacturing.CreateProductionBOMLine(ProdBOMHeaderRec,ProdBOMLineRec,'',ProdBOMLineRec.Type::Item,ItemComp1Rec."No.",1);
      ProdBOMLineRec.VALIDATE("Routing Link Code",RoutingLinkCode1);
      ProdBOMLineRec.MODIFY(TRUE);

      LibraryManufacturing.CreateProductionBOMLine(ProdBOMHeaderRec,ProdBOMLineRec,'',ProdBOMLineRec.Type::Item,ItemComp2Rec."No.",1);
      ProdBOMLineRec.VALIDATE("Routing Link Code",RoutingLinkCode2);
      ProdBOMLineRec.MODIFY(TRUE);

      ProdBOMHeaderRec.VALIDATE(Status,ProdBOMHeaderRec.Status::Certified);
      ProdBOMHeaderRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@8(VAR WorkCenterRec@1001 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenterRec);
      WorkCenterRec.VALIDATE(Capacity,1);
      WorkCenterRec.VALIDATE(Efficiency,100);
      WorkCenterRec.MODIFY(TRUE);

      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenterRec,CALCDATE('<CY-3M>',WORKDATE),CALCDATE('<CM+1Y>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateRouting@9(VAR RoutingHeaderRec@1004 : Record 99000763;WorkCenterRec1@1005 : Record 99000754;WorkCenterRec2@1006 : Record 99000754);
    VAR
      RoutingLineRec@1001 : Record 99000764;
      RoutingLinkRec@1003 : Record 99000777;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeaderRec,RoutingHeaderRec.Type::Serial);

      RoutingLinkRec.INIT;
      RoutingLinkRec.VALIDATE(Code,COPYSTR(WorkCenterRec1."No.",1,10));
      RoutingLinkRec.INSERT(TRUE);

      // the first operation
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeaderRec,RoutingLineRec,'','10',
        RoutingLineRec.Type::"Work Center",WorkCenterRec1."No.");

      RoutingLineRec.VALIDATE("Setup Time",1);
      RoutingLineRec.VALIDATE("Run Time",1);
      RoutingLineRec.VALIDATE("Routing Link Code",RoutingLinkRec.Code);
      RoutingLineRec.MODIFY(TRUE);

      RoutingLinkRec.VALIDATE(Code,COPYSTR(WorkCenterRec2."No.",1,10));
      RoutingLinkRec.INSERT(TRUE);

      // the second operation
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeaderRec,RoutingLineRec,'','20',
        RoutingLineRec.Type::"Work Center",WorkCenterRec2."No.");

      RoutingLineRec.VALIDATE("Setup Time",1);
      RoutingLineRec.VALIDATE("Run Time",1);
      RoutingLineRec.VALIDATE("Routing Link Code",RoutingLinkRec.Code);
      RoutingLineRec.MODIFY(TRUE);

      RoutingHeaderRec.VALIDATE(Status,RoutingHeaderRec.Status::Certified);
      RoutingHeaderRec.MODIFY(TRUE);
    END;

    [HandlerFunctions(PurchaseHandler)]
    LOCAL PROCEDURE PurchaseComponentToWMS@7(ItemRecComp1@1000 : Record 27;ItemRecComp2@1001 : Record 27;LocationRec@1002 : Record 14);
    VAR
      BinRec@1003 : Record 7354;
      PurchaseHeaderRec@1004 : Record 38;
      PurchaseLineRec@1005 : Record 39;
      WarehouseActivityHeaderRec@1007 : Record 5766;
    BEGIN
      BinRec.SETRANGE("Location Code",LocationRec.Code);
      BinRec.FINDFIRST;

      // creating purchase order with 2 lines
      LibraryPurchase.CreatePurchHeader(PurchaseHeaderRec,PurchaseHeaderRec."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp1."No.",11);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",11);
      PurchaseLineRec.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp2."No.",13);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",13);
      PurchaseLineRec.MODIFY(TRUE);

      // creating inventory put-away
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeaderRec);
      LibraryWarehouse.CreateInvtPutPickPurchaseOrder(PurchaseHeaderRec);

      // posting inventory put-away
      WarehouseActivityHeaderRec.SETRANGE("Location Code",LocationRec.Code);
      WarehouseActivityHeaderRec.FINDFIRST;
      WarehouseActivityHeaderRec.VALIDATE("External Document No.2",PurchaseHeaderRec."No.");
      WarehouseActivityHeaderRec.MODIFY(TRUE);

      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeaderRec);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeaderRec,TRUE);
    END;

    [HandlerFunctions(PurchaseHandler)]
    LOCAL PROCEDURE PurchaseComponentWithITToWMS@27(ItemRecComp1@1000 : Record 27;ItemRecComp2@1001 : Record 27;LocationRec@1002 : Record 14);
    VAR
      BinRec@1003 : Record 7354;
      PurchaseHeaderRec@1004 : Record 38;
      PurchaseLineRec@1005 : Record 39;
      VendorRec@1006 : Record 23;
      WarehouseActivityHeaderRec@1007 : Record 5766;
    BEGIN
      LibraryPurchase.CreateVendor(VendorRec);
      BinRec.SETRANGE("Location Code",LocationRec.Code);
      BinRec.FIND('-');

      // creating purchase order with 4 lines
      LibraryPurchase.CreatePurchHeader(PurchaseHeaderRec,PurchaseHeaderRec."Document Type"::Order,VendorRec."No.");

      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp1."No.",2);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",11);
      PurchaseLineRec.MODIFY(TRUE);
      AddSerialNumberToPurchase(PurchaseLineRec,10);

      BinRec.NEXT;
      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp1."No.",3);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",11);
      PurchaseLineRec.MODIFY(TRUE);
      AddSerialNumberToPurchase(PurchaseLineRec,20);

      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp2."No.",3);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",13);
      PurchaseLineRec.MODIFY(TRUE);

      BinRec.NEXT;
      LibraryPurchase.CreatePurchaseLine(PurchaseLineRec,PurchaseHeaderRec,PurchaseLineRec.Type::Item,ItemRecComp2."No.",5);
      PurchaseLineRec.VALIDATE("Location Code",LocationRec.Code);
      PurchaseLineRec.VALIDATE("Bin Code",BinRec.Code);
      PurchaseLineRec.VALIDATE("Direct Unit Cost",13);
      PurchaseLineRec.MODIFY(TRUE);

      // creating inventory put-away
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeaderRec);
      LibraryWarehouse.CreateInvtPutPickPurchaseOrder(PurchaseHeaderRec);

      // posting inventory put-away
      WarehouseActivityHeaderRec.SETRANGE("Location Code",LocationRec.Code);
      WarehouseActivityHeaderRec.FINDFIRST;
      WarehouseActivityHeaderRec.VALIDATE("External Document No.2",PurchaseHeaderRec."No.");
      WarehouseActivityHeaderRec.MODIFY(TRUE);

      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeaderRec);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeaderRec,TRUE);
    END;

    LOCAL PROCEDURE AddSerialNumberToPurchase@23(PurchaseLine@1000 : Record 39;SerialNumberKoef@1001 : Integer);
    VAR
      ReservationEntry@1003 : Record 337;
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO PurchaseLine.Quantity DO
        LibraryItemTracking.CreatePurchOrderItemTracking(
          ReservationEntry,PurchaseLine,
          'S' + FORMAT(SerialNumberKoef + i),'',1);
    END;

    LOCAL PROCEDURE AddSerialNumberToComponent@28(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderComponent@1004 : Record 5407;
      ReservationEntry@1003 : Record 337;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;

      LibraryItemTracking.CreateProdOrderCompItemTracking(ReservationEntry,ProdOrderComponent,'S11','',1);
      LibraryItemTracking.CreateProdOrderCompItemTracking(ReservationEntry,ProdOrderComponent,'S12','',1);
      LibraryItemTracking.CreateProdOrderCompItemTracking(ReservationEntry,ProdOrderComponent,'S23','',1);
    END;

    [MessageHandler]
    PROCEDURE PurchaseHandler@10(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE PrepareReleasedProdOrder@11(VAR ProductionOrder@1000 : Record 5405;ItemRec@1001 : Record 27;LocationCode@1002 : Code[10];BinCode@1003 : Code[20]);
    VAR
      ProdOrderComponent@1004 : Record 5407;
      Bin@1005 : Record 7354;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",
        ProductionOrder."Source Type"::Item,ItemRec."No.",3);

      ProductionOrder.SetUpdateEndDate;
      ProductionOrder.VALIDATE("Due Date",CALCDATE('<CM+1M>',WORKDATE));
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);

      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,FALSE);

      // change bins in component list
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETFILTER(Code,'<>%1',BinCode);
      Bin.FINDLAST;

      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",10000);

      IF ProdOrderComponent.FIND('-') THEN
        REPEAT
          ProdOrderComponent."Bin Code" := Bin.Code;
          ProdOrderComponent.MODIFY(TRUE);
        UNTIL ProdOrderComponent.NEXT = 0;

      // release Production Order
      ReleaseProductionOrder(ProductionOrder,LocationCode);
    END;

    LOCAL PROCEDURE ReleaseProductionOrder@15(VAR ProductionOrder@1000 : Record 5405;LocationCode@1001 : Code[10]);
    BEGIN
      ProductionOrder.FIND('=');
      LibraryManufacturing.ChangeProdOrderStatus(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Due Date",TRUE);

      ProductionOrder.SETRANGE("Source No.",ProductionOrder."Source No.");
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("Location Code",LocationCode);
      ProductionOrder.FINDLAST;
    END;

    LOCAL PROCEDURE PostOutput@12(ProductionOrder@1000 : Record 5405);
    VAR
      ItemJournalLine@1001 : Record 83;
      WarehouseRequest@1002 : Record 5765;
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      // post output of the first operation
      LibraryManufacturing.OutputJournalExplodeRouting(ProductionOrder);

      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrder."No.");
      ItemJournalLine.SETRANGE("Entry Type",ItemJournalLine."Entry Type"::Output);

      ItemJournalLine.FINDLAST;
      ItemJournalLine.DELETE(TRUE);
      LibraryManufacturing.PostOutputJournal;

      // post output of the second operation via Inventory Put-away
      WarehouseRequest.RESET;
      WarehouseRequest.SETCURRENTKEY("Source Document","Source No.");
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Prod. Output");
      WarehouseRequest.SETRANGE("Source No.",ProductionOrder."No.");

      LibraryWarehouse.CreateInboundWhseReqFromProdO(ProductionOrder);
      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,TRUE,FALSE,FALSE);

      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::"Invt. Put-away");
      WarehouseActivityHeader.SETRANGE("Source Document",WarehouseActivityHeader."Source Document"::"Prod. Output");
      WarehouseActivityHeader.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterInvtMovement@13(ProductionOrder@1000 : Record 5405);
    VAR
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      WarehouseRequest.RESET;
      WarehouseRequest.SETCURRENTKEY("Source Document","Source No.");
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Prod. Consumption");
      WarehouseRequest.SETRANGE("Source No.",ProductionOrder."No.");

      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,TRUE,FALSE,TRUE);

      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::"Invt. Movement");
      WarehouseActivityHeader.SETRANGE("Source Document",WarehouseActivityHeader."Source Document"::"Prod. Consumption");
      WarehouseActivityHeader.SETRANGE("Source No.",ProductionOrder."No.");

      // according Flushing method the Invt. Movement hasn't had to be created
      IF WarehouseActivityHeader.FINDFIRST THEN BEGIN
        LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
        LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      END;
    END;

    LOCAL PROCEDURE PostConsumption@26(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      LibraryManufacturing.CalculateConsumptionForJournal(ProductionOrder,ProdOrderComponent,WORKDATE + 30,TRUE);
      LibraryManufacturing.PostConsumptionJournal;
    END;

    LOCAL PROCEDURE VerifyConsumption@14(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderComponent@1001 : Record 5407;
      ItemLedgerEntry@1002 : Record 32;
      ConsumedQty@1003 : Decimal;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      IF ProdOrderComponent.FIND('-') THEN
        REPEAT
          ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment");
          ItemLedgerEntry.SETRANGE("Item No.",ProdOrderComponent."Item No.");
          ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Consumption);
          ConsumedQty := 0;
          IF ItemLedgerEntry.FIND('-') THEN
            REPEAT
              ConsumedQty += ItemLedgerEntry.Quantity;
            UNTIL ItemLedgerEntry.NEXT = 0;
          Assert.AreEqual(
            -ProdOrderComponent."Expected Quantity",
            ConsumedQty,
            'Wrong consumed quantity for item ' + ItemLedgerEntry."Item No.");
        UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBinsWithContent@21(ProductionOrder@1000 : Record 5405;LocationCode@1001 : Code[10]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      BinContent@1003 : Record 7302;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        IF FIND('-') THEN
          REPEAT
            BinContent.SETRANGE("Location Code",LocationCode);
            BinContent.SETRANGE("Item No.","Item No.");
            BinContent.FINDFIRST;
            VALIDATE("Bin Code",BinContent."Bin Code");
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateRoutingWithWC@29(VAR WorkCenterRec1@1000 : Record 99000754;VAR WorkCenterRec2@1001 : Record 99000754;VAR RoutingHeaderRec@1002 : Record 99000763);
    BEGIN
      CreateWorkCenter(WorkCenterRec1);
      CreateWorkCenter(WorkCenterRec2);

      CreateRouting(RoutingHeaderRec,WorkCenterRec1,WorkCenterRec2);
    END;

    LOCAL PROCEDURE CreateAllItemsWithBOM@30(VAR ItemFinal@1000 : Record 27;VAR ItemComp1@1001 : Record 27;VAR ItemComp2@1002 : Record 27;FlushMethod@1003 : Option;RLC1@1004 : Code[10];RLC2@1005 : Code[10];RoutingCode@1007 : Code[20]);
    VAR
      ProdBOMHeader@1006 : Record 99000771;
    BEGIN
      CreateFinalItem(ItemFinal);
      CreateCompItem(ItemComp1,FlushMethod);
      CreateCompItem(ItemComp2,FlushMethod);

      CreateBOM(
        ProdBOMHeader,ItemFinal."Base Unit of Measure",
        ItemComp1,ItemComp2,RLC1,RLC2);

      // finalize item for production
      ItemFinal.VALIDATE("Routing No.",RoutingCode);
      ItemFinal.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      ItemFinal.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      IT: Unable to Execute
      IN: Unable to Execute
      AU: Unable to Execute

      Tests:
        InventoryMovementTest1 - InventoryMovementTest7
          - items use different Flushing Method
          - items are linked to operation via Routing Link Code
          - items have no item tracking
    }
    END.
  }
}

