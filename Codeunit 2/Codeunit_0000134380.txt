OBJECT Codeunit 134380 ERM Dimension
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 480=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryDim@1003 : Codeunit 131001;
      LibraryPurchase@1009 : Codeunit 130512;
      LibrarySales@1011 : Codeunit 130509;
      LibraryRandom@1010 : Codeunit 130440;
      LibraryUtility@1018 : Codeunit 131000;
      LibraryVariableStorage@1019 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      JournalTemplate@1012 : Code[10];
      JournalBatch@1013 : Code[10];
      TestDim@1020 : Code[20];
      TestDim2@1021 : Code[20];
      TestDimValue@1022 : Code[20];
      TestDimValue2@1023 : Code[20];
      TestDim2Value@1024 : Code[20];
      ErrorText@1017 : Text[250];
      MandatoryError@1008 : TextConst 'ENU=A dimension used in Gen. Journal Line %1, %2, %3 has caused an error. Select a Dimension Value Code for the Dimension Code %4 for Customer %5.';
      SameCodeError@1007 : TextConst 'ENU=A dimension used in Gen. Journal Line %1, %2, %3 has caused an error. Select Dimension Value Code %4 for the Dimension Code %5 for Customer %6.';
      NoCodeError@1006 : TextConst 'ENU=A dimension used in Gen. Journal Line %1, %2, %3 has caused an error. Dimension Code %4 must not be mentioned for Customer %5.';
      CombinationError@1005 : TextConst 'ENU=A dimension used in Gen. Journal Line %1, %2, %3 has caused an error. Select Dimension Value Code %4 for the Dimension Code %5.';
      UnknownError@1004 : TextConst 'ENU=Unexpected Error.';
      GeneralLineMustNotExistError@1014 : TextConst 'ENU=General Journal Line must not exist.';
      BlockedErr@1015 : TextConst 'ENU=is blocked';
      BlockedLevel@1016 : 'Dimension,Dimension Value';
      DimValueNotFoundErr@1025 : TextConst '@@@="%1 = Dimension Value Code";ENU=contains a value (%1) that cannot be found in the related table (Dimension Value).';

    [Test]
    PROCEDURE ValPosting_Mandatory@2();
    VAR
      GLAccount@1000 : Record 15;
      Customer@1001 : Record 18;
      DefaultDimension@1002 : Record 352;
      GenJnlLine@1003 : Record 81;
      DimSetID@1004 : Integer;
    BEGIN
      // Test codeunit 408, function CheckDimValueposting.
      // Combination: Code mandatory + Specific account value posting
      // replace 140761,140764,140755,140758

      Initialize;
      ValPosting_Setup(GLAccount,Customer,DefaultDimension,GenJnlLine,DefaultDimension."Value Posting"::"Code Mandatory");
      DimSetID := GenJnlLine."Dimension Set ID";
      ModifyJnlDimSetID(GenJnlLine,0);
      // Necessary to be able to run possitive test after negative test.
      COMMIT;

      ErrorText := STRSUBSTNO(MandatoryError,JournalTemplate,JournalBatch,GenJnlLine."Line No.",TestDim,Customer."No.");

      NegativeTest(GenJnlLine,ErrorText);
      PossitiveTest(GenJnlLine,DimSetID);
    END;

    [Test]
    PROCEDURE ValPosting_SameCode@3();
    VAR
      GLAccount@1006 : Record 15;
      Customer@1005 : Record 18;
      DefaultDimension@1004 : Record 352;
      GenJnlLine@1003 : Record 81;
      DimSetID@1001 : Integer;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Test codeunit 408, function CheckDimValueposting.
      // Parameters: Same Code + specific account value posting
      // replace 140762,140765,140756,140759

      Initialize;
      ValPosting_Setup(GLAccount,Customer,DefaultDimension,GenJnlLine,DefaultDimension."Value Posting"::"Same Code");
      DimSetID := GenJnlLine."Dimension Set ID";
      NewDimSetID := LibraryDim.EditDimSet(DimSetID,TestDim,TestDimValue2);
      ModifyJnlDimSetID(GenJnlLine,NewDimSetID);
      // Necessary to be able to run possitive test after negative test.
      COMMIT;

      ErrorText := STRSUBSTNO(SameCodeError,JournalTemplate,JournalBatch,GenJnlLine."Line No.",TestDimValue,TestDim,Customer."No.");

      NegativeTest(GenJnlLine,ErrorText);
      PossitiveTest(GenJnlLine,DimSetID);
    END;

    [Test]
    PROCEDURE ValPosting_NoCode@4();
    VAR
      GLAccount@1004 : Record 15;
      Customer@1003 : Record 18;
      DefaultDimension@1002 : Record 352;
      GenJnlLine@1001 : Record 81;
      DimSetID@1000 : Integer;
    BEGIN
      // Test codeunit 408, function CheckDimValueposting.
      // Parameters: No Code + specific account value posting
      // replace 140763,140766,140758,140760

      Initialize;
      ValPosting_Setup(GLAccount,Customer,DefaultDimension,GenJnlLine,DefaultDimension."Value Posting"::"No Code");
      DimSetID := LibraryDim.CreateDimSet(DimSetID,TestDim,TestDimValue);
      ModifyJnlDimSetID(GenJnlLine,DimSetID);
      // Necessary to be able to run possitive test after negative test.
      COMMIT;

      ErrorText := STRSUBSTNO(NoCodeError,JournalTemplate,JournalBatch,GenJnlLine."Line No.",TestDim,Customer."No.");

      NegativeTest(GenJnlLine,ErrorText);
      PossitiveTest(GenJnlLine,0);
    END;

    [Test]
    PROCEDURE ValPosting_Blank@5();
    VAR
      GLAccount@1003 : Record 15;
      Customer@1002 : Record 18;
      DefaultDimension@1001 : Record 352;
      GenJnlLine@1000 : Record 81;
    BEGIN
      // Test codeunit 408, function CheckDimValueposting.
      // Parameters: Blank + specific account value posting

      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);
      CreateDefaultDimCustomer(DefaultDimension,Customer."No.",TestDim,TestDimValue,DefaultDimension."Value Posting"::" ");
      CreateDefaultDimCustomer(DefaultDimension,Customer."No.",TestDim2,TestDim2Value,DefaultDimension."Value Posting"::" ");

      CreateJournalLine(GenJnlLine,JournalTemplate,JournalBatch,GenJnlLine."Account Type"::Customer,Customer."No.",
        GenJnlLine."Document Type"::Invoice,100,GenJnlLine."Bal. Account Type"::"G/L Account",GLAccount."No.");

      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);
    END;

    [Test]
    PROCEDURE ValPosting_Combination@6();
    VAR
      GLAccount@1000 : Record 15;
      Customer@1001 : Record 18;
      DefaultDimension@1002 : Record 352;
      GenJnlLine@1003 : Record 81;
      DimSetID@1004 : Integer;
      NewDimSetID@1005 : Integer;
    BEGIN
      // Test codeunit 408, function CheckDimValueposting.
      // Parameters: Code mandatory/Specific account value posting + same code/Entir Account type value posting
      // replace 140767,140768,140769,140771,140772,140773,140774,140775,140776,140777,140778

      Initialize;
      // Setup entir account type value posting
      LibraryDim.CreateAccTypeDefaultDimension(DefaultDimension,DATABASE::Customer,TestDim,TestDimValue,
        DefaultDimension."Value Posting"::"Same Code");

      ValPosting_Setup(GLAccount,Customer,DefaultDimension,GenJnlLine,DefaultDimension."Value Posting"::"Code Mandatory");
      DimSetID := GenJnlLine."Dimension Set ID";
      NewDimSetID := LibraryDim.EditDimSet(DimSetID,TestDim,TestDimValue2);
      ModifyJnlDimSetID(GenJnlLine,NewDimSetID);
      // Necessary to be able to run possitive test after negative test.
      COMMIT;

      ErrorText := STRSUBSTNO(CombinationError,JournalTemplate,JournalBatch,GenJnlLine."Line No.",TestDimValue,TestDim);

      NegativeTest(GenJnlLine,ErrorText);
      PossitiveTest(GenJnlLine,DimSetID);

      // Test cleanup
      DefaultDimension.RESET;
      DefaultDimension.SETRANGE("Table ID",DATABASE::Customer);
      DefaultDimension.SETRANGE("No.",' ');
      DefaultDimension.SETRANGE("Dimension Code",TestDim);
      DefaultDimension.FINDFIRST;
      DefaultDimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE PostWithoutDimensionValuePostingErrors@18();
    VAR
      GenJournalLine@1004 : Record 81;
      DefaultDimension@1002 : Record 352;
      VendorNo@1000 : Code[20];
      GLAccountNo@1001 : Code[20];
    BEGIN
      // Test Post General Journal Line without dimension value posting error.

      // Setup: Create Account Type Default Dimension. Create Vendor and G/L Account.
      Initialize;
      VendorNo := CreateInitialSetupForVendorAccountTypeDefaultDimension(DefaultDimension,GLAccountNo);

      // Exercise: Create and post General Journal Line.
      CreateJournalLine(
        GenJournalLine,JournalTemplate,JournalBatch,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2),GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify there is no remaining General Journal Line after posting.
      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplate);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatch);
      Assert.IsFalse(GenJournalLine.FINDFIRST,GeneralLineMustNotExistError);

      // Tear down: Reset Account Type Default Dimension.
      DefaultDimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE PostWithDimensionValuePostingErrors@20();
    VAR
      GenJournalLine@1004 : Record 81;
      DefaultDimension@1002 : Record 352;
      VendorNo@1001 : Code[20];
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Test Post General Journal Line with dimension value posting error.

      // Setup: Create Account Type Default Dimension. Create Vendor and G/L Account.
      Initialize;
      VendorNo := CreateInitialSetupForVendorAccountTypeDefaultDimension(DefaultDimension,GLAccountNo);

      // Exercise: Create General Journal Line. Change Dimension Value Code and post General Journal Line.
      CreateJournalLine(
        GenJournalLine,JournalTemplate,JournalBatch,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2),GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      UpdateDimensionValueCode(GenJournalLine."Dimension Set ID");
      COMMIT;  // COMMIT Required for Verification and Tear down.

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error occurs on posting General Journal Line with different Dimension Value Code.
      Assert.AreEqual(
        STRSUBSTNO(CombinationError,JournalTemplate,JournalBatch,GenJournalLine."Line No.",TestDimValue,TestDim),GETLASTERRORTEXT,
        UnknownError);

      // Tear down: Reset Account Type Default Dimension.
      DefaultDimension.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(EditDimensionSetEntriesPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE DimensionSetEntry@13();
    VAR
      GeneralJournal@1001 : TestPage 39;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Test setup dimensions on editable dimension set entry page and validate correct dimension data posting.

      // Setup: Create General Journal Line by General Journal Page.
      Initialize;
      DocumentNo := CreateJournalLineByGeneralJournalPage;

      // Exercise: Set Journal Line Dimensions in EditDimensionSetEntriesPageHandler Function. Post General Journal.
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(JournalBatch);
      GeneralJournal.Dimensions.INVOKE;
      GeneralJournal.Post.INVOKE;

      // Verify: Verify Posted Journal Line Dimensions.
      VerifyPostedJournalLineDimensions(FindDimensionSetID(DocumentNo),TestDim,TestDimValue);
      VerifyPostedJournalLineDimensions(FindDimensionSetID(DocumentNo),TestDim2,TestDim2Value);
    END;

    [Test]
    PROCEDURE ValidateShortcutDimValues_DimensionBlocked@17();
    BEGIN
      // Verify that validate of shortcut for blocked dimension leads to error
      BlockedDimensionShortcutScenario(BlockedLevel::Dimension);
    END;

    [Test]
    PROCEDURE ValidateShortcutDimValues_DimensionValueBlocked@19();
    BEGIN
      // Verify that validate of shortcut of blocked dimension value leads to error
      BlockedDimensionShortcutScenario(BlockedLevel::"Dimension Value");
    END;

    [Test]
    PROCEDURE ReclasDimensionSetBufferDimValueNameLength@21();
    VAR
      ReclasDimensionSetBuffer@1000 : Record 482;
      DimensionValue@1001 : ARRAY [2] OF Record 349;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 379473] TAB 482 "Reclas. Dimension Set Buffer" has correct text length for "Dimension Value Name", "New Dimension Value Name" fields
      Initialize;

      // [GIVEN] Dimension Code "DIM". Two Dimension Values for given dimension code:
      // [GIVEN] "DIMVAL1" with "Name" = "X" (50-chars length)
      // [GIVEN] "DIMVAL2" with "Name" = "Y" (50-chars length)
      CreateTwoDimValuesWithLongNames(DimensionValue);

      // [GIVEN] TAB 482 "Reclas. Dimension Set Buffer" record with "Dimension Code" = "DIM"
      ReclasDimensionSetBuffer.INIT;
      ReclasDimensionSetBuffer.VALIDATE("Dimension Code",DimensionValue[1]."Dimension Code");

      // [WHEN] Validate "Dimension Value Code" = "DIMVAL1", "New Dimension Value Code" = "DIMVAL2"
      ReclasDimensionSetBuffer.VALIDATE("Dimension Value Code",DimensionValue[1].Code);
      ReclasDimensionSetBuffer.VALIDATE("New Dimension Value Code",DimensionValue[2].Code);

      // [THEN] ReclasDimensionSetBuffer."Dimension Value Name" = "X"
      // [THEN] ReclasDimensionSetBuffer."New Dimension Value Name" = "Y"
      VerifyReclasDimSetBufferDimNames(ReclasDimensionSetBuffer,DimensionValue[1].Name,DimensionValue[2].Name);
    END;

    [Test]
    [HandlerFunctions(DimValueListModalPageHandler)]
    PROCEDURE UI_FocusCurrValueWhenLookupDimOnPurchaseOrderListPage@23();
    VAR
      GenLedgSetup@1000 : Record 98;
      DimValue@1001 : Record 349;
      PurchHeader@1002 : Record 38;
      PurchaseOrderList@1003 : TestPage 9307;
    BEGIN
      // [FEATURE] [UI] [Purchase]
      // [SCENARIO 380204] Focus is set on current "Shortcut Dimension Code" when lookup the field on "Purchase Order List" page

      Initialize;

      // [GIVEN] Dimension Values "A1" and "A2" for Global Dimension Code "ADM"
      GenLedgSetup.GET;
      LibraryDim.CreateDimensionValue(DimValue,GenLedgSetup."Global Dimension 1 Code");
      LibraryDim.CreateDimensionValue(DimValue,GenLedgSetup."Global Dimension 1 Code");

      // [GIVEN] Purchase Order with "Shortcut Dimension 1 Code" = "A2"
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      PurchHeader.VALIDATE("Shortcut Dimension 1 Code",DimValue.Code);

      // [GIVEN] Opened "Purchase Order List" page
      PurchaseOrderList.OPENEDIT;
      PurchaseOrderList.GOTORECORD(PurchHeader);
      LibraryVariableStorage.Enqueue(DimValue.Code);

      // [WHEN] Lookup field "Shortcut Dimension 1 Code"
      PurchaseOrderList."Shortcut Dimension 1 Code".LOOKUP;

      // [THEN] Focus set on Dimension Value with Code "A2"
      // Verification done in DimValueListModalPageHandler
    END;

    [Test]
    PROCEDURE NotPossibleToAssignBlockedDimensionToShortcutDimCode@26();
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1001 : Record 349;
      GenJournalLine@1002 : Record 81;
      ServiceLine@1003 : Record 5902;
      ServiceItemLine@1004 : Record 5901;
      ServiceHeader@1005 : Record 5900;
      PurchaseLine@1006 : Record 39;
      SalesLine@1007 : Record 37;
      SalesHeader@1008 : Record 36;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 221094] Not possible to assign blocked dimension to "Shortcut Dimension Code" field

      Initialize;
      LibraryDim.CreateDimension(Dimension);
      LibraryDim.BlockDimension(Dimension);
      LibraryDim.CreateDimensionValue(DimensionValue,Dimension.Code);

      VerifyDimValueCodeCannotBeAssignedToField(
        GenJournalLine,GenJournalLine.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        GenJournalLine,GenJournalLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceLine,ServiceLine.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceLine,ServiceLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceItemLine,ServiceItemLine.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceItemLine,ServiceItemLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceHeader,ServiceHeader.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        ServiceHeader,ServiceHeader.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        PurchaseLine,PurchaseLine.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        PurchaseLine,PurchaseLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        SalesLine,SalesLine.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        SalesLine,SalesLine.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        SalesHeader,SalesHeader.FIELDNO("Shortcut Dimension 1 Code"),DimensionValue.Code);
      VerifyDimValueCodeCannotBeAssignedToField(
        SalesHeader,SalesHeader.FIELDNO("Shortcut Dimension 2 Code"),DimensionValue.Code);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
      GenJnlBatch@1003 : Record 232;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      // Create test dimensions
      LibraryDim.CreateDimension(Dimension);
      TestDim := Dimension.Code;
      LibraryDim.CreateDimensionValue(DimensionValue,Dimension.Code);
      TestDimValue := DimensionValue.Code;
      LibraryDim.CreateDimensionValue(DimensionValue,Dimension.Code);
      TestDimValue2 := DimensionValue.Code;

      LibraryDim.CreateDimension(Dimension);
      TestDim2 := Dimension.Code;
      LibraryDim.CreateDimensionValue(DimensionValue,Dimension.Code);
      TestDim2Value := DimensionValue.Code;

      LibraryERM.SelectGenJnlBatch(GenJnlBatch);
      LibraryERM.ClearGenJournalLines(GenJnlBatch);
      JournalTemplate := GenJnlBatch."Journal Template Name";
      JournalBatch := GenJnlBatch.Name;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ModifyJnlDimSetID@12(VAR GenJnlLine@1000 : Record 81;DimSetID@1001 : Integer);
    BEGIN
      GenJnlLine.VALIDATE("Dimension Set ID",DimSetID);
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValPosting_Setup@7(VAR GLAccount@1003 : Record 15;VAR Customer@1002 : Record 18;VAR DefaultDimension@1001 : Record 352;VAR GenJnlLine@1004 : Record 81;ValuePosting@1000 : Option);
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);
      IF ValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        CreateDefaultDimCustomer(DefaultDimension,Customer."No.",TestDim,'',ValuePosting)
      ELSE
        CreateDefaultDimCustomer(DefaultDimension,Customer."No.",TestDim,TestDimValue,ValuePosting);

      CreateJournalLine(GenJnlLine,JournalTemplate,JournalBatch,GenJnlLine."Account Type"::Customer,Customer."No.",
        GenJnlLine."Document Type"::Invoice,100,GenJnlLine."Bal. Account Type"::"G/L Account",GLAccount."No.");
    END;

    LOCAL PROCEDURE NegativeTest@10(VAR GenJnlLine@1002 : Record 81;ExpectError@1001 : Text[250]);
    BEGIN
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);
      Assert.AreEqual(ExpectError,GETLASTERRORTEXT,UnknownError);
    END;

    LOCAL PROCEDURE PossitiveTest@11(VAR GenJnlLine@1000 : Record 81;DimSetID@1001 : Integer);
    BEGIN
      GenJnlLine.VALIDATE("Dimension Set ID",DimSetID);
      GenJnlLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);
    END;

    LOCAL PROCEDURE CreateJournalLine@8(VAR GenJnlLine@1000 : Record 81;JnlTemplate@1001 : Code[10];JnlBatch@1002 : Code[10];AccType@1003 : Option;AccNo@1004 : Code[20];DocType@1006 : Option;Amount@1007 : Decimal;BalAccType@1008 : Option;BalAccNo@1009 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,JnlTemplate,JnlBatch,DocType,AccType,AccNo,Amount);
      GenJnlLine.VALIDATE("Bal. Account Type",BalAccType);
      GenJnlLine.VALIDATE("Bal. Account No.",BalAccNo);
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLineByGeneralJournalPage@25() DocumentNo : Code[20];
    VAR
      Vendor@1000 : Record 23;
      GenJournalLine@1002 : Record 81;
      GenJournalBatch@1008 : Record 232;
      GeneralJournal@1001 : TestPage 39;
    BEGIN
      GenJournalBatch.GET(JournalTemplate,JournalBatch);
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal."Account Type".SETVALUE(GenJournalLine."Account Type"::Vendor);
      LibraryPurchase.CreateVendor(Vendor);
      GeneralJournal."Account No.".SETVALUE(Vendor."No.");
      DocumentNo := GeneralJournal."Document No.".VALUE;
      GeneralJournal.CLOSE;

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
      GenJournalLine.VALIDATE(Amount,-LibraryRandom.RandDec(100,2));  // Use Random Amount because value is not important.
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimCustomer@9(VAR DefaultDimension@1000 : Record 352;CustomerNo@1001 : Code[20];DimCode@1002 : Code[20];DimValue@1003 : Code[20];ValuePosting@1004 : Option);
    BEGIN
      LibraryDim.CreateDefaultDimensionCustomer(DefaultDimension,CustomerNo,DimCode,DimValue);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInitialSetupForVendorAccountTypeDefaultDimension@14(VAR DefaultDimension@1000 : Record 352;VAR GLAccountNo@1001 : Code[20]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
      GLAccount@1003 : Record 15;
    BEGIN
      LibraryDim.CreateAccTypeDefaultDimension(
        DefaultDimension,DATABASE::Vendor,TestDim,TestDimValue,DefaultDimension."Value Posting"::"Same Code");
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccountNo := GLAccount."No.";
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateDimSet@22(DimensionValue@1000 : Record 349) : Integer;
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
      DimMgt@1001 : Codeunit 408;
    BEGIN
      WITH TempDimSetEntry DO BEGIN;
        INIT;
        "Dimension Code" := DimensionValue."Dimension Code";
        "Dimension Value Code" := DimensionValue.Code;
        "Dimension Value ID" := DimensionValue."Dimension Value ID";
        INSERT;
      END;

      EXIT(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE CreateTwoDimValuesWithLongNames@33(VAR DimensionValue@1000 : ARRAY [2] OF Record 349);
    BEGIN
      LibraryDim.CreateDimWithDimValue(DimensionValue[1]);
      UpdateDimensionValueName(DimensionValue[1]);

      LibraryDim.CreateDimensionValue(DimensionValue[2],DimensionValue[1]."Dimension Code");
      UpdateDimensionValueName(DimensionValue[2]);
    END;

    LOCAL PROCEDURE BlockedDimensionShortcutScenario@28(Level@1000 : Option);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      DimMgt@1005 : Codeunit 408;
      DimSetId@1006 : Integer;
    BEGIN
      // Scenario verifies usage of shortcut 1 dimension, but it is valid for other shourtcuts

      // Setup
      Initialize;

      Dimension.GET(LibraryERM.GetGlobalDimensionCode(1));
      LibraryDim.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimSetId := CreateDimSet(DimensionValue);
      MakeDimOrDimValueBlocked(Dimension,DimensionValue,Level);

      // Exercise
      ASSERTERROR DimMgt.ValidateShortcutDimValues(1,DimensionValue.Code,DimSetId);

      // Verify: error message should contain "is blocked"
      Assert.ExpectedError(BlockedErr);
    END;

    LOCAL PROCEDURE FindDimensionSetID@34(DocumentNo@1000 : Code[20]) : Integer;
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      EXIT(GLEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE MakeDimOrDimValueBlocked@24(VAR Dimension@1002 : Record 348;VAR DimensionValue@1001 : Record 349;Level@1000 : Option);
    BEGIN
      CASE Level OF
        BlockedLevel::Dimension:
          BEGIN
            Dimension.VALIDATE(Blocked,TRUE);
            Dimension.MODIFY(TRUE);
          END;
        BlockedLevel::"Dimension Value":
          BEGIN
            DimensionValue.VALIDATE(Blocked,TRUE);
            DimensionValue.MODIFY(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateDimensionValueCode@55(DimensionSetID@1001 : Integer);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.VALIDATE("Dimension Value Code",TestDimValue2);
      DimensionSetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionValueName@36(VAR DimensionValue@1000 : Record 349);
    BEGIN
      DimensionValue.VALIDATE(Name,LibraryUtility.GenerateRandomText(MAXSTRLEN(DimensionValue.Name)));
      DimensionValue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPostedJournalLineDimensions@31(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20];DimensionValueCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      DimensionSetEntry.SETRANGE("Dimension Value Code",DimensionValueCode);
      DimensionSetEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyReclasDimSetBufferDimNames@27(ReclasDimensionSetBuffer@1001 : Record 482;ExpectedDimValueName@1000 : Text[50];ExpectedNewDimValueName@1002 : Text[50]);
    BEGIN
      WITH ReclasDimensionSetBuffer DO BEGIN
        CALCFIELDS("Dimension Value Name","New Dimension Value Name");
        "Dimension Value Name" := COPYSTR("Dimension Value Name",1,MAXSTRLEN("Dimension Value Name"));
        "New Dimension Value Name" := COPYSTR("New Dimension Value Name",1,MAXSTRLEN("New Dimension Value Name"));
        Assert.AreEqual(ExpectedDimValueName,"Dimension Value Name",FIELDCAPTION("Dimension Value Name"));
        Assert.AreEqual(ExpectedNewDimValueName,"New Dimension Value Name",FIELDCAPTION("New Dimension Value Name"));
      END;
    END;

    LOCAL PROCEDURE VerifyDimValueCodeCannotBeAssignedToField@40(Record@1000 : Variant;FieldID@1001 : Integer;DimValueCode@1002 : Code[20]);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.GETTABLE(Record);
      FieldRef := RecRef.FIELD(FieldID);
      ASSERTERROR FieldRef.VALIDATE(DimValueCode);
      Assert.ExpectedError(STRSUBSTNO(DimValueNotFoundErr,DimValueCode));
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesPageHandler@38(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      EditDimensionSetEntries."Dimension Code".SETVALUE(TestDim);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(TestDimValue);
      EditDimensionSetEntries.NEW;
      EditDimensionSetEntries."Dimension Code".SETVALUE(TestDim2);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(TestDim2Value);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@16(QuestionText@1000 : Text[1024];VAR Relpy@1001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@15(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE DimValueListModalPageHandler@45(VAR DimensionValueList@1000 : TestPage 560);
    BEGIN
      DimensionValueList.Code.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Value Posting]
      Unsupported version tags:
      NA: Unable to Execute

      Dimension test

       1. Test Post General Journal Line without dimension value posting error.
       2. Test Post General Journal Line with dimension value posting error.
       3. Test setup dimensions on editable dimension set entry page and validate correct dimension data posting.

       TFS_TS_ID = 263518
       Covers Test cases:
       ----------------------------------------------------------------
       Test Function Name                                       TFS ID
       ----------------------------------------------------------------
       PostWithoutDimensionValuePostingErrors                   199623
       PostWithDimensionValuePostingErrors                      199624

       TFS_TS_ID = 264146
       Covers Test cases:
       ----------------------------------------------------------------
       Test Function Name                                       TFS ID
       ----------------------------------------------------------------
       DimensionSetEntry                                        199630
    }
    END.
  }
}

