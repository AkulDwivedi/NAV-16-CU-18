OBJECT Codeunit 137405 SCM Item Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryItemTracking@1021 : Codeunit 130502;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1009 : Codeunit 130509;
      LibraryService@1016 : Codeunit 131902;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryPatterns@1006 : Codeunit 132212;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryWarehouse@1017 : Codeunit 132204;
      LibraryJob@1019 : Codeunit 131920;
      LibraryPlanning@1023 : Codeunit 132203;
      LibraryRandom@1003 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      SalesMode@1010 : Boolean;
      ExpirationDateMustError@1011 : TextConst 'ENU="Expiration Date must have a value in Tracking Specification: Entry No.=1. It cannot be zero or empty."';
      BeforeExpirationDateError@1007 : TextConst 'ENU="Expiration Date  is before the posting date. in Item Ledger Entry Entry No.=''%1''."';
      UnknownError@1008 : TextConst 'ENU=Unknown Error.';
      AssignLotNo@1013 : Boolean;
      AssignSerialNo@1014 : Boolean;
      QtyToHandleMismatchErr@1015 : TextConst 'ENU=Quantity to handle in inbound and outbound entries does not match.';
      ItemTrackSpecNotFoundErr@1018 : TextConst 'ENU=Item tracking specification for transfer line is not found.';
      TrackingOptionStr@1020 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotQty,VerifyLotQty';
      PostedWhseQuantityErr@1022 : TextConst 'ENU=Posted Warehouse Shipment must have same quantity as Warehouse Shipment';
      WrongExpDateErr@1024 : TextConst 'ENU=Wrong expiration date in %1 No. %2';
      ItemLedgEntryWithLotErr@1025 : TextConst 'ENU=Item Ledger Entry with Item and Lot not exists.';
      TrackedQuantityErr@1026 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking.';
      LotNoRequiredErr@1027 : TextConst '@@@=%1 - Item No.;ENU=You must assign a lot number for item %1.';
      SerialNoRequiredErr@1028 : TextConst '@@@=%1 - Item No.;ENU=You must assign a serial number for item %1.';
      LineNoTxt@1029 : TextConst '@@@=%1 - Line No.;ENU=" Line No. = ''%1''."';
      IncorrectErrorMessageErr@1030 : TextConst 'ENU=Incorrect error message';
      MultipleExpDateForLotErr@1031 : TextConst '@@@="%1 = Lot No.";ENU=There are multiple expiration dates registered for lot %1.';
      FieldVisibleErr@1032 : TextConst '@@@=%1: FieldCaption, %2: PageCaption;ENU=Field %1 should not be visible on page %2.';
      FieldEditableErr@1033 : TextConst '@@@=%1: FieldCaption, %2: PageCaption;ENU=Field %1 should not be editable on page %2.';

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler)]
    PROCEDURE PurchaseOrderWithoutExpirationDate@5();
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test Item Tracking functionality on Purchase Order without Expiration Date.

      // Setup.
      Initialize;

      // Exercise: Create and post Purchase Order without Expiration Date.
      ASSERTERROR CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,0D);

      // Verify: Verify Expiration Date must have a value in Tracking Specification error message.
      Assert.AreEqual(STRSUBSTNO(ExpirationDateMustError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ItemTrackingEntriesHandler)]
    PROCEDURE PurchaseOrderWithExpirationDate@9();
    VAR
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
      ItemTrackingDocManagement@1003 : Codeunit 6503;
    BEGIN
      // Test Item Tracking functionality on Purchase Order with Expiration Date.

      // Setup.
      Initialize;

      // Exercise: Create and post Purchase Order with Expiration Date.
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);

      // Verify: Verify Expiration Date on ItemTrackingEntries Handler.
      ItemTrackingDocManagement.ShowItemTrackingForMasterData(
        ItemLedgerEntry."Source Type"::Vendor,PurchaseLine."Buy-from Vendor No.",'','','','','');  // Verification is done in ItemTrackingEntries Handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryHandler)]
    PROCEDURE SalesOrderAfterExpirationDate@78();
    VAR
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Test Item Tracking functionality on Sales Order with Posting Date as after Expiration Date.

      // Setup: Create and post Purchase Order with Expiration Date and find Item Ledger Entry.
      Initialize;
      ItemLedgerEntry.SETRANGE("Document No.",CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE));
      ItemLedgerEntry.FINDFIRST;

      // Exercise: Create and post Sales Order with Posting Date as after Expiration Date.
      ASSERTERROR CreateAndPostSalesOrderWithItemTracking(
          PurchaseLine."No.",PurchaseLine.Quantity,LibraryRandom.RandInt(5),'');

      // Verify: Verify Expiration Date is before the posting date error message.
      Assert.AreEqual(STRSUBSTNO(BeforeExpirationDateError,ItemLedgerEntry."Entry No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryHandler)]
    PROCEDURE SalesOrderBeforeExpirationDate@6();
    VAR
      PurchaseLine@1001 : Record 39;
      SalesShipmentHeader@1000 : Record 110;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test Item Tracking functionality on Sales Order with Posting Date as Expiration Date.

      // Setup: Create and post Purchase Order with Expiration Date.
      Initialize;
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);

      // Exercise: Create and post Sales Order with Posting Date as Expiration Date.
      DocumentNo := CreateAndPostSalesOrderWithItemTracking(PurchaseLine."No.",PurchaseLine.Quantity,0,'');

      // Verify: Verify Sales Shipment.
      SalesShipmentHeader.GET(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ServiceOrderWithItemTrackingLines@15();
    VAR
      PurchaseLine@1002 : Record 39;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Test Item Tracking functionality for Service Order.

      // Setup: Create and post Purchase Order for new Item. Create a Service Order for the same Item.
      Initialize;
      CreateAndPostPurchaseOrderWithLotNoInItemTracking(PurchaseLine);
      CreateServiceDocument(ServiceHeader,ServiceLine,ServiceHeader."Document Type"::Order,PurchaseLine."No.",PurchaseLine.Quantity);
      AssignLotNo := FALSE;  // Use AssignLotNo as global variable for Handler. It is set to False as new Lot No was created as it was set to True while creating Purchase Order.
      SalesMode := TRUE;  // Use SalesMode as global variable for Handler.

      // Exercise: Select Item Tracking Lines for Lot No.
      ServiceLine.OpenItemTrackingLines;

      // Verify: Lot No. exist on Reservation entry.
      VerifyLotNoExistOnReservationEntry(ServiceLine."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ServiceOrderPostWithItemTrackingLines@17();
    VAR
      PurchaseLine@1002 : Record 39;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Test posting of Service Order with Item Tracking functionality.

      // Setup: Create and post Purchase Order for new Item. Create a Service Order for the same Item. Select Item Tracking Lines for Lot No..
      Initialize;
      CreateAndPostPurchaseOrderWithLotNoInItemTracking(PurchaseLine);
      CreateServiceDocument(ServiceHeader,ServiceLine,ServiceHeader."Document Type"::Order,PurchaseLine."No.",PurchaseLine.Quantity);
      AssignLotNo := FALSE;  // Use AssignLotNo as global variable for Handler. It is set to False as new Lot No was created as it was set to True while creating Purchase Order.
      SalesMode := TRUE;  // Use SalesMode as global variable for Handler.
      ServiceLine.OpenItemTrackingLines;

      // Exercise: Post the Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Verify: Service Order gets posted successfully with Item Tracking Lines.
      VerifyPostedServiceOrder(ServiceHeader,ServiceLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE ServiceCreditMemoWithItemTrackingLines@14();
    VAR
      Item@1000 : Record 27;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Test Item Tracking functionality for Service Credit Memo.

      // Setup: Create an Item with Lot specific code. Create a Service Credit Memo for the same Item.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeLotSpecific(FALSE),'',LibraryUtility.GetGlobalNoSeriesCode);
      CreateServiceDocument(
        ServiceHeader,ServiceLine,ServiceHeader."Document Type"::"Credit Memo",Item."No.",LibraryRandom.RandInt(10));  // Taking Random Quantity.
      AssignLotNo := TRUE;  // Use AssignLotNo as global variable for Handler.

      // Exercise: Assign Lot No on Item Tracking Lines.
      ServiceLine.OpenItemTrackingLines;

      // Verify: Lot No. exist on Reservation entry.
      VerifyLotNoExistOnReservationEntry(ServiceLine."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE ServiceCreditMemoPostWithItemTrackingLines@12();
    VAR
      Item@1008 : Record 27;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Test posting of Service Credit Memo with Item Tracking functionality.

      // Setup: Create an Item with Lot specific code. Create a Service Credit Memo for the same Item. Assign Lot No on Item Tracking Lines.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeLotSpecific(FALSE),'',LibraryUtility.GetGlobalNoSeriesCode);
      CreateServiceDocument(
        ServiceHeader,ServiceLine,ServiceHeader."Document Type"::"Credit Memo",Item."No.",LibraryRandom.RandInt(10));  // Taking Random Quantity.
      AssignLotNo := TRUE;  // Use AssignLotNo as global variable for Handler.
      ServiceLine.OpenItemTrackingLines;

      // Exercise: Post the Service Credit Memo.
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // Verify: Service Credit Memo gets posted successfully with Item Tracking Lines.
      VerifyPostedServiceCreditMemo(ServiceHeader,ServiceLine);
    END;

    [Test]
    PROCEDURE B307197SalesLineIsInbound@1();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Quote,FALSE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Order,FALSE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Invoice,FALSE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Blanket Order",FALSE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Return Order",TRUE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Credit Memo",TRUE);

        "Quantity (Base)" := -1; // Negative Qty
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Quote,TRUE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Order,TRUE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::Invoice,TRUE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Blanket Order",TRUE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Return Order",FALSE);
        VerifySalesLineIsInbound(SalesLine,"Document Type"::"Credit Memo",FALSE);
      END;
    END;

    [Test]
    PROCEDURE B307197PurchLineIsInbound@7();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Quote,TRUE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Order,TRUE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Invoice,TRUE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Blanket Order",TRUE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Return Order",FALSE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Credit Memo",FALSE);

        "Quantity (Base)" := -1; // Negative Qty
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Quote,FALSE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Order,FALSE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::Invoice,FALSE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Blanket Order",FALSE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Return Order",TRUE);
        VerifyPurchLineIsInbound(PurchLine,"Document Type"::"Credit Memo",TRUE);
      END;
    END;

    [Test]
    PROCEDURE B307197ItemJnlLineIsInbound@8();
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        Quantity := 1;
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Purchase,TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Output,TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Positive Adjmt.",TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Assembly Output",TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Sale,FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Consumption,FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Negative Adjmt.",FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Assembly Consumption",FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Transfer,FALSE);

        "Quantity (Base)" := -1; // Negative Qty
        Quantity := -1;
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Purchase,FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Output,FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Positive Adjmt.",FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Assembly Output",FALSE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Sale,TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Consumption,TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Negative Adjmt.",TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::"Assembly Consumption",TRUE);
        VerifyItemJnlLineIsInbound(ItemJnlLine,"Entry Type"::Transfer,TRUE);
      END;
    END;

    [Test]
    PROCEDURE B307197TransferLineIsInbound@11();
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      WITH TransferLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        Assert.AreEqual(FALSE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));

        "Quantity (Base)" := -1; // Negative Qty
        Assert.AreEqual(TRUE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    [Test]
    PROCEDURE B307197ProdOrderLineIsInbound@23();
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        Assert.AreEqual(TRUE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));

        "Quantity (Base)" := -1; // Negative Qty
        Assert.AreEqual(FALSE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    [Test]
    PROCEDURE B307197ProdOrderComponentIsInbound@26();
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        Assert.AreEqual(FALSE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));

        "Quantity (Base)" := -1; // Negative Qty
        Assert.AreEqual(TRUE,IsInbound,STRSUBSTNO('%1 %2 %3',TABLENAME,FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    [Test]
    PROCEDURE B307197AsmHeaderIsInbound@27();
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      WITH AsmHeader DO BEGIN
        "Quantity (Base)" := 1; // Always Positive Qty
        VerifyAsmHeaderIsInbound(AsmHeader,"Document Type"::Quote,TRUE);
        VerifyAsmHeaderIsInbound(AsmHeader,"Document Type"::Order,TRUE);
        VerifyAsmHeaderIsInbound(AsmHeader,"Document Type"::"Blanket Order",TRUE);
      END;
    END;

    [Test]
    PROCEDURE B307197AsmLineIsInbound@28();
    VAR
      AsmLine@1000 : Record 901;
    BEGIN
      WITH AsmLine DO BEGIN
        "Quantity (Base)" := 1; // Always Positive Qty
        VerifyAsmLineIsInbound(AsmLine,"Document Type"::Quote,FALSE);
        VerifyAsmLineIsInbound(AsmLine,"Document Type"::Order,FALSE);
        VerifyAsmLineIsInbound(AsmLine,"Document Type"::"Blanket Order",FALSE);
      END;
    END;

    [Test]
    PROCEDURE B307197ServiceLineIsInbound@29();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Quote,FALSE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Order,FALSE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Invoice,FALSE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::"Credit Memo",TRUE);

        "Quantity (Base)" := -1; // Negative Qty
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Quote,TRUE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Order,TRUE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::Invoice,TRUE);
        VerifyServiceLineIsInbound(ServiceLine,"Document Type"::"Credit Memo",FALSE);
      END;
    END;

    [Test]
    PROCEDURE B307197JobJnlLineIsInbound@31();
    VAR
      JobJnlLine@1000 : Record 210;
    BEGIN
      WITH JobJnlLine DO BEGIN
        "Quantity (Base)" := 1; // Positive Qty
        VerifyJobJnlLineIsInbound(JobJnlLine,"Entry Type"::Sale,FALSE);
        VerifyJobJnlLineIsInbound(JobJnlLine,"Entry Type"::Usage,FALSE);

        "Quantity (Base)" := -1; // Negative Qty
        VerifyJobJnlLineIsInbound(JobJnlLine,"Entry Type"::Sale,TRUE);
        VerifyJobJnlLineIsInbound(JobJnlLine,"Entry Type"::Usage,TRUE);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationHandler,ItemTrackingSingleLineHandler)]
    PROCEDURE SalesOrderPartialPostingWithReservation@42();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Verify that there's no error during the partial post of Sales Order
      // in case of reservation from PO and ILE and assigning one Item Tracking Serial No.
      Initialize;

      CreateSOWithPOAndILEReservationAndOneItemTracking(SalesHeader,SalesLine);

      PostSalesOrderPartialShip(SalesHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler)]
    PROCEDURE B345019DecreaseQtyToHandle@37();
    VAR
      TransferOrderPage@1004 : TestPage 5740;
      LotNo@1002 : Code[20];
      QtyToUpdate@1010 : 'Quantity,Quantity to Handle,Quantity to Invoice';
      ItemQty@1003 : Integer;
    BEGIN
      // Verify that quantity to handle in inbound and outbound reservation entries is correct
      // after quantity to handle in tracking specification is changed

      Initialize;
      SetupTransferOrderTracking(TransferOrderPage,LotNo,ItemQty);

      SetTrackingSpecification(TransferOrderPage,LotNo,QtyToUpdate::"Quantity to Handle",ItemQty DIV 2);

      Assert.AreEqual(0,CalcQtyToHandleInReservEntries(LotNo),QtyToHandleMismatchErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler,ItemTrackingLinesConfirmHandler)]
    PROCEDURE B345019IncreaseQty@49();
    VAR
      TransferOrderPage@1003 : TestPage 5740;
      LotNo@1002 : Code[20];
      QtyToUpdate@1001 : 'Quantity,Quantity to Handle,Quantity to Invoice';
      ItemQty@1000 : Integer;
    BEGIN
      // Verify that quantity to handle in inbound and outbound reservation entries is correct
      // after quantity in tracking specification is changed

      Initialize;
      SetupTransferOrderTracking(TransferOrderPage,LotNo,ItemQty);

      SetTrackingSpecification(TransferOrderPage,LotNo,QtyToUpdate::Quantity,ItemQty + LibraryRandom.RandInt(ItemQty));

      Assert.AreEqual(0,CalcQtyToHandleInReservEntries(LotNo),QtyToHandleMismatchErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler)]
    PROCEDURE TransferOrderWithTwoLines@48();
    VAR
      TransferHeader@1002 : Record 5740;
      LotNo@1003 : Code[20];
    BEGIN
      // Verify that after post shipment item tracking data transfered to all lines
      // TC for CD Sicily 54927

      // setup
      InitTransferOrderTwoLinesScenario(TransferHeader,LotNo);

      // execute: post shipment for transfer order
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // verify that item tracking specification for second line has same lot number
      VerifySecondTransferLineLotNo(TransferHeader,LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ConfirmHandlerTrue)]
    PROCEDURE UndoPurchaseReceiptWithExpirationDate@64();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1000 : Record 121;
    BEGIN
      // Test undoing Purchase Receipt is allowed when Expiration Date on Item Tracking Line is earlier than WORKDATE.

      // Setup: Create and post Purchase Order with Expiration Date. The Expiration Date is earlier than WORKDATE.
      Initialize;
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE - LibraryRandom.RandInt(10));
      FindPurchRcptLine(PurchRcptLine,PurchaseLine);

      // Exercise and Verify: Undo Purchase Receipt on WORKDATE and Verify no error pops up.
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // Verify: Verify a Purchase Line with negative quantity is generated.
      PurchRcptLine.FINDLAST;
      PurchRcptLine.TESTFIELD(Quantity,-PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler)]
    PROCEDURE PartialPostPurchaseOrderWithJobAndLotTracking@68();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test Quantities on Item Tracking Lines are correct after posting partial receive for Purchase Order with Job No. and Item Tracking
      PartialPostPurchaseDocumentWithJobAndLotTracking(PurchaseLine."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler)]
    PROCEDURE PartialPostPurchaseReturnOrderWithJobAndLotTracking@70();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test Quantities on Item Tracking Lines are correct after posting partial return shipment for Purchase Return Order with Job No. and Item Tracking
      PartialPostPurchaseDocumentWithJobAndLotTracking(PurchaseLine."Document Type"::"Return Order");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler)]
    PROCEDURE PartialPostPurchaseOrderWithJobAndMultipleLotTracking@87();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test Quantities on Item Tracking Lines are correct after posting partial receive for Purchase Order with Job No. and multiple Lot Item Tracking
      PartialPostPurchaseDocumentWithJobAndMultipleLotTracking(PurchaseLine."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler)]
    PROCEDURE PartialPostPurchaseReturnOrderWithJobAndMultipleLotTracking@86();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test Quantities on Item Tracking Lines are correct after posting partial return shipment for Purchase Return Order with Job No. and multiple Lot Item Tracking
      PartialPostPurchaseDocumentWithJobAndMultipleLotTracking(PurchaseLine."Document Type"::"Return Order");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE FillJobNoOnPurchaseLineWithLotTracking@75();
    VAR
      PurchaseLine@1000 : Record 39;
      JobTask@1001 : Record 1001;
    BEGIN
      // Test Job No. can be filled on Purchase Line with Item Tracking assigned.

      // Setup: Create Purchase Order, assign Lot Item Tracking on Purchase Line. Create Job.
      Initialize;
      CreatePurchaseOrderWithLotNoInItemTracking(PurchaseLine);
      CreateJobWithJobTask(JobTask);

      // Exercise: Fill Job No. and Job Task No. on Purchase Line with Lot No. Tracking assigned
      UpdatePurchaseLineWithJobTask(PurchaseLine,JobTask);

      // Verify: The Job No. can be filled on Purchase Line
      PurchaseLine.TESTFIELD("Job No.",JobTask."Job No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OpenItemTrackingHandler,StrMenuHandler,CreatePickFromWhseShptReqHandler)]
    PROCEDURE RFH360214_CreateWhseShptWithModifyingRsvdQtyAndAssignedItemTracking@89();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      WhseShipmentLine@1000 : Record 7321;
    BEGIN
      // [SCENARIO 360214] "Qty. to Handle (Base)" is not correctly maintained after a modifying reserved and assigned Item Tracking in a Warehouse Shipment.
      Initialize;

      // [GIVEN] Post Purchase Order then Create and Release Sales Order For Item With Item Tracking
      PostPurchaseOrderAndCreateReleasedSalesOrder(SalesHeader,SalesLine);

      // [GIVEN] Create Whse. Shipment and Register Pick and assign Lot No on Item Tracking Lines in Whse. Shipment
      CreateWhseShipWithItemTrackingLines(WhseShipmentLine,SalesHeader,SalesLine);

      // [WHEN] Post Whse Shipment Line
      PostWhseShptLine(WhseShipmentLine);

      // [THEN] Verify Reserve Entry Qty. To Handle (Base) is equal to Sales Line Quantity (Base)
      VerifyQuantityOnPostWhseShipLine(WhseShipmentLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler)]
    PROCEDURE ReclassifiedLotExpirationDateInInboundILE@91();
    VAR
      Item@1000 : Record 27;
      LotNo@1004 : Code[20];
      Qty@1003 : Integer;
      NewExpirationDate@1002 : Date;
    BEGIN
      // [SCENARIO 361348] After a lot expiration date is changed via reclassification journal, new expiration date is used for all inbounds with the same lot no.
      Initialize;

      // [GIVEN] Item with lot no. tracking and expiration date
      LotNo := LibraryUtility.GenerateGUID;
      Qty := LibraryRandom.RandInt(100);
      CreateItem(Item,CreateItemTrackingCodeLotSpecific(TRUE),'',LibraryUtility.GetGlobalNoSeriesCode);

      // [GIVEN] One lot with expiration date = D1 on inventory
      PostPositiveAdjmtWithLotExpTracking(Item,Qty,LotNo,WORKDATE);

      // [GIVEN] Post reclassification journal to change lot expiration date. New expiration date = D2
      NewExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      PostExpDateReclassification(Item,Qty,LotNo,NewExpirationDate);

      // [GIVEN] Post outbound item ledger entry, so that all item ledger entries are closed
      PostNegativeAdjmtWithLotNo(Item,LotNo,Qty);

      // [WHEN] New inbound entry is posted
      PostPositiveAdjmtWithLotNo(Item,LotNo,Qty);

      // [THEN] Expiration date in the last inbound Item Ledger Entry is D2
      VerifyExpirationDateOnItemLedgerEntry(Item."No.",TRUE,NewExpirationDate);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE SalesOrderPartialTracking@109();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      LotNo@1000 : Code[10];
    BEGIN
      // [FEATURE] [Shipment] [Item Tracking]
      // [SCENARIO 122002] Partial Shipment for an Item with free entry tracking can be posted with tracking after a Shipment without tracking.

      // [GIVEN] Item with free entry Item Tracking.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandIntInRange(50,100));

      // [GIVEN] Post the partial Shipment without assigning Lot No.
      PostSalesOrderPartialShip(SalesHeader,SalesLine);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);

      // [GIVEN] Assign Lot No in Sales Line.
      SalesLine.OpenItemTrackingLines;

      // [WHEN] Post the second Shipment with assigned Lot No. "X"
      SalesLine.FIND;
      PostSalesOrderPartialShip(SalesHeader,SalesLine);

      // [THEN] Shipment is posted, created ILE where "Lot No." = "X"
      VerifyFreeEntryTrackingExists(Item."No.",LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE SalesReturnOrderPartialTracking@110();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1000 : Record 27;
      LotNo@1001 : Code[10];
    BEGIN
      // [FEATURE] [Return Receipt] [Item Tracking]
      // [SCENARIO 122002] Partial Receipt for an Item with free entry tracking can be posted with tracking after a Receipt without tracking (Sales Return).

      // [GIVEN] Item with free entry Item Tracking.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Item."No.",LibraryRandom.RandIntInRange(50,100));

      // [GIVEN] Post the partial Receipt without assigning Lot No.
      PostSalesReturnOrderPartialRcpt(SalesHeader,SalesLine);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);

      // [GIVEN] Assign Lot No in Sales Line.
      SalesLine.OpenItemTrackingLines;

      // [WHEN] Post the second Receipt with assigned Lot No. "X"
      SalesLine.FIND;
      PostSalesReturnOrderPartialRcpt(SalesHeader,SalesLine);

      // [THEN] Receipt is posted, created ILE where "Lot No." = "X"
      VerifyFreeEntryTrackingExists(Item."No.",LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE PurchaseOrderPartialTracking@137();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      LotNo@1000 : Code[10];
    BEGIN
      // [FEATURE] [Receipt] [Item Tracking]
      // [SCENARIO 122002] Partial Receipt for an Item with free entry tracking can be posted with tracking after a Receipt without tracking.

      // [GIVEN] Item with free entry Item Tracking.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,Item."No.",
        LibraryRandom.RandIntInRange(50,100));

      // [GIVEN] Post the partial Receipt without assigning Lot No.
      PostPurchaseOrderPartialRcpt(PurchaseHeader,PurchaseLine);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);

      // [GIVEN] Assign Lot No in Purchase Line.
      PurchaseLine.OpenItemTrackingLines;

      // [WHEN] Post the second Receipt with assigned Lot No. "X"
      PurchaseLine.FIND;
      PostPurchaseOrderPartialRcpt(PurchaseHeader,PurchaseLine);

      // [THEN] Receipt is posted, created ILE where "Lot No." = "X"
      VerifyFreeEntryTrackingExists(Item."No.",LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE PurchaseReturnOrderPartialTracking@138();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      Item@1000 : Record 27;
      LotNo@1001 : Code[10];
    BEGIN
      // [FEATURE] [Return Shipment] [Item Tracking]
      // [SCENARIO 122002] Partial Shipment for an Item with free entry tracking can be posted with tracking after a Shipment without tracking (Purchase Return).

      // [GIVEN] Item with free entry Item Tracking.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      LotNo := LibraryUtility.GenerateGUID;
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",
        Item."No.",LibraryRandom.RandIntInRange(50,100));

      // [GIVEN] Post the partial Shipment without assigning Lot No.
      PostPurchaseReturnOrderPartialShip(PurchaseHeader,PurchaseLine);
      LibraryVariableStorage.Enqueue(LotNo);

      // [GIVEN] Assign Lot No in Purchase Line.
      PurchaseLine.OpenItemTrackingLines;

      // [WHEN] Post the second Shipment with assigned Lot No. "X"
      PurchaseLine.FIND;
      PostPurchaseReturnOrderPartialShip(PurchaseHeader,PurchaseLine);

      // [THEN] Shipment is posted, created ILE where "Lot No." = "X"
      VerifyFreeEntryTrackingExists(Item."No.",LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE SalesOrderPartialTrackingError@111();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      LotNo@1000 : Code[10];
    BEGIN
      // [FEATURE] [Shipment] [Item Tracking]
      // [SCENARIO 122002] Verify partial Item Tracking posting error for free entry tracked Item, Sales Order, when Quantity <> tracked Quantity.

      // [GIVEN] Item with free entry Item Tracking, partially shipped Sales Order. Assign Lot No in Sales Line.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandIntInRange(50,100));
      PostSalesOrderPartialShip(SalesHeader,SalesLine);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);
      SalesLine.OpenItemTrackingLines;

      // [GIVEN] Sales Line quantity to ship is not equal to tracked quantity.
      WITH SalesLine DO BEGIN
        FIND;
        VALIDATE("Qty. to Ship",2); // 1(tracked quantity) + 1
        MODIFY(TRUE);
      END;

      // [WHEN] Post Sales Order.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] The error "Quantity to Ship does not match tracked quantity".
      Assert.AreEqual(
        STRSUBSTNO(TrackedQuantityErr,SalesLine.FIELDCAPTION("Qty. to Ship")),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSingleLineLotHandler)]
    PROCEDURE PurchaseOrderPartialTrackingError@113();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      LotNo@1000 : Code[10];
    BEGIN
      // [FEATURE] [Receipt] [Item Tracking]
      // [SCENARIO 122002] Verify partial Item Tracking posting error for free entry tracked Item, Purchase Order, when Quantity <> tracked Quantity.

      // [GIVEN] Item with free entry Item Tracking, partially received Purchase Order. Assign Lot No in Purchase Line.
      Initialize;
      CreateItem(Item,CreateItemTrackingCodeFreeEntry,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,Item."No.",
        LibraryRandom.RandIntInRange(50,100));
      PostPurchaseOrderPartialRcpt(PurchaseHeader,PurchaseLine);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);
      PurchaseLine.OpenItemTrackingLines;

      // [GIVEN] Purchase Line quantity to receive is not equal to tracked quantity.
      WITH PurchaseLine DO BEGIN
        FIND;
        VALIDATE("Qty. to Receive",2); // 1(tracked quantity) + 1
        MODIFY(TRUE);
      END;

      // [WHEN] Post Purchase Order.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] The error "Quantity to Receive does not match tracked quantity".
      Assert.AreEqual(
        STRSUBSTNO(TrackedQuantityErr,PurchaseLine.FIELDCAPTION("Qty. to Receive")),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ConfirmHandlerTrue)]
    PROCEDURE UndoPurchaseReceiptContainsExpirationDate@129();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1000 : Record 121;
      ItemLedgerEntry@1002 : Record 32;
      ExpirationDate@1003 : Date;
    BEGIN
      // [FEATURE] [Undo Purchase Receipt] [Item Tracking] [Expiration Date]
      // [SCENARIO 130271] Item Ledger Entry for undo of Purchase Receipt with "Expiration Date" should contain "Expiration Date".

      // [GIVEN] Post Purchase Order where "Expiration Date" = "D"
      Initialize;
      ExpirationDate := WORKDATE + LibraryRandom.RandInt(10);
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,ExpirationDate);
      FindPurchRcptLine(PurchRcptLine,PurchaseLine);

      // [WHEN] Undo Purchase Receipt.
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [THEN] "Expiration Date" = "D" in undo Item Ledger Entry.
      ItemLedgerEntry.FINDLAST;
      ItemLedgerEntry.TESTFIELD("Expiration Date",ExpirationDate);
    END;

    [Test]
    PROCEDURE ErrorMessageWithLineNoShownWhenPostItemJnlLineWithoutLotNo@107();
    VAR
      Item@1000 : Record 27;
      LineNo@1001 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 378978] Error message with current "Line No." is shown when post Item Journal Line without "Lot No." assigned

      Initialize;

      // [GIVEN] Item "X" with "Lot Specific Tracking"
      CreateItemWithTrackingCode(Item,TRUE,FALSE);

      // [WHEN] Post Item Journal Line without "Lot No." assigned
      ASSERTERROR CreatePostItemJnlLine(LineNo,Item."No.");

      // [THEN] Error Message "Lot No. required. Line No. = '10000'" is shown
      Assert.AreEqual(
        GETLASTERRORTEXT,STRSUBSTNO(LotNoRequiredErr,Item."No.") + STRSUBSTNO(LineNoTxt,LineNo),IncorrectErrorMessageErr);
    END;

    [Test]
    PROCEDURE ErrorMessageWithLineNoShownWhenPostItemJnlLineWithoutSerialNo@128();
    VAR
      Item@1000 : Record 27;
      LineNo@1001 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 378978] Error message with current "Line No." is shown when post Item Journal Line without "Serial No." assigned

      Initialize;

      // [GIVEN] Item "X" with "SN Specific Tracking"
      CreateItemWithTrackingCode(Item,FALSE,TRUE);

      // [WHEN] Post Item Journal Line without "Serial No." assigned
      ASSERTERROR CreatePostItemJnlLine(LineNo,Item."No.");

      // [THEN] Error Message "Serial No. required. Line No. = '10000'" is shown
      Assert.AreEqual(
        GETLASTERRORTEXT,STRSUBSTNO(SerialNoRequiredErr,Item."No.") + STRSUBSTNO(LineNoTxt,LineNo),IncorrectErrorMessageErr);
    END;

    [Test]
    PROCEDURE LotNoRequiredErrorMessageShownWhenPostPurchOrderWithoutLotNo@157();
    VAR
      Item@1001 : Record 27;
      PurchHeader@1000 : Record 38;
      PurchLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Item Tracking] [Purchase]
      // [SCENARIO 378978] Error message "Lot No. required" is shown when post Purchase Order without "Lot No." assigned

      Initialize;

      // [GIVEN] Item "X" with "Lot Specific Tracking"
      CreateItemWithTrackingCode(Item,TRUE,FALSE);

      // [GIVEN] Purchase Order with Item "X" without "Lot No." assigned
      CreatePurchaseOrder(PurchHeader,PurchLine,Item."No.");

      // [WHEN] Post Purchase Document
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Error Message "Lot No. required." is shown
      Assert.AreEqual(
        GETLASTERRORTEXT,STRSUBSTNO(LotNoRequiredErr,Item."No."),IncorrectErrorMessageErr);
    END;

    [Test]
    PROCEDURE SerialNoRequiredErrorMessageShownWhenPostPurchOrderWithoutSerialNo@126();
    VAR
      Item@1001 : Record 27;
      PurchHeader@1000 : Record 38;
      PurchLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Item Tracking] [Purchase]
      // [SCENARIO 378978] Error message "Serial No. required" is shown when post Purchase Order without "Lot No." assigned

      Initialize;

      // [GIVEN] Item "X" with "SN Specific Tracking"
      CreateItemWithTrackingCode(Item,FALSE,TRUE);

      // [GIVEN] Purchase Order with Item "X" without "Serial No." assigned
      CreatePurchaseOrder(PurchHeader,PurchLine,Item."No.");

      // [WHEN] Post Purchase Document
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Error Message "Serial No. required." is shown
      Assert.AreEqual(
        GETLASTERRORTEXT,STRSUBSTNO(SerialNoRequiredErr,Item."No."),IncorrectErrorMessageErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler,MessageHandler)]
    PROCEDURE ItemTrackingIsCopiedFromJobPlanningLineToJobJournal@33();
    VAR
      JobPlanningLine@1002 : Record 1003;
      JobJournalTemplate@1003 : Record 209;
      JobJournalBatch@1004 : Record 237;
      JobJournalLine@1005 : Record 210;
      JobTransferLine@1006 : Codeunit 1004;
      LotNo@1008 : Code[10];
    BEGIN
      // [FEATURE] [Job] [Job Journal]
      // [SCENARIO 380627] Item Tracking should be copied from Job Planning Line to Job Journal Line.
      Initialize;

      // [GIVEN] Lot-tracked Item with "Reordering Policy" = Order.
      // [GIVEN] Job Planning Line for Item.
      // [GIVEN] Purchase Order created out of Requisition Worksheet to cover the planning demand.
      // [GIVEN] Purchase Order is tracked and posted with Receive option.
      CreateReservedJobPlanningLine(JobPlanningLine,LotNo);

      // [WHEN] Create Job Journal Line from Job Planning Line.
      JobTransferLine.FromPlanningLineToJnlLine(JobPlanningLine,WORKDATE,LibraryJob.GetJobJournalTemplate(JobJournalTemplate),
        LibraryJob.CreateJobJournalBatch(LibraryJob.GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch),JobJournalLine);

      // [THEN] Item Tracking is transferred to Job Journal Line.
      VerifyJobJournalLineReservEntry(JobJournalLine,LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrkgManualLotNoHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ItemPostedByJobJournalInheritsTrackingFromJobPlanningLine@103();
    VAR
      JobPlanningLine@1005 : Record 1003;
      JobJournalTemplate@1004 : Record 209;
      JobJournalBatch@1003 : Record 237;
      JobJournalLine@1002 : Record 210;
      JobTransferLine@1001 : Codeunit 1004;
      LotNo@1000 : Code[10];
    BEGIN
      // [FEATURE] [Job] [Job Journal]
      // [SCENARIO 380627] Item Ledger Entry which is created by posting of Job Journal Line with inherited Item Tracking contains Lot No. from Job Planning Line.
      Initialize;

      // [GIVEN] Lot-tracked Item "I" with "Reordering Policy" = Order.
      // [GIVEN] Job Planning Line for Item.
      // [GIVEN] Purchase Order created out of Requisition Worksheet to cover the planning demand.
      // [GIVEN] Lot "L" is assigned to Purchase Line.
      // [GIVEN] Purchase Order is posted with Receive option.
      CreateReservedJobPlanningLine(JobPlanningLine,LotNo);

      // [GIVEN] Job Journal Line is created from Job Planning Line.
      JobTransferLine.FromPlanningLineToJnlLine(JobPlanningLine,WORKDATE,LibraryJob.GetJobJournalTemplate(JobJournalTemplate),
        LibraryJob.CreateJobJournalBatch(LibraryJob.GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch),JobJournalLine);

      // [WHEN] Post Job Journal Line.
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Item Ledger Entry with Item "I" and Lot "L" is created.
      VerifyItemLedgerEntryLotNo(JobJournalLine."Document No.",JobJournalLine."No.",LotNo);
    END;

    [Test]
    PROCEDURE TestExpirationDateWithLotAndSerialPositive@122();
    VAR
      TempTrackingSpecification@1000 : TEMPORARY Record 336;
      ItemTrackingManagement@1001 : Codeunit 6500;
      LotNo@1002 : Code[20];
      I@1003 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381065] Function TestExpDateOnTrackingSpec in codeunit 6500 should not throw an error when two tracking lines with the same lot and different serial numbers have different expiration dates

      LotNo := LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("Lot No."),DATABASE::"Tracking Specification");

      FOR I := 1 TO 2 DO
        MockTrackingSpecification(
          TempTrackingSpecification,I,LotNo,
          LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification"),
          WORKDATE + I);

      ItemTrackingManagement.TestExpDateOnTrackingSpec(TempTrackingSpecification);
    END;

    [Test]
    PROCEDURE TestExpirationDateWithLotAndSerialNegative@121();
    VAR
      TempTrackingSpecification@1000 : TEMPORARY Record 336;
      ItemTrackingManagement@1001 : Codeunit 6500;
      LotNo@1002 : Code[20];
      SerialNo@1004 : Code[20];
      I@1003 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381065] Function TestExpDateOnTrackingSpec in codeunit 6500 should throw an error when two tracking lines with the same lot and serial number have different expiration dates

      LotNo := LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("Lot No."),DATABASE::"Tracking Specification");
      SerialNo :=
        LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification");

      FOR I := 1 TO 2 DO
        MockTrackingSpecification(TempTrackingSpecification,I,LotNo,SerialNo,WORKDATE + I);

      ASSERTERROR ItemTrackingManagement.TestExpDateOnTrackingSpec(TempTrackingSpecification);
      Assert.ExpectedError(STRSUBSTNO(MultipleExpDateForLotErr,LotNo));
    END;

    [Test]
    PROCEDURE TestExpirationDateWithNewLotAndNewSerialPositive@117();
    VAR
      TempTrackingSpecification@1003 : TEMPORARY Record 336;
      ItemTrackingManagement@1002 : Codeunit 6500;
      LotNo@1001 : Code[20];
      I@1000 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381065] Function TestExpDateOnTrackingSpec in codeunit 6500 should not throw an error when two tracking lines with the same "New Lot No." and different "New serial nos." have different expiration dates

      LotNo := LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("New Lot No."),DATABASE::"Tracking Specification");

      FOR I := 1 TO 2 DO
        MockTrackingSpecification(
          TempTrackingSpecification,I,LotNo,
          LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification"),
          WORKDATE + I);

      ItemTrackingManagement.TestExpDateOnTrackingSpecNew(TempTrackingSpecification);
    END;

    [Test]
    PROCEDURE TestExpirationDateWithNewLotAndNewSerialNegative@108();
    VAR
      TempTrackingSpecification@1003 : TEMPORARY Record 336;
      ItemTrackingManagement@1002 : Codeunit 6500;
      LotNo@1001 : Code[20];
      I@1000 : Integer;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381065] Function TestExpDateOnTrackingSpec in codeunit 6500 should throw an error when two tracking lines with the same "New Lot No." without serial numbers have different expiration dates

      LotNo := LibraryUtility.GenerateRandomCode(TempTrackingSpecification.FIELDNO("New Lot No."),DATABASE::"Tracking Specification");

      FOR I := 1 TO 2 DO
        MockTrackingSpecification(TempTrackingSpecification,I,LotNo,'',WORKDATE + I);

      ASSERTERROR ItemTrackingManagement.TestExpDateOnTrackingSpecNew(TempTrackingSpecification);
      Assert.ExpectedError(STRSUBSTNO(MultipleExpDateForLotErr,LotNo));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryHandler)]
    PROCEDURE PurchReturnOrderForExpiredItemWithoutApplication@140();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Return Order] [Expiration Date]
      // [SCENARIO 209105] It should be possible to post a purchase return order with an expired item without item ledger application

      Initialize;
      // [GIVEN] Purchase item "I" with expiration date 01.03.YY
      LibraryVariableStorage.Enqueue(TrackingOptionStr::AssignSerialNo);
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);

      // [GIVEN] Create purchase return order for item "I" with posting date 02.03.YY. Select the serial no. from the posted purchase entry.
      CreatePurchaseDocumentWithPostingDate(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.",WORKDATE + 1,
        PurchaseLine."No.",PurchaseLine.Quantity);

      // [WHEN] Post the purchase return order
      PostPurchaseDocumentWithTracking(PurchaseLine,TrackingOptionStr::SelectEntries);

      // [THEN] Purchase return entry is created with expiration date 01.03.YY
      VerifyExpirationDateOnItemLedgerEntry(PurchaseLine."No.",FALSE,WORKDATE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryHandler)]
    PROCEDURE PurchCreditMemoForExpiredItem@169();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Expiration Date]
      // [SCENARIO 209105] It should be possible to post a purchase credit memo for an expired item

      Initialize;
      // [GIVEN] Purchase item "I" with expiration date 01.03.YY
      LibraryVariableStorage.Enqueue(TrackingOptionStr::AssignSerialNo);
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);

      // [GIVEN] Create purchase credit memo for item "I" with posting date 02.03.YY. Select the serial no. from the posted purchase entry.
      CreatePurchaseDocumentWithPostingDate(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine."Buy-from Vendor No.",WORKDATE + 1,
        PurchaseLine."No.",PurchaseLine.Quantity);

      // [WHEN] Post the purchase credit memo
      PostPurchaseDocumentWithTracking(PurchaseLine,TrackingOptionStr::SelectEntries);

      // [THEN] Purchase return entry is created with expiration date 01.03.YY
      VerifyExpirationDateOnItemLedgerEntry(PurchaseLine."No.",FALSE,WORKDATE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignTrackingNoAndVerifyQuantityHandler,EnterQuantityToCreateHandler,GetPostedDocLinesPageHandler)]
    PROCEDURE PurchReturnOrderForExpiredItemWithApplication@155();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      // [FEATURE] [Purchase] [Return Order] [Expiration Date]
      // [SCENARIO 209105] It should be possible to post a purchase return order with an expired item with item ledger application

      Initialize;
      // [GIVEN] Purchase item "I" with expiration date 01.03.YY
      LibraryVariableStorage.Enqueue(TrackingOptionStr::AssignSerialNo);
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);

      ItemLedgerEntry.SETRANGE("Item No.",PurchaseLine."No.");
      ItemLedgerEntry.FINDFIRST;

      // [GIVEN] Create purchase return order for item "I" with posting date 02.03.YY.
      CreatePurchaseHeaderWithPostingDate(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.",WORKDATE + 1);
      // [GIVEN] Run "Get Posted Document Lines to Reverse" to retrive lines from the posted purchase receipt
      PurchaseHeader.GetPstdDocLinesToRevere;

      // [WHEN] Post the purchase return order
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Purchase return entry is created with expiration date 01.03.YY
      VerifyExpirationDateOnItemLedgerEntry(PurchaseLine."No.",FALSE,WORKDATE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryModalPageHandler)]
    PROCEDURE ItemTrackingSelectEntriesIsNotEditableWhenInvokedFromInboundLine@132();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 213204] Selected Quantity should neither be visible nor editable on Item Entry Summary page when it is invoked from Item Tracking of inbound document line.
      Initialize;

      // [GIVEN] Posted Purchase Order with a serial no. tracked item "X".
      CreateAndPostPurchaseOrderWithItemTracking(PurchaseLine,WORKDATE);
      ItemNo := PurchaseLine."No.";

      // [GIVEN] Another Purchase Order with item "X".
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);

      // [WHEN] Open Item Tracking Lines for the purchase line and click "Select Entries".
      SalesMode := TRUE;
      PurchaseLine.OpenItemTrackingLines;

      // [THEN] Selected Quantity field is not visible on Item Tracking Summary page.
      // [THEN] Selected Quantity field is not editable on Item Tracking Summary page.
      // Verification is done in ItemTrackingSummaryModalPageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Clear global variables.
      CLEAR(SalesMode);
      CLEAR(AssignLotNo);
      CLEAR(AssignSerialNo);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalcQtyToHandleInReservEntries@53(LotNo@1002 : Code[20]) : Decimal;
    VAR
      ReservEntry@1000 : Record 337;
      Qty@1001 : Decimal;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Lot No.",LotNo);
        FINDSET;
        REPEAT
          Qty += "Qty. to Handle (Base)";
        UNTIL NEXT = 0;
      END;

      EXIT(Qty);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithItemTracking@57(VAR PurchaseLine@1001 : Record 39;ExpirationDate@1002 : Date) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      Item@1003 : Record 27;
    BEGIN
      CreateItem(
        Item,CreateItemTrackingCodeSerialSpecific(TRUE),LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      AssignSerialNo := TRUE;  // Use AssignSerialNo as global variable for Handler.
      PurchaseLine.OpenItemTrackingLines;
      UpdateReservationEntry(PurchaseLine."No.",ExpirationDate);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));  // Post Purchase Order as Receive.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithLotNoInItemTracking@16(VAR PurchaseLine@1001 : Record 39);
    VAR
      PurchaseHeader@1004 : Record 38;
    BEGIN
      CreatePurchaseOrderWithLotNoInItemTracking(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post Purchase Order as Receive.
    END;

    LOCAL PROCEDURE PostJrnlLineWithPurchaseOnThreeLotsAndCalcQtySale@112(Item@1000 : Record 27;LocationCode@1001 : Code[10];VAR QtySale@1011 : Decimal);
    VAR
      ItemJournalLine@1010 : Record 83;
      ItemJournalBatch@1009 : Record 233;
      LotCount@1008 : Integer;
      LotQty@1007 : ARRAY [3] OF Decimal;
      QtyPurchase@1006 : Decimal;
      TempQty@1004 : Decimal;
      LotNo@1003 : ARRAY [3] OF Code[10];
      iLot@1002 : Integer;
    BEGIN
      LotCount := ARRAYLEN(LotQty);

      FOR iLot := 1 TO LotCount DO BEGIN
        LotNo[iLot] := LibraryUtility.GenerateGUID;
        LotQty[iLot] := LibraryRandom.RandInt(10);
        TempQty += LotQty[iLot]; // LotQty[3] > SUM(LotQty[1 .. LotQty - 1])
      END;
      LotQty[LotCount] := TempQty;

      // QtyPurchase > QtySale > SUM(LotQty[1 .. LotQty - 1])
      QtySale := LotQty[LotCount];
      QtyPurchase := LotQty[1] + LotQty[2] + LotQty[3];

      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryPatterns.MAKEItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,LocationCode,'',WORKDATE,ItemJournalLine."Entry Type"::"Positive Adjmt.",QtyPurchase,0);
      LibraryVariableStorage.Enqueue(LotCount);
      FOR iLot := 1 TO LotCount DO BEGIN
        LibraryVariableStorage.Enqueue(LotNo[iLot]);
        LibraryVariableStorage.Enqueue(LotQty[iLot]);
      END;

      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateLocationWithPickAndShip@104(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithTrackingCode@192(VAR Item@1001 : Record 27;LotSpecificTracking@1002 : Boolean;SNSpecificTracking@1003 : Boolean);
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryInventory.CreateItemTrackingCode(ItemTrackingCode);
      ItemTrackingCode.VALIDATE("Lot Specific Tracking",LotSpecificTracking);
      ItemTrackingCode.VALIDATE("SN Specific Tracking",SNSpecificTracking);
      ItemTrackingCode.MODIFY(TRUE);
      LibraryPatterns.MAKEItemSimple(Item,Item."Costing Method"::Standard,LibraryPatterns.RandCost(Item));
      WITH Item DO BEGIN
        VALIDATE(Reserve,Reserve::Always);
        VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateReleasedSalesOrder@120(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1003 : Record 37;Item@1001 : Record 27;LocationCode@1002 : Code[10];QtySale@1004 : Decimal);
    VAR
      ReservMgt@1005 : Codeunit 99000845;
      FullAutoReservation@1006 : Boolean;
    BEGIN
      LibraryPatterns.MAKESalesOrder(
        SalesHeader,SalesLine,Item,LocationCode,'',QtySale,WORKDATE,LibraryRandom.RandDec(1000,2));
      ReservMgt.SetSalesLine(SalesLine);
      ReservMgt.AutoReserve(FullAutoReservation,'',WORKDATE,QtySale,QtySale);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE PostWhseShptLine@105(WhseShipmentLine@1000 : Record 7321);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Whse.-Post Ship. (Ship/Invoic)",WhseShipmentLine);
    END;

    LOCAL PROCEDURE PostPurchaseOrderAndCreateReleasedSalesOrder@118(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      Item@1038 : Record 27;
      Location@1037 : Record 14;
      WarehouseEmployee@1035 : Record 7301;
      QtySale@1000 : Decimal;
    BEGIN
      CreateItemWithTrackingCode(Item,TRUE,FALSE);
      CreateLocationWithPickAndShip(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      PostJrnlLineWithPurchaseOnThreeLotsAndCalcQtySale(Item,Location.Code,QtySale);
      CreateReleasedSalesOrder(SalesHeader,SalesLine,Item,Location.Code,QtySale);
    END;

    LOCAL PROCEDURE CreateWhseShipWithItemTrackingLines@123(VAR WhseShipmentLine@1002 : Record 7321;SalesHeader@1012 : Record 36;SalesLine@1001 : Record 37);
    VAR
      WhseShipmentHeader@1010 : Record 7320;
      WhseActivityLine@1003 : Record 5767;
      ReservEntry@1000 : Record 337;
      WhseShptRlse@1005 : Codeunit 7310;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      FindWhseShipmentLine(WhseShipmentLine,SalesHeader);
      WhseShipmentHeader.GET(WhseShipmentLine."No.");
      WhseShptRlse.Release(WhseShipmentHeader);
      WhseShipmentLine.CreatePickDoc(WhseShipmentLine,WhseShipmentHeader);

      FindWhseActivityLine(WhseActivityLine,WhseShipmentHeader."No.");

      CODEUNIT.RUN(CODEUNIT::"Whse.-Activity-Register",WhseActivityLine);

      ReservEntry.SETRANGE("Item No.",SalesLine."No.");
      ReservEntry.FINDLAST;

      WITH LibraryVariableStorage DO BEGIN
        Enqueue(1); // number of Lot to create for Item Tracking Lines
        Enqueue(ReservEntry."Lot No.");
        Enqueue(SalesLine."Quantity (Base)");
      END;
      SalesLine.OpenItemTrackingLines; // Create ItemTrackingLine for Lot3 Manually using OpenItemTrackingHandler Handler
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithLotNoInItemTracking@77(VAR PurchaseLine@1001 : Record 39);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreateItem(Item,CreateItemTrackingCodeLotSpecific(FALSE),'',LibraryUtility.GetGlobalNoSeriesCode);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      AssignLotNo := TRUE; // Use AssignLotNo as global variable for Handler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleLotNoInItemTracking@83(VAR PurchaseLine@1001 : Record 39;DocumentType@1006 : Option;VAR QuantityBase@1003 : ARRAY [2] OF Decimal;VAR QtyToHandle@1004 : ARRAY [2] OF Decimal);
    VAR
      i@1007 : Integer;
    BEGIN
      CreatePurchaseDocumentWithJob(PurchaseLine,DocumentType);
      LibraryVariableStorage.Enqueue(TrackingOptionStr::SetLotQty);
      LibraryVariableStorage.Enqueue(ARRAYLEN(QuantityBase)); // Create 2 Item Tracking Line;
      QuantityBase[1] := PurchaseLine."Quantity (Base)" / LibraryRandom.RandIntInRange(3,5);
      QuantityBase[2] := PurchaseLine."Quantity (Base)" - QuantityBase[1];
      FOR i := 1 TO ARRAYLEN(QuantityBase) DO BEGIN
        QtyToHandle[i] := QuantityBase[i] / LibraryRandom.RandIntInRange(3,5);
        LibraryVariableStorage.Enqueue(QuantityBase[i]); // Enqueue value for ItemTrackingLines."Quantity (Base)"
        LibraryVariableStorage.Enqueue(QtyToHandle[i]); // Enqueue value for ItemTrackingLines."Qty. to Handle (Base)"
      END;
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithItemTracking@72(No@1001 : Code[20];Quantity@1005 : Decimal;Days@1003 : Integer;LocationCode@1006 : Code[10]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,No,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      AssignSerialNo := FALSE;  // Use AssignSerialNo as global variable for Handler.
      SalesMode := TRUE;  // Use SalesMode as global variable for Handler.
      SalesLine.OpenItemTrackingLines;
      SalesHeader.VALIDATE("Posting Date",CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));  // Post Sales Order as Ship.
    END;

    LOCAL PROCEDURE CreateSOWithPOAndILEReservationAndOneItemTracking@45(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      Item@1002 : Record 27;
      ItemInventoryQty@1000 : Decimal;
    BEGIN
      CreateItem(Item,CreateItemTrackingWithSalesSerialNos,LibraryUtility.GetGlobalNoSeriesCode,'');
      ItemInventoryQty := LibraryRandom.RandInt(100);
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',ItemInventoryQty,WORKDATE,Item."Unit Cost");

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",PurchaseLine.Quantity + ItemInventoryQty);
      SalesLine.ShowReservation;
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateVendor@36() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@24() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@21(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10];SerialNos@1002 : Code[10];LotNos@1003 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",SerialNos);
      Item.VALIDATE("Lot Nos.",LotNos);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotTrackedItemForPlanning@158(VAR Item@1000 : Record 27);
    BEGIN
      CreateItemWithTrackingCode(Item,TRUE,FALSE);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@97(VAR ItemJnlLine@1000 : Record 83;Item@1003 : Record 27;EntryType@1004 : Option;Qty@1005 : Decimal;UnitAmount@1006 : Decimal);
    VAR
      ItemJnlTemplate@1002 : Record 82;
      ItemJnlBatch@1001 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJnlBatch,ItemJnlTemplate.Type::Item);
      LibraryPatterns.MAKEItemJournalLine(ItemJnlLine,ItemJnlBatch,Item,'','',WORKDATE,EntryType,Qty,UnitAmount);
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeLotSpecific@35(ExpDateRequired@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      ItemTrackingCode.VALIDATE("Lot Purchase Inbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Purchase Outbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Sales Inbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Sales Outbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Manuf. Inbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Manuf. Outbound Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ExpDateRequired);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeTransferLotTracking@39() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      ItemTrackingCode.VALIDATE("Lot Transfer Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeSerialSpecific@10(StrictExpirationPosting@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",StrictExpirationPosting);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemTrackingWithSalesSerialNos@62() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      WITH ItemTrackingCode DO BEGIN
        VALIDATE("SN Sales Inbound Tracking",TRUE);
        VALIDATE("SN Sales Outbound Tracking",TRUE);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeFreeEntry@125() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@161(VAR JobPlanningLine@1001 : Record 1003;ItemNo@1000 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      WITH JobPlanningLine DO BEGIN
        LibraryJob.CreateJobPlanningLine("Line Type"::Schedule,Type::Item,JobTask,JobPlanningLine);
        VALIDATE("No.",ItemNo);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        VALIDATE("Usage Link",TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateReservedJobPlanningLine@173(VAR JobPlanningLine@1005 : Record 1003;VAR LotNo@1000 : Code[10]);
    VAR
      Item@1006 : Record 27;
    BEGIN
      CreateLotTrackedItemForPlanning(Item);
      LotNo := LibraryUtility.GenerateGUID;

      CreateJobPlanningLine(JobPlanningLine,Item."No.");
      CalculatePlanAndCarryOutReqWorksheet(Item);
      PostPurchaseOrderWithLotTracking(Item."Vendor No.",LotNo);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@51(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20]);
    BEGIN
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,ItemNo,LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@65(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option;ItemNo@1002 : Code[20];ItemQty@1004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,ItemQty);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithPostingDate@177(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;DocumentType@1001 : Option;VendorNo@1002 : Code[20];PostingDate@1003 : Date;ItemNo@1005 : Code[20];Qty@1006 : Decimal);
    BEGIN
      CreatePurchaseHeaderWithPostingDate(PurchaseHeader,DocumentType,VendorNo,PostingDate);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Qty);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithPostingDate@172(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option;VendorNo@1001 : Code[20];PostingDate@1002 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@18(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];ItemQty@1004 : Decimal);
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,ItemQty);
    END;

    LOCAL PROCEDURE CreateSalesDocument@127(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1003 : Option;ItemNo@1002 : Code[20];ItemQty@1004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,ItemQty);
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<1D>',WORKDATE));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocument@30(VAR ServiceHeader@1001 : Record 5900;VAR ServiceLine@1000 : Record 5902;DocumentType@1007 : Option;ItemNo@1006 : Code[20];Quantity@1005 : Decimal);
    VAR
      ServiceItem@1003 : Record 5940;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CreateCustomer);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      IF DocumentType = ServiceHeader."Document Type"::Order THEN BEGIN
        LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      END;
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransitLocations@58(VAR FromLocation@1002 : Record 14;VAR ToLocation@1001 : Record 14;VAR InTransitLocation@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(InTransitLocation);
    END;

    LOCAL PROCEDURE CreateTransferOrderOnNewItem@56(VAR TransferHeader@1005 : Record 5740;VAR TransferLine@1004 : Record 5741;Qty@1007 : Decimal);
    VAR
      Item@1006 : Record 27;
      FromLocation@1003 : Record 14;
      ToLocation@1002 : Record 14;
      InTransitLocation@1001 : Record 14;
      ItemTrackingCode@1000 : Code[10];
    BEGIN
      ItemTrackingCode := CreateItemTrackingCodeTransferLotTracking;
      CreateItem(Item,ItemTrackingCode,'','');

      CreateTransitLocations(FromLocation,ToLocation,InTransitLocation);

      LibraryPatterns.MAKETransferOrder(
        TransferHeader,TransferLine,Item,FromLocation,ToLocation,InTransitLocation,'',Qty,WORKDATE,WORKDATE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJobAndLotTracking@63(VAR PurchaseLine@1001 : Record 39;DocumentType@1004 : Option);
    BEGIN
      CreatePurchaseDocumentWithJob(PurchaseLine,DocumentType);
      LibraryVariableStorage.Enqueue(TrackingOptionStr::AssignLotNo);
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@102(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJob@73(VAR PurchaseLine@1000 : Record 39;DocumentType@1004 : Option);
    VAR
      PurchaseHeader@1001 : Record 38;
      Item@1002 : Record 27;
      JobTask@1003 : Record 1001;
    BEGIN
      CreateItem(Item,CreateItemTrackingCodeLotSpecific(FALSE),'',LibraryUtility.GetGlobalNoSeriesCode);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,DocumentType,Item."No.",LibraryRandom.RandInt(5));
      CreateJobWithJobTask(JobTask);
      UpdatePurchaseLineWithJobTask(PurchaseLine,JobTask);
    END;

    LOCAL PROCEDURE InitTransferOrderTwoLinesScenario@50(VAR TransferHeader@1005 : Record 5740;VAR LotNo@1008 : Code[20]);
    VAR
      Item@1006 : Record 27;
      FromLocation@1003 : Record 14;
      ToLocation@1002 : Record 14;
      InTransitLocation@1001 : Record 14;
      TransferLine@1004 : Record 5741;
      TransferOrderPage@1010 : TestPage 5740;
      QtyToUpdate@1009 : 'Quantity,Quantity to Handle,Quantity to Invoice';
      ItemTrackingCode@1000 : Code[10];
      Qty@1007 : Decimal;
    BEGIN
      Initialize;

      // create item, make positive adjustment to FromLocation
      ItemTrackingCode := CreateItemTrackingCodeTransferLotTracking;
      CreateItem(Item,ItemTrackingCode,'','');
      LotNo := LibraryUtility.GenerateGUID;

      CreateTransitLocations(FromLocation,ToLocation,InTransitLocation);

      Qty := LibraryRandom.RandInt(5);
      CreatePositivAdjWithLot(Item."No.",FromLocation.Code,Qty * 2,LotNo);

      // create transfer order with 2 lines
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation.Code,ToLocation.Code,InTransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Qty);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Qty);

      // add tracking specification for lines
      TransferOrderPage.OPENEDIT;
      TransferOrderPage.GOTOKEY(TransferHeader."No.");
      SetTrackingSpecification(TransferOrderPage,LotNo,QtyToUpdate::Quantity,Qty);
      TransferOrderPage.TransferLines.NEXT;
      SetTrackingSpecification(TransferOrderPage,LotNo,QtyToUpdate::Quantity,Qty);
    END;

    LOCAL PROCEDURE CreatePositivAdjWithLot@69(ItemNo@1000 : Code[20];LocationCode@1005 : Code[10];Quantity@1001 : Decimal;LotNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1004 : Record 233;
      ItemJournalTemplate@1003 : Record 82;
      ItemJournalLine@1006 : Record 83;
      QtyToUpdate@1007 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      // add item tracking
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QtyToUpdate::Quantity);
      LibraryVariableStorage.Enqueue(Quantity);

      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatePostItemJnlLine@144(VAR LineNo@1004 : Integer;ItemNo@1000 : Code[20]);
    VAR
      ItemJnlTemplate@1003 : Record 82;
      ItemJnlBatch@1002 : Record 233;
      ItemJnlLine@1001 : Record 83;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJnlTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlBatch."Journal Template Name",ItemJnlBatch.Name,
        ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandInt(100));
      LineNo := ItemJnlLine."Line No.";
      LibraryInventory.PostItemJournalLine(ItemJnlBatch."Journal Template Name",ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE EnqueueLotTrackingSpec@114(LotNo@1000 : Code[20];QtyToUpdate@1001 : Option;Quantity@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QtyToUpdate);
      LibraryVariableStorage.Enqueue(Quantity);
    END;

    LOCAL PROCEDURE FindReservationForItemJournal@116(VAR ReservEntry@1000 : Record 337;ItemNo@1001 : Code[20]);
    BEGIN
      ReservEntry.SETRANGE("Item No.",ItemNo);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
      ReservEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShipmentLine@94(VAR WhseShipmentLine@1000 : Record 7321;SalesHeader@1001 : Record 36);
    BEGIN
      WITH WhseShipmentLine DO BEGIN
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesHeader."Document Type");
        SETRANGE("Source No.",SalesHeader."No.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindWhseActivityLine@101(VAR WhseActivityLine@1000 : Record 5767;WhseShptHdrNo@1001 : Code[20]);
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::Pick);
        SETRANGE("Whse. Document Type","Whse. Document Type"::Shipment);
        SETRANGE("Whse. Document No.",WhseShptHdrNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindPurchRcptLine@71(VAR PurchRcptLine@1000 : Record 121;PurchaseLine@1001 : Record 39);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchaseLine."Document No.");
      PurchRcptLine.SETRANGE("Order Line No.",PurchaseLine."Line No.");
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CalculatePlanAndCarryOutReqWorksheet@164(Item@1003 : Record 27);
    VAR
      ReqWkshTemplate@1002 : Record 244;
      RequisitionWkshName@1001 : Record 245;
      RequisitionLine@1000 : Record 246;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,WORKDATE,WORKDATE);
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE MockTrackingSpecification@130(VAR TrackingSpecification@1000 : Record 336;EntryNo@1001 : Integer;LotNo@1003 : Code[20];SerialNo@1004 : Code[20];ExpirationDate@1007 : Date);
    BEGIN
      TrackingSpecification."Entry No." := EntryNo;
      TrackingSpecification."Item No." :=
        LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("Item No."),DATABASE::"Tracking Specification");
      TrackingSpecification."Serial No." := SerialNo;
      TrackingSpecification."Lot No." := LotNo;
      TrackingSpecification."New Serial No." := SerialNo;
      TrackingSpecification."New Lot No." := LotNo;
      TrackingSpecification."Expiration Date" := ExpirationDate;
      TrackingSpecification."New Expiration Date" := ExpirationDate;
      TrackingSpecification.INSERT;
    END;

    LOCAL PROCEDURE PostSalesOrderPartialShip@40(VAR SalesHeader@1006 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",1);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostSalesReturnOrderPartialRcpt@131(VAR SalesHeader@1006 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Return Qty. to Receive",1);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostPurchaseDocumentWithTracking@190(VAR PurchaseLine@1000 : Record 39;TrackingOption@1002 : Option);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption);
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostPurchaseOrderPartialRcpt@146(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",1);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostPurchaseReturnOrderPartialShip@145(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Return Qty. to Ship",1);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PartialPostPurchaseDocumentWithQty@82(PurchaseLine@1001 : Record 39;Quantity@1002 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CASE PurchaseLine."Document Type" OF
        PurchaseLine."Document Type"::Order:
          PurchaseLine.VALIDATE("Qty. to Receive",Quantity);
        PurchaseLine."Document Type"::"Return Order":
          PurchaseLine.VALIDATE("Return Qty. to Ship",Quantity);
      END;
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PartialPostPurchaseDocumentWithJobAndLotTracking@61(DocumentType@1003 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Setup: Create Purchase Order/Return Order, create Purchase Line with Job No., assign Item Tracking Lot No.
      Initialize;
      CreatePurchaseDocumentWithJobAndLotTracking(PurchaseLine,DocumentType);

      // Exercise: Post partial receive for Purchase Order./Post partial return shipment for Purchase Return Order
      PartialPostPurchaseDocumentWithQty(PurchaseLine,PurchaseLine.Quantity / LibraryRandom.RandIntInRange(3,5));

      // Verify: Verify Qtys on Item Tracking Lines
      VerifyQuantityOnItemTrackingLines(PurchaseLine);
    END;

    LOCAL PROCEDURE PartialPostPurchaseDocumentWithJobAndMultipleLotTracking@79(DocumentType@1003 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
      QuantityBase@1002 : ARRAY [2] OF Decimal;
      QtyToHandle@1004 : ARRAY [2] OF Decimal;
    BEGIN
      // Setup: Create Purchase Order/Return Order, create Purchase Line with Job No., assign multiple Item Tracking Lot No.
      Initialize;
      CreatePurchaseOrderWithMultipleLotNoInItemTracking(PurchaseLine,DocumentType,QuantityBase,QtyToHandle);

      // Exercise: Post partial receive for Purchase Order./Post partial return shipment for Purchase Return Order
      PartialPostPurchaseDocumentWithQty(PurchaseLine,QtyToHandle[1] + QtyToHandle[2]);

      // Verify: Verify Qtys on Item Tracking Lines
      VerifyQuantityOnMultipleItemTrackingLines(PurchaseLine,QuantityBase,QtyToHandle);
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithLotTracking@165(VendorNo@1000 : Code[20];LotNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      QtyToUpdate@1002 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.FINDFIRST;
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      EnqueueLotTrackingSpec(LotNo,QtyToUpdate::Quantity,PurchaseLine.Quantity);
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostExpDateReclassification@142(Item@1003 : Record 27;Quantity@1002 : Decimal;LotNo@1001 : Code[20];NewExpirationDate@1000 : Date);
    VAR
      ItemJnlLine@1004 : Record 83;
      ReservEntry@1006 : Record 337;
      QtyToUpdate@1005 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      CreateItemJournalLine(ItemJnlLine,Item,ItemJnlLine."Entry Type"::Transfer,Quantity,0);

      EnqueueLotTrackingSpec(LotNo,QtyToUpdate::Quantity,Quantity);
      ItemJnlLine.OpenItemTrackingLines(FALSE);

      FindReservationForItemJournal(ReservEntry,Item."No.");
      ReservEntry.VALIDATE("New Expiration Date",NewExpirationDate);
      ReservEntry.VALIDATE("New Lot No.",ReservEntry."Lot No.");
      ReservEntry.MODIFY(TRUE);

      PostItemJournalBatch(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostItemJournalBatch@106(JnlTemplateName@1002 : Code[10];JnlBatchName@1001 : Code[10]);
    VAR
      ItemJnlBatch@1000 : Record 233;
    BEGIN
      ItemJnlBatch.GET(JnlTemplateName,JnlBatchName);
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
    END;

    LOCAL PROCEDURE PostItemJnlLineWithLotNo@100(Item@1002 : Record 27;LotNo@1001 : Code[20];Quantity@1000 : Integer;EntryType@1003 : Option);
    VAR
      ItemJnlLine@1004 : Record 83;
      QtyToUpdate@1005 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      CreateItemJournalLine(ItemJnlLine,Item,EntryType,Quantity,LibraryPatterns.RandCost(Item));
      EnqueueLotTrackingSpec(LotNo,QtyToUpdate::Quantity,Quantity);

      ItemJnlLine.OpenItemTrackingLines(FALSE);

      PostItemJournalBatch(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPositiveAdjmtWithLotExpTracking@139(Item@1001 : Record 27;Quantity@1002 : Decimal;LotNo@1004 : Code[20];ExpirationDate@1006 : Date);
    VAR
      ItemJnlLine@1000 : Record 83;
      ReservEntry@1003 : Record 337;
      QtyToUpdate@1005 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      CreateItemJournalLine(ItemJnlLine,Item,ItemJnlLine."Entry Type"::"Positive Adjmt.",Quantity,LibraryPatterns.RandCost(Item));

      EnqueueLotTrackingSpec(LotNo,QtyToUpdate::Quantity,Quantity);
      ItemJnlLine.OpenItemTrackingLines(FALSE);

      FindReservationForItemJournal(ReservEntry,Item."No.");
      ReservEntry.VALIDATE("Expiration Date",ExpirationDate);
      ReservEntry.MODIFY(TRUE);

      PostItemJournalBatch(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPositiveAdjmtWithLotNo@96(Item@1001 : Record 27;LotNo@1003 : Code[20];Quantity@1002 : Integer);
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      PostItemJnlLineWithLotNo(Item,LotNo,Quantity,ItemJnlLine."Entry Type"::"Positive Adjmt.");
    END;

    LOCAL PROCEDURE PostNegativeAdjmtWithLotNo@98(Item@1002 : Record 27;LotNo@1001 : Code[20];Quantity@1000 : Integer);
    VAR
      ItemJnlLine@1003 : Record 83;
    BEGIN
      PostItemJnlLineWithLotNo(Item,LotNo,Quantity,ItemJnlLine."Entry Type"::"Negative Adjmt.");
    END;

    LOCAL PROCEDURE SetTrackingSpecification@55(VAR TransferOrderPage@1000 : TestPage 5740;LotNo@1002 : Code[20];QtyToUpdate@1001 : 'Quantity,Quantity to Handle,Quantity to Invoice';Qty@1003 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QtyToUpdate);
      LibraryVariableStorage.Enqueue(Qty);
      TransferOrderPage.TransferLines.Action1901992804.INVOKE;  // Open page "Item Tracking Lines / Shipment"
    END;

    LOCAL PROCEDURE SetupTransferOrderTracking@60(VAR TransferOrderPage@1000 : TestPage 5740;VAR LotNo@1001 : Code[20];VAR Qty@1002 : Integer);
    VAR
      TransferHeader@1003 : Record 5740;
      TransferLine@1004 : Record 5741;
      QtyToUpdate@1005 : 'Quantity,Quantity to Handle,Quantity to Invoice';
    BEGIN
      Qty := LibraryRandom.RandIntInRange(10,100);

      CreateTransferOrderOnNewItem(TransferHeader,TransferLine,Qty);

      TransferOrderPage.OPENEDIT;
      TransferOrderPage.GOTOKEY(TransferHeader."No.");

      LotNo := LibraryUtility.GenerateGUID;
      SetTrackingSpecification(TransferOrderPage,LotNo,QtyToUpdate::Quantity,Qty);
    END;

    LOCAL PROCEDURE SetValueOnItemTrackingLines@81(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Quantity@1001 : Variant;
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      LibraryVariableStorage.Dequeue(Quantity);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
      LibraryVariableStorage.Dequeue(Quantity);
      ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(Quantity);
    END;

    LOCAL PROCEDURE UpdateReservationEntry@2(ItemNo@1001 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLineWithJobTask@85(VAR PurchaseLine@1000 : Record 39;JobTask@1003 : Record 1001);
    BEGIN
      WITH PurchaseLine DO BEGIN
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Job Line Type","Job Line Type"::Schedule);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyExpirationDateOnItemLedgerEntry@119(ItemNo@1000 : Code[20];IsPositive@1003 : Boolean;ExpectedDate@1001 : Date);
    VAR
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE(Positive,IsPositive);
        FINDLAST;
        Assert.AreEqual(ExpectedDate,"Expiration Date",STRSUBSTNO(WrongExpDateErr,TABLECAPTION,"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyLotNoExistOnReservationEntry@19(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Lot No.");
    END;

    LOCAL PROCEDURE VerifyPostedServiceCreditMemo@25(ServiceHeader@1003 : Record 5900;ServiceLine@1002 : Record 5902);
    VAR
      ServiceCrMemoHeader@1001 : Record 5994;
      ServiceCrMemoLine@1000 : Record 5995;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceCrMemoHeader.FINDFIRST;
      ServiceCrMemoHeader.TESTFIELD("Customer No.",ServiceHeader."Customer No.");
      ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      ServiceCrMemoLine.FINDFIRST;
      ServiceCrMemoLine.TESTFIELD("No.",ServiceLine."No.");
      ServiceCrMemoLine.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedServiceOrder@22(ServiceHeader@1003 : Record 5900;ServiceLine@1000 : Record 5902);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceHeader.TESTFIELD("Customer No.",ServiceHeader."Customer No.");
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDFIRST;
      ServiceInvoiceLine.TESTFIELD("No.",ServiceLine."No.");
      ServiceInvoiceLine.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySalesLineIsInbound@32(SalesLine@1000 : Record 37;DocumentType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        "Document Type" := DocumentType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Document Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyPurchLineIsInbound@34(PurchLine@1000 : Record 39;DocumentType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH PurchLine DO BEGIN
        "Document Type" := DocumentType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Document Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyItemJnlLineIsInbound@38(ItemJnlLine@1000 : Record 83;EntryType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH ItemJnlLine DO BEGIN
        "Entry Type" := EntryType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Entry Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyAsmHeaderIsInbound@52(AsmHeader@1000 : Record 900;DocumentType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH AsmHeader DO BEGIN
        "Document Type" := DocumentType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Document Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyAsmLineIsInbound@54(AsmLine@1000 : Record 901;DocumentType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH AsmLine DO BEGIN
        "Document Type" := DocumentType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Document Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceLineIsInbound@44(ServiceLine@1000 : Record 5902;DocumentType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH ServiceLine DO BEGIN
        "Document Type" := DocumentType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Document Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifyJobJnlLineIsInbound@47(JobJnlLine@1000 : Record 210;EntryType@1001 : Integer;ExpectedResult@1002 : Boolean);
    BEGIN
      WITH JobJnlLine DO BEGIN
        "Entry Type" := EntryType;
        Assert.AreEqual(
          ExpectedResult,IsInbound,
          STRSUBSTNO('%1 %2 %3 %4',TABLENAME,FORMAT("Entry Type"),FIELDNAME("Quantity (Base)"),"Quantity (Base)"));
      END;
    END;

    LOCAL PROCEDURE VerifySecondTransferLineLotNo@74(TransferHeader@1000 : Record 5740;LotNo@1002 : Code[20]);
    VAR
      TransferLine@1001 : Record 5741;
      ReservationEntry@1003 : Record 337;
    BEGIN
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDLAST;
      ReservationEntry.SETRANGE("Item No.");
      ReservationEntry.SETRANGE("Location Code");
      ReservationEntry.SETRANGE("Source Type");
      ReservationEntry.SETRANGE("Source Ref. No.",TransferLine."Line No.");
      Assert.IsTrue(ReservationEntry.FINDFIRST,ItemTrackSpecNotFoundErr);
      ReservationEntry.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyQuantityOnItemTrackingLines@67(PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryVariableStorage.Enqueue(TrackingOptionStr::VerifyLotQty);
      LibraryVariableStorage.Enqueue(PurchaseLine."Quantity (Base)"); // Expected value for ItemTrackingLines."Quantity (Base)"
      LibraryVariableStorage.Enqueue(PurchaseLine."Outstanding Qty. (Base)"); // Expected value for ItemTrackingLines."Qty. to Handle (Base)"
      LibraryVariableStorage.Enqueue(PurchaseLine."Qty. to Invoice (Base)"); // Expected value for ItemTrackingLines."Qty. to Invoice (Base)"
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyQuantityOnMultipleItemTrackingLines@84(PurchaseLine@1000 : Record 39;QuantityBase@1001 : ARRAY [2] OF Decimal;QtyHandled@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingPrecision@1003 : Decimal;
      i@1004 : Integer;
    BEGIN
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryVariableStorage.Enqueue(TrackingOptionStr::VerifyLotQty);
      RoundingPrecision := 0.00001; // Rounding precision used by all Quantity fields in item tracking lines
      FOR i := 1 TO ARRAYLEN(QuantityBase) DO BEGIN
        LibraryVariableStorage.Enqueue(QuantityBase[i]); // Expected value for ItemTrackingLines."Quantity (Base)"
        LibraryVariableStorage.Enqueue(ROUND(QuantityBase[i],RoundingPrecision) - ROUND(QtyHandled[i],RoundingPrecision)); // Expected value for ItemTrackingLines."Qty. to Handle (Base)"
        LibraryVariableStorage.Enqueue(QuantityBase[i]); // Expected value for ItemTrackingLines."Qty. to Invoice (Base)"
      END;
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyFreeEntryTrackingExists@115(ItemNo@1000 : Code[20];LotNo@1002 : Code[10]);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        Assert.IsFalse(ISEMPTY,ItemLedgEntryWithLotErr);
      END;
    END;

    LOCAL PROCEDURE VerifyItemTrackingLinesQty@88(ItemTrackingLines@1001 : TestPage 6510);
    VAR
      Quantity@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Quantity);
      ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(Quantity);
      LibraryVariableStorage.Dequeue(Quantity);
      ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(Quantity);
      LibraryVariableStorage.Dequeue(Quantity);
      ItemTrackingLines."Qty. to Invoice (Base)".ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE VerifyQuantityOnPostWhseShipLine@93(WhseShipmentLine@1003 : Record 7321);
    VAR
      PstdWhseShptLn@1002 : Record 7323;
    BEGIN
      WITH PstdWhseShptLn DO BEGIN
        SETRANGE("Whse. Shipment No.",WhseShipmentLine."No.");
        SETRANGE("Whse Shipment Line No.",WhseShipmentLine."Line No.");
        FINDFIRST;
        Assert.AreEqual(WhseShipmentLine.Quantity,Quantity,PostedWhseQuantityErr);
      END;
    END;

    LOCAL PROCEDURE VerifyJobJournalLineReservEntry@168(JobJournalLine@1000 : Record 210;LotNo@1002 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Source Type",DATABASE::"Job Journal Line");
        SETRANGE("Source Subtype",JobJournalLine."Entry Type");
        SETRANGE("Source ID",JobJournalLine."Journal Template Name");
        SETRANGE("Source Batch Name",JobJournalLine."Journal Batch Name");
        SETRANGE("Source Ref. No.",JobJournalLine."Line No.");
        FINDFIRST;
        TESTFIELD("Item No.",JobJournalLine."No.");
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryLotNo@194(DocumentNo@1003 : Code[20];ItemNo@1001 : Code[20];LotNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        TESTFIELD("Item No.",ItemNo);
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@3(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      IF AssignSerialNo THEN
        ItemTrackingLines."Assign Serial No.".INVOKE;

      IF AssignLotNo THEN
        ItemTrackingLines."Assign Lot No.".INVOKE;

      IF SalesMode THEN
        ItemTrackingLines."Select Entries".INVOKE;

      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingAssignTrackingNoAndVerifyQuantityHandler@66(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVar@1001 : Variant;
      TrackingOption@1002 : Option;
      i@1003 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVar);
      TrackingOption := DequeueVar;
      CASE TrackingOption OF
        TrackingOptionStr::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingOptionStr::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingOptionStr::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingOptionStr::SetLotQty:
          BEGIN
            LibraryVariableStorage.Dequeue(DequeueVar);
            i := DequeueVar;
            ItemTrackingLines.FIRST;
            WHILE i > 0 DO BEGIN
              SetValueOnItemTrackingLines(ItemTrackingLines);
              ItemTrackingLines.NEXT;
              i -= 1;
            END;
          END;
        TrackingOptionStr::VerifyLotQty:
          BEGIN
            ItemTrackingLines.FIRST;
            WHILE ItemTrackingLines."Lot No.".VALUE <> '' DO BEGIN
              VerifyItemTrackingLinesQty(ItemTrackingLines);
              ItemTrackingLines.NEXT;
            END;
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSingleLineHandler@76(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(1);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSingleLineLotHandler@124(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVar);
      ItemTrackingLines."Lot No.".SETVALUE(DequeueVar);
      ItemTrackingLines."Quantity (Base)".SETVALUE(1);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ItemTrackingLinesConfirmHandler@80(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateHandler@13(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingEntriesHandler@20(VAR ItemTrackingEntries@1000 : TestPage 6501);
    BEGIN
      ItemTrackingEntries."Expiration Date".ASSERTEQUALS(WORKDATE);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@41(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryModalPageHandler@143(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      Assert.IsFalse(
        ItemTrackingSummary."Selected Quantity".VISIBLE,
        STRSUBSTNO(FieldVisibleErr,ItemTrackingSummary."Selected Quantity".CAPTION,ItemTrackingSummary.CAPTION));
      Assert.IsFalse(
        ItemTrackingSummary."Selected Quantity".EDITABLE,
        STRSUBSTNO(FieldEditableErr,ItemTrackingSummary."Selected Quantity".CAPTION,ItemTrackingSummary.CAPTION));
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrkgManualLotNoHandler@46(VAR ItemTrkgLines@1002 : TestPage 6510);
    VAR
      QueuedVar@1004 : Variant;
      LotNo@1000 : Code[20];
      QtyToUpdate@1003 : 'Quantity,Quantity to Handle,Quantity to Invoice';
      Qty@1001 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedVar);
      LotNo := QueuedVar;
      LibraryVariableStorage.Dequeue(QueuedVar);
      QtyToUpdate := QueuedVar;
      LibraryVariableStorage.Dequeue(QueuedVar);
      Qty := QueuedVar;

      IF LotNo <> '' THEN
        ItemTrkgLines."Lot No.".SETVALUE(LotNo);

      CASE QtyToUpdate OF
        QtyToUpdate::Quantity:
          ItemTrkgLines."Quantity (Base)".SETVALUE(Qty);
        QtyToUpdate::"Quantity to Handle":
          ItemTrkgLines."Qty. to Handle (Base)".SETVALUE(Qty);
        QtyToUpdate::"Quantity to Invoice":
          ItemTrkgLines."Qty. to Invoice (Base)".SETVALUE(Qty);
      END;

      ItemTrkgLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@43(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@59(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE OpenItemTrackingHandler@90(VAR ItemTrkgLines@1000 : TestPage 6510);
    VAR
      QueuedVar@1001 : Variant;
      Qty@1003 : Decimal;
      No@1005 : Code[10];
      LotCount@1002 : Integer;
      iLot@1004 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedVar);
      LotCount := QueuedVar;

      FOR iLot := 1 TO LotCount DO BEGIN
        ItemTrkgLines.NEW;
        LibraryVariableStorage.Dequeue(QueuedVar);
        No := QueuedVar;
        ItemTrkgLines."Lot No.".SETVALUE(No);
        LibraryVariableStorage.Dequeue(QueuedVar);
        Qty := QueuedVar;
        ItemTrkgLines."Quantity (Base)".SETVALUE(Qty);
      END;

      ItemTrkgLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@99(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickFromWhseShptReqHandler@92(VAR CreatePickFromWhseShptReqPage@1000 : TestRequestPage 7318);
    BEGIN
      CreatePickFromWhseShptReqPage.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@95(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE GetPostedDocLinesPageHandler@156(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Receipts"));
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [SCM]
       Unsupported version tags:
       US: Unable to Execute
       CA: Unable to Execute
       IN: Unable to Execute
       ES: Unable to Execute

       1. Test Item Tracking functionality on Purchase Order without Expiration Date.
       2. Test Item Tracking functionality on Purchase Order with Expiration Date.
       3. Test Item Tracking functionality on Sales Order with Posting Date as after Expiration Date.
       4. Test Item Tracking functionality on Sales Order with Posting Date as Expiration Date.
       5. Test Item Tracking functionality for Service Order.
       6. Test posting of Service Order with Item Tracking functionality.
       7. Test Item Tracking functionality for Service Credit Memo.
       8. Test posting of Service Credit Memo with Item Tracking functionality.
       9. Check there's no error during the post of SO with PO And ILE reservation and one Item Tracking Serial No.
       10.Test undoing Purchase Receipt is allowed when Expiration Date on Item Tracking Line is earlier than WORKDATE.
       11. Test Quantities on Item Tracking Lines are correct after posting partial receive for Purchase Order with Job No. and Item Tracking.
       12. Test Quantities on Item Tracking Lines are correct after posting partial return shipment for Purchase Return Order with Job No. and Item Tracking.
       13. Test Quantities on Item Tracking Lines are correct after posting partial receive for Purchase Order with Job No. and multiple Lot Item Tracking.
       14. Test Quantities on Item Tracking Lines are correct after posting partial return shipment for Purchase Return Order with Job No. and multiple Lot Item Tracking.
       15. Test Job No. can be filled on Purchase Line with Item Tracking assigned.
       16. Item Ledger Entry for undo of Purchase Receipt with "Expiration Date" should contain "Expiration Date".

      TFS_TS_ID = 273968
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      PurchaseOrderWithoutExpirationDate,PurchaseOrderWithExpirationDate                                       126140
      SalesOrderAfterExpirationDate,SalesOrderBeforeExpirationDate                                             126140

      TFS_TS_ID = 273141
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      ServiceOrderWithItemTrackingLines                                                                        141557
      ServiceOrderPostWithItemTrackingLines                                                                    141557
      ServiceCreditMemoWithItemTrackingLines                                                                   141557
      ServiceCreditMemoPostWithItemTrackingLines                                                               141557
      SalesOrderPartialPostingWithReservation                                                                  343938

      Merge TFS 345019
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      B345019DecreaseQtyToHandle                                                                               345204
      B345019IncreaseQty                                                                                       345204

      Merge TFS 54927
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      TransferOrderWithTwoLines                                                                                54927

      Cover Test cases for Sicily Merge Bug
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      UndoPurchaseReceiptWithExpirationDate                                                                    58910
      PartialPostPurchaseOrderWithJobAndLotTracking                                                            73396
      PartialPostPurchaseReturnOrderWithJobAndLotTracking                                                      73396
      PartialPostPurchaseOrderWithJobAndMultipleLotTracking                                                    73396
      PartialPostPurchaseReturnOrderWithJobAndMultipleLotTracking                                              73396
      FillJobNoOnPurchaseLineWithLotTracking                                                                   73684

      Cover Test cases
      ----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ----------------------------------------------------------------------------------------------------------------
      SalesOrderPartialTracking                                                                                122002
      SalesReturnOrderPartialTracking                                                                          122002
      PurchaseOrderPartialTracking                                                                             122002
      PurchaseReturnOrderPartialTracking                                                                       122002
      SalesOrderPartialTrackingError                                                                           122002
      PurchaseOrderPartialTrackingError                                                                        122002
      UndoPurchaseReceiptContainsExpirationDate                                                                130271
    }
    END.
  }
}

