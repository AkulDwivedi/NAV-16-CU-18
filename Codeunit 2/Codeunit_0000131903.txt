OBJECT Codeunit 131903 Library - Rapid Start
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE CreateConfigTemplateHeader@2(VAR ConfigTemplateHeader@1000 : Record 8618);
    BEGIN
      ConfigTemplateHeader.INIT;
      ConfigTemplateHeader.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(ConfigTemplateHeader.FIELDNO(Code),DATABASE::"Config. Template Header"));
      // Validating Code as Description because value is not important.
      ConfigTemplateHeader.VALIDATE(Description,ConfigTemplateHeader.Code);
      ConfigTemplateHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateConfigTemplateLine@7(VAR ConfigTemplateLine@1000 : Record 8619;ConfigTemplateCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      ConfigTemplateLine.INIT;
      ConfigTemplateLine.VALIDATE("Data Template Code",ConfigTemplateCode);
      RecRef.GETTABLE(ConfigTemplateLine);
      ConfigTemplateLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ConfigTemplateLine.FIELDNO("Line No.")));
      ConfigTemplateLine.INSERT(TRUE);
    END;

    PROCEDURE CreateQuestionnaire@3(VAR ConfigQuestionnaire@1000 : Record 8610);
    BEGIN
      ConfigQuestionnaire.INIT;
      ConfigQuestionnaire.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(ConfigQuestionnaire.FIELDNO(Code),DATABASE::"Config. Questionnaire"));
      // Validating Code as Description because value is not important.
      ConfigQuestionnaire.VALIDATE(Description,ConfigQuestionnaire.Code);
      ConfigQuestionnaire.INSERT(TRUE);
    END;

    PROCEDURE CreateQuestion@5(VAR ConfigQuestion@1000 : Record 8612;ConfigQuestionArea@1001 : Record 8611);
    VAR
      ConfigQuestion2@1002 : Record 8612;
    BEGIN
      ConfigQuestion2.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion2.SETRANGE("Question Area Code",ConfigQuestionArea.Code);
      IF ConfigQuestion2.FINDLAST THEN;  // IF condition is required because Question may not be found.

      ConfigQuestion.INIT;
      ConfigQuestion.VALIDATE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion.VALIDATE("Question Area Code",ConfigQuestionArea.Code);
      ConfigQuestion.VALIDATE("No.",ConfigQuestion2."No." + 1);
      ConfigQuestion.INSERT(TRUE);
    END;

    PROCEDURE CreateQuestionArea@1(VAR ConfigQuestionArea@1000 : Record 8611;QuestionnaireCode@1001 : Code[10]);
    BEGIN
      ConfigQuestionArea.INIT;
      ConfigQuestionArea.VALIDATE("Questionnaire Code",QuestionnaireCode);
      ConfigQuestionArea.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(ConfigQuestionArea.FIELDNO(Code),DATABASE::"Config. Question Area"));
      // Validating Primary Key as Description because value is not important.
      ConfigQuestionArea.VALIDATE(Description,ConfigQuestionArea."Questionnaire Code" + ConfigQuestionArea.Code);
      ConfigQuestionArea.INSERT(TRUE);
    END;

    PROCEDURE CreatePackage@10(VAR ConfigPackage@1000 : Record 8623);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::"Config. Package");
      ConfigPackage.INIT;
      ConfigPackage.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(ConfigPackage.FIELDNO(Code),DATABASE::"Config. Package"));
      ConfigPackage.VALIDATE("Package Name",'Package ' + FORMAT(ConfigPackage.Code));
      ConfigPackage.INSERT(TRUE);
    END;

    PROCEDURE CreatePackageTable@4(VAR ConfigPackageTable@1000 : Record 8613;PackageCode@1002 : Code[20];TableID@1001 : Integer);
    BEGIN
      ConfigPackageTable.INIT;
      ConfigPackageTable.VALIDATE("Package Code",PackageCode);
      ConfigPackageTable.VALIDATE("Table ID",TableID);
      ConfigPackageTable.INSERT(TRUE);
    END;

    PROCEDURE CreatePackageData@6(PackageCode@1006 : Code[20];TableID@1001 : Integer;RecNo@1005 : Integer;FieldID@1002 : Integer;Value@1003 : Text[250]);
    VAR
      ConfigPackageData@1004 : Record 8615;
      ConfigPackageRecord@1000 : Record 8614;
    BEGIN
      ConfigPackageRecord.INIT;
      ConfigPackageRecord.VALIDATE("Package Code",PackageCode);
      ConfigPackageRecord.VALIDATE("Table ID",TableID);
      ConfigPackageRecord.VALIDATE("No.",RecNo);
      IF ConfigPackageRecord.INSERT THEN;

      ConfigPackageData.INIT;
      ConfigPackageData.VALIDATE("Package Code",PackageCode);
      ConfigPackageData.VALIDATE("Table ID",TableID);
      ConfigPackageData.VALIDATE("No.",RecNo);
      ConfigPackageData.VALIDATE("Field ID",FieldID);
      ConfigPackageData.VALIDATE(Value,Value);
      ConfigPackageData.INSERT(TRUE);
    END;

    PROCEDURE CreatePackageDataForField@16(VAR ConfigPackage@1001 : Record 8623;VAR ConfigPackageTable@1000 : Record 8613;TableID@1005 : Integer;FieldID@1009 : Integer;Value@1008 : Code[250];RecNo@1002 : Integer);
    BEGIN
      IF ConfigPackage.Code = '' THEN
        CreatePackage(ConfigPackage);

      IF ConfigPackageTable."Table ID" = 0 THEN
        CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);

      CreatePackageData(ConfigPackage.Code,TableID,RecNo,FieldID,Value);
    END;

    PROCEDURE CreateConfigLine@11(VAR ConfigLine@1000 : Record 8622;LineType@1001 : 'Area,Group,Table';TableID@1002 : Integer;LineName@1003 : Text[50];PackageCode@1008 : Code[20];Dimensions@1007 : Boolean);
    VAR
      ConfigMgt@1006 : Codeunit 8616;
      ConfigPackageManagement@1005 : Codeunit 8611;
      NextLineNo@1004 : Integer;
    BEGIN
      NextLineNo := 0;
      ConfigLine.RESET;
      IF ConfigLine.FINDLAST THEN
        NextLineNo := ConfigLine."Line No." + 10000;

      ConfigLine.INIT;
      ConfigLine.VALIDATE("Line No.",NextLineNo);
      ConfigLine.VALIDATE("Line Type",LineType);
      IF LineType = LineType::Table THEN
        ConfigLine.VALIDATE("Table ID",TableID)
      ELSE
        ConfigLine.VALIDATE(Name,LineName);
      ConfigLine.INSERT(TRUE);

      ConfigMgt.AssignParentLineNos;

      IF PackageCode <> '' THEN BEGIN
        ConfigLine.SETRANGE("Line No.",ConfigLine."Line No.");
        ConfigPackageManagement.AssignPackage(ConfigLine,PackageCode);
        ConfigLine.SETRANGE("Line No.");
      END;

      IF Dimensions THEN BEGIN
        ConfigLine.GET(NextLineNo);
        ConfigLine.VALIDATE("Dimensions as Columns",TRUE);
        ConfigLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetIncludeOneField@28(PackageCode@1004 : Code[20];TableID@1000 : Integer;FieldID@1001 : Integer;SetInclude@1002 : Boolean);
    VAR
      ConfigPackageField@1003 : Record 8616;
    BEGIN
      ConfigPackageField.GET(PackageCode,TableID,FieldID);
      ConfigPackageField.VALIDATE("Include Field",SetInclude);
      ConfigPackageField.MODIFY;
    END;

    PROCEDURE SetIncludeFields@8(PackageCode@1005 : Code[20];TableID@1002 : Integer;FromFieldID@1001 : Integer;ToFieldID@1003 : Integer;SetInclude@1000 : Boolean);
    VAR
      ConfigPackageField@1004 : Record 8616;
    BEGIN
      ConfigPackageField.RESET;
      ConfigPackageField.SETRANGE("Package Code",PackageCode);
      ConfigPackageField.SETRANGE("Table ID",TableID);
      ConfigPackageField.SETRANGE("Field ID",FromFieldID,ToFieldID);
      ConfigPackageField.MODIFYALL("Include Field",SetInclude,TRUE);
    END;

    PROCEDURE SetValidateOneField@9(PackageCode@1004 : Code[20];TableID@1000 : Integer;FieldID@1001 : Integer;SetValidate@1002 : Boolean);
    VAR
      ConfigPackageField@1003 : Record 8616;
    BEGIN
      ConfigPackageField.GET(PackageCode,TableID,FieldID);
      ConfigPackageField.VALIDATE("Validate Field",SetValidate);
      ConfigPackageField.MODIFY;
    END;

    PROCEDURE SetProcessingOrderForRecord@34(PackageCode@1000 : Code[20];TableID@1001 : Integer;ProcessingNo@1002 : Integer);
    VAR
      ConfigPackageTable@1003 : Record 8613;
    BEGIN
      ConfigPackageTable.GET(PackageCode,TableID);
      ConfigPackageTable."Processing Order" := ProcessingNo;
      ConfigPackageTable.MODIFY;
    END;

    PROCEDURE SetProcessingOrderForField@12(PackageCode@1000 : Code[20];TableID@1001 : Integer;FieldID@1004 : Integer;ProcessingNo@1002 : Integer);
    VAR
      ConfigPackageField@1003 : Record 8616;
    BEGIN
      ConfigPackageField.GET(PackageCode,TableID,FieldID);
      ConfigPackageField."Processing Order" := ProcessingNo;
      ConfigPackageField.MODIFY;
    END;

    PROCEDURE SetCreateMissingCodesForField@13(PackageCode@1003 : Code[20];TableID@1002 : Integer;FieldID@1001 : Integer;SetCreateMissingCodes@1000 : Boolean);
    VAR
      ConfigPackageField@1004 : Record 8616;
    BEGIN
      ConfigPackageField.GET(PackageCode,TableID,FieldID);
      ConfigPackageField.VALIDATE("Create Missing Codes",SetCreateMissingCodes);
      ConfigPackageField.MODIFY;
    END;

    PROCEDURE ApplyPackage@55(ConfigPackage@1001 : Record 8623;SetupProcessingOrderForTables@1003 : Boolean);
    VAR
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageMgt@1002 : Codeunit 8611;
    BEGIN
      ConfigPackageMgt.SetHideDialog(TRUE);
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,SetupProcessingOrderForTables);
    END;

    PROCEDURE ValidatePackage@57(ConfigPackage@1000 : Record 8623;SetupProcessingOrderForTables@1004 : Boolean);
    VAR
      ConfigPackageTable@1001 : Record 8613;
      TempConfigPackageTable@1002 : TEMPORARY Record 8613;
      ConfigPackageMgt@1003 : Codeunit 8611;
    BEGIN
      ConfigPackageMgt.SetHideDialog(TRUE);
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageMgt.ValidatePackageRelations(ConfigPackageTable,TempConfigPackageTable,SetupProcessingOrderForTables);
    END;

    BEGIN
    {
      Contains all utility functions related to Rapid Implementation Methodology.
    }
    END.
  }
}

