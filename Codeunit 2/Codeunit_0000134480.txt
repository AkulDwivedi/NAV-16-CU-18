OBJECT Codeunit 134480 ERM Dimension General Part 2
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      LibraryDimension@1002 : Codeunit 131001;
      LibraryInventory@1027 : Codeunit 132201;
      LibraryERM@1001 : Codeunit 131300;
      LibraryUtility@1005 : Codeunit 131000;
      LibrarySales@1008 : Codeunit 130509;
      LibraryVariableStorage@1020 : Codeunit 131004;
      LibraryFiscalYear@1016 : Codeunit 131302;
      LibraryERMCountryData@1100 : Codeunit 131305;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryPurchase@1010 : Codeunit 130512;
      isInitialized@1004 : Boolean;
      DeleteDimensionErr@1006 : TextConst 'ENU=Dimension code must not be exist.';
      DimensionSetEntryErr@1003 : TextConst '@@@=The Dimension Set Entry must exists.;ENU=The %1 must exist.';
      RoundingFactorTxt@1013 : TextConst 'ENU=None';
      CheckColIndexErr@1015 : TextConst 'ENU=Wrong checked column index.';
      StartPeriodErr@1017 : TextConst 'ENU=Start period wrong.';
      EndPeriodErr@1018 : TextConst 'ENU=End period wrong.';
      WrongGLEntryLinesErr@1019 : TextConst 'ENU=Wrong number of G/L Entry lines.';
      WrongValueAfterLookupErr@1022 : TextConst 'ENU=Wrong value in control after lookup.';
      WrongNumberOfAnalysisViewEntriesErr@1023 : TextConst 'ENU=Wrong number of Analysis View Entries.';
      PeriodTxt@1021 : TextConst 'ENU=Period';
      DimensionCategory@1024 : 'Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ClosingDateOptions@1026 : 'Include,Exclude';
      ShowAmounts@1025 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts';
      LineDimOptionRef@1028 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      ColumnDimOptionRef@1012 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      NoLineShouldBeFoundErr@1009 : TextConst 'ENU=No line should be found.';
      WrongCostAmountNonInvtblErr@1011 : TextConst 'ENU=Wrong "Item Analysis View Entry"."Cost Amount (Non-Invtbl.)"';

    [Test]
    PROCEDURE DimensionWithExistingCode@1();
    VAR
      Dimension@1002 : Record 348;
      Dimension2@1001 : Record 348;
    BEGIN
      // Test setup the dimension code with already exist code.

      // 1. Setup: Create a Dimension, find a dimension.
      Initialize;
      LibraryDimension.CreateDimension(Dimension2);
      LibraryDimension.FindDimension(Dimension);

      // 2. Exercise: Change the dimension with already exist dimension.
      ASSERTERROR Dimension2.RENAME(Dimension.Code);
    END;

    [Test]
    PROCEDURE DimensionWithGLAccountCaption@3();
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      // Test setup the dimension code as GL Account.
      DimensionWithConflictName(GLAccount.TABLECAPTION);
    END;

    [Test]
    PROCEDURE DimensionBusinessUnitCaption@4();
    VAR
      BusinessUnit@1001 : Record 220;
    BEGIN
      // Test setup the dimension code as Business Unit.
      DimensionWithConflictName(BusinessUnit.TABLECAPTION);
    END;

    [Test]
    PROCEDURE DimensionWithItemCaption@35();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Test setup the dimension code as Item.
      DimensionWithConflictName(Item.TABLECAPTION);
    END;

    [Test]
    PROCEDURE DimensionWithLocationCaption@36();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Test setup the dimension code as Location.
      DimensionWithConflictName(Location.TABLECAPTION);
    END;

    [Test]
    PROCEDURE DimensionWithPeriodCaption@5();
    BEGIN
      // Test setup the dimension code as Period.
      DimensionWithConflictName(PeriodTxt);
    END;

    LOCAL PROCEDURE DimensionWithConflictName@2(Code@1001 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      // 1. Setup: Create a Dimension.
      Initialize;
      Dimension.INIT;

      // 2. Exercise: Change the dimension with code Period.
      ASSERTERROR Dimension.VALIDATE(Code,Code);
    END;

    [Test]
    PROCEDURE RenameDimensionWithPostedEntry@10();
    VAR
      Customer@1002 : Record 18;
      Dimension@1000 : Record 348;
      DimensionValue@1001 : Record 349;
      DimensionSetEntry@1006 : Record 480;
      GenJournalLine@1004 : Record 81;
      DimensionSetID@1005 : Integer;
    BEGIN
      // Test Rename the Dimension.

      // 1. Setup: Create Dimension and Dimension Value, create Customer, create General Journal Line with dimension,
      // post the created General Journal Line.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibrarySales.CreateCustomer(Customer);
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.",GenJournalLine."Account Type"::Customer);
      DimensionSetID := GenJournalLine."Dimension Set ID";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Rename the created dimension.
      Dimension.RENAME(Customer."No.");

      // 3. Verify: Verify the renamed dimension.
      Assert.IsTrue(
        DimensionSetEntry.GET(DimensionSetID,Customer."No."),STRSUBSTNO(DimensionSetEntryErr,DimensionSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE RenameGlobalDimension@13();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      Dimension@1001 : Record 348;
      NewDimensionCode@1003 : Code[20];
    BEGIN
      // Test Rename the Global Dimension with new code.

      // 1. Setup: Find the Global Dimension 1 code.
      Initialize;
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Global Dimension 1 Code");

      // 2. Exercise: Rename the Global Dimension 1 Code.
      NewDimensionCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Dimension,Dimension.FIELDNO(Code)));
      Dimension.RENAME(NewDimensionCode);

      // 3. Verify: Verify the Global Dimension 1 code in General Ledger Setup with new created code.
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Global Dimension 1 Code",NewDimensionCode);
    END;

    [Test]
    PROCEDURE RenameShortcutDimension@14();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      Dimension@1002 : Record 348;
      NewDimensionCode@1000 : Code[20];
    BEGIN
      // Test Rename the Shortcut Dimension with new code.

      // 1. Setup: Find the Shortcut Dimension 3 code.
      Initialize;
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Shortcut Dimension 3 Code");

      // 2. Exercise: Rename the Shortcut Dimension 3 Code.
      NewDimensionCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Dimension,Dimension.FIELDNO(Code)));
      Dimension.RENAME(NewDimensionCode);

      // 3. Verify: Verify the Shortcut Dimension 3 code in General Ledger Setup with new created code.
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 3 Code",NewDimensionCode);
    END;

    [Test]
    PROCEDURE BlankDimensionCode@16();
    VAR
      Dimension@1002 : Record 348;
    BEGIN
      // Test Rename the Dimension with Blank.

      // 1. Setup: Create a new Dimension.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);

      // 2. Exercise: Rename the Dimension with blank.
      ASSERTERROR Dimension.RENAME('');
    END;

    [Test]
    PROCEDURE DimensionWithGLBudgetName@23();
    VAR
      Dimension@1010 : Record 348;
      GLBudgetName@1002 : Record 95;
      BudgetName@1000 : Code[10];
      BudgetDimension1Code@1001 : Code[20];
    BEGIN
      // Test Rename Dimension attached on G/L Budget Name.

      // 1. Setup: Create Dimension, Create New G/L Budget Name, update Dimension as Budget Dimension 1 Code on it.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      BudgetName := CreateGLBudgetNameDimension(Dimension.Code);

      // 2. Exercise: Rename Dimension.
      BudgetDimension1Code :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Dimension,Dimension.FIELDNO(Code)));
      Dimension.RENAME(BudgetDimension1Code);

      // 3. Verify: Verify that the Dimension is renamed.
      GLBudgetName.GET(BudgetName);
      GLBudgetName.TESTFIELD("Budget Dimension 1 Code",BudgetDimension1Code);
    END;

    [Test]
    PROCEDURE DimensionWithAnalysisView@18();
    VAR
      Dimension@1010 : Record 348;
      AnalysisView@1001 : Record 363;
      AnalysisViewCode@1000 : Code[10];
      Dimension1Code@1002 : Code[20];
    BEGIN
      // Test error occurs on deleting Dimension attached on Analysis View.

      // 1. Setup: Create Dimension, Create New Analysis View, update Dimension as Dimension 1 Code on it.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      AnalysisViewCode := CreateAnalysisViewDimension(Dimension.Code);

      // 2. Exercise: Rename Dimension.
      Dimension1Code :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Dimension,Dimension.FIELDNO(Code)));
      Dimension.RENAME(Dimension1Code);

      // 3. Verify: Verify error occurs "Dimension is used" on Deleting Dimension.
      AnalysisView.GET(AnalysisViewCode);
      AnalysisView.TESTFIELD("Dimension 1 Code",Dimension1Code);
    END;

    [Test]
    PROCEDURE DeleteDimension@9();
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      // Test delete Dimension with no entries.

      // 1. Setup: Create a Dimension.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);

      // 2. Exercise: Delete the created Dimension.
      Dimension.DELETE(TRUE);

      // 3. Verify: Checks the Dimension is deleted.
      Assert.IsFalse(Dimension.GET(Dimension.Code),DeleteDimensionErr);
    END;

    [Test]
    PROCEDURE DeleteDimensionWithEntries@17();
    VAR
      Dimension@1001 : Record 348;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // Test Delete Dimension with entries.

      // 1. Setup: Find the Shortcut Dimension 3 code.
      Initialize;
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Shortcut Dimension 3 Code");

      // 2. Exercise: Delete the Dimension.
      ASSERTERROR Dimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DeleteDimensionOfPostedEntry@21();
    VAR
      Dimension@1002 : Record 348;
      DimensionValue@1003 : Record 349;
      GLAccount@1001 : Record 15;
    BEGIN
      // Test Delete Dimension with posted entry.

      // 1. Setup: Create a Dimension, Dimension Value, create a General Journal Line and post it.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAndPostJournalLineWithDimension(DimensionValue,GLAccount."No.",WORKDATE);

      // 2. Exercise: Delete the created dimension.
      ASSERTERROR Dimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DeleteGlobalDimensionOfGLSetup@12();
    VAR
      Dimension@1000 : Record 348;
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Test delete Dimension used as Global Dimension with no entries.

      // 1. Setup: Find a Dimension with Global Dimension 1 code.
      Initialize;
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Global Dimension 1 Code");

      // 2. Exercise: Delete the created Dimension.
      ASSERTERROR Dimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE BlockDimension@6();
    VAR
      Dimension@1000 : Record 348;
      Dimension2@1001 : Record 348;
    BEGIN
      // Test the dimension with block.

      // 1. Setup: Create a dimension code.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);

      // 2. Exercise: Make the created dimension blocked.
      LibraryDimension.BlockDimension(Dimension);

      // 3. Verify: Verify the dimension is blocked.
      Dimension2.GET(Dimension.Code);
      Dimension2.TESTFIELD(Blocked,TRUE);
    END;

    [Test]
    PROCEDURE GeneralJournalOfBlockDimension@11();
    VAR
      Customer@1004 : Record 18;
      Dimension@1000 : Record 348;
      DimensionValue@1005 : Record 349;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Test the post with block dimension.

      // 1. Setup: Create a dimension code with blocked,
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.BlockDimension(Dimension);
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Make General Journal Line with Blocked Dimension.
      ASSERTERROR CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.",GenJournalLine."Account Type"::Customer);
    END;

    [Test]
    PROCEDURE ItemAnalysisViewPostingTrue@60();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
    BEGIN
      // Check Item Analysis View Entry for Posted Sales Invoice Amount with Global Dimension Values and Update Posting TRUE.

      // Create Item Analysis View with Update Posting TRUE and Sales Invoice.
      Initialize;
      CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Verify: Verify Sales Amount Actual on Item Analysis View Entry with Sales Line Amount.
      VerifyItemAnalysisViewEntry(SalesLine,ItemAnalysisView.Code);
    END;

    [Test]
    PROCEDURE ItemAnalysisViewPostingFalse@58();
    VAR
      ItemAnalysisViewEntry@1009 : Record 7154;
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
    BEGIN
      // Check Item Analysis View Entry for Posted Sales Invoice Amount with Global Dimension Values and Update Posting FALSE.

      // Create Item Analysis View and Sales Invoice.
      Initialize;
      CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,FALSE);

      // Verify: Verify No. of Entries on Item Analysis View Entry.
      FindItemAnalysisViewEntry(ItemAnalysisViewEntry,SalesLine."Sell-to Customer No.",SalesLine."No.",ItemAnalysisView.Code);
      Assert.IsFalse(ItemAnalysisViewEntry.FINDFIRST,'Item Analysis View Entry must not Exist.');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnalysisCompressionNone@54();
    VAR
      ItemAnalysisView@1004 : Record 7152;
    BEGIN
      // Check Item Analysis View Entry With NONE Date Compression.
      Initialize;
      ItemAnalysisCompression(ItemAnalysisView."Date Compression"::None);
    END;

    [Test]
    PROCEDURE ItemAnalysisCompressionDay@40();
    VAR
      ItemAnalysisView@1004 : Record 7152;
    BEGIN
      // Check Item Analysis View Entry With Day Date Compression.
      Initialize;
      ItemAnalysisCompression(ItemAnalysisView."Date Compression"::Day);
    END;

    LOCAL PROCEDURE ItemAnalysisCompression@31(DateCompression@1000 : Option);
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Create Item Analysis Entry and Create,Post Sales Invoice.
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis and Verify Posting Date on Item Analysis View Entry with Different Date Compression.
      RunAndVerifyItemAnalysis(ItemAnalysisView,SalesLine,DateCompression,PostingDate);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnalysisCompressionWeek@28();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Check Item Analysis View Entry With Week Date Compression.

      // Create Item Analysis Entry and Create,Post Sales Invoice.
      Initialize;
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis and Verify Posting Date on Item Analysis View Entry with Date Compression Week with
      // Customized Formula.
      RunAndVerifyItemAnalysis(
        ItemAnalysisView,SalesLine,ItemAnalysisView."Date Compression"::Week,CALCDATE('<CW+1D-1W>',PostingDate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnalysisCompressionMonth@30();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Check Item Analysis View Entry With Month Date Compression.

      // Create Item Analysis Entry and Create,Post Sales Invoice.
      Initialize;
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis and Verify Posting Date on Item Analysis View Entry with Date Compression Month with
      // Customized Formula.
      RunAndVerifyItemAnalysis(
        ItemAnalysisView,SalesLine,ItemAnalysisView."Date Compression"::Month,CALCDATE('<CM+1D-1M>',PostingDate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnlaysisCompressionQuarter@27();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Check Item Analysis View Entry With Quarter Date Compression.

      // Create Item Analysis Entry and Create,Post Sales Invoice.
      Initialize;
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis Code and Verify Posting Date on Item Analysis View Entry with Date Compression Quarter with
      // Customized Formula.
      RunAndVerifyItemAnalysis(
        ItemAnalysisView,SalesLine,ItemAnalysisView."Date Compression"::Quarter,CALCDATE('<CQ+1D-1Q>',PostingDate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnlaysisCompressionYear@25();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Check Item Analysis View Entry With Year Date Compression.

      // Create Item Analysis Entry and Create,Post Sales Invoice.
      Initialize;
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis and Verify Posting Date on Item Analysis View Entry with Date Compression Year with
      // Customized Formula.
      RunAndVerifyItemAnalysis(
        ItemAnalysisView,SalesLine,ItemAnalysisView."Date Compression"::Year,CALCDATE('<CY+1D-1Y>',PostingDate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemAnlaysisCompressionPeriod@29();
    VAR
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
      PostingDate@1014 : Date;
    BEGIN
      // Check Item Analysis View Entry With Period Date Compression.

      // Create Item Analysis Entry and Create,Post Sales Invoice.
      Initialize;
      PostingDate := CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Run Item Analysis and Verify Posting Date on Item Analysis View Entry with Date Compression Year with Calculation
      // of Accounting Period Entry.
      RunAndVerifyItemAnalysis(
        ItemAnalysisView,SalesLine,ItemAnalysisView."Date Compression"::Period,LibraryFiscalYear.GetAccountingPeriodDate(PostingDate));
    END;

    [Test]
    PROCEDURE ItemAnlaysisLineTemplate@7();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
      SalesLine@1003 : Record 37;
      ItemAnalysisView@1004 : Record 7152;
    BEGIN
      // Check Item Analysis View Entry after Posting Sales Invoice and Updation with Analysis Line Template.

      // Create Item Analysis and Create,Post Sales Invoice.
      Initialize;
      CreateAnalysisAndSalesInvoice(ItemAnalysisView,SalesLine,TRUE);

      // Exercise: Update Analysis Line Template with Item Analysis View Code.
      AnalysisLineTemplate.FINDFIRST;
      AnalysisLineTemplate.VALIDATE("Item Analysis View Code",ItemAnalysisView.Code);
      AnalysisLineTemplate.MODIFY(TRUE);

      // Verify: Verify Sales Amount Actual fields on Item Analysis View Entry with Sales Line Amount.
      VerifyItemAnalysisViewEntry(SalesLine,AnalysisLineTemplate."Item Analysis View Code");
    END;

    [Test]
    [HandlerFunctions(GLEntriesDimOvervMatrixPageHandler)]
    PROCEDURE GLEntriesDimOvervMatrixWithGenLines@45();
    VAR
      GenJournalLine@1000 : Record 81;
      GeneralLedgerEntries@1001 : TestPage 20;
      GLEntriesDimensionOverview@1002 : TestPage 563;
    BEGIN
      // Check GL Entries Dimension Overview Matrix with Posted General Line.

      // Setup: Create General Line with Random Amount. Assign Value in Global Variable.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(GenJournalLine."Bal. Account No.");
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entries Dimension Overview Matrix Page through GLEntriesDimOvervMatrixPageHandler.
      GeneralLedgerEntries.OPENVIEW;
      GeneralLedgerEntries.FILTER.SETFILTER("Document No.",GenJournalLine."Document No.");
      GLEntriesDimensionOverview.TRAP;
      GeneralLedgerEntries.GLDimensionOverview.INVOKE;
      GLEntriesDimensionOverview.ShowMatrix.INVOKE;
    END;

    [Test]
    [HandlerFunctions(GLBalancebyDimMatrixPageHandler)]
    PROCEDURE GLBalancebyDimMatrixRoundingFactorNone@44();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check GL Balance By Dimension Matrix with Rounding Factor None on Posted General Lines.

      // Setup: Create General Line with Random Amount.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entries Dimension Overview Matrix Page through GLEntriesDimOvervMatrixPageHandler.
      VerifyGLBalancebyDimMatrix(GenJournalLine."Bal. Account No.",RoundingFactorTxt);
    END;

    [Test]
    [HandlerFunctions(GLBalancebyDimMatrixPageHandler)]
    PROCEDURE GLBalancebyDimMatrixRoundingFactor1@43();
    BEGIN
      // Check GL Balance By Dimension Matrix with Rounding Factor 1 with Rounding 1 on Posted General Lines.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyGLBalancebyDimMatrix(1,1);
    END;

    [Test]
    [HandlerFunctions(GLBalancebyDimMatrixPageHandler)]
    PROCEDURE GLBalancebyDimMatrixRoundingFactor1000@42();
    BEGIN
      // Check GL Balance By Dimension Matrix with Rounding Factor 1000 with Rounding 0.1 on Posted General Lines.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyGLBalancebyDimMatrix(1000,0.1);
    END;

    [Test]
    [HandlerFunctions(GLBalancebyDimMatrixPageHandler)]
    PROCEDURE GLBalancebyDimMatrixRoundingFactor1000000@41();
    BEGIN
      // Check GL Balance By Dimension Matrix with Rounding Factor 1000000 with Rounding 0.1 on Posted General Lines.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyGLBalancebyDimMatrix(1000000,0.1);
    END;

    LOCAL PROCEDURE OpenAndVerifyGLBalancebyDimMatrix@39(RoundingFactor@1005 : Integer;Precision@1006 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Setup.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(ROUND(-GenJournalLine.Amount / RoundingFactor,Precision));
      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entries Dimension Overview Matrix Page through GLEntriesDimOvervMatrixPageHandler.
      VerifyGLBalancebyDimMatrix(GenJournalLine."Bal. Account No.",FORMAT(RoundingFactor));
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixRoundingFactorNone@52();
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisViewCode@1001 : Code[10];
    BEGIN
      // Check Analysis By Dimension Matrix with Rounding Factor None.

      // Setup: Create General Line and Analysis View with Dimension.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Analysis View Dimension Matrix for Rounding Factor None with AnalysisByDimensionMatrixPageHandler.
      OpenAnalysisByDimensionMatrix(AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt);
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixRoundingFactor1@38();
    BEGIN
      // Check Analysis By Dimension Matrix with Rounding Factor 1 with Rounding Value 1.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrix(1,1);
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixRoundingFactor1000@34();
    BEGIN
      // Check Analysis By Dimension Matrix with Rounding Factor 1000 with Rounding Value 0.1.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrix(1000,0.1);
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixRoundingFactor1000000@32();
    BEGIN
      // Check Analysis By Dimension Matrix with Rounding Factor 1000000 with Rounding Value 0.1.
      // Rounding Value is required as per Page.
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrix(1000000,0.1);
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ByPeriod_TotalAmountCorrect@104();
    VAR
      GenJournalLine@1001 : Record 81;
      AnalysisViewCode@1000 : Code[10];
    BEGIN
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);

      AnalysisViewCode :=
        CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt,PeriodTxt,
        ClosingDateOptions::Include,ShowAmounts::"Actual Amounts",'');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ByDimension1_TotalAmountCorrect@109();
    BEGIN
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrixWithLineDimCode(DimensionCategory::"Dimension 1");
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ByDimension2_TotalAmountCorrect@110();
    BEGIN
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrixWithLineDimCode(DimensionCategory::"Dimension 2");
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ByDimension3_TotalAmountCorrect@111();
    BEGIN
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrixWithLineDimCode(DimensionCategory::"Dimension 3");
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ByDimension4_TotalAmountCorrect@112();
    BEGIN
      Initialize;
      OpenAndVerifyAnalysisByDimensionMatrixWithLineDimCode(DimensionCategory::"Dimension 4");
    END;

    LOCAL PROCEDURE OpenAndVerifyAnalysisByDimensionMatrix@26(RoundingFactor@1007 : Integer;Precision@1008 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisViewCode@1009 : Code[10];
    BEGIN
      // Setup: Create General Line and Analysis View with Dimension.
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(ROUND(-GenJournalLine.Amount / RoundingFactor,Precision));
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Analysis View Dimension Matrix for different Rounding Factor with AnalysisByDimensionMatrixPageHandler.
      OpenAnalysisByDimensionMatrix(AnalysisViewCode,FALSE,FALSE,FORMAT(RoundingFactor));
    END;

    LOCAL PROCEDURE OpenAndVerifyAnalysisByDimensionMatrixWithLineDimCode@84(LineDimOption@1001 : Option);
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisView@1004 : Record 363;
      DimensionValue@1005 : Record 349;
      AnalysisViewCode@1009 : Code[10];
      LineDimCode@1003 : Text[20];
    BEGIN
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);

      AnalysisViewCode :=
        CreateAnalysisViewWithCertainDimension(GenJournalLine."Bal. Account No.",LineDimOption);

      AnalysisView.GET(AnalysisViewCode);
      CASE LineDimOption OF
        DimensionCategory::"Dimension 1":
          LineDimCode := AnalysisView."Dimension 1 Code";
        DimensionCategory::"Dimension 2":
          LineDimCode := AnalysisView."Dimension 2 Code";
        DimensionCategory::"Dimension 3":
          LineDimCode := AnalysisView."Dimension 3 Code";
        DimensionCategory::"Dimension 4":
          LineDimCode := AnalysisView."Dimension 4 Code";
      END;

      LibraryDimension.CreateDimensionValue(DimensionValue,LineDimCode);
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt,LineDimCode,
        ClosingDateOptions::Include,ShowAmounts::"Actual Amounts",'');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixWithOppositeSign@24();
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisViewCode@1007 : Code[10];
    BEGIN
      // Check Analysis By Dimension Matrix with Opposite Sign field TRUE.

      // Setup: Create General Line and Analysis View with Dimension.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(GenJournalLine.Amount);
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Analysis By Dimension Matrix Set Show Opposite Sign field TRUE with AnalysisByDimensionMatrixPageHandler.
      OpenAnalysisByDimensionMatrix(AnalysisViewCode,TRUE,FALSE,RoundingFactorTxt);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewPageHandler)]
    PROCEDURE AccScheduleOverviewMatrixGLAccount@20();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check Account Schedule Overview Matrix with Posted General Line.

      // Setup: Create and Post General Line. Assign Value in Global Variable.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create Account Schedule Name and Verify Account Schedule Overview Matrix page through AccScheduleOverviewPageHandler.
      CreateAccountScheduleAndVerifyAccountScheduleOverviewMatrix(GenJournalLine."Account No.",GenJournalLine.Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewPageHandler)]
    PROCEDURE AccScheduleOverviewMatrixGLAccountAndCurrency@15();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check Account Schedule Overview Matrix with Posted General Line and Use Additional Currency field TRUE.

      // Setup: Create and Post General Line. Assign Value in Global Variable.
      Initialize;
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create Account Schedule Name and Verify Account Schedule Overview Matrix page through AccScheduleOverviewPageHandler.
      CreateAccountScheduleAndVerifyAccountScheduleOverviewMatrix(GenJournalLine."Account No.",0,TRUE);
    END;

    LOCAL PROCEDURE CreateAccountScheduleAndVerifyAccountScheduleOverviewMatrix@33(Totaling@1005 : Text[250];ExpectedAmount@1007 : Decimal;UseAdditionalCurrency@1008 : Boolean);
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
      ColumnLayoutName@1002 : Record 333;
      ColumnLayout@1006 : Record 334;
      AccountScheduleNames@1003 : TestPage 103;
      AccountSchedule@1004 : TestPage 104;
    BEGIN
      // Exercise: Create Account Schedule Name and Line.
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      AccScheduleLine.VALIDATE("Row No.",FORMAT(LibraryRandom.RandInt(5)));
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      LibraryVariableStorage.Enqueue(ColumnLayoutName.Name);
      LibraryVariableStorage.Enqueue(AccScheduleLine."Row No.");
      LibraryVariableStorage.Enqueue(UseAdditionalCurrency);
      LibraryVariableStorage.Enqueue(ExpectedAmount);

      // Verify: Open Account Schedule Overview Matrix from Account Schedule Name through AccScheduleOverviewPageHandler.
      AccountScheduleNames.OPENVIEW;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccountSchedule.TRAP;
      AccountScheduleNames.EditAccountSchedule.INVOKE;
      AccountSchedule.Overview.INVOKE;
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisbyDimMatrixWithAnalysisViewSalesList@55();
    VAR
      Customer@1001 : Record 18;
      DimensionValue@1008 : Record 349;
      DefaultDimension@1007 : Record 352;
      Dimension@1006 : Record 348;
      ItemAnalysisView@1009 : Record 7152;
      SalespersonPurchaser@1005 : Record 13;
      SalesAnalysisbyDimensions@1011 : TestPage 7158;
      AnalysisViewListSales@1000 : TestPage 9371;
      Quantity@1002 : Decimal;
      Amount@1003 : Decimal;
    BEGIN
      // Check Sales Analysis By Dimension Matrix by Sales Person Purchase Filter and Check Values for Posted Sales Order.

      // Setup: Create Dimension for Item Analysis View List with Sales Person Purchase.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      SalespersonPurchaser.RENAME(DimensionValue.Code); // Required for Change Code as Dimension Value Code.
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",DimensionValue.Code,Dimension.Code,DimensionValue.Code);
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      ItemAnalysisView.MODIFY(TRUE);

      // Exercise.
      CreateAndPostSalesDocument(Customer."No.",CreateItem,SalespersonPurchaser.Code,Quantity,Amount);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Amount);

      // Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page through SalesAnalysisbyDimMatrixPageHandler.
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;
      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;
      SalesAnalysisbyDimensions.LineDimCode.SETVALUE(Dimension.Code);
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisByDimMatrixItemWiseMonthly@72();
    VAR
      Customer@1001 : Record 18;
      DimensionValue@1008 : Record 349;
      DimensionValue2@1013 : Record 349;
      DefaultDimension@1007 : Record 352;
      Dimension@1006 : Record 348;
      Dimension2@1002 : Record 348;
      ItemAnalysisView@1009 : Record 7152;
      SalespersonPurchaser@1005 : Record 13;
      SalesAnalysisbyDimensions@1011 : TestPage 7158;
      AnalysisViewListSales@1000 : TestPage 9371;
      LineDimOption@1010 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      ItemNo@1003 : Code[20];
      Quantity@1012 : Decimal;
      Amount@1004 : Decimal;
    BEGIN
      // Check Sales Analysis By Dimension Matrix monthly with Item and different Dimenssion and check values for posted Sales Orders.

      // Setup: Create Customer with dimenssion and create new Dimension as Salesperson/Purchaser and create new Sales Analysis View Card with monthly Date Compression.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
      ItemNo := CreateItem;

      LibraryDimension.CreateDimension(Dimension2);
      LibraryDimension.CreateDimensionValue(DimensionValue2,Dimension2.Code);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      SalespersonPurchaser.RENAME(DimensionValue2.Code); // Required for Change Code as Dimension Value Code.

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",DimensionValue2.Code,Dimension2.Code,DimensionValue2.Code);
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      ItemAnalysisView.VALIDATE("Dimension 2 Code",Dimension2.Code);
      ItemAnalysisView.VALIDATE("Date Compression",ItemAnalysisView."Date Compression"::Month);
      ItemAnalysisView.MODIFY(TRUE);

      // Exercise: Create and Post Sales documents.
      CreateAndPostSalesDocument(Customer."No.",ItemNo,SalespersonPurchaser.Code,Quantity,Amount);
      CreateAndPostSalesDocument(Customer."No.",ItemNo,SalespersonPurchaser.Code,Quantity,Amount);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Amount);

      // Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page with item filter through SalesAnalysisbyDimMatrixPageHandler.
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;
      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;
      SalesAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimOption::Item);
      SalesAnalysisbyDimensions.ItemFilter.SETVALUE(ItemNo);
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixMultiItemsPageHandler)]
    PROCEDURE SalesAnalysisByDimMatrixForMultiItems@73();
    VAR
      ItemAnalysisView@1007 : Record 7152;
      Dimension@1004 : Record 348;
      ItemSetFilter@1001 : Text[50];
      PostingDate@1000 : Date;
    BEGIN
      // [FEATURE] [Sales] [UI]
      // [SCENRIO 206788] Sales Anylysis by Dimensions must consider specified Dimension Code as columns

      // [GIVEN] Dimension "D" with dimension value "V"
      // [GIVEN] Item[1] .. Item[33] with dimension value "V"
      // [GIVEN] Posted sales invoice where Item[1].Quantity = 1, Item[1].Amount = 1000 and Item[33].Quantity = 133, Item[33].Amount = 1033
      // [GIVEN] "Sales Analysis by Dimensions" page has settings: "Show as lines" = "D" and "Show as columns" = "Item"
      // [GIVEN] "Sales Analysis by Dimensions" mstrix has 32 data item columns
      // [WHEN] Vew "Sales Analysis by Dimensions" matrix

      // [THEN] 1st set of Matrix shows "Total Amount" = 2033, "Total Quantity" = 134 and Amount = 1000 for Item[1] at 1st column
      // [THEN] 2nd set of Matrix shows "Total Amount" = 2033, "Total Quantity" = 134 and Amount = 1033 and Item[33] at 1st column
      Initialize;
      // Create and post a Sales Order as Ship and Invoice. Create Items more than count of columns. Open Analysis View List Sales page and invoke Update Item Analysis View.
      CreateAndPostMultiLineSalesOrder(Dimension,ItemSetFilter,PostingDate);
      // Create Item Analysis View.
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      ItemAnalysisView.MODIFY(TRUE);

      // Verify: Quantity and Amount on Sales Analysis by Dim Matrix page.
      InvokeShowMatrixOnDifferentItemSets(Dimension,ItemAnalysisView.Code,ItemSetFilter,PostingDate);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPeriodFiltersPageHandler)]
    PROCEDURE SalesAnalysisByDimMatrixPeriodFilters@90();
    VAR
      Customer@1000 : Record 18;
      ItemAnalysisView@1001 : Record 7152;
      SalesAnalysisByDimensions@1002 : TestPage 7158;
      AnalysisViewListSales@1003 : TestPage 9371;
      ItemNo@1004 : Code[20];
      DimOption@1005 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      Amount@1008 : Decimal;
    BEGIN
      // Check Sales Analysis By Dimension Matrix monthly with Item filter and check values for posted Sales Order in future period.

      // Setup: Create Customer and create new Item and create new Sales Analysis View Card with daily Date Compression.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      ItemNo := CreateItem;

      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Date Compression",ItemAnalysisView."Date Compression"::Day);
      ItemAnalysisView.MODIFY(TRUE);

      // Exercise: Create and Post Sales document
      Amount := CreateAndPostSalesDocumentAtDate(Customer."No.",ItemNo,CALCDATE('<+32M>',WORKDATE));

      // Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page with item filter.
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;
      SalesAnalysisByDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;

      SetFiltersWithItemOnSalesAnalysisDimensionsPage(
        SalesAnalysisByDimensions,FORMAT(DimOption::Item),FORMAT(DimOption::Period),ItemNo);
      SalesAnalysisByDimensions.PeriodType.SETVALUE(PeriodType::Month);

      SaveValsForAnalysisMarix(0,1,1);
      SalesAnalysisByDimensions.ShowMatrix_Process.INVOKE;

      SaveValsForAnalysisMarix(Amount,1,1);
      SalesAnalysisByDimensions.NextSet.INVOKE;
      SalesAnalysisByDimensions.ShowMatrix_Process.INVOKE;

      SaveValsForAnalysisMarix(0,1,1);
      SalesAnalysisByDimensions.PreviousSet.INVOKE;
      SalesAnalysisByDimensions.ShowMatrix_Process.INVOKE;
    END;

    [Test]
    [HandlerFunctions(PurchAnalysisbyDimMatrixPeriodFiltersPageHandler)]
    PROCEDURE PurchaseAnalysisByDimMatrixPeriodFilters@92();
    VAR
      Vendor@1000 : Record 23;
      ItemAnalysisView@1001 : Record 7152;
      PurchAnalysisByDimensions@1002 : TestPage 7157;
      AnalysisViewListPurch@1003 : TestPage 9370;
      ItemNo@1004 : Code[20];
      DimOption@1005 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      Amount@1008 : Decimal;
    BEGIN
      // Check Sales Analysis By Dimension Matrix monthly with Item filter and check values for posted Sales Order in future period.

      // Setup: Create Customer and create new Item and create new Sales Analysis View Card with daily Date Compression.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      ItemNo := CreateItem;

      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      ItemAnalysisView.VALIDATE("Date Compression",ItemAnalysisView."Date Compression"::Day);
      ItemAnalysisView.MODIFY(TRUE);

      // Exercise: Create and Post Sales document
      Amount := CreateAndPostPurchDocumentAtDate(Vendor."No.",ItemNo,CALCDATE('<+32M>',WORKDATE));

      // Verify: Open Analysis View List and Verify Sales Analysis By Dimension matrix Page with item filter.
      AnalysisViewListPurch.OPENEDIT;
      AnalysisViewListPurch.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListPurch."Codeunit Update Item Analysis View".INVOKE;
      PurchAnalysisByDimensions.TRAP;
      AnalysisViewListPurch.EditAnalysisView.INVOKE;
      SetFiltersWithItemOnPurchAnalysisDimensionsPage(
        PurchAnalysisByDimensions,FORMAT(DimOption::Item),FORMAT(DimOption::Period),ItemNo);
      PurchAnalysisByDimensions.PeriodType.SETVALUE(PeriodType::Month);

      SaveValsForAnalysisMarix(0,1,1);
      PurchAnalysisByDimensions.ShowMatrix.INVOKE;

      SaveValsForAnalysisMarix(Amount,1,1);
      PurchAnalysisByDimensions.NextSet.INVOKE;
      PurchAnalysisByDimensions.ShowMatrix.INVOKE;

      SaveValsForAnalysisMarix(0,1,1);
      PurchAnalysisByDimensions.PreviousSet.INVOKE;
      PurchAnalysisByDimensions.ShowMatrix.INVOKE;
    END;

    [Test]
    [HandlerFunctions(GLEntriesPageHandler)]
    PROCEDURE AnalysisViewEntryDrillDownToGLEntry@86();
    VAR
      Customer@1000 : Record 18;
      AnalysisView@1001 : Record 363;
      AnalysisViewEntries@1002 : TestPage 558;
      Quantity@1004 : Decimal;
      Amount@1003 : Decimal;
    BEGIN
      // Check that Analysis View Entry drilldown shows correct G/L Entry if 'Date Compression' is 'None'.

      // Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Date Compression",AnalysisView."Date Compression"::None);
      AnalysisView.MODIFY(TRUE);

      // Exercise.
      CreateAndPostSalesDocument(Customer."No.",CreateItem,'',Quantity,Amount);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Amount);
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);

      // Verify.
      AnalysisViewEntries.OPENVIEW;
      AnalysisViewEntries.FILTER.SETFILTER("Analysis View Code",AnalysisView.Code);
      AnalysisViewEntries.Amount.LOOKUP;
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimensionsPageHandler)]
    PROCEDURE CheckColumnSetOnSalesAnalysisByDimension@76();
    VAR
      ItemAnalysisView@1000 : Record 7152;
      Dimension@1003 : Record 348;
      DimensionValue@1004 : Record 349;
      AnalysisViewListSales@1002 : TestPage 9371;
    BEGIN
      // Check Sales Analysis by Dimensions shows correct values in the RTC when changing the Dimension in the Show as Columns field.

      // Setup: Create Item Analysis View & Create Dimension.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Dimension 2 Code",Dimension.Code);
      ItemAnalysisView.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(Dimension.Code);
      LibraryVariableStorage.Enqueue(DimensionValue.Code);

      // Exercise: Open Sales Analysis by Dimension Page.
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListSales.EditAnalysisView.INVOKE;

      // Verify: Verification done in SalesAnalysisbyDimensionsPageHandler.
    END;

    [Test]
    PROCEDURE CheckFindRecWithInternalDateFilter@95();
    VAR
      ItemAnalysisView@1000 : Record 7152;
      DimCodeBuf@1001 : Record 367;
      Item@1002 : Record 27;
      ItemAnalysisMgt@1003 : Codeunit 7153;
      DateFilter@1004 : Text[30];
      InternalDateFilter@1005 : Text[30];
      DimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1007 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      PeriodStart@1008 : Date;
      PeriodEnd@1009 : Date;
      PeriodInitialized@1010 : Boolean;
    BEGIN
      // Check that 'FindRec' function in 'Item Analysis Management' returns right period in DimCodeBuf

      // Setup
      ItemAnalysisView.INIT;
      PeriodInitialized := TRUE;
      DimOption := DimOption::Period;
      PeriodType := PeriodType::Month;
      PeriodStart := CALCDATE('<-CM>',WORKDATE);
      PeriodEnd := CALCDATE('<+1Y-1D>',PeriodStart);

      DateFilter := '';
      Item.SETRANGE("Date Filter",PeriodStart,PeriodEnd);
      InternalDateFilter := COPYSTR(Item.GETFILTER("Date Filter"),1,MAXSTRLEN(InternalDateFilter));

      // Exercize
      ItemAnalysisMgt.FindRec(
        ItemAnalysisView,DimOption,DimCodeBuf,'','','',
        PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,'','','');

      // Verify
      Assert.AreEqual(PeriodStart,DimCodeBuf."Period Start",StartPeriodErr);
      Assert.AreEqual(CALCDATE('<+1M-1D>',PeriodStart),DimCodeBuf."Period End",EndPeriodErr);
    END;

    [Test]
    [HandlerFunctions(GLBudgetNamesHandler)]
    PROCEDURE AccountScheduleOverviewWithGLBudgetFilter@93();
    VAR
      GLBudgetName@1000 : Record 95;
    BEGIN
      // Check that 'Account Schedule Overview' lets lookup values with max length for 'G/LBudgetFilter' control.

      // Setup.
      Initialize;

      // Exercise.
      WITH GLBudgetName DO BEGIN
        INIT;
        VALIDATE(Name,LibraryUtility.GenerateGUID);
        INSERT;
      END;

      // Verify.
      VerifyLookupInAccountScheduleOverview(6,GLBudgetName.Name); // G/L Budget Filter
    END;

    [Test]
    [HandlerFunctions(CostBudgetNamesHandler)]
    PROCEDURE AccountScheduleOverviewWithCostBudgetFilter@96();
    VAR
      CostBudgetName@1000 : Record 1110;
    BEGIN
      // Check that 'Account Schedule Overview' lets lookup values with max length for 'CostBudgetFilter' control.

      // Setup.
      Initialize;

      // Exercise.
      WITH CostBudgetName DO BEGIN
        INIT;
        VALIDATE(Name,LibraryUtility.GenerateGUID);
        INSERT;
      END;

      // Verify.
      VerifyLookupInAccountScheduleOverview(9,CostBudgetName.Name); // Cost Budget Filter
    END;

    [Test]
    PROCEDURE NoOfAnalysisViewEntryDateCompressionNone@150();
    VAR
      GLAccount@1002 : Record 15;
      AnalysisView@1007 : Record 363;
      Dimension@1001 : Record 348;
      DimensionValue@1003 : Record 349;
      NoOfGLEntries@1004 : Integer;
    BEGIN
      // Check that Analysis View shows correct number of Analysis Entry if 'Date Compression' is 'None'.

      // Setup.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);

      LibraryERM.CreateAnalysisView(AnalysisView);
      WITH AnalysisView DO BEGIN
        VALIDATE("Date Compression","Date Compression"::None);
        VALIDATE("Dimension 1 Code",Dimension.Code);
        MODIFY(TRUE);
      END;

      // Exercise.
      NoOfGLEntries := LibraryRandom.RandIntInRange(2,10);
      CreatePostJournalLinesWithDimension(DimensionValue,GLAccount."No.",NoOfGLEntries);
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);

      // Verify.
      VerifyNoOfAnalysisViewEntry(AnalysisView.Code,DimensionValue.Code,GLAccount."No.",NoOfGLEntries);
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_ExcludeClosingEntries_RecordsOnClosingDatesExcluded@133();
    VAR
      GenJournalLine@1000 : Record 81;
      GLAccount@1002 : Record 15;
      AnalysisViewCode@1001 : Code[10];
    BEGIN
      Initialize;
      LibraryERMCountryData.UpdateLocalData;

      CreateGeneralLineWithGLAccount(GenJournalLine);
      GenJournalLine.VALIDATE("Posting Date",FindLastFYClosingDate);
      GenJournalLine.MODIFY;
      LibraryVariableStorage.Enqueue(0);

      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt,GLAccount.TABLECAPTION,
        ClosingDateOptions::Exclude,ShowAmounts::"Actual Amounts",'');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrix_BudgetEntries_AmountCorrect@100();
    VAR
      GLAccount@1006 : Record 15;
      GenJournalLine@1004 : Record 81;
      AnalysisViewCode@1003 : Code[10];
    BEGIN
      // 1. Setup: Create Dimension, Create New G/L Budget Name, update Dimension as Budget Dimension 1 Code on it.
      Initialize;

      CreateGeneralLineWithGLAccount(GenJournalLine);
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      LibraryVariableStorage.Enqueue(
        CreateAnalysisViewBudgetEntry(WORKDATE,AnalysisViewCode,GenJournalLine."Bal. Account No."));

      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt,GLAccount.TABLECAPTION,
        ClosingDateOptions::Include,ShowAmounts::"Budgeted Amounts",'');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixShowsAmountLCYAfterCurrenyPosting@128();
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisViewCode@1007 : Code[10];
    BEGIN
      // [SCENARIO 122162] Analysis By Dimension Matrix shows Amounts in LCY after Gen. Journal posting with Currency
      Initialize;

      // [GIVEN] Create and post general journal line with Currency and AmountLCY = "A"
      CreateGeneralLineWithGLAccount(GenJournalLine);
      GenJournalLine.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      GenJournalLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(-GenJournalLine."Amount (LCY)");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [GIVEN] Create new Analysis View
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      // [WHEN] Open Analysis By Dimension Matrix
      OpenAnalysisByDimensionMatrix(AnalysisViewCode,FALSE,FALSE,RoundingFactorTxt);

      // [THEN] Analysis By Dimension Matrix Amount = "A"
      // Verify amount in AnalysisByDimensionMatrixPageHandler.
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixShowsAmountACY@102();
    VAR
      GenJournalLine@1000 : Record 81;
      AnalysisViewCode@1007 : Code[10];
      AddRepCurrencyCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 122162] Analysis By Dimension Matrix shows Amounts in ACY when "Show Amounts in Add. Reporting Currency" = TRUE
      Initialize;

      // [GIVEN] Create and setup Additional Currency
      AddRepCurrencyCode := LibraryERM.CreateCurrencyWithRandomExchRates;
      UpdateGLSetupAddCurrency(AddRepCurrencyCode);

      // [GIVEN] Create and post general journal line with AmountACY = "A"
      CreateGeneralLineWithGLAccount(GenJournalLine);
      LibraryVariableStorage.Enqueue(-LibraryERM.ConvertCurrency(GenJournalLine.Amount,'',AddRepCurrencyCode,WORKDATE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [GIVEN] Create new Analysis View
      AnalysisViewCode := CreateAnalysisViewWithDimension(GenJournalLine."Bal. Account No.");

      // [WHEN] Open Analysis By Dimension Matrix with "Show Amounts in Add. Reporting Currency" = TRUE
      OpenAnalysisByDimensionMatrix(AnalysisViewCode,FALSE,TRUE,RoundingFactorTxt);

      // [THEN] Analysis By Dimension Matrix Amount = "A"
      // Verify amount in AnalysisByDimensionMatrixPageHandler.

      // Tear Down
      UpdateGLSetupAddCurrency('');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixFilterDimTotaling@107();
    VAR
      AnalysisView@1001 : Record 363;
      DimensionValue1@1003 : Record 349;
      DimensionValue2@1004 : Record 349;
      DimensionValueTotal@1007 : Record 349;
      GLAccountNo@1005 : Code[20];
      TotalAmount@1008 : Decimal;
    BEGIN
      // [FEATURE] [Analysis by Dimensions] [UI]
      // [SCENARIO 372110] Filter Dimension Value with type End-Total in the Analysis by Dimension Matrix page
      Initialize;

      // [GIVEN] Analysis View for G/L Account = "G" and "Dimension 1 Code" = new Dimension "Dim"
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      AnalysisView.GET(
        CreateAnalysisViewWithCertainDimension(GLAccountNo,DimensionCategory::"Dimension 1"));

      // [GIVEN] Dimension Values "D1", "D2" Dimension "Dim"
      LibraryDimension.CreateDimensionValue(DimensionValue1,AnalysisView."Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue2,AnalysisView."Dimension 1 Code");

      // [GIVEN] Dimension Value with type End-Total and Totaling = "D1".."D2"
      LibraryDimension.CreateDimensionValue(DimensionValueTotal,AnalysisView."Dimension 1 Code");
      DimensionValueTotal.VALIDATE("Dimension Value Type",DimensionValueTotal."Dimension Value Type"::"End-Total");
      DimensionValueTotal.VALIDATE(Totaling,STRSUBSTNO('%1..%2',DimensionValue1.Code,DimensionValue2.Code));
      DimensionValueTotal.MODIFY(TRUE);

      // [GIVEN] Posted Entries for G/L Account = "G" with Amounts = "X1" for "D1" dimension, "X2" for "D2" dimension
      TotalAmount :=
        CreateAndPostJournalLineWithDimension(DimensionValue1,GLAccountNo,WORKDATE);
      TotalAmount +=
        CreateAndPostJournalLineWithDimension(DimensionValue2,GLAccountNo,WORKDATE);
      LibraryVariableStorage.Enqueue(TotalAmount);

      // [WHEN] Open Analysis by Dimension Matrix page
      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisView.Code,FALSE,FALSE,RoundingFactorTxt,FORMAT(LineDimOptionRef::"G/L Account"),
        ClosingDateOptions::Include,ShowAmounts::"Actual Amounts",DimensionValueTotal.Code);

      // [THEN] Analysis By Dimension Matrix Amount = Total Amount = "X1" + "X2"
      // Verification is done in AnalysisByDimensionMatrixPageHandler
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionMatrixTwoLinesPageHandler)]
    PROCEDURE AnalysisByDimensionMatrixFilterByCode@147();
    VAR
      AnalysisView@1001 : Record 363;
      DimensionValue1@1003 : Record 349;
      DimensionValue2@1004 : Record 349;
      GLAccountNo@1005 : Code[20];
      LineAmount1@1000 : ARRAY [2] OF Decimal;
      LineAmount2@1002 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Analysis by Dimensions] [UI]
      // [SCENARIO 376318] Filter on the Code field in the Analysis by Dimension Matrix page should show records within the filter with correct Amounts.
      Initialize;

      // [GIVEN] Analysis View with "Dimension 1 Code" as Lines and Period as Columns
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      AnalysisView.GET(
        CreateAnalysisViewWithCertainDimension(GLAccountNo,DimensionCategory::"Dimension 1"));

      // [GIVEN] Dimension Values "D1", "D2"
      LibraryDimension.CreateDimensionValue(DimensionValue1,AnalysisView."Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue2,AnalysisView."Dimension 1 Code");

      // [GIVEN] Posted G/L Entries with Amount = "X1" on Date1, Amount = "X2" on Date2 for "D1" dimension
      LineAmount1[1] := CreateAndPostJournalLineWithDimension(DimensionValue1,GLAccountNo,WORKDATE);
      LineAmount1[2] := CreateAndPostJournalLineWithDimension(DimensionValue1,GLAccountNo,WORKDATE + 1);

      // [GIVEN] Posted G/L Entries with Amount = "Y1" on Date1, Amount = "Y2" on Date2 for "D2" dimension
      LineAmount2[1] := CreateAndPostJournalLineWithDimension(DimensionValue2,GLAccountNo,WORKDATE);
      LineAmount2[2] := CreateAndPostJournalLineWithDimension(DimensionValue2,GLAccountNo,WORKDATE + 1);

      LibraryVariableStorage.Enqueue(LineAmount1[1] + LineAmount1[2]);
      LibraryVariableStorage.Enqueue(LineAmount2[1] + LineAmount2[2]);
      LibraryVariableStorage.Enqueue(DimensionValue1.Code);
      LibraryVariableStorage.Enqueue(LineAmount1[1]);
      LibraryVariableStorage.Enqueue(LineAmount1[2]);

      // [GIVEN] Analysis by Dimension Matrix page has Total Amount = "X1" + "X2" for "D1" dimension
      // [GIVEN] Analysis by Dimension Matrix page has Total Amount = "Y1" + "Y2" for "D2" dimension
      OpenAnalysisByDimensionMatrixWithLineDimCode(
        AnalysisView.Code,FALSE,FALSE,RoundingFactorTxt,DimensionValue1."Dimension Code",
        ClosingDateOptions::Include,ShowAmounts::"Actual Amounts",'');

      // [WHEN] Filter Code by "D1" dimension

      // [THEN] Analysis by Dimension Matrix page has Field1 = "X1", Field2 = "X2" for "D1" dimension
      // [THEN] No next record for "D2" dimension on the page
      // Filter and verification is done in AnalysisByDimensionMatrixTwoLinesPageHandler
    END;

    [Test]
    PROCEDURE RunGLEntriesDimOvervMatrixByDefault@106();
    VAR
      GLEntry@1001 : Record 17;
      GLEntriesDimOvervMatrix@1000 : TestPage 9241;
    BEGIN
      // [FEATURE] [UT] [UI] [G/L Entries Dimension Overview] [Matrix]
      // [SCENARIO 377967] Should be possible to run G/L Entries Dim. Overv. Matrix without calling Load() function
      Initialize;

      // [WHEN] Open G/L Entries Dim. Overv. Matrix
      GLEntriesDimOvervMatrix.OPENVIEW;

      // [THEN] Matrix position is set to the first G/L Entry record
      GLEntry.FINDFIRST;
      GLEntriesDimOvervMatrix."Entry No.".ASSERTEQUALS(GLEntry."Entry No.");
    END;

    [Test]
    PROCEDURE RunAnalysisByDimensionMatrixByDefault@108();
    VAR
      GLAccount@1001 : Record 15;
      AnalysisbyDimensionsMatrix@1000 : TestPage 9249;
    BEGIN
      // [FEATURE] [UT] [UI] [Analysis By Dimensions] [Matrix]
      // [SCENARIO 378415] Should be possible to run Analysis By Dimensions Matrix without calling Load() function
      Initialize;

      // [WHEN] Open Analysis By Dimensions Matrix
      AnalysisbyDimensionsMatrix.OPENVIEW;

      // [THEN] Matrix position is set to the first G/L Account record as default Show as Line option
      GLAccount.FINDFIRST;
      AnalysisbyDimensionsMatrix.Code.ASSERTEQUALS(GLAccount."No.");
    END;

    [Test]
    PROCEDURE ItemTypeServiceAnalysisViewTwoStepsPosting@113();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
      ItemAnalysisView@1004 : Record 7152;
      ItemAnalysisViewEntry@1001 : Record 7154;
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Non-Inventoriable]
      // [SCENARIO 379776] Item Analysis View Entry Update Posting TRUE for Purchase Order, Item of type Service. Posting in two steps.
      Initialize;

      // [GIVEN] Item Analysis View with Update Posting TRUE. Item of Type::Service.
      ItemNo := CreateItemTypeServiceAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase,TRUE);

      // [GIVEN] Purchase Order. Item of Type::Service.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);

      // [GIVEN] First step of posting: post receipt and update analysis view
      PostPurchaseDocAndUpdateItemAnalysisView(PurchaseHeader,ItemAnalysisView,TRUE,FALSE); // receipt

      // [WHEN] Second step of posting: post invoice and update analysis view
      PostPurchaseDocAndUpdateItemAnalysisView(PurchaseHeader,ItemAnalysisView,FALSE,TRUE); // invoice

      FindItemAnalysisViewEntry(ItemAnalysisViewEntry,PurchaseLine."Buy-from Vendor No.",PurchaseLine."No.",ItemAnalysisView.Code);
      ItemAnalysisViewEntry.FINDFIRST;

      // [THEN] "Cost Amount (Non-Invtbl.)" on Item Analysis View Entry is equal to Purchase Line Amount.
      Assert.AreEqual(PurchaseLine.Amount,ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",WrongCostAmountNonInvtblErr);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageDrillDownPageHandler,ItemAnalysisViewEntryPageHandler)]
    PROCEDURE DrillDownMatrixValueFromSalesAnalysisByDimWithORDimFilter@116();
    VAR
      Item@1007 : Record 27;
      Dimension@1001 : Record 348;
      DimValue@1002 : ARRAY [3] OF Record 349;
      ItemAnalysisView@1003 : Record 7152;
      AnalysisViewListSales@1004 : TestPage 9371;
      SalesAnalysisbyDimensions@1005 : TestPage 7158;
      ItemNo@1000 : Code[20];
      ExpectedAmount@1006 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 380815] The filter "X|Y" handles correctly when drill-down values on Matrix page for "Sales Analysis by Dimensions" page with "Show Column Name" option

      Initialize;

      // [GIVEN] Dimensions "D1","D2" and "D3" with same Dimension Code "D"
      ItemNo := LibraryInventory.CreateItemNo;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimValue[1],Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimValue[2],Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimValue[3],Dimension.Code);

      // [GIVEN] Item Sales Analysis View with "Dimension 1 Code" = "D"
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      ItemAnalysisView.MODIFY(TRUE);

      // [GIVEN] Item Analysis View Entry "I1" for dimension "D1" with Amount = 100
      // [GIVEN] Item Analysis View Entry "I2" for dimension "D3" with Amount = 50
      ExpectedAmount[1] :=
        MockItemAnalysisViewEntry(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemNo,DimValue[1].Code);
      ExpectedAmount[2] :=
        MockItemAnalysisViewEntry(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemNo,DimValue[3].Code);
      LibraryVariableStorage.Enqueue(ExpectedAmount[1]);
      LibraryVariableStorage.Enqueue(ExpectedAmount[2]);

      // [GIVEN] "Sales Analysis by Dimensions" page is opened. Show as Lines - Item, Show as Columns - dimension "D". Dimension filter is "D1|D3"
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;

      SetFiltersWithItemOnSalesAnalysisDimensionsPage(
        SalesAnalysisbyDimensions,Item.TABLENAME,Dimension.Code,ItemNo);
      SalesAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);

      // [GIVEN] Matrix page is opened from "Sales Analysis by Dimensions" page
      SalesAnalysisbyDimensions.Dim1FilterControl.SETVALUE(STRSUBSTNO('%1|%2',DimValue[1].Code,DimValue[3].Code));
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;

      // [WHEN] Drill down "Field 1" and "Field 2" associated with "D1" and "D3" accordingly
      // Done in SalesAnalysisbyDimMatrixPageDrillDownPageHandler

      // [THEN] "Item Analysis View Entry" is shown ("I1" for "D1", Amount = 100; "I2" for "D3", Amount = 50)
      // Done in ItemAnalysisViewEntryPageHandler
    END;

    [Test]
    [HandlerFunctions(PurchAnalysisbyDimMatrixPageDrillDownPageHandler,ItemAnalysisViewEntryPageHandler)]
    PROCEDURE DrillDownMatrixValueFromPurchAnalysisByDimWithORDimFilter@145();
    VAR
      Item@1007 : Record 27;
      Dimension@1001 : Record 348;
      DimValue@1002 : ARRAY [3] OF Record 349;
      ItemAnalysisView@1003 : Record 7152;
      AnalysisViewListPurchase@1004 : TestPage 9370;
      PurchAnalysisbyDimensions@1005 : TestPage 7157;
      ItemNo@1000 : Code[20];
      ExpectedAmount@1006 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 380815] The filter "X|Y" handles correctly when drill-down values on Matrix page for "Purchase Analysis by Dimensions" page with "Show Column Name" option

      Initialize;

      // [GIVEN] Dimensions "D1","D2" and "D3" with same Dimension Code "D"
      ItemNo := LibraryInventory.CreateItemNo;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimValue[1],Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimValue[2],Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimValue[3],Dimension.Code);

      // [GIVEN] Item Purchase Analysis View with "Dimension 1 Code" = "D"
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      ItemAnalysisView.MODIFY(TRUE);

      // [GIVEN] Item Analysis View Entry "I1" for dimension "D1"
      // [GIVEN] Item Analysis View Entry "I2" for dimension "D3"
      ExpectedAmount[1] :=
        MockItemAnalysisViewEntry(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemNo,DimValue[1].Code);
      ExpectedAmount[2] :=
        MockItemAnalysisViewEntry(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemNo,DimValue[3].Code);
      LibraryVariableStorage.Enqueue(ExpectedAmount[1]);
      LibraryVariableStorage.Enqueue(ExpectedAmount[2]);

      // [GIVEN] "Purchase Analysis by Dimensions" page is opened. Show as Lines - Item, Show as Columns - dimension "D". Dimension filter is "D1|D3"
      AnalysisViewListPurchase.OPENEDIT;
      AnalysisViewListPurchase.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      PurchAnalysisbyDimensions.TRAP;
      AnalysisViewListPurchase.EditAnalysisView.INVOKE;
      SetFiltersWithItemOnPurchAnalysisDimensionsPage(PurchAnalysisbyDimensions,Item.TABLENAME,Dimension.Code,ItemNo);
      PurchAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);

      // [GIVEN] Matrix page is opened from "Purchase Analysis by Dimensions" page
      PurchAnalysisbyDimensions.Dim1FilterControl.SETVALUE(STRSUBSTNO('%1|%2',DimValue[1].Code,DimValue[3].Code));
      PurchAnalysisbyDimensions.ShowMatrix.INVOKE;

      // [WHEN] Drill down "Field 1" and "Field 2" associated with "D1" and "D3" accordingly
      // Done in PurchaseAnalysisbyDimMatrixPageDrillDownPageHandler

      // [THEN] "Item Analysis View Entry" is shown ("I1" for "D1", "I2" for "D3")
      // Done in ItemAnalysisViewEntryPageHandler
    END;

    [Test]
    [HandlerFunctions(AnalysisbyDimensionsMatrixPageHandlerTotalAmountDrill,AnalysisViewPageHandler,GeneralLedgerEntriesPageHandler,GLEntriesDimensionOverviewPageHandler,GLEntriesDimOvervMatrixVerifyCountPageHandler)]
    PROCEDURE GLEntriesDimOvervMatrixWithGenLinesCheckRecordsQty@131();
    VAR
      GLAccount@1006 : Record 15;
      DimensionValue@1005 : Record 349;
      AnalysisView@1007 : Record 363;
      AnalysisViewList@1004 : TestPage 556;
      AnalysisbyDimensions@1009 : TestPage 554;
      NoOfGLEntries@1003 : Integer;
    BEGIN
      // [SCENARIO 381290] Check quantity of records in G/L Entries Dimension Overview Matrix opened for selected Posted General Lines
      Initialize;

      // [GIVEN] G/L Account "GLACC" with a new Dimension "DIM" with a Dimension Value "DV"
      // [GIVEN] Analysis View "AV" with the source of G/L Account and with "DIM" and "GLACC"
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateDimensionInAnalysisView(AnalysisView,GLAccount."No.",DimensionValue."Dimension Code");

      // [GIVEN] A 3 Gen. Journal Lines posted with "GLACC" and "DIM"
      NoOfGLEntries := LibraryRandom.RandIntInRange(2,10);
      LibraryVariableStorage.Enqueue(NoOfGLEntries);
      CreatePostJournalLinesWithDimension(DimensionValue,GLAccount."No.",NoOfGLEntries);

      // [GIVEN] "AV" is updated with codeunit "Update Analysis View"
      LibraryERM.UpdateAnalysisView(AnalysisView);

      // [WHEN] G/L Entries Dimension Overview Matrix Page is opened for Analysis View "AV"
      AnalysisViewList.OPENVIEW;
      AnalysisViewList.GOTORECORD(AnalysisView);
      AnalysisbyDimensions.TRAP;
      AnalysisViewList.EditAnalysis.INVOKE;

      // [THEN] GL Entries Dimension Overview Matrix Page shows 3 entries through GLEntriesDimOvervMatrixVerifyCountPageHandler
      AnalysisbyDimensions.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAnalysisViewWithDimension@74(AccountFilter@1007 : Code[250]) : Code[10];
    BEGIN
      EXIT(CreateAnalysisViewWithCertainDimension(AccountFilter,4));
    END;

    LOCAL PROCEDURE CreateAnalysisViewWithCertainDimension@115(AccountFilter@1007 : Code[250];DimensionOption@1000 : Option) : Code[10];
    VAR
      AnalysisView@1005 : Record 363;
      Dimension@1006 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Account Source",AnalysisView."Account Source"::"G/L Account");
      AnalysisView.VALIDATE("Account Filter",AccountFilter);
      CASE DimensionOption OF
        DimensionCategory::"Dimension 1":
          AnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
        DimensionCategory::"Dimension 2":
          AnalysisView.VALIDATE("Dimension 2 Code",Dimension.Code);
        DimensionCategory::"Dimension 3":
          AnalysisView.VALIDATE("Dimension 3 Code",Dimension.Code);
        DimensionCategory::"Dimension 4":
          AnalysisView.VALIDATE("Dimension 4 Code",Dimension.Code);
      END;
      AnalysisView.MODIFY(TRUE);
      EXIT(AnalysisView.Code);
    END;

    LOCAL PROCEDURE CreateAnalysisAndSalesInvoice@62(VAR ItemAnalysisView@1004 : Record 7152;VAR SalesLine@1000 : Record 37;UpdatePosting@1003 : Boolean) PostingDate : Date;
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      DimensionValue@1007 : Record 349;
      Item@1005 : Record 27;
      LibraryDimension@1001 : Codeunit 131001;
      ItemNo@1002 : Code[20];
    BEGIN
      // Setup: Create Item Analysis View with Update Posting TRUE and Sales Invoice.
      GeneralLedgerSetup.GET;
      CreateItemAnalysisView(ItemAnalysisView,FALSE,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");

      // Exercise.
      ItemNo := COPYSTR(ItemAnalysisView."Item Filter",1,LibraryUtility.GetFieldLength(DATABASE::Item,Item.FIELDNO("No.")));
      PostingDate := CreateAndPostSalesInvoice(SalesLine,DimensionValue.Code,ItemNo);
      IF UpdatePosting THEN
        CODEUNIT.RUN(CODEUNIT::"Update Item Analysis View",ItemAnalysisView);
    END;

    LOCAL PROCEDURE RunAndVerifyItemAnalysis@63(ItemAnalysisView@1003 : Record 7152;SalesLine@1001 : Record 37;DateCompression@1000 : Option;PostingDate@1002 : Date);
    VAR
      ItemAnalysisViewEntry@1004 : Record 7154;
    BEGIN
      // Exercise.
      UpdateAndRunItemAnalysisView(ItemAnalysisView,DateCompression);

      FindItemAnalysisViewEntry(ItemAnalysisViewEntry,SalesLine."Sell-to Customer No.",SalesLine."No.",ItemAnalysisView.Code);
      ItemAnalysisViewEntry.FINDFIRST;
      ItemAnalysisViewEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE UpdateAndRunItemAnalysisView@67(ItemAnalysisView@1002 : Record 7152;DateCompression@1003 : Option);
    VAR
      UpdateItemAnalysisView@1004 : Codeunit 7150;
    BEGIN
      ItemAnalysisView.GET(ItemAnalysisView."Analysis Area",ItemAnalysisView.Code);
      ItemAnalysisView.VALIDATE("Date Compression",DateCompression);
      ItemAnalysisView.MODIFY(TRUE);

      UpdateItemAnalysisView.RUN(ItemAnalysisView);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@57(CustomerNo@1006 : Code[20];ItemNo@1005 : Code[20];SalespersonCode@1001 : Code[10];VAR Quantity@1000 : Decimal;VAR Amount@1004 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Take Random Values for Quantity and Sales Price and Assign Values in Global Variables.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Salesperson Code",SalespersonCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));

      // Amount and Quantity are getting accumulated when calling CreateAndPostSalesDocument multiple times.
      Quantity += SalesLine.Quantity;
      Amount += SalesLine."Line Amount";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentAtDate@87(CustomerNo@1000 : Code[20];ItemNo@1001 : Code[20];DocDate@1002 : Date) : Decimal;
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Take Random Values for Quantity and Sales Price and Assign Values in Global Variables.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      WITH SalesHeader DO BEGIN
        VALIDATE("Order Date",DocDate);
        VALIDATE("Posting Date",DocDate);
        VALIDATE("Shipment Date",DocDate);
        MODIFY(TRUE);
      END;
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(SalesLine."Line Amount");
    END;

    LOCAL PROCEDURE CreateAndPostPurchDocumentAtDate@85(VendorNo@1000 : Code[20];ItemNo@1001 : Code[20];DocDate@1002 : Date) : Decimal;
    VAR
      PurchHeader@1003 : Record 38;
      PurchLine@1004 : Record 39;
    BEGIN
      // Take Random Values for Quantity and Sales Price and Assign Values in Global Variables.
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,VendorNo);
      WITH PurchHeader DO BEGIN
        VALIDATE("Order Date",DocDate);
        VALIDATE("Posting Date",DocDate);
        VALIDATE("Expected Receipt Date",DocDate);
        MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
      EXIT(PurchLine."Line Amount");
    END;

    LOCAL PROCEDURE CreateGeneralLineWithGLAccount@46(VAR GenJournalLine@1001 : Record 81);
    VAR
      GLAccount@1002 : Record 15;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@50(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;AccountType@1005 : Option;AccountNo@1004 : Code[20]);
    VAR
      GLAccount@1007 : Record 15;
    BEGIN
      // Using Random Number Generator for Amount.
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,
        GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,AccountType,AccountNo,LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisViewDimension@71(Dimension1Code@1000 : Code[20]) : Code[10];
    VAR
      AnalysisView@1001 : Record 363;
    BEGIN
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Dimension 1 Code",Dimension1Code);
      AnalysisView.MODIFY(TRUE);
      EXIT(AnalysisView.Code);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@66(VAR SalesLine@1000 : Record 37;DimensionValue@1002 : Code[20];ItemNo@1004 : Code[20]) : Date;
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Take Random Quantity for Sales Line.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomerWithDimension(DimensionValue));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(SalesHeader."Posting Date");
    END;

    LOCAL PROCEDURE CreateAndPostMultiLineSalesOrder@75(VAR Dimension@1002 : Record 348;VAR ItemSetFilter@1001 : Text[50];VAR PostingDate@1000 : Date);
    VAR
      Customer@1014 : Record 18;
      SalesHeader@1003 : Record 36;
      DimensionValue@1009 : Record 349;
      Item@1008 : Record 27;
      i@1007 : Integer;
      NoOfColumns@1005 : Integer;
      DimensionSetID@1010 : Integer;
      DimSetID@1015 : Integer;
      TotalQuantity@1012 : ARRAY [2] OF Decimal;
      TotalAmount@1011 : ARRAY [2] OF Decimal;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      // Set the number of columns in page Sales Analysis by Dim Matrix.
      NoOfColumns := 32;
      // Create dimension for Sale lines.
      DimensionSetID := 0;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);
      Item.FINDSET;
      Item.NEXT(1);
      ItemSetFilter := Item."No.";
      GetNextItemDefaultDims(Item,0);
      CreateSalesLineWithDimForItem(TotalQuantity[1],TotalAmount[1],SalesHeader,DimSetID,Item."No.");
      // Move to the first column of the second columns set.
      GetNextItemDefaultDims(Item,NoOfColumns);
      CreateSalesLineWithDimForItem(TotalQuantity[2],TotalAmount[2],SalesHeader,DimSetID,Item."No.");
      ItemSetFilter := ItemSetFilter + '..' + Item."No.";

      FOR i := 1 TO 2 DO BEGIN
        LibraryVariableStorage.Enqueue(TotalQuantity[1] + TotalQuantity[2]); // Matrix's Total Quantity
        LibraryVariableStorage.Enqueue(TotalAmount[1] + TotalAmount[2]); // Matrix's Total Amount
        LibraryVariableStorage.Enqueue(TotalAmount[i]); // Matrix's 1st column amount
      END;

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      PostingDate := SalesHeader."Posting Date";
    END;

    LOCAL PROCEDURE CreateSalesLineWithDimForItem@89(VAR TotalQuantity@1000 : Decimal;VAR TotalAmount@1001 : Decimal;SalesHeader@1003 : Record 36;DimSetId@1004 : Integer;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Dimension Set ID",DimSetId);
      SalesLine.MODIFY(TRUE);
      TotalQuantity := SalesLine.Quantity;
      TotalAmount := SalesLine."Line Amount";
    END;

    LOCAL PROCEDURE InvokeShowMatrixOnDifferentItemSets@77(Dimension@1003 : Record 348;ItemAnalysisViewCode@1002 : Code[10];ItemFilter@1001 : Text[50];DateFilter@1000 : Date);
    VAR
      Item@1007 : Record 27;
      SalesAnalysisbyDimensions@1006 : TestPage 7158;
      AnalysisViewListSales@1008 : TestPage 9371;
      ShowValueAs@1005 : 'Sales Amount,COGS Amount,Quantity';
      ViewBy@1004 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisViewCode);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;

      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;

      SalesAnalysisbyDimensions.DateFilter.SETVALUE(FORMAT(DateFilter));
      SetFiltersWithItemOnSalesAnalysisDimensionsPage(
        SalesAnalysisbyDimensions,FORMAT(Dimension.Code),Item.TABLECAPTION,ItemFilter);
      SalesAnalysisbyDimensions.PeriodType.SETVALUE(ViewBy::Month);
      SalesAnalysisbyDimensions.ValueType.SETVALUE(ShowValueAs::"Sales Amount");
      // Check the total values with initial set.
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
      // Here it needs to go to next set and check the total values.
      SalesAnalysisbyDimensions.NextSet.INVOKE;
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@68(GlobalDimension1Code@1004 : Code[20]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Global Dimension 1 Code",GlobalDimension1Code);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGLBudgetNameDimension@19(BudgetDimension1Code@1000 : Code[20]) : Code[10];
    VAR
      GLBudgetName@1001 : Record 95;
    BEGIN
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      GLBudgetName.VALIDATE("Budget Dimension 1 Code",BudgetDimension1Code);
      GLBudgetName.MODIFY(TRUE);
      EXIT(GLBudgetName.Name);
    END;

    LOCAL PROCEDURE CreateJournalLineWithDimension@51(VAR GenJournalLine@1003 : Record 81;DimensionValue@1000 : Record 349;AccountNo@1004 : Code[20];AccountType@1001 : Option);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      FindJournalBatchAndTemplate(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,AccountType,AccountNo);
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostJournalLineWithDimension@114(DimensionValue@1001 : Record 349;AccountNo@1002 : Code[20];PostingDate@1003 : Date) : Decimal;
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,AccountNo,GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreatePostJournalLinesWithDimension@103(DimensionValue@1000 : Record 349;AccountNo@1004 : Code[20];NoOfLines@1005 : Integer);
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      Counter@1001 : Integer;
    BEGIN
      FindJournalBatchAndTemplate(GenJournalBatch);
      FOR Counter := 1 TO NoOfLines DO BEGIN
        CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",AccountNo);
        GenJournalLine.VALIDATE(
          "Dimension Set ID",
          LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
        GenJournalLine.MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateItemAnalysisView@64(VAR ItemAnalysisView@1000 : Record 7152;UpdateOnPosting@1001 : Boolean;Dimension1Code@1004 : Code[20]);
    BEGIN
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.VALIDATE("Update on Posting",UpdateOnPosting);
      ItemAnalysisView.VALIDATE("Item Filter",CreateItem);
      ItemAnalysisView.VALIDATE("Dimension 1 Code",Dimension1Code);
      ItemAnalysisView.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@69() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE MockItemAnalysisViewEntry@137(ItemAnalysisArea@1001 : Option;ItemAnalysisViewCode@1000 : Code[10];ItemNo@1003 : Code[20];Dim1ValueCode@1004 : Code[20]) : Decimal;
    VAR
      ItemAnalysisViewEntry@1002 : Record 7154;
    BEGIN
      ItemAnalysisViewEntry.INIT;
      ItemAnalysisViewEntry."Analysis Area" := ItemAnalysisArea;
      ItemAnalysisViewEntry."Analysis View Code" := ItemAnalysisViewCode;
      ItemAnalysisViewEntry."Item No." := ItemNo;
      ItemAnalysisViewEntry."Posting Date" := WORKDATE;
      ItemAnalysisViewEntry."Dimension 1 Value Code" := Dim1ValueCode;
      ItemAnalysisViewEntry."Entry No." :=
        LibraryUtility.GetNewRecNo(ItemAnalysisViewEntry,ItemAnalysisViewEntry.FIELDNO("Entry No."));
      ItemAnalysisViewEntry."Sales Amount (Actual)" := LibraryRandom.RandDec(100,2);
      ItemAnalysisViewEntry.INSERT;
      EXIT(ItemAnalysisViewEntry."Sales Amount (Actual)");
    END;

    LOCAL PROCEDURE UpdateGLSetupAddCurrency@105(CurrencyCode@1001 : Code[10]);
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      WITH GLSetup DO BEGIN
        GET;
        "Additional Reporting Currency" := CurrencyCode;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetNextItemDefaultDims@83(VAR Item@1000 : Record 27;Steps@1001 : Integer);
    VAR
      DefaultDim@1002 : Record 352;
    BEGIN
      DefaultDim.SETRANGE("Table ID",DATABASE::Item);
      Item.NEXT(Steps);
      REPEAT
        DefaultDim.SETRANGE("No.",Item."No.");
        IF DefaultDim.ISEMPTY THEN
          EXIT;
      UNTIL Item.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveValsForAnalysisMarix@82(Amount@1000 : Decimal;ColumnNo@1001 : Integer;LineNo@1002 : Integer);
    BEGIN
      LibraryVariableStorage.Enqueue(Amount);
      LibraryVariableStorage.Enqueue(ColumnNo);
      LibraryVariableStorage.Enqueue(LineNo);
    END;

    LOCAL PROCEDURE FindJournalBatchAndTemplate@94(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE FindItemAnalysisViewEntry@61(VAR ItemAnalysisViewEntry@1000 : Record 7154;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];AnalysisViewCode@1003 : Code[10]);
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Source No.",SourceNo);
      ItemAnalysisViewEntry.SETRANGE("Item No.",ItemNo);
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisViewCode);
    END;

    LOCAL PROCEDURE OpenAnalysisByDimensionMatrix@48(Code@1005 : Code[10];ShowOppositeSign@1002 : Boolean;ShowInAddCurr@1001 : Boolean;RoundingFactor@1000 : Text[30]);
    BEGIN
      OpenAnalysisByDimensionMatrixWithLineDimCode(
        Code,ShowOppositeSign,ShowInAddCurr,RoundingFactor,FORMAT(LineDimOptionRef::"G/L Account"),
        ClosingDateOptions::Include,ShowAmounts::"Actual Amounts",'');
    END;

    LOCAL PROCEDURE OpenAnalysisByDimensionMatrixWithLineDimCode@88(Code@1005 : Code[10];ShowOppositeSign@1002 : Boolean;ShowInAddCurr@1001 : Boolean;RoundingFactor@1000 : Text[30];LineDimCode@1006 : Text[30];ClosingDates@1007 : Option;Amounts@1009 : Option;Dim1Filter@1008 : Code[250]);
    VAR
      AnalysisViewList@1003 : TestPage 556;
      AnalysisbyDimensions@1004 : TestPage 554;
      PeriodType@1010 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      AnalysisViewList.OPENVIEW;
      AnalysisViewList.FILTER.SETFILTER(Code,Code);
      AnalysisViewList."Codeunit Update Analysis View".INVOKE;
      AnalysisbyDimensions.TRAP;
      AnalysisViewList.EditAnalysis.INVOKE;
      AnalysisbyDimensions.RoundingFactor.SETVALUE(RoundingFactor);
      AnalysisbyDimensions.ShowOppositeSign.SETVALUE(ShowOppositeSign);
      AnalysisbyDimensions.ShowInAddCurr.SETVALUE(ShowInAddCurr);
      AnalysisbyDimensions.ColumnDimCode.SETVALUE(ColumnDimOptionRef::Period);
      AnalysisbyDimensions.PeriodType.SETVALUE(PeriodType::Day);
      AnalysisbyDimensions.Dim1Filter.SETVALUE(Dim1Filter);
      AnalysisbyDimensions.LineDimCode.SETVALUE(LineDimCode);
      AnalysisbyDimensions.ClosingEntryFilter.SETVALUE(ClosingDates);
      AnalysisbyDimensions.ShowActualBudg.SETVALUE(Amounts);
      AnalysisbyDimensions.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@49(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE SetFiltersWithItemOnSalesAnalysisDimensionsPage@117(VAR SalesAnalysisByDimensions@1000 : TestPage 7158;LineDimCode@1004 : Text[30];ColumnDimCode@1001 : Text[30];ItemFilter@1002 : Text[50]);
    BEGIN
      SalesAnalysisByDimensions.LineDimCode.SETVALUE(LineDimCode);
      SalesAnalysisByDimensions.ItemFilter.SETVALUE(ItemFilter);
      SalesAnalysisByDimensions.ColumnDimCode.SETVALUE(ColumnDimCode);
    END;

    LOCAL PROCEDURE SetFiltersWithItemOnPurchAnalysisDimensionsPage@122(VAR PurchAnalysisbyDimensions@1000 : TestPage 7157;LineDimCode@1004 : Text[30];ColumnDimCode@1001 : Text[30];ItemNo@1002 : Code[20]);
    BEGIN
      PurchAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimCode);
      PurchAnalysisbyDimensions.ItemFilter.SETVALUE(ItemNo);
      PurchAnalysisbyDimensions.ColumnDimCode.SETVALUE(ColumnDimCode);
    END;

    LOCAL PROCEDURE VerifyGLBalancebyDimMatrix@47(No@1000 : Code[20];RoundingFactor@1001 : Text[30]);
    VAR
      GLAccountCard@1003 : TestPage 17;
      GLBalancebyDimension@1002 : TestPage 408;
    BEGIN
      GLAccountCard.OPENVIEW;
      GLAccountCard.FILTER.SETFILTER("No.",No);
      GLBalancebyDimension.TRAP;
      GLAccountCard."Page G/L Balance by Dimension".INVOKE;
      GLBalancebyDimension.LineDimCode.SETVALUE('G/L Account');  // Added string for make sure always Show as Line for G/L Account only.
      GLBalancebyDimension.AmountField.SETVALUE('Amount');  // Added string for make sure always Show Amount.. as Amount only.
      GLBalancebyDimension.RoundingFactor.SETVALUE(RoundingFactor);
      GLBalancebyDimension.GLAccFilter.SETVALUE(No);
      GLBalancebyDimension.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE VerifyItemAnalysisViewEntry@22(SalesLine@1001 : Record 37;ItemAnalysisViewCode@1002 : Code[10]);
    VAR
      ItemAnalysisViewEntry@1000 : Record 7154;
    BEGIN
      FindItemAnalysisViewEntry(ItemAnalysisViewEntry,SalesLine."Sell-to Customer No.",SalesLine."No.",ItemAnalysisViewCode);
      ItemAnalysisViewEntry.FINDFIRST;
      ItemAnalysisViewEntry.TESTFIELD("Sales Amount (Actual)",SalesLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyLookupInAccountScheduleOverview@99(LookupControlID@1001 : Integer;LookupValue@1000 : Code[10]);
    VAR
      AccScheduleName@1004 : Record 84;
      AccScheduleOverview@1002 : TestPage 490;
      AccountScheduleNames@1003 : TestPage 103;
    BEGIN
      // Verify: Open Account Schedule Overview and try to lookup value for control
      AccScheduleName.FINDFIRST;
      AccountScheduleNames.OPENVIEW;
      AccountScheduleNames.FILTER.SETFILTER(Name,AccScheduleName.Name);
      AccScheduleOverview.TRAP;
      AccountScheduleNames.Overview.INVOKE;
      LibraryVariableStorage.Enqueue(LookupValue);
      AccScheduleOverview.GETFIELD(LookupControlID).LOOKUP;
      Assert.AreEqual(LookupValue,AccScheduleOverview.GETFIELD(LookupControlID).VALUE,WrongValueAfterLookupErr);
    END;

    LOCAL PROCEDURE VerifyNoOfAnalysisViewEntry@151(AnalysisViewCode@1000 : Code[20];Dimension1Value@1001 : Code[20];AccountNo@1004 : Code[20];ExpectedNoOfEntries@1002 : Integer);
    VAR
      AnalysisViewEntry@1003 : Record 365;
    BEGIN
      WITH AnalysisViewEntry DO BEGIN
        SETRANGE("Analysis View Code",AnalysisViewCode);
        SETRANGE("Dimension 1 Value Code",Dimension1Value);
        SETRANGE("Account No.",AccountNo);
        Assert.AreEqual(ExpectedNoOfEntries,COUNT,WrongNumberOfAnalysisViewEntriesErr);
      END;
    END;

    LOCAL PROCEDURE CreateAnalysisViewBudgetEntry@160(PostingDate@1004 : Date;AnalysisViewCode@1000 : Code[10];GLAccountNo@1002 : Code[20]) : Decimal;
    VAR
      AnalysisViewBudgetEntry@1001 : Record 366;
    BEGIN
      WITH AnalysisViewBudgetEntry DO BEGIN
        INIT;
        "Analysis View Code" := AnalysisViewCode;
        "G/L Account No." := GLAccountNo;
        "Posting Date" := PostingDate;
        Amount := LibraryRandom.RandDec(1000,2);
        INSERT;
      END;

      EXIT(AnalysisViewBudgetEntry.Amount);
    END;

    LOCAL PROCEDURE FindLastFYClosingDate@101() : Date;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.FINDLAST;
      EXIT(CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@127(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      // Take Random Quantity for Purchase Line.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      // Take Random Direct Unit Cost for Purchase Line.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseDocAndUpdateItemAnalysisView@134(VAR PurchaseHeader@1000 : Record 38;VAR ItemAnalysisView@1004 : Record 7152;ToShipReceive@1002 : Boolean;ToInvoice@1001 : Boolean);
    BEGIN
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,ToShipReceive,ToInvoice);
      CODEUNIT.RUN(CODEUNIT::"Update Item Analysis View",ItemAnalysisView);
    END;

    LOCAL PROCEDURE CreateItemTypeServiceAnalysisView@124(VAR ItemAnalysisView@1000 : Record 7152;AnalysisArea@1002 : Option;UpdateOnPosting@1001 : Boolean) ItemNo : Code[20];
    BEGIN
      ItemNo := CreateItemTypeService;
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,AnalysisArea);
      ItemAnalysisView.VALIDATE("Update on Posting",UpdateOnPosting);
      ItemAnalysisView.VALIDATE("Item Filter",ItemNo);
      ItemAnalysisView.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTypeService@129() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE UpdateDimensionInAnalysisView@185(VAR AnalysisView@1000 : Record 363;GLAccountNo@1001 : Code[20];DimensionCode@1002 : Code[20]);
    BEGIN
      AnalysisView.VALIDATE("Account Source",AnalysisView."Account Source"::"G/L Account");
      AnalysisView.VALIDATE("Account Filter",GLAccountNo);
      AnalysisView.VALIDATE("Dimension 1 Code",DimensionCode);
      AnalysisView.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE GLEntriesPageHandler@91(VAR GeneralLedgerEntries@1000 : TestPage 20);
    VAR
      Counter@1001 : Integer;
    BEGIN
      IF GeneralLedgerEntries.LAST THEN
        REPEAT
          Counter += 1;
        UNTIL NOT GeneralLedgerEntries.PREVIOUS;

      Assert.AreNotEqual(0,Counter,WrongGLEntryLinesErr);
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisByDimensionMatrixPageHandler@56(VAR AnalysisbyDimensionsMatrix@1000 : TestPage 9249);
    BEGIN
      AnalysisbyDimensionsMatrix.TotalAmount.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisByDimensionMatrixTwoLinesPageHandler@152(VAR AnalysisbyDimensionsMatrix@1000 : TestPage 9249);
    BEGIN
      AnalysisbyDimensionsMatrix.TotalAmount.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      AnalysisbyDimensionsMatrix.NEXT;
      AnalysisbyDimensionsMatrix.TotalAmount.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      AnalysisbyDimensionsMatrix.FILTER.SETFILTER(Code,LibraryVariableStorage.DequeueText);
      AnalysisbyDimensionsMatrix.FIRST;
      AnalysisbyDimensionsMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      AnalysisbyDimensionsMatrix.Field2.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      Assert.IsFalse(AnalysisbyDimensionsMatrix.NEXT,NoLineShouldBeFoundErr);
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewPageHandler@53(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      RowNo@1001 : Variant;
      CurrentColumnName@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CurrentColumnName);
      LibraryVariableStorage.Dequeue(RowNo);
      AccScheduleOverview.CurrentColumnName.SETVALUE(CurrentColumnName);
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      AccScheduleOverview."Row No.".ASSERTEQUALS(RowNo);
      AccScheduleOverview.ColumnValues1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      AccScheduleOverview.UseAmtsInAddCurr.SETVALUE(FALSE);
      AccScheduleOverview.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GLBalancebyDimMatrixPageHandler@65(VAR GLBalancebyDimMatrix@1000 : TestPage 9233);
    BEGIN
      GLBalancebyDimMatrix.TotalAmount.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE GLEntriesDimOvervMatrixPageHandler@59(VAR GLEntriesDimOvervMatrix@1000 : TestPage 9241);
    BEGIN
      GLEntriesDimOvervMatrix.FILTER.SETFILTER("G/L Account No.",LibraryVariableStorage.DequeueText);
      GLEntriesDimOvervMatrix.Amount.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixPageHandler@70(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    BEGIN
      SalesAnalysisbyDimMatrix.TotalQuantity.ASSERTEQUALS(-LibraryVariableStorage.DequeueDecimal);
      SalesAnalysisbyDimMatrix.TotalInvtValue.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixMultiItemsPageHandler@78(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    VAR
      TotalQuantityVar@1002 : Variant;
      TotalAmount@1001 : Variant;
      TotalQuantity@1003 : Decimal;
    BEGIN
      // Dequeue variable.
      LibraryVariableStorage.Dequeue(TotalQuantityVar);
      LibraryVariableStorage.Dequeue(TotalAmount);
      EVALUATE(TotalQuantity,FORMAT(TotalQuantityVar));
      // Verifying the values on Sales Analysis by Dim Matrix page.
      SalesAnalysisbyDimMatrix.TotalQuantity.ASSERTEQUALS(-TotalQuantity);
      SalesAnalysisbyDimMatrix.TotalInvtValue.ASSERTEQUALS(TotalAmount);
      SalesAnalysisbyDimMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixPeriodFiltersPageHandler@80(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    VAR
      AmountVar@1011 : Variant;
      ColumnNoVar@1010 : Variant;
      LineNoVar@1009 : Variant;
      Amount@1008 : Decimal;
      ColumnNo@1007 : Integer;
      LineNo@1006 : Integer;
    BEGIN
      // Dequeue variables - Column No. and Amount that should be in that column
      LibraryVariableStorage.Dequeue(AmountVar);
      EVALUATE(Amount,FORMAT(AmountVar));
      LibraryVariableStorage.Dequeue(ColumnNoVar);
      EVALUATE(ColumnNo,FORMAT(ColumnNoVar));
      LibraryVariableStorage.Dequeue(LineNoVar);
      EVALUATE(LineNo,FORMAT(LineNoVar));

      SalesAnalysisbyDimMatrix.FIRST;
      WHILE LineNo > 1 DO BEGIN
        SalesAnalysisbyDimMatrix.NEXT;
        LineNo -= 1;
      END;

      // Verifying the values on Sales Analysis by Dim Matrix page.
      CASE ColumnNo OF
        1:
          SalesAnalysisbyDimMatrix.Field1.ASSERTEQUALS(Amount);
        2:
          SalesAnalysisbyDimMatrix.Field2.ASSERTEQUALS(Amount);
        3:
          SalesAnalysisbyDimMatrix.Field3.ASSERTEQUALS(Amount);
        4:
          SalesAnalysisbyDimMatrix.Field4.ASSERTEQUALS(Amount);
        5:
          SalesAnalysisbyDimMatrix.Field5.ASSERTEQUALS(Amount);
        6:
          SalesAnalysisbyDimMatrix.Field6.ASSERTEQUALS(Amount);
        7:
          SalesAnalysisbyDimMatrix.Field7.ASSERTEQUALS(Amount);
        8:
          SalesAnalysisbyDimMatrix.Field8.ASSERTEQUALS(Amount);
        9:
          SalesAnalysisbyDimMatrix.Field9.ASSERTEQUALS(Amount);
        10:
          SalesAnalysisbyDimMatrix.Field10.ASSERTEQUALS(Amount);
        11:
          SalesAnalysisbyDimMatrix.Field11.ASSERTEQUALS(Amount);
        12:
          SalesAnalysisbyDimMatrix.Field12.ASSERTEQUALS(Amount);
        13:
          SalesAnalysisbyDimMatrix.Field13.ASSERTEQUALS(Amount);
        14:
          SalesAnalysisbyDimMatrix.Field14.ASSERTEQUALS(Amount);
        15:
          SalesAnalysisbyDimMatrix.Field15.ASSERTEQUALS(Amount);
        16:
          SalesAnalysisbyDimMatrix.Field16.ASSERTEQUALS(Amount);
        17:
          SalesAnalysisbyDimMatrix.Field17.ASSERTEQUALS(Amount);
        18:
          SalesAnalysisbyDimMatrix.Field18.ASSERTEQUALS(Amount);
        19:
          SalesAnalysisbyDimMatrix.Field19.ASSERTEQUALS(Amount);
        20:
          SalesAnalysisbyDimMatrix.Field20.ASSERTEQUALS(Amount);
        21:
          SalesAnalysisbyDimMatrix.Field21.ASSERTEQUALS(Amount);
        22:
          SalesAnalysisbyDimMatrix.Field22.ASSERTEQUALS(Amount);
        23:
          SalesAnalysisbyDimMatrix.Field23.ASSERTEQUALS(Amount);
        24:
          SalesAnalysisbyDimMatrix.Field24.ASSERTEQUALS(Amount);
        25:
          SalesAnalysisbyDimMatrix.Field25.ASSERTEQUALS(Amount);
        26:
          SalesAnalysisbyDimMatrix.Field26.ASSERTEQUALS(Amount);
        27:
          SalesAnalysisbyDimMatrix.Field27.ASSERTEQUALS(Amount);
        28:
          SalesAnalysisbyDimMatrix.Field28.ASSERTEQUALS(Amount);
        29:
          SalesAnalysisbyDimMatrix.Field29.ASSERTEQUALS(Amount);
        30:
          SalesAnalysisbyDimMatrix.Field30.ASSERTEQUALS(Amount);
        31:
          SalesAnalysisbyDimMatrix.Field31.ASSERTEQUALS(Amount);
        32:
          SalesAnalysisbyDimMatrix.Field32.ASSERTEQUALS(Amount);
        ELSE
          Assert.Fail(CheckColIndexErr);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PurchAnalysisbyDimMatrixPeriodFiltersPageHandler@79(VAR PurchAnalysisbyDimMatrix@1000 : TestPage 9225);
    VAR
      AmountVar@1011 : Variant;
      ColumnNoVar@1010 : Variant;
      LineNoVar@1009 : Variant;
      Amount@1008 : Decimal;
      ColumnNo@1007 : Integer;
      LineNo@1006 : Integer;
    BEGIN
      // Dequeue variables - Column No. and Amount that should be in that column
      LibraryVariableStorage.Dequeue(AmountVar);
      EVALUATE(Amount,FORMAT(AmountVar));
      LibraryVariableStorage.Dequeue(ColumnNoVar);
      EVALUATE(ColumnNo,FORMAT(ColumnNoVar));
      LibraryVariableStorage.Dequeue(LineNoVar);
      EVALUATE(LineNo,FORMAT(LineNoVar));

      PurchAnalysisbyDimMatrix.FIRST;
      WHILE LineNo > 1 DO BEGIN
        PurchAnalysisbyDimMatrix.NEXT;
        LineNo -= 1;
      END;

      // Verifying the values on Sales Analysis by Dim Matrix page.
      CASE ColumnNo OF
        1:
          PurchAnalysisbyDimMatrix.Field1.ASSERTEQUALS(Amount);
        2:
          PurchAnalysisbyDimMatrix.Field2.ASSERTEQUALS(Amount);
        3:
          PurchAnalysisbyDimMatrix.Field3.ASSERTEQUALS(Amount);
        4:
          PurchAnalysisbyDimMatrix.Field4.ASSERTEQUALS(Amount);
        5:
          PurchAnalysisbyDimMatrix.Field5.ASSERTEQUALS(Amount);
        6:
          PurchAnalysisbyDimMatrix.Field6.ASSERTEQUALS(Amount);
        7:
          PurchAnalysisbyDimMatrix.Field7.ASSERTEQUALS(Amount);
        8:
          PurchAnalysisbyDimMatrix.Field8.ASSERTEQUALS(Amount);
        9:
          PurchAnalysisbyDimMatrix.Field9.ASSERTEQUALS(Amount);
        10:
          PurchAnalysisbyDimMatrix.Field10.ASSERTEQUALS(Amount);
        11:
          PurchAnalysisbyDimMatrix.Field11.ASSERTEQUALS(Amount);
        12:
          PurchAnalysisbyDimMatrix.Field12.ASSERTEQUALS(Amount);
        13:
          PurchAnalysisbyDimMatrix.Field13.ASSERTEQUALS(Amount);
        14:
          PurchAnalysisbyDimMatrix.Field14.ASSERTEQUALS(Amount);
        15:
          PurchAnalysisbyDimMatrix.Field15.ASSERTEQUALS(Amount);
        16:
          PurchAnalysisbyDimMatrix.Field16.ASSERTEQUALS(Amount);
        17:
          PurchAnalysisbyDimMatrix.Field17.ASSERTEQUALS(Amount);
        18:
          PurchAnalysisbyDimMatrix.Field18.ASSERTEQUALS(Amount);
        19:
          PurchAnalysisbyDimMatrix.Field19.ASSERTEQUALS(Amount);
        20:
          PurchAnalysisbyDimMatrix.Field20.ASSERTEQUALS(Amount);
        21:
          PurchAnalysisbyDimMatrix.Field21.ASSERTEQUALS(Amount);
        22:
          PurchAnalysisbyDimMatrix.Field22.ASSERTEQUALS(Amount);
        23:
          PurchAnalysisbyDimMatrix.Field23.ASSERTEQUALS(Amount);
        24:
          PurchAnalysisbyDimMatrix.Field24.ASSERTEQUALS(Amount);
        25:
          PurchAnalysisbyDimMatrix.Field25.ASSERTEQUALS(Amount);
        26:
          PurchAnalysisbyDimMatrix.Field26.ASSERTEQUALS(Amount);
        27:
          PurchAnalysisbyDimMatrix.Field27.ASSERTEQUALS(Amount);
        28:
          PurchAnalysisbyDimMatrix.Field28.ASSERTEQUALS(Amount);
        29:
          PurchAnalysisbyDimMatrix.Field29.ASSERTEQUALS(Amount);
        30:
          PurchAnalysisbyDimMatrix.Field30.ASSERTEQUALS(Amount);
        31:
          PurchAnalysisbyDimMatrix.Field31.ASSERTEQUALS(Amount);
        32:
          PurchAnalysisbyDimMatrix.Field32.ASSERTEQUALS(Amount);
        ELSE
          Assert.Fail(CheckColIndexErr);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixPageDrillDownPageHandler@120(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    BEGIN
      SalesAnalysisbyDimMatrix.Field1.DRILLDOWN;
      SalesAnalysisbyDimMatrix.Field2.DRILLDOWN;
    END;

    [ModalPageHandler]
    PROCEDURE PurchAnalysisbyDimMatrixPageDrillDownPageHandler@119(VAR PurchAnalysisbyDimMatrix@1000 : TestPage 9225);
    BEGIN
      PurchAnalysisbyDimMatrix.Field1.DRILLDOWN;
      PurchAnalysisbyDimMatrix.Field2.DRILLDOWN;
    END;

    [PageHandler]
    PROCEDURE SalesAnalysisbyDimensionsPageHandler@81(VAR SalesAnalysisbyDimensions@1000 : TestPage 7158);
    VAR
      DimensionCode@1001 : Variant;
      DimensionValueCode@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DimensionCode);
      LibraryVariableStorage.Dequeue(DimensionValueCode);
      SalesAnalysisbyDimensions.ColumnDimCode.SETVALUE(DimensionCode);
      SalesAnalysisbyDimensions.ColumnSet.ASSERTEQUALS(DimensionValueCode);
    END;

    [PageHandler]
    PROCEDURE ItemAnalysisViewEntryPageHandler@123(VAR ItemAnalysisViewEntries@1000 : TestPage 7153);
    BEGIN
      ItemAnalysisViewEntries."Sales Amount (Actual)".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE GLBudgetNamesHandler@98(VAR GLBudgetNames@1000 : TestPage 121);
    VAR
      NameVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NameVar);
      GLBudgetNames.FILTER.SETFILTER(Name,NameVar);
      GLBudgetNames.FIRST;
      GLBudgetNames.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CostBudgetNamesHandler@97(VAR CostBudgetNames@1000 : TestPage 1116);
    VAR
      NameVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NameVar);
      CostBudgetNames.FILTER.SETFILTER(Name,NameVar);
      CostBudgetNames.FIRST;
      CostBudgetNames.OK.INVOKE;
    END;

    [ModalPageHandler]
    [HandlerFunctions(AnalysisViewPageHandler)]
    PROCEDURE AnalysisbyDimensionsMatrixPageHandlerTotalAmountDrill@180(VAR AnalysisbyDimensionsMatrix@1000 : TestPage 9249);
    BEGIN
      AnalysisbyDimensionsMatrix.TotalAmount.DRILLDOWN;
    END;

    [PageHandler]
    [HandlerFunctions(GeneralLedgerEntriesPageHandler)]
    PROCEDURE AnalysisViewPageHandler@194(VAR AnalysisViewEntries@1000 : TestPage 558);
    BEGIN
      AnalysisViewEntries.Amount.LOOKUP;
    END;

    [ModalPageHandler]
    [HandlerFunctions(GLEntriesDimensionOverviewPageHandler)]
    PROCEDURE GeneralLedgerEntriesPageHandler@246(VAR GeneralLedgerEntries@1000 : TestPage 20);
    BEGIN
      GeneralLedgerEntries.GLDimensionOverview.INVOKE;
    END;

    [PageHandler]
    [HandlerFunctions(GLEntriesDimOvervMatrixVerifyCountPageHandler)]
    PROCEDURE GLEntriesDimensionOverviewPageHandler@148(VAR GLEntriesDimensionOverview@1000 : TestPage 563);
    BEGIN
      GLEntriesDimensionOverview.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GLEntriesDimOvervMatrixVerifyCountPageHandler@136(VAR GLEntriesDimOvervMatrix@1000 : TestPage 9241);
    VAR
      Counter@1001 : Integer;
    BEGIN
      GLEntriesDimOvervMatrix.LAST;
      REPEAT
        Counter += 1;
      UNTIL NOT GLEntriesDimOvervMatrix.PREVIOUS;
      Assert.AreEqual(LibraryVariableStorage.DequeueDecimal,Counter,WrongGLEntryLinesErr);
    END;

    BEGIN
    {
      // [FEATURE] [Dimension]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute
      DE: Unable to Execute

      Test the Dimension as Rename, Delete, Block.
        1. Test setup the dimension code with already exist code.
        2. Test setup the dimension code with conflict names.
        3. Test Rename the Dimension.
        4. Test Rename the Global Dimension with new code.
        5. Test Rename the Shortcut Dimension with new code.
        6. Test Rename the Shortcut Dimension with blank.
        7. Test Rename Dimension attached on G/L Budget Name.
        8. Test Rename Dimension attached on Analysis View.
        9. Test delete Dimension with no entries.
       10. Test delete Dimension with entries.
       11. Test delete Dimension with posted entries.
       12. Test delete Dimension used as Global Dimension with no entries.
       13. Test the Dimension as blocked.
       14. Test the post with block Dimension.
       15. Check Item Analysis View Entry for Posted Sales Invoice Amount with Global Dimension Values and Update Posting TRUE.
       16. Check Item Analysis View Entry for Posted Sales Invoice Amount with Global Dimension Values and Update Posting FALSE.
       17. Check Item Analysis View Entry With NONE Date Compression.
       18. Check Item Analysis View Entry With Day Date Compression.
       19. Check Item Analysis View Entry With Week Date Compression.
       20. Check Item Analysis View Entry With Month Date Compression.
       21. Check Item Analysis View Entry With Quarter Date Compression.
       22. Check Item Analysis View Entry With Year Date Compression.
       23. Check Item Analysis View Entry With Period Date Compression.
       24. Check Item Analysis View Entry after Posting Sales Invoice and Updation with Analysis Line Template.
       25. Check GL Entries Dimension Overview Matrix with Posted General Line.
       26. Check GL Balance By Dimension Matrix with Rounding Factor None on Posted General Lines.
       27. Check GL Balance By Dimension Matrix with Rounding Factor 1 on Posted General Lines.
       28. Check GL Balance By Dimension Matrix with Rounding Factor 1000 on Posted General Lines.
       29. Check GL Balance By Dimension Matrix with Rounding Factor 1000000 on Posted General Lines.
       30. Check Analysis By Dimension Matrix with Rounding Factor None.
       31. Check Analysis By Dimension Matrix with Rounding Factor 1.
       32. Check Analysis By Dimension Matrix with Rounding Factor 1000.
       33. Check Analysis By Dimension Matrix with Rounding Factor 1000000.
       34. Check Analysis By Dimension Matrix with Currency Conversion.
       35. Check Analysis By Dimension Matrix with Opposite Sign field TRUE.
       36. Check Account Schedule Overview Matrix with Posted General Line.
       37. Check Account Schedule Overview Matrix with Posted General Line and Use Additional Currency field TRUE.
       38. Check Sales Analysis By Dimension Matrix by Sales Person Purchase Filter and Check Values for Posted Sales Order.
       39. Check Sales Analysis By Dimension Matrix monthly with Item and different Dimenssion and check values for posted Sales Orders.
       40. Check Sales Analysis By Dim Matrix page with different Item sets.
       41. Check Sales Analysis by Dimensions shows correct values in the RTC when changing the Dimension in the Show as Columns field.
       42. Unittest - Check that 'FindRec' function in 'Item Analysis Management' returns right period in DimCodeBuf.
       43. Check that 'Sales Analysis by Dim matrix' page shows actual information when changing period sets forward and backward.
       44. Check that 'Purchase Analysis by Dim matrix' page shows actual information when changing period sets forward and backward.
       45. Check that Analysis View Entry drilldown shows correct G/L Entry if 'Date Compression' is 'None'.
       46. Check that 'Account Schedule Overview' lets lookup values with max length for 'G/LBudgetFilter' control.
       47. Check that 'Account Schedule Overview' lets lookup values with max length for 'CostBudgetFilter' control.
       48. Check that Analysis View shows correct number of Analysis Entry if 'Date Compression' is 'None'.

      TFS_TS_ID = 202355
      Covers Test cases:
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      DimensionWithExistingCode, DimensionWithGLAccountCaption, DimensionBusinessUnitCaption, DimensionWithPeriodCaption       140735
      RenameDimensionWithPostedEntry, RenameGlobalDimension, RenameShortcutDimension, BlankDimensionCode                       140736
      DimensionWithGLBudgetName, DimensionWithAnalysisView                                                                     140736
      DeleteDimension, DeleteDimensionWithEntries, DeleteDimensionOfPostedEntry, DeleteGlobalDimensionOfGLSetup,               140737
      BlockDimension, GeneralJournalOfBlockDimension                                                                           140738

      Covers Test cases: 240459
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      ItemAnalysisViewPostingTrue                                                                                            123030
      ItemAnalysisViewPostingFalse                                                                                           123031
      ItemAnalysisCompressionNone,ItemAnalysisCompressionDay,ItemAnalysisCompressionWeek,ItemAnalysisCompressionMonth        123034
      ItemAnlaysisCompressionQuarter,ItemAnlaysisCompressionYear,ItemAnlaysisCompressionPeriod                               123034,123035
      ItemAnlaysisLineTemplate                                                                                               123039,123040

      Covers Test cases: 264824
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      GLEntriesDimOvervMatrixWithGenLines                                                                                     128861
      GLBalanceByDimMatrixRoundingFactorNone,GLBalanceByDimMatrixRoundingFactor1,
      GLBalanceByDimMatrixRoundingFactor1000,GLBalanceByDimMatrixRoundingFactor1000000                                        128858
      AnalysisByDimensionMatrixRoundingFactorNone,AnalysisByDimensionMatrixRoundingFactor1
      AnalysisByDimensionMatrixRoundingFactor1000,AnalysisByDimensionMatrixRoundingFactor1000000
      AnalysisByDimensionMatrixWithShowAmountInCurrency,AnalysisByDimensionMatrixWithOppositeSign                             128860
      AccScheduleOverviewMatrixGLAccount,AccScheduleOverviewMatrixGLAccountAndCurrency                                        128859

      Covers Test cases: 264832
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      SalesAnalysisByDimMatrixWithAnalysisViewSalesList                                                                         261054

      Covers Test cases: 267704
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      SalesAnalysisByDimMatrixItemWiseMonthly                                                                                   123041

      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      SalesAnalysisByDimMatrixForMultiItems                                                                                     284166

      BUG ID 328143
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      CheckColumnSetOnSalesAnalysisByDimension

      RHF ID 344635
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      CheckFindRecWithInternalDateFilter                                                                                        344635
      SalesAnalysisByDimMatrixPeriodFilters                                                                                     344635
      PurchaseAnalysisByDimMatrixPeriodFilters                                                                                  344635

      RHF ID 346729
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      AnalysisViewEntryDrillDownToGLEntry

      RHF ID 353484
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      AccountScheduleOverviewWithGLBudgetFilter                                                                                 90001
      AccountScheduleOverviewWithCostBudgetFilter                                                                               90001

      RHF ID 101568
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      NoOfAnalysisViewEntryDateCompressionNone                                                                                  101568
    }
    END.
  }
}

