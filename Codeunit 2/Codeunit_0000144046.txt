OBJECT Codeunit 144046 TDS Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1501000 : Codeunit 130000;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryPurchase@1500001 : Codeunit 130512;
      LibraryUtility@1500003 : Codeunit 131000;
      LibrarySCM@1500004 : Codeunit 132200;
      LibraryTDS@1500014 : Codeunit 143000;
      LibraryWarehouse@1500008 : Codeunit 132204;
      LibraryRandom@1500708 : Codeunit 130440;
      TDSEntryErr@1501001 : TextConst 'ENU=There are no TDS entries for Account No. %1.';
      AmountErr@1501002 : TextConst 'ENU=Amount must be %1.';

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InvoiceWithTDSAmountNonZero@1500618();
    VAR
      IncomeTaxAccountingPeriod@1500109 : Record 13724;
      PurchaseLine@1500112 : Record 39;
      PostedDocumentNo@1500115 : Code[20];
      TDSPercentage@1501000 : Decimal;
      OldWorkDate@1500117 : Date;
    BEGIN
      // Verify TDS Entry after updating Challan details when TDS Amount is calculated on Purchase order.

      // Setup: Post Purchase Invoice with TDS Amount.
      Initialize;
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriodAndUpdateWorkDate(IncomeTaxAccountingPeriod);
      TDSPercentage := LibraryRandom.RandDec(10,2);
      PostedDocumentNo := CreateAndPostPurchaseDocAfterTDSSetup(PurchaseLine,TDSPercentage);

      // Excercise: Pay TDS and Update Challan Details.
      UpdateChallanDetailsAfterPayTDS(
        PostedDocumentNo,PurchaseLine."Location Code",
        PurchaseLine."TDS Group",PurchaseLine."Document Type"::Invoice);

      // Verify: Verify values on TDS Entry.
      VerifyTDSEntry(
        PostedDocumentNo,PurchaseLine."Document Type"::Invoice,
        PurchaseLine."Amount Including VAT" * TDSPercentage / 100,PurchaseLine."Amount Including VAT");

      // Tear Down.
      RollbackChangesMadeToDatabase(IncomeTaxAccountingPeriod,OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE AdvPmntWithTDSAmountNonZero@1501021();
    VAR
      IncomeTaxAccountingPeriod@1500109 : Record 13724;
      GenJournalLine@1501003 : Record 81;
      TDSPercentage@1501000 : Decimal;
      OldWorkDate@1500117 : Date;
    BEGIN
      // Verify TDS Entry after updating Challan details when TDS Amount is calculated on Bank Payment Voucher.

      // Setup: Post Bank Payment Voucher with TDS Amount.
      Initialize;
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriodAndUpdateWorkDate(IncomeTaxAccountingPeriod);
      TDSPercentage := LibraryRandom.RandDec(10,2);
      CreateAndPostBankPmntVoucherAfterTDSSetup(GenJournalLine,TDSPercentage);

      // Excercise: Pay TDS and Update Challan Details.
      UpdateChallanDetailsAfterPayTDS(
        GenJournalLine."Document No.",
        GenJournalLine."Location Code",GenJournalLine."TDS Group",GenJournalLine."Document Type"::Payment);

      // Verify: Verify values on TDS Entry.
      VerifyTDSEntry(
        GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,
        GenJournalLine.Amount * TDSPercentage / 100,GenJournalLine.Amount);

      // Tear Down.
      RollbackChangesMadeToDatabase(IncomeTaxAccountingPeriod,OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler)]
    PROCEDURE InvoiceWithTDSAmountZero@1501001();
    VAR
      IncomeTaxAccountingPeriod@1500109 : Record 13724;
      PurchaseLine@1500112 : Record 39;
      PostedDocumentNo@1500115 : Code[20];
      OldWorkDate@1500117 : Date;
    BEGIN
      // Verify Error message while Pay TDS when TDS Amount is null on Purchase order.

      // Setup: Post Purchase Order with zero TDS Amount.
      Initialize;
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriodAndUpdateWorkDate(IncomeTaxAccountingPeriod);
      PostedDocumentNo := CreateAndPostPurchaseDocAfterTDSSetup(PurchaseLine,0);

      // Exercise.
      ASSERTERROR UpdateChallanDetailsAfterPayTDS(
        PostedDocumentNo,PurchaseLine."Location Code",PurchaseLine."TDS Group",PurchaseLine."Document Type"::Invoice);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(TDSEntryErr,GetTDSPayableAccount(PurchaseLine."TDS Group")));

      // Tear Down.
      RollbackChangesMadeToDatabase(IncomeTaxAccountingPeriod,OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler)]
    PROCEDURE AdvPmntWithTDSAmountZero@1501004();
    VAR
      IncomeTaxAccountingPeriod@1500109 : Record 13724;
      GenJournalLine@1500112 : Record 81;
      OldWorkDate@1500117 : Date;
    BEGIN
      // Verify Error message while Pay TDS when TDS Amount is null on Bank Payment Voucher.

      // Setup: Post Bank payment Voucher with zero TDS Amount.
      Initialize;
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriodAndUpdateWorkDate(IncomeTaxAccountingPeriod);
      CreateAndPostBankPmntVoucherAfterTDSSetup(GenJournalLine,0);

      // Exercise.
      ASSERTERROR UpdateChallanDetailsAfterPayTDS(
        GenJournalLine."Document No.",
        GenJournalLine."Location Code",GenJournalLine."TDS Group",GenJournalLine."Document Type"::Payment);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(TDSEntryErr,GetTDSPayableAccount(GenJournalLine."TDS Group")));

      // Tear Down.
      RollbackChangesMadeToDatabase(IncomeTaxAccountingPeriod,OldWorkDate);
    END;

    LOCAL PROCEDURE Initialize@1500619();
    BEGIN
      LibraryRandom.SetSeed(1);
    END;

    LOCAL PROCEDURE CreateAndPostBankPmntVoucher@1500005(VAR GenJournalLine@1501000 : Record 81;VendorNo@1500008 : Code[20];CodeContractor@1500009 : Code[10]);
    VAR
      Vendor@1500011 : Record 23;
    BEGIN
      WITH GenJournalLine DO BEGIN
        Vendor.GET(VendorNo);
        CreateGeneralJournalLine(GenJournalLine,VendorNo,LibraryRandom.RandDec(1000,2),"Account Type"::Vendor,
          Vendor."Location Code");
        VALIDATE("Party Type","Party Type"::Vendor);
        VALIDATE("Party Code",VendorNo);
        VALIDATE("Location Code",Vendor."Location Code");
        VALIDATE(Amount,LibraryRandom.RandDec(1000,2));
        VALIDATE("TDS Nature of Deduction",CodeContractor);
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostBankPmntVoucherAfterTDSSetup@1500327(VAR GenJournalLine@1500322 : Record 81;TDSPercentage@1500222 : Decimal) PostedDocumentNo : Code[20];
    VAR
      TDSNatureOfDeduction@1500223 : Record 13726;
      Vendor@1500224 : Record 23;
    BEGIN
      CreateVendor(Vendor);
      CreateSetupForTDSNatureOfDeduction(TDSNatureOfDeduction,Vendor."No.",TDSPercentage);
      CreateAndPostBankPmntVoucher(GenJournalLine,Vendor."No.",TDSNatureOfDeduction.Code);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocAfterTDSSetup@1500101(VAR PurchaseLine@1500221 : Record 39;TDSPercentage@1500222 : Decimal) PostedDocumentNo : Code[20];
    VAR
      TDSNatureOfDeduction@1500223 : Record 13726;
      Vendor@1500224 : Record 23;
    BEGIN
      CreateVendor(Vendor);
      CreateSetupForTDSNatureOfDeduction(TDSNatureOfDeduction,Vendor."No.",TDSPercentage);
      PostedDocumentNo := CreateAndPostPurchaseDoc(PurchaseLine,Vendor."No.",FindGLAccountNo,TDSNatureOfDeduction.Code);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDoc@1500000(VAR PurchaseLine@1501001 : Record 39;VendorNo@1500020 : Code[20];GLAccountNo@1500021 : Code[20];CodeContractor@1500051 : Code[10]) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1501000 : Record 38;
      NoSeriesManagement@1500053 : Codeunit 396;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      WITH PurchaseLine DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,Type::"G/L Account",GLAccountNo,LibraryRandom.RandDec(10,2));
          VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
          VALIDATE("TDS Nature of Deduction",CodeContractor);
          MODIFY(TRUE);
      END;
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1500054 : Record 81;VendorNo@1500055 : Code[20];Amount@1500056 : Decimal;AccountType@1500057 : Option;LocationCode@1500058 : Code[10]);
    VAR
      GenJournalBatch@1500059 : Record 232;
      GenJournalTemplate@1500060 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Location Code",LocationCode);
      GenJournalBatch.MODIFY(TRUE);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Payment,AccountType,VendorNo,Amount);
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",FindBankAccount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccPeriodAndUpdateWorkDate@25(VAR IncomeTaxAccountingPeriod@1500061 : Record 13724);
    VAR
      CreateTDSTCSFiscalYear@1500062 : Report 13717;
    BEGIN
      COMMIT;
      REPORT.RUN(REPORT::"Create TDS/TCS Fiscal Year");
      IncomeTaxAccountingPeriod.FINDLAST;
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.",WORKDATE);
      WORKDATE := IncomeTaxAccountingPeriod."Starting Date";
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@22(IncomeTaxAccountingPeriodNo@1500063 : Integer;StartingDate@1500064 : Date);
    VAR
      IncomeTaxPeriodSetup@1500065 : Record 16501;
    BEGIN
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := StartingDate;
      IncomeTaxPeriodSetup.VALIDATE("Ending Date",
        CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandIntInRange(3,4)),StartingDate));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@8(No@1500068 : Code[20];AssesseeCode@1500069 : Code[10];CodeContractor@1500071 : Code[10]);
    VAR
      NODNOCHeader@1501000 : Record 13786;
      NODNOCLines@1500077 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,NODNOCHeader.Type::Vendor,No,AssesseeCode);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor,TRUE,'',0);
      UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type::Vendor);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDS@10(VAR TDSNatureDeduction@1500072 : Record 13726;TDSGroup@1500073 : Option;AssesseeCode@1500173 : Code[10];EffectiveDate@1500000 : Date;TDSPercentage@1500001 : Decimal);
    VAR
      TDSSetup@1500074 : Record 13728;
    BEGIN
      TDSNatureDeduction.GET(LibraryTDS.CreateTDSNatureDeduction(TDSGroup));
      CreateTDSSetup(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,EffectiveDate,TDSPercentage);
    END;

    LOCAL PROCEDURE CreateTDSSetup@11(VAR TDSSetup@1500260 : Record 13728;TDSNatureDeductionCode@1500261 : Code[10];AssesseeCode@1500262 : Code[10];EffectiveDate@1500263 : Date;TDSPercentage@1500264 : Decimal);
    BEGIN
      WITH TDSSetup DO BEGIN
        LibraryTDS.CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,EffectiveDate,'','',0,'');
        VALIDATE("TDS %",TDSPercentage);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@12(VAR Vendor@1501000 : Record 23);
    VAR
      GeneralPostingSetup@1500267 : Record 252;
      Location@1500268 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      Location.MODIFY(TRUE);
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>''''');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      WITH Vendor DO BEGIN
        VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No.
        VALIDATE(Vendor.Transporter,FALSE);
        VALIDATE("Location Code",Location.Code);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSetupForTDSNatureOfDeduction@1501000(VAR TDSNatureOfDeduction@1501001 : Record 13726;VendorNo@1501002 : Code[20];TDSPercentage@1501004 : Decimal);
    VAR
      AssesseeCode@1501000 : Code[10];
      NODNOCHeader@1501003 : Record 13786;
    BEGIN
      SetupDeductoryCode;
      AssesseeCode := LibraryTDS.CreateAssesseeCode;
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeduction,TDSNatureOfDeduction."TDS Group"::Contractor,AssesseeCode,WORKDATE,
        TDSPercentage);
      CreateNODNOCSetup(VendorNo,AssesseeCode,TDSNatureOfDeduction.Code);
    END;

    LOCAL PROCEDURE FindBankAccount@6() : Code[20];
    VAR
      BankAccount@1500269 : Record 270;
    BEGIN
      BankAccount.SETFILTER("Currency Code",'');
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE FindGLAccountNo@13() : Code[20];
    VAR
      GLAccount@1500270 : Record 15;
      GeneralPostingSetup@1500271 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@14(VAR GLEntry@1500272 : Record 17;DocumentType@1500273 : Option;DocumentNo@1500274 : Code[20]);
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
      END;
    END;

    PROCEDURE GetTDSPayableAccount@1500032(TDSGroupCode@1500000 : Option) : Code[20];
    VAR
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      EXIT(TDSGroup."TDS Account");
    END;

    LOCAL PROCEDURE PayTDS@1500003(PostedDocumentNo@1500000 : Code[20];PostedDocumentType@1500001 : Option;TDSNatureOfDeduction@1500002 : Option;TANNo@1500620 : Code[10]);
    VAR
      GenJournalLine@1500005 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGeneralJournalLine(GenJournalLine,GetTDSPayableAccount(TDSNatureOfDeduction),0,
          "Account Type"::"G/L Account",'');
        VALIDATE("T.A.N. No.",TANNo);
        VALIDATE("Pay TDS",TRUE);
        MODIFY(TRUE);
        PostBankPaymentVoucherAfterPayTDS("Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE PostBankPaymentVoucherAfterPayTDS@1500428(JournalBatchName@1500307 : Code[10]);
    VAR
      BankPaymentVoucher@1500308 : TestPage 16577;
      PayTDS@1500309 : TestPage 13788;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucher.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
      BankPaymentVoucher.Post.INVOKE;
    END;

    LOCAL PROCEDURE SetupDeductoryCode@19();
    VAR
      DeductorCategory@1500223 : Record 16498;
      CompanyInformation@1500222 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        IF DeductorCategory.FINDFIRST THEN
          VALIDATE("Deductor Category",DeductorCategory.Code)
        ELSE BEGIN
          LibraryTDS.CreateDeductorCategory(DeductorCategory);
          VALIDATE("Deductor Category",DeductorCategory.Code);
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetailsAfterPayTDS@1501011(PostedDocumentNo@1501001 : Code[20];LocationCode@1501000 : Code[10];TDSGroup@1501002 : Option;DocumentType@1501003 : Option);
    VAR
      Location@1501004 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      PayTDS(PostedDocumentNo,DocumentType,TDSGroup,Location."T.A.N. No.");
      UpdateChallanDetails(PostedDocumentNo,DocumentType);
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500004(DocumentNo@1500001 : Code[20];DocumentType@1500000 : Option);
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
    BEGIN
      WITH TDSEntry DO BEGIN
        SETFILTER("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        UpdateChallanDetails.InitializeRequest("Pay TDS Document No.",FORMAT(LibraryRandom.RandInt(1000)),WORKDATE,
          LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,WORKDATE,1);
        UpdateChallanDetails.USEREQUESTPAGE(FALSE);
        UpdateChallanDetails.RUN;
      END;
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@15(VAR NODNOCLines@1500225 : Record 13785;Type@1500226 : Option);
    BEGIN
      WITH NODNOCLines DO BEGIN
        SETRANGE("No.","No.");
        SETRANGE(Type,Type);
        FINDSET;
        MODIFYALL("Threshold Overlook",TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1501046(DocumentNo@1501000 : Code[20];DocumentType@1501001 : Option;TDSAmount@1501002 : Decimal;TDSBaseAmount@1501003 : Decimal);
    VAR
      GeneralLedgerSetup@1501005 : Record 98;
      TDSEntry@1501004 : Record 13729;
    BEGIN
      WITH TDSEntry DO BEGIN
        GeneralLedgerSetup.GET;
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          TDSAmount,"TDS Amount",GeneralLedgerSetup."TDS Rounding Precision",STRSUBSTNO(AmountErr,TDSAmount));
        Assert.AreNearlyEqual(
          TDSBaseAmount,"TDS Base Amount",
          GeneralLedgerSetup."TDS Rounding Precision",STRSUBSTNO(AmountErr,TDSBaseAmount));
        TESTFIELD("Challan Date",WORKDATE);
        TESTFIELD("Check Date",WORKDATE);
      END;
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDatabase@1501018(IncomeTaxAccountingPeriod@1501000 : Record 13724;OldWorkDate@1501001 : Date);
    BEGIN
      RollbackIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."Starting Date");
      IncomeTaxAccountingPeriod.DELETE(TRUE);
      WORKDATE := OldWorkDate;
    END;

    LOCAL PROCEDURE RollbackIncomeTaxPeriodSetup@1500622(StartingDate@1500273 : Date);
    VAR
      IncomeTaxPeriodSetup@1500274 : Record 16501;
    BEGIN
      IncomeTaxPeriodSetup.SETRANGE("Starting Date",StartingDate);
      IncomeTaxPeriodSetup.FINDFIRST;
      IncomeTaxPeriodSetup.DELETE(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE CreateTDSTCSFiscalYearRequestPageHandler@1500623(VAR CreateTDSTCSFiscalYear@1500275 : TestRequestPage 13717);
    BEGIN
      CreateTDSTCSFiscalYear.StartingDate.SETVALUE(WORKDATE);
      CreateTDSTCSFiscalYear.EndingDate.SETVALUE(CALCDATE('<1Y>',WORKDATE));
      CreateTDSTCSFiscalYear.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1130018(Text@1500276 : Text;VAR Reply@1500277 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1130038(Msg@1130001 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

