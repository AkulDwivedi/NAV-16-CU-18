OBJECT Codeunit 134261 Bank Pmt. Appl. Algorithm
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      ZeroVATPostingSetup@1005 : Record 325;
      LibraryRandom@1020 : Codeunit 130440;
      LibraryERM@1022 : Codeunit 131300;
      LibrarySales@1023 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryERMCountryData@1024 : Codeunit 131305;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibraryUtility@1006 : Codeunit 131000;
      Assert@1025 : Codeunit 130000;
      DotNetRandom@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Random";
      isInitialized@1026 : Boolean;
      LinesAreAppliedTxt@1003 : TextConst 'ENU=are applied';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestNoMatchFoundCustomerEntries@101();
    VAR
      BankAccReconciliation@1024 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1027 : Decimal;
      ExtDocNo@1002 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    PROCEDURE TestNoMatchRulesAreIncludedInProposals@69();
    VAR
      BankAccReconciliation@1024 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1003 : Record 1252;
      Amount@1027 : Decimal;
      ExtDocNo@1002 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');

      // Exercise
      RunMatch(BankAccReconciliation,FALSE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustNoMatchOutsideThreshold@21();
    VAR
      BankAccReconciliation@1024 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1027 : Decimal;
      Tolerance@1002 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Tolerance := ROUND(Amount / 4,0.01);
      ExtDocNo := '';
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + Tolerance + 0.01);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustSingleAmountMatch@10();
    VAR
      BankAccReconciliation@1024 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + 1);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustSingleAmountMatchWithAmountToleranceLowerRange@19();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      Tolerance := ROUND(Amount / 4,0.01);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + Tolerance);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,Tolerance,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustSingleAmountMatchWithAmountToleranceHigherRange@76();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      Tolerance := ROUND(Amount / 4,0.01);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + Tolerance);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount + 2 * Tolerance,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,Tolerance,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustSingleAmountMatchWithAmountPercentageTolerance@75();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      TempBankPmtApplRule@1006 : TEMPORARY Record 1252;
      BankAccount@1005 : Record 270;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      Tolerance := LibraryRandom.RandDecInRange(1,99,1);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,ROUND(Amount / (1 + Tolerance / 100)));
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationPercentageTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");

      TempBankPmtApplRule.LoadRules;
      TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,1,1,FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustAmountInclTolerancePctToleranceIsBasedOnStatementAmount@50();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1024 : Record 274;
      Customer@1022 : Record 18;
      CustLedgerEntry@1021 : Record 21;
      CustLedgerEntry2@1020 : Record 21;
      CustLedgerEntry3@1023 : Record 21;
      CustLedgerEntry4@1026 : Record 21;
      CustLedgerEntry5@1027 : Record 21;
      BankPmtApplRule@1017 : Record 1252;
      BankAccount@1028 : Record 270;
      PaymentReconciliationJournal@1016 : TestPage 1290;
      Amount@1013 : Decimal;
      Amount2@1029 : Decimal;
      Amount3@1009 : Decimal;
      Amount4@1010 : Decimal;
      Amount5@1015 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      DocumentNo3@1006 : Code[20];
      DocumentNo4@1007 : Code[20];
      DocumentNo5@1008 : Code[20];
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
      Tolerance@1000 : Decimal;
      NoOfLedgerEntriesWithinRange@1018 : Integer;
      NoOfLedgerEntriesOutsideOfRange@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Tolerance := LibraryRandom.RandDecInRange(20,30,1);

      // Create invoices within tolerance range
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := ROUND(Amount * (1 + Tolerance / 100));
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      Amount3 := ROUND(Amount * (1 + Tolerance / 100));
      DocumentNo3 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount3);

      // Create invoices outside of range
      Amount4 := ROUND(Amount / 2);
      DocumentNo4 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount4);

      Amount5 := Amount * 2;
      DocumentNo5 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount5);

      CreateBankReconciliationPercentageTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);
      GetCustLedgerEntry(CustLedgerEntry3,Customer,DocumentNo3);
      GetCustLedgerEntry(CustLedgerEntry4,Customer,DocumentNo4);
      GetCustLedgerEntry(CustLedgerEntry5,Customer,DocumentNo5);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify data on the fact box
      PaymentReconciliationJournal.OPENEDIT;
      PaymentReconciliationJournal.GOTORECORD(BankAccReconciliationLine);

      NoOfLedgerEntriesWithinRange := 3;
      NoOfLedgerEntriesOutsideOfRange := 2;

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,CustLedgerEntry."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,CustLedgerEntry2."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,CustLedgerEntry3."Entry No.");

      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,CustLedgerEntry4."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,CustLedgerEntry5."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustMultipleAmountMatch@6();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustMultipleAmountMatchWithAmountTolerance@28();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      Tolerance := ROUND(Amount / 4,0.01);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + Tolerance);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount + Tolerance / 3);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Customer,Amount,Tolerance,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustDoctInTransTextMatch@8();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustDocInAdditionalTextMatch@11();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := '';
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'',DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExtDocAndDocMatch@14();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,ExtDocNo,DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustNoMatchExtDocAndDocNoTrailingChar@89();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        ExtDocNo + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustNoMatchExtDocAndDocNoTrailingDigit@90();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        ExtDocNo + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustNoMatchExtDocAndDocTrailingWithNonAlphaAndChar@97();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        ExtDocNo + ',' + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + ',' + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustNoMatchExtDocAndDocTrailingWithNonAlphaAndDigit@96();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        ExtDocNo + ',' + FORMAT(LibraryRandom.RandInt(9)),
        FORMAT(LibraryRandom.RandInt(9)) + ',' + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustNotMatchExtDocTooShort@105();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1026 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := COPYSTR(GenerateExtDocNo,1,3);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,ExtDocNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustDocAndSingleAmountMatch@16();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,ExtDocNo,DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustDocAndMultipleAmountMatch@15();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustMatchOnBankAccountOnly@26();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      CustomerBankAccount@1004 : Record 287;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateCustomerBankAccount(CustomerBankAccount,Customer."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnRelatedPartyNameSingle@39();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnRelatedPartyNameReversed@49();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      FirstName@1003 : Text[20];
      LastName@1004 : Text[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      FirstName := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LastName := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Customer.VALIDATE(Name,STRSUBSTNO('%1 %2',FirstName,LastName));
      Customer.MODIFY(TRUE);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',STRSUBSTNO('%1 %2',LastName,FirstName),'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnRelatedPartyNameMultiple@34();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Customer1@1004 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      CreateCustomer(Customer1);
      Customer1.VALIDATE(Name,Customer.Name);
      Customer1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnRelatedPartyNameMultipleExactMatchOnCity@152();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Customer1@1004 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      CreateCustomer(Customer1);
      Customer1.VALIDATE(Name,Customer.Name);
      Customer1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'',Customer.City);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnRelatedPartyNameMultipleExactMatchOnCityAndAddress@150();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Customer1@1004 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      CreateCustomer(Customer1);
      Customer1.VALIDATE(Name,Customer.Name);
      Customer1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,Customer.Address + Customer."Address 2",Customer.City);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustWithSpecialCharsInRelatedPartyNameExactMatchSingle@78();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Customer.Name := GenerateRandomTextWithSpecialChars;
      Customer.MODIFY;
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnOtherNameSingle@41();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,Customer.Name,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustExactMatchOnOtherNameMultiple@40();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Customer1@1004 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      CreateCustomer(Customer1);
      Customer1.VALIDATE(Name,Customer.Name);
      Customer1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,Customer.Name,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCloseMatchOnOtherNameSingle@157();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        COPYSTR(Customer.Name,1,STRLEN(Customer.Name) - 1),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCloseMatchOnOtherNameMultiple@158();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Customer1@1004 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      CreateCustomer(Customer1);
      Customer1.VALIDATE(Name,Customer.Name);
      Customer1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        COPYSTR(Customer.Name,1,STRLEN(Customer.Name) - 1),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustPartialMatchOnOtherName@167();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      MatchBankPayments@1004 : Codeunit 1255;
      Amount@1026 : Decimal;
      Length@1003 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Length := ROUND(MatchBankPayments.GetCloseMatchTreshold / MatchBankPayments.GetNormalizingFactor *
          STRLEN(Customer.Name),1);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,
        GenerateRandomSmallLetters(STRLEN(Customer.Name) - Length) + COPYSTR(Customer.Name,1,Length),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainAndMultipleAmountMatch@43();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      CustomerBankAccount@1003 : Record 287;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateCustomerBankAccount(CustomerBankAccount,Customer."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainAndSingleAmountMatch@47();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      CustomerBankAccount@1005 : Record 287;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateCustomerBankAccount(CustomerBankAccount,Customer."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainMatchAndDocNo@51();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainMatchAndExtDocNo@56();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,'',ExtDocNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainMatchAndDocNoAndAmount@59();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,ExtDocNo,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestCustCertainMatchAndDocNoAndAmountWithAmountTolerance@66();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
      Tolerance@1006 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Tolerance := ROUND(Amount / 4,0.01);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",ExtDocNo,Amount - Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,ExtDocNo,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount,Tolerance,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustMatchCheckApplicationPriorities@60();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine1@1001 : Record 274;
      BankAccReconciliationLine2@1004 : Record 274;
      Customer@1000 : Record 18;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine1,Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine1,'',Customer.Name,'','');
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine1,FALSE);
    END;

    [Test]
    PROCEDURE TestCustMatchCheckNoApplication@82();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine1@1001 : Record 274;
      BankAccReconciliationLine2@1004 : Record 274;
      Customer@1000 : Record 18;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine1,Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine1,'',Customer.Name,'','');
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,FALSE);

      // Verify
      VerifyEntriesNotAppliedForStatement(BankAccReconciliation);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustTextMapper@73();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount * 2,TextMapper,'');

      // Exercise
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
      VerifyTextEntryApplied(BankAccReconciliationLine."Statement Line No.");
    END;

    LOCAL PROCEDURE CustRerunTextMapper@108(RunFirst@1006 : Boolean;OtherLinesInTheJournal@1008 : Boolean);
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      BankAccReconciliationLine2@1002 : Record 274;
      BankAccReconciliationLine3@1004 : Record 274;
      Customer@1000 : Record 18;
      PaymentReconciliationJournal@1003 : TestPage 1290;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
      SalesInvoiceNo@1007 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      SalesInvoiceNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount * 2,TextMapper,'');
      IF OtherLinesInTheJournal THEN BEGIN
        CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,Amount,Customer.Name,'');
        CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine3,Amount,SalesInvoiceNo,'');
      END;
      IF RunFirst THEN BEGIN
        RunMatch(BankAccReconciliation,TRUE);

        // Partial verify
        VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
      END;

      // Exercise
      PaymentReconciliationJournal.TRAP;
      OpenPaymentRecJournal(BankAccReconciliation);
      PaymentReconciliationJournal.AddMappingRule.INVOKE;

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
    END;

    [Test]
    [HandlerFunctions(TextMapperModalPageHandler)]
    PROCEDURE TestCustRerunOnlyTextMapper@115();
    BEGIN
      CustRerunTextMapper(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TextMapperModalPageHandler)]
    PROCEDURE TestCustRunAndRerunTextMapper@114();
    BEGIN
      CustRerunTextMapper(TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustTextMapperOverriden@25();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,TextMapper,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Exercise
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,FALSE);
      VerifyTextEntryConsidered(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustTextMapperToCustomer@77();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount * 2,TextMapper,'');

      // Exercise
      LibraryERM.CreateAccountMappingCustomer(TextToAccMapping,TextMapper,Customer."No.");

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
      VerifyTextEntryApplied(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    PROCEDURE TestCustomerFirstMatchOnDocumentNoInsertsMultipleMatchLine@164();
    VAR
      TempBankStmtMultipleMatchLine@1000 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1005 : Record 273;
      BankAccReconciliationLine@1004 : Record 274;
      Customer@1003 : Record 18;
      CustLedgerEntry@1008 : Record 21;
      TempLedgerEntryMatchingBuffer@1006 : TEMPORARY Record 1248;
      Amount@1002 : Decimal;
      DocumentNo@1007 : Code[20];
      UsePaymentDiscounts@1009 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      TempLedgerEntryMatchingBuffer.InsertFromCustomerLedgerEntry(CustLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,BankAccReconciliationLine,
        TempBankStatementMatchingBuffer."Account Type"::Customer);

      // Verify
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,CustLedgerEntry."Entry No.");
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,CustLedgerEntry."Remaining Amount");
      Assert.AreEqual(
        CustLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    PROCEDURE TestCustomerSecondMatchOnDocumentNoUpdatesMultipleMatchLine@163();
    VAR
      TempBankStmtMultipleMatchLine@1012 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1011 : TEMPORARY Record 1250;
      TempLedgerEntryMatchingBuffer@1002 : TEMPORARY Record 1248;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Customer@1004 : Record 18;
      CustLedgerEntry@1003 : Record 21;
      CustLedgerEntry2@1014 : Record 21;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      ExpectedNoOfLines@1015 : Integer;
      ExpectedRemainingAmount@1016 : Decimal;
      UsePaymentDiscounts@1007 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      // Execute
      TempLedgerEntryMatchingBuffer.InsertFromCustomerLedgerEntry(CustLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,BankAccReconciliationLine,
        TempBankStatementMatchingBuffer."Account Type"::Customer);

      TempLedgerEntryMatchingBuffer.InsertFromCustomerLedgerEntry(CustLedgerEntry2,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,BankAccReconciliationLine,
        TempBankStatementMatchingBuffer."Account Type"::Customer);

      // Verify
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,CustLedgerEntry2."Entry No.");

      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      ExpectedNoOfLines := 2;
      ExpectedRemainingAmount := CustLedgerEntry."Remaining Amount" + CustLedgerEntry2."Remaining Amount";
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,ExpectedNoOfLines,ExpectedRemainingAmount);

      Assert.AreEqual(
        CustLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
      TempBankStmtMultipleMatchLine.NEXT;
      Assert.AreEqual(
        CustLedgerEntry2."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    PROCEDURE TestCustomerMultipleMatchRuleIsNotCreatedForDifferentCustomers@148();
    VAR
      TempBankStmtMultipleMatchLine@1012 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1011 : TEMPORARY Record 1250;
      TempLedgerEntryMatchingBuffer@1002 : TEMPORARY Record 1248;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Customer@1004 : Record 18;
      Customer2@1017 : Record 18;
      CustLedgerEntry@1003 : Record 21;
      CustLedgerEntry2@1014 : Record 21;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      UsePaymentDiscounts@1007 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateCustomer(Customer2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer2."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer2,DocumentNo2);

      // Execute

      TempLedgerEntryMatchingBuffer.InsertFromCustomerLedgerEntry(CustLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,BankAccReconciliationLine,
        TempBankStatementMatchingBuffer."Account Type"::Customer);

      TempLedgerEntryMatchingBuffer.InsertFromCustomerLedgerEntry(CustLedgerEntry2,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,BankAccReconciliationLine,
        TempBankStatementMatchingBuffer."Account Type"::Customer);

      // Verify First Entry
      GetOneToOneBankStatementMatchingBuffer(TempBankStatementMatchingBuffer,CustLedgerEntry."Entry No.");
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,CustLedgerEntry."Entry No.");
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,CustLedgerEntry."Remaining Amount");
      Assert.AreEqual(
        CustLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');

      // Verify Second Entry
      GetOneToOneBankStatementMatchingBuffer(TempBankStatementMatchingBuffer,CustLedgerEntry2."Entry No.");
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,CustLedgerEntry2."Entry No.");
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,CustLedgerEntry2."Remaining Amount");
      TempBankStmtMultipleMatchLine.NEXT;
      Assert.AreEqual(
        CustLedgerEntry2."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchAllEntriesFullyApplied@146();
    VAR
      BankAccReconciliation@1011 : Record 273;
      BankAccReconciliationLine@1010 : Record 274;
      Customer@1009 : Record 18;
      CustLedgerEntry@1007 : Record 21;
      CustLedgerEntry2@1006 : Record 21;
      BankPmtApplRule@1005 : Record 1252;
      AppliedPaymentEntry@1023 : Record 1294;
      Amount@1004 : Decimal;
      Amount2@1018 : Decimal;
      AppliedAmount@1019 : Decimal;
      DocumentNo@1003 : Code[20];
      DocumentNo2@1002 : Code[20];
      Difference@1020 : Decimal;
      ExpectedNoOfEntries@1021 : Integer;
      Quality@1022 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := Amount + Amount2;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      Difference := 0;
      ExpectedNoOfEntries := 2;

      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount2,CustLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchUserOverPaid@141();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1024 : Record 274;
      Customer@1022 : Record 18;
      CustLedgerEntry@1021 : Record 21;
      CustLedgerEntry2@1020 : Record 21;
      BankPmtApplRule@1017 : Record 1252;
      AppliedPaymentEntry@1014 : Record 1294;
      Amount@1013 : Decimal;
      Amount2@1029 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      StatementAmount@1004 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := Amount + Amount2;
      StatementAmount := 2 * AppliedAmount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,StatementAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := StatementAmount - AppliedAmount;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount2,CustLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchAllEntriesAppliedOneUnderPaid@140();
    VAR
      BankAccReconciliation@1026 : Record 273;
      BankAccReconciliationLine@1025 : Record 274;
      Customer@1023 : Record 18;
      CustLedgerEntry@1022 : Record 21;
      CustLedgerEntry2@1021 : Record 21;
      BankPmtApplRule@1018 : Record 1252;
      AppliedPaymentEntry@1015 : Record 1294;
      Amount@1014 : Decimal;
      Amount2@1013 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := Amount + Amount2 - ROUND(Amount2 / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality,Amount2 - ROUND(Amount2 / 2,LibraryERM.GetAmountRoundingPrecision),CustLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchGetOverridenByHigherConfidenceOneToOneMatch@138();
    VAR
      BankAccReconciliation@1026 : Record 273;
      BankAccReconciliationLine@1025 : Record 274;
      Customer@1023 : Record 18;
      CustLedgerEntry@1022 : Record 21;
      BankPmtApplRule@1018 : Record 1252;
      AppliedPaymentEntry@1015 : Record 1294;
      Amount@1014 : Decimal;
      Amount2@1013 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := Amount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Customer,Customer."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');

      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchAllEntriesAppliedOneNotPaidOneUnderPaid@137();
    VAR
      BankAccReconciliation@1026 : Record 273;
      BankAccReconciliationLine@1025 : Record 274;
      Customer@1023 : Record 18;
      CustLedgerEntry@1022 : Record 21;
      BankPmtApplRule@1018 : Record 1252;
      AppliedPaymentEntry@1015 : Record 1294;
      Amount@1014 : Decimal;
      Amount2@1013 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := ROUND(Amount / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Customer,Customer."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality,AppliedAmount,CustLedgerEntry."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchWhenCannotApplyEntriesOldestGetAppliedFirst@135();
    VAR
      BankAccReconciliation@1026 : Record 273;
      BankAccReconciliationLine@1025 : Record 274;
      Customer@1023 : Record 18;
      CustLedgerEntry@1022 : Record 21;
      CustLedgerEntry2@1021 : Record 21;
      CustLedgerEntry3@1020 : Record 21;
      BankPmtApplRule@1018 : Record 1252;
      AppliedPaymentEntry@1015 : Record 1294;
      Amount@1014 : Decimal;
      Amount2@1013 : Decimal;
      Amount3@1030 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      DocumentNo3@1010 : Code[20];
      AppliedAmount@1005 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
      DueDate@1031 : Date;
      DueDate2@1032 : Date;
      DueDate3@1033 : Date;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      Amount3 := LibraryRandom.RandDecInRange(1,1000,2);

      DueDate := WORKDATE;
      DueDate2 := CALCDATE('<-3D>',DueDate);
      DueDate3 := CALCDATE('<1D>',DueDate2);

      DocumentNo := CreateAndPostSalesInvoiceWithOneLine2(Customer."No.",GenerateExtDocNo,Amount,DueDate);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine2(Customer."No.",GenerateExtDocNo,Amount2,DueDate2);
      DocumentNo3 := CreateAndPostSalesInvoiceWithOneLine2(Customer."No.",GenerateExtDocNo,Amount3,DueDate3);

      AppliedAmount := Amount2 + ROUND(Amount3 / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,DocumentNo + ' ' + DocumentNo2 + ' ' + DocumentNo3,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);
      GetCustLedgerEntry(CustLedgerEntry3,Customer,DocumentNo3);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Customer,Customer."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount2,CustLedgerEntry2."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,AppliedAmount - Amount2,CustLedgerEntry3."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchTextMapperOverridesMediumConfidenceRule@134();
    VAR
      TextToAccMapping@1031 : Record 1251;
      BankAccReconciliation@1030 : Record 273;
      BankAccReconciliationLine@1029 : Record 274;
      Customer@1027 : Record 18;
      AppliedPaymentEntry@1019 : Record 1294;
      Amount@1018 : Decimal;
      DocumentNo@1015 : Code[20];
      TextMapper@1009 : Code[20];
      Difference@1006 : Decimal;
      ExpectedNoOfEntries@1005 : Integer;
      Quality@1004 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,TextMapper,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'','','','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetTextMapperScore;

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,Amount,BankAccReconciliationLine."Account Type"::"G/L Account",
        TextToAccMapping."Debit Acc. No.",ExpectedNoOfEntries);
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchTextMapperDoesntOveriddeHighConfidenceRule@133();
    VAR
      TextToAccMapping@1031 : Record 1251;
      BankAccReconciliation@1030 : Record 273;
      BankAccReconciliationLine@1029 : Record 274;
      Customer@1027 : Record 18;
      CustLedgerEntry@1026 : Record 21;
      CustLedgerEntry2@1025 : Record 21;
      BankPmtApplRule@1022 : Record 1252;
      AppliedPaymentEntry@1019 : Record 1294;
      Amount@1018 : Decimal;
      DocumentNo@1015 : Code[20];
      DocumentNo2@1014 : Code[20];
      TextMapper@1009 : Code[20];
      Difference@1006 : Decimal;
      ExpectedNoOfEntries@1005 : Integer;
      Quality@1004 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine,2 * Amount,TextMapper,DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchOneHitMultipleMatchesAreRemoved@132();
    VAR
      BankAccReconciliation@1030 : Record 273;
      BankAccReconciliationLine@1029 : Record 274;
      Customer@1027 : Record 18;
      Amount@1018 : Decimal;
      DocumentNo@1015 : Code[20];
      DocumentNo2@1014 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);
      TempBankStatementMatchingBuffer.RESET;
      Assert.AreEqual(
        3,TempBankStatementMatchingBuffer.COUNT,'There should be two single mach entries and one multiple match entry present');

      Assert.AreEqual(
        3,TempBankStatementMatchingBuffer.COUNT,'There should be two single mach entries and one multiple match entry present');
      TempBankStatementMatchingBuffer.SETRANGE("One to Many Match",TRUE);
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one multiple match entry present');

      TempBankStatementMatchingBuffer.SETRANGE("No. of Entries",1);
      Assert.IsTrue(TempBankStatementMatchingBuffer.ISEMPTY,'All temporary multiple match entries must be removed');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchSingleMatchLinesAreIncludedInAmountInclToleranceMatch@130();
    VAR
      BankAccReconciliation@1030 : Record 273;
      BankAccReconciliationLine@1029 : Record 274;
      BankAccReconciliationLine2@1028 : Record 274;
      Customer@1027 : Record 18;
      BankPmtApplRule@1022 : Record 1252;
      BankPmtApplRule2@1021 : Record 1252;
      Amount@1018 : Decimal;
      DocumentNo@1015 : Code[20];
      DocumentNo2@1014 : Code[20];
      DocumentNo3@1013 : Code[20];
      Difference@1006 : Decimal;
      ExpectedNoOfEntries@1005 : Integer;
      Quality@1004 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,2 * Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,2 * Amount,'',DocumentNo3);
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Customer.Name,'','');

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      SetRule(BankPmtApplRule2,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule2);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchOneToManyMatchesAreIncludedInAmountInclToleranceMatch@126();
    VAR
      BankAccReconciliation@1030 : Record 273;
      BankAccReconciliationLine@1029 : Record 274;
      BankAccReconciliationLine2@1028 : Record 274;
      Customer@1027 : Record 18;
      BankPmtApplRule@1022 : Record 1252;
      Amount@1018 : Decimal;
      DocumentNo@1015 : Code[20];
      DocumentNo2@1014 : Code[20];
      DocumentNo3@1013 : Code[20];
      DocumentNo4@1012 : Code[20];
      Difference@1006 : Decimal;
      ExpectedNoOfEntries@1005 : Integer;
      Quality@1004 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo4 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,2 * Amount,'',DocumentNo3 + ' ' + DocumentNo4);
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Customer.Name,'','');

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchTwoOneToManyLines@125();
    VAR
      BankAccReconciliation@1022 : Record 273;
      BankAccReconciliationLine@1021 : Record 274;
      BankAccReconciliationLine2@1020 : Record 274;
      Customer@1019 : Record 18;
      CustLedgerEntry@1018 : Record 21;
      CustLedgerEntry2@1017 : Record 21;
      CustLedgerEntry3@1026 : Record 21;
      CustLedgerEntry4@1027 : Record 21;
      BankPmtApplRule@1016 : Record 1252;
      BankPmtApplRule2@1015 : Record 1252;
      AppliedPaymentEntry@1013 : Record 1294;
      Amount@1012 : Decimal;
      DocumentNo@1011 : Code[20];
      DocumentNo2@1010 : Code[20];
      DocumentNo3@1009 : Code[20];
      DocumentNo4@1008 : Code[20];
      Difference@1002 : Decimal;
      ExpectedNoOfEntries@1001 : Integer;
      Quality@1000 : Integer;
      Quality2@1028 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,2 * Amount);
      DocumentNo4 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine2,3 * Amount,DocumentNo + ' ' + DocumentNo3 + ' ' + DocumentNo4,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);
      GetCustLedgerEntry(CustLedgerEntry3,Customer,DocumentNo3);
      GetCustLedgerEntry(CustLedgerEntry4,Customer,DocumentNo4);

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      SetRule(BankPmtApplRule2,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      Quality2 := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule2);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,2 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality2,Difference,3 * Amount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries Line 1
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry2."Entry No.");

      // Verify Applied Payment Entries Line 2
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine2);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality2,CustLedgerEntry3."Remaining Amount",CustLedgerEntry3."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality2,CustLedgerEntry4."Remaining Amount",CustLedgerEntry4."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerMultipleMatchBuildFromNoMatchEntries@155();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1024 : Record 274;
      Customer@1022 : Record 18;
      CustLedgerEntry@1021 : Record 21;
      CustLedgerEntry2@1020 : Record 21;
      BankPmtApplRule@1017 : Record 1252;
      AppliedPaymentEntry@1014 : Record 1294;
      Amount@1013 : Decimal;
      Amount2@1029 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      StatementAmount@1004 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      // Remove all rules except multiple match rules, so they will be scored with 0
      BankPmtApplRule.SETFILTER(
        "Doc. No./Ext. Doc. No. Matched",'<>%1',BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple");
      BankPmtApplRule.DELETEALL;
      BankPmtApplRule.RESET;

      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := Amount + Amount2;
      StatementAmount := 2 * AppliedAmount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,StatementAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);
      GetCustLedgerEntry(CustLedgerEntry2,Customer,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := StatementAmount - AppliedAmount;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Customer,Customer."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount,CustLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,Amount2,CustLedgerEntry2."Entry No.");
    END;

    [Test]
    PROCEDURE TestCustomerRunningWithoutApplicationIncludesNegativeEntries@48();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Customer@1016 : Record 18;
      CustLedgerEntry@1015 : Record 21;
      BankPmtApplRule@1011 : Record 1252;
      TempBankPmtApplRule@1021 : TEMPORARY Record 1252;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,FALSE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
      TempBankStatementMatchingBuffer.FINDFIRST;
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      TempBankPmtApplRule.LoadRules;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      Assert.AreEqual(Quality,TempBankStatementMatchingBuffer.Quality,'Score should be assigned to the line');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerRunningWithApplicationExcludesNegativeEntries@160();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Customer@1016 : Record 18;
      CustLedgerEntry@1015 : Record 21;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify positive entry is not present
      Assert.AreEqual(0,TempBankStatementMatchingBuffer.COUNT,'There should be no entries present');
    END;

    [Test]
    PROCEDURE TestCustomerRunningWithoutApplicationIncludesEntriesAfterStatementDate@170();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Customer@1016 : Record 18;
      CustLedgerEntry@1015 : Record 21;
      BankPmtApplRule@1011 : Record 1252;
      TempBankPmtApplRule@1021 : TEMPORARY Record 1252;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');
      BankAccReconciliationLine.VALIDATE("Transaction Date",CALCDATE('<-1M>',CustLedgerEntry."Posting Date"));
      BankAccReconciliationLine.MODIFY(TRUE);

      // Execute
      RunMatch(BankAccReconciliation,FALSE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
      TempBankStatementMatchingBuffer.FINDFIRST;
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      TempBankPmtApplRule.LoadRules;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      Assert.AreEqual(Quality,TempBankStatementMatchingBuffer.Quality,'Score should be assigned to the line');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestCustomerRunningWithoutApplicationDoesNotIncludeEntriesAfterStatementDate@184();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Customer@1016 : Record 18;
      CustLedgerEntry@1015 : Record 21;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",GenerateExtDocNo,Amount);

      GetCustLedgerEntry(CustLedgerEntry,Customer,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Customer.Name,'','');
      BankAccReconciliationLine.VALIDATE("Transaction Date",CALCDATE('<-1M>',CustLedgerEntry."Posting Date"));
      BankAccReconciliationLine.MODIFY(TRUE);

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(0,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestNoMatchFoundVendorEntries@23();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      ExtDocNo@1002 : Code[20];
    BEGIN
      Initialize;

      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);
      // Setup

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendNoMatchOutsideTolerance@17();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      Tolerance@1002 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Tolerance := ROUND(Amount / 4,0.01);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + Tolerance + 0.01);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      // VerifyMatchBufferEmpty;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendSingleAmountMatch@22();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + 1);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendSingleAmountMatchWithAmountToleranceLowerRange@81();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      Tolerance := ROUND(Amount / 4,0.01);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + Tolerance);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,Tolerance,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendSingleAmountMatchWithAmountToleranceHigherRange@80();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      Tolerance := ROUND(Amount / 4,0.01);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + Tolerance);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-(Amount + 2 * Tolerance),'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,Tolerance,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendSingleAmountMatchWithAmountPercentageTolerance@79();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1027 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      Tolerance := LibraryRandom.RandDecInRange(1,99,1);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount * (1 + Tolerance / 100));
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + 5 * Tolerance);

      CreateBankReconciliationPercentageTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,Tolerance,1,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendAmountInclTolerancePctToleranceIsBasedOnStatementAmount@46();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1024 : Record 274;
      Vendor@1022 : Record 23;
      VendorLedgerEntry@1021 : Record 25;
      VendorLedgerEntry2@1020 : Record 25;
      VendorLedgerEntry3@1023 : Record 25;
      VendorLedgerEntry4@1026 : Record 25;
      VendorLedgerEntry5@1027 : Record 25;
      BankPmtApplRule@1017 : Record 1252;
      BankAccount@1028 : Record 270;
      PaymentReconciliationJournal@1016 : TestPage 1290;
      Amount@1013 : Decimal;
      Amount2@1029 : Decimal;
      Amount3@1009 : Decimal;
      Amount4@1010 : Decimal;
      Amount5@1015 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      DocumentNo3@1006 : Code[20];
      DocumentNo4@1007 : Code[20];
      DocumentNo5@1008 : Code[20];
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
      Tolerance@1000 : Decimal;
      NoOfLedgerEntriesWithinRange@1018 : Integer;
      NoOfLedgerEntriesOutsideOfRange@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Tolerance := LibraryRandom.RandDecInRange(20,30,1);

      // Create invoices within tolerance range
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := Amount + ROUND(Amount * Tolerance / 100);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      Amount3 := Amount + ROUND(Amount * Tolerance / 120);
      DocumentNo3 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount3);

      // Create invoices outside of range
      Amount4 := ROUND(Amount / 2);
      DocumentNo4 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount4);

      Amount5 := Amount * 2;
      DocumentNo5 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount5);

      CreateBankReconciliationPercentageTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);
      GetVendorLedgerEntry(VendorLedgerEntry3,Vendor,DocumentNo3);
      GetVendorLedgerEntry(VendorLedgerEntry4,Vendor,DocumentNo4);
      GetVendorLedgerEntry(VendorLedgerEntry5,Vendor,DocumentNo5);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify data on the fact box
      PaymentReconciliationJournal.OPENEDIT;
      PaymentReconciliationJournal.GOTORECORD(BankAccReconciliationLine);

      NoOfLedgerEntriesWithinRange := 3;
      NoOfLedgerEntriesOutsideOfRange := 2;

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,VendorLedgerEntry."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,VendorLedgerEntry2."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,VendorLedgerEntry3."Entry No.");

      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,VendorLedgerEntry4."Entry No.");

      VerifyMatchDetailsData2(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount,
        Tolerance,BankAccount."Match Tolerance Type"::Percentage,
        NoOfLedgerEntriesWithinRange,NoOfLedgerEntriesOutsideOfRange,
        TRUE,VendorLedgerEntry5."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendMultipleAmountMatch@32();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      ExtDocNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendMultipleAmountMatchWithAmountTolerance@29();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      Tolerance@1003 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Tolerance := ROUND(Amount / 4,0.01);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + Tolerance);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount + Tolerance / 3);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,Tolerance,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendDoctInTransTextMatch@31();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendDocInAdditionalTextMatch@38();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'',DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExtDocAndDocNoMatch@37();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,ExtDocNo,DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendNoMatchExtDocAndDocNoTrailingChar@107();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        ExtDocNo + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendNoMatchExtDocAndDocNoTrailingDigit@104();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        ExtDocNo + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendNoMatchExtDocAndDocTrailingWithNonAlphaAndChar@102();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        ExtDocNo + ',' + GenerateRandomSmallLetters(1),GenerateRandomSmallLetters(1) + ',' + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendNoMatchExtDocAndDocTrailingWithNonAlphaAndDigit@98();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        ExtDocNo + ',' + FORMAT(LibraryRandom.RandInt(9)),
        FORMAT(LibraryRandom.RandInt(9)) + ',' + DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendNotMatchExtDocTooShort@91();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := COPYSTR(GenerateExtDocNo,1,3);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,ExtDocNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendDocAndSingleAmountMatch@36();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,ExtDocNo,DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendDocAndMultipleAmountMatch@35();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendMatchOnBankAccountOnly@44();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      VendorBankAccount@1005 : Record 288;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateVendorBankAccount(VendorBankAccount,Vendor."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnRelatedPartyNameSingle@195();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnRelatedPartyNameReversed@42();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      FirstName@1003 : Text[20];
      LastName@1004 : Text[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      FirstName := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LastName := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Vendor.VALIDATE(Name,STRSUBSTNO('%1 %2',FirstName,LastName));
      Vendor.MODIFY(TRUE);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',STRSUBSTNO('%1 %2',LastName,FirstName),'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnRelatedPartyNameMultiple@194();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Vendor1@1004 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      CreateVendor(Vendor1);
      Vendor1.VALIDATE(Name,Vendor.Name);
      Vendor1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnRelatedPartyNameMultipleExactMatchOnCity@193();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Vendor1@1004 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      CreateVendor(Vendor1);
      Vendor1.VALIDATE(Name,Vendor.Name);
      Vendor1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'',Vendor.City);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnRelatedPartyNameMultipleExactMatchOnCityAndAddress@192();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1003 : Record 23;
      Vendor1@1004 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      CreateVendor(Vendor1);
      Vendor1.VALIDATE(Name,Vendor.Name);
      Vendor1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,Vendor.Address + Vendor."Address 2",Vendor.City);

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendWithSpecialCharsInRelatedPartyNameExactMatchSingle@191();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Vendor.Name := GenerateRandomTextWithSpecialChars;
      Vendor.MODIFY;
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnOtherNameSingle@189();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,Vendor.Name,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendExactMatchOnOtherNameMultiple@188();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Vendor1@1004 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      CreateVendor(Vendor1);
      Vendor1.VALIDATE(Name,Vendor.Name);
      Vendor1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,Vendor.Name,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCloseMatchOnOtherNameSingle@187();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        COPYSTR(Vendor.Name,1,STRLEN(Vendor.Name) - 1),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCloseMatchOnOtherNameMultiple@186();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Vendor1@1004 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      CreateVendor(Vendor1);
      Vendor1.VALIDATE(Name,Vendor.Name);
      Vendor1.MODIFY(TRUE);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        COPYSTR(Vendor.Name,1,STRLEN(Vendor.Name) - 1),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendPartialMatchOnOtherName@185();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      MatchBankPayments@1004 : Codeunit 1255;
      Amount@1026 : Decimal;
      Length@1003 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Length := ROUND(MatchBankPayments.GetCloseMatchTreshold / MatchBankPayments.GetNormalizingFactor *
          STRLEN(Vendor.Name),1);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,
        GenerateRandomSmallLetters(STRLEN(Vendor.Name) - Length) + COPYSTR(Vendor.Name,1,Length),'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCertainAndMultipleAmountMatch@70();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      VendorBankAccount@1004 : Record 288;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateVendorBankAccount(VendorBankAccount,Vendor."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCertainAndSingleAmountMatch@68();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      VendorBankAccount@1004 : Record 288;
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'','');
      UpdateBankReconciliationLine(BankAccReconciliationLine,BankAccReconciliation."Bank Account No.",'','','');
      CreateVendorBankAccount(VendorBankAccount,Vendor."No.",BankAccReconciliation."Bank Account No.");

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCertainMatchAndDocNo@67();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCertainMatchAndExtDocNo@65();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount / 2,'',ExtDocNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount / 2,0,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVenCertainMatchAndDocNoAndAmount@64();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,ExtDocNo,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,0,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,VerifyMatchDetailsOnPaymentApplicationsPage)]
    PROCEDURE TestVendCertainMatchAndDocNoAndAmountWithAmountTolerance@63();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
      ExtDocNo@1004 : Code[20];
      Tolerance@1006 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Tolerance := ROUND(Amount / 4,0.01);
      ExtDocNo := GenerateExtDocNo;
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",ExtDocNo,Amount - Tolerance);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,Tolerance);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,ExtDocNo,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      VerifyReconciliation(BankPmtApplRule,BankAccReconciliationLine."Statement Line No.");
      VerifyMatchDetailsData(BankAccReconciliation,BankPmtApplRule,
        BankAccReconciliationLine."Account Type"::Vendor,-Amount,Tolerance,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendMatchCheckApplicationPriorities@72();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine1@1001 : Record 274;
      BankAccReconciliationLine2@1004 : Record 274;
      Vendor@1000 : Record 23;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine1,-Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine1,'',Vendor.Name,'','');
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,-Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine1,FALSE);
    END;

    [Test]
    PROCEDURE TestVendMatchCheckNoApplication@62();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine1@1001 : Record 274;
      BankAccReconciliationLine2@1004 : Record 274;
      Vendor@1000 : Record 23;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine1,-Amount / 2,DocumentNo,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine1,'',Vendor.Name,'','');
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,-Amount / 2,DocumentNo,'');

      // Exercise
      RunMatch(BankAccReconciliation,FALSE);

      // Verify
      VerifyEntriesNotAppliedForStatement(BankAccReconciliation);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendTextMapper@87();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount * 2,TextMapper,'');

      // Exercise
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
      VerifyTextEntryApplied(BankAccReconciliationLine."Statement Line No.");
    END;

    LOCAL PROCEDURE VendRerunTextMapper@113(RunFirst@1006 : Boolean);
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      PaymentReconciliationJournal@1003 : TestPage 1290;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount * 2,TextMapper,'');

      IF RunFirst THEN BEGIN
        RunMatch(BankAccReconciliation,TRUE);

        // Partial verify
        VerifyNoMatch(BankAccReconciliationLine."Statement Line No.");
      END;

      // Exercise
      PaymentReconciliationJournal.TRAP;
      OpenPaymentRecJournal(BankAccReconciliation);
      PaymentReconciliationJournal.AddMappingRule.INVOKE;

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
    END;

    [Test]
    [HandlerFunctions(TextMapperModalPageHandler)]
    PROCEDURE TestVendRerunOnlyTextMapper@112();
    BEGIN
      VendRerunTextMapper(FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TextMapperModalPageHandler)]
    PROCEDURE TestVendRunAndRerunTextMapper@111();
    BEGIN
      VendRerunTextMapper(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendTextMapperOverriden@86();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      DocumentNo@1003 : Code[20];
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,TextMapper,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Exercise
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,FALSE);
      VerifyTextEntryConsidered(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendTextMapperToVendor@85();
    VAR
      TextToAccMapping@1004 : Record 1251;
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Vendor@1000 : Record 23;
      Amount@1026 : Decimal;
      TextMapper@1005 : Text[140];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount * 2,TextMapper,'');

      // Exercise
      LibraryERM.CreateAccountMappingVendor(TextToAccMapping,TextMapper,Vendor."No.");

      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      VerifyEntryApplied(BankAccReconciliationLine,TRUE);
      VerifyTextEntryApplied(BankAccReconciliationLine."Statement Line No.");
    END;

    [Test]
    PROCEDURE TestVendorFirstMatchOnDocumentNoInsertsMultipleMatchLine@116();
    VAR
      TempBankStmtMultipleMatchLine@1000 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250;
      TempLedgerEntryMatchingBuffer@1006 : TEMPORARY Record 1248;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1005 : Record 273;
      BankAccReconciliationLine@1004 : Record 274;
      Vendor@1003 : Record 23;
      VendorLedgerEntry@1008 : Record 25;
      Amount@1002 : Decimal;
      DocumentNo@1007 : Code[20];
      UsePaymentDiscounts@1009 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      TempLedgerEntryMatchingBuffer.InsertFromVendorLedgerEntry(VendorLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine,TempBankStatementMatchingBuffer."Account Type"::Vendor);

      // Verify
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,VendorLedgerEntry."Entry No.");
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,VendorLedgerEntry."Remaining Amount");
      Assert.AreEqual(
        VendorLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    PROCEDURE TestVendorSecondMatchOnDocumentNoUpdatesMultipleMatchLine@117();
    VAR
      TempBankStmtMultipleMatchLine@1012 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1011 : TEMPORARY Record 1250;
      TempLedgerEntryMatchingBuffer@1002 : TEMPORARY Record 1248;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      ExpectedNoOfLines@1015 : Integer;
      ExpectedRemainingAmount@1016 : Decimal;
      UsePaymentDiscounts@1007 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      // Execute
      TempLedgerEntryMatchingBuffer.InsertFromVendorLedgerEntry(VendorLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine,TempBankStatementMatchingBuffer."Account Type"::Vendor);

      TempLedgerEntryMatchingBuffer.InsertFromVendorLedgerEntry(VendorLedgerEntry2,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine,TempBankStatementMatchingBuffer."Account Type"::Vendor);

      // Verify
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,VendorLedgerEntry2."Entry No.");

      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      ExpectedNoOfLines := 2;
      ExpectedRemainingAmount := VendorLedgerEntry."Remaining Amount" + VendorLedgerEntry2."Remaining Amount";
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,ExpectedNoOfLines,ExpectedRemainingAmount);

      Assert.AreEqual(
        VendorLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
      TempBankStmtMultipleMatchLine.NEXT;
      Assert.AreEqual(
        VendorLedgerEntry2."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    PROCEDURE TestVendorMultipleMatchRuleIsNotCreatedForDifferentVendors@119();
    VAR
      TempBankStmtMultipleMatchLine@1012 : TEMPORARY Record 1249;
      TempBankStatementMatchingBuffer@1011 : TEMPORARY Record 1250;
      TempLedgerEntryMatchingBuffer@1002 : TEMPORARY Record 1248;
      OneToManyTempBankStatementMatchingBuffer@1010 : TEMPORARY Record 1250;
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      Vendor2@1017 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      UsePaymentDiscounts@1007 : Boolean;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateVendor(Vendor2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor2."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor2,DocumentNo2);

      // Execute
      TempLedgerEntryMatchingBuffer.InsertFromVendorLedgerEntry(VendorLedgerEntry,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine,TempBankStatementMatchingBuffer."Account Type"::Vendor);

      TempLedgerEntryMatchingBuffer.InsertFromVendorLedgerEntry(VendorLedgerEntry2,TRUE,UsePaymentDiscounts);
      CreateOneToManyBankStatementMatchingBufferLine(
        TempBankStatementMatchingBuffer,TempBankStmtMultipleMatchLine,TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine,TempBankStatementMatchingBuffer."Account Type"::Vendor);

      // Verify First Entry
      GetOneToOneBankStatementMatchingBuffer(TempBankStatementMatchingBuffer,VendorLedgerEntry."Entry No.");
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,VendorLedgerEntry."Entry No.");
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,VendorLedgerEntry."Remaining Amount");
      Assert.AreEqual(
        VendorLedgerEntry."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');

      // Verify Second Entry
      GetOneToOneBankStatementMatchingBuffer(TempBankStatementMatchingBuffer,VendorLedgerEntry2."Entry No.");
      GetOneToManyBankStatementMatchingBuffer(OneToManyTempBankStatementMatchingBuffer,TempBankStatementMatchingBuffer);
      VerifyOneToOneBankStatementMatchingBufferLine(TempBankStatementMatchingBuffer,VendorLedgerEntry2."Entry No.");
      VerifyOneToManyTempBankStatementMatchingBufferLine(
        TempBankStmtMultipleMatchLine,OneToManyTempBankStatementMatchingBuffer,1,VendorLedgerEntry2."Remaining Amount");
      TempBankStmtMultipleMatchLine.NEXT;
      Assert.AreEqual(
        VendorLedgerEntry2."Entry No.",TempBankStmtMultipleMatchLine."Entry No.",
        'Entry no. was not set correctly on TempBankStmtMultipleMatchLine');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchAllEntriesFullyApplied@123();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      AppliedAmount@1009 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      Quality@1012 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := -Amount - Amount2;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      Difference := 0;
      ExpectedNoOfEntries := 2;

      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount2,VendorLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchUserOverPaid@136();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      AppliedAmount@1009 : Decimal;
      StatementAmount@1012 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      Quality@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := -Amount - Amount2;
      StatementAmount := 2 * AppliedAmount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,StatementAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := StatementAmount - AppliedAmount;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount2,VendorLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchAllEntriesAppliedOneUnderPaid@145();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      AppliedAmount@1009 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      Quality@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := -Amount - Amount2 + ROUND(Amount2 / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality,-Amount2 + ROUND(Amount2 / 2,LibraryERM.GetAmountRoundingPrecision),
        VendorLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchGetOverridenByHigherConfidenceOneToOneMatch@153();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      AppliedAmount@1009 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      Quality@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := -Amount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');

      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchAllEntriesAppliedOneNotPaidOneUnderPaid@162();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      AppliedAmount@1009 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      Quality@1019 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := ROUND(-Amount / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality,AppliedAmount,VendorLedgerEntry."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchWhenCannotApplyEntriesOldestGetAppliedFirst@169();
    VAR
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      VendorLedgerEntry3@1017 : Record 25;
      BankPmtApplRule@1002 : Record 1252;
      AppliedPaymentEntry@1008 : Record 1294;
      Amount@1001 : Decimal;
      Amount2@1018 : Decimal;
      Amount3@1023 : Decimal;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1013 : Code[20];
      DocumentNo3@1024 : Code[20];
      AppliedAmount@1009 : Decimal;
      Difference@1010 : Decimal;
      ExpectedNoOfEntries@1011 : Integer;
      DueDate@1019 : Date;
      DueDate2@1021 : Date;
      DueDate3@1022 : Date;
      Quality@1025 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      Amount3 := LibraryRandom.RandDecInRange(1,1000,2);

      DueDate := WORKDATE;
      DueDate2 := CALCDATE('<-3D>',DueDate);
      DueDate3 := CALCDATE('<1D>',DueDate2);

      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine2(Vendor."No.",GenerateExtDocNo,Amount,DueDate);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine2(Vendor."No.",GenerateExtDocNo,Amount2,DueDate2);
      DocumentNo3 := CreateAndPostPurchaseInvoiceWithOneLine2(Vendor."No.",GenerateExtDocNo,Amount3,DueDate3);

      AppliedAmount := -Amount2 - ROUND(Amount3 / 2,LibraryERM.GetAmountRoundingPrecision);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine,AppliedAmount,DocumentNo + ' ' + DocumentNo2 + ' ' + DocumentNo3,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);
      GetVendorLedgerEntry(VendorLedgerEntry3,Vendor,DocumentNo3);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule),Difference,AppliedAmount,
        BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount2,VendorLedgerEntry2."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,AppliedAmount + Amount2,VendorLedgerEntry3."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchTextMapperOverridesMediumConfidenceRule@121();
    VAR
      TextToAccMapping@1007 : Record 1251;
      BankAccReconciliation@1006 : Record 273;
      BankAccReconciliationLine@1005 : Record 274;
      Vendor@1004 : Record 23;
      AppliedPaymentEntry@1019 : Record 1294;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
      TextMapper@1017 : Code[20];
      Difference@1021 : Decimal;
      ExpectedNoOfEntries@1020 : Integer;
      Quality@1024 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,TextMapper,DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'','','','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetTextMapperScore;

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-Amount,BankAccReconciliationLine."Account Type"::"G/L Account",
        TextToAccMapping."Credit Acc. No.",ExpectedNoOfEntries);
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchTextMapperDoesntOveriddeHighConfidenceRule@171();
    VAR
      TextToAccMapping@1019 : Record 1251;
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      Vendor@1016 : Record 23;
      VendorLedgerEntry@1015 : Record 25;
      VendorLedgerEntry2@1014 : Record 25;
      BankPmtApplRule@1013 : Record 1252;
      AppliedPaymentEntry@1011 : Record 1294;
      Amount@1010 : Decimal;
      DocumentNo@1009 : Code[20];
      DocumentNo2@1008 : Code[20];
      TextMapper@1005 : Code[20];
      Difference@1002 : Decimal;
      ExpectedNoOfEntries@1001 : Integer;
      Quality@1000 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      TextMapper := COPYSTR(GenerateRandomSmallLetters(20),1,20);
      LibraryERM.CreateAccountMappingGLAccount(TextToAccMapping,TextMapper,LibraryERM.CreateGLAccountNo,'');

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine,-2 * Amount,TextMapper,DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry2."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchOneHitMultipleMatchesAreRemoved@173();
    VAR
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      Vendor@1016 : Record 23;
      Amount@1010 : Decimal;
      DocumentNo@1009 : Code[20];
      DocumentNo2@1008 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);
      TempBankStatementMatchingBuffer.RESET;
      Assert.AreEqual(
        3,TempBankStatementMatchingBuffer.COUNT,'There should be two single mach entries and one multiple match entry present');

      Assert.AreEqual(
        3,TempBankStatementMatchingBuffer.COUNT,'There should be two single mach entries and one multiple match entry present');
      TempBankStatementMatchingBuffer.SETRANGE("One to Many Match",TRUE);
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one multiple match entry present');

      TempBankStatementMatchingBuffer.SETRANGE("No. of Entries",1);
      Assert.IsTrue(TempBankStatementMatchingBuffer.ISEMPTY,'All temporary multiple match entries must be removed');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchSingleMatchLinesAreIncludedInAmountInclToleranceMatch@174();
    VAR
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      BankAccReconciliationLine2@1024 : Record 274;
      Vendor@1016 : Record 23;
      BankPmtApplRule@1013 : Record 1252;
      BankPmtApplRule2@1025 : Record 1252;
      Amount@1010 : Decimal;
      DocumentNo@1009 : Code[20];
      DocumentNo2@1008 : Code[20];
      DocumentNo3@1022 : Code[20];
      Difference@1002 : Decimal;
      ExpectedNoOfEntries@1001 : Integer;
      Quality@1000 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,2 * Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,-2 * Amount,'',DocumentNo3);
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Vendor.Name,'','');

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      SetRule(BankPmtApplRule2,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      ExpectedNoOfEntries := 1;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule2);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchOneToManyMatchesAreIncludedInAmountInclToleranceMatch@124();
    VAR
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      BankAccReconciliationLine2@1024 : Record 274;
      Vendor@1016 : Record 23;
      BankPmtApplRule@1013 : Record 1252;
      Amount@1010 : Decimal;
      DocumentNo@1009 : Code[20];
      DocumentNo2@1008 : Code[20];
      DocumentNo3@1022 : Code[20];
      DocumentNo4@1023 : Code[20];
      Difference@1002 : Decimal;
      ExpectedNoOfEntries@1001 : Integer;
      Quality@1000 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo4 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine2,-2 * Amount,'',DocumentNo3 + ' ' + DocumentNo4);
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Vendor.Name,'','');

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchTwoOneToManyLines@128();
    VAR
      BankAccReconciliation@1022 : Record 273;
      BankAccReconciliationLine@1021 : Record 274;
      BankAccReconciliationLine2@1020 : Record 274;
      Vendor@1019 : Record 23;
      VendorLedgerEntry@1018 : Record 25;
      VendorLedgerEntry2@1017 : Record 25;
      VendorLedgerEntry3@1026 : Record 25;
      VendorLedgerEntry4@1027 : Record 25;
      BankPmtApplRule@1016 : Record 1252;
      BankPmtApplRule2@1015 : Record 1252;
      AppliedPaymentEntry@1013 : Record 1294;
      Amount@1012 : Decimal;
      DocumentNo@1011 : Code[20];
      DocumentNo2@1010 : Code[20];
      DocumentNo3@1009 : Code[20];
      DocumentNo4@1008 : Code[20];
      Difference@1002 : Decimal;
      ExpectedNoOfEntries@1001 : Integer;
      Quality@1000 : Integer;
      Quality2@1028 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);

      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);
      DocumentNo3 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,2 * Amount);
      DocumentNo4 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-2 * Amount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      CreateBankReconciliationLine(
        BankAccReconciliation,BankAccReconciliationLine2,-3 * Amount,DocumentNo + ' ' + DocumentNo3 + ' ' + DocumentNo4,'');
      UpdateBankReconciliationLine(BankAccReconciliationLine2,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);
      GetVendorLedgerEntry(VendorLedgerEntry3,Vendor,DocumentNo3);
      GetVendorLedgerEntry(VendorLedgerEntry4,Vendor,DocumentNo4);

      RunMatch(BankAccReconciliation,TRUE);
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      SetRule(BankPmtApplRule2,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      // Verify
      Difference := 0;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      Quality2 := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule2);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,-2 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);
      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine2,Quality2,Difference,-3 * Amount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries Line 1
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry2."Entry No.");

      // Verify Applied Payment Entries Line 2
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine2);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality2,VendorLedgerEntry3."Remaining Amount",VendorLedgerEntry3."Entry No.");

      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(
        AppliedPaymentEntry,Quality2,VendorLedgerEntry4."Remaining Amount",VendorLedgerEntry4."Entry No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorMultipleMatchBuildFromNoMatchEntries@27();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1024 : Record 274;
      Vendor@1022 : Record 23;
      VendorLedgerEntry@1021 : Record 25;
      VendorLedgerEntry2@1020 : Record 25;
      BankPmtApplRule@1017 : Record 1252;
      AppliedPaymentEntry@1014 : Record 1294;
      Amount@1013 : Decimal;
      Amount2@1029 : Decimal;
      DocumentNo@1012 : Code[20];
      DocumentNo2@1011 : Code[20];
      AppliedAmount@1005 : Decimal;
      StatementAmount@1004 : Decimal;
      Difference@1003 : Decimal;
      ExpectedNoOfEntries@1002 : Integer;
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      // Remove all rules except multiple match rules, so they will be scored with 0
      BankPmtApplRule.SETFILTER(
        "Doc. No./Ext. Doc. No. Matched",'<>%1',BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple");
      BankPmtApplRule.DELETEALL;
      BankPmtApplRule.RESET;

      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      Amount2 := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo2 := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount2);

      AppliedAmount := -Amount - Amount2;
      StatementAmount := 2 * AppliedAmount;

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,StatementAmount,'',DocumentNo + ' ' + DocumentNo2);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);
      GetVendorLedgerEntry(VendorLedgerEntry2,Vendor,DocumentNo2);

      RunMatch(BankAccReconciliation,TRUE);

      // Verify Bank Account ReconciliationLine
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      Difference := StatementAmount - AppliedAmount;
      ExpectedNoOfEntries := 2;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      VerifyMultipleApplicationsBankAccReconciliationLine(
        BankAccReconciliationLine,Quality,Difference,AppliedAmount,BankAccReconciliationLine."Account Type"::Vendor,Vendor."No.",
        ExpectedNoOfEntries);

      // Verify Applied Payment Entries
      GetAppliedPaymentEntries(AppliedPaymentEntry,BankAccReconciliationLine);
      Assert.AreEqual(AppliedPaymentEntry.COUNT,ExpectedNoOfEntries,'Wrong number of Applied Payment Entries Found');
      AppliedPaymentEntry.FINDFIRST;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount,VendorLedgerEntry."Entry No.");
      AppliedPaymentEntry.NEXT;
      VerifyMultipleApplicationsAppliedEntries(AppliedPaymentEntry,Quality,-Amount2,VendorLedgerEntry2."Entry No.");
    END;

    [Test]
    PROCEDURE TestVendorRunningWithoutApplicationIncludesPositiveEntries@201();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Vendor@1016 : Record 23;
      VendorLedgerEntry@1015 : Record 25;
      BankPmtApplRule@1011 : Record 1252;
      TempBankPmtApplRule@1021 : TEMPORARY Record 1252;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,FALSE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
      TempBankStatementMatchingBuffer.FINDFIRST;
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      TempBankPmtApplRule.LoadRules;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      Assert.AreEqual(Quality,TempBankStatementMatchingBuffer.Quality,'Score should be assigned to the line');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorRunningWithApplicationExcludesPositiveEntries@200();
    VAR
      BankAccReconciliation@1019 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      Vendor@1016 : Record 23;
      VendorLedgerEntry@1015 : Record 25;
      Amount@1008 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify positive entry is not present
      Assert.AreEqual(0,TempBankStatementMatchingBuffer.COUNT,'There should be no entries present');
    END;

    [Test]
    PROCEDURE TestVendorRunningWithoutApplicationIncludesEntriesAfterStatementDate@199();
    VAR
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      Vendor@1015 : Record 23;
      VendorLedgerEntry@1014 : Record 25;
      BankPmtApplRule@1013 : Record 1252;
      TempBankPmtApplRule@1012 : TEMPORARY Record 1252;
      Amount@1009 : Decimal;
      DocumentNo@1007 : Code[20];
      Quality@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');
      BankAccReconciliationLine.VALIDATE("Transaction Date",CALCDATE('<-1M>',VendorLedgerEntry."Posting Date"));
      BankAccReconciliationLine.MODIFY(TRUE);

      // Execute
      RunMatch(BankAccReconciliation,FALSE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(1,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
      TempBankStatementMatchingBuffer.FINDFIRST;
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      TempBankPmtApplRule.LoadRules;
      Quality := TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);

      Assert.AreEqual(Quality,TempBankStatementMatchingBuffer.Quality,'Score should be assigned to the line');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestVendorRunningWithoutApplicationDoesNotIncludeEntriesAfterStatementDate@198();
    VAR
      BankAccReconciliation@1018 : Record 273;
      BankAccReconciliationLine@1017 : Record 274;
      Vendor@1015 : Record 23;
      VendorLedgerEntry@1014 : Record 25;
      Amount@1009 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      Initialize;

      // Setup
      CreateVendor(Vendor);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostPurchaseInvoiceWithOneLine(Vendor."No.",GenerateExtDocNo,Amount);

      GetVendorLedgerEntry(VendorLedgerEntry,Vendor,DocumentNo);

      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,-Amount,'',DocumentNo);
      UpdateBankReconciliationLine(BankAccReconciliationLine,'',Vendor.Name,'','');
      BankAccReconciliationLine.VALIDATE("Transaction Date",CALCDATE('<-1M>',VendorLedgerEntry."Posting Date"));
      BankAccReconciliationLine.MODIFY(TRUE);

      // Execute
      RunMatch(BankAccReconciliation,TRUE);

      // Verify positive entry is present and was scored
      Assert.AreEqual(0,TempBankStatementMatchingBuffer.COUNT,'There should be one entry present');
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AmountInclToleranceIsNotConsideredModalPageHandler)]
    PROCEDURE UI_AmountInclToleranceMatchedNotConsideredOnPaymentToEntryMatchPage@54();
    VAR
      BankAccReconciliation@1025 : Record 273;
      BankAccReconciliationLine@1001 : Record 274;
      Customer@1000 : Record 18;
      BankPmtApplRule@1002 : Record 1252;
      Amount@1026 : Decimal;
      DocumentNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 380975] "Amount Incl. Tolerance" is "Not Considered" on "Payment-to-Entry Match" page when no rule considered for "Amount Incl. Tolerance"

      Initialize;

      // [GIVEN] Sales Invoice with "Document No." = "X" and Amount = 100
      CreateCustomer(Customer);
      Amount := LibraryRandom.RandDecInRange(1,1000,2);
      DocumentNo := CreateAndPostSalesInvoiceWithOneLine(Customer."No.",'',Amount);

      // [GIVEN] Bank Account Reconciliation Line with "Document No." = "X" and "Statement Amount" = 50
      CreateBankReconciliationAmountTolerance(BankAccReconciliation,0);
      CreateBankReconciliationLine(BankAccReconciliation,BankAccReconciliationLine,Amount / 2,DocumentNo,'');

      // [WHEN] Run automatching and open "Payment Application" page
      RunMatch(BankAccReconciliation,TRUE);

      // [THEN] "Amount Incl. Tolerance" is "Not Considered" on "Payment-to-Entry Match" page (subpage located on "Payment Application" page)
      // Verified by AmountInclToleranceIsNotConsideredModalPageHandler
      SetRule(
        BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      VerifyMatchDetailsData(
        BankAccReconciliation,BankPmtApplRule,BankAccReconciliationLine."Account Type"::Customer,Amount / 2,0,0,1);
    END;

    [Test]
    PROCEDURE ClearAppliesToIDFromCustLedgEntryAfterApplicationRemoval@52();
    VAR
      CustLedgerEntry@1001 : Record 21;
      AppliedPaymentEntry@1000 : Record 1294;
      StatementNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381519] After Applied Payment Entry is deleted, "Applies-To ID" should be cleared in Customer Ledger Entries

      Initialize;

      // [GIVEN] Customer Ledger Entry "CCC"
      CustLedgerEntry.INIT;
      CustLedgerEntry."Entry No." := LibraryUtility.GetNewRecNo(CustLedgerEntry,CustLedgerEntry.FIELDNO("Entry No."));
      CustLedgerEntry.Open := TRUE;
      CustLedgerEntry.INSERT;

      // [GIVEN] Applied Payment Entry related to "CCC"
      MockAppliedPaymentEntry(AppliedPaymentEntry,CustLedgerEntry."Entry No.",AppliedPaymentEntry."Account Type"::Customer);
      MockBankAccReconciliation(AppliedPaymentEntry."Statement No.");
      StatementNo := AppliedPaymentEntry."Statement No.";
      CustLedgerEntry."Applies-to ID" := AppliedPaymentEntry."Statement No.";
      CustLedgerEntry.MODIFY;

      // [WHEN] Applied Payment Entry deleted
      AppliedPaymentEntry.DELETE(TRUE);

      // [THEN] "Applies-to ID" in Customer Ledger Entry is blank
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Applies-to ID",'');

      // Tear-down
      RemoveBankAccReconciliation(StatementNo);
    END;

    [Test]
    PROCEDURE ClearAppliesToIDFromVendLedgEntryAfterApplicationRemoval@209();
    VAR
      VendorLedgerEntry@1001 : Record 25;
      AppliedPaymentEntry@1000 : Record 1294;
      StatementNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381519] After Applied Payment Entry is deleted, "Applies-To ID" should be cleared in Vendor Ledger Entries

      Initialize;

      // [GIVEN] Vendor Ledger Entry "VVV"
      VendorLedgerEntry.INIT;
      VendorLedgerEntry."Entry No." := LibraryUtility.GetNewRecNo(VendorLedgerEntry,VendorLedgerEntry.FIELDNO("Entry No."));
      VendorLedgerEntry.Open := TRUE;
      VendorLedgerEntry.INSERT;

      // [GIVEN] Applied Payment Entry related to "VVV"
      MockAppliedPaymentEntry(AppliedPaymentEntry,VendorLedgerEntry."Entry No.",AppliedPaymentEntry."Account Type"::Vendor);
      MockBankAccReconciliation(AppliedPaymentEntry."Statement No.");
      StatementNo := AppliedPaymentEntry."Statement No.";
      VendorLedgerEntry."Applies-to ID" := AppliedPaymentEntry."Statement No.";
      VendorLedgerEntry.MODIFY;

      // [WHEN] Applied Payment Entry deleted
      AppliedPaymentEntry.DELETE(TRUE);

      // [THEN] "Applies-to ID" in Vendor Ledger Entry is blank
      VendorLedgerEntry.FIND;
      VendorLedgerEntry.TESTFIELD("Applies-to ID",'');

      // Tear-down
      RemoveBankAccReconciliation(StatementNo);
    END;

    LOCAL PROCEDURE Initialize@100();
    VAR
      BankPmtApplRule@1001 : Record 1252;
    BEGIN
      CloseExistingEntries;
      ClearGlobals;
      LibraryVariableStorage.Clear;
      BankPmtApplRule.DELETEALL;
      BankPmtApplRule.InsertDefaultMatchingRules;

      IF isInitialized THEN
        EXIT;

      DotNetRandom := DotNetRandom.Random(1);
      TempBankPmtApplRule.LoadRules;
      LibraryERMCountryData.UpdateLocalData;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERM.FindZeroVATPostingSetup(ZeroVATPostingSetup,ZeroVATPostingSetup."VAT Calculation Type"::"Normal VAT");

      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE CloseExistingEntries@103();
    VAR
      CustLedgerEntry@1000 : Record 21;
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.MODIFYALL(Open,FALSE);

      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.MODIFYALL(Open,FALSE);
    END;

    LOCAL PROCEDURE ClearGlobals@9();
    BEGIN
      CLEAR(TempBankStatementMatchingBuffer);
      TempBankStatementMatchingBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE MockAppliedPaymentEntry@196(VAR AppliedPaymentEntry@1002 : Record 1294;EntryNo@1000 : Integer;AccountType@1001 : Option);
    BEGIN
      AppliedPaymentEntry.INIT;
      AppliedPaymentEntry."Statement No." :=
        FORMAT(LibraryUtility.GetNewRecNo(AppliedPaymentEntry,AppliedPaymentEntry.FIELDNO("Statement No.")));
      AppliedPaymentEntry."Applies-to Entry No." := EntryNo;
      AppliedPaymentEntry."Account Type" := AccountType;
      AppliedPaymentEntry.INSERT;
    END;

    LOCAL PROCEDURE MockBankAccReconciliation@205(StatementNo@1001 : Code[20]);
    VAR
      BankAccount@1003 : Record 270;
      BankAccReconciliation@1002 : Record 273;
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement No." := StatementNo;
      BankAccount.SETRANGE("No.",'');
      IF NOT BankAccount.FINDFIRST THEN BEGIN
        BankAccount.INIT;
        BankAccount.INSERT;
      END;
      BankAccReconciliation."Bank Account No." := BankAccount."No.";
      BankAccReconciliation.INSERT;
      BankAccReconciliationLine.INIT;
      BankAccReconciliationLine."Statement No." := StatementNo;
      BankAccReconciliationLine.INSERT;
    END;

    LOCAL PROCEDURE CreateCustomer@5(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",ZeroVATPostingSetup."VAT Bus. Posting Group");
      Customer.VALIDATE(Name,GenerateRandomSmallLetters(50));
      Customer.VALIDATE(Address,GenerateRandomSmallLetters(50));
      Customer.VALIDATE("Address 2",GenerateRandomSmallLetters(50));
      Customer.VALIDATE("Country/Region Code",'');
      Customer.VALIDATE(City,GenerateRandomSmallLetters(30));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@18(VAR Vendor@1000 : Record 23);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",ZeroVATPostingSetup."VAT Bus. Posting Group");
      Vendor.VALIDATE(Name,GenerateRandomSmallLetters(50));
      Vendor.VALIDATE(Address,GenerateRandomSmallLetters(50));
      Vendor.VALIDATE("Address 2",GenerateRandomSmallLetters(50));
      Vendor.VALIDATE("Country/Region Code",'');
      Vendor.VALIDATE(City,GenerateRandomSmallLetters(30));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@13(VAR Item@1000 : Record 27;Amount@1001 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",ZeroVATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Unit Price",Amount);
      Item.VALIDATE("Last Direct Cost",Amount);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerBankAccount@30(VAR CustomerBankAccount@1000 : Record 287;CustomerNo@1001 : Code[20];BankAccountNo@1002 : Code[20]);
    BEGIN
      LibrarySales.CreateCustomerBankAccount(CustomerBankAccount,CustomerNo);
      CustomerBankAccount.IBAN := '';
      CustomerBankAccount."Bank Account No." := BankAccountNo;
      CustomerBankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorBankAccount@45(VAR VendorBankAccount@1000 : Record 288;VendorNo@1001 : Code[20];BankAccountNo@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreateVendorBankAccount(VendorBankAccount,VendorNo);
      VendorBankAccount.IBAN := '';
      VendorBankAccount."Bank Account No." := BankAccountNo;
      VendorBankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceWithOneLine@4(CustomerNo@1001 : Code[20];ExtDocNo@1005 : Code[20];Amount@1002 : Decimal) : Code[20];
    BEGIN
      EXIT(CreateAndPostSalesInvoiceWithOneLine2(CustomerNo,ExtDocNo,Amount,0D));
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceWithOneLine2@175(CustomerNo@1001 : Code[20];ExtDocNo@1005 : Code[20];Amount@1002 : Decimal;DueDate@1006 : Date) : Code[20];
    VAR
      Item@1004 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      CreateItem(Item,Amount);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("External Document No.",ExtDocNo);

      IF DueDate <> 0D THEN
        SalesHeader.VALIDATE("Due Date",DueDate);

      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);

      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoiceWithOneLine@20(VendorNo@1001 : Code[20];ExtDocNo@1005 : Code[20];Amount@1002 : Decimal) : Code[20];
    BEGIN
      EXIT(CreateAndPostPurchaseInvoiceWithOneLine2(VendorNo,ExtDocNo,Amount,0D));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoiceWithOneLine2@127(VendorNo@1001 : Code[20];ExtDocNo@1005 : Code[20];Amount@1002 : Decimal;DueDate@1006 : Date) : Code[20];
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      CreateItem(Item,Amount);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",ExtDocNo);
      IF DueDate <> 0D THEN
        PurchaseHeader.VALIDATE("Due Date",DueDate);

      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",1);

      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateBankReconciliationAmountTolerance@110(VAR BankAccReconciliation@1001 : Record 273;ToleranceValue@1003 : Decimal);
    VAR
      BankAccount@1002 : Record 270;
    BEGIN
      CreateBankReconciliation(BankAccReconciliation,BankAccount."Match Tolerance Type"::Amount,ToleranceValue);
    END;

    LOCAL PROCEDURE CreateBankReconciliationPercentageTolerance@61(VAR BankAccReconciliation@1001 : Record 273;ToleranceValue@1003 : Decimal);
    VAR
      BankAccount@1002 : Record 270;
    BEGIN
      CreateBankReconciliation(BankAccReconciliation,BankAccount."Match Tolerance Type"::Percentage,ToleranceValue);
    END;

    LOCAL PROCEDURE CreateBankReconciliation@57(VAR BankAccReconciliation@1001 : Record 273;ToleranceType@1000 : Option;ToleranceValue@1003 : Decimal);
    VAR
      BankAccount@1002 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Match Tolerance Type",ToleranceType);
      BankAccount.VALIDATE("Match Tolerance Value",ToleranceValue);
      BankAccount.MODIFY(TRUE);
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccount."No.",
        BankAccReconciliation."Statement Type"::"Payment Application");
    END;

    LOCAL PROCEDURE CreateBankReconciliationLine@120(VAR BankAccReconciliation@1000 : Record 273;VAR BankAccReconciliationLine@1002 : Record 274;Amount@1010 : Decimal;TransactionText@1020 : Text[140];AdditionalTransactionInfo@1001 : Text[100]);
    BEGIN
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      BankAccReconciliationLine.VALIDATE("Transaction Text",TransactionText);
      BankAccReconciliationLine.VALIDATE("Additional Transaction Info",AdditionalTransactionInfo);
      BankAccReconciliationLine.VALIDATE("Transaction Date",WORKDATE);
      BankAccReconciliationLine.VALIDATE("Statement Amount",Amount);
      BankAccReconciliationLine.VALIDATE(Type,BankAccReconciliationLine.Type::"Bank Account Ledger Entry");
      BankAccReconciliationLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateOneToManyBankStatementMatchingBufferLine@142(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;VAR TempBankStmtMultipleMatchLine@1004 : TEMPORARY Record 1249;TempLedgerEntryMatchingBuffer@1005 : TEMPORARY Record 1248;BankAccReconciliationLine@1001 : Record 274;AccountType@1002 : Option);
    VAR
      BankPmtApplRule@1003 : Record 1252;
    BEGIN
      TempBankStatementMatchingBuffer.AddMatchCandidate(
        BankAccReconciliationLine."Statement Line No.",TempLedgerEntryMatchingBuffer."Entry No.",
        LibraryRandom.RandIntInRange(1,BankPmtApplRule.GetHighestPossibleScore - 1),AccountType,
        TempLedgerEntryMatchingBuffer."Account No.");

      TempBankStatementMatchingBuffer.InsertOrUpdateOneToManyRule(
        TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine."Statement Line No.",
        BankPmtApplRule."Related Party Matched"::Fully,
        AccountType,TempLedgerEntryMatchingBuffer.GetApplicableRemainingAmount(BankAccReconciliationLine,FALSE));

      TempBankStmtMultipleMatchLine.InsertLine(
        TempLedgerEntryMatchingBuffer,
        BankAccReconciliationLine."Statement Line No.",
        AccountType);
    END;

    LOCAL PROCEDURE RemoveBankAccReconciliation@166(StatementNo@1000 : Code[20]);
    VAR
      BankAccReconciliation@1001 : Record 273;
    BEGIN
      BankAccReconciliation.SETRANGE("Statement Type",BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.SETRANGE("Statement No.",StatementNo);
      BankAccReconciliation.FINDFIRST;
      BankAccReconciliation.DELETE(TRUE);
    END;

    LOCAL PROCEDURE UpdateBankReconciliationLine@33(VAR BankAccReconciliationLine@1000 : Record 274;BankAccountNo@1003 : Text[50];Name@1004 : Text[50];Address@1002 : Text[100];City@1001 : Text[50]);
    BEGIN
      BankAccReconciliationLine.VALIDATE("Related-Party Bank Acc. No.",BankAccountNo);
      BankAccReconciliationLine.VALIDATE("Related-Party Name",Name);
      BankAccReconciliationLine.VALIDATE("Related-Party Address",Address);
      BankAccReconciliationLine.VALIDATE("Related-Party City",City);
      BankAccReconciliationLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GenerateExtDocNo@24() : Code[20];
    BEGIN
      EXIT(GenerateRandomSmallLetters(20));
    END;

    LOCAL PROCEDURE GenerateRandomSmallLetters@58(Length@1000 : Integer) String : Text;
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO Length DO
        String[i] := DotNetRandom.Next(97,122); // ASCII: a (97) to z (122)

      EXIT(String);
    END;

    LOCAL PROCEDURE GenerateRandomTextWithSpecialChars@83() : Text[50];
    BEGIN
      EXIT(
        GenerateRandomSmallLetters(2) + '''' +
        UPPERCASE(GenerateRandomSmallLetters(2)) + '&' +
        GenerateRandomSmallLetters(2) + '(' +
        GenerateRandomSmallLetters(2) + ')' +
        GenerateRandomSmallLetters(2) + '.' +
        UPPERCASE(GenerateRandomSmallLetters(2)) + '{' +
        GenerateRandomSmallLetters(2) + '}' +
        GenerateRandomSmallLetters(2) + '"' +
        GenerateRandomSmallLetters(2) + ';' +
        GenerateRandomSmallLetters(2) + ':' +
        GenerateRandomSmallLetters(2) + '-' +
        GenerateRandomSmallLetters(2) + '+');
    END;

    LOCAL PROCEDURE OpenPaymentRecJournal@106(BankAccReconciliation@1000 : Record 273);
    VAR
      PmtReconciliationJournals@1002 : TestPage 1294;
    BEGIN
      PmtReconciliationJournals.OPENVIEW;
      PmtReconciliationJournals.GOTORECORD(BankAccReconciliation);
      PmtReconciliationJournals.EditJournal.INVOKE;
    END;

    LOCAL PROCEDURE GetVendorLedgerEntry@122(VAR VendorLedgerEntry@1000 : Record 25;Vendor@1001 : Record 23;DocumentNo@1002 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
    END;

    LOCAL PROCEDURE GetCustLedgerEntry@165(VAR CustLedgerEntry@1000 : Record 21;Customer@1001 : Record 18;DocumentNo@1002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.SETRANGE("Customer No.",Customer."No.");
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
    END;

    LOCAL PROCEDURE GetAppliedPaymentEntries@176(VAR AppliedPaymentEntry@1001 : Record 1294;BankAccReconciliationLine@1000 : Record 274);
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type",BankAccReconciliationLine."Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.",BankAccReconciliationLine."Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.",BankAccReconciliationLine."Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.",BankAccReconciliationLine."Statement Line No.");
    END;

    LOCAL PROCEDURE GetOneToOneBankStatementMatchingBuffer@139(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;EntryNo@1001 : Integer);
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETRANGE("Account Type",TempBankStatementMatchingBuffer."Account Type");
      TempBankStatementMatchingBuffer.SETRANGE("Entry No.",EntryNo);
      TempBankStatementMatchingBuffer.FINDFIRST;
    END;

    LOCAL PROCEDURE GetOneToManyBankStatementMatchingBuffer@129(VAR OneToManyTempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;VAR TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250);
    BEGIN
      OneToManyTempBankStatementMatchingBuffer.COPY(TempBankStatementMatchingBuffer,TRUE);
      OneToManyTempBankStatementMatchingBuffer.SETRANGE("Line No.",TempBankStatementMatchingBuffer."Line No.");
      OneToManyTempBankStatementMatchingBuffer.SETRANGE("Entry No.",-1);
      OneToManyTempBankStatementMatchingBuffer.SETRANGE("Account Type",TempBankStatementMatchingBuffer."Account Type");
      OneToManyTempBankStatementMatchingBuffer.SETRANGE("Account No.",TempBankStatementMatchingBuffer."Account No.");
      OneToManyTempBankStatementMatchingBuffer.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyReconciliation@7(ExpectedBankPmtApplRule@1000 : Record 1252;StatementLineNo@1001 : Integer);
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETRANGE("Line No.",StatementLineNo);
      TempBankStatementMatchingBuffer.FINDFIRST;

      Assert.AreEqual(TempBankPmtApplRule.GetBestMatchScore(ExpectedBankPmtApplRule),
        TempBankStatementMatchingBuffer.Quality,'Matching is wrong for statement line ' + FORMAT(StatementLineNo))
    END;

    LOCAL PROCEDURE VerifyTextEntryApplied@92(StatementLineNo@1001 : Integer);
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETCURRENTKEY(Quality);
      TempBankStatementMatchingBuffer.ASCENDING(FALSE);
      TempBankStatementMatchingBuffer.SETRANGE("Line No.",StatementLineNo);
      TempBankStatementMatchingBuffer.FINDFIRST;

      Assert.AreEqual(TempBankPmtApplRule.GetTextMapperScore,
        TempBankStatementMatchingBuffer.Quality,'Matching is wrong for statement line ' + FORMAT(StatementLineNo));
    END;

    LOCAL PROCEDURE VerifyTextEntryConsidered@118(StatementLineNo@1001 : Integer);
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETRANGE("Line No.",StatementLineNo);
      TempBankStatementMatchingBuffer.SETRANGE(Quality,TempBankPmtApplRule.GetTextMapperScore);

      Assert.IsTrue(TempBankStatementMatchingBuffer.FINDFIRST,'Text mapper should have been considered.');
    END;

    LOCAL PROCEDURE VerifyNoMatch@3(LineNo@1001 : Integer);
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      SetRule(BankPmtApplRule,BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETRANGE("Line No.",LineNo);
      Assert.IsFalse(TempBankStatementMatchingBuffer.FINDFIRST,'Temp statement matching buffer should be empty in case of No Match');
    END;

    LOCAL PROCEDURE VerifyEntryApplied@74(BankAccReconciliationLine@1001 : Record 274;TextMapperMatch@1002 : Boolean);
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type",BankAccReconciliationLine."Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.",BankAccReconciliationLine."Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.",BankAccReconciliationLine."Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.",BankAccReconciliationLine."Statement Line No.");

      Assert.IsTrue(AppliedPaymentEntry.FINDFIRST,'Wrong application. Filters: ' + AppliedPaymentEntry.GETFILTERS);

      IF TextMapperMatch THEN BEGIN
        Assert.AreEqual(0,AppliedPaymentEntry."Applies-to Entry No.",'Applies-to Entry No.  should be 0 for Text Mapper ' +
          'match. Filters: ' + AppliedPaymentEntry.GETFILTERS);
        Assert.AreEqual(BankAccReconciliationLine."Statement Amount",AppliedPaymentEntry."Applied Amount",
          'Is a text mapper match so appied amount should be statement amount: ' +
          FORMAT(BankAccReconciliationLine."Statement Amount") + '. Filters: ' + AppliedPaymentEntry.GETFILTERS);
      END;
    END;

    LOCAL PROCEDURE VerifyEntriesNotAppliedForStatement@84(BankAccReconciliation@1001 : Record 273);
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");

      Assert.AreEqual(0,AppliedPaymentEntry.COUNT,'No applications should be made. Filters: ' + AppliedPaymentEntry.GETFILTERS);
    END;

    LOCAL PROCEDURE VerifyMatchDetailsData@88(BankAccReconciliation@1000 : Record 273;BankPmtApplRule@1002 : Record 1252;AccountType@1008 : Option;Amount@1007 : Decimal;Tolerance@1006 : Decimal;ExpectedNumberOfEntriesWithinTolerance@1003 : Integer;ExpectedNumberOfEntriesOutsideTolerance@1001 : Integer);
    VAR
      BankAccount@1004 : Record 270;
      TempBankPmtApplRule@1009 : TEMPORARY Record 1252;
    BEGIN
      TempBankPmtApplRule.LoadRules;
      TempBankPmtApplRule.GetBestMatchScore(BankPmtApplRule);
      BankPmtApplRule."Match Confidence" := TempBankPmtApplRule."Match Confidence";

      VerifyMatchDetailsData2(BankAccReconciliation,BankPmtApplRule,AccountType,
        Amount,Tolerance,BankAccount."Match Tolerance Type"::Amount,ExpectedNumberOfEntriesWithinTolerance,
        ExpectedNumberOfEntriesOutsideTolerance,
        FALSE,-1);
    END;

    LOCAL PROCEDURE VerifyMatchDetailsData2@161(BankAccReconciliation@1000 : Record 273;BankPmtApplRule@1002 : Record 1252;AccountType@1008 : Option;Amount@1007 : Decimal;Tolerance@1006 : Decimal;ToleranceType@1010 : Option;ExpectedNumberOfEntriesWithinTolerance@1003 : Integer;ExpectedNumberOfEntriesOutsideTolerance@1001 : Integer;GoToEntroNo@1004 : Boolean;EntryNo@1009 : Integer);
    VAR
      PaymentReconciliationJournal@1005 : TestPage 1290;
    BEGIN
      PaymentReconciliationJournal.TRAP;
      OpenPaymentRecJournal(BankAccReconciliation);

      LibraryVariableStorage.Enqueue(FORMAT(BankPmtApplRule."Match Confidence"));
      LibraryVariableStorage.Enqueue(BankPmtApplRule."Related Party Matched");
      LibraryVariableStorage.Enqueue(BankPmtApplRule."Doc. No./Ext. Doc. No. Matched");
      LibraryVariableStorage.Enqueue(ExpectedNumberOfEntriesWithinTolerance);
      LibraryVariableStorage.Enqueue(ExpectedNumberOfEntriesOutsideTolerance);
      LibraryVariableStorage.Enqueue(AccountType);
      LibraryVariableStorage.Enqueue(Amount);
      LibraryVariableStorage.Enqueue(Tolerance);
      LibraryVariableStorage.Enqueue(ToleranceType);
      LibraryVariableStorage.Enqueue(GoToEntroNo);

      IF GoToEntroNo THEN
        LibraryVariableStorage.Enqueue(EntryNo);

      PaymentReconciliationJournal.FIRST;
      PaymentReconciliationJournal.ApplyEntries.INVOKE;

      PaymentReconciliationJournal.CLOSE;
    END;

    LOCAL PROCEDURE VerifyNoOfCustomerLedgerEntriesOnMatchDetailsLookup@94(PaymentApplication@1004 : TestPage 1292;Tolerance@1003 : Decimal;ToleranceType@1005 : Option;Amount@1002 : Decimal);
    VAR
      CustomerLedgerEntries@1000 : TestPage 25;
      EntryRemainingAmount@1001 : Decimal;
    BEGIN
      CustomerLedgerEntries.TRAP;
      PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesWithinAmount.DRILLDOWN;
      IF CustomerLedgerEntries.FIRST THEN
        REPEAT
          EVALUATE(EntryRemainingAmount,CustomerLedgerEntries."Remaining Amount".VALUE);
          Assert.IsTrue(IsEntryAmountWithinToleranceRange(EntryRemainingAmount,Amount,Tolerance,ToleranceType),
            'Entry is not within tolerance range');
        UNTIL NOT CustomerLedgerEntries.NEXT;
      CustomerLedgerEntries.CLOSE;

      CustomerLedgerEntries.TRAP;
      PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesOutsideAmount.DRILLDOWN;
      IF CustomerLedgerEntries.FIRST THEN
        REPEAT
          EVALUATE(EntryRemainingAmount,CustomerLedgerEntries."Remaining Amount".VALUE);
          Assert.IsFalse(IsEntryAmountWithinToleranceRange(EntryRemainingAmount,Amount,Tolerance,ToleranceType),
            'Entry is within tolerance range');
        UNTIL NOT CustomerLedgerEntries.NEXT;
      CustomerLedgerEntries.CLOSE;
    END;

    LOCAL PROCEDURE VerifyNoOfVendorLedgerEntriesOnMatchDetailsLookup@95(PaymentApplication@1004 : TestPage 1292;Tolerance@1003 : Decimal;ToleranceType@1002 : Option;Amount@1005 : Decimal);
    VAR
      VendorLedgerEntries@1000 : TestPage 29;
      EntryRemainingAmount@1001 : Decimal;
    BEGIN
      VendorLedgerEntries.TRAP;
      PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesWithinAmount.DRILLDOWN;
      IF VendorLedgerEntries.FIRST THEN
        REPEAT
          EVALUATE(EntryRemainingAmount,VendorLedgerEntries."Remaining Amount".VALUE);
          Assert.IsTrue(IsEntryAmountWithinToleranceRange(EntryRemainingAmount,Amount,Tolerance,ToleranceType),
            'Entry is not within tolerance range');
        UNTIL NOT VendorLedgerEntries.NEXT;

      VendorLedgerEntries.CLOSE;
      VendorLedgerEntries.TRAP;
      PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesOutsideAmount.DRILLDOWN;
      IF VendorLedgerEntries.FIRST THEN
        REPEAT
          EVALUATE(EntryRemainingAmount,VendorLedgerEntries."Remaining Amount".VALUE);
          Assert.IsFalse(IsEntryAmountWithinToleranceRange(EntryRemainingAmount,Amount,Tolerance,ToleranceType),
            'Entry is within tolerance range');
        UNTIL NOT VendorLedgerEntries.NEXT;
      VendorLedgerEntries.CLOSE;
    END;

    LOCAL PROCEDURE IsEntryAmountWithinToleranceRange@53(EntryRemainingAmount@1000 : Decimal;Amount@1008 : Decimal;Tolerance@1001 : Decimal;ToleranceType@1002 : Option) : Boolean;
    VAR
      BankAccount@1003 : Record 270;
      MinAmount@1004 : Decimal;
      MaxAmount@1005 : Decimal;
      TempAmount@1006 : Decimal;
    BEGIN
      IF ToleranceType = BankAccount."Match Tolerance Type"::Percentage THEN BEGIN
        MinAmount := EntryRemainingAmount - ROUND(EntryRemainingAmount * Tolerance / 100);
        MaxAmount := EntryRemainingAmount + ROUND(EntryRemainingAmount * Tolerance / 100);

        IF EntryRemainingAmount < 0 THEN BEGIN
          TempAmount := MinAmount;
          MinAmount := MaxAmount;
          MaxAmount := TempAmount;
        END;
      END ELSE BEGIN
        MinAmount := EntryRemainingAmount - Tolerance;
        MaxAmount := EntryRemainingAmount + Tolerance;
      END;

      EXIT((MinAmount <= Amount) AND (MaxAmount >= Amount));
    END;

    LOCAL PROCEDURE SetRule@12(VAR BankPmtApplRule@1004 : Record 1252;RelatedPartyMatched@1001 : Option;DocNoMatched@1002 : Option;AmountInclToleranceMatched@1003 : Option);
    BEGIN
      CLEAR(BankPmtApplRule);

      BankPmtApplRule."Related Party Matched" := RelatedPartyMatched;
      BankPmtApplRule."Doc. No./Ext. Doc. No. Matched" := DocNoMatched;
      BankPmtApplRule."Amount Incl. Tolerance Matched" := AmountInclToleranceMatched;
    END;

    LOCAL PROCEDURE RunMatch@2(BankAccReconciliation@1002 : Record 273;ApplyEntries@1003 : Boolean);
    VAR
      BankAccReconciliationLine@1001 : Record 274;
      MatchBankPayments@1000 : Codeunit 1255;
    BEGIN
      IF ApplyEntries THEN
        LibraryVariableStorage.Enqueue(LinesAreAppliedTxt);

      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      MatchBankPayments.SetApplyEntries(ApplyEntries);
      MatchBankPayments.Code(BankAccReconciliationLine);

      MatchBankPayments.GetBankStatementMatchingBuffer(TempBankStatementMatchingBuffer);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    VAR
      ExpectedMsg@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMsg);
      Assert.IsTrue(STRPOS(Message,ExpectedMsg) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE TextMapperModalPageHandler@109(VAR TexttoAccountMapping@1000 : TestPage 1251);
    BEGIN
      TexttoAccountMapping."Debit Acc. No.".SETVALUE(LibraryERM.CreateGLAccountNo);
      TexttoAccountMapping."Credit Acc. No.".SETVALUE(LibraryERM.CreateGLAccountNo);
      TexttoAccountMapping.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyMatchDetailsOnPaymentApplicationsPage@93(VAR PaymentApplication@1000 : TestPage 1292);
    VAR
      BankAccReconciliationLine@1001 : Record 274;
      MatchConfidenceVariant@1003 : Variant;
      RelatedPartyMatchedVariant@1004 : Variant;
      DocExtDocNoMatchedVariant@1005 : Variant;
      ExpectedNumberOfEntriesWithinToleranceVariant@1006 : Variant;
      ExpectedNumberOfEntriesOutsideToleranceVariant@1007 : Variant;
      AccountTypeVariant@1008 : Variant;
      AmountVariant@1011 : Variant;
      ToleranceVariant@1012 : Variant;
      ToleranceTypeVariant@1014 : Variant;
      GoToEntryNoVariant@1002 : Variant;
      EntryNoVariant@1013 : Variant;
      AccountType@1010 : Option;
      GoToEntryNo@1009 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(MatchConfidenceVariant);
      LibraryVariableStorage.Dequeue(RelatedPartyMatchedVariant);
      LibraryVariableStorage.Dequeue(DocExtDocNoMatchedVariant);
      LibraryVariableStorage.Dequeue(ExpectedNumberOfEntriesWithinToleranceVariant);
      LibraryVariableStorage.Dequeue(ExpectedNumberOfEntriesOutsideToleranceVariant);
      LibraryVariableStorage.Dequeue(AccountTypeVariant);
      LibraryVariableStorage.Dequeue(AmountVariant);
      LibraryVariableStorage.Dequeue(ToleranceVariant);
      LibraryVariableStorage.Dequeue(ToleranceTypeVariant);
      LibraryVariableStorage.Dequeue(GoToEntryNoVariant);

      GoToEntryNo := GoToEntryNoVariant;
      IF GoToEntryNo THEN BEGIN
        LibraryVariableStorage.Dequeue(EntryNoVariant);
        Assert.IsTrue(PaymentApplication.FINDFIRSTFIELD("Applies-to Entry No.",EntryNoVariant),'Cannot find row on the page');
      END;

      AccountType := AccountTypeVariant;

      // Verify Overall Confidence matches
      Assert.AreEqual(
        MatchConfidenceVariant,
        PaymentApplication."Payment-to-Entry Match".MatchConfidence.VALUE,
        'Unexpected value of ''Match Confidence''');
      Assert.AreEqual(
        FORMAT(RelatedPartyMatchedVariant),
        PaymentApplication."Payment-to-Entry Match".RelatedPatryMatchedOverview.VALUE,
        'Unexpected value of ''Related Party Matched''');
      Assert.AreEqual(
        FORMAT(DocExtDocNoMatchedVariant),
        PaymentApplication."Payment-to-Entry Match".DocExtDocNoMatchedOverview.VALUE,
        'Unexpected value of ''Doc. No./Ext. Doc. No. Matched''');

      // Verify No. Of Entries within tolerance and lookups
      Assert.AreEqual(
        FORMAT(ExpectedNumberOfEntriesWithinToleranceVariant),
        PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesWithinAmount.VALUE,
        'Unexpected value of ''Number of Ledger Entries Within Amount Tolerance''');
      Assert.AreEqual(
        FORMAT(ExpectedNumberOfEntriesOutsideToleranceVariant),
        PaymentApplication."Payment-to-Entry Match".NoOfLedgerEntriesOutsideAmount.VALUE,
        'Unexpected value of ''Number of Ledger Entries Outside Amount Tolerance''');

      CASE AccountType OF
        BankAccReconciliationLine."Account Type"::Customer:
          VerifyNoOfCustomerLedgerEntriesOnMatchDetailsLookup(PaymentApplication,ToleranceVariant,ToleranceTypeVariant,AmountVariant);
        BankAccReconciliationLine."Account Type"::Vendor:
          VerifyNoOfVendorLedgerEntriesOnMatchDetailsLookup(PaymentApplication,ToleranceVariant,ToleranceTypeVariant,AmountVariant);
        ELSE
          Assert.Fail('Wrong Account Type found');
      END;
    END;

    [ModalPageHandler]
    PROCEDURE AmountInclToleranceIsNotConsideredModalPageHandler@151(VAR PaymentApplication@1000 : TestPage 1292);
    BEGIN
      PaymentApplication."Payment-to-Entry Match".AmountMatchText.ASSERTEQUALS('Not Considered');
    END;

    LOCAL PROCEDURE VerifyOneToManyTempBankStatementMatchingBufferLine@131(VAR TempBankStmtMultipleMatchLine@1003 : TEMPORARY Record 1249;OneToManyTempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;ExpectedNoOfLines@1001 : Integer;ExpectedRemainingAmount@1002 : Decimal);
    VAR
      BankStmtMultipleMatchLine@1004 : Record 1249;
      BankStatementMatchingBuffer@1005 : Record 1250;
    BEGIN
      Assert.AreEqual(
        TRUE,OneToManyTempBankStatementMatchingBuffer."One to Many Match",
        'OneToManyTempBankStatementMatchingBuffer line was not created correctly');
      Assert.AreEqual(
        -1,OneToManyTempBankStatementMatchingBuffer."Entry No.",
        'OneToManyTempBankStatementMatchingBuffer line was not created correctly');
      Assert.AreEqual(
        ExpectedNoOfLines,OneToManyTempBankStatementMatchingBuffer."No. of Entries",
        'OneToManyTempBankStatementMatchingBuffer line was not created correctly');
      Assert.AreEqual(
        ExpectedRemainingAmount,OneToManyTempBankStatementMatchingBuffer."Total Remaining Amount",
        'OneToManyTempBankStatementMatchingBuffer line was not created correctly');

      // Verify BankStatementMatchingBuffer Lines
      TempBankStmtMultipleMatchLine.RESET;
      TempBankStmtMultipleMatchLine.SETRANGE("Line No.",OneToManyTempBankStatementMatchingBuffer."Line No.");
      TempBankStmtMultipleMatchLine.SETRANGE("Account Type",OneToManyTempBankStatementMatchingBuffer."Account Type");
      TempBankStmtMultipleMatchLine.SETRANGE("Account No.",OneToManyTempBankStatementMatchingBuffer."Account No.");

      Assert.AreEqual(ExpectedNoOfLines,TempBankStmtMultipleMatchLine.COUNT,'There should be only one TempBankStmtMultipleMatchLine');
      TempBankStmtMultipleMatchLine.FINDFIRST;

      Assert.IsTrue(BankStatementMatchingBuffer.ISEMPTY,'No permanent lines should be inserted in BankStatementMatchingBuffer table');
      Assert.IsTrue(BankStmtMultipleMatchLine.ISEMPTY,'No permanent lines should be inserted in BankStmtMultipleMatchLine table');
    END;

    LOCAL PROCEDURE VerifyOneToOneBankStatementMatchingBufferLine@147(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;EntryNo@1001 : Integer);
    BEGIN
      TempBankStatementMatchingBuffer.SETRANGE("Entry No.",EntryNo);
      TempBankStatementMatchingBuffer.SETRANGE("One to Many Match",FALSE);

      Assert.IsTrue(TempBankStatementMatchingBuffer.FINDFIRST,
        'Single Match TempBankStatementMatchingBuffer was removed by calling Insert One to Many rule');
      Assert.AreEqual(
        0,TempBankStatementMatchingBuffer."No. of Entries",
        'Current TempBankStatementMatchingBuffer was modified by calling Insert One to Many rule');

      TempBankStatementMatchingBuffer.RESET;
    END;

    LOCAL PROCEDURE VerifyMultipleApplicationsBankAccReconciliationLine@143(BankAccReconciliationLine@1000 : Record 274;Quality@1005 : Integer;ExpectedDifference@1001 : Decimal;ExpectedAppliedAmount@1002 : Decimal;AccountType@1003 : Option;AccountNo@1004 : Code[20];ExpectedNoOfEntries@1006 : Integer);
    BEGIN
      BankAccReconciliationLine.GET(
        BankAccReconciliationLine."Statement Type",BankAccReconciliationLine."Bank Account No.",
        BankAccReconciliationLine."Statement No.",BankAccReconciliationLine."Statement Line No.");
      BankAccReconciliationLine.CALCFIELDS("Match Quality");

      Assert.AreEqual(
        BankAccReconciliationLine.Difference,ExpectedDifference,'Difference was not set on the BankAccReconciliationLine correctly');
      Assert.AreEqual(
        BankAccReconciliationLine."Applied Amount",ExpectedAppliedAmount,
        'Applied Amount was not set on the BankAccReconciliationLine correctly');
      Assert.AreEqual(
        BankAccReconciliationLine."Account Type",AccountType,'Account Type was not set on the BankAccReconciliationLine correctly');
      Assert.AreEqual(
        BankAccReconciliationLine."Account No.",AccountNo,'Account Type was not set on the BankAccReconciliationLine correctly');
      Assert.AreEqual(
        BankAccReconciliationLine."Applied Entries",ExpectedNoOfEntries,'Applied Entries are not set to a correct value');
      Assert.AreEqual(BankAccReconciliationLine."Match Quality",Quality,'Match Quality is not set correctly');
    END;

    LOCAL PROCEDURE VerifyMultipleApplicationsAppliedEntries@144(AppliedPaymentEntry@1001 : Record 1294;Quality@1005 : Integer;ExpectedAppliedAmount@1000 : Decimal;ExpectedAppliesToEntryNo@1003 : Integer);
    BEGIN
      Assert.AreEqual(AppliedPaymentEntry."Applied Amount",ExpectedAppliedAmount,'Wrong amount set');
      Assert.AreEqual(AppliedPaymentEntry."Applies-to Entry No.",ExpectedAppliesToEntryNo,'Wrong Applies-to Entry No. value is set');
      Assert.AreEqual(AppliedPaymentEntry.Quality,Quality,'Wrong quality is set');
    END;

    BEGIN
    {
      // [FEATURE] [Bank Payment Application] [Match]
    }
    END.
  }
}

