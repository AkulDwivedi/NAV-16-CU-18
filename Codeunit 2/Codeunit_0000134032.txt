OBJECT Codeunit 134032 ERM Customer Date Compression
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryFiscalYear@1004 : Codeunit 131302;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      AmountError@1006 : TextConst 'ENU="%1 must be %2 in \\%3, %4=%5."';
      CountError@1003 : TextConst 'ENU=No. of Entries must be %1 in %2.';
      UnapplyDateCompressError@1007 : TextConst 'ENU=The entry cannot be unapplied, because the %1 has been compressed.';
      ErrorMessageDoNotMatch@1008 : TextConst 'ENU=Error Message must be same.';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressionByWeek@4();
    VAR
      DateComprRegister@1001 : Record 87;
      CustLedgerEntry@1005 : Record 21;
      CustomerNo@1002 : Code[20];
      FirstPostingDate@1004 : Date;
      LastPostingDate@1000 : Date;
      NoOfEntries@1003 : Integer;
    BEGIN
      // Check No. of Customer Ledger Entries, Amount after posting Payment and Invoices, and Running Date Compression by Week.

      // Create Customer. Create multiple Invoice and Payment entries on General Journal Line and Post them. Date Compress by Week and
      // verify the Amount and No. of Entries in Customer Ledger Entries. Take 1 Week interval between posting dates to test date
      // compression on lower and upper bounds randomly.
      Initialize;
      CustomerNo := CreateCustomer;
      FirstPostingDate := LibraryFiscalYear.GetFirstPostingDate(TRUE);
      LastPostingDate := CustomerDateCompression(CustomerNo,DateComprRegister."Period Length"::Week,FirstPostingDate,'<1W>');
      NoOfEntries := ComputeNoOfWeek(FirstPostingDate,LastPostingDate);

      // Verify: Verify No. of Entries after Date Compression by Week.
      Assert.AreEqual(
        NoOfEntries,GetCustomerLedgerEntries(CustomerNo),STRSUBSTNO(CountError,NoOfEntries,CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressionByMonth@5();
    VAR
      DateComprRegister@1002 : Record 87;
    BEGIN
      // Check No. of Customer Ledger Entries, Amount after posting Payment and Invoices, and Running Date Compression by Month.

      // Date Compress by Month and verify No. of Entries and Amount in Customer Ledger Entries. Pass 2 to fetch Entries for Month.
      // Take 10 Days interval between entries to test Date Compression on Upper and Lower boundaries randomly.
      Initialize;
      DateCompressionMonthYear(DateComprRegister."Period Length"::Month,'<10D>',2)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressionByYear@6();
    VAR
      DateComprRegister@1002 : Record 87;
    BEGIN
      // Check No. of Customer Ledger Entries, Amount after posting Payment and Invoices, and Running Date Compression by Year.

      // Date Compress by Year and verify No. of Entries and Amount in Customer Ledger Entries. Pass 3 to fetch Entries for Year.
      // Take 3 Months interval between entries to test Date Compression on Upper and Lower boundaries randomly.
      Initialize;
      DateCompressionMonthYear(DateComprRegister."Period Length"::Year,'<3M>',3)
    END;

    LOCAL PROCEDURE DateCompressionMonthYear@20(PeriodLength@1004 : Option;PeriodDifference@1005 : Text[10];PeriodOption@1006 : Integer);
    VAR
      CustLedgerEntry@1007 : Record 21;
      CustomerNo@1001 : Code[20];
      FirstPostingDate@1002 : Date;
      LastPostingDate@1000 : Date;
      NoOfEntries@1003 : Integer;
    BEGIN
      // Create Customer. Create multiple Invoice and Payment entries on General Journal Line and Post them. Date Compress as per the
      // Period Length selected. Verify the Amount and No. of Entries in Customer Ledger Entries.
      CustomerNo := CreateCustomer;
      FirstPostingDate := LibraryFiscalYear.GetFirstPostingDate(TRUE);
      LastPostingDate := CustomerDateCompression(CustomerNo,PeriodLength,FirstPostingDate,PeriodDifference);

      // Compute No. of Entries after Date Compression by Month. Pass 2 For Month, 3 for Year as option for computing entries.
      NoOfEntries := 1 + (DATE2DMY(LastPostingDate,PeriodOption) - DATE2DMY(FirstPostingDate,PeriodOption));

      // Verify: Verify No. of Entries after Date Compression for Month/Year selected.
      Assert.AreEqual(
        NoOfEntries,GetCustomerLedgerEntries(CustomerNo),STRSUBSTNO(CountError,NoOfEntries,CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UnapplyDateCompressCustEntry@1();
    VAR
      GenJournalLine@1000 : Record 81;
      DetailedCustLedgEntry@1004 : Record 379;
      DateComprRegister@1002 : Record 87;
      CustLedgerEntry@1005 : Record 21;
      CustEntryApplyPostedEntries@1003 : Codeunit 226;
    BEGIN
      // Verify error when Unapplying Customer Ledger Entry that are Date Compressed.

      // Setup: Create and post General Journal Lines, Compress the Customer Ledger Entry.
      Initialize;
      CreateDocumentLine(GenJournalLine,CreateCustomer,1,LibraryFiscalYear.GetFirstPostingDate(TRUE),'');
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      DateCompressForCustomer(GenJournalLine,GenJournalLine."Posting Date",DateComprRegister."Period Length"::Week);
      FindDetailedCustLedgerEntry(DetailedCustLedgEntry,GenJournalLine."Account No.",GenJournalLine."Document Type");

      // Exercise: Unapply Customer Ledger Entry.
      ASSERTERROR CustEntryApplyPostedEntries.PostUnApplyCustomer(
          DetailedCustLedgEntry,GenJournalLine."Document No.",GenJournalLine."Posting Date");

      // Verify: Verify error when Unapplying Customer Ledger Entry.
      Assert.AreEqual(
        STRSUBSTNO(UnapplyDateCompressError,CustLedgerEntry.TABLECAPTION),GETLASTERRORTEXT,ErrorMessageDoNotMatch);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CustomerDateCompression@10(CustomerNo@1003 : Code[20];PeriodLength@1011 : Option;FirstPostingDate@1005 : Date;Period@1006 : Text[10]) : Date;
    VAR
      GenJournalLine@1000 : Record 81;
      NoOfLines@1001 : Integer;
      JnlLineAmount@1002 : Decimal;
    BEGIN
      // Setup: Close the Open Fiscal Year. Make Payment and Invoice entries for a Customer from General Journal Line with same random
      // amount and Post them.
      LibraryFiscalYear.CloseFiscalYear;
      NoOfLines := LibraryRandom.RandInt(5);
      CreateDocumentLine(GenJournalLine,CustomerNo,NoOfLines,FirstPostingDate,Period);
      JnlLineAmount := NoOfLines * GenJournalLine.Amount;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Run the Date Compress Customer Ledger Batch Report.
      DateCompressForCustomer(GenJournalLine,FirstPostingDate,PeriodLength);

      // Verify: Verify the Amount in Customer Ledger Entry.
      VerifyCustomerLedgerEntry(GenJournalLine."Account No.",JnlLineAmount);
      EXIT(GenJournalLine."Posting Date");
    END;

    LOCAL PROCEDURE CreateCustomer@41() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      // Create Customer with Application Method: Apply to Oldest.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Application Method",Customer."Application Method"::"Apply to Oldest");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateDocumentLine@9(VAR GenJournalLine@1004 : Record 81;CustomerNo@1000 : Code[20];NoOfLines@1003 : Integer;PostingDate@1009 : Date;Period@1007 : Text[10]);
    VAR
      GenJournalBatch@1005 : Record 232;
      Amount@1008 : Decimal;
      Counter@1002 : Integer;
    BEGIN
      // Create multiple Journal Lines for Payment and Invoice with similar Random Amount. Take different Posting Dates.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      Amount := LibraryRandom.RandDec(50,2);
      FOR Counter := 1 TO NoOfLines DO BEGIN
        LibraryFiscalYear.CheckPostingDate(PostingDate);  // Check that no Posting Dates are outside Accounting Periods.
        CreateGeneralJournalLine(
          GenJournalLine,GenJournalBatch,CustomerNo,GenJournalLine."Document Type"::Invoice,INCSTR(GenJournalLine."Document No."),
          Amount,PostingDate);
        CreateGeneralJournalLine(
          GenJournalLine,GenJournalBatch,CustomerNo,GenJournalLine."Document Type"::Payment,INCSTR(GenJournalLine."Document No."),
          -Amount,PostingDate);
        PostingDate := CALCDATE('<' + Period + '>',PostingDate);
      END;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@40(VAR GenJournalLine@1005 : Record 81;GenJournalBatch@1000 : Record 232;CustomerNo@1002 : Code[20];DocumentType@1003 : Option;DocumentNo@1001 : Code[20];Amount@1004 : Decimal;PostingDate@1007 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      IF DocumentNo <> '' THEN
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ComputeNoOfWeek@14(FirstPostingDate@1000 : Date;LastPostingDate@1003 : Date) : Integer;
    VAR
      Date@1004 : Record 2000000007;
    BEGIN
      Date.SETRANGE("Period Type",Date."Period Type"::Week);
      Date.SETRANGE("Period Start",FindFirstDayOfPeriod(FirstPostingDate),FindFirstDayOfPeriod(LastPostingDate));
      IF (DATE2DMY(LastPostingDate,1) = 1) AND (FirstPostingDate <> LastPostingDate) THEN
        EXIT(Date.COUNT + 1);
      EXIT(Date.COUNT);
    END;

    LOCAL PROCEDURE DateCompressForCustomer@12(GenJournalLine@1002 : Record 81;StartingDate@1005 : Date;PeriodLength@1003 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      DateCompressCustomerLedger@1001 : Report 198;
    BEGIN
      // Run the Date Compress Customer Ledger Report with a closed Accounting Period.
      CustLedgerEntry.SETRANGE("Customer No.",GenJournalLine."Account No.");
      DateCompressCustomerLedger.SETTABLEVIEW(CustLedgerEntry);
      DateCompressCustomerLedger.InitializeRequest(StartingDate,GenJournalLine."Posting Date",PeriodLength,'',FALSE,FALSE,FALSE,'');
      DateCompressCustomerLedger.USEREQUESTPAGE(FALSE);
      DateCompressCustomerLedger.RUN;
    END;

    LOCAL PROCEDURE FindFirstDayOfPeriod@11(PeriodStart@1000 : Date) StartingDate : Date;
    VAR
      Date@1001 : Record 2000000007;
    BEGIN
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",PeriodStart);
      Date.FINDFIRST;
      StartingDate := CALCDATE('<-' + FORMAT(Date."Period No." - 1) + 'D>',Date."Period Start");
    END;

    LOCAL PROCEDURE FindDetailedCustLedgerEntry@16(VAR DetailedCustLedgEntry@1000 : Record 379;CustomerNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntries@21(CustomerNo@1001 : Code[20]) : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Payment);
      EXIT(CustLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@7(CustomerNo@1001 : Code[20];JnlLinePaymentAmt@1004 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgEntryAmt@1002 : Decimal;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS(Amount);
        CustLedgEntryAmt += CustLedgerEntry.Amount;
      UNTIL CustLedgerEntry.NEXT = 0;
      Assert.AreEqual(
        JnlLinePaymentAmt,CustLedgEntryAmt,STRSUBSTNO(AmountError,CustLedgerEntry.FIELDCAPTION(Amount),JnlLinePaymentAmt,
          CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler for Date Compression confirmation message.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Date Compression] [Sales]
      Test Date Compression functionality for Customer with different Period Lengths.
        1. Test Date Compression for Period Length: Week after Posting Payment and Invoice entries for Customer.
        2. Test Date Compression for Period Length: Month after Posting Payment and Invoice entries for Customer.
        3. Test Date Compression for Period Length: Year after Posting Payment and Invoice entries for Customer.
        4. Verify error when Unapplying Customer Ledger Entry that are Date Compressed.

      Covers test cases:
            -------------------------------------------------------
            Test Function Name               Test TFS ID
            -------------------------------------------------------
        DateCompressionByWeek            121594, 121595, 127765
        DateCompressionByMonth           121594, 121563, 127765
        DateCompressionByYear            121594, 121564, 127765

      Covers test cases: 237581
            -------------------------------------------------------
            Test Function Name               Test TFS ID
            -------------------------------------------------------
        UnapplyDateCompressCustEntry        123792, 123793
    }
    END.
  }
}

