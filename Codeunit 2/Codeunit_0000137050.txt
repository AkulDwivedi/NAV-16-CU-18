OBJECT Codeunit 137050 SCM Sales Order Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialised := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1002 : Codeunit 132201;
      LibrarySales@1003 : Codeunit 130509;
      LibraryWarehouse@1004 : Codeunit 132204;
      Assert@1005 : Codeunit 130000;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryService@1008 : Codeunit 131902;
      LibraryRandom@1001 : Codeunit 130440;
      CalendarMgt@1006 : Codeunit 7600;
      IsInitialised@1000 : Boolean;

    [Test]
    PROCEDURE SalesOrderWithoutOutboundTime@2();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1000 : Record 37;
      ShippingAgentServices@1004 : Record 5790;
      BaseCalendar@1008 : Record 7600;
      BaseCalendarChange@1001 : Record 7601;
      ExpectedDeliveryDate@1003 : Date;
      PlannedShipmentDate@1007 : Date;
      ShippingTime@1002 : DateFormula;
    BEGIN
      // Setup: Create Shipping agent and its services. Take random shipping time.
      Initialize;
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      CreateBaseCalendar(BaseCalendar);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Monday);
      CreateShippingAgentWithService(ShippingAgentServices,ShippingTime,BaseCalendar.Code);

      // Exercise: Create a Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,CreateCustomer(ShippingAgentServices,BaseCalendar.Code));

      // Verification: Verify Shipment Date, Planned Shipment Date, Planned Delivery Date.
      CalculatePlannedDate(PlannedShipmentDate,ExpectedDeliveryDate,SalesLine);
      VerifySalesLine(SalesLine,WORKDATE,PlannedShipmentDate,ExpectedDeliveryDate);
    END;

    [Test]
    PROCEDURE SalesOrderWithOutboundTime@4();
    VAR
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      ShippingAgentServices@1000 : Record 5790;
      Item@1006 : Record 27;
      PlannedShipmentDate@1003 : Date;
      PlannedDeliveryDate@1002 : Date;
      Shippingtime@1001 : DateFormula;
    BEGIN
      // Setup: Create Shipping agent services with random shipping time and Create Sales Header and Calculate Dates.
      Initialize;
      EVALUATE(Shippingtime,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      CreateItem(Item);
      CreateShippingAgentWithService(ShippingAgentServices,Shippingtime,'');
      CreateSalesHeader(SalesHeader,CreateCustomer(ShippingAgentServices,ShippingAgentServices."Base Calendar Code"),'');

      // Exercise: Create a Sales Line.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify various dates in Sales Order Line.
      CalculatePlannedDate(PlannedShipmentDate,PlannedDeliveryDate,SalesLine);
      VerifySalesLine(SalesLine,SalesHeader."Shipment Date",PlannedShipmentDate,PlannedDeliveryDate);
    END;

    [Test]
    PROCEDURE SalesOrderWithNoWorkingDate@8();
    VAR
      SalesLine@1000 : Record 37;
      ShippingAgentServices@1004 : Record 5790;
      BaseCalendar@1008 : Record 7600;
      BaseCalendarChange@1007 : Record 7601;
      SalesHeader@1005 : Record 36;
      Item@1003 : Record 27;
      PlannedShipmentDate@1010 : Date;
      PlannedDeliveryDate@1009 : Date;
      ShippingTime@1001 : DateFormula;
    BEGIN
      // Setup: Create Shipping agent and its services. Take random shipping time and Create Sales Header and calculate dates.
      Initialize;
      EVALUATE(ShippingTime,'<0D>');
      CreateItem(Item);
      CreateBaseCalendar(BaseCalendar);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Monday);
      CreateShippingAgentWithService(ShippingAgentServices,ShippingTime,'');
      CreateSalesHeader(SalesHeader,CreateCustomer(ShippingAgentServices,BaseCalendar.Code),'');

      // Exercise: Create a Sales Line.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Verification: Verify Shipment Date, Planned Shipment Date, Planned Delivery Date.
      CalculatePlannedDate(PlannedShipmentDate,PlannedDeliveryDate,SalesLine);
      VerifySalesLine(SalesLine,SalesHeader."Shipment Date",PlannedShipmentDate,PlannedDeliveryDate);
    END;

    [Test]
    PROCEDURE SalesWithOutboundWhseHandling@50();
    VAR
      SalesLine@1000 : Record 37;
      ShippingAgentServices@1004 : Record 5790;
      BaseCalendar@1008 : Record 7600;
      SalesHeader@1006 : Record 36;
      PlannedShipmentDate@1010 : Date;
      PlannedDeliveryDate@1009 : Date;
      ShipmentDate@1017 : Date;
      ShippingTime@1001 : DateFormula;
    BEGIN
      // Setup: Create Shipping agent and its services. Take random shipping time and Calculate Dates.
      Initialize;
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      CreateBaseCalendar(BaseCalendar);
      CreateShippingAgentWithService(ShippingAgentServices,ShippingTime,BaseCalendar.Code);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,CreateCustomer(ShippingAgentServices,''));

      // Calculate Planned Shipment Date And Planned Delivery Date with No Working Day.
      ShipmentDate := SalesHeader."Shipment Date";
      CalculatePlannedDate(PlannedShipmentDate,PlannedDeliveryDate,SalesLine);

      // Verify: Verify Shipment Date, Planned Shipment Date, Planned Delivery Date.
      VerifySalesLine(SalesLine,ShipmentDate,PlannedShipmentDate,PlannedDeliveryDate);
    END;

    [Test]
    PROCEDURE SalesWithLocationNoWorking@22();
    VAR
      SalesLine@1000 : Record 37;
      ShippingAgentServices@1004 : Record 5790;
      BaseCalendar@1008 : Record 7600;
      BaseCalendarChange@1007 : Record 7601;
      SalesHeader@1011 : Record 36;
      Item@1012 : Record 27;
      BaseCalendar2@1014 : Record 7600;
      Location@1018 : Record 14;
      PlannedShipmentDate@1003 : Date;
      PlannedDeliveryDate@1002 : Date;
      ShipmentDate@1005 : Date;
      ShippingTime@1001 : DateFormula;
    BEGIN
      // Setup: Create Shipping agent and its services. Take random shipping time.
      Initialize;
      CreateItem(Item);
      CreateBaseCalendar(BaseCalendar);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Monday);
      CreateBaseCalendar(BaseCalendar2);
      EVALUATE(ShippingTime,'<0D>');  // Evaluating Shipping Time to Blank .
      CreateShippingAgentWithService(ShippingAgentServices,ShippingTime,'');
      CreateLocation(Location,BaseCalendar2.Code);
      CreateSalesHeader(SalesHeader,CreateCustomer(ShippingAgentServices,BaseCalendar.Code),Location.Code);
      ShipmentDate := SalesHeader."Shipment Date";

      // Exercise: Create a Sales Line.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify Shipment Date, Planned Shipment Date, Planned Delivery Date.
      CalculatePlannedDate(PlannedShipmentDate,PlannedDeliveryDate,SalesLine);
      VerifySalesLine(SalesLine,ShipmentDate,PlannedShipmentDate,PlannedDeliveryDate);
    END;

    [Test]
    PROCEDURE SalesOrderWithOutboundTimeCustomCalendar@11();
    VAR
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      ShippingAgentServices@1000 : Record 5790;
      Item@1006 : Record 27;
      Location@1007 : Record 14;
      BaseCalendar@1004 : Record 7600;
      CustomizedCalendarChange@1008 : Record 7602;
      ExpectedShipmentDate@1003 : Date;
      Shippingtime@1001 : DateFormula;
      OutboundShippingDays@1002 : Integer;
    BEGIN
      // [FEATURE] [Shipment Date] [Shipping Agent Service]
      // [SCENARIO 361950] Shipment Date in Sales order is calculated as "Planned Shipment Date" - "Outbound Whse. Shipping Time" with Location calendar, but not with Shipping Agent's one.

      // [GIVEN] Create Shipping Agent Service with custom calendar, 1 working day a week.
      Initialize;
      EVALUATE(Shippingtime,'<0D>');  // Evaluating Shipping Time to Blank.
      CreateItem(Item);

      LibraryService.CreateBaseCalendar(BaseCalendar);
      // [GIVEN] Location having regular calendar, 7 working days a week.
      CreateLocation(Location,BaseCalendar.Code);
      CreateShippingAgentWithService(ShippingAgentServices,Shippingtime,BaseCalendar.Code);
      CustomizeCalendar(ShippingAgentServices,BaseCalendar.Code,CustomizedCalendarChange.Day::Monday);

      // [GIVEN] Create Sales Order with Shipping Agent usage, "Shipping Time" = 0D, "Outbound Warehouse Handling Time" >= 1D.
      OutboundShippingDays :=
        CreateSalesHeaderWithRequestedDelivery(
          SalesHeader,CreateCustomer(ShippingAgentServices,ShippingAgentServices."Base Calendar Code"),Location.Code);

      // [WHEN] Create a Sales Line with type of Item.
      CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // [THEN] Shipment Date in Sales Line is calculated with Location's calendar, but not with Shipping Agent's calendar.
      ExpectedShipmentDate :=
        CALCDATE('<-' + FORMAT(OutboundShippingDays) + 'D>',SalesLine."Planned Shipment Date");
      Assert.AreEqual(ExpectedShipmentDate,SalesLine."Shipment Date",'');
    END;

    LOCAL PROCEDURE Initialize@5();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialised THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialised := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateShippingAgentServices@7(VAR ShippingAgentServices@1000 : Record 5790;ShippingAgentCode@1001 : Code[10];BaseCalendarCode@1003 : Code[10];ShippingTime@1002 : DateFormula);
    BEGIN
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgentCode,ShippingTime);
      ShippingAgentServices.VALIDATE("Base Calendar Code",BaseCalendarCode);
      ShippingAgentServices.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@1(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Purchase);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@3(ShippingAgentServices@1004 : Record 5790;BaseCalanderCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Shipping Advice",Customer."Shipping Advice"::Partial);
      Customer.VALIDATE("Shipping Agent Code",ShippingAgentServices."Shipping Agent Code");
      Customer.VALIDATE("Shipping Agent Service Code",ShippingAgentServices.Code);
      Customer.VALIDATE("Base Calendar Code",BaseCalanderCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrder@6(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1000 : Record 37;CustomerNo@1003 : Code[20]);
    VAR
      Item@1004 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      EVALUATE(SalesHeader."Outbound Whse. Handling Time",'<0D>');  // Evaluating Handling Time to Blank .
      SalesHeader.VALIDATE("Outbound Whse. Handling Time");
      SalesHeader.MODIFY(TRUE);
      CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesHeader@10(VAR SalesHeader@1000 : Record 36;CustomerNo@1003 : Code[20];LocationCode@1005 : Code[10]);
    VAR
      OutboundWhseHandlingTime@1002 : DateFormula;
      ShippingTime@1001 : DateFormula;
      ShipmentDate@1004 : Date;
    BEGIN
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      EVALUATE(OutboundWhseHandlingTime,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ShipmentDate := CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.VALIDATE("Shipping Time",ShippingTime);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@16(VAR SalesLine@1008 : Record 37;SalesHeader@1007 : Record 36;AssignType@1006 : Option;AssignNo@1005 : Code[20];AssignQuantity@1000 : Decimal);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      WITH SalesLine DO BEGIN
        INIT;
        VALIDATE("Document Type",SalesHeader."Document Type");
        VALIDATE("Document No.",SalesHeader."No.");
        RecRef.GETTABLE(SalesLine);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        INSERT(TRUE);

        VALIDATE(Type,AssignType);
        VALIDATE("No.",AssignNo);
        VALIDATE(Quantity,AssignQuantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithRequestedDelivery@13(VAR SalesHeader@1000 : Record 36;CustomerNo@1003 : Code[20];LocationCode@1005 : Code[10]) OutboundHandlingDays : Integer;
    VAR
      OutboundWhseHandlingTime@1002 : DateFormula;
      ShippingTime@1001 : DateFormula;
      RequestedDeliveryDate@1004 : Date;
    BEGIN
      EVALUATE(ShippingTime,'<0D>');
      OutboundHandlingDays := LibraryRandom.RandIntInRange(1,3);
      EVALUATE(OutboundWhseHandlingTime,'<' + FORMAT(OutboundHandlingDays) + 'D>');
      RequestedDeliveryDate := CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(30,50)) + 'D>',WORKDATE);
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,CustomerNo);
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Shipment Date",0D);
        VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
        VALIDATE("Shipping Time",ShippingTime);
        VALIDATE("Requested Delivery Date",RequestedDeliveryDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateLocation@46(VAR Location@1002 : Record 14;BaseCalendarCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Base Calendar Code",BaseCalendarCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateShippingAgentWithService@75(VAR ShippingAgentServices@1001 : Record 5790;ShippingTime@1002 : DateFormula;BaseCalendarCode@1003 : Code[10]);
    VAR
      ShippingAgent@1000 : Record 291;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      CreateShippingAgentServices(ShippingAgentServices,ShippingAgent.Code,BaseCalendarCode,ShippingTime);
    END;

    LOCAL PROCEDURE CreateBaseCalendar@66(VAR BaseCalendar@1000 : Record 7600);
    VAR
      BaseCalendarChange@1003 : Record 7601;
      LibraryService@1002 : Codeunit 131902;
    BEGIN
      LibraryService.CreateBaseCalendar(BaseCalendar);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Sunday);
    END;

    LOCAL PROCEDURE CustomizeCalendar@19(ShippingAgentServices@1000 : Record 5790;BaseCalendarCode@1004 : Code[10];SetWorkingDay@1001 : Option);
    VAR
      CustomizedCalendarChange@1003 : Record 7602;
      WeekDay@1002 : Option;
    BEGIN
      WITH CustomizedCalendarChange DO
        FOR WeekDay := Day::Monday TO Day::Sunday DO
          IF WeekDay <> SetWorkingDay THEN
            LibraryService.CreateCustomizedCalendarChange(
              BaseCalendarCode,CustomizedCalendarChange,"Source Type"::"Shipping Agent",
              ShippingAgentServices."Shipping Agent Code",ShippingAgentServices.Code,
              "Recurring System"::"Weekly Recurring",WeekDay,TRUE);
    END;

    LOCAL PROCEDURE CalculatePlannedDate@9(VAR PlannedShipmentDate@1001 : Date;VAR PlannedDeliveryDate@1002 : Date;SalesLine@1003 : Record 37);
    VAR
      CustomizedCalendarChange@1000 : Record 7602;
    BEGIN
      PlannedShipmentDate :=
        CalendarMgt.CalcDateBOC(
          FORMAT(SalesLine."Outbound Whse. Handling Time"),SalesLine."Shipment Date",
          CustomizedCalendarChange."Source Type"::Location,SalesLine."Location Code",'',
          CustomizedCalendarChange."Source Type"::"Shipping Agent",SalesLine."Shipping Agent Code",
          SalesLine."Shipping Agent Service Code",TRUE);

      PlannedDeliveryDate :=
        CalendarMgt.CalcDateBOC(
          FORMAT(SalesLine."Shipping Time"),SalesLine."Planned Shipment Date",
          CustomizedCalendarChange."Source Type"::"Shipping Agent",SalesLine."Shipping Agent Code",
          SalesLine."Shipping Agent Service Code",
          CustomizedCalendarChange."Source Type"::Customer,SalesLine."Sell-to Customer No.",'',TRUE);
    END;

    LOCAL PROCEDURE VerifySalesLine@25(SalesLine@1003 : Record 37;ShipmentDate@1000 : Date;PlannedShipmentDate@1001 : Date;PlannedDeliveryDate@1002 : Date);
    BEGIN
      SalesLine.TESTFIELD("Shipment Date",ShipmentDate);
      SalesLine.TESTFIELD("Planned Shipment Date",PlannedShipmentDate);
      SalesLine.TESTFIELD("Planned Delivery Date",PlannedDeliveryDate);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Order] [Shipment Date] [Sales] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      US: Unable to Execute

      Test for Costing Returns:
        1. Verify Shipment Date, Planned Shipment Date, Planned Delivery Date Sales Order without Outbound Whse. Handling Time.
        2. Verify Shipment Date, Planned Shipment Date, Planned Delivery Date in sales order line after reset the Shipping Time.
        3. Verify Shipment Date, Planned Shipment Date, Planned Delivery Date in sales order line with Shipment Date is No working Date
        4. Verify Shipment Date, Planned Shipment Date, Planned Delivery with Outbound Whse. Handling Time and Shipment Date.
        5. Verify Shipment Date, Planned Shipment Date, Planned Delivery Date in sales order line with Base Calendar Code of
           the Noworking Date of Location.

        Covers Test cases:  WI 256715
      -------------------------------------------------
        Test Function Name                TFS ID
      -------------------------------------------------
        SalesOrderWithoutOutboundTime     231958
        SalesOrderWithOutboundTime        231961
        SalesOrderWithNoWorkingDate       231962
        SalesWithOutboundWhseHandling     231957
        SalesWithLocationNoWorking        231960

        Covers Test cases:  TFS 361950
      ----------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
      ----------------------------------------------------------------------------------------
        SalesOrderWithOutboundTimeCustomCalendar                                       361950
    }
    END.
  }
}

