OBJECT Codeunit 136504 RES Time Sheet
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryTimeSheet@1002 : Codeunit 131904;
      Assert@1001 : Codeunit 130000;
      LibraryRandom@1012 : Codeunit 130440;
      LibraryResource@1011 : Codeunit 130511;
      LibraryUtility@1010 : Codeunit 131000;
      LibrarySetupStorage@1008 : Codeunit 131009;
      LibraryDimension@1000 : Codeunit 131001;
      LibraryERM@1009 : Codeunit 131300;
      LibraryJob@1022 : Codeunit 131920;
      IsInitialized@1003 : Boolean;
      PageVerify@1004 : TextConst 'ENU=The TestPage is already open.';
      TimeSheetNo@1005 : Code[20];
      TimeSheetComment@1006 : TextConst 'ENU=%1 Comments.';
      TimeSheetLineExist@1007 : TextConst 'ENU=Time Sheet Line has not be deleted';
      ResourceBlockedErr@1013 : TextConst 'ENU=Blocked must be equal to ''No''  in Resource:';

    [Test]
    PROCEDURE OpenTimeSheetListPage@6();
    VAR
      TimeSheetList@1000 : TestPage 951;
    BEGIN
      // Verify that Time Sheet List page is opened and not allowed to reopen.

      // Setup: Open Time Sheet List page.
      Initialize;
      TimeSheetList.OPENVIEW;

      // Exercise.
      ASSERTERROR TimeSheetList.OPENVIEW;

      // Verify: Verify error message on Time Sheet List page.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    PROCEDURE ManagerTimeSheetListPage@37();
    VAR
      Assert@1001 : Codeunit 130000;
      ManagerTimeSheetList@1000 : TestPage 953;
    BEGIN
      // Verify that Manager Time Sheet List page is opened and not allowed to reopen.

      // Setup: Open Manager Time Sheet List page.
      Initialize;
      ManagerTimeSheetList.OPENVIEW;

      // Exercise.
      ASSERTERROR ManagerTimeSheetList.OPENVIEW;

      // Verify: Verify error message on Manager Time Sheet List page.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    PROCEDURE CreateTimeSheetMenu@1();
    VAR
      UserSetup@1006 : Record 91;
      ResourcesSetup@1005 : Record 314;
      Resource@1000 : Record 156;
      AccountingPeriod@1002 : Record 50;
      TimeSheetHeader@1004 : Record 950;
      Date@1003 : Record 2000000007;
      CreateTimeSheets@1001 : Report 950;
    BEGIN
      // Verify that Create Time Sheet menu is working and creating timesheet.

      // Setup.
      Initialize;
      ResourcesSetup.GET;
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      CreateTimesheetResource(Resource,UserSetup);

      // Find first open Accounting Period.
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // Find first Working Date after Accounting Period Starting Date.
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETFILTER("Period Start",'%1..',AccountingPeriod."Starting Date");
      Date.SETRANGE("Period No.",ResourcesSetup."Time Sheet First Weekday" + 1);  // Here 1 is taken to get first working day of weekday.
      Date.FINDFIRST;

      // Exercise: Run Create time sheet.
      CreateTimeSheets.InitParameters(Date."Period Start",1,Resource."No.",FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;

      // Verify: Verify that time sheet is created.
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,'Time sheet is not created');

      // Tear Down.
      Resource.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TimeSheetArchivesPage@2();
    VAR
      Assert@1001 : Codeunit 130000;
      TimeSheetArchiveList@1000 : TestPage 960;
    BEGIN
      // Verify that Time Sheet Archive List page is opened and not allowed to reopen.

      // Setup: Open Time Sheet Archive List page.
      Initialize;
      TimeSheetArchiveList.OPENVIEW;

      // Exercise.
      ASSERTERROR TimeSheetArchiveList.OPENVIEW;

      // Verify: Verify error message on Time Sheet Archive List page.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    [HandlerFunctions(MoveTimeSheetHandler,MessageHandler)]
    PROCEDURE MoveTimeSheetsToArchiveBatch@10();
    VAR
      TimeSheetLine@1007 : Record 951;
      TimeSheetHeaderArchive@1000 : Record 954;
      MoveTimeSheetsToArchive@1011 : Report 953;
    BEGIN
      // Check that Move Time Sheets to Archive Report is working.

      // Setup.
      Initialize;
      TimeSheetNo := CreateTimeSheet(TimeSheetLine);
      TimeSheetLine.VALIDATE(Status,TimeSheetLine.Status::Approved);
      TimeSheetLine.VALIDATE(Posted,TRUE);
      TimeSheetLine.MODIFY(TRUE);
      COMMIT;

      // Exercise: Run Move Time Sheets to Archive Report.
      CLEAR(MoveTimeSheetsToArchive);
      MoveTimeSheetsToArchive.RUN;

      // Verify: Verify that Move Time Sheets To Archives report archives created Time Sheet.
      TimeSheetHeaderArchive.GET(TimeSheetNo);
    END;

    [Test]
    PROCEDURE ManagerTimeSheetArchivesPage@5();
    VAR
      Assert@1001 : Codeunit 130000;
      ManagerTimeSheetArcList@1000 : TestPage 962;
    BEGIN
      // Verify that Manager Time Sheet Archives List page is opened and not allowed to reopen.

      // Setup: Open Manager Time Sheet Archive List page.
      Initialize;
      ManagerTimeSheetArcList.OPENVIEW;

      // Exercise:
      ASSERTERROR ManagerTimeSheetArcList.OPENVIEW;

      // Verify: Verify error message on Manager Time Sheet Archive List page.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    PROCEDURE ResourceCard@34();
    VAR
      UserSetup@1006 : Record 91;
      Resource@1000 : Record 156;
    BEGIN
      // Check fields on Resource Card.

      // Setup.
      Initialize;
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      CreateTimesheetResource(Resource,UserSetup);

      // Exercise.
      Resource.GET(Resource."No.");

      // Verify.
      Resource.TESTFIELD("Use Time Sheet",TRUE);
      Resource.TESTFIELD("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.TESTFIELD("Time Sheet Approver User ID",UserSetup."User ID");

      // Tear Down.
      Resource.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(TimeSheetHandler,MessageHandler)]
    PROCEDURE CreateTimeSheetsForResource@58();
    VAR
      UserSetup@1007 : Record 91;
      Resource@1006 : Record 156;
      ResourceCard@1001 : TestPage 76;
    BEGIN
      // Verify that Create Time Sheet Menu is exists on Resource page.

      // Setup.
      Initialize;
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      CreateTimesheetResource(Resource,UserSetup);
      COMMIT;

      // Exercise.
      ResourceCard.OPENEDIT;
      ResourceCard.FILTER.SETFILTER("No.",Resource."No.");
      ResourceCard.CreateTimeSheets.INVOKE;

      // Verify: Verification done in TimeSheetHandler handler.

      // Tear Down.
      Resource.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE ResourceJournalLine@18();
    VAR
      Resource@1003 : Record 156;
      ResJournalLine@1002 : Record 207;
      TempResJournalLine@1005 : TEMPORARY Record 207;
      ResJournalTemplate@1000 : Record 206;
      ResJournalBatch@1001 : Record 236;
      TimeSheetLine@1007 : Record 951;
    BEGIN
      // Check fields on the Resource Journal Line.Verification is done through record rather than page because verified fields are not available on the page without Show Column.

      // Setup: Create Resource Journal Template, Resource Batch and Time Sheet.
      Initialize;
      CreateResourceJournalTemplate(ResJournalTemplate);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
      Resource.SETRANGE("Use Time Sheet",FALSE);
      Resource.FINDFIRST;
      CreateTimeSheet(TimeSheetLine);

      // Exercise: Create Resource Journal Line.
      CreateAndModifyResourceJournalLine(ResJournalLine,ResJournalBatch,TimeSheetLine,Resource."No.");
      TempResJournalLine := ResJournalLine;
      COMMIT;

      // Verify.
      ResJournalLine.TESTFIELD("Time Sheet No.",TempResJournalLine."Time Sheet No.");
      ResJournalLine.TESTFIELD("Time Sheet Line No.",TempResJournalLine."Time Sheet Line No.");
      ResJournalLine.TESTFIELD("Time Sheet Date",TempResJournalLine."Time Sheet Date");
    END;

    [Test]
    [HandlerFunctions(ResourceJournalLineHandler,ResourceJournalTemplateListHandler)]
    PROCEDURE MenuSuggestlLinesFromTimeSheetOnResourceJournal@9();
    VAR
      TimeSheetLine@1007 : Record 951;
      ResJournalTemplate@1000 : Record 206;
      ResourceJournal@1008 : TestPage 207;
    BEGIN
      // Check that Suggest Lines from Time Sheets link is exists on Resource Journal.

      // Setup: Create Time Sheet.
      Initialize;
      CreateResourceJournalTemplate(ResJournalTemplate);
      CreateTimeSheet(TimeSheetLine);
      COMMIT;

      // Exercise.
      ResourceJournal.OPENEDIT;
      ResourceJournal.SuggestLinesFromTimeSheets.INVOKE;

      // Verify: Verification done in ResourceJournalLineHandler handler.
    END;

    [Test]
    PROCEDURE FieldsOnJobJournalLine@13();
    VAR
      TempJobJournalLine@1005 : TEMPORARY Record 210;
      TimeSheetLine@1007 : Record 951;
      JobTask@1010 : Record 1001;
      JobJournalLine@1009 : Record 210;
      LibraryJob@1008 : Codeunit 131920;
    BEGIN
      // Check fields on the Job Journal Line.Verification is done through record rather than page because verified fields are not available on the page without Show Column.

      // Setup: Create Time Sheet and Job Task.
      Initialize;
      CreateTimeSheet(TimeSheetLine);
      CreateJobAndJobTask(JobTask);

      // Exercise.
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Item,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      JobJournalLine.VALIDATE("Time Sheet Line No.",TimeSheetLine."Line No.");
      JobJournalLine.VALIDATE("Time Sheet Date",TimeSheetLine."Time Sheet Starting Date");
      JobJournalLine.MODIFY(TRUE);
      TempJobJournalLine := JobJournalLine;

      // Verify.
      JobJournalLine.TESTFIELD("Time Sheet No.",TempJobJournalLine."Time Sheet No.");
      JobJournalLine.TESTFIELD("Time Sheet Line No.",TempJobJournalLine."Time Sheet Line No.");
      JobJournalLine.TESTFIELD("Time Sheet Date",TempJobJournalLine."Time Sheet Date");
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,JobJournalTemplateListHandler)]
    PROCEDURE MenuSuggestlLinesFromTimeSheetOnJobJournal@38();
    VAR
      TimeSheetLine@1007 : Record 951;
      JobTask@1011 : Record 1001;
      JobJournalTemplate@1000 : Record 209;
      JobJournal@1009 : TestPage 201;
    BEGIN
      // Check that Suggest Lines from Time Sheets exists menu of Job Journal Line.

      // Setup: Create Time Sheet and Job Task.
      Initialize;
      LibraryJob.CreateJobJournalTemplate(JobJournalTemplate);
      TimeSheetNo := CreateTimeSheet(TimeSheetLine);
      CreateJobAndJobTask(JobTask);
      COMMIT;

      // Exercise.
      JobJournal.OPENEDIT;
      JobJournal.SuggestLinesFromTimeSheets.INVOKE;

      // Verify: Verification done in JobJournalLineHandler handler.
    END;

    [Test]
    PROCEDURE ResourceSetupValidate@17();
    VAR
      ResourcesSetup@1012 : Record 314;
      TimeSheetNos@1013 : Code[10];
    BEGIN
      // Check fields on Resources Setup Record.

      // Setup.
      Initialize;
      ResourcesSetup.GET;
      TimeSheetNos := LibraryUtility.GetGlobalNoSeriesCode;

      // Exercise.
      ResourcesSetup.VALIDATE("Time Sheet Nos.",TimeSheetNos);
      ResourcesSetup.VALIDATE("Time Sheet First Weekday",ResourcesSetup."Time Sheet First Weekday"::Monday);
      ResourcesSetup.VALIDATE("Time Sheet by Job Approval",ResourcesSetup."Time Sheet by Job Approval"::Always);
      ResourcesSetup.MODIFY(TRUE);

      // Verify.
      ResourcesSetup.GET;
      ResourcesSetup.TESTFIELD("Time Sheet Nos.",TimeSheetNos);
      ResourcesSetup.TESTFIELD("Time Sheet First Weekday",ResourcesSetup."Time Sheet First Weekday"::Monday);
      ResourcesSetup.TESTFIELD("Time Sheet by Job Approval",ResourcesSetup."Time Sheet by Job Approval"::Always);
    END;

    [Test]
    PROCEDURE CommentsOnTimeSheetHeaderAndLine@3();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheet@1006 : TestPage 950;
      ResourceNo@1001 : Code[20];
    BEGIN
      // Check comments entered on both Time Sheet Header and Time Sheet Line.

      // Setup: Create User Setup, Resource and Time Sheet.
      Initialize;
      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      ResourceNo := TimeSheetHeader."Resource No.";

      // Exercise: Enter comments for Time Sheet Header and Time Sheet Line.
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.OK.INVOKE;

      // Verify: Verify comments entered on both Time Sheet Header and Time Sheet Line.
      VerifyCommentsOnTimeSheetHeader(TimeSheetHeader."No.");
      VerifyCommentsOnTimeSheetLine(TimeSheetHeader."No.");

      // Tear Down: Delete Time Sheet And Resource.
      DeleteTimeSheetAndResource(TimeSheetHeader."No.",ResourceNo);
    END;

    [Test]
    PROCEDURE TimeSheetCommentsDeletion@67();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheet@1006 : TestPage 950;
      TimeSheetCommentSheet@1001 : TestPage 955;
      ResourceNo@1000 : Code[20];
    BEGIN
      // Check comments are removed after deletion of Time Sheet Line.

      // Setup: Create User Setup, Resource, Time Sheet And enter comments for Header and Line.
      Initialize;
      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      ResourceNo := TimeSheetHeader."Resource No.";
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.OK.INVOKE;

      // Exercise: Delete comments on Line.
      TimeSheet.OPENVIEW;
      TimeSheet.CurrTimeSheetNo.SETVALUE(TimeSheetHeader."No.");
      TimeSheetCommentSheet.TRAP;
      TimeSheet.LineComments.INVOKE;
      TimeSheetCommentSheet.Comment.SETVALUE('');
      TimeSheet.OK.INVOKE;

      // Verify: Verify comments are removed after deletion of Time Sheet Line.
      TimeSheet.OPENVIEW;
      TimeSheet.CurrTimeSheetNo.SETVALUE(TimeSheetHeader."No.");
      TimeSheetCommentSheet.TRAP;
      TimeSheet.LineComments.INVOKE;
      TimeSheetCommentSheet.Comment.ASSERTEQUALS('');

      // Tear Down: Delete Time Sheet And Resource.
      DeleteTimeSheetAndResource(TimeSheetHeader."No.",ResourceNo);
    END;

    [Test]
    PROCEDURE ManagerTimeSheetComments@72();
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheet@1001 : TestPage 950;
      ManagerTimeSheetList@1006 : TestPage 953;
      ResourceNo@1008 : Code[20];
    BEGIN
      // Check comments on Manager Time Sheet Header and Line.

      // Setup: Create User Setup, Resource, Time Sheet and enter comments for Header and Line.
      Initialize;
      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      ResourceNo := TimeSheetHeader."Resource No.";
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.OK.INVOKE;

      // Exercise.
      ManagerTimeSheetList.OPENVIEW;

      // Verify: Verify comments on Manager Time Sheet Header And Line.
      VerifyCommentsOnManagerTimeSheetHeader(TimeSheetHeader."No.");
      VerifyCommentsOnManagerTimeSheetLine(TimeSheetHeader."No.");

      // Tear Down: Delete Time Sheet And Resource.
      DeleteTimeSheetAndResource(TimeSheetHeader."No.",ResourceNo);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE RejectManagerTimeSheetLines@19();
    VAR
      TimeSheetHeader@1006 : Record 950;
      TimeSheet@1004 : TestPage 950;
      ManagerTimeSheet@1000 : TestPage 952;
      ResourceNo@1008 : Code[20];
    BEGIN
      // Check comments on both Time Sheet Header and Time Sheet Line after rejection.

      // Setup: Create User Setup, Resource, Time Sheet and enter Comments for Time Sheet Header and Line.
      Initialize;
      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      ResourceNo := TimeSheetHeader."Resource No.";
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;

      // Exercise.
      ManagerTimeSheet.OPENVIEW;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      ManagerTimeSheet.Reject.INVOKE;

      // Verify: Verify comments Entered on both Time Sheet Header and Time Sheet Line.
      VerifyCommentsOnTimeSheetHeader(TimeSheetHeader."No.");
      VerifyCommentsOnTimeSheetLine(TimeSheetHeader."No.");

      // Tear Down: Delete Time Sheet And Resource.
      DeleteTimeSheetAndResource(TimeSheetHeader."No.",ResourceNo);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE SubmitAndApproveTimeSheet@23();
    VAR
      TimeSheetHeader@1006 : Record 950;
      TimeSheet@1004 : TestPage 950;
      ManagerTimeSheet@1000 : TestPage 952;
      ResourceNo@1008 : Code[20];
    BEGIN
      // Check comments on Manager Time Sheet Header and Time Sheet Line after approval.

      // Setup: Create User Setup, Resource, Time Sheet and enter comments for Header and Line.
      Initialize;
      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      ResourceNo := TimeSheetHeader."Resource No.";
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;

      // Exercise.

      ManagerTimeSheetApproval(TimeSheetHeader."No.");

      // Verify: Verify comments on Manager Time Sheet Header and Line.
      VerifyCommentsOnManagerTimeSheetHeader(TimeSheetHeader."No.");
      VerifyCommentsOnManagerTimeSheetLine(TimeSheetHeader."No.");

      // Tear Down: Delete Time Sheet and Resource.
      ManagerTimeSheet.OPENVIEW;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      ManagerTimeSheet.Reopen.INVOKE;
      TimeSheet.OPENVIEW;
      TimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      TimeSheet.Reopen.INVOKE;
      DeleteTimeSheetAndResource(TimeSheetHeader."No.",ResourceNo);
    END;

    [Test]
    [HandlerFunctions(MoveTimeSheetHandler,MessageHandler,StrMenuHandler)]
    PROCEDURE ArchiveTimeSheet@42();
    VAR
      Resource@1007 : Record 156;
      TimeSheetHeader@1006 : Record 950;
      TimeSheetLine@1005 : Record 951;
      TimeSheetHeaderArchive@1002 : Record 954;
      MoveTimeSheetsToArchive@1000 : Report 953;
      TimeSheet@1004 : TestPage 950;
      TimeSheetArchive@1010 : TestPage 959;
      TimeSheetArchiveList@1003 : TestPage 960;
      TimeSheetArcCommentSheet@1009 : TestPage 963;
      ManagerTimeSheet@1001 : TestPage 952;
      ResourceNo@1011 : Code[20];
    BEGIN
      // Check comments after Archiving Time Sheet.

      // Setup: Create User Setup, Resource, Time Sheet and enter comments for Header and Line.
      Initialize;

      CreateUserSetupAndTimeSheet(TimeSheetHeader);
      UpdateTimeSheetLine(TimeSheetHeader."No.");
      TimeSheetNo := TimeSheetHeader."No.";
      ResourceNo := TimeSheetHeader."Resource No.";
      OpenTimeSheetListAndEnterComments(TimeSheetHeader."No.");
      OpenTimeSheetAndEnterComments(TimeSheet,TimeSheetHeader."No.");
      TimeSheet.Submit.INVOKE;
      TimeSheet.OK.INVOKE;
      ManagerTimeSheetApproval(TimeSheetHeader."No.");
      COMMIT;

      // Exercise: Run Move Time Sheets to Archive Report.
      CLEAR(MoveTimeSheetsToArchive);
      ManagerTimeSheet.OPENVIEW;
      MoveTimeSheetsToArchive.RUN;

      TimeSheetArchiveList.OPENVIEW;
      TimeSheetArchiveList.FILTER.SETFILTER("No.",TimeSheetHeader."No.");
      TimeSheetArchive.TRAP;
      TimeSheetArchiveList.Action5.INVOKE;
      // Verify: Verify comments on Archive Time Sheet.
      TimeSheetArchive.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      TimeSheetArcCommentSheet.TRAP;
      TimeSheetArchive.LineComments.INVOKE;
      TimeSheetArcCommentSheet.Comment.ASSERTEQUALS(STRSUBSTNO(TimeSheetComment,TimeSheetLine.TABLECAPTION));
      TimeSheetArcCommentSheet.CLOSE;

      // Delete Time Sheet Archive
      TimeSheetHeaderArchive.RESET;
      TimeSheetHeaderArchive.SETRANGE("No.",TimeSheetHeader."No.");
      TimeSheetHeaderArchive.FINDFIRST;
      TimeSheetHeaderArchive.DELETE(TRUE);

      // Tear Down: Delete Resource.
      Resource.GET(ResourceNo);
      Resource.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TimeSheetAdminOnUserSetup@33();
    VAR
      UserSetup@1001 : Record 91;
    BEGIN
      // Check that User Id has been granted Time Sheet Administrator permissions successfully or not.

      // Setup: Create User Setup.
      Initialize;
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);

      // Exercise.
      UserSetup.VALIDATE("Time Sheet Admin.",TRUE);
      UserSetup.MODIFY(TRUE);

      // Verify: Verify User Id has been granted Administrator permissions or not.
      UserSetup.GET(UserSetup."User ID");
      UserSetup.TESTFIELD("Time Sheet Admin.",TRUE);
    END;

    [Test]
    PROCEDURE DeleteTimeSheetLine@32();
    VAR
      TimeSheetHeader@1005 : Record 950;
      TimeSheetLine@1006 : Record 951;
    BEGIN
      // Check that Time Sheet Line has been deleted or not.

      // Setup: Create Time Sheet Header and Time Sheet Line.
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');

      // Exercise: Delete Time Sheet Line.
      TimeSheetLine.DELETE(TRUE);

      // Verify: Verify that the Time Sheet Line is deleted.
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      Assert.IsFalse(TimeSheetLine.FINDFIRST,TimeSheetLineExist);
    END;

    [Test]
    PROCEDURE TimeSheetDecimalPlaces@39();
    VAR
      GLSetup@1006 : Record 98;
      UserSetup@1003 : Record 91;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1001 : Record 951;
      TimeSheetList@1008 : TestPage 951;
      TimeSheet@1000 : TestPage 950;
      TestValue@1004 : ARRAY [3] OF Decimal;
      i@1005 : Integer;
    BEGIN
      // [FEATURE] [UT] [UI]
      // [SCENARIO 378723] Time Sheet page has matrix Day's property DecimalPlaces = 0:2 from monday to friday
      Initialize;
      TestValue[1] := 1;
      TestValue[2] := 1.1;
      TestValue[3] := 1.12;

      // [GIVEN] Modify GLSetup."Amount Decimal Places" = '0'
      GLSetup.GET;
      GLSetup.VALIDATE("Amount Decimal Places",'0');
      GLSetup.MODIFY;

      // [GIVEN] Time Sheet line
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      UserSetup.VALIDATE("Time Sheet Admin.",TRUE);
      UserSetup.MODIFY(TRUE);

      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');

      TimeSheetList.OPENEDIT;
      TimeSheetList.GOTORECORD(TimeSheetHeader);
      TimeSheet.TRAP;
      TimeSheetList.EditTimeSheet.INVOKE;
      TimeSheet.GOTORECORD(TimeSheetLine);

      // [WHEN] Validate day's quantity = 1 (or 1.1 or 1.12)
      // [THEN] Day's value = 1 (or 1.1 or 1.12 correspondently)
      FOR i := 1 TO ARRAYLEN(TestValue) DO BEGIN
        TimeSheet.Field1.SETVALUE(TestValue[i]);
        TimeSheet.Field1.ASSERTEQUALS(FORMAT(TestValue[i]));
        TimeSheet.Field2.SETVALUE(TestValue[i]);
        TimeSheet.Field2.ASSERTEQUALS(FORMAT(TestValue[i]));
        TimeSheet.Field3.SETVALUE(TestValue[i]);
        TimeSheet.Field3.ASSERTEQUALS(FORMAT(TestValue[i]));
        TimeSheet.Field4.SETVALUE(TestValue[i]);
        TimeSheet.Field4.ASSERTEQUALS(FORMAT(TestValue[i]));
        TimeSheet.Field5.SETVALUE(TestValue[i]);
        TimeSheet.Field5.ASSERTEQUALS(FORMAT(TestValue[i]));
      END;
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggestlLinesFromTimeSheetOnJobJnlDimPriorityJob@69();
    VAR
      JobTask@1000 : Record 1001;
      SourceCode@1001 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Job's dimension if Template, Job and Resource have the same Source Code and Job priority higher then Resource
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC", Priority = 2
      SourceCode := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCode,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      CreateDimensionWithPriority(SourceCode,DATABASE::Resource,ResourceNo,2);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC"
      RunSuggestJobJnlLinesReport(SourceCode);

      // [THEN] Job Journal Line for "R" created with Dimension "DD1"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggestlLinesFromTimeSheetOnJobJnlDimPriorityResource@51();
    VAR
      JobTask@1001 : Record 1001;
      SourceCode@1000 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Resource's dimension if Template, Job and Resource have the same Source Code and Resource priority higher then Job
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC", Priority = 2
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC", Priority = 1
      SourceCode := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      CreateDimensionWithPriority(SourceCode,DATABASE::Job,JobTask."Job No.",2);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCode,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC"
      RunSuggestJobJnlLinesReport(SourceCode);

      // [THEN] Job Journal Line for "R" created with Dimension "DD2"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggestlLinesFromTimeSheetOnJobJnlNoDimPriorities@52();
    VAR
      JobTask@1001 : Record 1001;
      SourceCode@1000 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Resource's dimension if Template, Job and Resource have the same Source Code and Resource and Job have equal priorities
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC", Priority = 1
      SourceCode := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      CreateDimensionWithPriority(SourceCode,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCode,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC"
      RunSuggestJobJnlLinesReport(SourceCode);

      // [THEN] Job Journal Line for "R" created with Dimension "DD2"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeJobOnJobJnlDimPriorityJob@47();
    VAR
      JobTask@1000 : Record 1001;
      SourceCodeJob@1007 : Code[10];
      SourceCodeResource@1004 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Job's dimension if Template and Job have Source Code differs from Resource one and Job priority higher then Resource
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 2
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,2);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC1"
      RunSuggestJobJnlLinesReport(SourceCodeJob);

      // [THEN] Job Journal Line for "R" created with Dimension "DD1"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeJobOnJobJnlDimPriorityResource@44();
    VAR
      JobTask@1001 : Record 1001;
      SourceCodeJob@1000 : Code[10];
      SourceCodeResource@1003 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Job's dimension if Template and Job have Source Code differs from Resource one and Resource priority higher then Job
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 2
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 1
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",2);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC1"
      RunSuggestJobJnlLinesReport(SourceCodeJob);

      // [THEN] Job Journal Line for "R" created with Dimension "DD1"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeJobOnJobJnlNoDimPriorities@41();
    VAR
      JobTask@1001 : Record 1001;
      SourceCodeJob@1000 : Code[10];
      SourceCodeResource@1004 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Job's dimension if Template and Job have Source Code differs from Resource one and Resource and Job have equal priorities
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 1
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC1"
      RunSuggestJobJnlLinesReport(SourceCodeJob);

      // [THEN] Job Journal Line for "R" created with Dimension "DD1"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeResourceOnJobJnlDimPriorityJob@68();
    VAR
      JobTask@1000 : Record 1001;
      SourceCodeJob@1007 : Code[10];
      SourceCodeResource@1004 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Resource's dimension if Template and Resource have Source Code differs from Job one and Job priority higher then Resource
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 2
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,2);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC2"
      RunSuggestJobJnlLinesReport(SourceCodeResource);

      // [THEN] Job Journal Line for "R" created with Dimension "DD2"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeResourceOnJobJnlDimPriorityResource@71();
    VAR
      JobTask@1000 : Record 1001;
      SourceCodeJob@1007 : Code[10];
      SourceCodeResource@1004 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Resource's dimension if Template and Resource have Source Code differs from Job one and Resource priority higher then Job
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 2
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 1
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",2);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC2"
      RunSuggestJobJnlLinesReport(SourceCodeResource);

      // [THEN] Job Journal Line for "R" created with Dimension "DD2"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    [HandlerFunctions(JobJournalLineHandler,ConfirmHandler)]
    PROCEDURE SuggLinFromTSheetSourceCodeResourceOnJobJnlNoDimPriorities@73();
    VAR
      JobTask@1000 : Record 1001;
      SourceCodeJob@1007 : Code[10];
      SourceCodeResource@1004 : Code[10];
      ResourceNo@1002 : Code[20];
      PriorityGlobalDimValue@1005 : Code[20];
    BEGIN
      // [FEATURE] [Job Journal] [Dimension] [Suggest Job Jnl. Lines]
      // [SCENARIO 380110] Inherit Resource's dimension if Template and Resource have Source Code differs from Job one and Resource and Job have equal priorities
      Initialize;

      // [GIVEN] Dimension "DD1" where "Source Code" = "SC1", Priority = 1
      // [GIVEN] Dimension "DD2" where "Source Code" = "SC2", Priority = 1
      SourceCodeJob := CreateSourceCode;
      SourceCodeResource := CreateSourceCode;

      // [GIVEN] Job "J" with Default Dimension "DD1"
      CreateJobAndJobTask(JobTask);
      CreateDimensionWithPriority(SourceCodeJob,DATABASE::Job,JobTask."Job No.",1);

      // [GIVEN] Resource "R" with Default Dimension "DD2"
      ResourceNo := CreateJobTimeSheet(JobTask."Job No.",JobTask."Job Task No.");
      PriorityGlobalDimValue := CreateDimensionWithPriority(SourceCodeResource,DATABASE::Resource,ResourceNo,1);

      // [WHEN] Run "Suggest Job journal lines" in Job Journal Template, where Source Code = "SC2"
      RunSuggestJobJnlLinesReport(SourceCodeResource);

      // [THEN] Job Journal Line for "R" created with Dimension "DD2"
      VerifyDimensionOfJobJournalLine(JobTask."Job No.",ResourceNo,PriorityGlobalDimValue);
    END;

    [Test]
    PROCEDURE InsertTimeSheetHeaderBlockedResource@56();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot create time sheet header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      LibraryResource.SetResourceBlocked(Resource);

      TimeSheetHeader.INIT;
      TimeSheetHeader."Resource No." := Resource."No.";
      ASSERTERROR TimeSheetHeader.INSERT(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE ValidateTimeSheetHeaderBlockedResource@78();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot set blocked resource in time sheet header
      LibraryResource.CreateResourceWithUsers(Resource);

      TimeSheetHeader.INIT;
      TimeSheetHeader.INSERT(TRUE);

      LibraryResource.SetResourceBlocked(Resource);

      ASSERTERROR TimeSheetHeader.VALIDATE("Resource No.",Resource."No.");

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE ModifyTimeSheetHeaderBlockedResource@57();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1000 : Record 950;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot modify resource header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");

      LibraryResource.SetResourceBlocked(Resource);

      TimeSheetHeader.VALIDATE("Starting Date",WORKDATE);
      ASSERTERROR TimeSheetHeader.MODIFY(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE RenameTimeSheetHeaderBlockedResource@76();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1000 : Record 950;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot rename resource header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");

      LibraryResource.SetResourceBlocked(Resource);

      ASSERTERROR TimeSheetHeader.RENAME(LibraryUtility.GenerateGUID);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE DeleteTimeSheetHeaderBlockedResource@62();
    VAR
      Resource@1001 : Record 156;
      TimeSheetHeader@1000 : Record 950;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot delete resource header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");

      LibraryResource.SetResourceBlocked(Resource);

      ASSERTERROR TimeSheetHeader.DELETE(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE InsertTimeSheetLineBlockedResource@74();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1002 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot insert time sheet line into header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");

      LibraryResource.SetResourceBlocked(Resource);

      TimeSheetLine.INIT;
      TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
      ASSERTERROR TimeSheetLine.INSERT(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE ModifyTimeSheetLineBlockedResource@66();
    VAR
      Resource@1002 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot modify time sheet line in header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");
      MockTimeSheetLine(TimeSheetLine,TimeSheetHeader."No.");

      LibraryResource.SetResourceBlocked(Resource);

      TimeSheetLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      ASSERTERROR TimeSheetLine.MODIFY(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    [Test]
    PROCEDURE DeleteTimeSheetLineBlockedResource@65();
    VAR
      Resource@1002 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223058] Cassie cannot delete time sheet line from header refered to blocked resource
      LibraryResource.CreateResourceWithUsers(Resource);

      MockTimeSheetHeader(TimeSheetHeader,Resource."No.");
      MockTimeSheetLine(TimeSheetLine,TimeSheetHeader."No.");

      LibraryResource.SetResourceBlocked(Resource);

      ASSERTERROR TimeSheetLine.DELETE(TRUE);

      Assert.ExpectedError(ResourceBlockedErr);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateTimesheetResource@22(VAR Resource@1008 : Record 156;VAR UserSetup@1009 : Record 91);
    BEGIN
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.VALIDATE("Time Sheet Approver User ID",UserSetup."User ID");
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTimeSheet@36(VAR TimeSheetLine@1000 : Record 951) : Code[20];
    VAR
      TimeSheetHeader@1001 : Record 950;
    BEGIN
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetLine."Time Sheet Starting Date",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Random values taken for Time Sheet Starting Date.
      EXIT(TimeSheetHeader."No.");
    END;

    LOCAL PROCEDURE CreateJobTimeSheet@45(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20]) : Code[20];
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetDetail@1003 : Record 952;
    BEGIN
      TimeSheetHeader.GET(CreateTimeSheet(TimeSheetLine));
      TimeSheetLine.Type := TimeSheetLine.Type::Job;
      TimeSheetLine.Status := TimeSheetLine.Status::Approved;
      TimeSheetLine."Job No." := JobNo;
      TimeSheetLine."Job Task No." := JobTaskNo;
      TimeSheetLine.MODIFY;
      TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      TimeSheetDetail.FINDFIRST;
      TimeSheetDetail."Job No." := JobNo;
      TimeSheetDetail."Job Task No." := JobTaskNo;
      TimeSheetDetail.MODIFY;
      EXIT(TimeSheetHeader."Resource No.");
    END;

    LOCAL PROCEDURE CreateResourceJournalTemplate@14(VAR ResJournalTemplate@1000 : Record 206);
    BEGIN
      LibraryResource.CreateResourceJournalTemplate(ResJournalTemplate);
      ResJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ResJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyResourceJournalLine@21(VAR ResJournalLine@1000 : Record 207;ResJournalBatch@1007 : Record 236;TimeSheetLine@1001 : Record 951;ResourceNo@1003 : Code[20]);
    BEGIN
      LibraryResource.CreateResJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name);
      ResJournalLine.VALIDATE("Resource No.",ResourceNo);
      ResJournalLine.VALIDATE("Posting Date",WORKDATE);
      ResJournalLine.VALIDATE("Document No.",ResourceNo);
      ResJournalLine.VALIDATE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      ResJournalLine.VALIDATE("Time Sheet Line No.",TimeSheetLine."Line No.");
      ResJournalLine.VALIDATE("Time Sheet Date",TimeSheetLine."Time Sheet Starting Date");
      ResJournalLine.VALIDATE(Quantity,LibraryRandom.RandDec(100,2));  // Use Random Quantity because value is not important.
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobAndJobTask@11(VAR JobTask@1001 : Record 1001);
    VAR
      Job@1002 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateUserSetupAndResource@28(VAR Resource@1000 : Record 156;VAR UserSetup@1001 : Record 91);
    BEGIN
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.VALIDATE("Time Sheet Approver User ID",UserSetup."User ID");
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateUserSetupAndTimeSheet@27(VAR TimeSheetHeader@1005 : Record 950);
    VAR
      UserSetup@1006 : Record 91;
      Resource@1000 : Record 156;
      ResourcesSetup@1004 : Record 314;
      AccountingPeriod@1002 : Record 50;
      Date@1003 : Record 2000000007;
      TimeSheetLine@1007 : Record 951;
      CreateTimeSheets@1001 : Report 950;
    BEGIN
      // Function creates User Setup, Time Sheet Resource and Time Sheet.

      // Create User Setup.
      CreateUserSetupAndResource(Resource,UserSetup);
      ResourcesSetup.GET;

      // Find first open Accounting Period.
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // Find first DOW after Accounting Period starting date.
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETFILTER("Period Start",'%1..',AccountingPeriod."Starting Date");
      Date.SETRANGE("Period No.",ResourcesSetup."Time Sheet First Weekday" + 1);  // Here 1 is taken to get first working day of weekday.
      Date.FINDFIRST;

      // Create Time Sheet.
      CreateTimeSheets.InitParameters(Date."Period Start",1,Resource."No.",FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;

      // Find created Time Sheet.
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      TimeSheetHeader.FINDFIRST;

      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');  // Take Blank for Job No., Job Task No.,Service Ledger Entry No.,Blank for Cause Of Absence Code.
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetLine."Time Sheet Starting Date",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Random values taken for Time Sheet Starting Date.
    END;

    LOCAL PROCEDURE OpenTimeSheetListAndEnterComments@26(TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetList@1000 : TestPage 951;
      TimeSheetCommentSheet@1001 : TestPage 955;
    BEGIN
      TimeSheetList.OPENVIEW;
      TimeSheetList.FILTER.SETFILTER("No.",TimeSheetHeaderNo);
      TimeSheetCommentSheet.TRAP;
      TimeSheetList.Comments.INVOKE;
      TimeSheetCommentSheet.Comment.SETVALUE(STRSUBSTNO(TimeSheetComment,TimeSheetHeader.TABLECAPTION));
      TimeSheetList.CLOSE;
    END;

    LOCAL PROCEDURE OpenTimeSheetAndEnterComments@25(VAR TimeSheet@1001 : TestPage 950;TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetLine@1002 : Record 951;
      TimeSheetCommentSheet@1000 : TestPage 955;
    BEGIN
      TimeSheet.OPENVIEW;
      TimeSheet.CurrTimeSheetNo.SETVALUE(TimeSheetHeaderNo);
      TimeSheetCommentSheet.TRAP;
      TimeSheet.LineComments.INVOKE;
      TimeSheetCommentSheet.Comment.SETVALUE(STRSUBSTNO(TimeSheetComment,TimeSheetLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE DeleteTimeSheetAndResource@24(No@1003 : Code[20];ResourceNo@1001 : Code[20]);
    VAR
      Resource@1002 : Record 156;
      TimeSheetHeader@1000 : Record 950;
    BEGIN
      TimeSheetHeader.GET(No);
      TimeSheetHeader.DELETE(TRUE);
      Resource.GET(ResourceNo);
      Resource.DELETE(TRUE);
    END;

    LOCAL PROCEDURE UpdateTimeSheetLine@20(No@1001 : Code[20]);
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      TimeSheetLine.SETRANGE("Time Sheet No.",No);
      TimeSheetLine.FINDFIRST;
      TimeSheetLine.VALIDATE(Posted,TRUE);
      TimeSheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ManagerTimeSheetApproval@55(TimeSheetHeaderNo@1001 : Code[20]);
    VAR
      ManagerTimeSheet@1000 : TestPage 952;
    BEGIN
      ManagerTimeSheet.OPENVIEW;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeaderNo;
      ManagerTimeSheet.Approve.INVOKE;
      ManagerTimeSheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateJobJournalLine@77(VAR JobJournalLine@1002 : Record 210;SourceCode@1000 : Code[10]);
    VAR
      JobJournalBatch@1005 : Record 237;
      JobJournalTemplate@1004 : Record 209;
    BEGIN
      LibraryJob.CreateJobJournalTemplate(JobJournalTemplate);
      JobJournalTemplate.VALIDATE("Source Code",SourceCode);
      JobJournalTemplate.MODIFY(TRUE);
      LibraryJob.CreateJobJournalBatch(JobJournalTemplate.Name,JobJournalBatch);
      JobJournalLine.INIT;
      JobJournalLine.VALIDATE("Journal Template Name",JobJournalTemplate.Name);
      JobJournalLine.VALIDATE("Journal Batch Name",JobJournalBatch.Name);
      JobJournalLine.VALIDATE("Source Code",SourceCode);
      JobJournalLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateSourceCode@40() : Code[10];
    VAR
      SourceCode@1000 : Record 230;
    BEGIN
      LibraryERM.CreateSourceCode(SourceCode);
      EXIT(SourceCode.Code);
    END;

    LOCAL PROCEDURE CreateDefaultDimension@70(TableID@1003 : Integer;RecordCode@1004 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,TableID,RecordCode,
        DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionWithPriority@46(SourceCode@1005 : Code[10];TableID@1003 : Integer;RecordCode@1004 : Code[20];Priority@1006 : Integer) DimValue : Code[20];
    VAR
      DefaultDimensionPriority@1002 : Record 354;
    BEGIN
      DimValue := CreateDefaultDimension(TableID,RecordCode);
      LibraryDimension.CreateDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,TableID);
      DefaultDimensionPriority.VALIDATE(Priority,Priority);
      DefaultDimensionPriority.MODIFY(TRUE);
      EXIT(DimValue);
    END;

    LOCAL PROCEDURE RunSuggestJobJnlLinesReport@49(SourceCode@1000 : Code[10]);
    VAR
      JobJournalLine@1001 : Record 210;
      SuggestJobJnlLines@1002 : Report 952;
    BEGIN
      CreateJobJournalLine(JobJournalLine,SourceCode);
      COMMIT;
      SuggestJobJnlLines.SetJobJnlLine(JobJournalLine);
      SuggestJobJnlLines.RUN;
    END;

    LOCAL PROCEDURE MockTimeSheetHeader@79(VAR TimeSheetHeader@1000 : Record 950;ResourceNo@1001 : Code[20]);
    BEGIN
      TimeSheetHeader.INIT;
      TimeSheetHeader."Resource No." := ResourceNo;
      TimeSheetHeader.INSERT;
    END;

    LOCAL PROCEDURE MockTimeSheetLine@81(VAR TimeSheetLine@1000 : Record 951;TimeSheetNo@1001 : Code[20]);
    BEGIN
      TimeSheetLine.INIT;
      TimeSheetLine."Time Sheet No." := TimeSheetNo;
      TimeSheetLine."Line No." := LibraryUtility.GetNewRecNo(TimeSheetLine,TimeSheetLine.FIELDNO("Line No."));
      TimeSheetLine.INSERT;
    END;

    LOCAL PROCEDURE VerifyCommentsOnTimeSheetHeader@59(TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetList@1001 : TestPage 951;
      TimeSheetCommentSheet@1000 : TestPage 955;
    BEGIN
      TimeSheetList.OPENVIEW;
      TimeSheetList.FILTER.SETFILTER("No.",TimeSheetHeaderNo);
      TimeSheetCommentSheet.TRAP;
      TimeSheetList.Comments.INVOKE;
      TimeSheetCommentSheet.Comment.ASSERTEQUALS(STRSUBSTNO(TimeSheetComment,TimeSheetHeader.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCommentsOnTimeSheetLine@60(TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetLine@1002 : Record 951;
      TimeSheet@1001 : TestPage 950;
      TimeSheetCommentSheet@1000 : TestPage 955;
    BEGIN
      TimeSheet.OPENVIEW;
      TimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeaderNo;
      TimeSheetCommentSheet.TRAP;
      TimeSheet.LineComments.INVOKE;
      TimeSheetCommentSheet.Comment.ASSERTEQUALS(STRSUBSTNO(TimeSheetComment,TimeSheetLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCommentsOnManagerTimeSheetHeader@30(TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetHeader@1002 : Record 950;
      ManagerTimeSheetList@1001 : TestPage 953;
      TimeSheetCommentSheet@1000 : TestPage 955;
    BEGIN
      ManagerTimeSheetList.OPENVIEW;
      ManagerTimeSheetList.FILTER.SETFILTER("No.",TimeSheetHeaderNo);
      TimeSheetCommentSheet.TRAP;
      ManagerTimeSheetList.Comments.INVOKE;
      TimeSheetCommentSheet.Comment.ASSERTEQUALS(STRSUBSTNO(TimeSheetComment,TimeSheetHeader.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCommentsOnManagerTimeSheetLine@31(TimeSheetHeaderNo@1003 : Code[20]);
    VAR
      TimeSheetLine@1002 : Record 951;
      ManagerTimeSheet@1001 : TestPage 952;
      TimeSheetCommentSheet@1000 : TestPage 955;
    BEGIN
      ManagerTimeSheet.OPENVIEW;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeaderNo;
      TimeSheetCommentSheet.TRAP;
      ManagerTimeSheet.LineComments.INVOKE;
      TimeSheetCommentSheet.Comment.ASSERTEQUALS(STRSUBSTNO(TimeSheetComment,TimeSheetLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyDimensionOfJobJournalLine@63(JobNo@1000 : Code[20];ResourceNo@1003 : Code[20];ExpectedDimValue@1001 : Code[20]);
    VAR
      JobJournalLine@1002 : Record 210;
    BEGIN
      JobJournalLine.SETRANGE("Job No.",JobNo);
      JobJournalLine.FINDFIRST;
      JobJournalLine.TESTFIELD(Type,JobJournalLine.Type::Resource);
      JobJournalLine.TESTFIELD("No.",ResourceNo);
      JobJournalLine.TESTFIELD("Shortcut Dimension 1 Code",ExpectedDimValue);
    END;

    [RequestPageHandler]
    PROCEDURE TimeSheetHandler@4(VAR CreateTimeSheets@1000 : TestRequestPage 950);
    BEGIN
      CreateTimeSheets.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ResourceJournalLineHandler@7(VAR SuggestResJnlLines@1000 : TestRequestPage 951);
    BEGIN
      SuggestResJnlLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ResourceJournalTemplateListHandler@15(VAR ResJournalTemplateList@1000 : TestPage 271);
    BEGIN
      ResJournalTemplateList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobJournalLineHandler@16(VAR SuggestJobJnlLines@1000 : TestRequestPage 952);
    BEGIN
      SuggestJobJnlLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobJournalTemplateListHandler@12(VAR JobJournalTemplateList@1000 : TestPage 275);
    BEGIN
      JobJournalTemplateList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE MoveTimeSheetHandler@29(VAR MoveTimeSheetsToArchive@1000 : TestRequestPage 953);
    BEGIN
      MoveTimeSheetsToArchive."Time Sheet Header".SETFILTER("No.",TimeSheetNo);
      MoveTimeSheetsToArchive.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@48(Message@1000 : Text[1024]);
    BEGIN
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@35(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@43(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Time Sheet] [Resource]
      Unsupported version tags:
      SE: Unable to Execute

      Test Time Sheet functionality.
        1. Verify that Time Sheet List page is opened and not allowed to reopen.
        2. Verify that Manager Time Sheet List page is opened and not allowed to reopen.
        3. Verify that Create Time Sheet menu is working and creating timesheet.
        4. Verify that Time Sheet Archive List page is opened and not allowed to reopen.
        5. Check that Move Time Sheets to Archive Report is working.
        6. Verify that Manager Time Sheet Archives List page is opened and not allowed to reopen.
        7. Check fields on Resource Card page.
        8. Verify that Create Time Sheet Menu is exists on Resource page.
        9. Check fields on the Resource Journal Line.
        10. Check that Suggest Lines from Time Sheets link is exists on Resource Journal.
        11. Check fields on the Job Journal Line.
        12. Check that Suggest Lines from Time Sheets exists menu of Job Journal Line.
        13. Check fields on Resources Setup page.
        14. Check comments entered on both TimeSheet Header and TimeSheet Line.
        15. Check comments are removed after deletion of TimeSheet Line.
        16. Check comments on Manager TimeSheet Header and Line.
        17. Check comments on both TimeSheet Header and TimeSheet Line after rejection.
        18. Check comments entered on Manager TimeSheet Header and TimeSheet Line after approval.
        19. Check comments after Archiving TimeSheet.
        20. Check that User Id has been granted Time Sheet Administrator permissions successfully or not.
        21. Check that Time Sheet Line has been deleted or not.

        Covers Test Cases for WI: 269911
        ------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                      TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------------------
        TimeSheetListPage,ManagerTimeSheetListPage,CreateTimeSheetMenu,TimeSheetArchivesPage,MoveTimeSheetsToArchiveBatch                       254658
        ManagerTimeSheetArchivesPage,ResourceCard,CreateTimeSheetsForResource,ResourceJournalLine                                           254658
        MenuSuggestlLinesFromTimeSheetOnResourceJournal,FieldsOnJobJournalLine,MenuSuggestlLinesFromTimeSheetOnJobJournal,ResourceSetupValidate 254658

        Covers Test Cases for WI: 269912
        ------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                      TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------------------
        CommentsOnTimeSheetHeaderAndLine, TimeSheetCommentsDeletion, ManagerTimeSheetComments,                                                         255169
        RejectManagerTimeSheetLines, SubmitAndApproveTimeSheet, ArchiveTimeSheet.

        Covers Test cases: 269913
        -----------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                      TFS ID
        -----------------------------------------------------------------------------------------------------------------------------------------------
        TimeSheetAdminOnUserSetup                                                                                                               244751

        Covers Test cases: 269914
        -----------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                      TFS ID
        -----------------------------------------------------------------------------------------------------------------------------------------------
        DeleteTimeSheetLine                                                                                                                     244759
    }
    END.
  }
}

