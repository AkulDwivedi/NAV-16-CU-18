OBJECT Codeunit 137352 SCM Inventory Reports - V
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryCosting@1019 : Codeunit 132200;
      LibraryERMCountryData@1020 : Codeunit 131305;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryItemTracking@1003 : Codeunit 130502;
      LibraryPurchase@1011 : Codeunit 130512;
      LibraryWarehouse@1007 : Codeunit 132204;
      LibraryReportDataset@1028 : Codeunit 131007;
      LibrarySales@1016 : Codeunit 130509;
      LibraryUtility@1015 : Codeunit 131000;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryPatterns@1008 : Codeunit 132212;
      isInitialized@1000 : Boolean;
      ChangeBillToCustomerNo@1021 : TextConst 'ENU=Do you want to change';
      EndingDateError@1004 : TextConst 'ENU=Enter the ending date';
      LocationFilter@1009 : TextConst 'ENU=%1|%2';
      PeriodLengthError@1005 : TextConst 'ENU=The minimum permitted value is 1D';
      UndoSalesShptMessage@1012 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      UndoSalesRetRcptMessage@1014 : TextConst 'ENU=Do you really want to undo the selected Return Receipt lines?';
      ItemMustNotBeReportedErr@1013 : TextConst '@@@="%1 = Item No.";ENU=Item %1 must not be included in the report.';
      WrongCustomerErr@1017 : TextConst 'ENU=Wrong Customer No. in the report.';

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportSalesQuote@12();
    VAR
      SalesLine@1000 : Record 37;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Sales Quote.

      // Setup: Create and post Purchase Order, create Sales Quote.
      Initialize;
      SalesDocumentForItemTrackingAppendixReport(SalesLine."Document Type"::Quote,DocType::"Sales Quote");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportSalesOrder@7();
    VAR
      SalesLine@1000 : Record 37;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Sales Order.

      // Setup: Create and post Purchase Order, create Sales Order.
      Initialize;
      SalesDocumentForItemTrackingAppendixReport(SalesLine."Document Type"::Order,DocType::"Sales Order");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportSalesInv@5();
    VAR
      SalesLine@1000 : Record 37;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Sales Invoice.

      // Setup: Create and post Purchase Order, create Sales Invoice.
      Initialize;
      SalesDocumentForItemTrackingAppendixReport(SalesLine."Document Type"::Invoice,DocType::"Sales Invoice");
    END;

    LOCAL PROCEDURE SalesDocumentForItemTrackingAppendixReport@37(DocumentType@1008 : Option;DocType@1007 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order');
    VAR
      SalesLine@1000 : Record 37;
      LotNo@1001 : Variant;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Create and post Purchase Order, create Sales Document.
      LotNo := PostPurchaseOrderAndCreateSalesDoc(SalesLine,DocumentType,TrackingOption::SelectEntries);
      EnqueueValuesForItemTrackingAppendixReport(DocType,SalesLine."Document No.",SalesLine."No.");

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify Lot No. on Item Tracking Appendix Report Report.
      VerifyLotNoOnItemTrackingAppendixReport(SalesLine."No.",LotNo,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPstdSalesShpt@14();
    VAR
      SalesLine@1000 : Record 37;
      SalesHeader@1008 : Record 36;
      LotNo@1001 : Variant;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries';
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Posted Sales Shipment.

      // Setup: Create and post Purchase Order, create and post Sales Order.
      Initialize;
      LotNo := PostPurchaseOrderAndCreateSalesDoc(SalesLine,SalesLine."Document Type"::Order,TrackingOption::SelectEntries);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      EnqueueValuesForItemTrackingAppendixReport(DocType::"Sales Post. Shipment",DocumentNo,SalesLine."No.");

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify: Verify  Lot No. on Item Tracking Appendix Report.
      VerifyLotNoOnItemTrackingAppendixReport(SalesLine."No.",LotNo,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportSalesCrMemo@32();
    VAR
      SalesLine@1000 : Record 37;
      LotNo@1002 : Variant;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries';
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Sales Credit Memo.

      // Setup: Create and post Purchase Order, create Sales Credit Memo.
      Initialize;
      PostPurchaseOrderAndCreateSalesDoc(SalesLine,SalesLine."Document Type"::"Credit Memo",TrackingOption::AssignLotNo);
      LibraryVariableStorage.Dequeue(LotNo);
      EnqueueValuesForItemTrackingAppendixReport(DocType::"Sales Credit Memo",SalesLine."Document No.",SalesLine."No.");

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify: Verify  Lot No. on Item Tracking Appendix Report.
      VerifyLotNoOnItemTrackingAppendixReport(SalesLine."No.",LotNo,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportSalesRetOrder@1();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1000 : Record 37;
      LotNo@1001 : Variant;
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries';
      DocumentType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Lot No. on Item Tracking Appendix Report for Sales Return Order.

      // Setup: Create and post Purchase Order, create and post Sales Order, Create Sales Return Order using copy document.
      Initialize;
      LotNo := PostPurchaseOrderAndCreateSalesDoc(SalesLine,SalesLine."Document Type"::Order,TrackingOption::SelectEntries);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesLine."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Invoice",DocumentNo,TRUE,FALSE);  // Set TRUE for Include Header and FALSE for Recalculate Lines.
      EnqueueValuesForItemTrackingAppendixReport(DocType::"Sales Return Order",SalesHeader."No.",SalesLine."No.");
      COMMIT;

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify: Verify  Lot No. on Item Tracking Appendix Report.
      VerifyLotNoOnItemTrackingAppendixReport(SalesLine."No.",LotNo,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPurchQuote@11();
    VAR
      PurchaseLine@1001 : Record 39;
      DocType@1006 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Quote.

      // Setup: Create Purchase Quote with Item Tracking.
      Initialize;
      PurchDocumentForItemTrackingAppendixReport(PurchaseLine."Document Type"::Quote,DocType::"Purch. Quote");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPurchOrder@79();
    VAR
      PurchaseLine@1001 : Record 39;
      DocType@1000 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Order.

      // Setup: Create Purchase Order with Item Tracking.
      Initialize;
      PurchDocumentForItemTrackingAppendixReport(PurchaseLine."Document Type"::Order,DocType::"Purch. Order");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPurchInv@80();
    VAR
      PurchaseLine@1001 : Record 39;
      DocType@1000 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Invoice.

      // Setup: Create Purchase Invoice with Item Tracking.
      Initialize;
      PurchDocumentForItemTrackingAppendixReport(PurchaseLine."Document Type"::Invoice,DocType::"Purch. Invoice");
    END;

    LOCAL PROCEDURE PurchDocumentForItemTrackingAppendixReport@48(DocumentType@1009 : Option;DocType@1008 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order');
    VAR
      PurchaseLine@1001 : Record 39;
      SerialNo@1005 : Variant;
      LotNo@1004 : Variant;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Create Purchase Document with Item Tracking.
      CreatePurchaseDocumentWithIT(PurchaseLine,DocumentType,TrackingOption::AssignSerialNo,TRUE,'','');
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryVariableStorage.Dequeue(LotNo);
      EnqueueValuesForItemTrackingAppendixReport(DocType,PurchaseLine."Document No.",PurchaseLine."No.");

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify: Verify  Lot No. and Serial No. on Item Tracking Appendix Report.
      VerifyItemTrackingAppendixReport(PurchaseLine."No.",LotNo,SerialNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPurchCrMemo@15();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Credit Memo.

      // Setup: Create and post Purchase Order with Item Tracking, create Purchase Credit Memo using copy document.
      Initialize;
      PurchDocumentUsingCopyDocument(PurchaseHeader."Document Type"::"Credit Memo",DocType::"Purch. Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE ItemTrackingAppendixReportPurchRetOrder@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      DocType@1005 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      // Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Return Order.

      // Setup: Create and post Purchase Order with Item Tracking, create Purchase return Order using copy document.
      Initialize;
      PurchDocumentUsingCopyDocument(PurchaseHeader."Document Type"::"Return Order",DocType::"Purch. Return Order");
    END;

    LOCAL PROCEDURE PurchDocumentUsingCopyDocument@23(DocumentType@1005 : Option;DocType@1015 : Option);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseHeader@1013 : Record 38;
      LotNo@1006 : Variant;
      SerialNo@1007 : Variant;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries';
      DocumentType2@1001 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Create and post Purchase Order with Item Tracking, create Purchase Document using copy document.
      CreatePurchaseDocumentWithIT(PurchaseLine,PurchaseLine."Document Type"::Order,TrackingOption::AssignSerialNo,TRUE,'','');
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryVariableStorage.Dequeue(LotNo);
      PostPurchaseOrder(PurchaseLine,FALSE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType2::Order,PurchaseLine."Document No.",TRUE,FALSE);  // Set TRUE for Include Header and FALSE for Recalculate Lines.
      FindPurchaseLine(PurchaseLine,PurchaseHeader);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      EnqueueValuesForItemTrackingAppendixReport(DocType,PurchaseHeader."No.",PurchaseLine."No.");

      // Exercise: Run Item Tracking Appendix Report.
      RunItemTrackingAppendixReport;

      // Verify: Verify  Lot No. and Serial No. on Item Tracking Appendix Report.
      VerifyItemTrackingAppendixReport(PurchaseLine."No.",LotNo,SerialNo);
    END;

    [Test]
    [HandlerFunctions(ItemExpirationQuantityRequestPageHandler)]
    PROCEDURE ItemExpirationQuantityReportEndDateError@16();
    BEGIN
      // Verify error for blank Ending Date on Item Expiration Quantity report.
      ItemExpirationQuantityReportError(0D,'<1M>',EndingDateError);  // Use 1M for monthly Period 0D for Ending Date.
    END;

    [Test]
    [HandlerFunctions(ItemExpirationQuantityRequestPageHandler)]
    PROCEDURE ItemExpirationQuantityReportPeriodLengthError@34();
    BEGIN
      // Verify error for Period length less than 1M on Item Expiration Quantity report.
      ItemExpirationQuantityReportError(WORKDATE,'<0M>',PeriodLengthError);  // Use 0M for monthly Period.
    END;

    LOCAL PROCEDURE ItemExpirationQuantityReportError@65(EndingDate@1004 : Date;PeriodLength@1003 : Text;ExpectedError@1005 : Text[50]);
    VAR
      ItemExpirationQuantity@1000 : Report 5809;
      PeriodLength2@1001 : DateFormula;
    BEGIN
      // Setup: Clear Item Expiration Quantity Report.
      Initialize;
      EVALUATE(PeriodLength2,PeriodLength);
      EnqueueValuesForItemExpirationQuantityReport(EndingDate,PeriodLength2);
      CLEAR(ItemExpirationQuantity);

      // Exercise.
      ASSERTERROR ItemExpirationQuantity.RUN;

      // Verify
      Assert.ExpectedError(ExpectedError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemExpirationQuantityRequestPageHandler)]
    PROCEDURE ItemExpirationQuantityReportWithSameLocation@36();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Verify Item Expiration Quantity Report with same Location.

      // Setup: Create Location, create and post Purchase Order with Item Tracking.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      ItemExpirationQuantityReportWithExpirDate(Location.Code,Location.Code)
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemExpirationQuantityRequestPageHandler)]
    PROCEDURE ItemExpirationQuantityReportWithMultipleLocation@17();
    VAR
      Location@1011 : Record 14;
      Location2@1000 : Record 14;
    BEGIN
      // Verify Item Expiration Quantity Report with multiple Locations.

      // Setup: Create Locations, create and post Purchase Order with Item Tracking.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location2);
      ItemExpirationQuantityReportWithExpirDate(Location.Code,Location2.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesShipmentRequestPageHandler)]
    PROCEDURE SalesShipmentDocumentWithCorrectionLine@55();
    VAR
      SalesLine@1000 : Record 37;
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      // Verify Sales Shipment Report, print with Show Correction Lines.

      // Setup: Create Sales Order, Post and undo Shipment.
      Initialize;
      CreateAndPostSalesDocument(SalesLine,SalesLine."Document Type"::Order,LibraryInventory.CreateItemNo);
      UndoSalesShipment(SalesLine);
      FindShipmentLine(SalesShipmentLine,SalesLine."No.");

      // Exercise.
      COMMIT;
      SaveSalesShipment(SalesShipmentLine."Document No.");

      // Verify: Verify Sales Shipment Report.
      VerifyPostedSalesReport(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ReturnReceiptRequestPageHandler)]
    PROCEDURE SalesRetReceiptDocumentWithCorrectionLine@27();
    VAR
      SalesLine@1000 : Record 37;
      ReturnReceiptLine@1001 : Record 6661;
    BEGIN
      // Verify Sales Return Receipt Report, print with Show Correction Lines.

      // Setup: Create Sales Return Order, Post and undo Return Receipt.
      Initialize;
      CreateAndPostSalesDocument(SalesLine,SalesLine."Document Type"::"Return Order",LibraryInventory.CreateItemNo);
      UndoReturnReceipt(SalesLine);
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine);

      // Exercise.
      COMMIT;
      SaveSalesRetReceipt(ReturnReceiptLine."Document No.");

      // Verify: Verify Sales Return Receipt Report.
      VerifyPostedSalesReport(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PhysInventoryListRequestPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PhysInvListRptWithShowQtyAsTrue@62();
    VAR
      PurchaseLine@1003 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Verify physical Inventory List Report for lot and serial item tracking with ShowTracking as false and ShowQuantity as true.
      Initialize;
      PhysInvListReport(PurchaseLine,'','',TRUE,FALSE);  // Booleans value are respective to ShowQuantity and ShowTracking.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",ItemLedgerEntry."Entry Type"::Purchase);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Serial No.",TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PhysInventoryListRequestPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PhysInvListRptWithShowTrackingAsTrue@73();
    VAR
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Verify physical Inventory List Report for lot and serial item tracking with ShowTracking as false and ShowQuantity as true.
      Initialize;
      PhysInvListReport(PurchaseLine,'','',FALSE,TRUE);  // Booleans value are respective to ShowQuantity and ShowTracking.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",ItemLedgerEntry."Entry Type"::Purchase);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,
        ItemLedgerEntry."Lot No.",ItemLedgerEntry."Serial No.",FALSE,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PhysInventoryListRequestPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PhysInvListRptWithLocAndBin@82();
    VAR
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
      Bin@1002 : Record 7354;
    BEGIN
      // Verify physical Inventory List Report for Location and Bin with ShowTracking and ShowQuantity as False.
      Initialize;
      CreateLocationWithBin(Bin);
      PhysInvListReport(PurchaseLine,Bin."Location Code",Bin.Code,FALSE,FALSE);  // Booleans value are respective to ShowQuantity and ShowTracking.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",ItemLedgerEntry."Entry Type"::Purchase);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,
        ItemLedgerEntry."Lot No.",ItemLedgerEntry."Serial No.",FALSE,FALSE,FALSE);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('LocCode_ItemJournalLine',PurchaseLine."Location Code");
      LibraryReportDataset.AssertCurrentRowValue('BinCode_ItemJournalLine',PurchaseLine."Bin Code");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PhysInventoryListRequestPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PhysInvListRptWithLocAndBinShowTrackingAsTrue@29();
    VAR
      PurchaseLine@1001 : Record 39;
      ItemLedgerEntry@1000 : Record 32;
      Bin@1002 : Record 7354;
    BEGIN
      // Verify physical Inventory List Report for Location and Bin with ShowTracking as true.
      Initialize;
      CreateLocationWithBin(Bin);
      PhysInvListReport(PurchaseLine,Bin."Location Code",Bin.Code,FALSE,TRUE);  // Booleans value are respective to ShowQuantity and ShowTracking.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",ItemLedgerEntry."Entry Type"::Purchase);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,
        ItemLedgerEntry."Lot No.",ItemLedgerEntry."Serial No.",FALSE,TRUE,TRUE);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('LocCode_ItemJournalLine',PurchaseLine."Location Code");
      LibraryReportDataset.AssertCurrentRowValue('BinCode_ItemJournalLine',PurchaseLine."Bin Code");
    END;

    LOCAL PROCEDURE PhysInvListReport@115(VAR PurchaseLine@1006 : Record 39;LocationCode@1009 : Code[10];BinCode@1010 : Code[20];ShowQuantity@1005 : Boolean;ShowTracking@1003 : Boolean);
    VAR
      ItemJournalBatch@1000 : Record 233;
      TrackingOption@1001 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Setup: Create Item with lot and serial Tracking Code, create and post Purchase Order with Tracking Lines. Run Calculate Inventory on Phys. Inventory Journal.
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,TrackingOption::AssignSerialNo,LocationCode,BinCode,TRUE);  // TRUE for SN Specific.
      CreatePhysInventoryJournalBatch(ItemJournalBatch);
      RunCalculateInventoryReport(ItemJournalBatch,PurchaseLine."No.",'',FALSE);  // False for Item not on inventory.
      EnqueueValuesForPhysInvListReport(ShowQuantity,ShowTracking);

      // Exercise:
      RunPhysInventoryListReport(ItemJournalBatch);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,PhysInventoryListRequestPageHandler)]
    PROCEDURE PhysInvListRptWithDiffLocShowTrackingAndQtyAsTrue@41();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1005 : Record 39;
      SerialNo@1009 : ARRAY [2] OF Code[20];
      LotNo@1000 : ARRAY [2] OF Code[20];
    BEGIN
      // Verify physical Inventory List Report for different Location.
      Initialize;
      PhysInvListRptWithDiffLoc(PurchaseLine,PurchaseLine2,SerialNo,LotNo,TRUE,TRUE);  // Booleans value are respective to ShowQuantity and ShowTracking.

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,LotNo[1],SerialNo[1],TRUE,TRUE,TRUE);
      VerifyPhysInventoryListReport(PurchaseLine2."No.",PurchaseLine2.Quantity,LotNo[2],SerialNo[2],TRUE,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PhysInventoryListRequestPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PhysInvListRptWithDiffLocShowQtyAsFalse@54();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1005 : Record 39;
      SerialNo@1007 : ARRAY [2] OF Code[20];
      LotNo@1000 : ARRAY [2] OF Code[20];
    BEGIN
      // Verify physical Inventory List Report for different Location with ShowQuantity as False.
      Initialize;
      PhysInvListRptWithDiffLoc(PurchaseLine,PurchaseLine2,SerialNo,LotNo,FALSE,TRUE);  // Booleans value are respective to ShowQuantity and ShowTracking.

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,LotNo[1],SerialNo[1],FALSE,TRUE,TRUE);
      VerifyPhysInventoryListReport(PurchaseLine2."No.",PurchaseLine2.Quantity,LotNo[2],SerialNo[2],FALSE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PhysInvListRptWithDiffLoc@53(VAR PurchaseLine@1005 : Record 39;VAR PurchaseLine2@1001 : Record 39;VAR SerialNo@1008 : ARRAY [2] OF Code[20];VAR LotNo@1003 : ARRAY [2] OF Code[20];ShowQuantity@1011 : Boolean;ShowTracking@1010 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      ItemJournalBatch@1004 : Record 233;
      ItemLedgerEntry@1000 : Record 32;
      WarehouseActivityLine@1002 : Record 5767;
      TrackingOption@1007 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Setup: Create Item with Tracking Code, create and post Purchase Order with Tracking Lines.
      CreateLocationWithBin(Bin);
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,TrackingOption::AssignSerialNo,Bin."Location Code",Bin.Code,TRUE);  // TRUE for SN Specific.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.",ItemLedgerEntry."Entry Type"::Purchase);
      SerialNo[1] := ItemLedgerEntry."Serial No.";
      LotNo[1] := ItemLedgerEntry."Lot No.";

      PostWarehouseReceiptWithPurchaseOrder(PurchaseLine2,SerialNo[2],LotNo[2]);
      RegisterWarehouseActivity(WarehouseActivityLine,PurchaseLine2."Document No.");

      // Create Physical Inventory and Run Calculate Inventory Report.
      CreatePhysInventoryJournalBatch(ItemJournalBatch);
      RunCalculateInventoryReport(ItemJournalBatch,PurchaseLine."No.",PurchaseLine2."No.",FALSE);   // False for Item not on inventory.
      EnqueueValuesForPhysInvListReport(ShowQuantity,ShowTracking);

      // Exercise.
      RunPhysInventoryListReport(ItemJournalBatch);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PhysInventoryListRequestPageHandler)]
    PROCEDURE PhysInvListRptWithItemNotOnInv@45();
    VAR
      SalesLine@1002 : Record 37;
      ItemJournalBatch@1004 : Record 233;
      LotNo@1007 : Variant;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Verify physical Inventory List Report with item Not on inventory.

      // Setup: Create Item with Tracking Code, create and post Purchase Order and sales order with Tracking Lines. Run Calculate Inventory on Phys. Inventory Journal and check Item not on inventory.
      Initialize;
      LotNo := PostPurchaseOrderAndCreateSalesDoc(SalesLine,SalesLine."Document Type"::Order,TrackingOption::SelectEntries);
      PostSalesOrder(SalesLine);
      CreatePhysInventoryJournalBatch(ItemJournalBatch);
      RunCalculateInventoryReport(ItemJournalBatch,SalesLine."No.",'',TRUE);  // True for Item not on inventory.
      EnqueueValuesForPhysInvListReport(TRUE,TRUE);   // Booleans value are respective to ShowQuantity and ShowTracking.

      // Exercise:
      RunPhysInventoryListReport(ItemJournalBatch);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(SalesLine."No.",0,LotNo,'',TRUE,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,PhysInventoryListRequestPageHandler)]
    PROCEDURE PhysInvListRptWithNoWarehouseTracking@25();
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseJournalBatch@1001 : Record 7310;
      ItemJournalBatch@1006 : Record 233;
      PurchaseLine@1000 : Record 39;
      WarehouseJournalTemplate@1003 : Record 7309;
      SerialNo@1005 : Code[20];
      LotNo@1004 : Code[20];
    BEGIN
      // Verify Whse. Phys. Inventory List report when "Show Serial/Lot No" option is checked, if warehouse tracking is defined for a specific Item Tracking Code.
      Initialize;
      PostWarehouseReceiptWithPurchaseOrder(PurchaseLine,SerialNo,LotNo);
      RegisterWarehouseActivity(WarehouseActivityLine,PurchaseLine."Document No.");

      // Create and Register Warehouse Entry.
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::"Physical Inventory");
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,PurchaseLine."Location Code");
      CalculateWarehouseInventory(WarehouseJournalBatch,PurchaseLine."No.",WORKDATE);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,PurchaseLine."Location Code",TRUE);
      EnqueueValuesForPhysInvListReport(TRUE,TRUE);   // Booleans value are respective to ShowQuantity and ShowTracking.

      // Create Physical Inventory and Run Calculate Inventory Report.
      CreatePhysInventoryJournalBatch(ItemJournalBatch);
      RunCalculateInventoryReport(ItemJournalBatch,PurchaseLine."No.",'',FALSE);  // False for Item not on inventory.

      // Exercise:
      RunPhysInventoryListReport(ItemJournalBatch);

      // Verify.
      LibraryReportDataset.LoadDataSetFile;
      VerifyPhysInventoryListReport(PurchaseLine."No.",PurchaseLine.Quantity,LotNo,SerialNo,TRUE,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InventoryCustomersSalesRequestPageHandler)]
    PROCEDURE InvCustomerSalesReportAfterAdjustCost@70();
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify Inventory Customer Sales Report after running Adjust Cost Item Entries.

      // Setup: Create and post Sales Order, create and post Purchase Order and  Adjust Cost Item Entries.
      Initialize;
      SetupForSalesReport(SalesLine);

      // Exercise: Run Inventory Customer Sales Report.
      COMMIT;
      RunInventoryCustomerSalesReport(SalesLine."No.");

      // Verify: Verify Sales Amount and Profit on Inventory Customer Sales Report.
      VerifySalesReportAfterPostSalesOrder(
        SalesLine."No.",SalesLine."Sell-to Customer No.",'No_Item','CustName','SalesAmtActual_ItemLedgEntry','Profit_ItemLedgEntry');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,CustomerItemSalesRequestPageHandler)]
    PROCEDURE ItemSalesReportAfterAdjustCost@68();
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify Item Sales Report after running Adjust Cost Item Entries.

      // Setup: Create and post Sales Order, create and post Purchase Order and  Adjust Cost Item Entries.
      Initialize;
      SetupForSalesReport(SalesLine);

      // Exercise: Run Item Sales Report.
      COMMIT;
      RunItemSalesReport(SalesLine."Bill-to Customer No.");

      // Verify: Verify Sales Amount and Profit on Item Sales Report.
      VerifySalesReportAfterPostSalesOrder(
        SalesLine."No.",SalesLine."Bill-to Customer No.",'ValueEntryBuffer__Item_No__',
        'Customer_Name','ValueEntryBuffer__Sales_Amount__Actual___Control44','Profit_Control46');
    END;

    [Test]
    [HandlerFunctions(InventoryValuationRequestPageHandler)]
    PROCEDURE InvValuationReportAfterPostInvtCostToGL@66();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify Inventory Valuation Report after running Post Inventory To G/L batch job.

      // Setup: Create Item, create and post Purchase Order, create Sales Order, run Adjust Cost Item Entries and Post Inventory To G/L batch job.
      Initialize;
      ItemNo := CreateItem;
      CreateAndPostPurchaseOrder(ItemNo,FALSE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      ModifySalesLineAndPostSalesOrder(SalesLine,SalesHeader,ItemNo);
      LibraryCosting.AdjustCostItemEntries(ItemNo,'');
      LibraryCosting.PostInvtCostToGL(FALSE,WORKDATE,'');

      // Exercise: Run Inventory Valuation Sales Report.
      COMMIT;
      RunInventoryValuationReport(ItemNo);

      // Verify: Verify Decrease Quantity and Amount on Inventory Valuation Report.
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      VerifyInventoryValuationReport(SalesLine,ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [Test]
    [HandlerFunctions(RevaluationPostingTestRequestPageHandler)]
    PROCEDURE PostRevaluationJournalWithLocationMandatory@59();
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Verify Revaluation Posting Report After Posting Revaluation Journal With Location Mandatory.

      // Setup: Create Item, create and post Purchase Order,Create Revaluation Journal.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndPostPurchaseOrder(Item."No.",TRUE);
      UpdateInventorySetup(TRUE);
      CreateItemJournalForRevaluation(ItemJournalLine,Item."No.");

      // Exercise: Run Revaluation Posting Test Report.
      COMMIT;
      RunRevaluationPostingTestReport(Item."No.");

      // Verify: Verify Quantity and Inventory Value Revaluated on Revaluation Posting Test Report.
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.FINDFIRST;
      VerifyRevaluationPostingTestReport(ItemJournalLine);

      // TearDown: TearDown Inventory Setup.
      UpdateInventorySetup(FALSE);
    END;

    [Test]
    [HandlerFunctions(InventoryCostVarianceRequestPageHandler)]
    PROCEDURE PostPurchaseOrderWithItemChargeAssign@102();
    VAR
      Item@1000 : Record 27;
      ItemLedgerEntry@1007 : Record 32;
      PurchaseHeader@1003 : Record 38;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify Document No and Cost per Unit in Inventory Cost variance Report After Posting Purchase Order With Item Charge Assignment.

      // Setup: Create Purchase Order with Item Charge.
      Initialize;
      CreateAndModifyItem(Item,Item."Costing Method"::Standard);
      CreatePurchDocWithItemChargeAssign(PurchaseHeader,Item."No.");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Run Inventory Cost Variance Report.
      RunInventoryCostVarianceReport(Item."No.");

      // Verify: Verify Run Inventory Cost Variance Report.
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDFIRST;
      VerifyInventoryCostVarianceReport(ItemLedgerEntry,Item."Standard Cost",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(CalculateInventoryHandler)]
    PROCEDURE CalculateInventoryForItemsWithoutTransactions@39();
    VAR
      Item@1000 : ARRAY [3] OF Record 27;
      ItemJournalLine@1001 : Record 83;
      Qty@1003 : ARRAY [3] OF Decimal;
      i@1004 : Integer;
    BEGIN
      // [FEATURE] [Calculate Inventory] [Phys. Inventory Journals]
      // [SCENARIO 371783] "Calculate Inventory" Report sets "Qty. (Calculated)" to zero for Items without Transactions
      Initialize;

      // [GIVEN] Item "I1" with quantity on inventory = "Q1"
      LibraryInventory.CreateItem(Item[1]);
      Qty[1] := LibraryRandom.RandDec(10,2);
      LibraryPatterns.POSTPositiveAdjustment(Item[1],'','','',Qty[1],WORKDATE,LibraryRandom.RandDec(10,2));

      // [GIVEN] Items "I2" and "I3" with zero inventory
      LibraryInventory.CreateItem(Item[2]);
      Qty[2] := 0;
      LibraryInventory.CreateItem(Item[3]);
      Qty[3] := 0;

      // [WHEN] Run "Calculate Inventory" Report with "Include Item without Transactions" and "Items Not on Inventory" option
      RunCalculateInventoryRequestPageReport(STRSUBSTNO('%1|%2|%3',Item[1]."No.",Item[2]."No.",Item[3]."No."));

      // [THEN] Three Lines are created: "L1" with Qty = "Q1", "L2" with Qty = 0, "L3" with Qty = 0
      FOR i := 1 TO 3 DO BEGIN
        ItemJournalLine.SETRANGE("Item No.",Item[i]."No.");
        ItemJournalLine.FINDFIRST;
        ItemJournalLine.TESTFIELD("Qty. (Calculated)",Qty[i]);
      END;
    END;

    [Test]
    [HandlerFunctions(StatusRequestPageHandler)]
    PROCEDURE StatusReportIncludesOnlyOpenEntriesFIFOItem@90();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // [FEATURE] [Inventory]
      // [SCENARIO 377883] Only open item ledger entries are included in "Status" report for an item with FIFO costing method

      // [GIVEN] Create item "I" with FIFO costing method
      CreateAndModifyItem(Item,Item."Costing Method"::FIFO);

      // [GIVEN] Post first inbound inventory: Quantity = "Q", "Unit Cost" = "C"
      // [GIVEN] Post second inbound inventory: Quantity = "Q", "Unit Cost" = 2 * "C"
      // [GIVEN] Post outbound inventory: Quantity = "Q" * 1.5
      PostItemPurchaseAndSale(Item."No.");

      // [GIVEN] Run Adjust Cost - Item Entries
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [WHEN] Run "Status" report
      RunStatusReport(Item."No.");

      // [THEN] First inbound entry is closed and not included in the report
      // [THEN] Second inbound entry is open and included in the report, reported quantity = "Q" / 2
      VerifyFIFOItemStatusReport(Item."No.");
    END;

    [Test]
    [HandlerFunctions(StatusRequestPageHandler)]
    PROCEDURE StatusReportIncludesAllEntriesAverageItem@43();
    VAR
      Item@1003 : Record 27;
    BEGIN
      // [FEATURE] [Inventory]
      // [SCENARIO 377883] All item ledger entries are included in "Status" report for an item with Average costing method

      // [GIVEN] Create item "I" with Average costing method
      CreateAndModifyItem(Item,Item."Costing Method"::Average);

      // [GIVEN] Post first inbound inventory: Quantity = "Q", "Unit Cost" = "C"
      // [GIVEN] Post second inbound inventory: Quantity = "Q", "Unit Cost" = 2 * "C"
      // [GIVEN] Post outbound inventory: Quantity = "Q" * 1.5
      PostItemPurchaseAndSale(Item."No.");

      // [GIVEN] Run Adjust Cost - Item Entries
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [WHEN] Run "Status" report
      RunStatusReport(Item."No.");

      // [THEN] All item ledger entries are included in the report, quantity = "Q"
      VerifyAverageItemStatusReport(Item."No.");
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesOnlyExpectedCost@133();
    VAR
      ItemNo@1008 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is not included in the "Customer/Item Sales" report when the report is run on a period that includes only expected cost for the item

      // [GIVEN] Item "I" purchased. Unit cost is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date = WORKDATE
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE,WORKDATE);

      // [THEN] Item is not shown in the report
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ValueEntryBuffer__Item_No__',ItemNo);
      Assert.IsFalse(LibraryReportDataset.GetNextRow,STRSUBSTNO(ItemMustNotBeReportedErr,ItemNo));
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesActualCostNoCharge@105();
    VAR
      ValueEntry@1001 : Record 5802;
      ItemNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is included in the "Customer/Item Sales" report with actual cost when the report is run on a period that includes only actual cost for the item

      // [GIVEN] Item "I" purchased. Cost amount is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date = WORKDATE + 1
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE + 1,WORKDATE + 1);

      // [THEN] Item "I" is present in the report. Quantity = "Q", Sales amount = "P1", Profit = "P1" - "C1"
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Item Charge No.",'');
      VerifyReportItemLine(ItemNo,ValueEntry);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesExpectedAndActualCostNoCharge@116();
    VAR
      ValueEntry@1000 : Record 5802;
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is included in the "Customer/Item Sales" report with actual cost when the report is run on a period that includes both expected and actual cost for the item

      // [GIVEN] Item "I" purchased. Cost amount is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date period from WORKDATE to WORKDATE + 1
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE,WORKDATE + 1);

      // [THEN] Item "I" is present in the report. Quantity = "Q", Sales amount = "P1", Profit = "P1" - "C1"
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Item Charge No.",'');
      VerifyReportItemLine(ItemNo,ValueEntry);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesActualAndChargeNoExpected@139();
    VAR
      ValueEntry@1000 : Record 5802;
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is included in the "Customer/Item Sales" report with actual cost and item charges when the report is run on a period that does not include expected cost

      // [GIVEN] Item "I" purchased. Cost amount is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date period from WORKDATE + 1 to WORKDATE + 2
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE + 1,WORKDATE + 2);

      // [THEN] Item "I" is present in the report. Quantity = "Q", Sales amount = "P1" + "P2", Profit = "P1" + "P2" - "C1" - "C2"
      ValueEntry.SETRANGE("Item No.",ItemNo);
      VerifyReportItemLine(ItemNo,ValueEntry);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesChargesOnly@108();
    VAR
      ItemNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is not included in the "Customer/Item Sales" report when the report is run on a period that includes only item charges and no item cost

      // [GIVEN] Item "I" purchased. Cost amount is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date = WORKDATE + 2
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE + 2,WORKDATE + 2);

      // [THEN] Item is not shown in the report
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ValueEntryBuffer__Item_No__',ItemNo);
      Assert.IsFalse(LibraryReportDataset.GetNextRow,STRSUBSTNO(ItemMustNotBeReportedErr,ItemNo));
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesAllEntries@111();
    VAR
      ValueEntry@1000 : Record 5802;
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] An item is included in the "Customer/Item Sales" report with actual cost and item charges when the report is run on a period that includes all item entries

      // [GIVEN] Item "I" purchased. Cost amount is "C1"
      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P1"
      // [GIVEN] Post shipment on workdate, post invoice on workdate + 1 day
      // [GIVEN] Apply purchase item charge to shipment, cost amount = "C2", posting date = workdate + 2 days
      // [GIVEN] Apply sales item charge to shipment, sales amount = "P2", posting date = workdate + 2 days
      Initialize;
      ItemNo := PostSalesShipAndInvoiceWithItemChargesOnDifferentDates;

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date period from WORKDATE to WORKDATE + 2
      RunItemSalesReportFilterOnPostingDate(ItemNo,WORKDATE,WORKDATE + 2);

      // [THEN] Item "I" is present in the report. Quantity = "Q", Sales amount = "P1" + "P2", Profit = "P1" + "P2" - "C1" - "C2"
      ValueEntry.SETRANGE("Item No.",ItemNo);
      VerifyReportItemLine(ItemNo,ValueEntry);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesPartialInvoicing@161();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      ValueEntry@1004 : Record 5802;
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] When a sales order is partially invoiced on different dates, report "Customer/Item Sales" includes only the amount invoiced on given date

      // [GIVEN] Item "I" purchased. Cost amount is "C"
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndPostPurchaseOrder(Item."No.",TRUE);

      // [GIVEN] Sales order for "Q" pcs of item "I". Sales amount = "P". Post shipment on workdate
      CreateAndPostSalesDocument(SalesLine,SalesLine."Document Type"::Order,Item."No.");

      // [GIVEN] Invoice "Q" / 2 pcs on workdate + 1 day
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      UpdatePostingDateOnSalesHeader(SalesHeader,WORKDATE + 1);
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Invoice",SalesLine.Quantity / 2);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // [GIVEN] Invoice remaining "Q" / 2 pcs on workdate + 2 days
      UpdatePostingDateOnSalesHeader(SalesHeader,WORKDATE + 2);
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date = WORKDATE + 2
      RunItemSalesReportFilterOnPostingDate(Item."No.",WORKDATE + 2,WORKDATE + 2);

      // [THEN] Item "I" is present in the report. Quantity = "Q" / 2, Sales amount = "P" / 2, Profit = ("P" - "C") / 2
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.SETRANGE("Posting Date",WORKDATE + 2);
      VerifyReportItemLine(Item."No.",ValueEntry);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesDifferentShipToAndBillToCustomers@131();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // [FEATURE] [Customer/Item Sales] [Item Charge]
      // [SCENARIO 380354] When Bill-to Customer in a sales order is different from Sell-to Customer, Report "Customer/Item Sales" shows Bill-to Customer

      // [GIVEN] Item "I" purchased. Cost amount is "C"
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndPostPurchaseOrder(Item."No.",TRUE);

      // [GIVEN] Sales order for item "I". Sell-to customer "CU1", bill-to customer "CU2"
      // [GIVEN] Ship and invoice the order
      CreateAndModifySalesHeader(SalesHeader);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      PostSalesInvoiceOnNewPostingDate(SalesLine."Document Type",SalesLine."Document No.",WORKDATE + 1);

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I"
      RunItemSalesReportFilterOnPostingDate(Item."No.",WORKDATE,WORKDATE + 1);

      // [THEN] Customer "CU2" is present in the report
      // [THEN] Customer "CU1" is not reported
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Customer__No__',SalesHeader."Bill-to Customer No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,WrongCustomerErr);

      LibraryReportDataset.SetRange('Customer__No__',SalesHeader."Sell-to Customer No.");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,WrongCustomerErr);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestFilterOnPostingDatePageHandler)]
    PROCEDURE CustomerItemSalesSeveralInvoicesSameCustomerReportedInOneEntry@107();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      ValueEntry@1004 : Record 5802;
    BEGIN
      // [FEATURE] [Customer/Item Sales]
      // [SCENARIO 380354] Several invoices for the same customer and item should be rolled up in one entry in "Customer/Item Sales" report

      // [GIVEN] Item "I" purchased.
      Initialize;
      LibraryInventory.CreateItem(Item);
      PostItemJournalLine(
        Item."No.",LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandInt(1000),ItemJournalLine."Entry Type"::"Positive Adjmt.");

      // [GIVEN] Sales invoice for item "I" in two lines. Line 1: quantity = "Q1", total sales amount = "P1", line 2: quantity = "Q2", total sales amount = "P2"
      CreateSalesDocument(SalesLine,SalesLine."Document Type"::Invoice,Item."No.",LibraryRandom.RandInt(10));
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] Run "Customer/Item Sales" report filtered by item "I" and date = WORKDATE + 2
      RunItemSalesReportFilterOnPostingDate(Item."No.",WORKDATE,WORKDATE);

      // [THEN] Report has one entry for item "I", quantity = "Q1" + "Q2", Sales amount = "P1" + "P2"
      ValueEntry.SETRANGE("Item No.",Item."No.");
      VerifyReportItemLine(Item."No.",ValueEntry);
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignItemTrackingOnPurchLine@91(DocumentNo@1004 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
      SerialNo@1002 : Variant;
      LotNo@1001 : Variant;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;
      REPEAT
        LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
        PurchaseLine.OpenItemTrackingLines;
        LibraryVariableStorage.Dequeue(SerialNo);
        LibraryVariableStorage.Dequeue(LotNo);
      UNTIL PurchaseLine.NEXT = 0
    END;

    LOCAL PROCEDURE CreateAndModifySalesHeader@56(VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CreateCustomer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibraryVariableStorage.Enqueue(ChangeBillToCustomerNo);
      SalesHeader.VALIDATE("Bill-to Customer No.",Customer."No.");
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateTrackedItem@57() : Code[20];
    VAR
      Item@1000 : Record 27;
      ExpirationDate@1001 : DateFormula;
    BEGIN
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,TRUE));  // Use blank value for Serial No.
      EVALUATE(ExpirationDate,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      Item.VALIDATE("Expiration Calculation",ExpirationDate);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@69(VAR SalesLine@1004 : Record 37;DocumentType@1002 : Option;ItemNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CreateSalesDocument(SalesLine,DocumentType,ItemNo,LibraryRandom.RandDec(10,2));  // Use Random Quantity.
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@95(VAR SalesLine@1002 : Record 37;ItemNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateAndModifySalesHeader(SalesHeader);
      ModifySalesLineAndPostSalesOrder(SalesLine,SalesHeader,ItemNo);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithIT@51(VAR PurchaseLine@1000 : Record 39;TrackingOption@1005 : 'AssignSerialNo,AssignLotNo,SelectEntries';LocationCode@1001 : Code[10];BinCode@1004 : Code[20];SNSpecific@1006 : Boolean);
    VAR
      SerialNo@1003 : Variant;
      LotNo@1002 : Variant;
    BEGIN
      CreatePurchaseDocumentWithIT(PurchaseLine,PurchaseLine."Document Type"::Order,TrackingOption,SNSpecific,LocationCode,BinCode);
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryVariableStorage.Dequeue(LotNo);
      PostPurchaseOrder(PurchaseLine,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@89(ItemNo@1000 : Code[20];ToInvoice@1002 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseDoc(PurchaseLine,PurchaseLine."Document Type"::Order,ItemNo);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(10,20,2));  // Use random Value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
      PostPurchaseOrder(PurchaseLine,ToInvoice);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleLines@87(VAR PurchaseLine@1000 : Record 39;LocationCode@1001 : Code[10];LocationCode2@1003 : Code[10]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,CreateAndUpdateTrackedItem,LocationCode);
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,PurchaseLine."No.",LocationCode2);
    END;

    LOCAL PROCEDURE CreateCustomer@67() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@20() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndModifyItem@157(VAR Item@1000 : Record 27;CostingMethod@1001 : Option);
    BEGIN
      Item.GET(CreateItem);
      Item.VALIDATE("Standard Cost",LibraryRandom.RandDec(100,1));  // Using Random value for Standard Cost.
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalForRevaluation@64(VAR ItemJournalLine@1001 : Record 83;ItemNo@1000 : Code[20]);
    VAR
      ItemJournalBatch@1002 : Record 233;
      Item@1003 : Record 27;
      NoSeriesManagement@1006 : Codeunit 396;
      CalculatePer@1005 : 'Item Ledger Entry,Item';
      CalcBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryCosting.CalculateInventoryValue(
        ItemJournalLine,Item,WORKDATE,NoSeriesManagement.GetNextNo(ItemJournalBatch."No. Series",WORKDATE,FALSE),CalculatePer::Item,
        FALSE,FALSE,FALSE,CalcBase::" ",FALSE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@8(SNSpecific@1002 : Boolean;LOTSpecific@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,LOTSpecific);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateLocationWithBin@122(VAR Bin@1000 : Record 7354);
    VAR
      Location@1001 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
    END;

    LOCAL PROCEDURE CreatePurchaseDoc@58(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;ItemNo@1003 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,1 + LibraryRandom.RandInt(100));  // Use random value for Quantity and Quantity must be greater than 1.
    END;

    LOCAL PROCEDURE CreatePurchDocWithItemChargeAssign@163(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20]);
    VAR
      ItemChargeAssignmentPurch@1004 : Record 5805;
      PurchaseLine@1000 : Record 39;
      ChargePurchaseLine@1003 : Record 39;
    BEGIN
      CreatePurchaseDoc(PurchaseLine,PurchaseLine."Document Type"::Order,ItemNo);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.CreatePurchaseLine(
        ChargePurchaseLine,PurchaseHeader,ChargePurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      ChargePurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(10));
      ChargePurchaseLine.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,ChargePurchaseLine,PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",
        PurchaseLine."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithIT@123(VAR PurchaseLine@1002 : Record 39;DocumentType@1005 : Option;TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries';SNSpecific@1001 : Boolean;LocationCode@1004 : Code[10];BinCode@1006 : Code[20]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNSpecific,TRUE));  // Use blank value for Serial No.
      CreatePurchaseDoc(PurchaseLine,DocumentType,Item."No.");
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      IF BinCode <> '' THEN
        PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocation@31(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1002 : Record 38;ItemNo@1003 : Code[20];LocationCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Use random value for Quantity.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithIT@60(VAR SalesLine@1002 : Record 37;DocumentType@1001 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;TrackingOption@1005 : 'AssignSerialNo,AssignLotNo,SelectEntries');
    BEGIN
      CreateSalesDocument(SalesLine,DocumentType,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesDocument@19(VAR SalesLine@1003 : Record 37;DocumentType@1001 : Option;ItemNo@1000 : Code[20];Quantity@1008 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreatePhysInventoryJournalBatch@33(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::"Phys. Inventory");
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CalculateWarehouseInventory@83(WarehouseJournalBatch@1001 : Record 7310;ItemNo@1005 : Code[20];RegisteringDate@1002 : Date);
    VAR
      BinContent@1000 : Record 7302;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      BinContent.INIT;  // To ignore precal error using INIT.
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",WarehouseJournalBatch."Journal Template Name");
      WarehouseJournalLine.VALIDATE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.VALIDATE("Location Code",WarehouseJournalBatch."Location Code");
      BinContent.SETRANGE("Item No.",ItemNo);
      LibraryWarehouse.WhseCalculateInventory(WarehouseJournalLine,BinContent,RegisteringDate,LibraryUtility.GenerateGUID,FALSE);
    END;

    LOCAL PROCEDURE EnqueueValuesForItemTrackingAppendixReport@94(DocType@1000 : Option;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(DocType);
      LibraryVariableStorage.Enqueue(DocumentNo);
      LibraryVariableStorage.Enqueue(ItemNo);
    END;

    LOCAL PROCEDURE EnqueueValuesForItemExpirationQuantityReport@35(EndingDate@1000 : Date;PeriodLength@1001 : DateFormula);
    BEGIN
      LibraryVariableStorage.Enqueue(EndingDate);
      LibraryVariableStorage.Enqueue(PeriodLength);
    END;

    LOCAL PROCEDURE EnqueueValuesForPhysInvListReport@44(ShowQuantity@1001 : Boolean;ShowTracking@1002 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(ShowQuantity);
      LibraryVariableStorage.Enqueue(ShowTracking);
    END;

    LOCAL PROCEDURE FindPurchaseLine@13(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReturnReceiptLine@81(VAR ReturnReceiptLine@1000 : Record 6661;SalesLine@1001 : Record 37);
    BEGIN
      ReturnReceiptLine.SETRANGE("Return Order No.",SalesLine."Document No.");
      ReturnReceiptLine.SETRANGE("No.",SalesLine."No.");
      ReturnReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@130(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];EntryType@1002 : Option);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPutAwayLine@97(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@99(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindShipmentLine@75(VAR SalesShipmentLine@1000 : Record 111;No@1001 : Code[20]);
    BEGIN
      SalesShipmentLine.SETRANGE("No.",No);
      SalesShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ItemExpirationQuantityReportWithExpirDate@100(LocationCode@1012 : Code[10];LocationCode2@1000 : Code[10]);
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1002 : Record 39;
      EndDate@1010 : Date;
      PeriodLength@1001 : DateFormula;
    BEGIN
      // create and post Purchase Order with Item Tracking.
      CreatePurchaseOrderWithMultipleLines(PurchaseLine,LocationCode,LocationCode2);
      AssignItemTrackingOnPurchLine(PurchaseLine."Document No.");
      Item.GET(PurchaseLine."No.");
      EndDate := CALCDATE(Item."Expiration Calculation",WORKDATE);
      UpdateExpirationDateOnReservEntry(Item."No.",EndDate);
      PostPurchaseOrder(PurchaseLine,FALSE);
      EVALUATE(PeriodLength,'<1M>');  // Use 1M for monthly Period.

      // Exercise.
      RunItemExpirationQuantityReport(EndDate,PeriodLength,Item."No.",LocationCode,LocationCode2);

      // Verify: Verify Inventory on Item Expiration Quantity report.
      Item.CALCFIELDS(Inventory);
      VerifyItemExpirationQuantityReport(Item."No.",Item.Inventory);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@106(LocationMandatory@1001 : Boolean);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Location Mandatory",LocationMandatory);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifySalesLineAndPostSalesOrder@92(VAR SalesLine@1000 : Record 37;SalesHeader@1002 : Record 36;ItemNo@1001 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Take random Quantity.
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Take random Unit Cost.
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostItemPurchaseAndSale@128(ItemNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1002 : Record 83;
      Quantity@1001 : Integer;
    BEGIN
      Quantity := LibraryRandom.RandIntInRange(100,200);
      PostItemJournalLine(ItemNo,Quantity,LibraryRandom.RandInt(100),ItemJournalLine."Entry Type"::Purchase);
      PostItemJournalLine(ItemNo,Quantity,LibraryRandom.RandInt(100),ItemJournalLine."Entry Type"::Purchase);
      PostItemJournalLine(
        ItemNo,Quantity + LibraryRandom.RandInt(Quantity DIV 2),LibraryRandom.RandInt(100),ItemJournalLine."Entry Type"::Sale);
    END;

    LOCAL PROCEDURE PostPurchaseOrder@71(PurchaseLine@1002 : Record 39;ToInvoice@1000 : Boolean);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,ToInvoice);
    END;

    LOCAL PROCEDURE PostSalesInvoiceOnNewPostingDate@172(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];NewPostingDate@1003 : Date);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(DocumentType,DocumentNo);
      UpdatePostingDateOnSalesHeader(SalesHeader,NewPostingDate);
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostSalesOrder@61(SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship.
    END;

    LOCAL PROCEDURE PostSalesShipAndInvoiceWithItemChargesOnDifferentDates@147() : Code[20];
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      SalesShipmentLine@1004 : Record 111;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryInventory.CreateItem(Item);
      PostItemJournalLine(
        Item."No.",LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandInt(1000),ItemJournalLine."Entry Type"::"Positive Adjmt.");

      CreateAndPostSalesDocument(SalesLine,SalesLine."Document Type"::Order,Item."No.");
      PostSalesInvoiceOnNewPostingDate(SalesLine."Document Type",SalesLine."Document No.",WORKDATE + 1);

      FindShipmentLine(SalesShipmentLine,Item."No.");
      PostPurchItemChargeAssignedToShipment(LibraryPurchase.CreateVendorNo,WORKDATE + 2,SalesShipmentLine);
      PostSalesItemChargeAssignedToShipment(SalesLine."Sell-to Customer No.",WORKDATE + 2,SalesShipmentLine);

      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE PostPurchaseOrderAndCreateSalesDoc@10(VAR SalesLine@1008 : Record 37;DocumentType@1001 : Option;TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries') : Code[20];
    VAR
      PurchaseLine@1005 : Record 39;
      LotNo@1000 : Variant;
    BEGIN
      CreatePurchaseDocumentWithIT(PurchaseLine,PurchaseLine."Document Type"::Order,TrackingOption::AssignLotNo,FALSE,'','');  // FALSE for SNSpecific.'
      PostPurchaseOrder(PurchaseLine,FALSE);
      LibraryVariableStorage.Dequeue(LotNo);
      CreateSalesDocumentWithIT(SalesLine,DocumentType,PurchaseLine."No.",PurchaseLine.Quantity,TrackingOption);
      EXIT(LotNo);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@141(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptWithPurchaseOrder@38(VAR PurchaseLine@1000 : Record 39;VAR SerialNo@1004 : Code[20];VAR LotNo@1005 : Code[20]);
    VAR
      Location@1001 : Record 14;
      PurchaseHeader@1003 : Record 38;
      WarehouseEmployee@1002 : Record 7301;
      VarCode@1007 : Variant;
      TrackingOption@1006 : 'AssignSerialNo,AssignLotNo,SelectEntries';
    BEGIN
      // Create Warehouse Employee.
      LibraryWarehouse.CreateFullWMSLocation(Location,1);  // Use 1 for Bins per Zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // Create and Release Purchase Order with Item Tracking.
      CreatePurchaseDocumentWithIT(
        PurchaseLine,PurchaseLine."Document Type"::Order,TrackingOption::AssignSerialNo,TRUE,Location.Code,'');  // Set True for SN Specific.
      LibraryVariableStorage.Dequeue(VarCode);
      SerialNo := VarCode;
      LibraryVariableStorage.Dequeue(VarCode);
      LotNo := VarCode;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // Create and Post Warehouse Receipt.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseLine."Document No.");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@142(VAR WarehouseActivityLine@1003 : Record 5767;SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      FindPutAwayLine(WarehouseActivityLine,SourceNo);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RunItemSalesReport@84(No@1000 : Code[20]);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      Customer.SETRANGE("No.",No);
      REPORT.RUN(REPORT::"Customer/Item Sales",TRUE,FALSE,Customer);
    END;

    LOCAL PROCEDURE RunItemSalesReportFilterOnPostingDate@185(ItemNo@1000 : Code[20];StartDate@1001 : Date;EndDate@1002 : Date);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(FORMAT(StartDate) + '..' + FORMAT(EndDate));
      REPORT.RUN(REPORT::"Customer/Item Sales");
    END;

    LOCAL PROCEDURE RunCalculateInventoryReport@78(ItemJournalBatch@1001 : Record 233;No@1005 : Code[20];No2@1007 : Code[20];ItemNotOnInventory@1008 : Boolean);
    VAR
      Item@1004 : Record 27;
      ItemJournalLine@1003 : Record 83;
      CalculateInventory@1000 : Report 790;
    BEGIN
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      CLEAR(CalculateInventory);
      Item.SETFILTER("No.",'%1|%2',No,No2);
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.InitializeRequest(WORKDATE,LibraryUtility.GenerateGUID,ItemNotOnInventory);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.RUN;
    END;

    LOCAL PROCEDURE RunCalculateInventoryRequestPageReport@145(ItemFilter@1004 : Text);
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournalBatch@1001 : Record 233;
      Item@1003 : Record 27;
      CalculateInventory@1000 : Report 790;
    BEGIN
      CreatePhysInventoryJournalBatch(ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      CLEAR(CalculateInventory);
      Item.SETFILTER("No.",ItemFilter);
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.USEREQUESTPAGE(TRUE);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      COMMIT;
      CalculateInventory.RUN;
    END;

    LOCAL PROCEDURE RunInventoryCustomerSalesReport@76(No@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      REPORT.RUN(REPORT::"Inventory - Customer Sales",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunItemExpirationQuantityReport@77(EndDate@1000 : Date;PeriodLength@1001 : DateFormula;No@1002 : Code[20];LocationCode@1006 : Code[10];LocationCode2@1007 : Code[10]);
    VAR
      Item@1003 : Record 27;
      ItemExpirationQuantity@1004 : Report 5809;
    BEGIN
      Item.SETRANGE("No.",No);
      Item.SETFILTER("Location Filter",STRSUBSTNO(LocationFilter,LocationCode,LocationCode2));
      EnqueueValuesForItemExpirationQuantityReport(EndDate,PeriodLength);
      CLEAR(ItemExpirationQuantity);
      ItemExpirationQuantity.SETTABLEVIEW(Item);
      ItemExpirationQuantity.RUN;
    END;

    LOCAL PROCEDURE RunInventoryValuationReport@85(No@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(CALCDATE('<CY>',WORKDATE)); // Calc. for the current year.
      LibraryVariableStorage.Enqueue(TRUE);  // Include expected cost.
      REPORT.RUN(REPORT::"Inventory Valuation",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunInventoryCostVarianceReport@154(No@1001 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.SETRANGE("No.",No);
      REPORT.RUN(REPORT::"Inventory - Cost Variance",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE RunPhysInventoryListReport@96(ItemJournalBatch@1000 : Record 233);
    VAR
      PhysInventoryList@1001 : Report 722;
    BEGIN
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalBatch.SETRANGE(Name,ItemJournalBatch.Name);
      COMMIT;  // Commit required before running this Report.
      CLEAR(PhysInventoryList);
      PhysInventoryList.SETTABLEVIEW(ItemJournalBatch);
      PhysInventoryList.RUN;
    END;

    LOCAL PROCEDURE RunItemTrackingAppendixReport@42();
    VAR
      ItemTrackingAppendix@1001 : Report 6521;
    BEGIN
      CLEAR(ItemTrackingAppendix);
      ItemTrackingAppendix.USEREQUESTPAGE(TRUE);
      ItemTrackingAppendix.RUN;
    END;

    LOCAL PROCEDURE RunRevaluationPostingTestReport@63(ItemNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      REPORT.RUN(REPORT::"Revaluation Posting - Test",TRUE,FALSE,ItemJournalLine);
    END;

    LOCAL PROCEDURE RunStatusReport@109(ItemNo@1001 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      COMMIT;
      Item.SETRANGE("No.",ItemNo);
      REPORT.RUN(REPORT::Status,TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE SaveSalesRetReceipt@47(No@1002 : Code[20]);
    VAR
      ReturnReceiptHeader@1001 : Record 6660;
      SalesReturnReceipt@1000 : Report 6646;
    BEGIN
      ReturnReceiptHeader.SETRANGE("No.",No);
      LibraryVariableStorage.Enqueue(No);
      COMMIT;  // Commit required due to use of RUN.
      CLEAR(SalesReturnReceipt);
      SalesReturnReceipt.SETTABLEVIEW(ReturnReceiptHeader);
      SalesReturnReceipt.RUN;
    END;

    LOCAL PROCEDURE SaveSalesShipment@24(No@1002 : Code[20]);
    VAR
      SalesShipmentHeader@1001 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("No.",No);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      REPORT.RUN(REPORT::"Sales - Shipment",TRUE,FALSE,SalesShipmentHeader);
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@101(VAR ItemJournalBatch@1001 : Record 233;Type@1002 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetupForSalesReport@74(VAR SalesLine@1004 : Record 37);
    BEGIN
      // Create Item, create and post Sales Order.
      CreateAndPostSalesOrder(SalesLine,CreateItem);

      // Create and Post Purchase Order and run Adjust Cost Item Entries.
      CreateAndPostPurchaseOrder(SalesLine."No.",FALSE);
      LibraryCosting.AdjustCostItemEntries(SalesLine."No.",'');
    END;

    LOCAL PROCEDURE UndoReturnReceipt@110(SalesLine@1000 : Record 37);
    VAR
      ReturnReceiptLine@1002 : Record 6661;
    BEGIN
      FindReturnReceiptLine(ReturnReceiptLine,SalesLine);
      LibraryVariableStorage.Enqueue(UndoSalesRetRcptMessage);
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE UndoSalesShipment@21(SalesLine@1000 : Record 37);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      FindShipmentLine(SalesShipmentLine,SalesLine."No.");
      LibraryVariableStorage.Enqueue(UndoSalesShptMessage);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservEntry@52(ItemNo@1001 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.VALIDATE("Expiration Date",ExpirationDate);
        ReservationEntry.MODIFY(TRUE);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePostingDateOnSalesHeader@132(VAR SalesHeader@1001 : Record 36;NewPostingDate@1003 : Date);
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesHeader.VALIDATE("Posting Date",NewPostingDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyFIFOItemStatusReport@124(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      Item.GET(ItemNo);
      LibraryReportDataset.LoadDataSetFile;
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      ItemLedgerEntry.FINDSET;
      REPEAT
        LibraryReportDataset.FindRow('DocumentNo_ItemLedgerEntry',ItemLedgerEntry."Document No.");
        LibraryReportDataset.AssertElementWithValueExists('RemainingQty',ItemLedgerEntry."Remaining Quantity");
        LibraryReportDataset.AssertElementWithValueExists('InvtValue2',ItemLedgerEntry."Remaining Quantity" * Item."Unit Cost");
      UNTIL ItemLedgerEntry.NEXT = 0;

      LibraryReportDataset.Reset;
      ItemLedgerEntry.SETRANGE(Open,FALSE);
      ItemLedgerEntry.FINDSET;
      REPEAT
        LibraryReportDataset.AssertElementWithValueNotExist('DocumentNo_ItemLedgerEntry',ItemLedgerEntry."Document No.");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyAverageItemStatusReport@125(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        LibraryReportDataset.FindRow('DocumentNo_ItemLedgerEntry',ItemLedgerEntry."Document No.");
        LibraryReportDataset.AssertElementWithValueExists('RemainingQty',ItemLedgerEntry.Quantity);
        LibraryReportDataset.AssertElementWithValueExists('InvtValue2',ItemLedgerEntry."Cost Amount (Actual)");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLotNoOnItemTrackingAppendixReport@28(No@1000 : Code[20];LotNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ItemTrackingLine',No);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('LotNo',LotNo);
      LibraryReportDataset.AssertCurrentRowValue('Qty_ItemTrackingLine',Quantity);
    END;

    LOCAL PROCEDURE VerifyItemTrackingAppendixReport@9(No@1002 : Code[20];LotNo@1001 : Code[20];SerialNo@1000 : Code[20]);
    BEGIN
      VerifyLotNoOnItemTrackingAppendixReport(No,LotNo,1);
      LibraryReportDataset.AssertCurrentRowValue('SerialNo_ItemTrackingLine',SerialNo);
    END;

    LOCAL PROCEDURE VerifyItemExpirationQuantityReport@49(ItemNo@1000 : Code[20];Inventory@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',ItemNo);

      Assert.AreEqual(Inventory,LibraryReportDataset.Sum('InvtQty4'),'Wrong end date qty in report.');
      Assert.AreEqual(Inventory,LibraryReportDataset.Sum('TotalInvtQty'),'Wrong total qty in report.');
    END;

    LOCAL PROCEDURE VerifyInventoryValuationReport@86(SalesLine@1000 : Record 37;Amount@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo',SalesLine."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('DecreaseInvoicedQty',SalesLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('DecreaseInvoicedValue',-Amount);
      LibraryReportDataset.AssertCurrentRowValue('EndingInvoicedValue',Amount);
    END;

    LOCAL PROCEDURE VerifyInventoryCostVarianceReport@158(ItemLedgerEntry@1000 : Record 32;StandardCost@1001 : Decimal;DocumentNo@1002 : Code[20]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocNo_ItemLedgerEntry',DocumentNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('PostDate_ItemLedgerEntry',FORMAT(ItemLedgerEntry."Posting Date"));
      LibraryReportDataset.AssertCurrentRowValue('StandardCost_Item',StandardCost);
    END;

    LOCAL PROCEDURE VerifyPhysInventoryListReport@46(ItemNo@1000 : Code[20];Qty@1004 : Decimal;LotNo@1005 : Code[20];SerialNo@1006 : Code[20];ShowQty@1001 : Boolean;ShowLot@1002 : Boolean;ShowSerial@1003 : Boolean);
    BEGIN
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('ItemNo_ItemJournalLine',ItemNo);
      LibraryReportDataset.AssertElementWithValueExists('ShowQtyCalculated',ShowQty);
      LibraryReportDataset.AssertElementWithValueExists('QtyCalculated_ItemJnlLin',Qty);

      IF ShowLot THEN
        LibraryReportDataset.AssertElementWithValueExists('ReservEntryBufferLotNo',LotNo)
      ELSE
        ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('ReservEntryBufferLotNo',LotNo);

      IF ShowSerial THEN
        LibraryReportDataset.AssertElementWithValueExists('ReservEntryBufferSerialNo',SerialNo)
      ELSE
        ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('ReservEntryBufferSerialNo',SerialNo);
    END;

    LOCAL PROCEDURE VerifyPostedSalesReport@72(SalesLine@1000 : Record 37);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Order:
          BEGIN
            LibraryReportDataset.SetRange('No_SalesShptLine',SalesLine."No.");
            LibraryReportDataset.GetNextRow;
            LibraryReportDataset.AssertCurrentRowValue('Qty_SalesShptLine',SalesLine.Quantity);
          END;
        SalesLine."Document Type"::"Return Order":
          BEGIN
            LibraryReportDataset.SetRange('No_ReturnReceiptLine',SalesLine."No.");
            LibraryReportDataset.GetNextRow;
            LibraryReportDataset.AssertCurrentRowValue('Qty_ReturnReceiptLine',SalesLine.Quantity);
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyReportItemLine@150(ItemNo@1000 : Code[20];VAR ValueEntry@1001 : Record 5802);
    VAR
      PurchItemChargeAmt@1002 : Decimal;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('ValueEntryBuffer__Item_No__',ItemNo);
      LibraryReportDataset.GetNextRow;

      ValueEntry.CALCSUMS("Cost Amount (Non-Invtbl.)");
      PurchItemChargeAmt := ValueEntry."Cost Amount (Non-Invtbl.)";

      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale);
      ValueEntry.CALCSUMS("Invoiced Quantity","Sales Amount (Actual)","Cost Amount (Actual)");
      LibraryReportDataset.AssertCurrentRowValue('ValueEntryBuffer__Invoiced_Quantity_',-ValueEntry."Invoiced Quantity");
      LibraryReportDataset.AssertCurrentRowValue(
        'ValueEntryBuffer__Sales_Amount__Actual___Control44',ValueEntry."Sales Amount (Actual)");
      LibraryReportDataset.AssertCurrentRowValue(
        'Profit_Control46',ValueEntry."Sales Amount (Actual)" + ValueEntry."Cost Amount (Actual)" + PurchItemChargeAmt);
    END;

    LOCAL PROCEDURE VerifyRevaluationPostingTestReport@114(ItemJournalLine@1001 : Record 83);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Item_Journal_Line__Item_No__',ItemJournalLine."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Item_Journal_Line_Quantity',ItemJournalLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('Item_Journal_Line__Inventory_Value__Revalued__',
        ItemJournalLine."Inventory Value (Revalued)");
    END;

    LOCAL PROCEDURE VerifySalesReportAfterPostSalesOrder@88(ItemNo@1000 : Code[20];CustomerNo@1003 : Code[20];ItemNoElementName@1002 : Text;CustNameElementName@1004 : Text;SalesAmtElementName@1005 : Text;ProfitElementName@1006 : Text);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.CALCFIELDS("Sales Amount (Actual)","Cost Amount (Actual)");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(ItemNoElementName,ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(CustNameElementName,CustomerNo);
      LibraryReportDataset.AssertCurrentRowValue(SalesAmtElementName,ItemLedgerEntry."Sales Amount (Actual)");
      LibraryReportDataset.AssertCurrentRowValue(ProfitElementName,ItemLedgerEntry."Sales Amount (Actual)" +
        ItemLedgerEntry."Cost Amount (Actual)");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@22(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@3(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(TRUE);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@2(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      OptionValue@1004 : Variant;
      OptionString@1005 : 'AssignSerialNo,AssignLotNo,SelectEntries';
      TrackingOption@1006 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::AssignSerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;
            ItemTrackingLines.FIRST;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Serial No.".VALUE);
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        OptionString::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        OptionString::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@98(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ItemTrackingAppendixRequestPageHandler@26(VAR ItemTrackingAppendix@1000 : TestRequestPage 6521);
    VAR
      Document@1001 : Variant;
      DocumentNo@1002 : Variant;
      FileName@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Document);
      LibraryVariableStorage.Dequeue(DocumentNo);
      LibraryVariableStorage.Dequeue(FileName);
      ItemTrackingAppendix.Document.SETVALUE(Document);
      ItemTrackingAppendix.DocumentNo.SETVALUE(DocumentNo);
      ItemTrackingAppendix.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ItemExpirationQuantityRequestPageHandler@18(VAR ItemExpirationQuantity@1000 : TestRequestPage 5809);
    VAR
      EndingDate@1001 : Variant;
      PeriodLength@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(EndingDate);
      LibraryVariableStorage.Dequeue(PeriodLength);
      ItemExpirationQuantity.EndingDate.SETVALUE(EndingDate);
      ItemExpirationQuantity.PeriodLength.SETVALUE(PeriodLength);
      ItemExpirationQuantity.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE PostItemJournalLine@104(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;UnitAmount@1003 : Decimal;EntryType@1004 : Option);
    VAR
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPurchItemChargeAssignedToShipment@126(VendorNo@1001 : Code[20];PostingDate@1002 : Date;SalesShipmentLine@1005 : Record 111);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
      ItemChargeAssignmentPurch@1004 : Record 5805;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(10));
      PurchaseLine.MODIFY(TRUE);

      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchaseLine,
        ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Sales Shipment",SalesShipmentLine."Document No.",
        SalesShipmentLine."Line No.",SalesShipmentLine."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostSalesItemChargeAssignedToShipment@129(CustomerNo@1001 : Code[20];PostingDate@1000 : Date;SalesShipmentLine@1005 : Record 111);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemChargeAssignmentSales@1004 : Record 5809;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(10));
      SalesLine.MODIFY(TRUE);

      LibraryInventory.CreateItemChargeAssignment(
        ItemChargeAssignmentSales,SalesLine,
        ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,SalesShipmentLine."Document No.",
        SalesShipmentLine."Line No.",SalesShipmentLine."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE ReturnReceiptRequestPageHandler@30(VAR SalesReturnReceipt@1000 : TestRequestPage 6646);
    VAR
      FileName@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      SalesReturnReceipt.ShowCorrectionLines.SETVALUE(TRUE);
      SalesReturnReceipt.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE PhysInventoryListRequestPageHandler@93(VAR PhysInventoryList@1000 : TestRequestPage 722);
    VAR
      ShowQtyCalculated@1002 : Variant;
      ShowSerialLotNumber@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowQtyCalculated);
      LibraryVariableStorage.Dequeue(ShowSerialLotNumber);
      PhysInventoryList.ShowCalculatedQty.SETVALUE(ShowQtyCalculated);
      PhysInventoryList.ShowSerialLotNumber.SETVALUE(ShowSerialLotNumber);
      PhysInventoryList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SalesShipmentRequestPageHandler@127(VAR SalesShipment@1000 : TestRequestPage 208);
    VAR
      NoOfCopies@1001 : Variant;
      ShowInternalInfo@1002 : Variant;
      LogInteraction@1003 : Variant;
      ShowCorrectionLines@1005 : Variant;
      ShowLotSN@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfCopies);
      LibraryVariableStorage.Dequeue(ShowInternalInfo);
      LibraryVariableStorage.Dequeue(LogInteraction);
      LibraryVariableStorage.Dequeue(ShowCorrectionLines);
      LibraryVariableStorage.Dequeue(ShowLotSN);

      SalesShipment.Control1.SETVALUE(NoOfCopies);
      SalesShipment.Control2.SETVALUE(ShowInternalInfo);
      SalesShipment.LogInteraction.SETVALUE(LogInteraction);
      SalesShipment."Show Correction Lines".SETVALUE(ShowCorrectionLines);
      SalesShipment.Control9.SETVALUE(ShowLotSN);
      SalesShipment.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryCustomersSalesRequestPageHandler@134(VAR InventoryCustomerSales@1000 : TestRequestPage 713);
    BEGIN
      InventoryCustomerSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerItemSalesRequestPageHandler@136(VAR CustomerItemSales@1000 : TestRequestPage 113);
    BEGIN
      CustomerItemSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerItemSalesRequestFilterOnPostingDatePageHandler@112(VAR CustomerItemSales@1000 : TestRequestPage 113);
    BEGIN
      CustomerItemSales."Value Entry".SETFILTER("Item No.",LibraryVariableStorage.DequeueText);
      CustomerItemSales."Value Entry".SETFILTER("Posting Date",LibraryVariableStorage.DequeueText);
      CustomerItemSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryValuationRequestPageHandler@138(VAR InventoryValuation@1000 : TestRequestPage 1001);
    VAR
      StartDate@1001 : Variant;
      EndDate@1002 : Variant;
      InclExpCost@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(EndDate);
      LibraryVariableStorage.Dequeue(InclExpCost);

      InventoryValuation.StartingDate.SETVALUE(StartDate);
      InventoryValuation.EndingDate.SETVALUE(EndDate);
      InventoryValuation.IncludeExpectedCost.SETVALUE(InclExpCost);

      InventoryValuation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RevaluationPostingTestRequestPageHandler@143(VAR RevaluationPostingTest@1000 : TestRequestPage 5812);
    BEGIN
      RevaluationPostingTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryCostVarianceRequestPageHandler@146(VAR InventoryCostVariance@1000 : TestRequestPage 721);
    BEGIN
      InventoryCostVariance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE StatusRequestPageHandler@103(VAR Status@1000 : TestRequestPage 706);
    BEGIN
      Status.StatusDate.SETVALUE(WORKDATE);
      Status.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CalculateInventoryHandler@118(VAR CalculateInventory@1000 : TestRequestPage 790);
    BEGIN
      CalculateInventory.DocumentNo.SETVALUE(LibraryVariableStorage.DequeueText);
      CalculateInventory.ItemsNotOnInventory.SETVALUE(TRUE);
      CalculateInventory.IncludeItemWithNoTransaction.SETVALUE(TRUE);
      CalculateInventory.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [SCM]
      Test for Inventory Reports:
       1. Verify Lot No. on Item Tracking Appendix Report for Sales Quote.
       2. Verify Lot No. on Item Tracking Appendix Report for Sales Order.
       3. Verify Lot No. on Item Tracking Appendix Report for Sales Invoice.
       4. Verify Lot No. on Item Tracking Appendix Report for Sales Credit Memo.
       5. Verify Lot No. on Item Tracking Appendix Report for Sales Return Order.
       6. Verify Lot No. on Item Tracking Appendix Report for Posted Sales Shipment.
       7. Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Quote.
       8. Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Order.
       9. Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Invoice.
      10. Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Credit Memo.
      11. Verify Serial No. and Lot No. on Item Tracking Appendix Report for Purchase Return Order.
      12. Verify error for blank Ending Date on Item Expiration Quantity report.
      13. Verify error for Period Length less than 1M on Item Expiration Quantity report.
      14. Verify Item Expiration Quantity Report with multiple Locations.
      15. Verify Item Expiration Quantity Report with same Location.
      16. Verify Sales Shipment Report, print with Show Correction Lines.
      17. Verify Sales Return Receipt Report, print with Show Correction Lines.
      18. Verify physical Inventory List Report for Lot and serial item tracking with ShowTracking as false and ShowQuantity as true.
      19. Verify physical Inventory List Report for Lot and serial item tracking with ShowTracking as true and ShowQuantity as false.
      20. Verify physical Inventory List Report for Location and Bin with ShowTracking and ShowQuantity as false.
      21. Verify physical Inventory List Report for Location and Bin with ShowTracking as true.
      22. Verify physical Inventory List Report for different Location.
      23. Verify physical Inventory List Report for different Location with ShowQuantity as false.
      24. Verify physical Inventory List Report with item Not on inventory.
      25. Verify Warehouse physical Inventory List Report with no warehouse tracking.
      26. Verify Inventory Customer Sales Report after running Adjust Cost Item Entries.
      27. Verify Item Sales Report after running Adjust Cost Item Entries.
      28. Verify Inventory Valuation Report after running Post Inventory To G/L batch job.
      29. Verify Revaluation Posting Report After Posting Revaluation Journal With Location Mandatory.
      30. Verify Document No and Cost per Unit in Inventory Cost variance Report After Posting Purchase Order With Item Charge Assignment.

      TFS_TS_ID = 303134
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      ItemTrackingAppendixReportSalesQuote, ItemTrackingAppendixReportSalesOrder, ItemTrackingAppendixReportSalesInv
      ItemTrackingAppendixReportSalesCrMemo, ItemTrackingAppendixReportSalesRetOrder                                          129211
      ItemTrackingAppendixReportPstdSalesShpt                                                                                 129214
      ItemTrackingAppendixReportPurchQuote, ItemTrackingAppendixReportPurchOrder, ItemTrackingAppendixReportPurchInv
      ItemTrackingAppendixReportPurchCrMemo,ItemTrackingAppendixReportPurchRetOrder                                           129212

      TFS_TS_ID = 304876
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      ItemExpirationQuantityReportEndDateError, ItemExpirationQuantityReportPeriodLengthError
      ItemExpirationQuantityReportWithSameLocation                                                                            129206
      ItemExpirationQuantityReportWithMultipleLocation                                                                        129207

      TFS_TS_ID = 309893
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      SalesShipmentDocumentWithCorrectionLine, SalesRetReceiptDocumentWithCorrectionLine                                      128292

      TFS_TS_ID = 308966
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      PhysInvListRptWithShowQtyAsTrue, PhysInvListRptWithShowTrackingAsTrue, PhysInvListRptWithLocAndBin
      PhysInvListRptWithLocAndBinShowTrackingAsTrue, PhysInvListRptWithDiffLocShowTrackingAndQtyAsTrue
      PhysInvListRptWithDiffLocShowQtyAsFalse, PhysInvListRptWithItemNotOnInv, PhysInvListRptWithNoWarehouseTracking          129230

      TFS_TS_ID = 309084
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      InvCustomerSalesReportAfterAdjustCost, ItemSalesReportAfterAdjustCost                                                   245389
      InvValuationReportAfterPostInvtCostToGL                                                                                 243105

      TFS_TS_ID = 309085
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      PostRevaluationJournalWithLocationMandatory                                                                             268322
      PostPurchaseOrderWithItemChargeAssign                                                                                   244479
    }
    END.
  }
}

