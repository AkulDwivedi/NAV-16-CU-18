OBJECT Codeunit 137411 SCM Stockout
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPatterns@1006 : Codeunit 132212;
      LibraryERMCountryData@1008 : Codeunit 131305;
      LibraryRandom@1007 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      isInitialized@1003 : Boolean;
      Stockoutwarning@1004 : Boolean;
      ItemStockOutWarningTestType@1005 : 'Default,No,Yes';
      NoWarningExpectedErr@1009 : TextConst '@@@="%1 = Item No. (There is sufficient stock of item 70061)";ENU=There is sufficient stock of item %1. No availability warning is expected';
      StockoutWarningExpectedErr@1010 : TextConst '@@@="%1 = Item No. (Insufficient stock of item 70061)";ENU=Insufficient stock of item %1. Availability warning is expected';

    LOCAL PROCEDURE Initialize@2();
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      IF isInitialized THEN
        EXIT;
      SalesSetup.GET;
      Stockoutwarning := SalesSetup."Stockout Warning";
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler)]
    PROCEDURE TestStockoutWarningItemYes@3();
    BEGIN
      TestStockoutWarning(ItemStockOutWarningTestType::Yes,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE TestStockoutWarningItemNo@4();
    BEGIN
      TestStockoutWarning(ItemStockOutWarningTestType::No,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler)]
    PROCEDURE TestStockoutWarningItemDefaultGlobalYes@5();
    BEGIN
      TestStockoutWarning(ItemStockOutWarningTestType::Default,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE TestStockoutWarningItemDefaultGlobalNo@6();
    BEGIN
      TestStockoutWarning(ItemStockOutWarningTestType::Default,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE NoStockoutWarningWhenQuantityRaisedWithReservAndSufficientStock@8();
    VAR
      Item@1000 : Record 27;
      SalesLine@1002 : Record 37;
      ItemCheckAvail@1004 : Codeunit 311;
      SalesOrderQty@1003 : Integer;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 372286] No availability warning is raised when quantity on sales line is changed if item is reserved for the same line

      // [GIVEN] Item with stockout warning
      CreateItemSetStockoutWarning(Item,Item."Stockout Warning"::Yes);
      SalesOrderQty := LibraryRandom.RandIntInRange(10,50);
      // [GIVEN] Quantity on inventory is "X"
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',SalesOrderQty * 2,WORKDATE,Item."Unit Cost");

      // [GIVEN] Sales order with quantity = "X / 2", item is reserved
      CreateSalesOrderWithAutoReservation(SalesLine,Item,SalesOrderQty);

      // [WHEN] Change quantity in the sales order line. New quantity = "X"
      SalesLine.VALIDATE(Quantity,SalesOrderQty * 2);

      // [THEN] No availability warning
      Assert.IsFalse(ItemCheckAvail.SalesLineShowWarning(SalesLine),STRSUBSTNO(NoWarningExpectedErr,Item."No."));
    END;

    [Test]
    PROCEDURE NoStockoutWarningWhenQuantityRaisedWithReservTwoOrdersAndSufficientStock@14();
    VAR
      Item@1000 : Record 27;
      SalesLine@1002 : Record 37;
      ItemCheckAvail@1004 : Codeunit 311;
      SalesOrderQty@1003 : Integer;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 372286] No availability warning is raised when quantity on sales line is changed if item is reserved for different sales order, but total availability is sufficient

      // [GIVEN] Item with stockout warning
      CreateItemSetStockoutWarning(Item,Item."Stockout Warning"::Yes);
      SalesOrderQty := LibraryRandom.RandIntInRange(10,50);
      // [GIVEN] Quantity on inventory is "X"
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',SalesOrderQty * 2,WORKDATE,Item."Unit Cost");

      // [GIVEN] Sales order "SO1": Quantity = "X / 2", all reserved
      CreateSalesOrderWithAutoReservation(SalesLine,Item,SalesOrderQty);
      // [GIVEN] Sales order "SO2": Quantity = "X / 2" - 1. All stock except 1 item is reserved
      CreateSalesOrderWithAutoReservation(SalesLine,Item,SalesOrderQty - 1);

      // [WHEN] Change quantity in the sales order "SO2". New quantity = "X"
      SalesLine.VALIDATE(Quantity,SalesOrderQty);

      // [THEN] No availability warning
      Assert.IsFalse(ItemCheckAvail.SalesLineShowWarning(SalesLine),STRSUBSTNO(NoWarningExpectedErr,Item."No."));
    END;

    [Test]
    PROCEDURE StockoutWarningWhenQuantityRaisedAboveAvailWithReservation@26();
    VAR
      Item@1000 : Record 27;
      SalesLine@1002 : Record 37;
      ItemCheckAvail@1003 : Codeunit 311;
      SalesOrderQty@1001 : Integer;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 372286] Availability warning is when creating a sales order if total stock is sufficient, but it is reserved for another order

      // [GIVEN] Item with stockout warning
      CreateItemSetStockoutWarning(Item,Item."Stockout Warning"::Yes);
      SalesOrderQty := LibraryRandom.RandIntInRange(10,50);
      // [GIVEN] Quantity on inventory is "X"
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',SalesOrderQty * 2,WORKDATE,Item."Unit Cost");

      // [GIVEN] Sales order with quantity = "X / 2", item is reserved
      CreateSalesOrderWithAutoReservation(SalesLine,Item,SalesOrderQty);

      // [WHEN] Create new sales order with quantity = "X / 2" + 1
      CreateSalesOrder(SalesLine,Item,SalesOrderQty + 1);

      // [THEN] Availability warning is raised
      Assert.IsTrue(ItemCheckAvail.SalesLineShowWarning(SalesLine),STRSUBSTNO(StockoutWarningExpectedErr,Item."No."));
    END;

    LOCAL PROCEDURE CreateItemSetStockoutWarning@10(VAR Item@1000 : Record 27;StockoutWarning@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item."Stockout Warning" := StockoutWarning;
      Item.MODIFY;
    END;

    LOCAL PROCEDURE CreateSalesOrder@9(VAR SalesLine@1002 : Record 37;Item@1003 : Record 27;Quantity@1004 : Decimal);
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithAutoReservation@15(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27;SalesOrderQty@1002 : Decimal);
    BEGIN
      CreateSalesOrder(SalesLine,Item,SalesOrderQty);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE TestStockoutWarning@1(ItemStockOutWarning@1000 : 'Default,No,Yes';SalesSetupStockOutWarning@1001 : Boolean;Expected@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      SalesLine@1006 : Record 37;
      ItemCheckAvail@1008 : Codeunit 311;
      ItemInventoryQty@1003 : Decimal;
    BEGIN
      Initialize;
      LibrarySales.SetStockoutWarning(SalesSetupStockOutWarning);
      CreateItemSetStockoutWarning(Item,ItemStockOutWarning);
      ItemInventoryQty := LibraryRandom.RandInt(100);
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',ItemInventoryQty,WORKDATE,Item."Unit Cost");
      CreateSalesOrder(SalesLine,Item,2 * ItemInventoryQty);
      IF Expected THEN
        Assert.IsTrue(ItemCheckAvail.SalesLineCheck(SalesLine),'')
      ELSE
        Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');
      LibrarySales.SetStockoutWarning(Stockoutwarning);
    END;

    [ModalPageHandler]
    PROCEDURE StockoutPageHandler@7(VAR CheckAvailability@1000 : Page 342;VAR Response@1001 : Action);
    BEGIN
      // Stockout Warning Page Handler: Close Stockout Warning page.
      Response := ACTION::No;
    END;

    BEGIN
    {
      // [FEATURE] [Item Availability] [SCM]
    }
    END.
  }
}

