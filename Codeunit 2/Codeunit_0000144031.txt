OBJECT Codeunit 144031 Reverse Service Tax Postings
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500004 : Codeunit 130000;
      LibraryERM@1500010 : Codeunit 131300;
      LibraryPurchase@1500008 : Codeunit 130512;
      LibraryServiceTax@1500007 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxReportHelper@1500014 : Codeunit 143007;
      ServiceTaxVerify@1500011 : Codeunit 143004;
      isInitialized@1500001 : Boolean;
      ReverseChargeTypeOption@1500000 : ' ,Standard,GTA';
      NegativeLiabilityErr@1500005 : TextConst 'ENU=Liability Amount is Negative so you cannot post this transaction.';
      RevAndPotTogetherErr@1500006 : TextConst 'ENU=Service group %1 is used in one or more of the lines. You must set the %2 field to No when the service tax reverse charge is 100 percent.';
      InvoiceAmountIs@1500009 : 'Equal,Greater,Smaller';
      UnapplyOfUsedCreditErr@1500015 : TextConst 'ENU=the Service Tax credit has already been utilized';
      ApplyToPoTUsedCreditErr@1500012 : TextConst 'ENU=You cannot apply the document %1 because the Service Tax credit has already been utilized against the tax payment.';
      ReversePaidTaxErr@1500013 : TextConst 'ENU=You cannot reverse %1 No. %2 because the service tax credit has already been utilized against the tax payment.';

    [Test]
    PROCEDURE PostPurchaseInvoice@1500022();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE PostPurchaseInvoicePoT@1500023();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostPurchaseInvoiceRevCharge@1500026();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostPurchaseOrder@1500027();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Order,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderPoT@1500042();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Order,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderRevCharge@1500043();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::Order,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostCreditMemoPoT@1500054();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostReturnOrderRevCharge@1500047();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPurchaseDoc(PurchaseHeader."Document Type"::"Return Order",ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchInvPoT@1500014();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::Invoice,TRUE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchInvNonPoT@1500003();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchOrderPoT@1500031();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::Order,TRUE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchOrderNonPoT@1500030();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::Order,FALSE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchCrMemoPoT@1500036();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo",TRUE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchCrMemoNonPoT@1500037();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo",FALSE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchRetOrderPoT@1500046();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Return Order",TRUE);
    END;

    [Test]
    PROCEDURE ApplyPmtToPurchRetOrderNonPoT@1500045();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Return Order",FALSE);
    END;

    [Test]
    PROCEDURE ApplyRevChrgPmtToPurchInv@1500016();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyRevChrgPmtToPurchaseDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE ApplyRevChrgPmtToPurchOrder@1500028();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyRevChrgPmtToPurchaseDoc(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE ApplyRevChrgPmtToPurchCrMemo@1500029();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyRevChrgPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE ApplyRevChrgPmtToRetOrd@1500032();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyRevChrgPmtToPurchaseDoc(PurchaseHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE ApplyPmtToGenJnlInvPoT@1500052();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxPoTApplnToPmt(GenJournalLine,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyPmtToGenJnlInvNonPoT@1500051();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxPoTApplnToPmt(GenJournalLine,GenJournalLine."Applies-to Doc. No.");
    END;

    [Test]
    PROCEDURE ApplyPmtToGenJnlCrMemoPoT@1500040();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",TRUE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxPoTApplnToPmt(GenJournalLine,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyPmtGenJnlCrMNonPoT@1500039();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",FALSE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxPoTApplnToPmt(GenJournalLine,GenJournalLine."Applies-to Doc. No.");
    END;

    [Test]
    PROCEDURE RevChrgApplyPmtToGenJnlInv@1500077();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxRevChrgApplnToPmt(GenJournalLine);
    END;

    [Test]
    PROCEDURE RevChrgApplyPmtToGenJnlInvPoT@1500010();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      ASSERTERROR
        PostPurchDocFromJnl(GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::Standard,TRUE);

      Assert.ExpectedError(STRSUBSTNO(RevAndPotTogetherErr,GenJournalLine."Service Tax Group Code",GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE RevChrgApplyPmtToGenJnlCrMemo@1500076();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ApplyPmtToPurchGenJnl(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",ReverseChargeTypeOption::Standard,FALSE);

      VerifyServTaxFullPaymentAppln(GenJournalLine);
      VerifyServTaxRevChrgApplnToPmt(GenJournalLine);
    END;

    [Test]
    PROCEDURE RevChrgApplyPmtToGGenJnlCrMPoT@1500011();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      Initialize;

      ASSERTERROR
        PostPurchDocFromJnl(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",ReverseChargeTypeOption::Standard,TRUE);

      Assert.ExpectedError(STRSUBSTNO(RevAndPotTogetherErr,GenJournalLine."Service Tax Group Code",GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE RevChrgPartialPayInv@1500053();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgApplyPartialPmtToDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE RevChrgPartialPayOrder@1500050();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgApplyPartialPmtToDoc(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE RevChrgPartialPayCrMemo@1500049();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgApplyPartialPmtToDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE RevChrgPartialPayRetOrd@1500048();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgApplyPartialPmtToDoc(PurchaseHeader."Document Type"::"Return Order");
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockReverseInvPoTTakenSaleCr@1500094();
    VAR
      GenJournalLine@1500000 : Record 81;
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      Initialize;

      PostPurchDocFromJnl(GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);

      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(GenJournalLine."Document No.",ServiceTaxEntryDetails);

      ASSERTERROR ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");
      Assert.ExpectedError(STRSUBSTNO(ReversePaidTaxErr,GenJournalLine."Document Type",GenJournalLine."Document No."));
    END;

    [Test]
    PROCEDURE ReverseCrMemoPoT@1500090();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      ReversePurchDocFromJnl(GenJournalLine."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE ReverseInvoiceNonPoT@1500082();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      ReversePurchDocFromJnl(GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE ReverseInvoicePoT@1500063();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      ReversePurchDocFromJnl(GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE ReverseInvoiceRevChrg@1500080();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      ReversePurchDocFromJnl(GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE ApplyInvToCrMemoEqual@1500059();
    BEGIN
      ApplyInvToCrMemo(ReverseChargeTypeOption::" ",InvoiceAmountIs::Equal);
    END;

    [Test]
    PROCEDURE ApplyGreaterInvToCrMemo@1500024();
    BEGIN
      ApplyInvToCrMemo(ReverseChargeTypeOption::" ",InvoiceAmountIs::Greater);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedApplyToInvUsedCreditPoT@1540071();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ServiceTaxEntryDetails@1500003 : Record 16474;
      PostedInvoiceDocNo@1500002 : Code[20];
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,TRUE);

      PostedInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedInvoiceDocNo,ServiceTaxEntryDetails);

      ASSERTERROR PostAndApplyCrMemo(PurchaseHeader,PostedInvoiceDocNo,InvoiceAmountIs::Greater);
      Assert.ExpectedError(STRSUBSTNO(ApplyToPoTUsedCreditErr,PostedInvoiceDocNo));
    END;

    [Test]
    PROCEDURE RevChrgApplyInvToCrMEqual@1500060();
    BEGIN
      ApplyInvToCrMemo(ReverseChargeTypeOption::Standard,InvoiceAmountIs::Equal);
    END;

    [Test]
    PROCEDURE RevChrgApplyBigInvToCrMemo@1500081();
    BEGIN
      ApplyInvToCrMemo(ReverseChargeTypeOption::Standard,InvoiceAmountIs::Greater);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxInvoiceRevChrgInward@1500095();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      WITH PurchaseHeader DO
        PayReverseChargeServTaxToGov(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::Inward,ReverseChargeTypeOption::Standard)
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler)]
    PROCEDURE PayServTaxCrMemoRevChrgInward@1500093();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ASSERTERROR
        WITH PurchaseHeader DO
          PayReverseChargeServTaxToGov(
            "Document Type"::"Credit Memo","Service Type (Rev. Chrg.)"::Inward,ReverseChargeTypeOption::Standard);
      Assert.ExpectedError(NegativeLiabilityErr)
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxInvRevChrgOutward@1500091();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      WITH PurchaseHeader DO
        PayReverseChargeServTaxToGov(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::Outward,ReverseChargeTypeOption::Standard);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler)]
    PROCEDURE PayServTaxCrMemoRevChrgOutward@1500089();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ASSERTERROR
        WITH PurchaseHeader DO
          PayReverseChargeServTaxToGov(
            "Document Type"::"Credit Memo","Service Type (Rev. Chrg.)"::Outward,ReverseChargeTypeOption::Standard);
      Assert.ExpectedError(NegativeLiabilityErr)
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovTakeSalesCrPOTInv@1500017();
    VAR
      PurchaseHeader@1500012 : Record 38;
      PurchaseLine@1500011 : Record 39;
      ServiceTaxEntryDetails@1500009 : Record 16474;
      PostedPurchInvoiceDocNo@1500008 : Code[20];
      PostedSalesInvoiceDocNo@1500000 : Code[20];
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,TRUE);
      PostedPurchInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      PostedSalesInvoiceDocNo :=
        ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedPurchInvoiceDocNo,ServiceTaxEntryDetails);

      VerifySalesCreditClosed(ServiceTaxEntryDetails."Base Amount",PostedPurchInvoiceDocNo,PostedSalesInvoiceDocNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovTakeSalesCrRCInvInward@1500078();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxRegNo@1500003 : Record 16475;
      ServiceTaxGroup@1500002 : Record 16471;
      ServiceTaxSetup@1500001 : Record 16472;
      ServiceTaxEntryDetails@1500000 : Record 16474;
      PostedPurchPaymentDocNo@1500006 : Code[20];
      PostedSalesInvoiceDocNo@1500007 : Code[20];
    BEGIN
      Initialize;

      PostedPurchPaymentDocNo :=
        PostRevChargeInvAndApplyPmt(
          ServiceTaxRegNo,ServiceTaxGroup,ServiceTaxSetup,PurchaseHeader,PurchaseLine,
          PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
          ReverseChargeTypeOption::Standard);
      ReverseServiceTaxHelper.PayServiceTax(ServiceTaxRegNo.Code,ServiceTaxGroup.Code,TRUE);

      PostedSalesInvoiceDocNo :=
        ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedPurchPaymentDocNo,ServiceTaxEntryDetails);

      VerifySalesCreditClosed(ServiceTaxEntryDetails."Base Amount",PostedPurchPaymentDocNo,PostedSalesInvoiceDocNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler,STaxCreditRegisterReportHandler)]
    PROCEDURE ServTaxCreditRegTakenAsSalesCredit@1500084();
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxEntryDetails@1500002 : Record 16474;
      GenJournalLine@1500005 : Record 81;
      PostedPurchInvoiceDocNo@1500001 : Code[20];
      PostedSalesInvoiceDocNo@1500000 : Code[20];
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,TRUE);
      PostedPurchInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      PostedSalesInvoiceDocNo :=
        ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedPurchInvoiceDocNo,ServiceTaxEntryDetails);

      COMMIT;
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedPurchInvoiceDocNo,GenJournalLine);
      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(GenJournalLine,TRUE);

      ServiceTaxReportHelper.VerifyServTaxCreditRegisterTakenAsSalesCredit(PostedSalesInvoiceDocNo,ServiceTaxEntryDetails.FullTaxAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedUnapplyAfterPayRCToGov@1500015();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxRegNo@1500003 : Record 16475;
      ServiceTaxGroup@1500002 : Record 16471;
      ServiceTaxSetup@1500001 : Record 16472;
      PostedPurchPaymentDocNo@1500006 : Code[20];
    BEGIN
      Initialize;

      PostedPurchPaymentDocNo :=
        PostRevChargeInvAndApplyPmt(
          ServiceTaxRegNo,ServiceTaxGroup,ServiceTaxSetup,PurchaseHeader,PurchaseLine,
          PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
          ReverseChargeTypeOption::Standard);
      ReverseServiceTaxHelper.PayServiceTax(ServiceTaxRegNo.Code,ServiceTaxGroup.Code,TRUE);

      ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPurchPaymentDocNo);
      Assert.ExpectedError(UnapplyOfUsedCreditErr);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedUnapplyPmtAndInvNonPoT@1500044();
    VAR
      PurchaseLine@1500004 : Record 39;
      ServiceTaxSetup@1500001 : Record 16472;
      ServiceTaxEntryDetails@1500000 : Record 16474;
      PostedPurchaseDocNo@1500003 : Code[20];
      PostedPaymentDocNo@1500002 : Code[20];
    BEGIN
      Initialize;

      PostPmtAppliedToInvPoT(
        PurchaseLine."Document Type"::Invoice,FALSE,PurchaseLine,PostedPurchaseDocNo,PostedPaymentDocNo,ServiceTaxSetup);
      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedPaymentDocNo,ServiceTaxEntryDetails);

      ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPurchaseDocNo);
      Assert.ExpectedError(UnapplyOfUsedCreditErr);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE UnapplyPmtAndInvUsedCreditPoT@1500069();
    VAR
      PurchaseLine@1500004 : Record 39;
      ServiceTaxSetup@1500001 : Record 16472;
      ServiceTaxEntryDetails@1500000 : Record 16474;
      PostedPurchaseDocNo@1500003 : Code[20];
      PostedPaymentDocNo@1500002 : Code[20];
    BEGIN
      Initialize;

      PostPmtAppliedToInvPoT(
        PurchaseLine."Document Type"::Invoice,TRUE,PurchaseLine,PostedPurchaseDocNo,PostedPaymentDocNo,ServiceTaxSetup);
      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(PostedPurchaseDocNo,ServiceTaxEntryDetails);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPurchaseDocNo);

      ServiceTaxVerify.DocHasClosedRemCredit(PostedPurchaseDocNo);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromCrMemoNonPoT@1500070();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromPurchInvNonPoT@1500066();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromPurchInvPoT@1500004();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromPurchCMemoPoT@1500009();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromPurchInvRevCh@1500019();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPmtFromReturnOrderRevCh@1500072();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPmtFromPurchaseDoc(PurchaseHeader."Document Type"::"Return Order",ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPartialPmtPurchInv@1500057();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPartialPmtFromPurchDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPartialPmtPurchInvPoT@1500065();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPartialPmtFromPurchDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyPartialPmtPurchInvRevCh@1500067();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPartialPmtFromPurchDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingPurchInvNonPoT@1500075();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingPmtFromPurDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingPurchInvPoT@1500071();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingPmtFromPurDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingPurchInvRevCh@1500068();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingPmtFromPurDoc(PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyTwoPmtsPurchInvNonPoT@1500079();
    BEGIN
      UnapplyTwoPmtsPurchInv(ReverseChargeTypeOption::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyTwoPmtsPurchInvRevCh@1500061();
    BEGIN
      UnapplyTwoPmtsPurchInv(ReverseChargeTypeOption::Standard,FALSE);
    END;

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;
      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE ApplyInvToCrMemo@1500034(ReverseChargeType@1500000 : Option;InvAmountIs@1500010 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedDocNo1@1500005 : Code[20];
      PostedDocNo2@1500009 : Code[20];
      CrMemoBaseAmount@1500014 : Decimal;
      CrMemoTaxAmount@1500013 : Decimal;
      InvoiceBaseAmount@1500012 : Decimal;
      InvoiceTaxAmount@1500011 : Decimal;
      PoT@1500001 : Boolean;
      SmallerDocumentNo@1500016 : Code[20];
      LastTransactionNo@1500017 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup:
      PoT := ReverseChargeType = ReverseChargeTypeOption::" ";
      ReverseServiceTaxHelper.CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType,100,PoT);

      // Exercise
      PostedDocNo1 := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      PostedDocNo2 := PostAndApplyCrMemo(PurchaseHeader,PostedDocNo1,InvAmountIs);

      // Verify
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo1,InvAmountIs = InvoiceAmountIs::Greater);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo2,InvAmountIs = InvoiceAmountIs::Smaller);

      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      InvoiceBaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",PurchaseHeader."Document Type");
      InvoiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(InvoiceBaseAmount,ServiceTaxSetup);
      CrMemoBaseAmount := -InvoiceBaseAmount / ReverseServiceTaxHelper.GetPurchInvAmountFactor(InvAmountIs);
      CrMemoTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(CrMemoBaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxEntry(PostedDocNo1,InvoiceBaseAmount,ServiceTaxSetup);
      ServiceTaxVerify.ServTaxEntry(PostedDocNo2,CrMemoBaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.PostedPurchDocGLBalance(ServiceTaxSetup,ReverseChargeType,PoT,InvoiceTaxAmount + CrMemoTaxAmount);

      IF ReverseChargeType = ReverseChargeTypeOption::" " THEN
        IF PoT THEN BEGIN
          ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,InvoiceTaxAmount + CrMemoTaxAmount);
          ServiceTaxVerify.ServTaxEntriesArePaid(ReverseServiceTaxHelper.GetLastTransactionNo);
        END ELSE
          ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,0)
      ELSE
        ServiceTaxVerify.STEntryDetailsRemRevChrgCredit(LastTransactionNo,0);

      IF InvAmountIs = InvoiceAmountIs::Greater THEN
        SmallerDocumentNo := PostedDocNo2
      ELSE
        SmallerDocumentNo := PostedDocNo1;
      ServiceTaxVerify.DocHasClosedRemCredit(SmallerDocumentNo);
    END;

    LOCAL PROCEDURE ApplyPmtToPurchGenJnl@1500073(VAR GenJournalLine@1500002 : Record 81;DocumentType@1500008 : Option;ReverseChargeType@1500000 : Option;PoT@1500001 : Boolean);
    VAR
      PostedPurchaseDocNo@1500005 : Code[20];
      PostedPaymentDocNo@1500009 : Code[20];
      PaymentAmount@1500003 : Decimal;
    BEGIN
      Initialize;

      PostedPurchaseDocNo := PostPurchDocFromJnl(GenJournalLine,DocumentType,ReverseChargeType,PoT);

      PaymentAmount := -ServiceTaxVerify.CalcVendLedgEntryRemAmount(PostedPurchaseDocNo);
      PostedPaymentDocNo :=
        PostAndApplyPayment(
          GenJournalLine."Account No.",PaymentAmount,GenJournalLine."Posting Date",
          GenJournalLine."Document Type",PostedPurchaseDocNo,
          ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"));

      // values for further verification
      GenJournalLine."Applies-to Doc. No." := PostedPaymentDocNo;
      GenJournalLine."Document No." := PostedPurchaseDocNo;
      GenJournalLine."Service Tax Base Amount (LCY)" := -GenJournalLine.Amount;
    END;

    LOCAL PROCEDURE ApplyPmtToPurchaseDoc@1500008(DocumentType@1500008 : Option;PoT@1500011 : Boolean);
    VAR
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDocNo@1500001 : Code[20];
      PostedPaymentDocNo@1500000 : Code[20];
      BaseAmount@1500004 : Decimal;
      Amount@1500009 : Decimal;
      RevChargeCreditClosed@1500005 : Boolean;
      RealCreditClosed@1500010 : Boolean;
      SBCAmount@1500002 : Decimal;
      KKCAmount@1500007 : Decimal;
    BEGIN
      Initialize;

      // Exercise
      PostPmtAppliedToInvPoT(DocumentType,PoT,PurchaseLine,PostedPurchaseDocNo,PostedPaymentDocNo,ServiceTaxSetup);

      // Verify
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      Amount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      RevChargeCreditClosed := TRUE;
      RealCreditClosed := FALSE;

      IF PoT THEN
        ServiceTaxVerify.ServiceTaxEntries(PostedPurchaseDocNo,BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed)
      ELSE BEGIN
        ServiceTaxVerify.ServTaxEntry(PostedPurchaseDocNo,BaseAmount,ServiceTaxSetup);
        ServiceTaxVerify.ServTaxEntryDetails(PostedPaymentDocNo,BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
      END;

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,Amount,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,KKCAmount,0,0,0);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,0,0,0);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDocNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPaymentDocNo,FALSE);
    END;

    LOCAL PROCEDURE ApplyRevChrgPmtToPurchaseDoc@1500007(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDoc@1500005 : Code[20];
      PostedPayment@1500009 : Code[20];
      BaseAmount@1500012 : Decimal;
      Amount@1500011 : Decimal;
      RevChargeCreditClosed@1500010 : Boolean;
      RealCreditClosed@1500004 : Boolean;
      SBCAmount@1500000 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      Initialize;

      // Setup:
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::Standard,100,FALSE);

      // Exercise
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PostedPurchaseDoc := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      PostedPayment := PostAndApplyPayment(PurchaseHeader."Pay-to Vendor No.",
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100),
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetPostingDocType(PurchaseHeader."Document Type"),PostedPurchaseDoc,
          ReverseServiceTaxHelper.GetApplyingDocType(PurchaseHeader."Document Type"));

      // Verify
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      Amount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,Amount,-Amount,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,KKCAmount,-KKCAmount,0);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,SBCAmount,0,-SBCAmount,0);

      RevChargeCreditClosed := FALSE;
      RealCreditClosed := TRUE;
      ServiceTaxVerify.ServTaxEntryDetails(
        PostedPayment,BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDoc,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPayment,FALSE);
    END;

    LOCAL PROCEDURE GetRevChargePct@1500062(ReverseChargeType@1500001 : Option) : Integer;
    BEGIN
      IF ReverseChargeType = ReverseChargeTypeOption::" " THEN
        EXIT(0);
      EXIT(100);
    END;

    LOCAL PROCEDURE GetServiceTypeRevChrg@1500064(ReverseChargeType@1500001 : Option) : Integer;
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      IF ReverseChargeType = ReverseChargeTypeOption::" " THEN
        EXIT(GenJournalLine."Service Type (Rev. Chrg.)"::" ");
      EXIT(GenJournalLine."Service Type (Rev. Chrg.)"::Inward);
    END;

    LOCAL PROCEDURE PayReverseChargeServTaxToGov@1170000003(DocumentType@1500000 : Option;SrvTypeRevChrg@1500002 : Option;ReverseChargeType@1500001 : Option);
    VAR
      PurchaseHeader@1500011 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ServiceTaxRegNo@1500003 : Record 16475;
      ServiceTaxGroup@1500009 : Record 16471;
      ServiceTaxSetup@1500008 : Record 16472;
      PostedPayToGovDocNo@1500007 : Code[20];
    BEGIN
      Initialize;

      // Setup:
      PostRevChargeInvAndApplyPmt(ServiceTaxRegNo,ServiceTaxGroup,ServiceTaxSetup,PurchaseHeader,PurchaseLine,DocumentType,
        SrvTypeRevChrg,ReverseChargeType);

      // Exercise:
      PostedPayToGovDocNo := LibraryServiceTax.PayServiceTax(ServiceTaxRegNo.Code,ServiceTaxGroup.Code,TRUE);

      // Verify:
      ServiceTaxVerify.ServTaxPaymentEntries(PurchaseLine."Line Amount",DocumentType,ServiceTaxSetup,
        PostedPayToGovDocNo,SrvTypeRevChrg);
    END;

    LOCAL PROCEDURE PostAndApplyCrMemo@1500035(InvoicePurchHeader@1500012 : Record 38;AppliesToDocNo@1500000 : Code[20];InvAmountIs@1500002 : Option) : Code[20];
    VAR
      PurchaseHeader@1500006 : Record 38;
      PurchaseInvoiceLine@1500001 : Record 123;
      PurchaseLine@1500003 : Record 39;
      CopyDocMgt@1500009 : Codeunit 6620;
      LinesNotCopied@1500005 : Integer;
      MissingExCostRevLink@1500007 : Boolean;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",InvoicePurchHeader."Buy-from Vendor No.");

      WITH PurchaseHeader DO BEGIN
        VALIDATE(Structure,InvoicePurchHeader.Structure);
        VALIDATE("Posting Date",InvoicePurchHeader."Posting Date");
        VALIDATE("Vendor Cr. Memo No.","No.");
        VALIDATE(PoT,InvoicePurchHeader.PoT);
        VALIDATE("Service Tax Rounding Precision",ReverseServiceTaxHelper.GetServTaxRoundingPrecision);
        VALIDATE("Applies-to Doc. Type",InvoicePurchHeader."Document Type");
        VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
        VALIDATE("Service Type (Rev. Chrg.)",InvoicePurchHeader."Service Type (Rev. Chrg.)");
        VALIDATE("Consignment Note No.","No.");
        MODIFY(TRUE);
      END;

      PurchaseInvoiceLine.SETRANGE("Document No.",AppliesToDocNo);
      PurchaseInvoiceLine.FINDFIRST;
      CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE);
      CopyDocMgt.CopyPurchInvLinesToDoc(
        PurchaseHeader,PurchaseInvoiceLine,LinesNotCopied,MissingExCostRevLink);

      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        SETFILTER("Line Amount",'<>%1',0);
        FINDFIRST;
        VALIDATE("Direct Unit Cost","Direct Unit Cost" / ReverseServiceTaxHelper.GetPurchInvAmountFactor(InvAmountIs));
        CalculateStructures(PurchaseHeader);
        MODIFY;
      END;
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE PostAndApplyPayment@1500018(VendorNo@1500000 : Code[20];Amount@1500001 : Decimal;PostingDate@1500002 : Date;AppliesToDocType@1500003 : Option;AppliesToDocNo@1500004 : Code[20];DocumentType@1500007 : Option) : Code[20];
    VAR
      GenJournalLine@1500005 : Record 81;
      Vendor@1500008 : Record 23;
    BEGIN
      ReverseServiceTaxHelper.CreatePayment(GenJournalLine,VendorNo,Amount,PostingDate,DocumentType);
      Vendor.GET(VendorNo);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Service Tax Registration No.",Vendor."Service Tax Registration No.");
        VALIDATE("Applies-to Doc. Type",AppliesToDocType);
        VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE PostAndApplyPmt@1500033(PurchaseHeader@1500009 : Record 38;Amount@1500001 : Decimal;AppliesToDocNo@1500004 : Code[20]) : Code[20];
    BEGIN
      EXIT(
        PostAndApplyPayment(PurchaseHeader."Pay-to Vendor No.",Amount,
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetPostingDocType(PurchaseHeader."Document Type"),
          AppliesToDocNo,ReverseServiceTaxHelper.GetApplyingDocType(PurchaseHeader."Document Type")));
    END;

    LOCAL PROCEDURE PostPmtAppliedToInvPoT@1500005(DocumentType@1500001 : Option;PoT@1500000 : Boolean;VAR PurchaseLine@1500002 : Record 39;VAR PostedPurchaseDocNo@1500004 : Code[20];VAR PostedPaymentDocNo@1500003 : Code[20];VAR ServiceTaxSetup@1500006 : Record 16472);
    VAR
      PurchaseHeader@1500010 : Record 38;
      PaymentAmount@1500005 : Decimal;
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::" ",0,PoT);
      PostedPurchaseDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PaymentAmount :=
        ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,0);
      PostedPaymentDocNo :=
        PostAndApplyPayment(
          PurchaseHeader."Pay-to Vendor No.",PaymentAmount,PurchaseHeader."Posting Date",
          ReverseServiceTaxHelper.GetPostingDocType(PurchaseHeader."Document Type"),PostedPurchaseDocNo,
          ReverseServiceTaxHelper.GetApplyingDocType(PurchaseHeader."Document Type"));
    END;

    LOCAL PROCEDURE PostPurchaseDoc@1500001(DocumentType@1500008 : Option;ReverseChargeType@1500007 : Option;PoT@1500011 : Boolean);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      PostedPurchaseDoc@1500001 : Code[20];
    BEGIN
      Initialize;
      ValidateTaxTypeParameters(PoT,ReverseChargeType);

      // Setup
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,
        ReverseChargeType,100,PoT);

      // Exercise
      PostedPurchaseDoc := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ServiceTaxVerify.GLBalancesOnPostedPurchaseDoc(
        PurchaseHeader."Posting Date",PurchaseLine,PostedPurchaseDoc,DocumentType,ReverseChargeType,PoT);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDoc,TRUE);
    END;

    LOCAL PROCEDURE PostPurchDocFromJnl@1500021(VAR GenJournalLine@1500003 : Record 81;DocumentType@1500002 : Option;ReverseChargeType@1500001 : Option;PoT@1500000 : Boolean) : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,DocumentType,GetServiceTypeRevChrg(ReverseChargeType),ReverseChargeType,PoT,GetRevChargePct(ReverseChargeType));

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE PostRevChargeInvAndApplyPmt@1500012(VAR ServiceTaxRegNo@1500000 : Record 16475;VAR ServiceTaxGroup@1500001 : Record 16471;VAR ServiceTaxSetup@1500009 : Record 16472;VAR PurchaseHeader@1500006 : Record 38;VAR PurchaseLine@1500002 : Record 39;DocumentType@1500003 : Option;SrvTypeRevChrg@1500005 : Option;ReverseChargeType@1500004 : Option) : Code[20];
    VAR
      PostedPurchaseInvoiceDocNo@1500008 : Code[20];
      PostedPurchasePaymentDocNo@1500007 : Code[20];
    BEGIN
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegNo);
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      ReverseServiceTaxHelper.CreatePurchaseHeader(PurchaseHeader,DocumentType,SrvTypeRevChrg,FALSE);
      ReverseServiceTaxHelper.CreatePurchaseLine(PurchaseLine,PurchaseHeader,ServiceTaxGroup.Code,ServiceTaxRegNo.Code,
        ReverseChargeType,100);

      PostedPurchaseInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ServiceTaxSetup.FindOnDate(ServiceTaxGroup.Code,PurchaseHeader."Posting Date");
      PostedPurchasePaymentDocNo := PostAndApplyPayment(PurchaseHeader."Pay-to Vendor No.",
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100),
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetPostingDocType(PurchaseHeader."Document Type"),
          PostedPurchaseInvoiceDocNo,ReverseServiceTaxHelper.GetApplyingDocType(PurchaseHeader."Document Type"));
      EXIT(PostedPurchasePaymentDocNo);
    END;

    LOCAL PROCEDURE ReversePurchDocFromJnl@1500085(DocumentType@1500002 : Option;ReverseChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      GenJournalLine@1500004 : Record 81;
      LastTransactionNo@1500003 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostPurchDocFromJnl(GenJournalLine,DocumentType,ReverseChargeType,PoT);

      ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");

      ServiceTaxVerify.ReversedDocument(GenJournalLine."Document No.",LastTransactionNo);
    END;

    LOCAL PROCEDURE RevChrgApplyPartialPmtToDoc@1500025(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDoc@1500005 : Code[20];
      PostedPartialPayment@1500009 : Code[20];
      PostedRemainingPayment@1500010 : Code[20];
      AccountNo@1500007 : Code[20];
      BaseAmount@1500012 : Decimal;
      Amount@1500011 : Decimal;
      PaymentAmount@1500000 : Decimal;
      PartialPaymentFactor@1500004 : Decimal;
      RevChargeCreditClosed@1500013 : Boolean;
      RealCreditClosed@1500001 : Boolean;
      KKCAmount@1500014 : Decimal;
      SBCAmount@1500015 : Decimal;
    BEGIN
      Initialize;

      // Setup:
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::Standard,100,FALSE);
      PartialPaymentFactor := LibraryRandom.RandDec(1,1);

      // Exercise
      PostedPurchaseDoc := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");

      PaymentAmount :=
        ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100);

      PostedPartialPayment := PostAndApplyPmt(PurchaseHeader,PartialPaymentFactor * PaymentAmount,PostedPurchaseDoc);
      PostedRemainingPayment := PostAndApplyPmt(PurchaseHeader,(1 - PartialPaymentFactor) * PaymentAmount,PostedPurchaseDoc);

      // Verify
      AccountNo := ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup);
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      Amount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup,Amount);
      ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup,SBCAmount);
      ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup,KKCAmount);

      AccountNo := ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,PartialPaymentFactor * Amount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(1 - PartialPaymentFactor) * Amount);
      AccountNo := ReverseServiceTaxHelper.GetServTaxSBCInterimPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,PartialPaymentFactor * SBCAmount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(1 - PartialPaymentFactor) * SBCAmount);
      AccountNo := ReverseServiceTaxHelper.GetKKCInterimPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,PartialPaymentFactor * KKCAmount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(1 - PartialPaymentFactor) * KKCAmount);

      AccountNo := ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,-PartialPaymentFactor * Amount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(PartialPaymentFactor - 1) * Amount);
      AccountNo := ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,-PartialPaymentFactor * SBCAmount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(PartialPaymentFactor - 1) * SBCAmount);
      AccountNo := ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup);
      ServiceTaxVerify.GLEntryWithRounding(PostedPartialPayment,AccountNo,-PartialPaymentFactor * KKCAmount);
      ServiceTaxVerify.GLEntryWithRounding(PostedRemainingPayment,AccountNo,(PartialPaymentFactor - 1) * KKCAmount);
      RevChargeCreditClosed := FALSE;
      RealCreditClosed := TRUE;
      ServiceTaxVerify.STEntryDetailsPartialPay(PostedPartialPayment,BaseAmount,ServiceTaxSetup,PartialPaymentFactor,0,FALSE,
        RevChargeCreditClosed,RealCreditClosed);
      ServiceTaxVerify.STEntryDetailsPartialPay(PostedRemainingPayment,BaseAmount,ServiceTaxSetup,1 - PartialPaymentFactor,0,FALSE,
        RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDoc,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPartialPayment,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedRemainingPayment,FALSE);
    END;

    LOCAL PROCEDURE UnapplyPmtFromPurchaseDoc@1500002(DocumentType@1500008 : Option;RevChargeType@1500004 : Option;PoT@1500011 : Boolean);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDocNo@1500001 : Code[20];
      PostedPaymentDocNo@1500000 : Code[20];
      PaymentAmount@1500007 : Decimal;
      LastTransactionNo@1500013 : Integer;
      ApplyTransactionNo@1500005 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ValidateTaxTypeParameters(PoT,RevChargeType);

      // Setup
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,
        RevChargeType,100,PoT);

      PostedPurchaseDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PaymentAmount := -ServiceTaxVerify.CalcVendLedgEntryRemAmount(PostedPurchaseDocNo);
      PostedPaymentDocNo := PostAndApplyPmt(PurchaseHeader,PaymentAmount,PostedPurchaseDocNo);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPaymentDocNo);

      // Verify
      VerifyUnapply(
        PurchaseHeader,PurchaseLine,PaymentAmount,ApplyTransactionNo,LastTransactionNo,
        DocumentType,RevChargeType,PostedPurchaseDocNo,PostedPaymentDocNo,PoT);
    END;

    LOCAL PROCEDURE UnapplyPartialPmtFromPurchDoc@1500041(DocumentType@1500008 : Option;RevChargeType@1500018 : Option;PoT@1500017 : Boolean);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDoc@1500005 : Code[20];
      PostedPartialPayment@1500009 : Code[20];
      PaymentAmount@1500000 : Decimal;
      PartialPaymentFactor@1500004 : Decimal;
      ApplyTransactionNo@1500014 : Integer;
      LastTransactionNo@1500015 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup:
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,RevChargeType,100,PoT);
      PartialPaymentFactor := LibraryRandom.RandDec(1,1);

      PostedPurchaseDoc := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");

      PaymentAmount :=
        ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100);

      PostedPartialPayment := PostAndApplyPmt(PurchaseHeader,PartialPaymentFactor * PaymentAmount,PostedPurchaseDoc);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPartialPayment);

      // Verify
      VerifyUnapply(
        PurchaseHeader,PurchaseLine,PartialPaymentFactor * PaymentAmount,ApplyTransactionNo,LastTransactionNo,
        DocumentType,RevChargeType,PostedPurchaseDoc,PostedPartialPayment,PoT);
    END;

    LOCAL PROCEDURE UnapplyRemainingPmtFromPurDoc@1500038(DocumentType@1500008 : Option;RevChargeType@1500018 : Option;PoT@1500017 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      PostedPurchaseDoc@1500005 : Code[20];
      PostedRemainingPayment@1500001 : Code[20];
      PaymentAmount@1500000 : Decimal;
      PartialPaymentAmount@1500007 : Decimal;
      PartialPaymentFactor@1500004 : Decimal;
      ApplyTransactionNo@1500014 : Integer;
      LastTransactionNo@1500015 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup:
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,RevChargeType,100,PoT);
      PartialPaymentFactor := LibraryRandom.RandDec(1,1);

      PostedPurchaseDoc := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");

      IF RevChargeType = ReverseChargeTypeOption::" " THEN
        PaymentAmount :=
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,0)
      ELSE
        PaymentAmount :=
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100);

      PartialPaymentAmount := ROUND(PartialPaymentFactor * PaymentAmount);
      PostAndApplyPmt(PurchaseHeader,PartialPaymentAmount,PostedPurchaseDoc);
      PostedRemainingPayment := PostAndApplyPmt(PurchaseHeader,PaymentAmount - PartialPaymentAmount,PostedPurchaseDoc);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedRemainingPayment);

      // Verify
      VerifyUnapplyRemaining(
        PurchaseHeader,PurchaseLine,PartialPaymentFactor,PaymentAmount,ApplyTransactionNo,LastTransactionNo,
        DocumentType,RevChargeType,PostedPurchaseDoc,PostedRemainingPayment,PoT);

      EXIT(PostedPurchaseDoc);
    END;

    LOCAL PROCEDURE UnapplyTwoPmtsPurchInv@1500055(RevChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      PurchaseHeader@1500003 : Record 38;
      InvoiceDocNo@1500002 : Code[20];
    BEGIN
      InvoiceDocNo :=
        UnapplyRemainingPmtFromPurDoc(PurchaseHeader."Document Type"::Invoice,RevChargeType,PoT);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvoiceDocNo);

      ServiceTaxVerify.DocHasClosedRemCredit(InvoiceDocNo);
    END;

    LOCAL PROCEDURE ValidateTaxTypeParameters@1500058(PoT@1500000 : Boolean;ReverseChargeType@1500001 : Option);
    BEGIN
      IF (ReverseChargeType = ReverseChargeTypeOption::Standard) AND PoT THEN
        Assert.Fail('Split test cases are handled in codeunit: Reverse Service Tax Split');
    END;

    LOCAL PROCEDURE VerifySalesCreditClosed@1500000(BaseAmount@1500002 : Decimal;PostedDocNo@1500001 : Code[20];PostedSalesInvoiceDocNo@1500000 : Code[20]);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
      RevChargeCreditClosed@1500005 : Boolean;
      RealCreditClosed@1500004 : Boolean;
    BEGIN
      RevChargeCreditClosed := TRUE;
      RealCreditClosed := TRUE;
      ServiceTaxVerify.ServTaxEntryDetails(PostedDocNo,BaseAmount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
      ServiceTaxVerify.ServTaxEntryStatus(PostedSalesInvoiceDocNo,RevChargeCreditClosed,RealCreditClosed);
    END;

    LOCAL PROCEDURE VerifyServTaxFullPaymentAppln@1500020(GenJournalLine@1500000 : Record 81);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
    BEGIN
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Applies-to Doc. No.",FALSE);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxEntry(GenJournalLine."Document No.",-GenJournalLine.Amount,ServiceTaxSetup);
    END;

    LOCAL PROCEDURE VerifyServTaxPoTApplnToPmt@1500096(GenJournalLine@1500001 : Record 81;STDetailsDocumentNo@1500002 : Code[20]);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      RealCreditClosed@1500003 : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");

        RealCreditClosed := FALSE;
        ServiceTaxVerify.ServTaxEntryDetails(
          STDetailsDocumentNo,"Service Tax Base Amount (LCY)",ServiceTaxSetup,NOT RealCreditClosed,RealCreditClosed);

        "Service Tax Amount" := ReverseServiceTaxHelper.CalculateServTaxTotal("Service Tax Base Amount (LCY)",ServiceTaxSetup);
        "Service Tax SBC Amount" := ReverseServiceTaxHelper.CalculateSBC("Service Tax Base Amount (LCY)",ServiceTaxSetup);
        "KK Cess Amount" := ReverseServiceTaxHelper.CalculateKKCess("Service Tax Base Amount (LCY)",ServiceTaxSetup);

        ServiceTaxVerify.GLBalanceReceivablesOnly(ServiceTaxSetup,"Service Tax Amount");
        ServiceTaxVerify.GLSBCBalanceReceivablesOnly(ServiceTaxSetup,"Service Tax SBC Amount");
        ServiceTaxVerify.GLKKCBalanceReceivablesOnly(ServiceTaxSetup,"KK Cess Amount");
      END;
    END;

    LOCAL PROCEDURE VerifyServTaxRevChrgApplnToPmt@1500102(GenJournalLine@1500001 : Record 81);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      RealCreditClosed@1500003 : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");

        RealCreditClosed := TRUE;
        ServiceTaxVerify.ServTaxEntryDetails(
          "Applies-to Doc. No.","Service Tax Base Amount (LCY)",ServiceTaxSetup,NOT RealCreditClosed,RealCreditClosed);

        "Service Tax Amount" := ReverseServiceTaxHelper.CalculateServTaxTotal("Service Tax Base Amount (LCY)",ServiceTaxSetup);
        "Service Tax SBC Amount" := ReverseServiceTaxHelper.CalculateSBC("Service Tax Base Amount (LCY)",ServiceTaxSetup);
        "KK Cess Amount" := ReverseServiceTaxHelper.CalculateKKCess("Service Tax Base Amount (LCY)",ServiceTaxSetup);
        ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup,"Service Tax Amount");
        ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup,"Service Tax SBC Amount");
        ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup,"KK Cess Amount");
      END;
    END;

    LOCAL PROCEDURE VerifyUnapply@1500074(PurchaseHeader@1500003 : Record 38;PurchaseLine@1500002 : Record 39;Amount@1500016 : Decimal;ApplyTransactionNo@1500015 : Integer;LastTransactionNo@1500014 : Integer;DocumentType@1500008 : Option;RevChargeType@1500018 : Option;PostedPurchaseDoc@1500005 : Code[20];PostedPartialPayment@1500009 : Code[20];PoT@1500017 : Boolean);
    BEGIN
      ServiceTaxVerify.VendorLedgerEntryRemAmt(PostedPartialPayment,Amount);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDoc,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPartialPayment,TRUE);

      ServiceTaxVerify.UnappAdvPmtSTEntryDetBalances(
        PurchaseLine."Line Amount",DocumentType,LastTransactionNo,
        PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date",PoT);
      ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);

      ServiceTaxVerify.GLBalancesOnPostedPurchaseDoc(
        PurchaseHeader."Posting Date",PurchaseLine,PostedPurchaseDoc,DocumentType,RevChargeType,PoT);
    END;

    LOCAL PROCEDURE VerifyUnapplyRemaining@1500056(PurchaseHeader@1500003 : Record 38;PurchaseLine@1500002 : Record 39;PartialPaymentFactor@1500000 : Decimal;BaseAmount@1500016 : Decimal;ApplyTransactionNo@1500015 : Integer;LastTransactionNo@1500014 : Integer;DocumentType@1500008 : Option;RevChargeType@1500018 : Option;PostedPurchaseDoc@1500005 : Code[20];PostedRemainingPayment@1500009 : Code[20];PoT@1500017 : Boolean);
    VAR
      ServiceTaxSetup@1500007 : Record 16472;
      InvoiceTaxAmount@1500006 : Decimal;
      FirstPaymentTaxAmount@1500001 : Decimal;
      SecondPaymentTaxAmount@1500004 : Decimal;
      SBCAmount@1500010 : Decimal;
      KKCAmount@1500011 : Decimal;
      FirstPaymentSBCAmount@1500012 : Decimal;
      FirstPaymentKKCAmount@1500013 : Decimal;
      SecondPaymentSBCAmount@1500020 : Decimal;
      SecondPaymentKKCAmount@1500019 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");

      IF RevChargeType = ReverseChargeTypeOption::" " THEN
        BaseAmount := ReverseServiceTaxHelper.CalcServTaxBaseAmountBackward(BaseAmount,ServiceTaxSetup,0);

      InvoiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,BaseAmount,DocumentType);

      FirstPaymentTaxAmount := ReverseServiceTaxHelper.RoundServTax(PartialPaymentFactor * InvoiceTaxAmount);
      SecondPaymentTaxAmount := ReverseServiceTaxHelper.RoundServTax((1 - PartialPaymentFactor) * InvoiceTaxAmount);

      SBCAmount :=
        ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,BaseAmount,DocumentType);
      KKCAmount :=
        ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,BaseAmount,DocumentType);

      FirstPaymentSBCAmount := ReverseServiceTaxHelper.RoundServTax(PartialPaymentFactor * SBCAmount);
      FirstPaymentKKCAmount := ReverseServiceTaxHelper.RoundServTax(PartialPaymentFactor * KKCAmount);
      SecondPaymentSBCAmount := ReverseServiceTaxHelper.RoundServTax((1 - PartialPaymentFactor) * SBCAmount);
      SecondPaymentKKCAmount := ReverseServiceTaxHelper.RoundServTax((1 - PartialPaymentFactor) * KKCAmount);

      ServiceTaxVerify.CountOfUnappliedEntries(ApplyTransactionNo);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDoc,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedRemainingPayment,TRUE);

      ServiceTaxVerify.UnappPmtRemainSTEntryDetBal(FirstPaymentTaxAmount,SecondPaymentTaxAmount,LastTransactionNo,RevChargeType,PoT);
      ServiceTaxVerify.UnappPmtRemainSTSBCKKCEntryDetBal(FirstPaymentSBCAmount,SecondPaymentSBCAmount,
        FirstPaymentKKCAmount,SecondPaymentKKCAmount,
        LastTransactionNo,RevChargeType,PoT);

      IF RevChargeType = ReverseChargeTypeOption::" " THEN
        ServiceTaxVerify.VendorLedgerEntryRemAmt(
          PostedPurchaseDoc,-((1 - PartialPaymentFactor) * (BaseAmount + InvoiceTaxAmount + SBCAmount + KKCAmount)))
      ELSE
        ServiceTaxVerify.VendorLedgerEntryRemAmt(PostedPurchaseDoc,-((1 - PartialPaymentFactor) * BaseAmount));

      ServiceTaxVerify.PostedPmtAndInvGLBalPartial(
        ServiceTaxSetup,RevChargeType,PoT,InvoiceTaxAmount,FirstPaymentTaxAmount);
      ServiceTaxVerify.PostedSBCKKCPmtAndInvGLBalPartial(
        ServiceTaxSetup,RevChargeType,PoT,SBCAmount,FirstPaymentSBCAmount,KKCAmount,FirstPaymentKKCAmount);
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxHandler@1500013(VAR PayServiceTax@1500000 : TestPage 16477);
    BEGIN
      LibraryServiceTax.SetValuesForPaymentUseCreditAvailable(PayServiceTax);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500083(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE STaxCreditRegisterReportHandler@1500174(VAR ServTaxCreditRegister@1500000 : TestRequestPage 16592);
    BEGIN
      ServiceTaxReportHelper.ServTaxCreditRegisterReportHandler(ServTaxCreditRegister);
    END;

    BEGIN
    END.
  }
}

