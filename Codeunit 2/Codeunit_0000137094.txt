OBJECT Codeunit 137094 SCM Kitting - D3 - Part 2
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      AssemblySetup@1015 : Record 905;
      InventorySetup@1023 : Record 313;
      AssemblyLine@1009 : Record 901;
      Item@1001 : Record 27;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryCosting@1003 : Codeunit 132200;
      LibraryAssembly@1013 : Codeunit 132207;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryWarehouse@1005 : Codeunit 132204;
      LibraryRandom@1007 : Codeunit 130440;
      AdjSource@1032 : 'Purchase,Revaluation,Item Card,Order Lines,Resource,None';
      CreatePer@1033 : 'Location,Variant,Location & Variant';
      isInitialized@1006 : Boolean;
      WorkDate2@1002 : Date;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      MfgSetup@1000 : Record 99000765;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      CLEARLASTERROR;
      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Item/Resource Card",
        LibraryUtility.GetGlobalNoSeriesCode);

      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      isInitialized := TRUE;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      MfgSetup.GET;
      WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
      LibraryCosting.AdjustCostItemEntries('','');
      LibraryCosting.PostInvtCostToGL(FALSE,WorkDate2,'');
      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Item/Resource Card",
        LibraryUtility.GetGlobalNoSeriesCode);

      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE Adjustment@89(ParentCostingMethod@1000 : Option;CompCostingMethod@1001 : Option;AutCostPosting@1004 : Boolean;AutCostAdj@1005 : Option;AdjustHeader@1003 : Boolean;AdjSource1@1007 : Option;AdjSource2@1008 : Option) : Code[20];
    VAR
      AssemblyHeader@1006 : Record 900;
      TempAssemblyLine@1009 : TEMPORARY Record 901;
      ItemNo@1010 : ARRAY [10] OF Code[20];
      ResourceNo@1012 : ARRAY [10] OF Code[20];
      ItemFilter@1011 : Text[250];
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.UpdateInventorySetup(InventorySetup,AutCostPosting,FALSE,AutCostAdj,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",
        InventorySetup."Average Cost Period"::Day);

      // Create Assembly BOM structure.
      LibraryAssembly.SetupAssemblyData(AssemblyHeader,WorkDate2,ParentCostingMethod,CompCostingMethod,
        Item."Replenishment System"::Assembly,'',NOT AdjustHeader);
      ItemFilter := LibraryAssembly.GetCompsToAdjust(ItemNo,ResourceNo,AssemblyHeader);

      // Add inventory for components to allow posting.
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,LibraryRandom.RandDec(10,2));

      // Introduce a source of adjustment.
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource1,ItemNo[1],ResourceNo[1]);
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);

      // Exercise.
      // Post Assembly Order, introduce a second source of adjustment and adjust.
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource2,ItemNo[1],ResourceNo[1]);
      LibraryCosting.AdjustCostItemEntries(ItemFilter,'');

      // Verify: Posted documents and entries.
      LibraryAssembly.VerifyPostedAssemblyHeader(TempAssemblyLine,AssemblyHeader,AssemblyHeader.Quantity);
      LibraryAssembly.VerifyILEs(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyValueEntries(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyPostedComments(AssemblyHeader);
      LibraryAssembly.VerifyResEntries(TempAssemblyLine,AssemblyHeader);
      LibraryAssembly.VerifyCapEntries(TempAssemblyLine,AssemblyHeader);
      LibraryAssembly.VerifyAdjustmentEntries(AssemblyHeader,AdjSource2);
      LibraryAssembly.VerifyItemRegister(AssemblyHeader);

      // Tear down.
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::Item,InventorySetup."Average Cost Period"::Day);

      EXIT(AssemblyHeader."No.");
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGCompBeforePostPurchase@199();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Purchase,AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjFIFOCompBeforePostReval@201();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Revaluation,AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjSTDCompAfterPostReval@198();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::None,AdjSource::Revaluation);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGCompAfterPostPurchase@196();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::None,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGCompAfterPostItemCard@225();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::None,AdjSource::"Item Card");
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjSTDParentBeforePostItemCard@203();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::"Item Card",AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjSTDParentBeforePostVariance@204();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::"Order Lines",AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGParentBeforePostPurchase@237();
    BEGIN
      Adjustment(
        Item."Costing Method"::Average,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::Purchase,AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGParentAfterPostResource@235();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None,AdjSource::Resource);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjFIFOParentAfterPostReval@236();
    BEGIN
      Adjustment(
        Item."Costing Method"::FIFO,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None,AdjSource::Revaluation);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjAVGParentAfterPostPurchase@202();
    BEGIN
      Adjustment(
        Item."Costing Method"::Average,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AdjSTDParentAfterPostItemCard@238();
    BEGIN
      Adjustment(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None,AdjSource::"Item Card");
    END;

    [Normal]
    LOCAL PROCEDURE AdjPostGL@86(ParentCostingMethod@1000 : Option;CompCostingMethod@1001 : Option;PerPostingGroup@1011 : Boolean;AdjustHeader@1003 : Boolean;AdjSource1@1004 : Option;AdjSource2@1005 : Option);
    VAR
      PostedAssemblyHeader@1006 : Record 910;
      AssemblyHeaderNo@1012 : Code[20];
      DocNo@1002 : Code[20];
    BEGIN
      // Setup. Perform adjustment scenario.
      Initialize;
      AssemblyHeaderNo :=
        Adjustment(ParentCostingMethod,CompCostingMethod,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
          AdjustHeader,AdjSource1,AdjSource2);
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",
        InventorySetup."Average Cost Period"::Day);

      // Exercise: Post Inventory cost to G/L for the selected items.
      PostedAssemblyHeader.RESET;
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeaderNo);
      PostedAssemblyHeader.FINDFIRST;
      IF PerPostingGroup THEN
        DocNo := PostedAssemblyHeader."No."
      ELSE
        DocNo := '';
      LibraryAssembly.PostInvtCostToGL(PerPostingGroup,PostedAssemblyHeader."Item No.",DocNo,
        TEMPORARYPATH + PostedAssemblyHeader."No." + '.pdf');

      // Verify.
      LibraryAssembly.VerifyGLEntries(PostedAssemblyHeader,PerPostingGroup);

      // Tear down.
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::Item,InventorySetup."Average Cost Period"::Day);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PostGLAdjAVGCompBeforePost@103();
    BEGIN
      AdjPostGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,FALSE,AdjSource::Purchase,AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PostGLAdjFIFOCompBeforePost@102();
    BEGIN
      AdjPostGL(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,FALSE,AdjSource::Revaluation,AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PostGLAdjAVGCompAfterPost@100();
    BEGIN
      AdjPostGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,FALSE,AdjSource::None,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PostGLAdjAVGParentAfterPost@107();
    BEGIN
      AdjPostGL(
        Item."Costing Method"::Average,Item."Costing Method"::Average,FALSE,TRUE,AdjSource::None,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PostGLAdjAVGParentPerPostGr@219();
    BEGIN
      AdjPostGL(
        Item."Costing Method"::Average,Item."Costing Method"::Average,TRUE,TRUE,AdjSource::None,AdjSource::Purchase);
    END;

    [Normal]
    LOCAL PROCEDURE BatchAdjustment@209(VAR AssemblyHeaderNo1@1012 : Code[20];VAR AssemblyHeaderNo2@1011 : Code[20];ParentCostingMethod@1000 : Option;CompCostingMethod@1001 : Option;AutCostPosting@1004 : Boolean;AutCostAdj@1005 : Option;AdjustHeader@1003 : Boolean;AdjSource1@1007 : Option;AdjSource2@1008 : Option);
    VAR
      AssemblyHeader@1006 : Record 900;
      TempAssemblyLine@1009 : TEMPORARY Record 901;
      ItemFilter@1015 : Text[250];
      ItemNo@1018 : ARRAY [10] OF Code[20];
      ResourceNo@1017 : ARRAY [10] OF Code[20];
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.UpdateInventorySetup(InventorySetup,AutCostPosting,FALSE,AutCostAdj,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",
        InventorySetup."Average Cost Period"::Day);

      // First Assembly Order and its adjustment events, before and after posting.
      LibraryAssembly.SetupAssemblyData(AssemblyHeader,WorkDate2,ParentCostingMethod,CompCostingMethod,
        Item."Replenishment System"::Assembly,'',TRUE);
      ItemFilter := LibraryAssembly.GetCompsToAdjust(ItemNo,ResourceNo,AssemblyHeader);
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,LibraryRandom.RandDec(10,2));
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource1,ItemNo[1],ResourceNo[1]);
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      AssemblyHeaderNo1 := AssemblyHeader."No.";
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource2,ItemNo[1],ResourceNo[1]);

      // Second Assembly Order and its adjustment events, before and after posting.
      LibraryAssembly.SetupAssemblyData(AssemblyHeader,WorkDate2,ParentCostingMethod,CompCostingMethod,
        Item."Replenishment System"::Assembly,'',TRUE);
      ItemFilter += '|' + COPYSTR(LibraryAssembly.GetCompsToAdjust(ItemNo,ResourceNo,AssemblyHeader),1,1022);
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,LibraryRandom.RandDec(10,2));
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource1,ItemNo[1],ResourceNo[1]);
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      AssemblyHeaderNo2 := AssemblyHeader."No.";
      LibraryAssembly.CreateAdjustmentSource(AssemblyHeader,WorkDate2,AdjustHeader,AdjSource2,ItemNo[1],ResourceNo[1]);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(ItemFilter,'');

      // Verify.
      LibraryAssembly.VerifyPostedAssemblyHeader(TempAssemblyLine,AssemblyHeader,AssemblyHeader.Quantity);
      LibraryAssembly.VerifyILEs(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyValueEntries(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyPostedComments(AssemblyHeader);
      LibraryAssembly.VerifyResEntries(TempAssemblyLine,AssemblyHeader);
      LibraryAssembly.VerifyCapEntries(TempAssemblyLine,AssemblyHeader);
      LibraryAssembly.VerifyItemRegister(AssemblyHeader);

      // Tear down.
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::Item,InventorySetup."Average Cost Period"::Day);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchAdjCompSTDParentAVGComp@214();
    BEGIN
      BatchAdjustment(AssemblyLine."Document No.",AssemblyLine."Document No.",
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Purchase,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchAdjCompAVGParentFIFOComp@213();
    BEGIN
      BatchAdjustment(AssemblyLine."Document No.",AssemblyLine."Document No.",
        Item."Costing Method"::Average,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Revaluation,AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchAdjParentSTDParentSTDComp@212();
    BEGIN
      BatchAdjustment(AssemblyLine."Document No.",AssemblyLine."Document No.",
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::"Order Lines",AdjSource::"Item Card");
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchAdjParenFIFOParentAVGComp@216();
    BEGIN
      BatchAdjustment(AssemblyLine."Document No.",AssemblyLine."Document No.",
        Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::Purchase,AdjSource::Revaluation);
    END;

    [Normal]
    LOCAL PROCEDURE BatchPostToGL@220(ParentCostingMethod@1000 : Option;CompCostingMethod@1001 : Option;AutCostPosting@1004 : Boolean;AutCostAdj@1005 : Option;AdjustHeader@1003 : Boolean;AdjSource@1007 : Option);
    VAR
      PostedAssemblyHeader@1006 : Record 910;
      AssemblyHeaderNo1@1012 : Code[20];
      AssemblyHeaderNo2@1002 : Code[20];
    BEGIN
      // Setup. Perform adjustment scenario.
      Initialize;
      BatchAdjustment(AssemblyHeaderNo1,AssemblyHeaderNo2,
        ParentCostingMethod,CompCostingMethod,AutCostPosting,AutCostAdj,AdjustHeader,AdjSource,AdjSource);
      LibraryAssembly.UpdateInventorySetup(InventorySetup,AutCostPosting,FALSE,AutCostAdj,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",
        InventorySetup."Average Cost Period"::Day);

      // Exercise. Post inventory cost to G/L for selected item.
      PostedAssemblyHeader.RESET;
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeaderNo1,AssemblyHeaderNo2);
      PostedAssemblyHeader.FINDSET;
      LibraryAssembly.PostInvtCostToGL(FALSE,PostedAssemblyHeader."Item No.",'',
        TEMPORARYPATH + AssemblyHeaderNo1 + AssemblyHeaderNo2 + '.pdf');

      // Verify.
      REPEAT
        LibraryAssembly.VerifyGLEntries(PostedAssemblyHeader,FALSE);
      UNTIL PostedAssemblyHeader.NEXT = 0;

      // Tear down.
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::Item,InventorySetup."Average Cost Period"::Day);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostAdjComp@40();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostAdjParent@49();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostNoAdj@50();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AutPostAdjComp@39();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,TRUE,InventorySetup."Automatic Cost Adjustment"::Never,FALSE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AutPostAdjParent@38();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,TRUE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AutPostNoAdj@30();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,TRUE,InventorySetup."Automatic Cost Adjustment"::Never,TRUE,
        AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AutPostAutAdjComp@55();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,TRUE,InventorySetup."Automatic Cost Adjustment"::Always,FALSE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE AutPostAutAdjParent@54();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,TRUE,InventorySetup."Automatic Cost Adjustment"::Always,TRUE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostNoAutAdj@135();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Always,TRUE,
        AdjSource::None);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostAutAdjComp@125();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::FIFO,FALSE,InventorySetup."Automatic Cost Adjustment"::Always,FALSE,
        AdjSource::Purchase);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BatchPostAutAdjParent@124();
    BEGIN
      BatchPostToGL(
        Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE,InventorySetup."Automatic Cost Adjustment"::Always,TRUE,
        AdjSource::Purchase);
    END;

    [Normal]
    LOCAL PROCEDURE SKUPosting@211(ParentCostingMethod@1000 : Option;CompCostingMethod@1001 : Option;CreatePer@1003 : 'Location,Variant,Location & Variant');
    VAR
      Item@1002 : Record 27;
      Item1@1005 : Record 27;
      AssemblyHeader@1006 : Record 900;
      TempAssemblyLine@1009 : TEMPORARY Record 901;
      Location@1008 : Record 14;
      BOMComponent@1004 : Record 90;
      BlankLocation@1010 : Record 14;
      LocationCode@1007 : Code[10];
      GenProdPostingGr@1013 : Code[10];
      CompInvtPostingGr@1012 : Code[10];
      AsmInvtPostingGr@1011 : Code[10];
    BEGIN
      // Setup.
      Initialize;
      LocationCode := '';
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",InventorySetup."Average Cost Period"::Day);

      // Prepare setup for creating SKU per Location.
      IF CreatePer <> CreatePer::Variant THEN BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LibraryAssembly.UpdateAssemblySetup(AssemblySetup,
          Location.Code,AssemblySetup."Copy Component Dimensions from"::"Order Header",LibraryUtility.GetGlobalNoSeriesCode);
        LocationCode := Location.Code;
      END;

      // Create Assembly BOM structure. Add inventory to allow posting.
      LibraryAssembly.SetupPostingToGL(GenProdPostingGr,AsmInvtPostingGr,CompInvtPostingGr,LocationCode);
      BlankLocation.INIT;
      LibraryInventory.UpdateInventoryPostingSetup(BlankLocation);
      LibraryAssembly.CreateItemWithSKU(
        Item,ParentCostingMethod,Item."Replenishment System"::Assembly,CreatePer,GenProdPostingGr,AsmInvtPostingGr,LocationCode);
      LibraryAssembly.CreateItemWithSKU(
        Item1,CompCostingMethod,Item."Replenishment System"::Purchase,CreatePer,GenProdPostingGr,CompInvtPostingGr,LocationCode);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item1."No.",Item."No.",LibraryInventory.GetVariant(Item1."No.",''),
        BOMComponent."Resource Usage Type"::Direct,LibraryRandom.RandDec(20,5),TRUE);
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,Item."No.",'',LibraryRandom.RandDec(10,2),'');
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,0);

      // Verify: SKU cost is loaded correctly on the Assembly Order.
      LibraryAssembly.VerifySKUCost(TempAssemblyLine,AssemblyHeader);

      // Exercise. Post Assembly Order and adjust.
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      LibraryCosting.AdjustCostItemEntries(Item."No." + '|' + Item1."No.",'');

      // Verify.
      LibraryAssembly.VerifyPostedAssemblyHeader(TempAssemblyLine,AssemblyHeader,AssemblyHeader.Quantity);
      LibraryAssembly.VerifyILEs(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyValueEntries(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyAdjustmentEntries(AssemblyHeader,AdjSource::None);
      LibraryAssembly.VerifyPostedComments(AssemblyHeader);

      // Tear down.
      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Order Header",
        LibraryUtility.GetGlobalNoSeriesCode);
      LibraryAssembly.UpdateInventorySetup(InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,
        InventorySetup."Average Cost Calc. Type"::Item,InventorySetup."Average Cost Period"::Day);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUSTDParentAVGCompVariant@233();
    BEGIN
      SKUPosting(Item."Costing Method"::Standard,Item."Costing Method"::Average,CreatePer::Variant);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUFIFOParentSTDCompVariant@232();
    BEGIN
      SKUPosting(Item."Costing Method"::FIFO,Item."Costing Method"::Standard,CreatePer::Variant);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUAVGParentFIFOCompVariant@231();
    BEGIN
      SKUPosting(Item."Costing Method"::Average,Item."Costing Method"::FIFO,CreatePer::Variant);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUSTDParentAVGCompLocVar@230();
    BEGIN
      SKUPosting(Item."Costing Method"::Standard,Item."Costing Method"::Average,CreatePer::"Location & Variant");
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUFIFOParentSTDCompLoc@229();
    BEGIN
      SKUPosting(Item."Costing Method"::FIFO,Item."Costing Method"::Standard,CreatePer::Location);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE SKUAVGParentFIFOCompLocVar@228();
    BEGIN
      SKUPosting(Item."Costing Method"::Average,Item."Costing Method"::FIFO,CreatePer::"Location & Variant");
    END;

    [Normal]
    LOCAL PROCEDURE CircularRef@123(CostingMethod@1002 : Option;UseVariant@1007 : Boolean);
    VAR
      ItemVariant@1006 : Record 5401;
      AssemblyHeader@1000 : Record 900;
      TempAssemblyLine@1001 : TEMPORARY Record 901;
      GenProdPostingGr@1003 : Code[10];
      CompInvtPostingGr@1004 : Code[10];
      AsmInvtPostingGr@1005 : Code[10];
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Order Header",
        LibraryUtility.GetGlobalNoSeriesCode);

      // Create circular assembly order and inventory.
      LibraryAssembly.SetupPostingToGL(GenProdPostingGr,AsmInvtPostingGr,CompInvtPostingGr,'');
      LibraryAssembly.CreateItem(Item,CostingMethod,Item."Replenishment System"::Purchase,GenProdPostingGr,AsmInvtPostingGr);
      IF UseVariant THEN
        LibraryInventory.CreateVariant(ItemVariant,Item);
      LibraryAssembly.CreateAssemblyHeader(
        AssemblyHeader,WorkDate2,Item."No.",'',LibraryRandom.RandDec(10,2),ItemVariant.Code);
      LibraryAssembly.CreateAssemblyLine(AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,AssemblyHeader."Item No.",
        LibraryAssembly.GetUnitOfMeasureCode(AssemblyLine.Type::Item,AssemblyHeader."Item No.",TRUE),
        LibraryRandom.RandDec(10,2),0,'');
      LibraryAssembly.AddCompInventory(AssemblyHeader,WorkDate2,0);

      // Exercise. Post assembly header and adjust.
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WorkDate2);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      LibraryCosting.AdjustCostItemEntries(AssemblyHeader."Item No.",'');

      // Validate.
      LibraryAssembly.VerifyPostedAssemblyHeader(TempAssemblyLine,AssemblyHeader,AssemblyHeader.Quantity);
      LibraryAssembly.VerifyILEs(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyValueEntries(TempAssemblyLine,AssemblyHeader,AssemblyHeader."Quantity to Assemble");
      LibraryAssembly.VerifyAdjustmentEntries(AssemblyHeader,AdjSource::None);
      LibraryAssembly.VerifyPostedComments(AssemblyHeader);
    END;

    [Test]
    PROCEDURE STDLoop@10();
    BEGIN
      CircularRef(Item."Costing Method"::Standard,FALSE);
    END;

    [Test]
    PROCEDURE AVGLoop@11();
    BEGIN
      CircularRef(Item."Costing Method"::Average,FALSE);
    END;

    [Test]
    PROCEDURE STDLoopVar@27();
    BEGIN
      CircularRef(Item."Costing Method"::Standard,TRUE);
    END;

    [Test]
    PROCEDURE AVGLoopVar@25();
    BEGIN
      CircularRef(Item."Costing Method"::Average,TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@48(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Adjust Cost Item Entries] [SCM]
      Unsupported version tags:
      IT: Unable to Execute
      BE: Unable to Execute

      This CU is covering the chapter 3.1.4 in the Test Design Specification of Kitting, as per the following:
      SC4-1: Covered by all test functions.
      SC4-5: Adjustment, SKUPosting
      SC4-6: all test functions.
      SC4-8: Adjustment, BatchAdjustment
      SC4-9: Adjustment, BatchAdjustment
      SC4-10: AdjPostGL, BatchPostToGL
      SC4-11: AdjPostGL, BatchPostToGL
    }
    END.
  }
}

