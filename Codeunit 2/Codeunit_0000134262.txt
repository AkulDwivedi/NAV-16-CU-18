OBJECT Codeunit 134262 Bank Pmt. Appl. Tolerance
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1020 : Codeunit 130440;
      LibraryERM@1022 : Codeunit 131300;
      LibrarySales@1023 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibraryPmtDiscSetup@1002 : Codeunit 131303;
      Assert@1025 : Codeunit 130000;
      IsInitialized@1000 : Boolean;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithPmtToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@17();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,CustLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithNoPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@26();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Sales Invoice and do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically but do not confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithPmtToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@36();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice manually and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,CustLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithNoPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@35();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Sales Invoice and do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice manually but do not confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@54();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically and confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,CustLedgerEntry."Remaining Amount",CustLedgerEntry."Remaining Pmt. Disc. Possible");

      // [THEN] "Accepted Pmt. Disc. Tolerance" is TRUE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithNoPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@14();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Dis. Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Sales Invoice and do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically but do not confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@25();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      PaymentApplicationProposal@1003 : Record 1293;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice manually and confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,CustLedgerEntry."Remaining Amount",CustLedgerEntry."Remaining Pmt. Disc. Possible");

      // [THEN] "Accepted Pmt. Disc. Tolerance" is TRUE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",TRUE);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithNoPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@24();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      CustLedgerEntry@1002 : Record 21;
      PaymentApplicationProposal@1000 : Record 1293;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Sales Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice manually but do not confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesPmtToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@57();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      DetailedCustLedgEntry@1005 : Record 379;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when automatically match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Payment Tolerance" with Amount = 5 for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        CustLedgerEntry."Customer No.");
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD(Amount,-ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoSalesPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@55();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      CustLedgerEntry@1003 : Record 21;
      DetailedCustLedgEntry@1002 : Record 379;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entries are not created when automatically match "Bank Acc. Recon. Line" to Sales Invoice but do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",ToleranceAmount);

      // [THEN] No Detailed Ledger Entry "Payment Tolerance" for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        CustLedgerEntry."Customer No.");
      Assert.RecordIsEmpty(DetailedCustLedgEntry);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesPmtToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@53();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      CustLedgerEntry@1003 : Record 21;
      DetailedCustLedgEntry@1002 : Record 379;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Payment Tolerance" with Amount = 5 for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        CustLedgerEntry."Customer No.");
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD(Amount,-ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoSalesPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@52();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      CustLedgerEntry@1003 : Record 21;
      DetailedCustLedgEntry@1002 : Record 379;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Sales Invoice but do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",ToleranceAmount);

      // [THEN] No Detailed Ledger Entry "Payment Tolerance" for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        CustLedgerEntry."Customer No.");
      Assert.RecordIsEmpty(DetailedCustLedgEntry);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@46();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when automatically match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Pmt. Discount Tolerance" with Amount = 5 for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",CustLedgerEntry."Customer No.");
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD(Amount,-CustLedgerEntry."Original Pmt. Disc. Possible");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoSalesPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@21();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entries are not created when automatically match "Bank Acc. Recon. Line" to Sales Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",CustLedgerEntry."Original Pmt. Disc. Possible");

      // [THEN] No Detailed Ledger Entry "Pmt. Discount Tolerance" for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",CustLedgerEntry."Customer No.");
      Assert.RecordIsEmpty(DetailedCustLedgEntry);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@23();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1003 : Record 1293;
      CustLedgerEntry@1001 : Record 21;
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Sales Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Pmt. Discount Tolerance" with Amount = 5 for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",CustLedgerEntry."Customer No.");
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD(Amount,-CustLedgerEntry."Original Pmt. Disc. Possible");
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoSalesPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@22();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      PaymentApplicationProposal@1002 : Record 1293;
      CustLedgerEntry@1001 : Record 21;
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Sales Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Customer),CustLedgerEntry."Customer No.",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyCustLedgEntry(CustLedgerEntry."Entry No.",CustLedgerEntry."Original Pmt. Disc. Possible");

      // [THEN] No Detailed Ledger Entry "Pmt. Discount Tolerance" for Sales Invoice is created
      FilterPmtDiscToleranceDtldCustLedgEntry(
        DetailedCustLedgEntry,DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",CustLedgerEntry."Customer No.");
      Assert.RecordIsEmpty(DetailedCustLedgEntry);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE ClearSalesAcceptedPmtDiscToleranceWhenRemoveBankAccReconciliation@56();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      // [FEATURE] [Sales] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Accepted Pmt. Disc. Tolerance" and "Amount to Apply" clears out when remove Bank Account Reconciliation previously applied to Sales Invoice with Payment Discount Tolerance

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostSalesInvoice(CustLedgerEntry,CreateCustWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Disc. Tolerance Date",
        CustLedgerEntry."Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible",CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Delete Bank Account Reconciliation Line
      BankAccReconciliationLine.DELETE(TRUE);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);

      // [THEN] Amount to Apply = 0 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.TESTFIELD("Amount to Apply",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE ClearSalesAcceptedPmtToleranceWhenRemoveBankAccReconciliation@10();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 380951] "Accepted Payment Tolerance" and "Amount to Apply" clears out when remove Bank Account Reconciliation previously applied to Sales Invoice with Payment Discount Tolerance

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Sales Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Delete Bank Account Reconciliation Line
      BankAccReconciliationLine.DELETE(TRUE);

      // [THEN] "Accepted Payment Tolerance" is 0 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);

      // [THEN] Amount to Apply = 0 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.TESTFIELD("Amount to Apply",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithPmtToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@11();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,VendLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithNoPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@8();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically but do not confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithPmtToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@6();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice manually and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,VendLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithNoPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@5();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Purchase Invoice and do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice manually but do not confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@43();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically and confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,VendLedgerEntry."Remaining Amount",VendLedgerEntry."Remaining Pmt. Disc. Possible");

      // [THEN] "Accepted Pmt. Disc. Tolerance" is TRUE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithNoPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@42();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" does not include "Payment Dis. Tolerance Amount" when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically but do not confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@41();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      PaymentApplicationProposal@1003 : Record 1293;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice manually and confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,VendLedgerEntry."Remaining Amount",VendLedgerEntry."Remaining Pmt. Disc. Possible");

      // [THEN] "Accepted Pmt. Disc. Tolerance" is TRUE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",TRUE);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithNoPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@40();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      VendLedgerEntry@1002 : Record 25;
      PaymentApplicationProposal@1000 : Record 1293;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Applied Payment Entry" includes "Payment Dis. Tolerance Amount" when manually match "Bank Acc. Recon. Line" to Purchase Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice manually but do not confirm discount in "Payment Discount Tolerance Warning" page
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 95, "Applied Pmt. Discount" is zero in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,BankAccReconciliationLine."Statement Amount",0);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchPmtToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@39();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      DetailedVendLedgEntry@1000 : Record 380;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Payment Tolerance" with Amount = 5 for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      DetailedVendLedgEntry.FINDFIRST;
      DetailedVendLedgEntry.TESTFIELD(Amount,-ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoPurchPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@38();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      VendLedgerEntry@1003 : Record 25;
      DetailedVendLedgEntry@1002 : Record 380;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entries are not created when automatically match "Bank Acc. Recon. Line" to Purchase Invoice but do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",ToleranceAmount);

      // [THEN] No Detailed Ledger Entry "Payment Tolerance" for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      Assert.RecordIsEmpty(DetailedVendLedgEntry);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchPmtToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@37();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      VendLedgerEntry@1003 : Record 25;
      DetailedVendLedgEntry@1006 : Record 380;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Payment Tolerance" with Amount = 5 for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      DetailedVendLedgEntry.FINDFIRST;
      DetailedVendLedgEntry.TESTFIELD(Amount,-ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoPurchPmtToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@33();
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      PaymentApplicationProposal@1005 : Record 1293;
      VendLedgerEntry@1003 : Record 25;
      DetailedVendLedgEntry@1002 : Record 380;
      TolerancePct@1001 : Decimal;
      ToleranceAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Payment Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Purchase Invoice but do not confirm discount in "Payment Tolerance Warning" page

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",ToleranceAmount);

      // [THEN] No Detailed Ledger Entry "Payment Tolerance" for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Tolerance",BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      Assert.RecordIsEmpty(DetailedVendLedgEntry);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnAutomaticApplication@31();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when automatically match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Pmt. Discount Tolerance" with Amount = 5 for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      DetailedVendLedgEntry.FINDFIRST;
      DetailedVendLedgEntry.TESTFIELD(Amount,-VendLedgerEntry."Original Pmt. Disc. Possible");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoPurchPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnAutomaticApplication@30();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entries are not created when automatically match "Bank Acc. Recon. Line" to Purchase Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",VendLedgerEntry."Original Pmt. Disc. Possible");

      // [THEN] No Detailed Ledger Entry "Pmt. Discount Tolerance" for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",
        VendLedgerEntry."Vendor No.");
      Assert.RecordIsEmpty(DetailedVendLedgEntry);
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchPmtDiscToleranceWhenConfirmPmtDiscTolWarningOnManualApplication@28();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      PaymentApplicationProposal@1003 : Record 1293;
      VendLedgerEntry@1001 : Record 25;
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Purchase Invoice and confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied fully to Invoice ("Remaining Amount" is zero)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",0);

      // [THEN] Detailed Ledger Entry "Pmt. Discount Tolerance" with Amount = 5 for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",VendLedgerEntry."Vendor No.");
      DetailedVendLedgEntry.FINDFIRST;
      DetailedVendLedgEntry.TESTFIELD(Amount,-VendLedgerEntry."Original Pmt. Disc. Possible");
    END;

    [Test]
    [HandlerFunctions(PaymentApplicationModalPageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE NoPurchPmtDiscToleranceWhenDoNotConfirmPmtDiscTolWarningOnManualApplication@27();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      PaymentApplicationProposal@1002 : Record 1293;
      VendLedgerEntry@1001 : Record 25;
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380920] "Pmt. Discout Tolerance" detailed ledger entry is created when manually match "Bank Acc. Recon. Line" to Purchase Invoice but do not confirm discount in "Payment Discount Tolerance Warning" page

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      SetDataForPaymentApplicationModalPageHandler(
        FORMAT(PaymentApplicationProposal."Account Type"::Vendor),VendLedgerEntry."Vendor No.",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(FALSE); // Set "No" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice manually matched and discount in "Payment Discount Tolerance Warning" page is not confirmed
      MatchBankReconLineManually(BankAccReconciliationLine);

      // [WHEN] Post Bank Account Reconciliation
      PostReconciliation(BankAccReconciliationLine);

      // [THEN] Payment from Bank Acc. Reconciliation Line applied not fully to Invoice ("Remaining Amount" = 5)
      VerifyVendLedgEntry(VendLedgerEntry."Entry No.",VendLedgerEntry."Original Pmt. Disc. Possible");

      // [THEN] No Detailed Ledger Entry "Pmt. Discount Tolerance" for Purchase Invoice is created
      FilterPmtDiscToleranceDtldVendLedgEntry(
        DetailedVendLedgEntry,DetailedVendLedgEntry."Entry Type"::"Payment Discount Tolerance",
        BankAccReconciliationLine."Statement No.",VendLedgerEntry."Vendor No.");
      Assert.RecordIsEmpty(DetailedVendLedgEntry);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtDiscTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE ClearPurchAcceptedPmtDiscToleranceWhenRemoveBankAccReconciliation@20();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
    BEGIN
      // [FEATURE] [Purchase] [Payment Discount Tolerance]
      // [SCENARIO 380951] "Accepted Pmt. Disc. Tolerance" and "Amount to Apply" clears out when remove Bank Account Reconciliation previously applied to Purchase Invoice with Payment Discount Tolerance

      Initialize(FALSE,TRUE,0);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Tolerance Date" = 10.01, Amount = 100, "Payment Discount" = 5
      PostPurchInvoice(VendLedgerEntry,CreateVendWithPmtDisc);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Disc. Tolerance Date",
        VendLedgerEntry."Remaining Amount" - VendLedgerEntry."Remaining Pmt. Disc. Possible",VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Discount Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Delete Bank Account Reconciliation Line
      BankAccReconciliationLine.DELETE(TRUE);

      // [THEN] "Accepted Pmt. Disc. Tolerance" is FALSE in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Pmt. Disc. Tolerance",FALSE);

      // [THEN] Amount to Apply = 0 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.TESTFIELD("Amount to Apply",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE ClearPurchAcceptedPmtToleranceWhenRemoveBankAccReconciliation@18();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1000 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 380951] "Accepted Payment Tolerance" and "Amount to Apply" clears out when remove Bank Account Reconciliation previously applied to Purchase Invoice with Payment Discount Tolerance

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.01", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [GIVEN] Bank Acc. Reconciliation Line and Purchase Invoice automatically matched and discount in "Payment Discount Tolerance Warning" page is confirmed
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [WHEN] Delete Bank Account Reconciliation Line
      BankAccReconciliationLine.DELETE(TRUE);

      // [THEN] "Accepted Payment Tolerance" is 0 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",0);

      // [THEN] Amount to Apply = 0 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.TESTFIELD("Amount to Apply",0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesAppliedPmtEntryWithPmtToleranceConfirmedWhenPostingDateAfterPmtDiscDate@47();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 210865] "Applied Payment Entry" includes "Payment Tolerance Amount" confirmed when Posting Date of Bank Recon. Journal Line after "Pmt. Discount Date" of Customer Ledger Entry

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.02", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CALCDATE('<1M>',CustLedgerEntry."Pmt. Discount Date"),
        CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Sales Invoice
      VerifyAppliedPmtEntry(
        BankAccReconciliationLine,CustLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Customer Ledger Entry for Sales Invoice
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchAppliedPmtEntryWithPmtToleranceConfirmedWhenPostingDateAfterPmtDiscDate@65();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 210865] "Applied Payment Entry" includes "Payment Tolerance Amount" confirmed when Posting Date of Bank Recon. Journal Line after "Pmt. Discount Date" of Vendor Ledger Entry

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01, Amount = 100
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Transaction Date" = "10.02", "Transaction Text" = "X" and "Statement Amount" = 95
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CALCDATE('<1M>',VendLedgerEntry."Pmt. Discount Date"),
        VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(TRUE); // Set "Yes" on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically and confirm discount in "Payment Tolerance Warning" page
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Applied Amount" in "Bank Account Reconciliation Line" is 95
      BankAccReconciliationLine.FIND;
      BankAccReconciliationLine.TESTFIELD("Applied Amount",BankAccReconciliationLine."Statement Amount");

      // [THEN] "Applied Amount" is 100, "Applied Pmt. Discount" is 5 in "Applied Payment Entry" for Purchase Invoice
      VerifyAppliedPmtEntry(BankAccReconciliationLine,VendLedgerEntry."Remaining Amount",ToleranceAmount);

      // [THEN] "Accepted Payment Tolerance" = 5 in Vendor Ledger Entry for Purchase Invoice
      VendLedgerEntry.FIND;
      VendLedgerEntry.TESTFIELD("Accepted Payment Tolerance",ToleranceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningAssertDocModalPageHandler,ConfirmHandler)]
    PROCEDURE SalesBankStatementNoUsesAsDocNoInPmtToleranceWarningWindow@75();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      CustLedgerEntry@1001 : Record 21;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Payment Tolerance]
      // [SCENARIO 213099] "Statement No." of "Bank Acc. Reconciliation" uses as "Document No." in "Payment Tolerance Warning" window when apply Bank Acc. Reconciliation Line to Sales Invoice with Payment Discount

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Sales Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01
      PostSalesInvoice(CustLedgerEntry,LibrarySales.CreateCustomerNo);
      ToleranceAmount := ROUND(CustLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Statement No." = "X" "Transaction Date" = "10.01"
      CreateBankReconciliationLine(
        BankAccReconciliationLine,CustLedgerEntry."Pmt. Discount Date",CustLedgerEntry."Remaining Amount" - ToleranceAmount,
        CustLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(BankAccReconciliationLine."Statement No."); // Set "Statement No." for "Document No." on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Sales Invoice automatically
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Payment Tolerance Warning" page shown and "Document No." = "X"
      // Verification done in PmtTolWarningAssertDocModalPageHandler
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PmtTolWarningAssertDocModalPageHandler,ConfirmHandler)]
    PROCEDURE PurchBankStatementNoUsesAsDocNoInPmtToleranceWarningWindow@74();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      VendLedgerEntry@1001 : Record 25;
      TolerancePct@1003 : Decimal;
      ToleranceAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Payment Tolerance]
      // [SCENARIO 213099] "Statement No." of "Bank Acc. Reconciliation" uses as "Document No." in "Payment Tolerance Warning" window when apply Bank Acc. Reconciliation Line to Purchase Invoice with Payment Discount

      // [GIVEN] Payment Tolerance = 5%
      TolerancePct := LibraryRandom.RandInt(10);
      Initialize(TRUE,FALSE,TolerancePct);

      // [GIVEN] Purchase Invoice with Posting Date = 01.01, "Pmt. Discount Date" = 10.01
      PostPurchInvoice(VendLedgerEntry,LibraryPurchase.CreateVendorNo);
      ToleranceAmount := ROUND(VendLedgerEntry."Remaining Amount" * TolerancePct / 100);

      // [GIVEN] Bank Account Reconciliation Line with "Statement No." = "X" "Transaction Date" = "10.01"
      CreateBankReconciliationLine(
        BankAccReconciliationLine,VendLedgerEntry."Pmt. Discount Date",VendLedgerEntry."Remaining Amount" - ToleranceAmount,
        VendLedgerEntry."Document No.");
      LibraryVariableStorage.Enqueue(BankAccReconciliationLine."Statement No."); // Set "Statement No." for "Document No." on "Payment Tolerance Warning" page

      // [WHEN] Match Bank Acc. Reconciliation Line to Purchase Invoice automatically
      MatchBankReconLineAutomatically(BankAccReconciliationLine);

      // [THEN] "Payment Tolerance Warning" page shown and "Document No." = "X"
      // Verification done in PmtTolWarningAssertDocModalPageHandler
    END;

    LOCAL PROCEDURE Initialize@100(PaymentToleranceWarning@1003 : Boolean;PmtDiscToleranceWarning@1002 : Boolean;TolerancePct@1000 : Decimal);
    VAR
      LibraryERMCountryData@1004 : Codeunit 131305;
      PmtDiscGracePeriod@1001 : DateFormula;
    BEGIN
      LibraryPmtDiscSetup.SetPmtToleranceWarning(PaymentToleranceWarning);
      LibraryPmtDiscSetup.SetPmtDiscToleranceWarning(PmtDiscToleranceWarning);
      EVALUATE(PmtDiscGracePeriod,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      LibraryPmtDiscSetup.SetPmtDiscGracePeriod(PmtDiscGracePeriod);
      RunChangePaymentTolerance(TRUE,TolerancePct,0);

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustWithPmtDisc@13() : Code[20];
    VAR
      PmtTerms@1001 : Record 3;
      Cust@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Cust);
      LibraryERM.CreatePaymentTermsDiscount(PmtTerms,FALSE);
      Cust.VALIDATE("Payment Terms Code",PmtTerms.Code);
      Cust.MODIFY(TRUE);
      EXIT(Cust."No.");
    END;

    LOCAL PROCEDURE CreateVendWithPmtDisc@58() : Code[20];
    VAR
      PmtTerms@1001 : Record 3;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.CreatePaymentTermsDiscount(PmtTerms,FALSE);
      Vendor.VALIDATE("Payment Terms Code",PmtTerms.Code);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE PostSalesInvoice@15(VAR CustLedgEntry@1000 : Record 21;CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);

      LibraryERM.FindCustomerLedgerEntry(
        CustLedgEntry,CustLedgEntry."Document Type"::Invoice,LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
      CustLedgEntry.CALCFIELDS("Remaining Amount");
    END;

    LOCAL PROCEDURE PostPurchInvoice@45(VAR VendLedgEntry@1000 : Record 25;VendNo@1001 : Code[20]);
    VAR
      PurchHeader@1002 : Record 38;
      PurchLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,VendNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);

      LibraryERM.FindVendorLedgerEntry(
        VendLedgEntry,VendLedgEntry."Document Type"::Invoice,LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));
      VendLedgEntry.CALCFIELDS("Remaining Amount");
    END;

    LOCAL PROCEDURE CreateBankReconciliationLine@19(VAR BankAccReconciliationLine@1002 : Record 274;TransactionDate@1003 : Date;StatementAmount@1004 : Decimal;DocNo@1005 : Code[20]);
    VAR
      BankAccount@1000 : Record 270;
      BankAccReconciliation@1001 : Record 273;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Match Tolerance Type",BankAccount."Match Tolerance Type"::Amount);
      BankAccount.MODIFY(TRUE);
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccount."No.",
        BankAccReconciliation."Statement Type"::"Payment Application");
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      BankAccReconciliationLine.VALIDATE("Transaction Text",DocNo);
      BankAccReconciliationLine.VALIDATE("Transaction Date",TransactionDate);
      BankAccReconciliationLine.VALIDATE("Statement Amount",StatementAmount);
      BankAccReconciliationLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MatchBankReconLineAutomatically@29(BankAccReconciliationLine@1001 : Record 274);
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      BankAccReconciliation.GET(
        BankAccReconciliationLine."Statement Type",BankAccReconciliationLine."Bank Account No.",
        BankAccReconciliationLine."Statement No.");
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);
    END;

    LOCAL PROCEDURE MatchBankReconLineManually@9(VAR BankAccReconciliationLine@1001 : Record 274);
    VAR
      PaymentReconciliationJournal@1000 : TestPage 1290;
    BEGIN
      PaymentReconciliationJournal.OPENEDIT;
      PaymentReconciliationJournal.GOTORECORD(BankAccReconciliationLine);
      PaymentReconciliationJournal.ApplyEntries.INVOKE;
    END;

    LOCAL PROCEDURE PostReconciliation@2(VAR BankAccReconciliationLine@1001 : Record 274);
    VAR
      BankAccReconciliation@1002 : Record 273;
    BEGIN
      BankAccReconciliation.GET(
        BankAccReconciliationLine."Statement Type",BankAccReconciliationLine."Bank Account No.",
        BankAccReconciliationLine."Statement No.");
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);
    END;

    LOCAL PROCEDURE FilterPmtDiscToleranceDtldCustLedgEntry@34(VAR DetailedCustLedgEntry@1000 : Record 379;EntryType@1002 : Option;DocNo@1001 : Code[20];CustomerNo@1003 : Code[20]);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.SETRANGE("Document Type",DetailedCustLedgEntry."Document Type"::Payment);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocNo);
      DetailedCustLedgEntry.SETRANGE("Customer No.",CustomerNo);
    END;

    LOCAL PROCEDURE FilterPmtDiscToleranceDtldVendLedgEntry@49(VAR DetailedVendLedgEntry@1000 : Record 380;EntryType@1002 : Option;DocNo@1001 : Code[20];VendorNo@1003 : Code[20]);
    BEGIN
      DetailedVendLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendLedgEntry.SETRANGE("Document Type",DetailedVendLedgEntry."Document Type"::Payment);
      DetailedVendLedgEntry.SETRANGE("Document No.",DocNo);
      DetailedVendLedgEntry.SETRANGE("Vendor No.",VendorNo);
    END;

    LOCAL PROCEDURE SetDataForPaymentApplicationModalPageHandler@12(AccountType@1000 : Text;AccountNo@1001 : Code[20];DocNo@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(AccountType);
      LibraryVariableStorage.Enqueue(AccountNo);
      LibraryVariableStorage.Enqueue(DocNo);
    END;

    LOCAL PROCEDURE RunChangePaymentTolerance@1(AllCurrency@1004 : Boolean;PaymentTolerance@1001 : Decimal;MaxPaymentToleranceAmount@1002 : Decimal);
    VAR
      ChangePaymentTolerance@1000 : Report 34;
    BEGIN
      CLEAR(ChangePaymentTolerance);
      ChangePaymentTolerance.InitializeRequest(AllCurrency,'',PaymentTolerance,MaxPaymentToleranceAmount);
      ChangePaymentTolerance.USEREQUESTPAGE(FALSE);
      ChangePaymentTolerance.RUN;
    END;

    LOCAL PROCEDURE VerifyCustLedgEntry@51(EntryNo@1001 : Integer;ExpectedAmount@1002 : Decimal);
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      CustLedgEntry.GET(EntryNo);
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      CustLedgEntry.TESTFIELD("Remaining Amount",ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyVendLedgEntry@64(EntryNo@1001 : Integer;ExpectedAmount@1002 : Decimal);
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      VendLedgEntry.GET(EntryNo);
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      VendLedgEntry.TESTFIELD("Remaining Amount",ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyAppliedPmtEntry@44(BankAccReconciliationLine@1000 : Record 274;AppliedAmount@1002 : Decimal;AppliedPmtDiscount@1003 : Decimal);
    VAR
      AppliedPmtEntry@1001 : Record 1294;
    BEGIN
      AppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconciliationLine);
      AppliedPmtEntry.FINDFIRST;
      AppliedPmtEntry.TESTFIELD("Applied Amount",AppliedAmount);
      AppliedPmtEntry.TESTFIELD("Applied Pmt. Discount",AppliedPmtDiscount);
    END;

    [ModalPageHandler]
    PROCEDURE PmtTolWarningModalPageHandler@32(VAR PaymentToleranceWarning@1001 : TestPage 591);
    BEGIN
      IF LibraryVariableStorage.DequeueBoolean THEN BEGIN
        PaymentToleranceWarning.Posting.SETVALUE(1); // Accept payment discount tolerance
        PaymentToleranceWarning.Yes.INVOKE;
      END ELSE
        PaymentToleranceWarning.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PmtTolWarningAssertDocModalPageHandler@71(VAR PaymentToleranceWarning@1001 : TestPage 591);
    BEGIN
      PaymentToleranceWarning.DocNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      PaymentToleranceWarning.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PmtDiscTolWarningModalPageHandler@4(VAR PaymentDiscToleranceWarning@1000 : TestPage 599);
    BEGIN
      IF LibraryVariableStorage.DequeueBoolean THEN BEGIN
        PaymentDiscToleranceWarning.Posting.SETVALUE(1); // Accept payment discount tolerance
        PaymentDiscToleranceWarning.Yes.INVOKE;
      END ELSE
        PaymentDiscToleranceWarning.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentApplicationModalPageHandler@7(VAR PaymentApplication@1000 : TestPage 1292);
    VAR
      PaymentApplicationProposal@1001 : Record 1293;
    BEGIN
      PaymentApplication.FILTER.SETFILTER("Account Type",LibraryVariableStorage.DequeueText);
      PaymentApplication.FILTER.SETFILTER("Account No.",LibraryVariableStorage.DequeueText);
      PaymentApplication.FILTER.SETFILTER("Document Type",FORMAT(PaymentApplicationProposal."Document Type"::Invoice));
      PaymentApplication.FILTER.SETFILTER("Document No.",LibraryVariableStorage.DequeueText);
      PaymentApplication.Applied.SETVALUE(TRUE);
      PaymentApplication.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@16(Message@1000 : Text);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Bank Payment Application] [Bank Reconciliation] [Match]
    }
    END.
  }
}

