OBJECT Codeunit 134821 ERM Cost Accounting - Pages
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryERM@1028 : Codeunit 131300;
      LibraryCostAccounting@1012 : Codeunit 131340;
      LibraryUtility@1011 : Codeunit 131000;
      LibraryRandom@1015 : Codeunit 130440;
      SelectionFilterManagement@1035 : Codeunit 46;
      LibraryDimension@1027 : Codeunit 131001;
      NotEditable@1003 : TextConst 'ENU=%1 field property should not be editable.';
      Enabled@1004 : TextConst 'ENU=Control property should be enabled.';
      Visible@1005 : TextConst 'ENU=Control property should be visible.';
      DateFilterError@1001 : TextConst 'ENU=The date filter is incorrect.';
      ExpectedValueDifferent@1006 : TextConst 'ENU=Expected value of %1 field is different than the actual one.';
      CostCenterFilter@1013 : Code[20];
      CostObjectFilter@1014 : Code[20];
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1007 : 'Net Change,Balance at Date';
      ViewAsError@1018 : TextConst 'ENU=Set View As to Net Change before you edit entries.';
      EmptyFiltersError@1019 : TextConst '@@@="%1=fieldcaption Cost Center,%2=fieldcaption Cost Object";ENU=%1 or %2 must not be blank.';
      InvalidColumnIndex@1021 : TextConst 'ENU=The ColumnNo param is outside the permitted range.';
      WrongCaptionError@1023 : TextConst 'ENU=The caption for column no. %1 is wrong.';
      PreviousSetNotFoundError@1024 : TextConst 'ENU=The previous column set could not be found.';
      NextSetNotAvailableError@1025 : TextConst 'ENU=The next set could not be initialized.';
      CostJournalBatchName@1010 : Code[10];
      CostJnlLineError@1016 : TextConst 'ENU=%1 must exist.';
      PostingDateError@1017 : TextConst 'ENU=%1 must be equal to Workdate.';
      CostBudgetAmountError@1022 : TextConst '@@@="%1:Table Caption;%2:Field Value;%3:Column Caption;%4:Table Caption;%5:Field Value;";ENU=The amount for %1 %2 for column %3 is not equal to the amount on the %4 %5.';
      ColumnDateError@1020 : TextConst 'ENU=The column captions (dates) were not updated after invoking the %1 action.';
      RoundingFactor@1026 : 'None,1,1000,1000000';
      GLAccountNo@1033 : Code[20];
      CostJournalAmountError@1029 : TextConst 'ENU=The amount that was posted from %1 must be equal to amount in %2.';
      InvalidColumnCaptionError@1032 : TextConst 'ENU=Period in columns caption were not updated according to the view by filter.';
      CostTypeNo@1034 : Code[20];
      ActionFilter@1031 : 'SetValue,Verify';
      EntryNo@1030 : Integer;
      FailedToGetTheExpectedValidationError@1009 : TextConst 'ENU=Failed to get the expected validation error.';
      TestValidation@1038 : TextConst 'ENU=TestValidation';
      CostTypeFilterDefinition@1040 : TextConst '@@@="%1 - Field Value;%2 - Field Value";ENU=%1..%2';
      WrongFlowFilterValueErr@1039 : TextConst 'ENU=Wrong FLowFilter''s value on the page';

    [Test]
    PROCEDURE TestCostAcctgSetupCostCenterField@3();
    VAR
      CostAccSetup@1001 : Record 1108;
      CostAccSetupPage@1000 : TestPage 1113;
    BEGIN
      Initialize;
      CostAccSetup.GET;

      CostAccSetupPage.OPENEDIT;
      CostAccSetupPage."Cost Center Dimension".ASSERTEQUALS(CostAccSetup."Cost Center Dimension");
      Assert.IsFalse(
        CostAccSetupPage."Cost Center Dimension".EDITABLE,STRSUBSTNO(NotEditable,CostAccSetup.FIELDCAPTION("Cost Center Dimension")));

      CostAccSetupPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostAcctgSetupCostObjectField@4();
    VAR
      CostAccSetup@1002 : Record 1108;
      CostAccSetupPage@1001 : TestPage 1113;
    BEGIN
      Initialize;
      CostAccSetup.GET;

      CostAccSetupPage.OPENEDIT;
      CostAccSetupPage."Cost Object Dimension".ASSERTEQUALS(CostAccSetup."Cost Object Dimension");
      Assert.IsFalse(
        CostAccSetupPage."Cost Object Dimension".EDITABLE,STRSUBSTNO(NotEditable,CostAccSetup.FIELDCAPTION("Cost Object Dimension")));

      CostAccSetupPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostAllocationSourcesAllocateCostsActionIsAvailable@2();
    VAR
      CostAllocationSourcesPage@1000 : TestPage 1102;
    BEGIN
      Initialize;
      CostAllocationSourcesPage.OPENVIEW;

      Assert.IsTrue(CostAllocationSourcesPage."Report Cost Allocations".ENABLED,Enabled);
      Assert.IsTrue(CostAllocationSourcesPage."Report Cost Allocations".VISIBLE,Visible);

      CostAllocationSourcesPage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE TestCostAllocationSourcesCalculateAllocKeysActionIsAvailable@7();
    VAR
      CostAllocationSourcesPage@1000 : TestPage 1102;
    BEGIN
      Initialize;
      CostAllocationSourcesPage.OPENVIEW;

      Assert.IsTrue(CostAllocationSourcesPage."Codeunit Cost Account Allocation".ENABLED,Enabled);
      Assert.IsTrue(CostAllocationSourcesPage."Codeunit Cost Account Allocation".VISIBLE,Visible);

      CostAllocationSourcesPage."Codeunit Cost Account Allocation".INVOKE;
      CostAllocationSourcesPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetNamesTransferBudgetToActualActionIsAvailable@6();
    VAR
      CostBudgetNamesPage@1000 : TestPage 1116;
    BEGIN
      Initialize;

      CostBudgetNamesPage.OPENVIEW;

      Assert.IsTrue(CostBudgetNamesPage."Report Transfer Budget to Actual".ENABLED,Enabled);
      Assert.IsTrue(CostBudgetNamesPage."Report Transfer Budget to Actual".VISIBLE,Visible);

      CostBudgetNamesPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostRegisterDeleteOldCostEntriesIsAvailable@5();
    VAR
      CostRegisterPage@1000 : TestPage 1104;
    BEGIN
      Initialize;

      CostRegisterPage.OPENVIEW;

      Assert.IsTrue(CostRegisterPage."Report Delete Old Cost Entries".ENABLED,Enabled);
      Assert.IsTrue(CostRegisterPage."Report Delete Old Cost Entries".VISIBLE,Visible);

      CostRegisterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostCenterMatrixValidateFiltersForAmountTypeNetChange@18();
    VAR
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'');

      VerifyFiltersOnCostBudgetByCostCenterMatrixPage(CostBudgetByCostCenterPage,FORMAT(ExpectedDate));

      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostCenterMatrixValidateFiltersForAmountTypeBalanceAtDate@21();
    VAR
      CostBudgetByCostCenterPage@1002 : TestPage 1118;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      VerifyFiltersOnCostBudgetByCostCenterMatrixPage(CostBudgetByCostCenterPage,STRSUBSTNO('''''..%1',ExpectedDate));

      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostCenterUpdateAmountCellForAmountTypeBalanceAtDate@34();
    VAR
      CostBudgetByCostCenterPage@1000 : TestPage 1118;
    BEGIN
      Initialize;

      // Setup:
      CostBudgetByCostCenterPage.OPENEDIT;
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      // Exercise & Verify:
      ASSERTERROR CostBudgetByCostCenterPage.MatrixForm.Column1.SETVALUE(LibraryRandom.RandDec(100,2));
      Assert.ExpectedError(ViewAsError);

      // Tear-down
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostCenterMatrixUpdateAmountCellForRandomColumn@35();
    VAR
      CostBudgetName@1005 : Record 1110;
      CostCenter@1006 : Record 1112;
      CostType@1007 : Record 1103;
      CostBudgetByCostCenterPage@1003 : TestPage 1118;
      ColumnNo@1002 : Integer;
      Amount@1001 : Decimal;
      PrevAmount@1000 : Decimal;
      ExpectedDate@1004 : Date;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Setup page:
      CostBudgetByCostCenterPage.OPENEDIT;

      CostType.SETRANGE(Totaling,'');
      CostType.FINDFIRST;
      CostBudgetByCostCenterPage.MatrixForm.GOTORECORD(CostType);

      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name);

      CostCenter.SETRANGE("Line Type",CostCenter."Line Type"::"Cost Center");
      IF CostCenter.COUNT > 12 THEN // 12 is Max number of columns on the matrix page
        ColumnNo := LibraryRandom.RandInt(12)
      ELSE
        ColumnNo := LibraryRandom.RandInt(CostCenter.COUNT);
      Amount := LibraryRandom.RandDec(100,2);
      IF GetCellValueOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,ColumnNo) = '' THEN
        PrevAmount := 0
      ELSE
        EVALUATE(PrevAmount,GetCellValueOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,ColumnNo));

      // Exercise:
      SetCellValueOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,ColumnNo,Amount);

      // Verify:
      VerifyCostBudgetEntry(
        CostBudgetName.Name,GetColumnCaptionOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,ColumnNo),'',
        CostBudgetByCostCenterPage.MatrixForm."No.".VALUE,ExpectedDate,Amount - PrevAmount);

      // Tear-down
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostObjectMatrixValidateFiltersForAmountTypeNetChange@69();
    VAR
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'');

      VerifyFiltersOnCostBudgetByCostObjectMatrixPage(CostBudgetByCostObjectPage,FORMAT(ExpectedDate));

      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostObjectMatrixValidateFiltersForAmountTypeBalanceAtDate@68();
    VAR
      CostBudgetByCostObjectPage@1002 : TestPage 1119;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      VerifyFiltersOnCostBudgetByCostObjectMatrixPage(CostBudgetByCostObjectPage,STRSUBSTNO('''''..%1',ExpectedDate));

      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostObjectUpdateAmountCellForAmountTypeBalanceAtDate@67();
    VAR
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
    BEGIN
      Initialize;

      // Setup:
      CostBudgetByCostObjectPage.OPENEDIT;
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      // Exercise & Verify:
      ASSERTERROR CostBudgetByCostObjectPage.MatrixForm.Column1.SETVALUE(LibraryRandom.RandDec(100,2));
      Assert.ExpectedError(ViewAsError);

      // Tear-down
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostObjectMatrixUpdateAmountCellForRandomColumn@66();
    VAR
      CostBudgetName@1005 : Record 1110;
      CostObject@1006 : Record 1113;
      CostType@1007 : Record 1103;
      CostBudgetByCostObjectPage@1003 : TestPage 1119;
      ColumnNo@1002 : Integer;
      Amount@1001 : Decimal;
      PrevAmount@1000 : Decimal;
      ExpectedDate@1004 : Date;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Setup page:
      CostBudgetByCostObjectPage.OPENEDIT;

      CostType.SETRANGE(Totaling,'');
      CostType.FINDFIRST;
      CostBudgetByCostObjectPage.MatrixForm.GOTORECORD(CostType);

      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name);

      CostObject.SETRANGE("Line Type",CostObject."Line Type"::"Cost Object");
      IF CostObject.COUNT > 12 THEN // 12 is Max number of columns on the matrix page
        ColumnNo := LibraryRandom.RandInt(12)
      ELSE
        ColumnNo := LibraryRandom.RandInt(CostObject.COUNT);
      Amount := LibraryRandom.RandDec(100,2);
      IF GetCellValueOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,ColumnNo) = '' THEN
        PrevAmount := 0
      ELSE
        EVALUATE(PrevAmount,GetCellValueOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,ColumnNo));

      // Exercise:
      SetCellValueOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,ColumnNo,Amount);

      // Verify:
      VerifyCostBudgetEntry(
        CostBudgetName.Name,'',GetColumnCaptionOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,ColumnNo),
        CostBudgetByCostObjectPage.MatrixForm."No.".VALUE,ExpectedDate,Amount - PrevAmount);

      // Tear-down
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodMatrixValidateFiltersForAmountTypeNetChange@12();
    VAR
      CostBudgetPerPeriodPage@1001 : TestPage 1117;
      ExpectedDateFilter@1000 : Text;
    BEGIN
      Initialize;

      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');

      ExpectedDateFilter := FORMAT(CALCDATE('<11D>',WORKDATE));  // 12 matrix columns
      VerifyFiltersOnCostBudgetPerPeriodMatrixPage(CostBudgetPerPeriodPage,ExpectedDateFilter);

      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodMatrixValidateFiltersForAmountTypeBalanceAtDate@16();
    VAR
      CostBudgetPerPeriodPage@1001 : TestPage 1117;
    BEGIN
      Initialize;

      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'','','');

      VerifyFiltersOnCostBudgetPerPeriodMatrixPage(CostBudgetPerPeriodPage,STRSUBSTNO('''''..%1',CALCDATE('<11D>',WORKDATE))); // 12 matrix columns

      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodMatrixUpdateAmountCellForAmountTypeBalanceAtDate@55();
    VAR
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
    BEGIN
      Initialize;

      // Setup:
      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'','','');

      // Exercise & Verify:
      ASSERTERROR CostBudgetPerPeriodPage.MatrixForm.Column1.SETVALUE(LibraryRandom.RandDec(100,2));
      Assert.ExpectedError(ViewAsError);

      // Tear-down
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodMatrixUpdateAmountCellForCCorCOFiltersEmpty@56();
    VAR
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
    BEGIN
      Initialize;

      // Setup:
      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');

      // Exercise & Verify:
      ASSERTERROR CostBudgetPerPeriodPage.MatrixForm.Column1.SETVALUE(LibraryRandom.RandDec(100,2));
      Assert.ExpectedError(
        STRSUBSTNO(EmptyFiltersError,CostBudgetPerPeriodPage.CostCenterFilter.CAPTION,CostBudgetPerPeriodPage.CostObjectFilter.CAPTION));

      // Tear-down
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodMatrixUpdateAmountCellForRandomColumn@61();
    VAR
      CostBudgetName@1001 : Record 1110;
      CostCenter@1002 : Record 1112;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
      ColumnNo@1005 : Integer;
      Amount@1003 : Decimal;
      PrevAmount@1004 : Decimal;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostCenter(CostCenter);

      // Setup page:
      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,CostCenter.Code,'');

      ColumnNo := LibraryRandom.RandInt(12); // pick a random column for the matrix page
      Amount := LibraryRandom.RandDec(100,2);
      IF GetCellValueOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ColumnNo) = '' THEN
        PrevAmount := 0
      ELSE
        EVALUATE(PrevAmount,GetCellValueOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ColumnNo));

      // Exercise:
      SetCellValueOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ColumnNo,Amount);

      // Verify:
      VerifyCostBudgetEntry(
        CostBudgetName.Name,CostCenter.Code,'',CostBudgetPerPeriodPage.MatrixForm."No.".VALUE,
        CALCDATE(STRSUBSTNO('<%1 D>',ColumnNo - 1),WORKDATE),Amount - PrevAmount);

      // Tear-down
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectFirstSet@27();
    VAR
      CostObject@1001 : Record 1113;
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
      i@1002 : Integer;
    BEGIN
      Initialize;

      // we need at least 24 cost objects
      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      CostObject.SETCURRENTKEY("Sorting Order");
      CostObject.SETRANGE("Line Type",CostObject."Line Type"::"Cost Object");
      CostObject.FINDSET;
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectPrevSetNoError@80();
    VAR
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
    BEGIN
      // No error when the previous set doesn't exist
      Initialize;
      CostBudgetByCostObjectPage.OPENEDIT;
      CostBudgetByCostObjectPage.PreviousSet.INVOKE;
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectPrevSetError@63();
    VAR
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
    BEGIN
      Initialize;
      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      CostBudgetByCostObjectPage.NextColumn.INVOKE;
      ASSERTERROR CostBudgetByCostObjectPage.PreviousSet.INVOKE;
      Assert.ExpectedError(PreviousSetNotFoundError);
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectPrevSetOK@64();
    VAR
      CostObject@1002 : Record 1113;
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      // get the next set
      CostBudgetByCostObjectPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostObjectCaptionOffset(CostBudgetByCostObjectPage,12,CostObject);
      // get the previous set:
      CostBudgetByCostObjectPage.PreviousSet.INVOKE;
      CostObject.NEXT(-12);
      // verify the full set
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      CostBudgetByCostObjectPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectPrevColumn@81();
    VAR
      CostObject@1002 : Record 1113;
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      // get the next set
      CostBudgetByCostObjectPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostObjectCaptionOffset(CostBudgetByCostObjectPage,12,CostObject);
      // get the previous Column:
      CostBudgetByCostObjectPage.PreviousColumn.INVOKE;
      CostObject.NEXT(-1);
      // verify the full set
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      CostBudgetByCostObjectPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectNextSet@82();
    VAR
      CostObject@1002 : Record 1113;
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      // get the next set
      CostBudgetByCostObjectPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostObjectCaptionOffset(CostBudgetByCostObjectPage,12,CostObject);
      CostObject.NEXT;
      // verify the full set
      FOR i := 2 TO 12 DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      CostBudgetByCostObjectPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectNextSetToEnd@65();
    VAR
      CostObject@1002 : Record 1113;
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      i@1000 : Integer;
      NoOfSets@1003 : Integer;
      NoInLastSet@1004 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      // get the last set
      CostObject.SETCURRENTKEY("Sorting Order");
      CostObject.SETRANGE("Line Type",CostObject."Line Type"::"Cost Object");
      CostObject.FINDSET;
      NoOfSets := CostObject.COUNT DIV 12;
      NoInLastSet := CostObject.COUNT MOD 12;
      FOR i := 1 TO NoOfSets DO BEGIN
        CostBudgetByCostObjectPage.NextSet.INVOKE;
        CostObject.NEXT(12)
      END;
      // verify the full set
      FOR i := 1 TO NoInLastSet DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      // Verify the rest of the columns is blank
      IF NoInLastSet <> 0 THEN
        FOR i := NoInLastSet + 1 TO 12 DO BEGIN
          VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,' ');
          CostObject.NEXT
        END;
      CostBudgetByCostObjectPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectNextColumn@86();
    VAR
      CostObject@1002 : Record 1113;
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostObjects;

      CostBudgetByCostObjectPage.OPENEDIT;
      // get the next set
      CostBudgetByCostObjectPage.NextColumn.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostObjectCaptionOffset(CostBudgetByCostObjectPage,1,CostObject);
      CostObject.NEXT;
      // verify the full set
      FOR i := 2 TO 12 DO BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,i,CostObject.Code);
        CostObject.NEXT
      END;
      CostBudgetByCostObjectPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectAmountTypeNetChangeForPeriodDay@48();
    VAR
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      SetFieldsOnCostBudgetByCostObjectPage(CostBudgetByCostObjectPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'');

      Assert.AreEqual(FORMAT(WORKDATE),CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"),DateFilterError);
      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectAmountTypeBalanceAtDateForPeriodDay@74();
    VAR
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      ExpectedDate@1003 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      Assert.AreEqual(STRSUBSTNO('''''..%1',ExpectedDate),CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectAmountTypeNetChangeForPeriodMonth@46();
    VAR
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Month),'');

      Assert.AreEqual(
        STRSUBSTNO('''''..%1',CALCDATE('<CM>',ExpectedDate)),CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"),
        DateFilterError);

      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectAmountTypeBalanceAtDatePeriodMonth@73();
    VAR
      CostBudgetByCostObjectPage@1001 : TestPage 1119;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostObjectPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostObjectPage(
        CostBudgetByCostObjectPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Month),'');

      Assert.AreEqual(
        STRSUBSTNO('''''..%1',CALCDATE('<CM>',ExpectedDate)),CostBudgetByCostObjectPage.FILTER.GETFILTER("Date Filter"),
        DateFilterError);

      CostBudgetByCostObjectPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostObjectValidateBudgetFilter@85();
    VAR
      CostBudgetName@1002 : Record 1110;
      CostType@1001 : Record 1103;
      CostBudgetByCostObjectPage@1000 : TestPage 1119;
      BudgetFilter@1003 : Text;
    BEGIN
      Initialize;

      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      CostBudgetByCostObjectPage.OPENEDIT;
      BudgetFilter := COPYSTR(LibraryUtility.GenerateRandomCode(CostBudgetName.FIELDNO(Name),DATABASE::"Cost Budget Name"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Cost Budget Name",CostBudgetName.FIELDNO(Name)));
      CostBudgetByCostObjectPage.BudgetFilter.SETVALUE(BudgetFilter);

      Assert.AreNotEqual(BudgetFilter,CostType."Budget Filter",STRSUBSTNO(ExpectedValueDifferent,CostType.FIELDNAME("Budget Filter")));

      CostBudgetByCostObjectPage.CLOSE;
      CostType.DELETE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterFirstSet@84();
    VAR
      CostCenter@1001 : Record 1112;
      CostBudgetByCostCenterPage@1000 : TestPage 1118;
      i@1002 : Integer;
    BEGIN
      Initialize;

      // we need at least 24 cost objects
      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      CostCenter.SETCURRENTKEY("Sorting Order");
      CostCenter.SETRANGE("Line Type",CostCenter."Line Type"::"Cost Center");
      CostCenter.FINDSET;
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCosCenterPrevSetNoError@83();
    VAR
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
    BEGIN
      // No error when the previous set doesn't exist
      Initialize;
      CostBudgetByCostCenterPage.OPENEDIT;
      CostBudgetByCostCenterPage.PreviousSet.INVOKE;
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterPrevSetError@79();
    VAR
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
    BEGIN
      Initialize;
      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      CostBudgetByCostCenterPage.NextColumn.INVOKE;
      ASSERTERROR CostBudgetByCostCenterPage.PreviousSet.INVOKE;
      Assert.ExpectedError(PreviousSetNotFoundError);
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterPrevSetOK@78();
    VAR
      CostCenter@1002 : Record 1112;
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      // get the next set
      CostBudgetByCostCenterPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostCenterCaptionOffset(CostBudgetByCostCenterPage,12,CostCenter);
      // get the previous set:
      CostBudgetByCostCenterPage.PreviousSet.INVOKE;
      CostCenter.NEXT(-12);
      // verify the full set
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      CostBudgetByCostCenterPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterPrevColumn@77();
    VAR
      CostCenter@1002 : Record 1112;
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      // get the next set
      CostBudgetByCostCenterPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostCenterCaptionOffset(CostBudgetByCostCenterPage,12,CostCenter);
      // get the previous Column:
      CostBudgetByCostCenterPage.PreviousColumn.INVOKE;
      CostCenter.NEXT(-1);
      // verify the full set
      FOR i := 1 TO 12 DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      CostBudgetByCostCenterPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterNextSet@76();
    VAR
      CostCenter@1002 : Record 1112;
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      // get the next set
      CostBudgetByCostCenterPage.NextSet.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostCenterCaptionOffset(CostBudgetByCostCenterPage,12,CostCenter);
      CostCenter.NEXT;
      // verify the full set
      FOR i := 2 TO 12 DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      CostBudgetByCostCenterPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterNextSetToEnd@75();
    VAR
      CostCenter@1002 : Record 1112;
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      i@1000 : Integer;
      NoOfSets@1003 : Integer;
      NoInLastSet@1004 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      // get the last set
      CostCenter.SETCURRENTKEY("Sorting Order");
      CostCenter.SETRANGE("Line Type",CostCenter."Line Type"::"Cost Center");
      CostCenter.FINDSET;
      NoOfSets := CostCenter.COUNT DIV 12;
      NoInLastSet := CostCenter.COUNT MOD 12;
      FOR i := 1 TO NoOfSets DO BEGIN
        CostBudgetByCostCenterPage.NextSet.INVOKE;
        CostCenter.NEXT(12)
      END;
      // verify the full set
      FOR i := 1 TO NoInLastSet DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      // Verify the rest of the columns is blank
      IF NoInLastSet <> 0 THEN
        FOR i := NoInLastSet + 1 TO 12 DO BEGIN
          VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,' ');
          CostCenter.NEXT
        END;
      CostBudgetByCostCenterPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterNextColumn@70();
    VAR
      CostCenter@1002 : Record 1112;
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      i@1000 : Integer;
    BEGIN
      Initialize;

      CheckCreateCostCenters;

      CostBudgetByCostCenterPage.OPENEDIT;
      // get the next set
      CostBudgetByCostCenterPage.NextColumn.INVOKE;
      // verify that the current set is the next one (check just 1 column)
      VerifyCostBudgetByCostCenterCaptionOffset(CostBudgetByCostCenterPage,1,CostCenter);
      CostCenter.NEXT;
      // verify the full set
      FOR i := 2 TO 12 DO BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,i,CostCenter.Code);
        CostCenter.NEXT
      END;
      CostBudgetByCostCenterPage.CLOSE
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterAmountTypeNetChangeForPeriodDay@92();
    VAR
      CostBudgetByCostCenterPage@1000 : TestPage 1118;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      SetFieldsOnCostBudgetByCostCenterPage(CostBudgetByCostCenterPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'');

      Assert.AreEqual(FORMAT(WORKDATE),CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"),DateFilterError);
      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterAmountTypeBalanceAtDateForPeriodDay@91();
    VAR
      CostBudgetByCostCenterPage@1000 : TestPage 1118;
      ExpectedDate@1003 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'');

      Assert.AreEqual(STRSUBSTNO('''''..%1',ExpectedDate),CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterAmountTypeNetChangeForPeriodMonth@90();
    VAR
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Month),'');

      Assert.AreEqual(
        STRSUBSTNO('''''..%1',CALCDATE('<CM>',ExpectedDate)),CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"),
        DateFilterError);

      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterAmountTypeBalanceAtDatePeriodMonth@89();
    VAR
      CostBudgetByCostCenterPage@1001 : TestPage 1118;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostBudgetByCostCenterPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostBudgetByCostCenterPage(
        CostBudgetByCostCenterPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Month),'');

      Assert.AreEqual(
        STRSUBSTNO('''''..%1',CALCDATE('<CM>',ExpectedDate)),CostBudgetByCostCenterPage.FILTER.GETFILTER("Date Filter"),
        DateFilterError);

      CostBudgetByCostCenterPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetByCostCenterValidateBudgetFilter@72();
    VAR
      CostBudgetName@1002 : Record 1110;
      CostType@1001 : Record 1103;
      CostBudgetByCostCenterPage@1000 : TestPage 1118;
      BudgetFilter@1003 : Text;
    BEGIN
      Initialize;

      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      CostBudgetByCostCenterPage.OPENEDIT;
      BudgetFilter := COPYSTR(LibraryUtility.GenerateRandomCode(CostBudgetName.FIELDNO(Name),DATABASE::"Cost Budget Name"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Cost Budget Name",CostBudgetName.FIELDNO(Name)));
      CostBudgetByCostCenterPage.BudgetFilter.SETVALUE(BudgetFilter);

      Assert.AreNotEqual(BudgetFilter,CostType."Budget Filter",STRSUBSTNO(ExpectedValueDifferent,CostType.FIELDNAME("Budget Filter")));

      CostBudgetByCostCenterPage.CLOSE;
      CostType.DELETE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetAmountTypeNetChangeForPeriodDay@9();
    VAR
      CostTypeBalanceBudgetPage@1000 : TestPage 1120;
      ExpectedDate@1001 : Date;
    BEGIN
      Initialize;

      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');

      Assert.AreEqual(FORMAT(ExpectedDate),CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetAmountTypeBalanceAtDateForPeriodDay@13();
    VAR
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Day),'','','');

      Assert.AreEqual(STRSUBSTNO('''''..%1',ExpectedDate),CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetAmountTypeNetChangeForPeriodMonth@19();
    VAR
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Month),'','','');

      Assert.AreEqual(
        STRSUBSTNO('%1..%2',CALCDATE('<-CM>',ExpectedDate),CALCDATE('<CM>',ExpectedDate)),
        CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetAmountTypeBalanceAtDatePeriodMonth@20();
    VAR
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;

      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Balance at Date"),FORMAT(PeriodType::Month),'','','');

      Assert.AreEqual(
        STRSUBSTNO('''''..%1',CALCDATE('<CM>',ExpectedDate)),CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),
        DateFilterError);

      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetCalcBudgetPctForBudgetAmountNonZero@37();
    VAR
      CostBudgetName@1001 : Record 1110;
      CostCenter@1005 : Record 1112;
      CostType@1000 : Record 1103;
      CostTypeBalanceBudgetPage@1004 : TestPage 1120;
      NetChange@1002 : Decimal;
      BudgetAmount@1003 : Decimal;
      PostingDate@1006 : Date;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Exercise:
      CostTypeBalanceBudgetPage.OPENEDIT;
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,'','');
      EVALUATE(PostingDate,CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      NetChange := PostCostJournalLine(CostType."No.",CostCenter.Code,'',PostingDate);
      BudgetAmount := CreateBudgetEntry(CostBudgetName.Name,CostType."No.",PostingDate);
      CostTypeBalanceBudgetPage.GOTORECORD(CostType);

      // Verify:
      CostTypeBalanceBudgetPage.BudgetPct.ASSERTEQUALS(ROUND(NetChange / BudgetAmount * 100));

      // Clean-up:
      CostType.DELETE;
      CostBudgetName.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetCalcBudgetPctForBudgetAmountZero@38();
    VAR
      CostBudgetName@1002 : Record 1110;
      CostCenter@1004 : Record 1112;
      CostType@1003 : Record 1103;
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
      PostingDate@1000 : Date;
    BEGIN
      Initialize;

      // Setup:
      // Create Net Change
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);

      // Create Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Exercise:
      CostTypeBalanceBudgetPage.OPENEDIT;
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,'','');
      EVALUATE(PostingDate,CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      PostCostJournalLine(CostType."No.",CostCenter.Code,'',PostingDate);
      CostTypeBalanceBudgetPage.GOTORECORD(CostType);

      // Verify:
      CostTypeBalanceBudgetPage.BudgetPct.ASSERTEQUALS(0);

      // Clean-up:
      CostType.DELETE;
      CostBudgetName.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(MFHandlerChartOfCostCenters)]
    PROCEDURE TestCostTypeBalanceBudgetLookupCostCenter@28();
    VAR
      CostCenter@1001 : Record 1112;
      CostTypeBalanceBudgetPage@1000 : TestPage 1120;
    BEGIN
      Initialize;

      // Setup:
      CostCenter.FINDFIRST;
      CostCenterFilter := SelectionFilterManagement.AddQuotes(CostCenter.Code);
      CostTypeBalanceBudgetPage.OPENEDIT;

      // Exercise:
      CostTypeBalanceBudgetPage.CostCenterFilter.LOOKUP;

      // Verify:
      CostTypeBalanceBudgetPage.CostCenterFilter.ASSERTEQUALS(CostCenterFilter);
    END;

    [Test]
    [HandlerFunctions(MFHandlerChartOfCostObjects)]
    PROCEDURE TestCostTypeBalanceBudgetLookupCostObject@29();
    VAR
      CostObject@1000 : Record 1113;
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
    BEGIN
      Initialize;

      // Setup:
      CostObject.FINDFIRST;
      CostObjectFilter := SelectionFilterManagement.AddQuotes(CostObject.Code);
      CostTypeBalanceBudgetPage.OPENEDIT;

      // Exercise:
      CostTypeBalanceBudgetPage.CostObjectFilter.LOOKUP;

      // Verify:
      CostTypeBalanceBudgetPage.CostObjectFilter.ASSERTEQUALS(CostObjectFilter);
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetNextPeriodAction@39();
    VAR
      CostTypeBalanceBudgetPage@1000 : TestPage 1120;
      ExpectedDate@1001 : Date;
    BEGIN
      Initialize;

      // Setup:
      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');

      // Exercise:
      CostTypeBalanceBudgetPage.NextPeriod.INVOKE;

      // Verify:
      Assert.AreEqual(FORMAT(CALCDATE('<1D>',ExpectedDate)),CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      // Clean-up:
      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetPreviousPeriodAction@40();
    VAR
      CostTypeBalanceBudgetPage@1000 : TestPage 1120;
      ExpectedDate@1001 : Date;
    BEGIN
      Initialize;

      // Setup:
      CostTypeBalanceBudgetPage.OPENEDIT;
      ExpectedDate := GetCurrentDate(CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');

      // Exercise:
      CostTypeBalanceBudgetPage.PreviousPeriod.INVOKE;

      // Verify:
      Assert.AreEqual(
        FORMAT(CALCDATE('<-1D>',ExpectedDate)),CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"),DateFilterError);

      // Clean-up:
      CostTypeBalanceBudgetPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetUpdateBudgetAmount@26();
    VAR
      CostBudgetName@1004 : Record 1110;
      CostCenter@1003 : Record 1112;
      CostType@1002 : Record 1103;
      CostTypeBalanceBudgetPage@1001 : TestPage 1120;
      BudgetAmount@1005 : Decimal;
      NetChange@1000 : Decimal;
      PostingDate@1006 : Date;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Setup Cost Type Balance/Budget page:
      CostTypeBalanceBudgetPage.OPENEDIT;
      SetFieldsOnCostTypeBalanceBudgetPage(
        CostTypeBalanceBudgetPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,CostCenter.Code,'');
      EVALUATE(PostingDate,CostTypeBalanceBudgetPage.FILTER.GETFILTER("Date Filter"));
      NetChange := PostCostJournalLine(CostType."No.",CostCenter.Code,'',PostingDate);
      CostTypeBalanceBudgetPage.GOTORECORD(CostType);

      // Exercise:
      BudgetAmount := LibraryRandom.RandDec(100,2);
      CostTypeBalanceBudgetPage."Budget Amount".SETVALUE(BudgetAmount);

      // Verify:
      CostTypeBalanceBudgetPage.BudgetPct.ASSERTEQUALS(ROUND(NetChange / BudgetAmount * 100));

      // Clean-up:
      CostType.DELETE;
      CostBudgetName.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetValidateBudgetFilter@14();
    VAR
      CostBudgetName@1002 : Record 1110;
      CostType@1001 : Record 1103;
      CostTypeBalanceBudgetPage@1000 : TestPage 1120;
      BudgetFilter@1003 : Text;
    BEGIN
      Initialize;

      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      CostTypeBalanceBudgetPage.OPENEDIT;
      BudgetFilter := COPYSTR(LibraryUtility.GenerateRandomCode(CostBudgetName.FIELDNO(Name),DATABASE::"Cost Budget Name"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Cost Budget Name",CostBudgetName.FIELDNO(Name)));
      CostTypeBalanceBudgetPage.BudgetFilter.SETVALUE(BudgetFilter);

      Assert.AreNotEqual(BudgetFilter,CostType."Budget Filter",STRSUBSTNO(ExpectedValueDifferent,CostType.FIELDNAME("Budget Filter")));

      CostTypeBalanceBudgetPage.CLOSE;
      CostType.DELETE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetValidateCostCenterFilter@23();
    VAR
      CostCenter@1003 : Record 1112;
      CostType@1000 : Record 1103;
      CostTypeBalanceBudgetPage@1002 : TestPage 1120;
      CostCenterCode@1001 : Code[20];
    BEGIN
      Initialize;

      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      CostTypeBalanceBudgetPage.OPENEDIT;
      CostCenterCode := COPYSTR(LibraryUtility.GenerateRandomCode(CostCenter.FIELDNO(Code),DATABASE::"Cost Center"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Cost Center",CostCenter.FIELDNO(Code)));

      CostTypeBalanceBudgetPage.CostCenterFilter.SETVALUE(CostCenterCode);

      Assert.AreNotEqual(
        CostCenterCode,CostType."Cost Center Filter",STRSUBSTNO(ExpectedValueDifferent,CostType.FIELDNAME("Cost Center Filter")));

      CostTypeBalanceBudgetPage.CLOSE;
      CostType.DELETE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceBudgetValidateCostObjectFilter@24();
    VAR
      CostObject@1002 : Record 1113;
      CostType@1001 : Record 1103;
      CostTypeBalanceBudgetPage@1003 : TestPage 1120;
      CostObjectCode@1000 : Code[20];
    BEGIN
      Initialize;

      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      CostTypeBalanceBudgetPage.OPENVIEW;
      CostObjectCode := COPYSTR(LibraryUtility.GenerateRandomCode(CostObject.FIELDNO(Code),DATABASE::"Cost Object"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Cost Object",CostObject.FIELDNO(Code)));
      CostTypeBalanceBudgetPage.CostObjectFilter.SETVALUE(CostObjectCode);

      Assert.AreNotEqual(
        CostObjectCode,CostType."Cost Object Filter",STRSUBSTNO(ExpectedValueDifferent,CostType.FIELDNAME("Cost Object Filter")));

      CostTypeBalanceBudgetPage.CLOSE;
      CostType.DELETE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceAmountTypeBalanceAtDate@115();
    BEGIN
      ValidateCostTypeBalanceAmountType(AmountType::"Balance at Date");
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceAmountTypeNetChange@114();
    BEGIN
      ValidateCostTypeBalanceAmountType(AmountType::"Net Change");
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceUpdateCostCenterFilter@113();
    VAR
      CostType@1001 : Record 1103;
      CostTypeBalance@1000 : TestPage 1110;
    BEGIN
      Initialize;

      // Setup
      CostType.SETFILTER("Cost Center Code",'<>%1','');
      CostType.FINDFIRST;

      // Exercise
      CostTypeBalance.OPENEDIT;
      UpdateCostTypeBalanceFilters(
        CostTypeBalance,CostType."Cost Center Code",'',PeriodType::Day,AmountType::"Balance at Date",RoundingFactor::None);

      // Verify
      CostType.TESTFIELD("Cost Center Code",FORMAT(CostTypeBalance.MatrixForm.FILTER.GETFILTER("Cost Center Filter")));

      // Cleanup
      CostTypeBalance.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceUpdateCostObjectFilter@112();
    VAR
      CostType@1001 : Record 1103;
      CostTypeBalance@1000 : TestPage 1110;
    BEGIN
      Initialize;

      // Setup
      CostType.SETFILTER("Cost Object Code",'<>%1','');
      CostType.FINDFIRST;

      // Exercise
      CostTypeBalance.OPENEDIT;
      UpdateCostTypeBalanceFilters(
        CostTypeBalance,'',CostType."Cost Object Code",PeriodType::Day,AmountType::"Balance at Date",RoundingFactor::None);

      // Verify
      CostType.TESTFIELD("Cost Object Code",FORMAT(CostTypeBalance.MatrixForm.FILTER.GETFILTER("Cost Object Filter")));

      // Cleanup
      CostTypeBalance.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceRoundingFactor@111();
    VAR
      CostType@1002 : Record 1103;
      CostTypeBalance@1001 : TestPage 1110;
      SelectedRoundingFactor@1000 : Option;
    BEGIN
      Initialize;

      // Setup
      LibraryCostAccounting.GetAllCostTypes(CostType);

      // Pre-Setup
      CostType.SETFILTER("Date Filter",'%1',WORKDATE);
      CostType.CALCFIELDS("Balance at Date");
      SelectedRoundingFactor := LibraryRandom.RandInt(4) - 1; // None, 1, 1000, or 1000000

      // Exercise
      CostTypeBalance.OPENEDIT;
      CostTypeBalance.FILTER.SETFILTER("Date Filter",FORMAT(WORKDATE));
      UpdateCostTypeBalanceFilters(CostTypeBalance,'','',PeriodType::Day,AmountType::"Balance at Date",SelectedRoundingFactor);

      // Verify
      CostType.SETFILTER("Balance at Date",'<>%1',0);
      CostType.FINDFIRST;
      CostTypeBalance.MatrixForm.GOTORECORD(CostType);
      CostTypeBalance.MatrixForm.Column1.ASSERTEQUALS(
        CostTypeBalanceWithRoundingFactor(CostType."Balance at Date",SelectedRoundingFactor));

      // Cleanup
      CostTypeBalance.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodPageValidateCostCenter@103();
    VAR
      CostCenter@1003 : Record 1112;
      CostType@1013 : Record 1103;
      CostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
      CostBudgetAmount@1015 : Text[30];
      ExpectedAmount@1004 : Decimal;
    BEGIN
      // Check that the OnValidate of Cost Center Filter field on Cost Budget Per Period Page works correctly.

      // Setup: Create new Cost Type, Cost Center and Cost Budget Name.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Exercise: Creating Cost Budget Entry and setting the filters on Cost Budget Per Period page.
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);
      UpdateCostBudgetEntry(CostBudgetEntry,CostType."No.",CostCenter.Code,'');
      ExpectedAmount := CostBudgetEntry.Amount;

      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,CostCenter.Code,'');
      CostBudgetAmount := GetColumnAmountOnCostBudgetPerPeriodChange(CostBudgetPerPeriodPage,CostType."No.");

      // Verify: Verify the Expected Amount with the column value of matrix page.
      Assert.AreEqual(FORMAT(ExpectedAmount,0,'<Precision,2><Standard Format,1>'),CostBudgetAmount,
        STRSUBSTNO(
          CostBudgetAmountError,CostType.TABLECAPTION,CostType."No.",CostBudgetPerPeriodPage.MatrixForm.Column1.CAPTION,
          CostBudgetEntry.TABLECAPTION,CostBudgetEntry."Entry No."));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodPageValidateCostObject@102();
    VAR
      CostObject@1003 : Record 1113;
      CostType@1013 : Record 1103;
      CostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
      CostBudgetAmount@1015 : Text[30];
      ExpectedAmount@1004 : Decimal;
    BEGIN
      // Check that the OnValidate of Cost Object Filter field on Cost Budget Per Period Page works correctly.

      // Setup: Create new Cost Type, Cost Object and Cost Budget Name.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostObject(CostObject);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Exercise: Creating Cost Budget Entry and setting the filters on Cost Budget Per Period page.
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);
      UpdateCostBudgetEntry(CostBudgetEntry,CostType."No.",'',CostObject.Code);
      ExpectedAmount := CostBudgetEntry.Amount;

      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName.Name,'',CostObject.Code);
      CostBudgetAmount := GetColumnAmountOnCostBudgetPerPeriodChange(CostBudgetPerPeriodPage,CostType."No.");

      // Verify: Verify the Expected Amount with the column value of matrix page.
      Assert.AreEqual(FORMAT(ExpectedAmount,0,'<Precision,2><Standard Format,1>'),CostBudgetAmount,
        STRSUBSTNO(
          CostBudgetAmountError,CostType.TABLECAPTION,CostType."No.",CostBudgetPerPeriodPage.MatrixForm.Column1.CAPTION,
          CostBudgetEntry.TABLECAPTION,CostBudgetEntry."Entry No."));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodNextSetAction@100();
    VAR
      CostBudgetPerPeriodPage@1003 : TestPage 1117;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Check that the OnValidate of Action Next Set is properly working or not.

      // Setup.
      Initialize;
      CostBudgetPerPeriodPage.OPENEDIT;

      // Exercise: Get the Date caption of the Matrix Form before invoking the Next Set and after invoking the Next Set.
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');
      GetColumnDatesOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Next Set");

      // Verify: Verify that after invoking the Next Set the Date Caption of MatrixForm is added by 12D.
      Assert.AreEqual(
        CALCDATE('<12D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Next Set"));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodPreviousSetAction@99();
    VAR
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
      ActionItem@1001 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1004 : Date;
      DateAfterInvokingAction@1005 : Date;
    BEGIN
      // Check that the OnValidate of Action Previous Set is properly working or not.

      // Setup.
      Initialize;
      CostBudgetPerPeriodPage.OPENEDIT;

      // Exercise: Get the Date caption of the Matrix Form before invoking the Previous Set and after invoking the Previous Set.
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');
      GetColumnDatesOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Previous Set");

      // Verify: Verify that after invoking the Previous Set the Date Caption of MatrixForm is subtracted by 12D.
      Assert.AreEqual(
        CALCDATE('<-12D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Previous Set"));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodPreviousColumnAction@97();
    VAR
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
      ActionItem@1001 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1005 : Date;
      DateAfterInvokingAction@1004 : Date;
    BEGIN
      // Check that the OnValidate of Action Previous Column is properly working or not.

      // Setup:
      Initialize;
      CostBudgetPerPeriodPage.OPENEDIT;

      // Exercise: Get the Date caption of the Matrix Form before invoking the Previous Column and after invoking the Previous Column.
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');
      GetColumnDatesOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Previous Column");

      // Verify: Verify that after invoking the Previous Column the Date Caption of MatrixForm is subtracted by 1D.
      Assert.AreEqual(
        CALCDATE('<-1D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Previous Column"));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodNextColumnAction@93();
    VAR
      CostBudgetPerPeriodPage@1003 : TestPage 1117;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Check that the OnValidate of Action Next Column is properly working or not.

      // Setup:
      Initialize;
      CostBudgetPerPeriodPage.OPENEDIT;

      // Exercise: Get the Date caption of the Matrix Form before invoking the Next Column and after invoking the Next Column.
      SetFieldsOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),'','','');
      GetColumnDatesOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Next Column");

      // Verify: Verify that after invoking the Next Column the Date Caption of MatrixForm is added by 1D.
      Assert.AreEqual(
        CALCDATE('<1D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Next Column"));

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostJournalBatchNameError@54();
    VAR
      CostJournalPage@1000 : TestPage 1108;
    BEGIN
      // Check that the Error is coming when we insert the wrong value in CostJnlBatchName field.

      // Setup.
      Initialize;

      // Exercise: Open Cost Journal Page and Set wrong value in CostJnlBatchName field.
      CostJournalPage.OPENEDIT;
      ASSERTERROR CostJournalPage.CostJnlBatchName.SETVALUE(RANDOM(10));  // To Set any random value so that it will give error.

      // Verify: Verify that the expected error is coming or not.
      Assert.VerifyFailure(TestValidation,FailedToGetTheExpectedValidationError);

      // Tear Down.
      CostJournalPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostJournalBatchNameField@50();
    VAR
      CostJournalLine@1004 : Record 1101;
      CostJournalBatch@1001 : Record 1102;
      CostJournalTemplate@1003 : Record 1100;
      LibraryCostAccounting@1002 : Codeunit 131340;
      CostJournalPage@1000 : TestPage 1108;
      i@1005 : Integer;
    BEGIN
      // Check that the OnValidate of CostJnlBatchName field on Cost Journal Page works correctly.

      // Setup.
      Initialize;

      // Exercise: Create Cost Journal Batch and Cost Journal Line and set the vaule of Name to CostJnlBatchName.
      CostJournalPage.OPENEDIT;
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.CreateCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalPage.CostJnlBatchName.SETVALUE(CostJournalBatch.Name);

      // Verify: Verify that OnValidate of CostJnlBatchName field on Cost Journal Page works correctly."
      WHILE CostJournalPage.NEXT DO
        i := i + 1;
      Assert.AreEqual(1,i,STRSUBSTNO(CostJnlLineError,CostJournalLine.TABLECAPTION));

      // Tear Down.
      CostJournalPage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CostJournalBatchPageHandler)]
    PROCEDURE TestCostJournalBatchNameLookupField@49();
    VAR
      CostJournalBatch@1002 : Record 1102;
      CostJournalTemplate@1001 : Record 1100;
      CostJournalPage@1000 : TestPage 1108;
    BEGIN
      // Check that the OnLookup of CostJnlBatchName field on Cost Journal Page works correctly.

      // Setup.
      Initialize;

      // Exercise: Creating Cost Journal Batch and Looup up the CostJnlBatchName of Cost Journal Line page and setting the newly created batch name.
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.CreateCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      CostJournalBatchName := CostJournalBatch.Name;
      CostJournalPage.OPENEDIT;
      CostJournalPage.CostJnlBatchName.LOOKUP;

      // Verify: Verify that OnLookup of CostJnlBatchName field on Cost Journal Page works correctly.
      CostJournalPage.CostJnlBatchName.ASSERTEQUALS(CostJournalBatchName);

      // Tear Down.
      CostJournalPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostJournalValidateOnNewRecordWithoutBalCostType@60();
    VAR
      CostType@1003 : Record 1103;
      CostJournalTemplate@1002 : Record 1100;
      CostJournalBatch@1001 : Record 1102;
      CostJournalPage@1000 : TestPage 1108;
    BEGIN
      // Check that the code on OnNewRecord is suceesfully working or not.

      // Setup.
      Initialize;

      // Exercise: Open cost journal page and set the values on the page.
      CostJournalPage.OPENEDIT;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.CreateCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      SetValuesOnCostJournalPage(CostJournalPage,CostJournalBatch.Name,CostType."No.",'');

      // Verify: Verify the values in the Cost Journal page.
      VerifyCostJournalLineWithoutBalCostType(CostJournalPage);

      // Tear Down.
      CostJournalPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostJournalValidateOnNewRecordWithBalCostType@101();
    VAR
      CostType@1003 : Record 1103;
      CostJournalTemplate@1002 : Record 1100;
      CostJournalBatch@1001 : Record 1102;
      CostJournalPage@1000 : TestPage 1108;
    BEGIN
      // Check that the code on OnNewRecord is suceesfully working or not.

      // Setup.
      Initialize;

      // Exercise: Open cost journal page and set the values on the page.
      CostJournalPage.OPENEDIT;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.CreateCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      SetValuesOnCostJournalPage(CostJournalPage,CostJournalBatch.Name,CostType."No.",CostType."No.");

      // Verify: Verify the values in the Cost Journal page.
      VerifyCostJournalLineWithBalCostType(CostJournalPage);

      // Tear Down.
      CostJournalPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceValidateCostCenter@145();
    VAR
      CostCenter@1003 : Record 1112;
      CostType@1013 : Record 1103;
      CostEntry@1001 : Record 1104;
      CostJournalLine@1008 : Record 1101;
      CostTypeBalancePage@1000 : TestPage 1110;
      CostTypeBalanceAmount@1004 : Text[30];
      CostJournalLineAmount@1005 : Decimal;
      CostJournaLinePostingDate@1007 : Date;
      ColoumnNo@1002 : Integer;
    BEGIN
      // Test Amount in columns as per the Cost Center filter field on Cost Type Balance Page.

      // Setup: Create a new Cost Type and Cost Center.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);

      // Exercise: Posting the Cost Journal Line and setting filters on Cost Type Balance Page.
      ColoumnNo := LibraryRandom.RandInt(11);
      CostJournaLinePostingDate := CALCDATE(STRSUBSTNO('<%1D>',ColoumnNo),WORKDATE);
      CostJournalLineAmount := PostCostJournalLine(CostType."No.",CostCenter.Code,'',CostJournaLinePostingDate);
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(
        CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),CostCenter.Code,'');
      CostTypeBalanceAmount := GetColumnAmountOnCostTypeBalancePage(CostTypeBalancePage,CostType."No.",ColoumnNo);

      // Verify: Verify Posted Amount with the value in the Matrix form.
      Assert.AreEqual(
        FORMAT(CostJournalLineAmount,0,'<Precision,2><Standard Format,1>'),CostTypeBalanceAmount,
        STRSUBSTNO(CostJournalAmountError,CostJournalLine.TABLECAPTION,CostEntry.TABLECAPTION));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceValidateCostObject@144();
    VAR
      CostObject@1004 : Record 1113;
      CostType@1013 : Record 1103;
      CostJournalLine@1008 : Record 1101;
      CostEntry@1001 : Record 1104;
      CostTypeBalancePage@1000 : TestPage 1110;
      CostTypeBalanceAmount@1003 : Text[30];
      CostJournalLineAmount@1005 : Decimal;
      CostJournaLinePostingDate@1006 : Date;
      ColoumnNo@1002 : Integer;
    BEGIN
      // Test Amount in columns as per the Cost Object filter field on Cost Type Balance Page.

      // Setup: Create a new Cost Type and Cost Object.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Exercise: Posting the Cost Journal Line and setting filters on Cost Type Balance Page.
      ColoumnNo := LibraryRandom.RandInt(11);
      CostJournaLinePostingDate := CALCDATE(STRSUBSTNO('<%1D>',ColoumnNo),WORKDATE);
      CostJournalLineAmount := PostCostJournalLine(CostType."No.",'',CostObject.Code,CostJournaLinePostingDate);
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(
        CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),'',CostObject.Code);
      CostTypeBalanceAmount := GetColumnAmountOnCostTypeBalancePage(CostTypeBalancePage,CostType."No.",ColoumnNo);

      // Verify: Verify Posted Amount with the value in the Matrix form.
      Assert.AreEqual(
        FORMAT(CostJournalLineAmount,0,'<Precision,2><Standard Format,1>'),CostTypeBalanceAmount,
        STRSUBSTNO(CostJournalAmountError,CostJournalLine.TABLECAPTION,CostEntry.TABLECAPTION));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceValidateViewWeek@143();
    VAR
      CostTypeBalancePage@1000 : TestPage 1110;
      ActualDate@1002 : Date;
      i@1003 : Integer;
    BEGIN
      // Test caption in columns with respect to the View by Week Filter on Cost Type Balance Page.

      // Setup
      Initialize;

      // Exercise: Setting values on CostType Balance Page.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Week),FORMAT(AmountType::"Balance at Date"),'','');

      // Verify: To Verify value of each column with respect to the ViewBy week filter.
      ActualDate := WORKDATE;
      FOR i := 1 TO 12 DO BEGIN
        VerifyFiltersOnCostTypeBalanceByViewMatrixPage(CostTypeBalancePage,PeriodType::Week,ActualDate,i);
        ActualDate := CALCDATE('<1W>',ActualDate);
      END;

      // Tear Down
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceValidateViewMonth@142();
    VAR
      CostTypeBalancePage@1000 : TestPage 1110;
      ActualDate@1002 : Date;
      i@1003 : Integer;
    BEGIN
      // Test caption in columns with respect to the View by  Month Filter on Cost Type Balance Page.

      // Setup
      Initialize;

      // Exercise: Setting values on CostType Balance Page.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Month),FORMAT(AmountType::"Balance at Date"),'','');

      // Verify: To Verify value of each column with respect to the ViewBy Month filter.
      ActualDate := WORKDATE;
      FOR i := 1 TO 12 DO BEGIN
        VerifyFiltersOnCostTypeBalanceByViewMatrixPage(CostTypeBalancePage,PeriodType::Month,ActualDate,i);
        ActualDate := CALCDATE('<1M>',ActualDate);
      END;

      // Tear Down
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceValidateViewYear@141();
    VAR
      CostTypeBalancePage@1000 : TestPage 1110;
      ActualDate@1002 : Date;
      i@1003 : Integer;
    BEGIN
      // Test caption in columns with respect to the View by Year Filter on Cost Type Balance Page.

      // Setup
      Initialize;

      // Exercise: Setting values on CostType Balance Page.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Year),FORMAT(AmountType::"Balance at Date"),'','');

      // Verify: To Verify value of each column with respect to the ViewBy Year filter.
      ActualDate := WORKDATE;
      FOR i := 1 TO 12 DO BEGIN
        VerifyFiltersOnCostTypeBalanceByViewMatrixPage(CostTypeBalancePage,PeriodType::Year,ActualDate,i);
        ActualDate := CALCDATE('<1Y>',ActualDate);
      END;

      // Tear Down
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceNextColumnAction@140();
    VAR
      CostTypeBalancePage@1003 : TestPage 1110;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Test caption value of column on invoking Next Column Action on Cost Type Balance Page.

      // Setup.
      Initialize;

      // Exercise: Evaluating Caption of Matrix form before and after invoking Next Column action.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),'','');
      GetColumnDatesOnCostTypeBalancePage(
        CostTypeBalancePage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Next Column");

      // Verify: Verify caption value of column on invoking Next Column Action.
      Assert.AreEqual(
        CALCDATE('<1D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Next Column"));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalanceNextSetAction@138();
    VAR
      CostTypeBalancePage@1003 : TestPage 1110;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Test caption value of column on invoking of Next Set Action on Cost Type Balance Page.

      // Setup.
      Initialize;

      // Exercise: Evaluating Caption of Matrix form before and after invoking Next Set action.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),'','');
      GetColumnDatesOnCostTypeBalancePage(CostTypeBalancePage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Next Set");

      // Verify: Verify caption value of column on invoking Next Set Action.
      Assert.AreEqual(
        CALCDATE('<12D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Next Set"));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalancePreviousSetAction@137();
    VAR
      CostTypeBalancePage@1003 : TestPage 1110;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Test caption value of column on invoking of Previous Set Action on Cost Type Balance Page.

      // Setup.
      Initialize;

      // Exercise: Evaluating Caption of Matrix form before and after invoking Previous Set action.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),'','');
      GetColumnDatesOnCostTypeBalancePage(
        CostTypeBalancePage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Previous Set");

      // Verify: Verify caption value of column on invoking Previous Set Action.
      Assert.AreEqual(
        CALCDATE('<-12D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Previous Set"));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostTypeBalancePreviousColumnAction@136();
    VAR
      CostTypeBalancePage@1003 : TestPage 1110;
      ActionItem@1002 : 'Previous Set,Previous Column,Next Column,Next Set';
      DateBeforeInvokingAction@1001 : Date;
      DateAfterInvokingAction@1000 : Date;
    BEGIN
      // Test caption value of column on invoking of Previous Column Action on Cost Type Balance Page.

      // Setup.
      Initialize;

      // Exercise: Evaluating Caption of Matrix form before and after invoking Previous Column action.
      CostTypeBalancePage.OPENEDIT;
      SetFieldsOnCostTypeBalancePage(CostTypeBalancePage,FORMAT(PeriodType::Day),FORMAT(AmountType::"Balance at Date"),'','');
      GetColumnDatesOnCostTypeBalancePage(
        CostTypeBalancePage,DateBeforeInvokingAction,DateAfterInvokingAction,ActionItem::"Previous Column");

      // Verify: Verify caption value of column on invoking Previous Column Action.
      Assert.AreEqual(
        CALCDATE('<-1D>',DateBeforeInvokingAction),DateAfterInvokingAction,STRSUBSTNO(ColumnDateError,ActionItem::"Previous Column"));

      // Tear Down.
      CostTypeBalancePage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MFHandlerChartOfCostAccountOk,MessageHandler)]
    PROCEDURE TestChartOfCostTypeCorrespondingGLAccountActionOnCostTypeGLRange@135();
    VAR
      CostType@1000 : Record 1103;
      ChartOfCostTypePage@1001 : TestPage 1100;
    BEGIN
      // Test Corresponding G/L Account Action on Cost Type Balance Page for the Cost Type with Single G/L Account.

      // Setup: Initialize and create a Cost Type with single G/L Account.
      Initialize;
      LibraryCostAccounting.CreateCostType(CostType);

      // Exercise: Filter the created Cost Type on Chart of Cost Type and invoke Corresponding G/L Account Action for that Cost Type.
      ChartOfCostTypePage.OPENEDIT;
      ChartOfCostTypePage.FILTER.SETFILTER("No.",CostType."No.");
      ChartOfCostTypePage.CorrespondingGLAccounts.INVOKE;

      // Verify: To check G/L Account exist on Chart of Accounts for Cost Type with single G/L Account.
      ChartOfCostTypePage."G/L Account Range".ASSERTEQUALS(GLAccountNo);

      // Tear Down.
      ChartOfCostTypePage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MFHandlerChartOfCostAccountCancel)]
    PROCEDURE TestChartOfCostTypeCorrespondingGLAccountActionOnCostTypeNoGLRange@134();
    VAR
      CostType@1000 : Record 1103;
      ChartOfCostTypePage@1001 : TestPage 1100;
    BEGIN
      // Test Corresponding G/L Account Action on Cost Type Balance Page for Cost Type with no G/L Account.

      // Setup: Initialize and Create a Cost Type with no G/L Account.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      // Exercise: Filter the created Cost Type on Chart of Cost Type and invoke Corresponding G/L Account Action for that Cost Type.
      ChartOfCostTypePage.OPENEDIT;
      ChartOfCostTypePage.FILTER.SETFILTER("No.",CostType."No.");
      ChartOfCostTypePage.CorrespondingGLAccounts.INVOKE;

      // Verify: To check no G/L account exist on Chart of Accounts for Cost Type without G/L Account.
      ChartOfCostTypePage."G/L Account Range".ASSERTEQUALS(GLAccountNo);

      // Tear Down.
      ChartOfCostTypePage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TestChartOfCostTypeGetCostTypesFromChartOfAccountsAction@133();
    VAR
      CostAccountingSetup@1002 : Record 1108;
      GLAccount@1003 : Record 15;
      ChartOfCostTypePage@1000 : TestPage 1100;
      OldAlignmentValue@1004 : Option;
    BEGIN
      // Test Get Cost Types from Chart Of Account Action On Chart of Cost Type.

      // Setup: Set Alignment and Create a G/L account.
      Initialize;
      CostAccountingSetup.GET;
      OldAlignmentValue := CostAccountingSetup."Align G/L Account";
      LibraryCostAccounting.SetAlignment(
        CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::"No Alignment");
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      // Exercise: Invoking Get Cost Types form Chart of Accounts Action and set filters on Chart of Cost Type Page.
      ChartOfCostTypePage.OPENEDIT;
      ChartOfCostTypePage.GetCostTypesFromChartOfAccounts.INVOKE;
      ChartOfCostTypePage.FILTER.SETFILTER("No.",GLAccount."No.");

      // Verify: To check that created G/L Account is extracted to Chart of Cost Tyep Page on invoking Chart of Account Action.
      ChartOfCostTypePage."No.".ASSERTEQUALS(GLAccount."No.");

      // Tear Down: Reset the value of Align G/L Account on Cost Accounting Setup.
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align G/L Account"),OldAlignmentValue);
      ChartOfCostTypePage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MFHandlerCostBudgetEntries)]
    PROCEDURE TestCostBudgetEntryValidateOnNewRecordForCostCenterCode@147();
    VAR
      CostBudgetName@1005 : Record 1110;
      CostType@1004 : Record 1103;
      CostCenter@1006 : Record 1112;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
    BEGIN
      // Check that the Code on OnNewRecord with cost center is working successfully or not.

      // Setup: Creating new Cost budget name, cost type and cost center.
      Initialize;
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);

      // Exercise: Open Cost Budget Per period page and setting the filters on the page.
      CostTypeNo := CostType."No.";
      CostCenterFilter := CostCenter.Code;
      SetFiltersOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,CostBudgetName.Name);
      ActionFilter := ActionFilter::Verify;

      // Verify: Verify that the cost budget entry page opens up with correct filters on drilldown. Verification has been done in handler MFHandlerCostBudgetEntries.
      CostBudgetPerPeriodPage.MatrixForm.Column1.DRILLDOWN;

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MFHandlerCostBudgetEntries)]
    PROCEDURE TestCostBudgetEntryValidateOnInsertRecordForCostObjectCode@146();
    VAR
      CostBudgetName@1005 : Record 1110;
      CostType@1004 : Record 1103;
      CostObject@1006 : Record 1113;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
    BEGIN
      // Check that the Code on OnInsertRecord with cost object is working successfully or not.

      // Setup: Creating new Cost budget name, cost type and cost object.
      Initialize;
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Exercise: Open Cost Budget Per period page and setting the filters on the page and setting the value of Amount on cost budget entry page in handler MFHandlerCostBudgetEntries.
      CostTypeNo := CostType."No.";
      CostObjectFilter := CostObject.Code;
      SetFiltersOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,CostBudgetName.Name);
      EntryNo := GetNextEntryNo;
      CostBudgetPerPeriodPage.MatrixForm.Column1.DRILLDOWN;
      ActionFilter := ActionFilter::Verify;

      // Verify: Verify that the record has been inserted on the cost budget entry page. Verification has been done in handler MFHandlerCostBudgetEntries.
      CostBudgetPerPeriodPage.MatrixForm.Column1.DRILLDOWN;

      // Tear Down.
      CostBudgetPerPeriodPage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TestChartOfCostTypeRegisterCostTypesInChartOfAccounts@154();
    VAR
      CostType@1004 : Record 1103;
      GLAccount@1002 : Record 15;
      CostAccountingSetup@1001 : Record 1108;
      ChartOfCostTypePage@1000 : TestPage 1100;
      ChartOfAccountsPage@1006 : TestPage 16;
      Type@1003 : 'Cost Type,Heading,Total,Begin-Total,End-Total';
    BEGIN
      // Test that Action item 'Register Cost Types In Chart Of Accounts'on Chart Of Cost Type page is working successfullty or not.

      // Setup: To set Align G/L Account to No alignment and Create G/L Account and Cost Type.
      Initialize;
      LibraryCostAccounting.SetAlignment(
        CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::"No Alignment");
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      // Exercise: Update Cost type and invoke register Cost Type in Chart Of Accounts Action On Chart Of Cost Type Page.
      UpdateCostType(CostType,Type::"Cost Type",GLAccount."No.");
      ChartOfCostTypePage.OPENVIEW;
      ChartOfCostTypePage.RegCostTypeInChartOfCostType.INVOKE;
      ChartOfAccountsPage.OPENVIEW;
      ChartOfAccountsPage.FILTER.SETFILTER("No.",GLAccount."No.");

      // Verify: To check that after invoking Action item 'Register Cost Types In Chart Of Accounts' Cost Type No. gets in G/L Account.
      ChartOfAccountsPage."Cost Type No.".ASSERTEQUALS(CostType."No.");

      // Tear Down.
      ChartOfCostTypePage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCostAllocationTargetValidateCostAllocationTargetAction@151();
    VAR
      CostAllocationSource@1006 : Record 1106;
      CostAllocationTarget@1000 : Record 1107;
      CostAllocationPage@1001 : TestPage 1105;
      CostAllocationTargetCardPage@1005 : TestPage 1109;
      TypeOfId@1002 : 'Auto Generated,Custom';
      Base@1003 : 'Static,G/L Entries,G/L Budget Entries,Cost Type Entries,Cost Budget Entries,,,,,No of Employees,,Items Sold (Qty.),Items Purchased (Qty.),Items Sold (Amount),Items Purchased (Amount)';
      AllocationType@1004 : 'All Costs,Percent per Share,Amount per Share';
    BEGIN
      // Test whether the Cost Allocation Card is opening for that particular Cost Allocation.

      // Setup: Create a Cost Allocation Source and Cost Allocation Target.
      Initialize;
      LibraryCostAccounting.CreateAllocSource(CostAllocationSource,TypeOfId::"Auto Generated");
      LibraryCostAccounting.CreateAllocTarget(
        CostAllocationTarget,CostAllocationSource,LibraryRandom.RandDec(1000,2),Base::Static,AllocationType::"All Costs");

      // Exercise: Filter created Cost Allocation on Cost Allocation Page and Invoke the Cost Allocation Target Card Action.
      CostAllocationPage.OPENEDIT;
      CostAllocationPage.FILTER.SETFILTER(ID,CostAllocationSource.ID);
      CostAllocationTargetCardPage.TRAP;
      CostAllocationPage.AllocTarget.AllocationTargetCard.INVOKE;

      // Verify: Check whether ID On Cost Allocation Target Card is equal to the ID on Cost Allocation Page
      CostAllocationPage.AllocTarget."Target Cost Type".ASSERTEQUALS(CostAllocationTargetCardPage."Target Cost Type");

      // Tear Down.
      CostAllocationPage.CLOSE;
    END;

    [Test]
    PROCEDURE TestCorrespondingCostTypesForAllocation@157();
    VAR
      CostAllocationSource@1005 : Record 1106;
      CostType@1000 : Record 1103;
      CostAllocationSourcePage@1006 : TestPage 1102;
      ChartOfCostTypePage@1007 : TestPage 1100;
      i@1001 : Integer;
      TotalNumberOfCostTypes@1003 : Integer;
      CostTypeNo@1002 : Code[20];
      TypeOfID@1004 : 'Auto Generated,Custom';
    BEGIN
      // Test that Corresponding Cost Types for an Allocation Source are Displayed.

      // Setup: Create multiple cost type and link it with newly created cost allocation source.
      Initialize;
      TotalNumberOfCostTypes := 1 + LibraryRandom.RandInt(4);
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      CostTypeNo := CostType."No.";
      FOR i := 2 TO TotalNumberOfCostTypes DO
        LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      LibraryCostAccounting.CreateAllocSource(CostAllocationSource,TypeOfID::"Auto Generated");
      UpdateCostAllocationSource(CostAllocationSource,STRSUBSTNO(CostTypeFilterDefinition,CostTypeNo,CostType."No."));

      // Exercise: To open Cost Allocation Source page set filter and then invoke Page Chart of Cost Types.
      CostAllocationSourcePage.OPENVIEW;
      CostAllocationSourcePage.FILTER.SETFILTER(ID,CostAllocationSource.ID);
      ChartOfCostTypePage.TRAP;
      CostAllocationSourcePage.PageChartOfCostTypes.INVOKE;

      // Verify that Corresponding Cost Types for an Allocation Source are Displayed.
      CostAllocationSource.TESTFIELD("Cost Type Range",ChartOfCostTypePage.FILTER.GETFILTER("No."));
    END;

    [Test]
    PROCEDURE TestCostBudgetPerPeriodPageValidateBudgetFilter@162();
    VAR
      CostBudgetName@1001 : Record 1110;
      CostBudgetName2@1003 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostBudgetPerPeriodPage@1000 : TestPage 1117;
    BEGIN
      // Test that Changing the View Reflects in Displaying the Correct Data.

      // Setup.
      Initialize;

      // Exercise: Create two cost budget name and one cost budget entry.
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName2);
      CostBudgetPerPeriodPage.OPENEDIT;

      // Verify that Changing the View Reflects in Displaying the Correct Data.
      VerifyCostBudgetPerPeriodMatrixPage(
        CostBudgetPerPeriodPage,CostBudgetName.Name,CostBudgetEntry,FORMAT(CostBudgetEntry.Amount,0,'<Precision,2><Standard Format,1>'));
      VerifyCostBudgetPerPeriodMatrixPage(CostBudgetPerPeriodPage,CostBudgetName2.Name,CostBudgetEntry,'');
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostCenterMatrixShowsCostCenter@189();
    VAR
      CostCenter@1000 : Record 1112;
      CostCenter2@1002 : ARRAY [12] OF Record 1112;
      TempCostCenter@1004 : TEMPORARY Record 1112;
      CostBudgetbyCostCenterPage@1005 : TestPage 1118;
      i@1003 : Integer;
    BEGIN
      // Test that Page Cost Bdgt. per Center Matrix is shown correctly.

      // Setup: Save copy and delete all the cost centers.
      Initialize;
      CopyCostCenters(CostCenter,TempCostCenter);
      CostCenter.DELETEALL;

      // Create 12 new cost centers and open the page cost budget by cost center page.
      FOR i := 1 TO 12 DO
        LibraryCostAccounting.CreateCostCenter(CostCenter2[i]);
      CostBudgetbyCostCenterPage.OPENEDIT;

      // Verify that column captions are correcly shown in the page according to newly created cost centers.
      FOR i := 1 TO 12 DO
        Assert.AreEqual(
          FORMAT(CostCenter2[i].Code),GetColumnCaptionOnCostBudgetByCostCenterPage(CostBudgetbyCostCenterPage,i),
          STRSUBSTNO(WrongCaptionError,i));

      // Tear Down.
      CopyCostCenters(TempCostCenter,CostCenter);
    END;

    [Test]
    PROCEDURE TestCostBudgetPerCostObjectMatrixShowsCostObject@161();
    VAR
      CostObject@1000 : Record 1113;
      CostObject2@1002 : ARRAY [12] OF Record 1113;
      TempCostObject@1004 : TEMPORARY Record 1113;
      CostBudgetbyCostObjectPage@1005 : TestPage 1119;
      i@1003 : Integer;
    BEGIN
      // Test that Page Cost Bdgt. per Object Matrix is shown correctly.

      // Setup: Save copy and delete all the cost objects.
      Initialize;
      CopyCostObjects(CostObject,TempCostObject);
      CostObject.DELETEALL;

      // Create 12 new cost objects and open the page cost budget by cost object page.
      FOR i := 1 TO 12 DO
        LibraryCostAccounting.CreateCostObject(CostObject2[i]);
      CostBudgetbyCostObjectPage.OPENEDIT;

      // Verify that column captions are correcly shown in the page according to newly created cost objects.
      FOR i := 1 TO 12 DO
        Assert.AreEqual(
          FORMAT(CostObject2[i].Code),GetColumnCaptionOnCostBudgetByCostObjectPage(CostBudgetbyCostObjectPage,i),
          STRSUBSTNO(WrongCaptionError,i));

      // Tear Down.
      CopyCostObjects(TempCostObject,CostObject);
    END;

    [Test]
    PROCEDURE TestChartOfAccountFlowFiltersOnActionGLBalance@116();
    VAR
      ChartOfAccounts@1001 : TestPage 16;
      GLBalance@1002 : TestPage 414;
      GlobalDimensionCodeValue@1000 : ARRAY [2] OF Code[20];
      BusinessUnitFilterValue@1004 : Code[10];
    BEGIN
      // Verify flowfilters are transfered when opening "G/L Balance" from "Chart Of Accounts" page
      GlobalDimensionCodeValue[1] := GetGlobalDimensionCodeValue(1);
      GlobalDimensionCodeValue[2] := GetGlobalDimensionCodeValue(2);
      BusinessUnitFilterValue := GetBusinessUnitFilterValue;

      ChartOfAccounts.OPENVIEW;
      ChartOfAccounts.FILTER.SETFILTER("Global Dimension 1 Filter",GlobalDimensionCodeValue[1]);
      ChartOfAccounts.FILTER.SETFILTER("Global Dimension 2 Filter",GlobalDimensionCodeValue[2]);
      ChartOfAccounts.FILTER.SETFILTER("Business Unit Filter",BusinessUnitFilterValue);
      GLBalance.TRAP;
      ChartOfAccounts."Page G/L Balance".INVOKE;

      Assert.AreEqual(GlobalDimensionCodeValue[1],GLBalance.FILTER.GETFILTER("Global Dimension 1 Filter"),WrongFlowFilterValueErr);
      Assert.AreEqual(GlobalDimensionCodeValue[2],GLBalance.FILTER.GETFILTER("Global Dimension 2 Filter"),WrongFlowFilterValueErr);
      Assert.AreEqual(BusinessUnitFilterValue,GLBalance.FILTER.GETFILTER("Business Unit Filter"),WrongFlowFilterValueErr);

      GLBalance.CLOSE;
      ChartOfAccounts.CLOSE;
    END;

    [Test]
    PROCEDURE TestChartOfAccountFlowFiltersOnActionGLBalanceBudget@184();
    VAR
      ChartOfAccounts@1001 : TestPage 16;
      GLBalanceBudget@1002 : TestPage 422;
      GlobalDimensionCodeValue@1000 : ARRAY [2] OF Code[20];
      BusinessUnitFilterValue@1004 : Code[10];
      BudgetFilterValue@1003 : Code[10];
    BEGIN
      // Verify flowfilters are transfered when opening "G/L Balance/Budget" from "Chart Of Accounts" page
      GlobalDimensionCodeValue[1] := GetGlobalDimensionCodeValue(1);
      GlobalDimensionCodeValue[2] := GetGlobalDimensionCodeValue(2);
      BusinessUnitFilterValue := GetBusinessUnitFilterValue;
      BudgetFilterValue := GetBudgetFilterValue;

      ChartOfAccounts.OPENVIEW;
      ChartOfAccounts.FILTER.SETFILTER("Global Dimension 1 Filter",GlobalDimensionCodeValue[1]);
      ChartOfAccounts.FILTER.SETFILTER("Global Dimension 2 Filter",GlobalDimensionCodeValue[2]);
      ChartOfAccounts.FILTER.SETFILTER("Business Unit Filter",BusinessUnitFilterValue);
      ChartOfAccounts.FILTER.SETFILTER("Budget Filter",BudgetFilterValue);
      GLBalanceBudget.TRAP;
      ChartOfAccounts."Page G/L Balance/Budget".INVOKE;

      Assert.AreEqual(
        GlobalDimensionCodeValue[1],GLBalanceBudget.FILTER.GETFILTER("Global Dimension 1 Filter"),WrongFlowFilterValueErr);
      Assert.AreEqual(
        GlobalDimensionCodeValue[2],GLBalanceBudget.FILTER.GETFILTER("Global Dimension 2 Filter"),WrongFlowFilterValueErr);
      Assert.AreEqual(BusinessUnitFilterValue,GLBalanceBudget.FILTER.GETFILTER("Business Unit Filter"),WrongFlowFilterValueErr);
      Assert.AreEqual(BudgetFilterValue,GLBalanceBudget.FILTER.GETFILTER("Budget Filter"),WrongFlowFilterValueErr);

      GLBalanceBudget.CLOSE;
      ChartOfAccounts.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      InitializeGlobalVariables;
    END;

    LOCAL PROCEDURE InitializeGlobalVariables@17();
    BEGIN
      CostCenterFilter := '';
      CostObjectFilter := '';
      CostJournalBatchName := '';
      GLAccountNo := '';
      CostTypeNo := '';
      EntryNo := 0;
      CLEAR(ActionFilter);
    END;

    LOCAL PROCEDURE CostTypeBalanceWithRoundingFactor@122(CurrentValue@1001 : Decimal;SelectedRoundingFactor@1000 : Option) RoundedValue : Decimal;
    BEGIN
      CASE SelectedRoundingFactor OF
        RoundingFactor::None:
          RoundedValue := CurrentValue;
        RoundingFactor::"1":
          RoundedValue := ROUND(CurrentValue,1);
        RoundingFactor::"1000":
          RoundedValue := ROUND(CurrentValue / 1000,0.1);
        RoundingFactor::"1000000":
          RoundedValue := ROUND(CurrentValue / 1000000,0.1);
      END;
    END;

    LOCAL PROCEDURE CreateBudgetEntry@11(CostBudgetName@1001 : Code[10];CostTypeNo@1000 : Code[20];Date@1003 : Date) : Decimal;
    VAR
      CostBudgetEntry@1002 : Record 1109;
    BEGIN
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName);
      CostBudgetEntry."Cost Type No." := CostTypeNo;
      CostBudgetEntry.Date := Date;
      CostBudgetEntry.MODIFY;

      EXIT(CostBudgetEntry.Amount);
    END;

    LOCAL PROCEDURE CreateCostType@119(VAR CostType@1000 : Record 1103);
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CostType."Cost Center Code" := CostCenter.Code;
      CostType.MODIFY;
    END;

    LOCAL PROCEDURE FindCostJournalBatch@121(VAR CostJournalBatch@1001 : Record 1102);
    VAR
      CostJournalTemplate@1000 : Record 1100;
    BEGIN
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.FindCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.ClearCostJournalLines(CostJournalBatch);
    END;

    LOCAL PROCEDURE GetCurrentDate@36(DateFilter@1000 : Text[35]) Date : Date;
    VAR
      DateString@1001 : Text;
      Position@1002 : Integer;
    BEGIN
      Position := STRPOS(DateFilter,'..');
      IF Position = 0 THEN
        DateString := DateFilter
      ELSE
        DateString := COPYSTR(DateFilter,Position + 2);

      EVALUATE(Date,DateString);
    END;

    LOCAL PROCEDURE GetCellValueOnCostBudgetPerPeriodPage@43(VAR CostBudgetPerPeriodPage@1001 : TestPage 1117;ColumnNo@1000 : Integer) Value : Text;
    BEGIN
      CASE ColumnNo OF
        1:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column1.VALUE;
        2:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column2.VALUE;
        3:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column3.VALUE;
        4:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column4.VALUE;
        5:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column5.VALUE;
        6:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column6.VALUE;
        7:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column7.VALUE;
        8:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column8.VALUE;
        9:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column9.VALUE;
        10:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column10.VALUE;
        11:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column11.VALUE;
        12:
          Value := CostBudgetPerPeriodPage.MatrixForm.Column12.VALUE;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetCellValueOnCostBudgetByCostCenterPage@45(VAR CostBudgetByCostCenterPage@1001 : TestPage 1118;ColumnNo@1000 : Integer) Value : Text;
    BEGIN
      CASE ColumnNo OF
        1:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column1.VALUE;
        2:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column2.VALUE;
        3:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column3.VALUE;
        4:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column4.VALUE;
        5:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column5.VALUE;
        6:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column6.VALUE;
        7:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column7.VALUE;
        8:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column8.VALUE;
        9:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column9.VALUE;
        10:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column10.VALUE;
        11:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column11.VALUE;
        12:
          Value := CostBudgetByCostCenterPage.MatrixForm.Column12.VALUE;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetCellValueOnCostBudgetByCostObjectPage@47(CostBudgetByCostObjectPage@1001 : TestPage 1119;ColumnNo@1000 : Integer) Value : Text;
    BEGIN
      CASE ColumnNo OF
        1:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column1.VALUE;
        2:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column2.VALUE;
        3:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column3.VALUE;
        4:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column4.VALUE;
        5:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column5.VALUE;
        6:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column6.VALUE;
        7:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column7.VALUE;
        8:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column8.VALUE;
        9:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column9.VALUE;
        10:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column10.VALUE;
        11:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column11.VALUE;
        12:
          Value := CostBudgetByCostObjectPage.MatrixForm.Column12.VALUE;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnCaptionOnCostBudgetByCostObjectPage@32(CostBudgetByCostObjectPage@1001 : TestPage 1119;ColumnNo@1000 : Integer) Caption : Text;
    BEGIN
      CASE ColumnNo OF
        1:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column1.CAPTION;
        2:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column2.CAPTION;
        3:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column3.CAPTION;
        4:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column4.CAPTION;
        5:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column5.CAPTION;
        6:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column6.CAPTION;
        7:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column7.CAPTION;
        8:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column8.CAPTION;
        9:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column9.CAPTION;
        10:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column10.CAPTION;
        11:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column11.CAPTION;
        12:
          Caption := CostBudgetByCostObjectPage.MatrixForm.Column12.CAPTION;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnCaptionOnCostBudgetByCostCenterPage@71(CostBudgetByCostCenterPage@1001 : TestPage 1118;ColumnNo@1000 : Integer) Caption : Text;
    BEGIN
      CASE ColumnNo OF
        1:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column1.CAPTION;
        2:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column2.CAPTION;
        3:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column3.CAPTION;
        4:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column4.CAPTION;
        5:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column5.CAPTION;
        6:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column6.CAPTION;
        7:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column7.CAPTION;
        8:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column8.CAPTION;
        9:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column9.CAPTION;
        10:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column10.CAPTION;
        11:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column11.CAPTION;
        12:
          Caption := CostBudgetByCostCenterPage.MatrixForm.Column12.CAPTION;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnCaptionOnCostBudgetPerPeriodPage@109(VAR CostBudgetPerPeriodPage@1001 : TestPage 1117;ColumnNo@1000 : Integer) Caption : Text[30];
    BEGIN
      CASE ColumnNo OF
        1:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column1.CAPTION;
        2:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column2.CAPTION;
        3:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column3.CAPTION;
        4:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column4.CAPTION;
        5:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column5.CAPTION;
        6:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column6.CAPTION;
        7:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column7.CAPTION;
        8:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column8.CAPTION;
        9:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column9.CAPTION;
        10:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column10.CAPTION;
        11:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column11.CAPTION;
        12:
          Caption := CostBudgetPerPeriodPage.MatrixForm.Column12.CAPTION;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnAmountOnCostBudgetPerPeriodChange@107(CostBudgetPerPeriodPage@1000 : TestPage 1117;CostTypeNo@1001 : Code[20]) Value : Text[30];
    BEGIN
      CostBudgetPerPeriodPage.MatrixForm.FILTER.SETFILTER("No.",CostTypeNo);
      Value := GetCellValueOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,1);
    END;

    LOCAL PROCEDURE GetColumnDatesOnCostBudgetPerPeriodPage@108(CostBudgetPerPeriodPage@1000 : TestPage 1117;VAR DateBeforeInvokingAction@1004 : Date;VAR DateAfterInvokingAction@1003 : Date;ActionItem@1006 : 'Previous Set,Previous Column,Next Column,Next Set');
    VAR
      ColumnNo@1005 : Integer;
    BEGIN
      ColumnNo := LibraryRandom.RandInt(12); // Pick a random column for the matrix page.
      EVALUATE(DateBeforeInvokingAction,GetColumnCaptionOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ColumnNo));
      InvokeActionOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ActionItem);
      EVALUATE(DateAfterInvokingAction,GetColumnCaptionOnCostBudgetPerPeriodPage(CostBudgetPerPeriodPage,ColumnNo));
    END;

    LOCAL PROCEDURE GetNextEntryNo@150() : Integer;
    VAR
      CostBudgetEntry@1000 : Record 1109;
    BEGIN
      CostBudgetEntry.SETCURRENTKEY("Entry No.");
      IF CostBudgetEntry.FINDLAST THEN
        EXIT(CostBudgetEntry."Entry No." + 1);
      EXIT(1);
    END;

    [Normal]
    LOCAL PROCEDURE InvokeActionOnCostBudgetPerPeriodPage@106(VAR CostBudgetPerPeriodPage@1001 : TestPage 1117;ActionItem@1000 : 'Previous Set,Previous Column,Next Column,Next Set');
    BEGIN
      CASE ActionItem OF
        ActionItem::"Previous Set":
          CostBudgetPerPeriodPage.PreviousSet.INVOKE;
        ActionItem::"Previous Column":
          CostBudgetPerPeriodPage.PreviousColumn.INVOKE;
        ActionItem::"Next Column":
          CostBudgetPerPeriodPage.NextColumn.INVOKE;
        ActionItem::"Next Set":
          CostBudgetPerPeriodPage.NextSet.INVOKE;
      END;
    END;

    LOCAL PROCEDURE PostAmountForCostType@120(CostTypeNo@1000 : Code[20];BalCostTypeNo@1001 : Code[20]) Amount : Decimal;
    VAR
      CostJournalBatch@1003 : Record 1102;
      CostJournalLine@1002 : Record 1101;
    BEGIN
      FindCostJournalBatch(CostJournalBatch);
      LibraryCostAccounting.CreateCostJournalLineBasic(
        CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,WORKDATE,CostTypeNo,BalCostTypeNo);
      Amount := CostJournalLine.Amount;
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE PostCostJournalLine@10(CostTypeNo@1000 : Code[20];CostCenterCode@1001 : Code[20];CostObjectCode@1004 : Code[20];PostingDate@1005 : Date) Amount : Decimal;
    VAR
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1003 : Record 1101;
    BEGIN
      FindCostJournalBatch(CostJournalBatch);

      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine."Posting Date" := PostingDate;
      CostJournalLine."Cost Type No." := CostTypeNo;
      CostJournalLine."Cost Center Code" := CostCenterCode;
      CostJournalLine."Cost Object Code" := CostObjectCode;
      CostJournalLine.MODIFY;
      Amount := CostJournalLine.Amount;

      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE SetFieldsOnCostBudgetByCostObjectPage@15(VAR CostBudgetByCostObjectPage@1000 : TestPage 1119;AmountTypeOption@1002 : Text[30];PeriodTypeOption@1001 : Text[30];CostBudgetName@1005 : Text[10]);
    BEGIN
      CostBudgetByCostObjectPage.AmountType.SETVALUE(AmountTypeOption);
      CostBudgetByCostObjectPage.PeriodType.SETVALUE(PeriodTypeOption);

      CostBudgetByCostObjectPage.BudgetFilter.SETVALUE(CostBudgetName);
    END;

    LOCAL PROCEDURE SetFieldsOnCostTypeBalanceBudgetPage@22(VAR CostTypeBalanceBudgetPage@1000 : TestPage 1120;AmountTypeOption@1002 : Text[30];PeriodTypeOption@1001 : Text[30];CostBudgetName@1005 : Text[10];CostCenterCode@1004 : Text[20];CostObjectCode@1003 : Text[20]);
    BEGIN
      CostTypeBalanceBudgetPage.AmountType.SETVALUE(AmountTypeOption);
      CostTypeBalanceBudgetPage.PeriodType.SETVALUE(PeriodTypeOption);

      CostTypeBalanceBudgetPage.BudgetFilter.SETVALUE(CostBudgetName);
      CostTypeBalanceBudgetPage.CostCenterFilter.SETVALUE(CostCenterCode);
      CostTypeBalanceBudgetPage.CostObjectFilter.SETVALUE(CostObjectCode);
    END;

    LOCAL PROCEDURE SetFieldsOnCostBudgetPerPeriodPage@30(VAR CostBudgetPerPeriodPage@1000 : TestPage 1117;AmountTypeOption@1002 : Text[30];PeriodTypeOption@1001 : Text[30];CostBudgetName@1003 : Text[10];CostCenterCode@1004 : Text[20];CostObjectCode@1005 : Text[20]);
    BEGIN
      CostBudgetPerPeriodPage.AmountType.SETVALUE(AmountTypeOption);
      CostBudgetPerPeriodPage.PeriodType.SETVALUE(PeriodTypeOption);

      CostBudgetPerPeriodPage.BudgetFilter.SETVALUE(CostBudgetName);
      CostBudgetPerPeriodPage.CostCenterFilter.SETVALUE(CostCenterCode);
      CostBudgetPerPeriodPage.CostObjectFilter.SETVALUE(CostObjectCode);
    END;

    LOCAL PROCEDURE SetCellValueOnCostBudgetPerPeriodPage@42(VAR CostBudgetPerPeriodPage@1001 : TestPage 1117;ColumnNo@1000 : Integer;Value@1002 : Decimal);
    BEGIN
      CASE ColumnNo OF
        1:
          CostBudgetPerPeriodPage.MatrixForm.Column1.SETVALUE(Value);
        2:
          CostBudgetPerPeriodPage.MatrixForm.Column2.SETVALUE(Value);
        3:
          CostBudgetPerPeriodPage.MatrixForm.Column3.SETVALUE(Value);
        4:
          CostBudgetPerPeriodPage.MatrixForm.Column4.SETVALUE(Value);
        5:
          CostBudgetPerPeriodPage.MatrixForm.Column5.SETVALUE(Value);
        6:
          CostBudgetPerPeriodPage.MatrixForm.Column6.SETVALUE(Value);
        7:
          CostBudgetPerPeriodPage.MatrixForm.Column7.SETVALUE(Value);
        8:
          CostBudgetPerPeriodPage.MatrixForm.Column8.SETVALUE(Value);
        9:
          CostBudgetPerPeriodPage.MatrixForm.Column9.SETVALUE(Value);
        10:
          CostBudgetPerPeriodPage.MatrixForm.Column10.SETVALUE(Value);
        11:
          CostBudgetPerPeriodPage.MatrixForm.Column11.SETVALUE(Value);
        12:
          CostBudgetPerPeriodPage.MatrixForm.Column12.SETVALUE(Value);
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE SetFieldsOnCostBudgetByCostCenterPage@52(VAR CostBudgetByCostCenterPage@1000 : TestPage 1118;AmountTypeOption@1002 : Text[30];PeriodTypeOption@1001 : Text[30];CostBudgetName@1003 : Text[10]);
    BEGIN
      CostBudgetByCostCenterPage.AmountType.SETVALUE(AmountTypeOption);
      CostBudgetByCostCenterPage.PeriodType.SETVALUE(PeriodTypeOption);
      CostBudgetByCostCenterPage.BudgetFilter.SETVALUE(CostBudgetName);
    END;

    LOCAL PROCEDURE SetFiltersOnCostBudgetPerPeriodPage@149(VAR CostBudgetPerPeriodPage@1000 : TestPage 1117;CostBudgetName@1001 : Code[10]);
    BEGIN
      CostBudgetPerPeriodPage.OPENEDIT;
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName,CostCenterFilter,
        CostObjectFilter);
      CostBudgetPerPeriodPage.MatrixForm.FILTER.SETFILTER("No.",CostTypeNo);
    END;

    LOCAL PROCEDURE SetCellValueOnCostBudgetByCostCenterPage@51(VAR CostBudgetByCostCenterPage@1001 : TestPage 1118;ColumnNo@1000 : Integer;Value@1002 : Decimal);
    BEGIN
      CASE ColumnNo OF
        1:
          CostBudgetByCostCenterPage.MatrixForm.Column1.SETVALUE(Value);
        2:
          CostBudgetByCostCenterPage.MatrixForm.Column2.SETVALUE(Value);
        3:
          CostBudgetByCostCenterPage.MatrixForm.Column3.SETVALUE(Value);
        4:
          CostBudgetByCostCenterPage.MatrixForm.Column4.SETVALUE(Value);
        5:
          CostBudgetByCostCenterPage.MatrixForm.Column5.SETVALUE(Value);
        6:
          CostBudgetByCostCenterPage.MatrixForm.Column6.SETVALUE(Value);
        7:
          CostBudgetByCostCenterPage.MatrixForm.Column7.SETVALUE(Value);
        8:
          CostBudgetByCostCenterPage.MatrixForm.Column8.SETVALUE(Value);
        9:
          CostBudgetByCostCenterPage.MatrixForm.Column9.SETVALUE(Value);
        10:
          CostBudgetByCostCenterPage.MatrixForm.Column10.SETVALUE(Value);
        11:
          CostBudgetByCostCenterPage.MatrixForm.Column11.SETVALUE(Value);
        12:
          CostBudgetByCostCenterPage.MatrixForm.Column12.SETVALUE(Value);
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE SetCellValueOnCostBudgetByCostObjectPage@53(VAR CostBudgetByCostObjectPage@1001 : TestPage 1119;ColumnNo@1000 : Integer;Value@1002 : Decimal);
    BEGIN
      CASE ColumnNo OF
        1:
          CostBudgetByCostObjectPage.MatrixForm.Column1.SETVALUE(Value);
        2:
          CostBudgetByCostObjectPage.MatrixForm.Column2.SETVALUE(Value);
        3:
          CostBudgetByCostObjectPage.MatrixForm.Column3.SETVALUE(Value);
        4:
          CostBudgetByCostObjectPage.MatrixForm.Column4.SETVALUE(Value);
        5:
          CostBudgetByCostObjectPage.MatrixForm.Column5.SETVALUE(Value);
        6:
          CostBudgetByCostObjectPage.MatrixForm.Column6.SETVALUE(Value);
        7:
          CostBudgetByCostObjectPage.MatrixForm.Column7.SETVALUE(Value);
        8:
          CostBudgetByCostObjectPage.MatrixForm.Column8.SETVALUE(Value);
        9:
          CostBudgetByCostObjectPage.MatrixForm.Column9.SETVALUE(Value);
        10:
          CostBudgetByCostObjectPage.MatrixForm.Column10.SETVALUE(Value);
        11:
          CostBudgetByCostObjectPage.MatrixForm.Column11.SETVALUE(Value);
        12:
          CostBudgetByCostObjectPage.MatrixForm.Column12.SETVALUE(Value);
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE SetValuesOnCostJournalPage@88(VAR CostJournalPage@1000 : TestPage 1108;CostJournalBatchName@1001 : Code[10];CostTypeNo@1002 : Code[20];BalCostTypeNo@1003 : Code[20]);
    BEGIN
      CostJournalPage.CostJnlBatchName.SETVALUE(CostJournalBatchName);
      CostJournalPage."Document No.".SETVALUE(LibraryRandom.RandInt(100));
      CostJournalPage."Cost Type No.".SETVALUE(CostTypeNo);
      CostJournalPage.Amount.SETVALUE(LibraryRandom.RandDec(100,2));
      CostJournalPage."Bal. Cost Type No.".SETVALUE(BalCostTypeNo);
    END;

    LOCAL PROCEDURE UpdateCostAllocationSource@159(VAR CostAllocationSource@1000 : Record 1106;CostTypeFilter@1001 : Code[30]);
    BEGIN
      CostAllocationSource.VALIDATE("Cost Type Range",CostTypeFilter);
      CostAllocationSource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCostBudgetEntry@105(VAR CostBudgetEntry@1000 : Record 1109;CostTypeNo@1003 : Code[20];CostCenterCode@1002 : Code[20];CostObjectCode@1001 : Code[20]);
    BEGIN
      CostBudgetEntry.VALIDATE("Cost Type No.",CostTypeNo);
      CostBudgetEntry.VALIDATE("Cost Center Code",CostCenterCode);
      CostBudgetEntry.VALIDATE("Cost Object Code",CostObjectCode);
      CostBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCostTypeBalanceFilters@118(VAR CostTypeBalance@1005 : TestPage 1110;CostCenterFilter@1000 : Code[20];CostObjectFilter@1001 : Code[20];PeriodType@1002 : Option;AmountType@1003 : Option;RoundingFactor@1004 : Option);
    BEGIN
      CostTypeBalance.CostCenterFilter.SETVALUE(CostCenterFilter);
      CostTypeBalance.CostObjectFilter.SETVALUE(CostObjectFilter);
      CostTypeBalance.PeriodType.SETVALUE(PeriodType);
      CostTypeBalance.AmountType.SETVALUE(AmountType);
      CostTypeBalance.RoundingFactor.SETVALUE(RoundingFactor);
    END;

    LOCAL PROCEDURE ValidateCostTypeBalanceAmountType@117(AmountType@1006 : Option);
    VAR
      BalCostType@1003 : Record 1103;
      CostType@1000 : Record 1103;
      CostTypeBalance@1004 : TestPage 1110;
      Amount@1005 : Decimal;
    BEGIN
      Initialize;

      // Setup
      CreateCostType(CostType);
      CreateCostType(BalCostType);
      Amount := PostAmountForCostType(CostType."No.",BalCostType."No.");

      // Exercise
      CostTypeBalance.OPENEDIT;
      CostTypeBalance.FILTER.SETFILTER("Date Filter",FORMAT(WORKDATE));
      UpdateCostTypeBalanceFilters(CostTypeBalance,'','',PeriodType::Day,AmountType,RoundingFactor::None);

      // Verify
      CostTypeBalance.MatrixForm.GOTORECORD(CostType);
      CostTypeBalance.MatrixForm.Column1.ASSERTEQUALS(Amount);

      // Cleanup
      CostTypeBalance.CLOSE;
    END;

    LOCAL PROCEDURE VerifyFiltersOnCostBudgetPerPeriodMatrixPage@44(CostBudgetPerPeriodPage@1001 : TestPage 1117;ExpectedDateFilter@1000 : Text);
    VAR
      ActualCostCenterFilter@1002 : Text;
      ActualCostObjectFilter@1003 : Text;
      ActualBudgetFilter@1004 : Text;
      ActualDateFilter@1005 : Text;
    BEGIN
      ActualDateFilter := CostBudgetPerPeriodPage.MatrixForm.FILTER.GETFILTER("Date Filter");
      ActualCostCenterFilter := CostBudgetPerPeriodPage.MatrixForm.FILTER.GETFILTER("Cost Center Filter");
      ActualCostObjectFilter := CostBudgetPerPeriodPage.MatrixForm.FILTER.GETFILTER("Cost Object Filter");
      ActualBudgetFilter := CostBudgetPerPeriodPage.MatrixForm.FILTER.GETFILTER("Budget Filter");

      Assert.AreEqual(ExpectedDateFilter,ActualDateFilter,DateFilterError);
      CostBudgetPerPeriodPage.CostCenterFilter.ASSERTEQUALS(ActualCostCenterFilter);
      CostBudgetPerPeriodPage.CostObjectFilter.ASSERTEQUALS(ActualCostObjectFilter);
      CostBudgetPerPeriodPage.BudgetFilter.ASSERTEQUALS(ActualBudgetFilter);
    END;

    LOCAL PROCEDURE VerifyFiltersOnCostBudgetByCostCenterMatrixPage@58(CostBudgetByCostCenterPage@1001 : TestPage 1118;ExpectedDateFilter@1000 : Text);
    VAR
      ActualBudgetFilter@1004 : Text;
      ActualDateFilter@1005 : Text;
    BEGIN
      ActualDateFilter := CostBudgetByCostCenterPage.MatrixForm.FILTER.GETFILTER("Date Filter");
      ActualBudgetFilter := CostBudgetByCostCenterPage.MatrixForm.FILTER.GETFILTER("Budget Filter");

      Assert.AreEqual(ExpectedDateFilter,ActualDateFilter,DateFilterError);
      CostBudgetByCostCenterPage.BudgetFilter.ASSERTEQUALS(ActualBudgetFilter);
    END;

    LOCAL PROCEDURE VerifyFiltersOnCostBudgetByCostObjectMatrixPage@59(CostBudgetByCostObjectPage@1001 : TestPage 1119;ExpectedDateFilter@1000 : Text);
    VAR
      ActualBudgetFilter@1004 : Text;
      ActualDateFilter@1005 : Text;
    BEGIN
      ActualDateFilter := CostBudgetByCostObjectPage.MatrixForm.FILTER.GETFILTER("Date Filter");
      ActualBudgetFilter := CostBudgetByCostObjectPage.MatrixForm.FILTER.GETFILTER("Budget Filter");

      Assert.AreEqual(ExpectedDateFilter,ActualDateFilter,DateFilterError);
      CostBudgetByCostObjectPage.BudgetFilter.ASSERTEQUALS(ActualBudgetFilter);
    END;

    LOCAL PROCEDURE VerifyCostBudgetEntry@62(ExpectedBudgetName@1000 : Text[10];ExpectedCostCenterCode@1001 : Text[20];ExpectedCostObjectCode@1006 : Text[20];ExpectedCostTypeNo@1004 : Code[20];ExpectedDate@1003 : Date;ExpectedAmount@1002 : Decimal);
    VAR
      CostBudgetEntry@1005 : Record 1109;
    BEGIN
      CostBudgetEntry.FINDLAST;

      CostBudgetEntry.TESTFIELD("Budget Name",ExpectedBudgetName);
      CostBudgetEntry.TESTFIELD("Cost Center Code",ExpectedCostCenterCode);
      CostBudgetEntry.TESTFIELD("Cost Object Code",ExpectedCostObjectCode);
      CostBudgetEntry.TESTFIELD("Cost Type No.",ExpectedCostTypeNo);
      CostBudgetEntry.TESTFIELD(Date,ExpectedDate);
      CostBudgetEntry.TESTFIELD(Amount,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyCostBudgetByCostObjectCaption@25(VAR CostBudgetByCostObject@1002 : TestPage 1119;ColumnNo@1000 : Integer;Caption@1001 : Text[20]);
    BEGIN
      CASE ColumnNo OF
        1:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column1.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        2:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column2.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        3:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column3.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        4:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column4.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        5:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column5.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        6:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column6.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        7:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column7.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        8:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column8.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        9:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column9.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        10:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column10.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        11:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column11.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        12:
          Assert.AreEqual(Caption,CostBudgetByCostObject.MatrixForm.Column12.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo))
        ELSE
          ERROR(InvalidColumnIndex)
      END
    END;

    LOCAL PROCEDURE VerifyCostBudgetByCostCenterCaption@87(VAR CostBudgetByCostCenter@1002 : TestPage 1118;ColumnNo@1000 : Integer;Caption@1001 : Text[20]);
    BEGIN
      CASE ColumnNo OF
        1:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column1.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        2:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column2.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        3:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column3.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        4:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column4.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        5:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column5.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        6:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column6.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        7:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column7.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        8:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column8.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        9:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column9.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        10:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column10.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        11:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column11.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo));
        12:
          Assert.AreEqual(Caption,CostBudgetByCostCenter.MatrixForm.Column12.CAPTION,STRSUBSTNO(WrongCaptionError,ColumnNo))
        ELSE
          ERROR(InvalidColumnIndex)
      END
    END;

    LOCAL PROCEDURE VerifyCostBudgetPerPeriodMatrixPage@163(VAR CostBudgetPerPeriodPage@1000 : TestPage 1117;CostBudgetName@1002 : Code[10];CostBudgetEntry@1001 : Record 1109;Amount@1005 : Text);
    VAR
      CostType@1007 : Record 1103;
      PeriodType@1004 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1003 : 'Net Change,Balance at Date';
      CostBudgetAmount@1006 : Text;
    BEGIN
      SetFieldsOnCostBudgetPerPeriodPage(
        CostBudgetPerPeriodPage,FORMAT(AmountType::"Net Change"),FORMAT(PeriodType::Day),CostBudgetName,
        CostBudgetEntry."Cost Center Code",'');
      CostBudgetAmount := GetColumnAmountOnCostBudgetPerPeriodChange(CostBudgetPerPeriodPage,CostBudgetEntry."Cost Type No.");
      Assert.AreEqual(Amount,CostBudgetAmount,
        STRSUBSTNO(
          CostBudgetAmountError,CostType.TABLECAPTION,CostBudgetEntry."Cost Type No.",
          CostBudgetPerPeriodPage.MatrixForm.Column1.CAPTION,CostBudgetEntry.TABLECAPTION,CostBudgetEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyCostJournalLineWithoutBalCostType@98(CostJournalPage@1000 : TestPage 1108);
    VAR
      CostType@1001 : Record 1103;
    BEGIN
      CostType.GET(CostJournalPage."Cost Type No.");
      CostJournalPage.NEXT;
      CostJournalPage.PREVIOUS;
      Assert.AreEqual(
        WORKDATE,CostJournalPage."Posting Date".ASDATE,STRSUBSTNO(PostingDateError,CostJournalPage."Posting Date".CAPTION));
      Assert.AreEqual(
        CostJournalPage.Balance.VALUE,CostJournalPage.Amount.VALUE,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.Balance.CAPTION));
      Assert.AreEqual(
        CostJournalPage.TotalBalance.VALUE,CostJournalPage.Amount.VALUE,
        STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.TotalBalance.CAPTION));
      Assert.AreEqual(
        CostJournalPage.CostTypeName.VALUE,CostType.Name,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.CostTypeName.CAPTION));
    END;

    LOCAL PROCEDURE VerifyCostJournalLineWithBalCostType@104(CostJournalPage@1000 : TestPage 1108);
    VAR
      CostType@1001 : Record 1103;
    BEGIN
      CostType.GET(CostJournalPage."Cost Type No.");
      CostJournalPage.NEXT;
      CostJournalPage.PREVIOUS;
      Assert.AreEqual(
        WORKDATE,CostJournalPage."Posting Date".ASDATE,STRSUBSTNO(PostingDateError,CostJournalPage."Posting Date".CAPTION));
      Assert.AreEqual(CostJournalPage.Balance.ASDECIMAL,0,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.Balance.CAPTION));
      Assert.AreEqual(
        CostJournalPage.TotalBalance.ASDECIMAL,0,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.TotalBalance.CAPTION));
      Assert.AreEqual(
        CostJournalPage.CostTypeName.VALUE,CostType.Name,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.CostTypeName.CAPTION));
      Assert.AreEqual(
        CostJournalPage.BalCostTypeName.VALUE,CostType.Name,STRSUBSTNO(ExpectedValueDifferent,CostJournalPage.BalCostTypeName.CAPTION));
    END;

    LOCAL PROCEDURE CheckCreateCostObjects@41();
    VAR
      CostObject@1000 : Record 1113;
      i@1001 : Integer;
    BEGIN
      CostObject.SETRANGE("Line Type",CostObject."Line Type"::"Cost Object");
      FOR i := CostObject.COUNT TO 24 DO
        LibraryCostAccounting.CreateCostObject(CostObject);
    END;

    LOCAL PROCEDURE CheckCreateCostCenters@95();
    VAR
      CostCenter@1000 : Record 1112;
      i@1001 : Integer;
    BEGIN
      CostCenter.SETRANGE("Line Type",CostCenter."Line Type"::"Cost Center");
      FOR i := CostCenter.COUNT TO 24 DO
        LibraryCostAccounting.CreateCostCenter(CostCenter);
    END;

    LOCAL PROCEDURE VerifyCostBudgetByCostObjectCaptionOffset@57(VAR CostBudgetByCostObjectPage@1001 : TestPage 1119;Offset@1002 : Integer;VAR CostObject@1000 : Record 1113);
    BEGIN
      // verify that the current set is the next one (check just 1 column)
      CostObject.SETCURRENTKEY("Sorting Order");
      CostObject.SETRANGE("Line Type",CostObject."Line Type"::"Cost Object");
      CostObject.FINDSET;
      CostObject.NEXT(Offset);
      COMMIT;
      ASSERTERROR BEGIN
        VerifyCostBudgetByCostObjectCaption(CostBudgetByCostObjectPage,1,CostObject.Code);
        ERROR('')
      END;
      IF GETLASTERRORTEXT <> '' THEN
        ERROR(NextSetNotAvailableError);
    END;

    LOCAL PROCEDURE VerifyCostBudgetByCostCenterCaptionOffset@94(VAR CostBudgetByCostCenterPage@1001 : TestPage 1118;Offset@1002 : Integer;VAR CostCenter@1000 : Record 1112);
    BEGIN
      // verify that the current set is the next one (check just 1 column)
      CostCenter.SETCURRENTKEY("Sorting Order");
      CostCenter.SETRANGE("Line Type",CostCenter."Line Type"::"Cost Center");
      CostCenter.FINDSET;
      CostCenter.NEXT(Offset);
      COMMIT;
      ASSERTERROR BEGIN
        VerifyCostBudgetByCostCenterCaption(CostBudgetByCostCenterPage,1,CostCenter.Code);
        ERROR('')
      END;
      IF GETLASTERRORTEXT <> '' THEN
        ERROR(NextSetNotAvailableError);
    END;

    LOCAL PROCEDURE VerifyFiltersOnCostTypeBalanceByViewMatrixPage@132(CostTypeBalancePage@1005 : TestPage 1110;Period@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period';Date@1000 : Date;Counter@1001 : Integer);
    VAR
      ColumnDate@1003 : Text[30];
      ColumnCaption@1004 : Text[30];
    BEGIN
      ColumnDate := CreatePeriodFormat(Period,Date);
      ColumnCaption := GetColumnCaptionOnCostTypeBalancePage(CostTypeBalancePage,Counter);
      Assert.AreEqual(ColumnDate,ColumnCaption,InvalidColumnCaptionError);
    END;

    LOCAL PROCEDURE CreatePeriodFormat@131(PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period';Date@1001 : Date) : Text[30];
    BEGIN
      CASE PeriodType OF
        PeriodType::Day:
          EXIT(FORMAT(Date));
        PeriodType::Week:
          BEGIN
            IF DATE2DWY(Date,2) = 1 THEN
              Date := Date + 7 - DATE2DWY(Date,1);
            EXIT(FORMAT(Date,0,'<Week>.<Year4>'));
          END;
        PeriodType::Month:
          EXIT(FORMAT(Date,0,'<Month Text,3> <Year4>'));
        PeriodType::Quarter:
          EXIT(FORMAT(Date,0,'<Quarter>/<Year4>'));
        PeriodType::Year:
          EXIT(FORMAT(Date,0,'<Year4>'));
        PeriodType::"Accounting Period":
          EXIT(FORMAT(Date));
      END;
    END;

    LOCAL PROCEDURE GetCellValueOnCostTypeBalancePage@139(VAR CostTypeBalancePage@1001 : TestPage 1110;ColumnNo@1000 : Integer) Value : Text[30];
    BEGIN
      CASE ColumnNo OF
        1:
          Value := CostTypeBalancePage.MatrixForm.Column1.VALUE;
        2:
          Value := CostTypeBalancePage.MatrixForm.Column2.VALUE;
        3:
          Value := CostTypeBalancePage.MatrixForm.Column3.VALUE;
        4:
          Value := CostTypeBalancePage.MatrixForm.Column4.VALUE;
        5:
          Value := CostTypeBalancePage.MatrixForm.Column5.VALUE;
        6:
          Value := CostTypeBalancePage.MatrixForm.Column6.VALUE;
        7:
          Value := CostTypeBalancePage.MatrixForm.Column7.VALUE;
        8:
          Value := CostTypeBalancePage.MatrixForm.Column8.VALUE;
        9:
          Value := CostTypeBalancePage.MatrixForm.Column9.VALUE;
        10:
          Value := CostTypeBalancePage.MatrixForm.Column10.VALUE;
        11:
          Value := CostTypeBalancePage.MatrixForm.Column11.VALUE;
        12:
          Value := CostTypeBalancePage.MatrixForm.Column12.VALUE;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnAmountOnCostTypeBalancePage@130(CostTypeBalancePage@1000 : TestPage 1110;CostTypeNo@1001 : Code[30];NewColoumnNo@1003 : Integer) Value : Text[30];
    BEGIN
      CostTypeBalancePage.MatrixForm.FILTER.SETFILTER("No.",CostTypeNo);
      Value := GetCellValueOnCostTypeBalancePage(CostTypeBalancePage,NewColoumnNo + 1);
    END;

    LOCAL PROCEDURE GetColumnCaptionOnCostTypeBalancePage@129(VAR CostTypeBalancePage@1000 : TestPage 1110;ColumnNo@1001 : Integer) Caption : Text[30];
    BEGIN
      CASE ColumnNo OF
        1:
          Caption := CostTypeBalancePage.MatrixForm.Column1.CAPTION;
        2:
          Caption := CostTypeBalancePage.MatrixForm.Column2.CAPTION;
        3:
          Caption := CostTypeBalancePage.MatrixForm.Column3.CAPTION;
        4:
          Caption := CostTypeBalancePage.MatrixForm.Column4.CAPTION;
        5:
          Caption := CostTypeBalancePage.MatrixForm.Column5.CAPTION;
        6:
          Caption := CostTypeBalancePage.MatrixForm.Column6.CAPTION;
        7:
          Caption := CostTypeBalancePage.MatrixForm.Column7.CAPTION;
        8:
          Caption := CostTypeBalancePage.MatrixForm.Column8.CAPTION;
        9:
          Caption := CostTypeBalancePage.MatrixForm.Column9.CAPTION;
        10:
          Caption := CostTypeBalancePage.MatrixForm.Column10.CAPTION;
        11:
          Caption := CostTypeBalancePage.MatrixForm.Column11.CAPTION;
        12:
          Caption := CostTypeBalancePage.MatrixForm.Column12.CAPTION;
        ELSE
          ERROR(InvalidColumnIndex)
      END;
    END;

    LOCAL PROCEDURE GetColumnDatesOnCostTypeBalancePage@128(CostTypeBalancePage@1000 : TestPage 1110;VAR DateBeforeInvokingAction@1004 : Date;VAR DateAfterInvokingAction@1003 : Date;ActionItem@1006 : 'Previous Set,Previous Column,Next Column,Next Set');
    VAR
      ColumnNo@1005 : Integer;
    BEGIN
      ColumnNo := LibraryRandom.RandInt(12); // Pick a random column for the matrix page.
      EVALUATE(DateBeforeInvokingAction,GetColumnCaptionOnCostTypeBalancePage(CostTypeBalancePage,ColumnNo));
      InvokeActionOnCostTypeBalancePage(CostTypeBalancePage,ActionItem);
      EVALUATE(DateAfterInvokingAction,GetColumnCaptionOnCostTypeBalancePage(CostTypeBalancePage,ColumnNo));
    END;

    LOCAL PROCEDURE GetGlobalDimensionCodeValue@158(DimNo@1002 : Integer) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(DimNo));
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE GetBusinessUnitFilterValue@170() : Code[10];
    VAR
      BusinessUnit@1000 : Record 220;
    BEGIN
      LibraryERM.CreateBusinessUnit(BusinessUnit);
      EXIT(BusinessUnit.Code);
    END;

    LOCAL PROCEDURE GetBudgetFilterValue@152() : Code[10];
    VAR
      GLBudgetName@1000 : Record 95;
    BEGIN
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      EXIT(GLBudgetName.Name);
    END;

    LOCAL PROCEDURE InvokeActionOnCostTypeBalancePage@127(VAR CostTypeBalancePage@1001 : TestPage 1110;ActionItem@1000 : 'Previous Set,Previous Column,Next Column,Next Set');
    BEGIN
      CASE ActionItem OF
        ActionItem::"Previous Set":
          CostTypeBalancePage.PreviousSet.INVOKE;
        ActionItem::"Previous Column":
          CostTypeBalancePage.PreviousColumn.INVOKE;
        ActionItem::"Next Column":
          CostTypeBalancePage.NextColumn.INVOKE;
        ActionItem::"Next Set":
          CostTypeBalancePage.NextSet.INVOKE;
      END;
    END;

    LOCAL PROCEDURE SetFieldsOnCostTypeBalancePage@126(VAR CostTypeBalancePage@1000 : TestPage 1110;PeriodTypeOption@1001 : Text[30];AmountTypeOption@1002 : Text[30];CostCenterCode@1004 : Code[20];CostObjectCode@1003 : Code[20]);
    BEGIN
      CostTypeBalancePage.AmountType.SETVALUE(AmountTypeOption);
      CostTypeBalancePage.PeriodType.SETVALUE(PeriodTypeOption);
      CostTypeBalancePage.CostCenterFilter.SETVALUE(CostCenterCode);
      CostTypeBalancePage.CostObjectFilter.SETVALUE(CostObjectCode);
    END;

    LOCAL PROCEDURE UpdateCostType@153(VAR CostType@1000 : Record 1103;Type@1001 : 'Cost Type,Heading,Total,Begin-Total,End-Total';GLAccountNo2@1002 : Code[20]);
    BEGIN
      CostType.VALIDATE(Type,Type);
      CostType.VALIDATE("G/L Account Range",GLAccountNo2);
      CostType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyCostCenters@155(VAR FromCostCenter@1000 : Record 1112;VAR ToCostCenter@1001 : Record 1112);
    BEGIN
      ToCostCenter.DELETEALL;
      IF FromCostCenter.FINDSET THEN
        REPEAT
          ToCostCenter.INIT;
          ToCostCenter := FromCostCenter;
          ToCostCenter.INSERT;
        UNTIL FromCostCenter.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyCostObjects@164(VAR FromCostObject@1000 : Record 1113;VAR ToCostObject@1001 : Record 1113);
    BEGIN
      ToCostObject.DELETEALL;
      IF FromCostObject.FINDSET THEN
        REPEAT
          ToCostObject.INIT;
          ToCostObject := FromCostObject;
          ToCostObject.INSERT;
        UNTIL FromCostObject.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@8(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerChartOfCostCenters@31(VAR ChartOfCostCenters@1000 : TestPage 1122);
    BEGIN
      ChartOfCostCenters.FILTER.SETFILTER(Code,CostCenterFilter);
      ChartOfCostCenters.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerChartOfCostObjects@33(VAR ChartOfCostObjects@1000 : TestPage 1123);
    BEGIN
      ChartOfCostObjects.FILTER.SETFILTER(Code,CostObjectFilter);
      ChartOfCostObjects.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CostJournalBatchPageHandler@96(VAR CostJournalBatches@1000 : TestPage 1135);
    BEGIN
      CostJournalBatches.FILTER.SETFILTER(Name,CostJournalBatchName);
      CostJournalBatches.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@125(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@124(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerChartOfCostAccountOk@123(VAR ChartOfAccounts@1000 : TestPage 16);
    BEGIN
      GLAccountNo := ChartOfAccounts."No.".VALUE;
      ChartOfAccounts.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerChartOfCostAccountCancel@110(VAR ChartOfAccounts@1000 : TestPage 16);
    BEGIN
      GLAccountNo := ChartOfAccounts."No.".VALUE;
      ChartOfAccounts.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerCostBudgetEntries@148(VAR CostBudgetEntries@1000 : TestPage 1115);
    BEGIN
      CASE ActionFilter OF
        ActionFilter::SetValue:
          CostBudgetEntries.Amount.SETVALUE(LibraryRandom.RandDec(100,2));
        ActionFilter::Verify:
          BEGIN
            CostBudgetEntries."Last Modified By User".ASSERTEQUALS(UPPERCASE(USERID));
            CostBudgetEntries.Date.ASSERTEQUALS(WORKDATE);
            CostBudgetEntries."Cost Type No.".ASSERTEQUALS(CostTypeNo);
            CostBudgetEntries."Cost Center Code".ASSERTEQUALS(CostCenterFilter);
            CostBudgetEntries."Cost Object Code".ASSERTEQUALS(CostObjectFilter);
            CostBudgetEntries."Entry No.".ASSERTEQUALS(EntryNo);
          END;
      END;
      CostBudgetEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting] [UI]
      Unsupported version tags:
      SE: Unable to Execute

      Deliverable : 267731
      Deliverable : 267733
      Deliverable : 272180 (tasks : 272806, 272807, 272809, 272810, 272811)
      Deliverable : 275019 (task 272808)

      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      TestCostBudgetPerPeriodPageValidateCostCenter,TestCostBudgetPerPeriodPageValidateCostObject,        272804
      TestCostBudgetPerPeriodNextSetAction,TestCostBudgetPerPeriodPreviousSetAction,
      TestCostBudgetPerPeriodPreviousColumnAction,TestCostBudgetPerPeriodNextColumnAction
      TestCostJournalBatchNameError,                                                                      272802
      TestCostJournalBatchNameField,TestCostJournalBatchNameLookupField
      TestCostJournalValidateOnNewRecordWithoutBalCostType,
      TestCostJournalValidateOnNewRecordWithBalCostType
      TestCostTypeBalanceValidateCostCenter,                                                              272803
      TestCostTypeBalanceValidateCostObject,
      TestCostTypeBalanceValidateViewWeek,
      TestCostTypeBalanceValidateViewMonth,
      TestCostTypeBalanceValidateViewYear,
      TestCostTypeBalanceNextColumnAction,
      TestCostTypeBalanceNextSetAction,
      TestCostTypeBalancePreviousSetAction,
      TestCostTypeBalancePreviousColumnAction,
      TestChartOfCostTypeCorrespondingGLAccountActionOnCostTypeGLRange,                                   270024
      TestChartOfCostTypeCorrespondingGLAccountActionOnCostTypeNoGLRange,
      TestChartOfCostTypeGetCostTypesFromChartOfAccountsAction.
      TestCostBudgetEntryValidateOnNewRecordForCostCenterCode,                                            270028
      TestCostBudgetEntryValidateOnInsertRecordForCostObjectCode
      TestChartOfCostTypeRegisterCostTypesInChartOfAccounts,
      TestCostAllocationTargetValidateCostAllocationTargetAction.

      Covers Test Cases for WI - 243045
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      TestCorrespondingCostTypesForAllocation                                                             257404
      TestCostBudgetPerPeriodPageValidateBudgetFilter                                                     257424
      TestCostBudgetPerCostCenterMatrixShowsCostCenter,                                                   238880
      TestCostBudgetPerCostObjectMatrixShowsCostObject
      TestChartOfAccountFlowFiltersOnActionGLBalance,                                                     100905
      TestChartOfAccountFlowFiltersOnActionGLBalanceBudget
    }
    END.
  }
}

