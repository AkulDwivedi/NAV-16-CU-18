OBJECT Codeunit 137008 SCM Planning Options
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryPlanning@1004 : Codeunit 132203;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1006 : Codeunit 130509;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryRandom@1008 : Codeunit 130440;
      Initialized@1003 : Boolean;
      WrongFieldValueErr@1007 : TextConst '@@@=Direct Unit Cost is incorrect in Requisition Line;ENU=%1 is incorrect in %2';

    [Test]
    PROCEDURE RecheduleOutCase1@1();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1003 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Rescheduling Period",'<5D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));

      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,0D,
        PurchaseLine."Expected Receipt Date",PurchaseLine.Quantity,0,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,0D,
        SalesLine."Shipment Date",0,PurchaseLine.Quantity,1,FALSE);
    END;

    [Test]
    PROCEDURE RecheduleOutCase2@2();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1001 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Rescheduling Period",'<6D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));

      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Reschedule,
        PurchaseLine."Expected Receipt Date",SalesLine."Shipment Date",
        0,PurchaseLine.Quantity,1,FALSE);
    END;

    [Test]
    PROCEDURE RecheduleInCase1@7();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1003 : Record 39;
      SalesLine@1005 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Rescheduling Period",'<5D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));

      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,0D,
        PurchaseLine."Expected Receipt Date",PurchaseLine.Quantity,0,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,0D,
        SalesLine."Shipment Date",0,PurchaseLine.Quantity,1,FALSE);
    END;

    [Test]
    PROCEDURE RecheduleInCase2@4();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1001 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Rescheduling Period",'<6D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Reschedule,
        PurchaseLine."Expected Receipt Date",SalesLine."Shipment Date",
        0,PurchaseLine.Quantity,1,FALSE);
    END;

    [Test]
    PROCEDURE DampenerPeriodCase1@9();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1003 : Record 39;
      SalesLine@1002 : Record 37;
      RequisitionLine@1008 : Record 246;
      MfgSetup@1009 : Record 99000765;
    BEGIN
      Initialize;

      MfgSetup.GET;
      EVALUATE(MfgSetup."Default Dampener Period",'<5D>');
      MfgSetup.MODIFY;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      // Ensure that Dampener Period is taken from Mfg.Setup due to the defaulting rules
      EVALUATE(Item."Dampener Period",'');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      EVALUATE(Item."Lot Accumulation Period",'<10D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));

      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,0D,
        PurchaseLine."Expected Receipt Date",PurchaseLine.Quantity,0,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,0D,
        SalesLine."Shipment Date",0,SalesLine.Quantity,1,FALSE);
    END;

    [Test]
    PROCEDURE DampenerPeriodCase2@8();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1001 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Dampener Period",'<6D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      EVALUATE(Item."Lot Accumulation Period",'<10D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::" ",
        0D,0D,
        0,0,0,TRUE);
    END;

    [Test]
    PROCEDURE LotAccumulationCase1@10();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1010 : Record 39;
      SalesLine@1009 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Lot Accumulation Period",'<5D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",4,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+5D>',WORKDATE));
      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::"Change Qty.",
        0D,PurchaseLine."Expected Receipt Date",
        4,3,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,
        0D,SalesLine."Shipment Date",
        0,7,1,FALSE);
    END;

    [Test]
    PROCEDURE LotAccumulationCase2@11();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1010 : Record 39;
      SalesLine@1009 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Lot Accumulation Period",'<6D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",4,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+5D>',WORKDATE));
      CreateSalesOrder(SalesLine,Item."No.",7,CALCDATE('<+11D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::"Change Qty.",
        0D,PurchaseLine."Expected Receipt Date",
        4,10,1,FALSE);
    END;

    [Test]
    PROCEDURE TimeBucket@16();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1010 : Record 39;
      SalesLine@1009 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item."Reorder Point" := 4;
      Item."Reorder Quantity" := 7;
      EVALUATE(Item."Lead Time Calculation",'<2D>');
      EVALUATE(Item."Time Bucket",'<8D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+0D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+4D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));

      // verify planning worksheet line
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,
        0D,CALCDATE('<12D>',WORKDATE),
        0,7,1,FALSE);
    END;

    [Test]
    PROCEDURE OverflowCase1@21();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1010 : Record 39;
      SalesLine@1009 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item."Reorder Point" := 4;
      Item."Reorder Quantity" := 7;
      Item."Overflow Level" := 12;
      EVALUATE(Item."Lead Time Calculation",'<2D>');
      EVALUATE(Item."Time Bucket",'<8D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+0D>',WORKDATE));
      CreatePurchaseOrder(PurchaseLine,Item."No.",3,CALCDATE('<+17D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+4D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+18D>',WORKDATE));

      // verify planning worksheet line
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,
        0D,CALCDATE('<12D>',WORKDATE),
        0,7,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::"Change Qty.",
        0D,PurchaseLine."Expected Receipt Date",
        3,1,1,FALSE);
    END;

    [Test]
    PROCEDURE OverflowCase2@23();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1003 : Record 39;
      SalesLine@1002 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item."Reorder Point" := 4;
      Item."Reorder Quantity" := 7;
      Item."Overflow Level" := 0;
      EVALUATE(Item."Lead Time Calculation",'<2D>');
      EVALUATE(Item."Time Bucket",'<8D>');
      EVALUATE(Item."Safety Lead Time",'<0D>');
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+0D>',WORKDATE));
      CreatePurchaseOrder(PurchaseLine,Item."No.",3,CALCDATE('<+17D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+4D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+18D>',WORKDATE));

      // verify planning worksheet line
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::New,
        0D,CALCDATE('<12D>',WORKDATE),
        0,7,1,FALSE);
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,
        0D,PurchaseLine."Expected Receipt Date",
        3,0,1,FALSE);
    END;

    [Test]
    PROCEDURE DampenerQtyCase1@27();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1001 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      Initialize;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item."Dampener Quantity" := 4;
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+5D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(RequisitionLine,RequisitionLine."Action Message"::" ",
        0D,0D,
        0,0,0,TRUE);
    END;

    [Test]
    PROCEDURE DampenerQtyCase2@28();
    VAR
      Item@1008 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1001 : Record 37;
      RequisitionLine@1000 : Record 246;
      MfgSetup@1009 : Record 99000765;
    BEGIN
      Initialize;

      MfgSetup.GET;
      MfgSetup."Default Dampener Quantity" := 10;
      MfgSetup.MODIFY;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item."Dampener Quantity" := 0;
      Item."Lot Size" := 40;
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseLine,Item."No.",7,CALCDATE('<+5D>',WORKDATE));

      CreateSalesOrder(SalesLine,Item."No.",3,CALCDATE('<+5D>',WORKDATE));

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<+2D>',WORKDATE),CALCDATE('<+16D>',WORKDATE));
      // verify planning worksheet lines
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(
        RequisitionLine,RequisitionLine."Action Message"::" ",
        0D,0D,
        0,0,0,TRUE);
    END;

    [Test]
    PROCEDURE B298909@199();
    VAR
      Item@1005 : Record 27;
      PurchaseLine@1010 : Record 39;
      SalesLine@1011 : Record 37;
      RequisitionLine@1008 : Record 246;
      ReschedulingPeriod@1006 : DateFormula;
      LotAccumulationPeriod@1007 : DateFormula;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
    BEGIN
      Initialize;
      EVALUATE(LotAccumulationPeriod,'<1W>');
      EVALUATE(ReschedulingPeriod,'<1M>');

      LibraryInventory.CreateItem(Item);
      Item."Replenishment System" := Item."Replenishment System"::Purchase;
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Rescheduling Period",ReschedulingPeriod);
      Item.VALIDATE("Lot Accumulation Period",LotAccumulationPeriod);
      Item.MODIFY(TRUE);

      DemandQuantityValue[1] := 100;
      DemandDateValue[1] := CALCDATE(ReschedulingPeriod,WORKDATE);
      CreateSalesOrder(SalesLine,Item."No.",DemandQuantityValue[1],DemandDateValue[1]);

      DemandQuantityValue[2] := 100;
      DemandDateValue[2] := CALCDATE(ReschedulingPeriod,DemandDateValue[1]);
      CreateSalesOrder(SalesLine,Item."No.",DemandQuantityValue[2],DemandDateValue[2]);

      SupplyQuantityValue[1] := DemandQuantityValue[1] + DemandQuantityValue[2];
      SupplyDateValue[1] := DemandDateValue[1];
      CreatePurchaseOrder(PurchaseLine,Item."No.",SupplyQuantityValue[1],SupplyDateValue[1]);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<365D>',WORKDATE));

      // verify planning worksheet line
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      AssertPlanningLine(
        RequisitionLine,RequisitionLine."Action Message"::"Change Qty.",
        0D,SupplyDateValue[1],
        SupplyQuantityValue[1],DemandQuantityValue[1],1,FALSE);
      AssertPlanningLine(
        RequisitionLine,RequisitionLine."Action Message"::New,
        0D,CALCDATE(ReschedulingPeriod,SupplyDateValue[1]),
        0,DemandQuantityValue[2],1,FALSE);
    END;

    [Test]
    PROCEDURE NoSeriesSetup@14();
    VAR
      PurchPayablesSetup@1001 : Record 312;
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchPayablesSetup.GET;
      PurchPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchPayablesSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE RequisitionLineValidateDueDateUpdatesUnicCost@3();
    VAR
      Item@1000 : Record 27;
      Vendor@1002 : Record 23;
      RequisitionLine@1003 : Record 246;
      UnitCost@1001 : Decimal;
    BEGIN
      // [FEATURE] [Requisition Plan] [Item Purchase Price]
      // [SCENARIO 364400] Chainging "Due Date" in the Requisition Line updates Unit Cost

      // [GIVEN] Item replenished via purchase order
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);

      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Reorder Quantity",100);
      Item.MODIFY(TRUE);

      // [GIVEN] Item Purchase Price: Starting Date = WORKDATE - 1, Ending Date = WORKDATE, Unit Cost = "X"
      UnitCost := LibraryRandom.RandDec(100,2);
      CreateItemPurchasePrice(Item."No.",Vendor."No.",CALCDATE('<-1D>',WORKDATE),WORKDATE,UnitCost);
      // [GIVEN] Item Purchase Price: Starting Date = WORKDATE + 1, Ending Date = WORKDATE + 2, Unit Cost = 2 * "X"
      UnitCost := UnitCost * LibraryRandom.RandIntInRange(2,5);
      CreateItemPurchasePrice(Item."No.",Vendor."No.",CALCDATE('<1D>',WORKDATE),CALCDATE('<2D>',WORKDATE),UnitCost);

      // [GIVEN] Calculate regenerative plan on WORKDATE
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // [WHEN] Update "Due Date" on requisiton line, set new value = WORKDATE + 2
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.SetCurrFieldNo(RequisitionLine.FIELDNO("Due Date"));
      RequisitionLine.VALIDATE("Due Date",CALCDATE('<2D>',WORKDATE));

      // [THEN] "Direct Unit Cost" on requisition line = 2 * "X"
      WITH RequisitionLine DO
        Assert.AreEqual(UnitCost,"Direct Unit Cost",STRSUBSTNO(WrongFieldValueErr,FIELDCAPTION("Direct Unit Cost"),TABLECAPTION));
    END;

    [Test]
    PROCEDURE NetChangePlanForSKUItemHasNoPlanningParameters@6();
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      SKU@1001 : Record 5700;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // [FEATURE] [Net Change Plan] [Stockkeeping Unit]
      // [SCENARIO 220546] Net change planning should plan a stockkeping unit that has planning parameters configured, and the item is not set up for planning

      Initialize;

      // [GIVEN] Item "I" without planning parameters (Reordering Policy is blank)
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Stockkeeping unit for item "I", "Reordering Policy" = "Lot-for-Lot"
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,Location.Code,Item."No.",'');
      SKU.VALIDATE("Reordering Policy",SKU."Reordering Policy"::"Lot-for-Lot");
      SKU.MODIFY(TRUE);

      // [GIVEN] Calculate net change plan
      // This step is required to deactivate the planning assignment entry. It is created with Inactive = FALSE when a new stockkeping unit is inserted.
      // Planning worksheet will not plan anything, since there is no demand, but it will update "Inactive" to TRUE.
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [GIVEN] Create sales order for "X" pcs item "I" as demand for planning
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLineOnLocation(SalesLine,SalesHeader,Item."No.",LibraryRandom.RandInt(10),Location.Code);

      // [WHEN] Calculate net change plan
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [THEN] Replenishment of "X" pcs of item "I" is suggested
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE NetChangeDoesNotPlanForSKUWithoutPlanningParameters@18();
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      SKU@1001 : Record 5700;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // [FEATURE] [Net Change Plan] [Stockkeeping Unit]
      // [SCENARIO 220546] Net change planning should not plan a stockkeping unit that has no planning parameters configured when the item is set up for planning

      Initialize;

      // [GIVEN] Item "I" with planning parameters ("Reordering Policy" = "Lot-for-Lot")
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);

      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Stockkeeping unit for item "I" with blank reordering policy
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,Location.Code,Item."No.",'');
      SKU.VALIDATE("Reordering Policy",SKU."Reordering Policy"::" ");
      SKU.MODIFY(TRUE);

      // [GIVEN] Calculate net change plan
      // This step is required to deactivate the planning assignment entry. It is created with Inactive = FALSE when a new stockkeping unit is inserted.
      // Planning worksheet will not plan anything, since there is no demand, but it will update "Inactive" to TRUE.
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [GIVEN] Create a sales order for "X" pcs of item "I"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLineOnLocation(SalesLine,SalesHeader,Item."No.",LibraryRandom.RandInt(10),Location.Code);

      // [WHEN] Calculate net change plan
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [THEN] No replenishment is suggested
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      Assert.RecordIsEmpty(RequisitionLine);
    END;

    [Test]
    PROCEDURE NetChangePlanReplansSalesOrderForSKUUpdatedAfterFirstPlanning@24();
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      SKU@1001 : Record 5700;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // [FEATURE] [Net Change Plan] [Stockkeeping Unit]
      // [SCENARIO 220546] Net change planning should suggest replenishment when demand for the stockkeeping unit is changed after planning

      Initialize;

      // [GIVEN] Item "I" without planning parameters (Reordering Policy is blank)
      LibraryInventory.CreateItem(Item);

      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Stockkeeping unit for item "I", "Reordering Policy" = "Lot-for-Lot"
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,Location.Code,Item."No.",'');
      SKU.VALIDATE("Reordering Policy",SKU."Reordering Policy"::"Lot-for-Lot");
      SKU.MODIFY(TRUE);

      // [GIVEN] Create a sales order for "X" pcs item "I" as demand for planning
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLineOnLocation(SalesLine,SalesHeader,Item."No.",LibraryRandom.RandInt(10),Location.Code);

      // [GIVEN] Calculate net change plan
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [GIVEN] Create another line in the sales order with "Y" pcs of item "I"
      CreateSalesLineOnLocation(SalesLine,SalesHeader,Item."No.",LibraryRandom.RandInt(10),Location.Code);

      // [WHEN] Calculate net change plan
      CalcNetChangePlanForPlanWksh(Item."No.");

      // [THEN] Suggested quantity for replenishment is "X" + "Y"
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;

      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",Item."No.");
      SalesLine.CALCSUMS(Quantity);
      RequisitionLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE Initialize@15();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;

      COMMIT;

      Initialized := TRUE;
    END;

    LOCAL PROCEDURE CalcNetChangePlanForPlanWksh@31(ItemNo@1001 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,WORKDATE,TRUE);
    END;

    LOCAL PROCEDURE CreateItemPurchasePrice@35(ItemNo@1000 : Code[20];VendorNo@1001 : Code[20];StartingDate@1002 : Date;EndingDate@1003 : Date;UnitCost@1004 : Decimal);
    VAR
      PurchPrice@1005 : Record 7012;
    BEGIN
      WITH PurchPrice DO BEGIN
        INIT;
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Vendor No.",VendorNo);
        VALIDATE("Starting Date",StartingDate);
        VALIDATE("Ending Date",EndingDate);
        VALIDATE("Direct Unit Cost",UnitCost);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@12(VAR PurchaseLine@1005 : Record 39;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;AvailableDate@1002 : Date);
    VAR
      PurchaseHeader@1008 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Expected Receipt Date",AvailableDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineOnLocation@34(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];Qty@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Qty);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesLine@1002 : Record 37;ItemNo@1000 : Code[20];Quantity@1004 : Decimal;AvailableDate@1005 : Date);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Shipment Date",AvailableDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindRequisitionLine@36(VAR RequisitionLine@1001 : Record 246;ItemNo@1000 : Code[20]);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE AssertPlanningLine@5(VAR RequisitionLineFiltered@1005 : Record 246;ActionMsg@1000 : Option;OrigDueDate@1001 : Date;DueDate@1002 : Date;OrigQty@1003 : Decimal;Quantity@1004 : Decimal;NoOfLines@1006 : Integer;NoLinesExpected@1008 : Boolean);
    VAR
      RequisitionLine@1007 : Record 246;
    BEGIN
      RequisitionLine.COPYFILTERS(RequisitionLineFiltered);
      IF NOT NoLinesExpected THEN BEGIN
        RequisitionLine.SETRANGE("Action Message",ActionMsg);
        RequisitionLine.SETRANGE("Original Due Date",OrigDueDate);
        RequisitionLine.SETRANGE("Due Date",DueDate);
        RequisitionLine.SETRANGE("Original Quantity",OrigQty);
        RequisitionLine.SETRANGE(Quantity,Quantity);
      END;
      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,'Asserting that the no. of lines match');
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Reschedule Period - Reschedule Out
        Case 1: Scenario: Supply differs from Demand more than Rechedule Period
                => Delete orig. Supply and Create New to meet Demand Due date
        Case 2: Scenario: Supply differs from Demand with exactly the Rechedule Period
                => Reschedule Supply to meet Demand Due date

      Reschedule Period - Reschedule In
        Case 1: Scenario: Supply differs from Demand more than Rechedule Period
                => Create New Suuly to meet Demand Due date and Delete orig. Supply
        Case 2: Scenario: Supply differs from Demand with exactly the Rechedule Period
                => Reschedule Supply to meet Demand Due date

      Dampener Period (always about potentiallly scheduling out)
        Case 1: Scenario: Dampener time is less than time between supply and demand
                => Cancel orig. Supply, Create New to meet Demand Due Date
        Case 2: Scenario: Dampener time equal to time between demand and supply
                => No planning suggestions

      Lot Accumulation Period
        Case 1: Scenario: Lot accumulation period less than time between supply and demand
                => Reduce / Cancel original Supply, Create new Supply to cover the Demand
        Case 2: Scenario: Lot accumulation period equal to time between demand and supply
                => Increase original Supply to meet the Demand Quantity

      Time Bucket:
                Scenario: See that the Time Bucket on the item / Sku works like Reorder Cycle
                          used to do

      Overflow Level:
        Case 1: Scenario: Overflow level from new parameter on Item
                => Reduce / Cancel overflowing Supply
        Case 2: Scenario: Calculate overflow based on Reoeder Qty and Reorder Quantity
                          when no Overflow Level has been specified
                => Reduce / Cancel overflowing Supply

      Dampener Quantity:
        Case 1: Scenario: Use value from Item
                => Leave Supply as is if excess supply <= Dampener Qty
        Case 2: Scenario: Use Manufacturing Default
                => Leave Supply as is if excess supply <= Lotsize * "Dampener % of Lot Size" (from Mfg. Setup)
    }
    END.
  }
}

