OBJECT Codeunit 137061 SCM Purchases & Payables
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1023 : Record 82;
      ItemJournalBatch@1017 : Record 233;
      ReqWkshTemplate@1015 : Record 244;
      RequisitionWkshName@1014 : Record 245;
      Assert@1008 : Codeunit 130000;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryWarehouse@1005 : Codeunit 132204;
      LibrarySales@1006 : Codeunit 130509;
      LibraryRandom@1004 : Codeunit 130440;
      LibraryPlanning@1007 : Codeunit 132203;
      IncorrectQuestionError@1001 : TextConst 'ENU=Incorrect question in confirm menu : %1';
      LibraryCosting@1024 : Codeunit 132200;
      LibraryVariableStorage@1051 : Codeunit 131004;
      MessageCounter@1027 : Integer;
      Initialized@1003 : Boolean;
      IncorrectMessageError@1022 : TextConst 'ENU=Incorrect error message : %1';
      CostAmountExpectedError@1010 : TextConst 'ENU=Cost Amount (Expected) must be same.';
      CostAmountActualError@1011 : TextConst 'ENU=Cost Amount (Actual) must be same.';
      SalesAmountExpectedError@1013 : TextConst 'ENU=Sales Amount (Expected) must be same.';
      SalesAmountActualError@1012 : TextConst 'ENU=Sales Amount (Actual) must be same.';
      DropshipmentMessage@1016 : TextConst 'ENU=A drop shipment from a purchase order cannot be received and invoiced at the same time.';
      AssociatedSalesOrderError@1018 : TextConst 'ENU=You cannot invoice this purchase order before the associated sales orders have been invoiced.';
      ChangedOnSalesLine@1019 : TextConst 'ENU=Location Code gets changed on sales line.';
      ChangedOnPurchaseLine@1020 : TextConst 'ENU=Location Code gets changed on purchase line.';
      ChangedOnReservationEntry@1021 : TextConst 'ENU=Location Code gets changed on Reservation Entry for sales & purchases.';
      OrdersDeletedError@1025 : TextConst 'ENU=Orders must be deleted.';
      ReturnOrdersDeletedError@1026 : TextConst 'ENU=Return Orders must be deleted.';
      LibraryExciseHelper@1500000 : Codeunit 143003;

    [Test]
    PROCEDURE B32914_DateInPurchaseLine@13();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
      Item@1001 : Record 27;
      ItemVendor@1002 : Record 99;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      Location@1006 : Record 14;
      Vendor@1009 : Record 23;
      DefaultSafetyLeadTime@1007 : DateFormula;
    BEGIN
      // Create Purchase Order with line and verify Date in line.
      // Setup: Update Manufacturing Setup.
      Initialize;
      ManufacturingSetup.GET;
      EVALUATE(DefaultSafetyLeadTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      UpdateManufacturingSetup(DefaultSafetyLeadTime);

      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryWarehouse.CreateLocation(Location);
      CreateItemVendor(ItemVendor,Vendor."No.",Item."No.");

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      PurchaseHeader.VALIDATE("Location Code",Location.Code);
      PurchaseHeader.VALIDATE("Requested Receipt Date",WORKDATE);
      PurchaseHeader.MODIFY(TRUE);

      // Exercise: Create Purchase Line.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,
        PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      PurchaseHeader.VALIDATE("Promised Receipt Date",WORKDATE);
      PurchaseHeader.MODIFY(TRUE);

      // Verify: Verify Expected Receipt Date and Promised Receipt Date in Purchase line.
      VerifyPurchLine(Item."No.");

      // TearDown.
      UpdateManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    PROCEDURE B32625_CrossRefNoInPurchLine@1();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      ItemCrossReference@1001 : Record 5717;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      Vendor@1005 : Record 23;
    BEGIN
      // Create Purchase Order with line and Cross-Reference No in line.
      // Setup.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryPurchase.CreateVendor(Vendor);

      LibraryInventory.CreateItemCrossReference(ItemCrossReference,Item."No.",
        ItemCrossReference."Cross-Reference Type"::Vendor,Vendor."No.");
      LibraryInventory.CreateItemCrossReference(ItemCrossReference,Item2."No.",
        ItemCrossReference."Cross-Reference Type"::Vendor,Vendor."No.");

      // Exercise: Create Purchase Order.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item2."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify Cross-Reference No in Purchase line.
      PurchaseLine.VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE B36070_SalesOrderShipOnly@19();
    BEGIN
      // Processing a drop shipment sales order - ship sales Only.
      Initialize;
      DropShipmentFromSalesOrder(TRUE,FALSE); // Ship,Invoice.
    END;

    [Test]
    PROCEDURE B36070_SalesOrderInvoice@16();
    BEGIN
      // Processing a drop shipment sales order - ship & invoice sales.
      Initialize;
      DropShipmentFromSalesOrder(TRUE,TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE DropShipmentFromSalesOrder@26(Ship@1002 : Boolean;Invoice@1003 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      Purchasing@1005 : Record 5721;
      PurchaseHeader@1007 : Record 38;
    BEGIN
      // Setup.
      CreateItem(Item);

      // Processing a drop shipment sales order.
      CreatePurchasingCode(Purchasing);

      // Exercise: Create a drop shipment Sales Order line and related Purchase Order.
      CreateDropShipOrders(Item,SalesHeader,PurchaseHeader,Purchasing,'');

      // Post Ship and Invoice Sales order.
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);

      // Verify: verify the Amounts in Item Ledger Entry.
      IF Invoice THEN
        VerifySalesEntry(Item."No.",SalesHeader."No.",0,0,Item."Unit Price",0,Item."Unit Cost")
      ELSE
        VerifySalesEntry(Item."No.",SalesHeader."No.",0,Item."Unit Price",0,Item."Unit Cost",0);
      VerifyPurchEntry(Item."No.",PurchaseHeader."No.",0,Item."Unit Cost",0); // purch. not invoiced
    END;

    [Test]
    PROCEDURE B36070_DropShipPurchReceive@12();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      Purchasing@1005 : Record 5721;
      PurchaseHeader@1007 : Record 38;
    BEGIN
      // Processing a drop shipment sales order - only receive purchase.
      // Setup.
      Initialize;
      CreateItem(Item);
      CreatePurchasingCode(Purchasing);

      // Exercise: Create a drop shipment Sales Order line and related Purchase Order.
      CreateDropShipOrders(Item,SalesHeader,PurchaseHeader,Purchasing,'');

      // Post receipt of the created Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: verify the amounts in Item Ledger Entry.
      VerifySalesEntry(Item."No.",SalesHeader."No.",0,Item."Unit Price",0,Item."Unit Cost",0);
      VerifyPurchEntry(Item."No.",PurchaseHeader."No.",0,Item."Unit Cost",0);

      // Exercise: Post Invoice of the purchase order.
      PurchaseHeader.VALIDATE("Vendor Invoice No.",
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // Verify: verify error msg.
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,AssociatedSalesOrderError) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;

      // Exercise: Post Sales Invoice and Purchase invoice.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // Verify: verify the amounts in Item Ledger Entry.
      VerifySalesEntry(Item."No.",SalesHeader."No.",0,0,Item."Unit Price",0,Item."Unit Cost");
      VerifyPurchEntry(Item."No.",PurchaseHeader."No.",0,0,Item."Unit Cost");
    END;

    [Test]
    PROCEDURE B36070_DropShipPurchInvoice@10();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      Purchasing@1005 : Record 5721;
      PurchaseHeader@1007 : Record 38;
    BEGIN
      // Processing a drop shipment sales order - receive & invoice purchase.
      // Setup.
      Initialize;
      CreateItem(Item);
      CreatePurchasingCode(Purchasing);

      // Exercise: Create a drop shipment Sales Order line and related Purchase Order.
      CreateDropShipOrders(Item,SalesHeader,PurchaseHeader,Purchasing,'');
      PurchaseHeader.VALIDATE("Vendor Invoice No.",
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);

      // Post receipt of the created Purchase Order.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: verify error msg.
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,DropshipmentMessage) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ChangeLocationConfirm)]
    PROCEDURE B44782_LocationInSalesLine@23();
    VAR
      Item@1000 : Record 27;
      Customer@1001 : Record 18;
      Customer2@1002 : Record 18;
      Location@1005 : Record 14;
      Location2@1006 : Record 14;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      ReservationEntry@1011 : Record 337;
    BEGIN
      // Verify that the location code has changed on the Sales line.
      // Setup:
      Initialize;

      // Create item with Order Tracking.
      CreateItemWithTracking(Item);

      // Create two Customers with different default location codes.
      LibraryExciseHelper.CreateLocationWithState(Location,Item."Excise Prod. Posting Group");
      CreateCustomerWithLocation(Customer,Location.Code);

      LibraryExciseHelper.CreateLocationWithState(Location2,Item."Excise Prod. Posting Group");
      CreateCustomerWithLocation(Customer2,Location2.Code);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");

      // Exercise: Create sales Line.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Change the Sell-to Customer No.
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer2."No.");
      SalesHeader.MODIFY(TRUE);

      // Verify: verify that the location code has changed on the Sales line.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(Location2.Code,SalesLine."Location Code",ChangedOnSalesLine);

      // Verify that the location code has also changed in the Reservation Entry for the tracking entries.
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      ReservationEntry.FINDSET;
      REPEAT
        Assert.AreEqual(
          Location2.Code,ReservationEntry."Location Code",ChangedOnReservationEntry);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ChangeLocationConfirm)]
    PROCEDURE B44782_LocationInPurchaseLine@21();
    VAR
      Item@1000 : Record 27;
      Vendor@1003 : Record 23;
      Vendor2@1004 : Record 23;
      Location@1005 : Record 14;
      Location2@1006 : Record 14;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1010 : Record 39;
      ReservationEntry@1011 : Record 337;
    BEGIN
      // Verify that the location code has changed on the Purchase line.
      // Setup.
      Initialize;

      // Create Item with Order Tracking
      CreateItemWithTracking(Item);
      // Create two Vendors with different default location codes.
      LibraryWarehouse.CreateLocation(Location);
      CreateVendorWithLocation(Vendor,Location.Code);
      LibraryWarehouse.CreateLocation(Location2);
      CreateVendorWithLocation(Vendor2,Location2.Code);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");

      // Exercise: Create purchase Line.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Change the Buy-from Vendor No.
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",Vendor2."No.");
      PurchaseHeader.MODIFY(TRUE);

      // Verify: verify that the location code has changed on the Purchase line.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      Assert.AreEqual(Location2.Code,PurchaseLine."Location Code",ChangedOnPurchaseLine);

      // Verify that the location code has also changed in the Reservation Entry for the tracking entries.
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      ReservationEntry.FINDSET;
      REPEAT
        Assert.AreEqual(
          Location2.Code,ReservationEntry."Location Code",ChangedOnReservationEntry);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    [Test]
    PROCEDURE B29201_AverageItemCostOnLedger@11();
    VAR
      InventorySetup@1000 : Record 313;
      GeneralLedgerSetup@1001 : Record 98;
      Item@1002 : Record 27;
      ItemJournalLine@1003 : Record 83;
      Quantity@1006 : Decimal;
      Quantity2@1007 : Decimal;
      Quantity3@1008 : Decimal;
      Quantity4@1009 : Decimal;
      UnitCost@1010 : Decimal;
      UnitCost2@1011 : Decimal;
      AvgUnitCost@1012 : Decimal;
      ExternalDocNo@1014 : Code[35];
      ExternalDocNo2@1013 : Code[35];
      ExternalDocNo3@1005 : Code[35];
      ExternalDocNo4@1004 : Code[35];
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Cost Average]
      // [SCENARIO] Verify correct values in ILEs and in Item after Cost Adjustment (Average Costing Method), when multiple Item Journal lines posted with different Quantities and Unit Costs.

      // [GIVEN] Average Cost Period = Day, Automatic Cost Adjustment = Never, Item with Costing Method = Average.
      Initialize;
      GeneralLedgerSetup.GET;
      InventorySetup.GET;
      ModifyInventorySetup(InventorySetup."Automatic Cost Adjustment"::Never,InventorySetup."Average Cost Period"::Day);
      CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);

      // Using multiple Quanity and Unit Cost values for Item Journal line.
      Quantity := 10 * LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      Quantity3 := Quantity2 + LibraryRandom.RandInt(5);
      Quantity4 := Quantity3 + LibraryRandom.RandInt(5);
      UnitCost := LibraryRandom.RandDec(10,2);
      UnitCost2 := UnitCost + LibraryRandom.RandDec(10,2);
      CreateExternalDocumentNo(ExternalDocNo,ExternalDocNo2,ExternalDocNo3,ExternalDocNo4);

      // Calculation for Average cost.
      AvgUnitCost :=
        ROUND(
          ((Quantity * UnitCost) + (Quantity2 * UnitCost2)) / (Quantity + Quantity2),
          GeneralLedgerSetup."Unit-Amount Rounding Precision");

      // [GIVEN] Post multiple Item Journal Line with different Quanity and Unit Cost values.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,UnitCost,ExternalDocNo);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity2,UnitCost2,ExternalDocNo2);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",Quantity3,0,ExternalDocNo3);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",Quantity4,0,ExternalDocNo4);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [WHEN] Run Adjust cost.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Verify Item Ledger Entry: Cost Amount is correct, Negative Quantity for Negative Adjustment.
      VerifyCostAmountLedgerEntry(
        Item."No.",ROUND(Quantity * UnitCost,GeneralLedgerSetup."Amount Rounding Precision"),ExternalDocNo);
      VerifyCostAmountLedgerEntry(
        Item."No.",ROUND(Quantity2 * UnitCost2,GeneralLedgerSetup."Amount Rounding Precision"),ExternalDocNo2);

      VerifyCostAmountLedgerEntry(
        Item."No.",-ROUND(Quantity3 * AvgUnitCost,GeneralLedgerSetup."Amount Rounding Precision"),ExternalDocNo3);
      VerifyCostAmountLedgerEntry(
        Item."No.",-ROUND(Quantity4 * AvgUnitCost,GeneralLedgerSetup."Amount Rounding Precision"),ExternalDocNo4);

      // [THEN] Item Unit Cost is correct.
      Item.GET(Item."No.");
      Assert.AreNearlyEqual(AvgUnitCost,Item."Unit Cost",GeneralLedgerSetup."Amount Rounding Precision",'');

      // TearDown.
      ModifyInventorySetup(InventorySetup."Automatic Cost Adjustment",InventorySetup."Average Cost Period");
    END;

    [Test]
    PROCEDURE B24114_DelInvoicedPurchOrders@32();
    VAR
      Item@1002 : Record 27;
      Vendor@1006 : Record 23;
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1005 : Record 38;
      PurchaseReceiptNo@1001 : Code[20];
      PurchaseReceiptNo2@1000 : Code[20];
    BEGIN
      // Post Invoice and delete Invoiced Purchase Orders.
      // 1. Setup.
      Initialize;
      CreateItem(Item);

      // Create and Post Purchase orders and combine Purchase Receipts and post Invoice.
      CombinePurchaseReceiptsSetup(Vendor,Item,PurchaseReceiptNo,PurchaseReceiptNo2);

      // 2. Exercise: Delete the Invoiced Purchase Orders.
      PurchaseHeader2.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader2.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      LibraryPurchase.DeleteInvoicedPurchOrders(PurchaseHeader2);

      // 3. Verify: verify Old Purchase Orders have been deleted.
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",Vendor."No.");
      Assert.AreEqual(0,PurchaseHeader.COUNT,OrdersDeletedError);
    END;

    [Test]
    PROCEDURE B24114_DelInvdPurchRetOrders@41();
    VAR
      Item@1002 : Record 27;
      Vendor@1007 : Record 23;
      PurchaseHeader@1004 : Record 38;
      PurchaseHeader2@1003 : Record 38;
      PurchaseReceiptNo@1001 : Code[20];
      PurchaseReceiptNo2@1000 : Code[20];
    BEGIN
      // Post Credit Memo and delete Invoiced Purchase Return Orders.
      // 1. Setup.
      Initialize;
      CreateItem(Item);

      // Create and Post Purchase Orders and combine Purchase Receipts and post Invoice.
      CombinePurchaseReceiptsSetup(Vendor,Item,PurchaseReceiptNo,PurchaseReceiptNo2);

      // Create and Post Shipment of the Return orders for the Purchase made and combine the Receipts to a Credit Memo and post it.
      CombineForPurchMemoSetup(Vendor,PurchaseReceiptNo,PurchaseReceiptNo2);

      // 2. Exercise: Delete the Invoiced Purchase Return Orders.
      PurchaseHeader2.SETRANGE("Document Type",PurchaseHeader2."Document Type"::"Return Order");
      PurchaseHeader2.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      LibraryPurchase.DeleteInvoicedPurchOrders(PurchaseHeader2);

      // 3. Verify: verify old Purchase Return orders have been deleted.
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Return Order");
      PurchaseHeader.SETRANGE("No.",Vendor."No.");
      Assert.AreEqual(0,PurchaseHeader.COUNT,ReturnOrdersDeletedError);
    END;

    [Test]
    [HandlerFunctions(CombinedMessageHandler)]
    PROCEDURE B24114_DelInvoicedSalesOrders@30();
    VAR
      Item@1002 : Record 27;
      Customer@1006 : Record 18;
      SalesHeader2@1008 : Record 36;
      SalesHeader@1007 : Record 36;
      SalesReceivablesSetup@1005 : Record 311;
      SalesShipmentNo@1004 : Code[20];
      SalesShipmentNo2@1003 : Code[20];
    BEGIN
      // Post Invoice and delete Invoiced Sales Orders.
      // 1. Setup.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateItem(Item);

      // Create and Post Sales Orders.Combine Sales Shipments and Post Invoice.
      CombineSalesShipmentsSetup(Customer,Item,SalesShipmentNo,SalesShipmentNo2);

      // 2. Exercise: Delete the Invoiced Sales Orders.
      SalesHeader2.SETRANGE("Document Type",SalesHeader2."Document Type"::Order);
      SalesHeader2.SETRANGE("Sell-to Customer No.",Customer."No.");
      LibrarySales.DeleteInvoicedSalesOrders(SalesHeader2);

      // 3. Verify: verify that old Sales Orders have been deleted.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",Customer."No.");
      Assert.AreEqual(0,SalesHeader.COUNT,OrdersDeletedError);

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(CombinedMessageHandler,CombineReturnReceiptsRequestPageHandler)]
    PROCEDURE B24114_DelInvdSalesRetOrders@43();
    VAR
      Item@1002 : Record 27;
      Customer@1006 : Record 18;
      SalesHeader2@1008 : Record 36;
      SalesHeader@1007 : Record 36;
      SalesReceivablesSetup@1005 : Record 311;
      SalesShipmentNo@1004 : Code[20];
      SalesShipmentNo2@1003 : Code[20];
    BEGIN
      // Post Credit Memo and delete Invoiced Sales Return Orders.
      // 1. Setup.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateItem(Item);

      // Create and Post Sales Orders.Combine Sales Shipments and Post Invoice.
      CombineSalesShipmentsSetup(Customer,Item,SalesShipmentNo,SalesShipmentNo2);

      // Create and Post Receipt of the Return Orders for the sales.Combine the Receipts to a Credit Memo and Post it.
      CombineForSalesMemoSetup(Customer,SalesShipmentNo,SalesShipmentNo2);

      // 2. Exercise: Delete the Invoiced Sales Return Orders.
      SalesHeader2.SETRANGE("Document Type",SalesHeader2."Document Type"::"Return Order");
      SalesHeader2.SETRANGE("Sell-to Customer No.",Customer."No.");
      LibrarySales.DeleteInvoicedSalesReturnOrders(SalesHeader2);

      // 3. Verify: verify that old Sales Return Orders have been deleted.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesHeader.SETRANGE("No.",Customer."No.");
      Assert.AreEqual(0,SalesHeader.COUNT,ReturnOrdersDeletedError);  // Value is important for Test.

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE PlannedReceiptDateOnPurchaseLine@38();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      LeadTimeCalculation@1003 : DateFormula;
    BEGIN
      // Setup: Create Item. Create and Release a Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LibraryRandom.RandDec(100,2));

      // Exercise: Update Lead Time Calculation on the Purchase Line.
      UpdateLeadTimeCalculationOnPurchaseLine(PurchaseLine,LeadTimeCalculation);

      // Verify: Verify the Planned Receipt Date calculated from Lead Time Calculation on Purchase Line.
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Planned Receipt Date",CALCDATE(LeadTimeCalculation,WORKDATE));
    END;

    [Normal]
    [Test]
    PROCEDURE DropShipmentUpdatesSKUDirectCost@40();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1003 : Record 39;
      Purchasing@1004 : Record 5721;
      SKU@1005 : Record 5700;
      Location@1006 : Record 14;
      ExpectedDirectCost@1002 : Decimal;
    BEGIN
      // [FEATURE] [Drop Shipment] [SKU] [Last Direct Cost]
      // [SCENARIO] "Last Direct Cost" should be updated for SKU when Drop Shipment Purchase is Invoiced.

      // [GIVEN] Item with SKU for Location "L", "Last Direct Cost" set to "LDC".
      Initialize;
      CreateItem(Item);
      LibraryInventory.CreateStockKeepingUnit(Item,0,FALSE,FALSE); // Create per Location
      Location.FINDFIRST;

      // [GIVEN] Create Drop Shipment Sales-Purchase orders using Location "L".
      CreatePurchasingCode(Purchasing);
      CreateDropShipOrders(Item,SalesHeader,PurchaseHeader,Purchasing,Location.Code);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
      ExpectedDirectCost := Item."Last Direct Cost" * 2;

      // [GIVEN] Update "Direct Unit Cost" in Purchase Line to "UDC" <> "LDC"
      FindPurchaseLine(PurchaseLine,PurchaseHeader,Item."No.");
      PurchaseLine.VALIDATE("Direct Unit Cost",ExpectedDirectCost);
      PurchaseLine.MODIFY(TRUE);

      // [WHEN] Receive Purchase, Post Sales, Invoice Purchase
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      SalesHeader.FIND;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] SKU for Location "L" "Last Direct Cost" equals to "UDC"
      SKU.GET(Location.Code,Item."No.",'');
      SKU.TESTFIELD("Last Direct Cost",ExpectedDirectCost);
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      MessageCounter := 0;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      COMMIT;

      Initialized := TRUE
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@31();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@14(DefaultSafetyLeadTime@1000 : DateFormula);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",DefaultSafetyLeadTime);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyInventorySetup@24(AutomaticCostAdjustment@1000 : Option;AverageCostPeriod@1001 : Option);
    VAR
      InventorySetup@1002 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.VALIDATE("Average Cost Period",AverageCostPeriod);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCode@7(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDropShipOrders@6(Item@1003 : Record 27;VAR SalesHeader@1000 : Record 36;VAR PurchaseHeader@1005 : Record 38;Purchasing@1002 : Record 5721;LocationCode@1008 : Code[10]);
    VAR
      SalesLine@1001 : Record 37;
      RequisitionLine@1004 : Record 246;
      Customer@1006 : Record 18;
      RetrieveDimensionsFrom@1007 : 'Item,Sales Line';
    BEGIN
      // Create drop ship sales order.
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Run get sales order on the requisition worksheet.
      GetSalesOrder(SalesLine,RetrieveDimensionsFrom::Item);

      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutAMSubcontractWksh(RequisitionLine);

      // Select created Purchase Header.
      PurchaseHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      PurchaseHeader.FINDLAST;
    END;

    LOCAL PROCEDURE GetSalesOrder@22(VAR SalesLine@1000 : Record 37;RetrieveDimensionsFrom@1001 : Option);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      COMMIT;
      RequisitionLine.INIT;
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      RequisitionWkshName.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
      RequisitionWkshName.FINDFIRST;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom);
    END;

    LOCAL PROCEDURE CreateItem@8(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Last Direct Cost",Item."Unit Cost");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@28(VAR ItemJournalLine@1000 : Record 83;EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitCost@1004 : Decimal;ExternalDocumentNo@1005 : Code[35]);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.VALIDATE("Posting Date",WORKDATE);
      ItemJournalLine.VALIDATE("External Document No.",ExternalDocumentNo);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithLocation@17(VAR Customer@1000 : Record 18;LocationCode@1001 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateExternalDocumentNo@27(VAR ExternalDocNo@1000 : Code[35];VAR ExternalDocNo2@1001 : Code[35];VAR ExternalDocNo3@1003 : Code[35];VAR ExternalDocNo4@1002 : Code[35]);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      ExternalDocNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("External Document No."),DATABASE::"Item Journal Line"),1,20);
      ExternalDocNo2 :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("External Document No."),DATABASE::"Item Journal Line"),1,20);
      ExternalDocNo3 :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("External Document No."),DATABASE::"Item Journal Line"),1,20);
      ExternalDocNo4 :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("External Document No."),DATABASE::"Item Journal Line"),1,20);
    END;

    LOCAL PROCEDURE CreateVendorWithLocation@18(VAR Vendor@1000 : Record 23;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Location Code",LocationCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemVendor@25(VAR ItemVendor@1002 : Record 99;VendorNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemVendor(ItemVendor,VendorNo,ItemNo);
      EVALUATE(ItemVendor."Lead Time Calculation",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithTracking@68(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking & Action Msg.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@79(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceHeader@126(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@84(VAR PurchaseHeader@1002 : Record 38;VendorNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CombinePurchaseReceiptsSetup@47(VAR Vendor@1000 : Record 23;Item@1001 : Record 27;VAR PurchaseReceiptNo@1002 : Code[20];VAR PurchaseReceiptNo2@1004 : Code[20]);
    VAR
      PurchaseHeader@1013 : Record 38;
      PurchRcptHeader@1011 : Record 120;
      PurchRcptHeader2@1010 : Record 120;
      PurchRcptLine@1009 : Record 121;
      PurchGetReceipt@1006 : Codeunit 74;
    BEGIN
      // Create and Post Purchase Orders.
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostPurchaseOrder(PurchaseHeader,Vendor."No.",Item."No.");
      FindPurchRcptHeader(PurchRcptHeader,PurchaseHeader."No.");
      PurchaseReceiptNo := PurchRcptHeader."No.";
      CLEAR(PurchaseHeader);
      CreateAndPostPurchaseOrder(PurchaseHeader,Vendor."No.",Item."No.");
      FindPurchRcptHeader(PurchRcptHeader2,PurchaseHeader."No.");
      PurchaseReceiptNo2 := PurchRcptHeader2."No.";

      // Combine Purchase Receipts and Post Invoice.
      CreatePurchaseInvoiceHeader(PurchaseHeader,Vendor."No.");
      PurchRcptLine.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchRcptLine.FINDFIRST;

      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CombineForPurchMemoSetup@36(Vendor@1000 : Record 23;PurchaseReceiptNo@1002 : Code[20];PurchaseReceiptNo2@1004 : Code[20]);
    VAR
      PurchaseHeader@1013 : Record 38;
      ReturnShipmentLine@1008 : Record 6651;
      PurchGetReturnShipments@1005 : Codeunit 6648;
      DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // Create and Post Shipment of the Return Orders for the Purchase made.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Vendor."No.");
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::"Posted Receipt",PurchaseReceiptNo,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Vendor."No.");
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::"Posted Receipt",PurchaseReceiptNo2,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Combine the Receipts to a Credit Memo and Post it.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",Vendor."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      ReturnShipmentLine.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      ReturnShipmentLine.FINDFIRST;

      PurchGetReturnShipments.SetPurchHeader(PurchaseHeader);
      PurchGetReturnShipments.CreateInvLines(ReturnShipmentLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CombineSalesShipmentsSetup@51(VAR Customer@1000 : Record 18;Item@1001 : Record 27;VAR SalesShipmentNo@1002 : Code[20];VAR SalesShipmentNo2@1003 : Code[20]);
    VAR
      SalesHeader@1013 : Record 36;
      SalesShipmentHeader@1011 : Record 110;
      SalesShipmentHeader2@1010 : Record 110;
      SalesShipmentHeader3@1006 : Record 110;
      SalesHeader2@1005 : Record 36;
    BEGIN
      // Post two Sales Orders.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Combine Shipments",TRUE);
      Customer.MODIFY(TRUE);

      CreateAndPostSalesOrder(SalesHeader,Customer."No.",Item."No.");
      FindSalesShipmentHeader(SalesShipmentHeader,SalesHeader."No.");
      SalesShipmentNo := SalesShipmentHeader."No.";
      CLEAR(SalesHeader);
      CreateAndPostSalesOrder(SalesHeader,Customer."No.",Item."No.");
      FindSalesShipmentHeader(SalesShipmentHeader2,SalesHeader."No.");
      SalesShipmentNo2 := SalesShipmentHeader2."No.";

      // Combine Sales Shipments and Post Invoice.
      SalesHeader2.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesShipmentHeader3.SETRANGE("Sell-to Customer No.",Customer."No.");
      LibrarySales.CombineShipments(SalesHeader2,SalesShipmentHeader3,WORKDATE,WORKDATE,FALSE,TRUE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CombineForSalesMemoSetup@52(Customer@1003 : Record 18;SalesShipmentNo@1001 : Code[20];SalesShipmentNo2@1000 : Code[20]);
    VAR
      SalesHeader@1013 : Record 36;
      CombineReturnReceipts@1019 : Report 6653;
      DocumentType@1004 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // create and post receipt of the return orders for the sales made
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",Customer."No.");
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Receipt",SalesShipmentNo,TRUE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",Customer."No.");
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Receipt",SalesShipmentNo2,TRUE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // combine the receipts to a credit memo and post it.
      LibraryVariableStorage.Enqueue(SalesHeader."Sell-to Customer No.");
      CLEAR(CombineReturnReceipts);
      CombineReturnReceipts.RUN;
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@39(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE FindPurchRcptHeader@119(VAR PurchRcptHeader@1000 : Record 120;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@159(VAR SalesShipmentHeader@1000 : Record 110;OrderNo@1001 : Code[20]);
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateLeadTimeCalculationOnPurchaseLine@37(VAR PurchaseLine@1001 : Record 39;VAR LeadTimeCalculation@1000 : DateFormula);
    BEGIN
      EVALUATE(LeadTimeCalculation,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>');
      PurchaseLine.VALIDATE("Lead Time Calculation",LeadTimeCalculation);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindPurchaseLine@45(VAR PurchaseLine@1004 : Record 39;PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE VerifySalesEntry@5(ItemNo@1000 : Code[20];SalesOrderNo@1002 : Code[20];VerifyLineType@1008 : 'Shipment,Invoice';SalesExpectedAmount@1001 : Decimal;SalesActualAmount@1005 : Decimal;CostExpectedAmount@1004 : Decimal;CostActualAmount@1006 : Decimal);
    VAR
      ItemLedgEntry@1003 : Record 32;
      SalesShipmentHeader@1007 : Record 110;
      SalesInvoiceHeader@1009 : Record 112;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale);
      CASE VerifyLineType OF
        VerifyLineType::Shipment:
          BEGIN
            SalesShipmentHeader.SETRANGE("Order No.",SalesOrderNo);
            SalesShipmentHeader.FINDFIRST;
            ItemLedgEntry.SETRANGE("Document No.",SalesShipmentHeader."No.");
          END;
        VerifyLineType::Invoice:
          BEGIN
            SalesInvoiceHeader.SETRANGE("Order No.",SalesOrderNo);
            SalesInvoiceHeader.FINDFIRST;
            ItemLedgEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          END;
      END;
      ItemLedgEntry.FINDFIRST;
      ItemLedgEntry.CALCFIELDS("Sales Amount (Expected)","Cost Amount (Expected)","Sales Amount (Actual)","Cost Amount (Actual)");
      Assert.AreEqual(SalesExpectedAmount,ItemLedgEntry."Sales Amount (Expected)",SalesAmountExpectedError);
      Assert.AreEqual(SalesActualAmount,ItemLedgEntry."Sales Amount (Actual)",SalesAmountActualError);
      Assert.AreEqual(-1 * CostExpectedAmount,ItemLedgEntry."Cost Amount (Expected)",CostAmountExpectedError);
      Assert.AreEqual(-1 * CostActualAmount,ItemLedgEntry."Cost Amount (Actual)",CostAmountActualError);
    END;

    LOCAL PROCEDURE VerifyPurchEntry@9(ItemNo@1000 : Code[20];PurchOrderNo@1002 : Code[20];VerifyLineType@1008 : 'Receipt,Invoice';CostExpectedAmount@1004 : Decimal;CostActualAmount@1006 : Decimal);
    VAR
      ItemLedgEntry@1003 : Record 32;
      PurchRcptHeader@1007 : Record 120;
      PurchInvHeader@1005 : Record 122;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Purchase);
      CASE VerifyLineType OF
        VerifyLineType::Receipt:
          BEGIN
            PurchRcptHeader.SETRANGE("Order No.",PurchOrderNo);
            PurchRcptHeader.FINDFIRST;
            ItemLedgEntry.SETRANGE("Document No.",PurchRcptHeader."No.");
          END;
        VerifyLineType::Invoice:
          BEGIN
            PurchInvHeader.SETRANGE("Order No.",PurchOrderNo);
            PurchInvHeader.FINDFIRST;
            ItemLedgEntry.SETRANGE("Document No.",PurchInvHeader."No.");
          END;
      END;
      ItemLedgEntry.FINDFIRST;
      ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
      Assert.AreEqual(CostExpectedAmount,ItemLedgEntry."Cost Amount (Expected)",CostAmountExpectedError);
      Assert.AreEqual(CostActualAmount,ItemLedgEntry."Cost Amount (Actual)",CostAmountActualError);
    END;

    LOCAL PROCEDURE VerifyPurchLine@2(ItemNo@1000 : Code[20]);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
      PurchaseLine@1002 : Record 39;
    BEGIN
      ManufacturingSetup.GET;
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Expected Receipt Date",CALCDATE(ManufacturingSetup."Default Safety Lead Time",WORKDATE));
      PurchaseLine.TESTFIELD("Promised Receipt Date",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyCostAmountLedgerEntry@29(ItemNo@1000 : Code[20];CostAmountAct@1002 : Decimal;ExternalDocumentNo@1001 : Code[35]);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      GeneralLedgerSetup.GET;
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("External Document No.",ExternalDocumentNo);
      ItemLedgerEntry.FINDFIRST;

      ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
      Assert.AreNearlyEqual(
        0,ItemLedgerEntry."Cost Amount (Expected)",GeneralLedgerSetup."Amount Rounding Precision",CostAmountExpectedError);
      Assert.AreNearlyEqual(
        CostAmountAct,ItemLedgerEntry."Cost Amount (Actual)",GeneralLedgerSetup."Amount Rounding Precision",CostAmountActualError);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@3(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(
        STRPOS(Message,'The change will not affect existing entries.') > 0,STRSUBSTNO(IncorrectMessageError,Message));
    END;

    [ConfirmHandler]
    PROCEDURE ChangeLocationConfirm@4(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(
        STRPOS(Question,'Do you want to change') > 0,STRSUBSTNO(IncorrectQuestionError,Question));
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE CombinedMessageHandler@33(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,'The shipments are now combined and the number of invoices created is 1.') > 0,Message);
        2:
          Assert.IsTrue(
            STRPOS(Message,'The return receipts are now combined and the number of credit memos created is 1.') > 0,Message);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE CombineReturnReceiptsRequestPageHandler@300(VAR CombineReturnReceipts@1000 : TestRequestPage 6653);
    VAR
      DequeueVariable@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CombineReturnReceipts.Control1.SETVALUE(WORKDATE);
      CombineReturnReceipts.Control4.SETVALUE(WORKDATE);
      CombineReturnReceipts.SalesOrderHeader.SETFILTER("Sell-to Customer No.",DequeueVariable);
      CombineReturnReceipts.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      AU: Unable to Execute
      IT: Unable to Execute
      ES: Unable to Execute
      IN: Unable to Execute
      NL: Unable to Execute
      US: Unable to Execute
      MX: Unable to Execute

      Tests for Purchases and Payables unit tests:
      1. Verify that Planned Receipt Date on Purchase Line is calculated from Lead Time Calculation.

      Covers Test cases :
      ----------------------------------------------
       Test Function Name                  TFS ID
      ----------------------------------------------
       B32914_DateInPurchaseLine           142629
       B32625_CrossRefNoInPurchLine        143035
       B36070_SalesOrderShipOnly           145044
       B36070_SalesOrderInvoice            145044
       B36070_DropShipPurchReceive         145044
       B36070_DropShipPurchInvoice         145044
       B44782_LocationInSalesLine          144837
       B44782_LocationInPurchaseLine       144837
       B29201_AverageItemCostOnLedger      142617
       B24114_DelInvoicedPurchOrders       144971
       B24114_DelInvdPurchRetOrders        144971
       B24114_DelInvoicedSalesOrders       144971
       B24114_DelInvdSalesRetOrders        144971

       Covers Test Cases for WI - 298982
       -----------------------------------------------------------------------
       Test Function Name                                              TFS ID
       -----------------------------------------------------------------------
       PlannedReceiptDateOnPurchaseLine                                127679

       Covers Test Cases for WI - 130329
       -----------------------------------------------------------------------
       Test Function Name                                              TFS ID
       -----------------------------------------------------------------------
       DropShipmentUpdatesSKUDirectCost                                130329
    }
    END.
  }
}

