OBJECT Codeunit 137391 SCM - BOM Cost Shares Report
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      GLBItem@1017 : Record 27;
      LibraryERM@1001 : Codeunit 131300;
      LibraryERMCountryData@1008 : Codeunit 131305;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibraryReportDataset@1000 : Codeunit 131007;
      LibraryTrees@1018 : Codeunit 132208;
      Assert@1002 : Codeunit 130000;
      isInitialized@1006 : Boolean;
      GLBShowLevelAs@1016 : 'First BOM Level,BOM Leaves';
      GLBShowCostShareAs@1015 : 'Single-level,Rolled-up';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      // Initialize setup.
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      isInitialized := TRUE;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateCostSharesTree@11(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;Width@1013 : Integer;ShowLevelAs@1010 : Option;ShowDetails@1011 : Boolean;ShowCostShareAs@1009 : Option);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,Width,2);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddOverhead(TempItem,TempResource,TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddSubcontracting(TempWorkCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));
      Item.GET(Item."No.");

      // Exercise: Run BOM Cost Shares Distribution Report.
      RunBOMCostSharesReport(Item,ShowLevelAs,ShowDetails,ShowCostShareAs);

      // Verify: Check the cost values for top item.
      IF ShowCostShareAs = GLBShowCostShareAs::"Rolled-up" THEN
        VerifyBOMCostSharesReport(Item."No.",
          Item."Rolled-up Material Cost",
          Item."Rolled-up Capacity Cost",
          Item."Rolled-up Mfg. Ovhd Cost",
          Item."Rolled-up Cap. Overhead Cost",
          Item."Rolled-up Subcontracted Cost",
          Item."Unit Cost")
      ELSE
        VerifyBOMCostSharesReport(Item."No.",
          Item."Single-Level Material Cost",
          Item."Single-Level Capacity Cost",
          Item."Single-Level Mfg. Ovhd Cost",
          Item."Single-Level Cap. Ovhd Cost",
          Item."Single-Level Subcontrd. Cost",
          Item."Unit Cost")
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyBOMLeavesSglLvl@74();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"BOM Leaves",TRUE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderBOMLeavesSglLvl@73();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"BOM Leaves",TRUE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyBOMLeavesRldUp@64();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"BOM Leaves",TRUE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderBOMLeavesRldUp@63();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"BOM Leaves",TRUE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyFstLvlSglLvl@66();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"First BOM Level",TRUE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderFstLvlSglLvl@65();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"First BOM Level",TRUE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyFstLvlRldUp@68();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,1,1,GLBShowLevelAs::"First BOM Level",TRUE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderFstLvlRldUp@67();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"First BOM Level",TRUE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyBOMLeavesSglLvlNoDtl@15();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"BOM Leaves",FALSE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderBOMLeavesSglLvlNoDtl@14();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"BOM Leaves",FALSE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyBOMLeavesRldUpNoDtl@13();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"BOM Leaves",FALSE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderBOMLeavesRldUpNoDtl@12();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"BOM Leaves",FALSE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyFstLvlSglLvlNoDtl@10();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"First BOM Level",FALSE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderFstLvlSglLvlNoDtl@9();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"First BOM Level",FALSE,GLBShowCostShareAs::"Single-level");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyFstLvlRldUpNoDtl@7();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::Assembly,2,1,GLBShowLevelAs::"First BOM Level",FALSE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderFstLvlRldUpNoDtl@6();
    BEGIN
      CreateCostSharesTree(
        GLBItem."Replenishment System"::"Prod. Order",2,1,GLBShowLevelAs::"First BOM Level",FALSE,GLBShowCostShareAs::"Rolled-up");
    END;

    [Normal]
    LOCAL PROCEDURE TestCostSharesTreePage@1(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddOverhead(TempItem,TempResource,TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddSubcontracting(TempWorkCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));
      LibraryVariableStorage.Enqueue(Item."No.");

      // Exercise: Run BOM Cost SharesPage.
      RunBOMCostSharesPage(Item);

      // Verify: Cost fields on BOM Cost Shares page: In Page Handler.
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler,BOMCostSharesPageHandler,NoWarningsMessageHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemAssemblyPage@26();
    BEGIN
      TestCostSharesTreePage(GLBItem."Replenishment System"::Assembly,2,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,BOMCostSharesPageHandler,NoWarningsMessageHandler,BOMCostSharesDistribReportHandler)]
    PROCEDURE TopItemProdOrderPage@25();
    BEGIN
      TestCostSharesTreePage(GLBItem."Replenishment System"::"Prod. Order",2,1,2);
    END;

    [Normal]
    LOCAL PROCEDURE TestBOMStructurePage@5(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer);
    VAR
      Item@1015 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,2);
      LibraryVariableStorage.Enqueue(Item."No.");

      // Exercise: Run BOM Cost SharesPage.
      RunBOMStructurePage(Item);

      // Verify: Cost fields on BOM Structure page: In Page Handler.
    END;

    [Test]
    [HandlerFunctions(BOMStructurePageHandler,NoWarningsMessageHandler,ItemAvailabilityByBOMPageHandler)]
    PROCEDURE TopItemAssemblyBOMStructurePage@17();
    BEGIN
      TestBOMStructurePage(GLBItem."Replenishment System"::Assembly,2,1);
    END;

    [Normal]
    LOCAL PROCEDURE RunBOMCostSharesReport@3(Item@1002 : Record 27;ShowLevelAs@1008 : Option;ShowDetails@1009 : Boolean;ShowCostShareAs@1007 : Option);
    VAR
      Item1@1005 : Record 27;
    BEGIN
      Item1.SETRANGE("No.",Item."No.");
      COMMIT;
      LibraryVariableStorage.Enqueue(ShowCostShareAs);
      LibraryVariableStorage.Enqueue(ShowLevelAs);
      LibraryVariableStorage.Enqueue(ShowDetails);
      REPORT.RUN(REPORT::"BOM Cost Share Distribution",TRUE,FALSE,Item1);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyBOMCostSharesReport@48(ItemNo@1008 : Code[20];ExpMaterialCost@1002 : Decimal;ExpCapacityCost@1003 : Decimal;ExpMfgOvhdCost@1004 : Decimal;ExpCapOvhdCost@1005 : Decimal;ExpSubcontractedCost@1007 : Decimal;ExpTotalCost@1006 : Decimal);
    VAR
      CostAmount@1000 : Decimal;
      RoundingFactor@1010 : Decimal;
    BEGIN
      RoundingFactor := 100 * LibraryERM.GetUnitAmountRoundingPrecision;

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo',ItemNo);

      CostAmount := LibraryReportDataset.Sum('MaterialCost');
      Assert.AreNearlyEqual(ExpMaterialCost,CostAmount,RoundingFactor,'Wrong Material Cost in item ' + ItemNo);

      CostAmount := LibraryReportDataset.Sum('CapacityCost');
      Assert.AreNearlyEqual(ExpCapacityCost,CostAmount,RoundingFactor,'Wrong Capacity Cost in item ' + ItemNo);

      CostAmount := LibraryReportDataset.Sum('MfgOvhdCost');
      Assert.AreNearlyEqual(ExpMfgOvhdCost,CostAmount,RoundingFactor,'Wrong Mfg. Overhead in item ' + ItemNo);

      CostAmount := LibraryReportDataset.Sum('CapOvhdCost');
      Assert.AreNearlyEqual(ExpCapOvhdCost,CostAmount,RoundingFactor,'Wrong Cap. Overhead in item ' + ItemNo);

      CostAmount := LibraryReportDataset.Sum('SubcontrdCost');
      Assert.AreNearlyEqual(
        ExpSubcontractedCost,CostAmount,RoundingFactor,'Wrong Subcontracted Cost in item ' + ItemNo);

      CostAmount := LibraryReportDataset.Sum('TotalCost');
      Assert.AreNearlyEqual(ExpTotalCost,CostAmount,RoundingFactor,'Wrong Total Cost in item ' + ItemNo);
    END;

    [Normal]
    LOCAL PROCEDURE RunBOMCostSharesPage@2(VAR Item@1000 : Record 27);
    VAR
      BOMCostShares@1001 : Page 5872;
    BEGIN
      BOMCostShares.InitItem(Item);
      BOMCostShares.RUN;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyBOMCostSharesPage@22(VAR BOMCostShares@1010 : TestPage 5872;ItemNo@1008 : Code[20];ExpMaterialCost@1002 : Decimal;ExpCapacityCost@1003 : Decimal;ExpMfgOvhdCost@1004 : Decimal;ExpCapOvhdCost@1005 : Decimal;ExpSubcontractedCost@1007 : Decimal;ExpTotalCost@1006 : Decimal);
    VAR
      BOMBuffer@1001 : Record 5870;
      RoundingFactor@1000 : Decimal;
    BEGIN
      BOMCostShares.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::Item));
      BOMCostShares.FILTER.SETFILTER("No.",ItemNo);
      BOMCostShares.FIRST;

      RoundingFactor := 100 * LibraryERM.GetUnitAmountRoundingPrecision;
      Assert.AreNearlyEqual(
        ExpMaterialCost,BOMCostShares."Rolled-up Material Cost".ASDECIMAL,RoundingFactor,
        'Wrong Material Cost in item ' + ItemNo);
      Assert.AreNearlyEqual(
        ExpCapacityCost,BOMCostShares."Rolled-up Capacity Cost".ASDECIMAL,RoundingFactor,
        'Wrong Capacity Cost in item ' + ItemNo);
      Assert.AreNearlyEqual(
        ExpMfgOvhdCost,BOMCostShares."Rolled-up Mfg. Ovhd Cost".ASDECIMAL,RoundingFactor,
        'Wrong Mfg. Overhead in item ' + ItemNo);
      Assert.AreNearlyEqual(
        ExpCapOvhdCost,BOMCostShares."Rolled-up Capacity Ovhd. Cost".ASDECIMAL,RoundingFactor,
        'Wrong Cap. Overhead in item ' + ItemNo);
      Assert.AreNearlyEqual(
        ExpSubcontractedCost,BOMCostShares."Rolled-up Subcontracted Cost".ASDECIMAL,RoundingFactor,
        'Wrong Subcontracted Cost in item ' + ItemNo);
      Assert.AreNearlyEqual(
        ExpTotalCost,BOMCostShares."Total Cost".ASDECIMAL,RoundingFactor,'Wrong Total Cost in item ' + ItemNo);
    END;

    [Normal]
    LOCAL PROCEDURE RunBOMStructurePage@18(VAR Item@1000 : Record 27);
    VAR
      BOMStructure@1001 : Page 5870;
    BEGIN
      BOMStructure.InitItem(Item);
      BOMStructure.RUN;
    END;

    [StrMenuHandler]
    PROCEDURE CalcStdCostMenuHandler@4(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 2;
    END;

    [ConfirmHandler]
    PROCEDURE ProducedCompConfirmHandler@30(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesPageHandler@45(VAR BOMCostShares@1000 : TestPage 5872);
    VAR
      Item@1003 : Record 27;
      VariantVar@1001 : Variant;
      ShowLevelAs@1005 : 'First BOM Level,BOM Leaves';
      ShowCostShareAs@1004 : 'Single-level,Rolled-up';
      ItemNo@1002 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(VariantVar);
      ItemNo := VariantVar;
      Item.GET(ItemNo);
      VerifyBOMCostSharesPage(BOMCostShares,Item."No.",Item."Rolled-up Material Cost",Item."Rolled-up Capacity Cost",
        Item."Rolled-up Mfg. Ovhd Cost",Item."Rolled-up Cap. Overhead Cost",Item."Rolled-up Subcontracted Cost",Item."Unit Cost");

      COMMIT;
      BOMCostShares.Action28.INVOKE; // Call Show Warnings for code coverage purposes.

      // Enqueue parameters for report.
      LibraryVariableStorage.Enqueue(ShowCostShareAs::"Single-level");
      LibraryVariableStorage.Enqueue(ShowLevelAs::"BOM Leaves");
      LibraryVariableStorage.Enqueue(TRUE);
      BOMCostShares.Action42.INVOKE; // Call BOM Cost Shares distribution report for code coverage purposes.
      BOMCostShares.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE NoWarningsMessageHandler@23(Message@1000 : Text);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE BOMCostSharesDistribReportHandler@27(VAR BOMCostShareDistribution@1000 : TestRequestPage 5872);
    VAR
      ShowCostShareAs@1001 : Variant;
      ShowLevelAs@1002 : Variant;
      ShowDetails@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowCostShareAs);
      LibraryVariableStorage.Dequeue(ShowLevelAs);
      LibraryVariableStorage.Dequeue(ShowDetails);

      BOMCostShareDistribution.Control3.SETVALUE(ShowCostShareAs);
      BOMCostShareDistribution.Control4.SETVALUE(ShowLevelAs);
      BOMCostShareDistribution.Control6.SETVALUE(ShowDetails);
      BOMCostShareDistribution.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [PageHandler]
    PROCEDURE BOMStructurePageHandler@19(VAR BOMStructure@1000 : TestPage 5870);
    VAR
      BOMBuffer@1005 : Record 5870;
      VariantVar@1004 : Variant;
      ShowLevelAs@1007 : 'First BOM Level,BOM Leaves';
      ShowCostShareAs@1006 : 'Single-level,Rolled-up';
      ItemNo@1003 : Code[20];
      QtyPerParent@1002 : Decimal;
      QtyPerTopItem@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(VariantVar);
      ItemNo := VariantVar;

      BOMStructure.EXPAND(TRUE);
      BOMStructure.FILTER.SETFILTER(Type,FORMAT(BOMBuffer.Type::Item));
      WHILE BOMStructure.NEXT DO BEGIN
        LibraryTrees.GetQtyPerInTree(QtyPerParent,QtyPerTopItem,ItemNo,FORMAT(BOMStructure."No."));
        Assert.AreEqual(
          QtyPerParent,BOMStructure."Qty. per Parent".ASDECIMAL,'Wrong Qty per parent on page for item ' + FORMAT(BOMStructure."No."));
        Assert.AreEqual(FALSE,BOMStructure.HasWarning.ASBOOLEAN,'Unexpected warning present in item ' + FORMAT(BOMStructure."No."));
      END;

      COMMIT;
      BOMStructure.Action30.INVOKE; // Call Show Warnings for code coverage purposes.

      // Enqueue parameters for report.
      LibraryVariableStorage.Enqueue(ShowCostShareAs::"Single-level");
      LibraryVariableStorage.Enqueue(ShowLevelAs::"BOM Leaves");
      LibraryVariableStorage.Enqueue(TRUE);
      BOMStructure.Action13.INVOKE; // Call BOM Cost Shares distribution report for code coverage purposes.
      BOMStructure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityByBOMPageHandler@31(VAR ItemAvailByBOMLevel@1000 : TestPage 5871);
    BEGIN
      ItemAvailByBOMLevel.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [BOM Cost Share Distribution] [SCM]
      This CU contains scenarios for the BOM Cost Shares report.
    }
    END.
  }
}

