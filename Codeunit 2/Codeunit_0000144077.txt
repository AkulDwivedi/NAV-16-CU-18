OBJECT Codeunit 144077 TCS Revised Transaction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500006 : Record 79;
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      NodNocHeader@1500025 : Record 13786;
      TcsNatureOfCollection@1500023 : Record 16507;
      TCSSetup@1500016 : Record 16508;
      AssesseeCode@1500005 : Record 13727;
      LibraryERM@1500004 : Codeunit 131300;
      LibrarySales@1500002 : Codeunit 130509;
      LibraryTDS@1500001 : Codeunit 143000;
      LibraryTCS@1500000 : Codeunit 143008;
      LibrarySetupStorage@1500007 : Codeunit 131009;
      LibraryUtility@1500011 : Codeunit 131000;
      LibraryJournals@1500014 : Codeunit 131306;
      LibraryReportDataset@1500015 : Codeunit 131007;
      Assert@1500018 : Codeunit 130000;
      LibraryRandom@1500009 : Codeunit 130440;
      LibraryVariableStorage@1500010 : Codeunit 131004;
      ValueNotFoundErr@1500019 : TextConst 'ENU=Value Not Found.';
      ValueErr@1500020 : TextConst 'ENU=Values Doesn''t Match';
      isInitialized@1500008 : Boolean;
      AllOptionMandatoryErr@1500026 : TextConst 'ENU=All options are mandatory.';
      ErrorTxt@1500013 : TextConst 'ENU=was not found';
      ErrorMisMatchTxt@1500012 : TextConst 'ENU=Error does not match';

    [Test]
    [HandlerFunctions(CorrectForm27EQRequestPageHandler)]
    PROCEDURE Correct27EQEntriesFieldReportQuarterValidation@1500030();
    VAR
      CorrectionType@1500001 : ' ,Collector,Party';
    BEGIN
      // [SCENARIO 163907] throws an error while running the Correct 27EQ Entries reports when Quarter is left blank.
      // [FEATURE] [Correct 27EQ Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 27EQ Entries With Blank Quarter
      ValidateFormCorrect2627EQEntries(1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Collector);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 27EQ Entries");

      // [THEN] Expected Error for blank Report Quarter has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(CorrectForm27EQRequestPageHandler)]
    PROCEDURE Correct27EQEntriesFieldReportFinancialYearValidation@1500024();
    VAR
      CorrectionType@1500001 : ' ,Collector,Party';
    BEGIN
      // [SCENARIO 163907] throws an error while running the Correct 27EQ Entries reports when Financial Year is left blank.
      // [FEATURE] [Correct 27EQ Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 27EQ Entries With  Blank Financial Year
      ValidateFormCorrect2627EQEntries(2,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Collector);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 27EQ Entries");

      // [THEN] Expected Error for blank Report Financial Year has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(CorrectForm27EQRequestPageHandler)]
    PROCEDURE Correct27EQEntriesFieldReportCorrectionTypeValidation@1500023();
    VAR
      CorrectionType@1500001 : ' ,Collector,Party';
    BEGIN
      // [SCENARIO 163907] throws an error while running the Correct 27EQ Entries reports when Correction Type is left blank.
      // [FEATURE] [Correct 27EQ Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 27EQ Entries With Blank Correction Type
      ValidateFormCorrect2627EQEntries(3,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Collector);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 27EQ Entries");

      // [THEN] Expected Error for blank Report Correction Type has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(Correct2627EQEntriesPageHandler)]
    PROCEDURE Correct2627EQEntriesFieldReportQuarterValidation@1500041();
    VAR
      CorrectionType@1500001 : ' ,Deductor,Deductee';
    BEGIN
      // [SCENARIO 163906] throws an error while running the Correct 26Q/27Q Entries reports when Quarter is left blank.
      // [FEATURE] [Correct 26Q/27Q Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 26Q/27Q Entries With Blank Quarter
      ValidateFormCorrect2627EQEntries(1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Deductor);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");

      // [THEN] Expected Error for blank Report Quarter has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(Correct2627EQEntriesPageHandler)]
    PROCEDURE Correct2627EQEntriesFieldReportFinancialYearValidation@1500040();
    VAR
      CorrectionType@1500001 : ' ,Deductor,Deductee';
    BEGIN
      // [SCENARIO 163906] throws an error while running the Correct 26Q/27Q Entries reports when Financial Year is left blank.
      // [FEATURE] [Correct 26Q/27Q Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 26Q/27Q Entries With  Blank Financial Year
      ValidateFormCorrect2627EQEntries(2,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Deductor);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");

      // [THEN] Expected Error for blank Report Financial Year has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(Correct2627EQEntriesPageHandler)]
    PROCEDURE Correct2627EQEntriesFieldReportCorrectionTypeValidation@1500038();
    VAR
      CorrectionType@1500001 : ' ,Deductor,Deductee';
    BEGIN
      // [SCENARIO 163906] throws an error while running the Correct 26Q/27Q Entries reports when Correction Type is left blank.
      // [FEATURE] [Correct 26Q/27Q Entries]

      // [GIVEN] Created Income Tax Accounting Period Setup
      InitializeSetup;

      // [WHEN] Run Report Correct 26Q/27Q Entries With Blank Correction Type
      ValidateFormCorrect2627EQEntries(3,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CorrectionType::Deductor);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");

      // [THEN] Expected Error for blank Report Correction Type has been thrown : All options are mandatory.
      Assert.ExpectedError(AllOptionMandatoryErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler,CorrectForm27EQRequestPageHandler,GenerateCorrectCollectorRecordModalPageHandler,GenerateCorrectPartyRecordModalPageHandler)]
    PROCEDURE VerifyGenerateeTCSReportDetailsAfterUpdateChallanRegister@1500005();
    VAR
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163773] Check if the system is modifying Challan details after generation of form 27EQ and filing of e-TCS
      // [FEATURE] [e-TCS Transactions]

      // [GIVEN] Created Income Tax accounting period , NODNOC ,TCS Nature of Collection , Assesse Code,TCS Setup
      Initialize;

      // [WHEN] Create Sales order and Post,Update TCS Challan Details and to Generate form 27EQ Report , Correct 27EQ Entries Report
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      GenerateForm27EQAndeTCSeFile(DocumentNo,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));
      UpdateFormCorrect27EQEntries(1);
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
      UpdateFormCorrect27EQEntries(2);

      // [THEN] Created Correct 27EQ Entries Report With Using Correction Type Party
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler,CorrectForm27EQRequestPageHandler,GenerateCorrectCollectorRecordModalPageHandler,RevisedForm27EQRequestPageHandler,GenerateRevisedeTCS27EQRequestPageHandler)]
    PROCEDURE VerifyGenerateRevisedeTCS27EQAfterUpdateChallanRegister@1500003();
    VAR
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163774] Check if the system is generating only corrected fields (as per the specified format) in case of revised returns (eTCS)
      // [FEATURE] [Revised e-TCS]

      // [GIVEN] Created Income Tax accounting period , NODNOC , TCS Nature of Collection, Assesse Code
      Initialize;

      // [WHEN] Create Sales order and Post ,Update TCS Challan Details , Genrate Form 27EQ Report and Correct 27EQ Entries Report,Revised e-TCS 27EQ
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      GenerateForm27EQAndeTCSeFile(DocumentNo,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));
      UpdateFormCorrect27EQEntries(1);
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
      REPORT.RUN(REPORT::"Form 27EQ Correction");

      // [THEN] Verified that the preview Result : TCSBatchHeader."Collector Address"
      VerifyReportDetailCorrect27EQEntries(LibraryTCS.GetCurrentFinancialYear);

      // [WHEN] Generate Revised e-TCS
      GenerateRevisedeTCS(1,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));

      // [THEN] Verified that the preview Result : CompanyInformation."T.C.A.N. No." , CompanyInformation."Phone No."
      VerifyValuesOnTCSBatchHeader(LibraryTCS.GetCurrentFinancialYear);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler,CorrectForm27EQRequestPageHandler,GenerateCorrectCollectorRecordModalPageHandler,RevisedForm27EQRequestPageHandler,GenerateRevisedeTCS27EQRequestPageHandler)]
    PROCEDURE VerifyGenerateeTCSReturnAfterGeneratRevisedeTCSReturn@1500014();
    VAR
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163779] Check the generation of original e-TCS return after generating revised e-TCS return for the same Quarter
      // [FEATURE] [Revised eTCS Transactions]

      // [GIVEN] Created Income Tax accounting period , NODNOC ,TCS Nature of Collection , Assesse Code , TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;

      // [WHEN] Create Sales order and Post ,Update TCS Challan Details , Genrate Form 27EQ Report , e-TCS and Correct 27EQ Entries Report , Form 27EQ Correction Report , Revised e-TCS 27EQ
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      GenerateForm27EQAndeTCSeFile(DocumentNo,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));
      UpdateFormCorrect27EQEntries(1);
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
      GenerateRevisedForm27EQAndeTCS(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));
      ASSERTERROR GenerateeTCS(1,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));

      // [THEN] System should throw error : File was not Found
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,ErrorTxt),ErrorMisMatchTxt);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler)]
    PROCEDURE VerifyGenerateeTCSBeforeBookEntryFlag@1500031();
    VAR
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163849]  TCS e-filing changes with respect to FVU 3.3 - Verify Book Entry flag in Revised Form 27EQ
      // [FEATURE] [eTCS Transactions]

      // [GIVEN] Created Income Tax accounting period , NODNOC ,TCS Nature of Collection , Assesse Code , TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;
      CreatePANReferenceNo;

      // [WHEN] Create Sales order and Post , TCS Payment Update , Update TCS Challan Details , Genrate Form 27EQ Report , e-TCS
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlersInForm27EQ(DocumentNo);
      REPORT.RUN(REPORT::"Form 27EQ");
      GenerateeTCS(1,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));

      // [THEN] File for Generate eTDS has been created and No error report should be generated.
      VerifyValuesOnTCSBatchHeader(LibraryTCS.GetCurrentFinancialYear);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler,CorrectForm27EQRequestPageHandler,GenerateCorrectCollectorRecordModalPageHandler,RevisedForm27EQRequestPageHandler,GenerateRevisedeTCS27EQRequestPageHandler)]
    PROCEDURE VerifyBookEntryFlagInRevisedForm27EQ@1500032();
    VAR
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163849]  TCS e-filing changes with respect to FVU 3.3 - Verify Book Entry flag in Revised Form 27EQ
      // [FEATURE] [Revised eTCS Transactions]

      // [GIVEN] Created Income Tax accounting period , NODNOC ,TCS Nature of Collection , Assesse Code , TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;
      CreatePANReferenceNo;

      // [WHEN] Create Sales order and Post , TCS Payment Update , Update TCS Challan Details , Genrate Form 27EQ Report , e-TCS and Correct 27EQ Entries Report , Form 27EQ Correction Report , Revised e-TCS 27EQ
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      GenerateForm27EQAndeTCSeFile(DocumentNo,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));
      UpdateFormCorrect27EQEntries(1);
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
      GenerateRevisedForm27EQAndeTCS(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5));

      // [THEN] File for Revised Generate eTDS has been created and No error report should be generated.
      VerifyValuesOnTCSBatchHeader(LibraryTCS.GetCurrentFinancialYear);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,GenerateFileeTCSRequestPageHandler,GenerateReturnStatusModalPageHandler,RevisedForm27EQRequestPageHandler,CorrectForm27EQRequestPageHandler,GenerateCorrectCollectorRecordModalPageHandler,GenerateRevisedeTCS27EQRequestPageHandler,GenerateRevisedFileeTCS27EQRequestPageHandler)]
    PROCEDURE CheckGenerateRevisedeTCSReturnStatus@1500006();
    VAR
      DocumentNo@1500006 : Code[20];
      PreviousRRRNo@1500000 : Code[20];
      OriginalRRRNo@1500001 : Code[20];
    BEGIN
      // [SCENARIO 163776] Check if system is maintaining a history of revised returns
      // [FEATURE] [Revised eTCS Transactions]

      // [GIVEN] Created Income Tax accounting period , NODNOC ,TCS Nature of Collection , Assesse Code , TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;

      // [WHEN] Create Sales order and Post , Update TCS Challan Details , Genrate Form 27EQ Report , e-TCS and Correct 27EQ Entries Report,Revised e-TCS 27EQ
      CreateAndPostSalesDocWithTCSAndUpdateChallanRegister(DocumentNo);
      OriginalRRRNo := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5);
      PreviousRRRNo := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(5,0),1,5);
      GenerateForm27EQAndeTCSeFile(DocumentNo,PreviousRRRNo);
      GenerateeTCS(3,PreviousRRRNo);
      VerifyReturnStatusInGeneratedeTCSAndFileeTCS(FALSE,PreviousRRRNo,OriginalRRRNo);
      UpdateFormCorrect27EQEntries(1);
      REPORT.RUN(REPORT::"Correct 27EQ Entries");
      GenerateRevisedForm27EQAndeTCS(OriginalRRRNo);
      GenerateRevisedeTCS(2,OriginalRRRNo);
      GenerateRevisedeTCS(3,OriginalRRRNo);

      // [THEN] Verified TCS Return Status window : Financial Year , Quarter , Filing Date ,Revised eTCS Filing Date ,Revised ,Original RRR No ,Previous RRR No
      VerifyReturnStatusInGeneratedeTCSAndFileeTCS(TRUE,PreviousRRRNo,OriginalRRRNo);
    END;

    LOCAL PROCEDURE Initialize@1500039();
    BEGIN
      LibrarySetupStorage.Restore;
      RollbackChangesMadeToDataBase;
      IF isInitialized THEN
        EXIT;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      isInitialized := TRUE;
      COMMIT;
      CompanyInformation.GET;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);
      LibraryTCS.UpdateAccountNumberInTCSSetup(TCSSetup);
    END;

    LOCAL PROCEDURE InitializeSetup@1500017();
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithTCS@1500062() : Code[20];
    VAR
      SalesHeader@1500000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      CreateSalesLine(SalesHeader);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithTCSAndUpdateChallanRegister@1500035(VAR DocumentNo@1500004 : Code[20]);
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      DocumentNo := CreateAndPostSalesDocWithTCS;
      CreatePaymentJournalWithPayTCS(GenJournalLine);
      UpdateTCSRegisterDetails(GenJournalLine."Document No.");
      UpdateTCSChallanDetails(GenJournalLine."Document No.");
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePaymentJournalWithPayTCS@1500012(VAR GenJournalLine@1500086 : Record 81);
    VAR
      GenJournalTemplate@1500091 : Record 80;
      GenJournalBatch@1500092 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(GenJournalTemplate.Name);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalLine DO BEGIN
        LibraryJournals.CreateGenJournalLine(
          GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,"Document Type"::Payment,
          "Account Type"::"G/L Account",TCSSetup."TCS Account No.","Bal. Account Type"::"Bank Account",
          LibraryERM.CreateBankAccountNo,0);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
        VALIDATE("Pay TCS",TRUE);
        MODIFY(TRUE);
      END;
      PayTCS(GenJournalBatch.Name);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateSalesLine@1500009(SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandInt(10));
      WITH SalesLine DO BEGIN
        VALIDATE("Unit Price",LibraryRandom.RandInt(1000));
        VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePANReferenceNo@1500025();
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      Customer.GET(NodNocHeader."No.");
      WITH Customer DO BEGIN
        VALIDATE("P.A.N. Status","P.A.N. Status"::PANAPPLIED);
        VALIDATE("P.A.N. Reference No.",
          LibraryUtility.GenerateRandomCode(FIELDNO("P.A.N. Reference No."),DATABASE::Customer));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PayTCS@1500013(JournalBatchName@1500126 : Code[20]);
    VAR
      PaymentJournal@1500127 : TestPage 256;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      PaymentJournal.Action1500045.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE UpdateTCSRegisterDetails@1500050(PayTCSDocNo@1500001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(PayTCSDocNo);
      COMMIT;
      REPORT.RUN(REPORT::"Update TCS Challan Details");
    END;

    LOCAL PROCEDURE UpdateTCSChallanDetails@1500007(PayTCSDocNo@1500001 : Code[20]);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
      UpdateTCSChallanRegister@1500002 : Report 16522;
      UpdatedTCSAmount@1500003 : Decimal;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegister.FINDFIRST;
      UpdatedTCSAmount := LibraryRandom.RandDec(100,2);
      UpdateTCSChallanRegister.SETTABLEVIEW(TCSChallanRegister);
      UpdateTCSChallanRegister.UpdateChallan(UpdatedTCSAmount,UpdatedTCSAmount,UpdatedTCSAmount,TCSChallanRegister."Entry No.");
      UpdateTCSChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateTCSChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE GenerateForm27EQAndeTCSeFile@1500026(DocumentNo@1500000 : Code[20];PreviousRRRNo@1500002 : Code[20]);
    BEGIN
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlersInForm27EQ(DocumentNo);
      REPORT.RUN(REPORT::"Form 27EQ");
      GenerateeTCS(1,PreviousRRRNo);
      GenerateeTCS(2,PreviousRRRNo);
    END;

    LOCAL PROCEDURE GenerateRevisedForm27EQAndeTCS@1500029(OriginalRRRNo@1500000 : Code[20]);
    BEGIN
      LibraryVariableStorage.Clear;
      REPORT.RUN(REPORT::"Form 27EQ Correction");
      GenerateRevisedeTCS(1,OriginalRRRNo);
    END;

    LOCAL PROCEDURE GenerateeTCS@1500067(FieldNumber@1500001 : Integer;PreviousRRRNo@1500004 : Code[20]);
    VAR
      GenerateETCS@1500002 : TestPage 16528;
      CurrentQtr@1500000 : Option;
    BEGIN
      GenerateETCS.OPENEDIT;
      GenerateETCS.GenerateForm.SETVALUE(TRUE);
      LibraryTCS.GetCurrentQuarter(CurrentQtr);
      LibraryVariableStorage.Enqueue(CurrentQtr);
      LibraryVariableStorage.Enqueue(LibraryTCS.GetCurrentFinancialYear);
      CASE FieldNumber OF
        1:
          GenerateETCS.Action1500005.INVOKE;
        2:
          BEGIN
            LibraryVariableStorage.Enqueue(PreviousRRRNo);
            GenerateETCS."File e-TDS".INVOKE;
          END;
        3:
          GenerateETCS.Action1500010.INVOKE;
      END;
    END;

    LOCAL PROCEDURE GenerateRevisedeTCS@1500008(FieldNumber@1500001 : Integer;OriginalRRRNo@1500004 : Code[20]);
    VAR
      GenerateRevisedeTCS@1500002 : TestPage 16532;
      CurrentQtr@1500000 : Option;
    BEGIN
      LibraryTCS.GetCurrentQuarter(CurrentQtr);
      LibraryVariableStorage.Enqueue(CurrentQtr);
      LibraryVariableStorage.Enqueue(LibraryTCS.GetCurrentFinancialYear);
      GenerateRevisedeTCS.OPENEDIT;
      GenerateRevisedeTCS.GenerateForm.SETVALUE(TRUE);
      CASE FieldNumber OF
        1:
          GenerateRevisedeTCS.Action1500006.INVOKE;
        2:
          BEGIN
            LibraryVariableStorage.Enqueue(OriginalRRRNo);
            GenerateRevisedeTCS."File e-TDS".INVOKE;
          END;
        3:
          GenerateRevisedeTCS.Action1500011.INVOKE;
      END;
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500027();
    VAR
      TCSChallanRegister@1500003 : Record 16516;
      TCSEntry@1500002 : Record 16514;
      TCSBatchHeader@1500001 : Record 16515;
      Form27EQEntry@1500000 : Record 16517;
    BEGIN
      TCSChallanRegister.DELETEALL;
      Form27EQEntry.DELETEALL;
      TCSEntry.DELETEALL;
      TCSBatchHeader.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateFormCorrect27EQEntries@1500000(FieldNumber@1500000 : Integer);
    VAR
      CurrentQtr@1500001 : Option;
      CorrectionType@1500002 : ' ,Collector,Party';
    BEGIN
      LibraryTCS.GetCurrentQuarter(CurrentQtr);
      CASE FieldNumber OF
        1:
          CorrectionType := CorrectionType::Collector;
        2:
          CorrectionType := CorrectionType::Party;
      END;
      LibraryVariableStorage.Enqueue(CurrentQtr);
      LibraryVariableStorage.Enqueue(LibraryTCS.GetCurrentFinancialYear);
      LibraryVariableStorage.Enqueue(CorrectionType);
    END;

    LOCAL PROCEDURE ValidateFormCorrect2627EQEntries@1500022(FieldNumber@1500000 : Integer;FinancialYear@1500001 : Code[6];CorrectionTypeValue@1500005 : Option);
    VAR
      Quarter@1500002 : ' ,Q1,Q2,Q3,Q4';
      CorrectionType@1500004 : ' ,Collector,Party';
    BEGIN
      LibraryTCS.GetCurrentQuarter(Quarter);
      CorrectionType := CorrectionTypeValue;
      CASE FieldNumber OF
        1:
          Quarter := Quarter::" ";
        2:
          FinancialYear := '';
        3:
          CorrectionType := CorrectionType::" ";
      END;
      LibraryVariableStorage.Enqueue(Quarter);
      LibraryVariableStorage.Enqueue(FinancialYear);
      LibraryVariableStorage.Enqueue(CorrectionType);
    END;

    LOCAL PROCEDURE VerifyReportDetailCorrect27EQEntries@1500019(FinancialYear@1500000 : Code[6]);
    VAR
      TCSBatchHeader@1500001 : Record 16515;
    BEGIN
      TCSBatchHeader.SETRANGE("Financial Year",FinancialYear);
      TCSBatchHeader.FINDLAST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TCS_Batch_Header__Collector_Address_',
        TCSBatchHeader."Collector Address");
    END;

    LOCAL PROCEDURE VerifyValuesOnTCSBatchHeader@1500034(FinancialYear@1500001 : Code[6]);
    VAR
      TCSBatchHeader@1500002 : Record 16515;
    BEGIN
      TCSBatchHeader.SETRANGE("Financial Year",FinancialYear);
      TCSBatchHeader.FINDLAST;
      Assert.AreEqual(
        CompanyInformation."T.C.A.N. No.",TCSBatchHeader."Collector T.C.A.N. No.",STRSUBSTNO(CompanyInformation."T.C.A.N. No.",
          TCSBatchHeader."Collector T.C.A.N. No.",ValueNotFoundErr));
      Assert.AreEqual(
        CompanyInformation."Phone No.",TCSBatchHeader."Collector Phone No.",STRSUBSTNO(CompanyInformation."Phone No.",
          TCSBatchHeader."Collector Phone No.",ValueNotFoundErr));
    END;

    LOCAL PROCEDURE VerifyReturnStatusInGeneratedeTCSAndFileeTCS@1500037(TCSeFileTCS@1500000 : Boolean;PreviousRRRNo@1500005 : Code[20];OriginalRRRNo@1500002 : Code[20]);
    VAR
      TCSBatchHeader@1500001 : Record 16515;
      FinancialYearQuarter@1500004 : Option;
    BEGIN
      TCSBatchHeader.SETRANGE("Financial Year",LibraryTCS.GetCurrentFinancialYear);
      TCSBatchHeader.FINDFIRST;
      LibraryTCS.GetCurrentQuarter(FinancialYearQuarter);
      Assert.AreEqual(LibraryTCS.GetCurrentFinancialYear,TCSBatchHeader."Financial Year",ValueErr);
      Assert.AreEqual(FinancialYearQuarter,TCSBatchHeader.Quarter,ValueErr);
      Assert.AreEqual(WORKDATE,TCSBatchHeader."Filing Date",ValueErr);
      IF TCSeFileTCS THEN BEGIN
        Assert.AreEqual(WORKDATE,TCSBatchHeader."Revised eTCS Filing Date",ValueErr);
        Assert.AreEqual(TRUE,TCSBatchHeader.Revised,ValueErr);
        Assert.AreEqual(PreviousRRRNo,TCSBatchHeader."Original RRR No.",ValueErr);
        Assert.AreEqual(OriginalRRRNo,TCSBatchHeader."Previous RRR No.",ValueErr);
        Assert.AreEqual(1,TCSBatchHeader."No. of Revision",ValueErr);
      END ELSE BEGIN
        Assert.AreEqual(0D,TCSBatchHeader."Revised eTCS Filing Date",ValueErr);
        Assert.AreEqual(FALSE,TCSBatchHeader.Revised,ValueErr);
        Assert.AreEqual(PreviousRRRNo,TCSBatchHeader."Original RRR No.",ValueErr);
        Assert.AreEqual('',TCSBatchHeader."Previous RRR No.",ValueErr);
        Assert.AreEqual(0,TCSBatchHeader."No. of Revision",ValueErr);
      END;
    END;

    LOCAL PROCEDURE EnqueueValuesInFormReqPageHandlersInForm27EQ@1500015(DocumentNo@1500001 : Code[20]);
    VAR
      Form27EQEntry@1500002 : Record 16517;
    BEGIN
      Form27EQEntry.SETRANGE("Document No.",DocumentNo);
      Form27EQEntry.FINDFIRST;
      LibraryVariableStorage.Enqueue(Form27EQEntry.Quarter);
      LibraryVariableStorage.Enqueue(Form27EQEntry."Financial Year");
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500018(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    VAR
      GeneralJournalTemplateName@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GenerateReturnStatusModalPageHandler@1500011(VAR TCSReturnStatus@1500000 : TestPage 16530);
    BEGIN
      TCSReturnStatus.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GenerateCorrectPartyRecordModalPageHandler@1500002(VAR CorrectPartyRecord@1500000 : TestPage 16531);
    BEGIN
      CorrectPartyRecord."Party Name".SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      CorrectPartyRecord."Party P.A.N. No.".SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      CorrectPartyRecord.Action1500231.INVOKE;
      CorrectPartyRecord.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GenerateCorrectCollectorRecordModalPageHandler@1500004(VAR CorrectCollectorRecord@1500000 : TestPage 16533);
    BEGIN
      CorrectCollectorRecord."Collector Address".SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      CorrectCollectorRecord."Collector P.A.N. No.".SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      CorrectCollectorRecord.Action1500129.INVOKE;
      CorrectCollectorRecord.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateChallanDetailsRequestPageHandler@1500089(VAR UpdateTCSChallanDetails@1500005 : TestRequestPage 16520);
    VAR
      PaymentDocNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PaymentDocNo);
      UpdateTCSChallanDetails.Control1500001.SETVALUE(PaymentDocNo);
      UpdateTCSChallanDetails.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(3,0),1,3));
      UpdateTCSChallanDetails.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSChallanDetails.Control1500009.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7));
      UpdateTCSChallanDetails.Control1500010.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(3,0),1,3));
      UpdateTCSChallanDetails.Control1500012.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form27EQRequestPageHandler@1500016(VAR Form27EQ@1500004 : TestRequestPage 16518);
    VAR
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form27EQ.Control1500010.SETVALUE(CompanyInformation."T.C.A.N. No.");
      Form27EQ.Control1500004.SETVALUE(FinancialYearQuarter);
      Form27EQ.Control1500012.SETVALUE(FinancialYear);
      Form27EQ.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form27EQ.Control1500001.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form27EQ.Control1500000.SETVALUE(WORKDATE);
      Form27EQ."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27EQ.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27EQ.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTCSRequestPageHandler@1500020(VAR GenerateeTCS27EQ@1500005 : TestRequestPage 16524);
    VAR
      FileManagement@1500004 : Codeunit 419;
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
      Filename@1500002 : Text;
    BEGIN
      Filename := FileManagement.ServerTempFileName('txt');
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      GenerateeTCS27EQ.FileName.SETVALUE(Filename);
      GenerateeTCS27EQ.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      GenerateeTCS27EQ.Control1500005.SETVALUE(FinancialYearQuarter);
      GenerateeTCS27EQ.Control1500013.SETVALUE(FinancialYear);
      GenerateeTCS27EQ.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS27EQ.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS27EQ.Control1500011.SETVALUE(WORKDATE);
      GenerateeTCS27EQ."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTCS27EQ.Control2.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS27EQ.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS27EQ.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTCS27EQ.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateFileeTCSRequestPageHandler@1500001(VAR UpdateTCSFiling@1500005 : TestRequestPage 16525);
    VAR
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
      OriginalRRRNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(OriginalRRRNo);
      UpdateTCSFiling.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      UpdateTCSFiling.Control1500001.SETVALUE(FinancialYearQuarter);
      UpdateTCSFiling.Control1500000.SETVALUE(FinancialYear);
      UpdateTCSFiling.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSFiling.Control1500006.SETVALUE(OriginalRRRNo);
      UpdateTCSFiling.OK.INVOKE
    END;

    [RequestPageHandler]
    PROCEDURE CorrectForm27EQRequestPageHandler@1500021(VAR Correct27EQEntries@1500001 : TestRequestPage 16523);
    VAR
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500002 : Variant;
      CorrectionType@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(CorrectionType);
      Correct27EQEntries.Control1500007.SETVALUE(FinancialYearQuarter);
      Correct27EQEntries.Control1500005.SETVALUE(FinancialYear);
      Correct27EQEntries.Control1500002.SETVALUE(CorrectionType);
      Correct27EQEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Correct2627EQEntriesPageHandler@1500036(VAR Correct26Q27QEntries@1500000 : TestRequestPage 16502);
    VAR
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500002 : Variant;
      CorrectionType@1500001 : Variant;
      FormNo@1500004 : '26Q,27Q';
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(CorrectionType);
      Correct26Q27QEntries.Control1500002.SETVALUE(FinancialYearQuarter);
      Correct26Q27QEntries.Control1500003.SETVALUE(FinancialYear);
      Correct26Q27QEntries.Control1500004.SETVALUE(CorrectionType);
      Correct26Q27QEntries.Control1500006.SETVALUE(FormNo::"26Q");
      Correct26Q27QEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RevisedForm27EQRequestPageHandler@1500033(VAR Form27EQCorrection@1500004 : TestRequestPage 16521);
    VAR
      FinancialYearQuarter@1500001 : Option;
      FinancialYear@1500000 : Code[10];
    BEGIN
      LibraryTCS.GetCurrentQuarter(FinancialYearQuarter);
      FinancialYear := LibraryTCS.GetCurrentFinancialYear;
      Form27EQCorrection.Control1500010.SETVALUE(CompanyInformation."T.C.A.N. No.");
      Form27EQCorrection.Control1500004.SETVALUE(FinancialYearQuarter);
      Form27EQCorrection.Control1500012.SETVALUE(FinancialYear);
      Form27EQCorrection.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form27EQCorrection.Control1500001.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form27EQCorrection.Control1500000.SETVALUE(WORKDATE);
      Form27EQCorrection."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27EQCorrection.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27EQCorrection.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedeTCS27EQRequestPageHandler@1500010(VAR GeneraterevisedeTCS27EQ@1500005 : TestRequestPage 16526);
    VAR
      FileManagement@1500004 : Codeunit 419;
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
      Filename@1500002 : Text;
    BEGIN
      Filename := FileManagement.ServerTempFileName('txt');
      FileManagement.DeleteServerFile(Filename);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      GeneraterevisedeTCS27EQ.FileName.SETVALUE(Filename);
      GeneraterevisedeTCS27EQ.Control1500011.SETVALUE(CompanyInformation."T.C.A.N. No.");
      GeneraterevisedeTCS27EQ.Control1500005.SETVALUE(FinancialYearQuarter);
      GeneraterevisedeTCS27EQ.Control1500013.SETVALUE(FinancialYear);
      GeneraterevisedeTCS27EQ.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GeneraterevisedeTCS27EQ.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GeneraterevisedeTCS27EQ.Control1500009.SETVALUE(WORKDATE);
      GeneraterevisedeTCS27EQ.Control2.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GeneraterevisedeTCS27EQ."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GeneraterevisedeTCS27EQ.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GeneraterevisedeTCS27EQ.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GeneraterevisedeTCS27EQ.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedFileeTCS27EQRequestPageHandler@1500028(VAR UpdateRevisedTCSFiling@1500005 : TestRequestPage 16527);
    VAR
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
      PreviousRRRNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(PreviousRRRNo);
      UpdateRevisedTCSFiling.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      UpdateRevisedTCSFiling.Control1500000.SETVALUE(FinancialYearQuarter);
      UpdateRevisedTCSFiling.Control1500007.SETVALUE(FinancialYear);
      UpdateRevisedTCSFiling.Control1500003.SETVALUE(WORKDATE);
      UpdateRevisedTCSFiling.Control1500005.SETVALUE(PreviousRRRNo);
      UpdateRevisedTCSFiling.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

