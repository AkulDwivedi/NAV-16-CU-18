OBJECT Codeunit 134381 ERM Dimension Priority
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryERM@1002 : Codeunit 131300;
      LibraryDimension@1005 : Codeunit 131001;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1009 : Codeunit 130509;
      LibraryService@1011 : Codeunit 131902;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryPlanning@1007 : Codeunit 132203;
      LibraryUtility@1012 : Codeunit 131000;
      LibraryJob@1010 : Codeunit 131920;
      isInitialized@1000 : Boolean;
      WrongDimValueCodeErr@1008 : TextConst 'ENU=Wrong dimension value code.';

    [Test]
    PROCEDURE PriorityAccount@26();
    BEGIN
      DifferentPriority(1,2);
    END;

    [Test]
    PROCEDURE PriorityCustomer@28();
    BEGIN
      DifferentPriority(2,1);
    END;

    [Test]
    PROCEDURE SamePriorityChangeCustomer@2();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1003 : Record 81;
      DefaultDimension@1006 : Record 352;
      CustomerNo@1004 : Code[20];
    BEGIN
      Initialize;
      GetGLBalancedBatch(GenJournalBatch);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create default dimension codes for Customer and G/L Account
      CreateDefaultDimensionCodes(CustomerNo,GenJournalBatch."Bal. Account No.");

      // Setup priorities
      SetupDimensionPriority(LibraryERM.FindGeneralJournalSourceCode,1,1);

      // Find default dimension codes
      FindDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo);

      // Create a journal line
      ClearJournalBatch(GenJournalBatch);
      CreateGeneralJnlLine(GenJournalLine,GenJournalBatch,CustomerNo);

      // Update customer on journal line
      GenJournalLine.VALIDATE("Account No.",CustomerNo);
      GenJournalLine.MODIFY(TRUE);

      // Verify dimensions
      VerifyDimensionSetID(DefaultDimension,GenJournalLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE SamePriorityChangeAccount@34();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1003 : Record 81;
      DefaultDimension@1006 : Record 352;
      CustomerNo@1004 : Code[20];
    BEGIN
      Initialize;
      GetGLBalancedBatch(GenJournalBatch);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create default dimension codes for Customer and G/L Account
      CreateDefaultDimensionCodes(CustomerNo,GenJournalBatch."Bal. Account No.");

      // Setup priorities
      SetupDimensionPriority(LibraryERM.FindGeneralJournalSourceCode,1,1);

      // Find default dimension codes
      FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GenJournalBatch."Bal. Account No.");

      // Create a journal line
      ClearJournalBatch(GenJournalBatch);
      CreateGeneralJnlLine(GenJournalLine,GenJournalBatch,CustomerNo);

      // Update account on journal line
      GenJournalLine.VALIDATE("Bal. Account No.",GenJournalLine."Bal. Account No.");
      GenJournalLine.MODIFY(TRUE);

      // Verify dimensions
      VerifyDimensionSetID(DefaultDimension,GenJournalLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE SetupDefaultDimensionPriority@1();
    VAR
      SourceCode@1000 : Code[10];
    BEGIN
      // Test setup default dimension priority.

      // Setup: Find Source Code.
      Initialize;
      SourceCode := LibraryERM.FindGeneralJournalSourceCode;

      // Exercise: Create default dimension priority 1 for Customer, 1 for Vendor and  2 for G/L Account with source code.
      SetDefaultDimensionPriority(SourceCode);

      // Verify: Verify default dimension priority for Customer, Vendor and G/L Account with Source Code must exist.
      VerifyDefaultDimensionPriority(SourceCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PriorityReqWkshAndCarryOutAction@4();
    VAR
      DimValueArray@1000 : ARRAY [3] OF Code[20];
      DimensionCode@1001 : Code[20];
      VendNo@1002 : Code[20];
      ItemNo@1003 : Code[20];
    BEGIN
      // Test that purchase order created by carry out action from requisition worskeet has correct dimensions according to dimension in requisition worksheet

      Initialize;
      SetupDimensionPriorityForPurchSrcCode;
      DimensionCode := CreateDimensionValues(DimValueArray);
      VendNo := CreateVendorWithPurchaserAndDefDim(DimensionCode,DimValueArray);
      ItemNo := CreateItemWithReplenishmentPociliyAndDefDim(DimensionCode,DimValueArray[3],VendNo);
      CreateReqLineAndCarryOutAction(ItemNo);
      VerifyDimValueInPurchLine(VendNo,DimensionCode,DimValueArray[2]);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE ReqWkshCarryOutActionWithChangedDim@36();
    VAR
      RequisitionLine@1005 : Record 246;
      DimValueArray@1000 : ARRAY [3] OF Code[20];
      DimensionCode@1001 : Code[20];
      VendNo@1002 : Code[20];
      ItemNo@1003 : Code[20];
      PrevGlobalDimCode@1006 : Code[20];
      ExpectedDimValue@1007 : Code[20];
    BEGIN
      // Test that purchase order line created by carry out action from requisition worskeet with changed dimension has dimension value from requisition worksheet

      // Setup.
      Initialize;
      SetupDimensionPriorityForPurchSrcCode;
      DimensionCode := CreateDimensionValues(DimValueArray);
      PrevGlobalDimCode := SetupGlobalDimension(1,DimensionCode);
      VendNo := CreateVendorWithPurchaserAndDefDim(DimensionCode,DimValueArray);
      ItemNo := CreateItemWithReplenishmentPociliyAndDefDim(DimensionCode,DimValueArray[3],VendNo);
      ExpectedDimValue := CreateReqLineWithCustomDimVal(RequisitionLine,ItemNo,DimensionCode);

      // Exercise.
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');

      // Verify.
      VerifyDimValueInPurchLine(VendNo,DimensionCode,ExpectedDimValue);

      // Teardown.
      SetupGlobalDimension(1,PrevGlobalDimCode);
    END;

    [Test]
    PROCEDURE JobPriorityJobJnlLineWithJobDefaultDim@20();
    VAR
      TableIDs@1000 : ARRAY [2] OF Integer;
      Priorities@1001 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job's Dimension Values if it has higher priority and it has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,2,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,1,FALSE);
    END;

    [Test]
    PROCEDURE JobPriorityJobJnlLineWithJobTaskDefaultDim@22();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job Task's Dimension Values if it has higher priority and it has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,2,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,2,TRUE);
    END;

    [Test]
    PROCEDURE ResourcePriorityJobJnlLineWithJobDefaultDim@30();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource's Dimension Values if Job has lower priority and line has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Job,2,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,FALSE);
    END;

    [Test]
    PROCEDURE ResourcePriorityJobJnlLineWithJobTaskDefaultDim@25();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource's Dimension Values if Job has lower priority and line has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Job,2,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,TRUE);
    END;

    [Test]
    PROCEDURE NoPriorityJobJnlLineWithJobDefaultDim@44();
    VAR
      TableIDs@1000 : ARRAY [2] OF Integer;
      Priorities@1001 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource Dimension Values if no priority specified and it has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,0,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,FALSE);
    END;

    [Test]
    PROCEDURE NoPriorityJobJnlLineWithJobTaskDefaultDim@41();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource Dimension Values if if no priority specified and it has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,0,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,TRUE);
    END;

    [Test]
    PROCEDURE NoJobPriorityJobJnlLineWithJobDefaultDim@51();
    VAR
      TableIDs@1000 : ARRAY [2] OF Integer;
      Priorities@1001 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource Dimension Values if Resource only has priority and it has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,FALSE);
    END;

    [Test]
    PROCEDURE NoJobPriorityJobJnlLineWithJobTaskDefaultDim@50();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Resource Dimension Values if Resource only has priority and it has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,TRUE);
    END;

    [Test]
    PROCEDURE NoResourcePriorityJobJnlLineWithJobDefaultDim@56();
    VAR
      TableIDs@1000 : ARRAY [2] OF Integer;
      Priorities@1001 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job's Dimension Values if Job has only priority and it has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,1,FALSE);
    END;

    [Test]
    PROCEDURE NoResourcePriorityJobJnlLineWithJobTaskDefaultDim@55();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job Task's Dimension Values if Job has only priority and it has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,2,TRUE);
    END;

    [Test]
    PROCEDURE SamePriorityJobJnlLineWithJobDefaultDim@64();
    VAR
      TableIDs@1000 : ARRAY [2] OF Integer;
      Priorities@1001 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job's Dimension Values if Job has the same priority as Resource and it has empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,FALSE);
    END;

    [Test]
    PROCEDURE SamePriorityJobJnlLineWithJobTaskDefaultDim@63();
    VAR
      TableIDs@1001 : ARRAY [2] OF Integer;
      Priorities@1000 : ARRAY [2] OF Integer;
    BEGIN
      // Verify that Job Journal Line contains Job Task's Dimension Values if Job has the same priority as Resource and it has non-empty Job Task No

      SetTablePriority(TableIDs,Priorities,DATABASE::Job,1,1);
      SetTablePriority(TableIDs,Priorities,DATABASE::Resource,1,2);
      PriorityJobJnlLineWithDefaultDim(TableIDs,Priorities,3,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ServiceOrderDimPrioritySalesPerson@58();
    VAR
      ServiceHeader@1001 : Record 5900;
      Dimension@1003 : Record 348;
      DimSetEntry@1008 : Record 480;
      SalesPersonCode@1005 : Code[10];
      ServiceContractCode@1002 : Code[20];
      CustomerCode@1006 : Code[20];
      ReturnDim@1009 : Code[20];
    BEGIN
      // [FEATURE] [Service Order]
      // [SCENARIO 380432] Inherit Sales Person's dimension if Sales Person Dimension priority is higher then Service Contract one
      Initialize;

      // [GIVEN] Sales Person "SP" with default dimension "DD1" where Priority = 1
      SetServiceDimensionPriorities(1,2);
      LibraryDimension.CreateDimension(Dimension);
      ReturnDim := CreateSalesPersonWithDimAndPriority(SalesPersonCode,Dimension.Code);

      // [GIVEN] Service Contract with dimension value "DD2" where Priority = 2
      CreateServiceContractWithDimAndPriority(ServiceContractCode,CustomerCode,Dimension.Code);

      // [GIVEN] Service Quote with Sales Person "SP"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,CustomerCode);
      ServiceHeader.VALIDATE("Salesperson Code",SalesPersonCode);
      ServiceHeader.MODIFY(TRUE);

      // [WHEN] Assign Service Contract to Service Quote
      ServiceHeader.VALIDATE("Contract No.",ServiceContractCode);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Service Quote dimension value is "DD1"
      LibraryDimension.FindDimensionSetEntry(DimSetEntry,ServiceHeader."Dimension Set ID");
      DimSetEntry.TESTFIELD("Dimension Value Code",ReturnDim);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ServiceOrderDimPriorityServiceContract@59();
    VAR
      ServiceHeader@1006 : Record 5900;
      Dimension@1005 : Record 348;
      DimSetEntry@1004 : Record 480;
      SalesPersonCode@1003 : Code[10];
      ServiceContractCode@1002 : Code[20];
      CustomerCode@1001 : Code[20];
      ReturnDim@1000 : Code[20];
    BEGIN
      // [FEATURE] [Service Order]
      // [SCENARIO 380432] Inherit Service Contract dimension if Service Contract Dimension priority is higher then Sales Person's one
      Initialize;

      // [GIVEN] Sales Person "SP" with default dimension "DD1" where Priority = 2
      SetServiceDimensionPriorities(2,1);
      LibraryDimension.CreateDimension(Dimension);
      CreateSalesPersonWithDimAndPriority(SalesPersonCode,Dimension.Code);

      // [GIVEN] Service Contract with dimension value "DD2" where Priority = 1
      ReturnDim := CreateServiceContractWithDimAndPriority(ServiceContractCode,CustomerCode,Dimension.Code);

      // [GIVEN] Service Quote with Sales Person "SP"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,CustomerCode);
      ServiceHeader.VALIDATE("Salesperson Code",SalesPersonCode);
      ServiceHeader.MODIFY(TRUE);

      // [WHEN] Assign Service Contract to Service Quote
      ServiceHeader.VALIDATE("Contract No.",ServiceContractCode);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Service Quote dimension value is "DD2"
      LibraryDimension.FindDimensionSetEntry(DimSetEntry,ServiceHeader."Dimension Set ID");
      DimSetEntry.TESTFIELD("Dimension Value Code",ReturnDim);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ServiceOrderSameDimPriorities@27();
    VAR
      ServiceHeader@1006 : Record 5900;
      Dimension@1005 : Record 348;
      DimSetEntry@1004 : Record 480;
      SalesPersonCode@1003 : Code[10];
      ServiceContractCode@1002 : Code[20];
      CustomerCode@1001 : Code[20];
      ReturnDim@1000 : Code[20];
    BEGIN
      // [FEATURE] [Service Order]
      // [SCENARIO 380432] Inherit Service Contract dimension if Service Contract Dimension priority it the same as Sales Person's one
      Initialize;

      // [GIVEN] Sales Person "SP" with default dimension "DD1" where Priority = 1
      SetServiceDimensionPriorities(1,1);
      LibraryDimension.CreateDimension(Dimension);
      CreateSalesPersonWithDimAndPriority(SalesPersonCode,Dimension.Code);

      // [GIVEN] Service Contract with dimension value "DD2" where Priority = 1
      ReturnDim := CreateServiceContractWithDimAndPriority(ServiceContractCode,CustomerCode,Dimension.Code);

      // [GIVEN] Service Quote with Sales Person "SP"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,CustomerCode);
      ServiceHeader.VALIDATE("Salesperson Code",SalesPersonCode);
      ServiceHeader.MODIFY(TRUE);

      // [WHEN] Assign Service Contract to Service Quote
      ServiceHeader.VALIDATE("Contract No.",ServiceContractCode);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Service Quote dimension value is "DD2"
      LibraryDimension.FindDimensionSetEntry(DimSetEntry,ServiceHeader."Dimension Set ID");
      DimSetEntry.TESTFIELD("Dimension Value Code",ReturnDim);
    END;

    LOCAL PROCEDURE Initialize@45();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ClearDimensionCombinations;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE DifferentPriority@47(CustomerPri@1000 : Integer;GLAccountPri@1001 : Integer);
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1004 : Record 81;
      DefaultDimension@1003 : Record 352;
      CustomerNo@1002 : Code[20];
    BEGIN
      Initialize;
      GetGLBalancedBatch(GenJournalBatch);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create default dimension codes for Customer and G/L Account
      CreateDefaultDimensionCodes(CustomerNo,GenJournalBatch."Bal. Account No.");

      // Setup priorities
      SetupDimensionPriority(LibraryERM.FindGeneralJournalSourceCode,CustomerPri,GLAccountPri);

      // Find default dimension codes
      IF CustomerPri < GLAccountPri THEN
        FindDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo)
      ELSE
        FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GenJournalBatch."Bal. Account No.");

      // Create a journal line
      ClearJournalBatch(GenJournalBatch);
      CreateGeneralJnlLine(GenJournalLine,GenJournalBatch,CustomerNo);

      // Verify dimensions
      VerifyDimensionSetID(DefaultDimension,GenJournalLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE PriorityJobJnlLineWithDefaultDim@69(TableIDs@1008 : ARRAY [2] OF Integer;Priorities@1001 : ARRAY [2] OF Integer;ExpectedDimValueIndex@1000 : Integer;FillJobTaskNo@1010 : Boolean);
    VAR
      Job@1002 : Record 167;
      JobTask@1003 : Record 1001;
      DefaultDimension@1004 : Record 352;
      ResourceNo@1005 : Code[20];
      DimValueArray@1007 : ARRAY [3] OF Code[20];
      DimensionCode@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      SetupDimensionPriorityForJobJnlSrcCode(TableIDs,Priorities);
      DimensionCode := CreateDimensionValues(DimValueArray);
      LibraryJob.CreateJob(Job);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Job,Job."No.",DimensionCode,DimValueArray[1]);
      LibraryJob.CreateJobTask(Job,JobTask);
      IF FillJobTaskNo THEN
        UpdateJobTaskDimension(JobTask,DimensionCode,DimValueArray[2]);
      ResourceNo := LibraryJob.CreateConsumable(0); // Use 0 for Resource
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Resource,ResourceNo,DimensionCode,DimValueArray[3]);

      // Exercise.
      IF NOT FillJobTaskNo THEN
        JobTask."Job Task No." := '';
      CreateJobJnlLine(JobTask,ResourceNo);

      // Verify.
      VerifyDimValueInJobJnlLine(Job."No.",JobTask."Job Task No.",DimensionCode,DimValueArray[ExpectedDimValueIndex]);
    END;

    LOCAL PROCEDURE CreateVendorWithPurchaserAndDefDim@38(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : ARRAY [3] OF Code[20]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
      Purchaser@1004 : Record 13;
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibrarySales.CreateSalesperson(Purchaser);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",Purchaser.Code,DimensionCode,DimensionValueCode[1]);

      Vendor.VALIDATE("Purchaser Code",Purchaser.Code);
      Vendor.MODIFY(TRUE);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Vendor,Vendor."No.",DimensionCode,DimensionValueCode[2]);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItemWithReplenishmentPociliyAndDefDim@39(DimensionCode@1001 : Code[20];DimensionValueCode@1000 : Code[20];VendNo@1002 : Code[20]) : Code[20];
    VAR
      Item@1003 : Record 27;
      DefaultDimension@1004 : Record 352;
    BEGIN
      WITH Item DO BEGIN
        LibraryInventory.CreateItem(Item);
        VALIDATE("Replenishment System","Replenishment System"::Purchase);
        VALIDATE("Reordering Policy","Reordering Policy"::"Fixed Reorder Qty.");
        VALIDATE("Reorder Quantity",1);
        VALIDATE("Vendor No.",VendNo);
        MODIFY(TRUE);
        LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Item,"No.",DimensionCode,DimensionValueCode);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateSalesPersonWithDimAndPriority@49(VAR SalespersonCode@1000 : Code[10];DimensionCode@1001 : Code[20]) : Code[20];
    VAR
      SalespersonPurchaser@1006 : Record 13;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",SalespersonPurchaser.Code,
        DimensionValue."Dimension Code",DimensionValue.Code);
      SalespersonCode := SalespersonPurchaser.Code;
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateServiceContractWithDimAndPriority@54(VAR ServiceContractCode@1001 : Code[20];VAR CustomerCode@1005 : Code[20];DimensionCode@1004 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
      ServiceContractHeader@1003 : Record 5965;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      CreateServiceContract(ServiceContractHeader);
      ServiceContractHeader."Dimension Set ID" :=
        LibraryDimension.CreateDimSet(ServiceContractHeader."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      ServiceContractHeader.MODIFY;
      ServiceContractCode := ServiceContractHeader."Contract No.";
      CustomerCode := ServiceContractHeader."Customer No.";
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateServiceContract@8(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.INIT;
      ServiceContractHeader."Contract Type" := ServiceContractHeader."Contract Type"::Contract;
      ServiceContractHeader."Contract No." :=
        LibraryUtility.GenerateRandomCode(ServiceContractHeader.FIELDNO("Contract No."),DATABASE::"Service Contract Header");
      ServiceContractHeader.Status := ServiceContractHeader.Status::Signed;
      ServiceContractHeader.VALIDATE("Customer No.",LibrarySales.CreateCustomerNo);
      ServiceContractHeader.INSERT;
      COMMIT;
    END;

    LOCAL PROCEDURE FindDefaultDimension@68(VAR DefaultDimension@1000 : Record 352;TableID@1001 : Integer;No@1002 : Code[20]);
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.FINDSET;
    END;

    LOCAL PROCEDURE SetupDimensionPriority@7(SourceCode@1001 : Code[10];CustomerPriority@1002 : Integer;GLAccountPriority@1003 : Integer);
    VAR
      DefaultDimensionPriority@1000 : Record 354;
    BEGIN
      WITH DefaultDimensionPriority DO BEGIN
        // Clear priorities setup
        SETRANGE("Source Code",SourceCode);
        DELETEALL;

        // Setup new priorities
        VALIDATE("Source Code",SourceCode);
        CreateDefaultDimPriority(DefaultDimensionPriority,DATABASE::Customer,CustomerPriority);
        CreateDefaultDimPriority(DefaultDimensionPriority,DATABASE::"G/L Account",GLAccountPriority);
      END;
    END;

    LOCAL PROCEDURE SetupDimensionPriorityForPurchSrcCode@16();
    VAR
      SourceCodeSetup@1000 : Record 242;
      DefaultDimensionPriority@1001 : Record 354;
    BEGIN
      SourceCodeSetup.GET;
      WITH DefaultDimensionPriority DO BEGIN
        SETRANGE("Source Code",SourceCodeSetup.Purchases);
        DELETEALL;

        VALIDATE("Source Code",SourceCodeSetup.Purchases);
        CreateDefaultDimPriority(DefaultDimensionPriority,DATABASE::"Salesperson/Purchaser",1);
        CreateDefaultDimPriority(DefaultDimensionPriority,DATABASE::Vendor,2);
        CreateDefaultDimPriority(DefaultDimensionPriority,DATABASE::Item,3);
      END;
    END;

    LOCAL PROCEDURE SetupDimensionPriorityForJobJnlSrcCode@35(TableIDs@1002 : ARRAY [2] OF Integer;Priorities@1003 : ARRAY [2] OF Integer);
    VAR
      SourceCodeSetup@1000 : Record 242;
      DefaultDimensionPriority@1001 : Record 354;
      i@1004 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      WITH DefaultDimensionPriority DO BEGIN
        SETRANGE("Source Code",SourceCodeSetup."Job Journal");
        DELETEALL;

        VALIDATE("Source Code",SourceCodeSetup."Job Journal");
        FOR i := 1 TO ARRAYLEN(TableIDs) DO
          CreateDefaultDimPriority(DefaultDimensionPriority,TableIDs[i],Priorities[i]);
      END;
    END;

    LOCAL PROCEDURE CreateDefaultDimPriority@14(VAR DefaultDimPriority@1000 : Record 354;TableID@1001 : Integer;Priority@1002 : Integer);
    BEGIN
      IF (TableID = 0) OR (Priority = 0) THEN
        EXIT;

      DefaultDimPriority.VALIDATE("Table ID",TableID);
      DefaultDimPriority.VALIDATE(Priority,Priority);
      DefaultDimPriority.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ClearDimensionCombinations@40();
    VAR
      DimensionCombination@1000 : Record 350;
    BEGIN
      DimensionCombination.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionValues@21(VAR DimensionValueArray@1000 : ARRAY [3] OF Code[20]) : Code[20];
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
      i@1003 : Integer;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      FOR i := 1 TO 3 DO BEGIN
        LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
        DimensionValueArray[i] := DimensionValue.Code;
      END;
      EXIT(DimensionValue."Dimension Code");
    END;

    LOCAL PROCEDURE CreateDefaultDimensionCodes@37(CustomerNo@1000 : Code[20];GLAccount@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
      Dimension@1003 : Record 348;
      i@1004 : Integer;
    BEGIN
      // Clear existing dimension setup to make room for our new setup
      ClearDefaultDimensionCodes(DATABASE::Customer,CustomerNo);
      ClearDefaultDimensionCodes(DATABASE::"G/L Account",GLAccount);

      // Setup special dimension values such that all cases exists:
      // Case 1: Dimension exist in customer, but not in Account
      // Case 2: Opposite of Case 1
      // Case 3: Dimension exists in both with same value
      // Case 4: Dimension exists in both with different value

      i := 0;
      Dimension.FINDSET;
      REPEAT
        IF i < Dimension.COUNT - 1 THEN
          LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo,Dimension.Code,
            GetDimensionValueCode(Dimension.Code,1));
        IF i > 0 THEN
          LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GLAccount,Dimension.Code,
            GetDimensionValueCode(Dimension.Code,i MOD 2));
        i += 1;
      UNTIL Dimension.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearDefaultDimensionCodes@42(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearDefaultDimensionPriorities@65(SourceCode@1000 : Code[10]);
    VAR
      DefaultDimensionPriority@1001 : Record 354;
    BEGIN
      DefaultDimensionPriority.SETRANGE("Source Code",SourceCode);
      DefaultDimensionPriority.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE GetDimensionValueCode@52(DimensionCode@1000 : Code[20];Number@1001 : Integer) : Code[20];
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
      DimensionValue.FINDSET;
      DimensionValue.NEXT(Number);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE GetGLBalancedBatch@5(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE ClearJournalBatch@11(GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      GenJournalLine.SETFILTER("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJnlLine@23(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;CustomerNo@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,
        GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,
        CustomerNo,
        -LibraryRandom.RandInt(1000));
    END;

    LOCAL PROCEDURE CreateJobJnlLine@46(JobTask@1000 : Record 1001;ResourceNo@1002 : Code[20]);
    VAR
      SourceCodeSetup@1003 : Record 242;
      JobJournalLine@1001 : Record 210;
    BEGIN
      SourceCodeSetup.GET;
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLine("Line Type"::Schedule,JobTask,JobJournalLine);
        VALIDATE("Source Code",SourceCodeSetup."Job Journal");
        VALIDATE(Type,Type::Resource);
        VALIDATE("No.",ResourceNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateJobTaskDimension@19(JobTask@1000 : Record 1001;DimensionCode@1001 : Code[20];DimensionValue@1002 : Code[20]);
    VAR
      JobTaskDimension@1003 : Record 1002;
    BEGIN
      WITH JobTaskDimension DO BEGIN
        GET(JobTask."Job No.",JobTask."Job Task No.",DimensionCode);
        VALIDATE("Dimension Value Code",DimensionValue);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE CreateReqLineAndCarryOutAction@9(ItemNo@1001 : Code[20]);
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      CreateReqLine(ReqLine,ItemNo);
      LibraryPlanning.CarryOutReqWksh(ReqLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CreateReqLineWithCustomDimVal@53(VAR RequisitionLine@1004 : Record 246;ItemNo@1001 : Code[20];DimensionCode@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      CreateReqLine(RequisitionLine,ItemNo);
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      RequisitionLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      RequisitionLine.MODIFY;
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE SetupGlobalDimension@66(DimIndex@1000 : Integer;NewDimCode@1001 : Code[20]) PrevDimCode : Code[20];
    VAR
      DimCodes@1002 : ARRAY [2] OF Code[20];
    BEGIN
      DimCodes[1] := LibraryERM.GetGlobalDimensionCode(1);
      DimCodes[2] := LibraryERM.GetGlobalDimensionCode(2);
      PrevDimCode := DimCodes[DimIndex];
      DimCodes[DimIndex] := NewDimCode;
      LibraryDimension.ChangeGlobalDimensions(DimCodes[1],DimCodes[2]);
    END;

    LOCAL PROCEDURE SetServiceDimensionPriorities@57(SalesPersonPriority@1000 : Integer;ServiceContractPriority@1001 : Integer);
    VAR
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      ClearDefaultDimensionPriorities(SourceCodeSetup."Service Management");
      CreateDefaultDimensionPriority(SourceCodeSetup."Service Management",DATABASE::"Salesperson/Purchaser",SalesPersonPriority);
      CreateDefaultDimensionPriority(SourceCodeSetup."Service Management",DATABASE::"Service Contract Header",ServiceContractPriority);
    END;

    LOCAL PROCEDURE CreateReqLine@12(VAR ReqLine@1002 : Record 246;ItemNo@1003 : Code[20]);
    VAR
      Item@1004 : Record 27;
      ReqWkshTemplate@1000 : Record 244;
      RequisitionWkshName@1001 : Record 245;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      Item.GET(ItemNo);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,WORKDATE,WORKDATE);
      FindReqLine(ReqLine,Item."No.");
    END;

    LOCAL PROCEDURE FindReqLine@15(VAR ReqLine@1001 : Record 246;ItemNo@1000 : Code[20]);
    BEGIN
      ReqLine.SETRANGE(Type,ReqLine.Type::Item);
      ReqLine.SETRANGE("No.",ItemNo);
      ReqLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchLine@13(VAR PurchLine@1001 : Record 39;VendNo@1002 : Code[20]);
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Buy-from Vendor No.",VendNo);
      PurchHeader.FINDLAST;
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindJobJnlLine@43(VAR JobJournalLine@1001 : Record 210;JobNo@1000 : Code[20];JobTaskNo@1002 : Code[20]);
    BEGIN
      WITH JobJournalLine DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task No.",JobTaskNo);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE SetTablePriority@32(VAR TableIDs@1006 : ARRAY [2] OF Integer;VAR Priorities@1001 : ARRAY [2] OF Integer;TableID@1000 : Integer;Priority@1002 : Integer;Index@1003 : Integer);
    BEGIN
      TableIDs[Index] := TableID;
      Priorities[Index] := Priority;
    END;

    LOCAL PROCEDURE VerifyDimensionSetID@24(VAR DefaultDimension@1000 : Record 352;DimensionSetID@1001 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      // Compare dimension set on the "Customer" / "G/L Account" to that on the journal line
      DefaultDimension.FINDSET;
      REPEAT
        DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
        DimensionSetEntry.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        Assert.AreEqual(DimensionSetEntry."Dimension Value Code",DefaultDimension."Dimension Value Code",'Dimension value mismatch');
      UNTIL DefaultDimension.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateDefaultDimensionPriority@6(SourceCode@1000 : Code[10];TableID@1002 : Integer;Priority@1003 : Integer);
    VAR
      DefaultDimensionPriority@1001 : Record 354;
    BEGIN
      LibraryDimension.CreateDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,TableID);
      DefaultDimensionPriority.VALIDATE(Priority,Priority);
      DefaultDimensionPriority.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDefaultDimensionPriority@29(VAR DefaultDimensionPriority@1000 : Record 354;SourceCode@1001 : Code[10];TableID@1002 : Integer);
    BEGIN
      DefaultDimensionPriority.SETRANGE("Source Code",SourceCode);
      DefaultDimensionPriority.SETRANGE("Table ID",TableID);
      DefaultDimensionPriority.FINDFIRST;
    END;

    LOCAL PROCEDURE SetDefaultDimensionPriority@3(SourceCode@1000 : Code[10]);
    BEGIN
      // Create default dimension priority 1 for Customer, 1 for Vendor and  2 for G/L Account must created with source code.
      ClearDefaultDimensionPriorities(SourceCode);
      CreateDefaultDimensionPriority(SourceCode,DATABASE::Customer,1);
      CreateDefaultDimensionPriority(SourceCode,DATABASE::Vendor,1);
      CreateDefaultDimensionPriority(SourceCode,DATABASE::"G/L Account",2);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@18(Message@1000 : Text);
    BEGIN
    END;

    LOCAL PROCEDURE VerifyDefaultDimensionPriority@31(SourceCode@1001 : Code[10]);
    VAR
      DefaultDimensionPriority@1000 : Record 354;
    BEGIN
      // Verify default dimension priority 1 for Customer, 1 for Vendor and  2 for G/L Account must created with source code.
      FindDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,DATABASE::Customer);
      DefaultDimensionPriority.TESTFIELD(Priority,1);
      FindDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,DATABASE::Vendor);
      DefaultDimensionPriority.TESTFIELD(Priority,1);
      FindDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,DATABASE::"G/L Account");
      DefaultDimensionPriority.TESTFIELD(Priority,2);
    END;

    LOCAL PROCEDURE VerifyDimValueInPurchLine@10(VendNo@1000 : Code[20];DimensionCode@1005 : Code[20];DimensionValueCode@1001 : Code[20]);
    VAR
      PurchLine@1003 : Record 39;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      FindPurchLine(PurchLine,VendNo);
      DimensionSetEntry.GET(PurchLine."Dimension Set ID",DimensionCode);
      Assert.AreEqual(DimensionValueCode,DimensionSetEntry."Dimension Value Code",WrongDimValueCodeErr);
    END;

    LOCAL PROCEDURE VerifyDimValueInJobJnlLine@33(JobNo@1002 : Code[20];JobTaskNo@1000 : Code[20];DimensionCode@1005 : Code[20];DimensionValueCode@1001 : Code[20]);
    VAR
      JobJournalLine@1003 : Record 210;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      FindJobJnlLine(JobJournalLine,JobNo,JobTaskNo);
      DimensionSetEntry.GET(JobJournalLine."Dimension Set ID",DimensionCode);
      Assert.AreEqual(DimensionValueCode,DimensionSetEntry."Dimension Value Code",WrongDimValueCodeErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@73(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Dimension Priority]

       1. Test setup default dimension priority.

       TFS_TS_ID = 264146
       Covers Test cases:
       ----------------------------------------------------------------
       Test Function Name                                       TFS ID
       ----------------------------------------------------------------
       SetupDefaultDimensionPriority                            199628
       PriorityReqWkshAndCarryOutAction                         67544
       ReqWkshCarryOutActionWithChangedDim                      360105

       TFS_TS_ID = 353576
       Covers Test cases:
       ----------------------------------------------------------------
       Test Function Name                                       TFS ID
       ----------------------------------------------------------------
       JobPriorityJobJnlLineWithJobDefaultDim                    85672
       JobPriorityJobJnlLineWithJobTaskDefaultDim                85672
       ResourcePriorityJobJnlLineWithJobDefaultDim               85672
       ResourcePriorityJobJnlLineWithJobTaskDefaultDim           85672
       NoPriorityJobJnlLineWithJobDefaultDim                     85672
       NoPriorityJobJnlLineWithJobTaskDefaultDim                 85672
       NoJobPriorityJobJnlLineWithJobDefaultDim                  85672
       NoJobPriorityJobJnlLineWithJobTaskDefaultDim              85672
       NoResourcePriorityJobJnlLineWithJobDefaultDim             85672
       NoResourcePriorityJobJnlLineWithJobTaskDefaultDim         85672
       SamePriorityJobJnlLineWithJobDefaultDim                   85672
       SamePriorityJobJnlLineWithJobTaskDefaultDim               85672
    }
    END.
  }
}

