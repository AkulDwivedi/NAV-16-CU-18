OBJECT Codeunit 137401 SCM Item Budget
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryFiscalYear@1001 : Codeunit 131302;
      LibraryInventory@1004 : Codeunit 132201;
      LibrarySales@1009 : Codeunit 130509;
      LibraryRandom@1003 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      ItemBudgetEntryMustExist@1006 : TextConst 'ENU=Item Budget Entry must exist.';
      PostingDescription@1002 : TextConst 'ENU=Posting Description';
      Quantity@1008 : Decimal;
      Amount@1007 : Decimal;

    [Test]
    [HandlerFunctions(DateCompItemBudgetEntriesHandler,DimensionSelectionHandler,ConfirmHandlerTrue)]
    PROCEDURE DateCompressItemBudgetEntries@5();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
    BEGIN
      // Test and verify Date Compress Item Budget Entries Report functionality.

      // Setup: Create Item Budget Entries.
      Initialize;
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,FindItemBudgetName,LibraryFiscalYear.GetFirstPostingDate(TRUE),
        CreateItem);
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,ItemBudgetEntry."Budget Name",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',LibraryFiscalYear.GetFirstPostingDate(TRUE)),
        ItemBudgetEntry."Item No.");
      ItemBudgetEntry.SETRANGE("Item No.",ItemBudgetEntry."Item No.");

      // Exercise: Run Date Compress Item Budget Entries.
      RunDateCompressItemBudgetEntries(ItemBudgetEntry);

      // Verify: Verify Compressed Item Budget Entry.
      ItemBudgetEntry.SETRANGE(Description,PostingDescription);
      Assert.IsTrue(ItemBudgetEntry.FINDFIRST,ItemBudgetEntryMustExist);
    END;

    [Test]
    PROCEDURE ItemBudgetEntryRoundingFactor@9();
    VAR
      Customer@1000 : Record 18;
      ItemBudgetEntry@1001 : Record 7134;
      SalesBudgetOverview@1002 : TestPage 7139;
      RoundingFactor@1003 : 'None,1,1000,1000000';
    BEGIN
      // Test functionality of Rounding Factor on Sales Budget Overview.

      // Setup: Create Item Budget Entry.
      Initialize;
      CreateItemBudgetEntry(ItemBudgetEntry);

      // Exercise: Run Sales Budget Overview.
      RunSalesBudgetOverview(
        SalesBudgetOverview,ItemBudgetEntry."Budget Name",Customer.TABLECAPTION,ItemBudgetEntry."Item No.",
        ItemBudgetEntry."Source No.",RoundingFactor::"1");

      // Verify: Verify Amount must be rounded with 1 precision.
      SalesBudgetOverview.MATRIX.Field1.ASSERTEQUALS(ROUND(ItemBudgetEntry."Sales Amount",1));
    END;

    [Test]
    PROCEDURE ItemBudgetEntryShowAsColumn@1();
    VAR
      ItemBudgetEntry@1001 : Record 7134;
      GeneralLedgerSetup@1000 : Record 98;
      SalesBudgetOverview@1002 : TestPage 7139;
      RoundingFactor@1003 : 'None,1,1000,1000000';
    BEGIN
      // Test functionality of Show As Column on Sales Budget Overview.

      // Setup: Create Item Budget Entry.
      Initialize;
      CreateItemBudgetEntry(ItemBudgetEntry);
      GeneralLedgerSetup.GET;

      // Exercise: Run Sales Budget Overview.
      RunSalesBudgetOverview(
        SalesBudgetOverview,ItemBudgetEntry."Budget Name",GeneralLedgerSetup."Global Dimension 1 Code",ItemBudgetEntry."Item No.",'',
        RoundingFactor::None);

      // Verify: Verify Amount must be zero.
      SalesBudgetOverview.MATRIX.Field1.ASSERTEQUALS(0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE SalesBudgetEntryWithDeletion@7();
    VAR
      Customer@1000 : Record 18;
      ItemBudgetEntry@1001 : Record 7134;
      SalesBudgetOverview@1002 : TestPage 7139;
      RoundingFactor@1003 : 'None,1,1000,1000000';
    BEGIN
      // Delete item budget entries and check overview amount is zero.

      // Setup: Create Item Budget Entry.
      Initialize;
      CreateItemBudgetEntry(ItemBudgetEntry);

      // Exercise: Run Sales Budget Overview and invoke Delete Budget.
      RunSalesBudgetOverview(
        SalesBudgetOverview,ItemBudgetEntry."Budget Name",Customer.TABLECAPTION,ItemBudgetEntry."Item No.",
        ItemBudgetEntry."Source No.",RoundingFactor::"1");
      SalesBudgetOverview.DeleteBudget.INVOKE;

      // Verify: Verify overview amount is zero after delete item budget entries.
      SalesBudgetOverview.MATRIX.Field1.ASSERTEQUALS(0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE SalesBudgetEntryWithoutDeletion@17();
    VAR
      Customer@1000 : Record 18;
      ItemBudgetEntry@1001 : Record 7134;
      SalesBudgetOverview@1002 : TestPage 7139;
      RoundingFactor@1003 : 'None,1,1000,1000000';
    BEGIN
      // Decline delete item budget entries and check overview amount is unchanged.

      // Setup: Create Item Budget Entry.
      Initialize;
      CreateItemBudgetEntry(ItemBudgetEntry);

      // Exercise: Run Sales Budget Overview and invoke Delete Budget.
      RunSalesBudgetOverview(
        SalesBudgetOverview,ItemBudgetEntry."Budget Name",Customer.TABLECAPTION,ItemBudgetEntry."Item No.",
        ItemBudgetEntry."Source No.",RoundingFactor::"1");
      SalesBudgetOverview.DeleteBudget.INVOKE;

      // Verify: Verify overview amount is unchanged after decline delete item budget entries.
      SalesBudgetOverview.MATRIX.Field1.ASSERTEQUALS(ROUND(ItemBudgetEntry."Sales Amount",1));  // Use 1 for Rounding Factor.
    END;

    [Test]
    [HandlerFunctions(DateCompItemBudgetEntriesHandler,DimensionSelectionHandler,ConfirmHandlerTrue)]
    PROCEDURE SalesBudgetOverviewWithCompressedItemBudgetEntries@11();
    VAR
      Customer@1003 : Record 18;
      ItemBudgetEntry@1002 : Record 7134;
      SalesBudgetOverview@1001 : TestPage 7139;
      RoundingFactor@1000 : 'None,1,1000,1000000';
    BEGIN
      // Test and verify Sales Budget Overview with compressed Item Budget Entries.

      // Setup: Create Item Budget Entries. Run Date Compress Item Budget Entries.
      Initialize;
      CreateItemBudgetEntryWithSourceNo(ItemBudgetEntry,FindItemBudgetName,CreateItem,LibrarySales.CreateCustomerNo);
      CreateItemBudgetEntryWithSourceNo(
        ItemBudgetEntry,ItemBudgetEntry."Budget Name",ItemBudgetEntry."Item No.",ItemBudgetEntry."Source No.");
      ItemBudgetEntry.SETRANGE("Item No.",ItemBudgetEntry."Item No.");
      RunDateCompressItemBudgetEntries(ItemBudgetEntry);

      // Exercise: Run Sales Budget Overview.
      RunSalesBudgetOverview(
        SalesBudgetOverview,ItemBudgetEntry."Budget Name",Customer.TABLECAPTION,ItemBudgetEntry."Item No.",
        ItemBudgetEntry."Source No.",RoundingFactor::"1");

      // Verify: Verify Amount must be zero on Sales Budget Overview Page.
      SalesBudgetOverview.MATRIX.Field1.ASSERTEQUALS(0);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisByDimMatrixForBudgetAmount@119();
    VAR
      ItemAnalysisView@1002 : Record 7152;
      ItemBudgetEntry@1005 : Record 7134;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      LibraryERM@1003 : Codeunit 131300;
      AnalysisViewListSales@1004 : TestPage 9371;
    BEGIN
      // Test to verify the Sales Amount and Quantity on Sales Analysis By Dim Matrix page with Budget.

      // Setup: Create Item Analysis View. Create and post a Sales Order as Ship and Invoice. Create Item Budget entry. Open Analysis View List Sales page and invoke Update Item Analysis View.
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      CreateAndPostSalesOrder(SalesHeader,SalesLine);
      Quantity := SalesLine.Quantity;  // Quantity is made Global as it is used in handler for verification.
      Amount := SalesLine."Line Amount";  // Amount is made Global as it is used in handler for verification.
      CreateItemBudgetEntryWithSourceNo(ItemBudgetEntry,FindItemBudgetName,SalesLine."No.",SalesHeader."Sell-to Customer No.");
      InvokeUpdateItemAnalysisViewOnAnalysisViewListSales(AnalysisViewListSales,ItemAnalysisView.Code);

      // Exercise: Open Sales Analysis By Dimensions page and invoke Show Matrix to open Sales Analysis By Dim Matrix page.
      InvokeShowMatrixOnSalesAnalysisByDimensions(AnalysisViewListSales,SalesLine."No.",ItemBudgetEntry."Budget Name");

      // Verify: Quantity and Amount on Sales Analysis by Dim Matrix page.
      // Verification is done in SalesAnalysisbyDimMatrixPageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(Quantity);
      CLEAR(Amount);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@42(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      Customer@1003 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(100,2)); // Use Random Quantity.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@3() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Inventory Posting Group",FindInventoryPostingSetup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemBudgetEntry@21(VAR ItemBudgetEntry@1000 : Record 7134);
    BEGIN
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,FindItemBudgetName,WORKDATE,CreateItem);
      ItemBudgetEntry.VALIDATE("Source Type",ItemBudgetEntry."Source Type"::Customer);
      ItemBudgetEntry.VALIDATE("Source No.",LibrarySales.CreateCustomerNo);
      ItemBudgetEntry.VALIDATE("Sales Amount",LibraryRandom.RandDec(100,2));  // Use Random Value.
      ItemBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemBudgetEntryWithSourceNo@12(VAR ItemBudgetEntry@1000 : Record 7134;BudgetName@1003 : Code[10];ItemNo@1001 : Code[20];SourceNo@1004 : Code[20]);
    BEGIN
      // Create Item Budget Entry with random Quantity, Cost Amount and Sales Amount.
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,BudgetName,LibraryFiscalYear.GetFirstPostingDate(TRUE),ItemNo);
      ItemBudgetEntry.VALIDATE("Source Type",ItemBudgetEntry."Source Type"::Customer);
      ItemBudgetEntry.VALIDATE("Source No.",SourceNo);
      ItemBudgetEntry.VALIDATE(Quantity,LibraryRandom.RandDec(100,2));
      ItemBudgetEntry.VALIDATE("Cost Amount",LibraryRandom.RandDec(100,2));
      ItemBudgetEntry.VALIDATE("Sales Amount",LibraryRandom.RandDec(100,2));
      ItemBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindInventoryPostingSetup@10() : Code[10];
    VAR
      InventoryPostingSetup@1000 : Record 5813;
    BEGIN
      InventoryPostingSetup.FINDFIRST;
      EXIT(InventoryPostingSetup."Invt. Posting Group Code");
    END;

    LOCAL PROCEDURE FindItemBudgetName@6() : Code[10];
    VAR
      ItemBudgetName@1000 : Record 7132;
    BEGIN
      ItemBudgetName.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area"::Sales);
      ItemBudgetName.FINDFIRST;
      EXIT(ItemBudgetName.Name);
    END;

    LOCAL PROCEDURE InvokeShowMatrixOnSalesAnalysisByDimensions@109(AnalysisViewListSales@1002 : TestPage 9371;ItemNo@1001 : Code[20];BudgetName@1003 : Code[10]);
    VAR
      SalesAnalysisbyDimensions@1000 : TestPage 7158;
    BEGIN
      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;
      SalesAnalysisbyDimensions.ItemFilter.SETVALUE(ItemNo);
      SalesAnalysisbyDimensions.BudgetFilter.SETVALUE(BudgetName);
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    LOCAL PROCEDURE InvokeUpdateItemAnalysisViewOnAnalysisViewListSales@77(VAR AnalysisViewListSales@1001 : TestPage 9371;ItemAnalysisViewCode@1000 : Code[10]);
    BEGIN
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisViewCode);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;
    END;

    LOCAL PROCEDURE RunDateCompressItemBudgetEntries@8(VAR ItemBudgetEntry@1002 : Record 7134);
    VAR
      DateCompItemBudgetEntries@1000 : Report 7139;
    BEGIN
      COMMIT;  // Commit required for batch reports.
      CLEAR(DateCompItemBudgetEntries);
      DateCompItemBudgetEntries.SETTABLEVIEW(ItemBudgetEntry);
      DateCompItemBudgetEntries.RUN;
    END;

    LOCAL PROCEDURE RunSalesBudgetOverview@25(VAR SalesBudgetOverview@1001 : TestPage 7139;CurrentBudgetName@1003 : Code[10];ColumnDimCode@1004 : Text[30];ItemFilter@1002 : Code[20];CustomerFilter@1005 : Code[20];RoundingFactor@1000 : Option);
    BEGIN
      SalesBudgetOverview.OPENEDIT;
      SalesBudgetOverview.CurrentBudgetName.SETVALUE(CurrentBudgetName);
      SalesBudgetOverview.ColumnDimCode.SETVALUE(ColumnDimCode);
      SalesBudgetOverview.ItemFilter.SETVALUE(ItemFilter);
      SalesBudgetOverview.SalesCodeFilterCtrl.SETVALUE(CustomerFilter);
      SalesBudgetOverview.RoundingFactor.SETVALUE(RoundingFactor);
      SalesBudgetOverview.ShowColumnName.SETVALUE(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE DateCompItemBudgetEntriesHandler@2(VAR DateCompItemBudgetEntries@1000 : TestRequestPage 7139);
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      DateCompItemBudgetEntries.StartingDate.SETVALUE(LibraryFiscalYear.GetFirstPostingDate(TRUE));
      DateCompItemBudgetEntries.EndingDate.SETVALUE(LibraryFiscalYear.GetLastPostingDate(TRUE));
      DateCompItemBudgetEntries.PeriodLength.SETVALUE(DateComprRegister."Period Length"::Week);
      DateCompItemBudgetEntries.PostingDescription.SETVALUE(PostingDescription);
      DateCompItemBudgetEntries.RetainDimensions.ASSISTEDIT;
      DateCompItemBudgetEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionHandler@67(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      // Set Dimension Selection Multiple for all the rows.
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixPageHandler@128(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    BEGIN
      SalesAnalysisbyDimMatrix.TotalQuantity.ASSERTEQUALS(-Quantity);
      SalesAnalysisbyDimMatrix.TotalInvtValue.ASSERTEQUALS(Amount);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@72(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@14(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Budget] [SCM]
       1. Test and verify Date Compress Item Budget Entries Report functionality.
       2. Test functionality of Rounding Factor on Sales Budget Overview.
       3. Test functionality of Show As Column on Sales Budget Overview.
       4. Delete item budget entries and check overview amount is zero.
       5. Decline delete item budget entries and check overview amount is unchanged.
       6. Test and verify Sales Budget Overview with compressed Item Budget Entries.
       7. Test to verify the Sales Amount and Quantity on Sales Analysis By Dim Matrix page with Budget.

      TFS_TS_ID = 268546
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      DateCompressItemBudgetEntries                                                          143431

      TFS_TS_ID = 268544
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      ItemBudgetEntryRoundingFactor                                                          235204
      ItemBudgetEntryShowAsColumn                                                            235205
      SalesBudgetEntryWithDeletion                                                           235206
      SalesBudgetEntryWithoutDeletion                                                        235207

      TFS_TS_ID = 267695
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      SalesBudgetOverviewWithCompressedItemBudgetEntries                                     129126

      TFS_TS_ID = 268543
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      SalesAnalysisByDimMatrixForBudgetAmount                                                141547
    }
    END.
  }
}

