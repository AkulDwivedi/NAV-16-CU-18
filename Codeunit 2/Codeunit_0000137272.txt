OBJECT Codeunit 137272 SCM Reservation V
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1012 : Codeunit 130000;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryItemTracking@1009 : Codeunit 130502;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1006 : Codeunit 130509;
      LibraryVariableStorage@1003 : Codeunit 131004;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      ExpectedMessage@1035 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      WrongQuantityErr@1002 : TextConst 'ENU=Wrong Quantity in Purchase Line for Item %1.';
      ReservEntryExistenceErr@1005 : TextConst 'ENU=Reservation entry existence is wrong.';
      ReservEntryQtyErr@1008 : TextConst 'ENU=Wrong Quantity in Reservation Entry.';

    [Test]
    [HandlerFunctions(CreateReturnRelatedDocumentsReportHandler)]
    PROCEDURE PurchOrdCreatedFromSalesRetOrd@4();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify Posted Purchase Order created from Sales Return Order.

      // Setup: Create Purchase Order from Sales Return Order.
      Initialize;
      CreateSalesRetOrderWithRetRelatedDocuments(LibrarySales.CreateCustomerNo,SalesLine,FALSE,TRUE,FALSE);

      // Exercise.
      CreateAndPostWhseReceipt(SalesLine);

      // Verify: Verify Purchase Receipt Line.
      VerifyPurchaseReceiptLine(SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(CreateReturnRelatedDocumentsReportHandler,ReservationPageHandler,CreditMemoConfirmHandler)]
    PROCEDURE PurchRetOrdCreatedFromSalesRetOrd@82();
    VAR
      PurchaseHeader@1012 : Record 38;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      // Verify Posted Purchase Return Order created from Sales Return Order.

      // Setup: Create Purchase Return Order from Sales Return Order, Release Purchase Return Order with Reserve, create And post Warehouse Receipt, create Warehouse Shipment with Pick.
      Initialize;
      CreateSalesRetOrderWithRetRelatedDocuments(LibrarySales.CreateCustomerNo,SalesLine,TRUE,FALSE,FALSE);
      ReleasePurchaseReturnOrderWithReserve(PurchaseHeader,SalesLine."Document Type",SalesLine."No.");
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CreateAndPostWhseReceiptForSalesReturnOrder(SalesHeader,SalesLine."Location Code");
      RegisterWarehouseActivity(WarehouseActivityHeader.Type::"Put-away",SalesLine."Location Code");
      CreateWarehouseShipmentWithPick(PurchaseHeader,SalesLine."Location Code");

      // Excercise: Post Sales Return Order.

      PostSalesDocument(SalesLine."Document Type",SalesLine."Document No.");

      // Verify: Verify Return Receipt Line.
      VerifyReturnReceiptLine(SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(CreateReturnRelatedDocumentsReportHandler,ReservationPageHandler,CreditMemoConfirmHandler)]
    PROCEDURE SalesOrdCreatedFromSalesRetOrd@11();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify Posted Sales Order created from Sales Return Order.

      // Setup: Create Sales Order from Sales Return Order, post Sales Return Order, release Sales Orders with Reserve, create and post Warehouse Receipt, create Warehouse Shipment with Pick.
      Initialize;
      CreateSalesRetOrderWithRetRelatedDocuments(LibrarySales.CreateCustomerNo,SalesLine,FALSE,FALSE,TRUE);
      PostSalesDocument(SalesLine."Document Type",SalesLine."Document No.");

      // Excercise.
      CreateAndPostWhseShipmentWithPick(SalesLine."No.",SalesLine."Location Code");

      // Verify: Verify Sales Shipment Line.
      VerifySalesShipmentLine(SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,CreateReturnRelatedDocumentsReportHandler)]
    PROCEDURE PurchRetOrdCreatedWithItemTrkgFromSalesRetOrd@2();
    VAR
      SalesHeader@1004 : Record 36;
      ItemNo@1005 : Code[20];
      LotNo@1003 : Code[10];
      CustomerNo@1006 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Verify Posted Purchase Return Order created from Sales Return Order.

      // Setup: Create Purchase Return Order from Sales Return Order, Release Purchase Return Order with Reserve, create And post Warehouse Receipt, create Warehouse Shipment with Pick.
      Initialize;
      ItemNo := CreateItem;
      Quantity := CreatePurchaseForItemWithLotNo(ItemNo,LotNo);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreatePostSalesOrder(SalesHeader,CustomerNo,ItemNo,LotNo,Quantity / 2,Quantity / 2,TRUE,TRUE);
      CreatePostSalesReturn(SalesHeader,CustomerNo,Quantity / 2,TRUE,FALSE);

      // Excercise: Create Purchase Return Order.
      CreateReturnRelatedDocuments(LibraryPurchase.CreateVendorNo,SalesHeader,TRUE,FALSE,FALSE);

      // Verify: Verify Return Order Line Quantity and Item Tracking.
      VerifyPurchaseLineExists(ItemNo,Quantity / 2);
      VerifyExistenceOfItemTracking(ItemNo,LotNo,TRUE);
      VerifyItemTrackingQty(ItemNo,LotNo,Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,CreateReturnRelatedDocumentsReportHandler)]
    PROCEDURE PurchRetOrdCreatedWithItemTrkgFromSalesRetOrdPartPstd@17();
    VAR
      SalesHeader@1004 : Record 36;
      ItemNo@1005 : Code[20];
      LotNo@1003 : Code[10];
      CustomerNo@1006 : Code[20];
      Quantity@1001 : Decimal;
      HalfShippedQty@1000 : Decimal;
    BEGIN
      // Verify Posted Purchase Return Order created from Sales Return Order.

      // Setup: Create Purchase Return Order from Sales Return Order, Release Purchase Return Order with Reserve, create And post Warehouse Receipt, create Warehouse Shipment with Pick.
      Initialize;
      ItemNo := CreateItem;
      Quantity := CreatePurchaseForItemWithLotNo(ItemNo,LotNo);
      HalfShippedQty := Quantity / 4;
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreatePostSalesOrder(SalesHeader,CustomerNo,ItemNo,LotNo,Quantity / 2,Quantity / 2,TRUE,TRUE);
      CreatePostSalesReturn(SalesHeader,CustomerNo,HalfShippedQty,TRUE,FALSE);

      // Excercise: Create Purchase Return Order.
      CreateReturnRelatedDocuments(LibraryPurchase.CreateVendorNo,SalesHeader,TRUE,FALSE,FALSE);

      // Verify: Verify Return Order Line Quantity and Item Tracking.
      VerifyPurchaseLineExists(ItemNo,Quantity / 2);
      VerifyExistenceOfItemTracking(ItemNo,LotNo,TRUE);
      VerifyItemTrackingQty(ItemNo,LotNo,HalfShippedQty);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,CreateReturnRelatedDocumentsReportHandler)]
    PROCEDURE PurchRetOrdCreatedWithItemTrkgFromSalesRetOrdNotPstd@24();
    VAR
      SalesHeader@1004 : Record 36;
      ItemNo@1005 : Code[20];
      LotNo@1003 : Code[10];
      CustomerNo@1006 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Verify Posted Purchase Return Order created from Sales Return Order.

      // Setup: Create Purchase Return Order from Sales Return Order, Release Purchase Return Order with Reserve, create And post Warehouse Receipt, create Warehouse Shipment with Pick.
      Initialize;
      ItemNo := CreateItem;
      Quantity := CreatePurchaseForItemWithLotNo(ItemNo,LotNo);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreatePostSalesOrder(SalesHeader,CustomerNo,ItemNo,LotNo,Quantity / 2,Quantity / 2,TRUE,TRUE);
      CreateSalesReturn(SalesHeader,CustomerNo,0);

      // Excercise: Create Purchase Return Order.
      CreateReturnRelatedDocuments(LibraryPurchase.CreateVendorNo,SalesHeader,TRUE,FALSE,FALSE);

      // Verify: Verify Return Order Line Quantity and Item Tracking.
      VerifyPurchaseLineExists(ItemNo,Quantity / 2);
      VerifyExistenceOfItemTracking(ItemNo,LotNo,FALSE);
    END;

    [Test]
    PROCEDURE PositiveSurplusCreatedForTrackedItem@21();
    VAR
      Item@1000 : Record 27;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 362340] Positive surpus entry created when tracked item is partially sold
      // [GIVEN] Item "I" with "Tracking Only" tracking policy
      CreateItemWithTrackingPolicy(Item);

      // [GIVEN] 3X psc. of item "I" are available on inventory
      Qty := LibraryRandom.RandDec(100,2);
      PostInventoryAdjustment(Item."No.",Qty * 1.5);

      // [WHEN] Post a sales order of 2X psc
      CreatePostSalesOrderWithTwoLines(Item."No.",Qty);

      // [THEN] Positive surplus of "X" pcs. exists
      VerifySurplusQuantity(Item."No.",Qty);
    END;

    [Test]
    PROCEDURE NegativeSurplusCreatedForTrackedItem@20();
    VAR
      Item@1000 : Record 27;
      Qty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 362340] Negative surplus entry created when more than available quantity of a tracked item is sold
      // [GIVEN] Item "I" with "Tracking Only" tracking policy
      CreateItemWithTrackingPolicy(Item);

      // [GIVEN] 3X psc. of item "I" are available on inventory
      Qty := LibraryRandom.RandDec(100,2);
      PostInventoryAdjustment(Item."No.",Qty * 1.5);

      // [WHEN] Post a sales order of 4X psc
      CreatePostSalesOrderWithTwoLines(Item."No.",Qty * 2);

      // [THEN] Negative surplus of "X" pcs. exists
      VerifySurplusQuantity(Item."No.",-Qty);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingQtyToHandlePageHandler)]
    PROCEDURE QtyToHandleUpdatedInReservationEntryWithItemTracking@46();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Qty@1001 : Decimal;
      TrackingAction@1004 : 'Assign Lot No.,Set Qty. to Handle';
      LotNo@1005 : Code[10];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 377438] "Qty. to Handle" in reservation entry is updated when it is changed in "Item Tracking Lines" page, and tracked quantity is reserved

      // [GIVEN] Item "I" with lot tracking
      LibraryInventory.CreateItem(Item);
      LibraryVariableStorage.Enqueue(TrackingAction::"Assign Lot No.");
      // [GIVEN] Post positive stock for item "I", quantity = "Q"
      Qty := CreatePurchaseForItemWithLotNo(Item."No.",LotNo);

      // [GIVEN] Create sales order for item "I", set quantity = "Q", assign lot no. and reserve
      CreateSalesOrder(SalesHeader,SalesLine,'',Item."No.",Qty,Qty);

      LibraryVariableStorage.Enqueue(TrackingAction::"Assign Lot No.");
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Qty);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.AutoReserveSalesLine(SalesLine);

      // [GIVEN] Set "Qty. to Ship" in sales order = "Q" / 2
      SalesLine.VALIDATE("Qty. to Ship",LibraryRandom.RandDec(ROUND(Qty / 2,1),2));
      SalesLine.MODIFY(TRUE);

      // [WHEN] Open "Item Tracking Lines" page and set "Qty. to Handle" = "Q" / 2
      LibraryVariableStorage.Enqueue(TrackingAction::"Set Qty. to Handle");
      LibraryVariableStorage.Enqueue(SalesLine."Qty. to Ship");
      SalesLine.OpenItemTrackingLines;

      // [THEN] "Qty. to Handle" in reservation entry is "Q" / 2
      VerifyItemTrackingQtyToHandle(
        Item."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",-SalesLine."Qty. to Ship");
    END;

    LOCAL PROCEDURE Initialize@9();
    VAR
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptForSalesReturnOrder@73(SalesHeader@1001 : Record 36;LocationCode@1002 : Code[10]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);
      FindWhseRcptHdr(WarehouseReceiptHeader,LocationCode);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceipt@51(SalesLine@1003 : Record 37);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      // Release Purchase document, create and post Warehouse Receipt.
      FindPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order,SalesLine."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseRcptHdr(WarehouseReceiptHeader,SalesLine."Location Code");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseShipmentWithPick@36(No@1002 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseShipmentHeader@1003 : Record 7320;
    BEGIN
      // Release Sales document, create and post Warehouse Shipment.
      ReleaseSalesOrderWithReserve(SalesHeader,No);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWhseShptHdr(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(WarehouseActivityHeader.Type::Pick,WarehouseShipmentHeader."Location Code");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateItem@15() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,1));  // Using Random value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithTrackingPolicy@26(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item."Order Tracking Policy" := Item."Order Tracking Policy"::"Tracking Only";
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocation@1() : Code[10];
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateSalesRetOrderWithRetRelatedDocuments@25(CustomerNo@1000 : Code[20];VAR SalesLine@1002 : Record 37;CreatePurchRetOrder@1007 : Boolean;CreatePurchaseOrder@1006 : Boolean;CreateSalesOrder@1005 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
      Vendor@1004 : Record 23;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));  // Random value for Quantity.
      SalesLine.VALIDATE("Location Code",CreateLocation);
      SalesLine.VALIDATE("Return Qty. to Receive",SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);

      LibraryPurchase.CreateVendor(Vendor);
      CreateReturnRelatedDocuments(Vendor."No.",SalesHeader,CreatePurchRetOrder,CreatePurchaseOrder,CreateSalesOrder);

      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentWithPick@81(PurchaseHeader@1000 : Record 38;LocationCode@1002 : Code[10]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      FindWhseShptHdr(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseForItemWithLotNo@12(ItemNo@1000 : Code[20];VAR LotNo@1004 : Code[10]) Quantity : Decimal;
    VAR
      Item@1007 : Record 27;
      ItemTrackingCode@1006 : Record 6502;
      ItemJournalTemplate@1002 : Record 82;
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1001 : Record 83;
      LibraryUtility@1005 : Codeunit 131000;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      WITH Item DO BEGIN
        GET(ItemNo);
        VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
        MODIFY;
      END;
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      Quantity := LibraryRandom.RandIntInRange(10,100);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(ItemJournalLine."Quantity (Base)");
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatePostSalesOrder@7(VAR SalesHeader@1009 : Record 36;CustomerNo@1003 : Code[20];ItemNo@1000 : Code[20];LotNo@1001 : Code[10];Quantity@1002 : Decimal;QtyToShip@1004 : Decimal;Ship@1007 : Boolean;Invoice@1008 : Boolean) : Code[20];
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY;
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(SalesLine."Quantity (Base)");
      SalesLine.OpenItemTrackingLines;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice));
    END;

    LOCAL PROCEDURE CreatePostSalesOrderWithTwoLines@31(ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@52(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CustomerNo@1002 : Code[20];ItemNo@1005 : Code[20];Quantity@1003 : Decimal;QtyToShip@1004 : Decimal);
    VAR
      ManufacturingSetup@1006 : Record 99000765;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      ManufacturingSetup.GET;
      SalesHeader.VALIDATE("Shipment Date",CALCDATE(ManufacturingSetup."Default Safety Lead Time",SalesHeader."Shipment Date"));
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesReturn@18(VAR SalesHeader@1009 : Record 36;CustomerNo@1003 : Code[20];QtyToReceive@1004 : Decimal);
    VAR
      SalesLine@1005 : Record 37;
      FromSalesShptLine@1011 : Record 111;
      CopyDocMgt@1010 : Codeunit 6620;
      LinesNotCopied@1012 : Integer;
      MissingExCostRevLink@1013 : Boolean;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);

      FromSalesShptLine.SETRANGE("Sell-to Customer No.",CustomerNo);
      CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE);
      CopyDocMgt.CopySalesShptLinesToDoc(SalesHeader,FromSalesShptLine,LinesNotCopied,MissingExCostRevLink);
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::"Return Order");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        VALIDATE("Return Qty. to Receive",QtyToReceive);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreatePostSalesReturn@23(VAR SalesHeader@1009 : Record 36;CustomerNo@1003 : Code[20];QtyToReceive@1004 : Decimal;Receive@1007 : Boolean;Invoice@1008 : Boolean);
    BEGIN
      CreateSalesReturn(SalesHeader,CustomerNo,QtyToReceive);
      LibrarySales.PostSalesDocument(SalesHeader,Receive,Invoice);
    END;

    LOCAL PROCEDURE CreateReturnRelatedDocuments@37(VendorNo@1004 : Code[20];SalesHeader@1000 : Record 36;CreatePurchRetOrder@1001 : Boolean;CreatePurchaseOrder@1002 : Boolean;CreateSalesOrder@1003 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue(CreatePurchRetOrder);
      LibraryVariableStorage.Enqueue(CreatePurchaseOrder);
      LibraryVariableStorage.Enqueue(CreateSalesOrder);

      RunCreateReturnRelatedDocumentsReport(SalesHeader);
    END;

    LOCAL PROCEDURE ExecuteUIHandler@1033();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN;
    END;

    LOCAL PROCEDURE FindPurchaseLine@13(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;No@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShptHdr@8(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      WarehouseShipmentHeader.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseRcptHdr@10(VAR WarehouseReceiptHeader@1001 : Record 7316;LocationCode@1000 : Code[10]);
    BEGIN
      WarehouseReceiptHeader.SETRANGE("Location Code",LocationCode);
      WarehouseReceiptHeader.FINDFIRST
    END;

    LOCAL PROCEDURE PostInventoryAdjustment@28(ItemNo@1000 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJnlTemplate@1001 : Record 82;
      ItemJnlBatch@1002 : Record 233;
      ItemJnlLine@1003 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalTemplate(ItemJnlTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJnlTemplate.Name,ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE PostSalesDocument@27(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      ExecuteUIHandler;
      SalesHeader.GET(DocumentType,DocumentNo);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@14(Type@1001 : Option;LocationCode@1002 : Code[10]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("Location Code",LocationCode);
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReleasePurchaseReturnOrderWithReserve@29(VAR PurchaseHeader@1004 : Record 38;DocumentType@1000 : Option;No@1002 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,DocumentType,No);
      PurchaseLine.ShowReservation;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE ReleaseSalesOrderWithReserve@6(VAR SalesHeader@1005 : Record 36;No@1003 : Code[20]);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
      SalesLine.ShowReservation;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE RunCreateReturnRelatedDocumentsReport@112(SalesHeader@1000 : Record 36);
    VAR
      CreateRetRelatedDocuments@1002 : Report 6697;
    BEGIN
      COMMIT;  // Commit required before running this Report.
      CLEAR(CreateRetRelatedDocuments);
      CreateRetRelatedDocuments.SetSalesHeader(SalesHeader);
      CreateRetRelatedDocuments.USEREQUESTPAGE(TRUE);
      CreateRetRelatedDocuments.RUN;
    END;

    LOCAL PROCEDURE VerifyPurchaseReceiptLine@84(No@1003 : Code[20];Quantity@1001 : Decimal);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("No.",No);
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReturnReceiptLine@5(No@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ReturnReceiptLine@1000 : Record 6661;
    BEGIN
      ReturnReceiptLine.SETRANGE("No.",No);
      ReturnReceiptLine.FINDFIRST;
      ReturnReceiptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesShipmentLine@42(No@1002 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("No.",No);
      SalesShipmentLine.FINDFIRST;
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineExists@44(No@1002 : Code[20];ExpectedQty@1001 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("No.",No);
        FINDFIRST;
        Assert.AreEqual(ExpectedQty,Quantity,STRSUBSTNO(WrongQuantityErr,No));
      END;
    END;

    LOCAL PROCEDURE VerifyExistenceOfItemTracking@45(ItemNo@1002 : Code[20];LotNo@1001 : Code[10];ExpectedExistence@1003 : Boolean);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Source Subtype"::"5"); // Purchase Return Order
        Assert.AreNotEqual(ExpectedExistence,ISEMPTY,ReservEntryExistenceErr);
      END;
    END;

    LOCAL PROCEDURE VerifyItemTrackingQty@60(ItemNo@1002 : Code[20];LotNo@1001 : Code[10];ExpectedQty@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
      TotalQty@1004 : Decimal;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Source Subtype"::"5"); // Purchase Return Order
        FINDSET;
        REPEAT
          TotalQty -= Quantity;
        UNTIL NEXT = 0;
      END;
      Assert.AreEqual(ExpectedQty,TotalQty,ReservEntryQtyErr);
    END;

    LOCAL PROCEDURE VerifyItemTrackingQtyToHandle@74(ItemNo@1000 : Code[20];SourceType@1001 : Option;DocumentType@1002 : Option;DocumentNo@1003 : Code[20];ExpectedQty@1004 : Decimal);
    VAR
      ReservationEntry@1005 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",DocumentType);
        SETRANGE("Source ID",DocumentNo);
        FINDFIRST;
        TESTFIELD("Qty. to Handle (Base)",ExpectedQty);
      END;
    END;

    LOCAL PROCEDURE VerifySurplusQuantity@34(ItemNo@1000 : Code[20];ExpectedQty@1001 : Decimal);
    VAR
      ReservEntry@1002 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Reservation Status","Reservation Status"::Surplus);
        CALCSUMS(Quantity);
        Assert.AreEqual(ExpectedQty,Quantity,ReservEntryQtyErr);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE CreditMemoConfirmHandler@83(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateReturnRelatedDocumentsReportHandler@116(VAR CreateRetRelatedDocuments@1000 : TestRequestPage 6697);
    VAR
      CreatePurchRetOrder@1001 : Variant;
      CreatePurchaseOrder@1002 : Variant;
      CreateSalesOrder@1003 : Variant;
      VendorNo@1004 : Variant;
    BEGIN
      // Dequeue variable.
      LibraryVariableStorage.Dequeue(VendorNo);
      LibraryVariableStorage.Dequeue(CreatePurchRetOrder);
      LibraryVariableStorage.Dequeue(CreatePurchaseOrder);
      LibraryVariableStorage.Dequeue(CreateSalesOrder);

      CreateRetRelatedDocuments.VendorNo.SETVALUE(VendorNo);
      CreateRetRelatedDocuments.CreatePurchRetOrder.SETVALUE(CreatePurchRetOrder);
      CreateRetRelatedDocuments.CreatePurchaseOrder.SETVALUE(CreatePurchaseOrder);
      CreateRetRelatedDocuments.CreateSalesOrder.SETVALUE(CreateSalesOrder);
      CreateRetRelatedDocuments.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@16(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@35(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingLines."Lot No.".SETVALUE(DequeueVariable);

      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingLines."Quantity (Base)".SETVALUE(DequeueVariable);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingQtyToHandlePageHandler@49(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingAction@1001 : 'Assign Lot No.,Set Qty. to Handle';
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        TrackingAction::"Assign Lot No.":
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
            ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
          END;
        TrackingAction::"Set Qty. to Handle":
          ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      END;

      ItemTrackingLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reservation] [SCM]
      Test Cases for Reservation:
      1. Verify Posted Purchase Order created from Sales Return Order.
      2. Verify Posted Purchase Return Order created from Sales Return Order.
      3. Verify Posted Sales Order created from Sales Return Order.
      4. Verify Purchase Return Order created from Sales Return Order with Item Tracking.
      5. Verify Purchase Return Order created from partially posted Sales Return Order with Item Tracking.
      6. Verify Purchase Return Order created from non-posted Sales Return Order with Item Tracking.

      Covers Test cases: for WI - 313794
      ---------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------------------
      PurchOrdCreatedFromSalesRetOrd, PurchRetOrdCreatedFromSalesRetOrd, SalesOrdCreatedFromSalesRetOrd                                      128210

      Covers Test cases: for WI - 354441
      ---------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                     TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------------------
      PurchRetOrdCreatedWithItemTrkgFromSalesRetOrd                                                                                          89372
      PurchRetOrdCreatedWithItemTrkgFromSalesRetOrdPartPstd                                                                                  89372
      PurchRetOrdCreatedWithItemTrkgFromSalesRetOrdNotPstd                                                                                   89372
    }
    END.
  }
}

