OBJECT Codeunit 144050 FVU TCS 4.0 - 4.1
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1500010 : Record 79;
      GLSetup@1500008 : Record 98;
      Assert@1500000 : Codeunit 130000;
      LibraryERM@1500012 : Codeunit 131300;
      LibraryPurchase@1500011 : Codeunit 130512;
      LibrarySales@1500001 : Codeunit 130509;
      LibraryTDS@1500005 : Codeunit 143000;
      LibraryVariableStorage@1500014 : Codeunit 131004;
      LibraryTextFileValidation@1500002 : Codeunit 131003;
      LibraryUtility@1500007 : Codeunit 131000;
      LibraryRandom@1500006 : Codeunit 130440;
      LibraryTCS@1500003 : Codeunit 143008;
      FinancialYear@1500009 : 'Last,Previous';
      isInitialized@1500013 : Boolean;

    [Test]
    [HandlerFunctions(GenerateeTCSRequestPageHandler,UpdateRevisedFilingStatusRequestPageHandler,UpdateChallanDetailsRequestPageHandler,UpdateTCSFilingStatusRequestPageHandler,GenerateRevisedETCSRequestPageHandler)]
    PROCEDURE F27eqRRRNoAfterRevisedETCS@1500000();
    VAR
      NODNOCLine@1500003 : Record 13785;
      FileName@1500001 : Text;
      ProvRcptNo@1500000 : ARRAY [2] OF Text[30];
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.6] Next eTCS after revised eTCS (form 27EQ)
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] first eTCS filed for Q3 year 2012 with Provision Receipt No "XYZ"
      ProvRcptNo[1] := FileETCSForPeriod(FinancialYear::Previous,3,NODNOCLine);
      // [GIVEN] second eTCS filed for Q4 year 2012 with Provision Receipt No "ABC".
      ProvRcptNo[2] := FileETCSForPeriod(FinancialYear::Previous,4,NODNOCLine);
      // [GIVEN] eTCS for Q4 year 2012 revised and filed.
      FileRevisedETCSForPeriod(FinancialYear::Previous,4,NODNOCLine);

      // [WHEN] export eTCS for Q1 year 2013.
      PostTCSInPeriod(FinancialYear::Last,1,NODNOCLine);
      FileName := GenerateETCS(FinancialYear::Last,1,NODNOCLine);

      // [THEN] a file is created
      // [THEN] Field no. 52 is "Y"
      // [THEN] field no. 9 is "ABC".
      VerifyPrevProvRcptNoInFile(FileName,'Y',ProvRcptNo[2]);
    END;

    [Test]
    [HandlerFunctions(GenerateeTCSRequestPageHandler,UpdateChallanDetailsRequestPageHandler)]
    PROCEDURE F27eqRRRNoOnFirstFiledETCS@1500041();
    VAR
      NODNOCLine@1500002 : Record 13785;
      FileName@1500000 : Text;
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.1] Provisional receipt number on the first filed regular eTCS (form 27EQ)
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] Post first TCS for new T.C.A.N. No.
      PostTCSInPeriod(FinancialYear::Last,1,NODNOCLine);
      // [WHEN] export eTCS
      FileName := GenerateETCS(FinancialYear::Last,1,NODNOCLine);

      // [THEN] a file is created
      // [THEN] Field no. 52 is "N"
      // [THEN] field no. 9 is empty.
      VerifyPrevProvRcptNoInFile(FileName,'N','');
    END;

    [Test]
    [HandlerFunctions(GenerateeTCSRequestPageHandler,UpdateChallanDetailsRequestPageHandler,UpdateTCSFilingStatusRequestPageHandler)]
    PROCEDURE F27eqRRRNoOnNextFiledETCS@1500053();
    VAR
      NODNOCLine@1500003 : Record 13785;
      FileName@1500001 : Text;
      ProvRcptNo@1500000 : ARRAY [2] OF Text[30];
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.2] Next eTCS after multiple filed regular eTCS (form 27EQ)
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] first eTCS filed for Q3 year 2012 with Provision Receipt No "XYZ"
      ProvRcptNo[1] := FileETCSForPeriod(FinancialYear::Previous,3,NODNOCLine);
      // [GIVEN] second eTCS filed for Q4 year 2012 with Provision Receipt No "ABC".
      ProvRcptNo[2] := FileETCSForPeriod(FinancialYear::Previous,4,NODNOCLine);

      // [WHEN] export eTCS for Q1 year 2013.
      PostTCSInPeriod(FinancialYear::Last,1,NODNOCLine);
      FileName := GenerateETCS(FinancialYear::Last,1,NODNOCLine);

      // [THEN] a file is created
      // [THEN] Field no. 52 is "Y"
      // [THEN] field no. 9 is "ABC".
      VerifyPrevProvRcptNoInFile(FileName,'Y',ProvRcptNo[2]);
    END;

    [Test]
    [HandlerFunctions(GenerateeTCSRequestPageHandler,UpdateChallanDetailsRequestPageHandler,UpdateTCSFilingStatusRequestPageHandler)]
    PROCEDURE F27eqRRRNoAfterMissedETCS@1500051();
    VAR
      NODNOCLine@1500003 : Record 13785;
      FileName@1500002 : Text;
      ProvRcptNo@1500001 : Text[30];
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.3] eTCS after missed filed eTCS (form 27EQ)
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] Currently there is a filed eTCS for Q1 with Provision Receipt No "XYZ" ,
      ProvRcptNo := FileETCSForPeriod(FinancialYear::Last,1,NODNOCLine);
      // [GIVEN] there is no TCS posted for Q2

      // [WHEN] export eTCS for Q3
      PostTCSInPeriod(FinancialYear::Last,3,NODNOCLine);
      FileName := GenerateETCS(FinancialYear::Last,3,NODNOCLine);

      // [THEN] a file is created
      // [THEN] Field no. 52 is "Y"
      // [THEN] field no. 9 is "XYZ"
      VerifyPrevProvRcptNoInFile(FileName,'Y',ProvRcptNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo,GenerateeTCSRequestPageHandler,UpdateChallanDetailsRequestPageHandler)]
    PROCEDURE F27eqRRRNoAfterNotFiledETCSNeg@1500045();
    VAR
      NODNOCLine@1500001 : Record 13785;
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.4] eTCS after existing but not filed eTCS (form 27EQ), with negative confirmation
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] there is TCS for Q1 which is not filed (empty Provision Receipt No)
      PostTCSInPeriod(FinancialYear::Last,1,NODNOCLine);
      // [GIVEN] start generating eTCS for Q2
      PostTCSInPeriod(FinancialYear::Last,2,NODNOCLine);
      // [WHEN] user answers "No" to a confirmation request 'No RRR No. Do you want to continue?'
      // done by Confirmation handler ConfirmHandlerNo
      GenerateETCS(FinancialYear::Last,2,NODNOCLine);

      // [THEN] an error message is thrown
      // [THEN] eTCS is not generated.
      ASSERTERROR VerifyETCSIsGenerated(FinancialYear::Last,2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,GenerateeTCSRequestPageHandler,UpdateChallanDetailsRequestPageHandler)]
    PROCEDURE F27eqRRRNoAfterNotFiledETCSPos@1500044();
    VAR
      NODNOCLine@1500002 : Record 13785;
      FileName@1500000 : Text;
    BEGIN
      // [FEATURE] FVU 4.0
      // [SCENARIO 1.5] eTCS after existing but not filed eTCS (form 27EQ), with positive confirmation
      Initialize;

      // [GIVEN] There is a resident Customer with TCS NOC setup
      CreateNOCSetup(NODNOCLine);
      LibraryTCS.Form27EQReportFieldsValidation;
      // [GIVEN] there is TCS for Q1 which is not filed (empty Provision Receipt No)
      PostTCSInPeriod(FinancialYear::Last,1,NODNOCLine);
      // [GIVEN] start generating eTCS for Q2
      PostTCSInPeriod(FinancialYear::Last,2,NODNOCLine);
      FileName := GenerateETCS(FinancialYear::Last,2,NODNOCLine);

      // [WHEN] user answers "Yes" to a confirmation request 'No RRR No. Do you want to continue?'
      // done by Confirmation handler ConfirmHandlerYes

      // [THEN] eTCS for Q2 is generated.
      VerifyETCSIsGenerated(FinancialYear::Last,2);
      // [THEN] Field no. 52 is "N"
      // [THEN] field no. 9 is empty.
      VerifyPrevProvRcptNoInFile(FileName,'N','');
    END;

    LOCAL PROCEDURE Initialize@1500006();
    VAR
      BatchHeader@1500001 : Record 16503;
      ChallanRegister@1500002 : Record 16504;
      Form2627Entry@1500003 : Record 16505;
      Form27EQEntry@1500005 : Record 16517;
      TCSBatchHeader@1500000 : Record 16515;
      TCSChallanRegister@1500004 : Record 16516;
    BEGIN
      LibraryRandom.SetSeed(1);

      CLEAR(LibraryTextFileValidation);

      BatchHeader.DELETEALL;
      TCSBatchHeader.DELETEALL;
      ChallanRegister.DELETEALL;
      TCSChallanRegister.DELETEALL;
      Form2627Entry.DELETEALL;
      Form27EQEntry.DELETEALL;

      IF isInitialized THEN
        EXIT;

      CheckIncomeTaxAccPeriods;

      CompanyInfo.GET;
      CompanyInfo."T.C.A.N. No." := CreateTCANNo;
      CompanyInfo.MODIFY;

      GLSetup.GET;
      SetupDeductoryCode;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CheckIncomeTaxAccPeriods@1500023();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.FIND('+');
      CheckIncomeTaxQuarters(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.NEXT(-1);
      CheckIncomeTaxQuarters(IncomeTaxAccountingPeriod);
    END;

    LOCAL PROCEDURE CheckIncomeTaxQuarters@1500024(IncomeTaxAccountingPeriod@1500001 : Record 13724);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      StartingDate@1500003 : Date;
      Q@1500002 : Integer;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("No.",IncomeTaxAccountingPeriod."No.");
        IF COUNT <> 4 THEN BEGIN
          StartingDate := IncomeTaxAccountingPeriod."Starting Date";
          DELETEALL;
          FOR Q := 1 TO 4 DO BEGIN
            INIT;
            "No." := IncomeTaxAccountingPeriod."No.";
            Quarter := Q;
            "Starting Date" := StartingDate;
            "Ending Date" := CALCDATE('<CQ>',"Starting Date");
            StartingDate := "Ending Date" + 1;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@1500048() : Code[20];
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No.
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1033 : Record 81;AccountType@1500000 : Option;VendorNo@1034 : Code[20];Amount@1500001 : Decimal);
    VAR
      GenJournalBatch@1039 : Record 232;
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,AccountType,VendorNo,Amount);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",FindBankAccountLCY);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateNOCSetup@1500046(VAR NODNOCLine@1500003 : Record 13785) : Code[10];
    VAR
      NODNOCHeader@1500207 : Record 13786;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500000 : Code[10];
      TCSNatureOfCollectionCode@1500001 : Code[10];
    BEGIN
      AssesseeCode := LibraryTDS.CreateAssesseeCode;
      TCSNatureOfCollectionCode := FindTCSNOC;
      CreateTCSSetup(TCSSetup,TCSNatureOfCollectionCode,AssesseeCode,GetStartingDateOfTaxAccPeriod(FinancialYear::Previous,1));
      TCSSetup.VALIDATE("TCS %",LibraryRandom.RandIntInRange(3,10));
      TCSSetup.MODIFY(TRUE);
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,NODNOCLine.Type::Customer,CreateCustomer,AssesseeCode);
      LibraryTDS.CreateNODNOCLines(NODNOCLine,NODNOCHeader,TCSNatureOfCollectionCode,TRUE,'',0);
      EXIT(TCSNatureOfCollectionCode);
    END;

    LOCAL PROCEDURE CreateSalesHeader@1500056(VAR SalesHeader@1500200 : Record 36;CustomerNo@1500000 : Code[20];PostingDate@1500001 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      WITH SalesHeader DO BEGIN
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@1500055(VAR SalesLine@1500200 : Record 37;VAR SalesHeader@1500201 : Record 36;NODNOCLine@1500000 : Record 13785);
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",FindGLAccountNo,LibraryRandom.RandDec(10,2));
      WITH SalesLine DO BEGIN
        VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,10000,2));
        VALIDATE("TCS Nature of Collection",NODNOCLine."NOD/NOC");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTCANNo@1500079() : Code[10];
    VAR
      TCANNo@1500000 : Record 16512;
    BEGIN
      WITH TCANNo DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"T.C.A.N. No."));
        VALIDATE(Description,Code);
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateTCSSetup@1500049(VAR TCSSetup@1500000 : Record 16508;TCSNatureCollection@1500001 : Code[10];AssesseeCode@1500002 : Code[10];EffectiveDate@1500003 : Date);
    BEGIN
      WITH TCSSetup DO BEGIN
        SETRANGE("TCS Nature of Collection",TCSNatureCollection);
        SETFILTER("TCS Account No.",'<>%1','');
        FINDFIRST;
        VALIDATE("Assessee Code",AssesseeCode);
        VALIDATE("Effective Date",EffectiveDate);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindBankAccountLCY@6() : Code[20];
    VAR
      BankAccount@1032 : Record 270;
    BEGIN
      BankAccount.SETFILTER("Currency Code",'');
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE FileETCSForPeriod@1500054(FinancialYear@1500000 : Option;Quarter@1500001 : Integer;NODNOCLine@1500002 : Record 13785) ProvNo : Text[30];
    BEGIN
      PostTCSInPeriod(FinancialYear,Quarter,NODNOCLine);
      GenerateETCS(FinancialYear,Quarter,NODNOCLine);
      ProvNo := UpdateTCSFilingStatus(FinancialYear,Quarter);
    END;

    LOCAL PROCEDURE FileRevisedETCSForPeriod@1500003(FinancialYear@1500000 : Option;Quarter@1500001 : Integer;NODNOCLine@1500002 : Record 13785) ProvNo : Text[30];
    BEGIN
      PostTCSInPeriod(FinancialYear,Quarter,NODNOCLine);
      GenerateRevisedETCS(FinancialYear,Quarter,NODNOCLine);
      ProvNo := UpdateRevisedTCSFilingStatus(FinancialYear,Quarter);
    END;

    LOCAL PROCEDURE FindTCSBatchHeader@1500068(VAR BatchHeader@1500003 : Record 16515;FinYear@1500002 : Option;Quarter@1500001 : Integer);
    BEGIN
      BatchHeader.SETRANGE("Collector T.C.A.N. No.",CompanyInfo."T.C.A.N. No.");
      BatchHeader.SETRANGE("Financial Year",GetFinYearCode(FinYear));
      BatchHeader.SETRANGE(Quarter,Quarter);
      BatchHeader.FINDLAST;
    END;

    LOCAL PROCEDURE FindGLAccountNo@13() : Code[20];
    VAR
      GLAccount@1065 : Record 15;
      GeneralPostingSetup@1066 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindTaxAccPeriodNo@1500026(FinYear@1500000 : Option) : Integer;
    VAR
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.FIND('+');
      IF FinYear = FinancialYear::Previous THEN
        IncomeTaxAccountingPeriod.NEXT(-1);
      EXIT(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE FindTCSNOC@1500047() : Code[20];
    VAR
      TCSNatureOfCollection@1500001 : Record 16507;
    BEGIN
      TCSNatureOfCollection.SETRANGE("TCS Type",TCSNatureOfCollection."TCS Type"::E);
      TCSNatureOfCollection.FINDFIRST;
      EXIT(TCSNatureOfCollection.Code);
    END;

    LOCAL PROCEDURE GenerateETCS@1500067(FinYear@1500001 : Option;Quarter@1500000 : Integer;NODNOCLine@1500004 : Record 13785) FileName : Text;
    VAR
      BatchHeader@1500005 : Record 16515;
      GenerateETCS@1500002 : TestPage 16528;
    BEGIN
      FileName := TEMPORARYPATH + LibraryUtility.GenerateGUID + '.txt';

      FindTCSBatchHeader(BatchHeader,FinYear,Quarter);
      MarkTCSBatchEntriesPrinted(BatchHeader); // to skip actual printing

      LibraryVariableStorage.Enqueue(FileName);
      LibraryVariableStorage.Enqueue(BatchHeader."Collector T.C.A.N. No.");
      LibraryVariableStorage.Enqueue(BatchHeader.Quarter);
      LibraryVariableStorage.Enqueue(BatchHeader."Financial Year");
      COMMIT;
      GenerateETCS.OPENEDIT;
      GenerateETCS.GenerateForm.SETVALUE(TRUE);
      COMMIT;
      GenerateETCS.Action1500005.INVOKE; // Create e-TCS
    END;

    LOCAL PROCEDURE GenerateRevisedETCS@1500014(FinYear@1500001 : Option;Quarter@1500000 : Integer;NODNOCLine@1500004 : Record 13785) FileName : Text;
    VAR
      BatchHeader@1500005 : Record 16515;
      GenerateRevisedETCS@1500002 : TestPage 16532;
    BEGIN
      FileName := TEMPORARYPATH + LibraryUtility.GenerateGUID + '.txt';

      FindTCSBatchHeader(BatchHeader,FinYear,Quarter);

      LibraryVariableStorage.Enqueue(FileName);
      LibraryVariableStorage.Enqueue(BatchHeader."Collector T.C.A.N. No.");
      LibraryVariableStorage.Enqueue(BatchHeader.Quarter);
      LibraryVariableStorage.Enqueue(BatchHeader."Financial Year");
      COMMIT;
      GenerateRevisedETCS.OPENEDIT;
      GenerateRevisedETCS.GenerateForm.SETVALUE(TRUE);
      COMMIT;
      GenerateRevisedETCS.Action1500006.INVOKE; // Create e-TCS
    END;

    LOCAL PROCEDURE GetFinYearCode@1500016(FinYear@1500001 : Option) : Code[6];
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.FIND('+');
      IF FinYear = FinancialYear::Previous THEN
        IncomeTaxAccountingPeriod.NEXT(-1);
      EXIT(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
    END;

    LOCAL PROCEDURE GetStartingDateOfTaxAccPeriod@1500042(FinYear@1500001 : Option;Quarter@1500000 : Integer) : Date;
    VAR
      IncomeTaxPeriodSetup@1500003 : Record 16501;
    BEGIN
      IncomeTaxPeriodSetup.SETRANGE("No.",FindTaxAccPeriodNo(FinYear));
      IncomeTaxPeriodSetup.SETRANGE(Quarter,Quarter);
      IncomeTaxPeriodSetup.FINDFIRST;
      EXIT(IncomeTaxPeriodSetup."Starting Date");
    END;

    LOCAL PROCEDURE GetTCSPayableAccount@1500073(TCSEntry@1500000 : Record 16514) : Code[20];
    VAR
      TCSSetup@1500001 : Record 16508;
    BEGIN
      TCSSetup.SETRANGE("TCS Nature of Collection",TCSEntry."TCS Nature of Collection");
      TCSEntry.SETRANGE("Assessee Code",TCSEntry."Assessee Code");
      TCSSetup.FINDLAST;
      EXIT(TCSSetup."TCS Account No.");
    END;

    LOCAL PROCEDURE MarkTCSBatchEntriesPrinted@1500072(BatchHeader@1500000 : Record 16515);
    VAR
      Form27EQEntry@1500001 : Record 16517;
    BEGIN
      // Entries are marked Printed to skip running report Form 27EQ.
      WITH Form27EQEntry DO BEGIN
        SETRANGE("Financial Year",BatchHeader."Financial Year");
        SETRANGE(Quarter,BatchHeader.Quarter);
        SETRANGE("T.C.A.N. No.",BatchHeader."Collector T.C.A.N. No.");
        MODIFYALL(Printed,TRUE);
      END;
    END;

    LOCAL PROCEDURE PayTCS@1500058(NODNOCLine@1500001 : Record 13785;PostingDate@1500000 : Date) PaymentDocNo : Code[20];
    VAR
      GenJournalLine@1500002 : Record 81;
      TCSEntry@1500005 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("TCS Nature of Collection",NODNOCLine."NOD/NOC");
      TCSEntry.FINDLAST;

      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::"G/L Account",GetTCSPayableAccount(TCSEntry),
        -TCSEntry."Bal. TCS Including SHE CESS");
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine."T.C.A.N. No." := CompanyInfo."T.C.A.N. No.";
      GenJournalLine."Pay TCS" := TRUE;
      GenJournalLine.MODIFY(TRUE);

      PaymentDocNo := GenJournalLine."Document No.";
      TCSEntry."Pay TCS Document No." := PaymentDocNo;
      TCSEntry.MODIFY;

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostSalesDoc@1500052(NODNOCLine@1500002 : Record 13785;PostingDate@1500003 : Date) PostedDocumentNo : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
      SalesLine@1054 : Record 37;
      NoSeriesManagement@1500000 : Codeunit 396;
    BEGIN
      CreateSalesHeader(SalesHeader,NODNOCLine."No.",PostingDate);
      UpdateLocationTCANNo(SalesHeader."Location Code");
      CreateSalesLine(SalesLine,SalesHeader,NODNOCLine);
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostTCSInPeriod@1500050(FinancialYear@1500000 : Option;Quarter@1500001 : Integer;NODNOCLine@1500005 : Record 13785) DocumentNo : Code[20];
    VAR
      PostingDate@1500006 : Date;
      PaymentDocNo@1500007 : Code[20];
    BEGIN
      PostingDate := GetStartingDateOfTaxAccPeriod(FinancialYear,Quarter);
      DocumentNo := PostSalesDoc(NODNOCLine,PostingDate);

      PaymentDocNo := PayTCS(NODNOCLine,PostingDate);
      UpdateTCSChallanDtls(PaymentDocNo,PostingDate);

      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE SetupDeductoryCode@1500430();
    VAR
      DeductorCategory@1000 : Record 16498;
    BEGIN
      WITH CompanyInfo DO BEGIN
        GET;
        IF DeductorCategory.FINDFIRST THEN
          VALIDATE("Deductor Category",DeductorCategory.Code)
        ELSE BEGIN
          LibraryTDS.CreateDeductorCategory(DeductorCategory);
          VALIDATE("Deductor Category",DeductorCategory.Code);
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateLocationTCANNo@1500002(LocationCode@1500000 : Code[10]);
    VAR
      Location@1500001 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      Location.VALIDATE("T.C.A.N. No.",CompanyInfo."T.C.A.N. No.");
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRevisedTCSFilingStatus@1500034(FinYear@1500002 : Option;Quarter@1500001 : Integer) RRRNo : Text[30];
    VAR
      UpdateRevisedFilingStatus@1500003 : TestPage 16532;
    BEGIN
      RRRNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(CompanyInfo."T.C.A.N. No.");
      LibraryVariableStorage.Enqueue(GetFinYearCode(FinYear));
      LibraryVariableStorage.Enqueue(Quarter);
      LibraryVariableStorage.Enqueue(RRRNo);
      COMMIT;
      UpdateRevisedFilingStatus.OPENEDIT;
      UpdateRevisedFilingStatus.GenerateForm.SETVALUE(TRUE);
      COMMIT;
      UpdateRevisedFilingStatus."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE UpdateTCSChallanDtls@1500059(PaymentDocNo@1500000 : Code[20];PostingDate@1500002 : Date);
    VAR
      UpdateChallanDetails@1500001 : TestPage 16525;
    BEGIN
      LibraryVariableStorage.Enqueue(PaymentDocNo);
      LibraryVariableStorage.Enqueue(PostingDate);
      COMMIT;
      UpdateChallanDetails.OPENEDIT;
      UpdateChallanDetails.Action1280008.INVOKE; // Update Challan Details
    END;

    LOCAL PROCEDURE UpdateTCSFilingStatus@1500060(FinYear@1500002 : Option;Quarter@1500001 : Integer) RRRNo : Text[30];
    VAR
      UpdateFilingStatus@1500003 : TestPage 16528;
    BEGIN
      RRRNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(CompanyInfo."T.C.A.N. No.");
      LibraryVariableStorage.Enqueue(GetFinYearCode(FinYear));
      LibraryVariableStorage.Enqueue(Quarter);
      LibraryVariableStorage.Enqueue(RRRNo);
      COMMIT;
      UpdateFilingStatus.OPENEDIT;
      UpdateFilingStatus.GenerateForm.SETVALUE(TRUE);
      COMMIT;
      UpdateFilingStatus."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE VerifyETCSIsGenerated@1500074(FinYear@1500001 : Option;Quarter@1500000 : Integer);
    VAR
      BatchHeader@1500002 : Record 16515;
    BEGIN
      FindTCSBatchHeader(BatchHeader,FinYear,Quarter);
      Assert.AreEqual(TRUE,BatchHeader."Normal eTCS Generated",BatchHeader.FIELDNAME("Normal eTCS Generated"));
    END;

    LOCAL PROCEDURE VerifyPrevProvRcptNoInFile@1500005(FileName@1500000 : Text;YesNo@1500001 : Text[1];ProvRcptNo@1500002 : Text[30]);
    VAR
      Line@1500003 : Text;
    BEGIN
      Line := LibraryTextFileValidation.ReadLine(FileName,2);
      Assert.AreEqual(ProvRcptNo,LibraryTextFileValidation.ReadField(Line,9,'^'),'Wrong field 9');
      Assert.AreEqual(YesNo,LibraryTextFileValidation.ReadField(Line,52,'^'),'Wrong field 52');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@1500017(Question@1500000 : Text;VAR Reply@1500001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@1500018(Question@1500001 : Text;VAR Reply@1500000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTCSRequestPageHandler@1500071(VAR GenerateeTCS@1500005 : TestRequestPage 16524);
    VAR
      FileName@1500002 : Variant;
      TCANLocation@1500000 : Variant;
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      LibraryVariableStorage.Dequeue(TCANLocation);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);

      GenerateeTCS.FileName.SETVALUE(FileName);
      GenerateeTCS.Control1500009.SETVALUE(TCANLocation);
      GenerateeTCS.Control1500005.SETVALUE(FinancialYearQuarter);
      GenerateeTCS.Control1500013.SETVALUE(FinancialYear);
      GenerateeTCS.Control1500000.SETVALUE('ABCD');
      GenerateeTCS.Control1500002.SETVALUE('EFGH');
      GenerateeTCS.Control1500011.SETVALUE(WORKDATE);
      GenerateeTCS.Control2.SETVALUE('IJKL');
      GenerateeTCS.Control1500015.SETVALUE('MNOP');
      GenerateeTCS.Control1500017.SETVALUE(1234567890);
      GenerateeTCS."P.A.N No.".SETVALUE(CompanyInfo."P.A.N. No.");
      GenerateeTCS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateRevisedFilingStatusRequestPageHandler@1500088(VAR RevisedFilingStatus@1500005 : TestRequestPage 16527);
    VAR
      TCANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500003 : Variant;
      RRRNo@1500004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TCANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(RRRNo);

      RevisedFilingStatus.Control1500009.SETVALUE(TCANLocation);
      RevisedFilingStatus.Control1500000.SETVALUE(FinancialYearQuarter);
      RevisedFilingStatus.Control1500007.SETVALUE(FinancialYear);
      RevisedFilingStatus.Control1500003.SETVALUE(TODAY);
      RevisedFilingStatus.Control1500005.SETVALUE(RRRNo);
      RevisedFilingStatus.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateChallanDetailsRequestPageHandler@1500089(VAR UpdateChallanDetails@1500005 : TestRequestPage 16520);
    VAR
      PaymentDocNo@1500000 : Variant;
      PostingDate@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PaymentDocNo);
      LibraryVariableStorage.Dequeue(PostingDate);

      UpdateChallanDetails.Control1500001.SETVALUE(PaymentDocNo);
      UpdateChallanDetails.Control1500002.SETVALUE(FORMAT(LibraryRandom.RandInt(1000)));
      UpdateChallanDetails.Control1500004.SETVALUE(PostingDate);
      UpdateChallanDetails.Control1500007.SETVALUE('abc');
      UpdateChallanDetails.Control1500009.SETVALUE('1234567');
      UpdateChallanDetails.Control1500010.SETVALUE(456);
      UpdateChallanDetails.Control1500012.SETVALUE(PostingDate);
      UpdateChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSFilingStatusRequestPageHandler@1500090(VAR UpdateChallanDetails@1500005 : TestRequestPage 16525);
    VAR
      TCANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500003 : Variant;
      RRRNo@1500004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TCANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(RRRNo);

      UpdateChallanDetails.Control1500009.SETVALUE(TCANLocation);
      UpdateChallanDetails.Control1500001.SETVALUE(FinancialYearQuarter);
      UpdateChallanDetails.Control1500000.SETVALUE(FinancialYear);
      UpdateChallanDetails.Control1500004.SETVALUE(TODAY);
      UpdateChallanDetails.Control1500006.SETVALUE(RRRNo);
      UpdateChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedETCSRequestPageHandler@1500091(VAR GenerateRevisedETCS@1500005 : TestRequestPage 16526);
    VAR
      FileName@1500002 : Variant;
      TCANLocation@1500000 : Variant;
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      LibraryVariableStorage.Dequeue(TCANLocation);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);

      GenerateRevisedETCS.FileName.SETVALUE(FileName);
      GenerateRevisedETCS.Control1500011.SETVALUE(TCANLocation);
      GenerateRevisedETCS."P.A.N No.".SETVALUE(CompanyInfo."P.A.N. No.");
      GenerateRevisedETCS.Control1500005.SETVALUE(FinancialYearQuarter);
      GenerateRevisedETCS.Control1500013.SETVALUE(FinancialYear);
      GenerateRevisedETCS.Control1500000.SETVALUE('ABCD');
      GenerateRevisedETCS.Control1500002.SETVALUE('EFGH');
      GenerateRevisedETCS.Control1500009.SETVALUE(WORKDATE);
      GenerateRevisedETCS.Control2.SETVALUE('IJKL');
      GenerateRevisedETCS.Control1500015.SETVALUE('MNOP');
      GenerateRevisedETCS.Control1500017.SETVALUE(1234567890);
      GenerateRevisedETCS.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

