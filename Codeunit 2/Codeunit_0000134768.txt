OBJECT Codeunit 134768 Test Posting Preview
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GenJnlPostPreview@1000 : Codeunit 19;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      AmountsNotEqualErr@1003 : TextConst 'ENU=The amount in the preview page was not expected.';

    [Test]
    PROCEDURE GLEntryTest@1();
    VAR
      GLEntry@1000 : Record 17;
      GLEntriesPreview@1001 : TestPage 122;
    BEGIN
      // [SCENARIO] G/L Entry is properly saved to temp tables and displayed in the preview page.
      GLEntry.INIT;
      GLEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      GLEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      GLEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"G/L Entry");

      GLEntriesPreview.FIRST;
      Assert.AreEqual(GLEntry.Amount,GLEntriesPreview.Amount.ASDECIMAL,'Entry amounts were not equal.');

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE VATEntryTest@2();
    VAR
      VATEntry@1000 : Record 254;
      VATEntriesPreview@1001 : TestPage 123;
    BEGIN
      // [SCENARIO] VAT Entry is properly saved to temp tables and displayed in the preview page.
      VATEntry.INIT;
      VATEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      VATEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      VATEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"VAT Entry");

      VATEntriesPreview.FIRST;
      Assert.AreEqual(VATEntry.Amount,VATEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ValueEntryTest@3();
    VAR
      ValueEntry@1001 : Record 5802;
      ValueEntriesPreview@1000 : TestPage 5807;
    BEGIN
      // [SCENARIO] Value Entry is properly saved to temp tables and displayed in the preview page.
      ValueEntry.INIT;
      ValueEntry."Cost Amount (Actual)" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      ValueEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ValueEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Value Entry");

      ValueEntriesPreview.FIRST;
      Assert.AreEqual(
        ValueEntry."Cost Amount (Actual)",
        ValueEntriesPreview."Cost Amount (Actual)".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ItemLedgerEntryTest@4();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      ItemLedgerEntriesPreview@1001 : TestPage 167;
    BEGIN
      // [SCENARIO] Item Ledger Entry is properly saved to temp tables and displayed in the preview page.
      ItemLedgerEntry.INIT;
      ItemLedgerEntry.Quantity := LibraryRandom.RandInt(50);

      GenJnlPostPreview.Start;
      ItemLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ItemLedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Item Ledger Entry");

      ItemLedgerEntriesPreview.FIRST;
      Assert.AreEqual(ItemLedgerEntry.Quantity,ItemLedgerEntriesPreview.Quantity.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE CustLedgerEntryTest@6();
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgEntriesPreview@1001 : TestPage 126;
    BEGIN
      // [SCENARIO] Customer Ledger Entry is properly saved to temp tables and displayed in the preview page.
      CustLedgerEntry.INIT;
      CustLedgerEntry."Max. Payment Tolerance" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      CustLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      CustLedgEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Cust. Ledger Entry");

      CustLedgEntriesPreview.FIRST;
      Assert.AreEqual(
        CustLedgerEntry."Max. Payment Tolerance",
        CustLedgEntriesPreview."Max. Payment Tolerance".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE DetailedCustLedgerEntryTest@7();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
      DetCustLedgEntrPreview@1001 : TestPage 127;
    BEGIN
      // [SCENARIO] Detailed Customer Ledger Entry is properly saved to temp tables and displayed in the preview page.
      DetailedCustLedgEntry.INIT;
      DetailedCustLedgEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      DetailedCustLedgEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      DetCustLedgEntrPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Detailed Cust. Ledg. Entry");

      DetCustLedgEntrPreview.FIRST;
      Assert.AreEqual(DetailedCustLedgEntry.Amount,DetCustLedgEntrPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE VendorLedgerEntryTest@8();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendLedgEntriesPreview@1001 : TestPage 128;
    BEGIN
      // [SCENARIO] Vendor Ledger Entry is properly saved to temp tables and displayed in the preview page.
      VendorLedgerEntry.INIT;
      VendorLedgerEntry."Max. Payment Tolerance" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      VendorLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      VendLedgEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Vendor Ledger Entry");

      VendLedgEntriesPreview.FIRST;
      Assert.AreEqual(
        VendorLedgerEntry."Max. Payment Tolerance",
        VendLedgEntriesPreview."Max. Payment Tolerance".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE DetailedVendorLedgerEntryTest@9();
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
      DetailedVendEntriesPreview@1001 : TestPage 129;
    BEGIN
      // [SCENARIO] Detailed Vendor Ledger Entry is properly saved to temp tables and displayed in the preview page.
      DetailedVendorLedgEntry.INIT;
      DetailedVendorLedgEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      DetailedVendorLedgEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      DetailedVendEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Detailed Vendor Ledg. Entry");

      DetailedVendEntriesPreview.FIRST;
      Assert.AreEqual(DetailedVendorLedgEntry.Amount,DetailedVendEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE FALedgerEntryTest@10();
    VAR
      FALedgerEntry@1000 : Record 5601;
      FALedgerEntriesPreview@1001 : TestPage 5606;
    BEGIN
      // [SCENARIO] FA Ledger Entry is properly saved to temp tables and displayed in the preview page.
      FALedgerEntry.INIT;
      FALedgerEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      FALedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      FALedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"FA Ledger Entry");

      FALedgerEntriesPreview.FIRST;
      Assert.AreEqual(FALedgerEntry.Amount,FALedgerEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE BankAccountLedgerEntryTest@11();
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      BankAccLedgEntrPreview@1001 : TestPage 165;
    BEGIN
      // [SCENARIO] Bank Account Ledger Entry is properly saved to temp tables and displayed in the preview page.
      BankAccountLedgerEntry.INIT;
      BankAccountLedgerEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      BankAccountLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      BankAccLedgEntrPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Bank Account Ledger Entry");

      BankAccLedgEntrPreview.FIRST;
      Assert.AreEqual(BankAccountLedgerEntry.Amount,BankAccLedgEntrPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ResLedgerEntryTest@13();
    VAR
      ResLedgerEntry@1000 : Record 203;
      ResourceLedgEntriesPreview@1001 : TestPage 162;
    BEGIN
      // [SCENARIO] Res. Ledger Entry is properly saved to temp tables and displayed in the preview page.
      ResLedgerEntry.INIT;
      ResLedgerEntry.Quantity := LibraryRandom.RandInt(100);

      GenJnlPostPreview.Start;
      ResLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ResourceLedgEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Res. Ledger Entry");

      ResourceLedgEntriesPreview.FIRST;
      Assert.AreEqual(ResLedgerEntry.Quantity,ResourceLedgEntriesPreview.Quantity.ASINTEGER,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE ServiceLedgerEntryTest@14();
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
      ServiceLedgerEntriesPreview@1001 : TestPage 168;
    BEGIN
      // [SCENARIO] Service Ledger Entry is properly saved to temp tables and displayed in the preview page.
      ServiceLedgerEntry.INIT;
      ServiceLedgerEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      ServiceLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      ServiceLedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Service Ledger Entry");

      ServiceLedgerEntriesPreview.FIRST;
      Assert.AreEqual(ServiceLedgerEntry.Amount,ServiceLedgerEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE WarrantyLedgerEntryTest@15();
    VAR
      WarrantyLedgerEntry@1000 : Record 5908;
      WarrantyLedgEntriesPreview@1001 : TestPage 163;
    BEGIN
      // [SCENARIO] Warranty Ledger Entry is properly saved to temp tables and displayed in the preview page.
      WarrantyLedgerEntry.INIT;
      WarrantyLedgerEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      WarrantyLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      WarrantyLedgEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Warranty Ledger Entry");

      WarrantyLedgEntriesPreview.FIRST;
      Assert.AreEqual(WarrantyLedgerEntry.Amount,WarrantyLedgEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE MaintenanceLedgerEntryTest@16();
    VAR
      MaintenanceLedgerEntry@1000 : Record 5625;
      MaintLedgEntriesPreview@1001 : TestPage 5671;
    BEGIN
      // [SCENARIO] Maintenance Ledger Entry is properly saved to temp tables and displayed in the preview page.
      MaintenanceLedgerEntry.INIT;
      MaintenanceLedgerEntry.Amount := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      MaintenanceLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      MaintLedgEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Maintenance Ledger Entry");

      MaintLedgEntriesPreview.FIRST;
      Assert.AreEqual(MaintenanceLedgerEntry.Amount,MaintLedgEntriesPreview.Amount.ASDECIMAL,AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    [Test]
    PROCEDURE JobLedgerEntryTest@17();
    VAR
      JobLedgerEntry@1000 : Record 169;
      JobLedgerEntriesPreview@1001 : TestPage 93;
    BEGIN
      // [SCENARIO] Job Ledger Entry is properly saved to temp tables and displayed in the preview page.
      JobLedgerEntry.INIT;
      JobLedgerEntry."Line Amount" := LibraryRandom.RandDec(1000,2);

      GenJnlPostPreview.Start;
      JobLedgerEntry.INSERT(TRUE);
      GenJnlPostPreview.Finish;

      JobLedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Job Ledger Entry");

      JobLedgerEntriesPreview.FIRST;
      Assert.AreEqual(
        JobLedgerEntry."Line Amount",
        JobLedgerEntriesPreview."Line Amount".ASDECIMAL,
        AmountsNotEqualErr);

      ASSERTERROR COMMIT;
    END;

    BEGIN
    {
      // [FEATURE] [Post Preview]
    }
    END.
  }
}

