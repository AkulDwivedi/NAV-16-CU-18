OBJECT Codeunit 137204 SCM Whse Get Source Inbound
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ErrorDocumentNo@1012 : TextConst 'ENU=%1  Must Be %2 In %3';
      ErrorRec@1010 : TextConst 'ENU=%1  Must be Empty For Location %2.';
      SalesReceivablesSetup@1008 : Record 311;
      Assert@1005 : Codeunit 130000;
      LibraryPurchase@1011 : Codeunit 130512;
      LibraryInventory@1001 : Codeunit 132201;
      LibrarySales@1021 : Codeunit 130509;
      LibraryWarehouse@1013 : Codeunit 132204;
      LibraryRandom@1002 : Codeunit 130440;
      ProcessTypeGlobal@1003 : 'Location,WarehousePutAway,Register,PutAwayQuantity,TransferQuantity,PurchaseQuantity,WarehouseShipmentQty,TransferBlank,RequestBlank';
      DocumentTypeGlobal@1004 : 'Sales,Purchase,Warehouse';
      LocationCodeHandler@1009 : Code[10];
      PutAwayNo@1007 : Code[20];
      PutawayRequestDocumentNo@1006 : Code[20];
      IsInitialized@1000 : Boolean;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundPurchPutAwayLocation@1();
    BEGIN
      // Check Put Away Selection Page Have Selected data For Receipt Created From Purchase Order.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::Location,DocumentTypeGlobal::Purchase);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundPurchWarehousePutAway@4();
    BEGIN
      // Check Warehouse Activity Line Have Same Purchase Source Document No., Item And Quantity, For Receipt Created Form
      // Purchase Order.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::WarehousePutAway,DocumentTypeGlobal::Purchase);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundPurchRegistered@35();
    BEGIN
      // Check That There is No Request Remain For Said Location After Register Put Away For Receipt Created From Purchase Order.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::Register,DocumentTypeGlobal::Purchase);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundReturnPutAwayLocation@46();
    BEGIN
      // Check Put Away Selection Page Have Selected data For Receipt Created From Sales Return Order.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::Location,DocumentTypeGlobal::Sales);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundReturnWarehousePutAway@45();
    BEGIN
      // Check Warehouse Activity Line Have Same Sales Return Source Document No., Item And Quantity,For Receipt Created From
      // Sales Return Order.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::WarehousePutAway,DocumentTypeGlobal::Sales);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,PutAwayPageHandler)]
    PROCEDURE InboundReturnRegistered@44();
    BEGIN
      // Check That There is No Request Remain For Said Location After Register Put Away For Receipt Created From Sales Return.
      Initialize;
      CreateInboundSalesPurchase(ProcessTypeGlobal::Register,DocumentTypeGlobal::Sales);
    END;

    LOCAL PROCEDURE CreateInboundSalesPurchase@33(ProcessType@1004 : Option;DocumentType@1000 : Option);
    VAR
      TempSalesReceivablesSetup@1011 : TEMPORARY Record 311;
      WhseWorksheetLine@1010 : Record 7326;
      PurchaseHeader@1008 : Record 38;
      SalesHeader@1007 : Record 36;
      Quantity@1003 : Decimal;
      ItemNo@1002 : Code[20];
      WarehouseReceiptNo@1001 : Code[20];
      DocumentNo@1012 : Code[20];
      WhseWorksheetName@1005 : Code[10];
      WhseWorksheetTemplateName@1009 : Code[10];
      LocationCode@1013 : Code[10];
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      WarehouseReceiptNo := CreatePutAwaySetup(PurchaseHeader,SalesHeader,ItemNo,Quantity,DocumentType,FALSE,FALSE,TRUE);
      DocumentNo := SalesHeader."No.";
      LocationCode := SalesHeader."Location Code";

      IF DocumentType = DocumentTypeGlobal::Purchase THEN BEGIN
        DocumentNo := PurchaseHeader."No.";
        LocationCode := PurchaseHeader."Location Code";
        WarehouseReceiptNo := CreateFromPurchOrder(PurchaseHeader);  // Create warehouse Receipt from Purchase Order.
      END;
      PostWarehouseReceipt(WarehouseReceiptNo);
      CreatePutAway(WhseWorksheetName,WhseWorksheetTemplateName,LocationCode);
      FindWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WhseWorksheetTemplateName,LocationCode);

      // Exercise And Verify.
      CASE ProcessType OF
        ProcessTypeGlobal::Location:  // Check that Request is created for particular location.
          VerifyPutawayRequest(WhseWorksheetLine."Location Code");
        ProcessTypeGlobal::WarehousePutAway:  // Check That Warehouse Activity Line created after creating put away.
          BEGIN
            GetWarehouseSourceDocument(WhseWorksheetLine);
            VerifyWarehousePutaway(ItemNo,Quantity,LocationCode,DocumentNo);
          END;
        ProcessTypeGlobal::Register:  // Check that no request pending after register put away.
          BEGIN
            RegisterPutAway(WhseWorksheetLine,LocationCode);
            ASSERTERROR VerifyPutawayRequest(LocationCode);
          END;
      END;

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,SourcePageHandler,PutAwayPageHandler)]
    PROCEDURE PurchPutAwayLocation@5();
    BEGIN
      // Check Put Away Selection Page has selected data For Receipt created from Warehouse Receipt Header.
      Initialize;
      CreateInboundPurchWhseReceipt(ProcessTypeGlobal::Location);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,SourcePageHandler,PutAwayPageHandler)]
    PROCEDURE PurchWarehousePutAway@14();
    BEGIN
      // Check Warehouse Activity Line has same Purchase Source Document No., Item And Quantity, for Receipt Created
      // from Warehouse Receipt Header.
      Initialize;
      CreateInboundPurchWhseReceipt(ProcessTypeGlobal::WarehousePutAway);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,SourcePageHandler,PutAwayPageHandler)]
    PROCEDURE PurchRegistered@13();
    BEGIN
      // Check that there is no Request remaining for said Location After Register Put Away for Receipt created from
      // Warehouse Receipt Header.
      Initialize;
      CreateInboundPurchWhseReceipt(ProcessTypeGlobal::Register);
    END;

    LOCAL PROCEDURE CreateInboundPurchWhseReceipt@36(ProcessType@1000 : Option);
    VAR
      TempSalesReceivablesSetup@1013 : TEMPORARY Record 311;
      WhseWorksheetLine@1012 : Record 7326;
      WarehouseReceiptHeader@1010 : Record 7316;
      PurchaseHeader@1009 : Record 38;
      SalesHeader@1008 : Record 36;
      GetSourceDocInbound@1007 : Codeunit 5751;
      DocumentType@1004 : 'Sales,Purchase,Warehouse';
      Quantity@1003 : Decimal;
      ItemNo@1002 : Code[20];
      WarehouseReceiptNo@1001 : Code[20];
      WhseWorksheetName@1006 : Code[10];
      WhseWorksheetTemplateName@1005 : Code[10];
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      WarehouseReceiptNo := CreatePutAwaySetup(PurchaseHeader,SalesHeader,ItemNo,Quantity,DocumentType::Purchase,FALSE,FALSE,TRUE);
      CreateWarehouseReceiptHeader(WarehouseReceiptHeader,PurchaseHeader."Location Code");
      WarehouseReceiptNo := WarehouseReceiptHeader."No.";
      GetSourceDocInbound.GetSingleInboundDoc(WarehouseReceiptHeader);  // Create Receipt from warehouse Receipt Header.
      PostWarehouseReceipt(WarehouseReceiptNo);
      CreatePutAway(WhseWorksheetName,WhseWorksheetTemplateName,PurchaseHeader."Location Code");
      FindWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WhseWorksheetTemplateName,PurchaseHeader."Location Code");

      // Exercise And Verify.
      CASE ProcessType OF
        ProcessTypeGlobal::Location:  // Check that Request is Created for paticular location.
          VerifyWhseRequest(WhseWorksheetLine."Location Code",PurchaseHeader."No.");
        ProcessTypeGlobal::WarehousePutAway:  // Check that Warehouse Activity Line create after creating put away.
          BEGIN
            GetWarehouseSourceDocument(WhseWorksheetLine);
            VerifyWarehousePutaway(ItemNo,Quantity,PurchaseHeader."Location Code",PurchaseHeader."No.")
          END;
        ProcessTypeGlobal::Register:  // Check that no request pending after register put away.
          BEGIN
            RegisterPutAway(WhseWorksheetLine,PurchaseHeader."Location Code");
            ASSERTERROR VerifyPutawayRequest(PurchaseHeader."Location Code");
          END;
      END;
      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE InboundWhsePutAwayQty@25();
    BEGIN
      // Check That Put Away Quantity To Handle is equal to Receipt Quantity, For Transfer Order.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::PutAwayQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE InboundWhsePutAwayTransferQty@8();
    BEGIN
      // Check That Put Away Quantity To Handle is equal to Transfer Quantity, For Transfer Order.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::TransferQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE InboundWhsePutAwayPurchLineQty@23();
    BEGIN
      // Check That Purchase Line Received Quantity is equal to Put Away Register Quantity.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::PurchaseQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE InboundPutAwayWhseShipQty@30();
    BEGIN
      // Check Warehouse Shipment Quantity after Pick and Register.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::WarehouseShipmentQty);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE InboundPutAwayTransferBlank@31();
    BEGIN
      // Check No Transfer Order Exist After Post Shipment And Register Pick , Post Receipt and Register Put Away.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::TransferBlank);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,SourceDocumentHandler)]
    PROCEDURE InboundPutAwayWhseRequestBlank@54();
    BEGIN
      // Check No Request  After Posting and Put Away Register.
      Initialize;
      CreateInboundTransferWarehouse(ProcessTypeGlobal::RequestBlank);
    END;

    LOCAL PROCEDURE CreateInboundTransferWarehouse@49(ProcessType@1019 : Option);
    VAR
      TempSalesReceivablesSetup@1013 : TEMPORARY Record 311;
      WarehouseActivityLine@1011 : Record 5767;
      WarehouseReceiptHeader@1010 : Record 7316;
      PurchaseHeader@1009 : Record 38;
      SalesHeader@1008 : Record 36;
      TransferHeader@1004 : Record 5740;
      PurchaseLine@1007 : Record 39;
      GetSourceDocInbound@1006 : Codeunit 5751;
      DocumentType@1000 : 'Sales,Purchase,Warehouse';
      Quantity@1003 : Decimal;
      ItemNo@1002 : Code[20];
      WarehouseReceiptNo@1001 : Code[20];
      TransferQuantity@1005 : Decimal;
      WarehouseShipmentHeaderNo@1014 : Code[20];
      TransferHeaderNo@1015 : Code[20];
      LocationCode@1012 : Code[10];
      LocationCode2@1016 : Code[10];
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      WarehouseReceiptNo := CreatePutAwaySetup(PurchaseHeader,SalesHeader,ItemNo,Quantity,DocumentType::Purchase,TRUE,TRUE,FALSE);
      LocationCode := PurchaseHeader."Location Code";
      WarehouseReceiptNo := CreateFromPurchOrder(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptNo);

      // Exercise And Verify.
      CASE ProcessType OF
        ProcessTypeGlobal::PutAwayQuantity:  // Check put away quantity with purchase order quantity.
          BEGIN
            FindWarehouseActivityLine(WarehouseActivityLine,LocationCode);
            WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
            VerifyWarehousePutaway(ItemNo,Quantity,PurchaseHeader."Location Code",PurchaseHeader."No.");
          END;
        ProcessTypeGlobal::TransferQuantity: // Check Transfer quantity with Warehouse Activity Line quantity.
          BEGIN
            TransferQuantity :=
              CreatePickForWhseShipment(
                WarehouseShipmentHeaderNo,TransferHeaderNo,LocationCode2,PurchaseHeader,ItemNo);
            FindWarehouseActivityLine(WarehouseActivityLine,LocationCode);
            WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
            VerifyWarehousePutaway(ItemNo,TransferQuantity,LocationCode,TransferHeaderNo);
          END;
        ProcessTypeGlobal::PurchaseQuantity:  // Check that received quantity on Purchase Line is updated after Register Put Away.
          BEGIN
            RegisterWhseActivityLine(PurchaseHeader."Location Code");
            PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
            PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
            PurchaseLine.FINDFIRST;
            PurchaseLine.TESTFIELD("Quantity Received",Quantity);
          END;
        ProcessTypeGlobal::WarehouseShipmentQty:  // Check warehouse shipment quantity with transfer quantity.
          BEGIN
            TransferQuantity :=
              CreatePickForWhseShipment(
                WarehouseShipmentHeaderNo,TransferHeaderNo,LocationCode2,PurchaseHeader,ItemNo);
            RegisterWhseActivityLine(LocationCode);
            VerifyShipmentQuantity(TransferQuantity,WarehouseShipmentHeaderNo);
          END;
        ProcessTypeGlobal::TransferBlank:  // Check no Transfer Order exist after Warehouse shipment and receipt for Transfer Order.
          BEGIN
            CreateAndPostWarehouseReceipt(PurchaseHeader,TransferHeaderNo,LocationCode2,ItemNo);
            TransferHeader.SETRANGE("No.",TransferHeaderNo);
            Assert.IsTrue(TransferHeader.ISEMPTY,STRSUBSTNO(ErrorRec,TransferHeader.TABLECAPTION,LocationCode));
          END;
        ProcessTypeGlobal::RequestBlank:  // Check no request pending after register Warehouse Activity line.
          BEGIN
            CreateAndPostWarehouseReceipt(PurchaseHeader,TransferHeaderNo,LocationCode2,ItemNo);
            CreateWarehouseReceiptHeader(WarehouseReceiptHeader,LocationCode2);
            GetSourceDocInbound.GetSingleInboundDoc(WarehouseReceiptHeader);
            ASSERTERROR VerifyWhseRequest(WarehouseReceiptHeader."Location Code",'');
          END;
      END;

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@18();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(VAR TempSalesReceivablesSetup@1001 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      TempSalesReceivablesSetup := SalesReceivablesSetup;
      TempSalesReceivablesSetup.INSERT;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",FALSE);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePutAwaySetup@17(VAR PurchaseHeader@1000 : Record 38;VAR SalesHeader@1006 : Record 36;VAR ItemNo@1022 : Code[20];VAR Quantity@1021 : Decimal;DocumentType@1007 : 'Sales,Purchase,Warehouse';RequirePick@1004 : Boolean;RequireShipment@1001 : Boolean;UsePutawayWorksheet@1005 : Boolean) WarehouseReceiptNo : Code[20];
    VAR
      WhseRcptHeader@1111 : Record 7316;
      LocationCode@1002 : Code[10];
    BEGIN
      // Create Location, Warehouse Employee And Inventory Posting Setup.
      SetupWarehouseLocation(LocationCode,TRUE,RequirePick,TRUE,RequireShipment,UsePutawayWorksheet);
      ItemNo := CreateItem;
      Quantity := LibraryRandom.RandDec(20,2);

      CASE DocumentType OF
        DocumentType::Sales:
          BEGIN
            CreateAndReleaseSalesReturns(SalesHeader,ItemNo,LocationCode,Quantity);
            // Create Warehouse Receipt From Sales Return Document.
            LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);

            WhseRcptHeader.SETRANGE("Location Code",SalesHeader."Location Code");
            WhseRcptHeader.FINDLAST;
            WarehouseReceiptNo := WhseRcptHeader."No.";
          END;
        DocumentType::Purchase:
          CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity);
      END;
    END;

    LOCAL PROCEDURE CreateTransferDocWhseShipment@106(VAR TransferHeaderNo@1000 : Code[20];LocationCode@1008 : Code[10];LocationCode2@1001 : Code[10];IntransitCode@1002 : Code[10];ItemNo@1005 : Code[20]) TransferQuantity : Decimal;
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      ReleaseTransferDocument@1006 : Codeunit 5708;
    BEGIN
      // Create And Release Transfer Document And Create Warehouse Shipment Line From Transfer Document.
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationCode,LocationCode2,IntransitCode);
      TransferHeaderNo := TransferHeader."No.";
      TransferQuantity := LibraryRandom.RandDec(5,2);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,TransferQuantity);
      ReleaseTransferDocument.RUN(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);  // Creating Warehouse Shipment from Transfer Header.
    END;

    LOCAL PROCEDURE CreateAndUpdateLocIntransit@120(VAR LocationCode2@1000 : Code[10];VAR LocationCode3@1001 : Code[10]);
    VAR
      WarehouseEmployee@1002 : Record 7301;
      Location2@1003 : Record 14;
    BEGIN
      // Create Location, Update Inventory Posting Setup And Intransit Location for Transfer .
      CreateAndUpdateLocation(Location2,TRUE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location2.Code,FALSE);
      LocationCode2 := Location2.Code;
      CreateAndUpdateLocation(Location2,FALSE,TRUE);
      LocationCode3 := Location2.Code;
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@84(VAR Location2@1000 : Record 14;RequireReceive@1001 : Boolean;UseAsInTransit@1002 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location2);
      Location2.VALIDATE("Require Receive",RequireReceive);
      Location2.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@6() : Code[20];
    VAR
      Item@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(20,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseEmployee@12(LocationCode@1001 : Code[10];IsDefault@1002 : Boolean);
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.SETRANGE("User ID",USERID);
      IF WarehouseEmployee.FINDFIRST THEN
        WarehouseEmployee.DELETEALL;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,IsDefault);
    END;

    LOCAL PROCEDURE SetupWarehouseLocation@67(VAR LocationCode@1006 : Code[10];RequirePutaway@1000 : Boolean;RequirePick@1001 : Boolean;RequireReceive@1002 : Boolean;RequireShipment@1003 : Boolean;UsePutawayWorksheet@1004 : Boolean);
    VAR
      Location@1005 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Use Put-away Worksheet",UsePutawayWorksheet);
      Location.VALIDATE("Require Put-away",RequirePutaway);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.VALIDATE("Require Pick",RequirePick);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location.MODIFY(TRUE);

      CreateWarehouseEmployee(Location.Code,TRUE);
      LocationCode := Location.Code;
      LocationCodeHandler := Location.Code;
    END;

    LOCAL PROCEDURE RegisterWhseActivityLine@98(LocationCode@1000 : Code[10]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WhseActRegisterYesNo@1003 : Codeunit 7306;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,LocationCode);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      WhseActRegisterYesNo.RUN(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreatePickForWhseShipment@21(VAR WarehouseShipmentHeaderNo@1000 : Code[20];VAR TransferHeaderNo@1009 : Code[20];VAR LocationCode@1004 : Code[10];PurchaseHeader@1005 : Record 38;ItemNo@1001 : Code[20]) TransferQuantity : Decimal;
    VAR
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseShipmentLine@1006 : Record 7321;
      WhseShipmentCreatePick@1003 : Report 7318;
      WhseShipmentRelease@1008 : Codeunit 7310;
      LocationCode2@1002 : Code[10];
    BEGIN
      // Create And Register Put Away.
      RegisterWhseActivityLine(PurchaseHeader."Location Code");  // Register Put Away For Receipt Created from Purchase.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      CreateAndUpdateLocIntransit(LocationCode,LocationCode2);

      // Create Transfer Document And Create Warehouse Shipment From Transfer Order.
      TransferQuantity :=
        CreateTransferDocWhseShipment(TransferHeaderNo,PurchaseHeader."Location Code",LocationCode,LocationCode2,ItemNo);

      // Creating Pick For Warehouse Shipment.
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,WarehouseShipmentLine,PurchaseHeader."Location Code");
      WhseShipmentRelease.Release(WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUN;
      WarehouseShipmentHeaderNo := WarehouseShipmentHeader."No.";
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceipt@19(VAR PurchaseHeader@1003 : Record 38;VAR TransferHeaderNo@1000 : Code[20];VAR LocationCode@1001 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      TransferHeader@1013 : Record 5740;
      WarehouseReceiptNo@1012 : Code[20];
      WarehouseShipmentHeaderNo@1005 : Code[20];
    BEGIN
      CreatePickForWhseShipment(
        WarehouseShipmentHeaderNo,TransferHeaderNo,LocationCode,PurchaseHeader,ItemNo);
      RegisterWhseActivityLine(PurchaseHeader."Location Code");  // Register Warehouse Activity Line Created by creating pick.
      PostWarehouseShipment(WarehouseShipmentHeaderNo);

      // Create Warehouse Receipt And Post Warehouse Receipt.
      TransferHeader.GET(TransferHeaderNo);
      WarehouseReceiptNo := FindWarehouseReceiptNo;
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);  // Create Warehouse Receipt From Transfer Order.
      PostWarehouseReceipt(WarehouseReceiptNo);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@89(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeader@103(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode2@1001 : Code[10]);
    BEGIN
      WarehouseReceiptHeader.INIT;
      WarehouseReceiptHeader.INSERT(TRUE);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode2);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePutAway@48(VAR WhseWorksheetNameName@1004 : Code[10];VAR WhseWorksheetTemplateName@1002 : Code[10];LocationCode@1005 : Code[10]);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1000 : Record 7327;
      GetSourceDocInbound@1003 : Codeunit 5751;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::"Put-away");
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhseWorksheetNameName := WhseWorksheetName.Name;
      WhseWorksheetTemplateName := WhseWorksheetTemplate.Name;
      GetSourceDocInbound.GetSingleWhsePutAwayDoc(WhseWorksheetTemplate.Name,WhseWorksheetName.Name,LocationCode);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@27(WarehouseReceiptNo@1000 : Code[20]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
      WhsePostReceiptYesNo@1001 : Codeunit 5761;
    BEGIN
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptNo);
      WarehouseReceiptLine.FINDFIRST;
      WhsePostReceiptYesNo.RUN(WarehouseReceiptLine);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@24(WarehouseShipmentHeaderNo@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
      WhsePostShipment@1002 : Codeunit 5763;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeaderNo);
      WarehouseShipmentLine.FINDFIRST;
      WhsePostShipment.RUN(WarehouseShipmentLine);
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56() : Code[10];
    VAR
      WarehouseSetup@1000 : Record 5769;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      WarehouseSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Receipt Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindWorksheetLine@29(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Code[10];WhseWorksheetTemplateName@1002 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplateName);
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetWarehouseSourceDocument@61(VAR WhseWorksheetLine@1000 : Record 7326);
    VAR
      WhseSourceCreateDocument@1001 : Report 7305;
    BEGIN
      WhseSourceCreateDocument.SetWhseWkshLine(WhseWorksheetLine);
      WhseSourceCreateDocument.Initialize(USERID,0,FALSE,FALSE,FALSE);
      WhseSourceCreateDocument.USEREQUESTPAGE(FALSE);
      WhseSourceCreateDocument.RUN;
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesReturns@70(VAR SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@39(VAR WarehouseActivityLine@1001 : Record 5767;LocationCode@1000 : Code[10]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE("Location Code",LocationCode);
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@77(VAR WarehouseShipmentHeader@1002 : Record 7320;VAR WarehouseShipmentLine@1001 : Record 7321;LocationCode@1000 : Code[10]);
    BEGIN
      WarehouseShipmentHeader.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentHeader.FINDFIRST;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE RestoreSalesReceivableSetup@47(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",TempSalesReceivablesSetup."Exact Cost Reversing Mandatory");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RegisterPutAway@57(VAR WhseWorksheetLine@1003 : Record 7326;LocationCode@1001 : Code[10]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WhseActRegisterYesNo@1000 : Codeunit 7306;
    BEGIN
      GetWarehouseSourceDocument(WhseWorksheetLine);
      FindWarehouseActivityLine(WarehouseActivityLine,LocationCode);
      WhseActRegisterYesNo.RUN(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE VerifyPutawayRequest@11(LocationCode@1001 : Code[10]);
    VAR
      WhsePutAwayRequest@1000 : Record 7324;
    BEGIN
      WhsePutAwayRequest.SETRANGE("Location Code",LocationCode);
      WhsePutAwayRequest.FINDFIRST;
      WhsePutAwayRequest.TESTFIELD("Document Type",WhsePutAwayRequest."Document Type"::Receipt);
      WhsePutAwayRequest.TESTFIELD(Status,WhsePutAwayRequest.Status::Open);
      Assert.AreEqual(
        PutawayRequestDocumentNo,WhsePutAwayRequest."Document No.",
        STRSUBSTNO(ErrorDocumentNo,WhsePutAwayRequest.FIELDCAPTION("Document No."),PutawayRequestDocumentNo,
          WhsePutAwayRequest.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyWhseRequest@55(LocationCode@1001 : Code[10];SourceNo@1000 : Code[20]);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Location Code",LocationCode);
      WarehouseRequest.FINDFIRST;
      WarehouseRequest.TESTFIELD("Source No.",SourceNo);
      Assert.AreEqual(
        PutAwayNo,WarehouseRequest."Put-away / Pick No.",
        STRSUBSTNO(ErrorDocumentNo,WarehouseRequest.FIELDCAPTION("Put-away / Pick No."),PutAwayNo,WarehouseRequest.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyShipmentQuantity@42(Quantity@1000 : Decimal;No@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehousePutaway@28(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1002 : Code[10];SourceNo@1005 : Code[20]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,LocationCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Source No.",SourceNo);
      WarehouseActivityLine.TESTFIELD("Qty. to Handle",Quantity);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@3(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@9(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PutAwayPageHandler@7(VAR PutAwaySelection@1000 : Page 7334;VAR Response@1001 : Action);
    VAR
      WhsePutAwayRequest@1002 : Record 7324;
    BEGIN
      WhsePutAwayRequest.SETRANGE("Location Code",LocationCodeHandler);
      WhsePutAwayRequest.SETRANGE("Completely Put Away",FALSE);
      WhsePutAwayRequest.FINDFIRST;
      PutawayRequestDocumentNo := WhsePutAwayRequest."Document No.";
      PutAwaySelection.SETRECORD(WhsePutAwayRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE SourcePageHandler@20(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Location Code",LocationCodeHandler);
      WarehouseRequest.FINDFIRST;
      PutAwayNo := WarehouseRequest."Put-away / Pick No.";
      SourceDocuments.SETRECORD(WarehouseRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentHandler@58(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::OK;
    END;

    LOCAL PROCEDURE CreateFromPurchOrder@68(PurchHeader@1000 : Record 38) : Code[20];
    VAR
      WhseRcptHeader@1002 : Record 7316;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchHeader);
      WhseRcptHeader.SETRANGE("Location Code",PurchHeader."Location Code");
      WhseRcptHeader.FINDLAST;
      EXIT(WhseRcptHeader."No.");
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Unsupported version tags:
      DK: Unable to Execute
      IN: Unable to Execute

      Test Warehouse Source Inbound functionality:
      1.  Check Put Away Selection Page has selected data for Receipt created from Purchase Order.
      2.  Check Warehouse Activity Line has same Purchase Source Document No., Item And Quantity, for Receipt created from
          Purchase Order.
      3.  Check that there is no Request remaining for said Location after Register Put Away for Receipt created from Purchase Order.
      4.  Check Put Away Selection Page has selected data For Receipt created from Sales Return Order.
      5.  Check Warehouse Activity Line has same Sales Return Source Document No., Item And Quantity for Receipt created from
          Sales Return Order.
      6.  Check that there is no Request remaining for said Location after Register Put Away For Receipt created from Sales Return.
      7.  Check Put Away Selection Page has selected data for Receipt Created from Warehouse Receipt Header.
      8.  Check Warehouse Activity Line has same Purchase Source Document No., Item And Quantity, for Receipt created
          from Warehouse Receipt Header.
      9.  Check that there is no Request remaining for said Location after Register Put Away For Receipt created from
          Warehouse Receipt Header.
      10. Check that Put Away Quantity To Handle is equal to Receipt Quantity, for Transfer Order.
      11. Check that Put Away Quantity To Handle is equal to Transfer Quantity, for Transfer Order.
      12. Check that Purchase Line Received quantity is equal to Put Away Register quantity.
      13. Check Warehouse Shipment Quantity after Pick and Register.
      14. Check no Transfer Order exist after Post Shipment And Register Pick, Post Receipt and Register Put Away.
      15. Check no Request after Posting and Put Away Register.

        Covers Test cases :
        --------------------------------------------------------------------------------------
        Test Function Name                     TFS ID
        --------------------------------------------------------------------------------------
         InBoundPurchPutAwayLocation           141393
         InBoundPurchWarehousePutAway          141393
         InBoundPurchRegistered                141393
         InBoundReturnPutAwayLocation          141393
         InBoundReturnWarehousePutAway         141393
         InBoundReturnRegistered               141393
         PurchPutAwayLocation                  141393
         PurchWarehousePutAway                 141393
         PurchRegistered                       141393
         InBoundWhsePutAwayQty                 141393
         InBoundWhsePutAwayTransferQty         141393
         InBoundWhsePutAwayPurchLineQty        141393
         InBoundPutAwayWhseShipQty             141393
         InBoundPutAwayTransferBlank           141393
         InBoundPutAwayWhseRequestBlank        141393
    }
    END.
  }
}

