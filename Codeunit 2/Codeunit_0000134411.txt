OBJECT Codeunit 134411 Pmt. Export AMC - Extract Data
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1009 : Record 79;
      GeneralLedgerSetup@1006 : Record 98;
      Assert@1005 : Codeunit 130000;
      LibraryPaymentExport@1007 : Codeunit 130100;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1008 : Codeunit 130509;
      LibraryERM@1001 : Codeunit 131300;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERMCountryData@1000 : Codeunit 131305;
      isInitialised@1010 : Boolean;
      MissingBankNameDataConvErr@1011 : TextConst 'ENU=%1 must have a value';

    LOCAL PROCEDURE Initialize@4();
    VAR
      PaymentExportData@1000 : Record 1226;
    BEGIN
      PaymentExportData.DELETEALL;
      GeneralLedgerSetup.GET;
      CompanyInformation.GET;

      IF isInitialised THEN
        EXIT;

      isInitialised := TRUE;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CheckBufferForAppliedPaymentsDomestic@1();
    VAR
      BankAccount@1006 : Record 270;
      VendorBankAccount@1005 : Record 288;
      Vendor@1000 : Record 23;
      PmtGenJnlBatch@1004 : Record 232;
    BEGIN
      // [SCENARIO 1] As an user, I want to export a number of payments applied to existing invoices.
      // [GIVEN] A number of domestic vendor invoices.
      // [GIVEN] A number of suggested payments applied to those invoices (fully or partially).
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToDomestic(BankAccount,VendorBankAccount);
      PostVendorInvoice(Vendor."No.");

      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      SuggestVendorPayments(Vendor,PmtGenJnlBatch);
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckBufferForUnappliedPaymentsDomestic@2();
    VAR
      BankAccount@1006 : Record 270;
      VendorBankAccount@1005 : Record 288;
      Vendor@1004 : Record 23;
      PmtGenJnlBatch@1002 : Record 232;
      GenJnlLine@1001 : Record 81;
    BEGIN
      // [SCENARIO 2] As an user, I want to export a number of standalone payments.
      // [GIVEN] A number of payment lines unapplied to any domestic vendor invoices.
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      // Information regarding applied invoices is not filled in, as per the linked mapping document.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToDomestic(BankAccount,VendorBankAccount);
      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckBufferForDiffAccTypesDomestic@3();
    VAR
      GLAccount@1171 : Record 15;
      BankAccount@1004 : Record 270;
      VendorBankAccount@1003 : Record 288;
      Vendor@1002 : Record 23;
      GenJnlBatch@1007 : Record 232;
      PmtGenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      CrMemoGenJnlLine@1008 : Record 81;
      Customer@1005 : Record 18;
      CustomerBankAccount@1006 : Record 287;
    BEGIN
      // [SCENARIO 3] As an user, I want to export a number of payments, both customer and vendor.
      // [GIVEN] A number of domestic vendor invoices and domestic customer credit memos.
      // [GIVEN] A number of payment/refund lines applied to them.
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      SetupCustomerDetails(Customer,CustomerBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToDomestic(BankAccount,VendorBankAccount);
      LibraryPaymentExport.SetRefundToDomestic(BankAccount,CustomerBankAccount);

      LibraryERM.CreateGenJournalBatch(GenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(CrMemoGenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::"Credit Memo",
        CrMemoGenJnlLine."Account Type"::Customer,Customer."No.",GenJnlLine."Bal. Account Type"::"G/L Account",GLAccount."No.",
        -LibraryRandom.RandDec(1000,2));
      LibraryERM.PostGeneralJnlLine(CrMemoGenJnlLine);

      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Refund,
        GenJnlLine."Account Type"::Customer,Customer."No.",-LibraryRandom.RandDec(1000,2));
      GenJnlLine.VALIDATE("Applies-to Doc. Type",GenJnlLine."Applies-to Doc. Type"::"Credit Memo");
      GenJnlLine.VALIDATE("Applies-to Doc. No.",CrMemoGenJnlLine."Document No.");
      GenJnlLine.MODIFY(TRUE);
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
      VerifyCustomerPaymentExportData(PmtGenJnlBatch,Customer,CustomerBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CheckBufferForAppliedPaymentsInternational@25();
    VAR
      BankAccount@1006 : Record 270;
      VendorBankAccount@1005 : Record 288;
      Vendor@1000 : Record 23;
      PmtGenJnlBatch@1004 : Record 232;
    BEGIN
      // [SCENARIO 4] As an user, I want to export a number of payments applied to existing invoices.
      // [GIVEN] A number of non-domestic vendor invoices.
      // [GIVEN] A number of suggested payments applied to those invoices (fully or partially).
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToInternational(BankAccount,VendorBankAccount);
      PostVendorInvoice(Vendor."No.");
      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      SuggestVendorPayments(Vendor,PmtGenJnlBatch);
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckBufferForUnappliedPaymentsInternational@30();
    VAR
      BankAccount@1006 : Record 270;
      VendorBankAccount@1005 : Record 288;
      Vendor@1004 : Record 23;
      PmtGenJnlBatch@1002 : Record 232;
      GenJnlLine@1001 : Record 81;
    BEGIN
      // [SCENARIO 5] As an user, I want to export a number of standalone payments.
      // [GIVEN] A number of payment lines unapplied to any non-domestic vendor invoices.
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      // Information regarding applied invoices is not filled in, as per the linked mapping document.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToInternational(BankAccount,VendorBankAccount);
      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckBufferForDiffAccTypesInternational@29();
    VAR
      BankAccount@1004 : Record 270;
      VendorBankAccount@1003 : Record 288;
      Vendor@1002 : Record 23;
      PmtGenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      Customer@1005 : Record 18;
      CustomerBankAccount@1006 : Record 287;
    BEGIN
      // [SCENARIO 6] As an user, I want to export a number of payments, both customer and vendor.
      // [GIVEN] A number of non-domestic vendor invoices and non-domestic customer credit memos.
      // [GIVEN] A number of payment/refund lines applied to them.
      // [GIVEN] A bank account set up to export to AMC format, used by the payments.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] The Payment Export Data buffer table is populated with information regarding
      // - sender identification (creditor no., company name, template and batch name, unique message id, VAT no.,
      // own reference, own address info, sender bank account info, etc.
      // - transaction information (amount details, transaction specification, costs, payment type)
      // - receiver identification: receiver's address, receiver's bank account (including address)
      // More details in the linked document in the deliverable.
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      SetupCustomerDetails(Customer,CustomerBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      LibraryPaymentExport.SetPmtToInternational(BankAccount,VendorBankAccount);
      LibraryPaymentExport.SetRefundToInternational(BankAccount,CustomerBankAccount);
      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        PmtGenJnlBatch."Journal Template Name",PmtGenJnlBatch.Name,GenJnlLine."Document Type"::Refund,
        GenJnlLine."Account Type"::Customer,Customer."No.",-LibraryRandom.RandDec(1000,2));
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping.
      ExtractAMCData(PmtGenJnlBatch);

      // Verify. Payment Export Data.
      VerifyVendorPaymentExportData(PmtGenJnlBatch,Vendor,VendorBankAccount,BankAccount);
      VerifyCustomerPaymentExportData(PmtGenJnlBatch,Customer,CustomerBankAccount,BankAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExportFailsIfBankNameDataConvNotSpecified@8();
    VAR
      BankAccount@1003 : Record 270;
      VendorBankAccount@1002 : Record 288;
      Vendor@1001 : Record 23;
      PmtGenJnlBatch@1000 : Record 232;
    BEGIN
      // [SCENARIO 7] If the "Bank Name - Data Conversion" is not set, payment export throws an error in the premapping.
      // [GIVEN] A number of domestic vendor invoices.
      // [GIVEN] A number of suggested payments applied to those invoices (fully or partially).
      // [GIVEN] A bank account set up to export to AMC format, used by the payments but missing "Bank Name - Data Conversion" field value.
      // [WHEN] Invoking the Export to Payment file from the Payment Journal.
      // [THEN] It throws an error that the "Bank Name - Data Conversion" field cannot be empty
      Initialize;

      // Setup.
      SetupVendorDetails(Vendor,VendorBankAccount);
      CreateBankAccountWithDetails(BankAccount);
      BankAccount."Bank Name - Data Conversion" := '';

      LibraryPaymentExport.SetPmtToDomestic(BankAccount,VendorBankAccount);
      PostVendorInvoice(Vendor."No.");

      LibraryERM.CreateGenJournalBatch(PmtGenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      PmtGenJnlBatch.VALIDATE("Bal. Account Type",PmtGenJnlBatch."Bal. Account Type"::"Bank Account");
      PmtGenJnlBatch.VALIDATE("Bal. Account No.",BankAccount."No.");
      PmtGenJnlBatch.MODIFY(TRUE);
      SuggestVendorPayments(Vendor,PmtGenJnlBatch);
      SetupPmtDetails(PmtGenJnlBatch);

      // Exercise. Run the pre-mapping. & Verify the error returned
      ASSERTERROR ExtractAMCData(PmtGenJnlBatch);
      Assert.ExpectedError(STRSUBSTNO(MissingBankNameDataConvErr,BankAccount.FIELDCAPTION("Bank Name - Data Conversion")));
    END;

    LOCAL PROCEDURE SuggestVendorPayments@20(VAR Vendor@1001 : Record 23;GenJnlBatch@1002 : Record 232);
    VAR
      GenJnlLine@1003 : Record 81;
      SuggestVendorPayments@1000 : Report 393;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.VALIDATE("Journal Batch Name",GenJnlBatch.Name);

      WITH SuggestVendorPayments DO BEGIN
        SetGenJnlLine(GenJnlLine);
        SETTABLEVIEW(Vendor);
        InitializeRequest(WORKDATE,FALSE,0,FALSE,WORKDATE,LibraryUtility.GenerateGUID,FALSE,
          GenJnlBatch."Bal. Account Type",GenJnlBatch."Bal. Account No.",0);
        USEREQUESTPAGE(FALSE);
        RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE SetupVendorDetails@13(VAR Vendor@1000 : Record 23;VAR VendorBankAccount@1002 : Record 288);
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateVendorBankAccountWithDetails(VendorBankAccount,Vendor."No.");
      LibraryERM.CreatePaymentMethod(PaymentMethod);

      Vendor.VALIDATE("Payment Method Code",PaymentMethod.Code);
      Vendor.VALIDATE("Preferred Bank Account",VendorBankAccount.Code);
      Vendor.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Name),DATABASE::Vendor));
      Vendor.VALIDATE(Address,
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Address),DATABASE::Vendor));
      Vendor.VALIDATE("Address 2",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Address 2"),DATABASE::Vendor));
      Vendor.VALIDATE(City,
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(City),DATABASE::Vendor));
      Vendor.VALIDATE("Post Code",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Post Code"),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      Vendor.SETRANGE("No.",Vendor."No.");
    END;

    LOCAL PROCEDURE SetupCustomerDetails@74(VAR Customer@1000 : Record 18;VAR CustomerBankAccount@1002 : Record 287);
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateCustomerBankAccountWithDetails(CustomerBankAccount,Customer."No.");
      LibraryERM.CreatePaymentMethod(PaymentMethod);
      Customer.VALIDATE("Payment Method Code",PaymentMethod.Code);
      Customer.VALIDATE("Preferred Bank Account",CustomerBankAccount.Code);
      Customer.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer));
      Customer.VALIDATE(Address,
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Address),DATABASE::Customer));
      Customer.VALIDATE("Address 2",
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Address 2"),DATABASE::Customer));
      Customer.VALIDATE(City,
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO(City),DATABASE::Customer));
      Customer.VALIDATE("Post Code",
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Post Code"),DATABASE::Customer));
      Customer.MODIFY(TRUE);
      Customer.SETRANGE("No.",Customer."No.");
    END;

    LOCAL PROCEDURE SetupPmtDetails@59(GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDSET;
      REPEAT
        GenJournalLine."Creditor No." :=
          LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Creditor No."),DATABASE::"Gen. Journal Line");
        GenJournalLine."Payment Reference" := LibraryUtility.GenerateGUID;
        GenJournalLine.VALIDATE("Applies-to Ext. Doc. No.",
          LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Applies-to Ext. Doc. No."),DATABASE::"Gen. Journal Line"));
        GenJournalLine.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVendorBankAccountWithDetails@16(VAR VendorBankAccount@1000 : Record 288;VendorNo@1001 : Code[20]);
    VAR
      BankClearingStandard@1002 : Record 1280;
    BEGIN
      LibraryPurchase.CreateVendorBankAccount(VendorBankAccount,VendorNo);
      VendorBankAccount.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO(Name),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE(Address,
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO(Address),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE("Address 2",
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO("Address 2"),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE(City,
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO(City),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE("Post Code",
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO("Post Code"),DATABASE::"Vendor Bank Account"));
      VendorBankAccount."Bank Account No." :=
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO("Bank Account No."),DATABASE::"Vendor Bank Account");
      VendorBankAccount.VALIDATE(IBAN,
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO(IBAN),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE("SWIFT Code",
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO("SWIFT Code"),DATABASE::"Vendor Bank Account"));
      VendorBankAccount.VALIDATE("Bank Clearing Code",
        LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO("Bank Clearing Code"),DATABASE::"Vendor Bank Account"));
      BankClearingStandard.FINDFIRST;
      VendorBankAccount.VALIDATE("Bank Clearing Standard",BankClearingStandard.Code);
      VendorBankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerBankAccountWithDetails@75(VAR CustomerBankAccount@1000 : Record 287;CustomerNo@1001 : Code[20]);
    VAR
      BankClearingStandard@1002 : Record 1280;
    BEGIN
      LibrarySales.CreateCustomerBankAccount(CustomerBankAccount,CustomerNo);
      CustomerBankAccount.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO(Name),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE(Address,
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO(Address),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE("Address 2",
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO("Address 2"),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE(City,
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO(City),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE("Post Code",
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO("Post Code"),DATABASE::"Customer Bank Account"));
      CustomerBankAccount."Bank Account No." :=
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO("Bank Account No."),DATABASE::"Customer Bank Account");
      CustomerBankAccount.VALIDATE(IBAN,
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO(IBAN),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE("SWIFT Code",
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO("SWIFT Code"),DATABASE::"Customer Bank Account"));
      CustomerBankAccount.VALIDATE("Bank Clearing Code",
        LibraryUtility.GenerateRandomCode(CustomerBankAccount.FIELDNO("Bank Clearing Code"),DATABASE::"Customer Bank Account"));
      BankClearingStandard.FINDFIRST;
      CustomerBankAccount.VALIDATE("Bank Clearing Standard",BankClearingStandard.Code);
      CustomerBankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankAccountWithDetails@28(VAR BankAccount@1000 : Record 270);
    VAR
      BankClearingStandard@1001 : Record 1280;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE(Name,
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(Name),DATABASE::"Bank Account"));
      BankAccount.VALIDATE(Address,
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(Address),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Address 2",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Address 2"),DATABASE::"Bank Account"));
      BankAccount.VALIDATE(City,
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(City),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Post Code",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Post Code"),DATABASE::"Bank Account"));
      BankAccount."Bank Account No." :=
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Bank Account No."),DATABASE::"Bank Account");
      BankAccount.VALIDATE(IBAN,
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(IBAN),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("SWIFT Code",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("SWIFT Code"),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Bank Clearing Code",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Bank Clearing Code"),DATABASE::"Bank Account"));
      BankClearingStandard.FINDFIRST;
      BankAccount.VALIDATE("Bank Clearing Standard",BankClearingStandard.Code);
      BankAccount.VALIDATE("Bank Name - Data Conversion",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Bank Name - Data Conversion"),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Creditor No.",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Creditor No."),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Transit No.",
        LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Transit No."),DATABASE::"Bank Account"));
      BankAccount.VALIDATE("Credit Transfer Msg. Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      BankAccount.VALIDATE("Payment Export Format",SelectAMCCreditTransferFormat);
      BankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyVendorPaymentExportData@32(GenJournalBatch@1000 : Record 232;Vendor@1005 : Record 23;VendorBankAccount@1003 : Record 288;BankAccount@1004 : Record 270);
    VAR
      PaymentExportData@1001 : Record 1226;
      GenJournalLine@1002 : Record 81;
      PaymentMethod@1006 : Record 289;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
      GenJournalLine.FINDSET;
      REPEAT
        PaymentExportData.SETRANGE("General Journal Template",GenJournalLine."Journal Template Name");
        PaymentExportData.SETRANGE("General Journal Batch Name",GenJournalLine."Journal Batch Name");
        PaymentExportData.SETRANGE("General Journal Line No.",GenJournalLine."Line No.");
        Assert.AreEqual(1,PaymentExportData.COUNT,'Unexpected buffer entries for ' + PaymentExportData.GETFILTERS);
        PaymentExportData.FINDFIRST;
        PaymentMethod.GET(GenJournalLine."Payment Method Code");
        PaymentExportData.TESTFIELD("Data Exch. Line Def Code",PaymentMethod."Pmt. Export Line Definition");
        PaymentExportData.TESTFIELD("Payment Type",PaymentMethod."Bank Data Conversion Pmt. Type");
        PaymentExportData.TESTFIELD("Payment Reference",GenJournalLine."Payment Reference");
        PaymentExportData.TESTFIELD("Sender Bank Account Currency",
          GeneralLedgerSetup.GetCurrencyCode(BankAccount."Currency Code"));
        PaymentExportData.TESTFIELD("Sender Bank Account No.",BankAccount.GetBankAccountNo);
        PaymentExportData.TESTFIELD("Sender Bank Country/Region",
          CompanyInformation.GetCountryRegionCode(BankAccount."Country/Region Code"));
        PaymentExportData.TESTFIELD("Sender Bank BIC",BankAccount."SWIFT Code");
        PaymentExportData.TESTFIELD("Sender Bank Address",BankAccount.Address);
        PaymentExportData.TESTFIELD("Sender Bank City",BankAccount.City);
        PaymentExportData.TESTFIELD("Sender Bank Post Code",BankAccount."Post Code");
        PaymentExportData.TESTFIELD("Recipient Name",Vendor.Name);
        PaymentExportData.TESTFIELD("Recipient Address",Vendor.Address);
        PaymentExportData.TESTFIELD("Recipient City",Vendor.City);
        PaymentExportData.TESTFIELD("Recipient Post Code",Vendor."Post Code");
        PaymentExportData.TESTFIELD("Recipient Country/Region Code",Vendor."Country/Region Code");
        PaymentExportData.TESTFIELD("Recipient Email Address",Vendor."E-Mail");
        PaymentExportData.TESTFIELD("Recipient Bank Acc. No.",VendorBankAccount.GetBankAccountNo);
        PaymentExportData.TESTFIELD("Recipient Bank BIC",VendorBankAccount."SWIFT Code");
        PaymentExportData.TESTFIELD("Recipient Bank Name",VendorBankAccount.Name);
        PaymentExportData.TESTFIELD("Recipient Bank Address",VendorBankAccount.Address);
        PaymentExportData.TESTFIELD("Recipient Bank City",VendorBankAccount.City);
        PaymentExportData.TESTFIELD("Recipient Bank Country/Region",VendorBankAccount."Country/Region Code");
        PaymentExportData.TESTFIELD("Recipient Bank Post Code",VendorBankAccount."Post Code");
        PaymentExportData.TESTFIELD("Short Advice",GenJournalLine."Document No.");
        PaymentExportData.TESTFIELD("Message to Recipient 1",COPYSTR(GenJournalLine."Message to Recipient",1,
            MAXSTRLEN(PaymentExportData."Message to Recipient 1")));
        PaymentExportData.TESTFIELD("Message to Recipient 2",COPYSTR(GenJournalLine."Message to Recipient",
            MAXSTRLEN(PaymentExportData."Message to Recipient 1"),MAXSTRLEN(GenJournalLine."Message to Recipient")));
        PaymentExportData.TESTFIELD(Amount,GenJournalLine.Amount);
        PaymentExportData.TESTFIELD("Currency Code",GeneralLedgerSetup.GetCurrencyCode(GenJournalLine."Currency Code"));
        PaymentExportData.TESTFIELD("Transfer Date",GenJournalLine."Posting Date");
        PaymentExportData.TESTFIELD("Document No.",GenJournalLine."Document No.");
        PaymentExportData.TESTFIELD("Payment Reference",GenJournalLine."Payment Reference");
        PaymentExportData.TESTFIELD("Applies-to Ext. Doc. No.",GenJournalLine."Applies-to Ext. Doc. No.");
        PaymentExportData.TESTFIELD("Costs Distribution",'Shared');
        PaymentExportData.TESTFIELD("Message Structure",'manual');
        PaymentExportData.TESTFIELD("Own Address Info.",'frombank');
        PaymentExportData.TESTFIELD("Creditor No.",BankAccount."Creditor No.");
        PaymentExportData.TESTFIELD("Recipient ID",GenJournalLine."Account No.");
        PaymentExportData.TESTFIELD("Sender Bank Name - Data Conv.",BankAccount."Bank Name - Data Conversion");
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCustomerPaymentExportData@19(GenJournalBatch@1000 : Record 232;Customer@1005 : Record 18;CustomerBankAccount@1003 : Record 287;BankAccount@1004 : Record 270);
    VAR
      PaymentExportData@1001 : Record 1226;
      GenJournalLine@1002 : Record 81;
      PaymentMethod@1006 : Record 289;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
      GenJournalLine.FINDSET;
      REPEAT
        PaymentExportData.SETRANGE("General Journal Template",GenJournalLine."Journal Template Name");
        PaymentExportData.SETRANGE("General Journal Batch Name",GenJournalLine."Journal Batch Name");
        PaymentExportData.SETRANGE("General Journal Line No.",GenJournalLine."Line No.");
        Assert.AreEqual(1,PaymentExportData.COUNT,'Unexpected buffer entries for ' + PaymentExportData.GETFILTERS);
        PaymentExportData.FINDFIRST;
        PaymentMethod.GET(GenJournalLine."Payment Method Code");
        PaymentExportData.TESTFIELD("Data Exch. Line Def Code",PaymentMethod."Pmt. Export Line Definition");
        PaymentExportData.TESTFIELD("Payment Type",PaymentMethod."Bank Data Conversion Pmt. Type");
        PaymentExportData.TESTFIELD("Payment Reference",GenJournalLine."Payment Reference");
        PaymentExportData.TESTFIELD("Sender Bank Account Currency",
          GeneralLedgerSetup.GetCurrencyCode(BankAccount."Currency Code"));
        PaymentExportData.TESTFIELD("Sender Bank Account No.",BankAccount.GetBankAccountNo);
        PaymentExportData.TESTFIELD("Sender Bank Country/Region",
          CompanyInformation.GetCountryRegionCode(BankAccount."Country/Region Code"));
        PaymentExportData.TESTFIELD("Sender Bank BIC",BankAccount."SWIFT Code");
        PaymentExportData.TESTFIELD("Sender Bank Address",BankAccount.Address);
        PaymentExportData.TESTFIELD("Sender Bank City",BankAccount.City);
        PaymentExportData.TESTFIELD("Sender Bank Post Code",BankAccount."Post Code");
        PaymentExportData.TESTFIELD("Recipient Name",Customer.Name);
        PaymentExportData.TESTFIELD("Recipient Address",Customer.Address);
        PaymentExportData.TESTFIELD("Recipient City",Customer.City);
        PaymentExportData.TESTFIELD("Recipient Post Code",Customer."Post Code");
        PaymentExportData.TESTFIELD("Recipient Country/Region Code",Customer."Country/Region Code");
        PaymentExportData.TESTFIELD("Recipient Email Address",Customer."E-Mail");
        PaymentExportData.TESTFIELD("Recipient Bank Acc. No.",CustomerBankAccount.GetBankAccountNo);
        PaymentExportData.TESTFIELD("Recipient Bank BIC",CustomerBankAccount."SWIFT Code");
        PaymentExportData.TESTFIELD("Recipient Bank Name",CustomerBankAccount.Name);
        PaymentExportData.TESTFIELD("Recipient Bank Address",CustomerBankAccount.Address);
        PaymentExportData.TESTFIELD("Recipient Bank City",CustomerBankAccount.City);
        PaymentExportData.TESTFIELD("Recipient Bank Country/Region",CustomerBankAccount."Country/Region Code");
        PaymentExportData.TESTFIELD("Recipient Bank Post Code",CustomerBankAccount."Post Code");
        PaymentExportData.TESTFIELD("Short Advice",GenJournalLine."Document No.");
        PaymentExportData.TESTFIELD("Message to Recipient 1",COPYSTR(GenJournalLine."Message to Recipient",1,
            MAXSTRLEN(PaymentExportData."Message to Recipient 1")));
        PaymentExportData.TESTFIELD("Message to Recipient 1",COPYSTR(GenJournalLine."Message to Recipient",
            MAXSTRLEN(PaymentExportData."Message to Recipient 1"),MAXSTRLEN(GenJournalLine."Message to Recipient")));
        PaymentExportData.TESTFIELD(Amount,GenJournalLine.Amount);
        PaymentExportData.TESTFIELD("Currency Code",GeneralLedgerSetup.GetCurrencyCode(GenJournalLine."Currency Code"));
        PaymentExportData.TESTFIELD("Transfer Date",GenJournalLine."Posting Date");
        PaymentExportData.TESTFIELD("Document No.",GenJournalLine."Document No.");
        PaymentExportData.TESTFIELD("Payment Reference",GenJournalLine."Payment Reference");
        PaymentExportData.TESTFIELD("Applies-to Ext. Doc. No.",GenJournalLine."Applies-to Ext. Doc. No.");
        PaymentExportData.TESTFIELD("Costs Distribution",'Shared');
        PaymentExportData.TESTFIELD("Message Structure",'manual');
        PaymentExportData.TESTFIELD("Own Address Info.",'frombank');
        PaymentExportData.TESTFIELD("Creditor No.",BankAccount."Creditor No.");
        PaymentExportData.TESTFIELD("Transit No.",BankAccount."Transit No.");
        PaymentExportData.TESTFIELD("Recipient ID",GenJournalLine."Account No.");
        PaymentExportData.TESTFIELD("Sender Bank Name - Data Conv.",BankAccount."Bank Name - Data Conversion");
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PostVendorInvoice@1170(VendorNo@1171 : Code[20]);
    VAR
      GenJnlBatch@1170 : Record 232;
      GenJnlLine@1172 : Record 81;
      GLAccount@1173 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGenJournalBatch(GenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Invoice,
        GenJnlLine."Account Type"::Vendor,VendorNo,GenJnlLine."Bal. Account Type"::"G/L Account",GLAccount."No.",
        -LibraryRandom.RandDec(1000,2));
      GenJnlLine."Recipient Bank Account" := '';
      GenJnlLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE SelectAMCCreditTransferFormat@7() : Code[20];
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchMapping@1001 : Record 1224;
      BankExportImportSetup@1002 : Record 1200;
    BEGIN
      DataExchDef.SETRANGE("File Type",DataExchDef."File Type"::Xml);
      DataExchDef.SETRANGE(Type,DataExchDef.Type::"Payment Export");
      DataExchDef.FINDSET;
      REPEAT
        DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDef.Code);
        DataExchMapping.SETRANGE("Table ID",DATABASE::"Payment Export Data");
        DataExchMapping.SETRANGE("Pre-Mapping Codeunit",CODEUNIT::"Exp. Bank Conv.-Pre-Mapping");
        IF DataExchMapping.FINDFIRST THEN BEGIN
          BankExportImportSetup.SETRANGE("Data Exch. Def. Code",DataExchDef.Code);
          IF BankExportImportSetup.FINDFIRST THEN BEGIN
            UpdateAMCCreditTransferFormat(DataExchDef);
            EXIT(BankExportImportSetup.Code);
          END;
        END;
      UNTIL DataExchDef.NEXT = 0;
      EXIT('');
    END;

    LOCAL PROCEDURE UpdateAMCCreditTransferFormat@6(VAR DataExchDef@1000 : Record 1222);
    BEGIN
      DataExchDef."Ext. Data Handling Codeunit" := CODEUNIT::"Save Data Exch. Blob Sample";
      DataExchDef."User Feedback Codeunit" := CODEUNIT::"Exp. User Feedback Gen. Jnl.";
      DataExchDef."Validation Codeunit" := 0;
      DataExchDef.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ExtractAMCData@5(PmtGenJnlBatch@1000 : Record 232);
    VAR
      DataExch@1001 : Record 1220;
      GenJnlLine@1002 : Record 81;
    BEGIN
      DataExch.INIT;
      DataExch.INSERT;
      GenJnlLine.SETRANGE("Journal Template Name",PmtGenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",PmtGenJnlBatch.Name);
      GenJnlLine.MODIFYALL("Data Exch. Entry No.",DataExch."Entry No.");
      CODEUNIT.RUN(CODEUNIT::"Exp. Bank Conv.-Pre-Mapping",DataExch);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@38(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@22(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Bank Data Conversion] [Payment Export Data] [UT]
    }
    END.
  }
}

