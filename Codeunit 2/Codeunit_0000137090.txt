OBJECT Codeunit 137090 SCM Kitting - D1
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      BOMComponent@1009 : Record 90;
      Item@1001 : Record 27;
      LibraryERM@1004 : Codeunit 131300;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryAssembly@1021 : Codeunit 132207;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1007 : Codeunit 130440;
      ChangeType@1011 : ' ,Add,Replace,Delete,Edit,Delete all,Edit cards';
      StdCostLevel@1006 : Integer;
      isInitialized@1000 : Boolean;
      ErrorNoAssemblyList@1013 : TextConst 'ENU=Item %1 %2 has no assembly list. The %3 will not be calculated.';
      ErrorItemNotAssembled@1014 : TextConst 'ENU=Item %1 %2 does not use replenishment system Assembly. The %3 will not be calculated.';
      ErrorCyclicalKit@1017 : TextConst 'ENU=You cannot insert item %1 as an assembly component of itself.';
      ErrorWrongType@1012 : TextConst 'ENU=Type must be equal to ''Item''  in BOM Component: Parent Item No.';
      ErrorQtyPer@1015 : TextConst 'ENU=Quantity per must be equal to ''1''  in BOM Component: Parent Item No.';
      StdCostRollupMessage@1016 : TextConst 'ENU="Select All levels to include and update the "';
      ReplMethodMessage@1018 : TextConst 'ENU=use replenishment system Prod. Order. Do you want to calculate standard cost for those subassemblies?';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE StdCostPriceRollup@25(UseBaseUoM@1012 : Boolean;NoOfItems@1006 : Integer;NoOfResources@1007 : Integer;NoOfTexts@1010 : Integer;QtyPerFactor@1011 : Integer);
    VAR
      Item@1002 : Record 27;
      CalculateStandardCost@1008 : Codeunit 5812;
      MaterialCost@1000 : Decimal;
      CapacityCost@1001 : Decimal;
      CapOverhead@1003 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",UseBaseUoM,
        NoOfItems,NoOfResources,NoOfTexts,QtyPerFactor,'','');

      StdCostLevel := 1;
      // Exercise.
      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Item.GET(Item."No.");
      Item.CALCFIELDS("Assembly BOM");
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
        Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
      Assert.AreNearlyEqual(MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap Cost');
      Assert.AreNearlyEqual(CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap Overhead');
      Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong unit price for:' + Item."No.");
      Assert.AreEqual(NoOfItems + NoOfResources + NoOfTexts > 0,Item."Assembly BOM",'Wrong Assembly BOM flag');
    END;

    [Test]
    PROCEDURE TwoItemOneRes@28();
    BEGIN
      StdCostPriceRollup(TRUE,2,1,1,1);
    END;

    [Test]
    PROCEDURE TwoItemTwoRes@29();
    BEGIN
      StdCostPriceRollup(TRUE,2,2,1,1);
    END;

    [Test]
    PROCEDURE OneItemTwoRes@30();
    BEGIN
      StdCostPriceRollup(TRUE,1,2,1,1);
    END;

    [Test]
    PROCEDURE NoItemTwoRes@31();
    BEGIN
      StdCostPriceRollup(TRUE,0,2,1,1);
    END;

    [Test]
    PROCEDURE OneItemOneRes@32();
    BEGIN
      StdCostPriceRollup(TRUE,1,1,1,1);
    END;

    [Test]
    PROCEDURE TwoItemNoRes@33();
    BEGIN
      StdCostPriceRollup(TRUE,2,0,1,1);
    END;

    [Test]
    PROCEDURE NoItemNoRes@34();
    BEGIN
      StdCostPriceRollup(TRUE,0,0,1,1);
    END;

    [Test]
    PROCEDURE NoItemNoResNoText@51();
    VAR
      Item@1001 : Record 27;
      CalculateStandardCost@1000 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,0,0,0,1,'','');

      // Exercise.
      ASSERTERROR CalculateStandardCost.CalcItem(Item."No.",TRUE);

      // Validate.
      Assert.AreEqual(
        STRSUBSTNO(ErrorNoAssemblyList,Item."No.",Item.Description,'Standard Cost'),ConvertMessage(GETLASTERRORTEXT),'Wrong cost msg');

      // Tear down.
      CLEARLASTERROR;

      // Exercise.
      ASSERTERROR CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Assert.AreEqual(
        STRSUBSTNO(ErrorNoAssemblyList,Item."No.",Item.Description,'Unit Price'),ConvertMessage(GETLASTERRORTEXT),'Wrong price msg');

      // Tear down.
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE TwoItemTwoResNonBaseUOM@9();
    BEGIN
      StdCostPriceRollup(FALSE,2,2,1,1);
    END;

    [Test]
    PROCEDURE OneItemOneResZeroQtyPer@10();
    BEGIN
      StdCostPriceRollup(TRUE,1,1,1,0);
    END;

    [Test]
    PROCEDURE OneItemOneResNegQtyPer@17();
    BEGIN
      StdCostPriceRollup(TRUE,1,1,1,-1);
    END;

    [Normal]
    LOCAL PROCEDURE DiffCostingMethodsComp@5(CostingMethod@1009 : Option;CostAdjNeeded@1004 : Boolean;IndirectCost@1010 : Decimal;Overhead@1011 : Decimal);
    VAR
      Item@1002 : Record 27;
      CalculateStandardCost@1006 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,CostingMethod,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(CostingMethod,Item."No.",TRUE,1,1,1,1,'','');
      LibraryAssembly.ModifyCostParams(Item."No.",CostAdjNeeded,IndirectCost,Overhead);

      // Exercise.
      StdCostLevel := 1;
      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Item.GET(Item."No.");
      IF CostingMethod <> Item."Costing Method"::Standard THEN
        Assert.AreEqual(0,Item."Unit Cost",'Unit cost should be 0:' + Item."No.");
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong unit price for:' + Item."No.");
    END;

    [Test]
    PROCEDURE FIFOCostAdj@22();
    BEGIN
      DiffCostingMethodsComp(Item."Costing Method"::FIFO,TRUE,0,0);
    END;

    [Test]
    PROCEDURE LIFOCostAdj@11();
    BEGIN
      DiffCostingMethodsComp(Item."Costing Method"::LIFO,TRUE,0,0);
    END;

    [Test]
    PROCEDURE AvgCostAdj@13();
    BEGIN
      DiffCostingMethodsComp(Item."Costing Method"::Average,TRUE,0,0);
    END;

    [Test]
    PROCEDURE StdIndirectCostOverhead@18();
    BEGIN
      DiffCostingMethodsComp(
        Item."Costing Method"::Standard,FALSE,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2));
    END;

    [Normal]
    LOCAL PROCEDURE DiffCostingMethodsParent@36(CostingMethod@1009 : Option;CostAdjNeeded@1004 : Boolean;IndirectCost@1010 : Decimal;Overhead@1011 : Decimal);
    VAR
      Item@1002 : Record 27;
      CalculateStandardCost@1008 : Codeunit 5812;
      MaterialCost@1000 : Decimal;
      CapacityCost@1001 : Decimal;
      CapOverhead@1003 : Decimal;
      InitialCost@1005 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,CostingMethod,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,1,1,1,1,'','');
      LibraryAssembly.ModifyItem(Item."No.",CostAdjNeeded,IndirectCost,Overhead);
      Item.GET(Item."No.");
      InitialCost := Item."Unit Cost";

      // Exercise.
      StdCostLevel := 1;
      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Item.GET(Item."No.");
      IF CostingMethod <> Item."Costing Method"::Standard THEN
        Assert.AreEqual(InitialCost,Item."Unit Cost",'Unit cost should not be updated:' + Item."No.");
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
        Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
      Assert.AreNearlyEqual(MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
      Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong unit price for:' + Item."No.");
    END;

    [Test]
    PROCEDURE ParentAvgCostAdj@38();
    BEGIN
      DiffCostingMethodsParent(Item."Costing Method"::Average,TRUE,0,0);
    END;

    [Test]
    PROCEDURE ParentFIFOCostAdj@39();
    BEGIN
      DiffCostingMethodsParent(Item."Costing Method"::FIFO,TRUE,0,0);
    END;

    [Test]
    PROCEDURE ParentSTDCostAdj@2();
    BEGIN
      DiffCostingMethodsParent(Item."Costing Method"::Standard,TRUE,0,0);
    END;

    [Test]
    PROCEDURE ParentCostAdjOvhd@40();
    BEGIN
      DiffCostingMethodsParent(
        Item."Costing Method"::Standard,TRUE,0,LibraryRandom.RandDec(10,2));
    END;

    [Test]
    PROCEDURE ParentCostAdjIndirectCost@1();
    BEGIN
      DiffCostingMethodsParent(
        Item."Costing Method"::Standard,TRUE,LibraryRandom.RandDec(10,2),0);
    END;

    [Normal]
    LOCAL PROCEDURE ModifyAssemblyList@42(ChangeType@1004 : ' ,Add,Replace,Delete,Edit,Delete all,Edit cards';ComponentType@1009 : Option;NewComponentType@1010 : Option);
    VAR
      Item@1002 : Record 27;
      Item1@1001 : Record 27;
      Resource1@1000 : Record 156;
      CalculateStandardCost@1008 : Codeunit 5812;
      NewComponentNo@1003 : Code[20];
      MaterialCost@1005 : Decimal;
      CapacityCost@1006 : Decimal;
      CapOverhead@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,2,2,1,1,'','');

      IF NewComponentType = BOMComponent.Type::Item THEN
        NewComponentNo := LibraryAssembly.CreateItem(Item1,Item."Costing Method"::Standard,Item."Replenishment System"::Purchase,'','')
      ELSE
        NewComponentNo := LibraryAssembly.CreateResource(Resource1,TRUE,'');
      LibraryAssembly.EditAssemblyList(ChangeType,ComponentType,NewComponentType,NewComponentNo,Item."No.");

      // Exercise.
      StdCostLevel := 1;
      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Item.GET(Item."No.");
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
        Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
      Assert.AreNearlyEqual(MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
      Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong unit price for:' + Item."No.");
    END;

    [Test]
    PROCEDURE ReplaceItemRes@37();
    BEGIN
      ModifyAssemblyList(ChangeType::Replace,BOMComponent.Type::Item,BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE ReplaceItemItem@16();
    BEGIN
      ModifyAssemblyList(ChangeType::Replace,BOMComponent.Type::Item,BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE ReplaceResItem@19();
    BEGIN
      ModifyAssemblyList(ChangeType::Replace,BOMComponent.Type::Resource,BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE ReplaceResRes@21();
    BEGIN
      ModifyAssemblyList(ChangeType::Replace,BOMComponent.Type::Resource,BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE AddItem@27();
    BEGIN
      ModifyAssemblyList(ChangeType::Add,BOMComponent.Type::Item,BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE AddRes@35();
    BEGIN
      ModifyAssemblyList(ChangeType::Add,BOMComponent.Type::Resource,BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE DeleteItem@41();
    BEGIN
      ModifyAssemblyList(ChangeType::Delete,BOMComponent.Type::Item,BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE DeleteRes@43();
    BEGIN
      ModifyAssemblyList(ChangeType::Delete,BOMComponent.Type::Resource,BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE EditItem@46();
    BEGIN
      ModifyAssemblyList(ChangeType::Edit,BOMComponent.Type::Item,BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE EditRes@47();
    BEGIN
      ModifyAssemblyList(ChangeType::Edit,BOMComponent.Type::Resource,BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE DeleteAll@45();
    VAR
      Item@1004 : Record 27;
      CalculateStandardCost@1001 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,2,2,1,1,'','');
      LibraryAssembly.DeleteAssemblyList(Item."No.");

      // Exercise.
      ASSERTERROR CalculateStandardCost.CalcItem(Item."No.",TRUE);

      // Validate.
      Assert.AreEqual(
        STRSUBSTNO(ErrorNoAssemblyList,Item."No.",Item.Description,'Standard Cost'),ConvertMessage(GETLASTERRORTEXT),GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Normal]
    LOCAL PROCEDURE MultipleLvlRollup@67(ChangeType@1005 : ' ,Add,Replace,Delete,Edit,Delete all,Edit cards';ComponentType@1006 : Option;CalcLevel@1004 : Integer;TreeDepth@1009 : Integer;NoOfComps@1011 : Integer);
    VAR
      Item@1002 : Record 27;
      Item1@1001 : Record 27;
      CalculateStandardCost@1008 : Codeunit 5812;
      InitialCost@1000 : Decimal;
      InitialPrice@1003 : Decimal;
      MaterialCost@1007 : Decimal;
      CapacityCost@1010 : Decimal;
      CapOverhead@1012 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateMultipleLvlTree(Item,Item1,Item."Replenishment System"::Assembly,
        Item."Costing Method"::Standard,TreeDepth,NoOfComps);
      LibraryAssembly.EditAssemblyList(ChangeType,ComponentType,ComponentType,'',Item."No.");

      // Exercise.
      Item1.GET(Item1."No.");
      Item.GET(Item."No.");
      InitialCost := Item."Standard Cost";
      InitialPrice := Item."Unit Price";
      StdCostLevel := CalcLevel;
      CalculateStandardCost.CalcItem(Item1."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item1."No.");

      // Validate.
      Item1.GET(Item1."No.");
      Item.GET(Item."No.");
      Item.CALCFIELDS("Assembly BOM");
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item1."No."),
        Item1."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item1."No.");
      Assert.AreNearlyEqual(MaterialCost,Item1."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item1."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item1."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item1."No."),Item1."Unit Price",
        LibraryERM.GetUnitAmountRoundingPrecision,'Wrong unit price for:' + Item1."No.");
      Assert.AreEqual(NoOfComps > 0,Item."Assembly BOM",'Wrong Assembly BOM flag.');

      IF CalcLevel = 1 THEN BEGIN
        Assert.AreEqual(InitialCost,Item."Standard Cost",Item."No.");
        Assert.AreEqual(InitialPrice,Item."Unit Price",'Wrong unit price for:' + Item."No.");
      END
      ELSE BEGIN
        Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
          Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
        Assert.AreNearlyEqual(
          MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
        Assert.AreNearlyEqual(
          CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
        Assert.AreNearlyEqual(
          CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
        Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
          'Rolled up Cap Overhead');
        Assert.AreNearlyEqual(
          LibraryAssembly.CalcExpectedPrice(Item."No."),
          Item."Unit Price",LibraryERM.GetUnitAmountRoundingPrecision,'Wrong unit price for:' + Item."No.");
      END;
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopLevel@53();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,1,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE MultipleLevel@54();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,2,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopLevelUpdate@55();
    BEGIN
      MultipleLvlRollup(ChangeType::Delete,BOMComponent.Type::Item,1,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE MultipleLevelUpdate@56();
    BEGIN
      MultipleLvlRollup(ChangeType::Edit,BOMComponent.Type::Item,2,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopLevelTwoLevels@59();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,1,2,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE MultipleLevelTwoLevels@58();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,2,2,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopLevelUpdateCard@77();
    BEGIN
      MultipleLvlRollup(ChangeType::"Edit cards",BOMComponent.Type::Item,1,1,2);
    END;

    [Test]
    PROCEDURE NoAssemblyListSglLevel@72();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,1,1,0);
    END;

    [Test]
    PROCEDURE NoAssemblyListMultLevel@76();
    BEGIN
      MultipleLvlRollup(ChangeType::" ",BOMComponent.Type::Item,2,1,0);
    END;

    [Normal]
    LOCAL PROCEDURE ResUsage@49(FirstResUsage@1004 : Option;SecondResUsage@1003 : Option;UseSameRes@1005 : Boolean;LotSize@1001 : Integer);
    VAR
      Item@1002 : Record 27;
      Resource@1007 : Record 156;
      CalculateStandardCost@1008 : Codeunit 5812;
      MaterialCost@1000 : Decimal;
      CapacityCost@1006 : Decimal;
      CapOverhead@1009 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      Item.VALIDATE("Lot Size",LotSize);
      Item.MODIFY(TRUE);
      LibraryAssembly.CreateResource(Resource,TRUE,'');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Resource,Resource."No.",Item."No.",'',FirstResUsage,LibraryRandom.RandDec(20,2),TRUE);
      IF NOT UseSameRes THEN
        LibraryAssembly.CreateResource(Resource,TRUE,'');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Resource,Resource."No.",Item."No.",'',SecondResUsage,LibraryRandom.RandDec(20,2),TRUE);

      // Exercise.
      StdCostLevel := 1;
      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate.
      Item.GET(Item."No.");
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
        Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
      Assert.AreNearlyEqual(MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
      Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreEqual(LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",'Wrong unit price for:' + Item."No.");
    END;

    [Test]
    PROCEDURE SameResNoLotDiffUsage@62();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Direct,BOMComponent."Resource Usage Type"::Fixed,TRUE,0);
    END;

    [Test]
    PROCEDURE DiffResNoLotDiffUsage@64();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Fixed,BOMComponent."Resource Usage Type"::Direct,FALSE,0);
    END;

    [Test]
    PROCEDURE SameResLotDiffUsage@66();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Direct,BOMComponent."Resource Usage Type"::Fixed,TRUE,RANDOM(10));
    END;

    [Test]
    PROCEDURE DiffResLotDiffUsage@65();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Fixed,BOMComponent."Resource Usage Type"::Direct,FALSE,RANDOM(10));
    END;

    [Test]
    PROCEDURE SameResNoLotSameUsage@71();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Direct,BOMComponent."Resource Usage Type"::Direct,TRUE,0);
    END;

    [Test]
    PROCEDURE DiffResNoLotDiffSameUsage@70();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Fixed,BOMComponent."Resource Usage Type"::Fixed,FALSE,0);
    END;

    [Test]
    PROCEDURE SameResLotDiffSameUsage@69();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Fixed,BOMComponent."Resource Usage Type"::Fixed,TRUE,RANDOM(10));
    END;

    [Test]
    PROCEDURE DiffResLotDiffSameUsage@68();
    BEGIN
      ResUsage(BOMComponent."Resource Usage Type"::Direct,BOMComponent."Resource Usage Type"::Direct,FALSE,RANDOM(10));
    END;

    [Normal]
    LOCAL PROCEDURE ReplMethod@50(ReplenishmentMethod@1005 : Option;CalcLevel@1001 : Integer;TreeDepth@1000 : Integer);
    VAR
      Item@1002 : Record 27;
      Item1@1007 : Record 27;
      CalculateStandardCost@1008 : Codeunit 5812;
      InitialCost@1003 : Decimal;
      InitialPrice@1004 : Decimal;
      MaterialCost@1006 : Decimal;
      CapacityCost@1009 : Decimal;
      CapOverhead@1010 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateMultipleLvlTree(Item,Item1,ReplenishmentMethod,Item."Costing Method"::Standard,TreeDepth,2);

      // Exercise.
      Item.GET(Item."No.");
      Item.CALCFIELDS("Assembly BOM");
      InitialCost := Item."Standard Cost";
      InitialPrice := Item."Unit Price";
      StdCostLevel := CalcLevel;
      CalculateStandardCost.CalcItem(Item1."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item1."No.");
      Item1.GET(Item1."No.");

      // Validate.
      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item1."No."),
        Item1."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item1."No.");
      Assert.AreNearlyEqual(MaterialCost,Item1."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item1."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item1."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
      Assert.AreNearlyEqual(
        CapOverhead,Item1."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item1."No."),Item1."Unit Price",
        LibraryERM.GetUnitAmountRoundingPrecision,'Wrong unit price for:' + Item1."No.");
      Assert.AreEqual(InitialCost,Item."Standard Cost",Item."No.");
      Assert.AreEqual(InitialPrice,Item."Unit Price",'Wrong unit price for:' + Item."No.");

      ASSERTERROR CalculateStandardCost.CalcItem(Item."No.",TRUE);
      Assert.AreEqual(
        STRSUBSTNO(ErrorItemNotAssembled,Item."No.",Item.Description,'Standard Cost'),
        ConvertMessage(GETLASTERRORTEXT),GETLASTERRORTEXT);
      CLEARLASTERROR;

      ASSERTERROR CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");
      Assert.AreEqual(
        STRSUBSTNO(ErrorItemNotAssembled,Item."No.",Item.Description,'Unit Price'),
        ConvertMessage(GETLASTERRORTEXT),GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE PurchTopLevel@61();
    BEGIN
      ReplMethod(Item."Replenishment System"::Purchase,1,1);
    END;

    [Test]
    PROCEDURE PurchMultLevel@75();
    BEGIN
      ReplMethod(Item."Replenishment System"::Purchase,2,1);
    END;

    [Test]
    PROCEDURE PurchMultTwoLevels@63();
    BEGIN
      ReplMethod(Item."Replenishment System"::Purchase,2,2);
    END;

    [Test]
    PROCEDURE PurchSglTwoLevels@73();
    BEGIN
      ReplMethod(Item."Replenishment System"::Purchase,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE ProdItemTopLevel@88();
    BEGIN
      ReplMethod(Item."Replenishment System"::"Prod. Order",1,1);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,CalcStdCostDiffReplHandler)]
    PROCEDURE ProdItemMultLevel@86();
    BEGIN
      ReplMethod(Item."Replenishment System"::"Prod. Order",2,1);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,CalcStdCostDiffReplHandler)]
    PROCEDURE ProdItemMultTwoLevels@84();
    BEGIN
      ReplMethod(Item."Replenishment System"::"Prod. Order",2,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE ProdItemSglTwoLevels@81();
    BEGIN
      ReplMethod(Item."Replenishment System"::"Prod. Order",1,2);
    END;

    [Normal]
    LOCAL PROCEDURE CyclicalKit@57(CalcLevel@1004 : Integer);
    VAR
      Item@1002 : Record 27;
      Item1@1001 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,2,2,1,1,'','');
      LibraryAssembly.CreateItem(Item1,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item1."No.",TRUE,2,2,1,1,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item."No.",Item1."No.",'',BOMComponent."Resource Usage Type"::Direct,
        LibraryRandom.RandDec(20,2),TRUE);
      IF CalcLevel > 1 THEN
        Item := Item1;

      // Exercise.
      ASSERTERROR
        LibraryAssembly.CreateAssemblyListComponent(
          BOMComponent.Type::Item,Item."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,
          LibraryRandom.RandDec(20,2),TRUE);

      // Validate.
      Assert.AreEqual(STRSUBSTNO(ErrorCyclicalKit,Item."No."),GETLASTERRORTEXT,'Wrong error message')
    END;

    [Test]
    PROCEDURE ItemHasItself@74();
    BEGIN
      CyclicalKit(1);
    END;

    [Test]
    PROCEDURE ItemHasItselfReverse@78();
    BEGIN
      CyclicalKit(2);
    END;

    [Normal]
    LOCAL PROCEDURE VariantComp@82(ComponentType@1004 : Option);
    VAR
      Item@1002 : Record 27;
      Item1@1001 : Record 27;
      Resource@1005 : Record 156;
      ItemVariant@1006 : Record 5401;
      ItemVariant1@1010 : Record 5401;
      CalculateStandardCost@1000 : Codeunit 5812;
      MaterialCost@1003 : Decimal;
      CapacityCost@1007 : Decimal;
      CapOverhead@1008 : Decimal;
      errorCode@1011 : Text;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(Item1,Item."Costing Method"::Standard,Item."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateResource(Resource,TRUE,'');
      LibraryInventory.CreateVariant(ItemVariant,Item1);
      LibraryInventory.CreateVariant(ItemVariant1,Item1);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item1."No.",Item."No.",ItemVariant.Code,BOMComponent."Resource Usage Type"::Direct,
        LibraryRandom.RandDec(20,2),TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item1."No.",Item."No.",ItemVariant1.Code,BOMComponent."Resource Usage Type"::Direct,
        LibraryRandom.RandDec(20,2),TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item1."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,
        LibraryRandom.RandDec(20,2),TRUE);

      // Exercise.
      CASE ComponentType OF
        BOMComponent.Type::Item:
          ASSERTERROR
            LibraryAssembly.CreateAssemblyListComponent(
              ComponentType,Item1."No.",Item."No.",'NONEX',BOMComponent."Resource Usage Type"::Direct,1,TRUE);
        BOMComponent.Type::Resource:
          ASSERTERROR
            LibraryAssembly.CreateAssemblyListComponent(
              ComponentType,Resource."No.",Item."No.",ItemVariant.Code,BOMComponent."Resource Usage Type"::Direct,1,TRUE);
        ELSE
          ASSERTERROR
            LibraryAssembly.CreateAssemblyListComponent(
              ComponentType,'',Item."No.",ItemVariant.Code,BOMComponent."Resource Usage Type"::Direct,1,TRUE);
      END;

      CalculateStandardCost.CalcItem(Item."No.",TRUE);
      CalculateStandardCost.CalcAssemblyItemPrice(Item."No.");

      // Validate
      Item.GET(Item."No.");
      errorCode := GETLASTERRORCODE;
      IF ComponentType = BOMComponent.Type::Item THEN
        Assert.IsTrue(errorCode = 'DB:RecordNotFound','Record not found error message was expected. Actual error code:' + errorCode)
      ELSE
        Assert.IsTrue(errorCode = 'TestField',ErrorWrongType + 'Actual error code:' + errorCode);
      CLEARLASTERROR;

      Assert.AreNearlyEqual(LibraryAssembly.CalcExpectedStandardCost(MaterialCost,CapacityCost,CapOverhead,Item."No."),
        Item."Standard Cost",LibraryERM.GetAmountRoundingPrecision,'Wrong std. cost for:' + Item."No.");
      Assert.AreNearlyEqual(MaterialCost,Item."Single-Level Material Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Material Cost');
      Assert.AreNearlyEqual(CapacityCost,Item."Single-Level Capacity Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Capacity Cost');
      Assert.AreNearlyEqual(CapOverhead,Item."Single-Level Cap. Ovhd Cost",LibraryERM.GetUnitAmountRoundingPrecision,'Cap. Overhead');
      Assert.AreNearlyEqual(CapOverhead,Item."Rolled-up Cap. Overhead Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Rolled up Cap Overhead');
      Assert.AreNearlyEqual(
        LibraryAssembly.CalcExpectedPrice(Item."No."),Item."Unit Price",
        LibraryERM.GetUnitAmountRoundingPrecision,'Wrong unit price for:' + Item."No.");
    END;

    [Test]
    PROCEDURE VariantRes@105();
    BEGIN
      VariantComp(BOMComponent.Type::Resource);
    END;

    [Test]
    PROCEDURE VariantItem@106();
    BEGIN
      VariantComp(BOMComponent.Type::Item);
    END;

    [Test]
    PROCEDURE VariantText@107();
    BEGIN
      VariantComp(BOMComponent.Type::" ");
    END;

    [Normal]
    LOCAL PROCEDURE InstItemNo@83(Qty@1004 : Decimal);
    VAR
      Item@1002 : Record 27;
      Item1@1001 : Record 27;
      Item2@1010 : Record 27;
      BOMComponent@1000 : Record 90;
    BEGIN
      // Setup.
      Initialize;
      LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(Item1,Item."Costing Method"::Standard,Item."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item1."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,Qty,TRUE);
      LibraryAssembly.CreateItem(Item2,Item."Costing Method"::Standard,Item."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,Item2."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,
        LibraryRandom.RandDec(20,2),TRUE);
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      BOMComponent.SETRANGE("No.",Item2."No.");
      BOMComponent.FINDFIRST;

      // Exercise.
      IF Qty <> 1 THEN BEGIN
        ASSERTERROR BOMComponent.VALIDATE("Installed in Item No.",Item1."No.");
        // Validate.
        Assert.IsTrue(STRPOS(ConvertMessage(GETLASTERRORTEXT),ErrorQtyPer) > 0,'Actual:' + GETLASTERRORTEXT);
        CLEARLASTERROR;
      END
      ELSE
        BOMComponent.VALIDATE("Installed in Item No.",Item1."No.");
      BOMComponent.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE QtyPer1@89();
    BEGIN
      InstItemNo(1);
    END;

    [Test]
    PROCEDURE QtyPerAny@90();
    BEGIN
      InstItemNo(1 + RANDOM(10));
    END;

    [Normal]
    LOCAL PROCEDURE ConvertMessage@52(ErrorMessage@1002 : Text[1024]) : Text[1024];
    VAR
      NewLine@1001 : Text[1];
    BEGIN
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    [StrMenuHandler]
    PROCEDURE CalcStdCostMenuHandler@4(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Instruction,StdCostRollupMessage) > 0,'Actual:' + Instruction + '; Expected:' + StdCostRollupMessage);
      Choice := StdCostLevel;
    END;

    [ConfirmHandler]
    PROCEDURE CalcStdCostDiffReplHandler@93(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,ReplMethodMessage) > 0,'Actual:' + Question + '; Expected:' + ReplMethodMessage);
      Reply := (StdCostLevel = 1);
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [SCM]
      This CU is covering the following suites in the Kitting TDS for Deliver 1 - Define a Kit:
      SC1-1: Bill of Materials field validation: StdCostPriceRoullup.
      SC1-1: Variant test cases: VariantComp.
      SC1-2: Rollup standard cost and price: StdCostPriceRollup.
      SC1-3: Rollup cost / price after assembly list add / delete / modify: ModifyAssemblyList.
      SC1-4: Rollup cost / price for non standard cost, unit cost different from last direct cost,
        overhead or indirect cost:  DiffCostingMethodsComp, DiffCostingMethodsParent.
      SC1-6: Rollup cost/price when components use non-base unit of measure: StdCostPriceRollup.
      SC1-7: Rollup cost / price for particular Quantity for assembly values: StdCostPriceRollup.
      SC1-8: Cost and price rollup on single and multi levels for kit in a kit assembly lists: MultipleLvlRollup.
      SC1-10: Rollup of fixed vs. direct type resource components: ResUsage.
      SC1-2, SC1-8: No cost / price rollup for replenishment method not Assembly: ReplMethod.
      SC1-11: Cyclical reference validation: CyclicalKit.
    }
    END.
  }
}

