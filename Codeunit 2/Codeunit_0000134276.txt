OBJECT Codeunit 134276 Currency Exch. Rate Unit Tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryPaymentFormat@1010 : Codeunit 130101;
      LibraryERM@1011 : Codeunit 131300;
      LibraryRandom@1012 : Codeunit 130440;
      CurrExchRateSyncSetupList@1002 : TestPage 1650;
      Initialized@1001 : Boolean;
      LongURLExampleTxt@1006 : TextConst '@@@={Locked};ENU="http://query.yahooapis.com/v1/public/yql?q=select * from yahoo.finance.xchange where pair in (""USDEUR"", ""USDJPY"", ""USDBGN"", ""USDCZK"", ""USDDKK"", ""USDGBP"", ""USDHUF"", ""USDLTL"", ""USDLVL"", ""USDPLN"", ""USDRON"", ""USDSEK"", ""USDCHF"", ""USDNOK"", ""USDHRK"", ""USDRUB"", ""USDTRY"", ""USDAUD"", ""USDBRL"", ""USDCAD"", ""USDCNY"", ""USDHKD"", ""USDIDR"", ""USDILS"", ""USDINR"", ""USDKRW"", ""USDMXN"", ""USDMYR"", ""USDNZD"", ""USDPHP"", ""USDSGD"", ""USDTHB"", ""USDZAR"", ""USDISK"")&env=store://datatables.org/alltableswithkeys"';
      URLWithLocalCharactersExampleTxt@1007 : TextConst '@@@={Locked};ENU=http://ko.wikipedia.org/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC%3a%EB%8C%80%EB%AC%B8';
      NoSyncCurrencyExchangeRatesSetupErr@1009 : TextConst 'ENU=There are no active Currency Exchange Rate Sync. Setup records.';
      DefualtExchangeRateAmount@1014 : Decimal;
      NumberOfCurrencies@1015 : Integer;
      FieldNotMappedErr@1003 : TextConst '@@@=%1 - Field Caption;ENU=Mandatory field %1 is not mapped. Map the field by choosing Field Mapping in the Currency Exchange Rate Sync. Setup window.';
      DataExchangeLineDefCodeTxt@1004 : TextConst '@@@={Locked};ENU=CurrExchange';

    LOCAL PROCEDURE Initialize@27();
    VAR
      Currency@1007 : Record 4;
      CurrencyExchangeRate@1002 : Record 330;
      DataExch@1006 : Record 1220;
      DataExchDef@1003 : Record 1222;
      CurrExchRateUpdateSetup@1005 : Record 1650;
      InventorySetup@1001 : Record 313;
      LibraryERMCountryData@1004 : Codeunit 131305;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      Currency.DELETEALL;
      CurrencyExchangeRate.DELETEALL;
      DataExch.DELETEALL(TRUE);
      DataExchDef.DELETEALL(TRUE);
      CurrExchRateUpdateSetup.DELETEALL(TRUE);

      DefualtExchangeRateAmount := 1;
      NumberOfCurrencies := 10;

      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryInventory.NoSeriesSetup(InventorySetup);
      Initialized := TRUE;

      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE TestSettingActivateOnCurrencySetupRemovesActvateOnOthers@35();
    VAR
      CurrExchRateUpdateSetup@1002 : Record 1650;
      CurrExchRateUpdateSetup2@1001 : Record 1650;
      DataExchLineDef@1000 : Record 1227;
    BEGIN
      // Setup
      Initialize;
      CreateCurrencyExchRateSyncSetup(CurrExchRateUpdateSetup,LongURLExampleTxt);

      // Execute
      DataExchLineDef.GET(CurrExchRateUpdateSetup."Data Exch. Def Code",DataExchangeLineDefCodeTxt);
      DataExchLineDef."Data Line Tag" := LibraryUtility.GenerateGUID;
      DataExchLineDef.MODIFY(TRUE);
      CurrExchRateUpdateSetup.VALIDATE(Enabled,TRUE);
      CurrExchRateUpdateSetup.MODIFY;

      CreateCurrencyExchRateSyncSetup(CurrExchRateUpdateSetup2,URLWithLocalCharactersExampleTxt);
      DataExchLineDef.GET(CurrExchRateUpdateSetup2."Data Exch. Def Code",DataExchangeLineDefCodeTxt);
      DataExchLineDef."Data Line Tag" := LibraryUtility.GenerateGUID;
      DataExchLineDef.MODIFY(TRUE);
      CurrExchRateSyncSetupList.OPENEDIT;
      CurrExchRateSyncSetupList.GOTORECORD(CurrExchRateUpdateSetup2);
      CurrExchRateSyncSetupList.Enable.INVOKE;

      // Verify
      CurrExchRateUpdateSetup.GET(CurrExchRateUpdateSetup.Code);
      Assert.IsFalse(CurrExchRateUpdateSetup.Enabled,'Active should be set to false');

      CurrExchRateUpdateSetup.GET(CurrExchRateUpdateSetup2.Code);
      Assert.IsFalse(CurrExchRateUpdateSetup2.Enabled,'Active should be set to true on the last selected record');

      CLEAR(CurrExchRateUpdateSetup);
      CurrExchRateUpdateSetup.SETRANGE(Enabled,TRUE);
      Assert.AreEqual(1,CurrExchRateUpdateSetup.COUNT,'There should be only one active record in the database');
    END;

    [Test]
    PROCEDURE TestSettingAndGettingURL@14();
    VAR
      CurrExchRateUpdateSetup@1002 : Record 1650;
      URL@1005 : Text;
      ExpectedText@1007 : Text;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchRateSyncSetup(CurrExchRateUpdateSetup,URLWithLocalCharactersExampleTxt);
      CurrExchRateUpdateSetup.GetWebServiceURL(URL);
      ExpectedText := URLWithLocalCharactersExampleTxt;
      Assert.AreEqual(ExpectedText,URL,'Url is not as expected');

      // Test changing the URL
      CurrExchRateUpdateSetup.SetWebServiceURL(LongURLExampleTxt);
      CurrExchRateUpdateSetup.GetWebServiceURL(URL);
      ExpectedText := LongURLExampleTxt;
      Assert.AreEqual(ExpectedText,URL,'Url is not as expected');
    END;

    [Test]
    PROCEDURE TestRunningWithoutActiveCurrencySetup@4();
    BEGIN
      // Setup
      Initialize;

      // Execute
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Update Currency Exchange Rates");

      // Verify
      Assert.ExpectedError(NoSyncCurrencyExchangeRatesSetupErr);
    END;

    [Test]
    PROCEDURE TestCurrencyCodeIsMandatoryField@7();
    VAR
      DataExch@1004 : Record 1220;
      DataExchLineDef@1000 : Record 1227;
      DataExchFieldMapping@1005 : Record 1225;
      Currency@1002 : Record 4;
      TempCurrencyExchangeRate@1007 : TEMPORARY Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchFieldMapping.SETRANGE("Field ID",TempCurrencyExchangeRate.FIELDNO("Currency Code"));
      DataExchFieldMapping.FINDFIRST;
      DataExchFieldMapping.DELETE(TRUE);

      // Execute
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.ExpectedError(STRSUBSTNO(FieldNotMappedErr,TempCurrencyExchangeRate.FIELDCAPTION("Currency Code")));
    END;

    [Test]
    PROCEDURE TestRelationalExchRateAmountIsMandatoryField@53();
    VAR
      DataExch@1004 : Record 1220;
      DataExchLineDef@1000 : Record 1227;
      DataExchFieldMapping@1005 : Record 1225;
      Currency@1002 : Record 4;
      TempCurrencyExchangeRate@1007 : TEMPORARY Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchFieldMapping.SETRANGE("Field ID",TempCurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"));
      DataExchFieldMapping.FINDFIRST;
      DataExchFieldMapping.DELETE(TRUE);

      // Execute
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.ExpectedError(STRSUBSTNO(FieldNotMappedErr,TempCurrencyExchangeRate.FIELDCAPTION("Relational Exch. Rate Amount")));
    END;

    [Test]
    PROCEDURE TestDateIsDefaultedToTodayIfNotMapped@24();
    VAR
      DataExch@1004 : Record 1220;
      DataExchDef@1006 : Record 1222;
      DataExchLineDef@1000 : Record 1227;
      Currency@1002 : Record 4;
      TempCurrencyExchangeRate@1003 : TEMPORARY Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,TODAY,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestExchangeRateAmountIsDefaultedToOne@55();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchLineDef@1003 : Record 1227;
      DataExchFieldMapping@1002 : Record 1225;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchFieldMapping.SETRANGE("Field ID",TempCurrencyExchangeRate.FIELDNO("Exchange Rate Amount"));
      DataExchFieldMapping.FINDFIRST;
      DataExchFieldMapping.DELETE(TRUE);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestRunningWithAdditionalFieldsMapped@13();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchLineDef@1003 : Record 1227;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      MapAdditionalFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestCurrenciesThatAreNotSpecifiedAreNotMapped@16();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchLineDef@1003 : Record 1227;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
      CurrencyExchangeRate@1007 : Record 330;
    BEGIN
      // Setup
      Initialize;

      NumberOfCurrencies := 5;
      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      MapAdditionalFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Remove all currencies except one
      Currency.SETFILTER(Code,'<>%1',Currency.Code);
      Currency.DELETEALL;

      TempCurrencyExchangeRate.SETFILTER("Currency Code",'<>%1',Currency.Code);
      TempCurrencyExchangeRate.DELETEALL;

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.AreEqual(1,CurrencyExchangeRate.COUNT,'There should be one currency in the system');
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestInvalidAmountsAreSkipped@66();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchField@1008 : Record 1221;
      DataExchLineDef@1003 : Record 1227;
      DataExchFieldMapping@1002 : Record 1225;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
      CurrencyExchangeRate@1007 : Record 330;
    BEGIN
      // Setup
      Initialize;

      NumberOfCurrencies := 5;
      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      MapAdditionalFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      DataExchFieldMapping.SETRANGE("Field ID",CurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"));
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchDef.Code);
      DataExchFieldMapping.FINDFIRST;

      DataExchField.SETRANGE("Column No.",DataExchFieldMapping."Column No.");
      DataExchField.FINDFIRST;
      DataExchField.Value := '-';
      DataExchField.MODIFY;

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.AreEqual(NumberOfCurrencies - 1,CurrencyExchangeRate.COUNT,'Currency with value missing should be ignored');
      TempCurrencyExchangeRate.FINDFIRST;
      TempCurrencyExchangeRate.DELETE;
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestRunningTwiceOnSameDay@86();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchLineDef@1003 : Record 1227;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
      CurrencyExchangeRate@1007 : Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      MapAdditionalFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      CLEAR(DataExch);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);
      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.AreEqual(NumberOfCurrencies,CurrencyExchangeRate.COUNT,'There should be only a single set of currency exchange rates');
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE TestRunningOnDifferentDays@96();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1004 : Record 1222;
      DataExchLineDef@1003 : Record 1227;
      Currency@1001 : Record 4;
      TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;
      TempTwoDaysBeforeCurrencyExchangeRate@1009 : TEMPORARY Record 330;
      CurrencyExchangeRate@1007 : Record 330;
    BEGIN
      // Setup
      Initialize;

      CreateCurrencyExchangeDataExchangeSetup(DataExchLineDef);
      MapMandatoryFields(DataExchLineDef);
      MapCommonFields(DataExchLineDef);
      MapAdditionalFields(DataExchLineDef);
      CreateCurrencies(Currency,TempCurrencyExchangeRate,WORKDATE,NumberOfCurrencies);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempCurrencyExchangeRate);

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      TempCurrencyExchangeRate.FINDFIRST;
      REPEAT
        TempTwoDaysBeforeCurrencyExchangeRate.COPY(TempCurrencyExchangeRate);
        TempTwoDaysBeforeCurrencyExchangeRate."Starting Date" :=
          CALCDATE('<-2D>',TempTwoDaysBeforeCurrencyExchangeRate."Starting Date");
        TempTwoDaysBeforeCurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryRandom.RandDecInRange(1,1000,2));
        TempTwoDaysBeforeCurrencyExchangeRate.INSERT;
      UNTIL TempCurrencyExchangeRate.NEXT = 0;

      CLEAR(DataExch);
      CreateDataExchangeTestData(DataExch,DataExchLineDef,TempTwoDaysBeforeCurrencyExchangeRate);
      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      // Execute
      CODEUNIT.RUN(CODEUNIT::"Map Currency Exchange Rate",DataExch);

      // Verify
      Assert.AreEqual(
        2 * NumberOfCurrencies,CurrencyExchangeRate.COUNT,'There should be only a single set of currency exchange rates');
      VerifyCurrencyExchangeRateMatch(TempCurrencyExchangeRate);
      VerifyCurrencyExchangeRateMatch(TempTwoDaysBeforeCurrencyExchangeRate);
    END;

    LOCAL PROCEDURE CreateCurrencyExchRateSyncSetup@1(VAR CurrExchRateUpdateSetup@1000 : Record 1650;WebServiceURL@1001 : Text);
    BEGIN
      CurrExchRateUpdateSetup.INIT;
      CurrExchRateUpdateSetup.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(CurrExchRateUpdateSetup.FIELDNO(Code),DATABASE::"Curr. Exch. Rate Update Setup"));
      CurrExchRateUpdateSetup.INSERT(TRUE);

      CurrExchRateUpdateSetup.SetWebServiceURL(WebServiceURL);
      CurrExchRateUpdateSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyExchangeDataExchangeSetup@2(VAR DataExchLineDef@1002 : Record 1227);
    VAR
      DataExchDef@1000 : Record 1222;
    BEGIN
      CreateDataExchangeDefinition(DataExchDef);

      DataExchLineDef.InsertRec(DataExchDef.Code,'CEXR','Currency Exchange Rate',0);
      CreateDataExchMapping(DataExchLineDef);
    END;

    LOCAL PROCEDURE CreateDataExchangeDefinition@3(VAR DataExchDef@1003 : Record 1222);
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(
        DataExchDef,CODEUNIT::"Import XML File to Data Exch.",
        CODEUNIT::"Map Data Exch. To RapidStart",CODEUNIT::"Import XML File to Data Exch.",0,0,0);
    END;

    LOCAL PROCEDURE CreateDataExchMapping@73(DataExchLineDef@1001 : Record 1227);
    VAR
      DataExchMapping@1000 : Record 1224;
    BEGIN
      DataExchMapping.INIT;
      DataExchMapping.VALIDATE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchMapping.VALIDATE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchMapping.VALIDATE("Table ID",DATABASE::"Currency Exchange Rate");
      DataExchMapping.INSERT(TRUE);
    END;

    LOCAL PROCEDURE MapFields@48(VAR ColumnNo@1000 : Integer;DataExchLineDef@1003 : Record 1227;FieldID@1002 : Integer);
    VAR
      DataExchColumnDef@1006 : Record 1223;
    BEGIN
      CreateDataExchangeColumnDef(DataExchColumnDef,DataExchLineDef,ColumnNo,'');
      CreateDataExchFieldMapping(DataExchColumnDef,FieldID);
      ColumnNo += 1;
    END;

    LOCAL PROCEDURE CreateDataExchangeColumnDef@29(VAR DataExchColumnDef@1004 : Record 1223;DataExchLineDef@1001 : Record 1227;ColumnNo@1003 : Integer;Path@1000 : Text[250]);
    VAR
      TypeHelper@1002 : Codeunit 10;
    BEGIN
      DataExchColumnDef.INIT;
      DataExchColumnDef.VALIDATE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchColumnDef.VALIDATE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchColumnDef.VALIDATE("Column No.",ColumnNo);
      DataExchColumnDef.VALIDATE("Data Formatting Culture",TypeHelper.LanguageIDToCultureName(WINDOWSLANGUAGE));
      DataExchColumnDef.VALIDATE(Path,Path);
      DataExchColumnDef.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateDataExchFieldMapping@38(DataExchColumnDef@1002 : Record 1223;FieldID@1004 : Integer);
    VAR
      DataExchFieldMapping@1000 : Record 1225;
    BEGIN
      DataExchFieldMapping.INIT;
      DataExchFieldMapping.VALIDATE("Data Exch. Def Code",DataExchColumnDef."Data Exch. Def Code");
      DataExchFieldMapping.VALIDATE("Data Exch. Line Def Code",DataExchColumnDef."Data Exch. Line Def Code");
      DataExchFieldMapping.VALIDATE("Column No.",DataExchColumnDef."Column No.");
      DataExchFieldMapping.VALIDATE("Table ID",DATABASE::"Currency Exchange Rate");
      DataExchFieldMapping.VALIDATE("Field ID",FieldID);
      DataExchFieldMapping.INSERT(TRUE);
    END;

    LOCAL PROCEDURE MapMandatoryFields@37(DataExchLineDef@1000 : Record 1227);
    VAR
      CurrencyExchangeRate@1003 : Record 330;
      ColumnNo@1002 : Integer;
    BEGIN
      GetLastColumnNo(ColumnNo,DataExchLineDef);

      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Currency Code"));
      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"));
    END;

    LOCAL PROCEDURE MapCommonFields@26(DataExchLineDef@1000 : Record 1227);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
      ColumnNo@1001 : Integer;
    BEGIN
      GetLastColumnNo(ColumnNo,DataExchLineDef);

      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Starting Date"));
      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Exchange Rate Amount"));
    END;

    LOCAL PROCEDURE MapAdditionalFields@39(DataExchLineDef@1000 : Record 1227);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
      ColumnNo@1001 : Integer;
    BEGIN
      GetLastColumnNo(ColumnNo,DataExchLineDef);

      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Adjustment Exch. Rate Amount"));
      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Relational Currency Code"));
      MapFields(ColumnNo,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Relational Adjmt Exch Rate Amt"));
    END;

    LOCAL PROCEDURE GetLastColumnNo@41(VAR ColumnNo@1001 : Integer;DataExchLineDef@1002 : Record 1227);
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      DataExchColumnDef.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchColumnDef.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);

      IF DataExchColumnDef.FINDLAST THEN
        ColumnNo := DataExchColumnDef."Column No." + 1
      ELSE
        ColumnNo := 1;
    END;

    LOCAL PROCEDURE CreateDataExchangeTestData@22(VAR DataExch@1001 : Record 1220;DataExchLineDef@1000 : Record 1227;VAR CurrencyExchangeRate@1005 : Record 330);
    VAR
      CurrentNodeID@1003 : Integer;
      LineNo@1004 : Integer;
    BEGIN
      CreateDataExchange(DataExch,DataExchLineDef);
      CurrentNodeID := 1;
      LineNo := 1;
      IF CurrencyExchangeRate.FINDSET THEN
        REPEAT
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Currency Code"),CurrencyExchangeRate."Currency Code",
            CurrentNodeID,LineNo);
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"),
            FORMAT(CurrencyExchangeRate."Relational Exch. Rate Amount"),CurrentNodeID,LineNo);
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Starting Date"),
            FORMAT(CurrencyExchangeRate."Starting Date"),CurrentNodeID,LineNo);
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Exchange Rate Amount"),
            FORMAT(CurrencyExchangeRate."Exchange Rate Amount"),CurrentNodeID,LineNo);
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Adjustment Exch. Rate Amount"),
            FORMAT(CurrencyExchangeRate."Adjustment Exch. Rate Amount"),CurrentNodeID,LineNo);
          CreateDataExchangeField(
            DataExch,DataExchLineDef,CurrencyExchangeRate.FIELDNO("Relational Adjmt Exch Rate Amt"),
            FORMAT(CurrencyExchangeRate."Relational Adjmt Exch Rate Amt"),CurrentNodeID,LineNo);
          LineNo += 1;
        UNTIL CurrencyExchangeRate.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCurrencies@34(VAR Currency@1000 : Record 4;VAR TempExpectedCurrencyExchangeRate@1001 : TEMPORARY Record 330;StartDate@1002 : Date;NumberToInsert@1003 : Integer);
    VAR
      I@1004 : Integer;
    BEGIN
      FOR I := 1 TO NumberToInsert DO BEGIN
        CLEAR(Currency);
        LibraryERM.CreateCurrency(Currency);

        // This exchange rate will be used to generate Data Exchange data and to assert values
        TempExpectedCurrencyExchangeRate.INIT;
        TempExpectedCurrencyExchangeRate.VALIDATE("Currency Code",Currency.Code);
        TempExpectedCurrencyExchangeRate.VALIDATE("Starting Date",StartDate);
        TempExpectedCurrencyExchangeRate.INSERT(TRUE);

        TempExpectedCurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryRandom.RandDecInRange(1,1000,2));
        TempExpectedCurrencyExchangeRate.VALIDATE("Exchange Rate Amount",DefualtExchangeRateAmount);
        TempExpectedCurrencyExchangeRate.VALIDATE(
          "Adjustment Exch. Rate Amount",TempExpectedCurrencyExchangeRate."Exchange Rate Amount");
        TempExpectedCurrencyExchangeRate.VALIDATE(
          "Relational Adjmt Exch Rate Amt",TempExpectedCurrencyExchangeRate."Relational Exch. Rate Amount");
        TempExpectedCurrencyExchangeRate.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDataExchange@11(VAR DataExch@1001 : Record 1220;DataExchLineDef@1000 : Record 1227);
    BEGIN
      DataExch.INIT;
      DataExch."Data Exch. Def Code" := DataExchLineDef."Data Exch. Def Code";
      DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
      DataExch.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateDataExchangeField@10(DataExch@1001 : Record 1220;DataExchLineDef@1006 : Record 1227;FieldNo@1004 : Integer;TextValue@1005 : Text[250];VAR CurrentNodeID@1003 : Integer;LineNo@1007 : Integer);
    VAR
      DataExchField@1000 : Record 1221;
      DataExchFieldMapping@1008 : Record 1225;
    BEGIN
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchFieldMapping.SETRANGE("Field ID",FieldNo);
      IF NOT DataExchFieldMapping.FINDFIRST THEN
        EXIT;

      DataExchField.INIT;
      DataExchField.VALIDATE("Data Exch. No.",DataExch."Entry No.");
      DataExchField.VALIDATE("Column No.",DataExchFieldMapping."Column No.");
      DataExchField.VALIDATE("Node ID",GetNodeID(CurrentNodeID));
      DataExchField.VALIDATE(Value,TextValue);
      DataExchField.VALIDATE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchField.VALIDATE("Line No.",LineNo);
      DataExchField.INSERT(TRUE);

      CurrentNodeID += 1;
    END;

    LOCAL PROCEDURE GetNodeID@15(CurrentNodeCount@1000 : Integer) : Text;
    BEGIN
      EXIT(FORMAT(CurrentNodeCount,0,'<Integer,4><Filler Char,0>'))
    END;

    LOCAL PROCEDURE VerifyCurrencyExchangeRateMatch@30(VAR TempExpectedCurrencyExchangeRate@1000 : TEMPORARY Record 330);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      TempExpectedCurrencyExchangeRate.RESET;
      TempExpectedCurrencyExchangeRate.FINDSET;

      REPEAT
        Assert.IsTrue(
          CurrencyExchangeRate.GET(TempExpectedCurrencyExchangeRate."Currency Code",TempExpectedCurrencyExchangeRate."Starting Date"),
          'Could not find currency exchange rate');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Exchange Rate Amount",CurrencyExchangeRate."Exchange Rate Amount",
          'Exchange Rate Amount field does not match');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Adjustment Exch. Rate Amount",CurrencyExchangeRate."Adjustment Exch. Rate Amount",
          'Adjustment Exch. Rate Amount field does not match');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Relational Currency Code",CurrencyExchangeRate."Relational Currency Code",
          'Relational Currency Code field does not match');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount",
          'Relational Exch. Rate Amount field does not match');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Fix Exchange Rate Amount",CurrencyExchangeRate."Fix Exchange Rate Amount",
          'Fix Exchange Rate Amount field does not match');
        Assert.AreEqual(
          TempExpectedCurrencyExchangeRate."Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Adjmt Exch Rate Amt",
          'Relational Adjmt Exch Rate Amt field does not match');
      UNTIL TempExpectedCurrencyExchangeRate.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@5(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    BEGIN
    {
      // [FEATURE] [Data Exchange] [Currency Exchange Rate]
    }
    END.
  }
}

