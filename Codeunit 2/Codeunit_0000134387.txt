OBJECT Codeunit 134387 ERM Sales Documents III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryERM@1007 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1032 : Codeunit 130502;
      LibrarySales@1029 : Codeunit 130509;
      LibraryService@1002 : Codeunit 131902;
      LibraryTimeSheet@1028 : Codeunit 131904;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryVariableStorage@1020 : Codeunit 131004;
      LibraryWarehouse@1027 : Codeunit 132204;
      LibraryReportDataset@1034 : Codeunit 131007;
      LibraryRandom@1001 : Codeunit 130440;
      LibrarySetupStorage@1035 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      AmountErr@1009 : TextConst '@@@=.;ENU=%1 must be %2 in %3.';
      CustomerMustBeDeletedErr@1021 : TextConst 'ENU=Customer must be deleted.';
      NoOfRecordErr@1008 : TextConst 'ENU=No. of records must be 1.';
      DeleteRetRcptOrderErr@1005 : TextConst '@@@=.;ENU="No. Printed must have a value in Return Receipt Header: No.=%1. It cannot be zero or empty."';
      DeleteSalesCrMemoErr@1010 : TextConst '@@@=.;ENU="No. Printed must have a value in Sales Cr.Memo Header: No.=%1. It cannot be zero or empty."';
      GetRetRcptErr@1011 : TextConst 'ENU=The No. Series does not exist. Identification fields and values:';
      PostGreaterQtyErr@1012 : TextConst 'ENU=You cannot invoice more than';
      OutstdSalesOrdErr@1013 : TextConst '@@@=.;ENU=You cannot delete Customer %1 because there is at least one outstanding Sales Return Order for this customer.';
      OutstdSalesReturnErr@1037 : TextConst '@@@=%1: Field(No);ENU=You cannot delete Item %1 because there is at least one outstanding Sales Return Order that includes this item.';
      SalesRetStatusErr@1016 : TextConst '@@@=.;ENU="Status must be equal to ''Open''  in Sales Header: Document Type=Return Order, No.=%1. Current value is ''Released''."';
      RetQtyRcdErr@1017 : TextConst '@@@=.;ENU="Return Qty. Rcd. Not Invd. must be equal to ''0''  in Sales Line: Document Type=Return Order, Document No.=%1, Line No.=%2. Current value is ''%3''."';
      RetQtyRcdAftReopenErr@1024 : TextConst '@@@=.;ENU="Return Qty. Received must be equal to ''0''  in Sales Line: Document Type=Return Order, Document No.=%1, Line No.=%2. Current value is ''%3''."';
      ReturnRcptNoErr@1023 : TextConst '@@@=.;ENU="Return Receipt No. must be equal to ''''  in Sales Line: Document Type=Credit Memo, Document No.=%1, Line No.=%2. Current value is ''%3''."';
      ReturnQuantityErr@1022 : TextConst '@@@=.;ENU=You cannot return more than %1 units.';
      QtyToInvSignErr@1019 : TextConst '@@@=.;ENU="Qty. to Invoice must have the same sign as the return receipt in Sales Line Document Type=''Credit Memo'',Document No.=''%1'',Line No.=''%2''."';
      QtyInvoiceErr@1018 : TextConst '@@@=.;ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      AdjustCostMsg@1026 : TextConst 'ENU=Some unadjusted value entries will not be covered with the new setting.';
      SalesLnTypeErr@1014 : TextConst '@@@=.;ENU="Type must be equal to ''Item''  in Sales Line: Document Type=Credit Memo, Document No.=%1, Line No.=%2. Current value is '' ''."';
      WhseShipmentIsRequiredErr@1025 : TextConst 'ENU=Warehouse Shipment is required for Line No.';
      WhseReceiveIsRequiredErr@1031 : TextConst 'ENU=Warehouse Receive is required for Line No.';
      WrongErrorReturnedErr@1030 : TextConst 'ENU=Wrong error returned: %1.';
      SalesOrderArchiveRespCenterErr@1033 : TextConst 'ENU=Sales Order Archives displays documents for Responisbility Center that should not be shown for current user';
      DocType@1036 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      InvDiscAmtInSalesInvErr@1015 : TextConst 'ENU=Incorrect Inv. Discount Amount in Sales Invoice Line created by Get Shipment Lines function.';
      OptionString@1038 : 'PostedReturnReceipt,PostedInvoices,PostedShipments,PostedCrMemo';

    [Test]
    PROCEDURE CustomerCardEditPostCode@77();
    VAR
      Customer@1001 : Record 18;
      PostCode@1000 : Record 225;
    BEGIN
      // Verify Post Code can be edited in Customer by page.

      // Setup: Create a Customer and a Post Code.
      Initialize;
      CreateCustomerWithPostCodeAndCity(Customer);
      LibraryERM.CreatePostCode(PostCode);

      // Modify: Modify the Post Code of the Customer by page.
      Customer.GET(ModifyCustomerPostCode(Customer."No.",PostCode.Code));

      // Verify: Verify that the Post Code gets modified for the Customer.
      VerifyCustomerData(Customer,PostCode.Code,PostCode.City);
    END;

    [Test]
    PROCEDURE CustomerCardEditCity@74();
    VAR
      Customer@1000 : Record 18;
      PostCode@1001 : Record 225;
    BEGIN
      // Verify City can be edited in Customer by page.

      // Setup: Create a Customer and a Post Code.
      Initialize;
      CreateCustomerWithPostCodeAndCity(Customer);
      LibraryERM.CreatePostCode(PostCode);

      // Modify: Modify the City of the Customer by page.
      Customer.GET(ModifyCustomerCity(Customer."No.",PostCode.City));

      // Verify: Verify that the City gets modified for the Customer.
      VerifyCustomerData(Customer,PostCode.Code,PostCode.City);
    END;

    [Test]
    [HandlerFunctions(PostCodesHandler)]
    PROCEDURE CustomerEditPostCodeLookUp@72();
    VAR
      Customer@1001 : Record 18;
      PostCode@1000 : Record 225;
      PostCode2@1004 : Record 225;
      TempCode@1003 : Code[20];
    BEGIN
      // Verify that system ask for City options when we edit Post Code if 2 similar values for Post Code exists.

      // Setup: Create a Customer and two Post Codes.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      TempCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PostCode.FIELDNO(Code),DATABASE::"Post Code"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Post Code",PostCode.FIELDNO(Code)) - 1);
      CreatePostCode(PostCode,TempCode + 'A');
      CreatePostCode(PostCode2,TempCode + 'B');
      LibraryVariableStorage.Enqueue(Customer.FIELDNO("Post Code")); // Passing field caption to handler.
      LibraryVariableStorage.Enqueue(PostCode.Code);

      // Exercise: Edit Post Code for the Customer and handle Post Codes page using handler.
      ModifyCustomerPostCode(Customer."No.",TempCode + '*');

      // Verify: Get the new Customer created in the record and verify that the Post Code and city gets modified for the Customer.
      Customer.GET(Customer."No.");
      VerifyCustomerData(Customer,PostCode.Code,FindCity(PostCode.Code));
    END;

    [Test]
    [HandlerFunctions(PostCodesHandler)]
    PROCEDURE CustomerEditCityLookUp@70();
    VAR
      Customer@1004 : Record 18;
      PostCode@1003 : Record 225;
      PostCode2@1002 : Record 225;
      TempCity@1001 : Text[30];
    BEGIN
      // Verify that system ask for Post Code options when we edit City if 2 similar values for City exists.

      // Setup: Create a Customer and two Cities for Post Codes.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      TempCity :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PostCode.FIELDNO(City),DATABASE::"Post Code"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Post Code",PostCode.FIELDNO(City)) - 1);
      CreateCityForPostCode(PostCode,TempCity + 'A');
      CreateCityForPostCode(PostCode2,TempCity + 'B');
      LibraryVariableStorage.Enqueue(Customer.FIELDNO(City)); // Passing Change Post Code to handler.
      LibraryVariableStorage.Enqueue(PostCode.City);

      // Exercise: Edit Post Code for the Customer and handle Post Codes page using handler.
      ModifyCustomerCity(Customer."No.",TempCity + '*');

      // Verify: Get the new Customer created in the record and verify that the Post Code and city gets modified for the Customer.
      Customer.GET(Customer."No.");
      VerifyCustomerData(Customer,FindPostCode(PostCode.City),PostCode.City);
    END;

    [Test]
    PROCEDURE CustomerDelete@73();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Verify that a Customer can be deleted.

      // Setup: Create a Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // Exercise: Delete the newly created customer.
      Customer.DELETE(TRUE);

      // Verify: Verify that customer gets deleted successfully.
      Assert.IsFalse(Customer.GET(Customer."No."),CustomerMustBeDeletedErr);
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnSalesOrder@34();
    VAR
      SalesHeader@1000 : Record 36;
      UserSetup@1006 : Record 91;
      ResponsibilityCenterCode@1005 : Code[10];
    BEGIN
      // Check Responsibility Center on Sales Order.

      // Setup: Create User, Item and Customer.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;

      // Exercise.
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::Order);

      // Verify: Validate Responsibility Center on Sales Order.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnPostedSalesDocument@27();
    VAR
      SalesHeader@1010 : Record 36;
      SalesInvoiceHeader@1003 : Record 112;
      SalesShipmentHeader@1000 : Record 110;
      UserSetup@1007 : Record 91;
      PostedDocumentNo@1004 : Code[20];
      ResponsibilityCenterCode@1006 : Code[10];
    BEGIN
      // Check Responsibility Center on Posted Sales Document.

      // Setup: Create User, Item, Customer and create Sales Order.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Validate Responsibility Center on Posted Documents.
      SalesInvoiceHeader.GET(PostedDocumentNo);
      SalesInvoiceHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.FINDFIRST;
      SalesShipmentHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,GetShipmentLinesHandler)]
    PROCEDURE GetShipmentLineOnSalesInvoice@6();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1004 : Record 37;
      SalesShipmentLine@1003 : Record 111;
    BEGIN
      // Verify Shipments on Get Shipment Lines are filtered according to Sell-to Customer No. on Sales Invoice.

      // Setup: Create and Ship two Sales Orders using different Sell-to Customer no. and same Bill-to Customer No. and then create Sales Invoice Header for first Customer.
      Initialize;
      CreateShipmentsAndSalesInvoice(SalesHeader,SalesLine);

      // Exercise: Create Sales Invoice lines using Get Shipment Line.
      LibrarySales.GetShipmentLines(SalesLine);

      // Verify: Verify No. of Shipments on Get Shipment Lines page for the Sales Invoice Customer.
      SalesShipmentLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      Assert.AreEqual(1,SalesShipmentLine.COUNT,NoOfRecordErr);  // Take 1 for the Sales Shipment Line.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,GetShipmentLinesHandler)]
    PROCEDURE GLEntriesAfterGetShipmentLine@7();
    VAR
      GeneralPostingSetup@1005 : Record 252;
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify the GL Entries when posting the Sales Invoice after Get Shipment Lines.

      // Setup: Create and Ship two Sales Orders using different Sell-to Customer no. and same Bill-to Customer No. and then create Sales Invoice for first Customer using Get Shipment Line.
      Initialize;
      CreateShipmentsAndSalesInvoice(SalesHeader,SalesLine);
      LibrarySales.GetShipmentLines(SalesLine);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      // Exercise: Post the created Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Amount on GL Entry.
      VerifyGLEntry(DocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(QuantityOnGetShipmentLinesPageHandler)]
    PROCEDURE GetShipmentLinesAfterPartialPosting@78();
    VAR
      SalesHeader@1000 : Record 36;
      GetShipmentLines@1003 : TestPage 5708;
    BEGIN
      // Verify Get Shipment Lines page having lines are filtered according to Sales Order.

      // Setup: Post the Sales Order.
      Initialize;
      PartiallyPostSalesOrder(SalesHeader);

      // Exercise: Open Get Shipment Lines page.
      GetShipmentLines.OPENEDIT;

      // Verify: Verify that both lines are exists on Get Shipment Lines page with same Quantity on which Sales Order is posted.

      // Verification done in QuantityOnGetShipmentLinesPageHandler page handler.

      // Tear Down.
      SalesHeader.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(QuantityFilterUsingGetShipmentLinesPageHandler)]
    PROCEDURE GetShipmentLineAfterPartialPostingWithQtyFilter@76();
    VAR
      SalesHeader@1000 : Record 36;
      GetShipmentLines@1003 : TestPage 5708;
    BEGIN
      // Verify Filter on Get Shipment Lines page filtered according to Quantity.

      // Setup: Post the Sales Order.
      Initialize;
      PartiallyPostSalesOrder(SalesHeader);

      // Exercise: Open Get Shipment Lines page.
      GetShipmentLines.OPENEDIT;

      // Verify: Verify Quantity Filter on Get Shipment Lines page, Verification done in the QuantityFilterUsingGetShipmentLinesPageHandler page handler.

      // Tear Down.
      SalesHeader.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(InvokeGetShipmentLinesPageHandler)]
    PROCEDURE PostSalesInvoiceAfterQuantityFilterOnGetShipmentLine@14();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1012 : Record 112;
      GetShipmentLines@1003 : TestPage 5708;
      PostedInvoiceNo@1011 : Code[20];
    BEGIN
      // Verify G/L Entry for partially Posted Sales Invoice after Get Shipment Lines on Sales Invoice.

      // Setup: Post the Sales Order and open Get Shipment Lines page.
      Initialize;
      PartiallyPostSalesOrder(SalesHeader);
      GetShipmentLines.OPENEDIT;

      // Exercise: Post the Sales Invoice.
      PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Value on G/L Entry.
      SalesInvoiceHeader.GET(PostedInvoiceNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      VerifyGLEntryForPostedInvoice(PostedInvoiceNo,SalesHeader."Document Type"::Invoice,SalesInvoiceHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE VATAmountOnPostedSalesInvoice@10();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      GeneralPostingSetup@1004 : Record 252;
      DocumentNo@1000 : Code[20];
      VATAmount@1003 : Decimal;
    BEGIN
      // Verify G/L Entry for VAT Amount after Posting Sales Invoice.

      // Setup.
      Initialize;
      CreateSalesDocumentWithItem(SalesHeader,SalesHeader."Document Type"::Invoice);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);
      VATAmount := ROUND(SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."VAT %" / 100);
      GeneralPostingSetup.GET(SalesHeader."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      // Exercise: Post the Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify.
      VerifyVATAmountOnGLEntry(GeneralPostingSetup."Sales Account",DocumentNo,-VATAmount);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE PostSalesCrMemoUsingGetPostedDocLines@21();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeader2@1008 : Record 36;
      SalesHeader3@1003 : Record 36;
      SalesLine@1000 : Record 37;
      GeneralPostingSetup@1006 : Record 252;
      GeneralLedgerSetup@1007 : Record 98;
      VATRoundingType@1005 : Option;
      DocumentNo@1004 : Code[20];
      VATAmount@1009 : Decimal;
    BEGIN
      // Verify G/L Entry for VAT amount after posting Sales Credit Memo using Get Posted Document Lines to Reverse against posting of Purchase Return Order as Receive.

      // Setup.
      Initialize;

      // Setup: Set VAT Rounding Type in G/L Setup.
      VATRoundingType := UpdateGeneralLedgerVATSetup(GeneralLedgerSetup."VAT Rounding Type"::Nearest);

      // Setup: Create and Post Sales Invoice.
      CreateSalesDocumentWithItem(SalesHeader,SalesHeader."Document Type"::Invoice);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Setup: Create Sales Return Order using Copy Document and post it.
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");
      LibrarySales.CopySalesDocument(SalesHeader2,DocType::"Posted Invoice",DocumentNo,TRUE,FALSE);  // Set TRUE for Include Header and FALSE for Recalculate Lines.
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,FALSE);

      // Setup: Create Sales Credit Memo using Get Posted Document Lines.
      LibrarySales.CreateSalesHeader(SalesHeader3,SalesHeader3."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");
      GetPostedDocumentLines(SalesHeader3."No.",OptionString::PostedInvoices);
      FindSalesLine(SalesLine,SalesHeader3."Document Type",SalesHeader3."No.",SalesLine.Type::Item);
      VATAmount := ROUND(SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."VAT %" / 100);
      GeneralPostingSetup.GET(SalesHeader3."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      // Exercise: Post the Sales Credit Memo.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader3,TRUE,TRUE);

      // Verify.
      VerifyVATAmountOnGLEntry(GeneralPostingSetup."Sales Credit Memo Account",DocumentNo,VATAmount);

      // Tear Down: Rollback General Ledger Setup.
      UpdateGeneralLedgerVATSetup(VATRoundingType);
    END;

    [Test]
    PROCEDURE StartingDateAsWorkDateOnSalesPrice@118();
    BEGIN
      // Verify that correct date gets updated on Sales Price window in "Starting Date Filter" field when user enters W.

      Initialize;
      StartingDateOnSalesPrice('W',WORKDATE);
    END;

    [Test]
    PROCEDURE StartingDateAsTodayOnSalesPrice@122();
    BEGIN
      // Verify that correct date gets updated on Sales Price window in "Starting Date Filter" field when user enters T.

      Initialize;
      StartingDateOnSalesPrice('T',TODAY);
    END;

    LOCAL PROCEDURE StartingDateOnSalesPrice@120(StartingDateFilter@1000 : Text[1];StartingDate@1001 : Date);
    VAR
      Customer@1003 : Record 18;
      SalesPrices@1002 : TestPage 7002;
    BEGIN
      // Setup: Create Customer.
      LibrarySales.CreateCustomer(Customer);

      // Exercise: Open Sales Prices Page and Enter date code in Starting Date Filter.
      OpenSalesPricesPage(SalesPrices,Customer."No.",StartingDateFilter);

      // Verify: Verify that correct date comes in "Starting Date Filter".
      SalesPrices.StartingDateFilter.ASSERTEQUALS(StartingDate);
    END;

    [Test]
    PROCEDURE ErrorOnDeletePostedSalesRetOrder@22();
    VAR
      SalesHeader@1002 : Record 36;
      ReturnReceiptHeader@1004 : Record 6660;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Error while delete Posted Sales Return Receipt without print the Document.

      // Setup: Create Customer, create Sales Return Order and Receipt.
      Initialize;
      DocumentNo := CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      ReturnReceiptHeader.GET(DocumentNo);

      // Exercise.
      ASSERTERROR ReturnReceiptHeader.DELETE(TRUE);

      // Verify: Verify Error while delete Posted Sales Return Receipt.
      Assert.ExpectedError(STRSUBSTNO(DeleteRetRcptOrderErr,DocumentNo));
    END;

    [Test]
    PROCEDURE ErrorOnDeletePostedCreditMemo@36();
    VAR
      SalesHeader@1002 : Record 36;
      SalesCrMemoHeader@1007 : Record 114;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Error while delete Posted Sales Credit Memo without print the Document.

      // Setup: Create Customer, create Sales Credit Memo and Post.
      Initialize;
      DocumentNo := CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Credit Memo",TRUE);
      SalesCrMemoHeader.GET(DocumentNo);

      // Exercise.
      ASSERTERROR SalesCrMemoHeader.DELETE(TRUE);

      // Verify. Verify Error while delete Posted Sales Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(DeleteSalesCrMemoErr,DocumentNo));
    END;

    [Test]
    PROCEDURE PostedDocWithRetReasonCode@45();
    BEGIN
      // Verify Return Reason Code on Return Receipt, Credit Memo, Item Ledger and Value Entry.
      RetReasonCodeOnPostedDocument(CreateRetReasonCode);
    END;

    [Test]
    PROCEDURE PostedDocWithoutRetReasonCode@46();
    BEGIN
      // Verify blank Return Reason Code on Return Receipt, Credit Memo, Item Ledger and Value Entry.
      RetReasonCodeOnPostedDocument('');
    END;

    LOCAL PROCEDURE RetReasonCodeOnPostedDocument@30(ReturnReasonCode@1007 : Code[10]);
    VAR
      SalesHeader@1002 : Record 36;
      DocumentNo@1003 : Code[20];
      DocumentNo2@1005 : Code[20];
      ItemNo@1000 : Code[20];
    BEGIN
      // Setup: Create Customer, create Sales Return Order and Post.
      Initialize;
      ItemNo := LibraryInventory.CreateItemNo;
      CreateSalesDocumentItem(SalesHeader,SalesHeader."Document Type"::"Return Order",ItemNo);
      ModifyReturnReasonCode(SalesHeader."Document Type",SalesHeader."No.",ReturnReasonCode);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise.
      DocumentNo2 := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Return Reason Code on Return Receipt, Credit Memo, Item Ledger and Value Entry.
      VerifyReturnReceipt(DocumentNo,SalesHeader."No.",SalesHeader."No. Series",ReturnReasonCode);
      VerifyCreditMemo(DocumentNo2,SalesHeader."No.",SalesHeader."No. Series",ReturnReasonCode);
      VerifyItemLedgerEntry(ItemNo,DocumentNo,ReturnReasonCode);
      VerifyValueEntry(DocumentNo2,ReturnReasonCode);
    END;

    [Test]
    PROCEDURE ErrorOnGetRetRcptNoAfterCreateCrMemo@60();
    VAR
      SalesHeader@1002 : Record 36;
      SalesReceivablesSetup@1006 : Record 311;
      NoSeriesManagement@1003 : Codeunit 396;
    BEGIN
      // Verify Error while Get Return Receipt No. after create Credit Memo without Return Receipt on Credit Memo.

      // Setup: Create Customer, create Sales Credit Memo.
      Initialize;
      SalesReceivablesSetup.GET;
      UpdateSalesSetup(FALSE,SalesReceivablesSetup."Exact Cost Reversing Mandatory");
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::"Credit Memo");

      // Exercise.
      ASSERTERROR NoSeriesManagement.GetNextNo(SalesHeader."Return Receipt No. Series",WORKDATE,FALSE); // Get Return Receipt No.

      // Verify: Error while Get Return Receipt after post Credit Memo.
      Assert.ExpectedError(GetRetRcptErr);

      // Tear down
      UpdateSalesSetup(SalesReceivablesSetup."Return Receipt on Credit Memo",SalesReceivablesSetup."Exact Cost Reversing Mandatory");
    END;

    [Test]
    PROCEDURE PartialPostingOfSalesRetOrder@23();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      LastReturnReceiptNo@1000 : Code[20];
      LastPostingNo@1006 : Code[20];
    BEGIN
      // Verify Posting Nos on Sales Return Order Header after partial posting.

      // Setup: Create Customer, create Sales Return Order, update partial quantity and Post.
      Initialize;
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order");
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2);  // Required for Partial Posting.
      LastReturnReceiptNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise.
      LastPostingNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Posting Nos on Sales Return Order Header after partial posting.
      SalesHeader.TESTFIELD("Last Return Receipt No.",LastReturnReceiptNo);
      SalesHeader.TESTFIELD("Return Receipt No.",'');
      SalesHeader.TESTFIELD("Last Posting No.",LastPostingNo);
      SalesHeader.TESTFIELD("Posting No.",'');
    END;

    [Test]
    [HandlerFunctions(RetRcptLinesPageHandler)]
    PROCEDURE ErrorOnUpdateGreaterQtytoInvOnCrMemo@42();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeader2@1002 : Record 36;
      SalesLine@1004 : Record 37;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Verify error while update Qty. to Invoice more than Return Receipt Quantity on Credit Memo Line.

      // Setup: Create Customer, create Sales Return Order, update partial quantity and Post.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;

      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateSalesDocument(
        SalesHeader2,SalesHeader2."Document Type"::"Credit Memo",
        SalesHeader."Sell-to Customer No.",SalesLine.Type::"G/L Account",GLAccountNo);
      GetReturnReceipt(SalesHeader2);
      FindSalesLine(SalesLine,SalesHeader2."Document Type",SalesHeader2."No.",SalesLine.Type::"G/L Account");

      // Exercise.
      ASSERTERROR SalesLine.VALIDATE("Qty. to Invoice",SalesLine.Quantity + 1);  // Required Greater quantity than Return Receipt.

      // Verify: Verify error while update Qty. to Invoice more than Return Receipt Quantity on Credit Memo Line.
      Assert.ExpectedError(PostGreaterQtyErr);
    END;

    [Test]
    PROCEDURE DeleteCustomerWithOutstdSalesRetError@28();
    VAR
      Customer@1001 : Record 18;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Verify Error on deleting Customer with Outstanding Sales Returns.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order");

      // Excercise: Delete Customer.
      Customer.GET(SalesHeader."Sell-to Customer No.");
      ASSERTERROR Customer.DELETE(TRUE);

      // Verify: Verify Error on deleting Customer.
      Assert.ExpectedError(STRSUBSTNO(OutstdSalesOrdErr,Customer."No."));
    END;

    [Test]
    PROCEDURE DeleteItemWithOutstdSalesRetError@53();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Verify Error on deleting Item with Outstanding Sales Returns.

      // Setup: Create Sales Return Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateSalesDocumentItem(SalesHeader,SalesHeader."Document Type"::"Return Order",Item."No.");

      // Excercise.
      ASSERTERROR Item.DELETE(TRUE);

      // Verify: Verify Error on deleting Item.
      Assert.ExpectedError(STRSUBSTNO(OutstdSalesReturnErr,Item."No."));
    END;

    [Test]
    PROCEDURE ChangeSalesRetOrdHdrInfoAfterRcdError@64();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Verify Error while changing Sales Return Order Header information after posting it as Receive.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);

      // Exercise: Changing Sales Return order Header Sell-to Customer No.
      ASSERTERROR SalesHeader.VALIDATE("Sell-to Customer No.",LibrarySales.CreateCustomerNo);

      // Verify: Verify Error on changing Sales Return order Header Information.
      Assert.ExpectedError(STRSUBSTNO(SalesRetStatusErr,SalesHeader."No."));
    END;

    [Test]
    PROCEDURE DeleteSalesRetOrdHdrAfterRcdError@132();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Error while deleting Sales Return Order Header After Posting it as Receive.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Delete Sales Header.
      ASSERTERROR SalesHeader.DELETE(TRUE);

      // Verify: Verify Error on deleting Sales Header.
      Assert.ExpectedError(STRSUBSTNO(RetQtyRcdErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Qty. Received"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ChangeSalesRetOrdHdrInfoAfterReopenError@32();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Error while changing Sales Return Order Header Information After Reopen Received Sales Returns.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Changing Sales Return order Header "Sell-to Customer No." field.
      ASSERTERROR SalesHeader.VALIDATE("Sell-to Customer No.",LibrarySales.CreateCustomerNo);

      // Verify: Verify Error on changing Sales Return order Header "Sell-to Customer No." field.
      Assert.ExpectedError(
        STRSUBSTNO(RetQtyRcdAftReopenErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Qty. Received"));
    END;

    [Test]
    PROCEDURE DeleteSalesRetOrdHdrAfterReopenError@33();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Error while deleting Sales Return Order Header after Reopen Received Sales Returns.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise.
      ASSERTERROR SalesHeader.DELETE(TRUE);

      // Verify: Verify Error on deleting Sales Header.
      Assert.ExpectedError(STRSUBSTNO(RetQtyRcdErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Qty. Received"));
    END;

    [Test]
    PROCEDURE ChangeRetOrdlnTypeError@96();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1004 : Record 37;
    BEGIN
      // Verify Error while changing Return Order Line Type field.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Change Sales Return Order Line Type field.
      ASSERTERROR SalesLine.VALIDATE(Type,SalesLine2.Type::Resource);

      // Verify: Verify Error while changing Sales Return Order Line Type.
      Assert.ExpectedError(STRSUBSTNO(RetQtyRcdErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Qty. Received"));
    END;

    [Test]
    PROCEDURE ChangeRetOrdLnNoError@148();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Error while changing Return Order Line "No." field.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Change Sales Return Order Line "No." field.
      ASSERTERROR SalesLine.VALIDATE("No.",LibraryERM.CreateGLAccountWithSalesSetup);

      // Verify: Verify Error while changing Sales Return Order Line "No." field.
      Assert.ExpectedError(STRSUBSTNO(SalesRetStatusErr,SalesLine."Document No."));
    END;

    [Test]
    PROCEDURE DeleteRcdRetOrdLnError@147();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Error while deleting Sales Return Order Line of Received Sales Returns.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Delete Sales Return Order Line.
      ASSERTERROR SalesLine.DELETE(TRUE);

      // Verify: Verify Error while deleting Sales Return Order Line.
      Assert.ExpectedError(STRSUBSTNO(SalesRetStatusErr,SalesHeader."No."));
    END;

    [Test]
    PROCEDURE ChangeRetOrdLnRetQtyToReceiveError@31();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Error while changing Return Order line "Return Qty. to Receive" field.

      // Setup: Create Sales Return Order.
      Initialize;
      CreatePostSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Change Sales Return Order Line "Return Qty. to Receive" field.
      ASSERTERROR SalesLine.VALIDATE("Return Qty. to Receive",SalesLine.Quantity + LibraryRandom.RandInt(10));  // Use Random value for Quantity.

      // Verify: Verify Error while changing Sales Return Order Line "Return Qty. to Receive" filed.
      Assert.ExpectedError(STRSUBSTNO(ReturnQuantityErr,SalesLine.Quantity - SalesLine."Return Qty. Received"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ChangeCrMemoHdrInfoError@56();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1000 : Record 37;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Verify Error while changing Credit Memo Header Information created by Get Return Receipt Lines.

      // Setup: Create Sales Return Order,Create Credit Memo.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateCreditMemo(SalesHeader,GLAccountNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Changing Sales Return order Header "Sell-to Customer No." field.
      ASSERTERROR SalesHeader.VALIDATE("Sell-to Customer No.",LibrarySales.CreateCustomerNo);

      // Verify: Verify Error on Changing Sales Return order Header "Sell-to Customer No." field.
      Assert.ExpectedError(STRSUBSTNO(ReturnRcptNoErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Receipt No."));
    END;

    [Test]
    PROCEDURE ChangeSalesCrMemoLnTypeError@35();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify Error while changing Credit Memo Line Type field created by Get Return Receipt Line.

      // Setup: Create Sales Return Order,Create Credit Memo.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateCreditMemo(SalesHeader,GLAccountNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Changing Credit Memo Line Type field.
      ASSERTERROR SalesLine.VALIDATE(Type,SalesLine.Type::Resource);

      // Verify: Verify Error on Changing Credit Memo Line Type field.
      Assert.ExpectedError(STRSUBSTNO(ReturnRcptNoErr,SalesLine."Document No.",SalesLine."Line No.",SalesLine."Return Receipt No."));
    END;

    [Test]
    PROCEDURE RegenerateSalesCrMemoLnAfterDelete@146();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify Credit Memo Line after regenerate it by Get Return Receipt Line.

      // Setup: Create Sales Return Order,Create Credit Memo,Delete Credit Memo Line.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateCreditMemo(SalesHeader,GLAccountNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");
      SalesLine.DELETEALL(TRUE);

      // Excercise: Regenerate Credit Memo Line by Get Return Receipt Line.
      CreateCrMemoLnWithGetRetRcptLn(SalesHeader,GLAccountNo);

      // Verify: Verify Credit Memo Line.
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");
      SalesLine.TESTFIELD("No.",GLAccountNo);
    END;

    [Test]
    PROCEDURE ChangeSalesCrMemoLnQtyError@92();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify Error while changing Credit Memo Line Quantity sign created by Get Return Receipt Line.

      // Setup: Create Sales Return Order,Create Credit Memo.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateCreditMemo(SalesHeader,GLAccountNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Change Credit Memo Line Quantity sign.
      ASSERTERROR SalesLine.VALIDATE(Quantity,-SalesLine.Quantity);

      // Verify: Verify Error on changing Credit Memo Line Quantity sign.
      Assert.ExpectedError(STRSUBSTNO(QtyToInvSignErr,SalesLine."Document No.",SalesLine."Line No."));
    END;

    [Test]
    PROCEDURE ChangeSalesCrMemoLnQtyMorethanRetRcptQtyError@110();
    VAR
      ReturnReceiptLine@1000 : Record 6661;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Verify Error while changing Credit Memo Line Quantity more than Return Receipt Quantity created by Get Return Receipt Line.

      // Setup: Create Sales Return Order,Create Credit Memo.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CreatePostSalesDoc(SalesHeader,SalesHeader."Document Type"::"Return Order",GLAccountNo,FALSE);
      CreateCreditMemo(SalesHeader,GLAccountNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.",SalesLine.Type::"G/L Account");

      // Exercise: Credit Memo Line Quantity more than Return Return Receipt Quantity.
      ASSERTERROR SalesLine.VALIDATE(Quantity,SalesLine.Quantity + LibraryRandom.RandInt(10));  // Use Random value for Quantity.

      // Verify: Verify Error on changing Credit Memo Line Quantity more than Return Return Receipt Quantity.
      ReturnReceiptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      ReturnReceiptLine.FINDFIRST;
      Assert.ExpectedError(STRSUBSTNO(QtyInvoiceErr,ReturnReceiptLine."Document No."));
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler,ItemTrackingLinesHandler,MessageHandler)]
    PROCEDURE PostSalesRetOrderWithoutAppFromItemEntryWithIT@134();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeaderRetOrder@1008 : Record 36;
      SalesLine@1006 : Record 37;
      InventorySetup@1004 : Record 313;
      SalesReceivablesSetup@1005 : Record 311;
      PostedCrMemoNo@1007 : Code[20];
    BEGIN
      // Verify GL Entries after Post Sales Return Order (with IT) without Alpply from Item Entry after Get Posted Invoice Line to Reverse.

      // Setup: Update Setup, create Sales Order with Item Tracking and post.
      Initialize;
      InventorySetup.GET;
      SalesReceivablesSetup.GET;
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Automatic Cost Adjustment"::Always,InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      UpdateSalesSetup(SalesReceivablesSetup."Return Receipt on Credit Memo",TRUE);

      CreateSalesDocumentItem(SalesHeader,SalesHeader."Document Type"::Order,CreateTrackedItem);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Create Sales Return Order, update 'Apply from Item Entry'.
      CreateAndUpdateSalesRetOrder(SalesHeaderRetOrder,SalesHeader."Sell-to Customer No.");
      LibraryVariableStorage.Enqueue(AdjustCostMsg);
      SalesHeaderRetOrder.CALCFIELDS("Amount Including VAT");

      // Exercise.
      PostedCrMemoNo := LibrarySales.PostSalesDocument(SalesHeaderRetOrder,TRUE,TRUE);

      // Verify: Verify GL Entries after Post Sales Return Order (with IT) without Alpply from Item Entry.
      VerifyGLEntryForPostedInvoice(
        PostedCrMemoNo,SalesHeaderRetOrder."Document Type"::"Credit Memo",SalesHeaderRetOrder."Amount Including VAT");

      // Tear down.
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Automatic Cost Adjustment",InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      UpdateSalesSetup(SalesReceivablesSetup."Return Receipt on Credit Memo",SalesReceivablesSetup."Exact Cost Reversing Mandatory");
    END;

    [Test]
    PROCEDURE ExplBOMOnSalesCrMemoError@52();
    VAR
      ReturnReceiptHeader@1003 : Record 6660;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify Error while applying Explode BOM on Credit Memo created by Get Return Receipt Line.

      // Setup: Create Sales Return Order,Create Credit Memo.
      Initialize;
      ItemNo := LibraryInventory.CreateItemNo;

      CreateSalesDocumentItem(SalesHeader,SalesHeader."Document Type"::"Return Order",ItemNo);
      ReturnReceiptHeader.GET(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
      SalesHeader.GET(SalesHeader."Document Type"::"Return Order",ReturnReceiptHeader."Return Order No.");

      CreateCreditMemo(SalesHeader,ItemNo);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::" ");

      // Excercise: Apply Explode BOM on Sales Return Order Line.
      ASSERTERROR LibrarySales.ExplodeBOM(SalesLine);

      // Verify: Verify Error while applying Explode BOM on Sales Return Order Line.
      Assert.ExpectedError(STRSUBSTNO(SalesLnTypeErr,SalesHeader."No.",SalesLine."Line No."));
    END;

    [Test]
    PROCEDURE ExtendedTextOnSalesRetOrd@29();
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      SalesReturnOrder@1002 : TestPage 6630;
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify Extended Text on Sales Return Order Line with Extended Text Line of Item.

      // Setup: Create Customer, Item, Extended Text Line.
      Initialize;
      ItemNo := CreateItemAndExtendedText(FALSE);

      CreateSalesDocumentItem(SalesHeader,SalesHeader."Document Type"::"Return Order",ItemNo);
      SalesReturnOrder.OPENEDIT;

      // Exercise: Insert Extended Text in Sales Line.
      SalesReturnOrder.SalesLines.Action1901991804.INVOKE;

      // Verify: Verify desription of Extended Text of Sales Return Order Line.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);
      SalesLine.TESTFIELD(Description,ItemNo);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWarningHandler)]
    PROCEDURE CreateSalesInvoiceLineWhiteLocationQtyError@55();
    BEGIN
      // Unit test
      ASSERTERROR SalesDocLineQtyValidation(2);  // 2 => Invoice
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,WhseShipmentIsRequiredErr) > 0,STRSUBSTNO(WrongErrorReturnedErr,GETLASTERRORTEXT));
    END;

    [Test]
    PROCEDURE CreateSalesCrMemoLineWhiteLocationQtyError@59();
    BEGIN
      // Unit test
      ASSERTERROR SalesDocLineQtyValidation(3);  // 3 => Credit Memo
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,WhseReceiveIsRequiredErr) > 0,STRSUBSTNO(WrongErrorReturnedErr,GETLASTERRORTEXT));
    END;

    [Test]
    PROCEDURE PartiallyPostSalesOrderWithCompleteShipmentAdviceError@67();
    BEGIN
      // Verify error when partially shipping Sales Order with Complete Shipping Advice if it contains first line with negative quantities.

      PartialPostingOfCompleteSalesOrder(FALSE);
    END;

    [Test]
    PROCEDURE PartiallyPostSalesOrderWithCompleteShipmentAdviceErrorZero@61();
    BEGIN
      // Verify error when partially shipping Sales Order with Complete Shipping Advicewith first line negative and also a line with zero.

      PartialPostingOfCompleteSalesOrder(TRUE);
    END;

    LOCAL PROCEDURE PartialPostingOfCompleteSalesOrder@83(WithZeroLine@1000 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Setup: Create Customer, create Sales Order, update partial Quantity to Ship and Post.
      Initialize;
      CreateSalesDocumentWithGL(SalesHeader,SalesHeader."Document Type"::Order);
      SalesHeader.VALIDATE("Shipping Advice",SalesHeader."Shipping Advice"::Complete);
      SalesHeader.MODIFY;
      ModifyAndAddSalesLine(SalesHeader,WithZeroLine);

      // Exercise and Verify.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE CreditMemoLineDiscountRoundingUsingCopyDoc@18();
    VAR
      SalesHeaderSrc@1000 : Record 36;
      SalesHeaderDst@1003 : Record 36;
      SalesLine@1005 : Record 37;
      DocumentNo@1002 : Code[20];
      UnitPrice@1001 : Decimal;
      DiscountAmt@1006 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [Credit Memo] [Rounding] [Copy Document]
      // [SCENARIO 375821] Line Discount Amount is correctly copied when using Copy Document for Sales Credit Memo
      Initialize;
      DiscountAmt := 1;
      UnitPrice := 20000000; // = 1 / (0.00001 / 2)

      // [GIVEN] Posted Sales Invoice with Quantity = 1, "Unit Price" = 20000000, "Line Discount Amount" = 1, "Line Discount %" = 0.00001
      CreateSalesDocumentWithGL(SalesHeaderSrc,SalesHeaderSrc."Document Type"::Invoice);
      ModifySalesLine(
        SalesHeaderSrc."Document Type"::Invoice,SalesHeaderSrc."No.",SalesLine.Type::"G/L Account",1,UnitPrice,DiscountAmt);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeaderSrc,TRUE,TRUE);

      // [WHEN] Create new Sales Credit Memo using Copy Document
      LibrarySales.CreateSalesHeader(
        SalesHeaderDst,SalesHeaderDst."Document Type"::"Credit Memo",SalesHeaderSrc."Sell-to Customer No.");
      LibrarySales.CopySalesDocument(SalesHeaderDst,DocType::"Posted Invoice",DocumentNo,TRUE,FALSE);

      // [THEN] Sales Credit Memo "Line Discount Amount" = 1
      FindSalesLine(SalesLine,SalesHeaderDst."Document Type",SalesHeaderDst."No.",SalesLine.Type::"G/L Account");
      Assert.AreEqual(DiscountAmt,SalesLine."Line Discount Amount",SalesLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE CreditMemoLineDiscountRoundingUsingGetPostedDocLines@102();
    VAR
      SalesHeaderSrc@1000 : Record 36;
      SalesHeaderDst@1003 : Record 36;
      SalesLine@1005 : Record 37;
      UnitPrice@1001 : Decimal;
      DiscountAmt@1006 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [Credit Memo] [Rounding] [Get Document Lines to Reverse]
      // [SCENARIO 375821] Line Discount Amount is correctly copied when using Get Posted Document Lines for Sales Credit Memo
      Initialize;
      DiscountAmt := 1;
      UnitPrice := 20000000; // = 1 / (0.00001 / 2)

      // [GIVEN] Posted Sales Invoice with Quantity = 1, "Unit Price" = 20000000, "Line Discount Amount" = 1, "Line Discount %" = 0.00001
      CreateSalesDocumentWithItem(SalesHeaderSrc,SalesHeaderSrc."Document Type"::Invoice);
      ModifySalesLine(SalesHeaderSrc."Document Type"::Invoice,SalesHeaderSrc."No.",SalesLine.Type::Item,1,UnitPrice,DiscountAmt);
      LibrarySales.PostSalesDocument(SalesHeaderSrc,TRUE,TRUE);

      // [WHEN] Create new Sales Credit Memo using Get Posted Document Lines
      LibrarySales.CreateSalesHeader(
        SalesHeaderDst,SalesHeaderDst."Document Type"::"Credit Memo",SalesHeaderSrc."Sell-to Customer No.");
      GetPostedDocumentLines(SalesHeaderDst."No.",OptionString::PostedInvoices);

      // [THEN] Sales Credit Memo "Line Discount Amount" = 1
      FindSalesLine(SalesLine,SalesHeaderDst."Document Type",SalesHeaderDst."No.",SalesLine.Type::Item);
      Assert.AreEqual(DiscountAmt,SalesLine."Line Discount Amount",SalesLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE SalesOrderArchiveUserRespCenterFilter@108();
    VAR
      ResponsibilityCenter@1000 : ARRAY [2] OF Record 5714;
      UserSetup@1004 : Record 91;
      SalesOrderArchives@1002 : TestPage 9349;
      CustomerNo@1001 : Code[20];
      OldSalesRespCtrFilter@1005 : Code[10];
    BEGIN
      // [FEATURE] [Responsibility Center] [Archive]
      // [SCENARIO 375976] Sales Order Archive shows entries depending on User's Responsibility Center
      Initialize;

      // [GIVEN] Responsibility Center "A" and "B"
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      OldSalesRespCtrFilter := UpdateUserSetupSalesRespCtrFilter(UserSetup,'');
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter[1]);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter[2]);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Archived Sales Order for Responsibility Center "A"
      CreateAndArchiveSalesOrderWithRespCenter(
        CustomerNo,ResponsibilityCenter[1].Code);

      // [GIVEN] Archived Sales Order for Responsibility Center "B"
      CreateAndArchiveSalesOrderWithRespCenter(
        LibrarySales.CreateCustomerNo,ResponsibilityCenter[2].Code);

      // [GIVEN] User is assigned to Responsibility Center "A"
      UpdateUserSetupSalesRespCtrFilter(UserSetup,ResponsibilityCenter[1].Code);

      // [WHEN] Sales Order Archive page is opened
      SalesOrderArchives.OPENVIEW;

      // [THEN] Only entries for Responsibility Center "A" are shown
      SalesOrderArchives."Sell-to Customer No.".ASSERTEQUALS(CustomerNo);
      Assert.IsFalse(SalesOrderArchives.NEXT,SalesOrderArchiveRespCenterErr);

      UpdateUserSetupSalesRespCtrFilter(UserSetup,OldSalesRespCtrFilter);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE GetDocLinesToReverseFromInvoiceWithTwoShipments@25();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      LineDiscount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [Get Document Lines to Reverse]
      // [SCENARIO 376131] Action "Get Document Lines to Reserse" copies line discount from original sales document when the sales order is shipped in two parts, then invoiced

      // [GIVEN] Sales order with one line: "Line Discount %" = 10
      LineDiscount := LibraryRandom.RandDec(50,2);
      CreateSalesDocumentWithItem(SalesHeader,SalesHeader."Document Type"::Order);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE("Line Discount %",LineDiscount);
      SalesLine.VALIDATE("Qty. to Ship",SalesLine."Qty. to Ship" / 2);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Post partial shipment
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      // [GIVEN] Ship remaining quantity
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      // [GIVEN] Invoice total amount
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // [GIVEN] Create credit memo
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");
      // [WHEN] Run Get Document Lines to Reverse and copy from posted sales invoice
      GetPostedDocumentLines(SalesHeader."No.",OptionString::PostedInvoices);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);

      // [THEN] "Line Discount %" = 10 in the credit memo
      Assert.AreEqual(LineDiscount,SalesLine."Line Discount %",SalesLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(CertificateofSupplyRequestPageHandler)]
    PROCEDURE CertificateOfSupplyPartiallyShippedOrder@191();
    VAR
      VATPostingSetup@1001 : Record 325;
      Item@1002 : ARRAY [2] OF Record 27;
      SalesHeader@1004 : Record 36;
      CustomerNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Report] [Certificate of Supply]
      // [SCENARIO 376661] "Certificate of Supply" report shows only shipped lines
      Initialize;

      // [GIVEN] "VAT Posting Setup" with enabled "Certificate of Supply Required"
      CreateVATPostingSetupWithCertificateOfSupply(VATPostingSetup);

      // [GIVEN] Sales Order with 2 lines where "Sales Line"[1]."Qty to Ship" = 5 and "Sales Line"[2]."Qty to Ship" = 0
      CustomerNo := LibrarySales.CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group");

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLineWithItem(
        Item[1],SalesHeader,LibraryRandom.RandInt(10),VATPostingSetup."VAT Prod. Posting Group");
      CreateSalesLineWithItem(
        Item[2],SalesHeader,0,VATPostingSetup."VAT Prod. Posting Group");

      // [GIVEN] Order shipped only
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Run report "Certificate of Supply"
      RunCertificateOfSupplyReport(CustomerNo);

      // [THEN] Exported row count = 1
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(1,LibraryReportDataset.RowCount,NoOfRecordErr);
      // [THEN] Exported row refered to "Sales Line"[1]
      LibraryReportDataset.MoveToRow(1);
      LibraryReportDataset.AssertCurrentRowValue('Item_No',Item[1]."No.");

      // Tear-down
      VATPostingSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CopySalesInvoiceFirstLineNotShipped@66();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      Customer@1003 : Record 18;
      PostedDocumentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 378027] It should be possible to Copy Sales Invoice with two lines where first was not Shipped
      Initialize;

      UpdateSalesSetup(FALSE,TRUE);

      // [GIVEN] Sales Order "S" with two Lines
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY;
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Post Sales Order as Ship and Invoice for second line
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [GIVEN] Sales Credit Memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");

      // [WHEN] Run Copy Document for Posted Sales Invoice
      LibrarySales.CopySalesDocument(SalesHeader,DocType::"Posted Invoice",PostedDocumentNo,TRUE,FALSE);

      // [THEN] Posted Sales Invoice is copied
      FilterSalesCreditMemoLine(SalesLine,SalesHeader."No.",Item."No.");
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD(Quantity,0);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE CopySalesInvoiceFirstLineTypeBlank@98();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      Customer@1001 : Record 18;
      PostedDocumentNo@1000 : Code[20];
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 379142] It should be possible to Copy Posted Sales Invoice with first Line blank Type and second Line Item Tracked
      Initialize;

      UpdateSalesSetup(FALSE,TRUE);

      // [GIVEN] Sales Invoice with two Lines
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");

      // [GIVEN] First Sales Invoice Line with Type = " "
      MockSalesInvoiceLine(SalesHeader."No.");

      // [GIVEN] Second Sales Invoice Tracked Line with type "Item"
      ItemNo := CreateTrackedItem;
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;

      // [GIVEN] Post Sales Invoice
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [GIVEN] Sales Credit Memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");

      // [WHEN] Run Copy Document for Posted Sales Invoice
      LibrarySales.CopySalesDocument(SalesHeader,DocType::"Posted Invoice",PostedDocumentNo,TRUE,FALSE);

      // [THEN] Posted Sales Invoice is copied
      FilterSalesCreditMemoLine(SalesLine,SalesHeader."No.",ItemNo);
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    [Test]
    PROCEDURE PostSalesInvoiceDescriptionLine@97();
    VAR
      SalesHeader@1003 : Record 36;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Invoice]
      // [SCENARIO 378530] Sales Invoice description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Sales Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="6610", Description = "Sales, Other Job Expenses"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePostSalesDocWithGLDescriptionLine(SalesHeader,Description,SalesHeader."Document Type"::Order);

      // [WHEN] Post Sales Order (Invoice).
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifySalesInvDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostSalesShptDescriptionLine@107();
    VAR
      SalesHeader@1003 : Record 36;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Shipment]
      // [SCENARIO 378530] Sales Shipment description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Sales Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="6610", Description = "Sales, Other Job Expenses"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePostSalesDocWithGLDescriptionLine(SalesHeader,Description,SalesHeader."Document Type"::Order);

      // [WHEN] Post Sales Order (Ship).
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifySalesShptDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostSalesCrMemoDescriptionLine@105();
    VAR
      SalesHeader@1003 : Record 36;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Credit Memo]
      // [SCENARIO 378530] Sales Credit Memo description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Sales Return Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="6610", Description = "Sales, Other Job Expenses"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePostSalesDocWithGLDescriptionLine(SalesHeader,Description,SalesHeader."Document Type"::"Return Order");

      // [WHEN] Post Sales Return Order (Invoice).
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifySalesCrMemoDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE PostSalesRetRcptDescriptionLine@68();
    VAR
      SalesHeader@1003 : Record 36;
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Return Receipt]
      // [SCENARIO 378530] Sales Return Receipt description line with Type = "G/L Account"
      Initialize;

      // [GIVEN] Sales Return Order with two lines:
      // [GIVEN] Line1: Type = "G/L Account", No="6610", Description = "Sales, Other Job Expenses"
      // [GIVEN] Line2: Type = "G/L Account", No="", Description = "Description Line"
      CreatePostSalesDocWithGLDescriptionLine(SalesHeader,Description,SalesHeader."Document Type"::"Return Order");

      // [WHEN] Post Sales Return Order (Ship).
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] Description line has been posted: Type = "", No="", Description = "Description Line"
      VerifySalesRetRcptDescriptionLineExists(PostedDocNo,Description);
    END;

    [Test]
    PROCEDURE SalesShipmentLine_InitFromSalesLine_UT@151();
    VAR
      SalesLine@1001 : Record 37;
      SalesShipmentHeader@1002 : Record 110;
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      // [FEATURE] [UT] [Shipment]
      // [SCENARIO] TAB111 "Sales Shipment Line".InitFromSalesLine() correctly inits SalesShipmentLine from SalesLine
      SalesShipmentHeader.INIT;
      SalesShipmentHeader."Posting Date" := LibraryRandom.RandDate(100);
      SalesShipmentHeader."No." := LibraryUtility.GenerateGUID;

      InitSalesLine(SalesLine,SalesLine."Document Type"::Order);

      WITH SalesShipmentLine DO BEGIN
        InitFromSalesLine(SalesShipmentHeader,SalesLine);
        Assert.AreEqual(SalesShipmentHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(SalesShipmentHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(SalesLine."Qty. to Ship",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(SalesLine."Qty. to Ship (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(SalesLine."Qty. to Invoice","Quantity Invoiced",FIELDCAPTION("Quantity Invoiced"));
        Assert.AreEqual(SalesLine."Qty. to Invoice (Base)","Qty. Invoiced (Base)",FIELDCAPTION("Qty. Invoiced (Base)"));
        Assert.AreEqual(
          SalesLine."Qty. to Ship" - SalesLine."Qty. to Invoice",
          "Qty. Shipped Not Invoiced",FIELDCAPTION("Qty. Shipped Not Invoiced"));
        Assert.AreEqual(SalesLine."Document No.","Order No.",FIELDCAPTION("Order No."));
        Assert.AreEqual(SalesLine."Line No.","Order Line No.",FIELDCAPTION("Order Line No."));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(SalesLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(SalesLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE SalesInvoiceLine_InitFromSalesLine_UT@298();
    VAR
      SalesLine@1002 : Record 37;
      SalesInvoiceHeader@1001 : Record 112;
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      // [FEATURE] [UT] [Invoice]
      // [SCENARIO] TAB113 "Sales Invoice Line".InitFromSalesLine() correctly inits SalesInvoiceLine from SalesLine
      SalesInvoiceHeader.INIT;
      SalesInvoiceHeader."Posting Date" := LibraryRandom.RandDate(100);
      SalesInvoiceHeader."No." := LibraryUtility.GenerateGUID;

      InitSalesLine(SalesLine,SalesLine."Document Type"::Order);

      WITH SalesInvoiceLine DO BEGIN
        InitFromSalesLine(SalesInvoiceHeader,SalesLine);
        Assert.AreEqual(SalesInvoiceHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(SalesInvoiceHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(SalesLine."Qty. to Invoice",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(SalesLine."Qty. to Invoice (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(SalesLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(SalesLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE SalesCrMemoLine_InitFromSalesLine_UT@306();
    VAR
      SalesLine@1002 : Record 37;
      SalesCrMemoHeader@1001 : Record 114;
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      // [FEATURE] [UT] [Credit Memo]
      // [SCENARIO] TAB115 "Sales Cr.Memo Line".InitFromSalesLine() correctly inits SalesCrMemoLine from SalesLine
      SalesCrMemoHeader.INIT;
      SalesCrMemoHeader."Posting Date" := LibraryRandom.RandDate(100);
      SalesCrMemoHeader."No." := LibraryUtility.GenerateGUID;

      InitSalesLine(SalesLine,SalesLine."Document Type"::"Return Order");

      WITH SalesCrMemoLine DO BEGIN
        InitFromSalesLine(SalesCrMemoHeader,SalesLine);
        Assert.AreEqual(SalesCrMemoHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(SalesCrMemoHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(SalesLine."Qty. to Invoice",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(SalesLine."Qty. to Invoice (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(SalesLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(SalesLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE ReturnReceiptLine_InitFromSalesLine_UT@310();
    VAR
      SalesLine@1002 : Record 37;
      ReturnReceiptHeader@1001 : Record 6660;
      ReturnReceiptLine@1000 : Record 6661;
    BEGIN
      // [FEATURE] [UT] [Return Receipt]
      // [SCENARIO] TAB6661 "Return Receipt Line".InitFromSalesLine() correctly inits ReturnReceiptLine from SalesLine
      ReturnReceiptHeader.INIT;
      ReturnReceiptHeader."Posting Date" := LibraryRandom.RandDate(100);
      ReturnReceiptHeader."No." := LibraryUtility.GenerateGUID;

      InitSalesLine(SalesLine,SalesLine."Document Type"::"Return Order");

      WITH ReturnReceiptLine DO BEGIN
        InitFromSalesLine(ReturnReceiptHeader,SalesLine);
        Assert.AreEqual(ReturnReceiptHeader."Posting Date","Posting Date",FIELDCAPTION("Posting Date"));
        Assert.AreEqual(ReturnReceiptHeader."No.","Document No.",FIELDCAPTION("Document No."));
        Assert.AreEqual(SalesLine."Return Qty. to Receive",Quantity,FIELDCAPTION(Quantity));
        Assert.AreEqual(SalesLine."Return Qty. to Receive (Base)","Quantity (Base)",FIELDCAPTION("Quantity (Base)"));
        Assert.AreEqual(SalesLine."Qty. to Invoice","Quantity Invoiced",FIELDCAPTION("Quantity Invoiced"));
        Assert.AreEqual(SalesLine."Qty. to Invoice (Base)","Qty. Invoiced (Base)",FIELDCAPTION("Qty. Invoiced (Base)"));
        Assert.AreEqual(
          SalesLine."Return Qty. to Receive" - SalesLine."Qty. to Invoice",
          "Return Qty. Rcd. Not Invd.",FIELDCAPTION("Return Qty. Rcd. Not Invd."));
        Assert.AreEqual(SalesLine."Document No.","Return Order No.",FIELDCAPTION("Return Order No."));
        Assert.AreEqual(SalesLine."Line No.","Return Order Line No.",FIELDCAPTION("Return Order Line No."));
        Assert.AreEqual(Type::" ",Type,FIELDCAPTION(Type));
        Assert.AreEqual(SalesLine."No.","No.",FIELDCAPTION("No."));
        Assert.AreEqual(SalesLine.Description,Description,FIELDCAPTION(Description));
      END;
    END;

    [Test]
    PROCEDURE PostSalesInvoiceWithDiffCustPostingGroup@101();
    VAR
      Customer@1000 : Record 18;
      CustomerPostingGroup@1003 : Record 92;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      CustLedgerEntry@1004 : Record 21;
      InvNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380573] Sales Invoice is posted with "Customer Posting Group" from Sales Header when "Customer Posting Group" in Customer Card is different

      Initialize;

      // [GIVEN] Customer "X" with "Customer Posting Group" "DOMESTIC"
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Sales Invoice with Customer "X" and "Customer Posting Group" "FOREIGN"
      LibrarySales.CreateCustomerPostingGroup(CustomerPostingGroup);
      SalesHeader.VALIDATE("Customer Posting Group",CustomerPostingGroup.Code);
      SalesHeader.MODIFY(TRUE);

      // [WHEN] Post Sales Invoice
      InvNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Customer Ledger Entry with "Customer Posting Group" "FOREIGN" is posted
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,InvNo);
      CustLedgerEntry.TESTFIELD("Customer Posting Group",SalesHeader."Customer Posting Group");
    END;

    [Test]
    PROCEDURE ReplaceSalesLineStandardTextWithExtText@99();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      StandardText@1005 : Record 7;
      ExtendedText@1002 : Text;
    BEGIN
      // [FEATURE] [Standard Text] [Extended Text]
      // [SCENARIO 380579] Replacing of Sales Line's Standard Text Code updates attached Extended Text lines
      Initialize;

      // [GIVEN] Standard Text (Code = "ST1", Description = "SD1") with Extended Text "ET1".
      // [GIVEN] Standard Text (Code = "ST2", Description = "SD2") with Extended Text "ET2".
      // [GIVEN] Sales Order with line: "Type" = "", "No." = "ST1"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      MockSalesLine(SalesLine,SalesHeader);
      ValidateSalesLineStandardCode(SalesLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [WHEN] Validate Sales Line "No." = "ST2"
      ValidateSalesLineStandardCode(SalesLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [THEN] There are two Sales lines:
      // [THEN] Line1: Type = "", "No." = "ST2", Description = "SD2"
      // [THEN] Line2: Type = "", "No." = "", Description = "ET2"
      VerifySalesLineCount(SalesHeader,2);
      VerifySalesLineDescription(SalesLine,SalesLine.Type::" ",StandardText.Code,StandardText.Description);
      SalesLine.NEXT;
      VerifySalesLineDescription(SalesLine,SalesLine.Type::" ",'',ExtendedText);
    END;

    [Test]
    [HandlerFunctions(CertificateofSupplyRequestPageHandler)]
    PROCEDURE NoErrorWhileCreatingCertificateOfSupplyForDocWithSeveralSalesShipLines@103();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      VATPostingSetup@1001 : Record 325;
      CustomerNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Report] [Certificate of Supply]
      // [SCENARIO 381585] No "The Service Shipment Line already exists." should appear while reporting Certificate of Supply
      // [SCENARIO] with several Sales Shipment Lines having 0 quantity and the same "Line No."

      Initialize;

      // [GIVEN] "VAT Posting Setup" with enabled "Certificate of Supply Required"
      CreateVATPostingSetupWithCertificateOfSupply(VATPostingSetup);

      // [GIVEN] Sales Order 1 having 2 lines, and line 20000 has 0 "Quantity"
      CustomerNo := LibrarySales.CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLineWithItem(
        Item,SalesHeader,LibraryRandom.RandInt(10),VATPostingSetup."VAT Prod. Posting Group");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",0);

      // [GIVEN] Order 1 shipped only
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] Sales Order 2 having 2 lines, and line 20000 with 0 "Quantity"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",0);

      // [GIVEN] Order 2 shipped only
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Run report "Certificate of Supply"
      RunCertificateOfSupplyReport(CustomerNo);

      // [THEN] Exported row count = 2 and no error appears
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(2,LibraryReportDataset.RowCount,NoOfRecordErr);

      // Tear-down
      VATPostingSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE GetShipmentLinesCalcsDiscountAndServiceChargeForShippedItemWithExtText@140();
    VAR
      Customer@1000 : Record 18;
      CustInvoiceDisc@1002 : Record 19;
      SalesHeaderOrder@1003 : Record 36;
      SalesHeaderInvoice@1006 : Record 36;
      SalesLineOrder@1004 : Record 37;
      TransferExtendedText@1005 : Codeunit 378;
      ItemNos@1009 : ARRAY [10] OF Code[20];
    BEGIN
      // [FEATURE] [Get Shipment Lines] [Invoice Discount] [Service Charge]
      // [SCENARIO 382519] Get Shipment Lines function run in sales invoice should calculate discounted amount of shipped item with extended text and make a service charge line.
      Initialize;

      // [GIVEN] "Calc. Inv. Discount" is set up to TRUE in Sales & Receivables Setup.
      LibrarySales.SetCalcInvDiscount(TRUE);

      // [GIVEN] Customer "C" with invoice discount = "X" percent and service charge = "Y" LCY.
      LibrarySales.CreateCustomer(Customer);
      CreateInvDiscountForCustomer(CustInvoiceDisc,Customer."No.");

      // [GIVEN] Item "I" with extended text.
      ItemNos[1] := CreateItemAndExtendedText(FALSE);

      // [GIVEN] Sales order "SO" for customer "C" and item "I".
      // [GIVEN] Invoice discount is calculated for "SO", sales line with service charge is added.
      CreateSalesOrderWithSeveralItemsAndCalcInvDiscount(SalesHeaderOrder,SalesLineOrder,Customer."No.",ItemNos,1);

      // [GIVEN] Sales line with extended text for item "I" is added to the order.
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLineOrder,TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLineOrder);

      // [GIVEN] "SO" is shipped.
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);

      // [GIVEN] Sales invoice "SI" for customer "C" is created.
      LibrarySales.CreateSalesHeader(SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,Customer."No.");

      // [WHEN] Get shipment lines for "SI".
      GetShipmentLinesForSalesInvoice(SalesHeaderInvoice,SalesHeaderOrder."No.");

      // [THEN] "SI" has one line with same item, amount and discount as "SO".
      VerifySalesInvoiceLinesAgainstSalesOrderLines(SalesHeaderOrder,SalesHeaderInvoice,1);

      // [THEN] "SI" has one service charge line with Amount = "Y" LCY.
      VerifySalesLineWithServiceCharge(SalesHeaderInvoice,CustInvoiceDisc."Service Charge");
    END;

    [Test]
    PROCEDURE GetShipmentLinesCalcsDiscountsAndServiceChargeForSeveralShippedItems@109();
    VAR
      Customer@1008 : Record 18;
      CustInvoiceDisc@1006 : Record 19;
      SalesHeaderOrder@1005 : Record 36;
      SalesHeaderInvoice@1004 : Record 36;
      SalesLineOrder@1003 : Record 37;
      ItemNos@1000 : ARRAY [10] OF Code[20];
      NoOfItems@1009 : Integer;
      i@1010 : Integer;
    BEGIN
      // [FEATURE] [Get Shipment Lines] [Invoice Discount] [Service Charge]
      // [SCENARIO 382519] Get Shipment lines function run in sales invoice should calculate discounted amounts of all shipped items and make only one service charge line.
      Initialize;

      // [GIVEN] "Calc. Inv. Discount" is set up to TRUE in Sales & Receivables Setup.
      LibrarySales.SetCalcInvDiscount(TRUE);

      // [GIVEN] Customer "C" with invoice discount = "X" percent and service charge = "Y" LCY.
      LibrarySales.CreateCustomer(Customer);
      CreateInvDiscountForCustomer(CustInvoiceDisc,Customer."No.");

      // [GIVEN] Several items "I1".."I5".
      NoOfItems := LibraryRandom.RandIntInRange(2,5);
      FOR i := 1 TO NoOfItems DO
        ItemNos[i] := LibraryInventory.CreateItemNo;

      // [GIVEN] Sales order "SO" for customer "C" and items "I1".."I5".
      // [GIVEN] Invoice discount is calculated for "SO", sales line with service charge is added.
      // [GIVEN] "SO" is shipped.
      CreateSalesOrderWithSeveralItemsAndCalcInvDiscount(SalesHeaderOrder,SalesLineOrder,Customer."No.",ItemNos,NoOfItems);
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);

      // [GIVEN] Sales invoice "SI" for customer "C" is created.
      LibrarySales.CreateSalesHeader(SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,Customer."No.");

      // [WHEN] Get shipment lines for "SI".
      GetShipmentLinesForSalesInvoice(SalesHeaderInvoice,SalesHeaderOrder."No.");

      // [THEN] "SI" has lines with same items, amounts and discounts as "SO".
      VerifySalesInvoiceLinesAgainstSalesOrderLines(SalesHeaderOrder,SalesHeaderInvoice,NoOfItems);

      // [THEN] "SI" has one service charge line with Amount = "Y" LCY.
      VerifySalesLineWithServiceCharge(SalesHeaderInvoice,CustInvoiceDisc."Service Charge");
    END;

    [Test]
    PROCEDURE GetShipmentLinesCalcsDiscountsAndServiceChargeWhenDiscountsAreTurnedOnAfterShipment@116();
    VAR
      Customer@1007 : Record 18;
      CustInvoiceDisc@1006 : Record 19;
      SalesHeaderOrder@1005 : Record 36;
      SalesHeaderInvoice@1004 : Record 36;
      SalesLineOrder@1003 : Record 37;
      SalesLineInvoice@1000 : Record 37;
      ItemNos@1002 : ARRAY [10] OF Code[20];
    BEGIN
      // [FEATURE] [Get Shipment Lines] [Invoice Discount] [Service Charge]
      // [SCENARIO 382519] Get Shipment Lines function run in sales invoice should calculate discount for sales invoice if Calc. Inv. Discount setting was turned on after the sales order was shipped.
      Initialize;

      // [GIVEN] "Calc. Inv. Discount" is disabled in Sales & Receivables Setup.
      LibrarySales.SetCalcInvDiscount(FALSE);

      // [GIVEN] Customer "C" with invoice discount = "X" percent and service charge = "Y" LCY.
      // [GIVEN] Item "I".
      LibrarySales.CreateCustomer(Customer);
      CreateInvDiscountForCustomer(CustInvoiceDisc,Customer."No.");
      ItemNos[1] := LibraryInventory.CreateItemNo;

      // [GIVEN] Shipped sales order "SO" for customer "C" and item "I".
      CreateSalesOrderWithSeveralItemsAndCalcInvDiscount(SalesHeaderOrder,SalesLineOrder,Customer."No.",ItemNos,1);
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);

      // [GIVEN] "Calc. Inv. Discount" is enabled in Sales & Receivables Setup.
      LibrarySales.SetCalcInvDiscount(TRUE);

      // [GIVEN] Sales invoice "SI" for customer "C" is created.
      LibrarySales.CreateSalesHeader(SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,Customer."No.");

      // [WHEN] Get shipment lines for "SI".
      GetShipmentLinesForSalesInvoice(SalesHeaderInvoice,SalesHeaderOrder."No.");

      // [THEN] "Inv. Discount Amount" is calculated on "SI" line.
      FindSalesLine(SalesLineInvoice,SalesHeaderInvoice."Document Type",SalesHeaderInvoice."No.",SalesLineInvoice.Type::Item);
      Assert.AreNearlyEqual(
        SalesLineInvoice.Quantity * SalesLineInvoice."Unit Price" * CustInvoiceDisc."Discount %" / 100,
        SalesLineInvoice."Inv. Discount Amount",LibraryERM.GetAmountRoundingPrecision,InvDiscAmtInSalesInvErr);

      // [THEN] "SI" has one service charge line with Amount = "Y" LCY.
      VerifySalesLineWithServiceCharge(SalesHeaderInvoice,CustInvoiceDisc."Service Charge");
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE GetPostedDocLinesFromSalesShipmentWithAutoExtText@121();
    VAR
      SalesHeader@1003 : Record 36;
      SalesHeaderRet@1006 : Record 36;
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Sales Shipment using 'Get Posted Document Lines to Reverse' with Auto Ext Text
      Initialize;

      // [GIVEN] Sales order for Item with extended text is shipped.
      CreatePostSalesDocWithAutoExtText(SalesHeader,SalesHeader."Document Type"::Order,FALSE);

      // [GIVEN] Sales Return Order is created.
      LibrarySales.CreateSalesHeader(SalesHeaderRet,SalesHeaderRet."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");

      // [WHEN] Run 'Get Posted Document Lines to Reverse' for posted shipment
      GetPostedDocLinesToReverse(SalesHeaderRet,OptionString::PostedShipments);

      // [THEN] Extended Text Line exits for Sales Return Order attached to item line
      VerifySalesLineDescriptionLineExists(SalesHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE GetPostedDocLinesFromSalesInvoiceWithAutoExtText@129();
    VAR
      SalesHeader@1003 : Record 36;
      SalesHeaderRet@1006 : Record 36;
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Sales Invoice using 'Get Posted Document Lines to Reverse' with Auto Ext Text
      Initialize;

      // [GIVEN] Sales order for Item with extended text is shipped and invoiced.
      CreatePostSalesDocWithAutoExtText(SalesHeader,SalesHeader."Document Type"::Order,TRUE);

      // [GIVEN] Sales Return Order for customer is created.
      LibrarySales.CreateSalesHeader(SalesHeaderRet,SalesHeaderRet."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");

      // [WHEN] Get Posted Doc Lines To Reverse for posted invoice
      GetPostedDocLinesToReverse(SalesHeaderRet,OptionString::PostedInvoices);

      // [THEN] Extended Text Line exits for Sales Return Order attached to item line
      VerifySalesLineDescriptionLineExists(SalesHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE GetPostedDocLinesFromSalesRetOrderWithAutoExtText@135();
    VAR
      SalesHeader@1003 : Record 36;
      SalesHeaderRet@1006 : Record 36;
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Sales Return Order using 'Get Posted Document Lines to Reverse' with Auto Ext Text
      Initialize;

      // [GIVEN] Posted Sales return order for Item with extended text.
      CreatePostSalesDocWithAutoExtText(SalesHeader,SalesHeader."Document Type"::"Return Order",FALSE);

      // [GIVEN] Sales Return Order is created.
      LibrarySales.CreateSalesHeader(SalesHeaderRet,SalesHeaderRet."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");

      // [WHEN] Run 'Get Posted Document Lines to Reverse' for posted return receipt
      GetPostedDocLinesToReverse(SalesHeaderRet,OptionString::PostedReturnReceipt);

      // [THEN] Extended Text Line exits for Sales Return Order attached to item line
      VerifySalesLineDescriptionLineExists(SalesHeaderRet);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE GetPostedDocLinesFromSalesCrMemoWithAutoExtText@131();
    VAR
      SalesHeader@1003 : Record 36;
      SalesHeaderRet@1006 : Record 36;
    BEGIN
      // [FEATURE] [Extended Text]
      // [SCENARIO 215215] Extended Text Line is copied from Posted Credit Memo using 'Get Posted Document Lines to Reverse' with Auto Ext Text
      Initialize;

      // [GIVEN] Posted Sales credit memo for Item with extended text.
      CreatePostSalesDocWithAutoExtText(SalesHeader,SalesHeader."Document Type"::"Credit Memo",TRUE);

      // [GIVEN] Sales Return Order for customer is created.
      LibrarySales.CreateSalesHeader(SalesHeaderRet,SalesHeaderRet."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");

      // [WHEN] Get Posted Doc Lines To Reverse for posted credit memo
      GetPostedDocLinesToReverse(SalesHeaderRet,OptionString::PostedCrMemo);

      // [THEN] Extended Text Line exits for Sales Return Order attached to item line
      VerifySalesLineDescriptionLineExists(SalesHeaderRet);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePostSalesDocWithGLDescriptionLine@111(VAR SalesHeader@1001 : Record 36;VAR Description@1005 : Text[50];DocumentType@1002 : Option);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandIntInRange(2,5));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type,SalesLine."No.",0);
      SalesLine.VALIDATE("No.",'');
      SalesLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      SalesLine.MODIFY;
      Description := SalesLine.Description;
    END;

    LOCAL PROCEDURE CreateAndArchiveSalesOrderWithRespCenter@128(CustomerNo@1000 : Code[20];RespCenterCode@1001 : Code[10]);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      ArchiveManagement@1003 : Codeunit 5063;
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,CustomerNo,SalesLine.Type::Item,LibraryInventory.CreateItemNo);
      SalesHeader.VALIDATE("Responsibility Center",RespCenterCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesRetOrder@156(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]);
    VAR
      SalesLine@1005 : Record 37;
      OptionString@1002 : 'PostedReturnReceipt,PostedInvoices';
    BEGIN
      // Create Sales Return Order and Get Posted Invoice Line to Reverse and update Apply from Item Entry.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      GetPostedInvoiceLines(SalesHeader."No.",OptionString::PostedInvoices);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::Item);
      SalesLine.VALIDATE("Appl.-from Item Entry",0);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Use Random value for Unit Price.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCreditMemo@57(VAR SalesHeader@1002 : Record 36;No@1005 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");
      CreateCrMemoLnWithGetRetRcptLn(SalesHeader,No);
    END;

    LOCAL PROCEDURE CreateCrMemoLnWithGetRetRcptLn@106(SalesHeader@1004 : Record 36;No@1002 : Code[20]);
    VAR
      ReturnReceiptLine@1001 : Record 6661;
      SalesGetReturnReceipts@1000 : Codeunit 6638;
    BEGIN
      SalesGetReturnReceipts.SetSalesHeader(SalesHeader);
      ReturnReceiptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      ReturnReceiptLine.SETRANGE("No.",No);
      ReturnReceiptLine.FINDFIRST;
      SalesGetReturnReceipts.CreateInvLines(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE CreateInvDiscountForCustomer@141(VAR CustInvoiceDisc@1000 : Record 19;CustomerNo@1001 : Code[20]);
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDecInDecimalRange(10,20,2));
      CustInvoiceDisc.VALIDATE("Service Charge",LibraryRandom.RandDecInDecimalRange(10,20,2));
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndExtendedText@48(AutoExtText@1001 : Boolean) : Code[20];
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
      Item@1000 : Record 27;
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,LibraryInventory.CreateItemNo);
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,ExtendedTextHeader."No.");
      ExtendedTextLine.MODIFY(TRUE);
      Item.GET(ExtendedTextHeader."No.");
      Item.VALIDATE("Automatic Ext. Texts",AutoExtText);
      Item.MODIFY(TRUE);
      EXIT(ExtendedTextHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@47() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateResponsibilityCenterAndUserSetup@24() : Code[10];
    VAR
      Location@1005 : Record 14;
      UserSetup@1000 : Record 91;
      ResponsibilityCenter@1001 : Record 5714;
    BEGIN
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      ResponsibilityCenter.VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      ResponsibilityCenter.MODIFY(TRUE);
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY(TRUE);
      EXIT(ResponsibilityCenter.Code);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithItem@75(VAR SalesHeader@1001 : Record 36;DocumentType@1004 : Option);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,DocumentType,LibrarySales.CreateCustomerNo,SalesLine.Type::Item,LibraryInventory.CreateItemNo);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithGL@82(VAR SalesHeader@1001 : Record 36;DocumentType@1004 : Option);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,DocumentType,LibrarySales.CreateCustomerNo,
        SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
    END;

    LOCAL PROCEDURE CreateSalesDocumentItem@91(VAR SalesHeader@1001 : Record 36;DocumentType@1004 : Option;ItemNo@1003 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,DocumentType,LibrarySales.CreateCustomerNo,SalesLine.Type::Item,ItemNo);
    END;

    LOCAL PROCEDURE CreateSalesDocumentGL@87(VAR SalesHeader@1001 : Record 36;DocumentType@1004 : Option;GLAccountNo@1002 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,DocumentType,LibrarySales.CreateCustomerNo,SalesLine.Type::"G/L Account",GLAccountNo);
    END;

    LOCAL PROCEDURE CreateSalesDocument@71(VAR SalesHeader@1001 : Record 36;DocumentType@1004 : Option;CustomerNo@1005 : Code[20];Type@1002 : Option;No@1003 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandIntInRange(10,20));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(1000,2000));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineWithItem@194(VAR Item@1000 : Record 27;SalesHeader@1001 : Record 36;QtyToShip@1002 : Decimal;VATProdPostingGroup@1004 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(
        Item,LibraryRandom.RandInt(100),LibraryRandom.RandInt(100));
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10) + QtyToShip);
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesExtLine@174(SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      TransferExtendedText@1000 : Codeunit 378;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithSeveralItemsAndCalcInvDiscount@152(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1003 : Record 37;CustomerNo@1000 : Code[20];ItemNos@1009 : ARRAY [10] OF Code[20];NoOfLines@1001 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      FOR i := 1 TO NoOfLines DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNos[i],LibraryRandom.RandInt(10));
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        SalesLine.MODIFY(TRUE);
      END;
      SalesHeader.CalcInvDiscForHeader;
    END;

    LOCAL PROCEDURE CreatePostSalesDocWithGL@69(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;Invoice@1002 : Boolean) : Code[20];
    BEGIN
      CreateSalesDocumentGL(SalesHeader,DocumentType,LibraryERM.CreateGLAccountWithSalesSetup);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice));
    END;

    LOCAL PROCEDURE CreatePostSalesDoc@138(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;GLAccountNo@1003 : Code[20];Invoice@1002 : Boolean) : Code[20];
    BEGIN
      CreateSalesDocumentGL(SalesHeader,DocumentType,GLAccountNo);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice));
    END;

    LOCAL PROCEDURE CreatePostSalesDocWithAutoExtText@159(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option;PostInvoice@1002 : Boolean);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,DocumentType,LibrarySales.CreateCustomerNo,
        SalesLine.Type::Item,CreateItemAndExtendedText(TRUE));
      CreateSalesExtLine(SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,PostInvoice);
    END;

    LOCAL PROCEDURE CreateCustomerWithPostCodeAndCity@90(VAR Customer@1000 : Record 18);
    VAR
      PostCode@1001 : Record 225;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Post Code",PostCode.Code);
      Customer.VALIDATE(City,PostCode.City);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostCode@2(VAR PostCode@1002 : Record 225;Code@1000 : Code[20]);
    BEGIN
      PostCode.INIT;
      PostCode.VALIDATE(Code,Code);
      PostCode.VALIDATE(
        City,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PostCode.FIELDNO(City),DATABASE::"Post Code"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Post Code",PostCode.FIELDNO(City))));
      PostCode.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateRetReasonCode@63() : Code[10];
    VAR
      ReturnReason@1000 : Record 6635;
    BEGIN
      LibraryERM.CreateReturnReasonCode(ReturnReason);
      EXIT(ReturnReason.Code);
    END;

    LOCAL PROCEDURE CreateCityForPostCode@5(VAR PostCode@1002 : Record 225;City@1000 : Text[30]);
    BEGIN
      PostCode.INIT;
      PostCode.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PostCode.FIELDNO(Code),DATABASE::"Post Code"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Post Code",PostCode.FIELDNO(Code))));
      PostCode.VALIDATE(City,City);
      PostCode.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateShipmentsAndSalesInvoice@12(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      CustomerNo@1002 : Code[20];
    BEGIN
      CreateSalesDocumentWithItem(SalesHeader,SalesHeader."Document Type"::Order);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      CustomerNo := SalesHeader."Sell-to Customer No.";
      CreateSalesDocumentWithItem(SalesHeader,SalesHeader."Document Type"::Order);
      SalesHeader.VALIDATE("Bill-to Customer No.",CustomerNo);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateTrackedItem@43() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateVATPostingSetupWithCertificateOfSupply@195(VAR VATPostingSetup@1000 : Record 325);
    VAR
      VATBusinessPostingGroup@1001 : Record 323;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      VATPostingSetup.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
      VATPostingSetup.VALIDATE("Certificate of Supply Required",TRUE);
      VATPostingSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE MockSalesInvoiceLine@112(DocumentNo@1001 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        "Document Type" := "Document Type"::Invoice;
        "Document No." := DocumentNo;
        "Line No." := 10000; // Value is important for test
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesLine@123(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      WITH SalesLine DO BEGIN
        "Document Type" := SalesHeader."Document Type";
        "Document No." := SalesHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(SalesLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InitSalesLine@315(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option);
    BEGIN
      WITH SalesLine DO BEGIN
        INIT;
        "Document Type" := DocumentType;
        "Document No." := LibraryUtility.GenerateGUID;
        "Line No." := LibraryRandom.RandIntInRange(1000,2000);
        Type := Type::Item;
        "No." := '';
        Description := LibraryUtility.GenerateGUID;
        Quantity := LibraryRandom.RandDecInRange(300,400,2);
        "Qty. to Ship" := LibraryRandom.RandDecInRange(200,300,2);
        "Qty. to Ship (Base)" := LibraryRandom.RandDecInRange(200,300,2);
        "Qty. to Invoice" := LibraryRandom.RandDecInRange(100,200,2);
        "Qty. to Invoice (Base)" := LibraryRandom.RandDecInRange(100,200,2);
        "Return Qty. to Receive" := LibraryRandom.RandDecInRange(200,300,2);
        "Return Qty. to Receive (Base)" := LibraryRandom.RandDecInRange(200,300,2);
      END;
    END;

    LOCAL PROCEDURE ValidateSalesLineStandardCode@130(VAR SalesLine@1000 : Record 37;StandardTextCode@1001 : Code[20]);
    VAR
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      SalesLine.VALIDATE("No.",StandardTextCode);
      SalesLine.MODIFY(TRUE);
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE DeleteUserSetup@142(VAR UserSetup@1000 : Record 91;ResponsibilityCenterCode@1001 : Code[10]);
    BEGIN
      UserSetup.SETRANGE("Sales Resp. Ctr. Filter",ResponsibilityCenterCode);
      UserSetup.FINDFIRST;
      UserSetup.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindCity@4(Code@1000 : Code[20]) : Text[30];
    VAR
      PostCode@1001 : Record 225;
    BEGIN
      PostCode.SETRANGE(Code,Code);
      PostCode.FINDFIRST;
      EXIT(PostCode.City);
    END;

    LOCAL PROCEDURE FindCrMemoLine@39(VAR SalesCrMemoLine@1000 : Record 115;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETFILTER("No.",'<>%1','');
      SalesCrMemoLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLEntry@16(VAR GLEntry@1000 : Record 17;GLAccountNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostCode@3(City@1000 : Text[30]) : Code[20];
    VAR
      PostCode@1001 : Record 225;
    BEGIN
      PostCode.SETRANGE(City,City);
      PostCode.FINDFIRST;
      EXIT(PostCode.Code);
    END;

    LOCAL PROCEDURE FindRetRcptLine@41(VAR ReturnReceiptLine@1000 : Record 6661;DocumentNo@1001 : Code[20]);
    BEGIN
      ReturnReceiptLine.SETRANGE("Document No.",DocumentNo);
      ReturnReceiptLine.SETFILTER("No.",'<>%1','');
      ReturnReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@1(VAR SalesLine@1002 : Record 37;DocumentType@1000 : Option;DocumentNo@1001 : Code[20];Type@1003 : Option);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,Type);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterSalesCreditMemoLine@137(VAR SalesLine@1001 : Record 37;DocumentNo@1000 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::"Credit Memo");
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("No.",ItemNo);
      END;
    END;

    LOCAL PROCEDURE ModifyAndAddSalesLine@79(SalesHeader@1000 : Record 36;ZeroQtyToShip@1001 : Boolean);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDLAST;
        VALIDATE(Quantity,-Quantity);
        MODIFY;
        "Line No." += 10000;
        VALIDATE(Quantity,-Quantity * 2);
        IF ZeroQtyToShip THEN BEGIN
          INSERT;
          "Line No." += 10000;
          VALIDATE("Qty. to Ship",0);
        END ELSE
          VALIDATE("Qty. to Ship",Quantity / 2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ModifyReturnReasonCode@94(DocumentType@1004 : Option;DocumentNo@1003 : Code[20];ReturnReasonCode@1001 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,DocumentType,DocumentNo,SalesLine.Type::Item);
      SalesLine.VALIDATE("Return Reason Code",ReturnReasonCode);
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE ModifySalesLine@95(DocumentType@1001 : Option;DocumentNo@1000 : Code[20];LineType@1006 : Option;NewQuantity@1003 : Decimal;NewUnitPrice@1004 : Decimal;NewLineDiscountAmt@1005 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,DocumentType,DocumentNo,LineType);
      WITH SalesLine DO BEGIN
        VALIDATE(Quantity,NewQuantity);
        VALIDATE("Unit Price",NewUnitPrice);
        VALIDATE("Line Discount Amount",NewLineDiscountAmt);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetPostedDocumentLines@40(No@1000 : Code[20];OptionString@1002 : Option);
    VAR
      SalesCreditMemo@1001 : TestPage 44;
    BEGIN
      LibraryVariableStorage.Enqueue(OptionString);
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",No);
      SalesCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedInvoiceLines@136(No@1000 : Code[20];OptionString@1002 : Option);
    VAR
      SalesReturnOrder@1001 : TestPage 6630;
    BEGIN
      LibraryVariableStorage.Enqueue(OptionString);
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",No);
      SalesReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedDocLinesToReverse@160(VAR SalesHeader@1003 : Record 36;OptionString@1002 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(OptionString);
      SalesHeader.GetPstdDocLinesToRevere;
    END;

    LOCAL PROCEDURE GetReturnReceipt@104(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      CODEUNIT.RUN(CODEUNIT::"Sales-Get Return Receipts",SalesLine);
      SalesLine.DELETE;  // Delete Older Sales Line.
    END;

    LOCAL PROCEDURE GetShipmentLinesForSalesInvoice@133(VAR SalesHeader@1003 : Record 36;SalesOrderNo@1001 : Code[20]);
    VAR
      SalesShipmentHeader@1004 : Record 110;
      SalesShipmentLine@1002 : Record 111;
      SalesGetShipment@1000 : Codeunit 64;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",SalesOrderNo);
      SalesShipmentHeader.FINDFIRST;
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesGetShipment.SetSalesHeader(SalesHeader);
      SalesGetShipment.CreateInvLines(SalesShipmentLine);
    END;

    LOCAL PROCEDURE PartiallyPostSalesOrder@100(VAR SalesHeader@1011 : Record 36);
    VAR
      Customer@1000 : Record 18;
      CustomerNo@1004 : Code[20];
    BEGIN
      // Create and Ship two Sales Orders using same Customer and create Sales Invoice.
      LibrarySales.CreateCustomer(Customer);
      CustomerNo := Customer."No.";

      PartiallyShipSalesDocument(SalesHeader,CustomerNo);
      LibraryVariableStorage.Enqueue(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));

      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeader."No.");
      LibraryVariableStorage.Enqueue(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);

      // Open created Sales Invoice page and do Get Shipment Line.
      OpenSalesInvoiceAndGetShipmentLine(SalesHeader."No.");
    END;

    LOCAL PROCEDURE OpenSalesInvoiceAndGetShipmentLine@62(No@1000 : Code[20]);
    VAR
      SalesInvoice@1001 : TestPage 43;
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",No);
      SalesInvoice.SalesLines.GetShipmentLines.INVOKE;
    END;

    LOCAL PROCEDURE PartiallyShipSalesDocument@80(VAR SalesHeader@1000 : Record 36;SellToCustomerNo@1004 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      // Create Sales Document using Random Quantity and Unit Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,SellToCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandDec(10,2));  // Taking Random values for Quantity.
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Taking Random values for Unit Price.
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2); // Taking here 2 because value is important.
      SalesLine.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(SalesLine."Qty. to Ship");
    END;

    LOCAL PROCEDURE FilterQuantityOnGetShipmentLines@17(VAR GetShipmentLines@1000 : TestPage 5708;DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      GetShipmentLines.FILTER.SETFILTER("Document No.",DocumentNo);
      GetShipmentLines.FILTER.SETFILTER(Quantity,FORMAT(Quantity));
      GetShipmentLines.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE ModifyCustomerCity@89(CustomerNo@1000 : Code[20];City@1001 : Text[30]) : Code[20];
    VAR
      CustomerCard@1002 : TestPage 21;
    BEGIN
      COMMIT;
      CustomerCard.OPENEDIT;
      CustomerCard.FILTER.SETFILTER("No.",CustomerNo);
      CustomerCard.City.SETVALUE(City);
      CustomerCard."Phone No.".ACTIVATE;
      CustomerCard.OK.INVOKE;
      EXIT(CustomerNo);
    END;

    LOCAL PROCEDURE ModifyCustomerPostCode@85(CustomerNo@1000 : Code[20];PostCode@1001 : Code[20]) : Code[20];
    VAR
      CustomerCard@1002 : TestPage 21;
    BEGIN
      COMMIT;
      CustomerCard.OPENEDIT;
      CustomerCard.FILTER.SETFILTER("No.",CustomerNo);
      CustomerCard."Post Code".SETVALUE(PostCode);
      CustomerCard."Phone No.".ACTIVATE;
      CustomerCard.OK.INVOKE;
      EXIT(CustomerNo);
    END;

    LOCAL PROCEDURE OpenSalesPricesPage@119(SalesPrices@1000 : TestPage 7002;CustomerNo@1002 : Code[20];StartingDateFilter@1003 : Text[30]);
    VAR
      CustomerList@1001 : TestPage 22;
    BEGIN
      CustomerList.OPENEDIT;
      CustomerList.FILTER.SETFILTER("No.",CustomerNo);
      SalesPrices.TRAP;
      CustomerList.Sales_Prices.INVOKE;
      SalesPrices.StartingDateFilter.SETVALUE(StartingDateFilter);
    END;

    LOCAL PROCEDURE RunCertificateOfSupplyReport@114(CustomerNo@1000 : Code[20]);
    VAR
      CertificateOfSupply@1001 : Record 780;
    BEGIN
      CertificateOfSupply.INIT;
      CertificateOfSupply.SETRANGE("Document Type",CertificateOfSupply."Document Type"::"Sales Shipment");
      CertificateOfSupply.SETRANGE("Customer/Vendor No.",CustomerNo);
      REPORT.RUN(REPORT::"Certificate of Supply",TRUE,FALSE,CertificateOfSupply);
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerVATSetup@13(VATRoundingType@1001 : Option) OldVATRoundingType : Integer;
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      // Update VAT Rounding Type in General Ledger Setup.
      GeneralLedgerSetup.GET;
      OldVATRoundingType := GeneralLedgerSetup."VAT Rounding Type";
      GeneralLedgerSetup.VALIDATE("VAT Rounding Type",VATRoundingType);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUserSetupSalesRespCtrFilter@113(VAR UserSetup@1000 : Record 91;SalesRespCtrFilter@1001 : Code[10]) OldSalesRespCtrFilter : Code[10];
    BEGIN
      OldSalesRespCtrFilter := UserSetup."Sales Resp. Ctr. Filter";
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",SalesRespCtrFilter);
      UserSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesSetup@115(ReturnReceiptonCreditMemo@1001 : Boolean;ExactCostReversingMandatory@1002 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Return Receipt on Credit Memo",ReturnReceiptonCreditMemo);
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCreditMemo@38(DocumentNo@1000 : Code[20];ReturnOrderNo@1002 : Code[20];ReturnOrderNoSeries@1003 : Code[10];ReturnReasonCode@1005 : Code[10]);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
      SalesCrMemoLine@1004 : Record 115;
    BEGIN
      SalesCrMemoHeader.GET(DocumentNo);
      SalesCrMemoHeader.TESTFIELD("Return Order No.",ReturnOrderNo);
      SalesCrMemoHeader.TESTFIELD("Return Order No. Series",ReturnOrderNoSeries);
      FindCrMemoLine(SalesCrMemoLine,DocumentNo);
      SalesCrMemoLine.TESTFIELD("Return Reason Code",ReturnReasonCode);
    END;

    LOCAL PROCEDURE VerifyCustomerData@81(Customer@1002 : Record 18;PostCode@1000 : Code[20];City@1001 : Text[30]);
    BEGIN
      Customer.TESTFIELD("Post Code",PostCode);
      Customer.TESTFIELD(City,City);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@50(ItemNo@1003 : Code[20];DocumentNo@1002 : Code[20];ReturnReasonCode@1001 : Code[10]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Return Reason Code",ReturnReasonCode);
    END;

    LOCAL PROCEDURE VerifyGLEntry@19(DocumentNo@1001 : Code[20];GLAccountNo@1003 : Code[20];Amount@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLAccountNo,DocumentNo);
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntryForPostedInvoice@44(DocumentNo@1000 : Code[20];DocumentType@1005 : Option;Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,TotalGLAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),GLEntry.Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyReturnReceipt@37(DocumentNo@1000 : Code[20];ReturnOrderNo@1002 : Code[20];ReturnOrderNoSeries@1003 : Code[10];ReturnReasonCode@1005 : Code[10]);
    VAR
      ReturnReceiptHeader@1001 : Record 6660;
      ReturnReceiptLine@1004 : Record 6661;
    BEGIN
      ReturnReceiptHeader.GET(DocumentNo);
      ReturnReceiptHeader.TESTFIELD("Return Order No.",ReturnOrderNo);
      ReturnReceiptHeader.TESTFIELD("Return Order No. Series",ReturnOrderNoSeries);
      FindRetRcptLine(ReturnReceiptLine,DocumentNo);
      ReturnReceiptLine.TESTFIELD("Return Reason Code",ReturnReasonCode);
    END;

    LOCAL PROCEDURE VerifyValueEntry@51(DocumentNo@1001 : Code[20];ReturnReasonCode@1002 : Code[10]);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Return Reason Code",ReturnReasonCode);
    END;

    LOCAL PROCEDURE VerifyVATAmountOnGLEntry@20(GLAccountNo@1003 : Code[20];DocumentNo@1001 : Code[20];VATAmount@1000 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLAccountNo,DocumentNo);
      GLEntry.TESTFIELD("VAT Amount",VATAmount);
    END;

    LOCAL PROCEDURE VerifySalesInvDescriptionLineExists@127(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummySalesInvoiceLine@1000 : Record 113;
    BEGIN
      WITH DummySalesInvoiceLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummySalesInvoiceLine);
      END;
    END;

    LOCAL PROCEDURE VerifySalesShptDescriptionLineExists@126(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummySalesShipmentLine@1000 : Record 111;
    BEGIN
      WITH DummySalesShipmentLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummySalesShipmentLine);
      END;
    END;

    LOCAL PROCEDURE VerifySalesCrMemoDescriptionLineExists@125(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummySalesCrMemoLine@1000 : Record 115;
    BEGIN
      WITH DummySalesCrMemoLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummySalesCrMemoLine);
      END;
    END;

    LOCAL PROCEDURE VerifySalesRetRcptDescriptionLineExists@124(DocumentNo@1001 : Code[20];ExpectedDescription@1004 : Text[50]);
    VAR
      DummyReturnReceiptLine@1000 : Record 6661;
    BEGIN
      WITH DummyReturnReceiptLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyReturnReceiptLine);
      END;
    END;

    LOCAL PROCEDURE VerifySalesLineCount@149(SalesHeader@1000 : Record 36;ExpectedCount@1001 : Integer);
    VAR
      DummySalesLine@1002 : Record 37;
    BEGIN
      DummySalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      DummySalesLine.SETRANGE("Document No.",SalesHeader."No.");
      Assert.RecordCount(DummySalesLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifySalesLineDescription@153(SalesLine@1000 : Record 37;ExpectedType@1002 : Option;ExpectedNo@1001 : Code[20];ExpectedDescription@1003 : Text);
    BEGIN
      WITH SalesLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    LOCAL PROCEDURE VerifySalesInvoiceLinesAgainstSalesOrderLines@164(SalesHeaderOrder@1001 : Record 36;SalesHeaderInvoice@1002 : Record 36;NoOfLines@1000 : Integer);
    VAR
      SalesLineOrder@1003 : Record 37;
      SalesLineInvoice@1004 : Record 37;
      i@1005 : Integer;
    BEGIN
      FindSalesLine(SalesLineOrder,SalesHeaderOrder."Document Type",SalesHeaderOrder."No.",SalesLineOrder.Type::Item);
      FindSalesLine(SalesLineInvoice,SalesHeaderInvoice."Document Type",SalesHeaderInvoice."No.",SalesLineInvoice.Type::Item);
      FOR i := 1 TO NoOfLines DO BEGIN
        SalesLineInvoice.TESTFIELD("No.",SalesLineOrder."No.");
        SalesLineInvoice.TESTFIELD("Inv. Discount Amount",SalesLineOrder."Inv. Discount Amount");
        SalesLineInvoice.TESTFIELD(Amount,SalesLineOrder.Amount);
        SalesLineInvoice.NEXT;
        SalesLineOrder.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifySalesLineWithServiceCharge@167(SalesHeader@1001 : Record 36;ServiceChargeAmt@1003 : Decimal);
    VAR
      CustomerPostingGroup@1000 : Record 92;
      SalesLine@1002 : Record 37;
    BEGIN
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",SalesLine.Type::"G/L Account");
      Assert.RecordCount(SalesLine,1);
      SalesLine.TESTFIELD("No.",CustomerPostingGroup."Service Charge Acc.");
      SalesLine.TESTFIELD(Amount,ServiceChargeAmt - SalesLine."Inv. Discount Amount");
    END;

    LOCAL PROCEDURE VerifySalesLineDescriptionLineExists@117(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
      SalesLine.SETRANGE("Attached to Line No.",SalesLine."Line No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    LOCAL PROCEDURE SalesDocLineQtyValidation@65(DocType@1000 : Integer);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1004 : Record 14;
      LibraryWarehouse@1002 : Codeunit 132204;
      SalesInvoice@1009 : TestPage 43;
      SalesCreditMemo@1006 : TestPage 44;
      i@1003 : Integer;
    BEGIN
      // DocType: 2 = Invoice, 3 = Credit Memo
      // SETUP:
      LibraryWarehouse.CreateFullWMSLocation(Location,3);
      SalesHeader.INIT;
      SalesHeader."Document Type" := DocType;
      SalesHeader.Status := SalesHeader.Status::Open;
      i := 0;
      REPEAT
        i += 1;
        SalesHeader."No." := 'TEST' + FORMAT(i);
      UNTIL SalesHeader.INSERT;
      SalesLine."Document Type" := DocType;
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := 10000;
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := LibraryInventory.CreateItemNo;
      SalesLine."Location Code" := Location.Code;
      SalesLine.INSERT;
      CASE DocType OF
        2:  // Invoice
          BEGIN
            SalesInvoice.OPENEDIT;
            SalesInvoice.GOTORECORD(SalesHeader);
            // EXECUTE:
            SalesInvoice.SalesLines.Quantity.SETVALUE(100);
          END;
        3:  // Invoice
          BEGIN
            SalesCreditMemo.OPENEDIT;
            SalesCreditMemo.GOTORECORD(SalesHeader);
            // EXECUTE:
            SalesCreditMemo.SalesLines.Quantity.SETVALUE(100);
          END;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PostCodesHandler@93(VAR PostCodes@1000 : TestPage 367);
    VAR
      Customer@1003 : Record 18;
      Filter@1001 : Text;
      FieldNo@1002 : Integer;
    BEGIN
      FieldNo := LibraryVariableStorage.DequeueInteger;
      Filter := LibraryVariableStorage.DequeueText;

      IF FieldNo = Customer.FIELDNO("Post Code") THEN
        PostCodes.FILTER.SETFILTER(Code,FORMAT(Filter))
      ELSE
        PostCodes.FILTER.SETFILTER(City,FORMAT(Filter));
      PostCodes.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@15(Message@1000 : Text[1024];VAR Response@1001 : Boolean);
    BEGIN
      Response := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesHandler@58(VAR GetShipmentLines@1001 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityOnGetShipmentLinesPageHandler@86(VAR GetShipmentLines@1000 : TestPage 5708);
    VAR
      DocumentNo@1001 : Code[20];
      DocumentNo2@1002 : Code[20];
      QtyToShip@1003 : Decimal;
    BEGIN
      QtyToShip := LibraryVariableStorage.DequeueDecimal;
      DocumentNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(DocumentNo));
      DocumentNo2 := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(DocumentNo2));

      // Verification for both lines filtering in the Get Shipment Lines page which is partially posted Sales Order for same Customer.
      FilterQuantityOnGetShipmentLines(GetShipmentLines,DocumentNo,QtyToShip);
      FilterQuantityOnGetShipmentLines(GetShipmentLines,DocumentNo2,QtyToShip);
    END;

    [ModalPageHandler]
    PROCEDURE QuantityFilterUsingGetShipmentLinesPageHandler@9(VAR GetShipmentLines@1000 : TestPage 5708);
    VAR
      DocumentNo@1001 : Code[20];
      QtyToShip@1002 : Decimal;
    BEGIN
      QtyToShip := LibraryVariableStorage.DequeueDecimal;
      DocumentNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(DocumentNo));

      // Verification for filter in the Get Shipment Lines page according to Quantity.
      FilterQuantityOnGetShipmentLines(GetShipmentLines,DocumentNo,QtyToShip);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@49(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Lot No.".INVOKE;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InvokeGetShipmentLinesPageHandler@84(VAR GetShipmentLines@1000 : TestPage 5708);
    VAR
      DocumentNo@1001 : Code[20];
      QtyToShip@1002 : Decimal;
    BEGIN
      QtyToShip := LibraryVariableStorage.DequeueDecimal;
      DocumentNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(DocumentNo));

      FilterQuantityOnGetShipmentLines(GetShipmentLines,DocumentNo,QtyToShip);
      GetShipmentLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesHandler@26(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      DocumentType@1003 : 'Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos';
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        OptionString::PostedReturnReceipt:
          PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(DocumentType::"Posted Return Receipts"));
        OptionString::PostedInvoices:
          PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(DocumentType::"Posted Invoices"));
        OptionString::PostedShipments:
          PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(DocumentType::"Posted Shipments"));
        OptionString::PostedCrMemo:
          PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(DocumentType::"Posted Cr. Memos"));
      END;
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE RetRcptLinesPageHandler@88(VAR GetReturnReceiptLines@1000 : TestPage 6638);
    BEGIN
      GetReturnReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWarningHandler@54(VAR CheckAvailability@1000 : Page 342;VAR Reply@1001 : Action);
    BEGIN
      Reply := ACTION::Yes;
    END;

    [RequestPageHandler]
    PROCEDURE CertificateofSupplyRequestPageHandler@182(VAR CertificateOfSupply@1000 : TestRequestPage 780);
    BEGIN
      CertificateOfSupply.PrintLineDetails.SETVALUE(TRUE);
      CertificateOfSupply.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Sales]
      1. Verify Post Code can be edited in Customer by page.
      2. Verify City can be edited in Customer by page.
      3. Verify that system ask for City options when we edit Post Code if 2 similar values for Post Code exists.
      4. Verify that system ask for Post Code options when we edit City if 2 similar values for City exists.
      5. Verify that a Customer can be deleted.
      6. Check Responsibility Center on Sales Order.
      7. Check Responsibility Center on Posted Sales Document.
      8. Verify Shipments on Get Shipment Lines page filtered according to Sell to Customer No. on Sales Invoice.
      9. Verify the GL Entries when posting the Sales Invoice after Get Shipment Lines.
      10. Verify Get Shipment Lines page having lines are filtered according to Sales Order.
      11. Verify Filter on Get Shipment Lines page filtered according to Quantity.
      12. Verify G/L Entry for partially Posted Sales Invoice after Get Shipment Lines on Sales Invoice.
      13. Verify G/L Entry for VAT Amount after Posting Sales Invoice.
      14. Verify G/L Entry for VAT amount after posting Sales Credit Memo using Get Posted Document Lines to Reverse against posting of Purchase Return Order as Receive.
      15. Verify that Unit Amount field gets updated from the Unit Price value on item Card instead of Unit Cost when Entry Type=Sales.
      16. Verify that correct date gets updated on Sales Price window in "Starting Date Filter" field when user enters W.
      17. Verify that correct date gets updated on Sales Price window in "Starting Date Filter" field when user enters T.
      18. Verify Error while delete Posted Sales Return Receipt without print the Document.
      19. Verify Error while delete Posted Sales Credit Memo without print the Document.
      20. Verify Return Reason Code on Return Receipt, Credit Memo, Item Ledger and Value Entry.
      21. Verify blank Return Reason Code on Return Receipt, Credit Memo, Item Ledger and Value Entry.
      22. Verify Error while Get Return Receipt No. after create Credit Memo without Return Receipt on Credit Memo.
      23. Verify Posting Nos on Sales Return Order Header after partial posting.
      24. Verify error while update Qty. to Invoice more than Return Receipt Quantity on Credit Memo Line.
      25. Verify Error on deleting Customer with Outstanding Sales Returns.
      26. Verify Error on deleting Item with Outstanding Sales Returns.
      27. Verify Error while changing Sales Return Order Header information after posting it as Receive.
      28. Verify Error while deleting Sales Return Order Header After Posting it as Receive.
      29. Verify Error while changing Sales Return Order Header Information After Reopen Received Sales Returns.
      30. Verify Error while deleting Sales Return Order Header After Reopen Received Sales Returns.
      31. Verify Error while changing Return Order Line Type field.
      32. Verify Error while changing Return Order Line Item No field.
      33. Verify Error while deleting Sales Return Order Line of Received Sales Returns.
      34. Verify Error while changing Return Order line "Return Qty. to Receive" field.
      35. Verify Error while changing Credit Memo Header Information created by Get Return Receipt Lines.
      36. Verify Error while changing Credit Memo Line Type field created by Get Return Receipt Line.
      37. Verify Credit Memo line After regenerate it by Get Return Receipt Line.
      38. Verify Error while changing Credit Memo Line Quantity sign created by Get Return Receipt Line.
      39. Verify Error while changing Credit Memo Line Quantity more than Return Receipt Quantity created by Get Return Receipt Line.
      40. Verify GL Entries after Post Sales Return Order (with IT) without Alpply from Item Entry after Get Posted Invoice Line to Reverse.
      41. Verify Error while applying Explode BOM on Credit Memo created by Get Return Receipt Line.
      42. Verify Extended Text in Sales Return Order with Extended Text Line of Item.
      43. Verify error when creating a sales invoice line for a WMS location (WHITE) and validating the quantity
      44. Verify error when creating a sales credit memo line for a WMS location (WHITE) and validating the quantity
      45. Verify error when partially shipping Sales Order with Complete Shipping Advice if it contains first line with negative quantities.
      46. Verify error when partially shipping Sales Order with Complete Shipping Advicewith first line negative and also a line with zero.

      Workitem ID: 265623
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CustomerCardEditPostCode                                                      131105
      CustomerCardEditCity                                                          131105
      CustomerEditPostCodeLookUp                                                    131105
      CustomerEditCityLookUp                                                        131105
      CustomerDelete                                                                131106

      Workitem ID: 243254
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ResponsibilityCenterOnSalesOrder,ResponsibilityCenterOnPostedSalesDocument    203169

      Workitem ID: 270754
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      GetShipmentLineOnSalesInvoice, GLEntriesAfterGetShipmentLine                  269537

      Workitem ID: 272899
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      GetShipmentLinesAfterPartialPosting, GetShipmentLineAfterPartialPostingWithQtyFilter
      PostSalesInvoiceAfterQuantityFilterOnGetShipmentLine                          267983

      Workitem ID: 273877
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      VATAmountOnPostedSalesInvoice,PostSalesCrMemoUsingGetPostedDocLines           271065

      Workitem ID: 282613
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      UnitAmountOnItemJournalLine                                                   278591
      StartingDateAsWorkDateOnSalesPrice,StartingDateAsTodayOnSalesPrice            279746

      Workitem ID: 315099
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ErrorOnDeletePostedSalesRetOrder, ErrorOnDeletePostedCreditMemo
      PostedDocWithRetReasonCode, PostedDocWithoutRetReasonCode
      ErrorOnGetRetRcptNoAfterCreateCrMemo, PartialPostingOfSalesRetOrder,
      ErrorOnUpdateGreaterQtytoInvOnCrMemo                                          128213

      Workitem ID: 314934
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DeleteCustomerWithOutstdSalesRetError, DeleteItemWithOutstdSalesRetError,
      ChangeSalesRetOrdHdrInfoAfterRcdError, DeleteSalesRetOrdHdrAfterRcdError,
      ChangeSalesRetOrdHdrInfoAfterReopenError, DeleteSalesRetOrdHdrAfterReopenError,
      ChangeRetOrdlnTypeError, ChangeRetOrdLnNoError, DeleteRcdRetOrdLnError,
      ChangeRetOrdLnRetQtyToReceiveError, ChangeCrMemoHdrInfoError,
      ChangeSalesCrMemoLnTypeError, RegenerateSalesCrMemoLnAfterDelete,
      ChangeSalesCrMemoLnQtyError, ChangeSalesCrMemoLnQtyMorethanRetRcptQtyError   128209

      Workitem ID: 315204
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      PostSalesRetOrderWithoutAppFromItemEntryWithIT                                238537

      Workitem ID: 315338
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ExplBOMOnSalesCrMemoError, ExtendedTextOnSalesRetOrd                          128209

      Workitem ID: 334921
      ------------------------------------------------------------------------------------
      Unit Test Function Name
      ------------------------------------------------------------------------------------
      CreateSalesInvoiceLineWhiteLocationQtyError
      CreateSalesCrMemoLineWhiteLocationQtyError

      Workitem ID: 353290
      ------------------------------------------------------------------------------------
      Unit Test Function Name
      ------------------------------------------------------------------------------------
      PartiallyPostSalesOrderWithCompleteShipmentAdviceError                        353290
      PartiallyPostSalesOrderWithCompleteShipmentAdviceErrorZero                    353290
    }
    END.
  }
}

