OBJECT Codeunit 137063 SCM Manufacturing 7.0
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ManufacturingSetup@1039 : Record 99000765;
      LocationBlue@1038 : Record 14;
      LocationGreen@1042 : Record 14;
      LocationInTransit@1041 : Record 14;
      ItemJournalTemplate@1025 : Record 82;
      ItemJournalBatch@1024 : Record 233;
      OutputItemJournalTemplate@1046 : Record 82;
      OutputItemJournalBatch@1045 : Record 233;
      CapacityItemJournalTemplate@1034 : Record 82;
      CapacityItemJournalBatch@1033 : Record 233;
      LibraryERM@1054 : Codeunit 131300;
      LibraryDimension@1011 : Codeunit 131001;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryItemTracking@1056 : Codeunit 130502;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibraryPlanning@1016 : Codeunit 132203;
      LibraryUtility@1015 : Codeunit 131000;
      ErrorDoNotMatchErr@1004 : TextConst '@@@={Locked};ENU=Expected error: ''%1''\Actual error: ''%2''';
      BlockedErr@1005 : TextConst 'ENU=Blocked must be equal to ''No''';
      LibraryPurchase@1028 : Codeunit 130512;
      LibrarySales@1029 : Codeunit 130509;
      LibraryWarehouse@1030 : Codeunit 132204;
      LibraryRandom@1020 : Codeunit 130440;
      DimensionErr@1021 : TextConst '@@@={Locked};ENU=Select Dimension Value Code %1 for the Dimension Code %2 for Work Center %3.';
      Assert@1003 : Codeunit 130000;
      LibraryVariableStorage@1049 : Codeunit 131004;
      NoSeriesMgt@1069 : Codeunit 396;
      Initialized@1001 : Boolean;
      PlanningLinesErr@1006 : TextConst 'ENU=Wrong number of Planning Lines.';
      ReservationEntriesErr@1010 : TextConst 'ENU=Wrong number of Reservation Entries.';
      UntrackedPlanningElementsErr@1012 : TextConst 'ENU=Wrong number of untracked planning elements.';
      ReorderPointTxt@1013 : TextConst 'ENU=Reorder Point';
      ReorderQuantityTxt@1014 : TextConst 'ENU=Reorder Quantity';
      LowLevelCodeQst@1007 : TextConst 'ENU=Calculate low-level code';
      RoutingStatusQst@1008 : TextConst 'ENU=then all related allocated capacity will be deleted';
      NumberOfLineErr@1009 : TextConst 'ENU=Number of line must be same.';
      StatusTxt@1017 : TextConst 'ENU=Status must be';
      CertifiedTxt@1022 : TextConst 'ENU=Certified';
      NoDimensionExpectedErr@1023 : TextConst 'ENU=No of dimensions expected.';
      DimensionValueErr@1027 : TextConst 'ENU=Dimension Value Code must be same.';
      ReleasedProdOrderTxt@1032 : TextConst 'ENU=Released Prod. Order';
      ItemUnitOfMeasureNotExistErr@1035 : TextConst 'ENU=The Item Unit of Measure does not exist.';
      ItemJournalLineErr@1036 : TextConst 'ENU=Wrong number of Item Journal Lines.';
      EffectiveCapacityErr@1037 : TextConst 'ENU=Effective Capacity must be match with Needed Time.';
      ErrorMsg@1040 : TextConst '@@@={Locked};ENU=No. of records are not equal in %1 and %2.';
      ItemTracking@1044 : 'None,AssignSerial,SelectSerial,VerifyValue';
      TrackingOption@1031 : 'AssignLotNo,SelectEntries';
      TrackingQuantity@1043 : Decimal;
      StartingDateTimeErr@1047 : TextConst 'ENU=Starting Date Time must be greater or equal';
      FinishedStatusQst@1048 : TextConst 'ENU=Some consumption is still missing. Do you still want to finish the order?';
      ModifyRtngErr@1051 : TextConst '@@@={Locked};ENU=You cannot modify Routing No. %1 because there is at least one %2 associated with it.';
      DeleteRtngErr@1050 : TextConst '@@@={Locked};ENU=You cannot delete Prod. Order Line %1 because there is at least one %2 associated with it.';
      ExpectedReceiptDateErr@1026 : TextConst 'ENU=The change leads to a date conflict with existing reservations.';
      WrongDueDateErr@1052 : TextConst 'ENU=Wrong Due Date.';
      DimensionValueOutputErr@1053 : TextConst '@@@={Locked};ENU=Dimension Value should be %1 in Output Journal Line';
      FieldErr@1154 : TextConst '@@@={Locked};ENU=Wrong %1 in %2';
      IncorrectQtyOnEndingDateErr@1164 : TextConst 'ENU=Incorrect Quantity planned for given Ending Date.';
      WrongVersionCodeErr@1018 : TextConst 'ENU=Wrong version code.';

    [Test]
    PROCEDURE B7419_RefreshPlanningLine@4();
    VAR
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1002 : Record 99000764;
      RequisitionLine@1003 : Record 246;
      ProductionBOMHeader@1008 : Record 99000771;
      ParentItem@1005 : Record 27;
      ChildItem@1004 : Record 27;
      RequisitionWkshName@1009 : Record 245;
      Direction@1011 : 'Forward,Backward';
      QuantityPer@1010 : Integer;
    BEGIN
      // Verify Planning Worksheet Routing No. after refreshing the Item on Requisition line and Run Refresh Planning Line.
      // Setup: Create Item Hierarchy and Routing setup.
      Initialize;
      QuantityPer := LibraryRandom.RandInt(10);
      CreateItemHierarchy(ProductionBOMHeader,ParentItem,ChildItem,QuantityPer);
      CreateAndCertifyRoutingSetup(RoutingHeader,RoutingLine);
      UpdateItem(ParentItem,ParentItem.FIELDNO("Routing No."),RoutingHeader."No.");
      UpdateItem(ParentItem,ParentItem.FIELDNO("Reordering Policy"),ParentItem."Reordering Policy"::"Lot-for-Lot");
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      UpdateRequisitionLine(RequisitionLine,ParentItem."No.");

      // Exercise: Refresh Planning Line.
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,Direction::Backward,TRUE,TRUE);

      // Verify: Verify Planning Routing Line with Details.
      VerifyPlanningRoutingLine(RoutingHeader,RequisitionWkshName,ChildItem."No.",QuantityPer);

      // Exercise: Update Requisition Line and Refresh Planning Line.
      RequisitionLine.GET(RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,10000);
      RequisitionLine.VALIDATE("No.",ParentItem."No.");
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.RefreshPlanningLine(RequisitionLine,Direction::Backward,TRUE,TRUE);

      // Verify: Verify Planning Routing Line with Details.
      VerifyPlanningRoutingLine(RoutingHeader,RequisitionWkshName,ChildItem."No.",QuantityPer);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE B7510_CalculateLowLevelCode@1();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ParentItem@1002 : Record 27;
      ChildItem@1000 : Record 27;
      GrandProductionBOMHeader@1008 : Record 99000771;
      GrandParentItem@1007 : Record 27;
    BEGIN
      // Verify Low level Code after changing status of Production BOM Version.
      // Setup: Create two level of Item Hierarchy.
      Initialize;
      CreateItemHierarchy(ProductionBOMHeader,ParentItem,ChildItem,LibraryRandom.RandInt(5));
      CreateItemHierarchy(GrandProductionBOMHeader,GrandParentItem,ParentItem,LibraryRandom.RandInt(5));
      LibraryVariableStorage.Enqueue(LowLevelCodeQst);  // Enqueue value for Confirm Handler.
      LibraryPlanning.CalculateLowLevelCode;

      // Exercise: Create Production BOM Version and change Status.
      CreateBOMVersionAndCertify(ProductionBOMHeader."No.",ParentItem."Base Unit of Measure");

      // Verify: Verify Low Level Code.
      VerifyBOMHeaderLLC(ProductionBOMHeader."No.",2);  // Value is important for Test.

      // Exercise.
      LibraryVariableStorage.Enqueue(LowLevelCodeQst);  // Enqueue value for Confirm Handler.
      LibraryPlanning.CalculateLowLevelCode;

      // Verify: Verify Low Level Code.
      VerifyBOMHeaderLLC(ProductionBOMHeader."No.",2);  // Value is important for Test.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE B7568_ChangeProdOrderRouting@3();
    VAR
      CapacityUnitOfMeasure@1005 : Record 99000780;
      RoutingHeader@1000 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
      Item@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ProdOrderRoutingLine@1004 : Record 5409;
      WorkCenter@1006 : Record 99000754;
      WorkCenter2@1010 : Record 99000754;
      RunTime@1008 : Decimal;
      OperationNo@1011 : Code[10];
      OperationNo2@1012 : Code[10];
    BEGIN
      // Routing is type parallel and first Operation is finished then verify to change or validate Run Time in Production Order Routing.
      // Setup: Create Routing with type Parallel and Production Order.
      Initialize;
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      CreateWorkCenterSetup(WorkCenter2,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      RunTime := 10 + LibraryRandom.RandDec(10,2);
      OperationNo2 := FORMAT(10 + LibraryRandom.RandInt(10));

      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Parallel,RoutingLine.Type::"Work Center");
      OperationNo := RoutingLine."Operation No.";
      RoutingLine.VALIDATE("Next Operation No.",OperationNo2);
      UpdateRoutingLine(RoutingLine,1,RunTime,0);  // Setup Time value important.

      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',OperationNo2,RoutingLine.Type::"Work Center",WorkCenter2."No.");
      RoutingLine.VALIDATE("Previous Operation No.",OperationNo);
      UpdateRoutingLine(RoutingLine,1,RunTime,0);  // Setup Time value important.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);
      LibraryVariableStorage.Enqueue(RoutingStatusQst);  // Enqueue value for Confirm Handler.

      // Exercise: Change the Routing Status of first operation to Finished.
      ModifyProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder,RoutingHeader."No.",OperationNo);

      // Verify: Verify that Run Time value can be changed in second Operation in Prod Order Routing Line.
      VerifyRunTime(OperationNo2);
    END;

    [Test]
    PROCEDURE B7612_OutputJnlWithDimValue@5();
    VAR
      ProductionOrder@1001 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      WorkCenter@1007 : Record 99000754;
      DimensionValue@1011 : Record 349;
      RoutingHeader@1012 : Record 99000763;
      RoutingLine@1000 : Record 99000764;
      Item@1013 : Record 27;
      DimensionValue2@1016 : Record 349;
    BEGIN
      // Verify Posting an output journal with Dimension Value Posting, which has been set on the Work Center Card.
      // Setup: Create Routing Setup and Work Center with Dimension.
      Initialize;
      CreateAndCertifyRoutingSetup(RoutingHeader,RoutingLine);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      SelectWorkCenter(WorkCenter,RoutingHeader."No.");
      UpdateWorkCenterWithDimension(DimensionValue,DimensionValue2,WorkCenter."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);
      OutputJournalExplodeRouting(ProductionOrder);
      ChangeDimensionItemJournalLine(ItemJournalLine,WorkCenter."No.",DimensionValue2);
      UpdateItemJournalLine(ItemJournalLine,WorkCenter."No.");

      // Exercise: Post Item Journal.
      ASSERTERROR LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Dimension Error Message.
      Assert.AreNotEqual(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(DimensionErr,DimensionValue.Code,DimensionValue."Dimension Code",WorkCenter."No.")),0,
        STRSUBSTNO(
          ErrorDoNotMatchErr,STRSUBSTNO(DimensionErr,DimensionValue.Code,DimensionValue."Dimension Code",WorkCenter."No."),
          GETLASTERRORTEXT));
    END;

    [Test]
    PROCEDURE B28000_UntrackedPlanning@13();
    VAR
      Item@1003 : Record 27;
      RequisitionLine@1000 : Record 246;
      UntrackedPlanningElement@1006 : Record 99000855;
      ActualCount@1004 : Integer;
    BEGIN
      // Test the Untracked Quantity in Untracked Planning Element after calculate Plan.
      // Setup.
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      CreateItem(
        Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Fixed Reorder Qty.",FALSE,
        10 + LibraryRandom.RandInt(10),40 + LibraryRandom.RandInt(10),0,'');

      // Exercise: Calculate Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Requisition line, Reservation Entry and Untracked Planning Element.
      VerifyRequisitionLine(Item);
      VerifyReservationEntry(Item);
      ActualCount := UntrackedPlanningElement.COUNT;
      Assert.AreEqual(2,ActualCount,UntrackedPlanningElementsErr);  // Value is important for Test.
      VerifyUntrackedPlanningElement(Item."No.",ReorderPointTxt,Item."Reorder Point",0);  // Value is important for Test.
      VerifyUntrackedPlanningElement(Item."No.",ReorderQuantityTxt,Item."Reorder Quantity",Item."Reorder Quantity");
    END;

    [Test]
    PROCEDURE B29178_OrderComponentWithDim@10();
    VAR
      ChildItem@1000 : Record 27;
      ParentItem@1003 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMLine@1001 : Record 99000772;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      DimensionValue@1014 : Record 349;
      DimensionValue2@1013 : Record 349;
    BEGIN
      // Verify Dimensions from Planning Component copied to Production Order Component.
      // Setup: Create Item with Dimensions, Production BOM and Sales Order.
      Initialize;
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::" ",FALSE,0,0,0,'');
      UpdateItemWithDimensions(ChildItem,DimensionValue,DimensionValue2);
      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::Order,FALSE,0,0,0,'');
      CreateProductionBOMAndCertify(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ProductionBOMLine.Type::Item,ChildItem."No.",
        LibraryRandom.RandInt(5));
      UpdateItem(ParentItem,ParentItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      CreateSalesOrder(SalesHeader,SalesLine,ParentItem."No.",'');

      // Exercise: Run Planning Worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(ParentItem,WORKDATE,WORKDATE);

      // Verify: Verify Quantity and Dates in Requisition line.
      VerifyValueInRequisitionLine(ParentItem,SalesLine.Quantity,SalesHeader."Order Date");

      // Exercise: Run Carry Out Action Messages to create a Production Order.
      CarryOutActionMsgForItem(ParentItem."No.");

      // Verify: Verify Dimension in Production Order Component.
      VerifyProdOrderComponent(ParentItem."No.",ChildItem."No.",DimensionValue.Code,DimensionValue2.Code);
    END;

    [Test]
    PROCEDURE B31974_PlanningWithBlockedItem@7();
    VAR
      ProductionOrder@1003 : Record 5405;
      ProductionBOMHeader@1007 : Record 99000771;
      ParentItem@1006 : Record 27;
      ChildItem@1002 : Record 27;
      RequisitionLine@1000 : Record 246;
    BEGIN
      // Test Order Planning with blocked Item.
      // Setup: Create Item Hierarchy setup and blocked the Item.
      Initialize;
      CreateItemHierarchy(ProductionBOMHeader,ParentItem,ChildItem,LibraryRandom.RandInt(5));
      UpdateItem(ChildItem,ChildItem.FIELDNO(Blocked),TRUE);  // Block Item.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);

      // Exercise: Calculate Order Planning.
      ASSERTERROR LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify: Verify Error message.
      Assert.IsFalse(STRPOS(GETLASTERRORTEXT,BlockedErr) = 0,STRSUBSTNO(ErrorDoNotMatchErr,BlockedErr,GETLASTERRORTEXT));
      // TearDown.
      UpdateItem(ChildItem,ChildItem.FIELDNO(Blocked),FALSE);  // Unblock Item.
    END;

    [Test]
    PROCEDURE B37979_CalcPlanForReqWksh@8();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      RequisitionLine@1004 : Record 246;
      LeadTimeCalc@1001 : DateFormula;
    BEGIN
      // Verify the value after Calculating Plan - Requisition Worksheet.
      // Setup: Create Item and Purchase Order.
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      CreateItem(
        Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Maximum Qty.",FALSE,
        10 + LibraryRandom.RandInt(5),0,1000 + LibraryRandom.RandInt(10),'');
      EVALUATE(LeadTimeCalc,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      UpdateItem(Item,Item.FIELDNO("Lead Time Calculation"),LeadTimeCalc);
      UpdateItem(Item,Item.FIELDNO("Manufacturing Policy"),Item."Manufacturing Policy"::"Make-to-Stock");
      UpdateItem(Item,Item.FIELDNO("Order Multiple"),100 + LibraryRandom.RandInt(5));

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Order Date",CALCDATE('<' + '-' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Expected Receipt Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));
      PurchaseLine.MODIFY(TRUE);

      // Exercise: Run Calculation Plan for Req Worksheet.
      CalculatePlanForReqWksh(Item,WORKDATE,CALCDATE('<' + FORMAT(RANDOM(5)) + 'M>',WORKDATE));

      // Verify: Verify Quantity and Dates in Requisition line.
      VerifyDateAndQuantityReqLine(Item);
    END;

    [Test]
    PROCEDURE B42752_CalcPlanForParentItem@31();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      TimeBucket@1006 : DateFormula;
      QuantityPer@1010 : Integer;
    BEGIN
      // Verify Requisition Line and Planning Component after calculate plan using Parent Item.
      // Setup:
      Initialize;
      QuantityPer := LibraryRandom.RandInt(3);
      CreateItem(
        ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::"Maximum Qty.",FALSE,
        25 + LibraryRandom.RandInt(10),0,200 + LibraryRandom.RandInt(10),'');
      EVALUATE(TimeBucket,'<1W>');
      UpdateItem(ChildItem,ChildItem.FIELDNO("Time Bucket"),TimeBucket);
      UpdateItem(ChildItem,ChildItem.FIELDNO("Safety Stock Quantity"),20 + LibraryRandom.RandInt(5));

      CreateItem(
        ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::"Fixed Reorder Qty.",FALSE,
        20 + LibraryRandom.RandInt(10),30 + LibraryRandom.RandInt(10),0,'');
      CreateProductionBOMAndCertify(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ProductionBOMLine.Type::Item,ChildItem."No.",QuantityPer);
      UpdateItem(ParentItem,ParentItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(ParentItem,ParentItem.FIELDNO("Safety Stock Quantity"),10 + LibraryRandom.RandInt(10));

      // Exercise: Calculate Plan for Parent Item.
      LibraryPlanning.CalcRegenPlanForPlanWksh(ParentItem,WORKDATE,WORKDATE);

      // Verify: Verify Requisition Line and Planning Component for Parent Item and Child Item.
      VerifyRequisitionLineDetails(ParentItem);
      VerifyPlanningComponentDetails(ParentItem,ChildItem,QuantityPer);
    END;

    [Test]
    PROCEDURE B42752_CalcPlanForChildItem@21();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      TimeBucket@1006 : DateFormula;
      QuantityPer@1010 : Integer;
    BEGIN
      // Verify Requisition Line after calculate plan using Child Item.
      // Setup:
      Initialize;
      QuantityPer := LibraryRandom.RandInt(3);
      CreateItem(
        ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::"Maximum Qty.",FALSE,
        25 + LibraryRandom.RandInt(10),0,200 + LibraryRandom.RandInt(10),'');
      EVALUATE(TimeBucket,'<1W>');
      UpdateItem(ChildItem,ChildItem.FIELDNO("Time Bucket"),TimeBucket);
      UpdateItem(ChildItem,ChildItem.FIELDNO("Safety Stock Quantity"),20 + LibraryRandom.RandInt(5));

      CreateItem(
        ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::"Fixed Reorder Qty.",FALSE,
        20 + LibraryRandom.RandInt(10),30 + LibraryRandom.RandInt(10),0,'');
      CreateProductionBOMAndCertify(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ProductionBOMLine.Type::Item,ChildItem."No.",QuantityPer);
      UpdateItem(ParentItem,ParentItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(ParentItem,ParentItem.FIELDNO("Safety Stock Quantity"),10 + LibraryRandom.RandInt(10));
      LibraryPlanning.CalcRegenPlanForPlanWksh(ParentItem,WORKDATE,WORKDATE);

      // Exercise: Calculate Plan for Child Item.
      LibraryPlanning.CalcRegenPlanForPlanWksh(ChildItem,WORKDATE,WORKDATE);

      // Verify: Verify Requisition Line for Child Item.
      VerifyMultipleRequisitionLine(ParentItem,ChildItem,QuantityPer);
    END;

    [Test]
    PROCEDURE B42538_RefreshProdOrder@65();
    VAR
      Item@1000 : Record 27;
      Item2@1017 : Record 27;
      Item3@1007 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      ProductionOrder@1003 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1005 : Record 5407;
      RequisitionLine@1008 : Record 246;
      ActualCount@1006 : Integer;
    BEGIN
      // Verify Production Order Line and Production Order Component line after Refresh Released Production Order.
      // Setup:
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      CreateMultipleItems(
        Item2,Item3,Item,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item."No.",1);
      UpdateItem(Item2,Item2.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Exercise: Create and Refresh Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",LibraryRandom.RandInt(10),
        ProductionOrder."Source Type"::Item,FALSE);

      // Verify: Verify the Production Order line and Production Order Component.
      FilterProdOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ActualCount := ProdOrderLine.COUNT;
      Assert.AreEqual(1,ActualCount,NumberOfLineErr);  // Value is important for Test.

      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.");
      ActualCount := ProdOrderComponent.COUNT;
      Assert.AreEqual(1,ActualCount,NumberOfLineErr);  // Value is important for Test.
    END;

    [Test]
    PROCEDURE B42538_ChangeUserIDOnReqLine@63();
    VAR
      Item@1000 : Record 27;
      Item2@1017 : Record 27;
      Item3@1004 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      ProductionOrder@1003 : Record 5405;
      RequisitionLine@1008 : Record 246;
      Quantity@1015 : Integer;
      UserID@1019 : Code[50];
    BEGIN
      // Verify Requisition Line after Changing User ID in Requisition Line.
      // Setup.
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      Quantity := LibraryRandom.RandInt(10);
      CreateMultipleItems(
        Item2,Item3,Item,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item."No.",1);
      UpdateItem(Item2,Item2.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,ProductionOrder."Source Type"::Item,FALSE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise: Change Requisition Line for another User.
      UserID := LibraryUtility.GenerateGUID;
      RequisitionLine.SETRANGE("Demand Order No.",ProductionOrder."No.");
      RequisitionLine.MODIFYALL("User ID",UserID);

      // Verify: Verify Requisition Line for new User.
      VerifyRequisitionLineForUser(UserID,ProductionOrder."No.",Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE B42538_UserIDOnReqLine@62();
    VAR
      Item@1000 : Record 27;
      Item2@1017 : Record 27;
      Item3@1004 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      ProductionOrder@1003 : Record 5405;
      RequisitionLine@1008 : Record 246;
      Quantity@1015 : Integer;
    BEGIN
      // Verify Requisition Line with User ID after Calculating Order Plan.
      // Setup.
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      Quantity := LibraryRandom.RandInt(10);
      CreateMultipleItems(
        Item2,Item3,Item,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item."No.",1);
      UpdateItem(Item2,Item2.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,ProductionOrder."Source Type"::Item,FALSE);

      // Exercise: Calculate Order Plan.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify: Verify Requisition Line for User.
      VerifyRequisitionLineForUser(USERID,ProductionOrder."No.",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE B42538_MakePurchOrderReqLine@28();
    VAR
      Item@1000 : Record 27;
      Item2@1017 : Record 27;
      Item3@1004 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      ProductionOrder@1003 : Record 5405;
      RequisitionLine@1008 : Record 246;
      Vendor@1007 : Record 23;
      ManufacturingUserTemplate@1020 : Record 5525;
      Quantity@1015 : Integer;
    BEGIN
      // Verify Purchase Line after making Purchase Order form Requisition line.
      // Setup.
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      Quantity := LibraryRandom.RandInt(10);
      CreateMultipleItems(
        Item2,Item3,Item,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item."No.",1);
      UpdateItem(Item2,Item2.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,ProductionOrder."Source Type"::Item,FALSE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      LibraryPurchase.CreateVendor(Vendor);
      UpdateRequisitionLineWithSupplyFrom(ProductionOrder."No.",Item."No.",Vendor."No.");
      FilterRequisitionLine(RequisitionLine,Item."No.");

      // Exercise: Make Purchase Order form Requisition line.
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"All Lines",
        ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders");

      // Verify: Verify Purchase Line with No and Quantity.
      VerifyPurchaseLine(Vendor."No.",Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE B44327_RefreshProdOrderSubcontracting@105();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      Item@1001 : Record 27;
      Item2@1014 : Record 27;
      Item3@1006 : Record 27;
    BEGIN
      // Verify Production Order line after refreshing Released Production Order for Subcontracting.
      // Setup: Create a new Work Center for subcontracting.
      Initialize;
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,FORMAT(10 + LibraryRandom.RandInt(10)));
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",1);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");

      // Exercise: Create and Refresh Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),
        ProductionOrder."Source Type"::Item,FALSE);

      // Verify: Verify Production Order line.
      FindProdOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderLine.TESTFIELD("Routing No.",RoutingHeader."No.");
    END;

    [Test]
    PROCEDURE B44327_RoutingStatusNotCertifiedSubcontracting@104();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      Item@1001 : Record 27;
      Item2@1014 : Record 27;
      Item3@1005 : Record 27;
    BEGIN
      // Verify Error message after refreshing Released Production Order for Subcontracting if Routing Status not certified.
      // Setup: Create a new Work Center for subcontracting.
      Initialize;
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,FORMAT(10 + LibraryRandom.RandInt(10)));
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",1);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),
        ProductionOrder."Source Type"::Item,FALSE);

      // Modify Routing Status not certified.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::"Under Development");

      // Exercise: Refresh Production Order.
      ASSERTERROR LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // Verify: Verify Error message.
      Assert.IsFalse((STRPOS(GETLASTERRORTEXT,StatusTxt) = 0) OR (STRPOS(GETLASTERRORTEXT,CertifiedTxt) = 0),GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE B44327_ProdBOMStatusNotCertifiedSubcontracting@101();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      Item@1001 : Record 27;
      Item2@1014 : Record 27;
      Item3@1005 : Record 27;
    BEGIN
      // Verify Error message after refreshing Released Production Order for Subcontracting if Production BOM Status not certified.
      // Setup: Create a new Work Center for subcontracting.
      Initialize;
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,FORMAT(10 + LibraryRandom.RandInt(10)));
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",1);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),
        ProductionOrder."Source Type"::Item,FALSE);

      // Modify Production BOM status not certified.
      ProductionBOMHeader.FIND;
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::"Under Development");

      // Exercise: Refresh Production Order.
      ASSERTERROR LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // Verify: Verify Error message.
      Assert.IsFalse((STRPOS(GETLASTERRORTEXT,StatusTxt) = 0) OR (STRPOS(GETLASTERRORTEXT,CertifiedTxt) = 0),GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE B44327_CalcSubcontracting@100();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      Item@1001 : Record 27;
      Item2@1014 : Record 27;
      Item3@1005 : Record 27;
      RequisitionLine@1009 : Record 246;
      OperationNo@1016 : Code[10];
      Quantity@1017 : Decimal;
    BEGIN
      // Verify Requisition Line after Calculation of Subcontracting.
      // Setup: Create a new Work Center for subcontracting.
      Initialize;
      OperationNo := FORMAT(10 + LibraryRandom.RandInt(10));
      Quantity := LibraryRandom.RandInt(10);
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,OperationNo);
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",1);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,ProductionOrder."Source Type"::Item,FALSE);

      // Exercise: Calculation of Subcontracting.
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);

      // Verify: Verify Operation No in Requisition Line.
      FindRequisitionLineForProductionOrder(RequisitionLine,ProductionOrder);
      RequisitionLine.TESTFIELD("Operation No.",OperationNo);
    END;

    [Test]
    PROCEDURE B44327_PostPurchOrderSubcontracting@27();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      Item@1001 : Record 27;
      Item2@1014 : Record 27;
      Item3@1005 : Record 27;
      RequisitionLine@1009 : Record 246;
      PurchaseLine@1010 : Record 39;
      PurchaseHeader@1011 : Record 38;
      OperationNo@1016 : Code[10];
      Quantity@1017 : Decimal;
      Vendor@1500000 : Record 23;
      InventorySetup@1500001 : Record 313;
      LocationSubContract@1500002 : Record 14;
    BEGIN
      // Verify Capacity Ledger Entry after Carry out action message of subcontracting and post Purchase Order.
      // Setup: Create a new Work Center for subcontracting.
      Initialize;
      OperationNo := FORMAT(10 + LibraryRandom.RandInt(10));
      Quantity := LibraryRandom.RandInt(10);
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,OperationNo);
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      CreateProductionBOMAndCertify(ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",1);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");

      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,ProductionOrder."Source Type"::Item,FALSE);
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);
      FindRequisitionLineForProductionOrder(RequisitionLine,ProductionOrder);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationSubContract);
      LocationSubContract.FINDFIRST;
      LocationSubContract.VALIDATE("Subcontracting Location",TRUE);
      LocationSubContract.MODIFY(TRUE);
      Vendor.GET(RequisitionLine."Vendor No.");
      Vendor.VALIDATE("Vendor Location",LocationSubContract.Code);
      Vendor.MODIFY(TRUE);

      InventorySetup.GET;
      InventorySetup.VALIDATE("Job Work Return Period",Quantity);
      InventorySetup.MODIFY;

      // Exercise: Run Carry out action message of subcontracting.
      LibraryPlanning.CarryOutAMSubcontractWksh(RequisitionLine);

      // Verify: Verify Line Amount in Purchase Line.
      PurchaseLine.SETRANGE("No.",Item."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Qty. per Unit of Measure",1);
      PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      PurchaseLine.VALIDATE(PurchaseLine."Qty. to Receive",PurchaseLine.Quantity);
      PurchaseLine.VALIDATE(PurchaseLine."Qty. to Invoice",PurchaseLine.Quantity);
      PurchaseLine.MODIFY(TRUE);
      PurchaseLine.TESTFIELD("Line Amount",Quantity * WorkCenter."Direct Unit Cost");

      // Exercise: Posting Purchase Order with Subcontracting.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE(SubConPostLine,PurchaseLine."Line No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Capacity Ledger Entry.
      VerifyCapacityLedgerEntry(WorkCenter,Quantity);
    END;

    [Test]
    PROCEDURE B44714_CopyDimOnJournalLines@113();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1003 : Record 5405;
      DefaultDimension@1005 : Record 352;
      WorkCenter@1010 : Record 99000754;
      WorkCenter2@1011 : Record 99000754;
      DimensionValue@1013 : Record 349;
      DimensionValue2@1014 : Record 349;
      LineNoOfWorkCenter@1006 : Integer;
      LineNoOfWorkCenter2@1007 : Integer;
      LineDimSetID@1008 : Integer;
      LineDimSetID2@1009 : Integer;
    BEGIN
      // Verify Dimension Copied on Journal line after changing Work Center.
      // Setup:
      Initialize;
      CreateMultipleWorkCenterSetup(WorkCenter,WorkCenter2,RoutingHeader);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5),
        ProductionOrder."Source Type"::Item,FALSE);
      CreateDimensionWithValue(DimensionValue,DimensionValue2);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenter."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenter2."No.",DimensionValue2."Dimension Code",DimensionValue2.Code);
      OutputJournalExplodeRouting(ProductionOrder);
      LineNoOfWorkCenter := SelectJournalLineNos(ProductionOrder,WorkCenter."No.");
      LineNoOfWorkCenter2 := SelectJournalLineNos(ProductionOrder,WorkCenter2."No.");
      LineDimSetID := SelectJournalLineDimSetID(LineNoOfWorkCenter);

      // Exercise: Change Work Center No on Journal Line.
      ChangeWorkCenterOnJournalLine(LineNoOfWorkCenter2,WorkCenter."No.");
      LineDimSetID2 := SelectJournalLineDimSetID(LineNoOfWorkCenter2);

      // Verify: Verify Dimension Code Values for the Work Centers.
      VerifyDimensions(LineDimSetID,1,DimensionValue."Dimension Code",DimensionValue.Code);
      VerifyDimensions(LineDimSetID2,1,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE B44714_ChangeWorkCenterWithDim@111();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1003 : Record 5405;
      DefaultDimension@1005 : Record 352;
      WorkCenter@1010 : Record 99000754;
      WorkCenter2@1011 : Record 99000754;
      Dimension2@1016 : Record 348;
      DimensionValue@1013 : Record 349;
      DimensionValue2@1014 : Record 349;
      DimensionValue3@1015 : Record 349;
      LineNoOfWorkCenter2@1007 : Integer;
      LineDimSetID2@1009 : Integer;
    BEGIN
      // Verify Dimension Copied on Journal line after changing Work Center and added dimension on journal Line.
      // Setup.
      Initialize;
      CreateMultipleWorkCenterSetup(WorkCenter,WorkCenter2,RoutingHeader);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5),
        ProductionOrder."Source Type"::Item,FALSE);
      CreateDimensionWithValue(DimensionValue,DimensionValue2);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenter."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenter2."No.",DimensionValue2."Dimension Code",DimensionValue2.Code);
      OutputJournalExplodeRouting(ProductionOrder);
      LineNoOfWorkCenter2 := SelectJournalLineNos(ProductionOrder,WorkCenter2."No.");
      LibraryDimension.CreateDimension(Dimension2);
      LibraryDimension.CreateDimensionValue(DimensionValue3,Dimension2.Code);

      // Exercise: Add Dimension on Journal line and Change Work Center No.
      AddDimensionOnJournalLine(LineNoOfWorkCenter2,DimensionValue3."Dimension Code",DimensionValue3.Code);
      ChangeWorkCenterOnJournalLine(LineNoOfWorkCenter2,WorkCenter."No.");
      LineDimSetID2 := SelectJournalLineDimSetID(LineNoOfWorkCenter2);

      // Verify: Verify new Dimension for Work Center in Dimension Set Entry.
      VerifyDimensions(LineDimSetID2,1,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE B44714_ChangeWorkCenterWithoutDim@22();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1003 : Record 5405;
      DefaultDimension@1005 : Record 352;
      WorkCenter@1010 : Record 99000754;
      WorkCenter2@1011 : Record 99000754;
      DimensionValue@1013 : Record 349;
      DimensionValue2@1014 : Record 349;
      LineNoOfWorkCenter2@1007 : Integer;
      LineDimSetID2@1009 : Integer;
    BEGIN
      // Verify Dimension Copied on Journal line after changing Work Center and no dimension on Work Center.
      // Setup.
      Initialize;
      CreateMultipleWorkCenterSetup(WorkCenter,WorkCenter2,RoutingHeader);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5),
        ProductionOrder."Source Type"::Item,FALSE);
      CreateDimensionWithValue(DimensionValue,DimensionValue2);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenter2."No.",DimensionValue2."Dimension Code",DimensionValue2.Code);
      OutputJournalExplodeRouting(ProductionOrder);
      LineNoOfWorkCenter2 := SelectJournalLineNos(ProductionOrder,WorkCenter2."No.");

      // Exercise: Change Work Center No.
      ChangeWorkCenterOnJournalLine(LineNoOfWorkCenter2,WorkCenter."No.");
      LineDimSetID2 := SelectJournalLineDimSetID(LineNoOfWorkCenter2);

      // Verify: Verify new Dimension for Work Center in Dimension Set Entry.
      Assert.AreEqual(0,LineDimSetID2,NoDimensionExpectedErr);
    END;

    [Test]
    PROCEDURE B45291_CalcPlanForMultipleItems@116();
    VAR
      Item@1007 : Record 27;
      Item2@1008 : Record 27;
      Item3@1009 : Record 27;
      RequisitionLine@1001 : Record 246;
      SalesReceivablesSetup@1000 : Record 311;
      ActualCount@1005 : Integer;
    BEGIN
      // Verify Requisition line after calculating plan for multiple items.
      // Setup: Create items and Sales Order.
      Initialize;
      SalesReceivablesSetup.GET;
      RequisitionLine.DELETEALL(TRUE);
      LibrarySales.SetStockoutWarning(FALSE);
      CreateMultipleItems(
        Item,Item2,Item3,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::"Lot-for-Lot",TRUE);
      CreateSalesOrderWithMultipleLine(Item."No.",Item2."No.",Item3."No.",LocationBlue.Code);

      Item.SETFILTER("No.",'%1|%2|%3',Item."No.",Item2."No.",Item3."No.");
      Item.SETRANGE("Location Filter",LocationBlue.Code);

      // Exercise: Run Planning Worksheet for three Items.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      RequisitionLine.MODIFYALL("Accept Action Message",TRUE);

      // Verify: Verify Requisition Line should be three lines (Two lines for Production Order).
      ActualCount := RequisitionLine.COUNT;
      Assert.AreEqual(3,ActualCount,NumberOfLineErr);  // Value is important for Test.
      RequisitionLine.SETRANGE("Action Message",RequisitionLine."Action Message"::New);
      RequisitionLine.SETRANGE("Ref. Order Type",RequisitionLine."Ref. Order Type"::"Prod. Order");
      ActualCount := RequisitionLine.COUNT;
      Assert.AreEqual(2,ActualCount,NumberOfLineErr);  // Value is important for Test.

      // Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE B45291_CalcCarryOutActionMsgPlan@23();
    VAR
      Item@1007 : Record 27;
      Item2@1008 : Record 27;
      Item3@1009 : Record 27;
      RequisitionLine@1001 : Record 246;
      SalesReceivablesSetup@1000 : Record 311;
      ActualCount@1005 : Integer;
    BEGIN
      // Verify Requisition line after Run Carry Out Action Msg Plan for Production Order.
      // Setup: Create items and Sales Order.
      Initialize;
      SalesReceivablesSetup.GET;
      RequisitionLine.DELETEALL(TRUE);
      LibrarySales.SetStockoutWarning(FALSE);
      CreateMultipleItems(
        Item,Item2,Item3,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::"Lot-for-Lot",TRUE);
      CreateSalesOrderWithMultipleLine(Item."No.",Item2."No.",Item3."No.",LocationBlue.Code);

      Item.SETFILTER("No.",'%1|%2|%3',Item."No.",Item2."No.",Item3."No.");
      Item.SETRANGE("Location Filter",LocationBlue.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      RequisitionLine.MODIFYALL("Accept Action Message",TRUE);

      // Exercise: Run Carry Out Action Msg Plan for Production Order line.
      RequisitionLine.SETRANGE("Action Message",RequisitionLine."Action Message"::New);
      RequisitionLine.SETRANGE("Ref. Order Type",RequisitionLine."Ref. Order Type"::"Prod. Order");
      RequisitionLine.FINDFIRST;
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);

      // Verify: Verify Requisition Line should be one line.
      CLEAR(RequisitionLine);
      ActualCount := RequisitionLine.COUNT;
      Assert.AreEqual(1,ActualCount,NumberOfLineErr);  // Value is important for Test.

      // Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE B7479_ChangeItemOnProdComponent@57();
    VAR
      Item@1006 : Record 27;
      Item2@1007 : Record 27;
      Item3@1008 : Record 27;
      ProductionBOMHeader@1010 : Record 99000771;
      ProductionBOMLine@1011 : Record 99000772;
      UnitOfMeasure@1012 : Record 204;
      ProductionOrder@1014 : Record 5405;
    BEGIN
      // Verify Prodcution Order Component after changing Item on Prodcution Order Component.
      // Setup: Create Items, Production BOM, Create Production Order and Refresh.
      Initialize;
      CreateMultipleItems(
        Item3,Item2,Item,Item."Replenishment System"::Purchase,Item."Replenishment System"::"Prod. Order",
        Item."Reordering Policy"::" ",FALSE);
      UpdateItemWithUnitOfMeasure(UnitOfMeasure,Item2."No.");

      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item2."No.",LibraryRandom.RandInt(10));  // Using Random for Quantity Per.
      UpdateProductionBOMLine(ProductionBOMLine,UnitOfMeasure.Code);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);// Using Random for Quantity.

      // Exercise: Change Item on Prodcution Order Component.
      ChangeItemOnProdOrderComponent(ProductionOrder,Item2."No.",Item3."No.");

      // Verify: Verify Item on Prodcution Order Component.
      VerifyProdOrderComponentDetails(Item3,ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(ReleasedProdOrderMessageHandler)]
    PROCEDURE B7615_ChangeFlushingMethodOnProdComponent@56();
    VAR
      ItemVariant@1001 : Record 5401;
      ItemVariant2@1000 : Record 5401;
      RoutingHeader@1006 : Record 99000763;
      RoutingLine@1007 : Record 99000764;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1004 : Record 37;
      ProductionOrder@1009 : Record 5405;
      ProductionBOMHeader@1015 : Record 99000771;
      ParentItem@1014 : Record 27;
      ChildItem@1013 : Record 27;
      OrderType@1005 : 'ItemOrder,ProjectOrder';
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify Finish Production line after Changing Flusing Bethod both Routings and Components line and change Status.

      // [GIVEN] Two variants for an Item.
      Initialize;
      CreateItemHierarchy(ProductionBOMHeader,ParentItem,ChildItem,1);
      LibraryInventory.CreateItemVariant(ItemVariant,ParentItem."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,ParentItem."No.");
      CreateAndCertifyRoutingSetup(RoutingHeader,RoutingLine);
      UpdateItem(ParentItem,ParentItem.FIELDNO("Routing No."),RoutingHeader."No.");
      UpdateItemInventory(ChildItem."No.",ChildItem."No.");

      // [GIVEN] Sales Order with both Variant.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,ParentItem."No.",'',ItemVariant.Code,LibraryRandom.RandDec(10,2));
      CreateSalesLine(SalesHeader,SalesLine2,ParentItem."No.",'',ItemVariant2.Code,LibraryRandom.RandDec(10,2));

      // [GIVEN] Released Production Order from Sales Order.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ProjectOrder);

      // [GIVEN] All Flushing Methods changed to Backward for both Routings and Components.
      UpdateFlushingMethodOnProdOrderRoutingLine(ProductionOrder,SalesHeader."No.");
      UpdateFlushingMethodOnProdOrderComponent(ProductionOrder,SalesHeader."No.");

      // [WHEN] Finish Production Order.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [THEN] Production Order line correct for both Variant.
      VerifyProdOrderLine(ProductionOrder."No.",ParentItem."No.",ItemVariant.Code,SalesLine.Quantity);
      VerifyProdOrderLine(ProductionOrder."No.",ParentItem."No.",ItemVariant2.Code,SalesLine2.Quantity);
    END;

    [Test]
    PROCEDURE B18019_DifferentUOMOnProductionBOMError@38();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      Item3@1003 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      UnitOfMeasure@1005 : Record 204;
    BEGIN
      // Verify Error message when assign Production BOM to Item if Production BOM have different Unit of Measure.
      // Setup.
      Initialize;
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);

      // Create a new Production BOM with differnt Unit of Measure.
      CreateProductionBOMAndCertify(
        ProductionBOMHeader,UnitOfMeasure.Code,ProductionBOMLine.Type::Item,Item2."No.",LibraryRandom.RandInt(10));  // Using Random for Quantity Per.

      // Exercise: Assign Production BOM to item.
      ASSERTERROR Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");

      // Verify: Verify Error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemUnitOfMeasureNotExistErr) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE B18019_ChangeUOMOnProductionBOMError@36();
    VAR
      Item@1000 : Record 27;
      Item2@1005 : Record 27;
      Item3@1003 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      UnitOfMeasure@1006 : Record 204;
    BEGIN
      // Verify Error message when change different Unit of Measure on Production BOM as assigned Item.
      // Setup.
      Initialize;
      CreateMultipleItems(
        Item,Item3,Item2,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);

      CreateProductionBOMAndCertify(
        ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",LibraryRandom.RandInt(10));  // Using Random for Quantity Per.
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::New);

      // Change UOM of Production BOM and assign Production BOM to item.
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Exercise: Change UOM of Production BOM.
      ASSERTERROR ProductionBOMHeader.VALIDATE("Unit of Measure Code",UnitOfMeasure.Code);

      // Verify: Verify Error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemUnitOfMeasureNotExistErr) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE B32912_ProductionOrderwithFamily@35();
    VAR
      Family@1000 : Record 99000773;
      ProductionOrder@1003 : Record 5405;
      InbWhseHandlingTime@1004 : Text[30];
      ExpectedEndingDate@1005 : Date;
      ShopCalendarCode@1006 : Code[10];
    BEGIN
      // Verify Due date for Family on Production order after Refresh Production order.
      // Setup: Create Family and Production Order.
      Initialize;
      CreateFamilySetup(Family);
      InbWhseHandlingTime := UpdateLocation(LocationBlue,'<1D>');
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Planned,ProductionOrder."Source Type"::Family,Family."No.",1);
      UpdateProductionOrder(ProductionOrder,LocationBlue.Code);

      // Exercise.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify Prodcution Order.
      ProductionOrder.GET(ProductionOrder.Status::Planned,ProductionOrder."No.");
      ProductionOrder.TESTFIELD("Source Type",ProductionOrder."Source Type"::Family);
      ProductionOrder.TESTFIELD("Source No.",Family."No.");
      ProductionOrder.TESTFIELD("Due Date",WORKDATE);
      ExpectedEndingDate := CALCDATE('<' + '-' + FORMAT(LocationBlue."Inbound Whse. Handling Time") + '>',
          CALCDATE('<' + '-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',ProductionOrder."Due Date"));

      ShopCalendarCode := GetShopCalendarCodeForProductionOrder(ProductionOrder);
      WHILE NOT CheckShopCalendarWorkingDay(ShopCalendarCode,ExpectedEndingDate) DO
        ExpectedEndingDate -= 1;
      ProductionOrder.TESTFIELD("Ending Date",ExpectedEndingDate);
      UpdateLocation(LocationBlue,InbWhseHandlingTime);
    END;

    [Test]
    PROCEDURE B45301_PostCapacityJournal@11();
    VAR
      CapacityUnitOfMeasure@1001 : Record 99000780;
      WorkCenter@1003 : Record 99000754;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Number of Capacity Journal Line after creating Capacity Journal and Post.
      // Setup.
      Initialize;
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);

      // Exercise: Create a new line in Capacity Journal.
      CreateCapacityJournalLine(ItemJournalLine,WorkCenter."No.");

      // Verify: Verify number of Item Journal Lines.
      ItemJournalLine.SETRANGE("Journal Template Name",CapacityItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",CapacityItemJournalBatch.Name);
      Assert.AreEqual(1,ItemJournalLine.COUNT,ItemJournalLineErr);

      // Exercise: Post Capacity Journal.
      LibraryInventory.PostItemJournalLine(CapacityItemJournalBatch."Journal Template Name",CapacityItemJournalBatch.Name);

      // Verify: Verify number of Item Journal Lines.
      ItemJournalLine.SETRANGE("Journal Template Name",CapacityItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",CapacityItemJournalBatch.Name);
      Assert.AreEqual(0,ItemJournalLine.COUNT,ItemJournalLineErr);  // Zero for No line for Item Journal.
    END;

    [Test]
    PROCEDURE B29203_NeededTimeOnProductionOrderCapacity@86();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      WorkCenter@1001 : Record 99000754;
      RoutingHeader@1004 : Record 99000763;
      RoutingLine@1005 : Record 99000764;
      ProductionOrder@1006 : Record 5405;
      Item@1014 : Record 27;
    BEGIN
      // Verify Capacity (Effective), Needed Time on Calendar Entry and Production Order Capacity Need after Refresh Firm Planned Production Order.
      // Setup: Create Item, Work Center and Routing Header.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,'');

      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      UpdateWorkCenterWithEfficiency(WorkCenter);
      CreateCapacityConstrainedResource(WorkCenter."No.");

      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,1,20,0);  // Value is important for Test.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");

      // Exercise: Create an Refresh Firm Planned Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",100 + LibraryRandom.RandInt(1000),
        ProductionOrder."Source Type"::Item,FALSE);  // Large Value.

      // Verify: Verify Capacity (Effective), Needed Time on Calendar Entry and Production Order Capacity Need.
      VerifyProdOrderCapacityNeed(WorkCenter."No.");
    END;

    [Test]
    PROCEDURE B29289_ReplanProductionOrderWithVariant@85();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1006 : Record 27;
      ItemVariant@1002 : Record 5401;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      ProductionOrder@1005 : Record 5405;
      ProdOrderLine@1010 : Record 5406;
      Direction@1007 : 'Forward,Backward';
      CalcMethod@1008 : 'No Levels,One level,All levels';
    BEGIN
      // Verify Variant Code on Production Order Line after Replan Production Order.
      // Setup: Create Items, Production BOM and Production Order.
      Initialize;
      CreateMultipleItems(
        Item,Item2,Item3,Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase,
        Item."Reordering Policy"::" ",FALSE);
      LibraryInventory.CreateItemVariant(ItemVariant,Item2."No.");

      CreateProductionBOMAndCertify(
        ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",LibraryRandom.RandInt(5));  // Using Random for Quantity Per.
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",LibraryRandom.RandInt(5),
        ProductionOrder."Source Type"::Item,FALSE);
      UpdateVariantCodeOnProdOrderComponent(Item2."No.",ItemVariant.Code);

      // Exercise: Replan Production Order.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // Verify: Verify Variant Code on Production Order Line.
      ProdOrderLine.SETRANGE("Item No.",Item2."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD(Status,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.TESTFIELD("Variant Code",ItemVariant.Code)
    END;

    [Test]
    PROCEDURE B32771_CapableToPromiseOnSalesOrder@60();
    VAR
      Item@1000 : Record 27;
      Item2@1009 : Record 27;
      RoutingHeader@1007 : Record 99000763;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMLine@1003 : Record 99000772;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      ProductionBOMHeader2@1006 : Record 99000771;
      TempOrderPromisingLine@1012 : TEMPORARY Record 99000880;
      RequisitionLine@1013 : Record 246;
      ReqWkshTemplate@1010 : Record 244;
      OldReqTemplateType@1016 : Option;
    BEGIN
      // Verify Quantity on Requisition Line after Calculate Capable to Promise on Sales Order.
      // Setup : Create Items, Multiple Production BOM and Sales Order.
      Initialize;
      OldReqTemplateType := ChangeTypeInReqWkshTemplate(ReqWkshTemplate.Type::Planning);
      CreateShipmentItem(Item,RoutingHeader);

      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order",Item2."Reordering Policy"::" ",FALSE,0,0,0,'');
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item2."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMHeader."No.",FORMAT(LibraryRandom.RandInt(10)),Item2."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",ProductionBOMLine.Type::Item,Item."No.",
        LibraryRandom.RandInt(5));  // Using Random for Quantity Per.
      CertifiedStatusOnProductionBOMVersion(ProductionBOMVersion);

      CreateProductionBOMAndCertify(
        ProductionBOMHeader2,Item2."Base Unit of Measure",ProductionBOMLine.Type::"Production BOM",ProductionBOMHeader."No.",1);
      UpdateItem(Item2,Item2.FIELDNO("Routing No."),RoutingHeader."No.");
      UpdateItem(Item2,Item2.FIELDNO("Production BOM No."),ProductionBOMHeader2."No.");
      CreateSalesOrder(SalesHeader,SalesLine,Item2."No.",'');

      // Exercise: Calculate Capable to Promise.
      CalcCapableToPromise(TempOrderPromisingLine,SalesHeader);

      // Verify: Verify Quantity on Requisition Line.
      VerifyQuantityOnRequisitionLine(Item2."No.",RequisitionLine."Replenishment System"::"Prod. Order",SalesLine.Quantity);
      VerifyQuantityOnRequisitionLine(
        Item."No.",RequisitionLine."Replenishment System"::Purchase,ProductionBOMLine."Quantity per" * SalesLine.Quantity);

      // Restore Order Promising Setup
      ChangeTypeInReqWkshTemplate(OldReqTemplateType);
    END;

    [Test]
    PROCEDURE EarliestShipmentDateAfterPurchaseOrderReleased@199();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1003 : Record 99000763;
      TempOrderPromisingLine@1012 : TEMPORARY Record 99000880;
      PurchaseHeader@1015 : Record 38;
      PurchaseLine@1008 : Record 39;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      RequisitionLine@1004 : Record 246;
      LeadDateFormula@1005 : DateFormula;
    BEGIN
      Initialize;
      RequisitionLine.DELETEALL(TRUE);
      CreateShipmentItem(Item,RoutingHeader);
      EVALUATE(LeadDateFormula,'<21D>'); // 21D
      Item.VALIDATE("Lead Time Calculation",LeadDateFormula);
      Item.MODIFY(TRUE);

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",TRUE);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",'');

      // Exercise: Calculate Capable to Promise.
      CalcCapableToPromise(TempOrderPromisingLine,SalesHeader);

      // Verify: Verify Earliest Shipment Dates on Order Promising Line.
      EVALUATE(LeadDateFormula,'<22D>'); // 21D +1 Day to Lead Time.
      VerifyEarliestShipmentDate(
        CALCDATE(LeadDateFormula,WORKDATE),
        TempOrderPromisingLine);
    END;

    [Test]
    PROCEDURE AvailableToPromiseEarliestShipmentDate@194();
    VAR
      Item@1000 : Record 27;
      TempOrderPromisingLine@1012 : TEMPORARY Record 99000880;
      SalesHeader@1002 : Record 36;
      ItemJournalLine@1006 : Record 83;
      AvailabilityManagement@1011 : Codeunit 99000889;
      Quantity@1005 : Integer;
      LeadDatesFormula@1007 : DateFormula;
    BEGIN
      // Preparatiom
      Initialize;
      Quantity := LibraryRandom.RandInt(10);

      // Create test item and post stock purchase
      EVALUATE(LeadDatesFormula,'<21D>');
      CreateStockItem(Item,Item."Replenishment System"::Purchase,LeadDatesFormula);
      PostItemStockPurchase(Item,Quantity,'',ItemJournalLine."Entry Type"::"Positive Adjmt.");

      // Create sales order with different shpipment dates in lines and excee
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      EVALUATE(LeadDatesFormula,'<25D>');
      CreateSalesLineWithShipmentDate(SalesHeader,Item."No.",'',Quantity,CALCDATE(LeadDatesFormula,WORKDATE),TRUE);
      CreateSalesLineWithShipmentDate(SalesHeader,Item."No.",'',Quantity,WORKDATE,FALSE);

      // Exercise: Calculate Available to Promise.
      AvailabilityManagement.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityManagement.CalcAvailableToPromise(TempOrderPromisingLine);

      // Verify: Verify Earliest Shipment Dates on Order Promising Lines.
      VerifyOrderPromisingLines(TempOrderPromisingLine);
    END;

    [Normal]
    LOCAL PROCEDURE B308740_ChangeWaitTime@2(Forward@1008 : Boolean);
    VAR
      TempManufacturingSetup@1009 : TEMPORARY Record 99000765;
      CapacityUnitOfMeasure@1005 : Record 99000780;
      RoutingHeader@1000 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
      RoutingLine1@1012 : Record 99000764;
      Item@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ProdOrderRoutingLine@1004 : Record 5409;
      WorkCenter@1006 : Record 99000754;
      WorkCenter2@1010 : Record 99000754;
      DefaultSafetyLeadTime@1007 : DateFormula;
      ExpEndingDate@1015 : Date;
      ExpEndingTime@1014 : Time;
      OperationNo@1011 : Code[10];
    BEGIN
      // Setup: Create Routing and Production Order.
      Initialize;
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Hours,080000T,230000T);
      CreateWorkCenterSetup(WorkCenter2,CapacityUnitOfMeasure.Type::Hours,080000T,120000T);
      TempManufacturingSetup := ManufacturingSetup;
      TempManufacturingSetup.INSERT;

      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Normal Starting Time",080000T);
      ManufacturingSetup.VALIDATE("Normal Ending Time",230000T);
      EVALUATE(DefaultSafetyLeadTime,'<0D>');
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",DefaultSafetyLeadTime);
      ManufacturingSetup.MODIFY(TRUE);

      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,0,1,12);
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine1,'',OperationNo,RoutingLine.Type::"Work Center",WorkCenter2."No.");
      UpdateRoutingLine(RoutingLine1,0,4,0);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",1,ProductionOrder."Source Type"::Item,Forward);

      // Exercise: Modify the wait time for the first routing line to force the routing line to end at midnight next day.
      FilterProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderRoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      ProdOrderRoutingLine.SETRANGE("Operation No.",RoutingLine."Operation No.");
      ProdOrderRoutingLine.FINDFIRST;

      ExpEndingTime := ProdOrderRoutingLine."Starting Time";
      ExpEndingDate := ProdOrderRoutingLine."Starting Date" + 1;
      IF Forward THEN
        ProdOrderRoutingLine.VALIDATE("Wait Time",15)
      ELSE
        ProdOrderRoutingLine.VALIDATE("Wait Time",4);
      ProdOrderRoutingLine.MODIFY(TRUE);
      ExpEndingTime += (ProdOrderRoutingLine."Run Time" + ProdOrderRoutingLine."Wait Time") * 3600000;

      // Verify: Verify that End date time is correct when forcing the routing to finish at midnight.
      Assert.AreEqual(
        ExpEndingDate,ProdOrderRoutingLine."Ending Date",'Wrong Ending Date for order ' + ProdOrderRoutingLine."Prod. Order No.");
      Assert.AreEqual(
        ExpEndingTime,ProdOrderRoutingLine."Ending Time",'Wrong Ending Time for order ' + ProdOrderRoutingLine."Prod. Order No.");

      // Teardown: Manufacturing Setup.
      ManufacturingSetup.VALIDATE("Normal Starting Time",TempManufacturingSetup."Normal Starting Time");
      ManufacturingSetup.VALIDATE("Normal Ending Time",TempManufacturingSetup."Normal Ending Time");
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",TempManufacturingSetup."Default Safety Lead Time");
      ManufacturingSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE B308740_BackwardPlanning@24();
    BEGIN
      B308740_ChangeWaitTime(FALSE);
    END;

    [Test]
    PROCEDURE B308740_ForwardPlanning@32();
    BEGIN
      B308740_ChangeWaitTime(TRUE);
    END;

    [Test]
    PROCEDURE RoutingCompForRelProductionOrder@87();
    VAR
      Item@1006 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1000 : Record 99000763;
    BEGIN
      // Setup: Update Inventory Setup and Create an Item with Production BOM and Routing attached. Create a Released Production Order with Random Quantity.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(10));

      // Exercise: Refresh the Released Production Order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify Components and Routings count for Production Order.
      VerifyCountForProductionOrderComponent(ProductionOrder."No.",Item."Production BOM No.");
      VerifyCountForProductionOrderRouting(ProductionOrder."No.",Item."Routing No.");
    END;

    [Test]
    PROCEDURE QtyOnProductionOrderForFamily@96();
    VAR
      ProductionOrder@1001 : Record 5405;
      Family@1000 : Record 99000773;
    BEGIN
      // Setup.
      Initialize;
      CreateFamilySetup(Family);

      // Exercise: Create and Refresh Firm Planned Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Family."No.",LibraryRandom.RandInt(10),
        ProductionOrder."Source Type"::Family,FALSE);

      // Verify: Verify the Quantity on Firm Planned Production Order.
      VerifyQtyOnProdOrder(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE B30656_TransferOrderWithTracking@114();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1003 : Record 5740;
      TransferLine@1004 : Record 5741;
      ItemTrackingCode@1005 : Record 6502;
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      Direction@1012 : 'Outbound,Inbound';
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create LFLItem With Tracking Code,Create Transfer Route,Stockkeeping Units,Create and Post Item Journal,Create Sales and Transfer Order.
      Initialize;
      Quantity := 10 + LibraryRandom.RandInt(10);  // Using Large Random Value.
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Lot-for-Lot",TRUE,0,0,0,'');
      UpdateTrackingCodeOnItem(Item,ItemTrackingCode.Code);
      UpdatePlanningParametersOnItem(Item);
      CreateTransferRoute(LocationBlue.Code,LocationGreen.Code,LocationInTransit.Code);

      CreateMultipleStockKeepingUnit(Item."No.",LocationBlue.Code,LocationGreen.Code);
      SetReplSystemTransferOnSKU(LocationGreen.Code,Item."No.",LocationBlue.Code);

      ItemTracking := ItemTracking::AssignSerial;  // Assign Global Variable for Page handler.
      CreateAndPostItemJournalLineWithTracking(Item."No.",LocationBlue.Code,Quantity);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,'',Quantity + LibraryRandom.RandInt(10));

      ItemTracking := ItemTracking::SelectSerial; // Assign Global Variable.
      CreateAndPostTransferOrder(TransferHeader,TransferLine,LocationBlue.Code,LocationGreen.Code,Item."No.",Quantity);  // Psot Ship

      // Exercise. Calculate Plan.
      CalculatePlanForReqWksh(
        Item,CALCDATE('<' + FORMAT(RANDOM(5) + 10) + 'D>',WORKDATE),CALCDATE('<' + FORMAT(RANDOM(5) + 20) + 'D>',WORKDATE));

      // Verify. Verify Receipt Tracking line on Transfer Order and Requisition line for different Location.
      ItemTracking := ItemTracking::VerifyValue;  // Assign Global Variable for Page handler.
      TrackingQuantity := TransferLine.Quantity;  // Assign Global Variable for Page handler.
      TransferLine.OpenItemTrackingLines(Direction::Inbound); // Open Tracking Page on Page handler ItemTrackingPageHandler.
      VerifyRequisitionLineForLocation(Item."No.",LocationGreen.Code);
      VerifyRequisitionLineForLocation(Item."No.",LocationBlue.Code);
    END;

    [Test]
    PROCEDURE OutputJournalForReleasedProdOrderFlushingBackward@52();
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify ILE for Output after posting Output (exploded Routing on Output Journal) for Released Production Order.

      // Setup.
      Initialize;
      ProductionOrderWithOutputAndConsumption(FALSE);  // Change Status as False.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE ConsumptionJournalWithProductionOrderStatusFinished@161();
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify ILE for Consumption after posting Output (exploded Routing on Output Journal) and finishing Production Order.

      // Setup.
      Initialize;
      ProductionOrderWithOutputAndConsumption(TRUE);  // Change Status as True.
    END;

    LOCAL PROCEDURE ProductionOrderWithOutputAndConsumption@157(ChangeStatus@1008 : Boolean);
    VAR
      WorkCenter@1001 : Record 99000754;
      Item@1002 : Record 27;
      Item2@1003 : Record 27;
      Item3@1004 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionBOMLine@1006 : Record 99000772;
      ProductionOrder@1007 : Record 5405;
      ItemLedgerEntry@1009 : Record 32;
      DocNoIsProdOrderNo@1000 : Boolean;
    BEGIN
      // Create Work Center, Create Items, Update Items Inventory and Create Production BOM and Certify.
      DocNoIsProdOrderNo := UpdateManufacturingSetup(FALSE);
      CreateWorkCenter(WorkCenter);
      UpdateFlushingMethodOnWorkCenter(WorkCenter,WorkCenter."Flushing Method"::Backward);
      CreateMultipleItems(
        Item,Item2,Item3,Item."Replenishment System"::"Prod. Order",Item3."Replenishment System"::"Prod. Order",
        Item."Reordering Policy"::"Fixed Reorder Qty.",TRUE);
      UpdateItem(Item2,Item2.FIELDNO("Flushing Method"),Item2."Flushing Method"::Backward);
      UpdateItemInventory(Item2."No.",Item3."No.");
      CreateProductionBOMWithMultipleLinesAndCertify(
        ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",Item3."No.",
        LibraryRandom.RandInt(5));
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create and Refresh Released Production Order. Explode Routing on Output Journal.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);
      OutputJournalExplodeRouting(ProductionOrder);

      // Exercise: Post Output Journal. Change Production Order Status from Released to Finished.
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      IF ChangeStatus THEN BEGIN
        LibraryVariableStorage.Enqueue(FinishedStatusQst);  // Enqueue Value for Confirm Handler.
        LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      END;

      // Verify: Verify Item Ledger Entry - Entry Type Consumption for Finished Production Order.Verify Item Ledger Entry - Entry Type Output for Released Production Order.
      IF ChangeStatus THEN
        VerifyItemLedgerEntryForConsumption(Item2."No.",ItemLedgerEntry."Entry Type"::Consumption)
      ELSE
        VerifyItemLedgerEntryForOutput(Item."No.",ProductionOrder.Quantity,ItemLedgerEntry."Entry Type"::Output);

      // Tear Down.
      UpdateManufacturingSetup(DocNoIsProdOrderNo);
    END;

    [Test]
    PROCEDURE ProdOrderStartingDateTime@148();
    VAR
      WorkCenter@1007 : Record 99000754;
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      RoutingHeader@1005 : Record 99000763;
      RoutingLine@1006 : Record 99000764;
      ProductionOrder@1009 : Record 5405;
    BEGIN
      // Setup: Create Work Center, Create Items.
      Initialize;
      CreateWorkCenter(WorkCenter);
      CreateMultipleItems(
        Item,Item2,Item3,Item."Replenishment System"::"Prod. Order",Item3."Replenishment System"::"Prod. Order",
        Item."Reordering Policy"::Order,FALSE);

      // Update Manufacturing Policy On Items,
      UpdateItem(Item,Item.FIELDNO("Manufacturing Policy"),Item."Manufacturing Policy"::"Make-to-Order");
      UpdateItem(Item2,Item2.FIELDNO("Manufacturing Policy"),Item2."Manufacturing Policy"::"Make-to-Order");
      UpdateItem(Item3,Item3.FIELDNO("Manufacturing Policy"),Item3."Manufacturing Policy"::"Make-to-Order");

      // Create Production BOM with Multiple lines.
      CreateProductionBOMWithMultipleLinesAndCertify(
        ProductionBOMHeader,Item."Base Unit of Measure",ProductionBOMLine.Type::Item,Item2."No.",Item3."No.",1);
      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,LibraryRandom.RandInt(50),LibraryRandom.RandInt(50),0);  // Random values for Setup Time and RunTime.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);

      // Update Production BOM No and Routing on Item.
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingHeader."No.");
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandDec(10,2));
      UpdateProductionOrder(ProductionOrder,'');  // Location Code as Blank.

      // Exercise: Refresh Released Production Order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify Starting Date-Time on Production Order Line.
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      VerifyProdOrderLineForStartingDateTime(ProductionOrder."No.",ProductionOrder."Starting Date-Time");
    END;

    [Test]
    PROCEDURE CalculateSubcontractForReleasedProdOrderWithVariantCode@158();
    VAR
      WorkCenter@1000 : Record 99000754;
      Item@1001 : Record 27;
      RoutingHeader@1003 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      RequisitionLine@1009 : Record 246;
      ProdOrderLine@1008 : Record 5406;
    BEGIN
      // Setup: Create Work Center for subcontracting and create Item.
      Initialize;
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,FORMAT(LibraryRandom.RandInt(10)));  // Using Random value for OperationNo.
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");

      // Create Released Production Order and update Variant Code on Production Line.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);
      FindProdOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      CreateAndUpdateVariantCodeOnProductionOrderLine(ProdOrderLine);
      WorkCenter.SETRANGE("No.",WorkCenter."No.");

      // Exercise: Calculate Subcontract.
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);

      // Verify: Verify Variant Code in Requisition Line.
      FindRequisitionLineForProductionOrder(RequisitionLine,ProductionOrder);
      RequisitionLine.TESTFIELD("Variant Code",ProdOrderLine."Variant Code");
    END;

    [Test]
    PROCEDURE VSTF304018@64();
    VAR
      ProductionBOMHeader@1005 : Record 99000771;
      ParentItem@1004 : Record 27;
      ChildItem@1003 : Record 27;
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1001 : Record 5407;
      ProdOrderCompCmtLine@1002 : Record 5416;
    BEGIN
      // Setup: Create Item tree and Routing setup.
      Initialize;
      CreateItemHierarchy(ProductionBOMHeader,ParentItem,ChildItem,LibraryRandom.RandInt(10));

      // Add long description field for Prod. Order and Prod Order Component.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ParentItem."No.",
        LibraryRandom.RandDec(10,2));
      ProductionOrder.Description :=
        PADSTR('',LibraryUtility.GetFieldLength(DATABASE::"Production Order",ProductionOrder.FIELDNO(Description)),'A');
      ProductionOrder."Description 2" :=
        PADSTR('',LibraryUtility.GetFieldLength(DATABASE::"Production Order",ProductionOrder.FIELDNO("Description 2")),'A');
      ProductionOrder.MODIFY;

      ProdOrderComponent.INIT;
      ProdOrderComponent.Status := ProductionOrder.Status;
      ProdOrderComponent."Prod. Order No." := ProductionOrder."No.";
      ProdOrderComponent."Prod. Order Line No." := 10000;
      ProdOrderComponent."Line No." := 10000;
      ProdOrderComponent.INSERT;
      ProdOrderComponent."Item No." := ChildItem."No.";
      ProdOrderComponent."Quantity per" := LibraryRandom.RandDec(10,2);
      ProdOrderComponent.Description :=
        PADSTR('',LibraryUtility.GetFieldLength(DATABASE::"Prod. Order Component",ProdOrderComponent.FIELDNO(Description)),'A');
      ProdOrderComponent.MODIFY;

      // Verify: There is no overflow error when retrieving the caption.
      ProdOrderCompCmtLine.INIT;
      ProdOrderCompCmtLine.Status := ProdOrderComponent.Status;
      ProdOrderCompCmtLine."Prod. Order No." := ProdOrderComponent."Prod. Order No.";
      ProdOrderCompCmtLine."Prod. Order Line No." := ProdOrderComponent."Prod. Order Line No.";
      ProdOrderCompCmtLine."Prod. Order BOM Line No." := ProdOrderComponent."Line No.";
      ProdOrderCompCmtLine.INSERT;

      ProdOrderCompCmtLine.SETRANGE(Status,ProdOrderComponent.Status);
      ProdOrderCompCmtLine.SETRANGE("Prod. Order No.",ProdOrderComponent."Prod. Order No.");
      ProdOrderCompCmtLine.SETRANGE("Prod. Order Line No.",ProdOrderComponent."Prod. Order Line No.");
      ProdOrderCompCmtLine.SETRANGE("Prod. Order BOM Line No.",ProdOrderComponent."Line No.");

      ProdOrderCompCmtLine.Caption;
    END;

    [Test]
    PROCEDURE ChangeRtngOnProdOrdLnWithSubcontr@147();
    VAR
      ProdOrderLine@1000 : Record 5406;
      RoutingHeader@1002 : Record 99000763;
      PurchaseLine@1170000000 : Record 39;
    BEGIN
      // Check error when modifying routing No. on subcontracted Prod. Order line
      // Setup: Create 2 released prod. order lines, subcontract the first line
      Initialize;

      SetupProdOrdLnWithSubContr(ProdOrderLine);
      CreateRoutingSetup(RoutingHeader);

      // Get the first Prod. order line
      ProdOrderLine.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");

      // Exercise
      ASSERTERROR ProdOrderLine.VALIDATE("Routing No.",RoutingHeader."No.");

      // Verify: Existing Error Message
      Assert.AreEqual(STRSUBSTNO(ModifyRtngErr,ProdOrderLine."Routing No.",PurchaseLine.TABLECAPTION),GETLASTERRORTEXT,'');
    END;

    [Test]
    PROCEDURE DeleteProdOrdLnWithSubcontr@73();
    VAR
      ProdOrderLine@1000 : Record 5406;
      PurchaseLine@1170000000 : Record 39;
    BEGIN
      // Check error when deleting subcontracted Prod. Order line
      // Setup: Create 2 released prod. order lines, subcontract the first line
      Initialize;
      SetupProdOrdLnWithSubContr(ProdOrderLine);

      // Get the first Prod. order line
      ProdOrderLine.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");

      // Exercise
      ASSERTERROR ProdOrderLine.DELETE(TRUE);

      // Verify: Existing Error Message
      Assert.AreEqual(STRSUBSTNO(DeleteRtngErr,ProdOrderLine."Line No.",PurchaseLine.TABLENAME),GETLASTERRORTEXT,'');
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE DateConflictWhenOrderToOrderLink@78();
    VAR
      ChildItem@1000 : Record 27;
      ParentItem@1001 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      RequisitionLine@1005 : Record 246;
      ProductionOrder@1004 : Record 5405;
      VendorNo@1007 : Code[20];
    BEGIN
      // Verify Confirm message when Order-to-order link cannot be met after date change.

      // Setup: Create Items, Production BOM.
      Initialize;
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::Order,FALSE,0,0,0,'');
      UpdateItem(ChildItem,ChildItem.FIELDNO(Reserve),ChildItem.Reserve::Always);
      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::Order,FALSE,0,0,0,'');
      CreateProductionBOMAndCertify(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ProductionBOMLine.Type::Item,ChildItem."No.",
        LibraryRandom.RandInt(5));
      UpdateItem(ParentItem,ParentItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",LibraryRandom.RandDec(10,2),
        ProductionOrder."Source Type"::Item,FALSE);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      VendorNo := MakeSupplyOrdersFromRequisitionLine(ProductionOrder."No.",ChildItem."No.");

      // Exercise: Update Expected Receipt Date greater than Purchase Header Due Date on Purchase Lines Page.
      ASSERTERROR UpdateExpectedReceiptDateOnPurchaseLinesPage(VendorNo);

      // Verify: Verification done in ConfirmHandlerTRUE Handler.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ExpectedReceiptDateErr) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE RefreshProdOrderWithLateDueDate@68();
    BEGIN
      // Create Production Order with Item which has WorkCenter in routing with empty month in Calendar, due date
      // should be in empty month. Then refresh Production Order, and verify that Due Date is not changed.

      ManipulateProdOrderWithLateDueDate(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE RecalculateProdOrderLetDueDateDecrease@185();
    BEGIN
      // Create Production Order with Item which has WorkCenter in routing with empty month in Calendar, due date
      // should be in empty month. Then recalculate Production Order, and let due date decrease, and verify that
      // Due Date is changed.

      ManipulateProdOrderWithLateDueDate(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE RecalculateProdOrderBlockDueDateDecrease@175();
    BEGIN
      // Create Production Order with Item which has WorkCenter in routing with empty month in Calendar, due date
      // should be in empty month. Then recalculate Production Order, and block due date decrease, and verify that
      // Due Date is not changed.

      ManipulateProdOrderWithLateDueDate(FALSE,FALSE);
    END;

    LOCAL PROCEDURE ManipulateProdOrderWithLateDueDate@190(RefreshViaReport@1004 : Boolean;LetDueDateDecrease@1014 : Boolean);
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      DueDate@1010 : Date;
    BEGIN
      // Create Production Order with Item which has WorkCenter in routing with empty month in Calendar, due date
      // should be in empty month. Then Refresh / Replan Production Order, and verify that Due Date is changed / not changed.

      // Setup: Create Item for Production Order.
      Initialize;
      SetupItemForProduction(Item);

      // Exercise.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,
        Item."No.",LibraryRandom.RandDec(10,2));
      DueDate := ProductionOrder."Due Date";
      RefreshProductionOrder(ProductionOrder,RefreshViaReport,LetDueDateDecrease);

      // Verify.
      VerifyDueDate(ProductionOrder,DueDate,NOT LetDueDateDecrease);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,MessageHandler,ConfirmHandler,ProdOrderComponentsHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostingOutputJournalDifferentBOM@246();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      ProductionOrder@1004 : Record 5405;
      ItemLedgerEntry@1005 : Record 32;
    BEGIN
      // Setup;
      Initialize;

      CreateAndUpdateItems(ParentItem,ChildItem);
      CreateProductionBOMWithUOM(ParentItem,ChildItem);

      // Exercise:
      CreatePostItemJournal(ItemJournalLine,ChildItem."No.");

      CreateAndRefreshProdOrderWithItemTracking(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem,2,
        ProductionOrder."Source Type"::Item);

      OutputJournalExplodeRoutingAndPostJournal(ProductionOrder);

      // Verify output item ledger entries.
      VerifyItemLedgerEntryForOutput(ParentItem."No.",ProductionOrder.Quantity,ItemLedgerEntry."Entry Type"::Output);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DueDateRespectedForProductionOrderToOrderLink@195();
    VAR
      TopItem@1000 : Record 27;
      ChildItem@1001 : ARRAY [3] OF Record 27;
      BottomItem@1009 : Record 27;
      ComponentItem@1010 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      QtyPer@1007 : Decimal;
      RunTime@1012 : Integer;
    BEGIN
      // [FEATURE] [Component Item] [Calculate Regenerative Plan] [Due Date]
      // [SCENARIO 364485] Component Item "Ending Date" equals to earliest "Starting Date" for Parent Items in Requisition Line after planning.

      // [GIVEN] Create Production Items: "Top", which consists of "Child1", "Child2", "Child3", each "Child" Item consists of "Component" Item.
      // [GIVEN] "Top" Item has "Make-to-Order" Manufacturing Policy
      Initialize;

      RunTime := LibraryRandom.RandIntInRange(10,20);

      CreateItem(
        ComponentItem,ComponentItem."Replenishment System"::Purchase,
        ComponentItem."Reordering Policy"::"Lot-for-Lot",FALSE,0,0,0,'');

      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,ComponentItem."Base Unit of Measure",
        ProductionBOMLine.Type::Item,ComponentItem."No.",1);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      QtyPer := LibraryRandom.RandIntInRange(1,3);

      CreateMakeToOrderItem(BottomItem,ProductionBOMHeader."No.",1,RunTime);
      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,BottomItem."Base Unit of Measure",
        ProductionBOMLine.Type::Item,BottomItem."No.",4 * QtyPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      // [GIVEN] "Child*" Items have "Make-to-Order" Manufacturing Policy, and have a Routing with different RunTime.
      CreateMakeToOrderItem(ChildItem[1],ProductionBOMHeader."No.",7,3 * RunTime);
      CreateMakeToOrderItem(ChildItem[2],ProductionBOMHeader."No.",7,2 * RunTime);
      CreateMakeToOrderItem(ChildItem[3],ProductionBOMHeader."No.",7,RunTime);

      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,ChildItem[1]."Base Unit of Measure",
        ProductionBOMLine.Type::Item,ChildItem[1]."No.",QtyPer);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem[2]."No.",QtyPer);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem[3]."No.",QtyPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      CreateMakeToOrderItem(TopItem,ProductionBOMHeader."No.",7,RunTime);

      // [GIVEN] Create Sales Order with Item "Top", planned delivery date 4 months forward from WORKDATE.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,TopItem."No.",'','',LibraryRandom.RandIntInRange(50,100));
      SalesLine.VALIDATE("Planned Delivery Date",CALCDATE('<+4M>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      // [WHEN] Calculate Regenerative Plan
      ComponentItem.SETRANGE("No.",BottomItem."No.",TopItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(ComponentItem,CALCDATE('<-6M>',WORKDATE),CALCDATE('<+6M>',WORKDATE));

      // [THEN] Component Item "Ending Date" equals to "Starting Date" for "Child*" Items.
      VerifyRequisitionLineDueDates(
        BottomItem."No.",STRSUBSTNO('%1|%2|%3',ChildItem[1]."No.",ChildItem[2]."No.",ChildItem[3]."No."),4 * QtyPer);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BOMVersionBasedOnProductionOrderDueDate@198();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1010 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      ProductionBOMVersion@1006 : Record 99000779;
      DueDate@1012 : Date;
      ComponentQuantity@1007 : Decimal;
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan] [Carry Out Action Message] [BOM] [BOM Version] [Due Date]
      // [SCENARIO 364356] Carry Out Action Message creates Production Order with BOM Version on Due Date.

      // [GIVEN] Create production Item "Parent" with BOM of 1 "Component" Item.
      Initialize;

      CreateItem(
        ComponentItem,ComponentItem."Replenishment System"::Purchase,
        ComponentItem."Reordering Policy"::"Lot-for-Lot",FALSE,0,0,0,'');

      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,ComponentItem."Base Unit of Measure",
        ProductionBOMLine.Type::Item,ComponentItem."No.",1);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      CreateMakeToOrderItem(ParentItem,ProductionBOMHeader."No.",1,100);

      // [GIVEN] Create BOM Version with future Starting Date "X", modified "Qty. Per" = "A"
      DueDate := CALCDATE('<+10D>',WORKDATE);
      ComponentQuantity := LibraryRandom.RandIntInRange(5,10);

      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMHeader."No.",
        FORMAT(LibraryRandom.RandInt(10)),ComponentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",
        ProductionBOMLine.Type::Item,ComponentItem."No.",ComponentQuantity);
      CertifiedStatusOnProductionBOMVersion(ProductionBOMVersion);

      // [GIVEN] Create Sales Order with "Parent" Item of Quantity 1, Due Date = "X".
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Due Date",DueDate);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,ParentItem."No.",'','',1);

      // [GIVEN] Calculate Regenerative Plan
      ParentItem.SETRANGE("No.",ParentItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(ParentItem,CALCDATE('<-1M>',WORKDATE),CALCDATE('<+1M>',WORKDATE));

      // [WHEN] Carry Out Action Message
      CarryOutActionMsgForItem(ParentItem."No.");

      // [THEN] Production Order Component Item is of Quantity "A".
      VerifyProdOrderComponentQuantity(ParentItem."No.",ComponentItem."No.",ComponentQuantity);
    END;

    [Test]
    PROCEDURE DimensionOnOutputJournal@182();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1002 : Record 99000764;
      ProductionOrder@1003 : Record 5405;
      ItemJournalLine@1008 : Record 83;
      DimensionValue@1005 : ARRAY [4] OF Record 349;
    BEGIN
      // Verify Dimension should be taken from the Production Order line when manually create a Output Journal

      // Setup: Create Item with Routing
      Initialize;
      CreateAndCertifyRoutingSetup(RoutingHeader,RoutingLine);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingHeader."No.");

      // Create 2 Dimensions, per Dimension with 2 Dimension Values. Add the 2 Dimensions on Work Center.
      UpdateWorkCenterWithDimension(DimensionValue[1],DimensionValue[2],RoutingLine."Work Center No.");
      UpdateWorkCenterWithDimension(DimensionValue[3],DimensionValue[4],RoutingLine."Work Center No.");

      // Create and Refresh Production Order, update the Dimension Value for 1st Dimension
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5),
        ProductionOrder."Source Type"::Item,FALSE);
      AddDimensionOnProductionLine(ProductionOrder."No.",DimensionValue[2]."Dimension Code",DimensionValue[2].Code);

      // Exercise: Create a Output Jounal for Production Order
      CreateOutputJournal(ProductionOrder,ItemJournalLine,RoutingLine."Operation No.");

      // Verify: Verify Dimension Value should be taken from the Production Order line if exist, otherwise, taken from Work Center Card
      VerifyDimensionValuesInItemJournal(DimensionValue,ItemJournalLine."Dimension Set ID");

      // Exercise: Clear the Work Center No. in Item Journal Line
      ItemJournalLine.VALIDATE("Work Center No.",'');
      ItemJournalLine.MODIFY(TRUE);

      // Verify: Verify Dimension Value should be taken from the Production Order line if exist, otherwise, taken from Work Center Card
      VerifyDimensionValuesInItemJournal(DimensionValue,ItemJournalLine."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DueDatesEqualForProductionOrderToOrderLink@205();
    VAR
      TopItem@1000 : Record 27;
      ChildItem@1001 : ARRAY [3] OF Record 27;
      BottomItem@1009 : Record 27;
      ComponentItem@1010 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1002 : Record 99000772;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      QtyPer@1007 : Decimal;
      RunTime@1012 : Integer;
    BEGIN
      // [FEATURE] [Component Item] [Calculate Regenerative Plan] [Due Date]
      // [SCENARIO 364485] Component Item "Ending Date" equals to "Starting Date" for Parent Items, if they have the same "Starting Date", in Requisition Line after planning.

      // [GIVEN] Create Production Items: "Top", which consists of "Child1", "Child2", "Child3", each "Child" Item consists of "Component" Item.
      // [GIVEN] "Top" Item have "Make-to-Order" Manufacturing Policy
      Initialize;

      RunTime := LibraryRandom.RandIntInRange(10,20);

      CreateItem(
        ComponentItem,ComponentItem."Replenishment System"::Purchase,
        ComponentItem."Reordering Policy"::"Lot-for-Lot",FALSE,0,0,0,'');

      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,ComponentItem."Base Unit of Measure",
        ProductionBOMLine.Type::Item,ComponentItem."No.",1);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      QtyPer := LibraryRandom.RandIntInRange(1,3);

      CreateMakeToOrderItem(BottomItem,ProductionBOMHeader."No.",1,RunTime);
      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,BottomItem."Base Unit of Measure",
        ProductionBOMLine.Type::Item,BottomItem."No.",4 * QtyPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      // [GIVEN] "Child*" Items have "Make-to-Order" Manufacturing Policy, and have a Routing with the same RunTime.
      CreateMakeToOrderItem(ChildItem[1],ProductionBOMHeader."No.",7,RunTime);
      CreateMakeToOrderItem(ChildItem[2],ProductionBOMHeader."No.",7,RunTime);
      CreateMakeToOrderItem(ChildItem[3],ProductionBOMHeader."No.",7,RunTime);

      CreateProductionBOM(
        ProductionBOMHeader,ProductionBOMLine,ChildItem[1]."Base Unit of Measure",
        ProductionBOMLine.Type::Item,ChildItem[1]."No.",QtyPer);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem[2]."No.",QtyPer);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem[3]."No.",QtyPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      CreateMakeToOrderItem(TopItem,ProductionBOMHeader."No.",7,RunTime);

      // [GIVEN] Create Sales Order with Item "Top", planned delivery date 4 months forward from WORKDATE.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,TopItem."No.",'','',LibraryRandom.RandIntInRange(50,100));
      SalesLine.VALIDATE("Planned Delivery Date",CALCDATE('<+4M>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      // [WHEN] Calculate Regenerative Plan
      ComponentItem.SETRANGE("No.",BottomItem."No.",TopItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(ComponentItem,CALCDATE('<-6M>',WORKDATE),CALCDATE('<+6M>',WORKDATE));

      // [THEN] Component Item "Ending Date" equals to "Starting Date" for "Child*" Items.
      VerifyRequisitionLineDueDates(
        BottomItem."No.",STRSUBSTNO('%1|%2|%3',ChildItem[1]."No.",ChildItem[2]."No.",ChildItem[3]."No."),4 * QtyPer);
    END;

    [Test]
    PROCEDURE UTRoutingVersionNoSeries@129();
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingVersion@1003 : Record 99000786;
      ExpectedVersionNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [No. Series] [Routing Version]
      // [SCENARIO 158148] Can create Routing Version with default "No. Series" if "Starting No." length > 10.

      // [GIVEN] "No. Series" with "Starting No." of length > 10
      Initialize;

      // [GIVEN] Createt Routing with "No. Series"
      WITH RoutingHeader DO BEGIN
        INIT;
        VALIDATE("Version Nos.",CreateLongNoSeries(ExpectedVersionNo));
        INSERT(TRUE);
      END;

      // [WHEN] Create new Version for Routing
      WITH RoutingVersion DO BEGIN
        INIT;
        VALIDATE("Routing No.",RoutingHeader."No.");
        INSERT(TRUE);

        // [THEN] "Version Code" equals to "Starting No." of "No. Series"
        Assert.AreEqual("Version Code",ExpectedVersionNo,WrongVersionCodeErr);
      END;
    END;

    [Test]
    PROCEDURE UTProductionBOMVersionNoSeries@189();
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMVersion@1001 : Record 99000779;
      ExpectedVersionNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [No. Series] [Production BOM Version]
      // [SCENARIO 158148] Can create Production BOM Version with default "No. Series" if "Starting No." length > 10.

      // [GIVEN] "No. Series" with "Starting No." of length > 10
      Initialize;

      // [GIVEN] Create Production BOM with "No. Series"
      WITH ProductionBOMHeader DO BEGIN
        INIT;
        VALIDATE("Version Nos.",CreateLongNoSeries(ExpectedVersionNo));
        INSERT(TRUE);
      END;

      // [WHEN] Create new Version for Production BOM
      WITH ProductionBOMVersion DO BEGIN
        INIT;
        VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
        INSERT(TRUE);

        // [THEN] "Version Code" equals to "Starting No." of "No. Series"
        Assert.AreEqual("Version Code",ExpectedVersionNo,WrongVersionCodeErr);
      END;
    END;

    [Test]
    PROCEDURE ReValidatingUnitOfMeasureCodeOnProdBOMLine@203();
    VAR
      ProductionBOMLine@1000 : Record 99000772;
      UnitOfMeasure@1001 : Record 204;
    BEGIN
      // [FEATURE] [Production BOM] [UT]
      // [SCENARIO 377362] Re-Validating Unit of Measure Code to itself should be possible for any Type of Production BOM Line
      Initialize;

      // [GIVEN] Production BOM Line with Type = "Production BOM" and Unit of Measure = "X"
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      MockProdBOMLineWithUoM(ProductionBOMLine,UnitOfMeasure.Code);

      // [WHEN] Re-Validate Unit of Measure to "X"
      ProductionBOMLine.VALIDATE("Unit of Measure Code",UnitOfMeasure.Code);

      // [THEN] Unit of Measure Code is "X"
      ProductionBOMLine.TESTFIELD("Unit of Measure Code",UnitOfMeasure.Code);
    END;

    [Test]
    PROCEDURE RoutingVersionIsBasedOnTheDueDateField@208();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1014 : Record 36;
      SalesLine@1015 : Record 37;
      RoutingNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Routing Version] [Planning Worksheet]
      // [SCENARIO 379350] Production Order Routing Line should be created from record Routing Version on carrying out Production Order Proposal from Planning Worksheet.
      Initialize;

      // [GIVEN] Item and Routing Version.
      CreateItemAndRoutingVersion(Item,RoutingNo);
      // [GIVEN] Create Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",'');
      // [GIVEN] Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // [WHEN] Carry Out Action Messages to create a Production Order.
      CarryOutActionMsgForItem(Item."No.");

      // [THEN] Verify Production Order Routing Line should show line from Routing version.
      VerifyProdOrderRoutingLineIsNotEmpty(RoutingNo);
    END;

    [Test]
    PROCEDURE CapableToPromiseWhenQueueTimeUOMAsDay@212();
    VAR
      WorkCenter@1002 : Record 99000754;
      CapacityUnitOfMeasure@1006 : Record 99000780;
      Item@1007 : Record 27;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      TempOrderPromisingLine@1011 : TEMPORARY Record 99000880;
      ReqWkshTemplate@1004 : Record 244;
      OldReqTemplateType@1000 : Option;
      MachineCenterNo@1015 : Code[20];
      RoutingNo@1014 : Code[20];
      ExpectedShipmentDate@1001 : Date;
      QueueTime@1003 : Decimal;
    BEGIN
      // [FEATURE] [Machine Center] [Routing] [Queue Time] [Production]
      // [SCENARIO 379754] "Calculate Capable to Promise" should be performed when Type of UOM in the 1st Routing Line as Days and Type of Queue Time UOM in the 2nd Routing Line as Minutes.
      Initialize;
      OldReqTemplateType := ChangeTypeInReqWkshTemplate(ReqWkshTemplate.Type::Planning);

      // [GIVEN] Work Center with Capacity Unit Of Measure having Type as Days.
      CreateWorkCenterFullWorkingWeekCalendar(WorkCenter,CapacityUnitOfMeasure.Type::Days,160000T,235959T);
      // [GIVEN] Work Center including Machine Center with Queue Time more than 7 hours and all other time = 0.
      QueueTime := LibraryRandom.RandIntInRange(420,450);
      MachineCenterNo := CreateMachineCenterWithQueueTime(QueueTime);
      // [GIVEN] Routing with two Sequential Operations (1 - Work Center, 2 - Machine Center).
      RoutingNo := CreateRoutingWithSequentialOperations(WorkCenter."No.",MachineCenterNo);
      // [GIVEN] Item using Routing.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,RoutingNo);
      // [GIVEN] Create Sales Order for Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code);

      // [WHEN] Calculate Capable to Promise.
      CalcCapableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] "Earliest Shipment Date" is calculated as "Original Shipment Date" + <1D> according to "Queue Time".
      ExpectedShipmentDate :=
        CALCDATE('<' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',
          CALCDATE('<' + FORMAT(LocationBlue."Inbound Whse. Handling Time") + '>',
            CALCDATE('<1D>',TempOrderPromisingLine."Original Shipment Date")));
      VerifyEarliestShipmentDate(ExpectedShipmentDate,TempOrderPromisingLine);
      ChangeTypeInReqWkshTemplate(OldReqTemplateType);
    END;

    [Test]
    PROCEDURE CalculateSubcontractsForMultilineProductionOrder@210();
    VAR
      WorkCenter@1000 : Record 99000754;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // [FEATURE] [Production] [Subcontracting] [Calculate Subcontracts]
      // [SCENARIO 380493] "Calculate Subcontracts" in subcontracting worksheet creates worksheet lines for multiline production order

      // [GIVEN] Subcontracting work center "W", routing "R" including work center "W"
      // [GIVEN] Production order with two lines, both with routing "R"
      Initialize;
      CreateProdOrderWithSubcontractWorkCenter(WorkCenter,ProductionOrder);

      // [WHEN] Run subcontracting worksheet and execute "Calculate Subcontracts"
      CalculateSubcontractOrder(RequisitionLine,WorkCenter."No.",ProductionOrder);

      // [THEN] Two requisition lines created - one worksheet line per production order line
      Assert.RecordCount(RequisitionLine,2);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDSET;
      REPEAT
        VerifyProdOrderRequisitionLine(ProdOrderLine);
      UNTIL ProdOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      NoSeriesSetup;
      ItemJournalSetup;
      CapacityJournalSetup;
      OutputJournalSetup;
      CreateLocationSetup;
      ManufacturingSetup.GET;

      Initialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@131();
    BEGIN
      // Location -Blue.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);

      // Location -Green.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationGreen);
      LocationGreen.VALIDATE("Require Put-away",TRUE);
      LocationGreen.VALIDATE("Require Receive",TRUE);
      LocationGreen.VALIDATE("Require Pick",TRUE);
      LocationGreen.VALIDATE("Require Shipment",TRUE);
      LocationGreen.MODIFY(TRUE);

      // Location -Intransit.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationInTransit);
      LocationInTransit.VALIDATE("Use As In-Transit",TRUE);
      LocationInTransit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@50();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE OutputJournalSetup@149();
    BEGIN
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      OutputItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      OutputItemJournalTemplate.MODIFY(TRUE);

      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
      OutputItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      OutputItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CapacityJournalSetup@133();
    BEGIN
      CapacityItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(CapacityItemJournalTemplate,CapacityItemJournalTemplate.Type::Capacity);
      CapacityItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      CapacityItemJournalTemplate.MODIFY(TRUE);

      CapacityItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        CapacityItemJournalBatch,CapacityItemJournalTemplate.Type,CapacityItemJournalTemplate.Name);
      CapacityItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      CapacityItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSubcontractingSetup@99(VAR WorkCenter@1000 : Record 99000754;VAR RoutingHeader@1001 : Record 99000763;OperationNo@1004 : Code[10]);
    VAR
      RoutingLine@1002 : Record 99000764;
      MachineCenter@1003 : Record 99000758;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenterSetup(MachineCenter,WorkCenter."No.");
      CreateRouting(RoutingHeader,RoutingLine,MachineCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Machine Center");
      UpdateRoutingLine(RoutingLine,LibraryRandom.RandInt(15),LibraryRandom.RandInt(15),0);

      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,0,WorkCenter."No.");
      RoutingLine.VALIDATE("Wait Time",LibraryRandom.RandInt(5));
      RoutingLine.MODIFY(TRUE);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE SetupItemForProduction@178(VAR Item@1016 : Record 27);
    VAR
      CapacityUnitOfMeasure@1015 : Record 99000780;
      RoutingHeader@1014 : Record 99000763;
      RoutingLine@1013 : Record 99000764;
      WorkCenter@1007 : Record 99000754;
      LotAccumulationPeriod@1005 : DateFormula;
      ReschedulingPeriod@1004 : DateFormula;
      RunTime@1002 : Decimal;
    BEGIN
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      RunTime := 10 + LibraryRandom.RandDec(10,2);
      ClearWorkCenterCalendar(WorkCenter,CALCDATE('<-CM>',WORKDATE),CALCDATE('<+CM>',WORKDATE));

      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,0,RunTime,0);  // Setup Time value important.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(
        Item,Item."Replenishment System"::"Prod. Order",
        Item."Reordering Policy"::"Lot-for-Lot",FALSE,0,0,0,RoutingHeader."No.");
      WITH Item DO BEGIN
        EVALUATE(LotAccumulationPeriod,'<1D>');
        EVALUATE(ReschedulingPeriod,'<1D>');
        VALIDATE("Lot Accumulation Period",LotAccumulationPeriod);
        VALIDATE("Rescheduling Period",ReschedulingPeriod);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE MakeSupplyOrders@79(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;CreatePurchaseOrder@1002 : Option);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,CreatePurchaseOrder);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE MakeSupplyOrdersFromRequisitionLine@193(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20]) : Code[20];
    VAR
      RequisitionLine@1003 : Record 246;
      Vendor@1000 : Record 23;
      ManufacturingUserTemplate@1004 : Record 5525;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      UpdateRequisitionLineWithSupplyFrom(ProductionOrderNo,ItemNo,Vendor."No.");
      FilterRequisitionLine(RequisitionLine,ItemNo);
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"All Lines",
        ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders");
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@82(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreatePurchaseOrder@1002 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,CreatePurchaseOrder,
          ManufacturingUserTemplate."Create Production Order"::" ",
          ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE SelectWorkCenter@110(VAR WorkCenter@1002 : Record 99000754;RoutingNo@1001 : Code[20]);
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE(Type,RoutingLine.Type::"Work Center");
      RoutingLine.FINDFIRST;
      WorkCenter.GET(RoutingLine."No.");
    END;

    LOCAL PROCEDURE CreateItem@43(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;ReorderingPolicy@1002 : Option;IncludeInventory@1003 : Boolean;ReorderPoint@1004 : Decimal;ReorderQuantity@1005 : Decimal;MaximumInventory@1006 : Decimal;RoutingNo@1007 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Include Inventory",IncludeInventory);
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStockItem@204(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;LeadDatesFormula@1002 : DateFormula);
    VAR
      ItemCategory@1008 : Record 5722;
    BEGIN
      LibraryInventory.CreateItemCategory(ItemCategory);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Item Category Code",ItemCategory.Code);
      Item.VALIDATE("Lead Time Calculation",LeadDatesFormula);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMakeToOrderItem@224(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20];DampenerDays@1005 : Integer;RunTime@1007 : Integer);
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      WorkCenter@1004 : Record 99000754;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<+5M>',WORKDATE));
      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,0,RunTime,0); // Run Time
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      WITH Item DO BEGIN
        CreateItem(Item,"Replenishment System"::"Prod. Order","Reordering Policy"::Order,FALSE,0,0,0,RoutingHeader."No.");
        VALIDATE("Manufacturing Policy","Manufacturing Policy"::"Make-to-Order");
        VALIDATE("Order Tracking Policy","Order Tracking Policy"::"Tracking & Action Msg.");
        VALIDATE("Production BOM No.",ProductionBOMNo);
        EVALUATE("Dampener Period",'<' + FORMAT(DampenerDays) + 'D>');
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateMultipleItems@97(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;VAR Item3@1002 : Record 27;ReplenishmentSystem@1003 : Option;ReplenishmentSystem2@1004 : Option;ReorderingPolicy@1005 : Option;IncludeInventory@1006 : Boolean);
    BEGIN
      CreateItem(Item,ReplenishmentSystem,ReorderingPolicy,IncludeInventory,0,0,0,'');
      CreateItem(Item2,ReplenishmentSystem,ReorderingPolicy,IncludeInventory,0,0,0,'');
      CreateItem(Item3,ReplenishmentSystem2,ReorderingPolicy,IncludeInventory,0,0,0,'');
    END;

    LOCAL PROCEDURE RefreshProductionOrder@188(VAR ProductionOrder@1001 : Record 5405;ViaReport@1000 : Boolean;LetDueDateDecrease@1002 : Boolean);
    VAR
      ProdOrderLine@1006 : Record 5406;
      CalculateProdOrder@1005 : Codeunit 99000773;
      Direction@1003 : 'Forward,Backward';
    BEGIN
      // Just refresh production order in order to create lines
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      IF NOT ViaReport THEN // Calculate it again
        WITH ProdOrderLine DO BEGIN
          SETRANGE(Status,ProductionOrder.Status);
          SETRANGE("Prod. Order No.",ProductionOrder."No.");
          IF FIND('-') THEN
            REPEAT
              CalculateProdOrder.Calculate(ProdOrderLine,Direction::Backward,TRUE,TRUE,FALSE,LetDueDateDecrease)
            UNTIL NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE CreateAndUpdateItems@239(VAR ParentItem@1002 : Record 27;VAR ChildItem@1001 : Record 27);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      UnitOfMeasure@1005 : Record 204;
      RoutingHeader@1004 : Record 99000763;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      CreateItemWithUOM(ParentItem,UnitOfMeasure.Code,ParentItem."Replenishment System"::"Prod. Order");
      WITH ParentItem DO BEGIN
        RoutingHeader.FINDFIRST;
        VALIDATE("Routing No.",RoutingHeader."No.");
        MODIFY(TRUE);
      END;

      CreateItemWithUOM(ChildItem,ParentItem."Base Unit of Measure",ChildItem."Replenishment System"::Purchase);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ChildItem."No.",UnitOfMeasure.Code,LibraryRandom.RandInt(5));

      ChildItem.VALIDATE("Flushing Method",ChildItem."Flushing Method"::Backward);
      LibraryItemTracking.AddLotNoTrackingInfo(ChildItem);
    END;

    LOCAL PROCEDURE CreateItemWithUOM@285(VAR Item@1000 : Record 27;UnitOfMeasureCode@1001 : Code[10];ReplenishmentSystem@1003 : Option);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasureCode,1);
      WITH Item DO BEGIN
        VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
        VALIDATE("Replenishment System",ReplenishmentSystem);
      END;
    END;

    LOCAL PROCEDURE UpdateItem@89(VAR Item@1000 : Record 27;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Item based on Field and its corresponding value.
      RecRef.GETTABLE(Item);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(Item);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrderComponent@151(VAR ProdOrderComponent@1000 : Record 5407;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Production Order Component based on Field and its corresponding value.
      RecRef.GETTABLE(ProdOrderComponent);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ProdOrderComponent);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@49(VAR RequisitionWkshName@1002 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::Planning);
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateLongNoSeries@244(VAR StartingNo@1002 : Code[20]) : Code[10];
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,FALSE,FALSE);
      StartingNo := 'X0000000000000001'; // specific value, length > 10
      LibraryUtility.CreateNoSeriesLine(
        NoSeriesLine,NoSeries.Code,StartingNo,INCSTR(StartingNo));
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE ChangeDimensionItemJournalLine@121(VAR ItemJournalLine@1000 : Record 83;WorkCenterNo@1001 : Code[20];DimensionValue@1002 : Record 349);
    VAR
      DimSetID@1003 : Integer;
    BEGIN
      ItemJournalLine.SETRANGE("Work Center No.",WorkCenterNo);
      ItemJournalLine.FINDFIRST;
      DimSetID := ItemJournalLine."Dimension Set ID";
      ItemJournalLine.VALIDATE(
        "Dimension Set ID",LibraryDimension.EditDimSet(DimSetID,DimensionValue."Dimension Code",DimensionValue.Code));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeTypeInReqWkshTemplate@222(NewReqTemplateType@1000 : Option) OldReqTemplateType : Integer;
    VAR
      RequisitionLine@1003 : Record 246;
      OrderPromisingSetup@1002 : Record 99000875;
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      RequisitionLine.DELETEALL(TRUE);
      OrderPromisingSetup.GET;
      ReqWkshTemplate.GET(OrderPromisingSetup."Order Promising Template");
      OldReqTemplateType := ReqWkshTemplate.Type;
      ReqWkshTemplate.Type := NewReqTemplateType;
      ReqWkshTemplate.MODIFY;
    END;

    LOCAL PROCEDURE FindItemJournalBatch@102(VAR ItemJournalBatch2@1000 : Record 233);
    VAR
      ItemJournalTemplate2@1001 : Record 82;
    BEGIN
      ItemJournalTemplate2.SETRANGE(Type,ItemJournalTemplate2.Type::Output);
      ItemJournalTemplate2.FINDFIRST;
      ItemJournalBatch2.SETRANGE("Journal Template Name",ItemJournalTemplate2.Name);
      ItemJournalBatch2.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLineForProductionOrder@88(VAR RequisitionLine@1000 : Record 246;ProductionOrder@1001 : Record 5405);
    BEGIN
      RequisitionLine.SETCURRENTKEY("Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No.");
      RequisitionLine.SETRANGE("No.",ProductionOrder."Source No.");
      RequisitionLine.SETRANGE("Ref. Order Status",ProductionOrder.Status);
      RequisitionLine.SETRANGE("Ref. Order No.",ProductionOrder."No.");
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateItemJournalLine@126(VAR ItemJournalLine@1000 : Record 83;WorkCenterNo@1001 : Code[20]);
    VAR
      GenProductPostingGroup@1002 : Record 251;
    BEGIN
      GenProductPostingGroup.FINDFIRST;
      ItemJournalLine.SETRANGE("Work Center No.",WorkCenterNo);
      ItemJournalLine.FINDSET;
      REPEAT
        ItemJournalLine.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateRoutingStatus@166(VAR RoutingHeader@1000 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRequisitionLineWithSupplyFrom@33(DemandOrderNo@1001 : Code[20];No@1002 : Code[20];SupplyFrom@1003 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Supply From",SupplyFrom);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMHeaderStatus@69(VAR ProductionBOMHeader@1000 : Record 99000771;Status@1001 : Option);
    BEGIN
      ProductionBOMHeader.VALIDATE(Status,Status);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionOrder@168(VAR ProductionOrder@1000 : Record 5405;LocationCode@1001 : Code[10]);
    BEGIN
      ProductionOrder.VALIDATE("Due Date",WORKDATE);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcCapableToPromise@216(VAR TempOrderPromisingLine@1000 : TEMPORARY Record 99000880;VAR SalesHeader@1003 : Record 36);
    VAR
      AvailabilityManagement@1002 : Codeunit 99000889;
    BEGIN
      AvailabilityManagement.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityManagement.CalcCapableToPromise(TempOrderPromisingLine,SalesHeader."No.");
    END;

    LOCAL PROCEDURE CalculateSubcontractOrder@215(VAR RequisitionLine@1000 : Record 246;WorkCenterNo@1001 : Code[20];ProductionOrder@1003 : Record 5405);
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      WorkCenter.SETRANGE("No.",WorkCenterNo);
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);
      FindRequisitionLineForProductionOrder(RequisitionLine,ProductionOrder);
    END;

    LOCAL PROCEDURE CarryOutActionMsgForItem@201(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateItemHierarchy@29(VAR ProductionBOMHeader@1002 : Record 99000771;VAR ParentItem@1000 : Record 27;VAR ChildItem@1001 : Record 27;QuantityPer@1005 : Integer);
    VAR
      ProductionBOMLine@1004 : Record 99000772;
    BEGIN
      IF ChildItem."No." = '' THEN
        CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::" ",FALSE,0,0,0,'');
      IF ParentItem."No." = '' THEN
        CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::" ",FALSE,0,0,0,'');
      IF ProductionBOMHeader."No." = '' THEN
        LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ParentItem."Base Unit of Measure")
      ELSE
        UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::New);

      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMHeader."No.");
      ProductionBOMLine.SETRANGE("Version Code",'');
      ProductionBOMLine.SETRANGE(Type,ProductionBOMLine.Type::Item);
      ProductionBOMLine.SETRANGE("No.",ChildItem."No.");
      IF NOT ProductionBOMLine.FINDFIRST THEN
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem."No.",QuantityPer)
      ELSE BEGIN
        ProductionBOMLine.VALIDATE("Quantity per",QuantityPer);
        ProductionBOMLine.MODIFY(TRUE);
      END;
      UpdateItem(ParentItem,ParentItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
      ParentItem.GET(ParentItem."No.");
      ChildItem.GET(ChildItem."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@37(VAR ProductionOrder@1000 : Record 5405;Status@1003 : Option;SourceNo@1001 : Code[20];Quantity@1002 : Decimal;SourceType@1004 : Option;Forward@1005 : Boolean);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,Forward,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrderWithItemTracking@245(VAR ProductionOrder@1000 : Record 5405;Status@1003 : Option;Item1@1008 : Record 27;Quantity@1002 : Decimal;SourceType@1004 : Option);
    VAR
      ProdOrderLine@1001 : Record 5406;
      ReleasedProductionOrder@1006 : TestPage 99000831;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,Item1."No.",Quantity);
      ProductionOrder.VALIDATE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.VALIDATE("Source No.",Item1."No.");

      ProdOrderLine.Status := ProdOrderLine.Status::"Firm Planned";
      WITH ProdOrderLine DO BEGIN
        INIT;
        "Prod. Order No." := ProductionOrder."No.";
        "Line No." := 10000;
        "Item No." := Item1."No.";
        "Unit of Measure Code" := Item1."Base Unit of Measure";
        VALIDATE(Quantity,LibraryRandom.RandInt(5));
        "Due Date" := WORKDATE;
        INSERT;
      END;
      ProductionOrder.MODIFY(TRUE);

      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");
      ReleasedProductionOrder.FIRST;
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);
      ReleasedProductionOrder.ProdOrderLines.Components.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndCertifyRoutingSetup@42(VAR RoutingHeader@1001 : Record 99000763;VAR RoutingLine@1003 : Record 99000764);
    VAR
      CapacityUnitOfMeasure@1002 : Record 99000780;
      WorkCenter@1000 : Record 99000754;
    BEGIN
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      UpdateRoutingLine(RoutingLine,LibraryRandom.RandInt(10),LibraryRandom.RandInt(10),0);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateWorkCenterSetup@53(VAR WorkCenter@1004 : Record 99000754;CapacityType@1000 : Option;StartTime@1001 : Time;EndTime@1002 : Time);
    VAR
      GeneralPostingSetup@1003 : Record 252;
      CapacityUnitOfMeasure@1005 : Record 99000780;
    BEGIN
      CapacityUnitOfMeasure.SETRANGE(Type,CapacityType);
      CapacityUnitOfMeasure.FINDFIRST;
      LibraryERM.FindGenPostingSetupWithDefVAT(GeneralPostingSetup);
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      WorkCenter.VALIDATE("Unit of Measure Code",CapacityUnitOfMeasure.Code);
      WorkCenter.VALIDATE("Shop Calendar Code",UpdateShopCalendarWorkingDays(StartTime,EndTime));
      WorkCenter.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      WorkCenter.MODIFY(TRUE);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-2M>',WORKDATE),CALCDATE('<2M>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateMachineCenterSetup@34(VAR MachineCenter@1000 : Record 99000758;WorkCenterNo@1001 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(10,1));
    END;

    LOCAL PROCEDURE CreateMachineCenterWithQueueTime@232(QueueTime@1000 : Decimal) : Code[20];
    VAR
      WorkCenter@1001 : Record 99000754;
      MachineCenter@1003 : Record 99000758;
      CapacityUnitOfMeasure@1002 : Record 99000780;
    BEGIN
      CreateWorkCenterFullWorkingWeekCalendar(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Minutes);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(10,1));
      WITH MachineCenter DO BEGIN
        VALIDATE("Queue Time",QueueTime);
        VALIDATE("Queue Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
        MODIFY(TRUE);
      END;
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1W>',WORKDATE),CALCDATE('<1W>',WORKDATE));
      EXIT(MachineCenter."No.");
    END;

    LOCAL PROCEDURE CreateMultipleWorkCenterSetup@93(VAR WorkCenter@1000 : Record 99000754;VAR WorkCenter2@1001 : Record 99000754;VAR RoutingHeader@1002 : Record 99000763);
    VAR
      CapacityUnitOfMeasure@1004 : Record 99000780;
      RoutingLine@1003 : Record 99000764;
    BEGIN
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      CreateWorkCenterSetup(WorkCenter2,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',FORMAT(LibraryRandom.RandInt(10)),RoutingLine.Type::"Work Center",WorkCenter."No.");
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',FORMAT(10 + LibraryRandom.RandInt(10)),RoutingLine.Type::"Work Center",WorkCenter2."No.");
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateProdOrderWithSubcontractWorkCenter@221(VAR WorkCenter@1000 : Record 99000754;VAR ProductionOrder@1003 : Record 5405);
    VAR
      RoutingHeader@1001 : Record 99000763;
      Item@1002 : Record 27;
    BEGIN
      CreateSubcontractingSetup(WorkCenter,RoutingHeader,FORMAT(10 + LibraryRandom.RandInt(10)));
      CreateProdItem(Item,RoutingHeader."No.");

      // Create a released Prod. Order, create 2 Prod. Order lines, calculate routings
      SetupProdOrdWithRtng(ProductionOrder,Item."No.");
    END;

    LOCAL PROCEDURE CreateRoutingOperation@219(VAR RoutingHeader@1001 : Record 99000763;VAR RoutingLine@1000 : Record 99000764;OperationNo@1009 : Code[10];Type@1010 : Option;CenterNo@1011 : Code[20];NextOperationNo@1007 : Code[30]);
    BEGIN
      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,Type,CenterNo);
      RoutingLine.VALIDATE("Next Operation No.",NextOperationNo);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingWithSequentialOperations@214(WorkCenterNo@1007 : Code[20];MachineCenterNo@1008 : Code[20]) : Code[20];
    VAR
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1000 : Record 99000764;
      PreviousOperationNo@1004 : Code[10];
      NextOperationNo@1003 : Code[10];
    BEGIN
      PreviousOperationNo := '10';
      NextOperationNo := '20';
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingOperation(
        RoutingHeader,RoutingLine,PreviousOperationNo,RoutingLine.Type::"Work Center",WorkCenterNo,NextOperationNo);
      CreateRoutingOperation(
        RoutingHeader,RoutingLine,NextOperationNo,RoutingLine.Type::"Machine Center",MachineCenterNo,'');
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      EXIT(RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateWorkCenter@45(VAR WorkCenter@1000 : Record 99000754);
    VAR
      CapacityUnitOfMeasure@1001 : Record 99000780;
      Vendor@1005 : Record 23;
    BEGIN
      LibraryPurchase.CreateSubcontractor(Vendor);
      CreateWorkCenterSetup(WorkCenter,CapacityUnitOfMeasure.Type::Minutes,160000T,235959T);
      WorkCenter.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(5));
      WorkCenter.VALIDATE("Unit Cost Calculation",WorkCenter."Unit Cost Calculation"::Units);
      WorkCenter.VALIDATE("Subcontractor No.",Vendor."No.");
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenterFullWorkingWeekCalendar@227(VAR WorkCenter@1002 : Record 99000754;UOMType@1004 : Option;FromTime@1005 : Time;ToTime@1006 : Time);
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryManufacturing.CreateCapacityUnitOfMeasure(CapacityUnitOfMeasure,UOMType);
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      WITH WorkCenter DO BEGIN
        VALIDATE("Unit of Measure Code",CapacityUnitOfMeasure.Code);
        VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
        VALIDATE("Shop Calendar Code",LibraryManufacturing.UpdateShopCalendarFullWorkingWeekCustomTime(FromTime,ToTime));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateRoutingLine@41(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@109(VAR DimensionValue@1000 : Record 349;VAR DimensionValue2@1001 : Record 349);
    VAR
      Dimension@1002 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue2,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateFamilySetup@103(VAR Family@1000 : Record 99000773);
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      RoutingHeader@1003 : Record 99000763;
    BEGIN
      CreateProdItem(Item,'');
      CreateProdItem(Item2,'');
      CreateRoutingSetup(RoutingHeader);
      CreateFamily(Family,RoutingHeader."No.",Item."No.",Item2."No.");
    END;

    LOCAL PROCEDURE FindLastOperationNo@40(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindRequisitionLine@183(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterRequisitionLine@123(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      CLEAR(RequisitionLine);
      RequisitionLine.FILTERGROUP(2);
      RequisitionLine.SETRANGE("User ID",USERID);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Worksheet Template Name",'');
      RequisitionLine.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE FilterProdOrderLine@142(VAR ProdOrderLine@1000 : Record 5406;Status@1001 : Option;ProdOrderNo@1002 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
    END;

    LOCAL PROCEDURE FilterProdOrderComponent@156(VAR ProdOrderComponent@1000 : Record 5407;Status@1002 : Option;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
    END;

    LOCAL PROCEDURE FilterProdOrderRoutingLine@107(VAR ProdOrderRoutingLine@1000 : Record 5409;Status@1001 : Option;ProdOrderNo@1002 : Code[20]);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.SETRANGE(Status,Status);
    END;

    LOCAL PROCEDURE OutputJournalExplodeRouting@61(ProductionOrder@1000 : Record 5405);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      CreateOutputJournal(ProductionOrder,ItemJournalLine,'');
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateOutputJournal@192(ProductionOrder@1000 : Record 5405;VAR ItemJournalLine@1001 : Record 83;OperationNo@1005 : Code[10]);
    VAR
      ItemJournalTemplate2@1003 : Record 82;
      ItemJournalBatch2@1002 : Record 233;
    BEGIN
      FindItemJournalBatch(ItemJournalBatch2);
      ItemJournalTemplate2.GET(ItemJournalBatch2."Journal Template Name");
      LibraryInventory.ClearItemJournal(ItemJournalTemplate2,ItemJournalBatch2);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name,ItemJournalLine."Entry Type"::Output,'',0);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrder."No.");
      ItemJournalLine.VALIDATE("Item No.",ProductionOrder."Source No.");
      IF OperationNo <> '' THEN
        ItemJournalLine.VALIDATE("Operation No.",OperationNo);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalExplodeRoutingAndPostJournal@267(ProductionOrder@1000 : Record 5405);
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalTemplate2@1003 : Record 82;
      ItemJournalBatch2@1002 : Record 233;
    BEGIN
      FindItemJournalBatch(ItemJournalBatch2);
      ItemJournalTemplate2.GET(ItemJournalBatch2."Journal Template Name");
      LibraryInventory.ClearItemJournal(ItemJournalTemplate2,ItemJournalBatch2);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name,ItemJournalLine."Entry Type"::Output,'',0);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrder."No.");
      ItemJournalLine.VALIDATE(
        "Document No.",NoSeriesMgt.GetNextNo(ItemJournalBatch2."No. Series",ItemJournalLine."Posting Date",FALSE));
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);
    END;

    LOCAL PROCEDURE ClearWorkCenterCalendar@179(WorkCenter@1002 : Record 99000754;FromDate@1000 : Date;ToDate@1001 : Date);
    VAR
      CalendarEntry@1004 : Record 99000757;
    BEGIN
      WITH CalendarEntry DO BEGIN
        SETRANGE("Capacity Type","Capacity Type"::"Work Center");
        SETRANGE("No.",WorkCenter."No.");
        SETRANGE(Date,FromDate,ToDate);
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CalculatePlanForReqWksh@112(VAR Item@1003 : Record 27;StartDate@1002 : Date;EndDate@1001 : Date);
    VAR
      ReqWkshTemplate@1005 : Record 244;
      RequisitionWkshName@1006 : Record 245;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      RequisitionWkshName.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
      RequisitionWkshName.FINDFIRST;
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CreateItemAndRoutingVersion@252(VAR Item@1001 : Record 27;VAR RoutingNo@1003 : Code[20]);
    VAR
      RoutingVersion@1002 : Record 99000786;
      RoutingHeader@1006 : Record 99000763;
      RoutingLine@1005 : Record 99000764;
      WorkCenter@1000 : Record 99000754;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      RoutingNo := RoutingHeader."No.";
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::Order,FALSE,0,0,0,RoutingHeader."No.");
      LibraryManufacturing.CreateRoutingVersion(RoutingVersion,RoutingHeader."No.",RoutingHeader."No.");
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,RoutingVersion."Version Code",'',RoutingLine.Type::"Work Center",WorkCenter."No.");

      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      RoutingVersion.VALIDATE("Starting Date",WORKDATE);
      RoutingVersion.VALIDATE(Status,RoutingVersion.Status::Certified);
      RoutingVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionBOMAndCertify@25(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];Type@1006 : Option;No@1004 : Code[20];QuantityPer@1005 : Integer);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,BaseUnitOfMeasure,Type,No,QuantityPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateProductionBOM@164(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ProductionBOMLine@1002 : Record 99000772;BaseUnitOfMeasure@1001 : Code[10];Type@1003 : Option;No@1004 : Code[20];QuantityPer@1005 : Integer);
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',Type,No,QuantityPer);
    END;

    LOCAL PROCEDURE CreateProductionBOMWithMultipleLinesAndCertify@154(VAR ProductionBOMHeader@1004 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];Type@1002 : Option;ItemNo@1001 : Code[20];ItemNo2@1006 : Code[20];QuantityPer@1000 : Integer);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      ProductionBOMLine2@1007 : Record 99000772;
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,BaseUnitOfMeasure,Type,ItemNo,QuantityPer);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine2,'',Type,ItemNo2,QuantityPer);
      UpdateProductionBOMHeaderStatus(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateProductionBOMWithUOM@240(VAR ParentItem@1001 : Record 27;VAR ChildItem@1000 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1003 : Record 99000772;
      ItemUnitOfMeasure@1004 : Record 5404;
      RoutingLink@1005 : Record 99000777;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ChildItem."Base Unit of Measure");
      ProductionBOMHeader.VALIDATE("Unit of Measure Code",ParentItem."Base Unit of Measure");
      ProductionBOMHeader.MODIFY(TRUE);

      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,
        ChildItem."No.",LibraryRandom.RandDecInDecimalRange(0.2,0.7,1));

      ItemUnitOfMeasure.SETRANGE("Item No.",ChildItem."No.");
      ItemUnitOfMeasure.FINDLAST;

      ProductionBOMLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      RoutingLink.FINDLAST;
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);

      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@18(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,LocationCode,'',LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleLine@55(ItemNo@1000 : Code[20];ItemNo2@1001 : Code[20];ItemNo3@1003 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo2,LocationCode,'',LibraryRandom.RandInt(10));
      CreateSalesLine(SalesHeader,SalesLine,ItemNo3,LocationCode,'',LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@187(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Release@1004 : Boolean);
    VAR
      Vendor@1005 : Record 23;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendor(Vendor));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      IF Release THEN
        LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateBOMVersionAndCertify@19(ProductionBOMNo@1000 : Code[20];BaseUnitOfMeasure@1002 : Code[10]);
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMNo,FORMAT(LibraryRandom.RandInt(10)),BaseUnitOfMeasure);
      ProductionBOMVersion.VALIDATE(Status,ProductionBOMVersion.Status::Certified);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemWithDimensions@51(VAR Item@1000 : Record 27;VAR DimensionValue@1005 : Record 349;VAR DimensionValue2@1006 : Record 349);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      Dimension@1002 : Record 348;
      Dimension2@1003 : Record 348;
      Dimension3@1004 : Record 348;
      DefaultDimension@1008 : Record 352;
      DimensionValue3@1007 : Record 349;
    BEGIN
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Shortcut Dimension 1 Code");
      Dimension2.GET(GeneralLedgerSetup."Shortcut Dimension 2 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue2,Dimension2.Code);
      LibraryDimension.CreateDimension(Dimension3);
      LibraryDimension.CreateDimensionValue(DimensionValue3,Dimension3.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Item,Item."No.",Dimension.Code,DimensionValue.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Item,Item."No.",Dimension2.Code,DimensionValue2.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Item,Item."No.",Dimension3.Code,'');
    END;

    LOCAL PROCEDURE UpdateWorkCenterWithDimension@47(VAR DimensionValue@1000 : Record 349;VAR DimensionValue2@1001 : Record 349;WorkCenterNo@1002 : Code[20]);
    VAR
      Dimension@1003 : Record 348;
      DefaultDimension@1004 : Record 352;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue2,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Work Center",WorkCenterNo,Dimension.Code,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Same Code");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnWorkCenter@139(VAR WorkCenter@1000 : Record 99000754;FlushingMethod@1001 : Option);
    BEGIN
      WorkCenter.VALIDATE("Flushing Method",FlushingMethod);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRequisitionLine@66(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.VALIDATE("Due Date",WORKDATE);
      RequisitionLine.VALIDATE("Ending Date",RequisitionLine."Due Date");
      RequisitionLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@44(ItemNo@1000 : Code[20];ItemNo2@1001 : Code[20]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,100 + LibraryRandom.RandInt(10));
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo2,100 + LibraryRandom.RandInt(10));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateRoutingLine@143(VAR RoutingLine@1000 : Record 99000764;SetupTime@1001 : Decimal;RunTime@1002 : Decimal;WaitTime@1003 : Decimal);
    BEGIN
      RoutingLine.VALIDATE("Setup Time",SetupTime);
      RoutingLine.VALIDATE("Run Time",RunTime);
      RoutingLine.VALIDATE("Wait Time",WaitTime);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyProdOrderRoutingLine@98(VAR ProdOrderRoutingLine@1000 : Record 5409;ProductionOrder@1001 : Record 5405;RoutingNo@1003 : Code[20];OperationNo@1002 : Code[10]);
    BEGIN
      FilterProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderRoutingLine.SETRANGE("Routing No.",RoutingNo);
      ProdOrderRoutingLine.SETRANGE("Operation No.",OperationNo);
      ProdOrderRoutingLine.FINDFIRST;
      ProdOrderRoutingLine.VALIDATE("Routing Status",ProdOrderRoutingLine."Routing Status"::Finished);
      ProdOrderRoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddDimensionOnJournalLine@20(LineNo@1000 : Integer;DimCode@1001 : Code[20];DimValue@1002 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1003 : Record 83;
      DimSetID@1004 : Integer;
      NewDimSetID@1005 : Integer;
    BEGIN
      DimSetID := SelectJournalLineDimSetID(LineNo);
      NewDimSetID := LibraryDimension.CreateDimSet(DimSetID,DimCode,DimValue);

      ItemJournalLine.SETRANGE("Line No.",LineNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Dimension Set ID",NewDimSetID);
      ItemJournalLine.MODIFY(TRUE);
      EXIT(ItemJournalLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE AddDimensionOnProductionLine@184(ProdOrderNo@1004 : Code[20];DimCode@1001 : Code[20];DimValue@1002 : Code[20]) : Integer;
    VAR
      ProdOrderLine@1003 : Record 5406;
      NewDimSetID@1000 : Integer;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETRANGE("Prod. Order No.",ProdOrderNo);
        FINDFIRST;
        NewDimSetID := LibraryDimension.CreateDimSet("Dimension Set ID",DimCode,DimValue);
        VALIDATE("Dimension Set ID",NewDimSetID);
        MODIFY(TRUE);

        EXIT("Dimension Set ID");
      END;
    END;

    LOCAL PROCEDURE SelectJournalLineNos@17(ProductionOrder@1000 : Record 5405;WorkCenterCode@1001 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournalBatch2@1004 : Record 233;
    BEGIN
      // get the line numbers for the output journal lines
      FindItemJournalBatch(ItemJournalBatch2);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch2."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch2.Name);
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrder."No.");
      ItemJournalLine.SETRANGE("No.",WorkCenterCode);
      ItemJournalLine.FINDFIRST;
      EXIT(ItemJournalLine."Line No.");
    END;

    LOCAL PROCEDURE ChangeWorkCenterOnJournalLine@15(LineNo@1000 : Integer;No@1004 : Code[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch2@1002 : Record 233;
    BEGIN
      FindItemJournalBatch(ItemJournalBatch2);
      ItemJournalLine.GET(ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name,LineNo);
      ItemJournalLine.VALIDATE("No.",No);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectJournalLineDimSetID@14(LineNo@1000 : Integer) : Integer;
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // get the DimSetID numbers for the output journal lines
      ItemJournalLine.SETRANGE("Line No.",LineNo);
      ItemJournalLine.FINDFIRST;
      EXIT(ItemJournalLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE UpdateItemWithUnitOfMeasure@83(VAR UnitOfMeasure@1000 : Record 204;ItemNo@1001 : Code[20]);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE UpdateProductionBOMLine@95(VAR ProductionBOMLine@1000 : Record 99000772;UnitOfMeasureCode@1001 : Code[10]);
    BEGIN
      ProductionBOMLine.VALIDATE("Calculation Formula",ProductionBOMLine."Calculation Formula"::Length);
      ProductionBOMLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProductionBOMLine.VALIDATE(Length,LibraryRandom.RandInt(10));
      ProductionBOMLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeItemOnProdOrderComponent@106(VAR ProductionOrder@1001 : Record 5405;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder,ItemNo);
      UpdateProdOrderComponent(ProdOrderComponent,ProdOrderComponent.FIELDNO("Item No."),ItemNo2);
    END;

    LOCAL PROCEDURE FindProdOrderComponent@115(VAR ProdOrderComponent@1002 : Record 5407;ProductionOrder@1001 : Record 5405;ItemNo@1000 : Code[20]);
    BEGIN
      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE MockProdBOMLineWithUoM@217(VAR ProductionBOMLine@1000 : Record 99000772;UnitOfMeasureCode@1001 : Code[10]);
    BEGIN
      WITH ProductionBOMLine DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateGUID;
        Type := Type::"Production BOM";
        "Unit of Measure Code" := UnitOfMeasureCode;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@153(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineWithShipmentDate@209(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1005 : Decimal;ShipmentDate@1003 : Date;AutoReserveLine@1006 : Boolean);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
      IF AutoReserveLine THEN
        LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE FindProductionOrder@163(VAR ProductionOrder@1001 : Record 5405;SourceNo@1000 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE("Source Type",ProductionOrder."Source Type"::"Sales Header");
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDLAST;
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnProdOrderRoutingLine@165(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20]);
    VAR
      ProdOrderRoutingLine@1002 : Record 5409;
    BEGIN
      FindProductionOrder(ProductionOrder,SourceNo);
      FilterProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderRoutingLine.FINDSET;
      REPEAT
        ProdOrderRoutingLine.VALIDATE("Flushing Method",ProdOrderRoutingLine."Flushing Method"::Backward);
        ProdOrderRoutingLine.MODIFY(TRUE);
      UNTIL ProdOrderRoutingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnProdOrderComponent@167(VAR ProductionOrder@1001 : Record 5405;SourceNo@1000 : Code[20]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      FindProductionOrder(ProductionOrder,SourceNo);
      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderComponent.FINDSET;
      REPEAT
        UpdateProdOrderComponent(
          ProdOrderComponent,ProdOrderComponent.FIELDNO("Flushing Method"),ProdOrderComponent."Flushing Method"::Backward);
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE CertifiedStatusOnProductionBOMVersion@130(ProductionBOMVersion@1000 : Record 99000779);
    BEGIN
      ProductionBOMVersion.VALIDATE("Starting Date",WORKDATE);
      ProductionBOMVersion.VALIDATE(Status,ProductionBOMVersion.Status::Certified);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCapacityJournalLine@80(VAR ItemJournalLine@1000 : Record 83;No@1001 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(CapacityItemJournalTemplate,CapacityItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,CapacityItemJournalBatch."Journal Template Name",CapacityItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Output,'',0); // Zero used for Quantity.
      ItemJournalLine.VALIDATE(Type,ItemJournalLine.Type::"Work Center");
      ItemJournalLine.VALIDATE("No.",No);
      ItemJournalLine.VALIDATE("Stop Time",LibraryRandom.RandInt(5));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFamily@108(VAR Family@1005 : Record 99000773;RoutingNo@1003 : Code[20];ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      FamilyLine@1004 : Record 99000774;
    BEGIN
      // Random values not important for test.
      LibraryManufacturing.CreateFamily(Family);
      Family.VALIDATE("Routing No.",RoutingNo);
      Family.MODIFY(TRUE);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo,LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo2,LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateRoutingSetup@76(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");

      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial,RoutingLine.Type::"Work Center");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateRouting@150(VAR RoutingHeader@1000 : Record 99000763;VAR RoutingLine@1002 : Record 99000764;WorkCenterNo@1003 : Code[20];Type@1004 : Option;RoutingLineType@1005 : Option);
    VAR
      OperationNo@1006 : Code[10];
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,Type);

      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,RoutingLineType,WorkCenterNo);
    END;

    LOCAL PROCEDURE CreateMachineCenter@71(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
    END;

    LOCAL PROCEDURE CreateProdItem@72(VAR Item@1005 : Record 27;RoutingNo@1001 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      ChildItemNo@1002 : Code[20];
      ChildItemNo2@1003 : Code[20];
    BEGIN
      // Create Child Items.
      CreateItemsWithInventory(ChildItemNo,ChildItemNo2);

      // Create Production BOM.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ChildItemNo,ChildItemNo2,1);  // Value important.

      // Create parent Item and attach Routing and Production BOM.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,'');
      UpdateItem(Item,Item.FIELDNO("Routing No."),RoutingNo);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateProdOrderLine@213(ProdOrderStatus@1001 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1003 : Code[20];LineQty@1004 : Decimal);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        VALIDATE(Status,ProdOrderStatus);
        VALIDATE("Prod. Order No.",ProdOrderNo);
        VALIDATE("Line No.",LibraryUtility.GetNewRecNo(ProdOrderLine,FIELDNO("Line No.")));
        VALIDATE("Item No.",ItemNo);
        VALIDATE(Quantity,LineQty);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateShipmentItem@291(VAR Item@1000 : Record 27;VAR RoutingHeader@1005 : Record 99000763);
    VAR
      RoutingLine@1003 : Record 99000764;
      LeadTimeCalc@1001 : DateFormula;
    BEGIN
      CreateAndCertifyRoutingSetup(RoutingHeader,RoutingLine);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,0,0,'');
      EVALUATE(LeadTimeCalc,'<' + FORMAT(LibraryRandom.RandInt(20)) + 'D>');
      UpdateItem(Item,Item.FIELDNO("Lead Time Calculation"),LeadTimeCalc);
      UpdateItem(Item,Item.FIELDNO(Critical),TRUE);
    END;

    LOCAL PROCEDURE CreateItemsWithInventory@77(VAR ChildItemNo@1008 : Code[20];VAR ChildItemNo2@1009 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,'');
      ChildItemNo := Item."No.";
      CLEAR(Item);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::" ",FALSE,0,0,0,'');
      ChildItemNo2 := Item."No.";

      // Update Inventory for Item, random value important for test.
      UpdateItemInventory(ChildItemNo,ChildItemNo2)
    END;

    LOCAL PROCEDURE CreateCapacityConstrainedResource@140(WorkCenterNo@1000 : Code[20]);
    VAR
      CapacityConstrainedResource@1001 : Record 99000866;
    BEGIN
      LibraryManufacturing.CreateCapacityConstrainedResource(
        CapacityConstrainedResource,CapacityConstrainedResource."Capacity Type"::"Work Center",WorkCenterNo);
      CapacityConstrainedResource.VALIDATE("Critical Load %",100);  // Value important for Test.
      CapacityConstrainedResource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostItemJournal@242(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20]);
    VAR
      GenProductPostingGroup@1002 : Record 251;
      ItemJournal@1003 : TestPage 40;
    BEGIN
      GenProductPostingGroup.FINDFIRST;
      ItemJournalBatch.FINDFIRST;
      ItemJournalBatch.VALIDATE("No. Series",'');
      ItemJournalBatch.MODIFY(TRUE);

      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,1);

      ItemJournalLine.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::"Positive Adjmt.");
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(5,10));
      ItemJournalLine.MODIFY(TRUE);

      COMMIT;
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLine."Journal Batch Name");

      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);
      ItemJournal.ItemTrackingLines.INVOKE;
      ItemJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE UpdateShopCalendarWorkingDays@92(StartTime@1005 : Time;EndTime@1006 : Time) : Code[10];
    VAR
      ShopCalendarWorkingDays@1002 : Record 99000752;
      ShopCalendar@1001 : Record 99000751;
      WorkShift@1004 : Record 99000750;
      ShopCalendarCode@1003 : Code[10];
      WorkShiftCode@1000 : Code[10];
    BEGIN
      // Create Shop Calendar Working Days using with boundary values daily work shift.
      ShopCalendarCode := LibraryManufacturing.CreateShopCalendarCode(ShopCalendar);
      WorkShiftCode := LibraryManufacturing.CreateWorkShiftCode(WorkShift);
      ShopCalendarWorkingDays.SETRANGE("Shop Calendar Code",ShopCalendarCode);

      LibraryManufacturing.CreateShopCalendarWorkingDays(
        ShopCalendarWorkingDays,ShopCalendarCode,ShopCalendarWorkingDays.Day::Monday,WorkShiftCode,StartTime,EndTime);
      LibraryManufacturing.CreateShopCalendarWorkingDays(
        ShopCalendarWorkingDays,ShopCalendarCode,ShopCalendarWorkingDays.Day::Tuesday,WorkShiftCode,StartTime,EndTime);
      LibraryManufacturing.CreateShopCalendarWorkingDays(
        ShopCalendarWorkingDays,ShopCalendarCode,ShopCalendarWorkingDays.Day::Wednesday,WorkShiftCode,StartTime,EndTime);
      LibraryManufacturing.CreateShopCalendarWorkingDays(
        ShopCalendarWorkingDays,ShopCalendarCode,ShopCalendarWorkingDays.Day::Thursday,WorkShiftCode,StartTime,EndTime);
      LibraryManufacturing.CreateShopCalendarWorkingDays(
        ShopCalendarWorkingDays,ShopCalendarCode,ShopCalendarWorkingDays.Day::Friday,WorkShiftCode,StartTime,EndTime);

      EXIT(ShopCalendarCode);
    END;

    LOCAL PROCEDURE UpdateWorkCenterWithEfficiency@137(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      WorkCenter.VALIDATE(Capacity,1);  // Value important for Test.
      WorkCenter.VALIDATE(Efficiency,100);  // Value important for Test.
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnProdOrderComponent@176(ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      UpdateProdOrderComponent(ProdOrderComponent,ProdOrderComponent.FIELDNO("Variant Code"),VariantCode);
    END;

    LOCAL PROCEDURE UpdateLocation@59(VAR Location@1000 : Record 14;NewInbWhseHandlingTime@1003 : Text[30]) OldInbWhseHandlingTime : Text[30];
    BEGIN
      OldInbWhseHandlingTime := FORMAT(Location."Inbound Whse. Handling Time");
      EVALUATE(Location."Inbound Whse. Handling Time",NewInbWhseHandlingTime);
      Location.VALIDATE("Inbound Whse. Handling Time");
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CapacityEffectiveOnCalendarEntry@127(WorkCenterNo@1001 : Code[20]) : Decimal;
    VAR
      CalendarEntry@1000 : Record 99000757;
    BEGIN
      CalendarEntry.SETCURRENTKEY("Capacity Type","No.",Date,"Starting Time","Ending Time","Work Shift Code");
      CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Work Center");
      CalendarEntry.SETRANGE("No.",WorkCenterNo);
      CalendarEntry.SETRANGE(Date,CALCDATE('<' + '-' + FORMAT(1 + RANDOM(2)) + 'D>',WORKDATE));  // Value important for Test.
      CalendarEntry.CALCSUMS("Capacity (Effective)");
      EXIT(CalendarEntry."Capacity (Effective)");
    END;

    LOCAL PROCEDURE NeededTimeOnProdOrderCapacityNeed@128(WorkCenterNo@1001 : Code[20]) : Decimal;
    VAR
      ProdOrderCapacityNeed@1000 : Record 5410;
    BEGIN
      ProdOrderCapacityNeed.SETCURRENTKEY("Work Center No.",Date,Active,"Starting Date-Time");
      ProdOrderCapacityNeed.SETRANGE("Work Center No.",WorkCenterNo);
      ProdOrderCapacityNeed.SETRANGE(Date,CALCDATE('<' + '-' + FORMAT(1 + RANDOM(2)) + 'D>',WORKDATE));  // Value important for Test.
      ProdOrderCapacityNeed.CALCSUMS("Needed Time");
      EXIT(ProdOrderCapacityNeed."Needed Time");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithTracking@125(ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Document No.",LibraryUtility.GenerateGUID);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking on Page Handler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@124(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferRoute@119(TransferFrom@1000 : Code[10];TransferTo@1001 : Code[10];InTransit@1002 : Code[10]);
    VAR
      TransferRoute@1003 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
      TransferRoute.VALIDATE("In-Transit Code",InTransit);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTrackingCodeOnItem@118(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningParametersOnItem@159(VAR Item@1000 : Record 27);
    VAR
      ReschedulePeriod@1002 : DateFormula;
      LotAccumulationPeriod@1003 : DateFormula;
    BEGIN
      EVALUATE(ReschedulePeriod,'<1W>');
      EVALUATE(LotAccumulationPeriod,'<1W>');
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.VALIDATE("Rescheduling Period",ReschedulePeriod);
      Item.VALIDATE("Lot Accumulation Period",LotAccumulationPeriod);
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(5) + 5);  // Random Value required.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@160(NewDocNoIsProdOrderNo@1000 : Boolean) DocNoIsProdOrderNo : Boolean;
    BEGIN
      ManufacturingSetup.GET;
      DocNoIsProdOrderNo := ManufacturingSetup."Doc. No. Is Prod. Order No.";
      ManufacturingSetup.VALIDATE("Doc. No. Is Prod. Order No.",NewDocNoIsProdOrderNo);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleStockKeepingUnit@141(ItemNo@1000 : Code[20];LocationCode@1002 : Code[10];LocationCode2@1003 : Code[10]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      Item.SETFILTER("Location Filter",'%1|%2',LocationCode,LocationCode2);
      LibraryInventory.CreateStockKeepingUnit(Item,0,FALSE,FALSE);
    END;

    LOCAL PROCEDURE SetReplSystemTransferOnSKU@117(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];TransferFrom@1003 : Code[10]);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      StockkeepingUnit.GET(LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",StockkeepingUnit."Replenishment System"::Transfer);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFrom);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrder@170(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@146(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndUpdateVariantCodeOnProductionOrderLine@174(VAR ProdOrderLine@1001 : Record 5406);
    VAR
      ItemVariant@1000 : Record 5401;
    BEGIN
      LibraryInventory.CreateItemVariant(ItemVariant,ProdOrderLine."Item No.");
      ProdOrderLine.VALIDATE("Variant Code",ItemVariant.Code);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindProdOrderLine@162(VAR ProdOrderLine@1000 : Record 5406;Status@1001 : Option;ProductionOrderNo@1002 : Code[20]);
    BEGIN
      FilterProdOrderLine(ProdOrderLine,Status,ProductionOrderNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupProdOrdWithRtng@181(VAR ProdOrd@1000 : Record 5405;ItemNo@1001 : Code[20]);
    VAR
      LineQuantity@1002 : ARRAY [2] OF Decimal;
    BEGIN
      LineQuantity[1] := LibraryRandom.RandDecInRange(10,20,2);
      LineQuantity[2] := LibraryRandom.RandDecInRange(30,40,2);
      LibraryManufacturing.CreateProductionOrder(
        ProdOrd,ProdOrd.Status::Released,ProdOrd."Source Type"::Item,ItemNo,
        LineQuantity[1] + LineQuantity[2]);

      CreateProdOrderLine(ProdOrd.Status,ProdOrd."No.",ItemNo,LineQuantity[1]);
      CreateProdOrderLine(ProdOrd.Status,ProdOrd."No.",ItemNo,LineQuantity[2]);
      LibraryManufacturing.RefreshProdOrder(ProdOrd,FALSE,FALSE,TRUE,FALSE,FALSE); // Do not recalculate lines when refreshing the order
    END;

    LOCAL PROCEDURE SetupProdOrdLnWithSubContr@180(VAR ProdOrdLn@1000 : Record 5406);
    VAR
      ProdOrd@1007 : Record 5405;
      ReqLn@1005 : Record 246;
      WorkCtr@1001 : Record 99000754;
    BEGIN
      CreateProdOrderWithSubcontractWorkCenter(WorkCtr,ProdOrd);
      CalculateSubcontractOrder(ReqLn,WorkCtr."No.",ProdOrd);

      LibraryPlanning.CarryOutAMSubcontractWksh(ReqLn);
      FindProdOrderLine(ProdOrdLn,ProdOrd.Status,ProdOrd."No.");
    END;

    LOCAL PROCEDURE AreSameMessages@171(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE UpdateExpectedReceiptDateOnPurchaseLinesPage@186(BuyFromVendorNo@1002 : Code[20]);
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseOrder@1003 : TestPage 50;
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      PurchaseHeader.FINDFIRST;
      PurchaseHeader.VALIDATE("Due Date",PurchaseHeader."Posting Date");
      PurchaseHeader.MODIFY(TRUE);
      CLEAR(PurchaseOrder);
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      PurchaseOrder.PurchLines."Expected Receipt Date".SETVALUE(
        CALCDATE(STRSUBSTNO('%1D',LibraryRandom.RandInt(5)),PurchaseHeader."Due Date"));
      PurchaseOrder.CLOSE;
    END;

    LOCAL PROCEDURE PostItemStockPurchase@200(Item@1003 : Record 27;Quantity@1004 : Decimal;LocationCode@1005 : Code[10];EntryType@1006 : Option);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      WITH LibraryInventory DO BEGIN
        SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
        SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
        CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,EntryType,
          Item."No.",Quantity);
        ItemJournalLine.VALIDATE("Location Code",LocationCode);
        ItemJournalLine.MODIFY(TRUE);
        PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
      END;
    END;

    LOCAL PROCEDURE VerifyDueDate@197(ProductionOrder@1002 : Record 5405;DueDate@1000 : Date;ShouldBeEqual@1001 : Boolean);
    BEGIN
      WITH ProductionOrder DO BEGIN
        GET(Status,"No.");
        IF ShouldBeEqual THEN
          Assert.AreEqual(DueDate,"Due Date",WrongDueDateErr)
        ELSE
          Assert.AreNotEqual(DueDate,"Due Date",WrongDueDateErr)
      END;
    END;

    LOCAL PROCEDURE VerifyUntrackedPlanningElement@30(ItemNo@1004 : Code[20];Source@1001 : Text[200];ParameterValue@1002 : Decimal;UntrackedQuantity@1003 : Decimal);
    VAR
      UntrackedPlanningElement@1000 : Record 99000855;
    BEGIN
      UntrackedPlanningElement.SETRANGE("Item No.",ItemNo);
      UntrackedPlanningElement.SETRANGE(Source,Source);
      UntrackedPlanningElement.FINDFIRST;
      UntrackedPlanningElement.TESTFIELD("Parameter Value",ParameterValue);
      UntrackedPlanningElement.TESTFIELD("Untracked Quantity",UntrackedQuantity);
      UntrackedPlanningElement.TESTFIELD(Source,Source);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@135(Item@1001 : Record 27);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,Item."No.");
      Assert.AreEqual(1,RequisitionLine.COUNT,PlanningLinesErr);
      RequisitionLine.TESTFIELD(Quantity,Item."Reorder Quantity");
      ManufacturingSetup.GET;
      RequisitionLine.TESTFIELD("Due Date",CALCDATE(ManufacturingSetup."Default Safety Lead Time",WORKDATE));
    END;

    LOCAL PROCEDURE VerifyQuantityRequisitionLine@58(RequisitionLine@1000 : Record 246;Quantity@1001 : Decimal;DueDate@1002 : Date);
    BEGIN
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Due Date",DueDate);
      RequisitionLine.TESTFIELD("Action Message",RequisitionLine."Action Message"::New);
    END;

    LOCAL PROCEDURE VerifyPlanningComponent@70(PlanningComponent@1000 : Record 99000829;ExpectedQuantity@1001 : Decimal;DueDate@1002 : Date);
    BEGIN
      PlanningComponent.TESTFIELD("Expected Quantity",ExpectedQuantity);
      PlanningComponent.TESTFIELD("Due Date",DueDate);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@136(Item@1001 : Record 27);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      Assert.AreEqual(1,ReservationEntry.COUNT,ReservationEntriesErr);  // Value is important for Test.
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Quantity (Base)",Item."Reorder Quantity");
      ReservationEntry.TESTFIELD("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@145(SourceNo@1001 : Code[20];ItemNo@1003 : Code[20];ShortcutDimension1Code@1004 : Code[20];ShortcutDimension2Code@1005 : Code[20]);
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.SETRANGE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;

      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      ProdOrderComponent.TESTFIELD("Shortcut Dimension 2 Code",ShortcutDimension2Code)
    END;

    LOCAL PROCEDURE VerifyProdOrderComponentQuantity@220(SourceNo@1001 : Code[20];ItemNo@1003 : Code[20];ExpectedQuantity@1004 : Decimal);
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.SETRANGE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;

      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.TESTFIELD(Quantity,ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyDateAndQuantityReqLine@172(Item@1000 : Record 27);
    VAR
      RequisitionLine@1003 : Record 246;
      RequisitionLineQuantity@1001 : Decimal;
      Counter@1002 : Integer;
    BEGIN
      // Calculation for Requisition Line Quantity.
      WHILE (RequisitionLineQuantity < Item."Maximum Inventory" )DO BEGIN
        RequisitionLineQuantity := Item."Order Multiple" * Counter;
        Counter += 1;
      END;

      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD(Type,RequisitionLine.Type::Item);
      RequisitionLine.TESTFIELD(Quantity,RequisitionLineQuantity);
      RequisitionLine.TESTFIELD(
        "Due Date",CALCDATE(ManufacturingSetup."Default Safety Lead Time",CALCDATE(Item."Lead Time Calculation",WORKDATE)));
    END;

    LOCAL PROCEDURE VerifyValueInRequisitionLine@177(Item@1001 : Record 27;Quantity@1002 : Decimal;OrderDate@1003 : Date);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Due Date",CALCDATE(Item."Lead Time Calculation",WORKDATE));
      RequisitionLine.TESTFIELD(
        "Order Date",CALCDATE('<' + '-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',OrderDate));
    END;

    LOCAL PROCEDURE VerifyPlanningRoutingLine@26(RoutingHeader@1008 : Record 99000763;RequisitionWkshName@1006 : Record 245;ItemNo@1002 : Code[20];Quantity@1007 : Integer);
    VAR
      WorkCenter@1009 : Record 99000754;
      RoutingLine@1010 : Record 99000764;
      PlanningComponent@1001 : Record 99000829;
      PlanningRoutingLine@1000 : Record 99000830;
    BEGIN
      SelectWorkCenter(WorkCenter,RoutingHeader."No.");
      RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      RoutingLine.FINDFIRST;

      PlanningComponent.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name",RequisitionWkshName.Name);
      PlanningComponent.FINDFIRST;
      PlanningComponent.TESTFIELD("Item No.",ItemNo);
      PlanningComponent.TESTFIELD(Quantity,Quantity);  // Value is important for Test.

      PlanningRoutingLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      PlanningRoutingLine.SETRANGE("Worksheet Batch Name",RequisitionWkshName.Name);
      PlanningRoutingLine.FINDFIRST;
      PlanningRoutingLine.TESTFIELD("Operation No.",RoutingLine."Operation No.");
      PlanningRoutingLine.TESTFIELD(Type,PlanningRoutingLine.Type::"Work Center");
      PlanningRoutingLine.TESTFIELD("Work Center No.",WorkCenter."No.");
      PlanningRoutingLine.TESTFIELD("Run Time",RoutingLine."Run Time");
    END;

    LOCAL PROCEDURE VerifyProdOrderRoutingLineIsNotEmpty@254(RoutingNo@1002 : Code[20]);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.INIT;
      ProdOrderRoutingLine.SETRANGE("Routing No.",RoutingNo);
      Assert.RecordIsNotEmpty(ProdOrderRoutingLine);
    END;

    LOCAL PROCEDURE VerifyBOMHeaderLLC@9(No@1001 : Code[20];LowLevelCode@1002 : Integer);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      ProductionBOMHeader.GET(No);
      ProductionBOMHeader.TESTFIELD("Low-Level Code",LowLevelCode);
    END;

    LOCAL PROCEDURE VerifyRunTime@12(OperationNo@1001 : Code[10]);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Operation No.",OperationNo);
      ProdOrderRoutingLine.FINDFIRST;
      ProdOrderRoutingLine.VALIDATE("Run Time",LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE VerifyCapacityLedgerEntry@75(WorkCenter@1001 : Record 99000754;Quantity@1002 : Decimal);
    VAR
      CapacityLedgerEntry@1000 : Record 5832;
    BEGIN
      CapacityLedgerEntry.SETRANGE("Work Center No.",WorkCenter."No.");
      Assert.AreEqual(1,CapacityLedgerEntry.COUNT,NumberOfLineErr);
      CapacityLedgerEntry.FINDFIRST;
      CapacityLedgerEntry.CALCFIELDS("Direct Cost");
      CapacityLedgerEntry.TESTFIELD("Direct Cost",Quantity * WorkCenter."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyDimensions@16(JnlLineDimSetID@1000 : Integer;NoOfDimensions@1001 : Integer;DimCodes@1002 : Text[250];DimValueCodes@1003 : Text[250]);
    VAR
      DimensionSetEntry@1004 : Record 480;
      I@1005 : Integer;
    BEGIN
      IF JnlLineDimSetID > 0 THEN
        DimensionSetEntry.SETRANGE("Dimension Set ID",JnlLineDimSetID);
      Assert.AreEqual(NoOfDimensions,DimensionSetEntry.COUNT,NoDimensionExpectedErr);

      IF NoOfDimensions > 0 THEN
        FOR I := 1 TO NoOfDimensions DO BEGIN
          DimensionSetEntry.SETRANGE("Dimension Code",SELECTSTR(I,DimCodes));
          DimensionSetEntry.FINDFIRST;
          Assert.AreEqual(SELECTSTR(I,DimValueCodes),DimensionSetEntry."Dimension Value Code",DimensionValueErr);
        END;
    END;

    LOCAL PROCEDURE VerifyDimensionValuesInItemJournal@196(DimensionValue@1001 : ARRAY [4] OF Record 349;DimensionSetID@1000 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
      i@1004 : Integer;
    BEGIN
      FOR i := 2 TO 3 DO BEGIN
        DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
        DimensionSetEntry.SETRANGE("Dimension Code",DimensionValue[i]."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        Assert.AreEqual(
          DimensionValue[i].Code,DimensionSetEntry."Dimension Value Code",STRSUBSTNO(DimensionValueOutputErr,DimensionValue[i].Code));
      END;
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForUser@81(UserID@1001 : Code[50];DemandOrderNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("User ID",UserID);
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE("Worksheet Template Name",'');
      Assert.AreEqual(2,RequisitionLine.COUNT,NumberOfLineErr);
      RequisitionLine.FINDLAST;
      RequisitionLine.TESTFIELD("No.",ItemNo);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineDetails@46(Item@1000 : Record 27);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.FINDSET;
      VerifyQuantityRequisitionLine(
        RequisitionLine,Item."Reorder Quantity",CALCDATE(ManufacturingSetup."Default Safety Lead Time",WORKDATE));
      RequisitionLine.NEXT;
      VerifyQuantityRequisitionLine(RequisitionLine,Item."Safety Stock Quantity",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyPlanningComponentDetails@48(Item@1000 : Record 27;Item2@1001 : Record 27;QuantityPer@1004 : Decimal);
    VAR
      PlanningComponent@1003 : Record 99000829;
    BEGIN
      PlanningComponent.SETRANGE("Item No.",Item2."No.");
      PlanningComponent.FINDSET;
      VerifyPlanningComponent(PlanningComponent,Item."Reorder Quantity" * QuantityPer,WORKDATE);
      PlanningComponent.NEXT;
      VerifyPlanningComponent(
        PlanningComponent,Item."Safety Stock Quantity" * QuantityPer,
        CALCDATE('<' + '-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',WORKDATE));
    END;

    LOCAL PROCEDURE VerifyMultipleRequisitionLine@54(Item@1002 : Record 27;Item2@1003 : Record 27;QuantityPer@1004 : Decimal);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",Item2."No.");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.FINDSET;
      VerifyQuantityRequisitionLine(
        RequisitionLine,Item."Safety Stock Quantity" * QuantityPer,
        CALCDATE('<' + '-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',WORKDATE));
      RequisitionLine.NEXT;
      VerifyQuantityRequisitionLine(
        RequisitionLine,Item2."Maximum Inventory" - Item2."Safety Stock Quantity",
        CALCDATE(ManufacturingSetup."Default Safety Lead Time",WORKDATE));
      RequisitionLine.NEXT;
      VerifyQuantityRequisitionLine(RequisitionLine,Item."Reorder Quantity" * QuantityPer + Item2."Safety Stock Quantity",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@84(BuyFromVendorNo@1001 : Code[20];No@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      Assert.AreEqual(1,PurchaseLine.COUNT,NumberOfLineErr);  // Value is important for Test.
      PurchaseLine.FINDLAST;
      PurchaseLine.TESTFIELD("No.",No);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyOrderPromisingLines@202(VAR TempOrderPromisingLine@1000 : TEMPORARY Record 99000880);
    BEGIN
      TempOrderPromisingLine.FINDSET;
      VerifyEarliestShipmentDate(0D,TempOrderPromisingLine);
      TempOrderPromisingLine.NEXT;
      VerifyEarliestShipmentDate(0D,TempOrderPromisingLine);
    END;

    LOCAL PROCEDURE VerifyEarliestShipmentDate@206(ExpectedDate@1000 : Date;TempOrderPromisingLine@1001 : TEMPORARY Record 99000880);
    BEGIN
      Assert.AreEqual(
        ExpectedDate,
        TempOrderPromisingLine."Earliest Shipment Date",
        STRSUBSTNO(
          FieldErr,
          TempOrderPromisingLine.TABLECAPTION,
          TempOrderPromisingLine.FIELDCAPTION("Earliest Shipment Date")));
    END;

    LOCAL PROCEDURE VerifyProdOrderComponentDetails@122(Item@1000 : Record 27;ProductionOrder@1002 : Record 5405);
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      // Verify Component Line is refreshed after updating Item No.
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder,Item."No.");
      ProdOrderComponent.TESTFIELD("Unit of Measure Code",Item."Base Unit of Measure");
      ProdOrderComponent.TESTFIELD(Length,0);
      ProdOrderComponent.TESTFIELD("Calculation Formula",ProdOrderComponent."Calculation Formula"::" ")
    END;

    LOCAL PROCEDURE VerifyProdOrderLine@67(ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];Quantity@1005 : Decimal);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FilterProdOrderLine(ProdOrderLine,ProdOrderLine.Status::Finished,ProdOrderNo);
      ProdOrderLine.SETRANGE("Variant Code",VariantCode);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD("Item No.",ItemNo);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderLineForStartingDateTime@155(ProductionOrderNo@1001 : Code[20];ProdOrderStartingDateTime@1002 : DateTime);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FilterProdOrderLine(ProdOrderLine,ProdOrderLine.Status::Released,ProductionOrderNo);
      ProdOrderLine.FINDSET;
      REPEAT
        Assert.IsTrue(ProdOrderStartingDateTime <= ProdOrderLine."Starting Date-Time",StartingDateTimeErr);
      UNTIL ProdOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyProdOrderCapacityNeed@144(WorkCenterNo@1002 : Code[20]);
    VAR
      ActualTime@1005 : Decimal;
    BEGIN
      ActualTime := CapacityEffectiveOnCalendarEntry(WorkCenterNo) - NeededTimeOnProdOrderCapacityNeed(WorkCenterNo);
      Assert.AreEqual(0,ActualTime,EffectiveCapacityErr);
    END;

    LOCAL PROCEDURE VerifyQuantityOnRequisitionLine@191(ItemNo@1001 : Code[20];ReplenishmentSystem@1002 : Option;Quantity@1003 : Decimal);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.TESTFIELD("Replenishment System",ReplenishmentSystem);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyCountForProductionOrderComponent@94(ProdOrderNo@1001 : Code[20];ProductionBOMNo@1000 : Code[20]);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      FilterProdOrderComponent(ProdOrderComponent,ProdOrderComponent.Status::Released,ProdOrderNo);
      Assert.AreEqual(
        ProductionBOMLine.COUNT,ProdOrderComponent.COUNT,
        STRSUBSTNO(ErrorMsg,ProductionBOMLine.TABLECAPTION,ProdOrderComponent.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCountForProductionOrderRouting@91(ProdOrderNo@1001 : Code[20];RoutingNo@1000 : Code[20]);
    VAR
      RoutingLine@1005 : Record 99000764;
      ProdOrderRoutingLine@1004 : Record 5409;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      FilterProdOrderRoutingLine(ProdOrderRoutingLine,ProdOrderRoutingLine.Status::Released,ProdOrderNo);
      Assert.AreEqual(
        RoutingLine.COUNT,ProdOrderRoutingLine.COUNT,STRSUBSTNO(ErrorMsg,ProdOrderRoutingLine.TABLECAPTION,RoutingLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyQtyOnProdOrder@120(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1002 : Record 5406;
      FamilyLine@1001 : Record 99000774;
    BEGIN
      // Check Quantity on Firm Planned Production Order Line is the product of the quantity on the Production Order Header and the quantity on the Family Line.
      FamilyLine.SETRANGE("Family No.",ProductionOrder."Source No.");
      FamilyLine.FINDSET;
      REPEAT
        FilterProdOrderLine(ProdOrderLine,ProdOrderLine.Status::"Firm Planned",ProductionOrder."No.");
        ProdOrderLine.SETRANGE("Item No.",FamilyLine."Item No.");
        ProdOrderLine.FINDFIRST;
        ProdOrderLine.TESTFIELD(Quantity,(ProductionOrder.Quantity * FamilyLine.Quantity));
      UNTIL FamilyLine.NEXT = 0 ;
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForLocation@138(ItemNo@1001 : Code[20];LocationCode@1002 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.SETRANGE("Variant Code",'');
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      Assert.AreEqual(2,RequisitionLine.COUNT,NumberOfLineErr);  // Value requried.
    END;

    LOCAL PROCEDURE VerifyProdOrderRequisitionLine@228(ProdOrderLine@1001 : Record 5406);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        FINDFIRST;

        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.",ProdOrderLine."Item No.");
        TESTFIELD(Quantity,ProdOrderLine.Quantity);
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForOutput@152(ItemNo@1001 : Code[20];Quantity@1003 : Decimal;EntryType@1000 : Option);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Entry Type",EntryType);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForConsumption@173(ItemNo@1001 : Code[20];EntryType@1002 : Option);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Production);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Entry Type",EntryType);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineDueDates@313(ComponentItemNo@1001 : Code[20];ParentItemFilter@1002 : Text;QtyPer@1004 : Decimal);
    VAR
      RequisitionLine@1000 : Record 246;
      TotalQty@1005 : Decimal;
      StartingDate@1006 : Date;
      StartingTime@1007 : Time;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETFILTER("No.",ParentItemFilter);
        FINDSET;
        StartingDate := "Starting Date";
        StartingTime := "Starting Time";
        REPEAT
          TotalQty += Quantity * QtyPer;
        UNTIL NEXT = 0;

        SETRANGE("No.",ComponentItemNo);
        SETRANGE("Ending Date",StartingDate);
        SETRANGE("Ending Time",StartingTime);
        FINDFIRST;
        Assert.AreEqual(TotalQty,Quantity,IncorrectQtyOnEndingDateErr);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@207(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LineCount@1002 : Integer;
    BEGIN
      // Assign Serial no based on requirments.
      CASE ItemTracking OF
        ItemTracking::AssignSerial:
          ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
        ItemTracking::SelectSerial:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;  // Open Item Tracking Summary for Select Line.
            ItemTrackingLines.OK.INVOKE;
          END;
        ItemTracking::VerifyValue: // Using For Transfer Receipt.
          BEGIN
            ItemTrackingLines.LAST;
            REPEAT
              ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // For Serial No.
              LineCount += 1;
            UNTIL NOT ItemTrackingLines.PREVIOUS;
            Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineErr);  // Verify Number of line Tracking Line.
          END;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@134(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@132(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ReleasedProdOrderMessageHandler@39(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(AreSameMessages(Message,ReleasedProdOrderTxt),Message);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@90(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@211(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      OptionValue@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);
      TrackingOption := OptionValue;
      CASE TrackingOption OF
        TrackingOption::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingOption::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTRUE@169(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable
      Assert.IsTrue(AreSameMessages(Question,ExpectedMessage),Question);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@270(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@275(Msg@1000 : Text[1024]);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE ProdOrderComponentsHandler@288(VAR ProdOrderComponents@1000 : TestPage 99000818);
    BEGIN
      ProdOrderComponents.ItemTrackingLines.INVOKE;
      ProdOrderComponents.OK.INVOKE;
    END;

    LOCAL PROCEDURE GetShopCalendarCodeForProductionOrder@290(ProductionOrder@1000 : Record 5405) : Code[10];
    VAR
      ProdOrderRoutingLine@1002 : Record 5409;
      WorkCenter@1003 : Record 99000754;
      ShopCalendar@1004 : Record 99000751;
    BEGIN
      ProdOrderRoutingLine.SETCURRENTKEY("Prod. Order No.");
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      IF NOT ProdOrderRoutingLine.FINDFIRST THEN
        EXIT;

      IF NOT WorkCenter.GET(ProdOrderRoutingLine."Work Center No.") THEN
        EXIT;

      IF ShopCalendar.GET(WorkCenter."Shop Calendar Code") THEN
        EXIT(ShopCalendar.Code);
    END;

    LOCAL PROCEDURE CheckShopCalendarWorkingDay@292(ShopCalendarCode@1000 : Code[10];WorkingDate@1001 : Date) : Boolean;
    VAR
      Date@1003 : Record 2000000007;
      ShopCalendarWorkingDays@1004 : Record 99000752;
    BEGIN
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",WorkingDate);
      Date.FINDFIRST;

      ShopCalendarWorkingDays.SETRANGE("Shop Calendar Code",ShopCalendarCode);
      ShopCalendarWorkingDays.SETRANGE(Day,Date."Period No." - 1);
      EXIT(NOT ShopCalendarWorkingDays.ISEMPTY);
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      NZ: Unable to Execute
      AU: Unable to Execute
      IT: Unable to Execute
      ES: Unable to Execute
      IN: Unable to Execute
      US: Unable to Execute

      Tests for Manufacturing unit tests:

      Covers Test cases :
      --------------------------------------------------------------------------------------------------------------
       Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      B7419_RefreshPlanningLine                                                                             143031
      B7510_CalculateLowLevelCode                                                                           143033
      B7568_ChangeProdOrderRouting                                                                          142625
      B7612_OutputJnlWithDimValue                                                                           142627
      B28000_UntrackedPlanning                                                                              144695
      B29178_OrderComponentWithDim                                                                          142623
      B31974_PlanningWithBlockedItem                                                                        143025
      B37979_CalcPlanForReqWksh                                                                             143029
      B42752_CalcPlanForParentItem                                                                          144554
      B42752_CalcPlanForChildItem                                                                           144554
      B42538_RefreshProdOrder                                                                               144640
      B42538_ChangeUserIDOnReqLine                                                                          144640
      B42538_UserIDOnReqLine                                                                                144640
      B42538_MakePurchOrderReqLine                                                                          144640
      B44327_RefreshProdOrderSubcontracting                                                                 144622
      B44327_RoutingStatusNotCertifiedSubcontracting                                                        144622
      B44327_ProdBOMStatusNotCertifiedSubcontracting                                                        144622
      B44327_CalcSubcontracting                                                                             144622
      B44327_PostPurchOrderSubcontracting                                                                   144622
      B44714_CopyDimOnJournalLines                                                                          144947
      B44714_ChangeWorkCenterWithDim                                                                        144947
      B44714_ChangeWorkCenterWithoutDim                                                                     144947
      B45291_CalcPlanForMultipleItems                                                                       145160
      B45291_CalcCarryOutActionMsgPlan                                                                      145160
      B7479_ChangeItemOnProdComponent                                                                       142607
      B7615_ChangeFlushingMethodOnProdComponent                                                             142609
      B18019_DifferentUOMOnProductionBOMError                                                               145042
      B18019_ChangeUOMOnProductionBOMError                                                                  145042
      B32912_ProductionOrderwithFamily                                                                      142605
      B45301_PostCapacityJournal                                                                            145046
      B29203_NeededTimeOnProductionOrderCapacity                                                            142611
      B29289_ReplanProductionOrderWithVariant                                                               142613
      B32771_CapableToPromiseOnSalesOrder                                                                   142615
      RoutingCompForRelProductionOrder                                                                      11614,143511
      QtyOnProductionOrderForFamily                                                                         11604,143517
      B30656_TransferOrderWithTracking                                                                      145048
      OutputJournalForReleasedProdOrderFlushingBackward                                                     143056
      ConsumptionJournalWithProductionOrderStatusFinished                                                   143056
      ProdOrderStartingDateTime                                                                             279934
      CalculateSubcontractForReleasedProdOrderWithVariantCode                                               232826
      RefreshProdOrderWithLateDueDate                                                                        74881
      RecalculateProdOrderLetDueDateDecrease                                                                 74881
      RecalculateProdOrderBlockDueDateDecrease                                                               74881
      --------------------------------------------------------------------------------------------------------------

      Tests for Sicily Merge Bug:

      Covers Test cases :
      --------------------------------------------------------------------------------------------------------------
      Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      ChangeRtngOnProdOrdLnWithSubcontr                                                                      27007
      DeleteProdOrdLnWithSubcontr                                                                            27007

      Covers Test case for Bug Id: 56154
      --------------------------------------------------------------------------------------------------------------
      Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      DateConflictWhenOrderToOrderLink

      Covers Test cases for Hotfix Bug:
      --------------------------------------------------------------------------------------------------------------
      Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      DimensionOnOutputJournal                                                                              91914
      EarliestShipmentDateAfterPurchaseOrderReleased, AvailableToPromiseEarliestShipmentDate                97316

      Covers Test cases for Hotfix Bug:
      --------------------------------------------------------------------------------------------------------------
      Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      PostingOutputJournalDifferentBOM                                                                     358563

      Covers Test cases for Hotfix Bug: 363776
      --------------------------------------------------------------------------------------------------------------
      Test Function                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------
      DueDateRespectedForProductionOrderToOrderLink                                                        363776
      BOMVersionBasedOnProductionOrderDueDate                                                              364356
      DueDatesEqualForProductionOrderToOrderLink                                                           371679
      DimensionOnOutputJournal                                                                              91915
      DueDateRespectedForProductionOrderToOrderLink                                                        364386
      BOMVersionBasedOnProductionOrderDueDate                                                              130620
    }
    END.
  }
}

