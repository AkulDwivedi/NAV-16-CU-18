OBJECT Codeunit 134330 ERM Purchase Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryERM@1010 : Codeunit 131300;
      LibraryInventory@1016 : Codeunit 132201;
      LibrarySetupStorage@1026 : Codeunit 131009;
      LibraryVariableStorage@1011 : Codeunit 131004;
      LibraryWarehouse@1013 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      DocumentNo2@1015 : Code[20];
      IsInitialized@1000 : Boolean;
      FieldErr@1005 : TextConst '@@@="%1 = Field Name, %2 = Table Name";ENU=%1 must be equal in %2.';
      LineErr@1003 : TextConst '@@@="%1 = Table Name, %2 = Table Name";ENU=Number of lines for %1 and %2 must be equal.';
      VATAmountErr@1006 : TextConst '@@@="%1 = Amount, %2 = Table Name";ENU=VAT Amount must be %1 in %2.';
      CommonErr@1008 : TextConst '@@@="%1 = Field Name, %2 = Table Name, %3 = Table Name";ENU=%1 in %2 must be same as %3.';
      GetPostedDocErr@1014 : TextConst '@@@="%1 = Yes or No";ENU=Prices Including VAT must be equal to ''%1''';
      CurrencyChangeErr@1017 : TextConst '@@@="%1 = Currency Code";ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?';
      ChangeCrMemoInfoErr@1019 : TextConst '@@@="%1 = Document No., %2 = Line No., %3 = Document No.";ENU="Return Shipment No. must be equal to ''''  in Purchase Line: Document Type=Credit Memo, Document No.=%1, Line No.=%2. Current value is ''%3''."';
      ChangeQuantitySignErr@1020 : TextConst '@@@="%1 = Document No., %2 = Line No.";ENU="Qty. to Invoice must have the same sign as the return shipment in Purchase Line Document Type=''Credit Memo'',Document No.=''%1'',Line No.=''%2''."';
      ChangeRetQtyToShipErr@1021 : TextConst '@@@="%1 = Quantity";ENU=You cannot return more than %1 units.';
      ChangeQuantityErr@1022 : TextConst '@@@="%1 = Document No.";ENU=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.';
      DeletePurchRetOrdErr@1018 : TextConst '@@@="%1 = Document No., %2 = Line No., %3 = Quantity";ENU="Return Qty. Shipped Not Invd. must be equal to ''0''  in Purchase Line: Document Type=Return Order, Document No.=%1, Line No.=%2. Current value is ''%3''."';
      ExplodBOMErr@1023 : TextConst '@@@="%1 = Document No., %2 = Line No.";ENU="Type must be equal to ''Item''  in Purchase Line: Document Type=Credit Memo, Document No.=%1, Line No.=%2. Current value is '' ''."';
      WhseShipmentIsRequiredErr@1012 : TextConst 'ENU=Warehouse Shipment is required for Line No.';
      WrongErrorReturnedErr@1009 : TextConst '@@@="%1 = Error Text";ENU=Wrong error returned: %1.';
      WrongCurrCodeDuringCopyErr@1024 : TextConst '@@@="%1 = Currency Code, %2 = Document Type, %3 = Document No., %4 = Currency Code";ENU="Currency Code must be equal to ''%1''  in Purchase Header: Document Type=%2, No.=%3. Current value is ''%4''."';
      DocType@1025 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';

    [Test]
    PROCEDURE CopyPurchaseDocumentWithDiffCurrency@40();
    VAR
      PurchaseHeader@1001 : Record 38;
      NewPurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
      PostedInvoiceNo@1008 : Code[20];
    BEGIN
      // Check error message in case of copy document with different Currency Code and LineType <> Item
      Initialize;

      // Create And Post Purchase Invoice
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,
        LibraryPurchase.CreateVendorNo);
      CreatePurchaseInvoiceLine(
        PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithPurchSetup);
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Create New Purchase Credit Memo with Currency
      CreatePurchCrMemoWithCurrency(NewPurchaseHeader);

      // Use CopyDocument for new Credit Memo
      ASSERTERROR CreditMemoWithCopyDocument(NewPurchaseHeader,DocType::"Posted Invoice",PostedInvoiceNo,FALSE,TRUE);
      Assert.ExpectedError(
        STRSUBSTNO(
          WrongCurrCodeDuringCopyErr,PurchaseHeader."Currency Code",
          NewPurchaseHeader."Document Type",NewPurchaseHeader."No.",NewPurchaseHeader."Currency Code"));
    END;

    [Test]
    PROCEDURE PurchaseCreditMemoCreation@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Covers Document TFS_TC_ID 122458.
      // Test New Purchase Credit Memo creation.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Credit Memo.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);

      // Verify: Verify Purchase Credit Memo created.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnPurchaseCreditMemo@4();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      VATAmountLine@1002 : Record 290;
      QtyType@1003 : 'General,Invoicing,Shipping';
    BEGIN
      // Covers Document TFS_TC_ID 122459.
      // Create a Purchase Credit Memo and verify that correct VAT Amount calculated for Purchase Credit Memo.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Credit Memo and calculate VAT Amount for Purchase Lines.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);

      // Verify: Verify VAT Amount on Purchase Credit Memo.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(VATAmountErr,PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseCreditMemoReport@5();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseDocumentTest@1005 : Report 402;
      FilePath@1003 : Text[1024];
    BEGIN
      // Covers Document TFS_TC_ID 122460.
      // Create a Purchase Credit Memo and save it as external file and verify that saved files has some data.

      // Setup.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);

      // Exercise: Generate Report as external file for Purchase Credit Memo.
      CLEAR(PurchaseDocumentTest);
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseDocumentTest.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      PurchaseDocumentTest.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PostedPurchaseCreditMemoReport@12();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchCrMemoHdr@1003 : Record 124;
      PurchaseCreditMemo@1005 : Report 407;
      FilePath@1006 : Text[1024];
      PostedCreditMemoNo@1002 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122461, 122463.
      // Create a Purchase Credit Memo and Post it. Generate Posted Purchase Credit Memo Report and verify that it contains some data.

      // Setup.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PostedCreditMemoNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Generate Report as external file for Posted Purchase Credit Memo.
      CLEAR(PurchaseCreditMemo);
      PurchCrMemoHdr.SETRANGE("No.",PostedCreditMemoNo);
      PurchaseCreditMemo.SETTABLEVIEW(PurchCrMemoHdr);
      FilePath := TEMPORARYPATH + FORMAT('Purchase - Credit Memo') + PurchCrMemoHdr."No." + '.xlsx';
      PurchaseCreditMemo.SAVEASEXCEL(FilePath);

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PostPurchaseCreditMemo@14();
    VAR
      VATPostingSetup@1002 : Record 325;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchCrMemoHdr@1009 : Record 124;
      ReturnShipmentLine@1001 : Record 6651;
      PostedCreditMemoNo@1003 : Code[20];
      PostedReturnShipmentNo@1000 : Code[20];
      Counter@1004 : Integer;
      AmountInclVAT@1007 : Decimal;
    BEGIN
      // Covers Document TFS_TC_ID 122462, 122464, 122465, 122466, 122467.
      // Create and Post Purchase Credit Memo and verify Posted Return Shipment Lines,Vendor Ledger Entry, GL Entry, VAT Entry and
      // Value Entries.

      // Setup:
      Initialize;

      // Exercise: Create and Post Purchase Credit Memo with multiple lines.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(10) DO
        CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PostedReturnShipmentNo := GetNextReturnShipmentNo(PurchaseHeader."Return Shipment No. Series");
      PostedCreditMemoNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Posted Return Shipment Lines, GL Entries, Vendor Ledger Entries, VAT Entries and Value Entries.
      ReturnShipmentLine.SETRANGE("Document No.",PostedReturnShipmentNo);
      Assert.AreEqual(
        Counter,ReturnShipmentLine.COUNT,STRSUBSTNO(LineErr,PurchaseLine.TABLECAPTION,ReturnShipmentLine.TABLECAPTION));
      PurchCrMemoHdr.GET(PostedCreditMemoNo);
      PurchCrMemoHdr.CALCFIELDS(Amount);
      VATPostingSetup.GET(PurchaseLine."VAT Bus. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      AmountInclVAT := ROUND(PurchCrMemoHdr.Amount * (1 + VATPostingSetup."VAT %" / 100));

      VerifyGLEntry(PostedCreditMemoNo,AmountInclVAT);
      VerifyVendorLedgerEntry(PostedCreditMemoNo,AmountInclVAT);
      VerifyValueEntry(PostedCreditMemoNo,PurchCrMemoHdr.Amount);
    END;

    [Test]
    PROCEDURE LocationOnPurchaseCreditMemo@15();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Location@1005 : Record 14;
      ReturnShipmentLine@1004 : Record 6651;
      PostedReturnShipmentNo@1002 : Code[20];
      RequireShipment@1006 : Boolean;
    BEGIN
      // Covers Document TFS_TC_ID 122468, 122469.
      // Create a Purchase Credit Memo with Location and Post it, verify Location on Return Shipment Line.

      // Setup: Update Warehouse Location to Enable Require Shipment.
      Initialize;
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      RequireShipment := Location."Require Shipment";  // Store the original state of Require Shipment Field.
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);

      // Exercise: Create Purchase Credit Memo with Location and Post it.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
      PostedReturnShipmentNo := GetNextReturnShipmentNo(PurchaseHeader."Return Shipment No. Series");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Location on Return Shipment Line.
      ReturnShipmentLine.SETRANGE("Document No.",PostedReturnShipmentNo);
      ReturnShipmentLine.FINDFIRST;
      Assert.AreEqual(
        PurchaseLine."Location Code",ReturnShipmentLine."Location Code",
        STRSUBSTNO(
          CommonErr,ReturnShipmentLine.FIELDCAPTION("Location Code"),ReturnShipmentLine.TABLECAPTION,PurchaseLine.TABLECAPTION));

      // Tear Down: Cleanup of Warehouse Location Setup Done.
      Location.VALIDATE("Require Shipment",RequireShipment);  // Restore previous state of Location.
      Location.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE LineDiscountPurchaseCreditMemo@17();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseLineDiscount@1002 : Record 7014;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122470, 122471.
      // Create Purchase Credit Memo with Line Discount and Verify the Amount in GL Entry.

      // Setup: Create Line Discount Setup.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);

      // Exercise: Create and Post Purchase Credit Memo. Take Quantity greater than Purchase Line Discount Min. Quantity.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLineDiscount."Vendor No.");
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLineDiscount."Item No.",
        PurchaseLineDiscount."Minimum Quantity" + LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Qty. to Receive",0);  // Qty. to Receive must be 0 for Purchase Credit Memo.
      PurchaseLine.MODIFY(TRUE);

      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify the Line Discount Amount for Purchase Credit Memo in GL Entry.
      VerifyLineDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * PurchaseLineDiscount."Line Discount %" / 100);
    END;

    [Test]
    PROCEDURE InvDiscountPurchaseCreditMemo@34();
    VAR
      VendorInvoiceDisc@1002 : Record 24;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122472, 122473.
      // Create Purchase Credit Memo with Invoice Discount, Post it and verify Posted GL Entry.

      // Setup: Create Invoice Discount Setup.
      Initialize;
      SetupInvoiceDiscount(VendorInvoiceDisc);

      // Exercise: Create Purchase Credit Memo, calculate Invoice Discount and Post the Credit Memo.
      // Take Direct Unit Cost equal to Minimum Amount so that the Total Amount always greater than Minimum Amount.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorInvoiceDisc.Code);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PurchaseLine.VALIDATE("Direct Unit Cost",VendorInvoiceDisc."Minimum Amount");
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Invoice Discount Amount.
      VerifyInvoiceDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VendorInvoiceDisc."Discount %" / 100);
    END;

    [Test]
    PROCEDURE PurchaseCreditMemoWithFCY@18();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      ReturnShipmentHeader@1003 : Record 6650;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122474, 122475.
      // Create and Post a Purchase Credit Memo with Currency and verify currency on Return Shipment.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Credit Memo with new Currency and Post it.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      PurchaseHeader.VALIDATE("Currency Code",CreateCurrency);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PostedDocumentNo := GetNextReturnShipmentNo(PurchaseHeader."Return Shipment No. Series");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Currency Code in Purchase Line and Posted Purchase Return Shipment Header.
      ReturnShipmentHeader.GET(PostedDocumentNo);
      Assert.AreEqual(
        PurchaseHeader."Currency Code",PurchaseLine."Currency Code",
        STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION("Currency Code"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        PurchaseHeader."Currency Code",ReturnShipmentHeader."Currency Code",
        STRSUBSTNO(FieldErr,ReturnShipmentHeader.FIELDCAPTION("Currency Code"),ReturnShipmentHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CopyPurchaseDocument@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseLine2@1005 : Record 39;
      PurchaseOrderNo@1003 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122476.
      // Create Purchase Order. Perform Copy Document on Purchase Credit Memo and Verify the data in Purchase Credit Memo.

      // Setup: Create a Purchase Order.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PurchaseOrderNo := PurchaseHeader."No.";

      // Exercise: Create Purchase Credit Memo Header and copy the Purchase Order to Purchase Credit Memo.
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.INSERT(TRUE);

      CreditMemoWithCopyDocument(PurchaseHeader,DocType::Order,PurchaseOrderNo,TRUE,FALSE);

      // Verify: Verify that Correct Item No. and Quantity copied from Purchase Order to Purchase Credit Memo Line.
      PurchaseLine2.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine2.FINDFIRST;
      Assert.AreEqual(
        PurchaseLine."No.",PurchaseLine2."No.",STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION("No."),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        PurchaseLine.Quantity,PurchaseLine2.Quantity,
        STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION(Quantity),PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseCreditMemoApplication@19();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1004 : Record 38;
      PurchaseLine2@1003 : Record 39;
      ReturnShipmentHeader@1007 : Record 6650;
      PostedPurchaseInvoiceNo@1002 : Code[20];
      PostedReturnShipmentNo@1005 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID 122477.
      // Check if Credit Memo can be applied against Purchase Invoice.

      // Setup: Create a Purchase Invoice and Post it. Store Posted Invoice No. in a variable.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      PostedPurchaseInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Create Purchase Credit Memo with the same Vendor used in Purchase Invoice, Update Applies to Document Type
      // and Document No. fields and Post Purchase Credit Memo.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader2,PurchaseHeader2."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader2.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader2."No.");
      PurchaseHeader2.VALIDATE("Applies-to Doc. Type",PurchaseHeader2."Applies-to Doc. Type"::Invoice);
      PurchaseHeader2.VALIDATE("Applies-to Doc. No.",PostedPurchaseInvoiceNo);
      PurchaseHeader2.MODIFY(TRUE);

      CreatePurchaseLine(PurchaseLine2,PurchaseHeader2);
      PostedReturnShipmentNo := GetNextReturnShipmentNo(PurchaseHeader2."Return Shipment No. Series");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify the Applies to Doc Type and Applies to Doc No. in Return Shipment Header.
      ReturnShipmentHeader.GET(PostedReturnShipmentNo);
      Assert.AreEqual(
        PurchaseHeader."Document Type",ReturnShipmentHeader."Applies-to Doc. Type",
        STRSUBSTNO(FieldErr,ReturnShipmentHeader.FIELDCAPTION("Applies-to Doc. Type"),ReturnShipmentHeader.TABLECAPTION));
      Assert.AreEqual(
        PostedPurchaseInvoiceNo,ReturnShipmentHeader."Applies-to Doc. No.",
        STRSUBSTNO(FieldErr,ReturnShipmentHeader.FIELDCAPTION("Applies-to Doc. No."),ReturnShipmentHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CopyPurchaseInvoiceAndVerify@10();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      VATPostingSetup@1008 : Record 325;
      PostedCreditMemoNo@1011 : Code[20];
      PostedPurchaseInvoiceNo@1009 : Code[20];
    BEGIN
      // Test Copy Document functionality by creating Purchase Invoice then copy it to Purchase Credit memo and Verify in
      // G/L Entry.

      // Setup: Create G/L Account, Update General Ledger Setup and VAT Posting Setup. Create Purchase Invoice and post.
      Initialize;
      LibraryERM.SetUnrealizedVAT(TRUE);
      FindAndUpdateVATPostingSetup(VATPostingSetup);
      CreatePurchaseInvoiceWithVAT(PurchaseHeader,VATPostingSetup);
      PostedPurchaseInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Create Purchase Credit Memo Header, copy the Purchase Invoice to Purchase Credit Memo and post.
      CreatePurchaseHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      CreditMemoWithCopyDocument(PurchaseHeader2,DocType::"Posted Invoice",PostedPurchaseInvoiceNo,FALSE,FALSE);
      GetPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");
      PostedCreditMemoNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify VAT Amount in G/L Entry.
      VerifyVATAmountOnGLEntry(
        PurchaseHeader2."Document Type",PostedCreditMemoNo,
        -GetVATAmountOnGLEntry(PostedPurchaseInvoiceNo,PurchaseHeader."Document Type"));

      // TearDown: Rollback VAT Posting Setup and General Ledger Setup.
      UpdateVATPostingSetup(
        VATPostingSetup,VATPostingSetup."Unrealized VAT Type",VATPostingSetup."Purch. VAT Unreal. Account",
        VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.");
    END;

    [Test]
    PROCEDURE ShipPurchaseReturnOrder@37();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Verify Item Ledger Entry after ship the Purchase Return Order.

      // Setup. Create Purchase Return Order.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);

      // Exercise: Ship Purchase Return Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Item Ledger Entry.
      VerifyItemLedgerEntry(DocumentNo,PurchaseLine."No.",-PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE DirectCostInclVATOnPurchCrMemo@74();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1002 : Record 39;
      DirectCostInclVAT@1004 : Decimal;
    BEGIN
      // Check Direct Cost Incl VAT field in Purchase Credit Memo Line created by using the function Get Return Shipment lines When Price
      // Including VAT is True.

      // Setup. Create Purchase Return Order and create Purchase Credit Memo.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreatePurchaseHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader2.VALIDATE("Prices Including VAT",TRUE);
      PurchaseHeader2.MODIFY(TRUE);
      PurchaseLine2.VALIDATE("Document Type",PurchaseHeader2."Document Type");
      PurchaseLine2.VALIDATE("Document No.",PurchaseHeader2."No.");
      DirectCostInclVAT := PurchaseLine."Direct Unit Cost" + PurchaseLine."Direct Unit Cost" * PurchaseLine."VAT %" / 100;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Get Return Shipments",PurchaseLine2);

      // Verify: Verify Unit Price Incl VAT field in Sales Credit Memo Line.
      PurchaseLine2.SETRANGE("Document Type",PurchaseHeader2."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseHeader2."No.");
      PurchaseLine2.SETRANGE("No.",PurchaseLine."No.");
      PurchaseLine2.FINDFIRST;
      Assert.AreNearlyEqual(
        DirectCostInclVAT,PurchaseLine2."Direct Unit Cost",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION("Direct Unit Cost"),PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE VATAmountOnPurchaseCrMemoUsingCopyDocument@45();
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      VATPostingSetup@1004 : Record 325;
      DocumentNo@1003 : Code[20];
      VATAmount@1009 : Decimal;
    BEGIN
      // Test VAT Amount on GL Entry after posting Purchase Credit Memo against the Purchase Invoice with Reverse Charge VAT using Copy Document.

      // Setup: Create G/L Account, Purchase Invoice and copy it to Purchase Credit Memo. Update General Ledger Setup, VAT Posting Setup and the Direct Unit Cost on Purchase Line.
      Initialize;
      LibraryERM.SetUnrealizedVAT(TRUE);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
      UpdateVATPostingSetup(
        VATPostingSetup,VATPostingSetup."Unrealized VAT Type"::Percentage,LibraryERM.CreateGLAccountNo,LibraryERM.CreateGLAccountNo);

      CreatePurchaseInvoiceWithVAT(PurchaseHeader,VATPostingSetup);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      CreditMemoWithCopyDocument(PurchaseHeader2,DocType::"Posted Invoice",DocumentNo,FALSE,FALSE);
      GetAndUpdatePurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");
      VATAmount := ROUND(ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VATPostingSetup."VAT %" / 100);

      // Exercise: Post Purchase Credit Memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify VAT Amount in G/L Entry.
      VerifyVATAmountOnGLEntry(PurchaseHeader2."Document Type",DocumentNo,-VATAmount);

      // TearDown: Rollback VAT Posting Setup and General Ledger Setup.
      UpdateVATPostingSetup(
        VATPostingSetup,VATPostingSetup."Unrealized VAT Type",VATPostingSetup."Purch. VAT Unreal. Account",
        VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.");
    END;

    [Test]
    PROCEDURE VATAmountOnPostedPurchaseInvoice@49();
    VAR
      VATPostingSetup@1004 : Record 325;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1000 : Code[20];
      VATAmount@1003 : Decimal;
    BEGIN
      // Verify G/L Entry for VAT Amount after posting Purchase Invoice.

      // Setup.
      Initialize;
      CreatePurchaseInvoice(PurchaseHeader);
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      VATPostingSetup.GET(PurchaseLine."VAT Bus. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      VATAmount := ROUND(ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VATPostingSetup."VAT %" / 100);

      // Exercise: Post Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify.
      VerifyVATAmountOnGLEntry(PurchaseHeader."Document Type",DocumentNo,VATAmount);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE PostPurchaseCrMemoUsingGetPostedDocLines@47();
    VAR
      VATPostingSetup@1000 : Record 325;
      PurchaseHeader@1003 : Record 38;
      PurchaseHeader2@1006 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1004 : Code[20];
      VATAmount@1009 : Decimal;
      OptionString@1007 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      // Verify G/L Entry for VAT Amount after posting Purchase Credit Memo using Get Posted Document Lines to Reverse against posting of Return Order as Receive.

      // Setup: Update General Ledger Setup, Create Purchase Invoice, Purchase Return Order using Copy Document and post it, Create Purchase Credit Memo using Get Posted Document Lines.
      Initialize;
      LibraryERM.SetVATRoundingType('=');
      CreatePurchaseInvoice(PurchaseHeader);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader2,DocType::"Posted Invoice",DocumentNo,FALSE,TRUE);  // Set TRUE for Include Header and FALSE for Recalculate Lines.
      DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,FALSE);  // Using global variable DocumentNo2 due to need in verification.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader2."Buy-from Vendor No.");
      GetPostedDocumentLines(PurchaseHeader."No.",OptionString::PostedReturnShipments);
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      VATPostingSetup.GET(PurchaseLine."VAT Bus. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      VATAmount := ROUND(ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VATPostingSetup."VAT %" / 100);

      // Exercise: Post the Purchase Credit Memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify VAT Amount on G/L Entry.
      VerifyVATAmountOnGLEntry(PurchaseHeader."Document Type",DocumentNo,-VATAmount);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE GetPostedDocumentWithPriceIncludingVAT@65();
    BEGIN
      // Verify Error while Get Posted Invoice with Price Including VAT to Reverse from Credit Memo without Price Including VAT.
      ErrorOnGetPostedDocumentLineToReverse(TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE GetPostedDocumentWithoutPriceIncludingVAT@66();
    BEGIN
      // Verify Error while Get Posted Invoice without Price Including VAT to Reverse from Credit Memo with Price Including VAT.
      ErrorOnGetPostedDocumentLineToReverse(FALSE,TRUE);
    END;

    LOCAL PROCEDURE GetNextReturnShipmentNo@28(ReturnShipmentNoSeries@1001 : Code[10]) : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      EXIT(NoSeriesManagement.GetNextNo(ReturnShipmentNoSeries,WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE ErrorOnGetPostedDocumentLineToReverse@81(PricesIncludingVAT@1004 : Boolean;PricesIncludingVAT2@1005 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      OptionString@1003 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      // Setup: Create and Post Purchase Invoice, create Purchase Credit Memo.
      Initialize;
      CreateAndPostPurchInvWithPricesInclVAT(PurchaseLine,PricesIncludingVAT);
      CreatePurchDocWithPriceInclVAT(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine."Buy-from Vendor No.",PricesIncludingVAT2);

      // Exercise.
      ASSERTERROR GetPostedDocumentLines(PurchaseHeader."No.",OptionString::PostedInvoices);

      // Verify: Verify error while Get Posted Document to Reverse from Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(GetPostedDocErr,PurchaseHeader."Prices Including VAT"));
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE PurchCreditMemoWithtPriceIncludingVAT@72();
    BEGIN
      // Verify Purchase Credit Memo Line after Get Posted Invoice Line with Price Including VAT to Reverse from Credit Memo.
      CreditMemoFromGetPostedDocumentLine(TRUE,TRUE)
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE PurchCreditMemoWithoutPriceIncludingVAT@86();
    BEGIN
      // Verify Purchase Credit Memo Line after Get Posted Invoice Line without Price Including VAT to Reverse from Credit Memo.
      CreditMemoFromGetPostedDocumentLine(FALSE,FALSE)
    END;

    LOCAL PROCEDURE CreditMemoFromGetPostedDocumentLine@16(PricesInclVATFirstDoc@1004 : Boolean;PricesInclVATSecondDoc@1005 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1006 : Record 39;
      OptionString@1003 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      // Setup: Create and Post Purchase Invoice, create Purchase Credit Memo with Price Including VAT.
      Initialize;
      CreateAndPostPurchInvWithPricesInclVAT(PurchaseLine,PricesInclVATFirstDoc);
      CreatePurchDocWithPriceInclVAT(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine."Buy-from Vendor No.",PricesInclVATSecondDoc);

      // Exercise.
      GetPostedDocumentLines(PurchaseHeader."No.",OptionString::PostedInvoices);

      // Verify: Verify Credit Memo Line After Get Posted Document Line to Reverse.
      PurchaseHeader.TESTFIELD("Prices Including VAT",PricesInclVATFirstDoc);
      VerifyPurchaseLine(PurchaseHeader,PurchaseLine.Quantity,PurchaseLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler,ConfirmHandler)]
    PROCEDURE ChangePurchCrMemoHdrInfoError@53();
    VAR
      Currency@1004 : Record 4;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify error when change Purchase Credit Memo Header Information, created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      DocumentNo := CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader,PurchaseHeader."Buy-from Vendor No.");
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue(CurrencyChangeErr);  // Enqueue values for ConfirmHandler.
      LibraryERM.FindCurrency(Currency);

      // Exercise.
      ASSERTERROR PurchaseHeader.VALIDATE("Currency Code",Currency.Code);

      // Verify: Verify error when change Currency Code on Purchase Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(ChangeCrMemoInfoErr,PurchaseLine."Document No.",PurchaseLine."Line No.",DocumentNo));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE DeletePurchRetOrdAfterGetReturnShipmentError@61();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
    BEGIN
      // Verify error when delete Purchase Return Order after creating Purchase Credit Memo.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      CreateAndShipPurchRetOrder(PurchaseHeader);
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");

      // Exercise: Delete Purchase Return Order.
      ASSERTERROR PurchaseHeader.DELETE(TRUE);

      // Verify: Verify error when Purchase Return Order.
      Assert.ExpectedError(
        STRSUBSTNO(DeletePurchRetOrdErr,PurchaseLine."Document No.",PurchaseLine."Line No.",PurchaseLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE ChangePurchCrMemoLnInfoError@54();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify error when change Purchase Credit Memo Line Information, created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      DocumentNo := CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      GetPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");

      // Exercise.
      ASSERTERROR PurchaseLine.VALIDATE(Type,PurchaseLine.Type::"G/L Account");

      // Verify: Verify error when change Line Type on Purchase Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(ChangeCrMemoInfoErr,PurchaseLine."Document No.",PurchaseLine."Line No.",DocumentNo));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE ChangePurchCrMemoQtySignError@114();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
    BEGIN
      // Verify error when change Sign of Purchase Credit Memo Quantity, created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      GetPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");

      // Exercise: Change the Sign of Purchase Line Quantity.
      ASSERTERROR PurchaseLine.VALIDATE(Quantity,-PurchaseLine.Quantity);

      // Verify: Verify error when change Sign of Purchase Credit Memo Quantity.
      Assert.ExpectedError(STRSUBSTNO(ChangeQuantitySignErr,PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE ChangeReturnQtyToShipOnPurchCrMemoError@115();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
    BEGIN
      // Verify error when change Return Qty. to Ship on Purchase Credit Memo, created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      GetPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");

      // Exercise: Input Return Qty. to Ship more than Purchase Line Quantity.
      ASSERTERROR PurchaseLine.VALIDATE("Return Qty. to Ship",PurchaseLine.Quantity + 1);  // Using 1 for adding more than Quantity.

      // Verify: Verify error when change Return Qty. to Ship on Purchase Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(ChangeRetQtyToShipErr,PurchaseLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE ChangePurchCrMemoQtyError@116();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader2@1003 : Record 38;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify error when change Quantity on Purchase Credit Memo, created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      DocumentNo := CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      GetPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");

      // Exercise: Input Quantity more than Purchase Line Quantity.
      ASSERTERROR PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity + 1);  // Using 1 for adding more than Quantity.

      // Verify: Verify error when change Quantity on Purchase Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(ChangeQuantityErr,DocumentNo));
    END;

    [Test]
    [HandlerFunctions(GetReturnShipmentHandler)]
    PROCEDURE ExplBOMOnPurchCrMemoError@57();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Verify error while applying Explode BOM on Purchase Credit Memo created from Purchase Return Order.

      // Setup: Create and Ship Purchase Return Order. Create Purchase Credit Memo using Get Return Shipment Lines.
      Initialize;
      CreateAndShipPurchRetOrder(PurchaseHeader);
      CreatePurchCrMemoUsingGetRetShptLines(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      FilterOnPurchaseLine(PurchaseLine,PurchaseHeader2."Document Type",PurchaseHeader2."No.");
      PurchaseLine.FINDFIRST;

      // Excercise: Apply Explode BOM on Purchase Credit Memo Line.
      ASSERTERROR LibraryPurchase.ExplodeBOM(PurchaseLine);

      // Verify: Verify error while applying Explode BOM on Purchase Credit Memo.
      Assert.ExpectedError(STRSUBSTNO(ExplodBOMErr,PurchaseLine."Document No.",PurchaseLine."Line No."));
    END;

    [Test]
    PROCEDURE ExtendedTextOnPurchRetOrd@50();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseReturnOrder@1003 : TestPage 6640;
      ItemNo@1002 : Code[20];
    BEGIN
      // Verify Extended Text on Purchase Return Order Line with Extended Text Line of Item.

      // Setup: Create Item with extended Text Line. Create Purchase Return Order.
      Initialize;
      ItemNo := CreateItemAndExtendedText;
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      PurchaseReturnOrder.OPENEDIT;

      // Exercise: Insert Extended Text in Purchase Line.
      PurchaseReturnOrder.PurchLines.Action1901742204.INVOKE;

      // Verify: Verify desription of Extended Text of Purchase Return Order Line.
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.TESTFIELD(Description,ItemNo);
    END;

    [Test]
    PROCEDURE CreatePurchaseCrMemoLineWhiteLocationQtyError@94();
    BEGIN
      // Unit test
      ASSERTERROR PurchDocLineQtyValidation;
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,WhseShipmentIsRequiredErr) > 0,STRSUBSTNO(WrongErrorReturnedErr,GETLASTERRORTEXT));
    END;

    [Test]
    PROCEDURE CreditMemoLineDiscountRoundingUsingCopyDoc@1();
    VAR
      PurchaseHeaderSrc@1000 : Record 38;
      PurchaseHeaderDst@1003 : Record 38;
      PurchaseLine@1005 : Record 39;
      DocType@1004 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      DocumentNo@1002 : Code[20];
      UnitPrice@1001 : Decimal;
      DiscountAmt@1006 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [Rounding] [Copy Document]
      // [SCENARIO 375821] Line Discount Amount is correctly copied when using Copy Document for Purchase Credit Memo
      Initialize;
      DiscountAmt := 1;
      UnitPrice := 20000000; // = 1 / (0.00001 / 2)

      // [GIVEN] Posted Purchase Invoice with Quantity = 1, "Unit Price" = 20000000, "Line Discount Amount" = 1, "Line Discount %" = 0.00001
      CreatePurchaseInvoice(PurchaseHeaderSrc);
      ModifyPurchaseLine(PurchaseHeaderSrc."Document Type",PurchaseHeaderSrc."No.",1,UnitPrice,DiscountAmt);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeaderSrc,TRUE,TRUE);

      // [WHEN] Create new Purchase Credit Memo using Copy Document
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderDst,PurchaseHeaderDst."Document Type"::"Credit Memo",PurchaseHeaderSrc."Buy-from Vendor No.");
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeaderDst,DocType::"Posted Invoice",DocumentNo,TRUE,FALSE);

      // [THEN] Purchase Credit Memo "Line Discount Amount" = 1
      GetPurchaseLine(PurchaseLine,PurchaseHeaderDst."Document Type",PurchaseHeaderDst."No.");
      Assert.AreEqual(DiscountAmt,PurchaseLine."Line Discount Amount",PurchaseLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE CreditMemoLineDiscountRoundingUsingGetPostedDocLines@102();
    VAR
      PurchaseHeaderSrc@1006 : Record 38;
      PurchaseHeaderDst@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      UnitPrice@1001 : Decimal;
      DiscountAmt@1000 : Decimal;
      OptionString@1003 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      // [FEATURE] [Line Discount] [Rounding] [Get Document Lines to Reverse]
      // [SCENARIO 375821] Line Discount Amount is correctly copied when using Get Posted Document Lines for Purchase Credit Memo
      Initialize;
      DiscountAmt := 1;
      UnitPrice := 20000000; // = 1 / (0.00001 / 2)

      // [GIVEN] Posted Purchase Invoice with Quantity = 1, "Unit Price" = 20000000, "Line Discount Amount" = 1, "Line Discount %" = 0.00001
      CreatePurchaseHeader(PurchaseHeaderSrc,PurchaseHeaderSrc."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeaderSrc,PurchaseLine.Type::Item,CreateItem,1);
      ModifyPurchaseLine(PurchaseHeaderSrc."Document Type",PurchaseHeaderSrc."No.",1,UnitPrice,DiscountAmt);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeaderSrc,TRUE,TRUE);

      // [WHEN] Create new Purchase Credit Memo using Get Posted Document Lines
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderDst,PurchaseHeaderDst."Document Type"::"Credit Memo",PurchaseHeaderSrc."Buy-from Vendor No.");
      GetPostedDocumentLines(PurchaseHeaderDst."No.",OptionString::PostedInvoices);

      // [THEN] Purchase Credit Memo "Line Discount Amount" = 1
      GetPurchaseLine(PurchaseLine,PurchaseHeaderDst."Document Type",PurchaseHeaderDst."No.");
      Assert.AreEqual(DiscountAmt,PurchaseLine."Line Discount Amount",PurchaseLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesHandler)]
    PROCEDURE GetDocLinesToReverseFromInvoiceWithTwoShipments@13();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      LineDiscount@1004 : Decimal;
      OptionString@1005 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      // [FEATURE] [Line Discount] [Get Document Lines to Reverse]
      // [SCENARIO 376131] Action "Get Document Lines to Reserse" copies line discount from original purchase document when the purch. order is received in two parts, then invoiced

      // [GIVEN] Purchase order with one line: "Line Discount %" = 10
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDecInRange(5,10,2));

      LineDiscount := LibraryRandom.RandDec(50,2);
      PurchaseLine.VALIDATE("Line Discount %",LineDiscount);
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);
      PurchaseLine.MODIFY(TRUE);
      // [GIVEN] Post partial receipt
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      // [GIVEN] Receive remaining quantity
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      // [GIVEN] Invoice total amount
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [GIVEN] Create credit memo
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      // [WHEN] Run Get Document Lines to Reverse and copy from posted purchase invoice
      GetPostedDocumentLines(PurchaseHeader."No.",OptionString::PostedInvoices);

      // [THEN] "Line Discount %" = 10 in the credit memo
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      Assert.AreEqual(LineDiscount,PurchaseLine."Line Discount %",PurchaseLine.FIELDCAPTION("Line Discount Amount"));
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesWithSpecificCrMemoValidationHandler)]
    PROCEDURE UI_GetPostedDocumentLinesToReverseFromPurchCrMemoWithItem@303();
    VAR
      PurchHeader@1003 : Record 38;
      NewPurchHeader@1005 : Record 38;
      PurchLine@1004 : Record 39;
      PurchCreditMemo@1002 : TestPage 52;
      CrMemoNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI] [Credit Memo] [Get Posted Document Lines to Reverse]
      // [SCENARIO 382062] It is possible to get Posted Purchase Credit Memo with item to reverse from new Purchase Credit Memo

      Initialize;

      // [GIVEN] Posted Purchase Credit Memo "X" with Item
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::"Credit Memo",LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      CrMemoNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
      LibraryVariableStorage.Enqueue(CrMemoNo); // for PostedPurchaseDocumentLinesWithSpecificCrMemoValidationHandler

      // [GIVEN] New Purchase Credit Memo
      LibraryPurchase.CreatePurchHeader(NewPurchHeader,NewPurchHeader."Document Type"::"Credit Memo",PurchHeader."Pay-to Vendor No.");

      // [GIVEN] Opened Purchase Credit Memo page with new Purchase Credit Memo
      PurchCreditMemo.OPENEDIT;
      PurchCreditMemo.FILTER.SETFILTER("No.",NewPurchHeader."No.");

      // [WHEN] Invoke action "Get Posted Document Lines to Reverse"
      PurchCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;

      // [THEN] "Posted Purchase Document Lines" is opened and Posted Purchase Credit Memo "X" exists in "Posted Credit Memos" list
      // Verification done in handler PostedPurchaseDocumentLinesWithSpecificCrMemoValidationHandler
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      DocumentNo2 := '';
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;

      IsInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateAndPostPurchInvWithPricesInclVAT@92(VAR PurchaseLine@1000 : Record 39;PricesIncludingVAT@1002 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchDocWithPriceInclVAT(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo,PricesIncludingVAT);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandInt(10));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndShipPurchRetOrder@63(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreatePurchCrMemoUsingGetRetShptLines@67(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Purch.-Get Return Shipments",PurchaseLine);
    END;

    LOCAL PROCEDURE CreatePurchDocWithPriceInclVAT@106(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option;BuyFromVendorNo@1002 : Code[20];PricesIncludingVAT@1001 : Boolean);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      PurchaseHeader.VALIDATE("Prices Including VAT",PricesIncludingVAT);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@21(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithVAT@29(VAR PurchaseHeader@1001 : Record 38;VATPostingSetup@1003 : Record 325);
    VAR
      PurchaseLine@1002 : Record 39;
      GLAccount@1000 : Record 15;
    BEGIN
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,
        LibraryPurchase.CreateVendorWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      CreatePurchaseInvoiceLine(
        PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase));
    END;

    LOCAL PROCEDURE CreatePurchaseInvoice@43(VAR PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      CreatePurchaseInvoiceLine(PurchaseHeader,PurchaseLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@25(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,
        LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(10,20));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandIntInRange(1000,2000));
      PurchaseLine.MODIFY;

      IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::"Credit Memo" THEN BEGIN
        PurchaseLine.VALIDATE("Qty. to Receive",0);  // Qty. to Receive must be 0 for Purchase Credit Memo.
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceLine@36(PurchaseHeader@1000 : Record 38;Type@1001 : Option;No@1002 : Code[20]);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));  // Use Random Unit Price between 1 and 100.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemAndExtendedText@55() : Code[20];
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
      Item@1001 : Record 27;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryService@1000 : Codeunit 131902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,Item."No.");
      ExtendedTextLine.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreditMemoWithCopyDocument@33(VAR PurchaseHeader@1004 : Record 38;DocType@1003 : Option;DocNo@1002 : Code[20];IncludeHeader@1001 : Boolean;RecalcLines@1000 : Boolean);
    VAR
      CopyPurchaseDocument@1005 : Report 492;
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocType,DocNo,IncludeHeader,RecalcLines);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE CreatePurchCrMemoWithCurrency@41(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WITH PurchaseHeader DO BEGIN
        INIT;
        VALIDATE("Buy-from Vendor No.",LibraryPurchase.CreateVendorNo);
        VALIDATE("Currency Code",CreateCurrency);
        VALIDATE("Document Type","Document Type"::"Credit Memo");
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ModifyPurchaseLine@58(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];NewQuantity@1003 : Decimal;NewDirectUnitCost@1004 : Decimal;NewLineDiscountAmt@1005 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      GetPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      WITH PurchaseLine DO BEGIN
        VALIDATE(Quantity,NewQuantity);
        VALIDATE("Direct Unit Cost",NewDirectUnitCost);
        VALIDATE("Line Discount Amount",NewLineDiscountAmt);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FindAndUpdateVATPostingSetup@20(VAR VATPostingSetup@1002 : Record 325);
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      UpdateVATPostingSetup(
        VATPostingSetup,VATPostingSetup."Unrealized VAT Type"::Percentage,LibraryERM.CreateGLAccountNo,LibraryERM.CreateGLAccountNo);
    END;

    LOCAL PROCEDURE FilterOnPurchaseLine@56(VAR PurchaseLine@1000 : Record 39;DocumentType@1002 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE GetVATAmountOnGLEntry@42(DocumentNo@1000 : Code[20];DocumentType@1002 : Option) : Decimal;
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.FINDFIRST;
      EXIT(GLEntry."VAT Amount");
    END;

    LOCAL PROCEDURE GetPurchaseLine@39(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      FilterOnPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetPostedDocumentLines@46(No@1000 : Code[20];DocumentType@1002 : Option);
    VAR
      PurchaseCreditMemo@1001 : TestPage 52;
    BEGIN
      LibraryVariableStorage.Enqueue(DocumentType);
      PurchaseCreditMemo.OPENEDIT;
      PurchaseCreditMemo.FILTER.SETFILTER("No.",No);
      PurchaseCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetAndUpdatePurchaseLine@64(VAR PurchaseLine@1001 : Record 39;DocumentType@1002 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      // Enter Random value for Direct Unit Cost.
      GetPurchaseLine(PurchaseLine,DocumentType,DocumentNo);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupLineDiscount@22(VAR PurchaseLineDiscount@1000 : Record 7014);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Enter Random Values for "Minimum Quantity" and "Line Discount %".
      Item.GET(CreateItem);
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,Item."No.",LibraryPurchase.CreateVendorNo,
        WORKDATE,'','',Item."Base Unit of Measure",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@31(VAR VendorInvoiceDisc@1001 : Record 24);
    BEGIN
      // Enter Random Values for "Minimum Amount" and "Discount %".
      LibraryERM.CreateInvDiscForVendor(
        VendorInvoiceDisc,LibraryPurchase.CreateVendorNo,'',LibraryRandom.RandInt(100));
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE UpdateVATPostingSetup@26(VATPostingSetup@1000 : Record 325;UnrealizedVATType@1003 : Option;PurchVATUnrealAccountNo@1001 : Code[20];ReverseChrgVATUnrealAccNo@1002 : Code[20]);
    BEGIN
      // Update Unrealized VAT Type and Purch. VAT Unreal. Account field and Reverse Chrg. VAT Unreal. Account field in VAT Posting Setup.
      VATPostingSetup.GET(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.VALIDATE("Unrealized VAT Type",UnrealizedVATType);
      VATPostingSetup.VALIDATE("Purch. VAT Unreal. Account",PurchVATUnrealAccountNo);
      VATPostingSetup.VALIDATE("Reverse Chrg. VAT Unreal. Acc.",ReverseChrgVATUnrealAccNo);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyVATAmountOnGLEntry@59(DocumentType@1003 : Option;DocumentNo@1001 : Code[20];VATAmount@1000 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("VAT Amount",VATAmount);
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::"Credit Memo");
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,TotalGLAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::"Credit Memo");
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Amount (LCY)"),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@7(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      VATEntry@1002 : Record 254;
    BEGIN
      GeneralLedgerSetup.GET;
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::"Credit Memo");
      VATEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,ABS(VATEntry.Base + VATEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,VATEntry.FIELDCAPTION(Amount),VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@24(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      CostAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Credit Memo");
      ValueEntry.FINDSET;
      REPEAT
        CostAmount += ValueEntry."Cost Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        -Amount,CostAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,ValueEntry.FIELDCAPTION("Cost Amount (Actual)"),ValueEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmount@23(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];LineDiscountAmount@1002 : Decimal);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GeneralPostingSetup@1004 : Record 252;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Line Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        LineDiscountAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        LineDiscountAmount,PurchaseLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION("Line Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscountAmount@35(PurchaseLine@1005 : Record 39;DocumentNo@1004 : Code[20];InvoiceDiscountAmount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      GeneralPostingSetup@1001 : Record 252;
      GLEntry@1000 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Inv. Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,ABS(GLEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,PurchaseLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldErr,PurchaseLine.FIELDCAPTION("Inv. Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@77(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@90(PurchaseHeader@1000 : Record 38;Quantity@1002 : Decimal;LineAmount@1003 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      GetPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.TESTFIELD(Quantity,Quantity);
      PurchaseLine.TESTFIELD("Line Amount",LineAmount);
    END;

    LOCAL PROCEDURE PurchDocLineQtyValidation@38();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1004 : Record 14;
      PurchaseCreditMemo@1009 : TestPage 52;
    BEGIN
      // SETUP:
      LibraryWarehouse.CreateFullWMSLocation(Location,3);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,0);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);

      PurchaseCreditMemo.OPENEDIT;
      PurchaseCreditMemo.GOTORECORD(PurchaseHeader);
      // EXECUTE:
      PurchaseCreditMemo.PurchLines.Quantity.SETVALUE(100);
      // VERIFY: In the test method
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@71(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Message,LibraryVariableStorage.DequeueText) > 0,Message);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReturnShipmentHandler@83(VAR GetReturnShipmentLines@1000 : TestPage 6648);
    BEGIN
      GetReturnShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesHandler@52(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
      OptionString@1002 : 'PostedReturnShipments,PostedInvoices';
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        OptionString::PostedReturnShipments:
          BEGIN
            PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Return Shipments"));
            PostedPurchaseDocumentLines.PostedReturnShpts.FILTER.SETFILTER("Document No.",DocumentNo2);
          END;
        OptionString::PostedInvoices:
          PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Invoices"));
      END;
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesWithSpecificCrMemoValidationHandler@175(VAR PostedPurchaseDocumentLines@1001 : TestPage 5855);
    BEGIN
      PostedPurchaseDocumentLines.PostedCrMemos."Document No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Credit Memo] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute

      Check various functionalities of Purchase Credit Memo.
        1. Test that a Purchase Credit Memo Header and Line exist after Purchase Credit Memo creation.
        2. Test VAT Amount calculated correctly on Purchase Credit Memo.
        3. Test that a Report generated from Purchase Credit Memo and it contains some data.
        4. Test that a Report generated from Posted Purchase Credit Memo and it contains some data.
        5. Test GL Entries, VAT Entries, Vendor Ledger Entries and Value Entries After Posting Purchase Credit Memo. Also test that
           a Return Shipment has been created after posting Purchase Credit Memo.
        6. Test that Correct Location updated on Purchase Return Shipment after Posting a Credit Memo with Location included.
        7. Test that correct Line Discount calculated in GL Entry after posting Purchase Credit Memo.
        8. Test that correct Invoice Discount calculated in GL Entry after posting Purchase Credit Memo.
        9. Test that correct Currency updated on Purchase Return Shipment after posting Purchase Credit Memo with Currency included.
       10. Test the Copy Document Functionality by Creating Purchase Order and then copying it to Purchase Credit memo.
       11. Test that Purchase Credit Memo can be applied against Purchase Invoice.
       12. Test Copy Document functionality by creating Purchase Invoice then copy it to Purchase Credit memo and Verify in
           G/L Entry.
       13. Verify Item Ledger Entry after ship the Purchase Return Order.
       14. Check Direct Cost Incl VAT field in Purchase Credit Memo Line created by using the function Get Return Shipment lines When
           Price Including VAT is True.
       15. Test case to check error while running Batch Post Purchase Credit Memos while giving a Blank Posting Date.
       16. Test case to Check whether line count increases or not in Purchase Credit Memo Header after running.
           BatchPostPurchCreditMemos Report.
       17. Test case to check whether Invoice Discount is calculated and flowed in Purchase Credit Memo LIne.
       18. Test case to check Replace Document Date option of Batch Post Purch Credit Memos Report.
       19. Test VAT Amount on GL Entry after posting Purchase Credit Memo against the Purchase Invoice with Reverse Charge VAT using Copy Document.
       20. Verify G/L Entry for VAT Amount after posting Purchase Invoice.
       21. Verify G/L Entry for VAT Amount after posting Purchase Credit Memo using Get Posted Document Lines to Reverse against posting of Return Order as Receive.
       22. Verify Error while Get Posted Invoice with Price Including VAT to Reverse from Credit Memo without Price Including VAT.
       23. Verify Error while Get Posted Invoice without Price Including VAT to Reverse from Credit Memo with Price Including VAT.
       24. Verify Purchase Credit Memo Line after Get Posted Invoice Line with Price Including VAT to Reverse from Credit Memo.
       25. Verify Purchase Credit Memo Line after Get Posted Invoice Line without Price Including VAT to Reverse from Credit Memo.
       26. Verify error when change Purchase Credit Memo Header Information, created from Purchase Return Order.
       27. Verify error when delete Purchase Credit Memo Header, created from Purchase Return Order.
       28. Verify error when change Purchase Credit Memo Line Information, created from Purchase Return Order.
       29. Verify error when change Sign of Purchase Credit Memo Quantity, created from Purchase Return Order.
       30. Verify error when change Return Qty. to Ship on Purchase Credit Memo, created from Purchase Return Order.
       31. Verify error when change Quantity on Purchase Credit Memo, created from Purchase Return Order.
       32. Verify error while applying Explode BOM on Purchase Credit Memo created from Purchase Return Order.
       33. Verify Extended Text on Purchase Return Order Line with Extended Text Line of Item.
       34. Verify that a purchase credit memo cannot be made for WHITE location (with directed put-away and pick)
       35. Verify error message during Copy Document in case of different Currency Code and Line Type <> Item

      Covers Test Cases:
        TFS_TC_ID= 122458 : TC00734
        TFS_TC_ID= 122459 : TC00735
        TFS_TC_ID= 122460 : TC00736
        TFS_TC_ID= 122461 : TC00737
        TFS_TC_ID= 122462 : TC00738
        TFS_TC_ID= 122463 : TC00739
        TFS_TC_ID= 122464 : TC00740
        TFS_TC_ID= 122465 : TC00741
        TFS_TC_ID= 122466 : TC00742
        TFS_TC_ID= 122467 : TC00743
        TFS_TC_ID= 122468 : TC00744
        TFS_TC_ID= 122469 : TC00745
        TFS_TC_ID= 122470 : TC00746
        TFS_TC_ID= 122471 : TC00747
        TFS_TC_ID= 122472 : TC00748
        TFS_TC_ID= 122473 : TC00749
        TFS_TC_ID= 122474 : TC00750
        TFS_TC_ID= 122475 : TC00751
        TFS_TC_ID= 122476 : TC00752
        TFS_TC_ID= 122477 : TC00753

      TS_TFS ID=252006
      Covers Test Cases:
      ----------------------------------------------------------------------------------
      Test Cases                                              TFS ID
      ----------------------------------------------------------------------------------
      CopyPurchaseInvoiceAndVerify                            125016

      Covers Test Cases: 258334
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      ShipPurchaseReturnOrder,DirectCostInclVATOnPurchCrMemo  254089

      Covers Test Cases: 251015
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      PurchaseCrMemoBatchPostDate                             128997
      PurchaseCrMemoBatchPostCount                            128997
      PurchaseCrMemoBatchPostInvDisc                          128997
      PurchaseCrMemoBatchReplaceDate                          128997

      Covers Test Cases: 273841
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      VATAmountOnPurchaseCrMemoUsingCopyDocument              268853

      Workitem ID: 273877
      ------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ------------------------------------------------------------------------------------
      VATAmountOnPostedPurchaseInvoice                        271065
      PostPurchaseCrMemoUsingGetPostedDocLines                271065

      Workitem ID: 314556
      ------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ------------------------------------------------------------------------------------
      GetPostedDocumentWithPriceIncludingVAT,
      GetPostedDocumentWithoutPriceIncludingVAT,
      PurchCreditMemoWithtPriceIncludingVAT,
      PurchCreditMemoWithtoutPriceIncludingVAT                282802

      Workitem ID: 316553
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ChangePurchCrMemoHdrInfoError, DeletePurchRetOrdAfterGetReturnShipmentError,
      ChangePurchCrMemoLnInfoError, ChangePurchCrMemoQtySignError,
      ChangeReturnQtyToShipOnPurchCrMemoError, ChangePurchCrMemoQtyError,
      ExplBOMOnPurchCrMemoError, ExtendedTextOnPurchRetOrd                          128209

      Workitem ID: 334921
      ------------------------------------------------------------------------------------
      Test Function Name
      ------------------------------------------------------------------------------------
      CreatePurchaseInvoiceLineWhiteLocationQtyError

      CopyPurchaseDocumentWithDiffCurrency                                          353308
    }
    END.
  }
}

