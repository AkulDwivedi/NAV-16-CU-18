OBJECT Codeunit 137608 SCM CETAF Inventory Valuation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryCosting@1006 : Codeunit 132200;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryPurchase@1008 : Codeunit 130512;
      LibrarySales@1004 : Codeunit 130509;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryRandom@1005 : Codeunit 130440;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryPatterns@1002 : Codeunit 132212;
      Assert@1001 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      OpenOutboudEntryErr@1010 : TextConst '@@@="%1 = Entry No. (Open Outbound Entry 123456 found)";ENU=Open Outbound Entry %1 found.';

    LOCAL PROCEDURE Initialize@9();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryPatterns.SETNoSeries;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ValuationDateAVGCost@1();
    VAR
      ItemJournalBatch@1012 : Record 233;
      ProductionOrder@1011 : Record 5405;
      ProdOrderLine@1010 : Record 5406;
      PurchaseHeader@1009 : Record 38;
      PurchaseHeader1@1013 : Record 38;
      ParentItem@1006 : Record 27;
      CompItem@1005 : Record 27;
      ProdOrderStatusManagement@1004 : Codeunit 5407;
      Status@1002 : 'Quote,Planned,Firm Planned,Released,Finished';
      Day1@1014 : Date;
      Qty@1001 : Decimal;
      QtyPer@1000 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;
      Qty := LibraryRandom.RandInt(20);
      QtyPer := LibraryRandom.RandInt(10);

      // Setup.
      SetupProduction(
        ParentItem,CompItem,ProdOrderLine,'',ParentItem."Costing Method"::FIFO,CompItem."Costing Method"::Average,Day1,Qty,QtyPer);

      // Purchase component items.
      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,CompItem,'','',(Qty * QtyPer) / 2,Day1,CompItem."Standard Cost",TRUE,FALSE);
      LibraryPatterns.POSTPurchaseOrder(
        PurchaseHeader1,CompItem,'','',(Qty * QtyPer) / 2 + 1,Day1 + 30,CompItem."Standard Cost",TRUE,FALSE);

      // Post consumption.
      LibraryPatterns.MAKEConsumptionJournalLine(ItemJournalBatch,ProdOrderLine,CompItem,Day1 + 5,'','',Qty * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Post output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 6,Qty,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Post sale.
      LibraryPatterns.POSTSaleJournal(ParentItem,'','','',Qty,Day1 + 6,LibraryRandom.RandDec(100,2));

      // Invoice purchases.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchaseHeader1.GET(PurchaseHeader1."Document Type",PurchaseHeader1."No.");
      PurchaseHeader1.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);

      // Finish prod. order.
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,Status::Finished,Day1,FALSE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(ParentItem."No." + '|' + CompItem."No.",'');

      // Verify adjustment.
      LibraryCosting.CheckAdjustment(ParentItem);
      LibraryCosting.CheckAdjustment(CompItem);
      LibraryCosting.CheckProductionOrderCost(ProductionOrder,TRUE);
    END;

    [Test]
    PROCEDURE CostPerUnitWithOutput@12();
    VAR
      Location@1018 : Record 14;
      TempItemLedgerEntry@1016 : TEMPORARY Record 32;
      ItemJournalLine@1017 : Record 83;
      ItemJournalBatch@1012 : Record 233;
      ProdOrderLine@1010 : Record 5406;
      PurchaseHeader@1009 : Record 38;
      PurchaseHeader1@1013 : Record 38;
      ProductionBOMHeader@1007 : Record 99000771;
      ParentItem@1006 : Record 27;
      SubassemblyItem@1015 : Record 27;
      CompItem@1005 : Record 27;
      Day1@1014 : Date;
      Qty@1001 : Decimal;
      QtyPer@1000 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;
      Qty := LibraryRandom.RandInt(20);
      QtyPer := LibraryRandom.RandInt(10);

      // Setup.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      SetupProduction(
        ParentItem,SubassemblyItem,ProdOrderLine,Location.Code,ParentItem."Costing Method"::Standard,
        CompItem."Costing Method"::Standard,Day1,Qty,QtyPer);
      SubassemblyItem.GET(SubassemblyItem."No.");
      SubassemblyItem.VALIDATE("Replenishment System",SubassemblyItem."Replenishment System"::"Prod. Order");
      SubassemblyItem.MODIFY;

      LibraryPatterns.MAKEItem(CompItem,CompItem."Costing Method"::Standard,LibraryRandom.RandDec(50,2),0,0,'');

      // Setup subassembly BOM.
      LibraryPatterns.MAKEProductionBOM(ProductionBOMHeader,SubassemblyItem,CompItem,QtyPer,'');

      // Purchase component items.
      LibraryPatterns.POSTPurchaseOrder(
        PurchaseHeader,SubassemblyItem,Location.Code,'',Qty * QtyPer,Day1,CompItem."Standard Cost",TRUE,FALSE);
      LibraryPatterns.POSTPurchaseOrder(
        PurchaseHeader1,CompItem,Location.Code,'',Qty * QtyPer * QtyPer,Day1,CompItem."Standard Cost",TRUE,FALSE);

      // Post consumption.
      LibraryPatterns.MAKEConsumptionJournalLine(
        ItemJournalBatch,ProdOrderLine,SubassemblyItem,Day1 + 5,Location.Code,'',Qty * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);
      LibraryPatterns.MAKEConsumptionJournalLine(
        ItemJournalBatch,ProdOrderLine,CompItem,Day1 + 5,Location.Code,'',Qty * QtyPer * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);

      // Post output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 5,Qty,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);

      // Change standard costs for components.
      UpdateItemStandardCost(CompItem);
      UpdateItemStandardCost(SubassemblyItem);

      // Post negative consumption.
      LibraryPatterns.MAKEConsumptionJournalLine(
        ItemJournalBatch,ProdOrderLine,CompItem,Day1 + 7,Location.Code,'',-Qty * QtyPer * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      LibraryPatterns.MAKEConsumptionJournalLine(
        ItemJournalBatch,ProdOrderLine,SubassemblyItem,Day1 + 7,Location.Code,'',-Qty * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Post negative output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 7,-Qty,0);
      ApplyToItemLedgerEntry(ItemJournalLine,TempItemLedgerEntry,ItemJournalBatch,ParentItem."No.");
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Invoice purchases.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      PurchaseHeader1.GET(PurchaseHeader1."Document Type",PurchaseHeader1."No.");
      PurchaseHeader1.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(ParentItem."No." + '|' + SubassemblyItem."No." + '|' + CompItem."No.",'');

      // Verify adjustment.
      LibraryCosting.CheckAdjustment(ParentItem);
      LibraryCosting.CheckAdjustment(SubassemblyItem);
      LibraryCosting.CheckAdjustment(CompItem);
    END;

    [Test]
    PROCEDURE ValDateTransferAVG@14();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferEntries(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE ValDateTransferFIFO@17();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferEntries(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ValDateTransferLIFO@18();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferEntries(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE ValDateTransferSTD@19();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferEntries(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE ValDateTransferOrderAVG@8();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferOrders(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE ValDateTransferOrderFIFO@7();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferOrders(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ValDateTransferOrderLIFO@6();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferOrders(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE ValDateTransferOrderSTD@5();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateTransferOrders(Item."Costing Method"::Standard);
    END;

    [Normal]
    LOCAL PROCEDURE ValuationDateTransferEntries@2(CostingMethod@1009 : Option);
    VAR
      Item@1002 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1007 : Record 39;
      FromLocation@1003 : Record 14;
      ToLocation@1004 : Record 14;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);
      LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Post purchase.
      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTPurchaseOrder(
        PurchaseHeader,Item,FromLocation.Code,'',Qty,Day1,LibraryRandom.RandDec(100,2),TRUE,FALSE);

      // Reclassify into second location.
      LibraryPatterns.POSTReclassificationJournalLine(Item,Day1 + 8,FromLocation.Code,ToLocation.Code,'','','',Qty);

      // Invoice the purchase order at a different cost.
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",Day1 + 15);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY;
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine."Direct Unit Cost" := LibraryRandom.RandDec(100,2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Normal]
    LOCAL PROCEDURE ValuationDateTransferOrders@3(CostingMethod@1009 : Option);
    VAR
      Item@1002 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1007 : Record 39;
      FromLocation@1003 : Record 14;
      ToLocation@1004 : Record 14;
      InTransitLocation@1010 : Record 14;
      TransferHeader@1011 : Record 5740;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(InTransitLocation);
      InTransitLocation."Use As In-Transit" := TRUE;
      InTransitLocation.MODIFY;
      LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Post purchase.
      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTPurchaseOrder(
        PurchaseHeader,Item,FromLocation.Code,'',Qty,Day1,LibraryRandom.RandDec(100,2),TRUE,FALSE);

      // Transfer into second location.
      LibraryPatterns.POSTTransferOrder(
        TransferHeader,Item,FromLocation,ToLocation,InTransitLocation,'',Qty,Day1 + 8,Day1 + 8,TRUE,TRUE);

      // Invoice the purchase order at a different cost.
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",Day1 + 15);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY;
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine."Direct Unit Cost" := LibraryRandom.RandDec(100,2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateLinkedAVG@20();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateLinkedEntries(Item."Costing Method"::Average);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateLinkedFIFO@16();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateLinkedEntries(Item."Costing Method"::FIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateLinkedLIFO@13();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateLinkedEntries(Item."Costing Method"::LIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateLinkedSTD@11();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateLinkedEntries(Item."Costing Method"::Standard);
    END;

    [Normal]
    LOCAL PROCEDURE ValuationDateLinkedEntries@4(CostingMethod@1009 : Option);
    VAR
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      Location@1010 : Record 14;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;
      IF CONFIRM('') THEN; // ES workaround.

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // Post sales and credit memo.
      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,Location.Code,'',Qty,Day1,LibraryRandom.RandDec(100,2),TRUE,TRUE);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);

      LibraryPatterns.MAKESalesCreditMemo(SalesHeader,SalesLine,Item,Location.Code,'',Qty,Day1,0,0);
      SalesLine.VALIDATE("Appl.-from Item Entry",TempItemLedgerEntry."Entry No.");
      SalesLine.MODIFY;

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Post positive adj.
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',Qty,Day1 + 2,LibraryRandom.RandDec(100,2));

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateEndlessFIFO@29();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateEndlessLoop(Item."Costing Method"::FIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateEndlessLIFO@28();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateEndlessLoop(Item."Costing Method"::LIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValDateEndlessSTD@27();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuationDateEndlessLoop(Item."Costing Method"::Standard);
    END;

    [Normal]
    LOCAL PROCEDURE ValuationDateEndlessLoop@26(CostingMethod@1009 : Option);
    VAR
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1010 : Record 39;
      ItemJournalLine@1004 : Record 83;
      ItemJournalBatch@1008 : Record 233;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;
      IF CONFIRM('') THEN; // ES workaround.

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');

      // Post purchase, sales, sales cr. memo.
      Qty := 3 + LibraryRandom.RandInt(20);
      LibraryPatterns.MAKEPurchaseInvoice(PurchaseHeader,PurchaseLine,Item,'','',Qty - 3,Day1,LibraryRandom.RandDec(100,2));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      LibraryPatterns.MAKESalesInvoice(SalesHeader,SalesLine,Item,'','',Qty - 3,Day1 + 5,LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);

      LibraryPatterns.MAKESalesCreditMemo(SalesHeader,SalesLine,Item,'','',Qty - 3,Day1 + 5,0,0);
      SalesLine.VALIDATE("Appl.-from Item Entry",TempItemLedgerEntry."Entry No.");
      SalesLine.MODIFY;

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);
      TempItemLedgerEntry.FINDLAST;

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Post revaluation.
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation);
      LibraryPatterns.MAKEItemJournalLineWithApplication(ItemJournalLine,ItemJournalBatch,Item,'','',Day1 + 2,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Qty - 3,0,TempItemLedgerEntry."Entry No.");
      ItemJournalLine.VALIDATE("Inventory Value (Revalued)",
        ItemJournalLine."Inventory Value (Calculated)" + LibraryRandom.RandDec(10,2));
      ItemJournalLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE ValInvtUnitCostFIFO@32();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateInventoryAndUnitCost(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE ValInvtUnitCostLIFO@30();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateInventoryAndUnitCost(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE ValInvtUnitCostSTD@25();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateInventoryAndUnitCost(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE ValInvtUnitCostAVG@33();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateInventoryAndUnitCost(Item."Costing Method"::Average);
    END;

    [Normal]
    LOCAL PROCEDURE ValuateInventoryAndUnitCost@10(CostingMethod@1009 : Option);
    VAR
      TransferHeader@1016 : Record 5740;
      FromLocation@1013 : Record 14;
      ToLocation@1014 : Record 14;
      InTransitLocation@1015 : Record 14;
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      PurchaseHeader@1003 : Record 38;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(InTransitLocation);
      InTransitLocation."Use As In-Transit" := TRUE;
      InTransitLocation.MODIFY;

      // Post purchase.
      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,Item,FromLocation.Code,'',Qty,Day1,
        LibraryRandom.RandDec(100,2),TRUE,TRUE);

      // Transfer into second location.
      LibraryPatterns.POSTTransferOrder(TransferHeader,Item,FromLocation,ToLocation,InTransitLocation,'',Qty,Day1 + 2,
        Day1 + 2,TRUE,TRUE);

      // Post positive adjmt.
      LibraryPatterns.POSTPositiveAdjustment(Item,FromLocation.Code,'','',Qty + 1,Day1 + 5,LibraryRandom.RandDec(100,2));

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);

      // Post sales with charge.
      LibraryPatterns.MAKESalesOrder(SalesHeader,SalesLine,Item,FromLocation.Code,'',
        Qty,Day1 + 7,LibraryRandom.RandDec(100,2));
      LibraryPatterns.ASSIGNSalesChargeToSalesLine(SalesHeader,SalesLine,Qty,LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE AdjAndReclassFIFO@37();
    VAR
      Item@1000 : Record 27;
    BEGIN
      AdjAndReclassJournal(Item."Costing Method"::FIFO);
    END;

    [Test]
    PROCEDURE AdjAndReclassLIFO@36();
    VAR
      Item@1000 : Record 27;
    BEGIN
      AdjAndReclassJournal(Item."Costing Method"::LIFO);
    END;

    [Test]
    PROCEDURE AdjAndReclassSTD@35();
    VAR
      Item@1000 : Record 27;
    BEGIN
      AdjAndReclassJournal(Item."Costing Method"::Standard);
    END;

    [Test]
    PROCEDURE AdjAndReclassAVG@34();
    VAR
      Item@1000 : Record 27;
    BEGIN
      AdjAndReclassJournal(Item."Costing Method"::Average);
    END;

    [Normal]
    LOCAL PROCEDURE AdjAndReclassJournal@23(CostingMethod@1009 : Option);
    VAR
      Location@1013 : Record 14;
      Bin1@1004 : Record 7354;
      Bin2@1008 : Record 7354;
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1010 : Record 39;
      PurchRcptLine@1011 : Record 121;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location."Bin Mandatory" := TRUE;
      Location.MODIFY;
      LibraryWarehouse.CreateBin(Bin1,Location.Code,'','','');
      LibraryWarehouse.CreateBin(Bin2,Location.Code,'','','');

      // Post positive adjmt and purchase in 2 different bins.
      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTPositiveAdjustment(Item,Location.Code,'',Bin1.Code,
        Qty,Day1,LibraryRandom.RandDec(100,2));
      LibraryPatterns.MAKEPurchaseOrder(PurchaseHeader,PurchaseLine,Item,Location.Code,'',
        Qty,Day1 + 4,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Bin Code",Bin2.Code);
      PurchaseLine.MODIFY;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Post reclassification from bin 2 to bin 1.
      LibraryPatterns.POSTReclassificationJournalLine(Item,Day1 + 4,
        Location.Code,Location.Code,'',Bin2.Code,Bin1.Code,Qty);

      // Assign charge to receipt.
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);
      PurchRcptLine.GET(TempItemLedgerEntry."Document No.",TempItemLedgerEntry."Document Line No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(PurchaseHeader,PurchRcptLine,1,LibraryRandom.RandDec(100,2));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValCostAmountActualFIFO@44();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateCostAmountActual(Item."Costing Method"::FIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValCostAmountActualLIFO@43();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateCostAmountActual(Item."Costing Method"::LIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValCostAmountActualSTD@42();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateCostAmountActual(Item."Costing Method"::Standard);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ValCostAmountActualAVG@41();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ValuateCostAmountActual(Item."Costing Method"::Average);
    END;

    [Normal]
    LOCAL PROCEDURE ValuateCostAmountActual@22(CostingMethod@1009 : Option);
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesShipmentLine@1013 : Record 111;
      PurchaseHeader@1003 : Record 38;
      Day1@1005 : Date;
      Qty@1006 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the item.
      LibraryPatterns.MAKEItem(Item,CostingMethod,LibraryRandom.RandDec(100,2),0,LibraryRandom.RandInt(10),'');

      Qty := LibraryRandom.RandInt(20);
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,'','',Qty,Day1,Item."Unit Cost",TRUE,TRUE);
      CLEAR(SalesHeader);
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,'','',2 * Qty,Day1 + 7,Item."Unit Cost",TRUE,FALSE);

      // Undo shipment and then repost.
      SalesShipmentLine.SETRANGE("Order No.",SalesHeader."No.");
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader,Item,'','',5 * Qty,Day1 + 14,Item."Unit Cost",TRUE,TRUE);
      LibraryPatterns.POSTSalesOrder(SalesHeader,Item,'','',2 * Qty,Day1 + 21,Item."Unit Cost",TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostingManufFIFO@46();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CostingManufacturing(Item."Costing Method"::FIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostingManufLIFO@45();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CostingManufacturing(Item."Costing Method"::LIFO);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostingManufSTD@40();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CostingManufacturing(Item."Costing Method"::Standard);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostingManufAVG@39();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CostingManufacturing(Item."Costing Method"::Average);
    END;

    [Test]
    PROCEDURE CalcInventoryValueLongFilters@47();
    VAR
      Item@1001 : Record 27;
      TempErrorBuffer@1002 : TEMPORARY Record 5890;
      CalcInventoryValueCheck@1000 : Codeunit 5899;
    BEGIN
      // [FEATURE] [Calculate Inventory Value]
      // [SCENARIO 378236] Calculate Inventory Value can be run with Location Filter and Variant Filter longer than 10 characters

      Initialize;
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Set filters on Calculate Inventory Value. Fields Location Filter and Variant Filter, both filters longer than 10 characters
      Item.SETRECFILTER;
      Item.SETFILTER("Location Filter",'%1|%2',LibraryUtility.GenerateGUID,LibraryUtility.GenerateGUID);
      Item.SETFILTER("Variant Filter",'%1|%2',LibraryUtility.GenerateGUID,LibraryUtility.GenerateGUID);

      // [WHEN] Run Inventory Valuation - Check
      CalcInventoryValueCheck.SetProperties(WORKDATE,0,TRUE,TRUE,FALSE,TRUE);
      CalcInventoryValueCheck.RunCheck(Item,TempErrorBuffer);

      // [THEN] Verification competed without errors
      Assert.RecordIsEmpty(TempErrorBuffer);
    END;

    [Test]
    PROCEDURE CalcInventoryValueOpenILEError@48();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      ItemVariant@1002 : Record 5401;
      TempErrorBuffer@1004 : TEMPORARY Record 5890;
      ItemLedgerEntry@1005 : Record 32;
      CalcInventoryValueCheck@1003 : Codeunit 5899;
    BEGIN
      // [FEATURE] [Calculate Inventory Value]
      // [SCENARIO 378236] Calculate Inventory Value returns error if there are open outbound item ledger entries

      // [GIVEN] Create item "I"
      Initialize;
      LibraryPatterns.MAKEItem(Item,Item."Costing Method"::Standard,0,0,0,'');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [GIVEN] Post negative adjustment for item "I"
      LibraryPatterns.POSTNegativeAdjustment(
        Item,Location.Code,ItemVariant.Code,'',LibraryRandom.RandInt(10),WORKDATE,LibraryRandom.RandDec(100,2));

      // [WHEN] Run Inventory Valuation - Check
      Item.SETRECFILTER;
      Item.SETRANGE("Location Filter",Location.Code);
      Item.SETRANGE("Variant Filter",ItemVariant.Code);
      CalcInventoryValueCheck.SetProperties(WORKDATE,0,TRUE,TRUE,FALSE,TRUE);
      CalcInventoryValueCheck.RunCheck(Item,TempErrorBuffer);

      // [THEN] Verification returns error: "open outbound entry found".
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDLAST;
      TempErrorBuffer.FINDFIRST;
      Assert.ExpectedMessage(STRSUBSTNO(OpenOutboudEntryErr,ItemLedgerEntry."Entry No."),TempErrorBuffer."Error Text");
    END;

    [Normal]
    LOCAL PROCEDURE CostingManufacturing@38(CostingMethod@1009 : Option);
    VAR
      SalesHeader@1017 : Record 36;
      ItemJournalLine@1016 : Record 83;
      TempItemLedgerEntry@1015 : TEMPORARY Record 32;
      ProdOrderLine@1011 : Record 5406;
      ItemJournalBatch@1010 : Record 233;
      ProductionOrder@1004 : Record 5405;
      PurchaseHeader1@1006 : Record 38;
      PurchaseHeader2@1014 : Record 38;
      ProductionBOMHeader@1000 : Record 99000771;
      ParentItem@1001 : Record 27;
      ChildItem@1002 : Record 27;
      ProdOrderStatusManagement@1012 : Codeunit 5407;
      Status@1013 : 'Quote,Planned,Firm Planned,Released,Finished';
      Day1@1003 : Date;
      Qty@1007 : Decimal;
      QtyPer@1008 : Decimal;
    BEGIN
      Initialize;
      Day1 := WORKDATE;

      // Setup the items.
      Qty := LibraryRandom.RandDec(100,2);
      QtyPer := LibraryRandom.RandInt(10);
      LibraryPatterns.MAKEItemSimple(ParentItem,CostingMethod,0);
      LibraryPatterns.MAKEItemSimple(ChildItem,CostingMethod,0);
      LibraryPatterns.MAKEProductionBOM(ProductionBOMHeader,ParentItem,ChildItem,QtyPer,'');

      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader1,ChildItem,'','',Qty * QtyPer,Day1,
        LibraryRandom.RandDec(100,2),TRUE,FALSE);
      LibraryPatterns.POSTPurchaseOrder(PurchaseHeader2,ChildItem,'','',Qty * QtyPer,Day1 + 1,
        LibraryRandom.RandDec(100,2),TRUE,FALSE);

      LibraryPatterns.MAKEProductionOrder(ProductionOrder,ProductionOrder.Status::Released,ParentItem,'','',Qty,Day1 + 5);
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      LibraryPatterns.MAKEConsumptionJournalLine(ItemJournalBatch,ProdOrderLine,ChildItem,Day1 + 2,'','',Qty * QtyPer,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Post output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 3,Qty,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
      LibraryPatterns.InsertTempILEFromLast(TempItemLedgerEntry);

      // Undo output.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 4,-Qty,0);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Applies-to Entry",TempItemLedgerEntry."Entry No.");
      ItemJournalLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Post output again.
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,Day1 + 5,2 * Qty,0);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);

      // Finish prod. order.
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      ProdOrderStatusManagement.ChangeStatusOnProdOrder(ProductionOrder,Status::Finished,Day1 + 5,FALSE);

      // Invoice the receipts.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,FALSE,TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,FALSE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(ChildItem."No." + '|' + ParentItem."No.",'');

      // Sell.
      LibraryPatterns.POSTSalesOrder(SalesHeader,ParentItem,'','',2 * Qty,Day1 + 14,0,TRUE,TRUE);

      // Adjust.
      LibraryCosting.AdjustCostItemEntries(ChildItem."No." + '|' + ParentItem."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(ParentItem);
      LibraryCosting.CheckAdjustment(ChildItem);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyToItemLedgerEntry@21(VAR ItemJournalLine@1000 : Record 83;VAR ItemLedgerEntry@1002 : Record 32;ItemJournalBatch@1003 : Record 233;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;

      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Applies-to Entry",ItemLedgerEntry."Entry No.");
      ItemJournalLine.MODIFY;
    END;

    [Normal]
    LOCAL PROCEDURE FindProdOrderLine@15(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE SetupProduction@31(VAR ParentItem@1000 : Record 27;VAR CompItem@1001 : Record 27;VAR ProdOrderLine@1008 : Record 5406;LocationCode@1004 : Code[10];ParentCostingMethod@1002 : Option;CompCostingMethod@1003 : Option;ProdOrderDate@1010 : Date;ProducedQty@1011 : Decimal;QtyPer@1012 : Decimal);
    VAR
      ProductionOrder@1009 : Record 5405;
      ProductionBOMHeader@1006 : Record 99000771;
    BEGIN
      // Setup produced and component item.
      LibraryPatterns.MAKEItem(ParentItem,ParentCostingMethod,LibraryRandom.RandDec(100,2),0,0,'');
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::"Prod. Order");
      ParentItem.MODIFY;

      LibraryPatterns.MAKEItem(CompItem,CompCostingMethod,LibraryRandom.RandDec(100,2),0,0,'');

      // Setup BOM and Routing.
      LibraryPatterns.MAKEProductionBOM(ProductionBOMHeader,ParentItem,CompItem,QtyPer,'');

      // Released production order.
      LibraryPatterns.MAKEProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem,LocationCode,'',ProducedQty,ProdOrderDate);
      FindProdOrderLine(ProdOrderLine,ProductionOrder);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateItemStandardCost@54(VAR Item@1000 : Record 27);
    BEGIN
      Item.GET(Item."No.");
      Item.VALIDATE("Standard Cost",Item."Standard Cost" + LibraryRandom.RandDec(10,2));
      Item.MODIFY;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@24(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Cost Item Entries] [SCM]
    }
    END.
  }
}

