OBJECT Codeunit 144045 Reverse Service Tax UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1500002 : Codeunit 130000;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryUtility@1500001 : Codeunit 131000;
      ReverseServiceTaxHelper@1500008 : Codeunit 143006;
      LibraryRandom@1500005 : Codeunit 130440;
      ReverseChargeTypeOption@1500009 : ' ,Standard,GTA';
      ServiceEntityTypeErr@1500003 : TextConst 'ENU=Service Entity Type must be %1';
      ServiceTaxBaseMustBeZeroErr@1500010 : TextConst 'ENU=Service Tax Base Amount (LCY) must be equal to ''0''  in Gen. Journal Line:';
      UnexpectedTryGetSrvTaxRevChErr@1500007 : TextConst 'ENU=TryGetSrvTaxReverseCharge should have returned false if any of the params is empty.';
      BlockSetAdvPmtFlagOnInvoiceErr@1500004 : TextConst 'ENU=You can set Serv. Tax on Advance Payment to Yes only if Document Type is a payment or a refund.';
      isInitialized@1500006 : Boolean;

    LOCAL PROCEDURE Initialize@1500017();
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT;

      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;
    END;

    [Test]
    PROCEDURE InvalidServiceTaxRegNoError@1500002();
    VAR
      ServTaxRegNo@1500000 : Record 16475;
    BEGIN
      Initialize;
      ASSERTERROR ServTaxRegNo.GetServiceEntityType(
          LibraryUtility.GenerateRandomCode(ServTaxRegNo.FIELDNO(Code),DATABASE::"Service Tax Registration Nos."));
    END;

    [Test]
    PROCEDURE GenJnlAdvPmtFlagOnInvoiceErr@1500040();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      ASSERTERROR CreateGenJnlLinePoT(GenJournalLine,GenJournalLine."Document Type"::Invoice,TRUE);
      Assert.ExpectedError(BlockSetAdvPmtFlagOnInvoiceErr);
    END;

    [Test]
    PROCEDURE GenJnlAdvPmtFlagClearedByDocT@1500051();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        // setup
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        // exercise
        VALIDATE("Document Type","Document Type"::Invoice);
        // validate
        Assert.AreEqual(
          FALSE,"Serv. Tax on Advance Payment",
          'Changing "Document Type" from "Payment" to "Invoice" should clear the flag "Serv. Tax on Advance Payment"');
      END;
    END;

    [Test]
    PROCEDURE GenJnlCalculateForward@1500007();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedBaseAmount@1500001 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        ExpectedBaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine);
        Assert.AreEqual(
          ExpectedBaseAmount,"Service Tax Base Amount (LCY)",'Incorrect forward calculation of Amount from Service Tax Base Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlCalculateForwardRevCharg@1500013();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedBaseAmount@1500001 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
          GenJournalLine,"Document Type"::Payment,"Service Type (Rev. Chrg.)"::Inward,
          ReverseChargeTypeOption::Standard,TRUE,100);
        VALIDATE("Serv. Tax on Advance Payment",TRUE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        ExpectedBaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine);
        Assert.AreEqual(
          ExpectedBaseAmount,"Service Tax Base Amount (LCY)",
          'Incorrect Reverse Charge forward calculation of Amount from Service Tax Base Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlCalculateForwardSplit@1500010();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedBaseAmount@1500001 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateSplitDocJnlLine(GenJournalLine,"Document Type"::Payment);
        VALIDATE("Serv. Tax on Advance Payment",TRUE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        ExpectedBaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine);
        Assert.AreEqual(
          ExpectedBaseAmount,"Service Tax Base Amount (LCY)",'Wrong split forward calculation of Amount from Service Tax Base Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlCrMSetBaseNoRegNoErr@1500046();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::"Credit Memo",FALSE);
        VALIDATE("Service Tax Registration No.",'');
        ASSERTERROR VALIDATE("Service Tax Base Amount (LCY)",1000);
        Assert.ExpectedError(ServiceTaxBaseMustBeZeroErr);
      END;
    END;

    [Test]
    PROCEDURE GenJnlCrMSetBaseToZero@1500014();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateSalesJnlLineWithServTax(GenJournalLine,"Document Type"::"Credit Memo");
        VALIDATE("Service Tax Base Amount (LCY)",0);
        Assert.AreEqual(0,"Service Tax Base Amount (LCY)",'Service Tax Base Amount (LCY) should be zero');
        Assert.AreEqual(0,"Amount (LCY)",'Amount (LCY) should be zero');
        Assert.AreEqual(0,Amount,'Amount should be zero');
      END;
    END;

    [Test]
    PROCEDURE GenJnlFCYSetCurrencyCodePmt@1500022();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYSetCurrencyCode(GenJournalLine."Document Type"::Payment,TRUE);
    END;

    [Test]
    PROCEDURE GenJnlFCYSetCurrencyCodeInv@1500029();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYSetCurrencyCode(GenJournalLine."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE GenJnlFCYClearCurrencyCodePmt@1500021();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYClearCurrencyCode(GenJournalLine."Document Type"::Payment,TRUE);
    END;

    [Test]
    PROCEDURE GenJnlFCYClearCurrencyCodeInv@1500030();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYClearCurrencyCode(GenJournalLine."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE GenJnlFCYCalcAmountFromBasePmt@1500044();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYCalcAmountFromBase(GenJournalLine."Document Type"::Payment,TRUE);
    END;

    [Test]
    PROCEDURE GenJnlFCYCalcAmountFromBaseInv@1500026();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlFCYCalcAmountFromBase(GenJournalLine."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE GenJnlSignInSalesCalcForward@1500016();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateSalesJnlLineWithServTax(GenJournalLine,"Document Type"::Payment);
        VALIDATE("Serv. Tax on Advance Payment",TRUE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        Assert.IsTrue(Amount < 0,'On a Sales Payment, Amount should not change sign when recalculated by forward calculation');
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSTaxUpdateAmt@1500043();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Invoice,FALSE);
        VALIDATE(Amount,Amount/2);
        Assert.AreEqual(
          ABS(Amount),"Service Tax Base Amount (LCY)",
          'Service Tax Base Amount should be updated and equal to Amount, when updating Amount on an invoice with service tax.');
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSTaxUpdateBaseAmt@1500023();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Invoice,FALSE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        Assert.AreEqual(
          "Service Tax Base Amount (LCY)",Amount,'Amount should be equal to Service Tax Base Amount on an invoice with service tax.');
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSTaxDeleteRegNo@1500011();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::"Credit Memo",FALSE);
        InitialAmount := Amount;
        VALIDATE("Service Tax Registration No.",'');
        Assert.AreEqual(
          0,"Service Tax Base Amount (LCY)",
          'Clearing Service Tax Registration No. on an Invoice with Service Tax, should set to zero Service Tax Base Amount');
        Assert.AreEqual(
          InitialAmount,Amount,
          'Clearing Service Tax Registration No. on an Invoice with Service Tax should not affect the value of Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSTaxUpdateToCrM@1500049();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialBaseAmount@1500003 : Decimal;
      InitialAmount@1500002 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Invoice,FALSE);
        InitialBaseAmount := "Service Tax Base Amount (LCY)";
        InitialAmount := Amount;
        VALIDATE("Document Type","Document Type"::"Credit Memo");
        Assert.AreEqual(
          InitialBaseAmount,"Service Tax Base Amount (LCY)",
          'Updating Document Type from Invoice to Credit Memo should not modify Service Tax Base Amount');
        Assert.AreEqual(
          InitialAmount,Amount,
          'Updating Document Type from Invoice to Credit Memo should not modify Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSTaxUpdateToPmt@1500015();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
      InitialBaseAmount@1500001 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Invoice,FALSE);
        InitialAmount := Amount;
        InitialBaseAmount := "Service Tax Base Amount (LCY)";
        VALIDATE("Document Type","Document Type"::Payment);
        Assert.AreNotEqual(
          InitialBaseAmount,"Service Tax Base Amount (LCY)",
          'Updating Document Type from Invoice to Advance Payment (with service tax) should modify Service Tax Base Amount');
        Assert.AreEqual(
          InitialAmount,Amount,
          'When updating Document Type from Invoice to Adv Payment (with serv. tax), Amount should not change');
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtUpdateFlagToTrue@1500058();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlUpdateFlagToTrue(GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    PROCEDURE GenJnlCrMSTaxDeleteGroupCode@1500003();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlSTaxDeleteGroupCode(GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE GenJnlRefSTaxDeleteGroupCode@1500054();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      GenJnlSTaxDeleteGroupCode(GenJournalLine."Document Type"::Refund);
    END;

    [Test]
    PROCEDURE GenJnlPaymentDisableServiceTax@1500019();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Refund,TRUE);
        ChangeValueOfSTaxBaseAmount(GenJournalLine);
        InitialAmount := Amount;
        VALIDATE("Serv. Tax on Advance Payment",FALSE);
        Assert.AreEqual(
          InitialAmount,Amount,
          'Amount should not change when setting Serv. Tax on Advance Payment to FALSE on an advance refund');
        Assert.AreEqual(
          0,"Service Tax Base Amount (LCY)",
          'Disabling Serv. Tax on Advance Payment should change Service Tax Base Amount to be equal with Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtNoSTaxUpdateAmt@1500038();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,FALSE);
        VALIDATE(Amount,Amount/2);
        Assert.AreEqual(
          0,"Service Tax Base Amount (LCY)",
          'Service Tax Base Amount should remain zero when updating Amount on an advance payment without service tax.');
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSetBaseNoGroupCodeErr@1500004();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        VALIDATE("Service Tax Group Code",'');
        ASSERTERROR VALIDATE("Service Tax Base Amount (LCY)",1000);
        Assert.ExpectedError(ServiceTaxBaseMustBeZeroErr);
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSetBaseNoRegNoErr@1500008();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        VALIDATE("Service Tax Registration No.",'');
        ASSERTERROR VALIDATE("Service Tax Base Amount (LCY)",1000);
        Assert.ExpectedError(ServiceTaxBaseMustBeZeroErr);
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSetBaseNoServTaxErr@1500000();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,FALSE);
        ASSERTERROR VALIDATE("Service Tax Base Amount (LCY)",1000);
        Assert.ExpectedError(ServiceTaxBaseMustBeZeroErr);
      END;
    END;

    [Test]
    PROCEDURE GenJnlInvSetBaseNoGroupCodeErr@1500048();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Invoice,FALSE);
        VALIDATE("Service Tax Group Code",'');
        ASSERTERROR VALIDATE("Service Tax Base Amount (LCY)",1000);
        Assert.ExpectedError(ServiceTaxBaseMustBeZeroErr);
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSTaxUpdateDocType@1500047();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
      InitialBaseAmount@1500003 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        InitialBaseAmount := "Service Tax Base Amount (LCY)";
        InitialAmount := Amount;
        VALIDATE("Document Type","Document Type"::Invoice);
        Assert.AreNotEqual(
          InitialBaseAmount,"Service Tax Base Amount (LCY)",
          'Updating Document Type from Payment with service tax to Invoice should modify Service Tax Base Amount');
        Assert.AreEqual(
          InitialAmount,Amount,
          'Updating Document Type from Payment with service tax to Invoice should not modify Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSTaxUpdateAmt@1500033();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        InitialAmount := "Service Tax Base Amount (LCY)";
        VALIDATE(Amount,Amount/2);
        Assert.AreNotEqual(
          InitialAmount,"Service Tax Base Amount (LCY)",
          'Updating Amount on an advance payment with service tax should recalculate Service Tax Base Amount');
        Assert.AreNotEqual(
          "Service Tax Base Amount (LCY)",Amount,
          'When there is service tax on the advance payment, the Service Tax Base Amount should be different than Amount');
      END;
    END;

    [Test]
    PROCEDURE GenJnlPmtSTaxUpdateBaseAmt@1500025();
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
    BEGIN
      Initialize;
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,"Document Type"::Payment,TRUE);
        InitialAmount := Amount;
        VALIDATE("Service Tax Base Amount (LCY)","Service Tax Base Amount (LCY)" * 2);
        Assert.AreNotEqual(
          InitialAmount,Amount,'Updating Service Tax Base Amount on an advance payment with service tax should recalculate Amount');
        Assert.AreNotEqual(
          "Service Tax Base Amount (LCY)",Amount,
          'When there is service tax on the advance payment, the Service Tax Base Amount should be different than Amount');
      END;
    END;

    [Test]
    PROCEDURE GetEntTypeEmptyRegNoRetEmpty@1500009();
    VAR
      ServiceTaxRegNos@1500000 : Record 16475;
    BEGIN
      Initialize;
      Assert.AreEqual('',ServiceTaxRegNos.GetServiceEntityType(''),
        'GetServiceEntityType should return empty code if ServiceTaxRegistrationCode is empty.');
    END;

    [Test]
    PROCEDURE GetServiceEntityType@1500006();
    VAR
      ServTaxRegNo@1500000 : Record 16475;
      ServEntityTypeCode@1500001 : Code[10];
    BEGIN
      Initialize;
      ServEntityTypeCode := CreateServiceEntityType;
      Assert.AreEqual(ServEntityTypeCode,
        ServTaxRegNo.GetServiceEntityType(CreateServiceTaxRegistrationNo(ServEntityTypeCode)),
        STRSUBSTNO(ServiceEntityTypeErr,ServEntityTypeCode));
    END;

    [Test]
    PROCEDURE GetSTRevChrgEmptyParamRetFalse@1500012();
    VAR
      STRevChrgSetup@1500000 : Record 16461;
      FakeCode@1500001 : Code[10];
    BEGIN
      Initialize;
      FakeCode := 'fakeCode';

      Assert.AreEqual(FALSE,STRevChrgSetup.TryGetSrvTaxReverseCharge('',FakeCode,FakeCode),UnexpectedTryGetSrvTaxRevChErr);
      Assert.AreEqual(FALSE,STRevChrgSetup.TryGetSrvTaxReverseCharge(FakeCode,'',FakeCode),UnexpectedTryGetSrvTaxRevChErr);
      Assert.AreEqual(FALSE,STRevChrgSetup.TryGetSrvTaxReverseCharge(FakeCode,FakeCode,''),UnexpectedTryGetSrvTaxRevChErr);
    END;

    LOCAL PROCEDURE CreateGenJnlLinePoT@1500031(VAR GenJournalLine@1500006 : Record 81;DocumentType@1500002 : Option;ServiceTaxOnAdvPmt@1500000 : Boolean);
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      ReverseServiceTaxHelper.CreateJnlLineWithServiceTax(
        GenJournalLine,GenJournalBatch,DocumentType,GenJournalLine."Service Type (Rev. Chrg.)"::" ",ReverseChargeTypeOption::" ",0);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",ServiceTaxOnAdvPmt);
      GenJournalLine.VALIDATE(PoT,TRUE);
    END;

    LOCAL PROCEDURE CreateServiceEntityType@1500005() : Code[10];
    VAR
      ServiceEntityType@1170000000 : Record 16460;
    BEGIN
      ServiceEntityType.INIT;
      ServiceEntityType.Code := LibraryUtility.GenerateRandomCode(ServiceEntityType.FIELDNO(Code),DATABASE::"Service Entity Type");
      ServiceEntityType.Description := ServiceEntityType.Code;
      ServiceEntityType.INSERT;
      EXIT(ServiceEntityType.Code)
    END;

    LOCAL PROCEDURE CreateServiceTaxRegistrationNo@1500001(ServiceEntityTypeCode@1500001 : Code[10]) : Code[10];
    VAR
      ServiceTaxRegNo@1500000 : Record 16475;
    BEGIN
      ServiceTaxRegNo.Code :=
        LibraryUtility.GenerateRandomCode(ServiceTaxRegNo.FIELDNO(Code),DATABASE::"Service Tax Registration Nos.");
      ServiceTaxRegNo.Description := ServiceTaxRegNo.Code;
      ServiceTaxRegNo."Service Entity Type" := ServiceEntityTypeCode;
      ServiceTaxRegNo.INSERT;
      EXIT(ServiceTaxRegNo.Code)
    END;

    LOCAL PROCEDURE GenJnlFCYSetCurrencyCode@1500032(DocumentType@1500003 : Option;ServiceTaxOnAdvPayment@1500004 : Boolean);
    VAR
      Currency@1500002 : Record 4;
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // setup
      LibraryERM.FindCurrency(Currency);
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,DocumentType,ServiceTaxOnAdvPayment);
        // exercise
        VALIDATE("Currency Code",Currency.Code);
        // validate
        IF DocumentType = "Document Type"::Invoice THEN
          Assert.AreEqual(
            ABS("Amount (LCY)"),"Service Tax Base Amount (LCY)",
            'Incorrect recalculation of Service Tax Base Amount when Currency Code is set')
        ELSE
          Assert.AreEqual(
            ABS("Amount (LCY)"),"Service Tax Base Amount (LCY)" + FullServiceTaxAmount +
            FullServiceTaxSBCAmount + KKCessAmount,
            'Incorrect recalculation of amounts when Currency Code is set');
      END;
    END;

    LOCAL PROCEDURE GenJnlFCYClearCurrencyCode@1500037(DocumentType@1500004 : Option;ServiceTaxOnAdvPayment@1500003 : Boolean);
    VAR
      Currency@1500002 : Record 4;
      GenJournalLine@1500000 : Record 81;
      ExpectedBaseAmount@1500001 : Decimal;
    BEGIN
      // setup
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,DocumentType,ServiceTaxOnAdvPayment);
        ExpectedBaseAmount := "Service Tax Base Amount (LCY)";
        LibraryERM.FindCurrency(Currency);
        VALIDATE("Currency Code",Currency.Code);
        // exercise
        VALIDATE("Currency Code",'');
        // validate
        Assert.AreEqual(
          ExpectedBaseAmount,"Service Tax Base Amount (LCY)",
          'Incorrect recalculation of Service Tax Base Amount (LCY) when Currency Code is cleared');
      END;
    END;

    LOCAL PROCEDURE GenJnlFCYCalcAmountFromBase@1500041(DocumentType@1500005 : Option;ServiceTaxOnAdvPayment@1500004 : Boolean);
    VAR
      Currency@1500002 : Record 4;
      GenJournalLine@1500000 : Record 81;
      GLSetup@1500006 : Record 98;
      ExpectedAmount@1500001 : Decimal;
      BaseAmount@1500003 : Decimal;
    BEGIN
      // setup
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,DocumentType,ServiceTaxOnAdvPayment);
        LibraryERM.FindCurrency(Currency);
        VALIDATE("Currency Code",Currency.Code);
        BaseAmount := "Service Tax Base Amount (LCY)";
        ExpectedAmount := Amount;
        VALIDATE(Amount,Amount/2);
        // exercise
        VALIDATE("Service Tax Base Amount (LCY)",BaseAmount);
        // validate
        GLSetup.GET;
        Assert.AreNearlyEqual(
          ABS(ExpectedAmount),ABS(Amount),GLSetup."Service Tax Rounding Precision",
          'Incorrect calculation of Amount (in Foreign Currency) from Base (in Local Currency)');
      END;
    END;

    LOCAL PROCEDURE GenJnlSTaxDeleteGroupCode@1500061(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialAmount@1500002 : Decimal;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF DocumentType IN ["Document Type"::Payment,"Document Type"::Refund] THEN
          CreateGenJnlLinePoT(GenJournalLine,DocumentType,TRUE)
        ELSE
          CreateGenJnlLinePoT(GenJournalLine,DocumentType,FALSE);
        InitialAmount := Amount;
        VALIDATE("Service Tax Group Code",'');
        Assert.AreEqual(
          0,"Service Tax Base Amount (LCY)",
          'Clearing Service Tax Group Code on a credit memo or refund with Service Tax, should set to zero Service Tax Base Amount');
        Assert.AreEqual(
          InitialAmount,Amount,
          'Clearing Service Tax Group Code on a credit memo or refund with Service Tax, should not affect the value of Amount');
      END;
    END;

    LOCAL PROCEDURE GenJnlUpdateFlagToTrue@1500050(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      InitialBaseAmount@1500003 : Decimal;
      InitialAmount@1500002 : Decimal;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLinePoT(GenJournalLine,DocumentType,FALSE);
        InitialBaseAmount := "Service Tax Base Amount (LCY)";
        InitialAmount := Amount;
        VALIDATE("Serv. Tax on Advance Payment",TRUE);

        Assert.AreEqual(
          InitialAmount,Amount,
          'Enabling the flag "Serv. Tax on Advance Payment" should not affect the value of Amount');

        IF DocumentType = "Document Type"::"Credit Memo" THEN
          Assert.AreEqual(
            InitialBaseAmount,"Service Tax Base Amount (LCY)",
            'Enabling the flag Serv. Tax on Advance Payment should not affect the value of Service Tax Base Amount')
        ELSE
          IF DocumentType = "Document Type"::Payment THEN
          Assert.AreNotEqual(
            InitialBaseAmount,"Service Tax Base Amount (LCY)",
            'Enabling the flag Serv. Tax on Advance Payment should recalculate the value of Service Tax Base Amount')
          ELSE
            Assert.Fail('This method is only implemented for credit memos or invoices');
      END;
    END;

    LOCAL PROCEDURE ChangeValueOfSTaxBaseAmount@1500039(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE(
        "Service Tax Base Amount (LCY)",ReverseServiceTaxHelper.RoundAmount(GenJournalLine."Service Tax Base Amount (LCY)"/2));
    END;

    BEGIN
    END.
  }
}

