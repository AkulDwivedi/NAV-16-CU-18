OBJECT Codeunit 137029 SCM Warehouse Orange Location
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryService@1007 : Codeunit 131902;
      LibraryWarehouse@1005 : Codeunit 132204;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryPurchase@1020 : Codeunit 130512;
      OrangeLocation@1003 : Code[10];
      isInitialized@1001 : Boolean;
      BinError@1021 : TextConst 'ENU=Bin Code must be %1 in %2.';
      BinError2@1000 : TextConst 'ENU=Bin Code must not be %1 in %2.';
      TextREC@1012 : TextConst 'ENU=REC';
      TextSHIP@1011 : TextConst 'ENU=SHIP';
      TextBIN1@1010 : TextConst 'ENU=BIN1';
      TextBIN2@1019 : TextConst 'ENU=BIN2';
      Question1@1002 : TextConst 'ENU=Do you want to post the receipt?';
      Question2@1014 : TextConst 'ENU=Do you want to register the %1 Document?';
      UnexpectedError@1013 : TextConst 'ENU=An unexpected unhandled UI occurred: %1.';

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PutAwayBinCodeWithOnlyReceiveBin@29();
    VAR
      PurchaseHeader@1000 : Record 38;
      PostedWhseReceiptLine@1001 : Record 7319;
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      // setup
      Initialize;
      // execute
      CreateAndPostWhseReceipt(PurchaseHeader,PostedWhseReceiptLine,1);
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.FINDFIRST;
      // validate: check that bin code on put-away/take line is same as posted warehouse receipt line line.
      Assert.AreEqual(PostedWhseReceiptLine."Bin Code",WhseActivityLine."Bin Code",
        STRSUBSTNO(BinError,PostedWhseReceiptLine."Bin Code",WhseActivityLine.TABLECAPTION));
      // validate: check that bin code on put-away/place line is blank.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual('',WhseActivityLine."Bin Code",STRSUBSTNO(BinError,'',WhseActivityLine.TABLECAPTION));
      // validate: registering put-away should throw error
      WhseActivityLine.RESET;
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Whse.-Act.-Register (Yes/No)",WhseActivityLine);
    END;

    [Test]
    PROCEDURE PutAwayBinCodeWithOnlyReceiveShip@26();
    VAR
      PurchaseHeader@1000 : Record 38;
      PostedWhseReceiptLine@1001 : Record 7319;
      WhseActivityLine@1002 : Record 5767;
      Bin@1003 : Record 7354;
      Location@1004 : Record 14;
    BEGIN
      // setup
      Initialize;
      Location.GET(OrangeLocation);
      CreateBin(Bin,Location.Code,TextSHIP);
      Location.VALIDATE("Shipment Bin Code",Bin.Code);
      Location.MODIFY(TRUE);
      // execute
      CreateAndPostWhseReceipt(PurchaseHeader,PostedWhseReceiptLine,1);
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.FINDFIRST;
      // validate: check that bin code on put-away/take line is same as posted warehouse receipt line line.
      Assert.AreEqual(PostedWhseReceiptLine."Bin Code",WhseActivityLine."Bin Code",
        STRSUBSTNO(BinError,PostedWhseReceiptLine."Bin Code",WhseActivityLine.TABLECAPTION));
      // validate: check that bin code on put-away/place line is blank.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual('',WhseActivityLine."Bin Code",STRSUBSTNO(BinError,'',WhseActivityLine.TABLECAPTION));
      // Validate: Assign the Place bin code to SHIP on put-away/Place and validate that it throws an error
      // that bin code can not be one of SHIP or REC.
      ASSERTERROR WhseActivityLine.VALIDATE("Bin Code",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PutAwayBinCodeWithOnlyReceiveShipAndBin2@5();
    VAR
      PurchaseHeader@1000 : Record 38;
      PostedWhseReceiptLine@1001 : Record 7319;
      WhseActivityLine@1002 : Record 5767;
      Bin@1003 : Record 7354;
    BEGIN
      // setup
      Initialize;
      CreateAndPostWhseReceipt(PurchaseHeader,PostedWhseReceiptLine,1);
      CreateBin(Bin,OrangeLocation,TextBIN2);
      // execute
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.FINDFIRST;
      // Validate: Place line bin code should be blank.
      Assert.AreEqual('',WhseActivityLine."Bin Code",STRSUBSTNO(BinError,'',WhseActivityLine.TABLECAPTION));
      // execute
      WhseActivityLine.VALIDATE("Bin Code",Bin.Code);
      WhseActivityLine.MODIFY(TRUE);
      // Validate : BIN1 should be assigned to Put-away/Place line
      Assert.AreEqual(Bin.Code,WhseActivityLine."Bin Code",STRSUBSTNO(BinError,Bin.Code,WhseActivityLine.TABLECAPTION));
      // validate : Registering put-away should not throw any error
      WhseActivityLine.RESET;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Act.-Register (Yes/No)",WhseActivityLine);
    END;

    [Test]
    PROCEDURE PutAwayBinCodeWithMultipleLines@48();
    VAR
      Location@1004 : Record 14;
      Bin@1007 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PostedWhseReceiptLine@1001 : Record 7319;
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      // setup
      Initialize;
      Location.GET(OrangeLocation);
      CreateBin(Bin,OrangeLocation,TextBIN2);
      // execute
      CreateAndModifyLineBinAndPostWhseReceipt(PurchaseHeader,PostedWhseReceiptLine,2,1,TextBIN2);
      // validate : bin code on 1st take line is BIN2.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual(Bin.Code,WhseActivityLine."Bin Code",STRSUBSTNO(BinError,TextBIN2,WhseActivityLine.TABLECAPTION));
      // validate : bin code on 1st place line is blank
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual('',WhseActivityLine."Bin Code",STRSUBSTNO(BinError,'',WhseActivityLine.TABLECAPTION));
      // validate : bin code on 2nd take line is REC.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.NEXT(2);
      Assert.AreEqual(
        Location."Receipt Bin Code",WhseActivityLine."Bin Code",STRSUBSTNO(BinError,TextREC,WhseActivityLine.TABLECAPTION));
      // validate : bin code on 2nd place line is BIN2
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.NEXT(2);
      Assert.AreEqual(Bin.Code,WhseActivityLine."Bin Code",STRSUBSTNO(BinError,TextBIN2,WhseActivityLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PutAwayBinCodeWithReceiveShipBin1AndBin2@70();
    VAR
      Location@1004 : Record 14;
      BinRec1@1007 : Record 7354;
      BinRec2@1003 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PostedWhseReceiptLine@1001 : Record 7319;
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      // setup
      Initialize;
      Location.GET(OrangeLocation);
      CreateBin(BinRec1,OrangeLocation,TextBIN1);
      CreateBin(BinRec2,OrangeLocation,TextBIN2);
      // execute
      CreateAndModifyLineBinAndPostWhseReceipt(PurchaseHeader,PostedWhseReceiptLine,2,1,TextBIN2);
      // validate : bin code on 1st take line is BIN2.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual(BinRec2.Code,WhseActivityLine."Bin Code",STRSUBSTNO(BinError,BinRec2.Code,WhseActivityLine.TABLECAPTION));
      // validate : bin code on 1st place line is bin1
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual(BinRec1.Code,WhseActivityLine."Bin Code",STRSUBSTNO(BinError,BinRec1.Code,WhseActivityLine.TABLECAPTION));
      // validate : bin code on 2nd take line is REC.
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Take,0);
      WhseActivityLine.NEXT(2);
      Assert.AreEqual(Location."Receipt Bin Code",WhseActivityLine."Bin Code",STRSUBSTNO(BinError,Location."Receipt Bin Code",
          WhseActivityLine.TABLECAPTION));
      // validate : bin code on 2nd place line is neither REC or SHIP bin code
      FilterWhseActivityLine(WhseActivityLine,PurchaseHeader."No.",WhseActivityLine."Activity Type"::"Put-away",
        WhseActivityLine."Action Type"::Place,0);
      WhseActivityLine.NEXT(2);
      Assert.AreNotEqual(Location."Receipt Bin Code",WhseActivityLine."Bin Code",STRSUBSTNO(BinError2,
          Location."Receipt Bin Code",WhseActivityLine.TABLECAPTION));
      Assert.AreNotEqual(Location."Shipment Bin Code",WhseActivityLine."Bin Code",STRSUBSTNO(BinError2,
          Location."Shipment Bin Code",WhseActivityLine.TABLECAPTION));
      // validate : Registering put-away should not throw any error
      WhseActivityLine.RESET;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Act.-Register (Yes/No)",WhseActivityLine);
    END;

    [Normal]
    LOCAL PROCEDURE CreateBin@37(VAR Bin@1002 : Record 7354;Locationcode@1000 : Code[10];Code@1001 : Code[10]);
    BEGIN
      IF Bin.GET(Locationcode,Code) THEN
        EXIT;

      CLEAR(Bin);
      Bin.INIT;
      Bin.VALIDATE("Location Code",Locationcode);
      Bin.VALIDATE(Code,Code);
      Bin.VALIDATE(Empty,TRUE);
      Bin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateOrangeLocation@117() : Code[10];
    VAR
      Location@1006 : Record 14;
      Bin@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
      Location.VALIDATE("Use Put-away Worksheet",FALSE);
      Location.VALIDATE("Directed Put-away and Pick",FALSE);
      Location.VALIDATE("Use ADCS",FALSE);
      Location.VALIDATE("Default Bin Selection",Location."Default Bin Selection"::"Fixed Bin");

      CreateBin(Bin,Location.Code,TextREC);
      Location.VALIDATE("Receipt Bin Code",Bin.Code);
      Location.MODIFY(TRUE);

      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@9(VAR PurchaseHeader@1001 : Record 38;NoOfLines@1002 : Integer);
    VAR
      PurchaseLine@1000 : Record 39;
      Linecount@1004 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      FOR Linecount := 1 TO NoOfLines DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,RANDOM(10));
        PurchaseLine.VALIDATE("Location Code",OrangeLocation);
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndModifyLineBinAndPostWhseReceipt@49(VAR PurchaseHeader@1006 : Record 38;VAR PostedWhseReceiptLine@1005 : Record 7319;NoOfLines@1004 : Integer;ReceiptLineIndexToModify@1000 : Integer;BinCode@1001 : Code[10]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
      WhseReceiptLine@1003 : Record 7317;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,NoOfLines);
      CreateWarehouseReceipt(PurchaseHeader,WarehouseReceiptHeader);
      WhseReceiptLine.SETRANGE("Source Document",WhseReceiptLine."Source Document"::"Purchase Order");
      WhseReceiptLine.SETRANGE("Source No.",PurchaseHeader."No.");
      WhseReceiptLine.NEXT(ReceiptLineIndexToModify);
      WhseReceiptLine.VALIDATE("Bin Code",BinCode);
      WhseReceiptLine.MODIFY(TRUE);
      PostWarehouseReceipt(PostedWhseReceiptLine,PurchaseHeader,WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceipt@23(VAR PurchaseHeader@1000 : Record 38;VAR PostedWhseReceiptLine@1004 : Record 7319;NoOfLines@1003 : Integer);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,NoOfLines);
      CreateWarehouseReceipt(PurchaseHeader,WarehouseReceiptHeader);
      PostWarehouseReceipt(PostedWhseReceiptLine,PurchaseHeader,WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@19(VAR PurchaseHeader@1000 : Record 38;NoOfLines@1001 : Integer);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,NoOfLines);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWarehouseReceipt@50(PurchaseHeader@1000 : Record 38;VAR WarehouseReceiptHeader@1001 : Record 7316);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      WarehouseReceiptHeader.GET(
        LibraryWarehouse.FindWhseReceiptNoBySourceDoc(DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No."));
    END;

    [Normal]
    LOCAL PROCEDURE FilterWhseActivityLine@34(VAR WhseActivityLine@1005 : Record 5767;SourceNo@1001 : Code[20];ActivityType@1000 : Option;ActionType@1002 : Option;LineNo@1004 : Integer);
    BEGIN
      WhseActivityLine.RESET;
      CLEAR(WhseActivityLine);
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Action Type",ActionType);
        IF LineNo <> 0 THEN
          SETRANGE("Whse. Document Line No.",LineNo);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE HandleConfirm@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      CASE TRUE OF
        STRPOS(Question,Question1) > 0,
        // Question1 = text000 in COD5761
        STRPOS(Question,Question2) > 0:
          // Question2 = text001 in COD7306
          Reply := TRUE;
        TRUE:
          ERROR(UnexpectedError,Question);
      END;
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      WarehouseEmployee@1000 : Record 7301;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryService.SetupServiceMgtNoSeries;
      OrangeLocation := CreateOrangeLocation;
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,OrangeLocation,(NOT WarehouseEmployee.FINDFIRST));
      COMMIT;
      isInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE PostWarehouseReceipt@54(VAR PostedWhseReceiptLine@1001 : Record 7319;PurchaseHeader@1002 : Record 38;WarehouseReceiptHeader@1000 : Record 7316);
    BEGIN
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      PostedWhseReceiptLine.SETRANGE("Source Document",PostedWhseReceiptLine."Source Document"::"Purchase Order");
      PostedWhseReceiptLine.SETRANGE("Source No.",PurchaseHeader."No.");
      PostedWhseReceiptLine.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test scenarios for Place Line BinCode on Put-Aways.

      1. create an orange type location as below:
        1) require receive 2) require put-away 3) require shipment 4) require pick 5) bin mandatory 6) Default Bin selection- Fixed Bin.
      2. Add USER as warehouse employee for the location, as default if the USER is not already a default for some other location.
      3. Create inventory posting setup for the location.
      4. Create a receive bin on the above location (say REC).
      5. Create a new purchase order and purchase line with the location above.
      6. Release PO, Create warehouse reciept, post warehouse reciept.
      7[TEST 1]. On the created Put-away validate that Bin code on Take line is REC and Bin code on Place line is blank.
      8[TEST 2]. Register Put-away and validate that it throws an error about blank bin code on place line.
      9[TEST 3]. Assign the Place bin code to REC and validate that it throws an error that bin codes on Take and Place
        lines can not be same.
      10. Create another bin on the location for shipment(say SHIP).
      11[TEST 4]. Assign the Place bin code to SHIP on the same put-away and validate that it throws an error that bin code
        can not be one of SHIP otr REC.
      12. Create another BIN2 on the location.
      13[TEST 5]. Assign the Place bin code to BIN2 on the same put-away and validate that it doesn't throw any error.
      14. Repeat step 5 but add two purchase lines with Item X for the location created above.
      15. Release PO, Create warehouse reciept, change the bin code on first warehouse reciept line to BIN2 and Post the reciept.
      16[Test 6]. On the created Put-away validate that Bin code on 1st Take line is BIN2 and 1st Place line is blank. Validate
        that Bin code on 2nd Take line is REC and 2nd Place line is BIN2. Validate that registering the put-away throws error about
        blank bin code on 1st place line.
      17. Create another BIN1 on the location.
      18. Repeat step 5 but add 2 purchase lines with same Item X for the same locatoin.
      19. Repeat step 17.
      20[TEST 7]. On the created Put-away validate that Bin code on 1st Take line is BIN2 and 1st Place line is BIN1. Validate that Bin code
        on 2nd Take line is REC and 2nd Place line is neither REC nor SHIP. Validate that registering the put-away is successful.

      Test Functions:
      1. PutAwayBinCodeWithOnlyReceiveBin
      2. PutAwayBinCodeWithOnlyReceiveShip
      3. PutAwayBinCodeWithOnlyReceiveShipAndBin2
      4. PutAwayBinCodeWithMultipleLines
      5. PutAwayBinCodeWithReceiveShipBin1AndBin2
    }
    END.
  }
}

