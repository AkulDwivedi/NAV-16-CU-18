OBJECT Codeunit 136143 Service Reservation II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryPurchase@1019 : Codeunit 130512;
      LibrarySales@1017 : Codeunit 130509;
      LibraryService@1006 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibraryRandom@1010 : Codeunit 130440;
      isInitialized@1022 : Boolean;
      ExpectedDateError@1005 : TextConst 'ENU=The change leads to a date conflict with existing reservations.';
      ErrorMustBeSame@1001 : TextConst 'ENU=Error must be same.';
      FieldChangedError@1000 : TextConst '@@@=" Field Caption,Table Caption, Document Type  Field Caption,Document Type Field Value,Document No. Field Caption,Document No. Field Value,Line No. Field Caption,Line No. Field Value";ENU="%1 must not be changed when a quantity is reserved in %2 %3=''%4'',%5=''%6'',%7=''%8''."';
      ReserveFromCurrentLine@1008 : Boolean;
      QuantityOnServiceLine@1009 : Decimal;
      ModifyFieldError@1007 : TextConst '@@@=Field Caption,Table Caption,Document Type Field Caption,Document Type Field Value,Document No. Field Caption,Document No. Field Value,Line No. Field Caption,Line No. Field Value,Quantity Field Value;ENU="%1 must be equal to ''0''  in %2: %3=%4, %5=%6, %7=%8. Current value is ''%9''."';

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReservationBetweenPurchaseAndServiceOrder@132();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify that the Quantity for an existing reservation between Purchase Order and Service Order can be modified and make a new reservation.

      // 1. Setup: Create Purchase Order and Service Order. Reserve the Item partially from Service Line.
      Initialize;
      CreatePurchaseOrderAndServiceOrder(ServiceLine);
      ServiceLine.VALIDATE("Needed by Date",LibraryRandom.RandDate(5));  // Update Needed by Date later than WORKDATE. Use Random to calculate Date.
      UpdateServiceLineQuantity(ServiceLine,ServiceLine.Quantity / 2);  // Update Quantity by half.
      QuantityOnServiceLine := ServiceLine.Quantity;  // Assign in global variable.
      ServiceLine.ShowReservation;

      // 2. Exercise: Update Quantity on Service Line and Reserve again.
      UpdateServiceLineQuantity(ServiceLine,ServiceLine.Quantity + LibraryRandom.RandInt(10));  // Take Random to update the Quantity.
      QuantityOnServiceLine := ServiceLine.Quantity;  // Assign in global variable.
      ServiceLine.ShowReservation;

      // 3. Verify: Verify Service Line for updated Reserved Quantity.
      VerifyServiceLine(ServiceLine,QuantityOnServiceLine);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ReservationFromServiceOrderWithPartialQuantity@136();
    VAR
      ItemJournalLine@1006 : Record 83;
      Item@1000 : Record 27;
      ServiceLine@1001 : Record 5902;
      ItemNo@1002 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Verify Reservation Line and Service Line after Reservation with Inventory as supply and Service Order as demand with partial quantity.

      // 1. Setup: Create Item, create and post Item Journal Line for Inventory and create Service Order.
      Initialize;
      ItemNo := CreateItemWithReserveOption(Item.Reserve::Optional);
      Quantity := LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction;
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(Quantity);
      CreateJournalLine(ItemJournalLine,ItemNo,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateServiceOrder(ServiceLine,ItemNo,Quantity / 2,ServiceLine."Document Type"::Order);
      QuantityOnServiceLine := ServiceLine.Quantity;  // Assign in global variable.
      ReserveFromCurrentLine := TRUE;  // Assign in global variable.

      // 2. Exercise: Reserve the Item from Service Line.
      ServiceLine.ShowReservation;

      // 3. Verify: Verify Reservation Line. Verification done in 'ReservationPageHandler' and Verify Service Line for Reserved Quantity.
      VerifyServiceLine(ServiceLine,QuantityOnServiceLine);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandlerTrue)]
    PROCEDURE CancelReservationFromServiceOrderWithPartialQuantity@134();
    VAR
      ItemJournalLine@1001 : Record 83;
      Item@1002 : Record 27;
      ServiceLine@1000 : Record 5902;
      ItemNo@1004 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Verify Reservation Line and Service Line after cancelled the Reservation when Inventory as supply and Service Order as demand with partial quantity.

      // 1. Setup: Create Item, create and post Item Journal Line for Inventory and create Service Order. Reserve the Item from Service Line
      Initialize;
      ItemNo := CreateItemWithReserveOption(Item.Reserve::Optional);
      Quantity := LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction;
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(Quantity);
      CreateJournalLine(ItemJournalLine,ItemNo,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateServiceOrder(ServiceLine,ItemNo,Quantity / 2,ServiceLine."Document Type"::Order);
      QuantityOnServiceLine := ServiceLine.Quantity;  // Assign in global variable.
      ReserveFromCurrentLine := TRUE;  // Assign in global variable.
      ServiceLine.ShowReservation;
      ReserveFromCurrentLine := FALSE;  // Assign in global variable.
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(Quantity);

      // 2. Exercise: Cancel the reservation from Service Line.
      ServiceLine.ShowReservation;

      // 3. Verify: Verify Reservation Line. Verification done in 'ReserveFromCurrentLineHandler' and Verify Service Line for Reserved Quantity.
      VerifyServiceLine(ServiceLine,0);  // After cancelled the Reservation, Reserved Quantity must be zero.
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeItemNoOnSupplyAfterReservation@127();
    VAR
      SalesLine@1007 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Item No. on Sales Line which is reserved against Service Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Item No. on Sales Line.
      ASSERTERROR SalesLine.VALIDATE("No.",LibraryInventory.CreateItemNo);

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ModifyFieldError,SalesLine.FIELDCAPTION("Reserved Qty. (Base)"),SalesLine.TABLECAPTION,
          SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",SalesLine.FIELDCAPTION("Document No."),
          SalesLine."Document No.",
          SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No.",-ServiceLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeVariantCodeOnSupplyAfterReservation@1();
    VAR
      ItemVariant@1003 : Record 5401;
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Variant Code on Sales Line which is reserved against Service Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Variant Code on Sales Line.
      ASSERTERROR SalesLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,SalesLine."No."));

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          FieldChangedError,SalesLine.FIELDCAPTION("Variant Code"),SalesLine.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),
          SalesLine."Document Type",SalesLine.FIELDCAPTION("Document No."),SalesLine."Document No.",
          SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeLocationCodeOnSupplyAfterReservation@2();
    VAR
      Location@1003 : Record 14;
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Location Code on Sales Line which is reserved against Service Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Location Code on Sales Line.
      ASSERTERROR SalesLine.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ModifyFieldError,SalesLine.FIELDCAPTION("Reserved Qty. (Base)"),SalesLine.TABLECAPTION,
          SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",SalesLine.FIELDCAPTION("Document No."),
          SalesLine."Document No.",
          SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No.",-ServiceLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeItemNoOnDemandAfterReservation@11();
    VAR
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Item No. on Service Line which is reserved against Sales Return Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Item No. on Service Line.
      ASSERTERROR ServiceLine.VALIDATE("No.",LibraryInventory.CreateItemNo);

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          FieldChangedError,ServiceLine.FIELDCAPTION("No."),ServiceLine.TABLECAPTION,ServiceLine.FIELDCAPTION("Document Type"),
          ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),ServiceLine."Document No.",
          ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeVariantCodeOnDemandAfterReservation@10();
    VAR
      ItemVariant@1003 : Record 5401;
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Variant Code on Service Line which is reserved against Sales Return Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Variant Code on Service Line.
      ASSERTERROR ServiceLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,SalesLine."No."));

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          FieldChangedError,ServiceLine.FIELDCAPTION("Variant Code"),ServiceLine.TABLECAPTION,
          ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
          ServiceLine."Document No.",
          ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeLocationCodeOnDemandAfterReservation@9();
    VAR
      Location@1003 : Record 14;
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Location Code on Service Line which is reserved against Sales Return Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Location Code on Service Line.
      ASSERTERROR ServiceLine.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          FieldChangedError,ServiceLine.FIELDCAPTION("Location Code"),ServiceLine.TABLECAPTION,
          ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
          ServiceLine."Document No.",
          ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeNeededByDateOnDemandAfterReservation@8();
    VAR
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Needed by Date on Service Line which is reserved against Sales Return Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Needed by Date on Service Line with Random years.
      ASSERTERROR ServiceLine.VALIDATE("Needed by Date",LibraryRandom.RandDateFrom(SalesLine."Shipment Date",-10));

      // Because Actual Error too long, not possible to verify complete error using Assert.ExepctedError.
      // 3. Verify: Verify error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ExpectedDateError) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler,MessageHandler)]
    PROCEDURE ChangeReserveOptionOnDemandAfterReservation@7();
    VAR
      SalesLine@1001 : Record 37;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify error message when change Reserve option on Service Line which is reserved against Sales Return Order.

      // 1. Setup: Create Sales Return Order and Service Order. Reserve Service Order against Sales return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateDocumentWithServiceItem(
        ServiceLine,SalesLine."Sell-to Customer No.",SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",
        SalesLine.Quantity - 1,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;

      // 2. Exercise: Change Reserve option on Service Line.
      ASSERTERROR ServiceLine.VALIDATE(Reserve,ServiceLine.Reserve::Never);

      // 3. Verify: Verify error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ModifyFieldError,ServiceLine.FIELDCAPTION("Reserved Qty. (Base)"),ServiceLine.TABLECAPTION,
          ServiceLine.FIELDCAPTION("Document Type"),ServiceLine."Document Type",ServiceLine.FIELDCAPTION("Document No."),
          ServiceLine."Document No.",
          ServiceLine.FIELDCAPTION("Line No."),ServiceLine."Line No.",ServiceLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ModifyFactorsFromServiceOrderToProductionOrder@14();
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ServiceLine@1004 : Record 5902;
      LibraryManufacturing@1000 : Codeunit 132202;
    BEGIN
      // Verify Reserved Quantity Service Line after modifying the various field on Supply and Demand after Reservation.

      // 1. Setup: Create Release Production Order and Service Order and Reserve Quantity from Production Order.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,
        CreateItemWithReserveOption(Item.Reserve::Optional),LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);  // Take Random for Quantity.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      CreateDocumentWithServiceItem(
        ServiceLine,Customer."No.",ProductionOrder."Source No.",'','',ProductionOrder.Quantity,ServiceLine."Document Type"::Order);
      ServiceLine.ShowReservation;
      UpdateProdOrderLine(ProductionOrder.Status,ProductionOrder."No.",ServiceLine."Needed by Date");

      // 2. Exercise.
      UpdateServiceLineQuantity(ServiceLine,ServiceLine.Quantity - LibraryUtility.GenerateRandomFraction);  // Using Random to modify Quantity.

      // 3. Verify: Verify Service Line for updated Reserved Quantity.
      VerifyServiceLine(ServiceLine,0);  // Reserved Quantity must be zero.
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReservationEntryWhenReserveIsOptional@15();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify the Reservation entry created by a Purchase Order and Service Order while Reserve type is Optional.

      // 1. Setup: Create Purchase Order and Service Order.
      Initialize;
      CreatePurchaseOrderAndServiceOrder(ServiceLine);
      ServiceLine.VALIDATE("Needed by Date",LibraryRandom.RandDate(10));  // Update Needed by Date later than WORKDATE. Use Random to calculate Date.
      ServiceLine.VALIDATE(Reserve,ServiceLine.Reserve::Optional);
      ServiceLine.MODIFY(TRUE);

      // 2. Exercise: Reserve Quantity on Service Line.
      ServiceLine.ShowReservation;

      // 3. Verify: Verify Reservation Entry.
      VerifyReservationEntry(ServiceLine,-ServiceLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ShipmentLinePageHandler)]
    PROCEDURE PostedServiceInvoiceWithItemReserveAlways@20();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceLine@1003 : Record 5902;
      ItemNo@1005 : Code[20];
    BEGIN
      // Verify Service Invoice has been posted using Get Shipment Line with Item Reserve Always without any error message .

      // Setup: Create Item, create and post Purchase Order and Service Order, create Service Invoice using Get shipment Lines.
      Initialize;
      ItemNo := CreateItemWithReserveOption(Item.Reserve::Always);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateServiceOrder(ServiceLine,ItemNo,PurchaseLine.Quantity,ServiceLine."Document Type"::Order);
      PostServiceOrder(ServiceLine,FALSE,FALSE);
      LibraryVariableStorage.Enqueue(ServiceLine."Document No.");  // Enqueue value for 'ShipmentLinePageHandler'.
      CreateServiceInvoiceFromGetShipmentLines(ServiceLine,ServiceLine."Customer No.");

      // Exercise: Post Service Invoice.
      PostServiceOrder(ServiceLine,FALSE,TRUE);

      // Verify: Verify Quantity and Item No on Posted Service Invoice.
      VerifyPostedServiceInvoice(ServiceLine);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE DateConflictRaisedWhenPlanningDeliveryDateInServOrderReservedFromPurchOrderIsChanged@13();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // [FEATURE] [Date conflict]
      // [SCENARIO 381251] The date conflict is raised when "Planning Delivery Date" in Service Order reserved from Purchase Order is changed

      Initialize;

      // [GIVEN] Purchase Order with "Expected Receipt Date" = 10.01
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LibraryInventory.CreateItemNo);

      // [GIVEN] Service Order with "Needed By Date" and "Planning Delivery Date" equal 10.01 and reserved from Purchase Order
      CreateServiceOrder(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity,ServiceLine."Document Type"::Order);
      ServiceLine.VALIDATE("Needed by Date",PurchaseLine."Expected Receipt Date");
      ServiceLine.MODIFY(TRUE);
      QuantityOnServiceLine := ServiceLine.Quantity;
      ServiceLine.ShowReservation;

      // [WHEN] Change "Planning Delivery Date" of Service Order to 01.01
      ServiceLine.FIND;
      ASSERTERROR ServiceLine.VALIDATE("Planned Delivery Date",LibraryRandom.RandDate(-5));

      // [THEN] Error message "The change leads to a date conflict with existing reservations" is raised
      Assert.ExpectedError(ExpectedDateError);
    END;

    LOCAL PROCEDURE Initialize@49();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(LibraryService);
      // Lazy Setup.
      QuantityOnServiceLine := 0;
      ReserveFromCurrentLine := FALSE;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryService.SetupServiceMgtNoSeries;
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDocumentWithServiceItem@5(VAR ServiceLine@1000 : Record 5902;CustomerNo@1008 : Code[20];ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];VariantCode@1009 : Code[10];Quantity@1006 : Decimal;DocumentType@1007 : Option);
    BEGIN
      CreateServiceDocument(ServiceLine,CustomerNo,ItemNo,DocumentType);
      ServiceLine.VALIDATE("Variant Code",VariantCode);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Needed by Date",LibraryRandom.RandDate(10));  // Update Needed by Date later than WORKDATE. Use Random to calculate Date.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReserveOption@3(Reserve@1000 : Option) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Reserve,Reserve);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateJournalLine@62(VAR ItemJournalLine@1000 : Record 83;ItemNo@1005 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalTemplate@1002 : Record 82;
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryUtility.GenerateGUID;  // To heal the 'Item Journal Batch already existing' issue.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndServiceOrder@135(VAR ServiceLine@1002 : Record 5902);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LibraryInventory.CreateItemNo);
      CreateServiceOrder(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity,ServiceLine."Document Type"::Order);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@128(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1003 : Code[20]);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,
        LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrder@131(VAR SalesLine@1005 : Record 37);
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      Location@1004 : Record 14;
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Customer."No.",LibraryWarehouse.CreateLocation(Location),
        CreateItemWithReserveOption(Item.Reserve::Optional));
    END;

    LOCAL PROCEDURE CreateSalesDocument@164(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1003 : Option;CustomerNo@1001 : Code[20];LocationCode@1008 : Code[10];No@1007 : Code[20]);
    VAR
      ItemVariant@1006 : Record 5401;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,No,LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,No));
      SalesLine.VALIDATE("Shipment Date",LibraryRandom.RandDate(-10));  // Update Shipment Date earlier than WORKDATE. Use Random to calculate Date.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocument@6(VAR ServiceLine@1000 : Record 5902;CustomerNo@1001 : Code[20];ItemNo@1004 : Code[20];DocumentType@1006 : Option);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1005 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceInvoiceFromGetShipmentLines@66(VAR ServiceLine@1001 : Record 5902;CustomerNo@1003 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,CustomerNo);
      ServiceLine.VALIDATE("Document Type",ServiceHeader."Document Type");
      ServiceLine.VALIDATE("Document No.",ServiceHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Service-Get Shipment",ServiceLine);
    END;

    LOCAL PROCEDURE CreateServiceOrder@44(VAR ServiceLine@1000 : Record 5902;ItemNo@1003 : Code[20];Quantity@1006 : Decimal;DocumentType@1007 : Option);
    VAR
      Customer@1008 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateServiceDocument(ServiceLine,Customer."No.",ItemNo,DocumentType);
      UpdateServiceLineQuantity(ServiceLine,Quantity);
    END;

    LOCAL PROCEDURE PostServiceOrder@23(ServiceLine@1002 : Record 5902;Consume@1000 : Boolean;Invoice@1001 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,Consume,Invoice);
    END;

    LOCAL PROCEDURE UpdateProdOrderLine@16(Status@1001 : Option;ProdOrderNo@1002 : Code[20];DueDate@1004 : Date);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE(Quantity,0);  // Set quantity to zero as per test.
      ProdOrderLine.VALIDATE("Due Date",DueDate);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLineQuantity@96(VAR ServiceLine@1000 : Record 5902;Quantity@1001 : Decimal);
    BEGIN
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPostedServiceInvoice@22(ServiceLine@1001 : Record 5902);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.SETFILTER("No.",'<>''''');
      ServiceInvoiceLine.FINDFIRST;
      ServiceInvoiceLine.TESTFIELD("No.",ServiceLine."No.");
      ServiceInvoiceLine.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@18(ServiceLine@1000 : Record 5902;ExpectedQuantity@1002 : Decimal);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      ReservationEntry.SETRANGE("Source Subtype",ServiceLine."Document Type");
      ReservationEntry.SETRANGE("Source ID",ServiceLine."Document No.");
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Item No.",ServiceLine."No.");
      ReservationEntry.TESTFIELD("Location Code",ServiceLine."Location Code");
      ReservationEntry.TESTFIELD("Quantity (Base)",ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyServiceLine@4(ServiceLine@1000 : Record 5902;Quantity@1001 : Decimal);
    BEGIN
      ServiceLine.CALCFIELDS("Reserved Quantity");
      ServiceLine.TESTFIELD("Reserved Quantity",Quantity);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@27(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLineHandler@78(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@47(VAR Reservation@1000 : TestPage 498);
    VAR
      ExpectedQty@1001 : Decimal;
    BEGIN
      IF ReserveFromCurrentLine THEN
        Reservation."Reserve from Current Line".INVOKE
      ELSE BEGIN
        Reservation.CancelReservationCurrentLine.INVOKE;
        Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
        Reservation.QtyReservedBase.ASSERTEQUALS(0);
        Reservation."Current Reserved Quantity".ASSERTEQUALS(0);
        Reservation.OK.INVOKE;
        EXIT;
      END;
      Reservation.ItemNo.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      Reservation.QtyToReserveBase.ASSERTEQUALS(QuantityOnServiceLine);
      Reservation.QtyReservedBase.ASSERTEQUALS(QuantityOnServiceLine);
      ExpectedQty := LibraryVariableStorage.DequeueDecimal;
      Reservation."Total Quantity".ASSERTEQUALS(ExpectedQty);
      Reservation."Current Reserved Quantity".ASSERTEQUALS(QuantityOnServiceLine);
      Reservation.TotalAvailableQuantity.ASSERTEQUALS(ExpectedQty - QuantityOnServiceLine);
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ShipmentLinePageHandler@21(VAR GetServiceShipmentLines@1000 : Page 5994;VAR Response@1001 : Action);
    VAR
      ServiceShipmentHeader@1002 : Record 5990;
      ServiceShipmentLine@1003 : Record 5991;
      OrderNo@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(OrderNo);
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      ServiceShipmentLine.FINDFIRST;

      GetServiceShipmentLines.SETRECORD(ServiceShipmentLine);
      GetServiceShipmentLines.GetShipmentLines;
    END;

    BEGIN
    {
      // [FEATURE] [Reservation] [Service]
      Test for CRM Service Reservation:
       1. Verify that the Quantity for an existing reservation between Purchase Order and Service Order can be modified and make a new reservation.
       2. Verify Reservation Line and Service Line after Reservation with Inventory as supply and Service Order as demand with partial quantity.
       3. Verify Reservation Line and Service Line after cancelled the Reservation when Inventory as supply and Service Order as demand with partial quantity.
       4. Verify error message when change Item No. on Sales Line which is reserved against Service Order.
       5. Verify error message when change Variant Code on Sales Line which is reserved against Service Order.
       6. Verify error message when change Location Code on Sales Line which is reserved against Service Order.
       7. Verify error message when change Item No. on Service Line which is reserved against Sales Return Order.
       8. Verify error message when change Variant Code on Service Line which is reserved against Sales Return Order.
       9. Verify error message when change Location Code on Service Line which is reserved against Sales Return Order.
      10. Verify error message when change Needed by Date on Service Line which is reserved against Sales Return Order.
      11. Verify error message when change Reserve Option on Service Line which is reserved against Sales Return Order.
      12. Verify Reserved Quantity Service Line after modifying the various field on Supply and Demand after Reservation.
      13. Verify the Reservation entry created by a Purchase Order and Service Order while Reserve type is Optional.
      14. Verify Service Invoice has been posted using Get Shipment Line with Item Reserve Always without any error message.

      Covers Test Cases: 274080
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      -----------------------------------------------------------------------------------------------------
      ReservationBetweenPurchaseAndServiceOrder                                                   177928
      ReservationFromServiceOrderWithPartialQuantity,
      CancelReservationFromServiceOrderWithPartialQuantity                                        178022
      ChangeItemNoOnSupplyAfterReservation, ChangeVariantCodeOnSupplyAfterReservation,
      ChangeLocationCodeOnSupplyAfterReservation, ChangeItemNoOnDemandAfterReservation,
      ChangeVariantCodeOnDemandAfterReservation, ChangeLocationCodeOnDemandAfterReservation,
      ChangeNeededByDateOnDemandAfterReservation, ChangeReserveOptionOnDemandAfterReservation     178033

      Cover Test cases: TFS_TS_ID = 274083
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ModifyFactorsFromServiceOrderToProductionOrder                                              177148
      ReservationEntryWhenReserveIsOptional                                                       178037

      Covers Test cases: for WI - 298197
      --------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------
      PostedServiceInvoiceWithItemReserveAlways                                                   142975
    }
    END.
  }
}

