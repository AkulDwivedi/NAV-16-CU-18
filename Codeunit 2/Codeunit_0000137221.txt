OBJECT Codeunit 137221 SalesOrder Whse Validate Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryInventory@1007 : Codeunit 132201;
      LibrarySales@1008 : Codeunit 130509;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryUtility@1003 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      ErrFieldMustNotBeChanged@1004 : TextConst 'ENU=%1 must not be changed when a %2 for this %3 exists';
      ErrStatusMustBeOpen@1006 : TextConst 'ENU=Status must be equal to ''Open''  in %1';
      ErrCannotBeDeleted@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists';
      UnexpectedMessage@1005 : TextConst 'ENU=Unexpected message: "%1". Expected: "%2"';

    LOCAL PROCEDURE Initialize@25();
    VAR
      WarehouseSetup@1001 : Record 5769;
      SalesReceivablesSetup@1002 : Record 311;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      DisableWarnings;

      WarehouseSetup.GET;
      WarehouseSetup."Whse. Ship Nos." := LibraryUtility.GetGlobalNoSeriesCode;
      WarehouseSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup."Order Nos." := LibraryUtility.GetGlobalNoSeriesCode;
      SalesReceivablesSetup.MODIFY(TRUE);

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderTypeChange@135();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1005 : Record 37;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);

      ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,SalesHeader.TABLECAPTION);

      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE(Type,SalesLine2.Type::Resource);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE OpenSalesOrderTypeChange@12();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);

      SalesOrderFieldChange(TRUE,SalesHeader,SalesLine,SalesLine.FIELDNO(Type),SalesLine.Type::Resource);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderNoChange@13();
    BEGIN
      SalesOrderNoChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderNoChange@119();
    BEGIN
      SalesOrderNoChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderVariantCodCh@1();
    BEGIN
      SalesOrderVariantCodChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderVariantCodChange@114();
    BEGIN
      SalesOrderVariantCodChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderLocCodChange@116();
    BEGIN
      SalesOrderLocCodChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderLocCodChange@115();
    BEGIN
      SalesOrderLocCodChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderQtyChange@10();
    BEGIN
      SalesOrderQtyChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderQtyChange@17();
    BEGIN
      SalesOrderQtyChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderUOMChange@14();
    BEGIN
      SalesOrderUOMChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderUOMChange@11();
    BEGIN
      SalesOrderUOMChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderDropShmtChan@16();
    BEGIN
      SalesOrderDropShmtChange(TRUE);
    END;

    [Test]
    PROCEDURE OpenSalesOrderDropShmtChange@15();
    BEGIN
      SalesOrderDropShmtChange(FALSE);
    END;

    [Test]
    PROCEDURE ReleasedSalesOrderDelLines@19();
    VAR
      SalesHeader@1002 : Record 36;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,SalesHeader.TABLECAPTION);

      SalesOrderDelLines(FALSE,ExpectedErrorMessage);
    END;

    [Test]
    PROCEDURE OpenSalesOrderDelLines@18();
    VAR
      SalesLine@1001 : Record 37;
      WhseShptLine@1005 : Record 7321;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrCannotBeDeleted,
          SalesLine.TABLECAPTION,WhseShptLine.TABLECAPTION);

      SalesOrderDelLines(TRUE,ExpectedErrorMessage);
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14);
    VAR
      Bin@1003 : Record 7354;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := TRUE;
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(
        Bin,
        Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
        '',
        '');

      Bin.VALIDATE(Dedicated,TRUE);
      Bin.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@31(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1002 : Record 27;Location@1003 : Record 14);
    BEGIN
      // One of the test cases will try to update quantity to "original - 1" so it is important to have quantity at least 2
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',Item."No.",RANDOM(10) + 2,Location.Code,WORKDATE);
    END;

    LOCAL PROCEDURE TestSalesOrderSetup@33(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;VAR Item@1002 : Record 27;VAR Location@1003 : Record 14);
    BEGIN
      LocationSetup(Location);

      LibraryInventory.CreateItem(Item);

      CreateSalesOrder(SalesHeader,SalesLine,Item,Location);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE SalesOrderFieldChange@39(Reopen@1007 : Boolean;SalesHeader@1001 : Record 36;SalesLine@1002 : Record 37;FieldNo@1004 : Integer;Value@1003 : Variant);
    VAR
      WhseShptLine@1011 : Record 7321;
      FieldRef@1009 : FieldRef;
      RecRef@1010 : RecordRef;
      ExpectedErrorMessage@1000 : Text[1024];
    BEGIN
      RecRef.GETTABLE(SalesLine);
      FieldRef := RecRef.FIELD(FieldNo);

      IF Reopen THEN BEGIN
        LibrarySales.ReopenSalesDocument(SalesHeader);
        ExpectedErrorMessage := STRSUBSTNO(ErrFieldMustNotBeChanged,
            FieldRef.NAME,WhseShptLine.TABLECAPTION,SalesLine.TABLECAPTION);
      END ELSE
        ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,SalesHeader.TABLECAPTION);

      ASSERTERROR LibraryInventory.UpdateSalesLine(SalesLine,FieldNo,Value);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE SalesOrderDelLines@181(Reopen@1008 : Boolean;ExpectedErrorMessage@1009 : Text[1024]);
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      Location@1003 : Record 14;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);

      IF Reopen THEN BEGIN
        LibrarySales.ReopenSalesDocument(SalesHeader);
        SalesLine.SETRANGE("No.",SalesLine."No.");
        SalesLine.FINDFIRST;
      END;

      ASSERTERROR SalesLine.DELETEALL(TRUE);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    [Normal]
    LOCAL PROCEDURE SalesOrderNoChange@22(Reopen@1004 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);
      LibraryInventory.CreateItem(Item);

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO("No."),Item."No.");
    END;

    LOCAL PROCEDURE SalesOrderVariantCodChange@36(Reopen@1004 : Boolean);
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1003 : Record 14;
      Item@1002 : Record 27;
      ItemVariant@1000 : Record 5401;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO("Variant Code"),ItemVariant.Code);
    END;

    LOCAL PROCEDURE SalesOrderLocCodChange@35(Reopen@1003 : Boolean);
    VAR
      SalesLine@1007 : Record 37;
      SalesHeader@1002 : Record 36;
      Location@1001 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);
      LocationSetup(Location);

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO("Location Code"),Location.Code);
    END;

    LOCAL PROCEDURE SalesOrderQtyChange@30(Reopen@1001 : Boolean);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1003 : Record 37;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO(Quantity),SalesLine.Quantity - 1);
    END;

    LOCAL PROCEDURE SalesOrderUOMChange@29(Reopen@1004 : Boolean);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1007 : Record 37;
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      UnitOfMeasure@1003 : Record 204;
      ItemUnitOfMeasure@1005 : Record 5404;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO("Unit of Measure Code"),UnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE SalesOrderDropShmtChange@26(Reopen@1003 : Boolean);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestSalesOrderSetup(SalesHeader,SalesLine,Item,Location);

      SalesOrderFieldChange(Reopen,SalesHeader,SalesLine,SalesLine.FIELDNO("Drop Shipment"),NOT SalesLine."Drop Shipment");
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Order] [Sales] [SCM]
      Unsupported version tags:
      ES: Unable to Execute

      Testing Warehouse Validate Source Line functionality for Sales Order
      by changing probable set of values and then validating by messages.

      NTF test case WI 57719.
    }
    END.
  }
}

