OBJECT Codeunit 137087 SCM Order Planning - II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationRed@1011 : Record 14;
      LocationBlue@1010 : Record 14;
      LocationBlue2@1009 : Record 14;
      LocationIntransit@1008 : Record 14;
      SalesReceivablesSetup@1004 : Record 311;
      Assert@1005 : Codeunit 130000;
      LibraryERM@1025 : Codeunit 131300;
      LibraryPlanning@1002 : Codeunit 132203;
      LibraryInventory@1017 : Codeunit 132201;
      LibraryManufacturing@1018 : Codeunit 132202;
      LibrarySales@1022 : Codeunit 130509;
      LibraryService@1032 : Codeunit 131902;
      LibraryWarehouse@1019 : Codeunit 132204;
      LibraryDimension@1029 : Codeunit 131001;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1003 : Codeunit 131000;
      DemandTypeGlobal@1013 : 'Sales,Production';
      IsInitialized@1000 : Boolean;
      ValidationError@1014 : TextConst 'ENU=%1  must be %2 in %3.';
      NoErrorText@1021 : TextConst 'ENU="No. must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No."';
      DateErrorText@1020 : TextConst 'ENU="Demand Date must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      QuantityErrorText@1016 : TextConst 'ENU="Demand Quantity (Base) must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      LocationErrorText@1015 : TextConst 'ENU="Location Code must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      UOMErrorText@1007 : TextConst 'ENU="Qty. per UOM (Demand) must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      ErrorText@1023 : TextConst 'ENU=Error Message Must be same.';
      ExpectedQuantity@1024 : Decimal;
      QuantityError@1026 : TextConst 'ENU=Available Quantity must match.';
      ReserveError@1031 : TextConst 'ENU=Reserve must be equal to ''%1''  in Requisition Line';
      RequisitionLineMustNotExist@1012 : TextConst 'ENU=Requisition Line must not exist for Item %1.';

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE SalesOrderPlanningChangeItem@82();
    VAR
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      Item@1002 : Record 27;
      Item2@1003 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create Sales Order planning setup,Create new item, and change Item on sales line after calculate order planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateSalesOrderPlanningSetup(SalesHeader,Item,'',LibraryRandom.RandDec(10,2));
      CreateItem(Item2,Item2."Replenishment System"::Purchase,'','');

      // Change Item No in sales Line.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("No."),Item2."No.");

      // Exercise: Run Make Supply Order.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      ASSERTERROR MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify that error message is same as accepted during make order when change sales line No. after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(NoErrorText,Item2."No.")) > 0,ErrorText);
      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE SalesOrdPlngChangeShipmentDate@81();
    VAR
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      Item@1002 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ShipmentDate@1001 : Date;
    BEGIN
      // Setup: Create Sales Order planning setup, and change Shipment Date on sales line after calculate order planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateSalesOrderPlanningSetup(SalesHeader,Item,'',LibraryRandom.RandDec(10,2));
      ShipmentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE);

      // Change Shipment Date On Sales Line.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("Shipment Date"),ShipmentDate);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify that error message is same as accepted during make order when change sales line Shipment Date after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(DateErrorText,ShipmentDate)) > 0,ErrorText);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE SalesOrderPlanningChangeQty@80();
    VAR
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      Item@1002 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      Quantity@1000 : Decimal;
      Quantity2@1004 : Decimal;
    BEGIN
      // Setup: Create Sales Order planning setup, and change Quantity on sales line after calculate order planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateSalesOrderPlanningSetup(SalesHeader,Item,'',Quantity);
      Quantity2 := Quantity + LibraryRandom.RandDec(10,2);

      // Change Quantity On Sales Line.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO(Quantity),Quantity2);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify that error message is same as accepted during make order when change sales line Quantity after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QuantityErrorText,Quantity2)) > 0,ErrorText);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE SalesOrderPlanningChangeLoc@76();
    VAR
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
    BEGIN
      // Setup: Create Sales Order planning setup, and change Location on sales line after calculate order planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateSalesOrderPlanningSetup(SalesHeader,Item,LocationRed.Code,LibraryRandom.RandDec(10,2));

      // Change Location On Sales Line.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("Location Code"),LocationBlue.Code);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify that error message is same as accepted during make order when change sales line Location Code after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(LocationErrorText,LocationBlue.Code)) > 0,ErrorText);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE SalesOrderPlanningChangeUOM@59();
    VAR
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      ItemUnitOfMeasure@1001 : Record 5404;
      Item@1002 : Record 27;
    BEGIN
      // Setup: Create Sales Order planning setup, and change Unit Of Measure Code on sales line after calculate order planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateSalesOrderPlanningSetup(SalesHeader,Item,'',LibraryRandom.RandDec(10,2));

      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);

      // Change Unit Of Measure On Sales Line.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("Unit of Measure Code"),ItemUnitOfMeasure.Code);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify that error message is same as accepted during make order when change sales line UOM Code after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(UOMErrorText,ItemUnitOfMeasure."Qty. per Unit of Measure")) > 0,ErrorText);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE MultipleReleasedSalesOrder@95();
    VAR
      Item@1004 : Record 27;
    BEGIN
      Initialize;
      PlanningMultipleSalesOrder(Item."Replenishment System"::Purchase,TRUE);
    END;

    [Test]
    PROCEDURE MultipleOpenSalesOrder@103();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      PlanningMultipleSalesOrder(Item."Replenishment System"::"Prod. Order",FALSE);
    END;

    LOCAL PROCEDURE PlanningMultipleSalesOrder@89(ReplenishmentSystem@1003 : Option;StatusReleased@1006 : Boolean);
    VAR
      RequisitionLine@1011 : Record 246;
      Item@1010 : Record 27;
      Item2@1009 : Record 27;
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1001 : Record 36;
      SalesHeader3@1000 : Record 36;
    BEGIN
      // Setup : Create Two Item with Replenishment System and create Multiple Sales Order with Status.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,ReplenishmentSystem,'','');
      CreateItem(Item2,ReplenishmentSystem,'','');
      CreateMultipleSalesOrder(SalesHeader,SalesHeader2,SalesHeader3,LocationBlue.Code,LocationRed.Code,Item."No.",Item2."No.");

      IF StatusReleased THEN BEGIN
        LibrarySales.ReleaseSalesDocument(SalesHeader);
        LibrarySales.ReleaseSalesDocument(SalesHeader2);
        LibrarySales.ReleaseSalesDocument(SalesHeader3);
      END;

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify.
      VerifyDemandQtyAndLocation(SalesHeader."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);
      VerifyDemandQtyAndLocation(SalesHeader2."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);
      VerifyDemandQtyAndLocation(SalesHeader3."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE NegativeSalesReturn@91();
    VAR
      RequisitionLine@1004 : Record 246;
      Item@1006 : Record 27;
      ParentItem@1003 : Record 27;
      ChildItem@1002 : Record 27;
      SalesHeader@1007 : Record 36;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory and Replenishment System Production,
      // Create Negative Sales Return.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateSalesReturnOrder(SalesHeader,Item."No.",ParentItem."No.",LocationRed.Code,-Quantity);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify.
      VerifyDemandQtyAndLocation(SalesHeader."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE NegativeSalesReturnMakeOrder@90();
    VAR
      RequisitionLine@1004 : Record 246;
      Item@1006 : Record 27;
      ParentItem@1003 : Record 27;
      ChildItem@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory and Replenishment System Production,
      // Create Negative Sales Return, and run Order Planning.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateSalesReturnOrder(SalesHeader,Item."No.",ParentItem."No.",LocationRed.Code,-Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Make Supply Order with Option Active Order.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify.
      VerifyReturnQtyWithPurchQty(SalesHeader."No.",Item."No.");
      VerifyQtyWithProdOrder(ParentItem."No.",Quantity,LocationRed.Code);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ReleasedAndOpenSalesOrder@87();
    VAR
      RequisitionLine@1004 : Record 246;
      Item@1006 : Record 27;
      Item2@1009 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1001 : Record 36;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create Two Item with Replenishment System Production Order and create Open Sales Order and Released Sales Order.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",'','');
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order",'','');
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      CreateSalesOrder(SalesHeader2,Item2."No.",'',Quantity,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader2);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify.
      VerifyDemandQtyAndLocation(SalesHeader."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);
      VerifyDemandQtyAndLocation(SalesHeader2."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE SalesLinesWithMultipleLocation@85();
    VAR
      RequisitionLine@1011 : Record 246;
      Item@1010 : Record 27;
      Item2@1009 : Record 27;
      SalesHeader@1001 : Record 36;
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup : Create Two Item with Replenishment System Production Order and create Sales Order with Multiple Sales Line and Location.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",'','');
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order",'','');
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,Item."No.",LocationRed.Code,Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item2."No.",LocationRed.Code,Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item2."No.",LocationBlue.Code,Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item."No.",'',Quantity,Quantity);
      CreateSalesLine(SalesHeader,Item2."No.",'',Quantity,Quantity);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify.
      VerifyDemandQtyAndLocation(SalesHeader."No.",SalesHeader."Document Type",DemandTypeGlobal::Sales,DemandTypeGlobal::Sales);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReplenishmentToProduction@84();
    VAR
      Item@1011 : Record 27;
    BEGIN
      Initialize;
      ChangeReplenishmentSalesOrder(Item."Replenishment System"::Purchase,Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReplenishmentToPurchase@100();
    VAR
      Item@1003 : Record 27;
    BEGIN
      Initialize;
      ChangeReplenishmentSalesOrder(Item."Replenishment System"::"Prod. Order",Item."Replenishment System"::Purchase);
    END;

    LOCAL PROCEDURE ChangeReplenishmentSalesOrder@104(ReplenishmentSystem@1001 : Option;ReplenishmentSystem2@1002 : Option);
    VAR
      RequisitionLine@1012 : Record 246;
      Item@1011 : Record 27;
      SalesHeader@1008 : Record 36;
      TempSalesReceivablesSetup@1004 : TEMPORARY Record 311;
      ManufacturingUserTemplate@1003 : Record 5525;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Item , Sales Order , Calculate Planning and Change the Replenishment System.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,ReplenishmentSystem,'','');
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      ChangeReplenishmentSystem(
        RequisitionLine,ReplenishmentSystem,ReplenishmentSystem2,SalesHeader."No.",LibraryPurchase.CreateVendorNo);

      // Exercise : Make Order for changed Replenishment System on Requisition Line.
      MakeSupplyOrdersActiveLine(
        SalesHeader."No.",RequisitionLine."No.",LocationBlue.Code,ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Verify : Verify That Quantity on Purchase Order or Production Order is same as remaining demand quantity on Sales Order after change Replenishment System on Requisition Line.
      IF ReplenishmentSystem2 = Item."Replenishment System"::Purchase THEN
        VerifyDemandQtyWithPurchQty(SalesHeader."No.",Item."No.",LocationBlue.Code)
      ELSE
        VerifyQtyWithProdOrder(Item."No.",Quantity,LocationBlue.Code);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE QuantityAvailableForTransfer@101();
    VAR
      Item@1010 : Record 27;
      RequisitionLine@1001 : Record 246;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      SalesHeader@1013 : Record 36;
      OrderPlanning@1002 : TestPage 5522;
      Quantity@1011 : Decimal;
    BEGIN
      // Setup : Create Item with inventory on location, Sale order and Calculate Plan.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItemInventory(Quantity,Item."No.",LocationBlue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue2.Code,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Open Order Planning Page.
      OpenOrderPlanningPage(OrderPlanning,SalesHeader."No.",Item."No.");

      // Verify : Check the value of Available to Transfer and Quantity Available.
      OrderPlanning.AvailableForTransfer.ASSERTEQUALS(Quantity);
      OrderPlanning.QuantityAvailable.ASSERTEQUALS(-Quantity);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(AlternativeSupplyPageHandler)]
    PROCEDURE NeededQtyOnAlternativeSupply@98();
    VAR
      Item@1010 : Record 27;
      RequisitionLine@1001 : Record 246;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      SalesHeader@1013 : Record 36;
      OrderPlanning@1002 : TestPage 5522;
      Quantity@1011 : Decimal;
    BEGIN
      // Setup : Create Item with inventory on location, Sale order and Calculate Plan and Open Order Planning Page in edit mode.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItemInventory(Quantity,Item."No.",LocationBlue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue2.Code,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      ExpectedQuantity := Quantity;
      OpenOrderPlanningPage(OrderPlanning,SalesHeader."No.",Item."No.");
      COMMIT;

      // Exercise and Verify : Click on Assist edit of Available to transfer from order planning page. Check That the value on Get alternative supply page is same as expected, Verification is done under Page Handler.
      OrderPlanning.AvailableForTransfer.ASSISTEDIT;

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(GetAlternativeSupplyPageHandler)]
    PROCEDURE ReplenishmentToTransfer@93();
    VAR
      Item@1010 : Record 27;
      RequisitionLine@1001 : Record 246;
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      SalesHeader@1013 : Record 36;
      OrderPlanning@1002 : TestPage 5522;
      Quantity@1011 : Decimal;
    BEGIN
      // Setup : Create Item with inventory on location, Sale order and Calculate Plan and Open Order Planning Page in edit mode and  Click On Assist edit of Available to transfer from order planning page for Get Alternative Supply Page.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItemInventory(Quantity,Item."No.",LocationBlue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue2.Code,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      OpenOrderPlanningPage(OrderPlanning,SalesHeader."No.",Item."No.");
      COMMIT;

      // Exercise : Click On Assist Edit Of Available To Transfer, Select the value and click OK on Order Planning Page.
      OrderPlanning.AvailableForTransfer.ASSISTEDIT;
      OrderPlanning.OK.INVOKE;

      // Verify : Check that Replenishment System and Quantity is same as expected on Order Planning.
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue2.Code);
      Assert.AreEqual(
        RequisitionLine."Replenishment System"::Transfer,RequisitionLine."Replenishment System",
        STRSUBSTNO(ValidationError,RequisitionLine.FIELDCAPTION("Replenishment System"),
          RequisitionLine."Replenishment System"::Transfer,RequisitionLine.TABLECAPTION));
      Assert.AreEqual(
        LocationBlue.Code,RequisitionLine."Supply From",
        STRSUBSTNO(ValidationError,RequisitionLine.FIELDCAPTION("Supply From"),LocationBlue.Code,RequisitionLine.TABLECAPTION));

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ReleasedProdOrderPlanning@114();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      Initialize;
      PlanningForProduction(ProductionOrder.Status::Released);
    END;

    [Test]
    PROCEDURE PlannedProdOrderPlanning@113();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      Initialize;
      PlanningForProduction(ProductionOrder.Status::Planned);
    END;

    LOCAL PROCEDURE PlanningForProduction@112(Status@1002 : Option);
    VAR
      ProductionOrder@1024 : Record 5405;
      ParentItem@1001 : Record 27;
      ChildItem@1005 : Record 27;
      RequisitionLine@1003 : Record 246;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Released Production Order.
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      CreateAndRefreshProdOrder(ProductionOrder,Status,ParentItem."No.",'',LibraryRandom.RandDec(10,2));

      // Exercise : Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify : Verify That Quantity on Requisition Line has same as quantity on Production BOM Component Line.
      VerifyDemandQtyAndLocation(ProductionOrder."No.",SalesHeader."Document Type"::Invoice,DemandTypeGlobal::Production,Status);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE FirmPlannedProdOrderMakeOrder@111();
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
    BEGIN
      Initialize;
      PlanningForProdMakeOrderActiveLine(ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlannedProdOrderMakeOrder@110();
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
    BEGIN
      Initialize;
      PlanningForProdMakeOrderActiveLine(ManufacturingUserTemplate."Create Production Order"::Planned);
    END;

    LOCAL PROCEDURE PlanningForProdMakeOrderActiveLine@106(CreateProductionOrder@1003 : Option);
    VAR
      ProductionOrder@1024 : Record 5405;
      ParentItem@1005 : Record 27;
      ChildItem@1004 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Release Production Order
      // and run Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) + 10);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise : Run Make order Active Line from Order Planning Worksheet.
      MakeSupplyOrdersActiveLine(ProductionOrder."No.",ChildItem."No.",LocationBlue.Code,CreateProductionOrder);

      // Verify : Verify Quantity on Purchase Order and Quantity on Production Order is same as define in Production BOM and child item.
      VerifyPurchaseQtyAgainstProd(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE PlannedProdChangeReplenishment@117();
    VAR
      ProductionOrder@1004 : Record 5405;
    BEGIN
      Initialize;
      PlanningForProdChangeRepl(ProductionOrder.Status::Planned)
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE FirmPlannedChangeReplenishment@123();
    VAR
      ProductionOrder@1004 : Record 5405;
    BEGIN
      Initialize;
      PlanningForProdChangeRepl(ProductionOrder.Status::"Firm Planned")
    END;

    LOCAL PROCEDURE PlanningForProdChangeRepl@122(Status@1009 : Option);
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      ChildItem@1002 : Record 27;
      RequisitionLine@1001 : Record 246;
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item without inventory, Create Production Order
      // and run Order Planning and Change Replisment System To Transfer.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      CreateAndRefreshProdOrder(ProductionOrder,Status,ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) + 10);
      UpdateChildItemInventory(ProdOrderComponent,ChildItem."No.",ProductionOrder."No.",LocationBlue2.Code);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      ChangeReplForTrasferOrder(
        RequisitionLine,RequisitionLine."Replenishment System"::Purchase,RequisitionLine."Replenishment System"::Transfer,
        ProductionOrder."No.",LocationBlue2.Code);

      // Exercise : Make Order for changed Replenishment System on Requisition Line.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Verify That Quantity on Purchase Order and Quantity on Production Order is same as define in Production BOM
      // and child item.
      VerifyTransferLine(ChildItem."No.",ProdOrderComponent."Remaining Quantity");
    END;

    [Test]
    PROCEDURE ReserveProdPlanningAlways@126();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      Initialize;
      ReserveProductionPlanning(ChildItem.Reserve::Never,TRUE);
    END;

    [Test]
    PROCEDURE ReserveProdPlanningNever@125();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      Initialize;
      ReserveProductionPlanning(ChildItem.Reserve::Always,FALSE);
    END;

    LOCAL PROCEDURE ReserveProductionPlanning@124(ReserveOnItem@1009 : Option;ReserveOnRequistition@1010 : Boolean);
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      ChildItem@1002 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,ReserveOnItem);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) +
        10);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify : Check that Reserve is TRUE OR False While we create child item Reserve Always and Never.
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationBlue.Code);
      ASSERTERROR RequisitionLine.VALIDATE(Reserve,ReserveOnRequistition);
      IF ReserveOnRequistition THEN
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReserveError,FALSE)) > 0,ErrorText)
      ELSE
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReserveError,TRUE)) > 0,ErrorText);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ResvProdPlanAlwaysMakeOrder@121();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      Initialize;
      ReserveProdPlanMakeOrder(ChildItem.Reserve::Always);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ResvProdPlanNeverMakeOrder@120();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      Initialize;
      ReserveProdPlanMakeOrder(ChildItem.Reserve::Never);
    END;

    LOCAL PROCEDURE ReserveProdPlanMakeOrder@25(ReserveOnItem@1009 : Option);
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      ChildItem@1002 : Record 27;
      RequisitionLine@1001 : Record 246;
      ManufacturingUserTemplate@1000 : Record 5525;
      ReservationEntry@1012 : Record 337;
      ProdOrderComponent@1008 : Record 5407;
    BEGIN
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,ReserveOnItem);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) +
        10);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationBlue.Code);

      // Exercise : Run Make order from Order Planning Worksheet.
      MakeSupplyOrdersActiveLine(
        ProductionOrder."No.",ChildItem."No.",LocationBlue.Code,ManufacturingUserTemplate."Create Production Order"::"Firm Planned");

      // Verify : Check That Reservation Entry Created after Make Supply Order.
      IF ReserveOnItem = ChildItem.Reserve::Always THEN BEGIN
        FindProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItem."No.");
        ReservationEntry.SETRANGE("Item No.",ChildItem."No.");
        ReservationEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
        ReservationEntry.FINDFIRST;
        Assert.AreEqual(
          ProdOrderComponent."Remaining Quantity",ReservationEntry.Quantity,
          STRSUBSTNO(
            ValidationError,ReservationEntry.FIELDCAPTION(Quantity),ProdOrderComponent."Remaining Quantity",
            ReservationEntry.TABLECAPTION));
      END ELSE BEGIN
        // Verify : Check That Reservation Entry Not Created after Make Supply Order.
        ReservationEntry.SETRANGE("Item No.",ChildItem."No.");
        ASSERTERROR ReservationEntry.FINDFIRST;
      END;
    END;

    [Test]
    PROCEDURE PlannedProdDimOnOrderPlanning@33();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      Initialize;
      DimensionOnOrderPlanning(ProductionOrder.Status::Planned);
    END;

    [Test]
    PROCEDURE FirmPlanProdDimOnOrderPlanning@129();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      Initialize;
      DimensionOnOrderPlanning(ProductionOrder.Status::"Firm Planned");
    END;

    [Test]
    PROCEDURE ReleasedProdDimOnOrderPlanning@130();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      Initialize;
      DimensionOnOrderPlanning(ProductionOrder.Status::Released);
    END;

    LOCAL PROCEDURE DimensionOnOrderPlanning@14(Status@1007 : Option);
    VAR
      ProductionOrder@1003 : Record 5405;
      ParentItem@1002 : Record 27;
      ChildItem@1001 : Record 27;
      RequisitionLine@1000 : Record 246;
      DefaultDimension@1006 : Record 352;
      DimensionValue@1005 : Record 349;
    BEGIN
      // Setup : Create Manufacturing Item Setup with child Item With Dimension, Create Production Order.
      CreateManufacturingSetup(ParentItem,ChildItem,ChildItem.Reserve::Optional);
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(
        DefaultDimension,ChildItem."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      CreateAndRefreshProdOrder(ProductionOrder,Status,ParentItem."No.",'',LibraryRandom.RandDec(10,2));

      // Exercise : Run Calculate order planning.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Verify.
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",'');
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,RequisitionLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE OrderPlanningForSpecialSalesOrder@2();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      RequisitionLine@1005 : Record 246;
      SalesLine@1003 : Record 37;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');

      // Create Sales Order and update Purchasing Code Special Order on Sales Line.
      CreateSalesOrder(SalesHeader,Item."No.",'',Quantity,Quantity);
      UpdateSalesLinePurchasingCode(SalesHeader,Item."No.");

      // Exercise: Calculate Order Planning for Sales.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify: Verify that no Requisition line is created for Order Planning for Sales of Special Order.
      FindSalesLine(SalesLine,SalesHeader,Item."No.");
      RequisitionLine.SETRANGE("Purchasing Code",SalesLine."Purchasing Code");
      RequisitionLine.SETRANGE("Demand Order No.",SalesHeader."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE OrderPlanningMakeOrderForPurchaseWithVendorHavingCurrency@6();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      RequisitionLine@1005 : Record 246;
      VendorCurrencyCode@1004 : Code[10];
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      VendorCurrencyCode := UpdateItemWithVendor(Item);

      // Create Sales Order.
      CreateSalesOrder(SalesHeader,Item."No.",'',Quantity,Quantity);

      // Calculate Order Planning for Sales.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exrecise: Run Make Supply Order for Purchase Order.
      MakeSupplyOrdersActiveOrderForPurchase(SalesHeader."No.");

      // Verify: Verify created Purchase Order is updated with correct Vendor No. and Currency Code.
      VerifyPurchaseVendorAndCurrency(Item,VendorCurrencyCode);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE OrderPlanningForRequisitionFromSalesWithMakeOrder@21();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      RequisitionLine@1005 : Record 246;
      ManufacturingUserTemplate@1007 : Record 5525;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');

      // Create Sales Order with Location.
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);

      // Calculate Order Planning for Sales.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise: Run Make Supply Order for Active Line and Copy to Requisition Worksheet.
      MakeSupplyOrdersActiveLineWithCopyToReq(ManufacturingUserTemplate,Item."No.");

      // Verify: Verify Quantity and Location on Requisition Worksheet.
      VerifyRequisitionLine(ManufacturingUserTemplate."Purchase Req. Wksh. Template",Item."No.",LocationBlue.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE RequisitionLineForMultipleSalesMakeOrderTwice@58();
    VAR
      Item@1000 : Record 27;
      Item2@1013 : Record 27;
      SalesHeader@1001 : Record 36;
      RequisitionLine@1005 : Record 246;
      ManufacturingUserTemplate@1007 : Record 5525;
      SalesHeader2@1012 : Record 36;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create two Items.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateItem(Item2,Item."Replenishment System"::Purchase,'','');

      // Create two Sales Orders for same Location.
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      CreateSalesOrder(SalesHeader2,Item2."No.",LocationBlue.Code,Quantity,Quantity);

      // Calculate Order Planning for Sales and Make Order for first item to create Requisition Worksheet line.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      MakeSupplyOrdersActiveLineWithCopyToReq(ManufacturingUserTemplate,Item."No.");

      // Exercise: Make Order again for second item to create another Requisition Worksheet line.
      MakeSupplyOrdersActiveLineWithCopyToReq(ManufacturingUserTemplate,Item2."No.");

      // Verify: Verify Requisition Worksheet line for first item is still available, and is not overwritten by Make Order for second Item.
      VerifyRequisitionLine(ManufacturingUserTemplate."Purchase Req. Wksh. Template",Item."No.",LocationBlue.Code,Quantity);
      VerifyRequisitionLine(ManufacturingUserTemplate."Purchase Req. Wksh. Template",Item2."No.",LocationBlue.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE OrderPlanningReservationServiceOrder@190();
    VAR
      Item@1010 : Record 27;
      RequisitionLine@1001 : Record 246;
      ServiceHeader@1013 : Record 5900;
      ManufacturingUserTemplate@1002 : Record 5525;
      Quantity@1011 : Decimal;
    BEGIN
      // [FEATURE] [Reservation] [Requisition Worksheet] [Order Planning] [Service Order]
      // [SCENARIO 134557] Item is reserved in supply Req. Worksheet when "Reserve" = "Always" and Req. Worksheet is created from Order Planning.

      // [GIVEN] Item "I" with "Replenishment System" = "Purchase", "Reserve" = "Always"
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItem(Item,Item.Reserve::Always);

      // [GIVEN] Create Service Order with "I", Calculate Order Planning.
      CreateServiceOrder(ServiceHeader,Item."No.",Quantity);
      LibraryPlanning.CalculateOrderPlanService(RequisitionLine);

      // [GIVEN] Make supply orders with "Copy to Requisition Worksheet" option.
      MakeSupplyOrdersActiveLineWithCopyToReq(ManufacturingUserTemplate,Item."No.");

      // [THEN] Item is reserved in Requisition Worksheet.
      VerifyServiceReservationEntry(
        ServiceHeader."Document Type",ServiceHeader."No.",Item."No.",-Quantity);
    END;

    [Test]
    PROCEDURE QuantityAvailableWithJobPlanning@10();
    VAR
      Item@1010 : Record 27;
      RequisitionLine@1001 : Record 246;
      JobNo@1000 : Code[20];
      Quantities@1011 : ARRAY [2] OF Decimal;
    BEGIN
      // Setup : Create Item with inventory on location, Sale order and Calculate Plan.
      Initialize;
      Quantities[1] := 10 * LibraryRandom.RandDec(10,2);
      Quantities[2] := 10 * LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      JobNo := CreateJobPlanningLines(Item."No.",Quantities);

      // Exercise : Calculate Order Planning.
      LibraryPlanning.CalculateOrderPlanJob(RequisitionLine);

      // Verify : Check values of Needed Quantity.
      VerifyNeededQuantities(JobNo,Item."No.",Quantities);
    END;

    [Test]
    PROCEDURE RequisitionLineDescriptionAfterOrderPlanning@41();
    VAR
      Vendor@1000 : Record 23;
      Item@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionLine@1002 : Record 246;
      ItemTranslationDescription@1005 : Text[50];
    BEGIN
      // [FEATURE] [Order Planning] [Item Translation]
      // [SCENARIO 375674] Field "Description" of Requisition Line should be taken from Item Translation during Order Planning
      Initialize;

      // [GIVEN] Vendor "V" with Language Code = "C"
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Language Code",GetRandomLanguageCode);
      Vendor.MODIFY(TRUE);

      // [GIVEN] Item with "Vendor No." = "V", "Translation Code" = "C", where Description = "D"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.MODIFY(TRUE);
      ItemTranslationDescription := CreateItemTranslation(Item."No.",Vendor."Language Code");

      // [GIVEN] Sales Order for Item
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [WHEN] Calculate Plan in Order Planning
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // [THEN] Requisition Line is created with Description = "D"
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Description,ItemTranslationDescription);
    END;

    LOCAL PROCEDURE Initialize@18();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobals;

      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobals@159();
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      CLEAR(DemandTypeGlobal);
      CLEAR(ExpectedQuantity);
      RequisitionLine.DELETEALL;
      ClearManufacturingUserTemplate;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeReplenishmentSystem@74(VAR RequisitionLine@1004 : Record 246;OldReplenishmentSystem@1005 : Option;NewReplenishmentSystem@1002 : Option;DemandOrderNo@1000 : Code[20];VendorNo@1003 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("Replenishment System",OldReplenishmentSystem);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Replenishment System",NewReplenishmentSystem);
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeReplForTrasferOrder@119(VAR RequisitionLine@1004 : Record 246;OldReplenishmentSystem@1005 : Option;NewReplenishmentSystem@1002 : Option;DemandOrderNo@1000 : Code[20];SupplyFrom@1003 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("Replenishment System",OldReplenishmentSystem);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Replenishment System",NewReplenishmentSystem);
      RequisitionLine.VALIDATE("Supply From",SupplyFrom);
      RequisitionLine.VALIDATE("Transfer Shipment Date",RequisitionLine."Order Date");
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingSetup@127(VAR Item@1000 : Record 27;VAR ChildItem@1008 : Record 27;Reserve@1006 : Option);
    BEGIN
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','');
      UpdateItem(ChildItem,Reserve);
      CreateItemWithProductionBOM(Item,ChildItem);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@237(VAR Item@1002 : Record 27;ChildItem@1003 : Record 27);
    VAR
      RoutingHeader@1001 : Record 99000763;
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Production BOM and Routing.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem,'',LibraryRandom.RandDec(5,2));
      CreateRoutingSetup(RoutingHeader);

      // Create Parent Item.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",RoutingHeader."No.",ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;RoutingHeaderNo@1006 : Code[20];ProductionBOMNo@1007 : Code[20]);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      LibraryInventory.CreateItem(Item);
      GeneralLedgerSetup.GET;
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(20,2));
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Rounding Precision",GeneralLedgerSetup."Amount Rounding Precision");
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.VALIDATE("Routing No.",RoutingHeaderNo);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItem@236(VAR Item@1000 : Record 27;Reserve@1001 : Option);
    BEGIN
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE(Reserve,Reserve);
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::None);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@202(VAR ProductionBOMHeader@1002 : Record 99000771;Item@1001 : Record 27;VariantCode@1000 : Code[10];QuantityPer@1005 : Decimal);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      // Create component lines in the BOM
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",QuantityPer);
      ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
      ProductionBOMLine.MODIFY(TRUE);

      // Certify BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::"Under Development");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@173(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@141(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@172(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
      MachineCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@73(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE ClearManufacturingUserTemplate@65();
    VAR
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      ManufacturingUserTemplate.SETRANGE("User ID",USERID);
      IF ManufacturingUserTemplate.FINDFIRST THEN
        ManufacturingUserTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@55(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@61();
    BEGIN
      CreateLocation(LocationRed,FALSE);
      CreateLocation(LocationBlue,FALSE);
      CreateLocation(LocationBlue2,FALSE);
      CreateLocation(LocationIntransit,TRUE);
      CreateTransferRoutesSetup(LocationRed,LocationBlue,LocationBlue2,LocationIntransit);
    END;

    LOCAL PROCEDURE CreateMultipleSalesOrder@88(VAR SalesHeader@1000 : Record 36;VAR SalesHeader2@1001 : Record 36;VAR SalesHeader3@1002 : Record 36;LocationCode@1003 : Code[10];LocationCode2@1004 : Code[10];ItemNo@1007 : Code[20];ItemNo2@1008 : Code[20]);
    VAR
      Quantity@1006 : Decimal;
      QuantityToShip@1005 : Decimal;
    BEGIN
      // Random values used are not important for test.
      Quantity := LibraryRandom.RandDec(100,2) + 10;
      QuantityToShip := LibraryRandom.RandDec(10,2);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,Quantity,QuantityToShip);
      CreateSalesLine(SalesHeader,ItemNo2,LocationCode,Quantity,QuantityToShip);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode2,Quantity,QuantityToShip);

      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Order,SalesHeader."Sell-to Customer No.");
      CreateSalesLine(SalesHeader2,ItemNo,LocationCode,Quantity,QuantityToShip);

      LibrarySales.CreateSalesHeader(SalesHeader3,SalesHeader3."Document Type"::Order,SalesHeader."Sell-to Customer No.");
      CreateSalesLine(SalesHeader3,ItemNo2,LocationCode2,Quantity,QuantityToShip);
    END;

    LOCAL PROCEDURE CreateSalesLine@1(SalesHeader@1000 : Record 36;ItemNo@1005 : Code[20];LocationCode@1001 : Code[10];Quantity@1002 : Decimal;QuantityToShip@1006 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QuantityToShip);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1003 : Decimal;QtyToShip@1002 : Decimal);
    BEGIN
      // Random values used are not important for test.
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,Quantity,QtyToShip);
    END;

    LOCAL PROCEDURE CreateServiceOrder@36(VAR ServiceHeader@1001 : Record 5900;ItemNo@1004 : Code[20];Qty@1003 : Decimal);
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      CLEAR(ServiceHeader);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      WITH ServiceLine DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type::Item,ItemNo);
        VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        VALIDATE(Quantity,Qty);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobPlanningLines@17(ItemNo@1005 : Code[20];Quantities@1002 : ARRAY [2] OF Decimal) : Code[20];
    VAR
      Job@1004 : Record 167;
      JobTask@1003 : Record 1001;
      LibraryJob@1001 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobPlanningLine(
        JobTask,ItemNo,
        CALCDATE('<-' + FORMAT(LibraryRandom.RandIntInRange(1,10)) + 'D>',WORKDATE),Quantities[1]);
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobPlanningLine(JobTask,ItemNo,WORKDATE,Quantities[1]);
      CreateJobPlanningLine(
        JobTask,ItemNo,
        CALCDATE('<-' + FORMAT(LibraryRandom.RandIntInRange(11,20)) + 'D>',WORKDATE),Quantities[2]);
      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@27(JobTask@1000 : Record 1001;ItemNo@1002 : Code[20];PlanningDate@1001 : Date;PlanningQuantity@1006 : Decimal);
    VAR
      JobPlanningLine@1003 : Record 1003;
      LibraryJob@1007 : Codeunit 131920;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        LibraryJob.CreateJobPlanningLine("Line Type"::Schedule,Type::Item,JobTask,JobPlanningLine);
        InitJobPlanningLine;
        VALIDATE("Location Code",LocationBlue.Code);
        VALIDATE("Planning Date",PlanningDate);
        VALIDATE("No.",ItemNo);
        VALIDATE("Usage Link",TRUE);
        VALIDATE(Quantity,PlanningQuantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateLocation@34(VAR Location@1000 : Record 14;UseAsInTransit@1001 : Boolean);
    BEGIN
      CLEAR(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      IF UseAsInTransit THEN BEGIN
        Location.VALIDATE("Use As In-Transit",TRUE);
        Location.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@235(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateTransferRoutesSetup@86(LocationRed@1001 : Record 14;LocationBlue@1002 : Record 14;LocationOrange@1000 : Record 14;TransitLocation@1003 : Record 14);
    BEGIN
      CreateTransferRoute(LocationRed.Code,LocationBlue.Code,TransitLocation.Code);
      CreateTransferRoute(LocationBlue.Code,LocationRed.Code,TransitLocation.Code);
      CreateTransferRoute(LocationBlue.Code,LocationOrange.Code,TransitLocation.Code);
      CreateTransferRoute(LocationOrange.Code,LocationRed.Code,TransitLocation.Code);
      CreateTransferRoute(LocationOrange.Code,LocationBlue.Code,TransitLocation.Code);
    END;

    LOCAL PROCEDURE CreateTransferRoute@49(LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10];TransitLocationCode@1003 : Code[10]);
    VAR
      TransferRoute@1000 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode,LocationCode2);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocationCode);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderPlanningSetup@45(VAR SalesHeader@1000 : Record 36;VAR Item@1001 : Record 27;LocationCode@1006 : Code[10];Quantity@1003 : Decimal);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      ClearManufacturingUserTemplate;
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,Item."No.",LocationCode,Quantity,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrder@128(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",'');
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,Quantity,Quantity);
      CreateSalesLine(SalesHeader,ItemNo2,LocationCode,Quantity,Quantity);
    END;

    LOCAL PROCEDURE ChangeDataOnSalesLine@92(SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20];FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader,ItemNo);
      UpdateSalesLine(SalesLine,FieldNo,Value);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CalculateExpectedQuantity@99(DocumentType@1000 : Option;OutStandingQuantity@1001 : Decimal) : Decimal;
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF DocumentType = SalesHeader."Document Type"::"Return Order" THEN
        OutStandingQuantity := -OutStandingQuantity;

      EXIT(OutStandingQuantity);
    END;

    LOCAL PROCEDURE CreateItemTranslation@51(ItemNo@1001 : Code[20];LanguageCode@1002 : Code[10]) : Text[50];
    VAR
      ItemTranslation@1000 : Record 30;
    BEGIN
      WITH ItemTranslation DO BEGIN
        INIT;
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Language Code",LanguageCode);
        VALIDATE(Description,ItemNo + LanguageCode);
        INSERT(TRUE);
        EXIT(Description);
      END;
    END;

    LOCAL PROCEDURE GetRandomLanguageCode@28() : Code[10];
    VAR
      Language@1002 : Record 8;
      RandNum@1001 : Integer;
    BEGIN
      Language.INIT;
      RandNum := LibraryRandom.RandIntInRange(1,Language.COUNT);
      Language.NEXT(RandNum);
      EXIT(Language.Code);
    END;

    LOCAL PROCEDURE FindLastOperationNo@171(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindSalesLine@42(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;No@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@24(VAR RequisitionLine@1000 : Record 246;DemandOrderNo@1002 : Code[20];No@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProdOrderComponent@116(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@3(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreateProductionOrder@1002 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
          CreateProductionOrder,ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@29(DemandOrderNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveLine@37(DemandOrderNo@1000 : Code[20];ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];CreateProductionOrder@1001 : Option);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Line",CreateProductionOrder);
    END;

    LOCAL PROCEDURE MakeSupplyOrders@79(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;CreateProductionOrder@1002 : Option);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,CreateProductionOrder);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE OpenOrderPlanningPage@105(VAR OrderPlanning@1000 : TestPage 5522;DemandOrderNo@1001 : Code[20];No@1002 : Code[20]);
    BEGIN
      OrderPlanning.OPENEDIT;
      OrderPlanning.FILTER.SETFILTER("Demand Order No.",DemandOrderNo);
      OrderPlanning.EXPAND(TRUE);
      OrderPlanning.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE UpdateChildItemInventory@131(VAR ProdOrderComponent@1003 : Record 5407;ItemNo@1000 : Code[20];ProductionOrderNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ItemNo);
      UpdateItemInventory(ProdOrderComponent."Remaining Quantity",ItemNo,LocationCode);
    END;

    LOCAL PROCEDURE UpdateSalesLine@115(VAR SalesLine@1000 : Record 37;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(SalesLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(SalesLine);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(VAR SalesReceivablesSetup2@1001 : Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup2 := SalesReceivablesSetup;
      SalesReceivablesSetup2.INSERT;

      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@102(Quantity@1005 : Decimal;ItemNo@1004 : Code[20];LocationCode@1006 : Code[10]);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
      ItemJournalTemplateType@1002 : 'Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order';
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithSpecialOrder@19(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLinePurchasingCode@5(SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      Purchasing@1000 : Record 5721;
      SalesLine@1003 : Record 37;
    BEGIN
      CreatePurchasingCodeWithSpecialOrder(Purchasing);
      FindSalesLine(SalesLine,SalesHeader,ItemNo);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectPurchaseOrderLine@15(VAR PurchaseLine@1000 : Record 39;No@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateItemWithVendor@8(VAR Item@1001 : Record 27) : Code[10];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      CreateVendorFCY(Vendor);
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.MODIFY(TRUE);
      EXIT(Vendor."Currency Code");
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectManufacturingUserTemplateForRequisition@35(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option);
    VAR
      ReqWkshTemplate@1003 : Record 244;
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      GetManufacturingUserTemplateForRequisition(
        ManufacturingUserTemplate,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Copy to Req. Wksh");
      ManufacturingUserTemplate.VALIDATE("Purchase Req. Wksh. Template",ReqWkshTemplate.Name);
      ManufacturingUserTemplate.VALIDATE("Purchase Wksh. Name",RequisitionWkshName.Name);
      ManufacturingUserTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrderForPurchase@16(DemandOrderNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",
        ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveLineWithCopyToReq@67(VAR ManufacturingUserTemplate@1000 : Record 5525;No@1001 : Code[20]);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      SelectManufacturingUserTemplateForRequisition(
        ManufacturingUserTemplate,ManufacturingUserTemplate."Make Orders"::"The Active Line");
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE CreateVendorFCY@32(VAR Vendor@1001 : Record 23);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplateForRequisition@20(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreatePurchaseOrder@1004 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,CreatePurchaseOrder,
          ManufacturingUserTemplate."Create Production Order"::"Firm Planned",
          ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE VerifyDemandQtyAndLocation@54(DemandOrderNo@1000 : Code[20];SalesDocType@1008 : Option;DemandType@1003 : Option;Status@1007 : Option);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
      RequisitionLine@1002 : Record 246;
      ProdOrderComponent@1004 : Record 5407;
      ExpectedOutstandingQuantity@1006 : Decimal;
    BEGIN
      CASE DemandType OF
        DemandTypeGlobal::Sales:
          BEGIN
            SalesLine.SETRANGE("Document No.",DemandOrderNo);
            SalesLine.SETRANGE("Document Type",SalesDocType);
            SalesLine.FINDSET;
            REPEAT
              SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
              FindRequisitionLine(RequisitionLine,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code");
              RequisitionLine.SETRANGE("Location Code",SalesLine."Location Code");
              RequisitionLine.FINDFIRST;
              ExpectedOutstandingQuantity := CalculateExpectedQuantity(SalesHeader."Document Type",SalesLine."Outstanding Quantity");
              RequisitionLine.TESTFIELD("Demand Quantity",ExpectedOutstandingQuantity);
              RequisitionLine.TESTFIELD(Status,SalesHeader.Status);
              RequisitionLine.TESTFIELD("Location Code",SalesLine."Location Code");
              RequisitionLine.TESTFIELD("Due Date",SalesLine."Shipment Date");
            UNTIL SalesLine.NEXT = 0;
          END;
        DemandTypeGlobal::Production:
          BEGIN
            ProdOrderComponent.SETRANGE("Prod. Order No.",DemandOrderNo);
            ProdOrderComponent.SETRANGE(Status,Status);
            ProdOrderComponent.FINDSET;
            REPEAT
              FindRequisitionLine(
                RequisitionLine,ProdOrderComponent."Prod. Order No.",ProdOrderComponent."Item No.",ProdOrderComponent."Location Code");
              RequisitionLine.TESTFIELD("Demand Quantity",ProdOrderComponent."Remaining Quantity");
              RequisitionLine.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
              RequisitionLine.TESTFIELD("Due Date",ProdOrderComponent."Due Date");
            UNTIL ProdOrderComponent.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseQtyAgainstProd@23(ProductionOrder@1004 : Record 5405);
    VAR
      PurchaseLine@1000 : Record 39;
      ProdOrderComponent@1003 : Record 5407;
      Item@1001 : Record 27;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.FINDSET;
      CLEAR(ProductionOrder);
      REPEAT
        Item.GET(ProdOrderComponent."Item No.");
        CASE Item."Replenishment System" OF
          Item."Replenishment System"::Purchase:
            BEGIN
              PurchaseLine.SETRANGE("No.",ProdOrderComponent."Item No.");
              PurchaseLine.FINDFIRST;
              PurchaseLine.TESTFIELD("Buy-from Vendor No.",Item."Vendor No.");
              PurchaseLine.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
              PurchaseLine.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
            END;
          Item."Replenishment System"::"Prod. Order":
            BEGIN
              ProductionOrder.SETRANGE("Source No.",Item."No.");
              ProductionOrder.FINDFIRST;
              ProductionOrder.TESTFIELD(Quantity,ProdOrderComponent."Remaining Quantity");
              ProductionOrder.TESTFIELD("Location Code",ProdOrderComponent."Location Code");
            END;
        END;
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDemandQtyWithPurchQty@12(SalesOrderNo@1001 : Code[20];ItemNo@1004 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
      PurchaseLine@1003 : Record 39;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesOrderNo);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.SETRANGE("Location Code",LocationCode);
      SalesLine.FINDFIRST;

      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.SETRANGE("Location Code",LocationCode);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Quantity,SalesLine."Outstanding Quantity");
    END;

    LOCAL PROCEDURE VerifyReturnQtyWithPurchQty@94(SalesOrderNo@1001 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
      PurchaseLine@1003 : Record 39;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesOrderNo);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDFIRST;
      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Quantity,-SalesLine."Outstanding Quantity");
    END;

    LOCAL PROCEDURE VerifyQtyWithProdOrder@97(ItemNo@1004 : Code[20];Quantity@1001 : Decimal;LocationCode@1000 : Code[10]);
    VAR
      ProductionOrder@1003 : Record 5405;
    BEGIN
      ProductionOrder.SETRANGE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.SETRANGE("Source No.",ItemNo);
      ProductionOrder.FINDFIRST;
      ProductionOrder.TESTFIELD(Quantity,Quantity);
      ProductionOrder.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyGetAlternativeSupplyPage@107(GetAlternativeSupply@1000 : TestPage 5524);
    BEGIN
      Assert.AreEqual(
        LocationBlue.Code,GetAlternativeSupply."Transfer-from Code".VALUE,STRSUBSTNO(LocationErrorText,LocationBlue.Code));
      Assert.AreEqual(ExpectedQuantity,GetAlternativeSupply."Demand Qty. Available".ASDECIMAL,QuantityError);
    END;

    LOCAL PROCEDURE VerifyTransferLine@139(ItemNo@1000 : Code[20];ExpectedQuantity@1001 : Decimal);
    VAR
      TransferLine@1002 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferLine.TESTFIELD(Quantity,ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@336(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@109(WorksheetTemplateName@1000 : Code[20];No@1001 : Code[20];LocationCode@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",WorksheetTemplateName);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyPurchaseVendorAndCurrency@38(Item@1003 : Record 27;CurrencyCode@1004 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      SelectPurchaseOrderLine(PurchaseLine,Item."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.TESTFIELD("Buy-from Vendor No.",Item."Vendor No.");
      PurchaseLine.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyServiceReservationEntry@46(ServiceHeaderType@1004 : Option;ServiceHeaderNo@1000 : Code[20];ItemNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",ServiceHeaderType);
        SETRANGE("Source ID",ServiceHeaderNo);
        FINDFIRST;
        TESTFIELD(Quantity,Qty);
      END;
    END;

    LOCAL PROCEDURE VerifyNeededQuantities@11(JobNo@1000 : Code[20];ItemNo@1001 : Code[20];Quantities@1002 : ARRAY [2] OF Decimal);
    VAR
      OrderPlanning@1003 : TestPage 5522;
    BEGIN
      OpenOrderPlanningPage(OrderPlanning,JobNo,ItemNo);
      WITH OrderPlanning DO BEGIN
        "Needed Quantity".ASSERTEQUALS(Quantities[1]);
        NEXT;
        "Needed Quantity".ASSERTEQUALS(Quantities[2]);
      END;
    END;

    LOCAL PROCEDURE RestoreSalesReceivableSetup@47(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@7(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE AlternativeSupplyPageHandler@108(VAR GetAlternativeSupply@1000 : TestPage 5524);
    BEGIN
      GetAlternativeSupply.FIRST;
      VerifyGetAlternativeSupplyPage(GetAlternativeSupply);  // Check the value on Get alternative supply page.
    END;

    [ModalPageHandler]
    PROCEDURE GetAlternativeSupplyPageHandler@9(VAR GetAlternativeSupply@1000 : TestPage 5524);
    BEGIN
      GetAlternativeSupply.FIRST;
      GetAlternativeSupply.OK.INVOKE;  // Click Ok after selecting first record.
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test Order Planning:
       1. Verify that error occurred, during make order when change sales line No. after calculate plan.
       2. Verify that error occurred, during make order when change sales line Shipment Date after calculate plan.
       3. Verify that error occurred, during make order when change sales line Quantity after calculate plan.
       4. Verify that error occurred, during make order when change sales line Location after calculate plan.
       5. Verify that error occurred, during make order when change sales line Unit Of Measure after calculate plan.
       6. Verify Quantity and Status On Requisition Line has same as quantity as demand by Multiple Released Sales Order.
       7. Verify Quantity and Status On Requisition Line has same as quantity as demand by Multiple Open Sales Order.
       8. Verify Quantity On Requisition Line has same as quantity as demand by Negative sales Return Order.
       9. Verify Quantity on Purchase Order and Production Order same as define in item of Negative sales Return order after
           Make Supply Order by Active Order.
      10. Verify Quantity and Status On Requisition Line has same as quantity as demand by One Unplanned and One Released Sales Order.
      11. Verify Quantity and Status On Requisition Line has same as quantity as demand by Sales Order with Multiple Sales Line.
      12. Verify That Quantity on Purchase Order is same as remaining demand quantity on Sales Order after change Replenishment System
           on Requisition Line.
      13. Verify That Quantity on Production Order is same as remaining demand quantity on Sales Order after change Replenishment System
           on Requisition Line.
      14. Verify the value of Available to Transfer and Quantity Available on Order Planning Page.
      15. Verify That the value on Get alternative supply page is same as expected.
      16. Verify that Replenishment System and Quantity is same as expected on Order Planning.
      17. Verify Quantity on Requisition Line has same as quantity on Production BOM Component Line For Released Production Order.
      18. Verify Quantity on Requisition Line has same as quantity on Production BOM Component Line For Planned Production Order.
      19. Verify Quantity on Purchase Order and Vendor No. is same as define in Production BOM and child item For Firm Planned
           Production Order.
      20. Verify Quantity on Purchase Order and Vendor No. is same as define in Production BOM and child item For Planned
           Production Order.
      21. Verify item and quantity is same as define on Replenishment System in Purchase Order, Production Order and
           Transfer Order for Planned Production Order after change Replenishment System to Transfer Order.
      22. Verify item and quantity is same as define on Replenishment System in Purchase Order, Production Order and
           Transfer Order for Firm Planned Production Order after change Replenishment System to Transfer Order.
      23. Verify That Reserve is False on Order planning for the child item with Reserve Option Never.
      24. Verify That Reserve is True on Order planning for the child item with Reserve Option Always.
      25. Verify That Reservation Entry Not Created after Make Supply Order for Child Item with Reserve Option Never.
      26. Verify That Reservation Entry Not Created after Make Supply Order for Child Item with Reserve Option Never.
      27. Verify That Dimension on Order Planning for Planned Production Order is same as define on Item.
      28. Verify That Dimension on Order Planning for Firm Planned Production Order is same as define on Item.
      29. Verify That Dimension on Order Planning for Released Planned Production Order is same as define on Item.
      30. Verify that Special order created from Sales Order is not included in the Order planning.
      31. Verify Purchase Order created from Sales Order is updated with Vendor having Currency.
      32. Verify Requisition Worksheet is created for Make Order from Sales for purchase for Copy to requisition Worksheet.
      33. Verify Requisition Worksheet is not overwritten  for Make Order twice from  multiple Sales for purchase for Copy to requisition Worksheet.
      34. Verify the value of Quantity Available on Order Planning Page after Order Planning with Job Planning Lines.

        Covers Test Cases for WI - 242304
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        SalesOrderPlanningChangeItem                     129165,120962
        SalesOrdPlngChangeShipmentDate                   129165,120962
        SalesOrderPlanningChangeQty                      129165,120962
        SalesOrderPlanningChangeLoc                      129165,120962
        SalesOrderPlanningChangeUOM                      129165,120962

        Covers Test Cases for WI - 252860
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        MultipleReleasedSalesOrder                       120963,143367,129155
        MultipleOpenSalesOrder                           129168,120959,143367,141447
        NegativeSalesReturn                              129161,121550,141447,129151
        NegativeSalesReturnMakeOrder                     129161,121550,141447,129151
        ReleasedAndOpenSalesOrder                        129168,120959,141447,129151
        SalesLinesWithMultipleLocation                   129168,120959,143367,129151
        ReplenishmentToProduction                        129152,141447
        ReplenishmentToPurchase                          129152,141447

        Covers Test Cases for WI - 252863
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        QuantityAvailableForTransfer                     129153
        NeededQtyOnAlternativeSupply                     129153
        ReplenishmentToTransfer                          129153

        Covers Test Cases for WI - 252864
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        ReleasedProdOrderPlanning                        120964
        PlannedProdOrderPlanning                         120964
        FirmPlannedProdOrderMakeOrder                    120964
        PlannedProdOrderMakeOrder                        120964
        PlannedProdChangeReplenishment                   184520,121688
        FirmPlannedChangeReplenishment                   184520,121688
        ReserveProdPlanningAlways                        184520,121688
        ReserveProdPlanningNever                         184520,121688
        ResvProdPlanAlwaysMakeOrder                      184520,121688
        ResvProdPlanNeverMakeOrder                       184520,121688
        PlannedProdDimOnOrderPlanning                    120965
        FirmPlanProdDimOnOrderPlanning                   120965
        ReleasedProdDimOnOrderPlanning                   120965

        Covers Test Cases:
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        OrderPlanningForSpecialSalesOrder                143068

        Covers Test Cases:
        -------------------------------------------------------------------------
        Test Function Name                                              TFS ID
        -------------------------------------------------------------------------
        OrderPlanningMakeOrderForPurchaseWithVendorHavingCurrency       270006
        OrderPlanningForRequisitionFromSalesWithMakeOrder               251096
        RequisitionLineForMultipleSalesMakeOrderTwice                   251096

        Covers Test Cases:
        -------------------------------------------------------------------------
        Test Function Name                                              TFS ID
        -------------------------------------------------------------------------
        QuantityAvailableWithJobPlanning                                353485
    }
    END.
  }
}

