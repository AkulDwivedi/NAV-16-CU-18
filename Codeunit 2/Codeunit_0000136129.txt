OBJECT Codeunit 136129 Service Order Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ServiceLine@1008 : Record 5902;
      PurchaseLine@1009 : Record 39;
      LibraryService@1000 : Codeunit 131902;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryPurchase@1003 : Codeunit 130512;
      LibrarySales@1010 : Codeunit 130509;
      LibraryInventory@1019 : Codeunit 132201;
      LibraryVariableStorage@1018 : Codeunit 131004;
      LibraryRandom@1020 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      LibraryERMCountryData@1907 : Codeunit 131305;
      IsInitialized@1004 : Boolean;
      WrongDocumentError@1005 : TextConst 'ENU=''Document No is incorrect in Order Tracking: %1 does not contain %2\''.';
      RollBack@1006 : TextConst 'ENU=ROLLBACK.';
      LocationCodeB@1002 : Code[10];
      TrackingAction@1011 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,EnterValues,VerifyValues';
      ExpectedError@1012 : TextConst 'ENU="The built-in action = OK is not found on the page."';
      SelectedQuantityError@1013 : TextConst 'ENU=''You cannot select more than %1 units.''';
      Quantity@1014 : Decimal;
      LotNo@1015 : Code[20];
      SerialNo@1017 : Code[20];
      NegativeSelectedQuantityError@1016 : TextConst 'ENU=''The value must be greater than or equal to 0. Value: %1.''';
      MissingTrackingLinesErr@1021 : TextConst 'ENU=There are missing Item Tracking Lines in Posted Service Invoice.';

    LOCAL PROCEDURE Initialize@3();
    BEGIN
      // Clear Globals between Test Cases
      CLEAR(ServiceLine);
      CLEAR(PurchaseLine);
      CLEAR(TrackingAction);
      Quantity := 0;
      CLEAR(LotNo);
      CLEAR(SerialNo);
      LibraryVariableStorage.Clear;

      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ServiceOrderTrackingPage)]
    PROCEDURE ServiceLineTracking@1();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      // Test Order Tracking Entries from Service Line with Item having Order Tracking Policy Tracking Only.
      // Variation: Tracking Only, Location Equal, Service Order
      ServiceOrderWithTracking(LocationA,Item."Order Tracking Policy"::"Tracking Only");

      // 2. Exercise: Run Order Tracking page from Service Line.
      ServiceLine.ShowTracking; // Page Handler ServiceOrderTrackingPage

      // 3. Verification will happen through the Test Page for Order Tracking,
      // The global ServiceLine and PurchaseLine is used for verification.

      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PurchaseOrderTrackingPage)]
    PROCEDURE PurchaseLineTracking@91();
    VAR
      Item@1015 : Record 27;
      PurchaseOrderSubform@1000 : Page 54;
    BEGIN
      Initialize;
      // Test Order Tracking Entries from Purchase Line with Item having Order Tracking Policy Tracking Only.
      // Variation: Tracking Only, Location Equal, Purchase Order
      ServiceOrderWithTracking(LocationA,Item."Order Tracking Policy"::"Tracking Only");

      // 2. Exercise: Run Order Tracking page from Purchase Line.
      PurchaseOrderSubform.SETRECORD(PurchaseLine);
      PurchaseOrderSubform.ShowTracking; // Page Handler PurchaseOrderTrackingPage

      // 3. Verification will happen through the Test Page for Order Tracking,
      // The global ServiceLine and PurchaseLine is used for verification.

      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,NoTrackingPage)]
    PROCEDURE ServiceLineTrackingWithNone@2();
    VAR
      Item@1003 : Record 27;
    BEGIN
      Initialize;
      // Test Order Tracking Entries from Service Line with Item having Order Tracking Policy None.
      // Variation: Tracking None, Location Equal, Service Order
      ServiceOrderWithTracking(LocationA,Item."Order Tracking Policy"::None);

      // 2. Exercise: Run Order Tracking page from Service Line.
      ServiceLine.ShowTracking; // Page Handler NoTrackingPage

      // 3. Verification will happen through the Test Page for Order Tracking,
      // The global ServiceLine and PurchaseLine is used for verification.

      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,NoTrackingPage)]
    PROCEDURE ServiceLineTrackingLocation@4();
    VAR
      Item@1003 : Record 27;
    BEGIN
      Initialize;
      // Verify that two orders with different locations cannot be used for Order Tracking
      // Variation: Tracking Only, Location Different, Service Order
      ServiceOrderWithTracking(LocationB,Item."Order Tracking Policy"::"Tracking Only");

      // 2. Exercise: Run Order Tracking page from Service Line.
      ServiceLine.ShowTracking; // Page Handler NoTrackingPage

      // 3. Verification will happen through the Test Page for Order Tracking,
      // The global ServiceLine and PurchaseLine is used for verification.

      Teardown;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmMessageHandler,SerialNoItemTrackingListPageHandler,ReserveFromCurrentLineHandler)]
    PROCEDURE SerialNoOnServiceLineToReserve@89();
    VAR
      ItemLedgerEntry@1011 : Record 32;
    BEGIN
      // Check Serial No. suggested at the time of Reservation.

      // 1. Setup: Create Purchase Order and Service Order, assign Item Tracking and post Purchase Order as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variable for page handler.
      CreateAndPostPurchaseDocument(PurchaseLine,FALSE,TRUE);  // LotSpecific as False and SNSpecific as True.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.");
      SerialNo := ItemLedgerEntry."Serial No.";  // Assign global variable for page handler.

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 2. Exercise.
      ServiceLine.ShowReservation;  // Open Reservation to Invoke page handler.

      // 3. Verify: Verification of Serial No. is done in SerialNoItemTrackingListPageHandler page handler.
      ServiceLine.CALCFIELDS("Reserved Quantity");
      ServiceLine.TESTFIELD("Reserved Quantity",1);  // Value 1 is taken because only one Serial No. is selected here.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ErrorOnServiceLineWithItemTracking@48();
    BEGIN
      // Check Error on the created Service Line with Item Tracking.

      // 1. Setup: Create Purchase Order, Service Order and assign Item Tracking.
      Initialize;
      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,FALSE,TRUE);  // LotSpecific as False and SNSpecific as True.

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise.
      ASSERTERROR ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Error.
      Assert.ExpectedError(ExpectedError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmMessageHandler,ItemTrackingSummaryPageHandler,LotNoItemTrackingListPageHandler,ReserveFromCurrentLineHandler)]
    PROCEDURE LotNoOnServiceLineToReserve@77();
    VAR
      ItemLedgerEntry@1011 : Record 32;
    BEGIN
      // Check Lot No suggested at the time of Reservation.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and Post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreateAndPostPurchaseDocument(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."No.");
      LotNo := ItemLedgerEntry."Lot No.";  // Assign global variable for page handler.

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 2. Exercise.
      ServiceLine.ShowReservation;  // Open Reservation to Invoke page handler.

      // 3. Verify: Verification of Lot No. is done in LotNoItemTrackingListPageHandler page handler.
      ServiceLine.CALCFIELDS("Reserved Quantity");
      ServiceLine.TESTFIELD("Reserved Quantity",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,VerifyItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingSelectEntriesOnServiceLine@185();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check values on Item Tracking Summary page.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variable for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise: Open Service Lines page.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verification done in VerifyItemTrackingSummaryPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,SetSelectedQuantityOnItemTrackingSummaryPageHandler)]
    PROCEDURE ErrorForSelectEntriesOnServiceLine@92();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check error for Selected Quantity on created Service Line with Item Tracking.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variable for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise.
      ASSERTERROR ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify error.
      Assert.ExpectedError(STRSUBSTNO(SelectedQuantityError,Quantity));
    END;

    [Test]
    [HandlerFunctions(VerifyItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingWithAssignLotNoOnServiceLine@8();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check values on the Item Tracking Lines page for Assign Lot No.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variable for page handler.

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verification done in 'VerifyItemTrackingLinesPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(VerifyItemTrackingLinesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingWithAssignSerialNoOnServiceLine@210();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check values on the Item Tracking Lines page for Assign Serial No.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variables for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,FALSE,TRUE);  // LotSpecific as False and SNSpecific as True.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variables for page handler.

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verification done in 'VerifyItemTrackingLinesPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(VerifyItemTrackingLinesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostServiceOrderWithItemTrackingAssignSerialNo@230();
    VAR
      ServiceHeader@1003 : Record 5900;
      PurchaseHeader@1000 : Record 38;
      ServiceShipmentLine@1005 : Record 5991;
    BEGIN
      // Check posting of Service Order as Ship and verify the shipment.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,FALSE,TRUE);  // LotSpecific as FALSE and SNSpecific as TRUE.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variable for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify.
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceShipmentLine.SETRANGE("No.",ServiceLine."No.");
      ServiceShipmentLine.FINDFIRST;
      ServiceShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    [Test]
    PROCEDURE LastNoUsedInServiceOrder@36();
    VAR
      NoSeriesLine@1001 : Record 309;
      ServiceHeader@1007 : Record 5900;
      LastNoUsed@1003 : Code[20];
    BEGIN
      // Check Last No. Used In No. Series for Service Invoice when Item created with Item Tracking Code.

      // Setup: Create and Update Service Line with Item with Item Tracking Code.
      Initialize;
      FindNoSeriesLine(NoSeriesLine);
      LastNoUsed := NoSeriesLine."Last No. Used";
      CreateAndUpdateServiceLine(
        ServiceLine,CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),LibraryRandom.RandInt(10));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // Exercise: Post Service Order.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Verify: Verify Last No. Used in No. Series of Service Invoice.
      FindNoSeriesLine(NoSeriesLine);
      NoSeriesLine.TESTFIELD("Last No. Used",LastNoUsed);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingForAssignAndSelectPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LastNoUsedInPostedServiceInvoice@35();
    VAR
      ItemJournalLine@1003 : Record 83;
      NoSeriesLine@1004 : Record 309;
      ServiceHeader@1007 : Record 5900;
      ServiceInvoiceHeader@1001 : Record 5992;
      TrackingActionForSerialNo@1000 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,EnterValues,VerifyValues';
    BEGIN
      // Check Last No. Used In No. Series for Posted Service Invoice when Item created with Item Tracking Code.

      // Setup: Create and Post Item Journal by assigning Serial No. and Select Serial No. to Service Line.
      Initialize;
      CreateAndPostItemJournalLine(ItemJournalLine,CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)));
      CreateAndUpdateServiceLine(ServiceLine,ItemJournalLine."Item No.",ItemJournalLine.Quantity);
      LibraryVariableStorage.Enqueue(TrackingActionForSerialNo::SelectEntries);
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking Assign And Select Page Handler.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Verify: Verify Last No. Used in No. Series of Posted Service Invoice.
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      FindNoSeriesLine(NoSeriesLine);
      NoSeriesLine.TESTFIELD("Last No. Used",ServiceInvoiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,VerifyInformationItemTrackingSummaryPageHandlerForLotNo)]
    PROCEDURE InformationFeildsOnItemTrackingSummaryPageWithAssignLotNo@14();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Information Field values on Item Tracking Summary page with Assign Lot No. on Service Order.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variables for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise: Open Service Lines page.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verification done in 'VerifyInformationItemTrackingSummaryPageHandlerForLotNo' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,VerifyInformationItemTrackingSummaryPageHandlerForSerialNo)]
    PROCEDURE InformationFeildsOnItemTrackingSummaryPageWithAssignSerialNo@46();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Information Field values on Item Tracking Summary page with Assign Serial No. on Service Order.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,FALSE,TRUE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variables for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise: Open Service Lines page.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verification done in 'VerifyInformationItemTrackingSummaryPageHandlerForSerialNo' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,NegativeSelectedQuantityOnItemTrackingSummaryPageHandler)]
    PROCEDURE NegativeValueInSelectedQuantityOnItemTrackingSummaryPage@131();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Error while negative values is taken in the Selected Quantity field on Item Tracking Summary page with Assign Lot No. on Service Order.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and post it as Receive.
      Initialize;
      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      CreatePurchaseOrderWithItemTracking(PurchaseLine,TRUE,FALSE);  // LotSpecific as True and SNSpecific as False.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      Quantity := PurchaseLine.Quantity;  // Assign global variables for page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateAndUpdateServiceLine(ServiceLine,PurchaseLine."No.",PurchaseLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.

      // 2. Exercise: Open Service Lines page.
      ASSERTERROR ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify error.
      Assert.ExpectedError(STRSUBSTNO(NegativeSelectedQuantityError,-Quantity));
    END;

    [Test]
    [HandlerFunctions(VerifyItemTrackingLinesPageHandler,QuantityToCreatePageHandler,PostedItemTrackingLinesPageHandler)]
    PROCEDURE ItemTrackingEntriesOnPostedServiceInvoice@18();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ServiceHeader@1004 : Record 5900;
      ServiceInvoiceLine@1006 : Record 5993;
      ItemNo@1002 : Code[20];
      Quantity@1003 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Value Entry Relation]
      // [SCENARIO 380073] Item Tracking Entries reviewed from Posted Service Invoice, should show Item Tracking that was set on Service Item Line before posting.
      Initialize;

      // [GIVEN] Serial Nos. tracked Item.
      LibraryInventory.CreateItemTrackingCode(ItemTrackingCode);
      ItemNo := CreateItemWithItemTrackingCode(ItemTrackingCode.Code);

      // [GIVEN] Service Item Line with Item and Quantity = "N".
      Quantity := LibraryRandom.RandInt(10);
      CreateServiceHeaderWithSerialNoTrackedLine(ServiceHeader,ItemNo,Quantity);

      // [WHEN] Post Service Order with "Ship and Invoice" option.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] There are "N" Item Tracking Entries for Service Posted Invoice.
      // Verification is done in PostedItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);
      WITH ServiceInvoiceLine DO BEGIN
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        ShowItemTrackingLines;
      END;
    END;

    LOCAL PROCEDURE ServiceOrderWithTracking@30(ServiceLocation@1000 : Code[10];TrackingPolicy@1001 : Option);
    VAR
      Item@1002 : Record 27;
    BEGIN
      CreateItemWithTrackingPolicy(Item,TrackingPolicy);
      CreatePurchaseLine(PurchaseLine,FindVendor,Item."No.");
      CreateServiceOrder(ServiceLine,PurchaseLine,ServiceLocation);
      COMMIT;
    END;

    LOCAL PROCEDURE AssignSerialNumberInItemJournal@17(ItemJournalLineBatchName@1001 : Code[10]);
    VAR
      ItemJournal@1000 : TestPage 40;
      AssignSerialNoInItemJournal@1002 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,EnterValues,VerifyValues';
    BEGIN
      COMMIT;  // Commit is used to avoid Test failure.
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLineBatchName);
      LibraryVariableStorage.Enqueue(AssignSerialNoInItemJournal::AssignSerialNo);
      ItemJournal.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@24(VAR PurchaseLine@1002 : Record 39;VendorNo@1000 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      PurchaseHeader@1001 : Record 38;
      LibraryPurchase@1003 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,RANDOM(10) + LibraryUtility.GenerateRandomFraction);
    END;

    LOCAL PROCEDURE CreateItemWithTrackingPolicy@87(VAR Item@1003 : Record 27;OrderTrackingPolicy@1002 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@29(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1004 : Record 82;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        LibraryRandom.RandIntInRange(2,10));
      ItemJournalLine.VALIDATE(
        "Document No.",
        COPYSTR(LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Line",ItemJournalLine.FIELDNO("Document No."))));
      ItemJournalLine.MODIFY(TRUE);
      AssignSerialNumberInItemJournal(ItemJournalLine."Journal Batch Name");
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateServiceOrder@132(VAR ServiceLine@1001 : Record 5902;PurchaseLine@1003 : Record 39;LocationCode@1005 : Code[10]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,PurchaseLine."No.");
      UpdateServiceLine(ServiceLine,LocationCode,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@64(ItemTrackingCode@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithItemTracking@21(VAR PurchaseLine@1001 : Record 39;LotSpecific@1003 : Boolean;SNSpecific@1002 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,FindVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithItemTrackingCode(FindItemTrackingCode(LotSpecific,SNSpecific)),
        RANDOM(10));
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@74(VAR ServiceLine@1006 : Record 5902;No@1009 : Code[20];PurchaseLineQuantity@1012 : Decimal);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,PurchaseLineQuantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithSerialNoTrackedLine@20(VAR ServiceHeader@1000 : Record 5900;ItemNo@1003 : Code[20];Quantity@1001 : Integer);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      CreateAndUpdateServiceLine(ServiceLine,ItemNo,Quantity);
      TrackingAction := TrackingAction::AssignSerialNo;
      ServiceLine.OpenItemTrackingLines;
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@7(VAR PurchaseLine@1000 : Record 39;LotSpecific@1004 : Boolean;SNSpecific@1003 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseOrderWithItemTracking(PurchaseLine,LotSpecific,SNSpecific);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE FindItemTrackingCode@27(LotSpecific@1002 : Boolean;SNSpecific@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SNSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SNSpecific);
      ItemTrackingCode.SETRANGE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@148(VAR ItemLedgerEntry@1001 : Record 32;ItemNo@1000 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindNoSeriesLine@22(VAR NoSeriesLine@1001 : Record 309);
    VAR
      ServiceMgtSetup@1000 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      NoSeriesLine.SETRANGE("Series Code",ServiceMgtSetup."Posted Service Invoice Nos.");
      NoSeriesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateServiceLine@26(VAR ServiceLine@1000 : Record 5902;LocationCode@1001 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE(Quantity,Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.VALIDATE("Needed by Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));
      ServiceLine.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceOrderTrackingPage@12(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(0); // Untracked Quantity
      OrderTracking."Item No.".ASSERTEQUALS(ServiceLine."No.");
      OrderTracking."Total Quantity".ASSERTEQUALS(ServiceLine.Quantity); // Quantity on the Line
      OrderTracking.Quantity.ASSERTEQUALS(-ServiceLine.Quantity);
      VerifyDocumentNo(OrderTracking.Name.VALUE,PurchaseLine."Document No."); // Purchase Order xxxx
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderTrackingPage@23(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(PurchaseLine.Quantity - ServiceLine.Quantity); // Untracked Quantity
      OrderTracking."Item No.".ASSERTEQUALS(ServiceLine."No.");
      OrderTracking."Total Quantity".ASSERTEQUALS(PurchaseLine.Quantity); // Quantity on the Line
      OrderTracking.Quantity.ASSERTEQUALS(ServiceLine.Quantity);
      VerifyDocumentNo(OrderTracking.Name.VALUE,ServiceLine."Document No."); // Service xxxx
    END;

    [ModalPageHandler]
    PROCEDURE NoTrackingPage@9(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(ServiceLine.Quantity); // Untracked Quantity
      OrderTracking."Total Quantity".ASSERTEQUALS(ServiceLine.Quantity); // Quantity on the Line
    END;

    LOCAL PROCEDURE VerifyDocumentNo@6(Name@1000 : Text[30];DocumentNo@1001 : Text[30]);
    BEGIN
      Assert.IsTrue(STRPOS(Name,DocumentNo) > 0,STRSUBSTNO(WrongDocumentError,Name,DocumentNo));
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE Teardown@13();
    BEGIN
      ASSERTERROR ERROR(RollBack);
    END;

    LOCAL PROCEDURE FindVendor@19() : Code[20];
    BEGIN
      EXIT(LibraryPurchase.CreateVendorNo);
    END;

    LOCAL PROCEDURE LocationA@25() : Code[10];
    BEGIN
      EXIT('');
    END;

    LOCAL PROCEDURE LocationB@42() : Code[10];
    VAR
      Location@1000 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      IF LocationCodeB = '' THEN BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LocationCodeB := Location.Code;
      END;
      EXIT(LocationCodeB);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@10(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@37(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      COMMIT;
      CASE TrackingAction OF
        TrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@61(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@62(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLineHandler@78(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE LotNoItemTrackingListPageHandler@80(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList."Lot No.".ASSERTEQUALS(LotNo);
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SerialNoItemTrackingListPageHandler@16(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.FILTER.SETFILTER("Serial No.",SerialNo);
      ItemTrackingList.FIRST;
      ItemTrackingList."Serial No.".ASSERTEQUALS(SerialNo);
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyItemTrackingSummaryPageHandler@193(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary."Total Quantity".ASSERTEQUALS(Quantity);
      ItemTrackingSummary."Total Requested Quantity".ASSERTEQUALS(0);
      ItemTrackingSummary."Total Available Quantity".ASSERTEQUALS(Quantity);
      ItemTrackingSummary."Selected Quantity".ASSERTEQUALS(Quantity);
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SetSelectedQuantityOnItemTrackingSummaryPageHandler@101(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary."Selected Quantity".SETVALUE(Quantity + 1);  // Added 1 to take the value more than Quantity.
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyItemTrackingLinesPageHandler@11(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE TrackingAction OF
        TrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingAction::VerifyValues:
          BEGIN
            ItemTrackingLines.Quantity_ItemTracking.ASSERTEQUALS(Quantity);
            ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(Quantity);
            ItemTrackingLines."Qty. to Invoice (Base)".ASSERTEQUALS(Quantity);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyInformationItemTrackingSummaryPageHandlerForSerialNo@72(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary."Selected Quantity".SETVALUE(0);  // Added 0 because every line contains 1 Quantity with serial No. and here lesser value needed than Quantity.
      ItemTrackingSummary.MaxQuantity1.ASSERTEQUALS(Quantity);
      ItemTrackingSummary.Selected1.ASSERTEQUALS(Quantity - 1);  // (Quantity - 1) taken here as Selected Quantityfield value.
      ItemTrackingSummary.Undefined1.ASSERTEQUALS(Quantity - (Quantity - 1));  // (Quantity - 1) taken here as Selected1 field value.
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyInformationItemTrackingSummaryPageHandlerForLotNo@28(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary."Selected Quantity".SETVALUE(Quantity - 1);  // Added 1 to take the value Less than Quantity.
      ItemTrackingSummary.MaxQuantity1.ASSERTEQUALS(Quantity);
      ItemTrackingSummary.Selected1.ASSERTEQUALS(Quantity - 1);  // (Quantity - 1) taken here as Selected Quantityfield value.
      ItemTrackingSummary.Undefined1.ASSERTEQUALS(Quantity - (Quantity - 1));  // (Quantity - 1) taken here as Selected1 field value.
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE NegativeSelectedQuantityOnItemTrackingSummaryPageHandler@134(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary."Selected Quantity".SETVALUE(-Quantity);  // Taken negative value because value is important.
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingForAssignAndSelectPageHandler@15(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      AssignValueForTracking@1002 : Variant;
      AssignedValue@1001 : 'None,AssignSerialNo,AssignLotNo,SelectEntries,EnterValues,VerifyValues';
    BEGIN
      LibraryVariableStorage.Dequeue(AssignValueForTracking);
      AssignedValue := AssignValueForTracking;  // Assign TrackingActionOfEntries2(Variant) to TrackingActionOfEntries(Option).
      CASE AssignedValue OF
        AssignedValue::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        AssignedValue::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesPageHandler@32(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      NumberOfLines@1001 : Integer;
    BEGIN
      NumberOfLines := LibraryVariableStorage.DequeueInteger;

      PostedItemTrackingLines.FIRST;
      REPEAT
        NumberOfLines -= 1;
      UNTIL NOT PostedItemTrackingLines.NEXT;

      Assert.AreEqual(0,NumberOfLines,MissingTrackingLinesErr);
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [Service]
      Test Order Tracking for Service Order:
       1. Test Order Tracking Entries from Service Line with Item having Order Tracking Policy Tracking Only.
       2. Test Order Tracking Entries from Purchase Line with Item having Order Tracking Policy Tracking Only.
       3. Test Order Tracking Entries from Service Line with Item having Order Tracking Policy None.
       4. Test Order Tracking Entries from Service Line with Item having Order Tracking Policy Tracking Only with different Locations.
       5. Check Serial No suggested at the time of Reservation.
       6. Check Error on the created Service Line with Item Tracking.
       7. Check Lot No suggested at the time of Reservation.
       8. Check values on Item Tracking Summary page.
       9. Check error for Selected Quantity on created Service Line with Item Tracking.
       10. Check values on the Item Tracking Lines page for Assign Lot No.
       11. Check values on the Item Tracking Lines page for Assign Serial No.
       12. Check posting of Service Order as Ship and verify the shipment.
       13. Check Information Field values on Item Tracking Summary page with Assign Lot No. on Service Order.
       14. Check Information Field values on Item Tracking Summary page with Assign Serial No. on Service Order.
       15. Check Error while negative values is taken in the Selected Quantity field on Item Tracking Summary page with Assign Lot No. on Service Order.
       16. Check Last No. Used In No. Series for Service Invoice when Item created with Tracking Code.
       17. Check Last No. Used In No. Series for Posted Service Invoice when Item created with Item Tracking Code.

      Standard flow for a test Case:
      1. Create Purchase Order for Item with Order Tracking Policy X.
      2. Create Service Order with Service Line for Item.
      3. Run Order Tracking Page either from Server Order or Purchase Order.
      4. Verify the Order Tracking between the Purchase order and the Service Order on the Order tracking page.

      Variations:
      Order Tracking Policy:        Tracking Only, None.
      Location:                     Equal, Different.
      Order Tracking Started from:  Service Order, Purchase Order.

      TFS_TS_ID = 235358
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 TFS ID
      ---------------------------------------------------------------------------------------------------------
      ServiceLineTracking, PurchaseLineTracking                                                          176513
      ServiceLineTrackingWithNone                                                                        176523
      ServiceLineTrackingLocation                                                                        176530

      TFS_TS_ID = 274088
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 TFS ID
      ---------------------------------------------------------------------------------------------------------
      SerialNoOnServiceLineToReserve, ErrorOnServiceLineWithItemTracking, LotNoOnServiceLineToReserve    128123
      ItemTrackingSelectEntriesOnServiceLine, ErrorForSelectEntriesOnServiceLine,                        128124
      ItemTrackingWithAssignLotNoOnServiceLine, ItemTrackingWithAssignSerialNoOnServiceLine
      PostServiceOrderWithItemTrackingAssignSerialNo

      TFS_TS_ID = 278823
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 TFS ID
      ---------------------------------------------------------------------------------------------------------
      InformationFeildsOnItemTrackingSummaryPageWithAssignLotNo                                          128126
      InformationFeildsOnItemTrackingSummaryPageWithAssignSerialNo                                       128127
      NegativeValueInSelectedQuantityOnItemTrackingSummaryPage

      TFS_TS_ID = 295322
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 TFS ID
      ---------------------------------------------------------------------------------------------------------
      LastNoUsedInServiceOrder,LastNoUsedInPostedServiceInvoice                                          296808
    }
    END.
  }
}

