OBJECT Codeunit 137056 SCM Warehouse-V
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationWhite@1020 : Record 14;
      LocationYellow@1017 : Record 14;
      LocationSilver@1032 : Record 14;
      LocationSilver2@1110 : Record 14;
      LocationSilver3@1047 : Record 14;
      LocationGreen@1042 : Record 14;
      ItemJournalTemplate@1027 : Record 82;
      ItemJournalBatch@1026 : Record 233;
      WarehouseJournalTemplate@1022 : Record 7309;
      WarehouseJournalBatch@1021 : Record 7310;
      WarehouseJournalLine@1019 : Record 7311;
      Assert@1010 : Codeunit 130000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1008 : Codeunit 132201;
      LibraryItemTracking@1053 : Codeunit 130502;
      LibraryPurchase@1013 : Codeunit 130512;
      LibraryPlanning@1002 : Codeunit 132203;
      LibrarySales@1024 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryVariableStorage@1045 : Codeunit 131004;
      LibraryManufacturing@1031 : Codeunit 132202;
      LibraryRandom@1005 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      NewUnitOfMeasure@1003 : Code[10];
      ReferenceText@1007 : TextConst 'ENU=%1 %2.';
      QuantityError@1004 : TextConst 'ENU=Quantity must be %1 in %2.';
      NewUnitOfMeasure2@1016 : Code[10];
      NewUnitOfMeasure3@1015 : Code[10];
      UnitOfMeasureType@1014 : 'Default,PutAway,Sales';
      ItemTrackingLineActionType@1037 : 'Tracking,Verify';
      WhseItemTrackingPageHandlerBody@1048 : 'MultipleLotNo,LotSerialNo';
      TrackingQuantity@1120 : Decimal;
      VerifyTracking@1028 : Boolean;
      NumberOfLineError@1029 : TextConst 'ENU=Number of Lines must be same.';
      LotSpecific@1030 : Boolean;
      ExpirationDateError@1034 : TextConst 'ENU="Expiration Date must "';
      PostJournalLines@1039 : TextConst 'ENU=Do you want to register and post the journal lines';
      MovementCreated@1033 : TextConst 'ENU="Movement "';
      Serial@1044 : Boolean;
      SelectEntries@1043 : Boolean;
      QuantityMismatchErr@1018 : TextConst 'ENU=Qty. (Base) must not be greater than';
      ItemTrackingLineErr@1038 : TextConst 'ENU=The total Item Tracking Lines are not correct.';
      QuantityBaseErr@1046 : TextConst 'ENU=Quantity (Base) must be %1 for Item %2 in %3';
      WrongBinCodeErr@1050 : TextConst 'ENU=You must enter a %1';
      BinCodeNotFoundErr@1049 : TextConst 'ENU=Bin Code %1 not found in Warehouse Entry.';
      WhseJournalLineBinCodeErr@1051 : TextConst 'ENU=Bin Code in Warehouse Journal Line is not equal to Location Adjustment bin.';
      InsufficientQtyErr@1052 : TextConst 'ENU=You have insufficient quantity';
      AdjmtBinCodeMustHaveValueErr@1001 : TextConst 'ENU=Adjustment Bin Code must have a value in Location';
      WrongNeededQtyErr@1011 : TextConst '@@@=%1: FieldCaption(Qty. Needed), %2: TableCaption(Whse. Cross-Dock Opportunity);ENU=Incorrect %1 in %2.';
      CrossDockQtyExceedsReceiptQtyErr@1023 : TextConst '@@@=%1: FieldCaption(Qty. to Cross-Dock), %2: FieldCaption(Qty. to Receive), %3: TableCaption(Whse. Receipt Line);ENU=The sum of the Qty. to Cross-Dock and Qty. Cross-Docked (Base) fields must not exceed the value in the Qty. to Receive field on the warehouse receipt line.';

    [Test]
    PROCEDURE CrossDockWithFullWarehouseReceipt@1();
    BEGIN
      // Setup.
      Initialize;
      CalculateCrossDockFromWarehouseReceipt(FALSE);  // Partial Receipt FALSE.
    END;

    [Test]
    PROCEDURE CrossDockWithPartialWarehouseReceipt@2();
    BEGIN
      // Setup.
      Initialize;
      CalculateCrossDockFromWarehouseReceipt(TRUE);  // Partial Receipt TRUE.
    END;

    LOCAL PROCEDURE CalculateCrossDockFromWarehouseReceipt@3(PartialReceipt@1012 : Boolean);
    VAR
      Item@1011 : Record 27;
      SalesHeader@1009 : Record 36;
      PurchaseHeader@1001 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WhseCrossDockOpportunity@1007 : Record 5768;
      Zone@1005 : Record 7300;
      Quantity@1000 : Integer;
    BEGIN
      // Create Item, create and release Sales Order, create and release Purchase Order, create Put Away.
      Quantity := LibraryRandom.RandInt(100) + 100;  // Large value required.
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,LocationWhite.Code,Quantity,Quantity);

      IF PartialReceipt THEN
        UpdateQtyToReceiveOnWhseReceipt(WarehouseReceiptLine,PurchaseHeader."No.",Quantity / 2);  // Partial Quantity.

      // Exercise: Calculate Cross Dock.
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");

      // Verify: Verify values on Whse Activity Line. Verify Cross Dock Quantity.
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find Zone with Bin Type Of CROSS-DOCK.
      VerifyWhseReceiptLine(WarehouseReceiptLine,Zone.Code,LocationWhite."Cross-Dock Bin Code",'');

      IF PartialReceipt THEN
        WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",Quantity / 2)
      ELSE
        WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",Quantity);
    END;

    [Test]
    PROCEDURE CrossDockWithExistingWhseCrossDockOpportunity@91();
    VAR
      Item@1004 : Record 27;
      WhseCrossDockOpportunity@1000 : Record 5768;
      SalesHeader@1011 : Record 36;
      LocationCode@1007 : Code[10];
      FirstWhseReceiptLineNo@1012 : Code[20];
      SecondWhseReceiptLineNo@1001 : Code[20];
      InventoryQty@1006 : Decimal;
      PurchaseQty@1002 : Decimal;
      SalesQty@1003 : Decimal;
      PickQty@1005 : Decimal;
      CrossDockQty@1009 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380301] Quantities in Whse. Cross-Dock Opportunity should be calculated with consideration of "Qty. to Cross-Dock", "Qty. to Pick" and "Picked Qty." already calculated for the same demand in another Receipt.
      Initialize;
      DefineQuantitiesForPurchaseAndSalesDocuments(InventoryQty,PurchaseQty,SalesQty,PickQty,CrossDockQty);
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Purchase Order with posted Receipt "R1" and registered Put-away on full WMS Location with cross-docking enabled. Received Quantity = "Qr".
      // [GIVEN] Released Purchase Orders with Receipts "R2" and "R3".
      PrepareInventoryAndTwoOutstandingReceiptsForPurchaseOrders(
        LocationCode,FirstWhseReceiptLineNo,SecondWhseReceiptLineNo,Item."No.",InventoryQty,PurchaseQty);

      // [GIVEN] Released Sales Order for quantity "Qs" > "Qr".
      // [GIVEN] The Sales Order is partially shipped and partially picked. "Qty. to Pick" + "Picked Qty." = "Qr".
      CreateAndReleaseSalesOrderWithShipmentAndPartialPick(SalesHeader,Item."No.",LocationCode,SalesQty,PickQty);

      // [GIVEN] Cross-Dock Opportunity is calculated for Receipt "R2" and updated. New "Qty. to Cross-Dock" = "Qcd".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,FirstWhseReceiptLineNo);
      WhseCrossDockOpportunity.VALIDATE("Qty. to Cross-Dock",CrossDockQty);
      WhseCrossDockOpportunity.MODIFY(TRUE);

      // [WHEN] Calculate quantity to cross-dock "Qcd2" for Receipt "R3".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,SecondWhseReceiptLineNo);

      // [THEN] "Qty. Needed" is equal to "Qs" - "Qr" - "Qcd" in Whse. Cross-Dock Opportunity for Receipt "R3".
      // [THEN] "Qty. to Cross-Dock" is equal to "Qty. Needed".
      // [THEN] "Pick Qty." and "Picked Qty." are equal to 0.
      WITH WhseCrossDockOpportunity DO BEGIN
        TESTFIELD("Qty. Needed",SalesQty - InventoryQty - CrossDockQty);
        TESTFIELD("Qty. to Cross-Dock","Qty. Needed");
        TESTFIELD("Pick Qty.",0);
        TESTFIELD("Picked Qty.",0);
      END;
    END;

    [Test]
    PROCEDURE CrossDockForChangedUOMWithExistingWhseCrossDockOpportunity@100();
    VAR
      GLSetup@1013 : Record 98;
      Item@1009 : Record 27;
      ItemUnitOfMeasure@1010 : Record 5404;
      WhseCrossDockOpportunity@1008 : Record 5768;
      SalesHeader@1007 : Record 36;
      SalesLine@1011 : Record 37;
      LocationCode@1014 : Code[10];
      FirstWhseReceiptLineNo@1006 : Code[20];
      SecondWhseReceiptLineNo@1005 : Code[20];
      InventoryQty@1004 : Decimal;
      PurchaseQty@1003 : Decimal;
      SalesQty@1002 : Decimal;
      PickQty@1001 : Decimal;
      CrossDockQty@1000 : Decimal;
      QtyPerUOM@1012 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380301] If Unit of Measure code is changed in a demand, then "Needed Qty." in Whse. Cross-Dock Opportunity should be calculated for the new UOM code with consideration of "Qty. to Cross-Dock" in previous UOM.
      Initialize;
      GLSetup.GET;
      DefineQuantitiesForPurchaseAndSalesDocuments(InventoryQty,PurchaseQty,SalesQty,PickQty,CrossDockQty);

      // [GIVEN] Item with Base and additional Unit of Measure.
      LibraryInventory.CreateItem(Item);
      QtyPerUOM := LibraryRandom.RandIntInRange(2,10);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",QtyPerUOM);

      // [GIVEN] Purchase Order with posted Receipt "R1" and registered Put-away on full WMS Location with cross-docking enabled. Received Quantity = "Qr".
      // [GIVEN] Released Purchase Orders with Receipts "R2" and "R3".
      PrepareInventoryAndTwoOutstandingReceiptsForPurchaseOrders(
        LocationCode,FirstWhseReceiptLineNo,SecondWhseReceiptLineNo,Item."No.",InventoryQty,PurchaseQty);

      // [GIVEN] Released Sales Order with Base UOM "UOM1" and quantity "Qs" > "Qr".
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",SalesQty,LocationCode,'');

      // [GIVEN] Cross-Dock Opportunity is calculated for Receipt "R2" and updated. New "Qty. to Cross-Dock" = "Qcd".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,FirstWhseReceiptLineNo);
      WhseCrossDockOpportunity.VALIDATE("Qty. to Cross-Dock",CrossDockQty);
      WhseCrossDockOpportunity.MODIFY(TRUE);

      // [GIVEN] Unit of Measure Code on the Sales Line is changed to "UOM2".
      UpdateUOMOnSalesLine(SalesHeader,SalesLine,ItemUnitOfMeasure.Code);

      // [WHEN] Calculate quantity to cross-dock "Qcd2" for Receipt "R3".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,SecondWhseReceiptLineNo);

      // [THEN] "To-Src. Unit of Measure Code" in Whse. Cross-Dock Opportunity for Receipt "R3" = "UOM2".
      // [THEN] "Qty. Needed" is equal to "Qs" - ("Qcd" converted to "UOM2") in Whse. Cross-Dock Opportunity for Receipt "R3".
      WITH WhseCrossDockOpportunity DO BEGIN
        TESTFIELD("To-Src. Unit of Measure Code",ItemUnitOfMeasure.Code);
        Assert.AreNearlyEqual(
          SalesQty - CrossDockQty / QtyPerUOM,"Qty. Needed",GLSetup."Unit-Amount Rounding Precision",
          STRSUBSTNO(WrongNeededQtyErr,FIELDCAPTION("Qty. Needed"),TABLECAPTION));
      END;
    END;

    [Test]
    PROCEDURE CrossDockForDecreasedQtyWithExistingWhseCrossDockOpportunity@154();
    VAR
      Item@1012 : Record 27;
      WhseCrossDockOpportunity@1010 : Record 5768;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      LocationCode@1000 : Code[10];
      FirstWhseReceiptLineNo@1007 : Code[20];
      SecondWhseReceiptLineNo@1006 : Code[20];
      InventoryQty@1005 : Decimal;
      PurchaseQty@1004 : Decimal;
      SalesQty@1003 : Decimal;
      PickQty@1002 : Decimal;
      CrossDockQty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380301] If Quantity is decreased in a demand so that already defined "Qty. to Cross-Dock" covers the demand, then the next calculation of Whse. Cross-Dock opportunity shows no needed quantity to be cross-docked.
      Initialize;
      DefineQuantitiesForPurchaseAndSalesDocuments(InventoryQty,PurchaseQty,SalesQty,PickQty,CrossDockQty);
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Purchase Order with posted Receipt "R1" and registered Put-away on full WMS Location with cross-docking enabled. Received Quantity = "Qr".
      // [GIVEN] Released Purchase Orders with Receipts "R2" and "R3".
      PrepareInventoryAndTwoOutstandingReceiptsForPurchaseOrders(
        LocationCode,FirstWhseReceiptLineNo,SecondWhseReceiptLineNo,Item."No.",InventoryQty,PurchaseQty);

      // [GIVEN] Released Sales Order with Base UOM "UOM1" and quantity "Qs1" > "Qr".
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",SalesQty,LocationCode,'');

      // [GIVEN] Cross-Dock Opportunity is calculated for Receipt "R2" and updated. New "Qty. to Cross-Dock" = "Qcd".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,FirstWhseReceiptLineNo);
      WhseCrossDockOpportunity.VALIDATE("Qty. to Cross-Dock",CrossDockQty);
      WhseCrossDockOpportunity.MODIFY(TRUE);

      // [GIVEN] Quantity in Sales Line is decreased to "Qs2" so it does not exceed already cross-docked quantity "Qcd".
      UpdateQuantityOnSalesLine(SalesHeader,SalesLine,LibraryRandom.RandInt(CrossDockQty));

      // [WHEN] Calculate quantity to cross-dock "Qcd2" for Receipt "R3".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,SecondWhseReceiptLineNo);

      // [THEN] "Qty. Needed" = 0 in Whse. Cross-Dock Opportunity for Receipt "R3".
      WhseCrossDockOpportunity.TESTFIELD("Qty. Needed",0);
    END;

    [Test]
    PROCEDURE CrossDockWhenQtyReceivedYetNotPutAway@218();
    VAR
      WarehouseReceiptLine@1007 : Record 7317;
      ReceiptQty@1000 : Decimal;
      SalesQty@1008 : Decimal;
      CrossDockedQty@1009 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Warehouse Receipt should consider the quantity that has been already received yet not put-away.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [WHEN] Calculate quantity to cross-dock for "R2".
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");

      // [THEN] Quantity to cross-dock in the Receipt "R2" = "SQ" - "CDQ".
      WarehouseReceiptLine.FIND;
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",SalesQty - CrossDockedQty);
    END;

    [Test]
    PROCEDURE AutofilledQtyToCrossDockEqualsToDemandOnSurplusReceipt@277();
    VAR
      WarehouseReceiptLine@1006 : Record 7317;
      WhseCrossDockOpportunity@1005 : Record 5768;
      ReceiptQty@1000 : Decimal;
      SalesQty@1004 : Decimal;
      CrossDockedQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Whse. Cross-Dock Opportunity is automatically filled with the quantity of demand that is less than the quantity being received yet not cross-docked.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2". Receipt quantity = "RQ".
      // [GIVEN] Quantity to receive yet not cross-docked ("RQ" - "CDQ") is enough to cover the Sales.
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [WHEN] Calculate Whse. Cross-Dock Opportunity for "R2" and automatically fill quantity to cross-dock.
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,WarehouseReceiptLine."No.");

      // [THEN] "Qty. to Cross-Dock" in the Whse. Cross-Dock Opportunity = "SQ".
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",SalesQty);
    END;

    [Test]
    PROCEDURE AutofilledQtyToCrossDockEqualsToReceiveNotCrossDockedOnLackingReceipt@317();
    VAR
      WarehouseReceiptLine@1006 : Record 7317;
      WhseCrossDockOpportunity@1005 : Record 5768;
      ReceiptQty@1000 : Decimal;
      SalesQty@1004 : Decimal;
      CrossDockedQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Whse. Cross-Dock Opportunity is automatically filled with the quantity of the receive yet not cross-docked quantity if it does not cover the demand.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);
      ReceiptQty := LibraryRandom.RandIntInRange(30,50);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2". Receipt quantity = "RQ".
      // [GIVEN] Quantity to receive yet not cross-docked ("RQ" - "CDQ") is not enough to cover the Sales.
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [WHEN] Calculate Whse. Cross-Dock Opportunity for "R2" and automatically fill quantity to cross-dock.
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,WarehouseReceiptLine."No.");

      // [THEN] "Qty. to Cross-Dock" in the Whse. Cross-Dock Opportunity = "RQ" - "CDQ".
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",ReceiptQty - CrossDockedQty);
    END;

    [Test]
    PROCEDURE AutofilledQtyToCrossDockEqualsToZeroOnSurplusCrossDocked@326();
    VAR
      WarehouseReceiptLine@1006 : Record 7317;
      WhseCrossDockOpportunity@1005 : Record 5768;
      ReceiptQty@1000 : Decimal;
      SalesQty@1004 : Decimal;
      CrossDockedQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Whse. Cross-Dock Opportunity is not filled automatically when receiving quantity is less than already cross-docked quantity.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);
      ReceiptQty := LibraryRandom.RandInt(5);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2". Receipt quantity = "RQ" which is less than "CDQ".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [WHEN] Calculate Whse. Cross-Dock Opportunity for "R2" and automatically fill quantity to cross-dock.
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,WarehouseReceiptLine."No.");

      // [THEN] "Qty. to Cross-Dock" in the Whse. Cross-Dock Opportunity is not filled.
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",0);
    END;

    [Test]
    PROCEDURE CrossDockOpportunityIsLimitedToReceivedMinusCrossDockedQty@251();
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
      WhseCrossDockOpportunity@1005 : Record 5768;
      ReceiptQty@1000 : Decimal;
      SalesQty@1003 : Decimal;
      CrossDockedQty@1002 : Decimal;
      QtyToCrossDock@1006 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Whse. Cross-Dock Opportunity is limited to the quantity in the Receipt minus what has already been cross-docked.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2". Receipt quantity = "RQ".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] Cross-Dock Opportunity for "R2".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,WarehouseReceiptLine."No.");

      // [WHEN] Validate "Qty. to Cross-Dock" in Cross-Dock Opportunity to the quantity no more than "RQ" - "CDQ".
      QtyToCrossDock := ReceiptQty - CrossDockedQty - LibraryRandom.RandIntInRange(0,10);
      WhseCrossDockOpportunity.VALIDATE("Qty. to Cross-Dock",QtyToCrossDock);

      // [THEN] No error is raised.
      // [THEN] "Qty. to Cross-Dock" is updated.
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",QtyToCrossDock);
    END;

    [Test]
    PROCEDURE CrossDockOpportunityOutOfLimitsOfReceivedMinusCrossDockedQty@299();
    VAR
      WarehouseReceiptLine@1005 : Record 7317;
      WhseCrossDockOpportunity@1004 : Record 5768;
      ReceiptQty@1000 : Decimal;
      SalesQty@1003 : Decimal;
      CrossDockedQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 380520] Qty. to Cross-Dock in Whse. Cross-Dock Opportunity cannot exceed the quantity in the Receipt minus what has already been cross-docked.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity "CDQ" is set to be cross-docked to meet the Sales Order.
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2". Receipt quantity = "RQ".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] Cross-Dock Opportunity for "R2".
      CalculateCrossDockOpportunityForWhseReceipt(WhseCrossDockOpportunity,WarehouseReceiptLine."No.");

      // [WHEN] Try to cross-dock all receiving quantity "RQ".
      ASSERTERROR WhseCrossDockOpportunity.VALIDATE("Qty. to Cross-Dock",ReceiptQty);

      // [THEN] Error is thrown.
      Assert.ExpectedError(CrossDockQtyExceedsReceiptQtyErr);
    END;

    [Test]
    PROCEDURE CrossDockOppWithPartiallyPostedPutAwayToStorageBin@290();
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
      Bin@1008 : Record 7354;
      ReceiptQty@1002 : Decimal;
      SalesQty@1001 : Decimal;
      CrossDockedQty@1000 : Decimal;
      PutawayQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 381303] Overall cross-docked quantity equals to actual quantity in cross-dock bins, plus received quantity that has not been placed into a bin in bulk zone.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity to be cross-docked is set to "CDQ", which is less than "SQ".
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] Put-away is created after "R1" is posted.
      // [GIVEN] The put-away is partly (handled quantity = "HQ") registered to a bin in the bulk zone.
      FindBin(Bin,WarehouseReceiptLine."Location Code",FALSE);
      PutawayQty := CrossDockedQty - LibraryRandom.RandInt(5);
      UpdateAndRegisterPutAway(WarehouseReceiptLine."Item No.",Bin."Location Code",Bin."Zone Code",Bin.Code,PutawayQty);

      // [WHEN] Calculate cross-dock quantity for Receipt "R2".
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");

      // [THEN] Cross-docked quantity "X" = "CDQ" - "HQ".
      // [THEN] Quantity to be cross-docked for "R2" is equal to "SQ" - "X".
      WarehouseReceiptLine.FIND;
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",SalesQty - (CrossDockedQty - PutawayQty));
    END;

    [Test]
    PROCEDURE CrossDockOppWithPartiallyPostedPutAwayToCrossDockBin@297();
    VAR
      WarehouseReceiptLine@1005 : Record 7317;
      Bin@1004 : Record 7354;
      ReceiptQty@1003 : Decimal;
      SalesQty@1002 : Decimal;
      CrossDockedQty@1001 : Decimal;
      PutawayQty@1000 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 381303] Overall cross-docked quantity equals to actual quantity in cross-dock bins, plus partially put-away received quantity if it has not been placed into a bin in bulk zone.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity to be cross-docked is set to "CDQ", which is less than "SQ".
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] Put-away is created after "R1" is posted.
      // [GIVEN] The put-away is partly registered to a cross-dock bin.
      FindBin(Bin,WarehouseReceiptLine."Location Code",TRUE);
      PutawayQty := CrossDockedQty - LibraryRandom.RandInt(5);
      UpdateAndRegisterPutAway(WarehouseReceiptLine."Item No.",Bin."Location Code",Bin."Zone Code",Bin.Code,PutawayQty);

      // [WHEN] Calculate cross-dock quantity for Receipt "R2".
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");

      // [THEN] Cross-docked quantity "X" = "CDQ", as nothing is placed into a bulk bin.
      // [THEN] Quantity to be cross-docked for "R2" is equal to "SQ" - "X".
      WarehouseReceiptLine.FIND;
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",SalesQty - CrossDockedQty);
    END;

    [Test]
    PROCEDURE CrossDockOppWithFullyPostedPutAway@308();
    VAR
      WarehouseReceiptLine@1005 : Record 7317;
      Bin@1004 : Record 7354;
      ReceiptQty@1003 : Decimal;
      SalesQty@1002 : Decimal;
      CrossDockedQty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Dock]
      // [SCENARIO 381303] Overall cross-docked quantity equals to actual quantity in cross-dock bins, if received quantity has been completely put-away into a bin in bulk zone.
      Initialize;
      DefineSupplyAndDemandQtys(ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] WMS Location with cross-docking enabled.
      // [GIVEN] Released Sales Order. Sales quantity = "SQ".
      // [GIVEN] Released Purchase Order.
      // [GIVEN] Posted Warehouse Receipt "R1". Quantity to be cross-docked is set to "CDQ", which is less than "SQ".
      // [GIVEN] Released Purchase Order with Warehouse Receipt "R2".
      CreateWhseReceiptForCrossDockedItem(WarehouseReceiptLine,ReceiptQty,SalesQty,CrossDockedQty);

      // [GIVEN] Put-away is created after "R1" is posted.
      // [GIVEN] The put-away is completely registered to a bin in bulk zone.
      FindBin(Bin,WarehouseReceiptLine."Location Code",FALSE);
      UpdateAndRegisterPutAway(WarehouseReceiptLine."Item No.",Bin."Location Code",Bin."Zone Code",Bin.Code,CrossDockedQty);

      // [WHEN] Calculate cross-dock quantity for Receipt "R2".
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");

      // [THEN] Cross-docked quantity "X" = 0, as everything is placed into a bulk bin.
      // [THEN] Quantity to be cross-docked for "R2" is equal to "SQ" - "X".
      WarehouseReceiptLine.FIND;
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",SalesQty);
    END;

    [Test]
    PROCEDURE PutAwayFromWhseReceiptWithCrossDock@4();
    VAR
      Item@1016 : Record 27;
      SalesHeader@1015 : Record 36;
      PurchaseHeader@1014 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      WarehouseReceiptLine@1010 : Record 7317;
      WhseCrossDockOpportunity@1004 : Record 5768;
      Zone@1003 : Record 7300;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Item, create and release Sales Order, create and release Purchase Order, create Put Away.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,LocationWhite.Code,Quantity,Quantity);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");

      // Exercise: Post Warehouse Receipt.
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Verify: Verify Cross Dock Quantity and verify values on Whse Activity Lines.
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",Quantity);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find Zone with Bin Type Of CROSS-DOCK.
      VerifyCrossDockEntriesOnWarehouseActivityLine(
        WarehouseActivityLine,LocationWhite.Code,Zone.Code,WarehouseActivityLine."Activity Type"::"Put-away",PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place,Quantity);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE));  // Find Zone with Bin Type Of RECEIVE.
      VerifyCrossDockEntriesOnWarehouseActivityLine(
        WarehouseActivityLine,LocationWhite.Code,Zone.Code,WarehouseActivityLine."Activity Type"::"Put-away",PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Take,Quantity);
    END;

    [Test]
    PROCEDURE PickFromWhseShipmentWithCrossDock@5();
    VAR
      Item@1016 : Record 27;
      SalesHeader@1015 : Record 36;
      PurchaseHeader@1014 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      WarehouseActivityLine2@1011 : Record 5767;
      WarehouseReceiptLine@1010 : Record 7317;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseCrossDockOpportunity@1004 : Record 5768;
      Zone@1003 : Record 7300;
      Quantity@1006 : Integer;
    BEGIN
      // Setup: Create Item, create and release Sales Order, create and release Purchase Order, create Put Away, pos Whse Receipt and register Whse Activity.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,LocationWhite.Code,Quantity,Quantity);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");
      PostWhseReceiptAndRegisterWhseActivity(PurchaseHeader."No.");

      // Exercise: Create Pick.
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify values on Whse Activity Lines.
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find Zone with Bin Type Of CROSS-DOCK.
      VerifyCrossDockEntriesOnWarehouseActivityLine(
        WarehouseActivityLine2,LocationWhite.Code,Zone.Code,WarehouseActivityLine2."Activity Type"::Pick,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,Quantity);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,TRUE,FALSE,FALSE));  // Find Zone with Bin Type Of SHIP.
      VerifyCrossDockEntriesOnWarehouseActivityLine(
        WarehouseActivityLine2,LocationWhite.Code,Zone.Code,WarehouseActivityLine2."Activity Type"::Pick,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Place,Quantity);
    END;

    [Test]
    PROCEDURE BackOrderPartialDeliveryWithCrossDocking@6();
    VAR
      Item@1016 : Record 27;
      SalesHeader@1015 : Record 36;
      PurchaseHeader@1014 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      WarehouseReceiptLine@1010 : Record 7317;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseCrossDockOpportunity@1004 : Record 5768;
      Zone@1003 : Record 7300;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Item, create and release Sales Order, create and release Purchase Order, create Put Away, post Whse Receipt and register Whse Activity. Create Pick.
      Initialize;
      Quantity := LibraryRandom.RandInt(100) + 100;  // Large Integer value required.
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,LocationWhite.Code,Quantity,Quantity);
      UpdateQtyToReceiveOnWhseReceipt(WarehouseReceiptLine,PurchaseHeader."No.",Quantity / 2);  // Partial Quantity.
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");
      PostWhseReceiptAndRegisterWhseActivity(PurchaseHeader."No.");
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Exercise: Post Warehouse Shipment.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify the Posted Whse Shipment Line.
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,TRUE,FALSE,FALSE));  // Find Zone with Bin Type Of SHIP.
      VerifyPostedWhseShipmentLine(
        SalesHeader."No.",Zone.Code,Quantity / 2,Item."Base Unit of Measure",WarehouseReceiptLine."Qty. per Unit of Measure",
        LocationWhite.Code);
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE BackOrderFullDeliveryWithCrossDockingUsingReservation@26();
    VAR
      Item@1016 : Record 27;
      SalesHeader@1015 : Record 36;
      PurchaseHeader@1014 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      WarehouseReceiptLine@1010 : Record 7317;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseCrossDockOpportunity@1004 : Record 5768;
      Zone@1003 : Record 7300;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Item, create and release Sales Order with reservation, create and release Purchase Order, create Put Away, post Whse Receipt and register Whse Activity. Create Pick.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationWhite.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");
      PostWhseReceiptAndRegisterWhseActivity(PurchaseHeader."No.");
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Exercise: Post Warehouse Shipment.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify the Posted Whse Shipment Line.
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,TRUE,FALSE,FALSE));  // Find Zone with Bin Type Of SHIP.
      VerifyPostedWhseShipmentLine(
        SalesHeader."No.",Zone.Code,Quantity,Item."Base Unit of Measure",WarehouseReceiptLine."Qty. per Unit of Measure",
        LocationWhite.Code);
    END;

    [Test]
    PROCEDURE SpecialOrderWithCrossDocking@28();
    BEGIN
      // Setup.
      Initialize;
      WarehouseCrossDockingWithSpecialOrder(FALSE,FALSE);  // Change UOM on Put Away and Pick FALSE.
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE ChangeUOMOnPutAwayWithSpecialOrderCrossDocking@29();
    BEGIN
      // Setup.
      Initialize;
      WarehouseCrossDockingWithSpecialOrder(TRUE,FALSE);  // Change UOM on Put Away TRUE.
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE ChangeUOMOnPickWithSpecialOrderCrossDocking@31();
    BEGIN
      // Setup.
      Initialize;
      WarehouseCrossDockingWithSpecialOrder(TRUE,TRUE);  // Change UOM on Put Away and Pick TRUE.
    END;

    LOCAL PROCEDURE WarehouseCrossDockingWithSpecialOrder@80(ChangeUOMOnPutAway@1022 : Boolean;ChangeUOMOnPick@1021 : Boolean);
    VAR
      Item@1001 : Record 27;
      Vendor@1004 : Record 23;
      SalesHeader@1003 : Record 36;
      PurchaseHeader@1007 : Record 38;
      WarehouseReceiptLine@1000 : Record 7317;
      WhseCrossDockOpportunity@1016 : Record 5768;
      WarehouseActivityLine@1017 : Record 5767;
      WarehouseActivityLine2@1020 : Record 5767;
      WarehouseShipmentHeader@1018 : Record 7320;
      ItemUnitOfMeasure@1019 : Record 5404;
      Quantity@1002 : Integer;
    BEGIN
      // Create Item, Vendor, create and release Special Order, create Requisition Line. Get sales Order and perform Carry out Action Message, create Whse Receipt.
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      Quantity := LibraryRandom.RandInt(100);
      CreateAndReleaseSpecialOrder(SalesHeader,Item."No.",Quantity,LocationWhite.Code);
      CreateRequisitionLineAndCarryOutReqWorksheet(Item."No.",Vendor."No.");
      FindPurchaseHeader(PurchaseHeader,Vendor."No.",LocationWhite.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise: Calculate Cross Dock.
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");

      // Verify: Verify the Quantity on Whse Cross Dock opportunity.
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",Quantity);
      WarehouseReceiptLine.TESTFIELD("Cross-Dock Bin Code",LocationWhite."Cross-Dock Bin Code");

      IF ChangeUOMOnPutAway THEN BEGIN
        CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(10));
        NewUnitOfMeasure := ItemUnitOfMeasure.Code;  // Assign value to global variable.
        PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

        // Exercise: Change Unit Of Measure on Put Away created.
        ChangeUnitOfMeasureOnWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.");
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify: Verify Registered Whse Activity Line.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine,ItemUnitOfMeasure.Code,ItemUnitOfMeasure."Qty. per Unit of Measure",WarehouseActivityLine.Quantity,'');
      END;

      IF ChangeUOMOnPick THEN BEGIN
        CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

        // Exercise: Change Unit Of Measure on Pick created.
        ChangeUnitOfMeasureOnWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.");
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type"::Take);
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine2."Activity Type"::Pick);

        // Verify: Verify Registered Whse Activity Line.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine2,ItemUnitOfMeasure.Code,ItemUnitOfMeasure."Qty. per Unit of Measure",WarehouseActivityLine2.Quantity,
          '');
      END;
    END;

    [Test]
    PROCEDURE WarehouseReceiptUsingItemVariantsWithCrossDocking@142();
    BEGIN
      // Setup.
      Initialize;
      WhseActivityUsingItemVariantsWithCrossDocking(FALSE,FALSE);  // Register Put Away and Pick FALSE.
    END;

    [Test]
    PROCEDURE RegisterPutAwayUsingItemVariantsWithCrossDocking@166();
    BEGIN
      // Setup.
      Initialize;
      WhseActivityUsingItemVariantsWithCrossDocking(TRUE,FALSE);  // Register Put Away TRUE.
    END;

    [Test]
    PROCEDURE RegisterPickUsingItemVariantsWithCrossDocking@178();
    BEGIN
      // Setup.
      Initialize;
      WhseActivityUsingItemVariantsWithCrossDocking(TRUE,TRUE);  // Register Put Away and Pick TRUE.
    END;

    LOCAL PROCEDURE WhseActivityUsingItemVariantsWithCrossDocking@19(RegisterPutAway@1012 : Boolean;RegisterPick@1013 : Boolean);
    VAR
      Item@1000 : Record 27;
      ItemVariant@1001 : Record 5401;
      SalesHeader@1003 : Record 36;
      PurchaseHeader@1005 : Record 38;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseReceiptLine@1009 : Record 7317;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseCrossDockOpportunity@1007 : Record 5768;
      Zone@1011 : Record 7300;
      Quantity@1002 : Integer;
    BEGIN
      // create Item, Item variant, Item variant setup with a back order, create Warehouse Receipt.
      Quantity := LibraryRandom.RandInt(100);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateOrderWithItemVariantSetup(SalesHeader,PurchaseHeader,Item."No.",ItemVariant.Code,LocationWhite.Code,Quantity);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise: Calculate Cross Dock.
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");

      // Verify: Verify the Cross dock Opportunity and the values on Whse Receipt Line.
      WhseCrossDockOpportunity.TESTFIELD("Qty. to Cross-Dock",Quantity);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find Zone with Bin Type Of CROSS-DOCK.
      VerifyWhseReceiptLine(WarehouseReceiptLine,Zone.Code,LocationWhite."Cross-Dock Bin Code",ItemVariant.Code);

      IF  RegisterPutAway THEN BEGIN
        // Exercise: Register the Put Away created.
        PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type"::Place);
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify: Verify the Registered Whse Activity.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,Quantity,ItemVariant.Code);
      END;

      IF  RegisterPick THEN BEGIN
        // Exercise: Create and release Whse Shipment, create Pick, register the Pick created.
        CLEAR(WarehouseActivityLine);
        CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Place);
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

        // Verify: Verify the Registered Whse Activity.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,Quantity,ItemVariant.Code);
      END;
    END;

    [Test]
    PROCEDURE WarehouseReceiptWithWarehouseClassCrossDock@214();
    BEGIN
      // Setup.
      Initialize;
      WarehouseActivityWithWarehouseClassCrossDock(FALSE);  // Update Bin Code and Post on Whse Receipt FALSE.
    END;

    [Test]
    PROCEDURE PostWhseReceiptWithWarehouseClassCrossDock@215();
    BEGIN
      // Setup.
      Initialize;
      WarehouseActivityWithWarehouseClassCrossDock(TRUE);  // Update Bin Code and Post on Whse Receipt TRUE.
    END;

    LOCAL PROCEDURE WarehouseActivityWithWarehouseClassCrossDock@129(UpdateBinAndPostWhseReceipt@1014 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesLine@1005 : Record 37;
      ProductGroup@1004 : Record 5723;
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1010 : Record 38;
      Bin@1007 : Record 7354;
      WhseCrossDockOpportunity@1006 : Record 5768;
      WarehouseReceiptLine@1003 : Record 7317;
      Zone@1011 : Record 7300;
      Quantity@1002 : Integer;
    BEGIN
      // Create Item, create Product Group with Warehouse Class Code, create and relase Purchase Order, create Warehouse Receipt.
      Quantity := LibraryRandom.RandInt(100);
      CreateItemWithProductGroup(Item,ProductGroup);
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationWhite.Code,'');
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',FALSE);
      CreateBinWithWarehouseClass(Bin,LocationWhite.Code,FALSE,FALSE,TRUE,FALSE,ProductGroup."Warehouse Class Code");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise: Calculate Crosss Dock.
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");

      // Verify: Verify the values on Warehouse Receipt line.
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find Zone with Bin Type Of CROSS-DOCK.
      VerifyWhseReceiptLine(WarehouseReceiptLine,Zone.Code,LocationWhite."Cross-Dock Bin Code",'');

      IF UpdateBinAndPostWhseReceipt THEN BEGIN
        // Exercise: Update Bin Code on Whse Receipt Line. Post Whse Receipt created.
        CreateAndUpdateBinCodeOnWarehouseReceiptLine(Bin,LocationWhite.Code,Item."No.",ProductGroup."Warehouse Class Code");
        PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

        // Verify: Verify the Posted Whse Receipt Line.
        VerifyPostedWhseReceiptLine(WarehouseReceiptLine."No.",Bin.Code,Quantity);
      END;
    END;

    [Test]
    PROCEDURE WarehouseShipmentWithWarehouseClassCode@140();
    VAR
      Item@1014 : Record 27;
      SalesLine@1003 : Record 37;
      ProductGroup@1012 : Record 5723;
      Bin@1001 : Record 7354;
      WarehouseShipmentHeader@1015 : Record 7320;
      WarehouseShipmentLine@1016 : Record 7321;
      SalesHeader@1002 : Record 36;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Warehouse class code, create and release sales Order, create Whse Shipment. Create and update Bin code on Whse Shipment Line.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemWithProductGroup(Item,ProductGroup);
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationWhite.Code,'');
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      CreateAndUpdateBinCodeOnWarehouseShipmentLine(Bin,LocationWhite.Code,Item."No.",ProductGroup."Warehouse Class Code");

      // Exercise: Release Whse Shipment.
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Shipment Line.
      VerifyWarehouseShipmentLine(WarehouseShipmentHeader."No.",Quantity,Bin.Code);
    END;

    [Test]
    PROCEDURE UOMOnPickLines@204();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWarehouseEntries(FALSE);  // Change UOM FALSE.
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE ChangeUOMOnPickLines@205();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWarehouseEntries(TRUE);  // Change UOM TRUE.
    END;

    LOCAL PROCEDURE UOMOnWarehouseEntries@94(ChangeUOM@1015 : Boolean);
    VAR
      Item@1007 : Record 27;
      SalesLine@1000 : Record 37;
      ItemUnitOfMeasure@1006 : Record 5404;
      ItemUnitOfMeasure2@1010 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1005 : Record 38;
      SalesHeader@1012 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityLine2@1014 : Record 5767;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseShipmentHeader@1013 : Record 7320;
      WarehouseReceiptLine@1009 : Record 7317;
      ExpectedQuantity@1004 : Decimal;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with multiple Item Unit Of Measure, create and release Purchase Order, create Whse Receipt. Register Put Away.
      // Create and release Sales Order and whse Shipment.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      ExpectedQuantity := WarehouseActivityLine.Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationWhite.Code,'');
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      NewUnitOfMeasure := ItemUnitOfMeasure.Code;  // Assign value to global variable.
      NewUnitOfMeasure2 := ItemUnitOfMeasure2.Code;  // Assign value to global variable.

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line.
      FindWhseActivityLine(
        WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine2."Action Type"::Place);
      VerifyWhseActivityLine(
        WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine2."Action Type"::Place,ExpectedQuantity / 2,ItemUnitOfMeasure3.Code,
        ItemUnitOfMeasure3."Qty. per Unit of Measure");

      IF ChangeUOM THEN BEGIN
        // Exercise: Change Unit Of Measure on Pick Line.
        UnitOfMeasureType := UnitOfMeasureType::PutAway;
        LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine2);

        // Verify: Verify the values on Whse Activity Line.
        VerifyWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type"::Take,ExpectedQuantity,ItemUnitOfMeasure2.Code,
          ItemUnitOfMeasure2."Qty. per Unit of Measure");
      END;
    END;

    [Test]
    PROCEDURE UOMOnWarehouseReceipt@22();
    VAR
      Item@1014 : Record 27;
      ItemUnitOfMeasure@1013 : Record 5404;
      ItemUnitOfMeasure2@1012 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      WarehouseReceiptLine@1001 : Record 7317;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with multiple Item Unit Of Measure, create and release Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',FALSE);

      // Exercise: Create Whse Receipt.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Verify: Verify the Unit Of Measure on whse Receipt Line.
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
      WarehouseReceiptLine.TESTFIELD("Qty. per Unit of Measure",1);  // Value required.
    END;

    [Test]
    PROCEDURE UnitOfMeasureOnPutAway@219();
    BEGIN
      // Setup.
      Initialize;
      ChangeUOMOnPutAway(FALSE);  // Change UOM FALSE.
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE PutAwayWithNewUOM@220();
    BEGIN
      // Setup.
      Initialize;
      ChangeUOMOnPutAway(TRUE);  // Change UOM TRUE.
    END;

    LOCAL PROCEDURE ChangeUOMOnPutAway@36(ChangeUOM@1004 : Boolean);
    VAR
      Item@1014 : Record 27;
      ItemUnitOfMeasure@1013 : Record 5404;
      ItemUnitOfMeasure2@1012 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptLine@1001 : Record 7317;
      ExpectedQuantity@1003 : Decimal;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with multiple Item Unit Of Measure, create and release Purchase Order.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      // Assign values to global variables.
      NewUnitOfMeasure := ItemUnitOfMeasure.Code;
      NewUnitOfMeasure2 := ItemUnitOfMeasure2.Code;
      NewUnitOfMeasure3 := ItemUnitOfMeasure3.Code;

      // Exercise: Create Put Away.
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      ExpectedQuantity := WarehouseActivityLine.Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place,ExpectedQuantity,ItemUnitOfMeasure2.Code,
        ItemUnitOfMeasure2."Qty. per Unit of Measure");

      IF ChangeUOM THEN BEGIN
        // Exercise: Change Unit Of Measure on Whse Activity Line.
        UnitOfMeasureType := UnitOfMeasureType::Sales;
        LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);

        // Verify: Verify the values on Whse Activity Line.
        VerifyWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type"::Place,ExpectedQuantity / 2,
          ItemUnitOfMeasure3.Code,ItemUnitOfMeasure3."Qty. per Unit of Measure");
      END;
    END;

    [Test]
    PROCEDURE UOMOnWarehouseShipmentLine@39();
    VAR
      Item@1014 : Record 27;
      SalesLine@1005 : Record 37;
      ItemUnitOfMeasure@1013 : Record 5404;
      ItemUnitOfMeasure2@1012 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      SalesHeader@1008 : Record 36;
      WarehouseShipmentLine@1000 : Record 7321;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseReceiptLine@1001 : Record 7317;
      ExpectedQuantity@1003 : Decimal;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with multiple Item Unit Of Measure, create and release Purchase Order, create Whse Receipt. Register Put Away. Create and release Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationYellow.Code,Quantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      ExpectedQuantity := Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationYellow.Code,'');

      // Exercise: Create and release Warehouse Shipment.
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // Verify: Verify that values on Whse Shipment Line.
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure3.Code);
      WarehouseShipmentLine.TESTFIELD("Qty. per Unit of Measure",ItemUnitOfMeasure3."Qty. per Unit of Measure");
      WarehouseShipmentLine.TESTFIELD(Quantity,ExpectedQuantity);
    END;

    [Test]
    PROCEDURE UOMOnWarehouseReceiptWithSpecialOrder@143();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWarehouseEntriesWithSpecialOrder(FALSE);  // UOM on Warehouse Receipt.
    END;

    [Test]
    PROCEDURE UOMOnPutAwayWithSpecialOrder@144();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWarehouseEntriesWithSpecialOrder(TRUE);  // UOM on Put Away.
    END;

    LOCAL PROCEDURE UOMOnWarehouseEntriesWithSpecialOrder@70(UOMOnPutAway@1010 : Boolean);
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1008 : Record 5404;
      ItemUnitOfMeasure2@1006 : Record 5404;
      ItemUnitOfMeasure3@1005 : Record 5404;
      SalesHeader@1003 : Record 36;
      PurchaseHeader@1007 : Record 38;
      WarehouseReceiptLine@1000 : Record 7317;
      WarehouseActivityLine@1017 : Record 5767;
      Quantity@1002 : Integer;
      ExpectedQuantity@1009 : Decimal;
    BEGIN
      // Create multiple Item Unit Of Measure, Vendor, create and release Special Order, create Requisition Line. Get sales Order and perform Carry out Action Message, Create Whse Receipt.
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      Quantity := LibraryRandom.RandInt(100);
      CreateSpecialOrderWithItemUnitOfMeasureSetup(PurchaseHeader,SalesHeader,Item."No.",Quantity,LocationWhite.Code);

      // Exercise: Create Whse Receipt.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Verify: Verify the Unit Of Measure entries on Whse Receipt Line.
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
      WarehouseReceiptLine.TESTFIELD("Qty. per Unit of Measure",1);  // Value required.

      IF UOMOnPutAway THEN BEGIN
        // Exercise: Craete Put away.
        PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type"::Place);
        ExpectedQuantity := WarehouseActivityLine.Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";

        // Verify: Verify the Unit Of Measure entries on Whse Put Away.
        VerifyWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type"::Place,ExpectedQuantity,
          ItemUnitOfMeasure2.Code,ItemUnitOfMeasure2."Qty. per Unit of Measure");
      END;
    END;

    [Test]
    PROCEDURE UOMOnRegisteredPutAwayWithSpecialOrder@106();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWhseDocumentsWithSpecialOrder(TRUE,FALSE);  // UOM on Registered Put Away TRUE.
    END;

    [Test]
    PROCEDURE UOMOnRegisteredPickWithSpecialOrder@107();
    BEGIN
      // Setup.
      Initialize;
      UOMOnWhseDocumentsWithSpecialOrder(FALSE,TRUE);  // UOM Registered Pick TRUE.
    END;

    LOCAL PROCEDURE UOMOnWhseDocumentsWithSpecialOrder@34(UOMOnRegisteredPutAway@1012 : Boolean;UOMOnRegisteredPick@1013 : Boolean);
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1008 : Record 5404;
      ItemUnitOfMeasure2@1006 : Record 5404;
      ItemUnitOfMeasure3@1005 : Record 5404;
      SalesHeader@1003 : Record 36;
      PurchaseHeader@1007 : Record 38;
      WarehouseReceiptLine@1000 : Record 7317;
      WarehouseActivityLine@1017 : Record 5767;
      WarehouseActivityLine2@1020 : Record 5767;
      WarehouseShipmentHeader@1018 : Record 7320;
      Quantity@1002 : Integer;
    BEGIN
      // Create multiple Item Unit Of Measure, Vendor, create and release Special Order, create Requisition Line. Get sales Order and perform Carry out Action Message, Create Whse Receipt.
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      Quantity := LibraryRandom.RandInt(100);
      CreateSpecialOrderWithItemUnitOfMeasureSetup(PurchaseHeader,SalesHeader,Item."No.",Quantity,LocationWhite.Code);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);

      // Exercise: Register the Put Away.
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      IF UOMOnRegisteredPutAway THEN
        // Verify: Verify the Unit Of Measure entries on Registered Put Away.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine,ItemUnitOfMeasure2.Code,ItemUnitOfMeasure2."Qty. per Unit of Measure",WarehouseActivityLine.Quantity,
          '');

      IF UOMOnRegisteredPick THEN BEGIN
        CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type"::Place);

        // Exercise: Register the Pick created.
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine2."Activity Type"::Pick);

        // Verify: Verify the Unit Of Measure entries on Registerd Pick.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine2,ItemUnitOfMeasure3.Code,ItemUnitOfMeasure3."Qty. per Unit of Measure",
          WarehouseActivityLine2.Quantity,'');
      END;
    END;

    [Test]
    PROCEDURE UOMOnWarehouseShipmentLineWithPartialQuantity@25();
    VAR
      Item@1014 : Record 27;
      SalesLine@1005 : Record 37;
      ItemUnitOfMeasure@1013 : Record 5404;
      ItemUnitOfMeasure2@1012 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      SalesHeader@1008 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseReceiptLine@1001 : Record 7317;
      WarehouseShipmentLine@1000 : Record 7321;
      ExpectedQuantity@1003 : Decimal;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with multiple Item Unit Of Measure, create and release Purchase Order, create Whse Receipt. Register Put Away. Create and release Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationYellow.Code,Quantity / 2,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      ExpectedQuantity := Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity / 2,LocationYellow.Code,'');

      // Exercise: Create and release Warehouse Shipment.
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // Verify: Verify that values on Whse Shipment Line.
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure3.Code);
      WarehouseShipmentLine.TESTFIELD("Qty. per Unit of Measure",ItemUnitOfMeasure3."Qty. per Unit of Measure");
      WarehouseShipmentLine.TESTFIELD(Quantity,ExpectedQuantity / 2);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromPurchaseReturnOrderWithoutStrictExpirationSerialAndLot@27();
    BEGIN
      // Setup.
      Initialize;
      PickFromPurchaseReturnOrder(FALSE);  // Strict Expiration Posting FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromPurchaseReturnOrderWithStrictExpirationSerialAndLot@21();
    BEGIN
      // Setup.
      Initialize;
      PickFromPurchaseReturnOrder(TRUE);  // Strict Expiration Posting TRUE.
    END;

    LOCAL PROCEDURE PickFromPurchaseReturnOrder@15(StrictExpirationPosting@1000 : Boolean);
    VAR
      ItemTrackingCode@1007 : Record 6502;
      Item@1006 : Record 27;
      PurchaseHeader@1003 : Record 38;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, update Inventory, create and release Purchase Return Order and Create Warehouse Shipment.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE,StrictExpirationPosting);  // Serial No and Lot No.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      LotSpecific := TRUE;  // Assign value to Global variable.
      Quantity := LibraryRandom.RandInt(10);  // Integer value Required.
      TrackingQuantity := Quantity;  // Assign value to Global variable.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",Quantity,LocationWhite.Code);
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      SelectWhseShipmentHeader(
        WarehouseShipmentHeader,WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",
        PurchaseHeader."No.");

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the Item Tracking applied in the Item Ledger Entries and values on Pick Line.
      VerifyTrackingOnItemLedgerEntry(Item."No.",Quantity);
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Take,1,Item."Base Unit of Measure",WarehouseActivityLine."Qty. per Unit of Measure");

      IF StrictExpirationPosting THEN BEGIN
        // Exercise: Register Pick and Post Whse. Shipment.
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,Item."No.",LocationWhite.Code,PurchaseHeader."No.");
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,Item."No.",LocationWhite.Code,PurchaseHeader."No.");
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify Whse. Item Tracking Lines in WhseItemTrackingLinesPageHandler and the values on the Posted Whse. Shipment.
        VerifyTracking := TRUE;  // Assign value to Global variable.
        VerifyPostedWhseShipmentLine(
          PurchaseHeader."No.",WarehouseShipmentHeader."Zone Code",Quantity,Item."Base Unit of Measure",
          WarehouseShipmentLine."Qty. per Unit of Measure",LocationWhite.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromPurchaseReturnOrderWithoutStrictExpirationWithSerialNo@75();
    BEGIN
      // Setup.
      Initialize;
      PickFromPurchaseReturnOrderWithSerialNo(FALSE);  // Strict Expiration Posting FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromPurchaseReturnOrderWithStrictExpirationWithSerialNo@235();
    BEGIN
      // Setup.
      Initialize;
      PickFromPurchaseReturnOrderWithSerialNo(TRUE);  // Strict Expiration Posting TRUE.
    END;

    LOCAL PROCEDURE PickFromPurchaseReturnOrderWithSerialNo@74(StrictExpirationPosting@1000 : Boolean);
    VAR
      ItemTrackingCode@1007 : Record 6502;
      Item@1006 : Record 27;
      PurchaseHeader@1003 : Record 38;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, update Inventory, create and release Purchase Return Order and Create Warehouse Shipment.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,StrictExpirationPosting);  // Serial No. Only.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      LotSpecific := FALSE;  // Assign value to Global variable.
      Quantity := LibraryRandom.RandInt(10);  // Integer value Required.
      TrackingQuantity := Quantity;  // Assign value to Global variable.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",Quantity,LocationWhite.Code);
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      SelectWhseShipmentHeader(
        WarehouseShipmentHeader,WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",
        PurchaseHeader."No.");

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the Item Tracking applied in the Item Ledger Entries and values on Pick Line.
      LotSpecific := FALSE;  // Assign value to Global variable.
      VerifyTrackingOnItemLedgerEntry(Item."No.",Quantity);
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Take,1,Item."Base Unit of Measure",WarehouseActivityLine."Qty. per Unit of Measure");

      IF StrictExpirationPosting THEN BEGIN
        // Exercise: Register whse Activity and Post Whse. Shipment.
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify the values on Posted Whse. Shipment Line and Whse. Item Tracking Lines through WhseItemTrackingLinesPageHandler.
        VerifyTracking := TRUE;  // Assign value to Global variable.
        VerifyPostedWhseShipmentLine(
          PurchaseHeader."No.",WarehouseShipmentHeader."Zone Code",Quantity,Item."Base Unit of Measure",
          WarehouseShipmentLine."Qty. per Unit of Measure",LocationWhite.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromSalesOrderWithoutStrictExpirationSerialAndLot@68();
    BEGIN
      // Setup.
      Initialize;
      PickFromSalesOrder(FALSE);  // Strict Expiration Posting FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromSalesOrderWithStrictExpirationSerialAndLot@60();
    BEGIN
      // Setup.
      Initialize;
      PickFromSalesOrder(TRUE);  // Strict Expiration Posting TRUE.
    END;

    LOCAL PROCEDURE PickFromSalesOrder@58(StrictExpirationPosting@1000 : Boolean);
    VAR
      ItemTrackingCode@1007 : Record 6502;
      Item@1006 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, update Inventory, create and release Sales Order and create Warehouse Shipment.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE,StrictExpirationPosting);  // Serial No and Lot No.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      LotSpecific := TRUE;  // Assign value to Global variable.
      Quantity := LibraryRandom.RandInt(10);  // Integer value Required.
      TrackingQuantity := Quantity;  // Assign value to Global variable.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationWhite.Code,'');
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      SelectWhseShipmentHeader(
        WarehouseShipmentHeader,WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the Item Tracking applied in the Item Ledger Entries and values on Pick Line.
      VerifyTrackingOnItemLedgerEntry(Item."No.",Quantity);
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,1,Item."Base Unit of Measure",WarehouseActivityLine."Qty. per Unit of Measure");

      IF StrictExpirationPosting THEN BEGIN
        // Exercise: Register Pick and Post Whse. Shipment.
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,Item."No.",LocationWhite.Code,SalesHeader."No.");
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,Item."No.",LocationWhite.Code,SalesHeader."No.");
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify Whse. Item Tracking Lines in WhseItemTrackingLinesPageHandler and the values on the Posted Whse. Shipment Line.
        VerifyTracking := TRUE;  // Assign value to Global variable.
        VerifyPostedWhseShipmentLine(
          SalesHeader."No.",WarehouseShipmentHeader."Zone Code",Quantity,Item."Base Unit of Measure",
          WarehouseShipmentLine."Qty. per Unit of Measure",LocationWhite.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromSalesOrderWithoutStrictExpirationWithSerialNo@78();
    BEGIN
      // Setup.
      Initialize;
      PickFromSalesOrderWithSerialNo(FALSE);  // Strict Expiration Posting FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromSalesOrderWithStrictExpirationWithSerialNo@77();
    BEGIN
      // Setup.
      Initialize;
      PickFromSalesOrderWithSerialNo(TRUE);  // Strict Expiration Posting TRUE.
    END;

    LOCAL PROCEDURE PickFromSalesOrderWithSerialNo@71(StrictExpirationPosting@1000 : Boolean);
    VAR
      ItemTrackingCode@1007 : Record 6502;
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1003 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, update Inventory, create and release Sales Order and Create Warehouse Shipment.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,StrictExpirationPosting);  // Serial No. Only.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      LotSpecific := FALSE;  // Assign value to Global variable.
      Quantity := LibraryRandom.RandInt(10);  // Integer value Required.
      TrackingQuantity := Quantity;  // Assign value to Global variable.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",Quantity,LocationWhite.Code,'');
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      SelectWhseShipmentHeader(
        WarehouseShipmentHeader,WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Pick Line and Whse. Item Tracking Lines applied in Item Ledger Entries.
      LotSpecific := FALSE;  // Assign value to Global variable.
      VerifyTrackingOnItemLedgerEntry(Item."No.",Quantity);
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,1,Item."Base Unit of Measure",WarehouseActivityLine."Qty. per Unit of Measure");

      IF StrictExpirationPosting THEN BEGIN
        // Exercise: Register whse Activity and Post Whse. Shipment.
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify the values on Posted Whse. Shipment Line and Whse. Item tracking Lines in WhseItemTrackingLinesPageHandler.
        VerifyTracking := TRUE;  // Assign value to Global variable.
        VerifyPostedWhseShipmentLine(
          SalesHeader."No.",WarehouseShipmentHeader."Zone Code",Quantity,Item."Base Unit of Measure",
          WarehouseShipmentLine."Qty. per Unit of Measure",LocationWhite.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE FullWarehousePutAwayFromPurchaseWithMultipleLinesAndLotNo@95();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines, Warehouse Receipt.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationWhite.Code,TrackingQuantity,LibraryRandom.RandInt(10),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      AssignTrackingToMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler LotItemTrackingPageHandler.

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify the values on Warehouse Activity Lines and the Whse. Item Tracking applied in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyMultipleWhseActivityLines(
        WarehouseActivityLine,TrackingQuantity,WarehouseActivityLine."Activity Type"::"Put-away",PurchaseHeader."No.",
        LocationWhite.Code,Item."Base Unit of Measure",WarehouseReceiptLine."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE PartialWarehousePutAwayFromPurchaseWithMultipleLinesAndLotNo@83();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines, Warehouse Receipt and post Warehouse Receipt.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationWhite.Code,TrackingQuantity,LibraryRandom.RandInt(10),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      AssignTrackingToMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler LotItemTrackingPageHandler.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Exercise: Update Quantity To Handle on Whse Activity Lines.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      UpdateQuantityToHandleOnWhseActivityLines(WarehouseActivityLine,TrackingQuantity / 2);

      // Verify: Verify the values on Warehouse Activity Lines and Whse. Item Tracking applied in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyMultipleWhseActivityLines(
        WarehouseActivityLine,TrackingQuantity,WarehouseActivityLine."Activity Type"::"Put-away",PurchaseHeader."No.",
        LocationWhite.Code,Item."Base Unit of Measure",WarehouseReceiptLine."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE PurchaseReceiptWithLotNo@148();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1009 : Record 27;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Setup: Create Item with Item Tracking Code, create Purchase Order and open Item Tracking Lines.
      Initialize;
      CreateLotTrackedItem(Item);
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,Item."No.",'',TrackingQuantity,'');  // Location Blank.
      PurchaseLine.OpenItemTrackingLines;

      // Exercise: Post Purchase Order as Receive.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify the values on Purchase Receipt Line and the Item Tracking Lines in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyPurchaseReceiptLine(DocumentNo,PurchaseHeader."No.",TrackingQuantity,'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PostedInventoryPutAwayWithExpirationDateAndLot@118();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnInventoryPutAwayAndPick(FALSE);  // Expiration Date on Posted Inventory Pick -FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PostedInventoryPickWithExpirationDateAndLot@120();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnInventoryPutAwayAndPick(TRUE);  // Expiration Date on Posted Inventory Pick -TRUE.
    END;

    LOCAL PROCEDURE ExpirationDateOnInventoryPutAwayAndPick@84(ExpirationDateOnPostedInventoryPick@1012 : Boolean);
    VAR
      Item@1002 : Record 27;
      Bin@1007 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item with Item Tracking Code, create and release Purchase Order, update Expiration Date On Reservation Entry. Create Inventory Put Away.
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateLotTrackedItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationSilver.Code,TrackingQuantity,'','',TRUE);
      UpdateExpirationDateOnReservationEntry(LocationSilver.Code,Item."No.");
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",LocationSilver.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      UpdateBinOnActivityLine(WarehouseActivityLine,Bin.Code);

      // Exercise: Post Inventory Put Away.
      PostInventoryPut(PurchaseHeader."No.");

      // Verify: Verify the entries on Posted Inventory Put Away Line. Verify that the same Expiration date on Inventory Put Away as Purchase Order. Verify Item tracking applied through ItemTrackingPageHandler.
      LotSpecific := TRUE;  // Assign values to Global variables.
      VerifyTracking := TRUE;
      VerifyPostedInventoryPutLine(PurchaseHeader."No.",LocationSilver.Code,Item."No.",WORKDATE,Bin.Code);

      IF ExpirationDateOnPostedInventoryPick THEN BEGIN
        // Exercise: Create Inventory Pick.
        CLEAR(WarehouseActivityLine);
        CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",TrackingQuantity,LocationSilver.Code,'');
        SalesLine.OpenItemTrackingLines;
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver.Code,SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Take);
        WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
        PostInventoryPick(SalesHeader."No.",FALSE);

        // Verify: Verify the Posted Inventory Pick Line. Verify that the same Expiration date on Inventory Pick as on Sales Order. Verify Item tracking applied through ItemTrackingPageHandler.
        VerifyTracking := TRUE;   // Assign value to Global variable.
        VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver.Code,Item."No.",WORKDATE,Bin.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE WarehousePickWithExpirationDateAndLot@171();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnWhsePickLine(FALSE);  // Change Expiration Date On Whse Pick - FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE WarehousePickWithErrorChangedExpirationDateAndLot@172();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnWhsePickLine(TRUE);  // Change Expiration Date On Whse Pick - TRUE.
    END;

    LOCAL PROCEDURE ExpirationDateOnWhsePickLine@169(ChangeExpirationDate@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines and Warehouse Receipt. Update Expiration Date on Reservation Entry, post and register the Whse Receipt.
      // Create and release Sales Order and Whse Shipment.
      TrackingQuantity := LibraryRandom.RandInt(5);  // Integer value Required.
      WarehousePickChangeExpirationDateSetup(Item,SalesHeader,WarehouseShipmentHeader);

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Place);

      IF ChangeExpirationDate THEN BEGIN
        // Exercise: Change Expiration Date On Pick Line.
        ASSERTERROR ChangeExpirationDateOnActivityLine(WarehouseActivityLine);

        // Verify: Verify that Expiration Date can not be changed.
        Assert.ExpectedError(ExpirationDateError)
      END ELSE BEGIN
        UpdateTrackingOnWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.");
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify Posted Whse Shipment Line. Verify Item tracking applied through ItemTrackingPageHandler.
        VerifyTracking := TRUE;  // Assign value to Global variable.
        VerifyPostedWhseShipmentLine(
          SalesHeader."No.",WarehouseShipmentHeader."Zone Code",TrackingQuantity,Item."Base Unit of Measure",
          WarehouseActivityLine."Qty. per Unit of Measure",LocationWhite.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE InventoryPutAwayWithExpirationDate@123();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnInventoryPutAway(FALSE);  // Change Expiration Date On Inventory Put Away FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE InventoryPutAwayWithErrorChangedExpirationDate@124();
    BEGIN
      // Setup.
      Initialize;
      ExpirationDateOnInventoryPutAway(TRUE);   // Change Expiration Date On Inventory Put Away TRUE.
    END;

    LOCAL PROCEDURE ExpirationDateOnInventoryPutAway@82(ChangeExpirationDate@1014 : Boolean);
    VAR
      Item@1002 : Record 27;
      Bin@1007 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines.
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationSilver.Code,TrackingQuantity,LibraryRandom.RandInt(5),TRUE);
      UpdateExpirationDateOnReservationEntry(LocationSilver.Code,Item."No.");

      // Exercise: Create Inventory Put Away.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);

      // Verify: Verify the values on Whse Activity Line. Verify the same Expiration Date as on Purchase Order. Verify Item tracking applied through ItemTrackingPageHandler.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",LocationSilver.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      VerifyTracking := TRUE;  // Assign value to Global variable.
      WarehouseActivityLine.TESTFIELD("Expiration Date",WORKDATE);
      VerifyMultipleWhseActivityLines(
        WarehouseActivityLine,TrackingQuantity,WarehouseActivityLine."Activity Type"::"Invt. Put-away",PurchaseHeader."No.",
        LocationSilver.Code,Item."Base Unit of Measure",WarehouseActivityLine."Qty. per Unit of Measure");

      IF ChangeExpirationDate THEN BEGIN
        // Exercise: Change Expiration Date on Warehouse Activity Line or Post Inventory Pick.
        ASSERTERROR ChangeExpirationDateOnActivityLine(WarehouseActivityLine);

        // Verify: Verify the Expiration Date can not be changed.
        Assert.ExpectedError(ExpirationDateError);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE ExpirationDateOnWarehousePutAwayWithLotNo@69();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines and Warehouse Receipt. Update Expiration Date.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(10);  // Integer value Required.
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationWhite.Code,TrackingQuantity,LibraryRandom.RandInt(5),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      UpdateTrackingOnWhseReceiptLines(WarehouseReceiptHeader,WarehouseReceiptLine,PurchaseHeader."No.");
      UpdateExpirationDateOnReservationEntry(LocationWhite.Code,Item."No.");

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify the values on Warehouse Activity Lines. Verify Item tracking applied through ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      VerifyMultipleWhseActivityLines(
        WarehouseActivityLine,TrackingQuantity,WarehouseActivityLine."Activity Type"::"Put-away",PurchaseHeader."No.",
        LocationWhite.Code,Item."Base Unit of Measure",WarehouseReceiptLine."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE WarehousePickWithUpdateBinOnWhseShipmentAndExpirationDate@81();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1007 : Record 36;
      Bin@1009 : Record 7354;
      Bin2@1010 : Record 7354;
      SalesLine@1008 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Setup: Create Item with Item Tracking Code, update Item Inventory, create and release Sales Order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationSilver2.Code,'',1);  // Find Bin of Index 1.
      TrackingQuantity := LibraryRandom.RandInt(5);  // Integer value Required.
      CreateLotTrackedItem(Item);
      UpdateItemInventory(Item."No.",LocationSilver2.Code,Bin.Code,TrackingQuantity,TRUE);  // Value required.
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",TrackingQuantity,LocationSilver2.Code,'');
      SalesLine.OpenItemTrackingLines;
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      UpdateExpirationDateOnReservationEntry(LocationSilver2.Code,Item."No.");
      LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
      LibraryWarehouse.FindBin(Bin2,LocationSilver2.Code,'',2);  // Find Bin of Index 2.

      // Exercise: Update Bin on Warehouse Shipment Line and create Pick.
      UpdateBinOnWarehouseShipmentLine(Item."No.",Bin2.Code);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse. Activity Line. Verify the Tracking applied in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign Value to Global variable.
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationSilver2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,TrackingQuantity,Item."Base Unit of Measure",SalesLine."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler,ConfirmHandler)]
    PROCEDURE WhsePickChangeExpirationDateWithWhseReclassificationJournal@196();
    VAR
      Item@1008 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines and Warehouse Receipt. Update Expiration Date on Reservation Entry, post and register the Whse Receipt.
      // Create and release Sales Order and Whse Shipment.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(5);  // Integer value Required.
      WarehousePickChangeExpirationDateSetup(Item,SalesHeader,WarehouseShipmentHeader);
      ASSERTERROR CreateAndRegisterWarehouseReclassJournal(Item."No.",LocationWhite.Code,TrackingQuantity);
      Assert.ExpectedError(ExpirationDateError);

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the Expiration Date can not be changed. Verify the Tracking applied in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign Value to Global variable.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.TESTFIELD("Expiration Date",WORKDATE);
      VerifyWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,TrackingQuantity,Item."Base Unit of Measure",
        WarehouseActivityLine."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler,ConfirmHandler)]
    PROCEDURE WhsePutAwayChangeExpirationDateWithWhseReclassificationJournal@195();
    VAR
      Item@1008 : Record 27;
      PurchaseHeader@1007 : Record 38;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order with multiple Lines and Warehouse Receipt. Update Expiration Date on Reservation Entry, post and register the Whse Receipt.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(5);  // Integer value Required.
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationWhite.Code,TrackingQuantity,LibraryRandom.RandInt(5),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      UpdateTrackingOnWhseReceiptLines(WarehouseReceiptHeader,WarehouseReceiptLine,PurchaseHeader."No.");
      UpdateExpirationDateOnReservationEntry(LocationWhite.Code,Item."No.");
      PostWhseReceiptAndRegisterWhseActivity(PurchaseHeader."No.");

      // Exercise: Create and register Whse Reclassification Journal.
      ASSERTERROR CreateAndRegisterWarehouseReclassJournal(Item."No.",LocationWhite.Code,TrackingQuantity);

      // Verify: Verify the Expiration Date can not be changed.
      Assert.ExpectedError(ExpirationDateError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandlerSerialNo)]
    PROCEDURE GetBinContentOnMovementWorksheetFromPutAwayWithSerialNo@121();
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      WarehouseReceiptLine@1006 : Record 7317;
      WarehouseReceiptHeader@1007 : Record 7316;
      WhseWorksheetLine@1008 : Record 7326;
      WarehouseActivityHeader@1004 : Record 5766;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order, Assign serial No. on Purchase Line. Create, Post and register warehouse Receipt.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);  // Serial No -True.
      LotSpecific := FALSE;
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      TrackingQuantity := LibraryRandom.RandInt(10) + 10;  // Integer value Required.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,Item."No.",LocationWhite.Code,TrackingQuantity,'');  // Location Blank.
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");

      // Exercise: Get Bin content on Movemt Worksheet.
      GetBinContentFromMovementWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.");

      // Verify: Verify Entries on Movement Worksheet. Verify the Tracking applied in ItemTrackingPageHandlerSerialNo.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyWhseWorksheetLine(WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."Base Unit of Measure",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(LotNoWhseItemTrackingPageHandler,WhseSourceCreateDocumentHandler,MovementCreatedMessageHandler)]
    PROCEDURE WhseMovementFromMovementWorksheetAfterGetBinContentWithLotNo@117();
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1000 : Record 27;
      WhseWorksheetLine@1004 : Record 7326;
    BEGIN
      // Setup: Create Item with Item Tracking code, Assign Lot No tracking and Update expiration Date on Whse. Item Journal. Get Bin Content on Movement Worksheet.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(10) + 10;  // Integer value Required.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,TRUE);  // Lot No and Strict Expiration Posting True.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,TrackingQuantity);
      GetBinContentFromMovementWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.");
      COMMIT;

      // Exercise: Create Movement from Movement Worksheet.
      WhseWorksheetLine.MovementCreate(WhseWorksheetLine);

      // Verify: Verify the warehouse movement respects the quantities.
      VerifyWhseActivityLineForMovement(Item."No.",LocationWhite.Code,TrackingQuantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BinCodeWithSalesPurchaseCrossTransaction@137();
    VAR
      Item@1032 : Record 27;
      SalesHeader@1031 : Record 36;
      SalesLine@1030 : Record 37;
      WarehouseShipmentHeader@1029 : Record 7320;
      WarehouseShipmentLine@1028 : Record 7321;
      Bin@1027 : Record 7354;
      Bin2@1026 : Record 7354;
      Bin3@1025 : Record 7354;
      WarehouseActivityLine@1024 : Record 5767;
      WarehouseActivityLine3@1021 : Record 5767;
      PurchaseHeader@1020 : Record 38;
      WarehouseReceiptLine@1016 : Record 7317;
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create Item, create Pick from Sales Order, create and post Warehouse Receipt from Purchase Order. Delete shipment and pick created and recreate Shipment and Pick from last Sales order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.FindBin(Bin,LocationSilver2.Code,'',1);  // Find Bin of Index 1.
      LibraryWarehouse.FindBin(Bin2,LocationSilver2.Code,'',2);  // Find Bin of Index 2.
      LibraryWarehouse.FindBin(Bin3,LocationSilver2.Code,'',3);  // Find Bin of Index 3.
      UpdateBinsOnLocation(LocationSilver2,Bin.Code,Bin2.Code);  // Receipt Bin Code, Shipment Bin Code.
      Quantity := LibraryRandom.RandDec(10,2) + 10;
      UpdateItemInventory(Item."No.",LocationSilver2.Code,Bin.Code,Quantity,FALSE);  // Use Tracking FALSE.
      UpdateItemInventory(Item."No.",LocationSilver2.Code,Bin2.Code,Quantity,FALSE);  // Use Tracking FALSE.
      UpdateItemInventory(Item."No.",LocationSilver2.Code,Bin3.Code,Quantity,FALSE);  // Use Tracking FALSE.

      CreateSalesOrderWithUpdatedBinAndPickSetup(
        SalesHeader,SalesLine,WarehouseShipmentHeader,Item."No.",LocationSilver2.Code,Bin2.Code,Quantity);
      CreatePutAwayWithPurchaseOrderSetup(
        PurchaseHeader,WarehouseReceiptLine,Item."No.",LocationSilver2.Code,Quantity - 5);
      DeleteWhseActivityLine(WarehouseActivityLine,LocationSilver2.Code,SalesHeader."No.");
      DeleteWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader,SalesHeader."No.");

      // Exercise: Recreate Warehouse Shipment and Pick from Sales Order.
      RecreatePickFromSalesOrder(SalesHeader,SalesLine,WarehouseShipmentHeader,Quantity);

      // Verify: Verify Bin Code on Action Type Take of Activity Line is same as shipment code of Location and verify other entries.
      FindWhseActivityLine(
        WarehouseActivityLine3,WarehouseActivityLine3."Activity Type"::Pick,LocationSilver2.Code,SalesHeader."No.",
        WarehouseActivityLine3."Action Type"::Place);
      WarehouseActivityLine3.TESTFIELD("Bin Code",Bin2.Code);
      VerifyWhseActivityLine(
        WarehouseActivityLine3,WarehouseActivityLine3."Activity Type"::Pick,LocationSilver2.Code,SalesHeader."No.",
        WarehouseActivityLine3."Action Type"::Take,Quantity,Item."Base Unit of Measure",1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandlerSerialAndLot,QuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE PostedInventoryPutAwayWithSerialAndLotNoAndExpirationDate@159();
    BEGIN
      // Setup.
      Initialize;
      InventoryPutAwayAndPickWithSerialAndLotNo(FALSE);  // Post Inventory Pick FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandlerSerialAndLot,QuantityToCreatePageHandler,MessageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE PostedInventoryPickWithSerialAndLotNoAndExpirationDate@158();
    BEGIN
      // Setup.
      Initialize;
      InventoryPutAwayAndPickWithSerialAndLotNo(TRUE);  // Post Inventory Pick TRUE.
    END;

    LOCAL PROCEDURE InventoryPutAwayAndPickWithSerialAndLotNo@181(PostInventoryPick@1000 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
      ItemTrackingCode2@1007 : Record 6502;
      Item@1002 : Record 27;
      Item2@1006 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchaseLine2@1008 : Record 39;
      WarehouseRequest@1009 : Record 5765;
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      SalesLine2@1012 : Record 37;
      Bin@1013 : Record 7354;
      WarehouseActivityLine@1014 : Record 5767;
      WarehouseActivityHeader@1015 : Record 5766;
    BEGIN
      // Create Items with Item Tracking code, create and release Purchase Order with multiple lines, create Inventory Put-Away.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);  // Serial No. specific.
      CreateItemTrackingCode(ItemTrackingCode2,TRUE,FALSE,FALSE);  // Lot No. specific.
      CreateItemWithItemTrackingCode(Item,ItemTrackingCode.Code,TRUE);  // Serial No. specific.
      CreateItemWithItemTrackingCode(Item2,ItemTrackingCode2.Code,FALSE);  // Lot No. specific.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      TrackingQuantity := LibraryRandom.RandInt(5) + 5;  // Global Tracking Quantity.
      CreatePurchaseOrderWithMultipleLines(
        PurchaseHeader,PurchaseLine,PurchaseLine2,Item."No.",Item2."No.",LocationSilver.Code,TrackingQuantity,Bin.Code);
      Serial := TRUE;  // Global Serial.
      PurchaseLine.OpenItemTrackingLines;  // Open Tracking on Page Handler.
      Serial := FALSE;  // Global Serial.
      PurchaseLine2.OpenItemTrackingLines;  // Open Tracking on Page Handler.
      UpdateExpirationDate(LocationSilver.Code,Item."No.",Item2."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      SelectWarehouseRequestAndCreateInvPutAwayPick(
        WarehouseRequest,PurchaseHeader."No.",WarehouseRequest."Source Document"::"Purchase Order",DATABASE::"Purchase Line",
        LocationSilver.Code,TRUE);  // PutAway Created.
      FindWhseActivityLineAndInvPutAwayPick(
        WarehouseActivityHeader,WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",LocationSilver.Code,
        PurchaseHeader."No.",WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityHeader."Source Document"::"Purchase Order");

      // Exercise: Post Inventory Put Away.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);

      // Verify: Verify the posted Inventory Put Away Line. Verify the Tracking applied in the handler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyPostedInventoryPutLine(PurchaseHeader."No.",LocationSilver.Code,Item."No.",WORKDATE,Bin.Code);

      IF PostInventoryPick THEN BEGIN
        // Exercise: Create Sales Order with multiple lines and Inv. Pick. Post Invt. Pick.
        CreateSalesOrderWithMultipleLines(
          SalesHeader,SalesLine,SalesLine2,Item."No.",Item2."No.",LocationSilver.Code,TrackingQuantity);
        SelectEntries := TRUE;  // Assign value to Global variable.
        SalesLine.OpenItemTrackingLines;  // Open Tracking on Page Handler.
        SalesLine2.OpenItemTrackingLines;  // Open Tracking on Page Handler.
        CLEAR(WarehouseActivityLine);
        LibrarySales.ReleaseSalesDocument(SalesHeader);
        SelectWarehouseRequestAndCreateInvPutAwayPick(
          WarehouseRequest,SalesHeader."No.",WarehouseRequest."Source Document"::"Sales Order",DATABASE::"Sales Line",
          LocationSilver.Code,FALSE);  // Pick Created.
        FindWhseActivityLineAndInvPutAwayPick(
          WarehouseActivityHeader,WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver.Code,
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,
          WarehouseActivityHeader."Source Document"::"Sales Order");
        LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);

        // Verify: Verify the Posted Inv. Pick.
        VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver.Code,Item."No.",WORKDATE,Bin.Code);
      END;
    END;

    [Test]
    PROCEDURE WhseGetBinContentFromItemJournalLine@179();
    VAR
      Bin@1002 : Record 7354;
      Item@1001 : Record 27;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup:  Create Item, update Item Inventory.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationSilver2.Code,'',1);  // Find Bin of Index 1.
      LibraryInventory.CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationSilver2.Code,Bin.Code,Quantity,FALSE);  // Value required.

      // Exercise: Run Warehouse Get Bin Content Report from Item Journal Line.
      RunWarehouseGetBinContentReportFromItemJournalLine(Item."No.");

      // Verify: Verify Item Journal Line.
      VerifyItemJournalLine(Item."No.",Bin."Location Code",Bin.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandlerSerialNo)]
    PROCEDURE BinContentWithSerialNo@174();
    VAR
      Item@1002 : Record 27;
      Bin@1001 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order.
      Initialize;
      TrackingQuantity := LibraryRandom.RandInt(10) + 10;  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationGreen.Code,'',1);  // Find Bin of Index 1.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);  // Create Iten Tracking with Serial TRUE.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,TrackingQuantity,'',Bin.Code,TRUE);

      // Exercise: Post the Purchase Order as Receive.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Bin Content for the Bin and Tracking applied through ItemTrackingPageHandlerSerialNo.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyBinContent(Item."No.",LocationGreen.Code,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE BinContentWithLotNo@168();
    VAR
      Item@1002 : Record 27;
      Bin@1001 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Item with Item Tracking Code, create and release Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10) + 10;  // Integer value Required.
      TrackingQuantity := Quantity;
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateLotTrackedItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationSilver.Code,Quantity,'',Bin.Code,TRUE);

      // Exercise: Post the Purchase Order as Receive.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Bin Content for the Bin and Tracking applied in ItemTrackingPageHandler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      VerifyBinContent(Item."No.",LocationSilver.Code,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(LotNoWhseItemTrackingPageHandler,WhseSourceCreateDocumentHandler,MovementCreatedMessageHandler)]
    PROCEDURE RegisterWhseMovementWithLotNoAndExpirationDate@167();
    BEGIN
      // Setup.
      Initialize;
      WhseMovementFromMovementWorksheetWithLotNoAndExpirationDate(FALSE);  // Expiarion Date on Registered Pick FALSE.
    END;

    [Test]
    [HandlerFunctions(LotNoWhseItemTrackingPageHandler,WhseSourceCreateDocumentHandler,ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE RegisterPickWithWhseMovementWithLotNoAndExpirationDate@164();
    BEGIN
      // Setup.
      Initialize;
      WhseMovementFromMovementWorksheetWithLotNoAndExpirationDate(TRUE);  // Expiarion Date on Registered Pick TRUE.
    END;

    LOCAL PROCEDURE WhseMovementFromMovementWorksheetWithLotNoAndExpirationDate@162(ExpirationDateOnRegisteredPick@1014 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1000 : Record 27;
      WhseWorksheetLine@1004 : Record 7326;
      WhseWorksheetLine2@1013 : Record 7326;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityLine2@1012 : Record 5767;
      WarehouseShipmentHeader@1011 : Record 7320;
      WarehouseActivityHeader@1007 : Record 5766;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
    BEGIN
      // Create Item with Item Tracking code, Assign Lot No tracking and update Expiration Date on Whse. Item Journal. Get Bin Content on Movement Worksheet.
      // Create Movement from Movement Worksheet.
      TrackingQuantity := LibraryRandom.RandInt(10) + 10;  // Integer value Required.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,TRUE);  // Lot No True, Strict Expiration Posting TRUE.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,TrackingQuantity);
      GetBinContentFromMovementWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.");
      UpdateBinAndZoneOnWhseWorksheetLine(WhseWorksheetLine2,LocationWhite.Code);
      COMMIT;
      WhseWorksheetLine.MovementCreate(WhseWorksheetLine);
      FindWhseMovementLine(WarehouseActivityLine,Item."No.",WarehouseActivityLine."Activity Type"::Movement,LocationWhite.Code,'');
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."No.");

      // Exercise: Register The Movement created.
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify the values on Whse Movement created. Verify the Tracking applied in the handler.
      VerifyTracking := TRUE;  // Assign value to Global variable.
      WarehouseActivityLine.TESTFIELD("Expiration Date",WORKDATE);
      VerifyRegisteredWhseActivityLine(
        WarehouseActivityLine,Item."Base Unit of Measure",SalesLine."Qty. per Unit of Measure",WarehouseActivityLine.Quantity,'');

      IF ExpirationDateOnRegisteredPick THEN BEGIN
        CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",TrackingQuantity,LocationWhite.Code,'');
        SalesLine.OpenItemTrackingLines;
        CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type"::Take);

        // Exercise: Register the Pick created.
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine2."Activity Type"::Pick);

        // Verify: Verify the values on Whse Pick created.
        WarehouseActivityLine2.TESTFIELD("Expiration Date",WORKDATE);
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine2,Item."Base Unit of Measure",SalesLine."Qty. per Unit of Measure",WarehouseActivityLine2.Quantity,'');
      END;
    END;

    [Test]
    PROCEDURE ChangeQuantityOnInternalPutAwayPageAfterGetBinContentOnce@63();
    VAR
      Item@1000 : Record 27;
      WhseInternalPutAwayHeader@1002 : Record 7331;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item, create whse item journal with item then adjust it in item journal.
      // Create Whse. Internal Put-Away by Get Bin Content.
      IsInitialized := FALSE;
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      WhseInternalPutAwayHeader.INIT;
      UpdateInvtAndCreateWhseInternalPutAwayByGetBinContent(Item,WhseInternalPutAwayHeader,Quantity,1,FALSE); // Get Bin Content once.

      // Exercise: Changing quantity greater than the original one in Whse. Internal Put-Away Line by page.
      ASSERTERROR ChangeQuantityInWhseInternalPutAwayLinePage(Item."No.",Quantity + LibraryRandom.RandInt(5));

      // Verify: Verify error message.
      Assert.ExpectedError(QuantityMismatchErr);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler)]
    PROCEDURE CreatePutAwayFromInternalPutAwayPageAfterGetBinContentTwice@133();
    VAR
      Item@1001 : Record 27;
      WhseInternalPutAwayHeader@1003 : Record 7331;
    BEGIN
      // Setup : Create Item, create whse item journal with item then adjust it in item journal.
      // Create Whse. Internal Put-Away by Get Bin Content.
      IsInitialized := FALSE;
      Initialize;
      WhseInternalPutAwayHeader.INIT;
      UpdateInvtAndCreateWhseInternalPutAwayByGetBinContent(Item,WhseInternalPutAwayHeader,LibraryRandom.RandInt(10),2,TRUE); // Get Bin Content twice.

      // Exercise: Create Put-Away from Whse. Internal Put-Away page.
      ASSERTERROR CreatePutAwayFromInternalPutAwayPage(WhseInternalPutAwayHeader."No.");

      // Verify: Verify error message.
      Assert.ExpectedError(QuantityMismatchErr);
    END;

    [Test]
    [HandlerFunctions(MultipleLotNoWhseItemTrackingPageHandler,WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePutAwayFromInternalPutAwayWithLotNo@216();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      Bin@1005 : Record 7354;
      WhseInternalPutAwayHeader@1003 : Record 7331;
      WhseInternalPutAwayLine@1006 : Record 7332;
      TrackingQuantity1@1011 : Decimal;
      TrackingQuantity2@1009 : Decimal;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item tracking code with lot, create item, create whse item journal with lot tracking then adjust it in item journal.
      Initialize;
      WhseInternalPutAwayLine.INIT;
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,FALSE);
      CreateItemWithItemTrackingCode(Item,ItemTrackingCode.Code,FALSE);

      // Here the Qty will be LN and affect the sorting and verification, so Qty1 need to be in front of Qty2 in text ascending.
      TrackingQuantity1 := LibraryRandom.RandDecInRange(10,20,2);
      TrackingQuantity2 := LibraryRandom.RandDecInRange(30,40,2);
      Quantity := TrackingQuantity1 + TrackingQuantity2;
      LibraryVariableStorage.Enqueue(WhseItemTrackingPageHandlerBody::MultipleLotNo);
      LibraryVariableStorage.Enqueue(TrackingQuantity1); // This is Lot No. for 1st item tracking line.
      LibraryVariableStorage.Enqueue(TrackingQuantity2); // This is Lot No. for 2nd item tracking line.

      // Item tracking line with lot no will be arraged in MultipleLotNoWhseItemTrackingPageHandler
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);

      // Exercise: Create 1st put-away partially from internal put-away.
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",TRUE,TrackingQuantity1);
      // Create 2nd put-away from internal put-away.
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",TRUE,TrackingQuantity2);

      // Verify: Verify Lot No and quantity are correct in warehouse activity line.
      VerifyLotQuantitiesOnWhseActivityLines(
        Item."No.",FORMAT(TrackingQuantity1),TrackingQuantity1,FORMAT(TrackingQuantity2),TrackingQuantity2,TRUE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePutAwayFromInternalPutAwayWithSeriesNo@213();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      Bin@1005 : Record 7354;
      WhseInternalPutAwayHeader@1003 : Record 7331;
      WhseInternalPutAwayLine@1006 : Record 7332;
      Quantity@1002 : Integer;
    BEGIN
      // Setup: Create Item Tracking Code with series, create item, create whse item journal with lot tracking then adjust it in item journal.
      Initialize;
      WhseInternalPutAwayLine.INIT;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);
      CreateItemWithItemTrackingCode(Item,ItemTrackingCode.Code,TRUE);
      Quantity := 2; // This case, only need two series tracking lines.
      TrackingQuantity := Quantity;
      LotSpecific := FALSE; // Use SN to track.
      // Item tracking line with series no will be arraged in WhseItemTrackingLinesPageHandler.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);

      // Exercise: Create 1st put-away partially from internal put-away.
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",TRUE,1);
      // Create 2nd put-away from internal put-away.
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",TRUE,Quantity - 1);

      // Verify: Verify Series No and quantity are correct in warehouse activity line.
      // Item Tracking Lines are sorted by SN as ascending, so 1st line is 0, 2nd line is 1.
      VerifyLotQuantitiesOnWhseActivityLines(Item."No.",FORMAT(0),1,FORMAT(1),1,FALSE);
    END;

    [Test]
    [HandlerFunctions(MultipleLotNoWhseItemTrackingPageHandler)]
    PROCEDURE GetBinContentFromMovementWorksheetWithLotNo@227();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::Lot,GetBinContent::MovementWorksheet,TRUE);
    END;

    [Test]
    [HandlerFunctions(LotNoWhseItemTrackingPageHandler)]
    PROCEDURE GetBinContentFromMovementWorksheetWithPartialLotNo@223();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No. partially.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::PartialLot,GetBinContent::MovementWorksheet,FALSE);
    END;

    [Test]
    [HandlerFunctions(MultipleLotNoWhseItemTrackingPageHandler)]
    PROCEDURE GetBinContentFromInternalPutAwayWithLotNo@228();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Internal Put-away by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::Lot,GetBinContent::InternalPutAway,TRUE);
    END;

    [Test]
    [HandlerFunctions(LotNoWhseItemTrackingPageHandler)]
    PROCEDURE GetBinContentFromInternalPutAwayWithPartialLotNo@230();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Internal Put-away by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No. partially.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::PartialLot,GetBinContent::InternalPutAway,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE GetBinContentFromMovementWorksheetWithSeriesNo@240();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Series No.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::Series,GetBinContent::MovementWorksheet,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE GetBinContentFromInternalPutAwayWithSeriesNo@241();
    VAR
      TrackingType@1001 : 'None,Lot,PartialLot,Series';
      GetBinContent@1000 : 'None,MovementWorksheet,InternalPutAway';
    BEGIN
      // Test and verify Quantity in Internal Put-away by Get Bin Content is consistent with the one
      // in Item Tracking Lines when there is outstanding quantity in opened Pick document using Series No.
      GetBinContentWithLotNoAndSeriesNo(TrackingType::Series,GetBinContent::InternalPutAway,FALSE);
    END;

    LOCAL PROCEDURE GetBinContentWithLotNoAndSeriesNo@210(TrackingType@1000 : 'None,Lot,PartialLot,Series';GetBinContent@1012 : 'None,MovementWorksheet,InternalPutAway';IsMultiple@1003 : Boolean);
    VAR
      Item@1001 : Record 27;
      Bin@1014 : Record 7354;
      WhseWorksheetLine@1009 : Record 7326;
      WhseItemTrackingLine@1002 : Record 6550;
      WhseInternalPutAwayHeader@1013 : Record 7331;
      TrackingQuantity2@1010 : Decimal;
    BEGIN
      // Setup: General preparation for Get Bin Content with Lot No / Series No.
      Initialize;

      CASE TrackingType OF
        TrackingType::Lot:
          TrackingQuantity2 := InitGetBinContentWithLotNoScenario(Item,IsMultiple);
        TrackingType::PartialLot:
          TrackingQuantity2 := InitGetBinContentWithLotNoScenario(Item,IsMultiple);
        TrackingType::Series:
          BEGIN
            TrackingQuantity2 := 1;
            InitGetBinContentWithSeriesNoScenario(Item);
          END;
      END;

      // Exercise: Get Bin content on Movement Worksheet / Internal Put-away..
      CASE GetBinContent OF
        GetBinContent::MovementWorksheet:
          GetBinContentFromMovementWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.");
        GetBinContent::InternalPutAway:
          BEGIN
            Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
            CreateWhseInternalPutAway(WhseInternalPutAwayHeader,LocationWhite.Code,Bin."Zone Code",Bin.Code,Item."No.",1);
          END;
      END;

      // Verify: Verify Warehouse Item Tracking Line is correct.
      // For Lot, Item Tracking Line should only contain one line and the Quantity Base should be TrackingQuantity2.
      // For Series, Item Tracking Line also shoulbe be one line and Quantity should be 1.
      // Since the first Lot / several Series are reserved for the pending pick document.
      VerifyWhseItemTrackingLines(WhseItemTrackingLine,Item."No.",1,TrackingQuantity2);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePutAwayFromInternalPutAwayWithDedicatedBin@225();
    VAR
      Bin@1000 : Record 7354;
      Item@1001 : Record 27;
      ProductionOrder@1003 : Record 5405;
      WhseInternalPutAwayHeader@1005 : Record 7331;
      WhseInternalPutAwayLine@1006 : Record 7332;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Test to verify Put-away can be created from Internal Put-away with Dedicated Bin.

      // Setup: Create a Bin with Dedicated. Create a Release Production Order with a new item. Create and post Output Journal.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateBinWithDedicated(Bin,LocationWhite);
      LibraryInventory.CreateItem(Item);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",Quantity,LocationWhite.Code,Bin.Code);
      CreateAndPostOutputJournal(Item."No.",ProductionOrder."No.",Quantity);

      // Exercise: Create Put-away from Internal Put-away.
      WhseInternalPutAwayLine.INIT;
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,Bin."Zone Code",Bin.Code,Item."No.",TRUE,Quantity);

      // Verify: Verify Warehouse Activity Line is created successfully without any error and Bin Code is correct.
      VerifyBinCodeInWhseActivityLine(Item."No.",WarehouseActivityLine."Action Type"::Take,Bin.Code);
    END;

    [Test]
    PROCEDURE CrossDockBinCodeForWhseActivityLine@236();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1004 : Record 38;
      WarehouseReceiptLine@1003 : Record 7317;
      WhseCrossDockOpportunity@1002 : Record 5768;
      WarehouseActivityLine@1001 : Record 5767;
      Location@1007 : Record 14;
      Quantity@1000 : Integer;
    BEGIN
      IsInitialized := FALSE; // Need re-create Location due to cannot update location with entries exist.
      Initialize;

      // Setup: Update Location
      Location.GET(LocationWhite.Code);
      UpdateLocation(Location.Code,Location."Cross-Dock Bin Code",Location."Adjustment Bin Code",FALSE,TRUE);

      // Create and release Sales Order. Create and release Purchase Order, create Warehouse Receipt
      Quantity := 4 * LibraryRandom.RandInt(25);
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,Location.Code,Quantity / 4,Quantity); // Sales Quantity is "Quantity / 4", Purchase Quantity is "Quantity"

      // Exercise: Calculate Cross Dock and Post Warehouse Receipt
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDock(WhseCrossDockOpportunity,WarehouseReceiptLine."No.",Item."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Verify: Verify the Bin Code for the Cross Dock in Put-away
      VerifyCrossDockBinCodeForWhseActivityLine(
        WarehouseActivityLine."Activity Type"::"Put-away",Location.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place,Quantity / 4,Location."Cross-Dock Bin Code");

      // Exercise: Register Put-away and post Purchase Order
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify the Bin Code for the Cross Dock in Warehouse Entry
      VerifyBinCodeForWarehouseEntry(Item."No.",Location.Code,Quantity / 4,Location."Cross-Dock Bin Code");

      // Clear up the location setup
      UpdateLocation(
        Location.Code,Location."Cross-Dock Bin Code",Location."Adjustment Bin Code",
        Location."Directed Put-away and Pick",Location."Use Cross-Docking");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler,PostedPurchaseDocumentLinePageHandler)]
    PROCEDURE CalcRegenPlanWithPartialWarehousePick@237();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      ReservationEntry@1006 : Record 337;
      LocationCode@1001 : Code[10];
      PickQty@1011 : Decimal;
    BEGIN
      // Setup: Create Lot-for-Lot Item with Item Tracking Code. Create and release Purchase Order. Create and post Inventory Put Away.
      // Create and partially register Pick from Purchase Return order.
      Initialize;
      LocationCode := InitSetupItemAndLocaiton(Item);
      PickQty := LibraryRandom.RandInt(5);
      TrackingQuantity := PickQty + LibraryRandom.RandInt(5); // Integer value Required.
      CreateAndPostInvtPutAwayFromPurchaseOrder(PurchaseHeader,Item."No.",LocationCode,TrackingQuantity);
      CreateAndPartialRegisterPickFromPurchaseReturnOrder(PurchaseHeader,PickQty,0,FALSE);

      // Exercise: Calculate Regenerative Plan for Item.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Qty. to Handle(Base) on Reservation Entry.
      VerifyReservationEntry(Item."No.",ReservationEntry."Reservation Status"::Surplus,-PickQty);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE MovementWithUOMRoundingConversion@258();
    VAR
      Quantity@1000 : Decimal;
      ItemNo@1001 : Code[20];
    BEGIN
      // Test to verify there is no UOM Rounding Coversion issue when register Movement using "Get Bin Content"

      // Setup: Create a Purchase Order, create and post whse. receipt, create and register Put-away using another UOM
      Initialize;
      ItemNo := RegisterWarehousePutawayWithDifferentUOM(Quantity);

      // Exercise: Create Movement by "Get Bin Content" in Movement Worksheet, Register Movement
      CreateAndRegisterMovementByGetBinContent(ItemNo,LocationWhite.Code);

      // Verify: Verify all items moved to the new bin - Quantity (Base) is correct in BIN Contents from the Item.
      VerifyBinContentForQuantity(ItemNo,Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE InternalPutawayWithUOMRoundingConversion@257();
    VAR
      ItemNo@1014 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Test to verify there is no UOM Rounding Coversion issue when register Whse. Internal Put-away using "Get Bin Content"

      // Setup: Create a Purchase Order, create and post whse. receipt, create and register Put-away using another UOM
      Initialize;
      ItemNo := RegisterWarehousePutawayWithDifferentUOM(Quantity);

      // Exercise: Create Whse. Internal Put-away by "Get Bin Content", create and register Put-away
      CreateAndRegisterPutAwayFromInternalPutAwayByGetBinContent(ItemNo,Quantity);

      // Verify: Verify all items moved to the new bin - Quantity (Base) is correct in BIN Contents from the Item.
      VerifyBinContentForQuantity(ItemNo,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,PostedPurchaseDocumentLineHandler)]
    PROCEDURE MultiplePartialPickFromWhseShipment@249();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseShipmentLine@1005 : Record 7321;
      LocationCode@1001 : Code[10];
      PickQty@1011 : Decimal;
      PartialPickQty@1007 : Decimal;
    BEGIN
      // Setup: Create Lot-for-Lot Item with Item Tracking Code. Create and release Purchase Order. Create and post Inventory Put Away.
      Initialize;
      LocationCode := InitSetupItemAndLocaiton(Item);
      PickQty := LibraryRandom.RandIntInRange(5,10);
      PartialPickQty := LibraryRandom.RandInt(4); // To make sure not partial pick.
      TrackingQuantity := PickQty + LibraryRandom.RandIntInRange(5,10); // Integer value Required.
      LibraryVariableStorage.Enqueue(ItemTrackingLineActionType::Tracking);
      CreateAndPostInvtPutAwayFromPurchaseOrder(PurchaseHeader,Item."No.",LocationCode,TrackingQuantity);

      // Exercise: Create and partially register Pick from Purchase Return order two times.
      CreateAndPartialRegisterPickFromPurchaseReturnOrder(PurchaseHeader,PickQty,PartialPickQty,TRUE);

      // Verify: Verify Qty. to Handle(Base) on Item Tracking Lines.
      LibraryVariableStorage.Enqueue(ItemTrackingLineActionType::Verify);
      LibraryVariableStorage.Enqueue(PartialPickQty);
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      WarehouseShipmentLine.OpenItemTrackingLines; // Verify Item Tracking lines through ItemTrackingPageHandler.
    END;

    [Test]
    PROCEDURE BWCrossDockPickFromWhseShipment@293();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentHeader@1007 : Record 7320;
      Quantity@1003 : Integer;
    BEGIN
      // Setup.
      Initialize;

      Quantity := LibraryRandom.RandInt(100) + 100;
      CreateWarehouseReceiptSetup(Item,SalesHeader,PurchaseHeader,LocationSilver3.Code,Quantity,Quantity * 2);

      // Exercise.
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify.
      VerifyCrossDockBinCodeForWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,LocationSilver3.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take,Quantity,LocationSilver3."Cross-Dock Bin Code");
    END;

    [Test]
    [HandlerFunctions(MultipleLotNoWhseItemTrackingPageHandler,WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePutAwayFromInternalPutAwayWithLotNoTwice@255();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      Bin@1005 : Record 7354;
      WhseInternalPutAwayHeader@1003 : Record 7331;
      WhseInternalPutAwayLine@1006 : Record 7332;
      TrackingQuantity1@1011 : Decimal;
      TrackingQuantity2@1009 : Decimal;
      Quantity@1002 : Decimal;
      DeltaQty@1004 : Decimal;
    BEGIN
      // Setup: Create Item tracking code with lot, create item, create whse item journal with lot tracking then adjust it in item journal.
      Initialize;
      WhseInternalPutAwayLine.INIT;
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,FALSE);
      CreateItemWithItemTrackingCode(Item,ItemTrackingCode.Code,FALSE);

      // Here the Qty will be LN and affect the sorting and verification, so Qty1 need to be in front of Qty2 in text ascending.
      TrackingQuantity1 := LibraryRandom.RandDecInRange(10,20,2);
      TrackingQuantity2 := LibraryRandom.RandDecInRange(30,40,2);
      Quantity := TrackingQuantity1 + TrackingQuantity2;
      DeltaQty := LibraryRandom.RandDecInRange(1,4,2);

      LibraryVariableStorage.Enqueue(WhseItemTrackingPageHandlerBody::MultipleLotNo);
      LibraryVariableStorage.Enqueue(TrackingQuantity1); // This is Lot No. for 1st item tracking line.
      LibraryVariableStorage.Enqueue(TrackingQuantity2); // This is Lot No. for 2nd item tracking line.

      // Item tracking line with lot no will be arraged in MultipleLotNoWhseItemTrackingPageHandler
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);

      // Create 1st put-away partially from internal put-away.
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreatePutAwayFromInternalPutAwayWithLotSerialNos(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",FORMAT(TrackingQuantity1),'',TrackingQuantity1 - DeltaQty);

      // Exercise: Create 2nd put-away from internal put-away.
      CreatePutAwayFromInternalPutAwayWithLotSerialNos(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,Item."No.",FORMAT(TrackingQuantity1),'',DeltaQty);

      // Verify: Verify Lot No and quantity are correct in warehouse activity line.
      VerifyLotQuantitiesOnWhseActivityLines(
        Item."No.",FORMAT(TrackingQuantity1),TrackingQuantity1 - DeltaQty,
        FORMAT(TrackingQuantity1),DeltaQty,TRUE);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinePageHandler2,MessageHandler)]
    PROCEDURE CannotReturnPurchaseWhenOutOfInventory@274();
    VAR
      Item@1002 : Record 27;
      Location@1005 : Record 14;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      Quantity@1011 : Decimal;
      PrevNoNegInventory@1001 : Boolean;
    BEGIN
      // [FEATURE] [Prevent Negative Inventory] [Return Shipment]
      // [SCENARIO 361861] Verify that cannot post Purchase Return Order with "Prevent Negative Inventory" set and no Item on hand.

      // [GIVEN] Set "Prevent Negative Inventory" to TRUE.
      Initialize;
      PrevNoNegInventory := SetPreventNegInventory(TRUE);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandInt(5);

      // [GIVEN] Purchase and sale Item, as result zero Quantity on stock.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Location.Code,Quantity,'','',FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,Location.Code);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] Purchase Return Order, lines acquired via Get Posted Document Lines to Reverse, use Original Quantity.
      CreateAndReleasePurchReturnOrderAfterGetPostedDocumentLinesToReverse(PurchaseHeader,PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Ship Purchase Return Order.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Insufficient quantity error message appears.
      Assert.ExpectedError(InsufficientQtyErr);

      // Teardown.
      SetPreventNegInventory(PrevNoNegInventory);
    END;

    [Test]
    PROCEDURE InitializeWhseJournalLineItemTemplate@37();
    BEGIN
      // [FEATURE] [Warehouse Journal] [UT]
      // [SCENARIO 376129] Adjustment bin code is copied from location to warehouse journal line while initializig the journal line in "Item" journal template

      Initialize;
      WarehouseItemJournalSetupSetTemplateType(LocationWhite.Code,WarehouseJournalTemplate.Type::Item);
      SetupWhseJournalLine(WarehouseJournalLine,LocationWhite.Code,'');
      WarehouseJournalLine.TESTFIELD("From Bin Code",LocationWhite."Adjustment Bin Code");
    END;

    [Test]
    PROCEDURE InitializeWhseJournalLinePhysicalInventoryTemplate@38();
    BEGIN
      // [FEATURE] [Warehouse Journal] [UT]
      // [SCENARIO 376129] Adjustment bin code is copied from location to warehouse journal line while initializig the journal line in "Physical Inventory" journal template

      Initialize;
      WarehouseItemJournalSetupSetTemplateType(LocationWhite.Code,WarehouseJournalTemplate.Type::"Physical Inventory");
      SetupWhseJournalLine(WarehouseJournalLine,LocationWhite.Code,'');
      WarehouseJournalLine.TESTFIELD("From Bin Code",LocationWhite."Adjustment Bin Code");
    END;

    [Test]
    PROCEDURE InitializeWhseJournalLineReclassificationTemplate@55();
    BEGIN
      // [FEATURE] [Warehouse Journal] [UT]
      // [SCENARIO 376129] Adjustment bin code is not copied from location to warehouse journal line while initializig the journal line in "Reclassification" journal template

      Initialize;
      WarehouseItemJournalSetupSetTemplateType(LocationWhite.Code,WarehouseJournalTemplate.Type::Reclassification);
      SetupWhseJournalLine(WarehouseJournalLine,LocationWhite.Code,'');
      WarehouseJournalLine.TESTFIELD("From Bin Code",'');
    END;

    [Test]
    PROCEDURE RegisterWhseJournalLineOnLocationWithEmptyAdjmtBinCodeFails@57();
    VAR
      Location@1000 : Record 14;
      Item@1002 : Record 27;
    BEGIN
      // [FEATURE] [Warehouse Journal] [Warehouse Physical Inventory]
      // [SCENARIO 376129] Whse. Physical Inventory should not be registered if adjustment bin is removed in location setup after the journal line is initialized
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create warehouse physical inventory journal line on location with adjustment bin filled
      CreateFullWarehouseSetup(Location);

      WarehouseItemJournalSetupSetTemplateType(Location.Code,WarehouseJournalTemplate.Type::"Physical Inventory");
      SetupWhseJournalLine(WarehouseJournalLine,Location.Code,Item."No.");
      WarehouseJournalLine.INSERT(TRUE);

      // [GIVEN] Clear adjustment bin code in the location setup
      Location.VALIDATE("Adjustment Bin Code",'');
      Location.MODIFY(TRUE);

      // [WHEN] Register warehouse journal line
      ASSERTERROR
        LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);

      // [THEN] Error message: "Adjustment Bin Code must have a value in Location"
      Assert.ExpectedError(AdjmtBinCodeMustHaveValueErr);
    END;

    [Test]
    PROCEDURE RegisterPosAdjWhseItemLineWithBlankFromBinCode@298();
    VAR
      WhseDocumentNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Warehouse Journal Line]
      // [SCENARIO 379012] Warehouse Journal Line for Positive Adjustment should be registered correctly if blank "From Bin Code" is set before that.
      Initialize;

      // [GIVEN] Whse. Item Journal Line for Positive Adjustment with blank "From Bin Code".
      WhseDocumentNo := CreatePositiveAdjmtWhseItemLineWithBlankFromBin;

      // [WHEN] Register Whse. Item Journal
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // [THEN] One line is created in Warehouse Entry.
      VerifyCountOfWarehouseEntry(WhseDocumentNo);
    END;

    [Test]
    PROCEDURE RegisterNegAdjWhseItemLineWithBlankToBinCode@311();
    VAR
      WhseDocumentNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Warehouse Journal Line]
      // [SCENARIO 379012] Warehouse Journal Line for Negative Adjustment should be registered correctly if blank "To Bin Code" is set before that.
      Initialize;

      // [GIVEN] Warehouse Journal Line for Negative Adjustment with blank "To Bin Code".
      WhseDocumentNo := CreateNegAdjmtWhseItemLineWithBlankToBin;

      // [WHEN] Register Whse. Item Journal
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // [THEN] One line is created in Warehouse Entry.
      VerifyCountOfWarehouseEntry(WhseDocumentNo);
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(NewUnitOfMeasure);
      CLEAR(NewUnitOfMeasure2);
      CLEAR(NewUnitOfMeasure3);
      CLEAR(UnitOfMeasureType);
      CLEAR(TrackingQuantity);
      CLEAR(VerifyTracking);
      CLEAR(LotSpecific);
      CLEAR(Serial);
      CLEAR(SelectEntries);

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ErrorWhseItemJnlLineWrongFromBinCode@306();
    VAR
      Item@1002 : Record 27;
      Zone@1004 : Record 7300;
      Bin@1003 : Record 7354;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Verify that error message appears if "From Bin Code" is not equal to Location "Adjustment Bin Code" for Positive Adjustment.

      // Setup.
      SetupWhseItemJnlLineWrongBinCode(Zone,Bin);

      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        LocationWhite.Code,Zone.Code,Bin.Code,
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandDecInRange(10,1000,2));

      WarehouseJournalLine."From Bin Code" := Bin.Code;
      WarehouseJournalLine.MODIFY;

      // Exercise.
      ASSERTERROR
        LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(WrongBinCodeErr,WarehouseJournalLine.FIELDCAPTION("From Bin Code")));
    END;

    [Test]
    PROCEDURE ErrorWhseItemJnlLineWrongToBinCode@307();
    VAR
      Item@1005 : Record 27;
      Zone@1002 : Record 7300;
      Bin@1001 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Verify that error message appears if "To Bin Code" is not equal to Location "Adjustment Bin Code" for Negative Adjustment.

      // Setup.
      SetupWhseItemJnlLineWrongBinCode(Zone,Bin);

      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        LocationWhite.Code,Zone.Code,Bin.Code,
        WarehouseJournalLine."Entry Type"::"Negative Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandDecInRange(10,1000,2));

      WarehouseJournalLine."To Bin Code" := Bin.Code;
      WarehouseJournalLine.MODIFY;

      // Exercise.
      ASSERTERROR
        LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(WrongBinCodeErr,WarehouseJournalLine.FIELDCAPTION("To Bin Code")));
    END;

    [Test]
    PROCEDURE VerifyWhseItemJnlLineWithPosAdjBinSetup@303();
    VAR
      Item@1000 : Record 27;
      WarehouseJournalLine@1002 : Record 7311;
    BEGIN
      // Verify that after Item No. validation "From Bin Code" is updated automatically to Location "Adjustment Bin Code" for positive adjustment lines.

      // Setup.
      Initialize;
      WarehouseItemJournalSetup(LocationWhite.Code);
      LibraryInventory.CreateItem(Item);
      SetupWhseJournalLine(WarehouseJournalLine,LocationWhite.Code,Item."No.");

      // Exercise.
      WarehouseJournalLine.VALIDATE(Quantity,LibraryRandom.RandDecInRange(10,100,2));

      // Verify.
      Assert.AreEqual(
        LocationWhite."Adjustment Bin Code",WarehouseJournalLine."From Bin Code",WhseJournalLineBinCodeErr);
    END;

    [Test]
    PROCEDURE VerifyWhseItemJnlLineWithNegAdjBinSetup@314();
    VAR
      Item@1003 : Record 27;
      WarehouseJournalLine@1002 : Record 7311;
    BEGIN
      // Verify that after Item No. validation "To Bin Code" is updated automatically to Location "Adjustment Bin Code" for negative adjustment lines.

      // Setup.
      Initialize;
      WarehouseItemJournalSetup(LocationWhite.Code);
      LibraryInventory.CreateItem(Item);
      SetupWhseJournalLine(WarehouseJournalLine,LocationWhite.Code,Item."No.");

      // Exercise.
      WarehouseJournalLine.VALIDATE(Quantity,-LibraryRandom.RandDecInRange(10,100,2));

      // Verify.
      Assert.AreEqual(
        LocationWhite."Adjustment Bin Code",WarehouseJournalLine."To Bin Code",WhseJournalLineBinCodeErr);
    END;

    [Test]
    PROCEDURE CreateWhseItemJnlLineWithPosAdjBinSetup@302();
    VAR
      Item@1003 : Record 27;
      Zone@1001 : Record 7300;
      Bin@1000 : Record 7354;
      AdjustmentBinCode@1004 : Code[20];
    BEGIN
      // Verify that for scenario when adjustment bin is set for Location during Warehouse Item Journal Line creation (positive adjustment), when trying to register lines error message appears because of wrong "Adjustment Bin Code".

      // Setup.
      SetupWhseItemJnlLineWrongBinCode(Zone,Bin);
      ClearWhiteLocationAdjBin;

      CreateWhseItemJournalLineWithWrongAdjBin(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,
        Zone.Code,Bin.Code,LibraryInventory.CreateItem(Item),LibraryRandom.RandDecInRange(10,1000,2),
        AdjustmentBinCode);

      // Exercise.
      ASSERTERROR
        LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(WrongBinCodeErr,WarehouseJournalLine.FIELDCAPTION("From Bin Code")));
      SetupAdjustmentBin(LocationWhite.Code,AdjustmentBinCode); // Restore Adjustment Bin Code.
    END;

    [Test]
    PROCEDURE CreateWhseItemJnlLineWithNegAdjBinSetup@310();
    VAR
      Item@1003 : Record 27;
      Zone@1001 : Record 7300;
      Bin@1000 : Record 7354;
      BinContent@1002 : Record 7302;
      AdjBinToRestore@1005 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Verify that for scenario when adjustment bin is set for Location during Warehouse Item Journal Line creation (negative adjustment), "To Bin Code" is set correctly and after registering Warehouse Entry contains "Adjustment Bin Code".

      // Setup.
      SetupWhseItemJnlLineWrongBinCode(Zone,Bin);
      ClearWhiteLocationAdjBin;
      AdjBinToRestore := SetupAdjustmentBin(LocationWhite.Code,'');
      LibraryInventory.CreateItem(Item);

      LibraryWarehouse.CreateBinContent(
        BinContent,LocationWhite.Code,Zone.Code,Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      Quantity := LibraryRandom.RandDecInRange(10,1000,2);
      MockInventory(LocationWhite.Code,Zone.Code,Bin.Code,Item."No.",Item."Base Unit of Measure",1,Quantity * 2);

      CreateWhseItemJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,
        Zone.Code,Bin.Code,Item."No.",-1 * Quantity,
        AdjBinToRestore);

      // Exercise.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify.
      VerifyBinCodeInWhseEntry(Item."No.",LocationWhite."Adjustment Bin Code");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE WhseDocTypeAfterInvtPutAwayPost@269();
    VAR
      Item@1004 : Record 27;
      Bin@1007 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseEntry@1005 : Record 7312;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Put-Away]
      // [SCENARIO 377187] After posting Inventory Put-Away Warehouse Entry "Whse. Document Type" = " "

      // [GIVEN] Create Item, create and release Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Qty := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LocationSilver.Code,Qty,'','');
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [GIVEN] Create Inventory Put Away, autofill Qty to Handle.
      PrepareInvtPutAway(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        Item."No.",LocationSilver.Code,Bin.Code);

      // [WHEN] Post Inventory Put Away.
      PostInventoryPut(PurchaseHeader."No.");

      // [THEN] Warehouse Entry of Inventory Put-Away "Whse. Document Type" = " "
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Location Code",LocationSilver.Code);
        FINDFIRST;
        TESTFIELD("Whse. Document Type","Whse. Document Type"::" ");
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE WhseDocTypeAfterInvtPickPost@292();
    VAR
      Item@1004 : Record 27;
      Bin@1007 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1006 : Record 36;
      SalesLine@1009 : Record 37;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseRequest@1010 : Record 5765;
      WarehouseEntry@1005 : Record 7312;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Pick]
      // [SCENARIO 377187] After posting Inventory Pick Warehouse Entry "Whse. Document Type" = " "

      // [GIVEN] Create Item, create and release Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Qty := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LocationSilver.Code,Qty,'','');
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [GIVEN] Create Inventory Put Away, autofill Qty to Handle, post.
      PrepareInvtPutAway(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        Item."No.",LocationSilver.Code,Bin.Code);
      PostInventoryPut(PurchaseHeader."No.");

      // [GIVEN] Create Sales Order, release, Create Inventory Pick.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Qty,LocationSilver.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SelectWarehouseRequestAndCreateInvPutAwayPick(
        WarehouseRequest,SalesHeader."No.",WarehouseRequest."Source Document"::"Sales Order",DATABASE::"Sales Line",
        LocationSilver.Code,FALSE);  // Pick Created.
      CLEAR(WarehouseActivityHeader);
      CLEAR(WarehouseActivityLine);
      FindWhseActivityLineAndInvPutAwayPick(
        WarehouseActivityHeader,WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver.Code,
        SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityHeader."Source Document"::"Sales Order");

      // [WHEN] Post Inventory Pick
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);

      // [THEN] Warehouse Entry of Inventory Pick "Whse. Document Type" = " "
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Location Code",LocationSilver.Code);
        FINDLAST;
        TESTFIELD("Whse. Document Type","Whse. Document Type"::" ");
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerYes)]
    PROCEDURE WhseDocTypeAfterInvtMovementPost@295();
    VAR
      Item@1004 : Record 27;
      Bin@1007 : Record 7354;
      Bin2@1010 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseEntry@1005 : Record 7312;
      InternalMovementHeader@1009 : Record 7346;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Movement]
      // [SCENARIO 377187] After registering Inventory Movement Warehouse Entry "Whse. Document Type" = " "

      // [GIVEN] Create Item, create and release Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Qty := LibraryRandom.RandInt(10);  // Integer value Required.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      LibraryWarehouse.FindBin(Bin2,LocationSilver.Code,'',2);  // Find Bin of Index 1.

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LocationSilver.Code,Qty,'','');
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [GIVEN] Create Inventory Put Away, autofill Qty to Handle, post.
      PrepareInvtPutAway(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        Item."No.",LocationSilver.Code,Bin.Code);
      PostInventoryPut(PurchaseHeader."No.");

      // [GIVEN] Create Internal Movement, create Inventory Movement from Internal Movement.
      CreateInternalMovement(InternalMovementHeader,LocationSilver,Bin2,Item,Bin,Qty);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      WITH WarehouseActivityHeader DO BEGIN
        SETCURRENTKEY("Location Code");
        SETRANGE("Location Code",LocationSilver.Code);
        FINDLAST;
      END;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);

      // [WHEN] Register The Movement created.
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // [THEN] Warehouse Entry of Inventory Movement "Whse. Document Type" = " "
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Location Code",LocationSilver.Code);
        FINDFIRST;
        TESTFIELD("Whse. Document Type","Whse. Document Type"::" ");
      END;
    END;

    LOCAL PROCEDURE CreateLocationSetup@8();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LibraryWarehouse.CreateLocationWMS(LocationYellow,FALSE,TRUE,TRUE,TRUE,TRUE);  // Location Yellow: Bin Mandatory FALSE.
      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,TRUE,TRUE,FALSE,FALSE);  // Location Silver: Bin Mandatory FALSE, Require Shipment FALSE.
      LibraryWarehouse.CreateLocationWMS(LocationSilver2,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location Silver2: Bin Mandatory, Require Shipment TRUE.
      CreateAndUpdateCrossDockBWLocation(LocationSilver3);  // Location Silver3: Cross-Dock, no Directed Put-away and Pick.
      LibraryWarehouse.CreateLocationWMS(LocationGreen,TRUE,FALSE,FALSE,FALSE,FALSE);  // Location Green: Bin Mandatory TRUE.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver2.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver3.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver2.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
      LibraryWarehouse.CreateNumberOfBins(LocationGreen.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
      CreateBinsForCrossDock(LocationSilver3);
    END;

    LOCAL PROCEDURE NoSeriesSetup@10();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1002 : Record 311;
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@54();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required.
    END;

    LOCAL PROCEDURE WarehouseItemJournalSetup@52(LocationCode@1000 : Code[10]);
    BEGIN
      WarehouseItemJournalSetupSetTemplateType(LocationCode,WarehouseJournalTemplate.Type::Item);
    END;

    LOCAL PROCEDURE WarehouseItemJournalSetupSetTemplateType@200(LocationCode@1000 : Code[10];TemplateType@1001 : Option);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,TemplateType);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@9(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateAndUpdateCrossDockBWLocation@262(VAR Location@1004 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
      Location.VALIDATE("Use Cross-Docking",TRUE);
      EVALUATE(
        Location."Cross-Dock Due Date Calc.",
        '<' + FORMAT(LibraryRandom.RandIntInRange(1,12)) + 'M' + '>');
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinsForCrossDock@263(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',LibraryRandom.RandInt(3) + 3,FALSE); // Regular Bins
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',1,TRUE); // Cross-Dock Bin

      WITH Location DO BEGIN
        FindBinsForLocation(Bin,Code,FALSE);
        SetBinCode("Receipt Bin Code",Bin);
        SetBinCode("Shipment Bin Code",Bin);
        FindBinsForLocation(Bin,Code,TRUE);
        VALIDATE("Cross-Dock Bin Code",Bin.Code);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetBinCode@281(VAR BinCode@1002 : Code[20];VAR Bin@1000 : Record 7354);
    BEGIN
      BinCode := Bin.Code;
      Bin.NEXT;
    END;

    LOCAL PROCEDURE FindBinsForLocation@285(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[20];CrossDock@1002 : Boolean);
    BEGIN
      WITH Bin DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Cross-Dock Bin",CrossDock);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE AssignNoSeriesForItemJournalBatch@53(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignSerialNoAndLotNoToWhseActivityLine@48(VAR WarehouseActivityLine@1000 : Record 5767;ActionType@1001 : Option;ItemNo@1005 : Code[20];LocationCode@1004 : Code[10];SourceNo@1003 : Code[20]);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      FindWhseEntry(WarehouseEntry,ItemNo,LocationCode);
      FindWhseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationCode,SourceNo,ActionType);
      WarehouseEntry.FINDFIRST;
      WarehouseActivityLine.FINDFIRST;
      AssignSerialNoAndLotNo(WarehouseActivityLine,WarehouseEntry);  // For first line.
      FindNextLineAndAssignSerialNoAndLotNo(WarehouseActivityLine,WarehouseEntry);  // For Second Line.
      FindNextLineAndAssignSerialNoAndLotNo(WarehouseActivityLine,WarehouseEntry);  // For Last line.
    END;

    LOCAL PROCEDURE AssignSerialNoAndLotNo@47(VAR WarehouseActivityLine@1000 : Record 5767;VAR WarehouseEntry@1001 : Record 7312);
    BEGIN
      WarehouseActivityLine.VALIDATE("Serial No.",WarehouseEntry."Serial No.");
      WarehouseActivityLine.VALIDATE("Lot No.",WarehouseEntry."Lot No.");
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignTrackingToMultipleWhseReceiptLines@97(SourceNo@1001 : Code[20];SourceDocument@1000 : Option);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FilterWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,SourceDocument);
      WarehouseReceiptLine.FINDSET;
      REPEAT
        WarehouseReceiptLine.OpenItemTrackingLines;  // Open Tracking on Page Handler.
      UNTIL WarehouseReceiptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithVariant@112(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1005 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];VariantCode@1006 : Code[10]);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@12(VAR PurchaseHeader@1001 : Record 38;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal;VariantCode@1005 : Code[10];BinCode@1006 : Code[20];Tracking@1007 : Boolean);
    VAR
      PurchaseLine@1000 : Record 39;
      Vendor@1008 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity,VariantCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      IF Tracking THEN
        PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithWhseReceipt@289(VAR PurchaseHeader@1005 : Record 38;VAR WarehouseReceiptLine@1003 : Record 7317;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CalculateCrossDock@13(VAR WhseCrossDockOpportunity@1002 : Record 5768;No@1001 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      CalculateCrossDockSimple(No);
      WhseCrossDockOpportunity.SETCURRENTKEY("Item No.","Location Code");
      WhseCrossDockOpportunity.SETRANGE("Item No.",ItemNo);
      WhseCrossDockOpportunity.SETRANGE("Location Code",LocationWhite.Code);
      WhseCrossDockOpportunity.FINDFIRST;
      WhseCrossDockOpportunity.AutoFillQtyToCrossDock(WhseCrossDockOpportunity);
      WhseCrossDockOpportunity.CALCSUMS("Qty. to Cross-Dock");
    END;

    LOCAL PROCEDURE CalculateCrossDockSimple@267(No@1001 : Code[20]);
    VAR
      WarehouseReceipt@1000 : TestPage 5768;
    BEGIN
      WarehouseReceipt.OPENEDIT;
      WarehouseReceipt.FILTER.SETFILTER("No.",No);
      WarehouseReceipt.CalculateCrossDock.INVOKE;
    END;

    LOCAL PROCEDURE CalculateCrossDockOpportunityForWhseReceipt@312(VAR WhseCrossDockOpportunity@1000 : Record 5768;WhseReceiptLineNo@1007 : Code[20]);
    BEGIN
      CalculateCrossDockSimple(WhseReceiptLineNo);
      WITH WhseCrossDockOpportunity DO BEGIN
        SETRANGE("Source Name/No.",WhseReceiptLineNo);
        FINDFIRST;
        AutoFillQtyToCrossDock(WhseCrossDockOpportunity);
        FIND;
      END;
    END;

    LOCAL PROCEDURE ChangeExpirationDateOnActivityLine@90(WarehouseActivityLine@1000 : Record 5767);
    BEGIN
      REPEAT
        WarehouseActivityLine.VALIDATE("Expiration Date",CALCDATE('<' + '+' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));  // Value required.
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeQuantityInWhseInternalPutAwayLinePage@222(ItemNo@1003 : Code[20];NewQuantity@1001 : Decimal);
    VAR
      WhseInternalPutAwayLine@1000 : TestPage 7355;
    BEGIN
      WhseInternalPutAwayLine.OPENEDIT;
      WhseInternalPutAwayLine.FILTER.SETFILTER("Item No.",ItemNo);
      WhseInternalPutAwayLine.Quantity.SETVALUE(NewQuantity);
      WhseInternalPutAwayLine.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShipment@14(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1002 : Record 7320);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateNegAdjmtWhseItemLineWithBlankToBin@319() : Code[20];
    VAR
      Item@1000 : Record 27;
      Zone@1002 : Record 7300;
      Bin@1001 : Record 7354;
      BinContent@1006 : Record 7302;
      ItemQty@1005 : Decimal;
    BEGIN
      ItemQty := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      WarehouseItemJournalSetup(LocationWhite.Code);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      FindBinWithZone(Bin,LocationWhite.Code,Zone.Code);

      LibraryWarehouse.CreateBinContent(
        BinContent,LocationWhite.Code,Zone.Code,Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      MockInventory(
        LocationWhite.Code,Zone.Code,Bin.Code,Item."No.",Item."Base Unit of Measure",
        LibraryInventory.GetQtyPerForItemUOM(Item."No.",Item."Base Unit of Measure"),ItemQty);

      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        LocationWhite.Code,Zone.Code,Bin.Code,WarehouseJournalLine."Entry Type"::"Negative Adjmt.",
        Item."No.",-ItemQty);

      WarehouseJournalLine.VALIDATE("To Bin Code",'');
      WarehouseJournalLine.MODIFY(TRUE);
      EXIT(WarehouseJournalLine."Whse. Document No.");
    END;

    LOCAL PROCEDURE CreatePositiveAdjmtWhseItemLineWithBlankFromBin@320() : Code[20];
    VAR
      Item@1000 : Record 27;
      Zone@1002 : Record 7300;
      Bin@1001 : Record 7354;
    BEGIN
      WarehouseItemJournalSetup(LocationWhite.Code);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      FindBinWithZone(Bin,LocationWhite.Code,Zone.Code);

      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        LocationWhite.Code,Zone.Code,Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(10,2));

      WarehouseJournalLine.VALIDATE("From Bin Code",'');
      WarehouseJournalLine.MODIFY(TRUE);
      EXIT(WarehouseJournalLine."Whse. Document No.");
    END;

    LOCAL PROCEDURE CreateRequisitionLine@76(VAR RequisitionLine@1001 : Record 246;TemplateType@1000 : Option);
    VAR
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",TemplateType);
      RequisitionWkshName.FINDFIRST;
      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@99(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1002 : Code[20];QtyPerUnitOfMeasure@1003 : Integer);
    VAR
      UnitOfMeasure@1001 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE CreateSalesOrder@44(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1005 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,0D);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@72(VAR SalesHeader@1000 : Record 36;ItemNo@1005 : Code[20];Quantity@1006 : Decimal;LocationCode@1001 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.ShowReservation;  // Using ReservationHandler to reserve.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithShipmentAndPartialPick@282(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;PickedQuantity@1004 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1008 : Record 5767;
    BEGIN
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode,'');
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      FindWarehouseActivityNo(WarehouseActivityLine,SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",PickedQuantity);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndReleaseSpecialOrder@175(VAR SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20];Quantity@1001 : Decimal;LocationCode@1002 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      UpdatePurchasingCodeOnSalesLine(SalesHeader);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateRequisitionLineAndCarryOutReqWorksheet@96(ItemNo@1001 : Code[20];VendorNo@1004 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Template Type"::"Req.");
      LibraryPlanning.GetSpecialOrder(RequisitionLine,ItemNo);

      // Update vendor No on Requisition Line.
      UpdateRequisitionLine(RequisitionLine,VendorNo,ItemNo);
      LibraryPlanning.CarryOutReqWksh(
        RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,
        STRSUBSTNO(ReferenceText,RequisitionLine.FIELDCAPTION("Vendor No."),RequisitionLine."Vendor No."));
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnWhseActivityLine@61(VAR WarehouseActivityLine@1000 : Record 5767;ActivityType@1003 : Option;LocationCode@1001 : Code[10];SourceNo@1002 : Code[20]);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,WarehouseActivityLine."Action Type"::Place);
      REPEAT
        LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptSetup@32(VAR Item@1000 : Record 27;VAR SalesHeader@1001 : Record 36;VAR PurchaseHeader@1002 : Record 38;LocationCode@1003 : Code[10];SalesQuantity@1004 : Integer;PurchaseQuantity@1006 : Integer);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",SalesQuantity,LocationCode,'');
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationCode,PurchaseQuantity,'','',FALSE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateOrderWithItemVariantSetup@88(VAR SalesHeader@1004 : Record 36;VAR PurchaseHeader@1002 : Record 38;ItemNo@1005 : Code[20];VariantCode@1008 : Code[10];LocationCode@1007 : Code[10];Quantity@1006 : Integer);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode,VariantCode);
      CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity,VariantCode,'',FALSE)
    END;

    LOCAL PROCEDURE CreateItemWithProductGroup@109(VAR Item@1000 : Record 27;VAR ProductGroup@1002 : Record 5723);
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateItemWithProductGroup(Item,ProductGroup);
    END;

    LOCAL PROCEDURE CreateItemWithReorderingPolicy@242(VAR Item@1001 : Record 27;ReorderingPolicy@1002 : Option;IncludeInventory@1003 : Boolean);
    BEGIN
      CreateLotTrackedItem(Item);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Include Inventory",IncludeInventory);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinWithWarehouseClass@183(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];PutAway@1005 : Boolean;Pick@1004 : Boolean;Receive@1003 : Boolean;Ship@1002 : Boolean;WarehouseClassCode@1008 : Code[10]);
    VAR
      Zone@1007 : Record 7300;
      BinTypeCode@1009 : Code[10];
    BEGIN
      BinTypeCode := LibraryWarehouse.SelectBinType(Receive,Ship,PutAway,Pick);
      FindZone(Zone,LocationCode,BinTypeCode);
      LibraryWarehouse.CreateBin(
        Bin,LocationCode,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),Zone.Code,BinTypeCode);
      UpdateBinWithWarehouseClassCode(Bin,WarehouseClassCode);
    END;

    LOCAL PROCEDURE CreateAndUpdateBinCodeOnWarehouseReceiptLine@173(VAR Bin@1000 : Record 7354;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];WarehouseClassCode@1005 : Code[10]);
    BEGIN
      CreateBinWithWarehouseClass(Bin,LocationCode,FALSE,FALSE,TRUE,FALSE,WarehouseClassCode);  // Bin Type Put Away.
      UpdateBinOnWarehouseReceiptLine(ItemNo,Bin.Code);
    END;

    LOCAL PROCEDURE CreateAndUpdateBinCodeOnWarehouseShipmentLine@180(VAR Bin@1000 : Record 7354;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];WarehouseClassCode@1005 : Code[10]);
    BEGIN
      CreateBinWithWarehouseClass(Bin,LocationCode,FALSE,FALSE,FALSE,TRUE,WarehouseClassCode);  // Bin Type Pick.
      UpdateBinOnWarehouseShipmentLine(ItemNo,Bin.Code);
    END;

    LOCAL PROCEDURE CreateProductGroup@155(VAR ProductGroup@1000 : Record 5723);
    VAR
      WarehouseClass@1001 : Record 7304;
    BEGIN
      LibraryWarehouse.CreateWarehouseClass(WarehouseClass);
      LibraryInventory.CreateProductGroup(ProductGroup,'');
      ProductGroup.VALIDATE("Warehouse Class Code",WarehouseClass.Code);
      ProductGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleItemUnitOfMeasureSetup@116(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1001 : Record 5404;VAR ItemUnitOfMeasure2@1002 : Record 5404;VAR ItemUnitOfMeasure3@1003 : Record 5404);
    VAR
      QtyPerUnitOfMeasure@1004 : Integer;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",1);  // Value required.
      QtyPerUnitOfMeasure := 11; // Set QtyPerUnitOfMeasure as a prime number to repro UOM rounding conversion Issue
      CreateItemUnitOfMeasure(ItemUnitOfMeasure2,Item."No.",QtyPerUnitOfMeasure);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure3,Item."No.",2 * QtyPerUnitOfMeasure);
      Item.VALIDATE("Purch. Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Put-away Unit of Measure Code",ItemUnitOfMeasure2.Code);
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure3.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSpecialOrderWithItemUnitOfMeasureSetup@89(VAR PurchaseHeader@1000 : Record 38;VAR SalesHeader@1005 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      Vendor@1004 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndReleaseSpecialOrder(SalesHeader,ItemNo,Quantity,LocationCode);
      CreateRequisitionLineAndCarryOutReqWorksheet(ItemNo,Vendor."No.");
      FindPurchaseHeader(PurchaseHeader,Vendor."No.",LocationCode);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@42(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity,'');
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchReturnOrderAfterGetPostedDocumentLinesToReverse@261(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",VendorNo);
      PurchaseHeader.GetPstdDocLinesToRevere;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@40(VAR ItemTrackingCode@1000 : Record 6502;Lot@1001 : Boolean;Serial@1002 : Boolean;StrictExpirationPosting@1003 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithTrackingCode@35(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLinesAndReleaseDocument@104(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;NoOfLine@1006 : Integer;Tracking@1007 : Boolean);
    VAR
      PurchaseLine@1004 : Record 39;
      Counter@1005 : Integer;
    BEGIN
      FOR Counter := 1 TO NoOfLine DO BEGIN
        CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity,'');
        IF Tracking THEN
          PurchaseLine.OpenItemTrackingLines;
      END;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocationAndVariant@101(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal;VariantCode@1005 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotTrackedItem@93(VAR Item@1001 : Record 27);
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,FALSE);  // Create Iten Tracking with Lot TRUE.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateAndRegisterWarehouseReclassJournal@114(ItemNo@1001 : Code[20];LocationCode@1006 : Code[10];Quantity@1007 : Decimal);
    VAR
      Bin@1004 : Record 7354;
      BinContent@1002 : Record 7302;
      WarehouseJournalBatch@1003 : Record 7310;
      WarehouseJournalTemplate@1005 : Record 7309;
      WhseReclassificationJournal@1000 : TestPage 7365;
    BEGIN
      FindBinContent(BinContent,ItemNo);
      FindBinWithZone(Bin,LocationCode,BinContent."Zone Code");
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Reclassification,LocationCode);
      WhseReclassificationJournal.OPENEDIT;
      WhseReclassificationJournal.CurrentLocationCode.SETVALUE(LocationCode);
      WhseReclassificationJournal.CurrentJnlBatchName.SETVALUE(WarehouseJournalBatch.Name);
      WhseReclassificationJournal."Whse. Document No.".SETVALUE(WarehouseJournalBatch.Name);
      WhseReclassificationJournal."Item No.".SETVALUE(ItemNo);
      WhseReclassificationJournal."From Zone Code".SETVALUE(BinContent."Zone Code");
      WhseReclassificationJournal."From Bin Code".SETVALUE(BinContent."Bin Code");
      WhseReclassificationJournal."To Zone Code".SETVALUE(BinContent."Zone Code");
      WhseReclassificationJournal."To Bin Code".SETVALUE(Bin.Code);
      WhseReclassificationJournal.Quantity.SETVALUE(Quantity);
      WhseReclassificationJournal.ItemTrackingLines.INVOKE;
      WhseReclassificationJournal.Register.INVOKE;  // Invoke WhseItemTrackingLinesHandler Handler.
    END;

    LOCAL PROCEDURE CreateWarehouseJournalBatch@113(VAR WarehouseJournalBatch@1000 : Record 7310;WarehouseJournalTemplateType@1003 : Option;LocationCode@1002 : Code[10]);
    VAR
      WarehouseJournalTemplate@1001 : Record 7309;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplateType);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@132(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithUpdatedBinAndPickSetup@147(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;VAR WarehouseShipmentHeader@1006 : Record 7320;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1005 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Bin Code",BinCode);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePutAwayWithPurchaseOrderSetup@157(VAR PurchaseHeader@1000 : Record 38;VAR WarehouseReceiptLine@1002 : Record 7317;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      CreateAndReleasePurchaseOrderWithWhseReceipt(
        PurchaseHeader,WarehouseReceiptLine,ItemNo,LocationCode,Quantity);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@194(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10];SerialNo@1002 : Boolean);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      IF SerialNo THEN
        Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode)
      ELSE
        Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@193(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;VariantCode@1005 : Code[10];BinCode@1006 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocationVariantAndBinCode(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity,VariantCode,BinCode);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocationVariantAndBinCode@192(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal;VariantCode@1005 : Code[10];BinCode@1006 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleLines@187(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;VAR SalesLine2@1002 : Record 37;ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];LocationCode@1005 : Code[10];Quantity@1006 : Decimal);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      CreateSalesLine(SalesHeader,SalesLine2,ItemNo2,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleLines@185(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VAR PurchaseLine2@1006 : Record 39;ItemNo@1002 : Code[20];ItemNo2@1007 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;BinCode@1005 : Code[20]);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity,'',BinCode);
      CreatePurchaseLineWithLocationVariantAndBinCode(PurchaseHeader,PurchaseLine2,ItemNo2,LocationSilver.Code,Quantity,'',BinCode);
    END;

    LOCAL PROCEDURE CreateSalesLine@191(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPutAway@156(VAR WhseInternalPutAwayHeader@1001 : Record 7331;LocationCode@1006 : Code[10];FromZonecode@1002 : Code[10];FromBinCode@1003 : Code[20];ItemNo@1000 : Code[20];x@1004 : Integer);
    VAR
      i@1005 : Integer;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationCode);
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",FromZonecode);
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",FromBinCode);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
      FOR i := 1 TO x DO
        GetBinContentFromWhseInternalPutAway(WhseInternalPutAwayHeader,LocationCode,ItemNo);
    END;

    LOCAL PROCEDURE CreateWhseInternalPutAwayWithItemTracking@265(VAR WhseInternalPutAwayHeader@1001 : Record 7331;LocationCode@1006 : Code[10];FromZonecode@1002 : Code[10];FromBinCode@1003 : Code[20];ItemNo@1000 : Code[20];Qty@1008 : Decimal;LotNo@1004 : Code[20];SerialNo@1007 : Code[20]);
    VAR
      WhseInternalPutAwayLine@1005 : Record 7332;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationCode);
      WITH WhseInternalPutAwayHeader DO BEGIN
        VALIDATE("From Zone Code",FromZonecode);
        VALIDATE("From Bin Code",FromBinCode);
        MODIFY(TRUE);
      END;

      LibraryWarehouse.CreateWhseInternalPutawayLine(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo,Qty);
      LibraryVariableStorage.Enqueue(WhseItemTrackingPageHandlerBody::LotSerialNo);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(SerialNo);
      LibraryVariableStorage.Enqueue(Qty);
      WhseInternalPutAwayLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWhseReceiptForCrossDockedItem@283(VAR WarehouseReceiptLine@1004 : Record 7317;ReceiptQty@1000 : Decimal;SalesQty@1003 : Decimal;CrossDockedQty@1002 : Decimal);
    VAR
      Item@1011 : Record 27;
      Location@1010 : Record 14;
      WarehouseEmployee@1009 : Record 7301;
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      PurchaseHeader@1006 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateFullWarehouseSetup(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      CreateAndReleaseSalesOrderWithVariant(
        SalesHeader,SalesLine,Item."No.",SalesQty,Location.Code,'');

      CreateAndReleasePurchaseOrderWithWhseReceipt(
        PurchaseHeader,WarehouseReceiptLine,Item."No.",Location.Code,CrossDockedQty);
      CalculateCrossDockSimple(WarehouseReceiptLine."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      CreateAndReleasePurchaseOrderWithWhseReceipt(
        PurchaseHeader,WarehouseReceiptLine,Item."No.",Location.Code,ReceiptQty);
    END;

    LOCAL PROCEDURE CreatePickFromPurchaseReturnOrder@245(VAR PurchaseHeader@1009 : Record 38);
    VAR
      WarehouseShipmentLine@1005 : Record 7321;
      WarehouseShipmentHeader@1013 : Record 7320;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      FindWhseShipmentNo(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndPartialRegisterPickFromPurchaseReturnOrder@244(VAR PurchaseHeader@1009 : Record 38;Qty@1000 : Decimal;PartialQty@1003 : Decimal;MultiplePick@1002 : Boolean);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      CreateAndReleasePurchReturnOrderAfterGetPostedDocumentLinesToReverse(PurchaseHeader,PurchaseHeader."Buy-from Vendor No.");
      CreatePickFromPurchaseReturnOrder(PurchaseHeader);
      FindWarehouseActivityNo(WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      UpdateQuantityToHandleOnWhseActivityLines(WarehouseActivityLine,Qty);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      IF MultiplePick THEN BEGIN
        PostWarehouseShipment(PurchaseHeader."No.",WarehouseShipmentLine."Source Document"::"Purchase Return Order");
        FindWarehouseActivityNo(WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        UpdateQuantityToHandleOnWhseActivityLines(WarehouseActivityLine,PartialQty);
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostInvtPutAwayFromPurchaseOrder@243(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Qty@1004 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      WarehouseActivityHeader@1005 : Record 5766;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Qty,'','',TRUE);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      FindWarehouseActivityNo(WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      PostInventoryPut(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndRegisterMovementByGetBinContent@252(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WhseWorksheetLine@1001 : Record 7326;
      WarehouseActivityHeader@1000 : Record 5766;
      WarehouseActivityLine@1005 : Record 5767;
      Bin@1004 : Record 7354;
    BEGIN
      // Create Movement by "Get Bin Content" in Movement Worksheet
      GetBinContentFromMovementWorksheet(WhseWorksheetLine,LocationCode,ItemNo);
      COMMIT;
      WhseWorksheetLine.MovementCreate(WhseWorksheetLine);

      // Update Bin Code for Place line and Register Movement
      CreateBinWithWarehouseClass(Bin,LocationWhite.Code,FALSE,FALSE,TRUE,FALSE,''); // Bin Type Put-away, with Warehouse Class Code = Blank
      UpdatePlaceBinCodeInMovement(WarehouseActivityLine,ItemNo,LocationCode,Bin.Code);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromInternalPutAwayByGetBinContent@259(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      WhseInternalPutAwayHeader@1007 : Record 7331;
      WhseInternalPutAwayLine@1001 : Record 7332;
      WarehouseActivityLine@1005 : Record 5767;
      Bin@1004 : Record 7354;
    BEGIN
      // Create Whse. Internal Put-away by "Get Bin Content"
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      WhseInternalPutAwayLine.INIT;
      CreatePutAwayFromInternalPutAway(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,LocationWhite.Code,Bin."Zone Code",Bin.Code,ItemNo,FALSE,Quantity);

      // Register Put-away
      RegisterWarehouseActivityWithItemNo(ItemNo,WarehouseActivityLine."Activity Type"::"Put-away",
        LocationWhite.Code,'',WarehouseActivityLine."Action Type"::Place);
    END;

    LOCAL PROCEDURE CreatePutAwayFromInternalPutAwayPage@141(WhseInternalPutAwayHeaderNo@1001 : Code[20]);
    VAR
      WhseInternalPutAwayPage@1000 : TestPage 7354;
    BEGIN
      WhseInternalPutAwayPage.OPENEDIT;
      WhseInternalPutAwayPage.FILTER.SETFILTER("No.",WhseInternalPutAwayHeaderNo);
      WhseInternalPutAwayPage.CreatePutAway.INVOKE;
    END;

    LOCAL PROCEDURE CreatePutAwayFromInternalPutAway@217(VAR WhseInternalPutAwayHeader@1000 : Record 7331;WhseInternalPutAwayLine@1001 : Record 7332;LocationCode@1008 : Code[10];ZoneCode@1003 : Code[10];BinCode@1007 : Code[20];ItemNo@1002 : Code[20];UpdateQty@1004 : Boolean;NewQuantity@1006 : Decimal);
    VAR
      WhseIntPutAwayRelease@1005 : Codeunit 7316;
    BEGIN
      CreateWhseInternalPutAway(WhseInternalPutAwayHeader,LocationCode,ZoneCode,BinCode,ItemNo,1);
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      WhseInternalPutAwayLine.FINDFIRST;
      IF UpdateQty THEN
        WhseInternalPutAwayLine.VALIDATE(Quantity,NewQuantity);
      WhseInternalPutAwayLine.MODIFY(TRUE);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);
    END;

    LOCAL PROCEDURE CreatePutAwayFromInternalPutAwayWithLotSerialNos@278(VAR WhseInternalPutAwayHeader@1000 : Record 7331;WhseInternalPutAwayLine@1001 : Record 7332;LocationCode@1008 : Code[10];ZoneCode@1003 : Code[10];BinCode@1007 : Code[20];ItemNo@1002 : Code[20];LotNo@1004 : Code[20];SerialNo@1009 : Code[20];NewQuantity@1006 : Decimal);
    VAR
      WhseIntPutAwayRelease@1005 : Codeunit 7316;
    BEGIN
      CreateWhseInternalPutAwayWithItemTracking(
        WhseInternalPutAwayHeader,LocationCode,ZoneCode,BinCode,ItemNo,NewQuantity,LotNo,SerialNo);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);

      WITH WhseInternalPutAwayLine DO BEGIN
        SETRANGE("No.",WhseInternalPutAwayHeader."No.");
        FINDFIRST;
        CreatePutAwayDoc(WhseInternalPutAwayLine);
      END;
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@234(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@238(ItemNo@1001 : Code[20];ProductionOrderNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate,ItemJournalBatch,ItemNo,ProductionOrderNo);
      ItemJournalLine.VALIDATE("Output Quantity",Quantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE DefineQuantitiesForPurchaseAndSalesDocuments@67(VAR InventoryQty@1000 : Decimal;VAR PurchaseQty@1001 : Decimal;VAR SalesQty@1002 : Decimal;VAR PickQty@1003 : Decimal;VAR CrossDockQty@1004 : Decimal);
    BEGIN
      InventoryQty := LibraryRandom.RandIntInRange(41,80);
      PurchaseQty := LibraryRandom.RandIntInRange(5000,10000);
      SalesQty := LibraryRandom.RandIntInRange(100,200);
      PickQty := LibraryRandom.RandIntInRange(10,20);
      CrossDockQty := LibraryRandom.RandIntInRange(10,20);
    END;

    LOCAL PROCEDURE DefineSupplyAndDemandQtys@284(VAR PurchaseQty@1000 : Decimal;VAR SalesQty@1001 : Decimal;VAR CrossDockQty@1002 : Decimal);
    BEGIN
      PurchaseQty := LibraryRandom.RandIntInRange(100,200);
      SalesQty := LibraryRandom.RandIntInRange(50,80);
      CrossDockQty := LibraryRandom.RandIntInRange(10,20);
    END;

    LOCAL PROCEDURE DeleteWhseActivityLine@160(VAR WarehouseActivityLine@1000 : Record 5767;LocationCode@1001 : Code[10];SourceNo@1002 : Code[20]);
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteWhseShipmentLine@163(VAR WarehouseShipmentLine@1000 : Record 7321;VAR WarehouseShipmentHeader@1002 : Record 7320;SourceNo@1001 : Code[20]);
    BEGIN
      FindWhseShipmentNo(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
      WarehouseShipmentLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE RecreatePickFromSalesOrder@177(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1003 : Record 37;VAR WarehouseShipmentHeader@1001 : Record 7320;Quantity@1002 : Decimal);
    BEGIN
      UpdateQuantityOnSalesLine(SalesHeader,SalesLine,Quantity);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE FindZone@16(VAR Zone@1002 : Record 7300;LocationCode@1000 : Code[10];BinTypeCode@1001 : Code[20]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseActivityLine@17(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20];ActionType@1004 : Option);
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@18(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseActivityLineByItem@313(VAR WarehouseActivityLine@1004 : Record 5767;ActivityType@1003 : Option;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];ActionType@1000 : Option);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Action Type",ActionType);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShipmentNo@20(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@79(VAR PurchaseHeader@1000 : Record 38;BuyFromVendorNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      PurchaseHeader.SETRANGE("Location Code",LocationCode);
      PurchaseHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@33(VAR SalesLine@1001 : Record 37;DocumentType@1000 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisterWarehouseActivityLine@64(VAR RegisteredWhseActivityLine@1000 : Record 5773;ActivityType@1001 : Option;ActionType@1003 : Option;LocationCode@1002 : Code[10];SourceNo@1004 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Location Code",LocationCode);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseEntry@50(VAR WarehouseEntry@1000 : Record 7312;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",LocationCode);
      WarehouseEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
      WarehouseEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindNextLineAndAssignSerialNoAndLotNo@45(VAR WarehouseActivityLine@1003 : Record 5767;VAR WarehouseEntry@1002 : Record 7312);
    BEGIN
      WarehouseEntry.NEXT;
      WarehouseActivityLine.NEXT;
      AssignSerialNoAndLotNo(WarehouseActivityLine,WarehouseEntry);
    END;

    LOCAL PROCEDURE FilterWarehouseReceiptLine@102(VAR WarehouseReceiptLine@1001 : Record 7317;SourceNo@1000 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@151(VAR WarehouseActivityHeader@1000 : Record 5766;SourceNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityHeader.SETRANGE("Source No.",SourceNo);
      WarehouseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBin@358(VAR Bin@1003 : Record 7354;LocationCode@1004 : Code[10];IsCrossDock@1000 : Boolean);
    VAR
      Zone@1001 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,IsCrossDock));
      FindBinWithZone(Bin,LocationCode,Zone.Code);
    END;

    LOCAL PROCEDURE FindBinContent@51(VAR BinContent@1000 : Record 7302;ItemNo@1001 : Code[20]);
    BEGIN
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinWithZone@11(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10];ZoneCode@1002 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",ZoneCode);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseMovementLine@182(VAR WarehouseActivityLine@1001 : Record 5767;ItemNo@1004 : Code[20];ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWhseActivityLineAndInvPutAwayPick@198(VAR WarehouseActivityHeader@1000 : Record 5766;VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1002 : Option;LocationCode@1003 : Code[10];DocumentNo@1004 : Code[20];ActionType@1005 : Option;SourceDocument@1006 : Option);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,DocumentNo,ActionType);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      FindInventoryPutAwayPick(WarehouseActivityHeader,ActivityType,SourceDocument,DocumentNo);
    END;

    LOCAL PROCEDURE FindInventoryPutAwayPick@188(VAR WarehouseActivityHeader@1001 : Record 5766;Type@1002 : Option;SourceDocument@1003 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityHeader.SETRANGE("Source No.",SourceNo);
      WarehouseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE GetBinContentFromMovementWorksheet@125(VAR WhseWorksheetLine@1002 : Record 7326;LocationCode@1003 : Code[10];ItemNo@1006 : Code[20]);
    VAR
      BinContent@1001 : Record 7302;
      WhseWorksheetName@1005 : Record 7327;
      WhseInternalPutAwayHeader@1007 : Record 7331;
    BEGIN
      CreateWhseWorksheetName(WhseWorksheetName,LocationCode);
      WhseWorksheetLine.INIT;
      WhseWorksheetLine.VALIDATE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.VALIDATE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.VALIDATE("Location Code",LocationCode);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      WhseInternalPutAwayHeader.INIT;
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,0);
    END;

    LOCAL PROCEDURE GetBinContentFromWhseInternalPutAway@189(WhseInternalPutAwayHeader@1002 : Record 7331;LocationCode@1004 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      BinContent@1000 : Record 7302;
      WhseWorksheetLine@1001 : Record 7326;
    BEGIN
      WhseWorksheetLine.INIT;
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      // Use 1 for getting bin content from Whse. Internal Put-away.
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,1);
    END;

    LOCAL PROCEDURE InitGetBinContentWithLotNoScenario@212(VAR Item@1000 : Record 27;IsMultiple@1002 : Boolean) TrackingQuantity2 : Decimal;
    VAR
      ItemTrackingCode@1001 : Record 6502;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      TrackingQuantity1@1003 : Decimal;
      ActionType@1007 : ',Take,Place';
    BEGIN
      // Create Item with Item Tracking Code for Lot. Get Bin code from White location.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE,FALSE); // Set Lot No. as TRUE.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);

      // Update Inventory with Location and Lot No.
      TrackingQuantity1 := LibraryRandom.RandIntInRange(5,20);
      TrackingQuantity2 := LibraryRandom.RandIntInRange(30,40);
      TrackingQuantity := TrackingQuantity1 + TrackingQuantity2;
      IF IsMultiple THEN BEGIN
        LibraryVariableStorage.Enqueue(WhseItemTrackingPageHandlerBody::MultipleLotNo);
        LibraryVariableStorage.Enqueue(TrackingQuantity1); // This is Lot No. and Quantity (Base) for 1st item tracking line.
        LibraryVariableStorage.Enqueue(TrackingQuantity2); // This is Lot No. and Quantity (Base) for 2nd item tracking line.
      END;
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,TrackingQuantity);

      // Create Shipment from Sales Order. Create Pick from Shipment.
      CreateSalesOrderWithUpdatedBinAndPickSetup(
        SalesHeader,SalesLine,WarehouseShipmentHeader,Item."No.",LocationWhite.Code,'',TrackingQuantity1);

      // Update Lot No on Warehouse Activity Line.
      FOR ActionType := WarehouseActivityLine."Action Type"::Take TO WarehouseActivityLine."Action Type"::Place DO
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,ActionType,Item."No.",LocationWhite.Code,SalesHeader."No.");
    END;

    LOCAL PROCEDURE InitGetBinContentWithSeriesNoScenario@209(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1006 : Record 6502;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseActivityLine@1002 : Record 5767;
      Quantity@1007 : Decimal;
      ActionType@1008 : ',Take,Place';
    BEGIN
      // Setup: Create Item with Item Tracking Code for SN. Get Bin code from White location.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE); // Set Series No. as TRUE.
      CreateItemWithTrackingCode(Item,ItemTrackingCode.Code);

      // Update Inventory with Location and Series No.
      LotSpecific := FALSE; // Assign value to Global variable.
      Quantity := LibraryRandom.RandIntInRange(3,4);
      TrackingQuantity := Quantity;
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Quantity);

      // Create Shipment from Sales Order. Create Pick from Shipment.
      CreateSalesOrderWithUpdatedBinAndPickSetup(
        SalesHeader,SalesLine,WarehouseShipmentHeader,Item."No.",LocationWhite.Code,'',Quantity - 1);

      // Update Series No on Warehouse Activity Lines.
      FOR ActionType := WarehouseActivityLine."Action Type"::Take TO WarehouseActivityLine."Action Type"::Place DO
        AssignSerialNoAndLotNoToWhseActivityLine(
          WarehouseActivityLine,ActionType,Item."No.",LocationWhite.Code,SalesHeader."No.");
    END;

    LOCAL PROCEDURE InitSetupItemAndLocaiton@246(VAR Item@1001 : Record 27) : Code[10];
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1003 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,TRUE,TRUE,FALSE,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      CreateItemWithReorderingPolicy(Item,Item."Reordering Policy"::"Lot-for-Lot",TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@24(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      FindWarehouseReceiptNo(WarehouseReceiptLine,SourceDocument,SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@250(PurchaseHeaderNo@1000 : Code[20];SourceDocument@1003 : Option);
    VAR
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      FindWhseShipmentNo(WarehouseShipmentLine,SourceDocument,PurchaseHeaderNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.
    END;

    LOCAL PROCEDURE PostWhseReceiptAndRegisterWhseActivity@59(SourceNo@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      PostWarehouseReceipt(WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo);
      RegisterWarehouseActivity(SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE PostInventoryPick@150(SourceNo@1002 : Code[20];AsInvoice@1001 : Boolean);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,AsInvoice);
    END;

    LOCAL PROCEDURE PostInventoryPut@149(SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::"Invt. Put-away");
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);
    END;

    LOCAL PROCEDURE PrepareInventoryAndTwoOutstandingReceiptsForPurchaseOrders@280(VAR LocationCode@1001 : Code[10];VAR FirstWhseReceiptLineNo@1014 : Code[20];VAR SecondWhseReceiptLineNo@1007 : Code[20];ItemNo@1005 : Code[20];InventoryQty@1015 : Decimal;PurchaseQty@1008 : Decimal);
    VAR
      Location@1002 : Record 14;
      WarehouseEmployee@1009 : Record 7301;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseActivityLine@1010 : Record 5767;
    BEGIN
      CreateFullWarehouseSetup(Location);
      LocationCode := Location.Code;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);

      CreatePutAwayWithPurchaseOrderSetup(
        PurchaseHeader,WarehouseReceiptLine,ItemNo,LocationCode,InventoryQty);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      CreateAndReleasePurchaseOrderWithWhseReceipt(
        PurchaseHeader,WarehouseReceiptLine,ItemNo,LocationCode,PurchaseQty);
      FirstWhseReceiptLineNo := WarehouseReceiptLine."No.";

      CreateAndReleasePurchaseOrderWithWhseReceipt(
        PurchaseHeader,WarehouseReceiptLine,ItemNo,LocationCode,PurchaseQty);
      SecondWhseReceiptLineNo := WarehouseReceiptLine."No.";
    END;

    LOCAL PROCEDURE RunWarehouseGetBinContentReportFromItemJournalLine@206(ItemNo@1003 : Code[20]);
    VAR
      BinContent@1001 : Record 7302;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      FindBinContent(BinContent,ItemNo);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryWarehouse.WhseGetBinContentFromItemJournalLine(BinContent,ItemJournalLine);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceNo@1002 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,Type);
      WarehouseActivityHeader.GET(Type,WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivityWithItemNo@270(ItemNo@1000 : Code[20];ActivityType@1010 : Option;LocationCode@1009 : Code[10];SourceNo@1008 : Code[20];ActionType@1007 : Option);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1006 : Record 5766;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      WarehouseActivityHeader.GET(ActivityType,WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehousePutawayWithDifferentUOM@271(VAR Quantity@1008 : Decimal) : Code[20];
    VAR
      Item@1003 : Record 27;
      ItemUnitOfMeasure@1013 : Record 5404;
      ItemUnitOfMeasure2@1012 : Record 5404;
      ItemUnitOfMeasure3@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      WarehouseReceiptLine@1001 : Record 7317;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      // Create Item with multiple Item Unit Of Measure, create and release Purchase Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateMultipleItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure,ItemUnitOfMeasure2,ItemUnitOfMeasure3);

      // Create and Post Whse Receipt. Register Put-away.
      CreatePutAwayWithPurchaseOrderSetup(
        PurchaseHeader,WarehouseReceiptLine,Item."No.",LocationWhite.Code,Quantity);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE SelectWhseShipmentHeader@119(VAR WarehouseShipmentHeader@1001 : Record 7320;WarehouseShipmentLine@1000 : Record 7321;SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      FindWhseShipmentNo(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE SelectWarehouseRequest@197(VAR WarehouseRequest@1000 : Record 5765;SourceNo@1002 : Code[20];SourceDocument@1003 : Option;SourceType@1004 : Option;LocationCode@1001 : Code[10]);
    BEGIN
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.SETRANGE("Source Document",SourceDocument);
      WarehouseRequest.SETRANGE("Source Type",SourceType);
      WarehouseRequest.SETRANGE("Location Code",LocationCode);
      WarehouseRequest.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectWarehouseRequestAndCreateInvPutAwayPick@190(VAR WarehouseRequest@1000 : Record 5765;DocumentNo@1001 : Code[20];SourceDocument@1002 : Option;SourceType@1003 : Option;LocationCode@1004 : Code[10];PutAway@1005 : Boolean);
    BEGIN
      SelectWarehouseRequest(WarehouseRequest,DocumentNo,SourceDocument,SourceType,LocationCode);
      IF PutAway THEN
        LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,TRUE,FALSE,FALSE)
      ELSE
        LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateQtyToReceiveOnWhseReceipt@30(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1002 : Code[20];QtyToReceive@1001 : Decimal);
    BEGIN
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptLine.VALIDATE("Qty. to Receive",QtyToReceive);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasingCodeOnSalesLine@62(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1003 : Record 37;
      Purchasing@1001 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::Order,SalesHeader."No.");
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRequisitionLine@73(VAR RequisitionLine@1002 : Record 246;VendorNo@1000 : Code[20];No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemWithProductGroup@98(VAR Item@1000 : Record 27;VAR ProductGroup@1001 : Record 5723);
    BEGIN
      CreateProductGroup(ProductGroup);
      Item.VALIDATE("Product Group Code",ProductGroup.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinWithWarehouseClassCode@224(VAR Bin@1000 : Record 7354;WarehouseClassCode@1001 : Code[10]);
    BEGIN
      Bin.VALIDATE("Warehouse Class Code",WarehouseClassCode);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseReceiptLine@92(ItemNo@1001 : Code[20];BinCode@1002 : Code[20]);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptLine.VALIDATE("Bin Code",BinCode);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseShipmentLine@176(ItemNo@1001 : Code[20];BinCode@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.VALIDATE("Bin Code",BinCode);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@43(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.VALIDATE("Expiration Date",WORKDATE);
        ReservationEntry.MODIFY(TRUE);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateInventoryAndAssignTrackingInWhseItemJournal@41(Location@1000 : Record 14;Item@1001 : Record 27;Quantity@1002 : Decimal);
    BEGIN
      WarehouseItemJournalSetup(Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      // Assign Serial No and Lot No through page handler.
      WarehouseJournalLine.OpenItemTrackingLines;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      UpdateExpirationDateOnReservationEntry(Location.Code,Item."No.");
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');
    END;

    LOCAL PROCEDURE UpdateInventoryWithWhseItemJournal@136(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      WarehouseItemJournalSetup(Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWhseActivityLines@108(VAR WarehouseActivityLine@1001 : Record 5767;QtyToHandle@1000 : Decimal);
    BEGIN
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateItemInventory@87(ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Quantity@1003 : Decimal;Tracking@1005 : Boolean);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateTrackingOnWhseActivityLine@105(VAR WarehouseActivityLine@1004 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1001 : Code[20]);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,WarehouseActivityLine."Action Type"::Take);
      REPEAT
        WarehouseActivityLine.VALIDATE("Lot No.",FORMAT(TrackingQuantity));
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateLocation@233(LocationCode@1000 : Code[10];CrossDockBinCode@1002 : Code[20];AdjustmentBinCode@1005 : Code[20];DirectedPutawayAndPick@1003 : Boolean;UseCrossDocking@1004 : Boolean);
    VAR
      Location@1001 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(LocationCode);
        VALIDATE("Directed Put-away and Pick",DirectedPutawayAndPick);
        VALIDATE("Use Cross-Docking",UseCrossDocking);
        VALIDATE("Cross-Dock Bin Code",CrossDockBinCode);
        VALIDATE("Adjustment Bin Code",AdjustmentBinCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateBinsOnLocation@145(VAR Location@1000 : Record 14;ReceiptBinCode@1002 : Code[20];ShipmentBinCode@1001 : Code[20]);
    BEGIN
      Location.VALIDATE("Receipt Bin Code",ReceiptBinCode);
      Location.VALIDATE("Shipment Bin Code",ShipmentBinCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnActivityLine@122(WarehouseActivityLine@1000 : Record 5767;BinCode@1001 : Code[20]);
    BEGIN
      REPEAT
        WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLine@146(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1000 : Record 37;Quantity@1001 : Decimal);
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateExpirationDate@186(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    BEGIN
      UpdateExpirationDateOnReservationEntry(LocationCode,ItemNo);
      UpdateExpirationDateOnReservationEntry(LocationCode,ItemNo2);
    END;

    LOCAL PROCEDURE UpdateBinAndZoneOnWhseWorksheetLine@184(VAR WhseWorksheetLine@1000 : Record 7326;LocationCode@1001 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.VALIDATE("To Zone Code",WhseWorksheetLine."From Zone Code");
      WhseWorksheetLine.VALIDATE("To Bin Code" ,WhseWorksheetLine."From Bin Code");
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlaceBinCodeInMovement@275(VAR WarehouseActivityLine@1004 : Record 5767;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];BinCode@1003 : Code[20]);
    BEGIN
      UpdatePlaceBinCode(WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Movement,ItemNo,LocationCode,BinCode,'');
    END;

    LOCAL PROCEDURE UpdatePlaceBinCode@273(VAR WarehouseActivityLine@1004 : Record 5767;ActivityType@1000 : Option;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];BinCode@1003 : Code[20];SourceNo@1005 : Code[20]);
    BEGIN
      FindWhseMovementLine(WarehouseActivityLine,ItemNo,ActivityType,LocationCode,SourceNo);
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Action Type","Action Type"::Place);
        FINDFIRST;
        VALIDATE("Bin Code",BinCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PrepareInvtPutAway@279(SourceDocument@1000 : Option;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateInvtPutPickMovement(SourceDocument,DocumentNo,TRUE,FALSE,FALSE);
      UpdatePlaceBinCode(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",ItemNo,
        LocationCode,BinCode,DocumentNo);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE UpdateTrackingOnWhseReceiptLines@211(VAR WarehouseReceiptHeader@1001 : Record 7316;VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1002 : Code[20]);
    BEGIN
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      AssignTrackingToMultipleWhseReceiptLines(SourceNo,WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler LotItemTrackingPageHandler.
    END;

    LOCAL PROCEDURE UpdateInvtAndCreateWhseInternalPutAwayByGetBinContent@139(VAR Item@1000 : Record 27;WhseInternalPutAwayHeader@1003 : Record 7331;Quantity@1004 : Decimal;GetBinContent@1001 : Integer;Release@1005 : Boolean);
    VAR
      Bin@1002 : Record 7354;
      WhseIntPutAwayRelease@1006 : Codeunit 7316;
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateInventoryWithWhseItemJournal(LocationWhite,Item,Quantity);
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreateWhseInternalPutAway(WhseInternalPutAwayHeader,LocationWhite.Code,Bin."Zone Code",Bin.Code,Item."No.",GetBinContent);
      IF Release THEN
        WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
    END;

    LOCAL PROCEDURE UpdateBinWithDedicated@232(VAR Bin@1002 : Record 7354;Location@1000 : Record 14);
    BEGIN
      Bin.GET(Location.Code,Location."To-Production Bin Code");
      Bin.VALIDATE(Dedicated,TRUE);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUOMOnSalesLine@287(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;UOMCode@1002 : Code[10]);
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesLine.VALIDATE("Unit of Measure Code",UOMCode);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateAndRegisterPutAway@356(ItemNo@1000 : Code[20];LocationCode@1003 : Code[10];ZoneCode@1004 : Code[10];BinCode@1005 : Code[20];QtyToHandle@1006 : Decimal);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        FindWhseActivityLineByItem(WarehouseActivityLine,"Activity Type"::"Put-away",LocationCode,ItemNo,"Action Type"::Take);
        VALIDATE("Qty. to Handle",QtyToHandle);
        MODIFY(TRUE);

        SETRANGE("Action Type","Action Type"::Place);
        FINDFIRST;
        VALIDATE("Qty. to Handle",QtyToHandle);
        VALIDATE("Zone Code",ZoneCode);
        VALIDATE("Bin Code",BinCode);
        MODIFY(TRUE);

        WarehouseActivityHeader.GET("Activity Type"::"Put-away","No.");
        LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      END;
    END;

    LOCAL PROCEDURE SetPreventNegInventory@288(PreventNegInventory@1000 : Boolean) PrevPreventNegInventory : Boolean;
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      WITH InventorySetup DO BEGIN
        GET;
        PrevPreventNegInventory := "Prevent Negative Inventory";
        "Prevent Negative Inventory" := PreventNegInventory;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE WarehousePickChangeExpirationDateSetup@134(VAR Item@1000 : Record 27;VAR SalesHeader@1001 : Record 36;VAR WarehouseShipmentHeader@1007 : Record 7320);
    VAR
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseReceiptHeader@1004 : Record 7316;
      SalesLine@1006 : Record 37;
    BEGIN
      CreateLotTrackedItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLinesAndReleaseDocument(
        PurchaseHeader,Item."No.",LocationWhite.Code,TrackingQuantity,LibraryRandom.RandInt(5),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      AssignTrackingToMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler LotItemTrackingPageHandler.
      UpdateExpirationDateOnReservationEntry(LocationWhite.Code,Item."No.");
      PostWhseReceiptAndRegisterWhseActivity(PurchaseHeader."No.");
      CreateAndReleaseSalesOrderWithVariant(SalesHeader,SalesLine,Item."No.",TrackingQuantity,LocationWhite.Code,'');
      SalesLine.OpenItemTrackingLines;
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      UpdateExpirationDateOnReservationEntry(LocationWhite.Code,Item."No.");
    END;

    LOCAL PROCEDURE VerifyBinContentForQuantity@264(ItemNo@1001 : Code[20];QuantityBase@1000 : Decimal);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      WITH BinContent DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        CALCFIELDS("Quantity (Base)");
        Assert.AreEqual(QuantityBase,"Quantity (Base)",STRSUBSTNO(QuantityBaseErr,QuantityBase,ItemNo,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyWhseReceiptLine@201(WarehouseReceiptLine@1002 : Record 7317;CrossDockZoneCode@1000 : Code[10];CrossDockBinCode@1001 : Code[20];VariantCode@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.TESTFIELD("Cross-Dock Zone Code",CrossDockZoneCode);
      WarehouseReceiptLine.TESTFIELD("Cross-Dock Bin Code",CrossDockBinCode);
      WarehouseReceiptLine.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyCrossDockEntriesOnWarehouseActivityLine@85(WarehouseActivityLine@1000 : Record 5767;LocationCode@1001 : Code[10];ZoneCode@1002 : Code[20];ActivityType@1003 : Option;SourceNo@1004 : Code[20];ActionType@1005 : Option;Quantity@1006 : Decimal);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      WarehouseActivityLine.TESTFIELD("Zone Code",ZoneCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipmentLine@138(SourceNo@1001 : Code[20];ZoneCode@1002 : Code[10];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[20];QtyPerUnitOfMeasure@1005 : Integer;LocationCode@1006 : Code[10]);
    VAR
      PostedWhseShipmentLine@1000 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
      PostedWhseShipmentLine.TESTFIELD("Zone Code",ZoneCode);
      PostedWhseShipmentLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      PostedWhseShipmentLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@103(WarehouseActivityLine@1000 : Record 5767;UnitOfMeasureCode@1001 : Code[10];QtyPerUnitOfMeasure@1002 : Decimal;ExpectedQuantity@1003 : Decimal;VariantCode@1006 : Code[10]);
    VAR
      RegisteredWhseActivityLine@1004 : Record 5773;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindRegisterWarehouseActivityLine(
        RegisteredWhseActivityLine,WarehouseActivityLine."Activity Type",WarehouseActivityLine."Action Type",
        WarehouseActivityLine."Location Code",WarehouseActivityLine."Source No.");
      RegisteredWhseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      RegisteredWhseActivityLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      RegisteredWhseActivityLine.TESTFIELD("Variant Code",VariantCode);
      Assert.AreNearlyEqual(
        ExpectedQuantity,RegisteredWhseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPostedWhseReceiptLine@153(WhseReceiptNo@1001 : Code[20];BinCode@1003 : Code[20];QtyCrossDocked@1002 : Decimal);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      PostedWhseReceiptLine.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      PostedWhseReceiptLine.FINDFIRST;
      PostedWhseReceiptLine.TESTFIELD("Bin Code",BinCode);
      PostedWhseReceiptLine.TESTFIELD("Qty. Cross-Docked",QtyCrossDocked);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@165(No@1000 : Code[20];Quantity@1003 : Decimal;BinCode@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
      WarehouseShipmentLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWhseActivityLine@65(WarehouseActivityLine@1000 : Record 5767;ActivityType@1005 : Option;LocationCode@1002 : Code[10];SourceNo@1001 : Code[20];ActionType@1006 : Option;ExpectedQuantity@1003 : Decimal;UnitOfMeasureCode@1007 : Code[10];QtyPerUnitOfMeasure@1008 : Integer);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      WarehouseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseActivityLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine."Qty. Outstanding",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyMultipleWhseActivityLines@115(VAR WarehouseActivityLine@1000 : Record 5767;ExpectedQuantity@1003 : Decimal;ActivityType@1005 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];UnitOfMeasureCode@1006 : Code[10];QtyPerUnitOfMeasure@1004 : Integer);
    BEGIN
      REPEAT
        VerifyWhseActivityLine(
          WarehouseActivityLine,ActivityType,LocationCode,SourceNo,WarehouseActivityLine."Action Type"::Place,ExpectedQuantity,
          UnitOfMeasureCode,QtyPerUnitOfMeasure);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseReceiptLine@86(No@1005 : Code[20];OrderNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[20]);
    VAR
      PurchRcptHeader@1000 : Record 120;
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptHeader.GET(No);
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD("Order No.",OrderNo);
      PurchRcptLine.TESTFIELD(Quantity,Quantity);
      PurchRcptLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyTrackingOnItemLedgerEntry@161(ItemNo@1001 : Code[20];Quantity@1003 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      LineCount@1002 : Integer;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        IF LotSpecific THEN
          ItemLedgerEntry.TESTFIELD("Lot No.")
        ELSE
          ItemLedgerEntry.TESTFIELD("Serial No.");
        LineCount += 1;
      UNTIL ItemLedgerEntry.NEXT = 0;
      Assert.AreEqual(Quantity,LineCount,NumberOfLineError);  // Verify Number of Item Ledger Entry line.
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@110(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date;BinCode@1004 : Code[20]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",LocationCode);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Expiration Date",ExpirationDate);
      PostedInvtPickLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPutLine@316(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date;BinCode@1004 : Code[20]);
    VAR
      PostedInvtPutAwayLine@1005 : Record 7341;
    BEGIN
      PostedInvtPutAwayLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPutAwayLine.FINDFIRST;
      PostedInvtPutAwayLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPutAwayLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPutAwayLine.TESTFIELD("Expiration Date",ExpirationDate);
      PostedInvtPutAwayLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWhseActivityLineForMovement@127(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Integer);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Location Code",LocationCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseWorksheetLine@126(VAR WhseWorksheetLine@1000 : Record 7326;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];UnitofMeasureCode@1004 : Code[10];Quantity@1003 : Integer);
    BEGIN
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD("Item No.",ItemNo);
      WhseWorksheetLine.TESTFIELD("Unit of Measure Code",UnitofMeasureCode);
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. to Handle",Quantity);
    END;

    LOCAL PROCEDURE VerifyBinContent@203(ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      BinContent.TESTFIELD("Bin Code",BinCode);
      BinContent.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@199(ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1000 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Location Code",LocationCode);
      ItemJournalLine.TESTFIELD("Bin Code",BinCode);
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@247(ItemNo@1001 : Code[20];Status@1002 : Option;QtyToHandleBase@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Reservation Status",Status);
        FINDFIRST;
        TESTFIELD("Qty. to Handle (Base)",QtyToHandleBase);
      END;
    END;

    LOCAL PROCEDURE VerifyLotQuantitiesOnWhseActivityLines@260(ItemNo@1005 : Code[20];LotNo1@1000 : Code[10];Quantity1@1004 : Decimal;LotNo2@1002 : Code[10];Quantity2@1003 : Decimal;Lot@1006 : Boolean);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Action Type","Action Type"::Take);
        FIND('-');
        VerifyWhseActivityLineWithSeriesOrLot(WarehouseActivityLine,LotNo1,Quantity1,Lot);
        NEXT;
        VerifyWhseActivityLineWithSeriesOrLot(WarehouseActivityLine,LotNo2,Quantity2,Lot);
      END;
    END;

    LOCAL PROCEDURE VerifyWhseActivityLineWithSeriesOrLot@221(VAR WarehouseActivityLine@1001 : Record 5767;TrackingNo@1005 : Code[10];Quantity@1006 : Decimal;Lot@1002 : Boolean);
    BEGIN
      IF Lot THEN
        WarehouseActivityLine.TESTFIELD("Lot No.",TrackingNo)
      ELSE
        WarehouseActivityLine.TESTFIELD("Serial No.",TrackingNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseItemTrackingLines@229(VAR WhseItemTrackingLine@1000 : Record 6550;ItemNo@1001 : Code[20];Count@1002 : Integer;QuantityBase@1003 : Decimal);
    BEGIN
      WhseItemTrackingLine.SETRANGE("Item No.",ItemNo);
      Assert.AreEqual(Count,WhseItemTrackingLine.COUNT,ItemTrackingLineErr);
      WhseItemTrackingLine.FINDFIRST;
      WhseItemTrackingLine.TESTFIELD("Quantity (Base)",QuantityBase);
    END;

    LOCAL PROCEDURE VerifyBinCodeInWhseActivityLine@231(ItemNo@1001 : Code[20];ActionType@1002 : Option;BinCode@1003 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Action Type",ActionType);
        FINDFIRST;
        TESTFIELD("Bin Code",BinCode);
      END;
    END;

    LOCAL PROCEDURE VerifyCrossDockBinCodeForWhseActivityLine@239(ActivityType@1005 : Option;LocationCode@1004 : Code[10];SourceNo@1003 : Code[20];ActionType@1002 : Option;Qty@1001 : Decimal;BinCode@1006 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      WarehouseActivityLine.SETRANGE(Quantity,Qty);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyBinCodeForWarehouseEntry@256(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Qty@1002 : Decimal;BinCode@1004 : Code[20]);
    VAR
      WarehouseEntry@1003 : Record 7312;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE(Quantity,Qty);
        FINDFIRST;
        TESTFIELD("Bin Code",BinCode);
      END;
    END;

    LOCAL PROCEDURE VerifyCountOfWarehouseEntry@286(WhseDocumentNo@1000 : Code[20]);
    VAR
      WarehouseEntry@1003 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Whse. Document Type",WarehouseEntry."Whse. Document Type"::"Whse. Journal");
      WarehouseEntry.SETRANGE("Whse. Document No.",WhseDocumentNo);
      Assert.RecordCount(WarehouseEntry,1);
    END;

    LOCAL PROCEDURE MultipleLotNoWhseItemTrackingPageHandlerBody@304(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      TrackingQuantity1@1001 : Variant;
      TrackingQuantity2@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TrackingQuantity1);
      LibraryVariableStorage.Dequeue(TrackingQuantity2);
      WITH WhseItemTrackingLines DO BEGIN
        FIRST;
        "Lot No.".SETVALUE(FORMAT(TrackingQuantity1));
        Quantity.SETVALUE(FORMAT(TrackingQuantity1));
        NEXT;
        "Lot No.".SETVALUE(FORMAT(TrackingQuantity2));
        Quantity.SETVALUE(FORMAT(TrackingQuantity2));
        OK.INVOKE;
      END;
    END;

    LOCAL PROCEDURE LotSerialNoWhseItemTrackingPageHandlerBody@315(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      LotNoVar@1001 : Variant;
      SerialNoVar@1002 : Variant;
      QuantityVar@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LotNoVar);
      LibraryVariableStorage.Dequeue(SerialNoVar);
      LibraryVariableStorage.Dequeue(QuantityVar);
      WhseItemTrackingLines.FIRST;
      WhseItemTrackingLines."Lot No.".SETVALUE(LotNoVar);
      WhseItemTrackingLines."Serial No.".SETVALUE(SerialNoVar);
      WhseItemTrackingLines.Quantity.SETVALUE(QuantityVar);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MovementCreatedMessageHandler@130(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MovementCreated) > 0,Message);
    END;

    [RequestPageHandler]
    PROCEDURE ChangeUOMRequestPageHandler@49(VAR WhseChangeUnitOfMeasure@1001 : TestRequestPage 7314);
    BEGIN
      CASE UnitOfMeasureType OF
        UnitOfMeasureType::Default:
          WhseChangeUnitOfMeasure.UnitOfMeasureCode.SETVALUE(NewUnitOfMeasure);
        UnitOfMeasureType::PutAway:
          WhseChangeUnitOfMeasure.UnitOfMeasureCode.SETVALUE(NewUnitOfMeasure2);
        UnitOfMeasureType::Sales:
          WhseChangeUnitOfMeasure.UnitOfMeasureCode.SETVALUE(NewUnitOfMeasure3);
      END;
      WhseChangeUnitOfMeasure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@23(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.AvailableToReserve.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@66(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines.FIRST;
      REPEAT
        TrackingQuantity -= 1;
        WhseItemTrackingLines."Serial No.".SETVALUE(FORMAT(TrackingQuantity));
        IF LotSpecific THEN
          WhseItemTrackingLines."Lot No.".SETVALUE(FORMAT(TrackingQuantity));
        WhseItemTrackingLines.Quantity.SETVALUE(1);
        WhseItemTrackingLines.NEXT;
      UNTIL TrackingQuantity = 0;

      IF VerifyTracking THEN
        WhseItemTrackingLines.Quantity.ASSERTEQUALS(1);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@111(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines.FIRST;
      ItemTrackingLines."Lot No.".SETVALUE(TrackingQuantity);
      ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity);

      IF VerifyTracking THEN
        ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(TrackingQuantity);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE LotNoWhseItemTrackingPageHandler@135(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines.FIRST;
      WhseItemTrackingLines."Lot No.".SETVALUE(FORMAT(TrackingQuantity));
      WhseItemTrackingLines.Quantity.SETVALUE(FORMAT(TrackingQuantity));
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandlerSerialAndLot@208(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      IF NOT SelectEntries THEN
        IF Serial THEN
          ItemTrackingLines."Assign Serial No.".INVOKE
        ELSE
          ItemTrackingLines."Assign Lot No.".INVOKE;

      IF SelectEntries THEN
        ItemTrackingLines."Select Entries".INVOKE;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@131(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesHandler@128(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines."Lot No.".ASSISTEDIT;
      WhseItemTrackingLines."New Expiration Date".SETVALUE(CALCDATE('<' + '+' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentHandler@170(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@367(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,PostJournalLines) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@268(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandlerSerialNo@207(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines.FIRST;
      REPEAT
        TrackingQuantity -= 1;
        ItemTrackingLines."Serial No.".SETVALUE(FORMAT(TrackingQuantity));
        ItemTrackingLines."Quantity (Base)".SETVALUE(1);
        ItemTrackingLines.NEXT;
      UNTIL TrackingQuantity = 0;

      IF VerifyTracking THEN
        ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@202(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MultipleLotNoWhseItemTrackingPageHandler@226(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      HandlerBodyVar@1002 : Variant;
      HandlerBody@1001 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(HandlerBodyVar);
      HandlerBody := HandlerBodyVar;
      IF HandlerBody = WhseItemTrackingPageHandlerBody::MultipleLotNo THEN
        MultipleLotNoWhseItemTrackingPageHandlerBody(WhseItemTrackingLines)
      ELSE
        LotSerialNoWhseItemTrackingPageHandlerBody(WhseItemTrackingLines);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@152(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinePageHandler@248(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Receipts"));
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinePageHandler2@318(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Receipts"));
      PostedPurchaseDocumentLines.OriginalQuantity.SETVALUE(TRUE);
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLineHandler@254(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Invoices"));
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@266(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1001 : Variant;
      Qty@1002 : Variant;
      ActionType@1003 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ActionType := DequeueVariable;
      ItemTrackingLines.FIRST;
      CASE ActionType OF
        ItemTrackingLineActionType::Verify:
          BEGIN
            LibraryVariableStorage.Dequeue(Qty);
            ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(Qty);
          END;
        ItemTrackingLineActionType::Tracking:
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(TrackingQuantity);
            ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE SetupAdjustmentBin@272(LocationCode@1000 : Code[10];NewValue@1001 : Code[20]) PrevValue : Code[20];
    VAR
      Location@1002 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(LocationCode);
        PrevValue := "Adjustment Bin Code";
        VALIDATE("Adjustment Bin Code",NewValue);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE MockInventory@296(LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20];UOMCode@1007 : Code[10];QtyPerUOM@1008 : Decimal;QtyToSet@1004 : Decimal);
    VAR
      WarehouseEntry@1005 : Record 7312;
      EntryNo@1006 : Integer;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        FINDLAST;
        EntryNo := "Entry No." + 1;
        INIT;
        "Entry No." := EntryNo;
        "Location Code" := LocationCode;
        "Zone Code" := ZoneCode;
        "Bin Code" := BinCode;
        "Item No." := ItemNo;
        "Unit of Measure Code" := UOMCode;
        Quantity := QtyToSet;
        "Qty. (Base)" := QtyToSet * QtyPerUOM;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SetupWhseJournalLine@253(VAR WarehouseJournalLine@1000 : Record 7311;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      WITH WarehouseJournalLine DO BEGIN
        INIT;
        "Journal Template Name" := WarehouseJournalTemplate.Name;
        "Journal Batch Name" := WarehouseJournalBatch.Name;
        "Location Code" := LocationCode;
        COMMIT;
        SetUpNewLine(WarehouseJournalLine);
        VALIDATE("Item No.",ItemNo);
      END;
    END;

    LOCAL PROCEDURE CreateWhseItemJournalLine@294(WhseJournalTemplateName@1001 : Code[10];WhseJournalBatchName@1002 : Code[10];LocationCode@1003 : Code[10];ZoneCode@1004 : Code[10];BinCode@1005 : Code[20];ItemNo@1007 : Code[20];ItemQty@1008 : Decimal;AdjBinToRestore@1006 : Code[20]);
    VAR
      WarehouseJournalLine@1009 : Record 7311;
      WhseItemJournal@1000 : TestPage 7324;
    BEGIN
      WITH WarehouseJournalLine DO BEGIN
        "Location Code" := LocationCode;
        "Journal Batch Name" := WhseJournalBatchName;
        SETRANGE("Journal Template Name",WhseJournalTemplateName);
      END;

      COMMIT;
      WhseItemJournal.TRAP;
      PAGE.RUN(PAGE::"Whse. Item Journal",WarehouseJournalLine);

      WITH WhseItemJournal DO BEGIN
        ASSERTERROR "Item No.".SETVALUE(ItemNo);

        SetupAdjustmentBin(LocationCode,AdjBinToRestore);
        COMMIT;

        "Item No.".SETVALUE(ItemNo);
        Quantity.SETVALUE(ItemQty);
        "Zone Code".SETVALUE(ZoneCode);
        "Bin Code".SETVALUE(BinCode);
        OK.INVOKE;
      END;
    END;

    LOCAL PROCEDURE CreateWhseItemJournalLineWithWrongAdjBin@301(WhseJournalTemplateName@1001 : Code[10];WhseJournalBatchName@1002 : Code[10];LocationCode@1003 : Code[10];ZoneCode@1004 : Code[10];BinCode@1005 : Code[20];ItemNo@1007 : Code[20];ItemQty@1008 : Decimal;VAR AdjustmentBinCode@1006 : Code[20]);
    VAR
      Zone@1011 : Record 7300;
      NewAdjustmentBin@1010 : Record 7354;
      WarehouseJournalLine@1009 : Record 7311;
      WhseItemJournal@1000 : TestPage 7324;
    BEGIN
      LibraryWarehouse.CreateZone(
        Zone,LibraryUtility.GenerateGUID,LocationWhite.Code,
        LibraryWarehouse.SelectBinType(FALSE,FALSE,FALSE,FALSE),'','',0,FALSE);
      LibraryWarehouse.CreateBin(
        NewAdjustmentBin,LocationWhite.Code,LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      WITH WarehouseJournalLine DO BEGIN
        "Location Code" := LocationCode;
        "Journal Batch Name" := WhseJournalBatchName;
        SETRANGE("Journal Template Name",WhseJournalTemplateName);
      END;

      COMMIT;
      WhseItemJournal.TRAP;
      PAGE.RUN(PAGE::"Whse. Item Journal",WarehouseJournalLine);

      WITH WhseItemJournal DO BEGIN
        "Item No.".SETVALUE(ItemNo);
        Quantity.SETVALUE(ItemQty);
        "Zone Code".SETVALUE(ZoneCode);
        "Bin Code".SETVALUE(BinCode);

        AdjustmentBinCode := SetupAdjustmentBin(LocationWhite.Code,NewAdjustmentBin.Code);
        OK.INVOKE;
      END;
    END;

    LOCAL PROCEDURE SetupWhseItemJnlLineWrongBinCode@300(VAR Zone@1000 : Record 7300;VAR Bin@1001 : Record 7354);
    BEGIN
      Initialize;
      WarehouseItemJournalSetup(LocationWhite.Code);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      FindBinWithZone(Bin,LocationWhite.Code,Zone.Code);
    END;

    LOCAL PROCEDURE ClearWhiteLocationAdjBin@276();
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      CalculateWhseAdjustment(ItemJournalBatch,LibraryUtility.GenerateGUID);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalculateWhseAdjustment@291(ItemJournalBatch@1001 : Record 233;DocNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
      CalculateWhseAdjustment@1003 : Report 7315;
    BEGIN
      ItemJournalLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      ItemJournalLine."Journal Batch Name" := ItemJournalBatch.Name;
      WITH CalculateWhseAdjustment DO BEGIN
        USEREQUESTPAGE(FALSE);
        SetHideValidationDialog(TRUE);
        InitializeRequest(WORKDATE,DocNo);
        SetItemJnlLine(ItemJournalLine);
        RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE VerifyBinCodeInWhseEntry@324(ItemNo@1001 : Code[20];BinCode@1003 : Code[20]);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Bin Code",BinCode);
        Assert.IsFalse(ISEMPTY,STRSUBSTNO(BinCodeNotFoundErr,BinCode));
      END;
    END;

    LOCAL PROCEDURE CreateInternalMovement@305(VAR InternalMovementHeader@1000 : Record 7346;Location@1001 : Record 14;ToBin@1002 : Record 7354;Item@1003 : Record 27;FromBin@1004 : Record 7354;Quantity@1005 : Decimal);
    VAR
      InternalMovementLine@1006 : Record 7347;
    BEGIN
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,ToBin.Code);
      LibraryWarehouse.CreateInternalMovementLine(
        InternalMovementHeader,InternalMovementLine,Item."No.",FromBin.Code,ToBin.Code,Quantity);
      InternalMovementLine.VALIDATE("From Bin Code",FromBin.Code);
      InternalMovementLine.VALIDATE("To Bin Code",ToBin.Code);
      InternalMovementLine.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
       1. Test to verify the values on Warehouse Receipt after calculating Whse Cross Dock on Warehouse Receipt.
       2. Test to verify the values on partial Warehouse Receipt after  calculating Whse Cross Dock on Warehouse Receipt.
       3. Test to verify the values on Put Away created after posting Whse Receipt calculating Whse Cross Dock on Warehouse Receipt.
       4. Test to verify that Pick is created and verify values on Pick calculating Whse Cross Dock on Warehouse Receipt.
       5. Test to verify the back Order partial delivery, calculating Whse Cross Dock on partial Warehouse Receipt.
       6. Test to verify the back Order full delivery, calculating Whse Cross Dock on full Warehouse Receipt.
       7. Test to verify the Special Order results in Put away through Cross Docking.
       8. Test to verify that Unit Of Measure can be changed on Put Away created through Special Order with Cross docking flow.
       9. Test to verify that Unit Of Measure can be changed on Pick created through Special Order with Cross docking flow.
      10. Test to verify the values on Warehouse Receipt after calculating Whse Cross Dock on Warehouse Receipt with Item variants.
      11. Test to verify the values on registerd Put Away created after posting Whse Receipt calculating Whse Cross Dock on Warehouse Receipt with Item variants.
      12. Test to verify that Pick is registerd and verify values on registered Pick calculating Whse Cross Dock on Warehouse Receipt using Item variants.
      13. Test to verify the values on Warehouse Receipt after calculating Whse Cross Dock on Warehouse Receipt with Whse Class Code.
      14. Test to verify the values on Posted Warehouse Receipt after calculating Whse Cross Dock on Warehouse Receipt with Whse Class Code.
      15. Test to verify the values on Warehouse Shipment with Whse Class Code.
      16. Test to verify the Unit Of Measure on Warehouse Pick.
      17. Test to verify that Unit Of Measure can be changed on Warehouse Pick and verify it.
      18. Test to verify the Unit Of Measure on Warehouse Receipt.
      19. Test to verify the Unit Of Measure on Warehouse PutAway.
      20. Test to verify that Unit Of Measure can be changed on Warehouse PutAway and verify it.
      21. Test to verify the Unit Of Measure on Warehouse shipment.
      22. Test to verify the Unit Of Measure on Warehouse Receipt with Special Order flow.
      23. Test to verify the Unit Of Measure on Warehouse Put Away with Special Order flow.
      24. Test to verify the Unit Of Measure on Registered Warehouse Put Away with Special Order flow.
      25. Test to verify the Unit Of Measure on Registered Warehouse Pick with Special Order flow.
      26. Test to verify the Unit Of Measure on Warehouse shipment with partial Quantity.
      27. Test create pick from Purchase Return Order with Pick According to FEFO unchecked and Strict Expiration Posting unchecked with Serial No and Lot No.
      28. Test create pick from Purchase Return Order with Pick According to FEFO unchecked and Strict Expiration Posting checked with Serial No and Lot No.
      29. Test create pick from Purchase Return Order with Pick According to FEFO unchecked and Strict Expiration Posting unchecked with Serial No.
      30. Test create pick from Purchase Return Order with Pick According to FEFO unchecked and Strict Expiration Posting checked with Serial No.
      31. Test create pick from Sales Order with Pick According to FEFO unchecked and Strict Expiration Posting unchecked with Serial No and Lot No.
      32. Test create pick from Sales Order with Pick According to FEFO unchecked and Strict Expiration Posting checked with Serial No and Lot No.
      33. Test create pick from Sales Order with Pick According to FEFO unchecked and Strict Expiration Posting unchecked with Serial No.
      34. Test create pick from Sales Order with Pick According to FEFO unchecked and Strict Expiration Posting checked with Serial No.
      35. Test to verify the creation of Full Warehouse Receipt With Lot No from Purchase Order with multiple lines at white location.
      36. Test to verify the creation of partial Warehouse Receipt With Lot No from Purchase Order with multiple lines at white location.
      37. Test to verify the creation of Purchase Receipt with Lot No.
      38. Test to verify that the Expiration Date is same on Posted Inventory Put Away Line as Purchase Order using Item Tracking.
      39. Test to verify that the Expiration Date is same on Posted Inventory Pick Line as Sales Order using Item Tracking.
      40. Test to verify that the Expiration Date is same on Posted Whse Pick Line as Sales Order using Item Tracking.
      41. Test to verify that the Expiration Date can not be changed on Whse Pick Line using Item Tracking.
      42. Test to verify that the Expiration Date is same on Posted Inventory Put Away Line as Purchase Order using Lot Tracking.
      43. Test to verify that the Expiration Date can not be changed on Put Away Line using using Lot Tracking.
      44. Test to verify that the Expiration date is not editable on Whse Put Away Line with Lot No.
      45. Test to verify the Expiration Date is same on Whse Pick line as on Sales Order when updating Bin on Whse Shipment Line with Lot No.
      46. Test to verify that the Expiration Date can not be changed on Whse Put Away Line using Item Tracking with Item Reclassification Journal.
      47. Test to verify that the Expiration Date can not be changed on Whse Pick Line using Item Tracking with Item Reclassification Journal.
      48. Test to verify Get BinContent On Movement Worksheet From Put Away With SerialNo.
      49. Test tp verify Whse Movement From Movement Worksheet After Get BinContent With LotNo.
      50. Test to verify BinCode With Sales and Purchase CrossTransactions.
      51. Test to verify that Posted Inventory Put Away With Serial No And Lot No And Expiration Date.
      52. Test to verify that Posted Inventory Pick With Serial No And Lot No And Expiration Date.
      53. Test to verify Whse Get BinContent From Item Journal Line.
      54. Test to verify the BinContents With Serial No with Purchase Order.
      55. Test to verify the BinContents With Lo No with Purchase Order.
      56. Test to verify Registered Whse Movement With Lot No And Expiration Date.
      57. Test to verify Registered Pick after Whse Movement With Lot No And Expiration Date.
      58. Test to verify an error message pops up when changing quantity on whse. internal put-away page greater than the original one after Get Bin Content once.
      59. Test to verify an error message pops up when create put-away from whse. internal put-away page after Get Bin Content twice.
      60. Test to verify put-away created with Lot No. correctly when partial/full from whse. internal put-away.
      61. Test to verify put-away created with Series No. correctly when partial/full from whse. internal put-away.
      62. Test to verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No.
      63. Test to verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No. partially.
      64. Test to verify Quantity in Whse. Internal Put-away by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No.
      65. Test to verify Quantity in Whse. Internal Put-away by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Lot No. partially.
      66. Test to verify Quantity in Movement Worksheet by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Series No.
      67. Test to verify Quantity in Whse. Internal Put-away by Get Bin Content is consistent with the one in Item Tracking Lines when there is outstanding quantity in opened Pick document using Series No.
      68. Test to verify Put-away can be created from Internal Put-away with Dedicated Bin.
      69. Test to verify Cross Dock Bin Code is correct in Put-away.
      70. Test to verify Qty. to Handle (Base) on Reservation Entry after Calculate Regenerative Planning with partially Warehouse Pick.
      71. Test to verify there is no UOM Rounding Coversion issue when register Movement using "Get Bin Content"
      72. Test to verify there is no UOM Rounding Coversion issue when register Whse. Internal Put-away using "Get Bin Content"
      73. Test to verify Qty. to Handle (Base) on Item Tracking Lines after multiple partially Pick from Warehouse Shipment.
      74. Test of Cross-Docking for Silver location (when shipping, first items are taken from cross-dock bins).
      75. Verify that error message appears if "From Bin Code" is not equal to Location "Adjustment Bin Code" for Positive Adjustment.
      76. Verify that error message appears if "To Bin Code" is not equal to Location "Adjustment Bin Code" for Negative Adjustment.
      77. Verify that after Item No. validation "From Bin Code" is updated automatically to Location "Adjustment Bin Code" for positive adjustment lines.
      78. Verify that after Item No. validation "To Bin Code" is updated automatically to Location "Adjustment Bin Code" for negative adjustment lines.
      79. Verify that for scenario when adjustment bin is set for Location during Warehouse Item Journal Line creation (positive adjustment), when trying to register lines error message appears because of wrong "Adjustment Bin Code".
      80. Verify that for scenario when adjustment bin is set for Location during Warehouse Item Journal Line creation (negative adjustment), "To Bin Code" is set correctly and after registering Warehouse Entry contains "Adjustment Bin Code".
      81. Verify that cannot post Purchase Return Order with "Prevent Negative Inventory" set and no Item on hand.

        Covers Test Cases for WI - 277332
        --------------------------------------------------------------------
        Test Function Name                                         TFS ID
        --------------------------------------------------------------------
        CrossDockWithFullWarehouseReceipt                          128739
        CrossDockWithPartialWarehouseReceipt                       128739
        PutAwayFromWhseReceiptWithCrossDock                        128739
        PickFromWhseShipmentWithCrossDock                          128739
        BackOrderPartialDeliveryWithCrossDocking                   164073
        BackOrderFullDeliveryWithCrossDockingUsingReservation      164073
        SpecialOrderWithCrossDocking                               128740
        ChangeUOMOnPutAwayWithSpecialOrderCrossDocking             128740
        ChangeUOMOnPickWithSpecialOrderCrossDocking                128740

        Covers Test Cases for WI - 277333
        --------------------------------------------------------------------
        Test Function Name                                         TFS ID
        --------------------------------------------------------------------
        WarehouseReceiptUsingItemVariantsWithCrossDocking           128742
        RegisterPutAwayUsingItemVariantsWithCrossDocking            128742
        RegisterPickUsingItemVariantsWithCrossDocking               128742
        WarehouseReceiptWithWarehouseClassCrossDock                 128744
        PostWhseReceiptWithWarehouseClassCrossDock                  128744
        WarehouseShipmentWithWarehouseClassCode                     128743

        Covers Test Cases for WI - 277336
        --------------------------------------------------------------------
        Test Function Name                                         TFS ID
        --------------------------------------------------------------------
        UOMOnPickLines                                             142001
        ChangeUOMOnPickLines                                       142001,142002
        UOMOnWarehouseReceipt                                      142002
        UnitOfMeasureOnPutAway,PutAwayWithNewUOM                   142003
        UOMOnWarehouseShipmentLine                                 142004

        Covers Test Cases for WI - 277335
        --------------------------------------------------------------------
        Test Function Name                                         TFS ID
        --------------------------------------------------------------------
        UOMOnWarehouseReceiptWithSpecialOrder                      142004
        UOMOnPutAwayWithSpecialOrder                               142004
        UOMOnRegisteredPutAwayWithSpecialOrder                     142004
        UOMOnRegisteredPickWithSpecialOrder                        142004, 142011
        UOMOnWarehouseShipmentLineWithPartialQuantity              142004, 142011

        Covers Test Cases for WI - 277338
        ---------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        ---------------------------------------------------------------------------------------
        PickFromPurchaseReturnOrderWithoutStrictExpirationSerialAndLot                 229343
        PickFromPurchaseReturnOrderWithoutStrictExpirationWithSerialNo                 229343
        PickFromPurchaseReturnOrderWithStrictExpirationSerialAndLot                    229344
        PickFromPurchaseReturnOrderWithStrictExpirationWithSerialNo                    229344

        Covers Test Cases for WI - 277339
        ---------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        ---------------------------------------------------------------------------------------
        PickFromSalesOrderWithoutStrictExpirationSerialAndLot                          229345
        PickFromSalesOrderWithStrictExpirationSerialAndLot                             229345
        PickFromSalesOrderWithoutStrictExpirationWithSerialNo                          229347
        PickFromSalesOrderWithStrictExpirationWithSerialNo                             229347
        FullWarehousePutAwayFromPurchaseWithMultipleLinesAndLotNo                      204841
        PartialWarehousePutAwayFromPurchaseWithMultipleLinesAndLotNo                   204841
        PurchaseReceiptWithLotNo                                                       204841

        Covers Test Cases for WI - 282375
        --------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        --------------------------------------------------------------------------------------------------------------------
        PostedInventoryPutAwayWithExpirationDateAndLot, PostedInventoryPickWithExpirationDateAndLot            141434
        WarehousePickWithExpirationDateAndLot, WarehousePickWithErrorChangedExpirationDateAndLot               141434, 141435
        InventoryPutAwayWithExpirationDate, InventoryPutAwayWithErrorChangedExpirationDate                     141435
        ExpirationDateOnWarehousePutAwayWithLotNo, WarehousePickWithUpdateBinOnWhseShipmentAndExpirationDate   141428
        WhsePutAwayChangeExpirationDateWithWhseReclassificationJournal                                         141433
        WhsePickChangeExpirationDateWithWhseReclassificationJournal                                            141433

        Covers Test Cases for WI - 282377
        -----------------------------------------------------------------------------------
        Test Function Name                                                         TFS ID
        -----------------------------------------------------------------------------------
        GetBinContentOnMovementWorksheetFromPutAwayWithSerialNo                    142543
        WhseMovementFromMovementWorksheetAfterGetBinContentWithLotNo               141991
        BinCodeWithSalesPurchaseCrossTransaction                                   230365
        PostedInventoryPutAwayWithSerialAndLotNoAndExpirationDate                  141436
        PostedInventoryPickWithSerialAndLotNoAndExpirationDate                     141436

        Covers Test Cases for WI - 282378
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        WhseGetBinContentFromItemJournalLine                                     142542
        BinContentWithSerialNo, BinContentWithLotNo                              142542
        RegisterWhseMovementWithLotNoAndExpirationDate                           141427
        RegisterPickWithWhseMovementWithLotNoAndExpirationDate                   141427

        Covers Test Cases for W1 - n/a
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        ChangeQuantityOnInternalPutAwayPageAfterGetBinContentOnce                 49498
        CreatePutAwayFromInternalPutAwayPageAfterGetBinContentTwice               49498
        CreatePutAwayFromInternalPutAwayWithLotNo                                 27920
        CreatePutAwayFromInternalPutAwayWithSeriesNo                              27920

        Covers Test Cases for W1 - n/a
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        GetBinContentFromMovementWorksheetWithLotNo                               55909
        GetBinContentFromMovementWorksheetWithPartialLotNo                        55909
        GetBinContentFromInternalPutAwayWithLotNo                                 55909
        GetBinContentFromInternalPutAwayWithPartialLotNo                          55909
        GetBinContentFromMovementWorksheetWithSeriesNo                            55909
        GetBinContentFromInternalPutAwayWithSeriesNo                              55909
        CreatePutAwayFromInternalPutAwayWithDedicatedBin                          59511

        Covers Test Cases for WI - 348388
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        CrossDockBinCodeForWhseActivityLine                                       67503

        Covers Test Cases for SE Merge bug
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        CalcRegenPlanWithPartialWarehousePick                                    78086

        Covers Test Cases for Hotfix
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        MovementWithUOMRoundingConversion                                        91438
        InternalPutawayWithUOMRoundingConversion                                 91438

        Covers Test Cases for SE Merge bug
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        MultiplePartialPickFromWhseShipment                                       90974
        BWCrossDockPickFromWhseShipment                                          103165

        Covers Test Cases for TFS
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        CreatePutAwayFromInternalPutAwayWithLotNoTwice                           106301

        Covers Test Cases for TFS
        ----------------------------------------------------------------------------------
        Test Function Name                                                       TFS ID
        ----------------------------------------------------------------------------------
        CannotReturnPurchaseWhenOutOfInventory                                   361861
    }
    END.
  }
}

