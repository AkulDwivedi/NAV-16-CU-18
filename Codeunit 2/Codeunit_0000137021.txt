OBJECT Codeunit 137021 SCM Planning - NTF tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationWhite@1008 : Record 14;
      LocationOne@1005 : Record 14;
      LocationTwo@1003 : Record 14;
      LocationThree@1030 : Record 14;
      TransitLocation@1011 : Record 14;
      ConsumptionItemJournalTemplate@1013 : Record 82;
      ConsumptionItemJournalBatch@1012 : Record 233;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      WarehouseJournalTemplate@1016 : Record 7309;
      WarehouseJournalBatch@1015 : Record 7310;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryPurchase@1022 : Codeunit 130512;
      LibrarySales@1002 : Codeunit 130509;
      LibraryWarehouse@1023 : Codeunit 132204;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryItemTracking@1004 : Codeunit 130502;
      LibraryManufacturing@1024 : Codeunit 132202;
      LibraryPlanning@1025 : Codeunit 132203;
      LibraryVariableStorage@1032 : Codeunit 131004;
      LibraryJob@1028 : Codeunit 131920;
      Assert@1007 : Codeunit 130000;
      LibraryRandom@1029 : Codeunit 130440;
      IsInitialized@1006 : Boolean;
      MSG_WHSE_JNL_REG@1017 : TextConst 'ENU=Do you want to register the journal lines?';
      MSG_JNL_LINE_REG@1018 : TextConst 'ENU=The journal lines were successfully registered.';
      MSG_WHSE_SHIP_CREATED@1020 : TextConst 'ENU=Warehouse Shipment Header has been created.';
      ErrorMessageCounter@1021 : Integer;
      Text001@1026 : TextConst 'ENU=There should be %1 line(s) in the Reservation Entry table with filters %2.';
      Text002@1027 : TextConst 'ENU=LN1';
      CustomizedSNTxt@1031 : TextConst '@@@=No translation needed.;ENU=X001';
      GlobalQty@1367 : ARRAY [2] OF Decimal;
      GlobalRemainingSerialNos@1368 : ARRAY [7] OF Code[10];
      GlobalHandlerAction@1369 : Integer;
      SuccessfullyPostedTxt@1034 : TextConst 'ENU=successfully posted.';
      WrongPostingMsgTxt@1037 : TextConst 'ENU=Wrong posting message: %1.';
      WrongSerialNoTxt@1033 : TextConst 'ENU=Wrong Serial No. after posting: %1.';
      FilterRequisitionLineMsg@1035 : TextConst 'ENU=There is no line within the filter: %1.';
      DaysInMonthFormula@1036 : DateFormula;
      PlanningStartDate@1038 : DateFormula;
      PlanningEndDate@1039 : DateFormula;

    [Normal]
    LOCAL PROCEDURE Initialize@110();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Initialize setup.
      IF IsInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      GlobalSetup;

      EVALUATE(DaysInMonthFormula,FORMAT('<+%1D>',CALCDATE('<1M>') - TODAY));
      EVALUATE(PlanningStartDate,'<+23D>');
      EVALUATE(PlanningEndDate,'<+11M>');

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE GlobalSetup@1();
    BEGIN
      NoSeriesSetup;

      LocationSetup(LocationWhite,TRUE,TRUE,FALSE);
      LocationSetup(LocationOne,FALSE,FALSE,FALSE);
      LocationSetup(LocationTwo,FALSE,FALSE,FALSE);
      LocationSetup(LocationThree,FALSE,FALSE,FALSE);
      LocationSetup(TransitLocation,FALSE,FALSE,TRUE);

      ItemJournalSetup;
      WarehouseJournalSetup(LocationWhite.Code);

      TransferRoutesSetup;

      DisableWarnings;
    END;

    LOCAL PROCEDURE NoSeriesSetup@10();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1004 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemSetup@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;SafetyLeadTime@1002 : Text[30]);
    BEGIN
      LibraryInventory.CreateItem(Item);

      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      EVALUATE(Item."Safety Lead Time",SafetyLeadTime);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LFLItemSetup@5(VAR Item@1000 : Record 27;IncludeInventory@1001 : Boolean;ReschedulingPeriod@1006 : Text[30];LotAccumulationPeriod@1005 : Text[30];DampenerPeriod@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;LotSize@1007 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,'<0D>');

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Include Inventory",IncludeInventory);
      EVALUATE(Item."Lot Accumulation Period",LotAccumulationPeriod);
      EVALUATE(Item."Rescheduling Period",ReschedulingPeriod);
      EVALUATE(Item."Dampener Period",DampenerPeriod);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MaxQtyItemSetup@12(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaximumInventory@1006 : Integer;OverflowLevel@1005 : Integer;TimeBucket@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;SafetyLeadTime@1007 : Text[30];LotSize@1008 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,SafetyLeadTime);

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Maximum Qty.");
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Overflow Level",OverflowLevel);
      EVALUATE(Item."Time Bucket",TimeBucket);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FixedReorderQtyItemSetup@16(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;ReorderQuantity@1006 : Integer;OverflowLevel@1005 : Integer;TimeBucket@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;SafetyLeadTime@1007 : Text[30];LotSize@1008 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,SafetyLeadTime);

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.VALIDATE("Overflow Level",OverflowLevel);
      EVALUATE(Item."Time Bucket",TimeBucket);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OrderModifiersSetup@20(VAR Item@1000 : Record 27;MinOrderQty@1001 : Integer;MaxOrderQty@1002 : Integer;OrderMultiple@1003 : Integer);
    BEGIN
      Item.VALIDATE("Minimum Order Quantity",MinOrderQty);
      Item.VALIDATE("Maximum Order Quantity",MaxOrderQty);
      Item.VALIDATE("Order Multiple",OrderMultiple);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,
        LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearDefaultLocation@108();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      CLEAR(WarehouseEmployee);
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      IF WarehouseEmployee.FINDFIRST THEN BEGIN
        WarehouseEmployee.VALIDATE(Default,FALSE);
        WarehouseEmployee.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetDefaultLocation@111(LocationCode@1001 : Code[10]);
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      CLEAR(WarehouseEmployee);
      WarehouseEmployee.INIT;
      WarehouseEmployee.VALIDATE("User ID",USERID);
      WarehouseEmployee.VALIDATE("Location Code",LocationCode);
      WarehouseEmployee.VALIDATE(Default,TRUE);
      WarehouseEmployee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14;Directed@1005 : Boolean;BinMandatory@1001 : Boolean;UseAsInTransit@1006 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      WarehouseEmployee@1004 : Record 7301;
      BinCount@1002 : Integer;
    BEGIN
      IF Directed THEN
        LibraryWarehouse.CreateFullWMSLocation(Location,8)
      ELSE BEGIN
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
        // In transit location?
        IF UseAsInTransit THEN BEGIN
          Location.VALIDATE("Use As In-Transit",TRUE);
          Location.MODIFY(TRUE);
          EXIT;
        END;

        // Skip validate trigger for bin mandatory to improve performance.
        Location."Bin Mandatory" := BinMandatory;
        Location.MODIFY(TRUE);

        IF BinMandatory THEN
          FOR BinCount := 1 TO 4 DO
            LibraryWarehouse.CreateBin(Bin,Location.Code,'bin' + FORMAT(BinCount),'','');
      END;

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE TransferRoutesSetup@86();
    BEGIN
      CreateTransferRoutes(LocationWhite,LocationOne);
      CreateTransferRoutes(LocationWhite,LocationTwo);
      CreateTransferRoutes(LocationWhite,LocationThree);
      CreateTransferRoutes(LocationTwo,LocationOne);
      CreateTransferRoutes(LocationThree,LocationOne);
      CreateTransferRoutes(LocationThree,LocationTwo);
    END;

    LOCAL PROCEDURE CreateTransferRoutes@160(Location1@1000 : Record 14;Location2@1001 : Record 14);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,Location1.Code,Location2.Code);
      LibraryWarehouse.CreateTransferRoute(TransferRoute,Location2.Code,Location1.Code);
    END;

    LOCAL PROCEDURE ManufacturingSetup@7();
    VAR
      ManufacturingSetupRec@1000 : Record 99000765;
    BEGIN
      ManufacturingSetupRec.GET;
      ManufacturingSetupRec.VALIDATE("Components at Location",'');
      ManufacturingSetupRec.VALIDATE("Current Production Forecast",'');
      ManufacturingSetupRec.VALIDATE("Use Forecast on Locations",TRUE);
      ManufacturingSetupRec.VALIDATE("Combined MPS/MRP Calculation",TRUE);
      EVALUATE(ManufacturingSetupRec."Default Safety Lead Time",'<1D>');
      EVALUATE(ManufacturingSetupRec."Default Dampener Period",'');
      ManufacturingSetupRec.VALIDATE("Default Dampener Quantity",0);
      ManufacturingSetupRec.VALIDATE("Blank Overflow Level",ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      ManufacturingSetupRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobAndPlanningLine@154(VAR JobTask@1005 : Record 1001;VAR JobPlanningLine@1000 : Record 1003;No@1001 : Code[20];Quantity@1004 : Decimal;UsageLink@1003 : Boolean);
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,JobPlanningLine."Line Type"::Schedule,JobTask,No,Quantity,UsageLink);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@152(VAR JobPlanningLine@1001 : Record 1003;LineType@1002 : Option;JobTask@1000 : Record 1001;No@1004 : Code[20];Quantity@1005 : Decimal;UsageLink@1003 : Boolean);
    BEGIN
      LibraryJob.CreateJobPlanningLine(LineType,LibraryJob.ItemType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
      JobPlanningLine.VALIDATE("Usage Link",UsageLink);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@151(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateSaleDocType@49(VAR SalesHeader@1000 : Record 36;DocumentType@1005 : Option;Item@1003 : Record 27;SalesQty@1002 : Integer;ShipmentDate@1001 : Date;LocationCode@1007 : Code[10]);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,DocumentType,'',Item."No.",SalesQty,LocationCode,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateSalesOrder@77(VAR SalesHeader@1000 : Record 36;Item@1004 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1002 : Date;LocationCode@1006 : Code[10]);
    BEGIN
      CreateSaleDocType(SalesHeader,SalesHeader."Document Type"::Order,Item,SalesQty,ShipmentDate,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrder@76(VAR SalesHeader@1000 : Record 36;Item@1004 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1002 : Date;LocationCode@1006 : Code[10]);
    BEGIN
      CreateSaleDocType(SalesHeader,SalesHeader."Document Type"::"Return Order",Item,SalesQty,ShipmentDate,LocationCode);
    END;

    LOCAL PROCEDURE AddSalesOrderLine@56(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1002 : Date;LocationCode@1006 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SalesQty);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWith2Lines@50(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;SalesQty1@1003 : Integer;ShipmentDate1@1002 : Date;SalesQty2@1006 : Integer;ShipmentDate2@1005 : Date;LocationCode@1008 : Code[10]);
    BEGIN
      CreateSalesOrder(SalesHeader,Item,SalesQty1,ShipmentDate1,LocationCode);
      AddSalesOrderLine(SalesHeader,SalesLine,Item,SalesQty2,ShipmentDate2,LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@51(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1004 : Record 27;PurchaseQty@1003 : Decimal;ReceiptDate@1002 : Date;LocationCode@1005 : Code[10]);
    BEGIN
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",PurchaseQty);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Expected Receipt Date",ReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@93(VAR TransferHeader@1000 : Record 5740;ItemNo@1004 : Code[20];FromLocation@1002 : Code[10];ToLocation@1003 : Code[10];ReceiptDate@1006 : Date;Qty@1005 : Decimal);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,TransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Qty);
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRelProdOrderAndRefresh@96(VAR ProductionOrder@1000 : Record 5405;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;DueDate@1005 : Date;LocationCode@1001 : Code[10];OutputBinCode@1002 : Code[20]);
    BEGIN
      CreateProdOrderAndRefresh(ProductionOrder,ProductionOrder.Status::Released,ItemNo,Quantity,DueDate,LocationCode,OutputBinCode);
    END;

    LOCAL PROCEDURE CreatePlanProdOrderAndRefresh@81(VAR ProductionOrder@1000 : Record 5405;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;DueDate@1005 : Date;LocationCode@1001 : Code[10];OutputBinCode@1002 : Code[20]);
    BEGIN
      CreateProdOrderAndRefresh(ProductionOrder,ProductionOrder.Status::Planned,ItemNo,Quantity,DueDate,LocationCode,OutputBinCode);
    END;

    LOCAL PROCEDURE CreateFPlanProdOrderAndRefresh@82(VAR ProductionOrder@1000 : Record 5405;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;DueDate@1005 : Date;LocationCode@1001 : Code[10];OutputBinCode@1002 : Code[20]);
    BEGIN
      CreateProdOrderAndRefresh(ProductionOrder,ProductionOrder.Status::"Firm Planned",
        ItemNo,Quantity,DueDate,LocationCode,OutputBinCode);
    END;

    LOCAL PROCEDURE CreateProdOrderAndRefresh@79(VAR ProductionOrder@1000 : Record 5405;OrderStatus@1006 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;DueDate@1005 : Date;LocationCode@1001 : Code[10];OutputBinCode@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,OrderStatus,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      IF LocationCode <> '' THEN
        ProductionOrder.VALIDATE("Location Code",LocationCode);
      IF OutputBinCode <> '' THEN
        ProductionOrder.VALIDATE("Bin Code",OutputBinCode);

      // Needed for executing the validate trigger on due date
      ProductionOrder.SetUpdateEndDate;
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);

      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateSKUs@162(Item@1002 : Record 27;LocationFilter@1000 : Text;VariantFilter@1001 : Text);
    VAR
      SKUCreationMethod@1003 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",Item."No.");
      IF LocationFilter <> '' THEN
        Item.SETFILTER("Location Filter",LocationFilter);
      IF VariantFilter <> '' THEN
        Item.SETFILTER("Variant Filter",VariantFilter);

      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::"Location & Variant",FALSE,FALSE);
    END;

    LOCAL PROCEDURE UpdateSKUAsTransfer@166(Item@1002 : Record 27;Location@1003 : Code[10];Variant@1004 : Code[10];LocationFromCode@1001 : Code[10]);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      StockkeepingUnit.GET(Location,Item."No.",Variant);
      StockkeepingUnit.VALIDATE("Replenishment System",StockkeepingUnit."Replenishment System"::Transfer);
      StockkeepingUnit.VALIDATE("Transfer-from Code",LocationFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateAndPostConsumption@227(ProductionOrder@1000 : Record 5405);
    BEGIN
      ConsumptionJournalSetup;
      ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      COMMIT;
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@226();
    BEGIN
      CLEAR(ConsumptionItemJournalTemplate);
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(
        ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      CLEAR(ConsumptionItemJournalBatch);
      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,
        ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE GetLastWhseShipmentCreated@114(VAR WarehouseShipmentHeader@1003 : Record 7320;Location@1002 : Record 14);
    BEGIN
      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader.SETRANGE("Location Code",Location.Code);
      WarehouseShipmentHeader.FINDLAST;
    END;

    LOCAL PROCEDURE GetLastActvHdrCreatedNoSrc@117(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option);
    BEGIN
      WhseActivityHdr.INIT;
      WhseActivityHdr.SETRANGE("Location Code",Location.Code);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      WhseActivityHdr.FINDLAST;
    END;

    LOCAL PROCEDURE GetLastReceiptHdrCreatedNoSrc@123(VAR WhseReceiptHeader@1003 : Record 7316;Location@1002 : Record 14);
    BEGIN
      WhseReceiptHeader.INIT;
      WhseReceiptHeader.SETRANGE("Location Code",Location.Code);
      WhseReceiptHeader.FINDLAST;
    END;

    LOCAL PROCEDURE SetQtyToHandleOnActivityLines@272(WarehouseActivityHeader@1000 : Record 5766;Qty@1002 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      CLEAR(WarehouseActivityLine);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.FINDSET(TRUE);
      REPEAT
        WarehouseActivityLine.VALIDATE(Quantity,Qty);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetQtyToHandleOnReceiptLines@127(WarehouseReceiptHeader@1000 : Record 7316;Qty@1002 : Decimal);
    VAR
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      CLEAR(WarehouseReceiptLine);
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptHeader."No.");
      WarehouseReceiptLine.FINDSET(TRUE);
      REPEAT
        WarehouseReceiptLine.VALIDATE(Quantity,Qty);
        WarehouseReceiptLine.MODIFY(TRUE);
      UNTIL WarehouseReceiptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RegisterWarehousePick@119(Location@1000 : Record 14;QtyToRegister@1002 : Decimal);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      GetLastActvHdrCreatedNoSrc(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::Pick);
      SetQtyToHandleOnActivityLines(WarehouseActivityHeader,QtyToRegister);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@118(Location@1000 : Record 14;QtyToPost@1002 : Decimal);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      GetLastReceiptHdrCreatedNoSrc(WarehouseReceiptHeader,Location);
      SetQtyToHandleOnReceiptLines(WarehouseReceiptHeader,QtyToPost);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE SetBOMOnItem@97(VAR ParentItem@1000 : Record 27;VAR ProductionBOMHeader@1001 : Record 99000771);
    BEGIN
      // Uncertify production BOM and set UOM as the base UOM of the parent item
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::New);
      ProductionBOMHeader.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE("Unit of Measure Code",ParentItem."Base Unit of Measure");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);

      // Set the production BOM on the item
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOM@95(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ChildItem@1002 : Record 27;QtyPer@1001 : Integer);
    VAR
      UnitOfMeasure@1005 : Record 204;
      ProductionBOMLine@1006 : Record 99000772;
    BEGIN
      // Choose any unit of measure
      UnitOfMeasure.INIT;
      UnitOfMeasure.FINDFIRST;
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);

      // Create component in the BOM
      ItemSetup(ChildItem,ChildItem."Replenishment System"::Purchase,'<0D>');
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
        ProductionBOMLine.Type::Item,ChildItem."No.",QtyPer);

      // Certify BOM
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseSalesPlan@15(Item@1000 : Record 27;PurchaseQty@1001 : Integer;ReceivingDate@1002 : Date;SalesQty@1003 : Integer;ShipmentDate@1004 : Date;LocationCode@1007 : Code[10];LocationFilter@1008 : Code[50]);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,PurchaseQty,ReceivingDate,LocationCode);

      SalesPlan(Item,SalesQty,ShipmentDate,LocationCode,LocationFilter);
    END;

    LOCAL PROCEDURE SalesPlan@11(Item@1000 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1004 : Date;LocationCode@1001 : Code[10];LocationFilter@1002 : Code[50]);
    VAR
      SalesHeader@1007 : Record 36;
    BEGIN
      CreateSalesOrder(SalesHeader,Item,SalesQty,ShipmentDate,LocationCode);

      // Filter on location for regen plan
      IF LocationFilter <> '' THEN BEGIN
        Item.SETFILTER("Location Filter",LocationFilter);
        Item.SETRANGE("No.",Item."No.");
      END;
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
    END;

    LOCAL PROCEDURE PurchasePlan@38(Item@1000 : Record 27;PurchaseQty@1003 : Integer;ReceivingDate@1004 : Date;LocationCode@1005 : Code[10];LocationFilter@1006 : Code[50]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,PurchaseQty,ReceivingDate,LocationCode);

      // Filter on location for regen plan
      IF LocationFilter <> '' THEN BEGIN
        Item.SETFILTER("Location Filter",LocationFilter);
        Item.SETRANGE("No.",Item."No.");
      END;
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
    END;

    LOCAL PROCEDURE AddInventoryDirectedLocation@102(Item@1003 : Record 27;LocationCode@1000 : Code[10];ZoneCode@1005 : Code[10];BinCode@1001 : Code[20];Qty@1004 : Integer);
    VAR
      WarehouseJournalLine@1002 : Record 7311;
    BEGIN
      ClearWarehouseJournal(WarehouseJournalTemplate,WarehouseJournalBatch);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,LocationCode,
        ZoneCode,BinCode,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      LibraryWarehouse.RegisterWhseJournalLine(WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,LocationCode,FALSE);

      // Add to inventory
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE AddInventoryNonDirectLocation@6(Item@1003 : Record 27;LocationCode@1000 : Code[10];BinCode@1001 : Code[10];Qty@1004 : Integer);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE AddInventoryNonDirectLocationWithLotNo@159(Item@1003 : Record 27;LocationCode@1000 : Code[10];Qty@1004 : Decimal;LotNo@1005 : Code[10]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);

      CreateItemJnlLineWithLot(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationCode,Qty,LotNo);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE RemoveInventoryNonDirectLocationWithLotNo@161(Item@1003 : Record 27;LocationCode@1000 : Code[10];Qty@1004 : Decimal;LotNo@1005 : Code[10]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);

      CreateItemJnlLineWithLot(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",LocationCode,Qty,LotNo);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE AddInventoryBlankLocation@13(Item@1003 : Record 27;Qty@1004 : Integer);
    BEGIN
      AddInventoryNonDirectLocation(Item,'','',Qty);
    END;

    LOCAL PROCEDURE ClearItemJournal@134(ItemJournalTemplate@1002 : Record 82;ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE ClearWarehouseJournal@103(WarehouseJournalTemplate@1002 : Record 7309;WarehouseJournalBatch@1001 : Record 7310);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      CLEAR(WarehouseJournalLine);
      WarehouseJournalLine.SETRANGE("Journal Template Name",WarehouseJournalTemplate.Name);
      WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE TestSetup@32();
    BEGIN
      ErrorMessageCounter := 0;
      ManufacturingSetup;
      ClearDefaultLocation;
    END;

    LOCAL PROCEDURE FilterRequisitionLineOnPlanningWorksheet@147(VAR RequisitionLine@1002 : Record 246;ItemNo@1007 : Code[20];LocationCode@1000 : Code[10];ActionMsg@1006 : Option;RefOrderType@1001 : Option;OrigDueDate@1005 : Date;DueDate@1004 : Date;OrigQty@1003 : Decimal);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        SETRANGE("Action Message",ActionMsg);
        SETRANGE("Original Due Date",OrigDueDate);
        SETRANGE("Due Date",DueDate);
        SETRANGE("Original Quantity",OrigQty);
        SETRANGE("Ref. Order Type",RefOrderType);
        IF LocationCode <> '' THEN
          SETRANGE("Location Code",LocationCode);
      END;
    END;

    LOCAL PROCEDURE AssertPlanningLine@3(Item@1007 : Record 27;ActionMsg@1000 : Option;OrigDueDate@1001 : Date;DueDate@1002 : Date;OrigQty@1003 : Decimal;Quantity@1004 : Decimal;RefOrderType@1008 : Option;LocationCode@1009 : Code[10];NoOfLines@1006 : Integer);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      FilterRequisitionLineOnPlanningWorksheet(
        RequisitionLine,Item."No.",LocationCode,ActionMsg,RefOrderType,OrigDueDate,DueDate,OrigQty);
      RequisitionLine.SETRANGE(Quantity,Quantity);
      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,STRSUBSTNO(FilterRequisitionLineMsg,RequisitionLine.GETFILTERS));
    END;

    LOCAL PROCEDURE AssertPlanningLineWithMaximumOrderQty@165(ItemNo@1008 : Code[20];ActionMsg@1007 : Option;OrigDueDate@1006 : Date;DueDate@1005 : Date;OrigQty@1004 : Decimal;Quantity@1003 : Decimal;RefOrderType@1002 : Option;LocationCode@1001 : Code[10]);
    VAR
      RequisitionLine@1009 : Record 246;
      TotalQuantity@1010 : Decimal;
    BEGIN
      FilterRequisitionLineOnPlanningWorksheet(RequisitionLine,ItemNo,LocationCode,ActionMsg,RefOrderType,OrigDueDate,DueDate,OrigQty);
      RequisitionLine.FINDSET;
      REPEAT
        TotalQuantity += RequisitionLine.Quantity;
      UNTIL RequisitionLine.NEXT = 0;
      Assert.AreEqual(Quantity,TotalQuantity,STRSUBSTNO(FilterRequisitionLineMsg,RequisitionLine.GETFILTERS));
    END;

    LOCAL PROCEDURE AssertNoLinesForItem@24(Item@1007 : Record 27);
    BEGIN
      AssertNumberOfLinesForItem(Item,0);
    END;

    LOCAL PROCEDURE AssertNumberOfLinesForItem@25(Item@1007 : Record 27;NoOfLines@1000 : Integer);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");

      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,'There should be ' + FORMAT(NoOfLines) +
        ' line(s) in the planning worksheet for item ' + Item."No.");
    END;

    LOCAL PROCEDURE SetupForTransfer@130(VAR Item@1000 : Record 27;VAR LocationFrom@1001 : Record 14;VAR LocationTo@1002 : Record 14);
    VAR
      TransferRoute@1003 : Record 5742;
    BEGIN
      LFLItemSetup(Item,TRUE,'','<1W>','',0,0,0);
      LocationSetup(LocationFrom,FALSE,FALSE,FALSE);
      LocationSetup(LocationTo,FALSE,FALSE,FALSE);
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationFrom.Code,LocationTo.Code);
    END;

    LOCAL PROCEDURE CreateAndPostItemJnlLine@131(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1002 : Code[10]);
    VAR
      ItemJournalTemplate@1003 : Record 82;
      ItemJournalBatch@1004 : Record 233;
      ItemJnlLine@1005 : Record 83;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJnlLine."Entry Type",ItemNo,Quantity);

      ItemJnlLine.VALIDATE("Location Code",LocationCode);
      ItemJnlLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateScenario273416@132(Item@1000 : Record 27;LocationFromCode@1001 : Code[10];LocationToCode@1002 : Code[10]);
    VAR
      TransferHeader@1003 : Record 5740;
      SalesHeader@1004 : Record 36;
    BEGIN
      // create inventory on location From
      CreateAndPostItemJnlLine(Item."No.",15,LocationFromCode);

      // create transfer from LocationFrom to LocationTo
      CreateTransferOrder(TransferHeader,Item."No.",LocationFromCode,LocationToCode,WORKDATE + 2,13);
      // post Shipment of tranfer
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // create demand - sales order, use LocationTo
      CreateSalesOrder(SalesHeader,Item,11,WORKDATE + 3,LocationToCode);

      // run planning for item and LocationTo
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationToCode);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE - 1,WORKDATE + 5);
    END;

    LOCAL PROCEDURE AssertTrackingLineForItem@133(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];NoOfLines@1003 : Integer);
    VAR
      ReservationEntry@1004 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status","Shipment Date");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Location Code",LocationCode);

        Assert.AreEqual(NoOfLines,COUNT,STRSUBSTNO(Text001,NoOfLines,GETFILTERS));
      END;
    END;

    LOCAL PROCEDURE AssertTrackingLineForSource@138(SourceType@1000 : Integer;SourceSubType@1001 : Integer;SourceID@1002 : Code[20];NoOfLines@1003 : Integer);
    VAR
      ReservationEntry@1004 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        SETRANGE("Source ID",SourceID);
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);

        Assert.AreEqual(NoOfLines,COUNT,STRSUBSTNO(Text001,NoOfLines,GETFILTERS));
      END;
    END;

    LOCAL PROCEDURE FinishSetupOfItem@139(VAR ItemFG@1000 : Record 27;VAR ItemComp@1001 : Record 27);
    VAR
      ItemTrackingCode@1002 : Record 6502;
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      // create LOT tracking
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);

      // create the second item - component
      FixedReorderQtyItemSetup(ItemComp,0,200,1000,'<1W>',0,100,'',0);
      OrderModifiersSetup(ItemComp,100,0,100);
      ItemComp.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      ItemComp.MODIFY(TRUE);

      // create BOM for final item for second UoM
      ProductionBOMHeader."No." := ItemFG."No.";
      CreateAndCertifyProdBOM(ProductionBOMHeader,ItemFG."Base Unit of Measure",ItemComp."No.",12);
      ItemFG.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ItemFG.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProdBOM@136(VAR ProductionBOMHeader@1000 : Record 99000771;UoM@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ProductionBOMLine@1004 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UoM);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,Quantity);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FillInventoryForComp@144(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];LocationFromCode@1002 : Code[10];LocationToCode@1003 : Code[10];LotNo@1004 : Code[10]);
    VAR
      ItemJournalTemplate@1005 : Record 82;
      ItemJournalBatch@1006 : Record 233;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);

      CreateItemJnlLineWithLot(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LocationToCode,80,LotNo);
      CreateItemJnlLineWithLot(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LocationToCode,120,LotNo);
      CreateItemJnlLineWithLot(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LocationFromCode,500,LotNo);

      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateItemJnlLineWithLot@145(VAR ItemJournalLine@1000 : Record 83;ItemJnlTemplateName@1001 : Code[10];ItemJnlBatchName@1002 : Code[10];EntryType@1007 : 'Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output';ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];Quantity@1005 : Decimal;LotNo@1006 : Code[10]);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJnlTemplateName,ItemJnlBatchName,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);

      // assign Lot No to item journal line - triggers the ItemTrackingPageHandler handler
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    LOCAL PROCEDURE CreateProductionOrders@137(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VAR ProductionOrder@1002 : ARRAY [3] OF Record 5405);
    BEGIN
      CreateRelProdOrderAndRefresh(ProductionOrder[1],ItemNo,10,WORKDATE + 15,LocationCode,'');
      CreateRelProdOrderAndRefresh(ProductionOrder[2],ItemNo,10,WORKDATE + 15,LocationCode,'');

      CreateFPlanProdOrderAndRefresh(ProductionOrder[3],ItemNo,10,WORKDATE + 30,LocationCode,'');
    END;

    LOCAL PROCEDURE CreateAndShipTransfer@142(VAR TransferHeader@1000 : Record 5740;ItemNo@1001 : Code[20];LocationFromCode@1002 : Code[10];LocationToCode@1003 : Code[10];Quantity@1004 : Decimal;LotNo@1005 : Code[10];ReceiveDate@1008 : Date;QuantityToShip@1006 : Decimal);
    VAR
      TransferLine@1007 : Record 5741;
    BEGIN
      // create transfer from LocationFrom to LocationTo
      CreateTransferOrder(TransferHeader,ItemNo,LocationFromCode,LocationToCode,ReceiveDate,Quantity);

      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDSET;
      REPEAT
        TransferLine.VALIDATE("Qty. to Ship",QuantityToShip);
        TransferLine.MODIFY(TRUE);
        CreateItemTrackingForTransfer(TransferLine,LotNo);
      UNTIL TransferLine.NEXT = 0;

      // post Shipment of tranfer
      IF QuantityToShip > 0 THEN
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemTrackingForTransfer@148(TransferLine@1000 : Record 5741;LotNo@1001 : Code[10]);
    VAR
      Direction@1003 : 'Outbound,Inbound';
    BEGIN
      // assign Lot No to trnasfer line - triggers the ItemTrackingPageHandler handler
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(TransferLine."Quantity (Base)");
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE SetupForBug272514@140(VAR ProductionOrder@1000 : ARRAY [3] OF Record 5405;VAR TransferHeader@1001 : Record 5740;ItemFGNo@1002 : Code[20];ItemCompNo@1003 : Code[20];LocationFromCode@1004 : Code[10];LocationToCode@1005 : Code[10]);
    VAR
      ItemJournalLine@1006 : Record 83;
    BEGIN
      // fill inventory for component
      FillInventoryForComp(ItemJournalLine,ItemCompNo,LocationFromCode,LocationToCode,Text002);

      // create production orders - 2x RPO and 1x FPPO
      CreateProductionOrders(ItemFGNo,LocationToCode,ProductionOrder);

      // create transfer and post shipment of it
      CreateAndShipTransfer(TransferHeader,ItemCompNo,LocationFromCode,LocationToCode,300,Text002,WORKDATE + 7,300);

      // post more inventory
      CreateItemJnlLineWithLot(
        ItemJournalLine,ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemCompNo,LocationToCode,20,Text002);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateItemTrackingForFPPO@149(ProductionOrder@1000 : Record 5405;LotNo@1001 : Code[10]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      ReservationEntry@1003 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
        ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
        ProdOrderComponent.FINDFIRST;

        SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        SETRANGE("Source ID",ProdOrderComponent."Prod. Order No.");
        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETRANGE("Source Subtype",ProdOrderComponent.Status);
        SETRANGE("Source Prod. Order Line",ProdOrderComponent."Prod. Order Line No.");
        SETRANGE("Source Ref. No.",ProdOrderComponent."Line No.");
        FINDFIRST;
        VALIDATE("Lot No.",LotNo);

        UpdateItemTracking;
        MODIFY(TRUE);
      END;
    END;

    [Test]
    PROCEDURE TC11ReorderPoint@124();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,49,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS used
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC12ReorderPoint@9();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS used
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W + 2D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC21ReorderPoint@17();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,145,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W + 2D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC22ReorderPoint@18();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'1M',0,10,'',0);
      OrderModifiersSetup(Item,25,0,3);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,150,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),145,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC23ReorderPoint@22();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);
      OrderModifiersSetup(Item,0,2,0);
      EVALUATE(Item."Lead Time Calculation",'1W');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,50);

      // Exercise
      PurchaseSalesPlan(
        Item,200,CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),45,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLineWithMaximumOrderQty(Item."No.",RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'');
    END;

    [Test]
    PROCEDURE TC24ReorderPoint@19();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,200,CALCDATE(PlanningStartDate,CALCDATE('<+1W + 2D>',WORKDATE)),'');
      PurchaseSalesPlan(
        Item,5,CALCDATE(PlanningStartDate,CALCDATE('<+1WD>',WORKDATE)),145,CALCDATE(PlanningStartDate,CALCDATE('<+1W + 1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC25ReorderPoint@21();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,145,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W + 2D>',WORKDATE)),0,490,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC26ReorderPoint@23();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);
      OrderModifiersSetup(Item,25,0,3);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,300,CALCDATE(PlanningStartDate,CALCDATE('<+1W + 1D>',WORKDATE)),145,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC27ReorderPoint@26();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);
      OrderModifiersSetup(Item,0,5,0);
      EVALUATE(Item."Lead Time Calculation",'2W');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,50);

      // Exercise
      PurchaseSalesPlan(
        Item,300,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),50,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),'',
        '');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLineWithMaximumOrderQty(Item."No.",RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,10,RequisitionLine."Ref. Order Type"::Purchase,'');
    END;

    [Test]
    PROCEDURE TC28ReorderPoint@27();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);
      EVALUATE(Item."Lead Time Calculation",'2W');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,200,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      PurchaseSalesPlan(
        Item,5,CALCDATE(PlanningStartDate,CALCDATE('<+3D>',WORKDATE)),145,CALCDATE(PlanningStartDate,CALCDATE('<+3D>',WORKDATE)),'',
        '');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC29SafetyStock@28();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,10,0);

      // Add inventory
      AddInventoryBlankLocation(Item,50);

      // Exercise
      SalesPlan(Item,45,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC210SafetyStock@29();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,10,0);
      OrderModifiersSetup(Item,25,100,10);

      // Add inventory
      AddInventoryBlankLocation(Item,10);

      // Exercise
      CreateSalesOrderWith2Lines(
        SalesHeader,SalesLine,Item,155,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),25,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'');
      SalesPlan(Item,5,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,4);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,30,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),0,100,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),0,30,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),0,30,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC211SafetyStock@30();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,10,0);

      // Add inventory
      AddInventoryBlankLocation(Item,10);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,60,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'');
      CreateSalesOrderWith2Lines(
        SalesHeader,SalesLine,Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),55,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),'');
      SalesPlan(Item,55,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),60,55,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),50,55,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC31ReorderPoint@31();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,60,100,0,'',0,10,'',0);
      OrderModifiersSetup(Item,0,50,0);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      SalesPlan(Item,200,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,5);
      AssertPlanningLineWithMaximumOrderQty(Item."No.",RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,110,RequisitionLine."Ref. Order Type"::Purchase,'');
      AssertPlanningLineWithMaximumOrderQty(Item."No.",RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W + 2D>',WORKDATE)),0,90,RequisitionLine."Ref. Order Type"::Purchase,'');
    END;

    [Test]
    PROCEDURE TC32ReorderPoint@33();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,60,100,0,'',0,0,'',0);
      OrderModifiersSetup(Item,25,0,0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      CreateSalesOrder(SalesHeader,Item,75,CALCDATE(PlanningStartDate,CALCDATE('<+2W+3D>',WORKDATE)),'');
      SalesPlan(Item,30,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+4W+1D>',WORKDATE)),0,75,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC33ReorderPoint@34();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,60,100,0,'',0,0,'',0);
      OrderModifiersSetup(Item,0,0,10);
      EVALUATE(Item."Lead Time Calculation",'1M');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,110,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'');
      CreateSalesOrder(SalesHeader,Item,55,CALCDATE(PlanningStartDate,CALCDATE('<+3W-2D>',WORKDATE)),'');
      SalesPlan(Item,55,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC34ReorderPoint@35();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,200,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,60,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+2D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC35ReorderPoint@36();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);
      EVALUATE(Item."Lead Time Calculation",'1W');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,100,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,20,CALCDATE(PlanningStartDate,CALCDATE('<+2w-2D>',WORKDATE)),'');
      CreateSalesOrder(SalesHeader,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'');
      SalesPlan(Item,60,CALCDATE(PlanningStartDate,CALCDATE('<+2W-2D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC41ReorderPoint@37();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,50);

      // Exercise
      PurchasePlan(Item,51,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC42ReorderPoint@39();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'',0,0,'',0);
      OrderModifiersSetup(Item,0,0,10);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchasePlan(Item,100,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC43SafetyStock@40();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,10,0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,15,CALCDATE('<+4D>',WORKDATE),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,25,CALCDATE('<+8D>',WORKDATE),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,130,CALCDATE('<+10D>',WORKDATE),'');
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,75,CALCDATE('<+0D>',WORKDATE),70,CALCDATE('<+2D>',WORKDATE),'');
      SalesPlan(Item,25,CALCDATE('<+6D>',WORKDATE),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC44ReorderPoint@41();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,75);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC45ReorderPoint@42();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,75,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,425,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC46ReorderPoint@43();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,100,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),75,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'',
        '');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC47ReorderPoint@44();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,5);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC48ReorderPoint@45();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      SalesPlan(Item,95,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,490,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC49ReorderPoint@46();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'+1W',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      PurchaseSalesPlan(
        Item,100,CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),95,CALCDATE(PlanningStartDate,CALCDATE('<-1W-1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC410ReorderPoint@47();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,500,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC411ReorderPoint@52();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,500,0,'',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,5);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),0,490,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC412SafetyStock@48();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,10,0);

      // Add inventory
      AddInventoryBlankLocation(Item,100);

      // Exercise
      CreateSalesOrderWith2Lines(
        SalesHeader,SalesLine,Item,25,CALCDATE(PlanningStartDate,CALCDATE('<-3W>',WORKDATE)),50,
        CALCDATE(PlanningStartDate,CALCDATE('<-2W>',WORKDATE)),'');
      SalesPlan(Item,40,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<-1D>',WORKDATE)),0,15,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC413ReorderPoint@53();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,500,0,'2W',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,150,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),175,CALCDATE(PlanningStartDate,CALCDATE('<-1W>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<-1D>',WORKDATE)),0,25,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC51ReorderPoint@54();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,200,0,'1W',0,10,'',0);
      EVALUATE(Item."Lead Time Calculation",'3D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,40,CALCDATE(PlanningStartDate,CALCDATE('<+2D>',WORKDATE)),40,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),'');
      SalesPlan(Item,180,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+4D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W+4D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC52ReorderPoint@55();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,200,0,'1W',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),150,
        CALCDATE(PlanningStartDate,CALCDATE('<+3D>',WORKDATE)),'');
      SalesPlan(Item,150,CALCDATE(PlanningStartDate,CALCDATE('<+2W-2D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W+1D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3D>',WORKDATE)),0,99,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC53ReorderPoint@57();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,200,0,'2W',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,100,CALCDATE(PlanningStartDate,CALCDATE('<+2W-1D>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+4W-1D>',WORKDATE)),'');
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),25,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W-2D>',WORKDATE)),'');
      SalesPlan(Item,75,CALCDATE(PlanningStartDate,CALCDATE('<+3W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC54ReorderPoint@58();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'1W',0,10,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),25,
        CALCDATE(PlanningStartDate,CALCDATE('<+3D>',WORKDATE)),'');
      SalesPlan(Item,125,CALCDATE(PlanningStartDate,CALCDATE('<+3W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,149,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+4W+1D>',WORKDATE)),0,125,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC55ReorderPoint@59();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'1W',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,75,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),50,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),'');
      SalesPlan(Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),0,50,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),0,24,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC56ReorderPoint@60();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'1M',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,49,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,200,CALCDATE(PlanningStartDate,
          CALCDATE(DaysInMonthFormula,CALCDATE('<-1D>',WORKDATE))),''); // +1M-1D
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,100,CALCDATE(PlanningStartDate,
          CALCDATE(DaysInMonthFormula,CALCDATE(DaysInMonthFormula,CALCDATE('<-1D>',WORKDATE)))),''); // +2M-1D
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,75,CALCDATE(PlanningStartDate,CALCDATE('<+1W>',WORKDATE)),75,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),'');
      SalesPlan(Item,150,CALCDATE(PlanningStartDate,
          CALCDATE(DaysInMonthFormula,CALCDATE('<+1D>',WORKDATE))),'',''); // 1M+1D

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC57SafetyStock@61();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,FALSE,'','1W','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),50,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W+1D>',WORKDATE)),'');
      SalesPlan(Item,63,CALCDATE(PlanningStartDate,CALCDATE('<+2W+2D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,75,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W+2D>',WORKDATE)),0,63,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC58SafetyStock@62();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','1W','',0,10,0);

      // Add inventory
      AddInventoryBlankLocation(Item,10);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,5,CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),15,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-1D>',WORKDATE)),'');
      SalesPlan(Item,30,CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),0,20,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W>',WORKDATE)),0,30,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC59SafetyStock@63();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,FALSE,'','10D','',0,0,0);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,55,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,30,CALCDATE(PlanningStartDate,CALCDATE('<+3W-2D>',WORKDATE)),'');
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,55,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),10,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W-2D>',WORKDATE)),'');
      SalesPlan(Item,20,CALCDATE(PlanningStartDate,CALCDATE('<+3W+3D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC61ReorderPoint@64();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,250,0,'',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      SalesPlan(Item,75,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+3D>',WORKDATE)),0,250,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC62ReorderPoint@65();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,250,0,'',0,0,'',0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+3W>',WORKDATE)),75,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W-1D>',WORKDATE)),0,250,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC63ReorderPoint@66();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,250,0,'',0,0,'',0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      PurchaseSalesPlan(
        Item,26,CALCDATE(PlanningStartDate,CALCDATE('<+3W-1D>',WORKDATE)),75,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC64ReorderPoint@67();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'',0,10,'',0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreateSalesOrder(SalesHeader,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      SalesPlan(Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+1W+2D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W-1D>',WORKDATE)),0,149,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC65ReorderPoint@68();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      MaxQtyItemSetup(Item,100,200,0,'',0,10,'',0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      PurchaseSalesPlan(
        Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+3W-1D>',WORKDATE)),50,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W-1D>',WORKDATE)),0,124,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC66SafetyStock@69();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,FALSE,'','1W','',0,0,0);
      EVALUATE(Item."Lead Time Calculation",'3D');
      Item.MODIFY(TRUE);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),100,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W-1D>',WORKDATE)),'');
      SalesPlan(Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+2W+3D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,150,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W+3D>',WORKDATE)),0,25,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC71ReorderPoint@70();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,200,0,'1W',0,0,'',0);

      // Add inventory
      AddInventoryBlankLocation(Item,101);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,50,CALCDATE(PlanningStartDate,CALCDATE('<+1D>',WORKDATE)),150,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),'');
      SalesPlan(Item,150,CALCDATE(PlanningStartDate,CALCDATE('<+2W-2D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+2W+1D>',WORKDATE)),0,200,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W-2D>',WORKDATE)),0,99,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC72ReorderPoint@71();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      FixedReorderQtyItemSetup(Item,100,250,0,'',0,0,'',0);
      EVALUATE(Item."Lead Time Calculation",'10D');
      Item.MODIFY(TRUE);

      // Add inventory
      AddInventoryBlankLocation(Item,150);

      // Exercise
      CreateSalesOrder(SalesHeader,Item,74,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      PurchaseSalesPlan(
        Item,25,CALCDATE(PlanningStartDate,CALCDATE('<+2W+3D>',WORKDATE)),1,CALCDATE(PlanningStartDate,CALCDATE('<+2W-2D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+3W+3D>',WORKDATE)),0,250,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC11OrderPriorities@73();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Add inventory
      AddInventoryBlankLocation(Item,2);

      // Exercise
      CreateSalesReturnOrder(SalesHeader,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC12OrderPriorities@87();
    VAR
      TransferHeader@1006 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Add inventory
      AddInventoryNonDirectLocation(Item,LocationOne.Code,'',1);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      SalesPlan(
        Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code + '|' + LocationTwo.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Transfer,'',1);
    END;

    [Test]
    PROCEDURE TC13OrderPriorities@72();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CreateSalesReturnOrder(SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::"Prod. Order",'',1);
    END;

    [Test]
    PROCEDURE TC14OrderPriorities@74();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Add inventory
      AddInventoryBlankLocation(Item,1);

      // Exercise
      PurchaseSalesPlan(
        Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),
        '','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    PROCEDURE TC21OrderPriorities@88();
    VAR
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,'');
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Purchase,LocationOne.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::"Prod. Order",
        LocationOne.Code,1);
    END;

    [Test]
    PROCEDURE TC22OrderPriorities@89();
    VAR
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,'');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::"Prod. Order",
        LocationOne.Code,1);
    END;

    [Test]
    PROCEDURE TC23OrderPriorities@90();
    VAR
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Purchase,LocationOne.Code,1);
    END;

    [Test]
    PROCEDURE TC24OrderPriorities@91();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,'');
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Purchase,LocationOne.Code,1);
    END;

    [Test]
    PROCEDURE TC31OrderPriorities@78();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreatePlanProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC32OrderPriorities@80();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateFPlanProdOrderAndRefresh(ProductionOrder,Item."No.",2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),2,0,RequisitionLine."Ref. Order Type"::"Prod. Order",'',1);
    END;

    [Test]
    PROCEDURE TC33OrderPriorities@83();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreatePlanProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CreateFPlanProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC41OrderPriorities@92();
    VAR
      TransferHeader@1002 : Record 5740;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Add inventory
      AddInventoryNonDirectLocation(Item,LocationOne.Code,'',1);
      AddInventoryNonDirectLocation(Item,LocationTwo.Code,'',10);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC42OrderPriorities@98();
    VAR
      Item@1000 : Record 27;
      ChildItem@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      CreateBOM(ProductionBOMHeader,ChildItem,1);
      SetBOMOnItem(Item,ProductionBOMHeader);

      // Add inventory
      AddInventoryBlankLocation(Item,1);
      AddInventoryBlankLocation(ChildItem,10);

      // Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CalculateAndPostConsumption(ProductionOrder);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC43OrderPriorities@84();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      PurchaseLine.VALIDATE("Qty. to Receive",1);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE TC44OrderPriorities@94();
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      CreateBOM(ProductionBOMHeader,ChildItem,1);
      SetBOMOnItem(Item,ProductionBOMHeader);

      // Add inventory
      AddInventoryNonDirectLocation(ChildItem,LocationOne.Code,'',10);

      // Exercise
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,'');
      CalculateAndPostConsumption(ProductionOrder);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Transfer,'',1);
    END;

    [Test]
    PROCEDURE TC45OrderPriorities@85();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'');
      PurchaseLine.VALIDATE("Qty. to Receive",1);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      SalesPlan(Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),'','');

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),2,0,RequisitionLine."Ref. Order Type"::"Prod. Order",'',1);
    END;

    [Test]
    PROCEDURE TC51OrderPriorities@99();
    VAR
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateSalesReturnOrder(SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code);
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationWhite.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Transfer,'',1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHndlRegisterWhseJnlLine,TC52MessageHandler)]
    PROCEDURE TC52OrderPriorities@104();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      ProductionOrder@1006 : Record 5405;
      Bin@1008 : Record 7354;
      ProductionBOMHeader@1009 : Record 99000771;
      ChildItem@1010 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      CreateBOM(ProductionBOMHeader,ChildItem,1);
      SetBOMOnItem(Item,ProductionBOMHeader);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,'PICK',1);
      SetDefaultLocation(LocationWhite.Code);

      // Add inventory
      AddInventoryDirectedLocation(ChildItem,LocationWhite.Code,'PICK',Bin.Code,10);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,'');
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::"Prod. Order",'',1);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHndlRegisterWhseJnlLine@211(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,MSG_WHSE_JNL_REG) > 0,Question);
      Val := TRUE;
    END;

    [MessageHandler]
    PROCEDURE TC52MessageHandler@105(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_JNL_LINE_REG) > 0,Message);
    END;

    [Test]
    PROCEDURE TC53OrderPriorities@107();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Purchase,'',1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHndlRegisterWhseJnlLine,TC54MessageHandler)]
    PROCEDURE TC54OrderPriorities@113();
    VAR
      TransferHeader@1002 : Record 5740;
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      Bin@1008 : Record 7354;
      WarehouseShipmentHeader@1011 : Record 7320;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,'PICK',1);
      SetDefaultLocation(LocationWhite.Code);

      // Add inventory
      AddInventoryDirectedLocation(Item,LocationWhite.Code,'PICK',Bin.Code,10);

      // Exercise
      CreateSalesReturnOrder(SalesHeader,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code);
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationWhite.Code,LocationOne.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),2);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      GetLastWhseShipmentCreated(WarehouseShipmentHeader,LocationWhite);
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);
      RegisterWarehousePick(LocationWhite,1);
      SalesPlan(Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationOne.Code,LocationOne.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [MessageHandler]
    PROCEDURE TC54MessageHandler@116(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_JNL_LINE_REG) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_WHSE_SHIP_CREATED) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHndlRegisterWhseJnlLine,TC55MessageHandler)]
    PROCEDURE TC55OrderPriorities@115();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      ProductionOrder@1006 : Record 5405;
      Bin@1008 : Record 7354;
      ProductionBOMHeader@1009 : Record 99000771;
      ChildItem@1010 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      CreateBOM(ProductionBOMHeader,ChildItem,1);
      SetBOMOnItem(Item,ProductionBOMHeader);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,'PICK',1);
      SetDefaultLocation(LocationWhite.Code);

      // Add inventory
      AddInventoryDirectedLocation(ChildItem,LocationWhite.Code,'PICK',Bin.Code,10);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,'');
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      RegisterWarehousePick(LocationWhite,1);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [MessageHandler]
    PROCEDURE TC55MessageHandler@121(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_JNL_LINE_REG) > 0,Message);
    END;

    [Test]
    PROCEDURE TC56OrderPriorities@120();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(LocationWhite,1);
      SalesPlan(Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNoLinesForItem(Item);
    END;

    [Test]
    [HandlerFunctions(ConfirmHndlRegisterWhseJnlLine,TC57MessageHandler)]
    PROCEDURE TC57OrderPriorities@125();
    VAR
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      ProductionOrder@1006 : Record 5405;
      Bin@1008 : Record 7354;
      ProductionBOMHeader@1009 : Record 99000771;
      ChildItem@1010 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      CreateBOM(ProductionBOMHeader,ChildItem,1);
      SetBOMOnItem(Item,ProductionBOMHeader);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,'PICK',1);
      SetDefaultLocation(LocationWhite.Code);

      // Add inventory
      AddInventoryDirectedLocation(ChildItem,LocationWhite.Code,'PICK',Bin.Code,10);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreateTransferOrder(
        TransferHeader,Item."No.",LocationOne.Code,LocationWhite.Code,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,'');
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      RegisterWarehousePick(LocationWhite,1);
      SalesPlan(Item,1,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),1,0,RequisitionLine."Ref. Order Type"::Transfer,'',1);
    END;

    [MessageHandler]
    PROCEDURE TC57MessageHandler@126(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_JNL_LINE_REG) > 0,Message);
    END;

    [Test]
    PROCEDURE TC58OrderPriorities@129();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1003 : Record 36;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateSalesReturnOrder(
        SalesHeader,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      CreateRelProdOrderAndRefresh(
        ProductionOrder,Item."No.",2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,'');
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(LocationWhite,1);
      SalesPlan(Item,2,CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),LocationWhite.Code,LocationWhite.Code);

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE(PlanningStartDate,CALCDATE('<+1W+1D>',WORKDATE)),2,0,RequisitionLine."Ref. Order Type"::"Prod. Order",'',1);
    END;

    [Test]
    PROCEDURE B273416PlanOfShippedTransfer@14();
    VAR
      Item@1000 : Record 27;
      LocationFrom@1001 : Record 14;
      LocationTo@1002 : Record 14;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetupForTransfer(Item,LocationFrom,LocationTo);

      // run planning for shipped transfer and sales order
      CreateScenario273416(Item,LocationFrom.Code,LocationTo.Code);

      // verify no result in planning worksheet
      AssertNoLinesForItem(Item);
      AssertTrackingLineForItem(Item."No.",'',LocationTo.Code,3);  // 2 are tracking sales with transfer, the third is Surplus for transfer
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE B272514ReplanOfProdOrders@135();
    VAR
      ItemFG@1000 : Record 27;
      ItemComp@1001 : Record 27;
      LocationFrom@1002 : Record 14;
      LocationTo@1003 : Record 14;
      TransferHeader@1004 : Record 5740;
      ProductionOrder@1005 : ARRAY [3] OF Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetupForTransfer(ItemFG,LocationFrom,LocationTo);
      FinishSetupOfItem(ItemFG,ItemComp);

      // preparing data for test
      SetupForBug272514(ProductionOrder,TransferHeader,ItemFG."No.",ItemComp."No.",LocationFrom.Code,LocationTo.Code);

      // run planning for component and LocationTo
      ItemComp.SETRANGE("No.",ItemComp."No.");
      ItemComp.SETRANGE("Location Filter",LocationTo.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(ItemComp,WORKDATE - 1,WORKDATE + 35);

      // verify results
      AssertNoLinesForItem(ItemComp);
      AssertTrackingLineForItem(ItemComp."No.",'',LocationTo.Code,13);  // 12 are tracking production with ILE and transfer, the last 13th is Surplus for transfer
      AssertTrackingLineForSource(5407,ProductionOrder[1].Status,ProductionOrder[1]."No.",2);  // 2 tracking entries against ILEs
      AssertTrackingLineForSource(5407,ProductionOrder[2].Status,ProductionOrder[2]."No.",3);  // 2 tracking entries against ILEs and 1 against transfer
      AssertTrackingLineForSource(5407,ProductionOrder[3].Status,ProductionOrder[3]."No.",1);  // 1 tracking entry against transfer
      AssertTrackingLineForSource(5741,1,TransferHeader."No.",3);  // 1 tracking entry against RPO, 1 tracking entry against FPPO, 1 surplus

      // rerun planning for a new period
      LibraryPlanning.CalcRegenPlanForPlanWksh(ItemComp,WORKDATE - 1,WORKDATE + 15);

      // verify results
      AssertNoLinesForItem(ItemComp);
      AssertTrackingLineForItem(ItemComp."No.",'',LocationTo.Code,12);  // 10 are tracking production with ILE and transfer, last 2 are Surplus for transfer
      AssertTrackingLineForSource(5407,ProductionOrder[1].Status,ProductionOrder[1]."No.",2);  // 2 tracking entries against ILEs
      AssertTrackingLineForSource(5407,ProductionOrder[2].Status,ProductionOrder[2]."No.",3);  // 2 tracking entries against ILEs and 1 against transfer
      AssertTrackingLineForSource(5407,ProductionOrder[3].Status,ProductionOrder[3]."No.",0);  // FPPO is not tracked at all
      AssertTrackingLineForSource(5741,1,TransferHeader."No.",3);  // 1 tracking entry against RPO, 2 surplus entries
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE B272514ReplanOfProdOrdersWithIT@146();
    VAR
      ItemFG@1000 : Record 27;
      ItemComp@1001 : Record 27;
      LocationFrom@1002 : Record 14;
      LocationTo@1003 : Record 14;
      TransferHeader@1004 : Record 5740;
      ProductionOrder@1005 : ARRAY [3] OF Record 5405;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetupForTransfer(ItemFG,LocationFrom,LocationTo);
      FinishSetupOfItem(ItemFG,ItemComp);

      // preparing data for test
      SetupForBug272514(ProductionOrder,TransferHeader,ItemFG."No.",ItemComp."No.",LocationFrom.Code,LocationTo.Code);

      // run planning for component and LocationTo
      ItemComp.SETRANGE("No.",ItemComp."No.");
      ItemComp.SETRANGE("Location Filter",LocationTo.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(ItemComp,WORKDATE - 1,WORKDATE + 35);

      // verify results
      AssertNoLinesForItem(ItemComp);
      AssertTrackingLineForItem(ItemComp."No.",'',LocationTo.Code,13);  // 12 are tracking production with ILE and transfer, the last 13th is Surplus for transfer
      AssertTrackingLineForSource(5407,ProductionOrder[1].Status,ProductionOrder[1]."No.",2);  // 2 tracking entries against ILEs
      AssertTrackingLineForSource(5407,ProductionOrder[2].Status,ProductionOrder[2]."No.",3);  // 2 tracking entries against ILEs and 1 against transfer
      AssertTrackingLineForSource(5407,ProductionOrder[3].Status,ProductionOrder[3]."No.",1);  // 1 tracking entry against transfer
      AssertTrackingLineForSource(5741,1,TransferHeader."No.",3);  // 1 tracking entry against RPO, 1 tracking entry against FPPO, 1 surplus

      // add Item tracking for component of FPPO
      CreateItemTrackingForFPPO(ProductionOrder[3],Text002);

      // rerun planning for a new period
      LibraryPlanning.CalcRegenPlanForPlanWksh(ItemComp,WORKDATE - 1,WORKDATE + 15);

      // verify results
      AssertNoLinesForItem(ItemComp);
      AssertTrackingLineForItem(ItemComp."No.",'',LocationTo.Code,13);  // 10 are tracking production with ILE and transfer, last 1 is Surplus for transfer
      AssertTrackingLineForSource(5407,ProductionOrder[1].Status,ProductionOrder[1]."No.",2);  // 2 tracking entries against ILEs
      AssertTrackingLineForSource(5407,ProductionOrder[2].Status,ProductionOrder[2]."No.",3);  // 2 tracking entries against ILEs and 1 against transfer
      AssertTrackingLineForSource(5407,ProductionOrder[3].Status,ProductionOrder[3]."No.",1);  // 1 surplus entry
      AssertTrackingLineForSource(5741,1,TransferHeader."No.",3);  // 1 tracking entry against RPO, 2 surplus entries
    END;

    [Test]
    [HandlerFunctions(PAG6510ItemTrackingLinesHandler,PAG6515EnterCustomizedSNHandler,PAG5510OutputJournalHandler,ConfirmYes,PostedMsgHandler)]
    PROCEDURE B335974DecreaseOutputQtyProdJnlLine@478();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1005 : Record 5405;
      Location@1001 : Record 14;
    BEGIN
      // Setup
      Initialize;
      B335974_CreateSetup(Item,Location);
      // Create prod. order
      CreateRelProdOrderAndRefresh(ProductionOrder,Item."No.",GlobalQty[1],WORKDATE,Location.Code,'');
      DefineFullItemTrackingForProdOrder(ProductionOrder);
      ReduceOutputQtyTryPostingErrExpected(ProductionOrder);
      ReduceItemTrackingTryPostNoErrorExpected(ProductionOrder);
      // Posting is now done of GlobalQty[2] items.
      // Verify that remaining items on prod.order have correct item tracking:
      VerifyRemainingProdOrderItemTrackingLines(ProductionOrder);
    END;

    LOCAL PROCEDURE JobPlanningLineTests@155(UsageLink@1003 : Boolean;Reserve@1009 : Boolean);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1006 : Record 39;
      JobTask@1008 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      RequisitionLine@1004 : Record 246;
      PurchaseQuantity@1005 : Decimal;
      JobQuantity@1007 : Decimal;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,'<0D>');
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);

      // Create orders
      PurchaseQuantity := LibraryRandom.RandDec(100,2);
      JobQuantity := PurchaseQuantity + LibraryRandom.RandDec(100,2);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,PurchaseQuantity,WORKDATE,'');
      CreateJobAndPlanningLine(JobTask,JobPlanningLine,Item."No.",JobQuantity,UsageLink);
      IF Reserve THEN
        PurchaseLine.ShowReservation
      ELSE BEGIN
        PurchaseLine.VALIDATE("Job No.",JobPlanningLine."Job No.");
        PurchaseLine.MODIFY(TRUE);
      END;

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      IF UsageLink OR Reserve THEN BEGIN
        AssertNumberOfLinesForItem(Item,1);
        AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,
          WORKDATE,PurchaseQuantity,JobQuantity,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      END ELSE BEGIN
        AssertNumberOfLinesForItem(Item,1);
        AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
          WORKDATE,PurchaseQuantity,0,RequisitionLine."Ref. Order Type"::Purchase,'',1);
      END;
    END;

    [Test]
    PROCEDURE JobPlanningLineNoReserveNoUsageLink@156();
    BEGIN
      JobPlanningLineTests(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE JobPlanningLineNoReserveWithUsageLink@157();
    BEGIN
      JobPlanningLineTests(TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE JobPlanningLineWithReservation@164();
    BEGIN
      JobPlanningLineTests(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE MultipleJobPlanningLinesNoReserve@158();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1006 : Record 39;
      JobTask@1003 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobQuantity@1007 : Decimal;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,'<0D>');
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);

      // Create orders
      JobQuantity := LibraryRandom.RandDec(100,2);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,2 * JobQuantity,WORKDATE,'');
      CreateJobAndPlanningLine(JobTask,JobPlanningLine,Item."No.",JobQuantity,TRUE);
      CreateJobPlanningLine(JobPlanningLine,JobPlanningLine."Line Type"::Schedule,JobTask,Item."No.",JobQuantity,FALSE);
      CreateJobPlanningLine(JobPlanningLine,JobPlanningLine."Line Type"::Schedule,JobTask,Item."No.",JobQuantity,TRUE);
      PurchaseLine.VALIDATE("Job No.",JobPlanningLine."Job No.");
      PurchaseLine.MODIFY(TRUE);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE(PlanningEndDate,WORKDATE));

      // verify no lines - only the lines with usagelink=true are considered
      AssertNoLinesForItem(Item);
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLineHandler@469(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PAG6510ItemTrackingLinesHandler@457(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      i@1001 : Integer;
    BEGIN
      // HandlerActions:
      // 1: Create full item tracking information
      // 2: Set zeroes so that GlobalQty[2] items remain with qty = 1
      // 3: Validate remaining serial numbers
      CASE GlobalHandlerAction OF
        1:
          ItemTrackingLines.CreateCustomizedSN.INVOKE;
        2:
          BEGIN
            ItemTrackingLines.FIRST;
            FOR i := 1 TO GlobalQty[1] - GlobalQty[2] DO BEGIN
              ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);
              GlobalRemainingSerialNos[i] := ItemTrackingLines."Serial No.".VALUE;
              ItemTrackingLines.NEXT;
            END;
          END;
        3:
          BEGIN
            ItemTrackingLines.FIRST;
            FOR i := 1 TO GlobalQty[1] - GlobalQty[2] DO BEGIN
              Assert.AreEqual(
                GlobalRemainingSerialNos[i],
                ItemTrackingLines."Serial No.".VALUE,
                STRSUBSTNO(WrongSerialNoTxt,ItemTrackingLines."Serial No.".VALUE));
              IF i < GlobalQty[1] - GlobalQty[2] THEN
                ItemTrackingLines.NEXT;
            END;
          END;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PAG6515EnterCustomizedSNHandler@459(VAR EnterCustomizedSN@1000 : TestPage 6515);
    BEGIN
      EnterCustomizedSN.CustomizedSN.SETVALUE(CustomizedSNTxt);
      EnterCustomizedSN.Increment.SETVALUE(1);
      EnterCustomizedSN.QtyToCreate.SETVALUE(GlobalQty[1]);
      EnterCustomizedSN.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PAG5510OutputJournalHandler@458(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal."Output Quantity".SETVALUE(GlobalQty[2]);
      IF GlobalHandlerAction = 1 THEN
        ASSERTERROR ProductionJournal.Post.INVOKE // Try to post
      ELSE
        ProductionJournal.Post.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYes@460(Q@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    LOCAL PROCEDURE GetNonBlockedGLAccount@461() : Code[10];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE(Blocked,GLAccount.Blocked::"0");
      GLAccount.FINDFIRST;
      EXIT(GLAccount."No.");
    END;

    [MessageHandler]
    PROCEDURE PostedMsgHandler@462(Msg@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Msg,SuccessfullyPostedTxt) > 0,STRSUBSTNO(WrongPostingMsgTxt,Msg));
    END;

    LOCAL PROCEDURE B335974_CreateSetup@463(VAR Item@1000 : Record 27;VAR Location@1001 : Record 14);
    VAR
      InventoryPostingSetup@1002 : Record 5813;
      ManufacturingSetup@1005 : Record 99000765;
      AccNo@1003 : Code[10];
    BEGIN
      // Create blue location:
      LibraryWarehouse.CreateLocation(Location);
      // Create item with serial no. tracking
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateInventoryPostingSetup(InventoryPostingSetup,Location.Code,Item."Inventory Posting Group");
      AccNo := GetNonBlockedGLAccount;
      InventoryPostingSetup."Inventory Account" := AccNo;
      InventoryPostingSetup."WIP Account" := AccNo;
      InventoryPostingSetup.MODIFY;
      LibraryItemTracking.AddSerialNoTrackingInfo(Item);
      ManufacturingSetup.GET;
      ManufacturingSetup."Preset Output Quantity" := ManufacturingSetup."Preset Output Quantity"::"Zero on All Operations";
      ManufacturingSetup.MODIFY(TRUE);
      // LibraryVariableStorage.Enqueue(Variable);
      GlobalQty[1] := 10; // Quantity on the prod. order line
      GlobalQty[2] := 3;  // Output quantity on the output journal
    END;

    LOCAL PROCEDURE DefineFullItemTrackingForProdOrder@464(VAR ProductionOrder@1000 : Record 5405);
    VAR
      ReleasedProductionOrder@1002 : TestPage 99000831;
    BEGIN
      // Set item tracking
      // Adjust item tracking accordingly
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.GOTORECORD(ProductionOrder);
      GlobalHandlerAction := 1; // Create full item tracking (serial no)
      // Set item tracking, GlobalQty[1] serial no's (done in page handler):
      ReleasedProductionOrder.ProdOrderLines.ItemTrackingLines.INVOKE; // Item Tracking Lines
    END;

    LOCAL PROCEDURE ReduceOutputQtyTryPostingErrExpected@465(ProductionOrder@1000 : Record 5405);
    VAR
      ReleasedProductionOrder@1001 : TestPage 99000831;
    BEGIN
      // Set output qty to GlobalQty[2],done in page handler.
      // Try posting (done in page handler). Error expected:
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.GOTORECORD(ProductionOrder);
      ReleasedProductionOrder.ProdOrderLines.ProductionJournal.INVOKE; // Production Journal Line
    END;

    LOCAL PROCEDURE ReduceItemTrackingTryPostNoErrorExpected@466(ProductionOrder@1000 : Record 5405);
    VAR
      ReleasedProductionOrder@1001 : TestPage 99000831;
    BEGIN
      GlobalHandlerAction := 2; // Put zeroes in qty to handle
      // Set item tracking, GlobalQty[2] serial numbers (done in page handler).
      // No posting error expected:
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.GOTORECORD(ProductionOrder);
      ReleasedProductionOrder.ProdOrderLines.ItemTrackingLines.INVOKE; // Item Tracking Lines
      ReleasedProductionOrder.ProdOrderLines.ProductionJournal.INVOKE; // Production Journal Line - POSTING
    END;

    LOCAL PROCEDURE VerifyRemainingProdOrderItemTrackingLines@467(ProductionOrder@1001 : Record 5405);
    VAR
      ReleasedProductionOrder@1000 : TestPage 99000831;
    BEGIN
      GlobalHandlerAction := 3;
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.GOTORECORD(ProductionOrder);

      ReleasedProductionOrder.ProdOrderLines.ItemTrackingLines.INVOKE; // Item Tracking Lines
      // Verify remaining reservation entries:
      AssertTrackingLineForSource(
        DATABASE::"Prod. Order Line",
        ProductionOrder.Status,
        ProductionOrder."No.",
        GlobalQty[1] - GlobalQty[2]);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE HF336440_NoSurplusOnTransfersPartial@143();
    VAR
      TransferHeader@1006 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      QtyOnInventory@1002 : Decimal;
    BEGIN
      // Setup
      Initialize;
      TestSetup;

      // Setup items and SKUs - and replenishment in a "chain" of transfers -
      // location white transfers to location 3 that transfers to location 2 that transfers to location 1
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      LibraryItemTracking.AddLotNoTrackingInfo(Item);
      CreateSKUs(Item,LocationOne.Code + '|' + LocationTwo.Code + '|' + LocationThree.Code + '|' + LocationWhite.Code,'');
      UpdateSKUAsTransfer(Item,LocationThree.Code,'',LocationWhite.Code);
      UpdateSKUAsTransfer(Item,LocationTwo.Code,'',LocationThree.Code);
      UpdateSKUAsTransfer(Item,LocationOne.Code,'',LocationTwo.Code);

      QtyOnInventory := LibraryRandom.RandDec(100,2);
      AddInventoryNonDirectLocationWithLotNo(Item,LocationTwo.Code,QtyOnInventory,Text002);

      // Exercise - transfer order, ship partial
      CreateAndShipTransfer(TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,3 * QtyOnInventory,Text002,
        WORKDATE,QtyOnInventory);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Purchase,LocationWhite.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationThree.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationTwo.Code,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE HF339753_NoSurplusOnTransfers@171();
    VAR
      TransferHeader@1006 : Record 5740;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      QtyOnInventory@1002 : Decimal;
    BEGIN
      // Setup
      Initialize;
      TestSetup;

      // Setup items and SKUs - and replenishment in a "chain" of transfers -
      // location white transfers to location 3 that transfers to location 2 that transfers to location 1
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      LibraryItemTracking.AddLotNoTrackingInfo(Item);
      CreateSKUs(Item,LocationOne.Code + '|' + LocationTwo.Code + '|' + LocationThree.Code + '|' + LocationWhite.Code,'');
      UpdateSKUAsTransfer(Item,LocationThree.Code,'',LocationWhite.Code);
      UpdateSKUAsTransfer(Item,LocationTwo.Code,'',LocationThree.Code);
      UpdateSKUAsTransfer(Item,LocationOne.Code,'',LocationTwo.Code);

      QtyOnInventory := LibraryRandom.RandDec(100,2);

      // Exercise - transfer order, no shipping just add/remove inventory
      CreateAndShipTransfer(TransferHeader,Item."No.",LocationTwo.Code,LocationOne.Code,3 * QtyOnInventory,Text002,
        WORKDATE,0); // Qty=0 means nothing to ship
      AddInventoryNonDirectLocationWithLotNo(Item,LocationTwo.Code,QtyOnInventory,Text002);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE(PlanningEndDate,WORKDATE)); // required in order to have the entries split in tab337
      RemoveInventoryNonDirectLocationWithLotNo(Item,LocationTwo.Code,QtyOnInventory,Text002);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines - check in doc section more info on the TDS
      AssertNumberOfLinesForItem(Item,6);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Purchase,LocationWhite.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Purchase,LocationWhite.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationThree.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationThree.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,2 * QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationTwo.Code,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,WORKDATE,0,QtyOnInventory,
        RequisitionLine."Ref. Order Type"::Transfer,LocationTwo.Code,1);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@141(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1002 : Variant;
      LotNo@1001 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
      LibraryVariableStorage.Dequeue(DequeueVariable);
      Quantity := DequeueVariable;

      ItemTrackingLines."Lot No.".SETVALUE(LotNo);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@153(Question@1000 : Text[1024];VAR Reply@1002 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      This test code unit contains tests for planning engine - implemented based on TDS (TCS) - TFS# 207658.

      The suite in TFS contains 2 excel files OrderPriorities.xls and ReorderPoint.xls.

      The tests in this codeunit are named same as the scenarios in the excel files. There are 3 naming conventions:
      1. TCxxReorderPoint - coresponding to TCxx test cases from the ReorderPoint excel file.
      2. TCxxSafetyStock - coresponding to TCxx test cases from the ReorderPoint excel file but for LotForLot(LFL) items (as reorder
      point makes no sense for LFL items)
      3. TCxxOrderPriorities - coresponding to TCxx test cases from the OrderPriorities excel file

      Please consult the TDS files for better understanding of the test cases.
    }
    END.
  }
}

