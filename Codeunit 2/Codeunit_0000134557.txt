OBJECT Codeunit 134557 ERM Cash Flow UnitTests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      CashFlowChartSetup@1016 : Record 869;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryERM@1014 : Codeunit 131300;
      LibrarySales@1008 : Codeunit 130509;
      LibraryCF@1007 : Codeunit 131331;
      LibraryCFHelper@1022 : Codeunit 131332;
      Assert@1002 : Codeunit 130000;
      Matrix1@1012 : TextConst 'ENU=Matrix 1x';
      Matrix2@1013 : TextConst 'ENU=Matrix 2x';
      Matrix3@1000 : TextConst 'ENU=Matrix 3x';
      Matrix4@1001 : TextConst 'ENU=Matrix 4x';
      Matrix5@1003 : TextConst 'ENU=Matrix 5';
      Matrix7@1005 : TextConst 'ENU=Matrix 7';
      Matrix9@1004 : TextConst 'ENU=Matrix 9';
      TestForEmptyDocDate@1010 : TextConst 'ENU=Test for empty Document Date';
      TestForEmptyDiscDateCalc@1009 : TextConst 'ENU=Test For Empty Discount Date Calculation Formula';
      IncorrectField@1011 : TextConst 'ENU=Incorrect %1. Expected %2 current %3.';
      IsInitialized@1017 : Boolean;
      PlusOneDayFormula@1019 : DateFormula;
      MinusOneDayFormula@1018 : DateFormula;
      PosNegErrMsg@1021 : TextConst 'ENU="Wrong Positive = <%1> for Amount (LCY) = <%2>."';
      NoDefaultCFMsg@1015 : TextConst 'ENU=Select the "Show in Chart on Role Center" field in the Cash Flow Forecast window to display the chart on the Role Center.';
      UnexpectedValueInField@1020 : TextConst 'ENU=Unexpected value in field %1.';

    [Test]
    PROCEDURE TestMatrix1a@4();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // 1a Yes Yes Yes Yes Order Yes Jan. 04 96,00: Cash Flow discount date and Cash Flow discount amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix1;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        ExpectedAmount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);
        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix1c@10();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes Yes LE: Cr. Memo Yes Yes Jan. 04 -96,00: Cash Flow discount date and Cash Flow discount amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix1;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);
        CalculateCFAmountAndCFDate;
        // MODIFY;

        ExpectedDate := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix1d@9();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes Yes LE: Cr. Memo No Yes Jan. 01 -100,00 Ledger entry due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix1;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      CFForecast.MODIFY;
      PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" := FALSE;
      PaymentTerms.MODIFY;
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := DocumentDate;
        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix2a@11();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // 1a Yes Yes Yes Yes Order No Jan. 04 96,00: Cash Flow discount date and Cash Flow discount amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix2;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix2c@13();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes Yes LE: Cr. Memo Yes No Jan. 04 -96,00: Cash Flow discount date and Cash Flow discount amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix2;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix2d@12();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes Yes LE: Cr. Memo No No Jan. 01 -100,00 Ledger entry due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix2;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - yes
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      CFForecast.MODIFY;
      PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" := FALSE;
      PaymentTerms.MODIFY;
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := "Document Date";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix3a@8();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // 1a Yes Yes Yes No Order * * Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix3;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix3c@6();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes No LE: Cr. Memo Yes * Jan. 22 -100,00:Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix3;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix3d@5();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes Yes No LE: Cr. Memo No No Jan. 01 -100,00 Ledger entry due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix3;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      CFForecast.MODIFY;
      PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" := FALSE;
      PaymentTerms.MODIFY;
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := "Document Date";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix4a@16();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // 4a Yes Yes No No Order * * Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix4;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix4c@15();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes No No LE: Cr. Memo Yes * Jan. 22 -100,00:Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix4;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix4d@14();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes Yes No No LE: Cr. Memo No No Jan. 01 -100,00 Ledger entry due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix4;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - yes
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - No
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY;
      // Source / Document type 4) - Cr.Memo
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      CFForecast.MODIFY;
      PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" := FALSE;
      PaymentTerms.MODIFY;
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFWorksheetLine."Document Type" := CFWorksheetLine."Document Type"::"Credit Memo";
      CFWorksheetLine."Amount (LCY)" := -CFWorksheetLine."Amount (LCY)";

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedAmount := "Amount (LCY)";
        ExpectedDate := "Document Date";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix5@18();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // 5 Yes No Yes * Yes * * Yes Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix5;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - No
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        ExpectedAmount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix7@19();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes No Yes * Yes * * Yes Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix7;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - No
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        ExpectedAmount := "Amount (LCY)";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix8_3@20();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes No No * Yes * * Yes Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix7;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - No
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        ExpectedAmount := "Amount (LCY)";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix8_5@17();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // Yes No No * Yes * * Yes Jan. 22 100,00: Cash Flow due date and full amount
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix7;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := TRUE;
      // Cash Flow payment terms on customer - No
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        ExpectedAmount := "Amount (LCY)";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix9_1@22();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // No * Yes * Yes * Yes * * Yes Jan. 06 98,00: Discount date and default discount amount from order or LE
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix9;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := FALSE;
      // Cash Flow payment terms on customer - **
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        ExpectedAmount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix9_2@21();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // No * Yes * Yes * Yes * * Yes Jan. 06 98,00: Discount date and default discount amount from order or LE
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix9;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := FALSE;
      // Cash Flow payment terms on customer - **
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-3D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        ExpectedAmount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix12@24();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // No * No * * * * * *: Jan. 15 100,00: Due date and full amount from order or LE
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix1;

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := FALSE;
      // Cash Flow payment terms on customer - **
      CFForecast."Consider Discount" := FALSE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        ExpectedAmount := "Amount (LCY)";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE TestMatrix11@23();
    VAR
      PaymentTerms@1006 : Record 3;
      Customer@1005 : Record 18;
      CFForecast@1004 : Record 840;
      CFWorksheetLine@1003 : Record 846;
      ExpectedAmount@1001 : Decimal;
      DocumentDate@1002 : Date;
      ExpectedDate@1007 : Date;
    BEGIN
      // No * Yes * Yes * Yes * * No Jan. 15 100,00: Due date and full amount from order or LE
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := Matrix1;

      CreateDefaultMatrixCFPT(Customer,PaymentTerms);

      PaymentTerms.GET(Customer."Payment Terms Code");

      LibraryCF.CreateCashFlowCard(CFForecast);
      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      // Setup
      CFForecast."Consider CF Payment Terms" := FALSE;
      // Cash Flow payment terms on customer - **
      CFForecast."Consider Discount" := TRUE;
      // Cash Flow Payment Terms with Cash Discount? 2) - *
      // Source / Document type 4) - SO
      // Cash Discount Date <= Work Date Y=workdate: Jan. 3 N=workdate: Jan. 9"
      DocumentDate := CALCDATE('<-5D>',WORKDATE);
      CFForecast.MODIFY;

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := DocumentDate;
        INSERT;
        ExpectedDate := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        ExpectedAmount := "Amount (LCY)";

        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",ExpectedDate,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Cash Flow Date"),ExpectedDate,"Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",ExpectedAmount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),ExpectedAmount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    [Test]
    PROCEDURE EmptyDate@1();
    VAR
      CFForecast@1008 : Record 840;
      CFWorksheetLine@1006 : Record 846;
      Customer@1000 : Record 18;
    BEGIN
      // bug 261713
      // CFForecast - no Doc.Date on orders (sales, service and purchase) result in error msg.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := TestForEmptyDocDate;
      Customer.MODIFY;
      LibraryCF.CreateCashFlowCard(CFForecast);

      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,'');

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := 0D;
        INSERT;
        CalculateCFAmountAndCFDate;
        // MODIFY;
        DELETE;
      END;
    END;

    [Test]
    PROCEDURE EmptyDiscountDateCalculationFormula@3();
    VAR
      PaymentTerms@1004 : Record 3;
      Customer@1000 : Record 18;
      CFForecast@1001 : Record 840;
      CFWorksheetLine@1002 : Record 846;
      LibraryERM@1007 : Codeunit 131300;
      Amount@1005 : Decimal;
    BEGIN
      // bug 261712:
      // CFForecast - Orders (sales, service, purchase) with doc. date = work date or future and CFForecast payment terms result in wrong CFForecast dates
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.Address := TestForEmptyDiscDateCalc;
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<1M>');
      PaymentTerms.VALIDATE("Discount %",RANDOM(50));
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY;

      Customer."Cash Flow Payment Terms Code" := PaymentTerms.Code;
      Customer.MODIFY;

      LibraryCF.CreateCashFlowCard(CFForecast);
      CFForecast."Consider Discount" := TRUE;
      CFForecast."Consider CF Payment Terms" := TRUE;
      CFForecast.MODIFY;

      PreFillCFWorksheetLine(CFWorksheetLine,CFForecast."No.",Customer.Address,PaymentTerms.Code);

      WITH CFWorksheetLine DO BEGIN
        "Document Date" := WORKDATE;
        INSERT;
        Amount := ROUND("Amount (LCY)" * (100 - PaymentTerms."Discount %") / 100);
        CalculateCFAmountAndCFDate;
        // MODIFY;

        Assert.AreEqual(
          "Cash Flow Date",
          CALCDATE(PaymentTerms."Due Date Calculation","Document Date"),
          STRSUBSTNO(
            IncorrectField,FIELDCAPTION("Cash Flow Date"),CALCDATE(PaymentTerms."Due Date Calculation","Document Date"),
            "Cash Flow Date"));

        Assert.AreEqual(
          "Amount (LCY)",
          Amount,
          STRSUBSTNO(IncorrectField,FIELDCAPTION("Amount (LCY)"),Amount,"Amount (LCY)"));

        DELETE;
      END;
    END;

    LOCAL PROCEDURE PreFillCFWorksheetLine@2(VAR CFWorksheetLine@1000 : Record 846;CashFlowNo@1004 : Code[20];TestDescription@1005 : Text[50];PaymentTermsCode@1006 : Code[10]);
    BEGIN
      WITH CFWorksheetLine DO BEGIN
        "Line No." := RANDOM(100000);

        "Document Type" := "Document Type"::Invoice;
        "Cash Flow Forecast No." := CashFlowNo;
        "Amount (LCY)" := RANDOM(1001);
        Description := TestDescription;
        "Payment Terms Code" := PaymentTermsCode;
      END;
    END;

    LOCAL PROCEDURE CreateDefaultMatrixCFPT@7(VAR Customer@1001 : Record 18;VAR PaymentTerms@1003 : Record 3);
    VAR
      LibraryERM@1004 : Codeunit 131300;
    BEGIN
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<21D>');
      EVALUATE(PaymentTerms."Discount Date Calculation",'<3D>');
      PaymentTerms.VALIDATE("Discount %",RANDOM(90));
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY;

      Customer."Cash Flow Payment Terms Code" := PaymentTerms.Code;
      Customer.MODIFY;
    END;

    LOCAL PROCEDURE InsertRndCFLedgEntries@61(CashFlowNo@1000 : Code[20];SourceType@1001 : Option;CashFlowDate@1002 : Date;VAR TotalAmount@1003 : Decimal);
    VAR
      CFForecastEntry@1007 : Record 847;
      Amount@1004 : Decimal;
      Count@1005 : Integer;
      i@1006 : Integer;
    BEGIN
      Count := LibraryRandom.RandIntInRange(1,3);
      TotalAmount := 0;
      FOR i := 1 TO Count DO BEGIN
        Amount := LibraryRandom.RandDec(100,2);
        IF SourceType IN
           [CFForecastEntry."Source Type"::"Purchase Order",
            CFForecastEntry."Source Type"::"Cash Flow Manual Expense",
            CFForecastEntry."Source Type"::"Fixed Assets Budget",
            CFForecastEntry."Source Type"::Payables]
        THEN
          Amount := -Amount;

        LibraryCFHelper.InsertCFLedgerEntry(CashFlowNo,'',SourceType,CashFlowDate,Amount);
        TotalAmount += Amount;
      END;
    END;

    LOCAL PROCEDURE InsertCFLedgerEntries@28(VAR CashFlowForecast@1000 : Record 840;ConsiderSource@1002 : ARRAY [11] OF Boolean;VAR PostedAmount@1007 : ARRAY [11,2] OF Decimal);
    VAR
      CFForecastEntry@1001 : Record 847;
      SourceType@1005 : Option;
      Period@1003 : ',Before,After';
      Amount@1004 : Decimal;
    BEGIN
      CLEAR(PostedAmount);
      CashFlowForecast.FINDFIRST;
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.DELETEALL;

      FOR SourceType := 1 TO ARRAYLEN(ConsiderSource) DO
        IF ConsiderSource[SourceType] THEN BEGIN
          InsertRndCFLedgEntries(CashFlowForecast."No.",SourceType,CALCDATE(MinusOneDayFormula,WORKDATE),Amount);
          PostedAmount[SourceType,Period::Before] := Amount;
          InsertRndCFLedgEntries(CashFlowForecast."No.",SourceType,CALCDATE(PlusOneDayFormula,WORKDATE),Amount);
          PostedAmount[SourceType,Period::After] := Amount;
        END;
    END;

    [Test]
    PROCEDURE TestCalculateAmountsOnCFLedgEntryFromToDate@27();
    BEGIN
      Initialize;
      VerifyCalculatedAmountsForPeriod(WORKDATE,WORKDATE);
    END;

    [Test]
    PROCEDURE TestCalculateAmountsOnCFLedgEntryFromDate@29();
    BEGIN
      Initialize;
      VerifyCalculatedAmountsForPeriod(WORKDATE,0D);
    END;

    [Test]
    PROCEDURE TestCalculateAmountsOnCFLedgEntryToDate@30();
    BEGIN
      Initialize;
      VerifyCalculatedAmountsForPeriod(0D,WORKDATE);
    END;

    [Test]
    PROCEDURE TestCalculateAmountsOnCFLedgEntryNoDate@34();
    BEGIN
      Initialize;
      VerifyCalculatedAmountsForPeriod(0D,0D);
    END;

    LOCAL PROCEDURE VerifyCalculatedAmountsForPeriod@31(FromDate@1006 : Date;ToDate@1007 : Date);
    VAR
      CFForecast@1000 : Record 840;
      PostedAmount@1009 : ARRAY [11,2] OF Decimal;
      SumTotal@1003 : Decimal;
      Values@1002 : ARRAY [11] OF Decimal;
      SourceType@1013 : Option;
      expectedValue@1004 : Decimal;
      expectedValueTotal@1005 : Decimal;
      ConsiderSource@1008 : ARRAY [11] OF Boolean;
    BEGIN
      ConsiderAllSources(ConsiderSource);
      InsertCFLedgerEntries(CFForecast,ConsiderSource,PostedAmount);
      CFForecast.CalculateAllAmounts(FromDate,ToDate,Values,SumTotal);
      FOR SourceType := 1 TO ARRAYLEN(Values) DO BEGIN
        expectedValue := CalcExpectedAmount(FromDate,ToDate,PostedAmount[SourceType]);
        CFForecast."Source Type Filter" := SourceType;
        Assert.AreEqual(
          expectedValue,Values[SourceType],
          STRSUBSTNO(IncorrectField,CFForecast."Source Type Filter",expectedValue,Values[SourceType]));

        expectedValueTotal := expectedValueTotal + expectedValue;
      END;

      Assert.AreEqual(
        expectedValueTotal,SumTotal,
        STRSUBSTNO(IncorrectField,'Total',expectedValueTotal,SumTotal));
    END;

    LOCAL PROCEDURE ConsiderAllSources@60(VAR ConsiderSource@1000 : ARRAY [11] OF Boolean);
    VAR
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(ConsiderSource) DO
        ConsiderSource[i] := TRUE;
    END;

    LOCAL PROCEDURE CalcExpectedAmount@32(FromDate@1000 : Date;ToDate@1001 : Date;PostedAmount@1002 : ARRAY [2] OF Decimal) : Decimal;
    BEGIN
      CASE TRUE OF
        (FromDate = 0D) AND (ToDate = 0D):
          EXIT(PostedAmount[1] + PostedAmount[2]);
        (FromDate = 0D) AND (ToDate = WORKDATE):
          EXIT(PostedAmount[1]);
        (FromDate = WORKDATE) AND (ToDate = 0D):
          EXIT(PostedAmount[2]);
        (FromDate = WORKDATE) AND (ToDate = WORKDATE):
          EXIT(0);
      END;
    END;

    [Test]
    PROCEDURE TestXAxisCaption@79();
    VAR
      BusChartBuf@1001 : Record 485;
      CFChartMgt@1000 : Codeunit 869;
    BEGIN
      Initialize;
      FOR BusChartBuf."Period Length" := BusChartBuf."Period Length"::Day TO BusChartBuf."Period Length"::Year DO BEGIN
        SetPeriodLengthInChartSetup(BusChartBuf."Period Length");
        CFChartMgt.UpdateData(BusChartBuf);
        Assert.AreEqual(
          FORMAT(BusChartBuf."Period Length"),BusChartBuf.GetXCaption,'Expected X Axis caption to be related to the period length');
      END;
    END;

    [Test]
    PROCEDURE TestXAxisTypeForPeriods@65();
    VAR
      BusChartBuf@1000 : Record 485;
      CashFlowForecast@1004 : Record 840;
      CashFlowSetup@1003 : Record 843;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
      PostedAmount@1001 : ARRAY [11,2] OF Decimal;
    BEGIN
      Initialize;
      ConsiderSource[CashFlowForecast."Source Type Filter"::Receivables] := TRUE;
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);
      CashFlowSetup.SetChartRoleCenterCFNo(CashFlowForecast."No.");

      Assert.IsTrue(GetIsXAxisDateTimeForPeriod(BusChartBuf."Period Length"::Day),'Expected DateTime type of X Axis for Period : Day');
      FOR BusChartBuf."Period Length" := BusChartBuf."Period Length"::Week TO BusChartBuf."Period Length"::Year DO
        Assert.IsFalse(
          GetIsXAxisDateTimeForPeriod(BusChartBuf."Period Length"),
          STRSUBSTNO('Not expected DateTime type of X Axis for Period : %1',BusChartBuf."Period Length"));
    END;

    LOCAL PROCEDURE GetIsXAxisDateTimeForPeriod@63(PeriodLength@1008 : Integer) : Boolean;
    VAR
      BusChartBuf@1007 : Record 485;
      CFChartMgt@1005 : Codeunit 869;
    BEGIN
      SetPeriodLengthInChartSetup(PeriodLength);
      CFChartMgt.UpdateData(BusChartBuf);
      EXIT(BusChartBuf.IsXAxisDateTime);
    END;

    LOCAL PROCEDURE SetPeriodLengthInChartSetup@80(PeriodLength@1000 : Integer);
    VAR
      CashFlowChartSetup@1001 : Record 869;
    BEGIN
      WITH CashFlowChartSetup DO BEGIN
        IF GET(USERID) THEN
          DELETE;

        INIT;
        "User ID" := USERID;
        "Period Length" := PeriodLength;
        INSERT;
      END;
    END;

    [Test]
    [HandlerFunctions(NoDefaultMessageHandler)]
    PROCEDURE TestDataUpdateForNoDefaultCFCard@75();
    VAR
      BusChartBuf@1001 : Record 485;
      CashFlowSetup@1002 : Record 843;
      CFChartMgt@1000 : Codeunit 869;
      CFForecastNo@1003 : Code[20];
    BEGIN
      Initialize;

      CFForecastNo := CashFlowSetup.GetChartRoleCenterCFNo;
      CashFlowSetup.SetChartRoleCenterCFNo('');

      Assert.IsFalse(CFChartMgt.UpdateData(BusChartBuf),'Warning message expected.');
      CashFlowSetup.SetChartRoleCenterCFNo(CFForecastNo);
    END;

    [MessageHandler]
    PROCEDURE NoDefaultMessageHandler@76(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,NoDefaultCFMsg) = 1,STRSUBSTNO('Expected message should start with ''%1 ...''',NoDefaultCFMsg));
    END;

    [Test]
    PROCEDURE TestOnOpenInitChartSetup@67();
    VAR
      CashFlowChartSetup@1001 : Record 869;
      CFChartMgt@1000 : Codeunit 869;
    BEGIN
      Initialize;

      WITH CashFlowChartSetup DO BEGIN
        IF GET(USERID) THEN
          DELETE;
        CFChartMgt.OnOpenPage(CashFlowChartSetup);

        TESTFIELD("Start Date","Start Date"::"First Entry Date");
        TESTFIELD("Period Length","Period Length"::Week);
        TESTFIELD(Show,Show::"Change in Cash");
        TESTFIELD("Chart Type","Chart Type"::"Stacked Column");
        TESTFIELD("Group By","Group By"::"Source Type");
      END;
    END;

    [Test]
    PROCEDURE TestOnOpenWithExistingChartSetup@68();
    VAR
      CashFlowChartSetup@1001 : Record 869;
      ExistingCashFlowChartSetup@1002 : Record 869;
      CFChartMgt@1000 : Codeunit 869;
    BEGIN
      Initialize;

      WITH CashFlowChartSetup DO BEGIN
        SetPeriodLengthInChartSetup("Period Length"::Year);
        GET(USERID);
        ExistingCashFlowChartSetup := CashFlowChartSetup;
        CFChartMgt.OnOpenPage(CashFlowChartSetup);

        TESTFIELD("Start Date",ExistingCashFlowChartSetup."Start Date");
        TESTFIELD("Period Length",ExistingCashFlowChartSetup."Period Length");
        TESTFIELD(Show,ExistingCashFlowChartSetup.Show);
        TESTFIELD("Chart Type",ExistingCashFlowChartSetup."Chart Type");
        TESTFIELD("Group By",ExistingCashFlowChartSetup."Group By");
      END;
    END;

    [Test]
    PROCEDURE TestZeroPeriodsForNoEntries@69();
    VAR
      CFForecast@1001 : Record 840;
      CFForecastEntry@1000 : Record 847;
      BusChartBuf@1003 : Record 485;
      BusChartMap@1004 : Record 486;
      CFChartMgt@1002 : Codeunit 869;
    BEGIN
      Initialize;
      CFForecast.FINDFIRST;
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CFForecast."No.");
      CFForecastEntry.DELETEALL;

      SetPeriodLengthInChartSetup(BusChartBuf."Period Length"::Day);
      CFChartMgt.UpdateData(BusChartBuf);
      Assert.IsFalse(BusChartBuf.FindFirstColumn(BusChartMap),'No Periods expected for no entries');
    END;

    [Test]
    PROCEDURE TestCombinedChart@77();
    VAR
      CashFlowChartSetup@1000 : Record 869;
      CashFlowSetup@1008 : Record 843;
      CashFlowForecast@1007 : Record 840;
      BusChartBuf@1006 : Record 485;
      MeasureBusChartMap@1005 : Record 486;
      CFChartMgt@1004 : Codeunit 869;
      Value@1001 : Variant;
      AccumulatedMeasureName@1012 : Text[249];
      PostedAmount@1003 : ARRAY [11,2] OF Decimal;
      ExpectedAmount@1009 : Decimal;
      ActualAmount@1010 : Decimal;
      i@1011 : Integer;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::Combined,CashFlowChartSetup."Group By"::"Source Type");

      InsertCFReceivablesPayables(CashFlowForecast,PostedAmount);
      FOR i := 1 TO 2 DO
        ExpectedAmount += PostedAmount[i,1] + PostedAmount[i,2];
      CashFlowSetup.SetChartRoleCenterCFNo(CashFlowForecast."No.");

      CFChartMgt.UpdateData(BusChartBuf);

      BusChartBuf.FindFirstMeasure(MeasureBusChartMap);
      BusChartBuf.NextMeasure(MeasureBusChartMap);
      BusChartBuf.NextMeasure(MeasureBusChartMap);
      AccumulatedMeasureName := MeasureBusChartMap.Name;

      BusChartBuf.GetValue(AccumulatedMeasureName,2,Value);
      EVALUATE(ActualAmount,FORMAT(Value));
      Assert.AreEqual(ExpectedAmount,ActualAmount,'Wrong Amount in the accumulated chart ' + AccumulatedMeasureName)
    END;

    LOCAL PROCEDURE InsertCFReceivablesPayables@109(VAR CashFlowForecast@1002 : Record 840;VAR PostedAmount@1001 : ARRAY [11,2] OF Decimal);
    VAR
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      ConsiderSource[CashFlowForecast."Source Type Filter"::Receivables] := TRUE;
      ConsiderSource[CashFlowForecast."Source Type Filter"::Payables] := TRUE;
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);
    END;

    [Test]
    PROCEDURE TestCombinedChartDrillDown@87();
    VAR
      CashFlowForecast@1001 : Record 840;
      CashFlowChartSetup@1000 : Record 869;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::Combined,CashFlowChartSetup."Group By"::"Positive/Negative");
      VerifyDateAndSourceTypeOnChartDrillDown(2,CashFlowForecast."Source Type Filter"::" ");
    END;

    [Test]
    PROCEDURE TestAccumulatedChartDrillDown@81();
    VAR
      CashFlowForecast@1001 : Record 840;
      CashFlowChartSetup@1000 : Record 869;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::"Accumulated Cash",CashFlowChartSetup."Group By"::"Positive/Negative");
      VerifyDateAndSourceTypeOnChartDrillDown(0,CashFlowForecast."Source Type Filter"::" ");
    END;

    [Test]
    PROCEDURE TestPosNegChartDrillDown@72();
    VAR
      CashFlowForecast@1000 : Record 840;
      CashFlowChartSetup@1008 : Record 869;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::"Change in Cash",CashFlowChartSetup."Group By"::"Positive/Negative");
      VerifyDateAndSourceTypeOnChartDrillDown(0,CashFlowForecast."Source Type Filter"::Payables);
    END;

    [Test]
    PROCEDURE TestSourceTypeChartDrillDown@78();
    VAR
      CashFlowForecast@1000 : Record 840;
      CashFlowChartSetup@1008 : Record 869;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::"Change in Cash",CashFlowChartSetup."Group By"::"Source Type");
      VerifyDateAndSourceTypeOnChartDrillDown(0,CashFlowForecast."Source Type Filter"::Receivables);
    END;

    [Test]
    PROCEDURE TestAccountNoChartDrillDown@88();
    VAR
      CashFlowForecast@1000 : Record 840;
      CashFlowChartSetup@1008 : Record 869;
    BEGIN
      Initialize;
      SetDayColumnGroupByChartSetup(CashFlowChartSetup.Show::"Change in Cash",CashFlowChartSetup."Group By"::"Account No.");
      VerifyDateAndSourceTypeOnChartDrillDown(0,CashFlowForecast."Source Type Filter"::Receivables);
    END;

    LOCAL PROCEDURE SetDayColumnGroupByChartSetup@90(NewShow@1002 : Integer;GroupBy@1000 : Integer);
    VAR
      CashFlowChartSetup@1001 : Record 869;
    BEGIN
      WITH CashFlowChartSetup DO BEGIN
        IF GET(USERID) THEN
          DELETE;

        INIT;
        "User ID" := USERID;
        "Period Length" := "Period Length"::Day;
        "Start Date" := "Start Date"::"First Entry Date";
        Show := NewShow;
        "Group By" := GroupBy;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE VerifyDateAndSourceTypeOnChartDrillDown@98(MeasureIndex@1004 : Integer;ExpectedSourceType@1001 : Integer);
    VAR
      CashFlowSetup@1008 : Record 843;
      CashFlowForecast@1007 : Record 840;
      BusChartBuf@1005 : Record 485;
      CFChartMgt@1003 : Codeunit 869;
      CFForecastEntries@1000 : TestPage 850;
      PostedAmount@1002 : ARRAY [11,2] OF Decimal;
      Period@1011 : ',Before,After';
      ExpectedDate@1006 : Date;
      ActualTotalAmount@1009 : Decimal;
      ExpectedTotalAmount@1010 : Decimal;
    BEGIN
      InsertCFReceivablesPayables(CashFlowForecast,PostedAmount);

      CashFlowSetup.SetChartRoleCenterCFNo(CashFlowForecast."No.");
      CFChartMgt.UpdateData(BusChartBuf);

      BusChartBuf."Drill-Down X Index" := 0;
      BusChartBuf."Drill-Down Measure Index" := MeasureIndex;
      ExpectedDate := BusChartBuf.GetXValueAsDate(BusChartBuf."Drill-Down X Index");

      CFForecastEntries.TRAP;
      CFChartMgt.DrillDown(BusChartBuf);

      CFForecastEntries.FIRST;
      REPEAT
        CFForecastEntries."Cash Flow Forecast No.".ASSERTEQUALS(CashFlowForecast."No.");
        CFForecastEntries."Cash Flow Date".ASSERTEQUALS(ExpectedDate);
        IF ExpectedSourceType <> 0 THEN
          CFForecastEntries."Source Type".ASSERTEQUALS(ExpectedSourceType);
        ActualTotalAmount += CFForecastEntries."Amount (LCY)".ASDECIMAL;
      UNTIL NOT CFForecastEntries.NEXT;

      IF ExpectedSourceType <> 0 THEN
        ExpectedTotalAmount := PostedAmount[ExpectedSourceType,Period::Before]
      ELSE
        ExpectedTotalAmount := CalcSum(PostedAmount,Period::Before);
      Assert.AreEqual(ExpectedTotalAmount,ActualTotalAmount,'Wrong expected sum of Amount (LCY) on the DrillDown page');
    END;

    LOCAL PROCEDURE CalcSum@106(PostedAmount@1001 : ARRAY [11,2] OF Decimal;Period@1000 : ',Before,After') Sum : Decimal;
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PostedAmount,1) DO
        Sum += PostedAmount[i,Period];
    END;

    [Test]
    PROCEDURE TestSourceTypeCollection@64();
    VAR
      CashFlowForecast@1004 : Record 840;
      BusChartBuf@1007 : Record 485;
      CFChartMgt@1005 : Codeunit 869;
      PostedAmount@1002 : ARRAY [11,2] OF Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
      SourceType@1000 : Option;
      ExpectedNoOfSourceTypes@1001 : Integer;
      ActualNoOfSourceTypes@1006 : Integer;
    BEGIN
      Initialize;
      ExpectedNoOfSourceTypes := LibraryRandom.RandIntInRange(1,10);
      FOR SourceType := 1 TO ExpectedNoOfSourceTypes DO
        ConsiderSource[SourceType] := TRUE;
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);

      BusChartBuf.Initialize;
      ActualNoOfSourceTypes := CFChartMgt.CollectSourceTypes(CashFlowForecast,BusChartBuf);

      Assert.AreEqual(ExpectedNoOfSourceTypes,ActualNoOfSourceTypes,'Wrong number of collected Source Types');
    END;

    [Test]
    PROCEDURE TestAccountNoCollection@84();
    VAR
      CashFlowForecast@1004 : Record 840;
      CFAccount@1000 : Record 841;
      BusChartBuf@1007 : Record 485;
      CFChartMgt@1005 : Codeunit 869;
      PostedAmount@1008 : ARRAY [11,2] OF Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
      ExpectedNoOfAccounts@1001 : Integer;
      ActualNoOfAccounts@1006 : Integer;
      SourceType@1002 : Integer;
    BEGIN
      Initialize;
      ExpectedNoOfAccounts := LibraryRandom.RandIntInRange(1,10);
      CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
      FOR SourceType := 1 TO ExpectedNoOfAccounts DO
        ConsiderSource[SourceType] := TRUE;
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);

      BusChartBuf.Initialize;
      ActualNoOfAccounts := CFChartMgt.CollectAccounts(CashFlowForecast,BusChartBuf);

      Assert.AreEqual(ExpectedNoOfAccounts,ActualNoOfAccounts,'Wrong number of collected Accounts');
    END;

    [Test]
    PROCEDURE TestPosNegCollection@85();
    VAR
      CashFlowForecast@1004 : Record 840;
      BusChartBuf@1007 : Record 485;
      CFChartMgt@1005 : Codeunit 869;
      PostedAmount@1002 : ARRAY [11,2] OF Decimal;
      ActualNoOfPosNeg@1006 : Integer;
    BEGIN
      Initialize;
      InsertCFReceivablesPayables(CashFlowForecast,PostedAmount);

      BusChartBuf.Initialize;
      ActualNoOfPosNeg := CFChartMgt.CollectPosNeg(CashFlowForecast,BusChartBuf);

      Assert.AreEqual(2,ActualNoOfPosNeg,'Wrong number of collected Positive-Negative');
    END;

    [Test]
    PROCEDURE TestPositiveCollection@70();
    VAR
      CashFlowForecast@1004 : Record 840;
      BusChartBuf@1000 : Record 485;
      CFChartMgt@1005 : Codeunit 869;
      PostedAmount@1002 : ARRAY [11,2] OF Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
      ActualNoOfPosNeg@1006 : Integer;
    BEGIN
      Initialize;
      ConsiderSource[CashFlowForecast."Source Type Filter"::Receivables] := TRUE;
      ConsiderSource[CashFlowForecast."Source Type Filter"::"Sales Order"] := TRUE;
      ConsiderSource[CashFlowForecast."Source Type Filter"::"Service Orders"] := TRUE;
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);

      BusChartBuf.Initialize;
      ActualNoOfPosNeg := CFChartMgt.CollectPosNeg(CashFlowForecast,BusChartBuf);

      Assert.AreEqual(1,ActualNoOfPosNeg,'Wrong number of collected Positive-Negative.');
    END;

    [Test]
    PROCEDURE TestPostPositiveAmount@73();
    VAR
      CFForecastEntry@1000 : Record 847;
    BEGIN
      Initialize;
      PostJnlLine(1);
      CFForecastEntry.FINDLAST;
      Assert.IsTrue(CFForecastEntry.Positive,STRSUBSTNO(PosNegErrMsg,CFForecastEntry.Positive,CFForecastEntry."Amount (LCY)"));
    END;

    [Test]
    PROCEDURE TestPostZeroAmount@66();
    VAR
      CFForecastEntry@1000 : Record 847;
    BEGIN
      Initialize;
      PostJnlLine(0);
      CFForecastEntry.FINDLAST;
      Assert.IsFalse(CFForecastEntry.Positive,STRSUBSTNO(PosNegErrMsg,CFForecastEntry.Positive,CFForecastEntry."Amount (LCY)"));
    END;

    [Test]
    PROCEDURE TestPostNegativeAmount@74();
    VAR
      CFForecastEntry@1000 : Record 847;
    BEGIN
      Initialize;
      PostJnlLine(-1);
      CFForecastEntry.FINDLAST;
      Assert.IsFalse(CFForecastEntry.Positive,STRSUBSTNO(PosNegErrMsg,CFForecastEntry.Positive,CFForecastEntry."Amount (LCY)"));
    END;

    LOCAL PROCEDURE PostJnlLine@71(Amount@1003 : Decimal);
    VAR
      CashFlowForecast@1000 : Record 840;
      CashFlowWkshLine@1001 : Record 846;
      CFAccount@1004 : Record 841;
      CFWkshRegisterLine@1002 : Codeunit 846;
    BEGIN
      WITH CashFlowWkshLine DO BEGIN
        CashFlowForecast.FINDFIRST;
        CFAccount.SETRANGE(Blocked,FALSE);
        CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
        CFAccount.FINDFIRST;
        INIT;
        "Cash Flow Forecast No." := CashFlowForecast."No.";
        "Cash Flow Account No." := CFAccount."No.";
        "Cash Flow Date" := WORKDATE;
        "Amount (LCY)" := Amount;

        CFWkshRegisterLine.RunWithCheck(CashFlowWkshLine);
      END;
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForTotal@46();
    VAR
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderAllSources(ConsiderSource);
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".Total.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".Total.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForServiceOrders@35();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Service Orders"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::Receivables] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".ServiceOrders.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".ServiceOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForReceivables@33();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::Receivables] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::Payables] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".Receivables.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".Receivables.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForPayables@37();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::Payables] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".Payables.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".Payables.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForSalesOrders@39();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Purchase Order"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".SalesOrders.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".SalesOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForPurchOrders@40();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Purchase Order"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Liquid Funds"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".PurchaseOrders.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".PurchaseOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForLiquidFunds@41();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Liquid Funds"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Expense"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".LiquidFunds.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".LiquidFunds.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForManualExpenses@42();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Expense"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Revenue"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".ManualExpenses.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".ManualExpenses.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForManualRevenues@43();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Revenue"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".ManualRevenues.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".ManualRevenues.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForSaleOfFA@44();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Budget"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".SaleofFixedAssets.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".SaleofFixedAssets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForBudgetedFA@45();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Budget"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".BudgetedFixedAssets.DRILLDOWN;
      CashFlowCard."CF Forecast Statistics FactBox".BudgetedFixedAssets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnFactBoxForBudget@25();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowCard@1000 : TestPage 847;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"G/L Budget"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE; // consider some unrelated values as well
      SetupDrillDownOnFactBox(CashFlowCard,ConsiderSource);

      // Exercise
      CFLedgerEntries.TRAP;
      CashFlowCard."CF Forecast Statistics FactBox".GLBudgets.DRILLDOWN;

      // Verify - CFLedgerEntries should be filtered on budget source type only through DRILLDOWN
      CashFlowCard."CF Forecast Statistics FactBox".GLBudgets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForTotal@57();
    VAR
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderAllSources(ConsiderSource);
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.Total.DRILLDOWN;
      CashFlowStatistic.Total.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForServiceOrders@56();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Service Orders"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::Receivables] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.ServiceOrders.DRILLDOWN;
      CashFlowStatistic.ServiceOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForReceivables@55();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::Receivables] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::Payables] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.Receivables.DRILLDOWN;
      CashFlowStatistic.Receivables.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForPayables@54();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::Payables] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.Payables.DRILLDOWN;
      CashFlowStatistic.Payables.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForSalesOrders@53();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Purchase Order"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.SalesOrders.DRILLDOWN;
      CashFlowStatistic.SalesOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForPurchOrders@52();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Purchase Order"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Liquid Funds"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.PurchaseOrders.DRILLDOWN;
      CashFlowStatistic.PurchaseOrders.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForLiquidFunds@51();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Liquid Funds"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Expense"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.LiquidFunds.DRILLDOWN;
      CashFlowStatistic.LiquidFunds.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForManualExpenses@50();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Expense"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Revenue"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.ManualExpenses.DRILLDOWN;
      CashFlowStatistic.ManualExpenses.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForManualRevenues@49();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Cash Flow Manual Revenue"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.ManualRevenues.DRILLDOWN;
      CashFlowStatistic.ManualRevenues.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForSaleOfFA@48();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Budget"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.SalesofFixedAssets.DRILLDOWN;
      CashFlowStatistic.SalesofFixedAssets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForBudgetedFA@47();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Budget"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Fixed Assets Disposal"] := TRUE;
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      CFLedgerEntries.TRAP;
      CashFlowStatistic.BudgetedFixedAssets.DRILLDOWN;
      CashFlowStatistic.BudgetedFixedAssets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    [Test]
    PROCEDURE TestDrillDownOnPAG868ForBudget@93();
    VAR
      CFForecastEntry@1002 : Record 847;
      CashFlowStatistic@1000 : TestPage 868;
      CFLedgerEntries@1001 : TestPage 850;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      ConsiderSource[CFForecastEntry."Source Type"::"G/L Budget"] := TRUE;
      ConsiderSource[CFForecastEntry."Source Type"::"Sales Order"] := TRUE; // create some unrelated entries as well
      SetupDrillDownOnPAG868(CashFlowStatistic,ConsiderSource);

      // Exercise
      CFLedgerEntries.TRAP;
      CashFlowStatistic.GLBudgets.DRILLDOWN;

      // Verify - ledger entries must be filtered on budget source through DRILLDOWN
      CashFlowStatistic.GLBudgets.ASSERTEQUALS(CalcSumOnLedgEntries(CFLedgerEntries));
    END;

    LOCAL PROCEDURE SetupDrillDownOnFactBox@36(VAR CashFlowCard@1007 : TestPage 847;ConsiderSource@1003 : ARRAY [11] OF Boolean);
    VAR
      CashFlowForecast@1001 : Record 840;
      PostedAmount@1002 : ARRAY [11,2] OF Decimal;
    BEGIN
      // Setup
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);
      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
    END;

    LOCAL PROCEDURE SetupDrillDownOnPAG868@58(VAR CashFlowStatistic@1007 : TestPage 868;ConsiderSource@1003 : ARRAY [11] OF Boolean);
    VAR
      CashFlowForecast@1001 : Record 840;
      CashFlowCard@1002 : TestPage 847;
      PostedAmount@1000 : ARRAY [11,2] OF Decimal;
    BEGIN
      // Setup
      InsertCFLedgerEntries(CashFlowForecast,ConsiderSource,PostedAmount);
      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CashFlowStatistic.TRAP;
      CashFlowCard."Page Cash Flow Forecast Statistics".INVOKE;
    END;

    LOCAL PROCEDURE CalcSumOnLedgEntries@38(VAR CFLedgerEntries@1000 : TestPage 850) TotalAmountOnPage : Decimal;
    BEGIN
      CFLedgerEntries.FIRST;
      REPEAT
        TotalAmountOnPage += CFLedgerEntries."Amount (LCY)".ASDECIMAL;
      UNTIL NOT CFLedgerEntries.NEXT;
    END;

    [Test]
    PROCEDURE TestGLBudgetNameValidation@59();
    VAR
      CFWkshLine@1000 : Record 846;
      GLBudgetName@1002 : Record 95;
    BEGIN
      Initialize;

      LibraryERM.CreateGLBudgetName(GLBudgetName);

      CFWkshLine."Source Type" := CFWkshLine."Source Type"::"G/L Budget";
      CFWkshLine.VALIDATE("G/L Budget Name",GLBudgetName.Name);

      CFWkshLine."Source Type" := LibraryRandom.RandIntInRange(1,CFWkshLine."Source Type"::"G/L Budget" - 1);
      ASSERTERROR CFWkshLine.VALIDATE("G/L Budget Name",GLBudgetName.Name);
      Assert.ExpectedError(
        STRSUBSTNO('%1 must be equal to ''%2''',CFWkshLine.FIELDCAPTION("Source Type"),FORMAT(CFWkshLine."Source Type"::"G/L Budget")));
    END;

    [Test]
    PROCEDURE TestGetChartTypeFunctionForStackedColumn@83();
    BEGIN
      GetChartTypeFunction(CashFlowChartSetup."Chart Type"::"Stacked Column");
    END;

    [Test]
    PROCEDURE TestGetChartTypeFunctionForStepLine@82();
    BEGIN
      GetChartTypeFunction(CashFlowChartSetup."Chart Type"::"Step Line");
    END;

    LOCAL PROCEDURE GetChartTypeFunction@116(ChartType@1002 : Option);
    VAR
      Actual@1001 : Integer;
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup."Chart Type" := ChartType;
      CashFlowChartSetup.MODIFY;
      Actual := CashFlowChartSetup.GetChartType;
      IF ChartType = CashFlowChartSetup."Chart Type"::"Step Line" THEN
        Assert.AreEqual(5,Actual,STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Chart Type")))
      ELSE
        Assert.AreEqual(11,Actual,STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Chart Type")));
    END;

    [Test]
    PROCEDURE TestGetStartDateFunction@186();
    VAR
      Actual@1001 : Date;
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup."Start Date" := CashFlowChartSetup."Start Date"::"Working Date";
      CashFlowChartSetup.MODIFY;
      Actual := CashFlowChartSetup.GetStartDate;
      Assert.AreEqual(WORKDATE,Actual,STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Start Date")));
    END;

    [Test]
    PROCEDURE TestGetCurrentSelectionTextFunction@92();
    BEGIN
      Initialize;
      CreateAndUpdateCashFlowChartSetup(CashFlowChartSetup,CashFlowChartSetup."Start Date"::"First Entry Date",
        CashFlowChartSetup."Period Length"::Week,CashFlowChartSetup.Show::"Change in Cash",
        CashFlowChartSetup."Group By"::"Source Type");
      VerifyCashFlowChartSetupCurrentSelectionText;
    END;

    [Test]
    PROCEDURE TestGetCurrentSelectionTextFunctionWithMaxValues@86();
    VAR
      CFSetup@1001 : Record 843;
      OldCFNo@1000 : Code[20];
    BEGIN
      Initialize;
      CreateAndUpdateCashFlowChartSetup(CashFlowChartSetup,CashFlowChartSetup."Start Date"::"First Entry Date",
        CashFlowChartSetup."Period Length"::Quarter,CashFlowChartSetup.Show::"Accumulated Cash",
        CashFlowChartSetup."Group By"::"Positive/Negative");
      CFSetup.GET;
      OldCFNo := SetChartCFNoInSetup(PADSTR(CFSetup."CF No. on Chart in Role Center",
            MAXSTRLEN(CFSetup."CF No. on Chart in Role Center"),'A'));
      VerifyCashFlowChartSetupCurrentSelectionText;
      SetChartCFNoInSetup(OldCFNo);
    END;

    LOCAL PROCEDURE VerifyCashFlowChartSetupCurrentSelectionText@118();
    VAR
      CFSetup@1000 : Record 843;
      Expected@1002 : Text[150];
    BEGIN
      CFSetup.GET;
      Expected := STRSUBSTNO('%1 | %2 | %3 | %4 | %5.',CFSetup."CF No. on Chart in Role Center",CashFlowChartSetup.Show,
          CashFlowChartSetup."Start Date",CashFlowChartSetup."Period Length",CashFlowChartSetup."Group By");
      Assert.IsTrue(STRPOS(CashFlowChartSetup.GetCurrentSelectionText,Expected) = 1,
        'Unexpected value returned from function GetCurrentSelectionText');
    END;

    [Test]
    PROCEDURE TestSetGroupByFunctionPositiveNegative@91();
    BEGIN
      SetAndVerifyGroupByValue(CashFlowChartSetup."Group By"::"Source Type");
    END;

    [Test]
    PROCEDURE TestSetGroupByFunctionAccountNo@94();
    BEGIN
      SetAndVerifyGroupByValue(CashFlowChartSetup."Group By"::"Positive/Negative");
    END;

    [Test]
    PROCEDURE TestSetGroupByFunctionSourceType@96();
    BEGIN
      SetAndVerifyGroupByValue(CashFlowChartSetup."Group By"::"Account No.");
    END;

    LOCAL PROCEDURE SetAndVerifyGroupByValue@89(GroupBy@1002 : Option);
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup.SetGroupBy(GroupBy);
      Assert.AreEqual(
        GroupBy,CashFlowChartSetup."Group By",STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Group By")));
    END;

    [Test]
    PROCEDURE TestSetStartDateFunction@95();
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup.SetStartDate(CashFlowChartSetup."Start Date"::"Working Date");
      Assert.AreEqual(CashFlowChartSetup."Start Date"::"Working Date",CashFlowChartSetup."Start Date",
        STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Start Date")));
    END;

    [Test]
    PROCEDURE TestSetChartTypeFunctionStackedArea@99();
    BEGIN
      SetAndVerifyChartTypeValue(CashFlowChartSetup."Chart Type"::"Stacked Area (%)");
    END;

    [Test]
    PROCEDURE TestSetChartTypeFunctionStackedColumn@100();
    BEGIN
      SetAndVerifyChartTypeValue(CashFlowChartSetup."Chart Type"::"Stacked Column");
    END;

    [Test]
    PROCEDURE TestSetChartTypeFunctionStackedColumnPercentage@101();
    BEGIN
      SetAndVerifyChartTypeValue(CashFlowChartSetup."Chart Type"::"Stacked Column (%)");
    END;

    [Test]
    PROCEDURE TestSetChartTypeFunctionStepline@102();
    BEGIN
      SetAndVerifyChartTypeValue(CashFlowChartSetup."Chart Type"::"Step Line");
    END;

    LOCAL PROCEDURE SetAndVerifyChartTypeValue@97(ChartType@1002 : Option);
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup.SetChartType(ChartType);
      Assert.AreEqual(
        ChartType,CashFlowChartSetup."Chart Type",STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Chart Type")));
    END;

    [Test]
    PROCEDURE TestSetShowFunctionAccumulatedCash@108();
    BEGIN
      SetAndVerifyShowValue(CashFlowChartSetup.Show::"Accumulated Cash");
    END;

    [Test]
    PROCEDURE TestSetShowFunctionChangeinCash@110();
    BEGIN
      SetAndVerifyShowValue(CashFlowChartSetup.Show::"Change in Cash");
    END;

    [Test]
    PROCEDURE TestSetShowFunctionCombined@111();
    BEGIN
      SetAndVerifyShowValue(CashFlowChartSetup.Show::Combined);
    END;

    LOCAL PROCEDURE SetAndVerifyShowValue@107(ShowOption@1000 : Option);
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup.SetShow(ShowOption);
      Assert.AreEqual(ShowOption,CashFlowChartSetup.Show,STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION(Show)));
    END;

    [Test]
    PROCEDURE TestPeriodLengthFunctionDay@104();
    BEGIN
      SetAndVerifyPeriodLengthValue(CashFlowChartSetup."Period Length"::Day);
    END;

    [Test]
    PROCEDURE TestPeriodLengthFunctionWeek@105();
    BEGIN
      SetAndVerifyPeriodLengthValue(CashFlowChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestPeriodLengthFunctionMonth@112();
    BEGIN
      SetAndVerifyPeriodLengthValue(CashFlowChartSetup."Period Length"::Month);
    END;

    [Test]
    PROCEDURE TestPeriodLengthFunctionQuarter@113();
    BEGIN
      SetAndVerifyPeriodLengthValue(CashFlowChartSetup."Period Length"::Quarter);
    END;

    [Test]
    PROCEDURE TestPeriodLengthFunctionYear@114();
    BEGIN
      SetAndVerifyPeriodLengthValue(CashFlowChartSetup."Period Length"::Year);
    END;

    LOCAL PROCEDURE SetAndVerifyPeriodLengthValue@103(PeriodLength@1000 : Option);
    BEGIN
      Initialize;
      CreateCashFlowChartSetup;
      CashFlowChartSetup.SetPeriodLength(PeriodLength);
      Assert.AreEqual(
        PeriodLength,CashFlowChartSetup."Period Length",
        STRSUBSTNO(UnexpectedValueInField,CashFlowChartSetup.FIELDCAPTION("Period Length")));
    END;

    LOCAL PROCEDURE SetChartCFNoInSetup@117(ChartCashFlowNo@1001 : Code[20]) OldCFNo : Code[20];
    VAR
      CashFlowSetup@1000 : Record 843;
    BEGIN
      CashFlowSetup.GET;
      OldCFNo := CashFlowSetup."CF No. on Chart in Role Center";
      CashFlowSetup."CF No. on Chart in Role Center" := ChartCashFlowNo;
      CashFlowSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateCashFlowChartSetup@115();
    BEGIN
      WITH CashFlowChartSetup DO BEGIN
        IF GET(USERID) THEN
          DELETE;
        INIT;
        "User ID" := USERID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateCashFlowChartSetup@119(VAR CashFlowChartSetup@1000 : Record 869;StartDate@1001 : Option;PeriodLength@1002 : Option;Show@1003 : Option;GroupBy@1004 : Option);
    BEGIN
      CreateCashFlowChartSetup;
      CashFlowChartSetup."Start Date" := StartDate;
      CashFlowChartSetup."Period Length" := PeriodLength;
      CashFlowChartSetup.Show := Show;
      CashFlowChartSetup."Group By" := GroupBy;
      CashFlowChartSetup.MODIFY;
    END;

    [Test]
    PROCEDURE TestPrintRecordsFromCashFlowForecastTable@26();
    VAR
      CashFlowForecast@1000 : Record 840;
      CFReportSelection@1001 : Record 856;
    BEGIN
      Initialize;
      WITH CFReportSelection DO
        DELETEALL;

      CashFlowForecast.PrintRecords; // Can't be completely tested since it has REPORT.RUNMODAL
    END;

    [Test]
    PROCEDURE TestAssistEditFromCashFlowForecastTable@121();
    VAR
      CashFlowForecast@1000 : Record 840;
      OldCashFlowForecast@1001 : Record 840;
    BEGIN
      IF OldCashFlowForecast.FINDFIRST THEN;
      ASSERTERROR CashFlowForecast.AssistEdit(OldCashFlowForecast);
      Assert.ExpectedError('Unhandled UI: ModalPage 571'); // Can't be completely tested since it's running modal page
    END;

    [Test]
    PROCEDURE TestLookupCashFlowFilterFromCashFlowForecastTable@123();
    VAR
      CashFlowForecast@1000 : Record 840;
      Text@1002 : Text[1024];
    BEGIN
      ASSERTERROR CashFlowForecast.LookupCashFlowFilter(Text);
      Assert.ExpectedError('Unhandled UI: ModalPage 849'); // Can't be completely tested since it's running modal page
    END;

    LOCAL PROCEDURE Initialize@62();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      EVALUATE(PlusOneDayFormula,'<+1D>');
      EVALUATE(MinusOneDayFormula,'<-1D>');
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow] [Worksheet]
    }
    END.
  }
}

