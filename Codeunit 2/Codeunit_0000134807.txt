OBJECT Codeunit 134807 RED Test Unit for Doc With Inv
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ChangedInvDiscountAmountErr@1046 : TextConst 'ENU=Invoice Discount Amount must not be changed';
      LibraryERM@1003 : Codeunit 131300;
      LibrarySales@1005 : Codeunit 130509;
      LibraryPurchase@1006 : Codeunit 130512;
      LibrarySetupStorage@1014 : Codeunit 131009;
      LibraryRandom@1013 : Codeunit 130440;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryUtility@1010 : Codeunit 131000;
      Assert@1016 : Codeunit 130000;
      IsInitialized@1008 : Boolean;
      CalcMethod@1018 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';
      StartDate@1017 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';
      DiscountInvoicingErr@1000 : TextConst 'ENU=You cannot post line 10000 because it contains a deferral code and a Inv. Discount Amount.';

    [Test]
    PROCEDURE TestSalesOrderInvoiceDiscount@184();
    VAR
      SalesHeader@1000 : Record 36;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Invoice Discount Amount]
      // [SCENARIO] Set Invoice Discount Amount for SO with multiple lines

      // [GIVEN] LCY Sales Order with multiple lines
      Initialize;
      InitializeSalesMultipleLinesEqualAmountsScenario(SalesHeader,InvoiceDiscountAmount,'');

      // [WHEN] Set Invoice Discount Amount
      UpdateInvDiscAmtOnSalesOrder(SalesHeader,InvoiceDiscountAmount);

      // [THEN] Verify the invoice discount amount
      VerifySalesOrderInvoiceDiscountAmount(SalesHeader,InvoiceDiscountAmount);

      // [THEN] Verify Deferrals do not include the Invoice Discount Amount
      VerifySalesLineDeferralAmounts(SalesHeader,2);
    END;

    [Test]
    PROCEDURE TestPurchaseOrderInvoiceDiscount@185();
    VAR
      PurchaseHeader@1002 : Record 38;
      InvoiceDiscountAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Invoice Discount Amount]
      // [SCENARIO] Set Invoice Discount Amount for PO with multiple lines

      // [GIVEN] FCY Purchase Order with multiple lines
      Initialize;
      InitializePurchaseMultipleLinesEqualAmountsScenario(PurchaseHeader,InvoiceDiscountAmount,'');

      // [WHEN] Set Invoice Discount Amount
      UpdateInvDiscAmtOnPurchaseOrder(PurchaseHeader,InvoiceDiscountAmount);

      // [THEN] Verify the invoice discount amount
      VerifyPurchaseOrderInvoiceDiscountAmount(PurchaseHeader,InvoiceDiscountAmount);

      // [THEN] Verify Deferrals do not include the Invoice Discount Amount
      VerifyPurchLineDeferralAmounts(PurchaseHeader,2);
    END;

    [Test]
    PROCEDURE TestSalesOrderInvoiceDiscountFCY@135();
    VAR
      SalesHeader@1000 : Record 36;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Invoice Discount Amount]
      // [SCENARIO] Set Invoice Discount Amount for SO with multiple lines

      // [GIVEN] FCY Sales Order with multiple lines
      Initialize;
      InitializeSalesMultipleLinesEqualAmountsScenario(
        SalesHeader,InvoiceDiscountAmount,LibraryERM.CreateCurrencyWithRounding);

      // [WHEN] set Invoice Discount Amount
      UpdateInvDiscAmtOnSalesOrder(SalesHeader,InvoiceDiscountAmount);

      // [THEN] Verify the invoice discount amount
      VerifySalesOrderInvoiceDiscountAmount(SalesHeader,InvoiceDiscountAmount);

      // [THEN] Verify Deferrals do not include the Invoice Discount Amount
      VerifySalesLineDeferralAmounts(SalesHeader,2);
    END;

    [Test]
    PROCEDURE TestPurchaseOrderInvoiceDiscountFCY@134();
    VAR
      PurchaseHeader@1002 : Record 38;
      InvoiceDiscountAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Invoice Discount Amount]
      // [SCENARIO] Set Invoice Discount Amount for PO with multiple lines

      // [GIVEN] FCY Purchase Order with multiple
      Initialize;
      InitializePurchaseMultipleLinesEqualAmountsScenario(
        PurchaseHeader,InvoiceDiscountAmount,LibraryERM.CreateCurrencyWithRounding);

      // [WHEN] Set Invoice Discount Amount
      UpdateInvDiscAmtOnPurchaseOrder(PurchaseHeader,InvoiceDiscountAmount);

      // [THEN] Verify the invoice discount amount
      VerifyPurchaseOrderInvoiceDiscountAmount(PurchaseHeader,InvoiceDiscountAmount);

      // [THEN] Verify Deferrals do not include the Invoice Discount Amount
      VerifyPurchLineDeferralAmounts(PurchaseHeader,2);
    END;

    [Test]
    PROCEDURE TestPostSalesOrderInvoiceDiscount@6();
    VAR
      SalesHeader@1000 : Record 36;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Post] [Invoice Discount Amount]
      // [SCENARIO 137128] Post doc with Invoice Discount Amount for SO
      // [GIVEN] LCY Sales Order with multiple lines
      Initialize;
      InitializeSalesMultipleLinesEqualAmountsScenario(SalesHeader,InvoiceDiscountAmount,'');

      // [GIVEN] Set Invoice Discount Amount
      UpdateInvDiscAmtOnSalesOrder(SalesHeader,InvoiceDiscountAmount);

      // [WHEN] Post the Invoice
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Error appeared 'You cannot post line because it contains a Deferral Code and Inv. Discount Amount'
      Assert.ExpectedError(DiscountInvoicingErr);
    END;

    [Test]
    PROCEDURE TestPostPurchaseOrderInvoiceDiscount@5();
    VAR
      PurchaseHeader@1002 : Record 38;
      InvoiceDiscountAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Post] [Invoice Discount Amount]
      // [SCENARIO 137128] Post doc with Invoice Discount Amount for PO
      // [GIVEN] FCY Purchase Order with multiple lines
      Initialize;
      InitializePurchaseMultipleLinesEqualAmountsScenario(PurchaseHeader,InvoiceDiscountAmount,'');

      // [GIVEN] Set Invoice Discount Amount
      UpdateInvDiscAmtOnPurchaseOrder(PurchaseHeader,InvoiceDiscountAmount);

      // [WHEN] Post the Invoice
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Error appeared 'You cannot post line because it contains a Deferral Code and Inv. Discount Amount'
      Assert.ExpectedError(DiscountInvoicingErr);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDeferralCode@49(CalcMethod@1004 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1003 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';NumOfPeriods@1002 : Integer) : Code[10];
    VAR
      DeferralTemplate@1000 : Record 1700;
    BEGIN
      DeferralTemplate.INIT;
      DeferralTemplate."Deferral Code" :=
        LibraryUtility.GenerateRandomCode(DeferralTemplate.FIELDNO("Deferral Code"),DATABASE::"Deferral Template");
      DeferralTemplate."Deferral Account" := LibraryERM.CreateGLAccountNo;
      DeferralTemplate."Calc. Method" := CalcMethod;
      DeferralTemplate."Start Date" := StartDate;
      DeferralTemplate."No. of Periods" := NumOfPeriods;
      DeferralTemplate."Period Description" := 'Deferral Revenue for %4';

      DeferralTemplate.INSERT;
      EXIT(DeferralTemplate."Deferral Code");
    END;

    PROCEDURE GetStartDate@46(DeferralStartOption@1002 : Option;StartDate@1000 : Date) AdjustedStartDate : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
      DeferralTemplate@1003 : Record 1700;
    BEGIN
      CASE DeferralStartOption OF
        DeferralTemplate."Start Date"::"Posting Date":
          AdjustedStartDate := StartDate;
        DeferralTemplate."Start Date"::"Beginning of Period":
          BEGIN
            AccountingPeriod.SETRANGE("Starting Date",0D,StartDate);
            IF AccountingPeriod.FINDLAST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
        DeferralTemplate."Start Date"::"End of Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := CALCDATE('<-1D>',AccountingPeriod."Starting Date");
          END;
        DeferralTemplate."Start Date"::"Beginning of Next Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateInvDiscAmtOnSalesOrder@100(VAR SalesHeader@1002 : Record 36;NewInvoiceDiscountAmount@1000 : Decimal);
    VAR
      TempVATAmountLine@1005 : TEMPORARY Record 290;
      SalesLine@1001 : Record 37;
      UpdateType@1003 : Integer;
    BEGIN
      UpdateType := 0; // 0 means General update
      GetSalesVATAmountLine(SalesHeader,TempVATAmountLine,UpdateType);
      TempVATAmountLine.SetInvoiceDiscountAmount(
        NewInvoiceDiscountAmount,SalesHeader."Currency Code",
        SalesHeader."Prices Including VAT",SalesHeader."VAT Base Discount %");
      SalesLine.UpdateVATOnLines(UpdateType,SalesHeader,SalesLine,TempVATAmountLine);
    END;

    LOCAL PROCEDURE GetSalesVATAmountLine@103(SalesHeader@1006 : Record 36;VAR VATAmountLine@1002 : Record 290;UpdateType@1000 : Integer);
    VAR
      TempSalesLine@1004 : TEMPORARY Record 37;
      SalesPost@1003 : Codeunit 80;
    BEGIN
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,UpdateType);
      TempSalesLine.CalcVATAmountLines(UpdateType,SalesHeader,TempSalesLine,VATAmountLine);
    END;

    LOCAL PROCEDURE InitializeSalesMultipleLinesEqualAmountsScenario@187(VAR SalesHeader@1000 : Record 36;VAR InvoiceDiscountAmount@1007 : Decimal;CurrencyCode@1009 : Code[10]);
    VAR
      VATPostingSetup@1002 : Record 325;
      SalesLine@1001 : Record 37;
      Currency@1008 : Record 4;
      Customer@1010 : Record 18;
      ItemNo@1003 : Code[20];
      Index@1004 : Integer;
    BEGIN
      CreateVATPostingSetup(VATPostingSetup,LibraryRandom.RandDecInRange(10,20,2));

      Customer.GET(CreateCustomerWithVAT(VATPostingSetup."VAT Bus. Posting Group"));
      SetupCustomerInvoiceRoundingAccount(Customer."Customer Posting Group",VATPostingSetup);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);

      ItemNo := CreateItemVATWithDeferral(TRUE,VATPostingSetup."VAT Prod. Posting Group");
      FOR Index := 1 TO LibraryRandom.RandIntInRange(3,10) DO
        CreateSalesLine(SalesHeader,SalesLine,ItemNo,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2));

      Currency.Initialize(CurrencyCode);
      InvoiceDiscountAmount := LibraryRandom.RandDec(100,2);
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@113(VAR VATPostingSetup@1000 : Record 325;VATPercent@1001 : Decimal);
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT",VATPercent);
    END;

    LOCAL PROCEDURE CreateCustomerWithVAT@107(VATBusPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE SetupCustomerInvoiceRoundingAccount@142(CustomerPostingGroupCode@1002 : Code[10];VATPostingSetup@1001 : Record 325);
    VAR
      CustomerPostingGroup@1000 : Record 92;
      GLAccount@1003 : Record 15;
    BEGIN
      WITH CustomerPostingGroup DO BEGIN
        GET(CustomerPostingGroupCode);
        VALIDATE(
          "Invoice Rounding Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemVATWithDeferral@108(AllowInvDisc@1003 : Boolean;VATProdPostingGroup@1005 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      DefaultDeferralCode@1000 : Code[10];
    BEGIN
      // Create an Item with Invoice Discount, Unit Price
      DefaultDeferralCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Allow Invoice Disc.",AllowInvDisc);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.VALIDATE("Unit Price",10 + LibraryRandom.RandInt(100));
      Item.VALIDATE("Last Direct Cost",Item."Unit Price");
      Item.VALIDATE("Default Deferral Template Code",DefaultDeferralCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE InitializePurchaseMultipleLinesEqualAmountsScenario@179(VAR PurchaseHeader@1003 : Record 38;VAR InvoiceDiscountAmount@1008 : Decimal;CurrencyCode@1001 : Code[10]);
    VAR
      VATPostingSetup@1002 : Record 325;
      PurchaseLine@1007 : Record 39;
      Currency@1009 : Record 4;
      Vendor@1010 : Record 23;
      ItemNo@1006 : Code[20];
      Index@1005 : Integer;
    BEGIN
      CreateVATPostingSetup(VATPostingSetup,LibraryRandom.RandDecInRange(10,20,2));

      Vendor.GET(CreateVendorWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      SetupVendorInvoiceRoundingAccount(Vendor."Vendor Posting Group",VATPostingSetup);

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);

      ItemNo := CreateItemVATWithDeferral(TRUE,VATPostingSetup."VAT Prod. Posting Group");
      FOR Index := 1 TO LibraryRandom.RandIntInRange(3,10) DO
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2));

      Currency.Initialize(CurrencyCode);
      InvoiceDiscountAmount := LibraryRandom.RandDec(100,2);
    END;

    LOCAL PROCEDURE VerifySalesOrderInvoiceDiscountAmount@122(VAR SalesHeader@1002 : Record 36;InvoiceDiscountAmount@1000 : Decimal);
    VAR
      TempVATAmountLine@1005 : TEMPORARY Record 290;
    BEGIN
      GetSalesVATAmountLine(SalesHeader,TempVATAmountLine,0); // 0 means General update

      Assert.AreEqual(InvoiceDiscountAmount,TempVATAmountLine."Invoice Discount Amount",ChangedInvDiscountAmountErr);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderInvoiceDiscountAmount@120(VAR PurchaseHeader@1002 : Record 38;InvoiceDiscountAmount@1000 : Decimal);
    VAR
      TempVATAmountLine@1001 : TEMPORARY Record 290;
    BEGIN
      GetPurchaseVATAmountLine(PurchaseHeader,TempVATAmountLine,0); // 0 means General update

      Assert.AreEqual(InvoiceDiscountAmount,TempVATAmountLine."Invoice Discount Amount",ChangedInvDiscountAmountErr);
    END;

    LOCAL PROCEDURE UpdateInvDiscAmtOnPurchaseOrder@1(VAR PurchaseHeader@1002 : Record 38;NewInvoiceDiscountAmount@1000 : Decimal);
    VAR
      TempVATAmountLine@1001 : TEMPORARY Record 290;
      PurchaseLine@1006 : Record 39;
      UpdateType@1003 : Integer;
    BEGIN
      UpdateType := 0; // 0 means General update
      GetPurchaseVATAmountLine(PurchaseHeader,TempVATAmountLine,UpdateType);
      TempVATAmountLine.SetInvoiceDiscountAmount(
        NewInvoiceDiscountAmount,PurchaseHeader."Currency Code",
        PurchaseHeader."Prices Including VAT",PurchaseHeader."VAT Base Discount %");
      PurchaseLine.UpdateVATOnLines(UpdateType,PurchaseHeader,PurchaseLine,TempVATAmountLine);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@82(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20];ItemCost@1004 : Decimal;Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",ItemCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@83(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;ItemNo@1001 : Code[20];ItemCost@1004 : Decimal;Quantity@1000 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",ItemCost);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithVATBusPostingGroup@181(VATBusPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      WITH Vendor DO BEGIN
        LibraryPurchase.CreateVendor(Vendor);
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE SetupVendorInvoiceRoundingAccount@141(VendorPostingGroupCode@1000 : Code[10];VATPostingSetup@1001 : Record 325);
    VAR
      VendorPostingGroup@1002 : Record 93;
      GLAccount@1003 : Record 15;
    BEGIN
      WITH VendorPostingGroup DO BEGIN
        GET(VendorPostingGroupCode);
        VALIDATE(
          "Invoice Rounding Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetPurchaseVATAmountLine@96(PurchaseHeader@1000 : Record 38;VAR VATAmountLine@1008 : Record 290;UpdateType@1007 : Integer);
    VAR
      TempPurchaseLine@1005 : TEMPORARY Record 39;
      PurchPost@1003 : Codeunit 90;
    BEGIN
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,UpdateType);
      TempPurchaseLine.CalcVATAmountLines(UpdateType,PurchaseHeader,TempPurchaseLine,VATAmountLine);
    END;

    PROCEDURE VerifySalesLineDeferralAmounts@3(VAR SalesHeader@1000 : Record 36;NoOfPeriods@1002 : Integer);
    VAR
      SalesLine@1001 : Record 37;
      DeferralHeader@1003 : Record 1701;
      DeferralLine@1004 : Record 1702;
      DeferralUtilities@1005 : Codeunit 1720;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      REPEAT
        // [THEN] The deferral schedule was created
        ValidateDeferralSchedule(DeferralHeader,DeferralLine,DeferralUtilities.GetSalesDeferralDocType,
          SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
          SalesLine."Deferral Code",SalesHeader."Posting Date",SalesLine.GetDeferralAmount,NoOfPeriods);
      UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE VerifyPurchLineDeferralAmounts@4(VAR PurchHeader@1001 : Record 38;NoOfPeriods@1000 : Integer);
    VAR
      PurchLine@1002 : Record 39;
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1003 : Record 1702;
      DeferralUtilities@1005 : Codeunit 1720;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.FINDSET;
      REPEAT
        // [THEN] The deferral schedule was created
        ValidateDeferralSchedule(DeferralHeader,DeferralLine,DeferralUtilities.GetPurchDeferralDocType,
          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",
          PurchLine."Deferral Code",PurchHeader."Posting Date",PurchLine.GetDeferralAmount,NoOfPeriods);
      UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateDeferralSchedule@19(VAR DeferralHeader@1004 : Record 1701;VAR DeferralLine@1003 : Record 1702;DeferralDocType@1008 : Integer;DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;DeferralTemplateCode@1005 : Code[10];HeaderPostingDate@1006 : Date;HeaderAmountToDefer@1007 : Decimal;NoOfPeriods@1009 : Integer);
    VAR
      Period@1011 : Integer;
      DeferralAmount@1012 : Decimal;
      PostingDate@1013 : Date;
    BEGIN
      DeferralHeader.GET(DeferralDocType,'','',DocType,DocNo,LineNo);
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",HeaderPostingDate);
      DeferralHeader.TESTFIELD("Amount to Defer",HeaderAmountToDefer);
      DeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);

      DeferralLineSetRange(DeferralLine,DeferralDocType,DocType,DocNo,LineNo);
      CLEAR(DeferralAmount);
      Period := 0;
      IF DeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := HeaderPostingDate
          ELSE
            PostingDate := SetDateDay(1,HeaderPostingDate);
          PostingDate := PeriodDate(PostingDate,Period);
          DeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + DeferralLine.Amount;
          Period := Period + 1;
        UNTIL DeferralLine.NEXT = 0;
      END;
      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    LOCAL PROCEDURE DeferralLineSetRange@18(VAR DeferralLine@1000 : Record 1702;DeferralDocType@1004 : Integer;DocType@1001 : Integer;DocNo@1002 : Code[20];LineNo@1003 : Integer);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
    END;

    LOCAL PROCEDURE SetDateDay@16(Day@1000 : Integer;StartDate@1001 : Date) : Date;
    BEGIN
      // Use the workdate but set to a specific day of that month
      EXIT(DMY2DATE(Day,DATE2DMY(StartDate,2),DATE2DMY(StartDate,3)));
    END;

    LOCAL PROCEDURE PeriodDate@60(PostingDate@1000 : Date;Period@1001 : Integer) : Date;
    VAR
      Expr@1002 : Text[50];
    BEGIN
      // Expr := '<' + FORMAT(Period) + 'M>';
      // EXIT(CALCDATE(Expr,PostingDate));
      Expr := FORMAT(Period);
      EXIT(CALCDATE('<' + Expr + 'M>',PostingDate));
    END;

    PROCEDURE ValidateAccounts@110(DeferralCount@1003 : Integer;DeferralAmount@1002 : Decimal;GLCount@1000 : Integer;GLAmt@1001 : Decimal);
    BEGIN
      Assert.AreEqual(DeferralCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(DeferralAmount,GLAmt,'An incorrect Amount was posted for purchase');
    END;

    BEGIN
    {
      // [FEATURE] [Revenue Expense Deferral]
    }
    END.
  }
}

