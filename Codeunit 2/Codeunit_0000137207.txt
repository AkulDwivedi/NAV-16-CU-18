OBJECT Codeunit 137207 SCM Archive Orders
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1012 : Codeunit 131000;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryPurchase@1001 : Codeunit 130512;
      LibrarySales@1007 : Codeunit 130509;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryReportDataset@1008 : Codeunit 131007;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibrarySetupStorage@1009 : Codeunit 131009;
      Assert@1003 : Codeunit 130000;
      isInitialized@1004 : Boolean;
      DocumentNo@1006 : Code[20];
      ArchiveDocMsg@1005 : TextConst '@@@="%1 = Document No.";ENU=Document %1 has been archived.';
      NoOfArchivedDocErr@1011 : TextConst 'ENU=Wrong number of archived documents.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandlerArchive)]
    PROCEDURE ArchivePurchReturnOrderOneVersion@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase] [Return Order]
      // Setup: Create Purchase Return Order with a number of lines.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      DocumentNo := PurchaseHeader."No.";

      // Exercise: Archive Purchase Return Order.
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);

      // Verify: Archived lines.
      VerifyArchivedPurchRetOrder(TempPurchaseLine,PurchaseHeader,1);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandlerArchive)]
    PROCEDURE ArchivePurchReturnOrderTwoVersions@9();
    VAR
      PurchaseHeader@1000 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase] [Return Order]
      // Setup: Create Purchase Return Order with a number of lines. Archive.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      DocumentNo := PurchaseHeader."No.";
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);

      // Exercise: Add more lines and archive Purchase Return Order again.
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);

      // Verify: Archived lines.
      VerifyArchivedPurchRetOrder(TempPurchaseLine,PurchaseHeader,2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE RestoreSalesRetOrderRestoresLineDiscountPriceCost@8();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesHeaderArchive@1003 : Record 5107;
      SalesLineRestored@1004 : Record 37;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Sales] [Return Order]
      // [SCENARIO 381149] Restoring archived Sales Return Order should restore Line Discount, Unit Price and Unit Cost.

      // [GIVEN] Sales Return Order with Unit Price = "X", Line Discount % = "Y", Unit Cost = "Z".
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // [GIVEN] Archive Sales Return Order.
      ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);

      // [WHEN] Restore the archived Sales Return Order version.
      SalesHeader.FIND;
      GetSalesHeaderArchivedVersion(SalesHeaderArchive,SalesHeader);
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // [THEN] Unit Price = "X" and Line Discount % = "Y" in the restored document.
      SalesLineRestored.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLineRestored.TESTFIELD("Unit Price",SalesLine."Unit Price");
      SalesLineRestored.TESTFIELD("Line Discount %",SalesLine."Line Discount %");

      // [THEN] Unit Cost = "Z" in the restored document.
      SalesLineRestored.TESTFIELD("Unit Cost",SalesLine."Unit Cost");
      SalesLineRestored.TESTFIELD("Unit Cost (LCY)",SalesLine."Unit Cost (LCY)");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerPurchArchivedQuote)]
    PROCEDURE PrintArchivedPurchQuote@15();
    VAR
      PurchaseHeader@1002 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      PurchaseHeaderArchive@1004 : Record 5109;
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase] [Quote]
      // Setup: Create Purchase Return Order with a number of lines.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Quote,'');
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      DocumentNo := PurchaseHeader."No.";

      // Exercise: Archive Purchase Order.
      ArchiveManagement.ArchPurchDocumentNoConfirm(PurchaseHeader);
      PurchaseHeaderArchive.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",1,1);
      SaveArchivedPurchQuote(PurchaseHeaderArchive);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Purchase_Header_Archive_No_',PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerPurchArchivedOrder)]
    PROCEDURE PrintArchivedPurchOrder@26();
    VAR
      PurchaseHeader@1002 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      PurchaseHeaderArchive@1004 : Record 5109;
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase] [Order]
      // Setup: Create Purchase Return Order with a number of lines.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      DocumentNo := PurchaseHeader."No.";

      // Exercise: Archive Purchase Order.
      ArchiveManagement.ArchPurchDocumentNoConfirm(PurchaseHeader);
      PurchaseHeaderArchive.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",1,1);
      SaveArchivedPurchOrder(PurchaseHeaderArchive);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Purchase_Header_Archive_No_',PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerPurchArchivedReturnOrder)]
    PROCEDURE PrintArchivedPurchReturnOrder@6();
    VAR
      PurchaseHeader@1002 : Record 38;
      TempPurchaseLine@1001 : TEMPORARY Record 39;
      PurchaseHeaderArchive@1004 : Record 5109;
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase] [Return Order]
      // Setup: Create Purchase Return Order with a number of lines.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');
      CreatePurchLines(TempPurchaseLine,PurchaseHeader,1 + LibraryRandom.RandInt(5));
      DocumentNo := PurchaseHeader."No.";

      // Exercise: Archive Purchase Return Order.
      ArchiveManagement.ArchPurchDocumentNoConfirm(PurchaseHeader);
      PurchaseHeaderArchive.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",1,1);
      SaveArchivedPurchReturnOrder(PurchaseHeaderArchive);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Purchase_Header_Archive_No_',PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RPH)]
    PROCEDURE SalesOrderConfirmationWithoutArchiveAndDisabledArchiveSetup@16();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Report] [Order Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 0 after "Order Confirmation" report in case of "Archive Document" = FALSE and "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      LibrarySales.SetArchiveQuotesandOrders(FALSE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Order Confirmation" report with "Archive Document" = FALSE
      RunOrderConfirmationReport(SalesHeader."No.",FALSE,TRUE);

      // [THEN] Sales Order's "Number of Archived Version" = 0
      VerifyNoOfSalesArchivedDocs(SalesHeader,0);
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RPH)]
    PROCEDURE SalesOrderConfirmationWithoutArchiveAndEnabledArchiveSetup@53();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Report] [Order Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 0 after "Order Confirmation" report in case of "Archive Document" = FALSE and "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Order Confirmation" report with "Archive Document" = FALSE
      RunOrderConfirmationReport(SalesHeader."No.",FALSE,TRUE);

      // [THEN] Sales Order's "Number of Archived Version" = 0
      VerifyNoOfSalesArchivedDocs(SalesHeader,0);
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RPH)]
    PROCEDURE SalesOrderConfirmationWithArchiveAndDisabledArchiveSetup@58();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Report] [Order Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 1 after "Order Confirmation" report in case of "Archive Document" = TRUE and "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      LibrarySales.SetArchiveQuotesandOrders(FALSE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Order Confirmation" report with "Archive Document" = TRUE
      RunOrderConfirmationReport(SalesHeader."No.",TRUE,TRUE);

      // [THEN] Sales Order's "Number of Archived Version" = 1
      VerifyNoOfSalesArchivedDocs(SalesHeader,1);
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RPH)]
    PROCEDURE SalesOrderConfirmationWithArchiveAndEnabledArchiveSetup@57();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Report] [Order Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 1 after "Order Confirmation" report in case of "Archive Document" = TRUE and "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Order Confirmation" report with "Archive Document" = TRUE
      RunOrderConfirmationReport(SalesHeader."No.",TRUE,TRUE);

      // [THEN] Sales Order's "Number of Archived Version" = 1
      VerifyNoOfSalesArchivedDocs(SalesHeader,1);
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RH)]
    PROCEDURE SalesOrderEmailConfirmationDisabledArchiveSetup@62();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Email Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 0 after "Email Confirmation" and "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      LibrarySales.SetArchiveQuotesandOrders(FALSE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Email Confirmation" action
      RunOrderConfirmationReport(SalesHeader."No.",TRUE,FALSE);

      // [THEN] Sales Order's "Number of Archived Version" = 0
      VerifyNoOfSalesArchivedDocs(SalesHeader,0);
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RH)]
    PROCEDURE SalesOrderEmailConfirmationEnabledArchiveSetup@71();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Email Confirmation]
      // [SCENARIO 379837] Sales Order's Number of Archived Version = 1 after "Email Confirmation" and "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      // [GIVEN] Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Run "Email Confirmation" action
      RunOrderConfirmationReport(SalesHeader."No.",TRUE,FALSE);

      // [THEN] Sales Order's "Number of Archived Version" = 1
      VerifyNoOfSalesArchivedDocs(SalesHeader,1);
    END;

    [Test]
    [HandlerFunctions(SalesQuote_RH,ConfirmHandlerNo)]
    PROCEDURE SalesQuoteEmailDisabledArchiveSetup@20();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Quote] [Email]
      // [SCENARIO 379837] Sales Quote's Number of Archived Version = 0 after "Email" and "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = FALSE
      LibrarySales.SetArchiveQuotesandOrders(FALSE);
      // [GIVEN] Sales Quote
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // [WHEN] Run "Email" action
      RunSalesQuoteReport(SalesHeader."No.",TRUE,FALSE);

      // [THEN] Sales Quote's "Number of Archived Version" = 0
      VerifyNoOfSalesArchivedDocs(SalesHeader,0);
    END;

    [Test]
    [HandlerFunctions(SalesQuote_RH,ConfirmHandlerNo)]
    PROCEDURE SalesQuoteEmailEnabledArchiveSetup@18();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Quote] [Email]
      // [SCENARIO 379837] Sales Quote's Number of Archived Version = 1 after "Email" and "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      Initialize;

      // [GIVEN] "Sales & Receivables Setup"."Archive Quotes and Orders" = TRUE
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      // [GIVEN] Sales Quote
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // [WHEN] Run "Email" action
      RunSalesQuoteReport(SalesHeader."No.",TRUE,FALSE);

      // [THEN] Sales Quote's "Number of Archived Version" = 1
      VerifyNoOfSalesArchivedDocs(SalesHeader,1);
    END;

    [Test]
    [HandlerFunctions(Users_MPH)]
    PROCEDURE LookupArchivedByFieldInSalesHeaderArchiveTable@28();
    VAR
      SalesHeaderArchive@1000 : Record 5107;
      SalesOrderArchives@1001 : TestPage 9349;
    BEGIN
      // [FEATURE] [Sales] [User] [UI] [UT]
      // [SCENARIO 380666] Table "Sales Header Archive" field "Archived By" lookup opens "Users" page
      Initialize;

      // [GIVEN] Archived Sales Order
      MockSalesHeaderArchive(SalesHeaderArchive);
      SalesOrderArchives.OPENVIEW;
      SalesOrderArchives.GOTORECORD(SalesHeaderArchive);

      // [WHEN] Lookup field "Archived By"
      SalesOrderArchives."Archived By".LOOKUP;

      // [THEN] "Users" page is opened
      // Users_MPH handler is called
      SalesOrderArchives.CLOSE;
    END;

    [Test]
    [HandlerFunctions(Users_MPH)]
    PROCEDURE LookupArchivedByFieldInPurchaseHeaderArchiveTable@47();
    VAR
      PurchaseHeaderArchive@1000 : Record 5109;
      PurchaseOrderArchives@1001 : TestPage 9347;
    BEGIN
      // [FEATURE] [Purchase] [User] [UI] [UT]
      // [SCENARIO 380666] Table "Purchase Header Archive" field "Archived By" lookup opens "Users" page
      Initialize;

      // [GIVEN] Archived Purchase Order
      MockPurchaseHeaderArchive(PurchaseHeaderArchive);
      PurchaseOrderArchives.OPENVIEW;
      PurchaseOrderArchives.GOTORECORD(PurchaseHeaderArchive);

      // [WHEN] Lookup field "Archived By"
      PurchaseOrderArchives."Archived By".LOOKUP;

      // [THEN] "Users" page is opened
      // Users_MPH handler is called
      PurchaseOrderArchives.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(DocumentNo);
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE VerifyArchivedPurchRetOrder@5(VAR TempPurchaseLine@1003 : TEMPORARY Record 39;PurchaseHeader@1000 : Record 38;VersionNo@1004 : Integer);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
      PurchaseLineArchive@1002 : Record 5110;
    BEGIN
      // Verify archived Header.
      PurchaseHeaderArchive.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",1,VersionNo);
      PurchaseHeaderArchive.TESTFIELD("Archived By",USERID);
      PurchaseHeaderArchive.TESTFIELD("Date Archived",WORKDATE);

      // Get actual archived lines.
      PurchaseLineArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLineArchive.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLineArchive.SETRANGE("Version No.",VersionNo);
      PurchaseLineArchive.SETRANGE("Doc. No. Occurrence",1);
      PurchaseLineArchive.FINDSET;

      // Verify archived lines.
      TempPurchaseLine.FINDSET;
      REPEAT
        TempPurchaseLine.SETRANGE("Document Type",PurchaseLineArchive."Document Type");
        TempPurchaseLine.SETRANGE("Document No.",PurchaseLineArchive."Document No.");
        TempPurchaseLine.SETRANGE(Type,PurchaseLineArchive.Type);
        TempPurchaseLine.SETRANGE("No.",PurchaseLineArchive."No.");
        TempPurchaseLine.SETRANGE(Quantity,PurchaseLineArchive.Quantity);
        TempPurchaseLine.SETRANGE("Unit of Measure",PurchaseLineArchive."Unit of Measure");
        TempPurchaseLine.SETRANGE(Amount,PurchaseLineArchive.Amount);
        Assert.AreEqual(1,TempPurchaseLine.COUNT,'Archive line mismatch for line ' + FORMAT(TempPurchaseLine."Line No."));
        TempPurchaseLine.FINDFIRST;
        TempPurchaseLine.DELETE(TRUE);
      UNTIL PurchaseLineArchive.NEXT = 0;

      // Verify there are no un-archived lines.
      TempPurchaseLine.RESET;
      Assert.AreEqual(0,TempPurchaseLine.COUNT,'Remaining un-archived lines.');
    END;

    LOCAL PROCEDURE CreatePurchLines@7(VAR TempPurchaseLine@1001 : TEMPORARY Record 39;PurchaseHeader@1000 : Record 38;NoOfLines@1002 : Integer);
    VAR
      Item@1004 : Record 27;
      PurchaseLine@1005 : Record 39;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO NoOfLines DO BEGIN
        LibraryInventory.CreateItem(Item);
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
        TempPurchaseLine := PurchaseLine;
        TempPurchaseLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateSalesDocument@2(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1002 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(100,1000,2));
      SalesLine.VALIDATE("Line Discount %",LibraryRandom.RandIntInRange(10,50));
      SalesLine.VALIDATE("Unit Cost (LCY)",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockSalesHeaderArchive@30(VAR SalesHeaderArchive@1000 : Record 5107);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeaderArchive.INIT;
      SalesHeaderArchive."Document Type" := SalesHeaderArchive."Document Type"::Order;
      SalesHeaderArchive."No." := LibraryUtility.GenerateRandomCode(SalesHeader.FIELDNO("No."),DATABASE::"Sales Header");
      SalesHeaderArchive.INSERT(TRUE);
    END;

    LOCAL PROCEDURE MockPurchaseHeaderArchive@48(VAR PurchaseHeaderArchive@1000 : Record 5109);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeaderArchive.INIT;
      PurchaseHeaderArchive."Document Type" := PurchaseHeaderArchive."Document Type"::Order;
      PurchaseHeaderArchive."No." := LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("No."),DATABASE::"Purchase Header");
      PurchaseHeaderArchive.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetSalesHeaderArchivedVersion@13(VAR SalesHeaderArchive@1000 : Record 5107;SalesHeader@1001 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        CALCFIELDS("No. of Archived Versions");
        SalesHeaderArchive.GET("Document Type","No.","Doc. No. Occurrence","No. of Archived Versions");
      END;
    END;

    LOCAL PROCEDURE SaveArchivedPurchQuote@25(VAR PurchaseHeaderArchive@1006 : Record 5109);
    VAR
      ArchivedPurchaseQuote@1000 : Report 415;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(ArchivedPurchaseQuote);
      PurchaseHeaderArchive.SETRECFILTER;
      ArchivedPurchaseQuote.SETTABLEVIEW(PurchaseHeaderArchive);
      ArchivedPurchaseQuote.RUN;
    END;

    LOCAL PROCEDURE SaveArchivedPurchOrder@27(VAR PurchaseHeaderArchive@1006 : Record 5109);
    VAR
      ArchivedPurchaseOrder@1000 : Report 416;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(ArchivedPurchaseOrder);
      PurchaseHeaderArchive.SETRECFILTER;
      ArchivedPurchaseOrder.SETTABLEVIEW(PurchaseHeaderArchive);
      ArchivedPurchaseOrder.RUN;
    END;

    LOCAL PROCEDURE SaveArchivedPurchReturnOrder@10(VAR PurchaseHeaderArchive@1006 : Record 5109);
    VAR
      ArchPurchReturnOrder@1000 : Report 417;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(ArchPurchReturnOrder);
      PurchaseHeaderArchive.SETRECFILTER;
      ArchPurchReturnOrder.SETTABLEVIEW(PurchaseHeaderArchive);
      ArchPurchReturnOrder.RUN;
    END;

    LOCAL PROCEDURE RunOrderConfirmationReport@41(DocumentNo@1001 : Code[20];Archive@1003 : Boolean;UseRequestPage@1000 : Boolean);
    VAR
      SalesHeader@1002 : Record 36;
      OrderConfirmation@1004 : Report 205;
    BEGIN
      SalesHeader.SETRANGE("No.",DocumentNo);
      LibraryVariableStorage.Enqueue(Archive);
      COMMIT;
      OrderConfirmation.SETTABLEVIEW(SalesHeader);
      OrderConfirmation.USEREQUESTPAGE(UseRequestPage);
      OrderConfirmation.RUNMODAL;
    END;

    LOCAL PROCEDURE RunSalesQuoteReport@17(DocumentNo@1001 : Code[20];Archive@1003 : Boolean;UseRequestPage@1000 : Boolean);
    VAR
      SalesHeader@1002 : Record 36;
      SalesQuote@1004 : Report 204;
    BEGIN
      SalesHeader.SETRANGE("No.",DocumentNo);
      LibraryVariableStorage.Enqueue(Archive);
      COMMIT;
      SalesQuote.SETTABLEVIEW(SalesHeader);
      SalesQuote.USEREQUESTPAGE(UseRequestPage);
      SalesQuote.RUNMODAL;
    END;

    LOCAL PROCEDURE VerifyNoOfSalesArchivedDocs@12(SalesHeader@1000 : Record 36;ExpectedCount@1001 : Integer);
    BEGIN
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      Assert.AreEqual(ExpectedCount,SalesHeader."No. of Archived Versions",NoOfArchivedDocErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@22(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerArchive@1(Message@1000 : Text[1024]);
    BEGIN
      Assert.AreEqual(STRSUBSTNO(ArchiveDocMsg,DocumentNo),Message,'Wrong archiving message.');
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@23(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchArchivedReturnOrder@77(VAR ArchPurchReturnOrder@1001 : TestRequestPage 417);
    BEGIN
      ArchPurchReturnOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchArchivedOrder@19(VAR ArchivedPurchaseOrder@1001 : TestRequestPage 416);
    BEGIN
      ArchivedPurchaseOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchArchivedQuote@24(VAR ArchivedPurchaseQuote@1001 : TestRequestPage 415);
    BEGIN
      ArchivedPurchaseQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE OrderConfirmation_RPH@38(VAR OrderConfirmation@1000 : TestRequestPage 205);
    BEGIN
      OrderConfirmation.ArchiveDocument.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      OrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ReportHandler]
    PROCEDURE OrderConfirmation_RH@14(VAR OrderConfirmation@1000 : Report 205);
    BEGIN
      OrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName);
    END;

    [ReportHandler]
    PROCEDURE SalesQuote_RH@21(VAR SalesQuote@1000 : Report 204);
    BEGIN
      SalesQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName);
    END;

    [ModalPageHandler]
    PROCEDURE Users_MPH@42(VAR Users@1000 : TestPage 9800);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Archive]
      Test Case 141534: Archive Document functionality in Purchase Return Orders.
      - archive Purchase Return Order
      - archive repeatedly the same document
    }
    END.
  }
}

