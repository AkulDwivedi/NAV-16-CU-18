OBJECT Codeunit 136211 Marketing Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1006 : Codeunit 130509;
      LibraryService@1003 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryMarketing@1004 : Codeunit 131900;
      LibraryVariableStorage@1005 : Codeunit 131004;
      IsInitialized@1000 : Boolean;
      No@1001 : Code[20];
      SalesCycleCode@1017 : Code[10];
      CurrentSalesCycleStage@1018 : Integer;
      EstimatedValue@1020 : Decimal;

    LOCAL PROCEDURE Initialize@6();
    BEGIN
      InitGlobalVariables;
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithSalesperson@127();
    VAR
      SalespersonPurchaser@1002 : Record 13;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1001 : TestPage 5099;
      TableOption@1000 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson after creation of To-do for Salesperson.

      // 1. Setup: Create Salesperson and To-do for Salesperson.
      Initialize;
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      COMMIT;

      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Salesperson and Salesperson filter.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Salesperson);
      ToDos.FilterSalesPerson.SETVALUE(SalespersonPurchaser.Code);
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Salesperson filter on To-dos page.
      ToDos.FilterSalesPerson.SETVALUE('');
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithTeam@4();
    VAR
      Team@1000 : Record 5083;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1005 : TestPage 5099;
      TableOption@1006 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Team after creation of To-do for Team.

      // 1. Setup: Create Team and To-do for Team.
      Initialize;
      LibraryMarketing.CreateTeam(Team);
      COMMIT;

      ToDo.SETRANGE("Team Code",Team.Code);
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Team and Team filter.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Team);
      ToDos.FilterTeam.SETVALUE(Team.Code);
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Team filter on To-dos page.
      ToDos.FilterTeam.SETVALUE('');
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithCampaign@27();
    VAR
      SalespersonPurchaser@1002 : Record 13;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1001 : TestPage 5099;
      CampaignNo@1008 : Code[20];
      TableOption@1000 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Campaign after creation of To-do for Campaign.

      // 1. Setup: Create Salesperson, Campaign with Salesperson Code and To-do for Campaign.
      Initialize;
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      CampaignNo := CreateCampaign(SalespersonPurchaser.Code);
      COMMIT;

      ToDo.SETRANGE("Campaign No.",CampaignNo);
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Campaign and Campaign filter.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Campaign);
      ToDos.FilterCampaign.SETVALUE(CampaignNo);
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Campaign filter on To-dos page.
      ToDos.FilterCampaign.SETVALUE('');
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithContact@46();
    VAR
      Contact@1008 : Record 5050;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1005 : TestPage 5099;
      TableOption@1006 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Contact after creation of To-do for Contact.

      // 1. Setup: Create Contact and To-do for Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      COMMIT;

      ToDo.SETRANGE("Contact No.",Contact."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Contact and Contact filter.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Contact);
      ToDos.FilterContact.SETVALUE(Contact."No.");
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Contact filter on To-dos page.
      ToDos.FilterContact.SETVALUE('');
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithStatusNotStarted@77();
    VAR
      SalespersonPurchaser@1002 : Record 13;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1005 : TestPage 5099;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
      TableOption@1000 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson and Status Filter Not Started after creation of To-do for Salesperson.

      // 1. Setup: Create Salesperson and To-do for Salesperson.
      Initialize;
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      COMMIT;

      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Salesperson, Salesperson filter and Status filter as
      // Not Started.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Salesperson);
      ToDos.FilterSalesPerson.SETVALUE(SalespersonPurchaser.Code);
      ToDos.StatusFilter.SETVALUE(StatusFilter::"Not Started");
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Salesperson and Status filter on To-dos page.
      ToDos.FilterSalesPerson.SETVALUE('');
      ToDos.StatusFilter.SETVALUE(StatusFilter::" ");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithStatusInProgress@114();
    VAR
      ToDo@1003 : Record 5080;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson and Status Filter In Progress after creation of To-do for Salesperson.

      ToDoWithStatus(ToDo.Status::"In Progress",StatusFilter::"In Progress");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithStatusWaiting@115();
    VAR
      ToDo@1003 : Record 5080;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson and Status Filter Waiting after creation of To-do for Salesperson.

      ToDoWithStatus(ToDo.Status::Waiting,StatusFilter::Waiting);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithStatusPostponed@116();
    VAR
      ToDo@1003 : Record 5080;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson and Status Filter Postponed after creation of To-do for Salesperson.

      ToDoWithStatus(ToDo.Status::Postponed,StatusFilter::Postponed);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithoutValue)]
    PROCEDURE ToDoWithStatusCompleted@117();
    VAR
      ToDo@1003 : Record 5080;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson and Status Filter Completed after creation of To-do for Salesperson.

      ToDoWithStatus(ToDo.Status::Completed,StatusFilter::Completed);
    END;

    LOCAL PROCEDURE ToDoWithStatus@34(Status@1009 : Option;StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed');
    VAR
      SalespersonPurchaser@1002 : Record 13;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1005 : TestPage 5099;
      TableOption@1000 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // 1. Setup: Create Salesperson, To-do for Salesperson and Change the Status of to-do as per parameter.
      Initialize;
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      COMMIT;

      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      TempToDo.CreateToDoFromToDo(ToDo);
      ToDo.FINDFIRST;
      ChangeStatusOfToDo(ToDo,Status);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Salesperson, Salesperson filter and Status filter as
      // per parameter.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Salesperson);
      ToDos.FilterSalesPerson.SETVALUE(SalespersonPurchaser.Code);
      ToDos.StatusFilter.SETVALUE(StatusFilter);
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Salesperson and Status filter on To-dos page.
      ToDos.FilterSalesPerson.SETVALUE('');
      ToDos.StatusFilter.SETVALUE(StatusFilter::" ");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithValue)]
    PROCEDURE ToDoWithIncludeClosedTrue@166();
    VAR
      SalespersonPurchaser@1002 : Record 13;
      ToDo@1003 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      ToDos@1005 : TestPage 5099;
      StatusFilter@1008 : ' ,Not Started,In Progress,Completed,Waiting,Postponed';
      TableOption@1000 : 'Salesperson,Team,Campaign,Contact';
    BEGIN
      // Test To-dos matrix with Show as Lines Salesperson, Status Filter Completed and Include Closed as True after closing
      // the  created To-do for Salesperson.

      // 1. Setup: Create Salesperson, To-do for Salesperson and Change the Status of to-do to Completed.
      Initialize;
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      COMMIT;

      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      TempToDo.CreateToDoFromToDo(ToDo);
      ToDo.FINDFIRST;
      ChangeStatusOfToDo(ToDo,ToDo.Status::Completed);

      // 2. Exercise: Run Show Matrix from To-dos page with Show as Lines Salesperson, Salesperson filter, Status filter as Completed
      // and Include Closed as True.
      ToDos.OPENEDIT;
      ToDos.TableOption.SETVALUE(TableOption::Salesperson);
      ToDos.FilterSalesPerson.SETVALUE(SalespersonPurchaser.Code);
      ToDos.StatusFilter.SETVALUE(StatusFilter::Completed);
      ToDos.IncludeClosed.SETVALUE(TRUE);
      COMMIT;
      ToDos.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on To-dos Matrix performed on To-dos Matrix page handler.

      // 4. Teardown: Rollback the Salesperson, Status filter and Include Close on To-dos page.
      ToDos.FilterSalesPerson.SETVALUE('');
      ToDos.StatusFilter.SETVALUE(StatusFilter::" ");
      ToDos.IncludeClosed.SETVALUE(FALSE);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForNoOfOpportunities)]
    PROCEDURE OpportunityWithSalesperson@213();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1010 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines Salesperson after creation and updation of Opportunity for Contact with
      // Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunity for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;
      CreateAndUpdateOpportunity(ContactNo);

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson and Show as No of Opportunities.
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"No of Opportunities");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForNoOfOpportunities)]
    PROCEDURE OpportunityWithContact@29();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1010 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines Contact after creation and updation of Opportunity for Contact with Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunity for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := ContactNo;
      CreateAndUpdateOpportunity(ContactNo);

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Contact and Show as No of Opportunities.
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::Contact);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"No of Opportunities");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForNoOfOpportunities)]
    PROCEDURE OpportunityWithCampaign@56();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      Campaign@1010 : Record 5071;
      SalesCycle@1002 : Record 5090;
      TempOpportunity@1004 : TEMPORARY Record 5092;
      Opportunity@1005 : Record 5092;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines Campaign after creation and updation of Opportunity for Campaign.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Campaign, Sales Cycle, Sales Cycle Stage, Create Opportunity,
      // Update Campaign on Opportunity and Update Opportunity.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateCampaign(Campaign);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := Campaign."No.";
      Opportunity.SETRANGE("Contact No.",ContactNo);
      TempOpportunity.CreateOppFromOpp(Opportunity);
      UpdateCampaignOnOpportunity(Opportunity,Campaign."No.");
      Opportunity.UpdateOpportunity;
      COMMIT;

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Campaign and Show as No of Opportunities.
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::Campaign);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"No of Opportunities");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForOpportunityValue)]
    PROCEDURE OpportunityAsEstimatedValueLCY@70();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Show as Estimated Value (LCY) after creation and updation of
      // Opportunity for Contact with Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunity for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;
      CreateAndUpdateOpportunity(ContactNo);
      EstimatedValue := CalculateEstimatedValue(ContactNo);

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson and Show as Estimated Value (LCY).
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"Estimated Value (LCY)");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForOpportunityValue)]
    PROCEDURE OpportunityAsCurrentValueLCY@71();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Show as Calc. Current Value (LCY) after creation and updation of
      // Opportunity for Contact with Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunity for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;

      CreateAndUpdateOpportunity(ContactNo);
      EstimatedValue := CalculateCurrentValue(ContactNo);  // Assign global variable for page handler.

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson and Show as Calc. Current Value (LCY).
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"Calc. Current Value (LCY)");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForOpportunityValue)]
    PROCEDURE OpportunityAsAverageEstimated@139();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Show as Avg. Estimated Value (LCY) after creation and updation of
      // Opportunities for Contact with Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunities for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;

      CreateAndUpdateOpportunity(ContactNo);
      CreateAndUpdateOpportunity(ContactNo);

      // Assign global variable for page handler, use 2 for average value.
      EstimatedValue := CalculateEstimatedValue(ContactNo) / 2;

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson and Show as Avg. Estimated Value (LCY).
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"Avg. Estimated Value (LCY)");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,HandlerForOpportunityValue)]
    PROCEDURE OpportunityAsAverageCurrent@140();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Show as Avg. Calc. Current Value (LCY) after creation and updation of
      // Opportunities for Contact with Salesperson.

      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create and Update Opportunities for
      // Contact.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;

      CreateAndUpdateOpportunity(ContactNo);
      CreateAndUpdateOpportunity(ContactNo);

      // Assign global variable for page handler, use 2 for average value.
      EstimatedValue := CalculateCurrentValue(ContactNo) / 2;

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson and Show as Avg. Calc. Current Value (LCY).
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"Avg. Calc. Current Value (LCY)");
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,ModalPageCloseOpportunityWon,MessageHandler,HandlerForNoOfOpportunities)]
    PROCEDURE OpportunityWithActionWon@174();
    VAR
      OptionStatusFilter@1010 : 'In Progress,Won,Lost';
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Status filter as Won after closing the Opportunity as Won action.

      OpportunityWithAction(OptionStatusFilter::Won);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,ModalPageCloseOpportunityLost,HandlerForNoOfOpportunities)]
    PROCEDURE OpportunityWithActionLost@175();
    VAR
      OptionStatusFilter@1010 : 'In Progress,Won,Lost';
    BEGIN
      // Test Opportunity matrix with Show as Lines SalesPerson and Status filter as Lost after closing the Opportunity as Lost action.

      OpportunityWithAction(OptionStatusFilter::Lost);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDo,ToDosMatrixHandlerWithContactNo)]
    PROCEDURE CheckContactNumberOnTodoMatrix@1();
    VAR
      ToDo@1002 : Record 5080;
    BEGIN
      // Check Program populates Contact No. on To-do Matrix.
      Initialize;
      ToDoShowMatrix(CreateContactAndTodo(ToDo),ToDo."No.");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForToDoShowMatrix,ToDosMatrixHandlerWithContactNo)]
    PROCEDURE CheckContactNumberOnTodoMatrixwithZeroContactNo@7();
    VAR
      ToDo@1008 : Record 5080;
    BEGIN
      // Check Program Do not populates Contact No. on To-do Matrix.
      Initialize;
      ToDo.CreateToDoFromToDo(ToDo);
      ToDoShowMatrix('',ToDo."No.");
    END;

    LOCAL PROCEDURE OpportunityWithAction@135(OptionStatusFilter@1010 : 'In Progress,Won,Lost');
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1002 : Record 5090;
      Opportunity@1000 : Record 5092;
      Opportunities@1007 : TestPage 5131;
      TableOption@1008 : 'SalesPerson,Campaign,Contact';
      OutPutOption@1009 : 'No of Opportunities,Estimated Value (LCY),Calc. Current Value (LCY),Avg. Estimated Value (LCY),Avg. Calc. Current Value (LCY)';
      ContactNo@1011 : Code[20];
    BEGIN
      // 1. Setup: Create Salesperson, Contact with Salesperson, Sales Cycle, Sales Cycle Stage, Create, Update Opportunity for
      // Contact and Close the Opportunity.
      Initialize;
      CreateSalespersonWithEmail(SalespersonPurchaser);
      ContactNo := CreateContactWithSalesperson(SalespersonPurchaser.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Assign global variable for page handler.
      SalesCycleCode := SalesCycle.Code;
      CurrentSalesCycleStage := CreateSalesCycleStage(SalesCycle.Code);
      No := SalespersonPurchaser.Code;

      CreateAndUpdateOpportunity(ContactNo);
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;
      COMMIT;

      // 2. Exercise: Run Show Matrix from Opportunities page with Show as Lines Salesperson, Show as No of Opportunities and Status
      // filter as per parameter.
      Opportunities.OPENEDIT;
      Opportunities.TableOption.SETVALUE(TableOption::SalesPerson);
      Opportunities.OutPutOption.SETVALUE(OutPutOption::"No of Opportunities");
      Opportunities.OptionStatusFilter.SETVALUE(OptionStatusFilter);
      Opportunities.ShowMatrix.INVOKE;

      // 3. Verify: Verify value on Opportunities Matrix performed on Opportunities Matrix page handler.

      // 4. Teardown: Rollback the Status filter on Opportunities page.
      Opportunities.OptionStatusFilter.SETVALUE(OptionStatusFilter::"In Progress");
    END;

    LOCAL PROCEDURE CalculateCurrentValue@98(ContactNo@1000 : Code[20]) CurrentValue : Decimal;
    VAR
      OpportunityEntry@1001 : Record 5093;
    BEGIN
      OpportunityEntry.SETRANGE("Contact No.",ContactNo);
      OpportunityEntry.FINDSET;
      REPEAT
        CurrentValue += OpportunityEntry."Calcd. Current Value (LCY)";
      UNTIL OpportunityEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateEstimatedValue@62(ContactNo@1000 : Code[20]) EstimatedValue : Decimal;
    VAR
      OpportunityEntry@1001 : Record 5093;
    BEGIN
      OpportunityEntry.SETRANGE("Contact No.",ContactNo);
      OpportunityEntry.FINDSET;
      REPEAT
        EstimatedValue += OpportunityEntry."Estimated Value (LCY)";
      UNTIL OpportunityEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeStatusOfToDo@15(ToDo@1000 : Record 5080;Status@1001 : Option);
    BEGIN
      ToDo.VALIDATE(Status,Status);
      ToDo.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateOpportunity@68(ContactNo@1000 : Code[20]);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      TempOpportunity.CreateOppFromOpp(Opportunity);

      Opportunity.FINDLAST;
      Opportunity.UpdateOpportunity;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCampaign@9(SalespersonCode@1001 : Code[10]) : Code[20];
    VAR
      Campaign@1000 : Record 5071;
    BEGIN
      LibraryMarketing.CreateCampaign(Campaign);
      Campaign.VALIDATE("Salesperson Code",SalespersonCode);
      Campaign.MODIFY(TRUE);
      EXIT(Campaign."No.");
    END;

    LOCAL PROCEDURE CreateContactWithSalesperson@48(SalespersonCode@1000 : Code[10]) : Code[20];
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE("Salesperson Code",SalespersonCode);
      Contact.MODIFY(TRUE);
      EXIT(Contact."No.");
    END;

    LOCAL PROCEDURE CreateSalesCycleStage@85(SalesCycleCode@1001 : Code[10]) : Integer;
    VAR
      SalesCycleStage@1000 : Record 5091;
    BEGIN
      LibraryMarketing.CreateSalesCycleStage(SalesCycleStage,SalesCycleCode);

      // Use Random for Completed %.
      SalesCycleStage.VALIDATE("Completed %",RANDOM(99) + LibraryUtility.GenerateRandomFraction);
      SalesCycleStage.VALIDATE("Activity Code",FindActivityCode);
      SalesCycleStage.MODIFY(TRUE);
      EXIT(SalesCycleStage.Stage);
    END;

    LOCAL PROCEDURE CreateSalespersonWithEmail@47(VAR SalespersonPurchaser@1000 : Record 13);
    BEGIN
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      SalespersonPurchaser.VALIDATE(
        "E-Mail",LibraryUtility.GenerateRandomCode(SalespersonPurchaser.FIELDNO("E-Mail"),DATABASE::"Salesperson/Purchaser"));
      SalespersonPurchaser.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactAndTodo@8(VAR TempToDo@1001 : TEMPORARY Record 5080) : Code[20];
    VAR
      Contact@1000 : Record 5050;
      ToDo@1002 : Record 5080;
    BEGIN
      LibraryMarketing.CreateContact(Contact);

      ToDo.SETRANGE("Contact No.",Contact."No.");
      TempToDo.CreateToDoFromToDo(ToDo);
      EXIT(Contact."No.");
    END;

    LOCAL PROCEDURE FindActivityCode@289() : Code[10];
    VAR
      Activity@1000 : Record 5081;
    BEGIN
      LibraryMarketing.CreateActivity(Activity);
      EXIT(Activity.Code);
    END;

    LOCAL PROCEDURE FindCloseOpportunityCode@242(Type@1002 : Option) : Code[10];
    VAR
      CloseOpportunityCode@1000 : Record 5094;
    BEGIN
      LibraryMarketing.CreateCloseOpportunityCode(CloseOpportunityCode);
      CloseOpportunityCode.VALIDATE(Type,Type);
      CloseOpportunityCode.MODIFY(TRUE);
      EXIT(CloseOpportunityCode.Code);
    END;

    LOCAL PROCEDURE InitGlobalVariables@329();
    BEGIN
      SalesCycleCode := '';
      CurrentSalesCycleStage := 0;
      No := '';
      EstimatedValue := 0;
    END;

    LOCAL PROCEDURE OpportunityClose@218(VAR OpportunityEntry@1001 : Record 5093;CloseOpportunityCode@1005 : Code[10];ActionTaken@1000 : Option);
    BEGIN
      OpportunityEntry.VALIDATE("Action Taken",ActionTaken);
      OpportunityEntry.CheckStatus;
      OpportunityEntry.PerformNextWizardStatus;
      OpportunityEntry.VALIDATE("Close Opportunity Code",CloseOpportunityCode);

      // Use Random for Calcd. Current Value (LCY).
      OpportunityEntry.VALIDATE("Calcd. Current Value (LCY)",RANDOM(1000) + LibraryUtility.GenerateRandomFraction);
      OpportunityEntry.CheckStatus;
      OpportunityEntry.FinishWizard;
    END;

    LOCAL PROCEDURE OpenShowMatrixToDo@14(FilterContactNo@1004 : Code[20]);
    VAR
      ToDos@1002 : TestPage 5099;
      OutputOption@1001 : 'No. of To-dos,Contact No.';
      PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      COMMIT;
      ToDos.OPENEDIT;
      ToDos.OutputOption.SETVALUE(OutputOption::"Contact No.");
      ToDos.PeriodType.SETVALUE(PeriodType::Day);
      ToDos.FilterContact.SETVALUE(FilterContactNo);
      ToDos.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE ToDoShowMatrix@13(ContactNoOnMatrix@1000 : Code[20];ToDoNo@1001 : Code[20]);
    BEGIN
      // Setup: Create Contact and To-do.
      LibraryVariableStorage.Enqueue(ContactNoOnMatrix);
      LibraryVariableStorage.Enqueue(ToDoNo);

      // Exercise: Open ToDo Show Matrix.
      OpenShowMatrixToDo(ContactNoOnMatrix);

      // Verify: Verify value on ToDosMatrixHandlerWithContactNo.
    END;

    LOCAL PROCEDURE UpdateCampaignOnOpportunity@25(VAR Opportunity@1001 : Record 5092;CampaignNo@1000 : Code[20]);
    BEGIN
      Opportunity.FINDFIRST;
      Opportunity.VALIDATE("Campaign No.",CampaignNo);
      Opportunity.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE HandlerForNoOfOpportunities@339(VAR OpportunitiesMatrix@1000 : TestPage 9257);
    BEGIN
      OpportunitiesMatrix.FINDFIRSTFIELD("No.",No);
      OpportunitiesMatrix.Field1.ASSERTEQUALS(1);
    END;

    [ModalPageHandler]
    PROCEDURE HandlerForOpportunityValue@92(VAR OpportunitiesMatrix@1000 : TestPage 9257);
    BEGIN
      OpportunitiesMatrix.FINDFIRSTFIELD("No.",No);
      OpportunitiesMatrix.Field1.ASSERTEQUALS(EstimatedValue);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@199(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageCloseOpportunityLost@162(VAR CloseOpportunity@1000 : Page 5128;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1003 : TEMPORARY Record 5093;
      CloseOpportunityCode@1004 : Record 5094;
      ActionTaken@1002 : ' ,Next,Previous,Updated,Jumped,Won,Lost';
    BEGIN
      TempOpportunityEntry.INIT;
      CloseOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      OpportunityClose(TempOpportunityEntry,FindCloseOpportunityCode(CloseOpportunityCode.Type::Lost),ActionTaken::Lost);
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageCloseOpportunityWon@5(VAR CloseOpportunity@1000 : Page 5128;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1003 : TEMPORARY Record 5093;
      CloseOpportunityCode@1004 : Record 5094;
      ActionTaken@1002 : ' ,Next,Previous,Updated,Jumped,Won,Lost';
    BEGIN
      TempOpportunityEntry.INIT;
      CloseOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      OpportunityClose(TempOpportunityEntry,FindCloseOpportunityCode(CloseOpportunityCode.Type::Won),ActionTaken::Won);
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerForToDo@64(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(
        Description,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(TempToDo.FIELDNO(Description),DATABASE::"To-do"),
          1,LibraryUtility.GetFieldLength(DATABASE::"To-do",TempToDo.FIELDNO(Description))));
      TempToDo.VALIDATE(Date,WORKDATE);

      TempToDo.MODIFY;
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;

      TempToDo.MODIFY;
      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerOpportunity@267(VAR CreateOpportunity@1000 : Page 5126;VAR Response@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      TempOpportunity.INIT;
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;
      TempOpportunity.VALIDATE(Description,TempOpportunity."Contact No.");
      TempOpportunity.MODIFY;
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;
      TempOpportunity.VALIDATE("Sales Cycle Code",SalesCycleCode);

      TempOpportunity.CheckStatus;
      TempOpportunity.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerForToDoShowMatrix@3(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(
        Description,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(TempToDo.FIELDNO(Description),DATABASE::"To-do"),
          1,LibraryUtility.GetFieldLength(DATABASE::"To-do",TempToDo.FIELDNO(Description))));
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.MODIFY;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerUpdateOpportunity@2(VAR UpdateOpportunity@1000 : Page 5129;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      TempOpportunityEntry.INIT;
      UpdateOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.CreateStageList;
      TempOpportunityEntry.VALIDATE("Action Type",TempOpportunityEntry."Action Type"::First);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      TempOpportunityEntry.VALIDATE("Sales Cycle Stage",CurrentSalesCycleStage);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      // Use Random for Estimated Value (LCY) and Chances of Success %.
      TempOpportunityEntry.VALIDATE("Estimated Value (LCY)",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      TempOpportunityEntry.VALIDATE("Chances of Success %",RANDOM(99) + LibraryUtility.GenerateRandomFraction);
      TempOpportunityEntry.VALIDATE("Estimated Close Date",WORKDATE);
      TempOpportunityEntry.MODIFY;

      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.FinishWizard2;
    END;

    [ModalPageHandler]
    PROCEDURE ToDosMatrixHandlerWithContactNo@11(VAR TodosMatrix@1000 : TestPage 9255);
    VAR
      ContactNo@1001 : Variant;
      ToDoNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ContactNo);
      LibraryVariableStorage.Dequeue(ToDoNo);
      TodosMatrix.FILTER.SETFILTER("No.",ToDoNo);
      TodosMatrix.Field1.ASSERTEQUALS(ContactNo);
    END;

    [ModalPageHandler]
    PROCEDURE ToDosMatrixHandlerWithoutValue@167(VAR ToDosMatrix@1000 : TestPage 9255);
    BEGIN
      ToDosMatrix.Field1.ASSERTEQUALS('');
    END;

    [ModalPageHandler]
    PROCEDURE ToDosMatrixHandlerWithValue@113(VAR ToDosMatrix@1000 : TestPage 9255);
    BEGIN
      ToDosMatrix.Field1.ASSERTEQUALS(1);
    END;

    BEGIN
    {
      // [FEATURE] [Marketing]
      Test for Marketing Matrix Management:
        1. Test To-dos matrix with Show as Lines Salesperson after creation of To-do for Salesperson.
        2. Test To-dos matrix with Show as Lines Team after creation of To-do for Team.
        3. Test To-dos matrix with Show as Lines Campaign after creation of To-do for Campaign.
        4. Test To-dos matrix with Show as Lines Contact after creation of To-do for Contact.
        5. Test To-dos matrix with Show as Lines Salesperson and Status Filter Not Started after creation of To-do for Salesperson.
        6. Test To-dos matrix with Show as Lines Salesperson and Status Filter In Progress after creation of To-do for Salesperson.
        7. Test To-dos matrix with Show as Lines Salesperson and Status Filter Waiting after creation of To-do for Salesperson.
        8. Test To-dos matrix with Show as Lines Salesperson and Status Filter Postponed after creation of To-do for Salesperson.
        9. Test To-dos matrix with Show as Lines Salesperson and Status Filter Completed after creation of To-do for Salesperson.
       10. Test To-dos matrix with Show as Lines Salesperson, Status Filter Completed and Include Closed as True after closing
           the created To-do for Salesperson.
       11. Test Opportunity matrix with Show as Lines Salesperson after creation and updation of Opportunity for Contact with Salesperson.
       12. Test Opportunity matrix with Show as Lines Contact after creation and updation of Opportunity for Contact with Salesperson.
       13. Test Opportunity matrix with Show as Lines Campaign after creation and updation of Opportunity for Campaign.
       14. Test Opportunity matrix with Show as Lines SalesPerson and Show as Estimated Value (LCY) after creation and updation of
           Opportunity for Contact with Salesperson.
       15. Test Opportunity matrix with Show as Lines SalesPerson and Show as Calc. Current Value (LCY) after creation and updation of
           Opportunity for Contact with Salesperson.
       16. Test Opportunity matrix with Show as Lines SalesPerson and Show as Avg. Estimated Value (LCY) after creation and updation of
           Opportunities for Contact with Salesperson.
       17. Test Opportunity matrix with Show as Lines SalesPerson and Show as Avg. Calc. Current Value (LCY) after creation and updation
           of Opportunities for Contact with Salesperson.
       18. Test Opportunity matrix with Show as Lines SalesPerson and Status filter as Won after closing the Opportunity as Won action.
       19. Test Opportunity matrix with Show as Lines SalesPerson and Status filter as Lost after closing the Opportunity as Lost action.
       20. Check Program populates Contact No. on To-do Matrix Page.
       21. Check Program Do not populates Contact No. on To-do Matrix Page.

      TFS_TS_ID = 229943
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      ToDoWithSalesperson, ToDoWithTeam, ToDoWithCampaign, ToDoWithContact, ToDoWithStatusNotStarted, ToDoWithStatusInProgress    128879
      ToDoWithStatusWaiting, ToDoWithStatusPostponed, ToDoWithStatusCompleted, ToDoWithIncludeClosedTrue                          128879
      OpportunityWithSalesperson, OpportunityWithContact, OpportunityWithCampaign, OpportunityAsEstimatedValueLCY                 128880
      OpportunityAsCurrentValueLCY, OpportunityAsAverageEstimated, OpportunityAsAverageCurrent, OpportunityWithActionWon          128880
      OpportunityWithActionLost

                                                                                                                                                                                                         128880
      Bug_ID = 315849
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------------------------------------------------------
      CheckContactNumberOnTodoMatrix, CheckContactNumberOnTodoMatrixwithZeroContactNo
    }
    END.
  }
}

