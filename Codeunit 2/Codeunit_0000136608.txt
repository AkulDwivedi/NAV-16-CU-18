OBJECT Codeunit 136608 ERM RS Validate and Apply
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRapidStart@1000 : Codeunit 131903;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryERM@1008 : Codeunit 131300;
      LibrarySales@1003 : Codeunit 130509;
      LibraryUtility@1013 : Codeunit 131000;
      LibraryPurchase@1024 : Codeunit 130512;
      Assert@1004 : Codeunit 130000;
      isInitialized@1002 : Boolean;
      MigrationError@1006 : TextConst 'ENU=There are errors in Migration Data Error.';
      NoMigrationError@1005 : TextConst 'ENU=There must be errors in Migration Data Error.';
      NoDataInTableAferApply@1007 : TextConst 'ENU=There is no data in table after apply procedure.';
      MoreThanOneRecordInserted@1010 : TextConst 'ENU=More than one record inserted after apply.';
      NonPKDataWasNotInserted@1011 : TextConst 'ENU=Non PK Data was not inserted.';
      SeriesNoNotAssigned@1012 : TextConst 'ENU=Series No not assigned to PK field.';
      DataWasNotOverwritten@1014 : TextConst 'ENU=Data was not overwritten after apply on existing data.';
      TableFilterApplyErr@1015 : TextConst 'ENU="Application must not change error state outside selection. "';
      TableMustNotBeAppliedErr@1016 : TextConst 'ENU=Table %1 must not be applied.';
      TableMustBeAppliedErr@1017 : TextConst 'ENU=Table %1 must be applied.';
      RecordInsertErr@1018 : TextConst 'ENU="Record must not be inserted if it have error in primary key, error must be in migration data error. "';
      BadModelTableErr@1019 : TextConst 'ENU=Table must allow to insert records without errors.';
      TestCustomerNameTxt@1020 : TextConst 'ENU=Mister James';
      TransformedTestCustomerNameTxt@1021 : TextConst 'ENU=Mr. James';
      TestBankAccountIBANCodeTxt@1022 : TextConst 'ENU=00321 33213 32131';
      TransformedTestBankAccountIBANCodeTxt@1023 : TextConst 'ENU=003213321332131';

    [Test]
    PROCEDURE PackageDataValidation_ValidateRecordWithWrongRelation_PackageErrorGenerated@49();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1001 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateRecordWithCorrectRelation_NoPackageError@70();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1004 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        FALSE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyRecordWithWrongRelation_PackageErrorGenerated@20();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1002 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyRecordWithCorrectRelation_DataInTable@19();
    VAR
      ConfigPackage@1002 : Record 8623;
      PrimaryConfigPackageTable@1001 : Record 8613;
      RelatedConfigPackageTable@1000 : Record 8613;
      GenJournalBatch@1003 : Record 232;
      KeyValueWithRelation@1004 : Code[10];
      KeyValueWithoutRelation@1005 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithPKRelation(
        ConfigPackage,
        PrimaryConfigPackageTable,
        RelatedConfigPackageTable,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        FALSE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      GetKeyValuesWithRelation(RelatedConfigPackageTable,KeyValueWithRelation,KeyValueWithoutRelation);

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(GenJournalBatch.GET(KeyValueWithRelation,KeyValueWithoutRelation),NoDataInTableAferApply);
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_RecordWithWrongRelationInPK_RecordNotInserted@43();
    VAR
      ConfigPackage@1002 : Record 8623;
      ConfigPackageError@1001 : Record 8617;
      NoSeriesLine@1000 : Record 309;
      KeyValueWithRelation@1004 : Code[10];
    BEGIN
      // To check that record not inserted if it has error in PK
      Initialize;

      // Prerequisite: Test requires that table do not generates error on insert
      KeyValueWithRelation := CreateAndApplyPackageDataForTableWithoutPKCheckOnInsert(ConfigPackage,FALSE);
      Assert.IsTrue(ConfigPackageError.ISEMPTY AND NoSeriesLine.GET(KeyValueWithRelation,0),BadModelTableErr);
      Cleanup(ConfigPackage.Code);
      CLEAR(ConfigPackage);

      // Verification
      KeyValueWithRelation := CreateAndApplyPackageDataForTableWithoutPKCheckOnInsert(ConfigPackage,TRUE);
      Assert.IsFalse(ConfigPackageError.ISEMPTY OR NoSeriesLine.GET(KeyValueWithRelation,0),RecordInsertErr);
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateMultipleRecordsWithWrongRecordProcessingOrder_PackageErrorGenerated@1();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1002 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        1,// Primary priority
        0); // Related table priority

      ValidatePackageAndSetupProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateMultipleRecordsWithWrongRecordProcessingOrderWithSetProcessingOrder_NoPackageError@10();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1002 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        1,// Primary priority
        0); // Related table priority

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateMultipleRecordsWithCorrectRecordProcessingOrder_NoPackageError@2();
    VAR
      ConfigPackageError@1002 : Record 8617;
      ConfigPackage@1005 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        1); // Related table priority

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyMultipleRecordsWithWrongRecordProcessingOrder_PackageErrorGenerated@5();
    VAR
      ConfigPackageError@1008 : Record 8617;
      ConfigPackage@1004 : Record 8623;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        1,// Primary priority
        0); // Related table priority

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyMultipleRecordsWithWrongRecordProcessingOrderWithSetProcessingOrder_DataInTables@9();
    VAR
      ConfigPackage@1004 : Record 8623;
      PrimaryConfigPackageTable@1003 : Record 8613;
      RelatedConfigPackageTable@1002 : Record 8613;
      GenJournalBatch@1005 : Record 232;
      KeyValueWithRelation@1001 : Code[10];
      KeyValueWithoutRelation@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithPKRelation(
        ConfigPackage,
        PrimaryConfigPackageTable,
        RelatedConfigPackageTable,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        1,// Primary priority
        0); // Related table priority

      GetKeyValuesWithRelation(RelatedConfigPackageTable,KeyValueWithRelation,KeyValueWithoutRelation);

      ApplyPackageAndSetupProcessingOrder(ConfigPackage);

      Assert.IsTrue(GenJournalBatch.GET(KeyValueWithRelation,KeyValueWithoutRelation),NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyMultipleRecordsWithCorrectRecordProcessingOrder_DataInTable@3();
    VAR
      ConfigPackage@1006 : Record 8623;
      PrimaryConfigPackageTable@1005 : Record 8613;
      RelatedConfigPackageTable@1004 : Record 8613;
      GenJournalBatch@1007 : Record 232;
      KeyValueWithRelation@1001 : Code[10];
      KeyValueWithoutRelation@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithPKRelation(
        ConfigPackage,
        PrimaryConfigPackageTable,
        RelatedConfigPackageTable,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        1); // Related table priority

      GetKeyValuesWithRelation(RelatedConfigPackageTable,KeyValueWithRelation,KeyValueWithoutRelation);

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(GenJournalBatch.GET(KeyValueWithRelation,KeyValueWithoutRelation),NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateRecordsWithoutRelations_NoPackageError@6();
    VAR
      ConfigPackageError@1009 : Record 8617;
      ConfigPackage@1005 : Record 8623;
      GenJournalTemplateName@1001 : Code[10];
      ItemJournalTemplateName@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithoutRelation(ConfigPackage,GenJournalTemplateName,ItemJournalTemplateName);

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateRecordsWithRelationsInNonPKFieldsAndWrongProcessingOrder_NoPackageError@7();
    VAR
      ConfigPackageError@1009 : Record 8617;
      ConfigPackage@1008 : Record 8623;
      GenJournalTemplateName@1001 : Code[10];
      ReasonCodeCode@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithNonPKRelation(ConfigPackage,1,0,GenJournalTemplateName,ReasonCodeCode);

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataValidation_ValidateRecordsWithRelationsInNonPKFieldsAndCorrectProcessingOrder_NoPackageError@8();
    VAR
      ConfigPackageError@1003 : Record 8617;
      ConfigPackage@1002 : Record 8623;
      GenJournalTemplateName@1005 : Code[10];
      ReasonCodeCode@1004 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithNonPKRelation(ConfigPackage,0,1,GenJournalTemplateName,ReasonCodeCode);

      ValidatePackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyRecordsWithoutRelations_DataInTables@40();
    VAR
      ConfigPackage@1005 : Record 8623;
      ItemJournalTemplate@1003 : Record 82;
      GenJournalTemplate@1002 : Record 80;
      GenJournalTemplateName@1001 : Code[10];
      ItemJournalTemplateName@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithoutRelation(ConfigPackage,GenJournalTemplateName,ItemJournalTemplateName);

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(
        ItemJournalTemplate.GET(ItemJournalTemplateName) AND GenJournalTemplate.GET(GenJournalTemplateName),NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyRecordsWithRelationsInNonPKFieldsAndWrongProcessingOrder_DataInTables@39();
    VAR
      ConfigPackage@1008 : Record 8623;
      ReasonCode@1005 : Record 231;
      GenJournalTemplate@1004 : Record 80;
      GenJournalTemplateName@1001 : Code[10];
      ReasonCodeCode@1000 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithNonPKRelation(ConfigPackage,1,0,GenJournalTemplateName,ReasonCodeCode);

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(
        GenJournalTemplate.GET(GenJournalTemplateName) AND ReasonCode.GET(ReasonCodeCode),NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyRecordsWithRelationsInNonPKFieldsAndCorrectProcessingOrder_DataInTables@38();
    VAR
      ConfigPackage@1002 : Record 8623;
      ReasonCode@1007 : Record 231;
      GenJournalTemplate@1006 : Record 80;
      GenJournalTemplateName@1005 : Code[10];
      ReasonCodeCode@1004 : Code[10];
    BEGIN
      Initialize;

      CreatePackageDataPairWithNonPKRelation(ConfigPackage,0,1,GenJournalTemplateName,ReasonCodeCode);

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);

      Assert.IsTrue(
        GenJournalTemplate.GET(GenJournalTemplateName) AND ReasonCode.GET(ReasonCodeCode),NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE ApplyTableWithSeriesNo_ApplyRecordWithFilledPK_OneRecordInserted@11();
    BEGIN
      GeneralTestcaseForApplyingRecordWithSeries(FALSE);
    END;

    [Test]
    PROCEDURE ApplyTableWithSeriesNo_ApplyRecordWithBlankPK_OneRecordInserted@26();
    BEGIN
      GeneralTestcaseForApplyingRecordWithSeries(TRUE);
    END;

    [Test]
    PROCEDURE ApplyTableWithSeriesNo_ApplyRecordWithBlankPK_NonPKDataInsertedAswell@22();
    VAR
      ConfigPackage@1001 : Record 8623;
      Customer@1003 : Record 18;
      CustomerName@1002 : Text[50];
    BEGIN
      Initialize;

      GeneratePackageForTableWithSeriesNo(ConfigPackage,CustomerName,TRUE);

      ApplyPackageAndSetupProcessingOrder(ConfigPackage);

      Customer.SETRANGE(Name,CustomerName); // Customer name is equal to PK, so no falsepositive here
      Assert.IsTrue(Customer.FINDFIRST,NonPKDataWasNotInserted);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE ApplyTableWithSeriesNo_ApplyRecordWithBlankPK_SeriesNoAssignedForPK@21();
    VAR
      ConfigPackage@1001 : Record 8623;
      Customer@1003 : Record 18;
      SalesSetup@1000 : Record 311;
      NoSeriesLine@1006 : Record 309;
      NoSeriesManagement@1007 : Codeunit 396;
      CustomerName@1002 : Text[50];
    BEGIN
      Initialize;

      GeneratePackageForTableWithSeriesNo(ConfigPackage,CustomerName,TRUE);

      ApplyPackageAndSetupProcessingOrder(ConfigPackage);

      Customer.SETRANGE(Name,CustomerName);
      Customer.FINDFIRST;

      SalesSetup.GET;

      NoSeriesManagement.SetNoSeriesLineFilter(NoSeriesLine,SalesSetup."Customer Nos.",0D);
      NoSeriesLine.FINDFIRST;

      Assert.IsTrue(Customer."No." = NoSeriesLine."Last No. Used",SeriesNoNotAssigned);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyOverExistingData_DataOverwritten@14();
    VAR
      ConfigPackage@1002 : Record 8623;
      PrimaryConfigPackageTable@1001 : Record 8613;
      RelatedConfigPackageTable@1000 : Record 8613;
      GenJournalBatch@1003 : Record 232;
      KeyValueWithRelation@1004 : Code[10];
      KeyValueWithoutRelation@1005 : Code[10];
      PackageDescription@1007 : Text[20];
      TableDescription@1008 : Text[20];
    BEGIN
      Initialize;

      CreatePackageDataPairWithPKRelation(
        ConfigPackage,
        PrimaryConfigPackageTable,
        RelatedConfigPackageTable,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        FALSE,// Delete primary record
        FALSE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      GetKeyValuesWithRelation(RelatedConfigPackageTable,KeyValueWithRelation,KeyValueWithoutRelation);
      GenJournalBatch.GET(KeyValueWithRelation,KeyValueWithoutRelation);
      GenJournalBatch.Description :=
        LibraryUtility.GenerateRandomCode(GenJournalBatch.FIELDNO(Description),DATABASE::"Gen. Journal Batch");
      GenJournalBatch.MODIFY;

      TableDescription := LibraryUtility.GenerateRandomCode(GenJournalBatch.FIELDNO(Description),DATABASE::"Gen. Journal Batch");
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        RelatedConfigPackageTable,
        DATABASE::"Gen. Journal Batch",
        GenJournalBatch.FIELDNO(Description),
        PackageDescription,
        1);

      ApplyPackageAndSetupProcessingOrder(ConfigPackage);

      GenJournalBatch.GET(KeyValueWithRelation,KeyValueWithoutRelation);
      Assert.IsTrue(GenJournalBatch.Description = PackageDescription,DataWasNotOverwritten);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithConfigQuestions@34();
    VAR
      Customer@1003 : Record 18;
      ConfigQuestion@1005 : Record 8612;
      ConfigPackage@1006 : Record 8623;
    BEGIN
      // Test to verify that answers are applied correctly to option fields

      Initialize;

      // Create a new package with a question on Customer.Blocked field. The answer value is Blocked::Invoice
      CreatePackageWithQuestion(ConfigPackage,ConfigQuestion,FORMAT(Customer.Blocked::Invoice));
      // Answer value in the questionnaire is Blocked::All
      SetAnswerValue(
        ConfigQuestion."Questionnaire Code",ConfigQuestion."Question Area Code",DATABASE::Customer,Customer.FIELDNO(Blocked),
        FORMAT(Customer.Blocked::All));

      LibraryRapidStart.ApplyPackage(ConfigPackage,TRUE);

      ConfigQuestion.GET(
        ConfigQuestion."Questionnaire Code",
        ConfigQuestion."Question Area Code",
        GetConfigQuestionNo(
          ConfigQuestion."Questionnaire Code",ConfigQuestion."Question Area Code",DATABASE::Customer,Customer.FIELDNO(Blocked)));

      // Make sure that the answer in the questionnaire is replaced with the value from the package
      Assert.AreEqual(FORMAT(Customer.Blocked::Invoice),ConfigQuestion.Answer,NoDataInTableAferApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithCodeFieldMapping@47();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
      CurrencyTotalBuffer@1002 : Record 332;
      Currency@1006 : Record 4;
      MasterCode@1003 : Code[10];
      MasterTableID@1004 : Integer;
      RelatedTableID@1005 : Integer;
    BEGIN
      // Mapping for table 332 Currency Total Buffer field 1 Currency Code (type Code)
      Initialize;

      LibraryERM.CreateCurrency(Currency);

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      MasterTableID := DATABASE::Currency;
      RelatedTableID := DATABASE::"Currency Total Buffer";
      MasterCode := LibraryUtility.GenerateRandomCode(1,MasterTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,RelatedTableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,RelatedTableID,1,1,MasterCode);
      CreateFieldMapping(ConfigPackage.Code,RelatedTableID,1,MasterCode,Currency.Code);

      // apply package with mapping
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // validate
      Assert.IsTrue(CurrencyTotalBuffer.GET(Currency.Code),'Missing currency code');

      // clean up
      CurrencyTotalBuffer.DELETE;
      Currency.DELETE;
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithRelatedCodeFieldMapping@56();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
      CurrencyTotalBuffer@1002 : Record 332;
      Currency@1006 : Record 4;
      MasterCode@1003 : Code[10];
      MasterTableID@1004 : Integer;
      RelatedTableID@1005 : Integer;
    BEGIN
      // Mapping for the Currency Code in table 332 Currency Total Buffer
      // is defined in the Currency table
      Initialize;

      LibraryERM.CreateCurrency(Currency);

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      MasterTableID := DATABASE::"Currency Total Buffer";
      RelatedTableID := DATABASE::Currency;
      MasterCode := LibraryUtility.GenerateRandomCode(1,MasterTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,RelatedTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,MasterTableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,MasterTableID,1,1,MasterCode);
      CreateFieldMapping(ConfigPackage.Code,RelatedTableID,1,MasterCode,Currency.Code);

      // apply package with mapping
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // validate
      Assert.IsTrue(CurrencyTotalBuffer.GET(Currency.Code),'Missing currency code');

      // clean up
      CurrencyTotalBuffer.DELETE;
      Currency.DELETE;
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithCodeAndRelatedCodeFieldMapping@59();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
      CurrencyTotalBuffer@1002 : Record 332;
      Currency@1007 : Record 4;
      Currency2@1008 : Record 4;
      MasterCode@1003 : Code[10];
      RelatedCode@1006 : Code[10];
      MasterTableID@1004 : Integer;
      RelatedTableID@1005 : Integer;
    BEGIN
      // For table 332 Currency Total Buffer:
      // Mapping for the Currency Code '1' is defined in the Currency table
      // Mapping for the Currency Code '2' is defined for the Currency Code field
      Initialize;

      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateCurrency(Currency2);

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      MasterTableID := DATABASE::"Currency Total Buffer";
      RelatedTableID := DATABASE::Currency;
      MasterCode := LibraryUtility.GenerateRandomCode(1,MasterTableID);
      RelatedCode := LibraryUtility.GenerateRandomCode(1,RelatedTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,MasterTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,RelatedTableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,MasterTableID,1,1,MasterCode);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,MasterTableID,2,1,RelatedCode);
      CreateFieldMapping(ConfigPackage.Code,RelatedTableID,1,MasterCode,Currency.Code);
      CreateFieldMapping(ConfigPackage.Code,MasterTableID,1,RelatedCode,Currency2.Code);

      // apply package with mapping
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // validate
      Assert.IsTrue(CurrencyTotalBuffer.GET(Currency.Code),'Missing currency code');
      CurrencyTotalBuffer.DELETE;
      Currency.DELETE;
      Assert.IsTrue(CurrencyTotalBuffer.GET(Currency2.Code),'Missing currency code');
      CurrencyTotalBuffer.DELETE;
      Currency2.DELETE;
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithOptionFieldMapping@52();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
      BOMBuffer@1002 : Record 5870;
      OptionText@1003 : Text[250];
      TableID@1004 : Integer;
    BEGIN
      Initialize;

      // create new package with table 5870
      LibraryRapidStart.CreatePackage(ConfigPackage);
      TableID := DATABASE::"BOM Buffer";
      OptionText := 'ItemOption';
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,1,1,'1');
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,1,2,OptionText);
      CreateFieldMapping(ConfigPackage.Code,TableID,2,OptionText,'Item');

      // apply package with mapping
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // validate
      BOMBuffer.GET(1);
      Assert.AreEqual('Item',FORMAT(BOMBuffer.Type),'Missing option value Item.');

      BOMBuffer.DELETE;
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_ApplyPackageWithCreateMissingCodes@51();
    VAR
      ConfigPackage@1005 : Record 8623;
      ConfigPackageTable@1004 : Record 8613;
      ConfigPackageField@1006 : Record 8616;
      Currency@1007 : Record 4;
      MasterCode@1002 : Code[10];
      MasterTableID@1001 : Integer;
      RelatedTableID@1000 : Integer;
    BEGIN
      Initialize;

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      MasterTableID := DATABASE::Currency;
      RelatedTableID := DATABASE::"Currency Total Buffer";
      MasterCode := LibraryUtility.GenerateRandomCode(1,MasterTableID);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,RelatedTableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,RelatedTableID,1,1,MasterCode);
      ConfigPackageField.GET(ConfigPackageTable."Package Code",RelatedTableID,1);
      ConfigPackageField."Create Missing Codes" := TRUE;
      ConfigPackageField.MODIFY;

      // apply package with mapping
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // validate
      Assert.IsTrue(Currency.GET(MasterCode),'value not found');
    END;

    [Test]
    PROCEDURE PackageDataProcessing_RunCustomCodeunitSingleDataRecord@58();
    VAR
      ConfigPackage@1004 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
      ConfigPackageData@1006 : Record 8615;
      Customer@1002 : Record 18;
      ConfigPackageProcess@1005 : Report 8621;
      TextValue@1001 : Text;
      ExpectedTextValue@1007 : Text;
      TableID@1000 : Integer;
    BEGIN
      Initialize;

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      TableID := DATABASE::Customer;
      TextValue := TestCustomerNameTxt;
      CLEAR(Customer);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,1,Customer.FIELDNO(Name),COPYSTR(TextValue,1,250));

      // process data
      ConfigPackageProcess.ProcessCustomRulesExample(ConfigPackageTable);

      // validate
      ConfigPackageData.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageData.SETRANGE("Table ID",TableID);
      ConfigPackageData.SETRANGE("Field ID",Customer.FIELDNO(Name));
      ConfigPackageData.FINDFIRST;

      ExpectedTextValue := TransformedTestCustomerNameTxt;
      Assert.AreEqual(ExpectedTextValue,ConfigPackageData.Value,'incorrect value');
    END;

    [Test]
    PROCEDURE PackageDataProcessing_RunCustomCodeunitMultipleDataRecord@78();
    VAR
      ConfigPackage@1004 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
      ConfigPackageData@1006 : Record 8615;
      BankAccount@1002 : Record 270;
      ConfigPackageProcess@1005 : Report 8621;
      TextValue@1001 : Text;
      ExpectedTextValue@1007 : Text;
      TableID@1000 : Integer;
    BEGIN
      Initialize;

      // create new package with table 332
      LibraryRapidStart.CreatePackage(ConfigPackage);
      TableID := DATABASE::"Bank Account";
      CLEAR(BankAccount);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);

      TextValue := TestBankAccountIBANCodeTxt;
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,1,BankAccount.FIELDNO(IBAN),COPYSTR(TextValue,1,250));

      TextValue := TestBankAccountIBANCodeTxt;
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,2,BankAccount.FIELDNO(IBAN),COPYSTR(TextValue,1,250));

      // process data
      ConfigPackageProcess.ProcessCustomRulesExample(ConfigPackageTable);

      // validate
      ConfigPackageData.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageData.SETRANGE("Table ID",TableID);
      ConfigPackageData.SETRANGE("Field ID",BankAccount.FIELDNO(IBAN));
      ConfigPackageData.FINDSET;

      ExpectedTextValue := TransformedTestBankAccountIBANCodeTxt;
      Assert.AreEqual(ExpectedTextValue,ConfigPackageData.Value,'incorrect value');

      ConfigPackageData.NEXT;
      ExpectedTextValue := TransformedTestBankAccountIBANCodeTxt;
      Assert.AreEqual(ExpectedTextValue,ConfigPackageData.Value,'incorrect value');
    END;

    [Test]
    [HandlerFunctions(ConfirmYesHandler,MessageHandler)]
    PROCEDURE PackageCardPageTestability_ValidateRelations@17();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageError@1005 : Record 8617;
      ConfigPackageCard@1003 : TestPage 8614;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        FALSE,// Do not createPrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ConfigPackageCard.OPENVIEW;
      ConfigPackageCard.GOTORECORD(ConfigPackage);
      ConfigPackageCard."Config. Package Subform".ValidateRelations.INVOKE;

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsFalse(ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmYesHandler,MessageHandler)]
    PROCEDURE PackageCardPageTestability_ApplyData@23();
    VAR
      ConfigPackage@1004 : Record 8623;
      ConfigPackageError@1001 : Record 8617;
      ConfigPackageCard@1000 : TestPage 8614;
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        FALSE,// Do not createPrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ConfigPackageCard.OPENVIEW;
      ConfigPackageCard.GOTORECORD(ConfigPackage);
      ConfigPackageCard."Config. Package Subform".ApplyData.INVOKE;

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsFalse(ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_MasterThenRelatedThenMasterAgain_NoPackageErrorsAfterLastApply@27();
    VAR
      MasterConfigPackage@1001 : Record 8623;
      RelatedConfigPackage@1002 : Record 8623;
      ConfigPackageError@1000 : Record 8617;
    BEGIN
      Initialize;

      CreateTwoPackagesWithRelationBetweenTables(MasterConfigPackage,RelatedConfigPackage);

      ApplyPackageAndSetupProcessingOrder(RelatedConfigPackage);
      ApplyPackageAndSetupProcessingOrder(MasterConfigPackage);
      ApplyPackageAndSetupProcessingOrder(RelatedConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(MasterConfigPackage.Code);
      Cleanup(RelatedConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(ConfigPackageRecordsHandler)]
    PROCEDURE PackageDataApplying_ApplyFromPackageErrorsNonErroneous_ErrorDeleted@28();
    VAR
      MasterConfigPackage@1001 : Record 8623;
      RelatedConfigPackage@1002 : Record 8623;
      ConfigPackageError@1000 : Record 8617;
    BEGIN
      Initialize;
      CreateTwoPackagesWithRelationBetweenTables(MasterConfigPackage,RelatedConfigPackage);
      ApplyPackageAndSetupProcessingOrder(RelatedConfigPackage);
      ApplyPackageAndSetupProcessingOrder(MasterConfigPackage);

      RunApplyFromPackageRecords(RelatedConfigPackage);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(MasterConfigPackage.Code);
      Cleanup(RelatedConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(ConfigPackageRecordsHandler)]
    PROCEDURE PackageDataApplying_ApplyFromPackageErrorsErroneous_ErrorPresent@31();
    VAR
      MasterConfigPackage@1001 : Record 8623;
      RelatedConfigPackage@1002 : Record 8623;
      ConfigPackageError@1000 : Record 8617;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      Initialize;
      CreateTwoPackagesWithRelationBetweenTables(MasterConfigPackage,RelatedConfigPackage);
      ApplyPackageAndSetupProcessingOrder(RelatedConfigPackage);

      RunApplyFromPackageRecords(RelatedConfigPackage);

      ConfigPackageError.SETRANGE("Package Code",RelatedConfigPackage.Code);
      ConfigPackageError.FINDFIRST;
      ConfigPackageError.TESTFIELD("Field ID",GenJournalTemplate.FIELDNO(Name));

      Cleanup(MasterConfigPackage.Code);
      Cleanup(RelatedConfigPackage.Code);
    END;

    [Test]
    PROCEDURE PackageDataApplying_RunApplyWithTableFilter_PackageErrorsForOtherTablesSaved@29();
    VAR
      ConfigPackage@1001 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageError@1003 : Record 8617;
      ConfigPackageMgt@1000 : Codeunit 8611;
      ErrorText@1004 : Text[250];
    BEGIN
      Initialize;

      CreateRelatedPackageData(
        ConfigPackage,
        TRUE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      ConfigPackageMgt.SetHideDialog(TRUE);
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTable.SETRANGE("Table ID",DATABASE::"Gen. Journal Batch");
      ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);

      ConfigPackageError.FINDFIRST;
      ErrorText := ConfigPackageError."Error Text";

      ConfigPackageTable.SETRANGE("Table ID",DATABASE::"Gen. Journal Template");
      ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);

      ConfigPackageError.FINDFIRST;
      Assert.AreEqual(ErrorText,ConfigPackageError."Error Text",TableFilterApplyErr);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(ConfigPackageRecordsHandler)]
    PROCEDURE PackageDataApplying_ApplyFromPackageErrors_ErrorDeletedForSelectedLineOnly@33();
    VAR
      MasterConfigPackage@1001 : Record 8623;
      RelatedConfigPackage@1002 : Record 8623;
      ConfigPackageError@1000 : Record 8617;
      RecNo@1009 : Integer;
    BEGIN
      Initialize;
      CreateTwoPackagesWithRelationBetweenTables(MasterConfigPackage,RelatedConfigPackage);

      RecNo := 2;
      CreateAdditionalGenJnlBatchInPackageData(MasterConfigPackage,RelatedConfigPackage,RecNo);

      ApplyPackageAndSetupProcessingOrder(RelatedConfigPackage);
      ApplyPackageAndSetupProcessingOrder(MasterConfigPackage);

      RunApplyFromPackageRecords(RelatedConfigPackage);

      ConfigPackageError.SETRANGE("Record No.",RecNo);
      Assert.IsFalse(ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(MasterConfigPackage.Code);
      Cleanup(RelatedConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VerifyDimensionsTableIsNotAppliedWhenAnotherTableIsSelected@41();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      // Create a package and include data without Dimension Set ID
      CreatePackageWithCustomerAndDimension(ConfigPackage,ConfigPackageTable);

      // Exercise: Select 1 table from the package and apply it
      SelectOneTableAndApplyPackage(ConfigPackage,ConfigPackageTable,DATABASE::Customer);

      // Verify that the package record for the dimension table has not been applied
      CalcPackageTableFields(ConfigPackageTable,ConfigPackage.Code,DATABASE::Dimension);
      Assert.AreEqual(1,ConfigPackageTable."No. of Package Records",
        STRSUBSTNO(TableMustNotBeAppliedErr,ConfigPackageTable."Table Name"));

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VerifyDimensionsTableIsAppliedWhenTableWithDimSetIDIsSelected@42();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      // Create a package and include data with Dimension Set ID
      CreatePackageWithSalesHeaderAndDimension(ConfigPackage,ConfigPackageTable);
      InsertDimSetEntryIfEmpty;

      // Exercise: Select 1 table from the package and apply it
      SelectOneTableAndApplyPackage(ConfigPackage,ConfigPackageTable,DATABASE::"Sales Header");

      // Verify that the table with Dim Set ID tables has been applied
      CalcPackageTableFields(ConfigPackageTable,ConfigPackage.Code,DATABASE::Dimension);
      Assert.AreEqual(0,ConfigPackageTable."No. of Package Records",
        STRSUBSTNO(TableMustBeAppliedErr,ConfigPackageTable."Table Name"));

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VerifyDimensionsTableIsNotAppliedWhenTableWithDimSetIDIsSelectedAndDimSetEntryIsEmpty@53();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
      DimSetEntry@1003 : Record 480;
    BEGIN
      // Create a package and include data with Dimension Set ID
      CreatePackageWithSalesHeaderAndDimension(ConfigPackage,ConfigPackageTable);
      DimSetEntry.DELETEALL;

      // Exercise: Select 1 table from the package and apply it
      SelectOneTableAndApplyPackage(ConfigPackage,ConfigPackageTable,DATABASE::"Sales Header");

      // Verify that the table with Dim Set ID tables has not been applied when dimension set entries exist
      CalcPackageTableFields(ConfigPackageTable,ConfigPackage.Code,DATABASE::Dimension);
      Assert.AreEqual(1,ConfigPackageTable."No. of Package Records",
        STRSUBSTNO(TableMustBeAppliedErr,ConfigPackageTable."Table Name"));

      Cleanup(ConfigPackage.Code);
    END;

    LOCAL PROCEDURE InsertDimSetEntryIfEmpty@55();
    VAR
      DimSetEntry@1000 : Record 480;
    BEGIN
      IF DimSetEntry.ISEMPTY THEN BEGIN
        DimSetEntry.INIT;
        DimSetEntry."Dimension Set ID" := 1;
        DimSetEntry.INSERT;
      END;
    END;

    [Test]
    PROCEDURE ValidatePackageNoRecordsCreatedCustomerContact@64();
    VAR
      ConfigPackage@1004 : Record 8623;
      Customer@1006 : Record 18;
      Contact@1002 : Record 5050;
      ContactNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 376810] Validate Package for Customer Table with Contact does not create new Contact
      Initialize;

      // [GIVEN] Customer "X"
      LibrarySales.CreateCustomer(Customer);
      ContactNo := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Contact),DATABASE::Customer);

      // [GIVEN] Rapid Start Package with Customer Table
      // [GIVEN] Package Data has Customer "No." = "X", "Contact" = "Z"
      LibraryRapidStart.CreatePackage(ConfigPackage);
      CreatePackageTableWithTableData(
        ConfigPackage.Code,DATABASE::Customer,Customer.FIELDNO("No."),Customer.FIELDNO(Contact),
        Customer."No.",ContactNo);

      // [WHEN] Run Validate Package
      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      // [THEN] Contact with Name = "Z" does not exists
      Contact.INIT;
      Contact.SETRANGE(Name,ContactNo);
      Assert.RecordIsEmpty(Contact);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE ValidatePackageNoRecordsCreatedVendorContact@76();
    VAR
      ConfigPackage@1004 : Record 8623;
      Vendor@1006 : Record 23;
      Contact@1002 : Record 5050;
      ContactNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 376810] Validate Package for Vendor Table with Contact does not create new Contact
      Initialize;

      // [GIVEN] Vendor "X"
      LibraryPurchase.CreateVendor(Vendor);
      ContactNo := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Contact),DATABASE::Vendor);

      // [GIVEN] Rapid Start Package with Vendor Table
      // [GIVEN] Package Data has Vendor "No." = "X", "Contact" = "Z"
      LibraryRapidStart.CreatePackage(ConfigPackage);
      CreatePackageTableWithTableData(
        ConfigPackage.Code,DATABASE::Vendor,Vendor.FIELDNO("No."),Vendor.FIELDNO(Contact),
        Vendor."No.",ContactNo);

      // [WHEN] Run Validate Package
      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      // [THEN] Contact with Name = "Z" does not exists
      Contact.INIT;
      Contact.SETRANGE(Name,ContactNo);
      Assert.RecordIsEmpty(Contact);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE ValidatePackageNoRecordsCreatedItemBaseUnitOfMeasure@79();
    VAR
      ConfigPackage@1004 : Record 8623;
      Item@1006 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      UnitOfMeasure@1003 : Record 204;
    BEGIN
      // [SCENARIO 376810] Validate Package for Item Table with Base Unit of Measure does not create new Item Unit of Measure
      Initialize;

      // [GIVEN] Item "X", Unit of Measure "Y"
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);

      // [GIVEN] Rapid Start Package with Customer Table
      // [GIVEN] Package Data has Vendor "No." = "X", "Base Unit of Measure" = "Z"
      LibraryRapidStart.CreatePackage(ConfigPackage);
      CreatePackageTableWithTableData(
        ConfigPackage.Code,DATABASE::Item,Item.FIELDNO("No."),Item.FIELDNO("Base Unit of Measure"),
        Item."No.",UnitOfMeasure.Code);

      // [WHEN] Run Validate Package
      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      // [THEN] Item Unit of Measure with Name = "Z" does not exists
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.SETRANGE(Code,UnitOfMeasure.Code);
      Assert.RecordIsEmpty(ItemUnitOfMeasure);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE UTValidateExceptionCheckFields@62();
    VAR
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      Item@1003 : Record 27;
      ConfigPackageManagement@1000 : Codeunit 8611;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376810] Validate Package for Item Table with Base Unit of Measure does not create new Item Unit of Measure
      Initialize;

      // [WHEN] Run function "ValidateException" from of "Config Package Management" codeunit for fields Customer/Vendor "Contact", Item "Base Unit of Measure"
      // [THEN] "ValidateException" returns TRUE to show that fields are exceptions and should not be validated
      Assert.IsTrue(
        ConfigPackageManagement.ValidateException(DATABASE::Customer,Customer.FIELDNO(Contact)),
        Customer.FIELDCAPTION(Contact));
      Assert.IsTrue(
        ConfigPackageManagement.ValidateException(DATABASE::Vendor,Vendor.FIELDNO(Contact)),
        Vendor.FIELDCAPTION(Contact));
      Assert.IsTrue(
        ConfigPackageManagement.ValidateException(DATABASE::Item,Item.FIELDNO("Base Unit of Measure")),
        Item.FIELDCAPTION("Base Unit of Measure"));
    END;

    [Test]
    PROCEDURE DelayedInsertOnApplyProductionForecastEntryWhenConfigTableHasMandatoryFieldsFilled@63();
    VAR
      ProductionForecastEntry@1000 : Record 99000852;
      ProductionForecastName@1001 : Record 99000851;
      ConfigPackage@1002 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
      ConfigPackageError@1005 : Record 8617;
      TableID@1004 : Integer;
    BEGIN
      // [SCENARIO 381053] Delayed insert with not-"Skip Table Triggers" option for the table where OnInsert trigger fails while non-PK fields are not filled yet
      Initialize;

      // [GIVEN] Config Package for new Production Forecast Entry with "Skip Table Triggers" = No
      ProductionForecastName.Name :=
        LibraryUtility.GenerateRandomCode(ProductionForecastName.FIELDNO(Name),DATABASE::"Production Forecast Name");
      ProductionForecastName.INSERT;

      TableID := DATABASE::"Production Forecast Entry";
      LibraryRapidStart.CreatePackage(ConfigPackage);

      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);
      ConfigPackageTable.VALIDATE("Skip Table Triggers",FALSE);
      ConfigPackageTable.MODIFY(TRUE);

      // [GIVEN] Mandatory fields are filled in: "Production Forecast Name" = "N", "Forecast Date" = WORKDATE
      ProductionForecastEntry.FINDLAST;
      LibraryRapidStart.CreatePackageData(
        ConfigPackage.Code,TableID,1,ProductionForecastEntry.FIELDNO("Entry No."),FORMAT(ProductionForecastEntry."Entry No." + 1));
      LibraryRapidStart.CreatePackageData(
        ConfigPackage.Code,TableID,1,ProductionForecastEntry.FIELDNO("Forecast Date"),FORMAT(WORKDATE));
      LibraryRapidStart.CreatePackageData(
        ConfigPackage.Code,TableID,1,ProductionForecastEntry.FIELDNO("Production Forecast Name"),ProductionForecastName.Name);

      // [WHEN] Apply Package
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // [THEN] No error for Config. Package created
      ConfigPackageError.INIT;
      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.RecordIsEmpty(ConfigPackageError);
      // [THEN] Production Forecast Entry is created with "Production Forecast Name" = "N", "Forecast Date" = WORKDATE
      ProductionForecastEntry.FINDLAST;
      ProductionForecastEntry.TESTFIELD("Production Forecast Name",ProductionForecastName.Name);
      ProductionForecastEntry.TESTFIELD("Forecast Date",WORKDATE);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE DelayedInsertOnApplyProductionForecastEntryWhenConfigTableHasMandatoryFieldNotFilled@87();
    VAR
      ProductionForecastEntry@1000 : Record 99000852;
      ConfigPackage@1002 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
      ConfigPackageError@1005 : Record 8617;
      TableID@1004 : Integer;
    BEGIN
      // [SCENARIO 381053] Delayed insert with not-"Skip Table Triggers" option for the table where OnInsert trigger fails while non-PK fields are not filled yet
      Initialize;

      // [GIVEN] Config Package for new Production Forecast Entry with "Skip Table Triggers" = No
      TableID := DATABASE::"Production Forecast Entry";
      LibraryRapidStart.CreatePackage(ConfigPackage);

      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);
      ConfigPackageTable.VALIDATE("Skip Table Triggers",FALSE);
      ConfigPackageTable.MODIFY(TRUE);

      // [GIVEN] Only one mandatory field is filled in: "Forecast Date" = WORKDATE
      ProductionForecastEntry.FINDLAST;
      LibraryRapidStart.CreatePackageData(
        ConfigPackage.Code,TableID,1,ProductionForecastEntry.FIELDNO("Entry No."),FORMAT(ProductionForecastEntry."Entry No." + 1));

      LibraryRapidStart.CreatePackageData(
        ConfigPackage.Code,TableID,1,ProductionForecastEntry.FIELDNO("Forecast Date"),FORMAT(WORKDATE));

      // [WHEN] Apply Package
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // [THEN] Error for Config. Package is created for "Production Forecast Name" field
      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageError.FINDFIRST;
      Assert.ExpectedMessage(ProductionForecastEntry.FIELDCAPTION("Production Forecast Name"),ConfigPackageError."Error Text");

      Cleanup(ConfigPackage.Code);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE Cleanup@60(PackageCode@1001 : Code[20]);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageError@1002 : Record 8617;
    BEGIN
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.DELETEALL(TRUE);
      ConfigPackageError.DELETEALL;
    END;

    LOCAL PROCEDURE CreatePackageDataPairWithPKRelation@13(VAR ConfigPackage@1007 : Record 8623;VAR PrimaryConfigPackageTable@1006 : Record 8613;VAR RelatedConfigPackageTable@1012 : Record 8613;CreatePrimaryPackageData@1004 : Boolean;CreateRelatedPackageData@1005 : Boolean;DeletePrimaryRecord@1000 : Boolean;DeleteRelatedRecord@1001 : Boolean;PrimaryDataPriority@1002 : Integer;RelatedDataPriority@1003 : Integer);
    VAR
      GenJournalTemplate@1011 : Record 80;
      GenJournalBatch@1010 : Record 232;
      KeyValueWithRelation@1009 : Code[10];
      KeyValueWithoutRelation@1008 : Code[10];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate); // Master
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name); // Related

      KeyValueWithRelation := GenJournalTemplate.Name;
      KeyValueWithoutRelation := GenJournalBatch.Name;

      IF DeletePrimaryRecord THEN
        GenJournalTemplate.DELETE;
      IF DeleteRelatedRecord THEN
        GenJournalBatch.DELETE;

      // Master data
      IF CreatePrimaryPackageData THEN BEGIN
        LibraryRapidStart.CreatePackageDataForField(
          ConfigPackage,
          PrimaryConfigPackageTable,
          DATABASE::"Gen. Journal Template",
          GenJournalTemplate.FIELDNO(Name),
          KeyValueWithRelation,
          1);
        LibraryRapidStart.SetProcessingOrderForRecord(ConfigPackage.Code,PrimaryConfigPackageTable."Table ID",PrimaryDataPriority);
      END;

      // Related Table field with relation
      IF CreateRelatedPackageData THEN BEGIN
        // PK Field with relation
        LibraryRapidStart.CreatePackageDataForField(
          ConfigPackage,
          RelatedConfigPackageTable,
          DATABASE::"Gen. Journal Batch",
          GenJournalBatch.FIELDNO("Journal Template Name"),
          KeyValueWithRelation,
          1);

        // Field without relation
        LibraryRapidStart.CreatePackageDataForField(
          ConfigPackage,
          RelatedConfigPackageTable,
          DATABASE::"Gen. Journal Batch",
          GenJournalBatch.FIELDNO(Name),
          KeyValueWithoutRelation,
          1);
        LibraryRapidStart.SetProcessingOrderForRecord(ConfigPackage.Code,RelatedConfigPackageTable."Table ID",RelatedDataPriority);
      END;
    END;

    LOCAL PROCEDURE CreateRelatedPackageData@61(VAR ConfigPackage@1008 : Record 8623;CreatePrimaryPackageData@1005 : Boolean;CreateRelatedPackageData@1004 : Boolean;DeletePrimaryRecord@1003 : Boolean;DeleteRelatedRecord@1002 : Boolean;PrimaryDataPriority@1001 : Integer;RelatedDataPriority@1000 : Integer);
    VAR
      PrimaryConfigPackageTable@1006 : Record 8613;
      RelatedConfigPackageTable@1007 : Record 8613;
    BEGIN
      CreatePackageDataPairWithPKRelation(
        ConfigPackage,
        PrimaryConfigPackageTable,
        RelatedConfigPackageTable,
        CreatePrimaryPackageData,
        CreateRelatedPackageData,
        DeletePrimaryRecord,
        DeleteRelatedRecord,
        PrimaryDataPriority,
        RelatedDataPriority);
    END;

    LOCAL PROCEDURE CreatePackageDataPairWithNonPKRelation@30(VAR ConfigPackage@1000 : Record 8623;TableWithoutRelationPriority@1001 : Integer;TableWithRelationPriority@1002 : Integer;VAR GenJournalTemplateName@1004 : Code[10];VAR ReasonCodeCode@1003 : Code[10]);
    VAR
      ReasonCodeConfigPackageTable@1011 : Record 8613;
      GenJnlTemplateConfigPackageTable@1010 : Record 8613;
      ReasonCode@1009 : Record 231;
      GenJournalTemplate@1008 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateReasonCode(ReasonCode);

      GenJournalTemplateName := GenJournalTemplate.Name;
      ReasonCodeCode := ReasonCode.Code;

      GenJournalTemplate.DELETE;
      ReasonCode.DELETE;

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        GenJnlTemplateConfigPackageTable,
        DATABASE::"Gen. Journal Template",
        GenJournalTemplate.FIELDNO(Name),
        GenJournalTemplateName,
        1);
      LibraryRapidStart.SetProcessingOrderForRecord(
        ConfigPackage.Code,GenJnlTemplateConfigPackageTable."Table ID",TableWithoutRelationPriority);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ReasonCodeConfigPackageTable,
        DATABASE::"Reason Code",
        ReasonCode.FIELDNO(Code),
        ReasonCodeCode,
        1);

      LibraryRapidStart.SetProcessingOrderForRecord(
        ConfigPackage.Code,ReasonCodeConfigPackageTable."Table ID",TableWithRelationPriority);
    END;

    LOCAL PROCEDURE CreatePackageDataPairWithoutRelation@35(VAR ConfigPackage@1000 : Record 8623;VAR GenJournalTemplateName@1008 : Code[10];VAR ItemJournalTemplateName@1007 : Code[10]);
    VAR
      ItemJnlTemplateConfigPackageTable@1006 : Record 8613;
      GenJnlTemplateConfigPackageTable@1005 : Record 8613;
      ItemJournalTemplate@1004 : Record 82;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryInventory.CreateItemJournalTemplate(ItemJournalTemplate);

      GenJournalTemplateName := GenJournalTemplate.Name;
      ItemJournalTemplateName := ItemJournalTemplate.Name;

      GenJournalTemplate.DELETE;
      ItemJournalTemplate.DELETE;

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        GenJnlTemplateConfigPackageTable,
        DATABASE::"Gen. Journal Template",
        GenJournalTemplate.FIELDNO(Name),
        GenJournalTemplateName,
        1);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ItemJnlTemplateConfigPackageTable,
        DATABASE::"Item Journal Template",
        ItemJournalTemplate.FIELDNO(Name),
        ItemJournalTemplateName,
        1);
    END;

    LOCAL PROCEDURE CreatePackageTableWithTableData@65(ConfigPackageCode@1001 : Code[20];TableID@1002 : Integer;FieldNo@1003 : Integer;FieldNoChecked@1004 : Integer;FieldValue@1005 : Text[250];FieldCheckedValue@1006 : Text[250]);
    VAR
      ConfigPackageTable@1000 : Record 8613;
    BEGIN
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackageCode,TableID);
      LibraryRapidStart.CreatePackageData(ConfigPackageCode,TableID,1,FieldNo,FieldValue);
      LibraryRapidStart.CreatePackageData(ConfigPackageCode,TableID,1,FieldNoChecked,FieldCheckedValue);
    END;

    LOCAL PROCEDURE CreateAndApplyPackageDataForTableWithoutPKCheckOnInsert@81(VAR ConfigPackage@1005 : Record 8623;ValidatePK@1006 : Boolean) KeyValueWithRelation : Code[10];
    VAR
      ConfigPackageTable@1004 : Record 8613;
      NoSeriesLine@1001 : Record 309;
      ConfigPackageField@1000 : Record 8616;
    BEGIN
      KeyValueWithRelation :=
        LibraryUtility.GenerateRandomCode(
          NoSeriesLine.FIELDNO("Series Code"),DATABASE::"No. Series Line");
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"No. Series Line",
        NoSeriesLine.FIELDNO("Series Code"),
        KeyValueWithRelation,
        1);
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"No. Series Line",
        NoSeriesLine.FIELDNO("Line No."),
        FORMAT(0),
        1);

      ConfigPackageField.GET(ConfigPackage.Code,DATABASE::"No. Series Line",NoSeriesLine.FIELDNO("Series Code"));
      ConfigPackageField."Validate Field" := ValidatePK;
      ConfigPackageField.MODIFY;

      ApplyPackageAndSkipProcessingOrder(ConfigPackage);
    END;

    LOCAL PROCEDURE GetKeyValuesWithRelation@36(ConfigPackageTable@1000 : Record 8613;VAR KeyWithRelation@1001 : Code[250];VAR KeyWithoutRelation@1002 : Code[250]);
    VAR
      ConfigPackageData@1003 : Record 8615;
      GenJournalBatch@1004 : Record 232;
    BEGIN
      ConfigPackageData.GET(
        ConfigPackageTable."Package Code",
        ConfigPackageTable."Table ID",
        1,
        GenJournalBatch.FIELDNO("Journal Template Name"));

      KeyWithRelation := ConfigPackageData.Value;

      ConfigPackageData.GET(
        ConfigPackageTable."Package Code",
        ConfigPackageTable."Table ID",
        1,
        GenJournalBatch.FIELDNO(Name));

      KeyWithoutRelation := ConfigPackageData.Value;
    END;

    LOCAL PROCEDURE GetConfigQuestionNo@24(ConfigQuestionnaireCode@1001 : Code[10];ConfigQuestionAreaCode@1002 : Code[10];TableID@1003 : Integer;FieldID@1004 : Integer) : Integer;
    VAR
      ConfigQuestion@1000 : Record 8612;
    BEGIN
      ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionnaireCode);
      ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionAreaCode);
      ConfigQuestion.SETRANGE("Table ID",TableID);
      ConfigQuestion.SETRANGE("Field ID",FieldID);
      ConfigQuestion.FINDFIRST;

      EXIT(ConfigQuestion."No.");
    END;

    LOCAL PROCEDURE CreatePackageWithQuestion@18(VAR ConfigPackage@1000 : Record 8623;VAR ConfigQuestion@1001 : Record 8612;AnswerValue@1007 : Text[250]);
    VAR
      ConfigQuestionnaire@1002 : Record 8610;
      ConfigQuestionArea@1003 : Record 8611;
      ConfigPackageTable@1006 : Record 8613;
      Customer@1005 : Record 18;
      QuestionnaireManagement@1004 : Codeunit 8610;
    BEGIN
      LibraryRapidStart.CreateQuestionnaire(ConfigQuestionnaire);
      LibraryRapidStart.CreateQuestionArea(ConfigQuestionArea,ConfigQuestionnaire.Code);
      ConfigQuestionArea.VALIDATE("Table ID",DATABASE::Customer);
      ConfigQuestionArea.MODIFY(TRUE);
      QuestionnaireManagement.UpdateQuestions(ConfigQuestionArea);

      LibraryRapidStart.CreatePackage(ConfigPackage);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,DATABASE::"Config. Question");

      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO("Questionnaire Code"),ConfigQuestionnaire.Code);
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO("Question Area Code"),ConfigQuestionArea.Code);

      InsertQuestionPackageData(
        ConfigPackage.Code,
        ConfigQuestion.FIELDNO("No."),
        FORMAT(GetConfigQuestionNo(ConfigQuestionnaire.Code,ConfigQuestionArea.Code,DATABASE::Customer,Customer.FIELDNO(Blocked))));

      ConfigQuestion.GET(
        ConfigQuestionnaire.Code,ConfigQuestionArea.Code,
        GetConfigQuestionNo(ConfigQuestionnaire.Code,ConfigQuestionArea.Code,DATABASE::Customer,Customer.FIELDNO(Blocked)));
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO(Question),ConfigQuestion.Question);
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO("Answer Option"),ConfigQuestion."Answer Option");
      // New answer to be applied
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO(Answer),AnswerValue);
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO("Table ID"),FORMAT(DATABASE::Customer));
      InsertQuestionPackageData(ConfigPackage.Code,ConfigQuestion.FIELDNO("Field ID"),FORMAT(Customer.FIELDNO(Blocked)));
    END;

    LOCAL PROCEDURE InsertQuestionPackageData@16(ConfigPackageCode@1000 : Code[20];FieldID@1001 : Integer;Value@1002 : Text[250]);
    BEGIN
      LibraryRapidStart.CreatePackageData(ConfigPackageCode,DATABASE::"Config. Question",1,FieldID,Value);
    END;

    LOCAL PROCEDURE SetAnswerValue@25(ConfigQuestionnaireCode@1003 : Code[10];ConfigQuestionAreaCode@1002 : Code[10];TableID@1001 : Integer;FieldID@1000 : Integer;AnswerValue@1004 : Text[250]);
    VAR
      ConfigQuestion@1005 : Record 8612;
    BEGIN
      ConfigQuestion.GET(
        ConfigQuestionnaireCode,ConfigQuestionAreaCode,
        GetConfigQuestionNo(ConfigQuestionnaireCode,ConfigQuestionAreaCode,TableID,FieldID));
      ConfigQuestion.VALIDATE(Answer,AnswerValue);
      ConfigQuestion.MODIFY;
    END;

    LOCAL PROCEDURE GeneratePackageForTableWithSeriesNo@12(VAR ConfigPackage@1000 : Record 8623;VAR CustomerName@1002 : Text[50];BlankPK@1005 : Boolean);
    VAR
      ConfigPackageTable@1004 : Record 8613;
      Customer@1003 : Record 18;
      CustomerNo@1001 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);

      IF NOT BlankPK THEN
        CustomerNo := Customer."No."
      ELSE
        CustomerNo := '';

      CustomerName := Customer."No.";

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Customer,
        Customer.FIELDNO("No."),
        CustomerNo,
        1);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Customer,
        Customer.FIELDNO(Name),
        CustomerName,
        1);

      Customer.DELETE;
    END;

    LOCAL PROCEDURE GeneralTestcaseForApplyingRecordWithSeries@116(BlankPK@1000 : Boolean);
    VAR
      ConfigPackage@1001 : Record 8623;
      Customer@1003 : Record 18;
      CustomerName@1002 : Text[50];
      CustomersCount@1004 : Integer;
    BEGIN
      Initialize;

      GeneratePackageForTableWithSeriesNo(ConfigPackage,CustomerName,BlankPK);

      CustomersCount := Customer.COUNT;
      ApplyPackageAndSetupProcessingOrder(ConfigPackage);

      Assert.IsTrue(Customer.COUNT <= CustomersCount + 1,MoreThanOneRecordInserted);

      Cleanup(ConfigPackage.Code);
    END;

    LOCAL PROCEDURE ApplyPackageAndSetupProcessingOrder@115(VAR ConfigPackage@1000 : Record 8623);
    BEGIN
      LibraryRapidStart.ApplyPackage(ConfigPackage,TRUE);
    END;

    LOCAL PROCEDURE ApplyPackageAndSkipProcessingOrder@117(VAR ConfigPackage@1000 : Record 8623);
    BEGIN
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);
    END;

    LOCAL PROCEDURE ValidatePackageAndSetupProcessingOrder@127(VAR ConfigPackage@1000 : Record 8623);
    BEGIN
      LibraryRapidStart.ValidatePackage(ConfigPackage,TRUE);
    END;

    LOCAL PROCEDURE ValidatePackageAndSkipProcessingOrder@125(VAR ConfigPackage@1000 : Record 8623);
    BEGIN
      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);
    END;

    LOCAL PROCEDURE CreateTwoPackagesWithRelationBetweenTables@67(VAR MasterConfigPackage@1003 : Record 8623;VAR RelatedConfigPackage@1002 : Record 8623);
    VAR
      MasterConfigPackageData@1001 : Record 8615;
      RelatedConfigPackageData@1000 : Record 8615;
    BEGIN
      CreateRelatedPackageData(
        MasterConfigPackage,
        TRUE,// CreatePrimaryPackageData
        FALSE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      CreateRelatedPackageData(
        RelatedConfigPackage,
        FALSE,// CreatePrimaryPackageData
        TRUE,// CreateRelatedPackageData
        TRUE,// Delete primary record
        TRUE,// Delete related record
        0,// Primary priority
        0); // Related table priority

      MasterConfigPackageData.SETRANGE("Package Code",MasterConfigPackage.Code);
      MasterConfigPackageData.FINDFIRST;
      RelatedConfigPackageData.SETRANGE("Package Code",RelatedConfigPackage.Code);
      RelatedConfigPackageData.FINDFIRST;
      RelatedConfigPackageData.Value := MasterConfigPackageData.Value;
      RelatedConfigPackageData.MODIFY;
    END;

    LOCAL PROCEDURE RunApplyFromPackageRecords@54(ConfigPackage@1001 : Record 8623);
    VAR
      ConfigPackageCard@1000 : TestPage 8614;
    BEGIN
      ConfigPackageCard.OPENVIEW;
      ConfigPackageCard.GOTORECORD(ConfigPackage);
      ConfigPackageCard."Config. Package Subform".GOTOKEY(ConfigPackage.Code,DATABASE::"Gen. Journal Batch");
      ConfigPackageCard."Config. Package Subform".PackageErrors.INVOKE;
    END;

    LOCAL PROCEDURE CreateAdditionalPackageData@57(RecRef@1000 : RecordRef;ConfigPackageCode@1003 : Code[20];FromRecordNo@1004 : Integer;NewRecordNo@1005 : Integer);
    VAR
      ConfigPackageData@1001 : Record 8615;
      FieldRef@1002 : FieldRef;
    BEGIN
      WITH ConfigPackageData DO BEGIN
        SETRANGE("Package Code",ConfigPackageCode);
        SETRANGE("No.",FromRecordNo);
        FINDSET;
        REPEAT
          FieldRef := RecRef.FIELD("Field ID");
          LibraryRapidStart.CreatePackageData("Package Code","Table ID",NewRecordNo,"Field ID",FORMAT(FieldRef.VALUE));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAdditionalGenJnlBatchInPackageData@69(MasterConfigPackage@1000 : Record 8623;RelatedConfigPackage@1001 : Record 8623;RecNo@1002 : Integer);
    VAR
      GenJournalBatch@1007 : Record 232;
      MasterConfigPackageData@1006 : Record 8615;
      GenJournalTemplate@1005 : Record 80;
      RecRef@1004 : RecordRef;
    BEGIN
      MasterConfigPackageData.SETRANGE("Package Code",MasterConfigPackage.Code);
      MasterConfigPackageData.FINDFIRST;

      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch."Journal Template Name" := COPYSTR(MasterConfigPackageData.Value,1,10);

      RecRef.GETTABLE(GenJournalBatch);

      CreateAdditionalPackageData(RecRef,RelatedConfigPackage.Code,1,RecNo);

      GenJournalBatch."Journal Template Name" := GenJournalTemplate.Name;
      GenJournalBatch.DELETE;
      GenJournalTemplate.DELETE;
    END;

    LOCAL PROCEDURE CreatePackageWithCustomerAndDimension@37(VAR ConfigPackage@1001 : Record 8623;VAR ConfigPackageTable@1000 : Record 8613);
    VAR
      Customer@1002 : Record 18;
      Dimension@1003 : Record 348;
    BEGIN
      LibraryRapidStart.CreatePackage(ConfigPackage);
      CreatePackageTableWithData(ConfigPackage,ConfigPackageTable,DATABASE::Customer,Customer.FIELDNO("No."));
      CreatePackageTableWithData(ConfigPackage,ConfigPackageTable,DATABASE::Dimension,Dimension.FIELDNO(Code));
    END;

    LOCAL PROCEDURE CreatePackageWithSalesHeaderAndDimension@45(VAR ConfigPackage@1001 : Record 8623;VAR ConfigPackageTable@1000 : Record 8613);
    VAR
      SalesHeader@1003 : Record 36;
      Dimension@1002 : Record 348;
    BEGIN
      LibraryRapidStart.CreatePackage(ConfigPackage);
      CreatePackageTableWithData(ConfigPackage,ConfigPackageTable,DATABASE::"Sales Header",SalesHeader.FIELDNO("No."));
      CreatePackageTableWithData(ConfigPackage,ConfigPackageTable,DATABASE::Dimension,Dimension.FIELDNO(Code));
    END;

    LOCAL PROCEDURE CreatePackageTableWithData@44(VAR ConfigPackage@1000 : Record 8623;VAR ConfigPackageTable@1001 : Record 8613;TableID@1002 : Integer;FieldID@1003 : Integer);
    BEGIN
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableID);
      LibraryRapidStart.CreatePackageData(ConfigPackage.Code,TableID,1,FieldID,
        LibraryUtility.GenerateRandomCode(FieldID,TableID));
    END;

    LOCAL PROCEDURE CreateFieldMapping@48(PackageCode@1000 : Code[20];TableID@1004 : Integer;FieldID@1005 : Integer;OldValue@1001 : Text[250];NewValue@1002 : Text[250]);
    VAR
      ConfigFieldMapping@1003 : Record 8628;
    BEGIN
      ConfigFieldMapping.INIT;
      ConfigFieldMapping.VALIDATE("Package Code",PackageCode);
      ConfigFieldMapping.VALIDATE("Table ID",TableID);
      ConfigFieldMapping.VALIDATE("Field ID",FieldID);
      ConfigFieldMapping."Old Value" := OldValue;
      ConfigFieldMapping."New Value" := NewValue;
      ConfigFieldMapping.INSERT;
    END;

    LOCAL PROCEDURE SelectOneTableAndApplyPackage@46(VAR ConfigPackage@1000 : Record 8623;VAR ConfigPackageTable@1001 : Record 8613;TableID@1002 : Integer);
    VAR
      ConfigPackageMgt@1003 : Codeunit 8611;
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTable.SETRANGE("Table ID",TableID);
      ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);

      ConfigPackageTable.RESET;
    END;

    LOCAL PROCEDURE CalcPackageTableFields@66(VAR ConfigPackageTable@1000 : Record 8613;ConfigPackageCode@1002 : Code[20];TableID@1001 : Integer);
    BEGIN
      ConfigPackageTable.GET(ConfigPackageCode,TableID);
      ConfigPackageTable.CALCFIELDS("No. of Package Records","Table Name");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYesHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@50(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ConfigPackageRecordsHandler@32(VAR ConfigPackageRecords@1000 : TestPage 8626);
    BEGIN
      ConfigPackageRecords.ApplyData.INVOKE;
      ConfigPackageRecords.Cancel.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Config Package] [Rapid Start]
    }
    END.
  }
}

