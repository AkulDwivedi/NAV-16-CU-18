OBJECT Codeunit 132213 Library - Small Business
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryJob@1005 : Codeunit 131920;
      LibrarySales@1000 : Codeunit 130509;
      LibraryPurchase@1001 : Codeunit 130512;
      LibraryRapidStart@1007 : Codeunit 131903;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryRandom@1002 : Codeunit 130440;

    PROCEDURE CreateCommentLine@26(VAR CommentLine@1001 : Record 97;TableName@1000 : Option;No@1002 : Code[20]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      CLEAR(CommentLine);
      CommentLine.VALIDATE("Table Name",TableName);
      CommentLine.VALIDATE("No.",No);
      RecRef.GETTABLE(CommentLine);
      CommentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,CommentLine.FIELDNO("Line No.")));
      CommentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateSalesCommentLine@29(VAR SalesCommentLine@1000 : Record 44;SalesLine@1002 : Record 37);
    VAR
      NextLineNo@1001 : Integer;
    BEGIN
      CLEAR(SalesCommentLine);
      SalesCommentLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesCommentLine.SETRANGE("No.",SalesLine."No.");
      SalesCommentLine.SETRANGE("Document Line No.",SalesLine."Line No.");
      IF SalesCommentLine.FINDLAST THEN
        NextLineNo := SalesCommentLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      CLEAR(SalesCommentLine);
      SalesCommentLine.INIT;
      SalesCommentLine."Document Type" := SalesLine."Document Type";
      SalesCommentLine."No." := SalesLine."Document No.";
      SalesCommentLine."Document Line No." := SalesLine."Line No.";
      SalesCommentLine."Line No." := NextLineNo;
      SalesCommentLine.Date := LibraryUtility.GenerateRandomDate(WORKDATE + 10,WORKDATE + 20);
      SalesCommentLine.Comment := LibraryUtility.GenerateRandomCode(SalesCommentLine.FIELDNO(Comment),DATABASE::"Sales Comment Line");
      SalesCommentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateCustomer@2(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
    END;

    PROCEDURE CreateCustomerSalesCode@25(VAR StandardCustomerSalesCode@1000 : Record 172;CustomerNo@1001 : Code[20];Code@1002 : Code[10]);
    BEGIN
      StandardCustomerSalesCode.INIT;
      StandardCustomerSalesCode.VALIDATE("Customer No.",CustomerNo);
      StandardCustomerSalesCode.VALIDATE(Code,Code);
      StandardCustomerSalesCode.INSERT(TRUE);
    END;

    PROCEDURE CreateCustomerTemplateLine@20(ConfigTemplateHeader@1000 : Record 8618;FieldNo@1002 : Integer;FieldName@1003 : Text[30];DefaultValue@1004 : Text[50]);
    VAR
      ConfigTemplateLine@1001 : Record 8619;
    BEGIN
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      ConfigTemplateLine.VALIDATE("Field ID",FieldNo);
      ConfigTemplateLine.VALIDATE("Field Name",FieldName);
      IF DefaultValue <> '' THEN
        ConfigTemplateLine.VALIDATE("Default Value",DefaultValue)
      ELSE
        ConfigTemplateLine.VALIDATE("Default Value",LibraryUtility.GenerateRandomCode(FieldNo,DATABASE::Customer));
      ConfigTemplateLine.VALIDATE("Skip Relation Check",FALSE);
      ConfigTemplateLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateCustomerTemplate@19(VAR ConfigTemplateHeader@1003 : Record 8618);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeader.VALIDATE("Table ID",DATABASE::Customer);
      ConfigTemplateHeader.MODIFY(TRUE);

      CreateCustomerTemplateLine(ConfigTemplateHeader,Customer.FIELDNO("Phone No."),
        Customer.FIELDNAME("Phone No."),'');
      CreateCustomerTemplateLine(ConfigTemplateHeader,Customer.FIELDNO("Our Account No."),
        Customer.FIELDNAME("Our Account No."),'');
      CreateCustomerTemplateLine(ConfigTemplateHeader,Customer.FIELDNO("Gen. Bus. Posting Group"),
        Customer.FIELDNAME("Gen. Bus. Posting Group"),FindGenBusPostingGroup);
      CreateCustomerTemplateLine(ConfigTemplateHeader,Customer.FIELDNO("Customer Posting Group"),
        Customer.FIELDNAME("Customer Posting Group"),LibrarySales.FindCustomerPostingGroup);
    END;

    PROCEDURE CreateCurrencyExchangeRate@18(VAR CurrencyExchangeRate@1002 : Record 330;CurrencyCode@1001 : Code[10];StartingDate@1000 : Date);
    BEGIN
      CLEAR(CurrencyExchangeRate);
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(10,2));
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",
        CurrencyExchangeRate."Exchange Rate Amount" * LibraryRandom.RandDec(10,2));

      CurrencyExchangeRate.INSERT(TRUE);
    END;

    PROCEDURE CreateExtendedTextHeader@23(VAR ExtendedTextHeader@1000 : Record 279;TableNameOption@1001 : 'Standard Text,G/L Account,Item,Resource';No@1002 : Code[20]);
    BEGIN
      CLEAR(ExtendedTextHeader);
      ExtendedTextHeader.VALIDATE("Table Name",TableNameOption);
      ExtendedTextHeader.VALIDATE("No.",No);
      ExtendedTextHeader.VALIDATE("Sales Invoice",TRUE);
      ExtendedTextHeader.VALIDATE("Sales Quote",TRUE);
      ExtendedTextHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateExtendedTextLine@24(VAR ExtendedTextLine@1000 : Record 280;ExtendedTextHeader@1001 : Record 279);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      CLEAR(ExtendedTextLine);
      ExtendedTextLine.VALIDATE("Table Name",ExtendedTextHeader."Table Name");
      ExtendedTextLine.VALIDATE("No.",ExtendedTextHeader."No.");
      ExtendedTextLine.VALIDATE("Language Code",ExtendedTextHeader."Language Code");
      ExtendedTextLine.VALIDATE("Text No.",ExtendedTextHeader."Text No.");
      RecRef.GETTABLE(ExtendedTextLine);
      ExtendedTextLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ExtendedTextLine.FIELDNO("Line No.")));
      ExtendedTextLine.VALIDATE(Text,LibraryUtility.GenerateRandomCode(ExtendedTextLine.FIELDNO(Text),
          DATABASE::"Extended Text Line"));
      ExtendedTextLine.INSERT(TRUE);
    END;

    PROCEDURE CreateItem@1(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,LibraryRandom.RandDecInDecimalRange(1,10000,2),0);
    END;

    PROCEDURE CreateItemAsService@5(VAR Item@1000 : Record 27);
    VAR
      ItemNew@1001 : Record 27;
      Item2@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item2);
      ItemNew.INIT;
      ItemNew.INSERT(TRUE);
      ItemNew.VALIDATE("Base Unit of Measure",FindUnitOfMeasure);
      ItemNew.VALIDATE("Unit Price",LibraryRandom.RandDecInDecimalRange(1.0,10000.0,2));
      ItemNew.VALIDATE(Type,Item.Type::Service);
      ItemNew.VALIDATE("Gen. Prod. Posting Group",Item2."Gen. Prod. Posting Group");
      IF ItemNew."VAT Prod. Posting Group" = '' THEN
        ItemNew.VALIDATE("VAT Prod. Posting Group",Item2."VAT Prod. Posting Group");
      ItemNew.Description := ItemNew."No.";
      ItemNew.MODIFY;
      Item.GET(ItemNew."No.");
    END;

    PROCEDURE CreateItemCrossReference@22(VAR ItemCrossReference@1000 : Record 5717;Item@1001 : Record 27;Item2@1002 : Record 27;ReferenceType@1003 : Option);
    BEGIN
      CLEAR(ItemCrossReference);
      ItemCrossReference.VALIDATE("Item No.",Item."No.");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ReferenceType);
      ItemCrossReference.VALIDATE("Cross-Reference No.",Item2."No.");
      ItemCrossReference.INSERT(TRUE);
    END;

    PROCEDURE CreateJob@56(VAR Job@1000 : Record 167);
    BEGIN
      LibraryJob.CreateJob(Job);
    END;

    PROCEDURE CreateResponsabilityCenter@27(VAR ResponsibilityCenter@1000 : Record 5714);
    BEGIN
      CLEAR(ResponsibilityCenter);
      ResponsibilityCenter.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ResponsibilityCenter.FIELDNO(Code),
          DATABASE::"Responsibility Center"));
      ResponsibilityCenter.INSERT;
    END;

    PROCEDURE CreateSalesInvoiceHeader@3(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
    END;

    PROCEDURE CreateSalesCrMemoHeader@21(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");
    END;

    PROCEDURE CreateSalesQuoteHeaderWithLines@28(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18;Item@1003 : Record 27;NumberOfLines@1002 : Integer;ItemQuantity@1004 : Integer);
    VAR
      SalesLine@1005 : Record 37;
      I@1006 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    PROCEDURE CreateSalesQuoteHeader@30(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,Customer."No.");
    END;

    PROCEDURE CreateSalesLine@16(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Item@1004 : Record 27;Quantity@1005 : Decimal);
    BEGIN
      // unable to use the page testability to perform this action because of following reason
      // PageTestability can't handle modal dialogs such as availability warnings when creating a sales invoice line.
      // Also, it can currently not return the Sales Line record (we need additional GetRecord or GetKey capability in PageTestability)
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);
    END;

    PROCEDURE CreatePurchaseInvoiceHeader@39(VAR PurchHeader@1000 : Record 38;Vend@1001 : Record 23);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,Vend."No.");
    END;

    PROCEDURE CreatePurchaseLine@38(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;Item@1004 : Record 27;Qty@1005 : Decimal);
    BEGIN
      // unable to use the page testability to perform this action because of following reason
      // PageTestability can't handle modal dialogs such as availability warnings when creating a sales invoice line.
      // Also, it can currently not return the Sales Line record (we need additional GetRecord or GetKey capability in PageTestability)
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Qty);
    END;

    PROCEDURE CreatePurchaseCrMemoHeader@34(VAR PurchHeader@1000 : Record 38;Vend@1001 : Record 23);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::"Credit Memo",Vend."No.");
    END;

    PROCEDURE CreateStandardSalesCode@10(VAR StandardSalesCode@1000 : Record 170);
    BEGIN
      StandardSalesCode.INIT;
      StandardSalesCode.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(StandardSalesCode.FIELDNO(Code),DATABASE::"Standard Sales Code"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Standard Sales Code",StandardSalesCode.FIELDNO(Code))));
      StandardSalesCode.VALIDATE(Description,StandardSalesCode.Code);
      StandardSalesCode.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardSalesLine@15(VAR StandardSalesLine@1000 : Record 171;StandardSalesCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      StandardSalesLine.INIT;
      StandardSalesLine.VALIDATE("Standard Sales Code",StandardSalesCode);
      RecRef.GETTABLE(StandardSalesLine);
      StandardSalesLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,StandardSalesLine.FIELDNO("Line No.")));
      StandardSalesLine.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardPurchaseCode@43(VAR StandardPurchaseCode@1000 : Record 173);
    BEGIN
      StandardPurchaseCode.INIT;
      StandardPurchaseCode.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(StandardPurchaseCode.FIELDNO(Code),DATABASE::"Standard Purchase Code"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Standard Purchase Code",StandardPurchaseCode.FIELDNO(Code))));
      StandardPurchaseCode.VALIDATE(Description,StandardPurchaseCode.Code);
      StandardPurchaseCode.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardPurchaseLine@42(VAR StandardPurchaseLine@1000 : Record 174;StandardPurchaseCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      StandardPurchaseLine.INIT;
      StandardPurchaseLine.VALIDATE("Standard Purchase Code",StandardPurchaseCode);
      RecRef.GETTABLE(StandardPurchaseLine);
      StandardPurchaseLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,StandardPurchaseLine.FIELDNO("Line No.")));
      StandardPurchaseLine.INSERT(TRUE);
    END;

    PROCEDURE CreateVendor@32(VAR Vendor@1000 : Record 23);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
    END;

    PROCEDURE CreateVendorPurchaseCode@41(VAR StandardVendorPurchaseCode@1000 : Record 175;VendorNo@1001 : Code[20];Code@1002 : Code[10]);
    BEGIN
      StandardVendorPurchaseCode.INIT;
      StandardVendorPurchaseCode.VALIDATE("Vendor No.",VendorNo);
      StandardVendorPurchaseCode.VALIDATE(Code,Code);
      StandardVendorPurchaseCode.INSERT(TRUE);
    END;

    PROCEDURE CreateVendorTemplate@4(VAR ConfigTemplateHeader@1003 : Record 8618);
    VAR
      Vend@1002 : Record 23;
    BEGIN
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeader.VALIDATE("Table ID",DATABASE::Vendor);
      ConfigTemplateHeader.MODIFY(TRUE);

      CreateVendorTemplateLine(ConfigTemplateHeader,Vend.FIELDNO("Phone No."),
        Vend.FIELDNAME("Phone No."),'');
      CreateVendorTemplateLine(ConfigTemplateHeader,Vend.FIELDNO("Our Account No."),
        Vend.FIELDNAME("Our Account No."),'');
      CreateVendorTemplateLine(ConfigTemplateHeader,Vend.FIELDNO("Gen. Bus. Posting Group"),
        Vend.FIELDNAME("Gen. Bus. Posting Group"),FindGenBusPostingGroup);
      CreateVendorTemplateLine(ConfigTemplateHeader,Vend.FIELDNO("Vendor Posting Group"),
        Vend.FIELDNAME("Vendor Posting Group"),LibraryPurchase.FindVendorPostingGroup);
    END;

    PROCEDURE CreateVendorTemplateLine@8(ConfigTemplateHeader@1000 : Record 8618;FieldNo@1002 : Integer;FieldName@1003 : Text[30];DefaultValue@1004 : Text[50]);
    VAR
      ConfigTemplateLine@1001 : Record 8619;
    BEGIN
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      ConfigTemplateLine.VALIDATE("Field ID",FieldNo);
      ConfigTemplateLine.VALIDATE("Field Name",FieldName);
      IF DefaultValue <> '' THEN
        ConfigTemplateLine.VALIDATE("Default Value",DefaultValue)
      ELSE
        ConfigTemplateLine.VALIDATE("Default Value",LibraryUtility.GenerateRandomCode(FieldNo,DATABASE::Vendor));
      ConfigTemplateLine.VALIDATE("Skip Relation Check",FALSE);
      ConfigTemplateLine.MODIFY(TRUE);
    END;

    PROCEDURE FindGenBusPostingGroup@36() : Code[10];
    VAR
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      GeneralPostingSetup.FINDLAST;
      EXIT(GeneralPostingSetup."Gen. Bus. Posting Group");
    END;

    LOCAL PROCEDURE FindUnitOfMeasure@13() : Code[10];
    VAR
      UnitOfMeasure@1000 : Record 204;
    BEGIN
      UnitOfMeasure.FINDFIRST;
      EXIT(UnitOfMeasure.Code);
    END;

    PROCEDURE FindVATBusPostingGroupZeroVAT@6(VATProdPostingGroupCode@1001 : Code[10]) : Code[10];
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroupCode);
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.SETRANGE("VAT %",0);
      IF NOT VATPostingSetup.FINDLAST THEN
        CreateZeroVATPostingSetupByProdGroupCode(VATPostingSetup,VATProdPostingGroupCode);
      EXIT(VATPostingSetup."VAT Bus. Posting Group");
    END;

    PROCEDURE PostSalesInvoice@12(VAR SalesHeader@1000 : Record 36) : Code[20];
    BEGIN
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE));
    END;

    PROCEDURE PostPurchaseInvoice@40(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    BEGIN
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE));
    END;

    PROCEDURE SetInvoiceDiscountToCustomer@9(VAR Customer@1000 : Record 18;DiscPct@1004 : Decimal;MinimumAmount@1002 : Decimal;CurrencyCode@1003 : Code[10]);
    VAR
      CustInvoiceDisc@1001 : TestPage 23;
      MiniCustomerCard@1005 : TestPage 1300;
    BEGIN
      MiniCustomerCard.OPENEDIT;
      MiniCustomerCard.GOTORECORD(Customer);
      CustInvoiceDisc.TRAP;
      MiniCustomerCard."Page Cust. Invoice Discounts".INVOKE;
      WITH CustInvoiceDisc DO BEGIN
        NEW;
        "Currency Code".SETVALUE(CurrencyCode);
        "Minimum Amount".SETVALUE(MinimumAmount);
        "Discount %".SETVALUE(DiscPct);
        OK.INVOKE;
      END;
      MiniCustomerCard.OK.INVOKE;
    END;

    PROCEDURE SetInvoiceDiscountToVendor@33(VAR Vendor@1000 : Record 23;DiscPct@1004 : Decimal;MinimumAmount@1002 : Decimal;CurrencyCode@1003 : Code[10]);
    VAR
      VendInvoiceDisc@1001 : TestPage 28;
      MiniVendorCard@1005 : TestPage 1330;
    BEGIN
      MiniVendorCard.OPENEDIT;
      MiniVendorCard.GOTORECORD(Vendor);
      VendInvoiceDisc.TRAP;
      MiniVendorCard."Page Vend. Invoice Discounts".INVOKE;
      WITH VendInvoiceDisc DO BEGIN
        NEW;
        "Currency Code".SETVALUE(CurrencyCode);
        "Minimum Amount".SETVALUE(MinimumAmount);
        "Discount %".SETVALUE(DiscPct);
        OK.INVOKE;
      END;
      MiniVendorCard.OK.INVOKE;
    END;

    PROCEDURE SetVATBusPostingGrPriceSetup@102(VATProdPostingGroupCode@1000 : Code[10];PricesIncludingVAT@1001 : Boolean);
    VAR
      VATPostingSetup@1002 : Record 325;
      SalesSetup@1003 : Record 311;
    BEGIN
      IF NOT PricesIncludingVAT THEN
        EXIT;

      SalesSetup.GET;
      IF NOT VATPostingSetup.GET(SalesSetup."VAT Bus. Posting Gr. (Price)",VATProdPostingGroupCode) THEN BEGIN
        VATPostingSetup.INIT;
        VATPostingSetup.VALIDATE("VAT Bus. Posting Group",SalesSetup."VAT Bus. Posting Gr. (Price)");
        VATPostingSetup.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupCode);
        VATPostingSetup.INSERT;
      END;
    END;

    PROCEDURE CreateVATPostingSetup@45(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT",LibraryRandom.RandIntInRange(1,25));
    END;

    PROCEDURE CreateGLAccount@46() : Code[20];
    BEGIN
      EXIT(LibraryERM.CreateGLAccountNo);
    END;

    PROCEDURE FindVATProdPostingGroupZeroVAT@48(VATBusPostingGroupCode@1000 : Code[10]) : Code[10];
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      WITH VATPostingSetup DO BEGIN
        SETFILTER("VAT Bus. Posting Group",VATBusPostingGroupCode);
        SETFILTER("VAT Prod. Posting Group",'<>%1','');
        SETRANGE("VAT Calculation Type","VAT Calculation Type"::"Normal VAT");
        SETRANGE("VAT %",0);
        IF NOT FINDLAST THEN
          CreateZeroVATPostingSetupByBusGroupCode(VATPostingSetup,VATBusPostingGroupCode);
        EXIT("VAT Prod. Posting Group");
      END;
    END;

    PROCEDURE CreateGLAccountWithPostingSetup@50(VAR GLAccount@1000 : Record 15);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      VATPostingSetup.SETFILTER("VAT %",'<>%1',0);
      IF NOT VATPostingSetup.FINDLAST THEN
        CreateVATPostingSetup(VATPostingSetup);

      WITH GLAccount DO BEGIN
        GET(CreateGLAccount);
        VALIDATE(Name,"No.");
        VALIDATE("Direct Posting",TRUE);
        VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
        VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateZeroVATPostingSetupByProdGroupCode@47(VAR VATPostingSetup@1000 : Record 325;VATProdPostingGroupCode@1001 : Code[10]);
    VAR
      VATBusPostingGroup@1002 : Record 323;
    BEGIN
      VATBusPostingGroup.INIT;
      VATBusPostingGroup.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(
          VATBusPostingGroup.FIELDNO(Code),DATABASE::"VAT Business Posting Group"));
      VATBusPostingGroup.INSERT;

      CreateZeroVATPostingSetup(VATPostingSetup,VATBusPostingGroup.Code,VATProdPostingGroupCode);
    END;

    LOCAL PROCEDURE CreateZeroVATPostingSetupByBusGroupCode@49(VAR VATPostingSetup@1000 : Record 325;VATBusPostingGroupCode@1001 : Code[10]);
    VAR
      VATProdPostingGroup@1002 : Record 324;
    BEGIN
      VATProdPostingGroup.INIT;
      VATProdPostingGroup.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(
          VATProdPostingGroup.FIELDNO(Code),DATABASE::"VAT Product Posting Group"));
      VATProdPostingGroup.INSERT;

      CreateZeroVATPostingSetup(VATPostingSetup,VATBusPostingGroupCode,VATProdPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateZeroVATPostingSetup@44(VAR VATPostingSetup@1002 : Record 325;VATBusPostingGroupCode@1000 : Code[10];VATProdPostingGroupCode@1001 : Code[10]);
    BEGIN
      WITH VATPostingSetup DO BEGIN
        INIT;
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupCode);
        VALIDATE(
          "VAT Identifier",
          LibraryUtility.GenerateRandomCode(
            FIELDNO("VAT Identifier"),DATABASE::"VAT Posting Setup"));
        VALIDATE("VAT %",0);
        VALIDATE("Sales VAT Account",CreateGLAccount);
        VALIDATE("Purchase VAT Account",CreateGLAccount);
        INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

