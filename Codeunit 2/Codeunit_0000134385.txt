OBJECT Codeunit 134385 ERM Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1006 : Codeunit 131300;
      LibraryPmtDiscSetup@1019 : Codeunit 131303;
      LibrarySales@1005 : Codeunit 130509;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryVariableStorage@1004 : Codeunit 131004;
      LibrarySetupStorage@1018 : Codeunit 131009;
      LibraryWarehouse@1028 : Codeunit 132204;
      DocType@1024 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      isInitialized@1001 : Boolean;
      VATAmountError@1007 : TextConst 'ENU=VAT %1 must be %2 in %3.';
      FieldError@1008 : TextConst 'ENU=%1 must be %2 in %3.';
      DiscountError@1009 : TextConst 'ENU=Discount Amount must be equal to %1.';
      PostError@1011 : TextConst 'ENU="Amount must be positive in %1 %2='''',%3='''',%4=''0''."';
      SalesCaption@1010 : TextConst 'ENU=Total Sales';
      ValidateError@1012 : TextConst 'ENU="%1 must be %2 in %3 %4 = %5."';
      ColumnWrongVisibilityErr@1013 : TextConst 'ENU=Column[%1] has wrong visibility';
      CopyDocForReturnOrderMsg@1014 : TextConst 'ENU=One or more return document lines were not copied. This is because quantities on the posted';
      RowVisibleErr@1026 : TextConst 'ENU="Row no %1 with property Show = No is visible on Sales Analysis Matrix page."';
      ColumnShowNeverInitializedErr@1027 : TextConst 'ENU="Column with property Show = Never is initialized on Sales Analysis Matrix page."';
      ColumnCaptionErr@1016 : TextConst 'ENU=Column Caption must match.';
      UpdateBinCodeErr@1017 : TextConst 'ENU=Bin Code should not be updated';
      CopyDocDateOrderConfirmMsg@1020 : TextConst 'ENU=The Posting Date of the copied document is different from the Posting Date of the original document. The original document already has a Posting No. based on a number series with date order. When you post the copied document, you may have the wrong date order in the posted documents.\Do you want to continue?';
      DocumentShouldNotBeCopiedErr@1021 : TextConst 'ENU=Document should not be copied';
      DocumentShouldBeCopiedErr@1022 : TextConst 'ENU=Document should be copied';
      WrongConfirmationMsgErr@1023 : TextConst 'ENU=Wrong confirmation message';
      TestFieldTok@1094 : TextConst 'ENU=TestField';
      VATBusPostingGroupErr@1095 : TextConst 'ENU=VAT Bus. Posting Group must be equal to';
      HandlingTimeErr@1029 : TextConst 'ENU=Wrong Outbound Whse. Handling Time';

    [Test]
    PROCEDURE SalesReturnOrderCreation@51();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Check if the system allows creating a New Sales Return Order.

      // Setup.
      Initialize;

      // Exercise: Create Customer and Return Sales Order.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);

      // Verify: Verify Sales Return Order.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnReturnOrder@16();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      VATAmountLine@1005 : Record 290;
      GeneralLedgerSetup@1006 : Record 98;
      QtyType@1004 : 'General,Invoicing,Shipping';
    BEGIN
      // Check VAT Amount as on Sales Return Order.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);

      // Exercise: Calculate VAT Amount and Release Sales Return Order.
      SalesLine.CalcVATAmountLines(QtyType::Invoicing,SalesHeader,SalesLine,VATAmountLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS(Amount);

      // Verify: Check VAT Amount on Sales Return Line.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        SalesHeader.Amount * SalesLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(VATAmountError,VATAmountLine.FIELDCAPTION("VAT Amount"),SalesHeader.Amount * SalesLine."VAT %" / 100,
          VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE InvoiceDiscountReturnOrder@53();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      InvoiceDiscountAmount@1005 : Decimal;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Check Invoice Discount on Sales Return Order and in G/L entry after posting.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",SetInvDiscForCustomer);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise: Calculate Invoice Discount Amount and Post Sales Return Order.
      DocumentNo := CalculateInvDiscount(SalesLine,InvoiceDiscountAmount,SalesHeader);

      // Verify: Verify Invoice Discount Amount.
      VerifyInvoiceDiscountAmount(SalesLine,-InvoiceDiscountAmount,DocumentNo);
    END;

    [Test]
    PROCEDURE LineDiscountReturnOrder@54();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      GeneralLedgerSetup@1005 : Record 98;
      LineAmount@1004 : Decimal;
    BEGIN
      // Check Line Discount on Sales Return Order.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);
      SalesLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);

      // Exercise: Calculate Expected Discount Amount.
      LineAmount := (SalesLine.Quantity * SalesLine."Unit Price") * ((100 - SalesLine."Line Discount %") / 100);

      // Verify: Verify Line Discount Amount.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        LineAmount,SalesLine."Line Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,SalesLine.FIELDCAPTION("Line Amount"),LineAmount,SalesLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ApplyInvoiceFromReturnOrder@24();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1002 : Record 37;
      SalesCrMemoHeader@1004 : Record 114;
      VATAmount@1006 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Check if Return Order can be applied against any document.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CreateCustomer);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Create Sales Return Order needs to be created using Sales Invoice Item and Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::"Return Order",SalesLine."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader2,SalesLine.Type::Item,SalesLine."No.",SalesLine.Quantity);

      // Exercise: Calculate Total Line Amount and Post Sales Order.
      VATAmount := -(SalesLine2."Line Amount" * (100 + SalesLine2."VAT %")) / 100;
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Verify: Checking Sales Credit Memo and Customer Ledger Entry
      SalesCrMemoHeader.GET(DocumentNo);
      VerifyCustomerLedgerEntry(SalesHeader2."No.",VATAmount);
    END;

    [Test]
    PROCEDURE LocationforReturnOrder@27();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      LocationCode@1002 : Code[10];
      OldRequireReceive@1004 : Boolean;
    BEGIN
      // Check that Posted Credit Memo has Correct Location after Posting Sales Return Order.

      // Setup. Find Location with Require Receive with True and Create Sales Return Order.
      Initialize;
      OldRequireReceive := FindAndUpdateLocation(LocationCode,TRUE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Return Qty. to Receive",SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);

      // Exercise: Post Sales Return Order with Receive and Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify the Location on Posted Sales Credit Memo.
      VerifyLocationOnCreditMemo(SalesHeader."No.",SalesLine."Location Code");

      // Tear Down: Roll Back Location with previous state.
      FindAndUpdateLocation(LocationCode,OldRequireReceive);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CurrencyOnReturnOrder@35();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Check that Currency has been posted correctly on Posted Credit Memo after Post Sales Return Order.

      // Setup: Create Sales Return Order with Currency and Random Quantity for Sales Line.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);
      SalesHeader.VALIDATE("Currency Code",CreateCurrency);
      SalesHeader.MODIFY(TRUE);
      SalesLine.VALIDATE("Qty. to Ship",0);  // Qty. to Ship must be 0 in Sales Return Order.

      // Exercise: Post Sales Return Order with Ship and Invoice option.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Posted Credit Memo for Currency.
      VerifyCurrencyOnPostedOrder(SalesHeader."No.",SalesHeader."Currency Code");
    END;

    [Test]
    PROCEDURE CopyDocumentFromReturnOrder@5();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Check Copy Document Functionalities from Sales Return Order.

      // Setup: Create Sales Return Order.
      Initialize;
      SetSalesandReceivablesSetup;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      DocumentNo := SalesHeader."No.";

      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesHeader.INSERT(TRUE);  // Using Copy Document feature need New record only without Customer.

      // Exercise: Copy Document from Sales Order to Sales Return Order.
      CopyDocument(SalesHeader,DocType::Order,DocumentNo);

      // Verify: Verify Sales Line created on Sales Return Order after Copy Document from Sales Order.
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE PartialSalesOrder@56();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Create a Partial Sales Order and verify Quantity Shipped after posting.

      // Setup: Create Partial Sales Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      ModifySalesLineQtyToShip(SalesLine);

      // Exercise: Post Partial Sales Order.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify partial Sales Order.
      VerifyPartialSalesOrder(SalesLine,PostedDocumentNo,SalesLine."Qty. to Ship");
    END;

    [Test]
    PROCEDURE VATAmountOnCreditMemo@13();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Test VAT Amount on Sales Credit Memo.

      // 1. Setup: Find a Customer.
      Initialize;

      // 2. Exercise: Create a Sales Credit Memo.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",'');
      CreateSalesLines(SalesLine,SalesHeader);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // 3. Verify: Verify VAT Amount on Sales Credit Memo.
      VerifyVATOnSalesCreditMemo(SalesLine);
    END;

    [Test]
    PROCEDURE PostSalesReturnOrder@7();
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      TempSalesLine@1009 : TEMPORARY Record 37;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      // Test post a Sales Return Order and verify if the system is creating Sales Receipt Line, GL Entry, VAT Entry
      // Customer Ledger Entry and Value Entry.

      // 1. Setup: Create a Sales Return Order.
      Initialize;
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CreateCustomer);
      CreateSalesLines(SalesLine,SalesHeader);
      CopySalesLines(TempSalesLine,SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT");

      // 2. Exercise: Post Sales Return Order as Receive and Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify that the Sales Receipt Line is created. Verify G/L Entry, VAT Entry, Customer Ledger Entry and Value Entry
      // for the Sales Return Order.
      VerifyPostedReturnOrderLine(TempSalesLine);
      FindSalesCrMemoHeader(SalesCrMemoHeader,SalesHeader."No.");
      VerifyGLEntryForCreditMemo(SalesCrMemoHeader."No.",SalesHeader."Amount Including VAT");
      VerifyLedgerEntry(SalesCrMemoHeader."No.",SalesHeader."Amount Including VAT");
      VerifyValueEntries(SalesHeader."No.",SalesHeader.Amount);
    END;

    [Test]
    PROCEDURE LineDiscountOnCreditMemo@37();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLineDiscount@1003 : Record 7004;
    BEGIN
      // Test Line Discount on Sales Credit Memo.

      // 1. Setup: Setup Line Discount.
      Initialize;
      SetupLineDiscount(SalesLineDiscount);

      // 2. Exercise: Create a Sales Credit Memo.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesLineDiscount."Sales Code");
      SalesLinesWithLineDiscount(SalesLine,SalesHeader,SalesLineDiscount);

      // 3. Verify: Verify Line Discount Amount on Sales Credit Memo.
      VerifyLineDiscountOnCreditMemo(SalesLine);
    END;

    [Test]
    PROCEDURE LineDiscountOnGLEntry@42();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
      SalesLineDiscount@1000 : Record 7004;
      SalesCrMemoHeader@1005 : Record 114;
    BEGIN
      // Test post a Sales Return Order and verify GL Entry for the Line Discount Amount.

      // 1. Setup: Setup Line Discount and create a Sales Return Order.
      Initialize;
      SetupLineDiscount(SalesLineDiscount);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLineDiscount."Sales Code");
      SalesLinesWithLineDiscount(SalesLine,SalesHeader,SalesLineDiscount);
      CopySalesLines(TempSalesLine,SalesLine);

      // 2. Exercise: Post Sales Return Order as Receive and Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify that GL Entry exists for the Line Discount after posting Sales Return Order.
      FindSalesCrMemoHeader(SalesCrMemoHeader,SalesHeader."No.");
      Assert.AreEqual(
        SumLineDiscountAmount(TempSalesLine,SalesHeader."No."),-TotalLineDiscountInGLEntry(TempSalesLine,SalesCrMemoHeader."No."),
        STRSUBSTNO(DiscountError,TempSalesLine.FIELDCAPTION("Line Discount Amount")));
    END;

    [Test]
    PROCEDURE InvoiceDiscountOnCreditMemo@78();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      CustInvoiceDisc@1001 : Record 19;
    BEGIN
      // Test Invoice Discount on a Sales Credit Memo.

      // 1. Setup: Setup Invoice Discount.
      Initialize;
      SetupInvoiceDiscount(CustInvoiceDisc);

      // 2. Exercise: Create a Sales Credit Memo and calculate Invoice Discount.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustInvoiceDisc.Code);
      CreateSalesLines(SalesLine,SalesHeader);
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);

      // 3. Verify: Verify Invoice Discount Amount on Sales Credit Memo.
      VerifyInvoiceDiscount(SalesLine,CustInvoiceDisc);
    END;

    [Test]
    PROCEDURE InvoiceDiscountOnGLEntry@84();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
      CustInvoiceDisc@1000 : Record 19;
      SalesCrMemoHeader@1004 : Record 114;
    BEGIN
      // Test Invoice Discount posted in GL Entry for the Sales Return Order.

      // 1. Setup: Setup Invoice Discount and create a Sales Return Order.
      Initialize;
      SetupInvoiceDiscount(CustInvoiceDisc);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustInvoiceDisc.Code);
      CreateSalesLines(SalesLine,SalesHeader);
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
      CopySalesLines(TempSalesLine,SalesLine);

      // 2. Exercise: Post the Sales Return Order as Receive and Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify the Invoice Discount in GL Entry for the Sales Return Order.
      FindSalesCrMemoHeader(SalesCrMemoHeader,SalesHeader."No.");
      Assert.AreEqual(
        SumInvoiceDiscountAmount(TempSalesLine,SalesHeader."No."),-TotalInvoiceDiscountInGLEntry(TempSalesLine,SalesCrMemoHeader."No."),
        STRSUBSTNO(DiscountError,TempSalesLine.FIELDCAPTION("Inv. Discount Amount")));
    END;

    [Test]
    PROCEDURE ApplyInvoiceFromCreditMemo@36();
    VAR
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesLine@1004 : Record 37;
      TempSalesLine@1007 : TEMPORARY Record 37;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      // Test apply a Sales Invoice to the Sales Credit Memo.

      // 1. Setup: Create a Sales Invoice.
      Initialize;
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer);
      CreateSalesLines(SalesLine,SalesHeader);
      CopySalesLines(TempSalesLine,SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS("Amount Including VAT");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Create a Sales Return Order using Sales Invoice Item and Quantity.
      CLEAR(SalesLine);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::"Return Order",CreateCustomer);
      CreateSalesLinesFromDocument(TempSalesLine,SalesLine,SalesHeader2);

      // 2. Exercise: Post Sales Return Order as Receive and Invoice.
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // 3. Verify: Verify GL Entry for the Sales Return Order.
      FindSalesCrMemoHeader(SalesCrMemoHeader,SalesHeader2."No.");
      VerifyGLEntryForCreditMemo(SalesCrMemoHeader."No.",SalesHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE PostPartialSalesOrder@21();
    VAR
      CustomerPostingGroup@1002 : Record 92;
      GLEntry@1008 : Record 17;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      GeneralLedgerSetup@1006 : Record 98;
      DocumentNo@1007 : Code[20];
      TotalAmount@1009 : Decimal;
    BEGIN
      // Check GL Entry after Posting Partial Sales Order.

      // Setup: Create and Post Sales Order with Partial Shipment.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      ModifySalesLineQtyToShip(SalesLine);
      TotalAmount := SalesLine."Qty. to Ship" * SalesLine."Unit Price";
      TotalAmount := TotalAmount + (TotalAmount * SalesLine."VAT %" / 100);

      // Exercise.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify GL Entry for Partial Sales Invoice.
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      FindGLEntry(GLEntry,DocumentNo,CustomerPostingGroup."Receivables Account");
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        TotalAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),TotalAmount,GLEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesOrderNegativeErrorMsg@20();
    VAR
      GenJournalLine@1010 : Record 81;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Check Sales Order Posting Error Message when amount is Negative.

      // Setup: Create and Post Sales Order with Partial Shipment and modify Sales Line with Negative Amount.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      ModifySalesLineQtyToShip(SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Reopen Partial Sales Order and Modify Unit price with Negative Value.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
      SalesLine.VALIDATE("Unit Price",-SalesLine."Unit Price");
      SalesLine.MODIFY(TRUE);

      // Exercise: Try to Post Sales Order with Negative Amount.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Error Message raised during Negative amount posting of Sales Order.
      Assert.AreEqual(
        STRSUBSTNO(PostError,GenJournalLine.TABLECAPTION,GenJournalLine.FIELDCAPTION("Journal Template Name"),
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),SalesLine.FIELDCAPTION("Line No.")),GETLASTERRORTEXT,'Unknown Error');
    END;

    [Test]
    PROCEDURE ArchieveVersionSalesOrder@39();
    VAR
      SalesLineArchive@1004 : Record 5108;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Check Sales Line Archive for Archive Version after Posting Partial Sales Order.

      // Setup: Create and Post Sales Order with Partial Shipment.
      Initialize;
      ModifySalesAndReceivableSetup(TRUE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      ModifySalesLineQtyToShip(SalesLine);

      // Exercise: Post Sales Order with Ship.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify No. of Archived Versions fields on Sales Header and Sales Line Archive.
      // Take 1 as static because it will generate 1 on Posting of Sales Order on first time.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      SalesHeader.TESTFIELD("No. of Archived Versions",1);

      SalesLineArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesHeader."No.");
      SalesLineArchive.FINDFIRST;
      SalesLineArchive.TESTFIELD("Version No.",SalesHeader."No. of Archived Versions");
      SalesLineArchive.TESTFIELD("Qty. to Ship",SalesLine."Qty. to Ship");
      SalesLineArchive.TESTFIELD(Quantity,SalesLine.Quantity);
      SalesLineArchive.TESTFIELD("Qty. to Invoice",SalesLine."Qty. to Invoice");
    END;

    [Test]
    PROCEDURE SalesInvoiceWithACY@43();
    VAR
      SalesLine@1009 : Record 37;
      GeneralPostingSetup@1005 : Record 252;
      VATPostingSetup@1002 : Record 325;
      PostedDocumentNo@1010 : Code[20];
      CurrencyCode@1003 : Code[10];
      InvoiceAmountLCY@1001 : Decimal;
    BEGIN
      // Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Invoice with ACY.

      // Setup: Create Currency and Exchange Rate. Update Inv. Rounding Precision LCY and Additional Currency on General Ledger Setup.
      // Run Additional Reporting Currency and create Customer with Currency.
      Initialize;
      CreateAdditionalCurrencySetup(CurrencyCode);
      LibraryERM.SetInvRoundingPrecisionLCY(1);  // 1 used for Inv. Rounding Precision LCY according to script.
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);

      // Exercise: Create and Post Sales Invoice.
      CreateAndPostSalesDocument(SalesLine,VATPostingSetup,GeneralPostingSetup,SalesLine."Document Type"::Invoice,CurrencyCode);
      InvoiceAmountLCY := LibraryERM.ConvertCurrency(SalesLine."Line Amount",CurrencyCode,'',WORKDATE);

      // Verify: Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry.
      PostedDocumentNo := FindSalesInvoiceHeaderNo(SalesLine."Document No.");
      VerifyAmountOnGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",-InvoiceAmountLCY);
      VerifyAmountLCYOnCustLedger(PostedDocumentNo,InvoiceAmountLCY);
    END;

    [Test]
    PROCEDURE RemainingPmtDiscPossibleACY@40();
    VAR
      SalesLine@1007 : Record 37;
      VATPostingSetup@1011 : Record 325;
      GeneralPostingSetup@1005 : Record 252;
      CustLedgerEntry@1002 : Record 21;
      GenJournalLine@1009 : Record 81;
      CurrencyCode@1003 : Code[10];
      OldVATPercentage@1012 : Decimal;
      OldAdjustForPaymentDiscount@1015 : Boolean;
    BEGIN
      // Verify Remaining Amount on Customer Ledger Entry after posting payment against Remaining Payment Discount Ledger Entry with ACY.

      // Setup: Create Currency and Exchange Rate. Update Additional Currency on General Ledger Setup.
      // Run Additional Reporting Currency. Find VAT Posting Setup. Create and post Sales Invoice.
      Initialize;
      CreateAdditionalCurrencySetup(CurrencyCode);
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldVATPercentage := UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDiscount,TRUE,LibraryRandom.RandDec(10,2));
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      UpdateGeneralPostingSetup(GeneralPostingSetup,FindGLAccountNo);
      CreateAndPostSalesDocument(SalesLine,VATPostingSetup,GeneralPostingSetup,SalesLine."Document Type"::Invoice,CurrencyCode);

      // Exercise: Update Remaining Pmt. Disc. Possible on Customer Ledger Entry. Create and post payment against invoice.
      UpdateRemainingPmtDiscPossible(CustLedgerEntry,FindSalesInvoiceHeaderNo(SalesLine."Document No."));
      LibrarySales.CreatePaymentAndApplytoInvoice(
        GenJournalLine,SalesLine."Sell-to Customer No.",FindSalesInvoiceHeaderNo(SalesLine."Document No."),
        -CustLedgerEntry.Amount / 2);

      // Verify: Verify Amount on Customer Ledger Entry after posting the payment against Remaining Payment Discount Ledger Entry.
      VerifyRemainingAmountOnLedger(FindSalesInvoiceHeaderNo(SalesLine."Document No."),CustLedgerEntry."Document Type"::Invoice,0);
      VerifyRemainingAmountOnLedger(GenJournalLine."Document No.",CustLedgerEntry."Document Type"::Payment,0);

      // Tear down: Rollback Setup changes.
      UpdateGeneralPostingSetup(GeneralPostingSetup,'');
      UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDiscount,OldAdjustForPaymentDiscount,OldVATPercentage);
    END;

    [Test]
    PROCEDURE SalesPersonCodeSalesInvoice@68();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      CustLedgerEntry@1007 : Record 21;
      GLEntry@1005 : Record 17;
      PaymentMethod@1003 : Record 289;
      SalespersonPurchaser@1002 : Record 13;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      GLAccount@1009 : Record 15;
      DocumentNo@1004 : Code[20];
      Amount@1006 : Decimal;
    BEGIN
      // Check GL And Customer Ledger Entry for Amount and SalesPerson Code after Posting Sales Invoice.

      // Setup: Create and Post Sales Invoice with Payment Method and Sales Person Code.
      Initialize;

      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreatePaymentMethod(PaymentMethod);
      PaymentMethod.VALIDATE("Bal. Account Type",PaymentMethod."Bal. Account Type"::"G/L Account");
      PaymentMethod.VALIDATE("Bal. Account No.",GLAccount."No.");
      PaymentMethod.MODIFY;

      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CreateCustomer);
      SalesHeader.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      SalesHeader.VALIDATE("Payment Method Code",PaymentMethod.Code);
      SalesHeader.MODIFY(TRUE);
      Amount := SalesLine."Line Amount" + (SalesLine."Line Amount" * SalesLine."VAT %" / 100);

      // Exercise.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify GL and Customer Ledger Entry for Amount and SalesPerson Code.
      GeneralLedgerSetup.GET;
      FindGLEntry(GLEntry,DocumentNo,PaymentMethod."Bal. Account No.");
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));

      FindCustLedgerEntry(CustLedgerEntry,DocumentNo,CustLedgerEntry."Document Type"::Payment);
      Assert.AreEqual(
        SalesHeader."Salesperson Code",CustLedgerEntry."Salesperson Code",
        STRSUBSTNO(FieldError,SalesHeader.FIELDCAPTION("Salesperson Code"),
          SalesHeader."Salesperson Code",CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CustomerStatisticsYearToDate@71();
    VAR
      Customer@1001 : Record 18;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      CustomerStatisticsFactBox@1003 : TestPage 9082;
    BEGIN
      // Verify that program should show those value on YTD which one is posted in Current year and the
      // caption as Total Sales (LCY) in Customer Statistics-Bill to Customer Fact Box on Customer Card.

      // Setup: Create Customer, select General Journal Batch, post 2 general journal lines one for the current year and other
      // for previous year.
      Initialize;
      CreateAccountingPeriod;
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Posting Date",CALCDATE('<-1Y>',WORKDATE));
      GenJournalLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type",
        GenJournalLine."Account Type",GenJournalLine."Account No.",GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      CustomerStatisticsFactBox.OPENVIEW;
      CustomerStatisticsFactBox.FILTER.SETFILTER("No.",Customer."No.");

      // Verify: Verify that Sales(LCY) contains value of current year sales and caption as Total Sales (LCY) on Customer Statistics FactBox.
      Assert.AreEqual(
        FORMAT(GenJournalLine.Amount),CustomerStatisticsFactBox."Sales (LCY)".VALUE,
        STRSUBSTNO(FieldError,Customer.FIELDCAPTION("Sales (LCY)"),
          FORMAT(GenJournalLine.Amount),CustomerStatisticsFactBox.CAPTION));
      Assert.IsTrue(
        STRPOS(CustomerStatisticsFactBox."Sales (LCY)".CAPTION,STRSUBSTNO(SalesCaption)) = 1,
        STRSUBSTNO(
          FieldError,CustomerStatisticsFactBox."Sales (LCY)".CAPTION,SalesCaption,CustomerStatisticsFactBox."Sales (LCY)".CAPTION));
    END;

    [Test]
    PROCEDURE SalesCreditMemoWithACY@79();
    VAR
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      GeneralPostingSetup@1006 : Record 252;
      CurrencyCode@1002 : Code[10];
      DocumentNo@1009 : Code[20];
      VATAmountLCY@1010 : Decimal;
    BEGIN
      // Verify Amount and Additional Currency Amount on G/L Entry and Amount LCY on Customer Ledger Entry after
      // posting Sales Credit Memo with ACY.

      // Setup: Create Currency and Exchange Rate. Update Additional Currency on General Ledger Setup.
      // Run Additional Reporting Currency and create Customer with Currency. Create Sales Credit Memo.
      Initialize;
      CreateAdditionalCurrencySetup(CurrencyCode);
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",CreateCustomer);

      // Exercise: Post Sales Credit Memo.
      VATAmountLCY := SalesLine."Line Amount" * SalesLine."VAT %" / 100;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry.
      DocumentNo := FindSalesCreditMemoHeaderNo(SalesLine."Document No.");
      VerifyACYAmountOnGLEntry(DocumentNo,GeneralPostingSetup."Sales Credit Memo Account",SalesLine."Line Amount",CurrencyCode);
    END;

    [Test]
    PROCEDURE SalesCreditMemoWithPaymentDisc@77();
    VAR
      GeneralPostingSetup@1000 : Record 252;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      VATPostingSetup@1001 : Record 325;
      OldAdjustForPaymentDisc@1009 : Boolean;
      DocumentNo@1005 : Code[20];
      OldVATPercentage@1008 : Decimal;
      VATAmountLCY@1006 : Decimal;
    BEGIN
      // Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Credit Memo with Adjust for Payment Disc.

      // Setup: Update Additional Currency on General Ledger Setup. Create Sales Credit Memo.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldVATPercentage := UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDisc,TRUE,LibraryRandom.RandDec(10,2));
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      UpdateGeneralPostingSetup(GeneralPostingSetup,FindGLAccountNo);

      // Exercise: Create and Post Sales Invoice.
      CreateAndPostSalesDocument(SalesLine,VATPostingSetup,GeneralPostingSetup,SalesHeader."Document Type"::"Credit Memo",'');
      VATAmountLCY := SalesLine."Line Amount" * SalesLine."VAT %" / 100;

      // Verify: Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry.
      DocumentNo := FindSalesCreditMemoHeaderNo(SalesLine."Document No.");
      VerifyAmountOnGLEntry(DocumentNo,GeneralPostingSetup."Sales Credit Memo Account",SalesLine."Line Amount");

      // Tear down: Rollback Setup changes.
      UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDisc,OldAdjustForPaymentDisc,OldVATPercentage);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentDisc@74();
    VAR
      GeneralPostingSetup@1000 : Record 252;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      VATPostingSetup@1001 : Record 325;
      OldAdjustForPaymentDisc@1009 : Boolean;
      DocumentNo@1005 : Code[20];
      OldVATPercentage@1008 : Decimal;
      VATAmountLCY@1006 : Decimal;
    BEGIN
      // Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Invoice with Adjust for Payment Disc.

      // Setup: Update Additional Currency on General Ledger Setup. Create Sales Credit Memo.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldVATPercentage := UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDisc,TRUE,LibraryRandom.RandDec(10,2));
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      UpdateGeneralPostingSetup(GeneralPostingSetup,FindGLAccountNo);

      // Exercise: Create and Post Sales Invoice.
      CreateAndPostSalesDocument(SalesLine,VATPostingSetup,GeneralPostingSetup,SalesHeader."Document Type"::Invoice,'');
      VATAmountLCY := SalesLine."Line Amount" * SalesLine."VAT %" / 100;

      // Verify: Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry.
      DocumentNo := FindSalesInvoiceHeaderNo(SalesLine."Document No.");
      VerifyAmountOnGLEntry(DocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount");

      // Tear down: Rollback Setup changes.
      UpdateVATPostingSetup(VATPostingSetup,OldAdjustForPaymentDisc,OldAdjustForPaymentDisc,OldVATPercentage);
    END;

    [Test]
    PROCEDURE SalesShipmentInvoice@87();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verifying that the posted Sales Shipment and posted Sales invoice have been created after posting.

      // Setup: Create Sales Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);

      // Exercise: Post Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Purchase Order.
      VerifySalesShipmentLine(SalesLine,FindShipmentHeaderNo(SalesHeader."No."));
      VerifySalesInvoiceLine(SalesLine,FindPostedSalesInvoiceNo(SalesHeader."No."));
    END;

    [Test]
    PROCEDURE SalesRetOrderReceiptCreditMemo@86();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verifying that the posted Return receipt and posted Sales Credit Memo have been created after posting Sales Return order.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);

      // Exercise: Post Sales Return Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Sales Return Order.
      VerifyReturnReceiptLine(SalesLine,FindReturnReceiptHeaderNo(SalesHeader."No."));
      VerifySalesCrMemoLine(SalesLine,FindSalesCrMemoHeaderNo(SalesHeader."No."));
    END;

    [Test]
    PROCEDURE ReceiveSalesReturnOrder@99();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Verify Item Ledger Entry after receiving the Sales Return Order.

      // Setup. Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);

      // Exercise: Receive Sales Return Order.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify Item Ledger Entry.
      VerifyItemLedgerEntry(DocumentNo,SalesLine."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PostedSalesDocumentLinesHandler)]
    PROCEDURE CheckStandardTextLineOnSalesReturnOrder@92();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeader2@1003 : Record 36;
      SalesReturnOrder@1002 : TestPage 6630;
    BEGIN
      // Verify Standard Text Line on Sales Return Order.

      // Setup: Create Sales Order with Standard Text Code Line.
      Initialize;
      CreateAndPostSalesOrderWithStandardTextLine(SalesHeader,SalesLine);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::"Return Order",SalesHeader."Sell-to Customer No.");
      LibraryVariableStorage.Enqueue(SalesLine."No.");

      // Exercise: Doing GetPostedDocumentLinesToReverse on Sales Return Order.
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",SalesHeader2."No.");
      SalesReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;

      // Verify: Verify Sales Line exist with Standard Text Code without any error.
      VerifySalesLine(SalesHeader2,SalesLine."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesLineStdTextOnModifySellToCustomerNo@146();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [SCENARIO 360323] Sales line with Standard Text type is not deleted when 'Sell-To Customer No.' changed
      Initialize;

      // [GIVEN] Create Sales Order header with Customer = 'A'
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      // [GIVEN] Add a Sales Line of Standard Text
      CreateStandardTextLine(SalesLine,SalesHeader);

      // [WHEN] Modify 'Sell-To Customer No.' to 'B' on Sales Header.
      SalesHeader.VALIDATE("Sell-to Customer No.",CreateCustomer);

      // [THEN] Sales line with Standard Text still exists
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      SalesLine.SETRANGE("No.",SalesLine."No.");
      SalesLine.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(CombineShipmentRequestPageHandler,MessageHandler)]
    PROCEDURE PaymentDiscountPercentAfterRunningCombineShipment@108();
    VAR
      SalesHeader@1000 : ARRAY [2] OF Record 36;
      SalesHeader2@1001 : Record 36;
      Counter@1002 : Integer;
    BEGIN
      // Test Payment Discount % on Sales Invoice after running Combine Shipments Report.

      // Setup: Create and Post Sales Orders as Ship with Payment Terms Code having Payment Discount % more than Zero.
      Initialize;
      FOR Counter := 1 TO 2 DO
        CreateAndPostSalesOrderWithPaymentTerms(SalesHeader[Counter]);

      // Exercise: Run Combine Shipments Report.
      SalesHeader2.SETFILTER(
        "Sell-to Customer No.",'%1|%2',SalesHeader[1]."Sell-to Customer No.",SalesHeader[2]."Sell-to Customer No.");
      REPORT.RUN(REPORT::"Combine Shipments",TRUE,FALSE,SalesHeader2);

      // Verify: Verify PaymentTerms Discount % on Created Sales Invoice.
      FOR Counter := 1 TO 2 DO
        VerifyPaymentDiscountOnSalesInvoice(SalesHeader[Counter]);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportSaleRequestPageHandler,SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportWithItemLedgerEntryTypeSales@119();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisReportName@1004 : Record 7111;
      ItemAnalysisView@1002 : Record 7152;
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      ValueEntry@1000 : Record 5802;
      AnalysisLine@1003 : Record 7114;
    BEGIN
      // Check Cost Amount(Expected) on Sales Analysis Matrix when Item Ledger Entry Type Filter Sales.

      // Setup: Post Sales Document with Ship Option and Create Analysis Report Name.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      FindValueEntry(ValueEntry,SalesHeader."Document Type"::Order,LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
      LibraryVariableStorage.Enqueue(ValueEntry."Cost Amount (Expected)");
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Sales with Correct filter Item Ledger Entry Type Sales.
      OpenAnalysisReportSales(
        AnalysisReportName.Name,
        CreateAnalysisLine(ItemAnalysisView."Analysis Area",AnalysisLine.Type::Customer,SalesHeader."Sell-to Customer No."),
        CreateAnalysisColumnWithItemLedgerEntryType(ItemAnalysisView."Analysis Area",
          FORMAT(ValueEntry."Item Ledger Entry Type"::Sale),AnalysisColumn."Value Type"::"Cost Amount"));

      // Verify: Verification done in PurchaseAnalysisMatrixRequestPageHandler.
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisReportSaleRequestPageHandler,SalesAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportWithSourceNoFilter@200();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisReportName@1004 : Record 7111;
      Item@1003 : Record 27;
      AnalysisLine@1000 : Record 7114;
      ValueEntry@1001 : Record 5802;
      AnalysisLineTemplateName@1002 : Code[10];
      AnalysisColumnTemplateName@1006 : Code[10];
    BEGIN
      // Check Sales Analysis Matrix open succefully when selecting the Source Type Filter And Source Number.

      // Setup: Create Analysis Report Name.
      Initialize;
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,AnalysisReportName."Analysis Area"::Sales);
      AnalysisLineTemplateName := CreateAnalysisLine(AnalysisLine."Analysis Area"::Sales,
          AnalysisLine.Type::Item,LibraryInventory.CreateItem(Item));
      AnalysisColumnTemplateName := CreateAnalysisColumnWithItemLedgerEntryType(AnalysisReportName."Analysis Area"::Sales,
          FORMAT(ValueEntry."Item Ledger Entry Type"::Sale),AnalysisColumn."Value Type"::"Cost Amount");
      EnqueueAnalysisColumnHeader(AnalysisColumnTemplateName);

      // Exercise: Open Analysis Report Sales with Correct filter Item Ledger Entry Type Sales.
      OpenAnalysisReportSales(AnalysisReportName.Name,AnalysisLineTemplateName,AnalysisColumnTemplateName);

      // Verify: Verification done in AnalysisReportSaleRequestPageHandler.
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportSaleRequestPageHandler,SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeSale@118();
    VAR
      AnalysisColumn@1001 : Record 7118;
      ValueEntry@1000 : Record 5802;
    BEGIN
      // Check Sales Amount on Sales Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      SalesAnalysisReportWithItemLedgerEntryTypeAndValueType(AnalysisColumn."Value Type"::"Sales Amount",
        ValueEntry."Item Ledger Entry Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportSaleRequestPageHandler,SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeCost@117();
    VAR
      AnalysisColumn@1001 : Record 7118;
      ValueEntry@1000 : Record 5802;
    BEGIN
      // Check Cost Amount(Expected) on Sales Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      SalesAnalysisReportWithItemLedgerEntryTypeAndValueType(AnalysisColumn."Value Type"::"Cost Amount",
        ValueEntry."Item Ledger Entry Type"::Purchase);
    END;

    [Test]
    PROCEDURE VerifyDefaultBinOnSalesLine@130();
    VAR
      Item@1003 : Record 27;
      Bin@1004 : Record 7354;
      SalesLine@1005 : Record 37;
    BEGIN
      // Verify that bin code exist on sales order line,when re-enter the item no removes the default bin.

      // Setup: Create sales document with bin & bin content.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateBinAndBinContent(Bin,CreateLocationWithBinMandatory,Item."No.",Item."Base Unit of Measure",TRUE); // True for Default Bin.
      CreateSalesDocumentWithLocation(SalesLine,SalesLine."Document Type"::Order,Item."No.",Bin."Location Code");

      // Exercise: Re-enter Item No on sales line.
      SalesLine.VALIDATE("No.",Item."No.");

      // Verify: Verifying bin code exist. on sales line.
      SalesLine.TESTFIELD("Bin Code",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportSaleRequestPageHandler,SaleAnalysisMatrixColumnsRPH)]
    PROCEDURE SalesAnalysisReportMultipleColumns@134();
    VAR
      AnalysisColumn@1005 : Record 7118;
      AnalysisReportName@1004 : Record 7111;
      ItemAnalysisView@1002 : Record 7152;
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      AnalysisLine@1007 : Record 7114;
      ValueEntry@1000 : Record 5802;
      SalesAnalysisMatrix@1003 : Page 9207;
    BEGIN
      // Check columns' visibility in matrix form for count greater 7. regarding to RFH 344803

      // Setup: Post Sales Document with Ship Option and Create Analysis Report Name.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      FindValueEntry(ValueEntry,SalesHeader."Document Type"::Order,LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Sales with Correct filter Item Ledger Entry Type Sales.
      OpenAnalysisReportSales(AnalysisReportName.Name,
        CreateAnalysisLine(
          ItemAnalysisView."Analysis Area",AnalysisLine.Type::Customer,SalesHeader."Sell-to Customer No."),
        CreateAnalysisMultipleColumns(
          ItemAnalysisView."Analysis Area",
          FORMAT(ValueEntry."Item Ledger Entry Type"::Sale),
          AnalysisColumn."Value Type"::"Cost Amount",SalesAnalysisMatrix.GetMatrixDimension));

      // Verify: Verification done in SaleAnalysisMatrixColumnsRPH.
    END;

    [Test]
    [HandlerFunctions(SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportRoundingFactorNone@163();
    VAR
      AnalysisReportName@1004 : Record 7111;
      SalesAnalysisReport@1010 : TestPage 7117;
      AnalysisLineTemplateName@1006 : Code[10];
      AnalysisColumnTemplateName@1002 : Code[10];
      CustomerNo@1007 : Code[20];
      ItemNo@1011 : Code[20];
      RoundingFactor@1009 : Integer;
      Amount@1008 : Decimal;
    BEGIN
      // [FEATURE] [Sale Analysis Matrix]
      // [Scenario 121960] Cost Amount cell in Sales Analysis Matrix with Rounding Factor = None.
      Initialize;
      RoundingFactor := 0;

      // [GIVEN] Analysis Report with Analysis Line and Analysis Column with Rounding Factor = None
      CreateAnalysisReport(
        AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName,ItemNo,RoundingFactor);
      // [GIVEN] Value Entry with Decimal Amount = "X"
      Amount := CreateValueEntry(ItemNo,CustomerNo);
      LibraryVariableStorage.Enqueue(RoundCostAmount(Amount,RoundingFactor));

      // [GIVEN] Opened Analysis Report Sale Page
      AnalysisReportSalePageOpen(
        SalesAnalysisReport,AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName);
      // [WHEN] Open Sales Analysis Matrix Page
      SalesAnalysisReportPageShowMatrix(SalesAnalysisReport,CustomerNo);

      // [THEN] Cost Amount = "X" has the same value in Overview Page
      // Verification done in handler SaleAnalysisMatrixRequestPageHandler
    END;

    [Test]
    [HandlerFunctions(SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportRoundingFactor1@280();
    VAR
      AnalysisReportName@1004 : Record 7111;
      SalesAnalysisReport@1010 : TestPage 7117;
      AnalysisLineTemplateName@1006 : Code[10];
      AnalysisColumnTemplateName@1002 : Code[10];
      CustomerNo@1007 : Code[20];
      ItemNo@1011 : Code[20];
      RoundingFactor@1009 : Integer;
      Amount@1008 : Decimal;
    BEGIN
      // [FEATURE] [Sale Analysis Matrix]
      // [Scenario 121960] Cost Amount cell in Sales Analysis Matrix with Rounding Factor = 1.
      Initialize;
      RoundingFactor := 1;

      // [GIVEN] Analysis Report with Analysis Line and Analysis Column with Rounding Factor = 1
      CreateAnalysisReport(
        AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName,ItemNo,RoundingFactor);
      // [GIVEN] Value Entry with Decimal Amount = "X"
      Amount := CreateValueEntry(ItemNo,CustomerNo);
      LibraryVariableStorage.Enqueue(RoundCostAmount(Amount,RoundingFactor));

      // [GIVEN] Opened Analysis Report Sale Page
      AnalysisReportSalePageOpen(
        SalesAnalysisReport,AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName);
      // [WHEN] Open Sales Analysis Matrix Page
      SalesAnalysisReportPageShowMatrix(SalesAnalysisReport,CustomerNo);

      // [THEN] Cost Amount = rounded "X" with presicion = 1 in Overview Page
      // Verification done in handler SaleAnalysisMatrixRequestPageHandler
    END;

    [Test]
    [HandlerFunctions(SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportRoundingFactor1000@281();
    VAR
      AnalysisReportName@1004 : Record 7111;
      SalesAnalysisReport@1010 : TestPage 7117;
      AnalysisLineTemplateName@1006 : Code[10];
      AnalysisColumnTemplateName@1002 : Code[10];
      CustomerNo@1007 : Code[20];
      ItemNo@1011 : Code[20];
      RoundingFactor@1009 : Integer;
      Amount@1008 : Decimal;
    BEGIN
      // [FEATURE] [Sale Analysis Matrix]
      // [Scenario 121960] Cost Amount cell in Sales Analysis Matrix with Rounding Factor = 1000.
      Initialize;
      RoundingFactor := 1000;

      // [GIVEN] Analysis Report with Analysis Line and Analysis Column with Rounding Factor = 1000
      CreateAnalysisReport(
        AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName,ItemNo,RoundingFactor);
      // [GIVEN] Value Entry with Decimal Amount = "X"
      Amount := CreateValueEntry(ItemNo,CustomerNo);
      LibraryVariableStorage.Enqueue(RoundCostAmount(Amount,RoundingFactor));

      // [GIVEN] Opened Analysis Report Sale Page
      AnalysisReportSalePageOpen(
        SalesAnalysisReport,AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName);
      // [WHEN] Open Sales Analysis Matrix Page
      SalesAnalysisReportPageShowMatrix(SalesAnalysisReport,CustomerNo);

      // [THEN] Cost Amount = rounded "X" as Thousands with presicion = 0.1 in Overview Page
      // Verification done in handler SaleAnalysisMatrixRequestPageHandler
    END;

    [Test]
    [HandlerFunctions(SaleAnalysisMatrixRequestPageHandler)]
    PROCEDURE SalesAnalysisReportRoundingFactor1000000@282();
    VAR
      AnalysisReportName@1004 : Record 7111;
      SalesAnalysisReport@1010 : TestPage 7117;
      AnalysisLineTemplateName@1006 : Code[10];
      AnalysisColumnTemplateName@1002 : Code[10];
      CustomerNo@1007 : Code[20];
      ItemNo@1011 : Code[20];
      RoundingFactor@1009 : Integer;
      Amount@1008 : Decimal;
    BEGIN
      // [FEATURE] [Sale Analysis Matrix]
      // [Scenario 121960] Cost Amount cell in Sales Analysis Matrix with Rounding Factor = 1000000.
      Initialize;
      RoundingFactor := 1000000;

      // [GIVEN] Analysis Report with Analysis Line and Analysis Column with Rounding Factor = 1000000
      CreateAnalysisReport(
        AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName,ItemNo,RoundingFactor);
      // [GIVEN] Value Entry with Decimal Amount = "X"
      Amount := CreateValueEntry(ItemNo,CustomerNo);
      LibraryVariableStorage.Enqueue(RoundCostAmount(Amount,RoundingFactor));

      // [GIVEN] Opened Analysis Report Sale Page
      AnalysisReportSalePageOpen(
        SalesAnalysisReport,AnalysisReportName,AnalysisLineTemplateName,AnalysisColumnTemplateName);
      // [WHEN] Open Sales Analysis Matrix Page
      SalesAnalysisReportPageShowMatrix(SalesAnalysisReport,CustomerNo);

      // [THEN] Cost Amount = rounded "X" as Billions with presicion = 0.1 in Overview Page
      // Verification done in handler SaleAnalysisMatrixRequestPageHandler
    END;

    LOCAL PROCEDURE SalesAnalysisReportWithItemLedgerEntryTypeAndValueType@115(AnalysisColumnValueType@1003 : Option;ValueType@1004 : Option);
    VAR
      AnalysisReportName@1007 : Record 7111;
      ItemAnalysisView@1006 : Record 7152;
      SalesHeader@1005 : Record 36;
      SalesLine@1002 : Record 37;
      AnalysisLine@1103 : Record 7114;
    BEGIN
      // Setup: Post Sales Document with Ship Option and Create Analysis Report Name.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      LibraryVariableStorage.Enqueue(0);
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,ItemAnalysisView."Analysis Area");

      // Exercise: Open Analysis Report Sales with Correct filter Item Ledger Entry Type Purchase.
      OpenAnalysisReportSales(
        AnalysisReportName.Name,
        CreateAnalysisLine(ItemAnalysisView."Analysis Area",AnalysisLine.Type::Customer,
          SalesHeader."Sell-to Customer No."),
        CreateAnalysisColumnWithItemLedgerEntryType(ItemAnalysisView."Analysis Area",
          FORMAT(ValueType),AnalysisColumnValueType));

      // Verify: Verification done in SalesAnalysisMatrixRequestPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageVerificationHandler)]
    PROCEDURE CopyUnappliedSalesLineToSalesReturnOrderByCopyDocument@128();
    VAR
      SalesHeader@1003 : Record 36;
      CustomerNo@1001 : Code[20];
      PostedSalesHeaderNo@1004 : Code[20];
      DocType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // Verify that unapplied Sales Lines can be copied to Sales Return Order by Copy Document
      // and Appl.-from Item Entry is filled when Exact Cost Reversing Mondatory is enabled.

      // Setup: Create Item, customer and update Sales & Receivable Setup for Exact Cost Reversing Mandatory.
      Initialize;
      UpdateExactCostReversingMandatory(TRUE);

      // Create Sales Order with multiple lines.
      CustomerNo := CreateCustomer;
      PostedSalesHeaderNo := CreateAndPostSalesOrderWithMultipleLines(CustomerNo);

      // Create Return Sales Order by Copy Document. Delete one Sales Line.
      CreateSalesReturnOrderByCopyDocument(
        SalesHeader,CustomerNo,DocType::"Posted Invoice",PostedSalesHeaderNo,FALSE,FALSE);
      FindAndDeleteOneSalesLine(SalesHeader);

      // Post Sales Return Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Excise: Create Return Sales Order by Copy Document again.
      // Verify: Verify the warning message in MessageHandler2.
      LibraryVariableStorage.Enqueue(CopyDocForReturnOrderMsg); // Enqueue for MessageHandler2.
      CreateSalesReturnOrderByCopyDocument(
        SalesHeader,CustomerNo,DocType::"Posted Invoice",PostedSalesHeaderNo,FALSE,FALSE);

      // Verify the unapplied line can be copied and Exact Cost Reversal link is created.
      VerifySalesReturnOrderLine(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(EditAnalysisReportSaleRequestPageHandler,SaleAnalysisMatrixExcludeByShowRPH)]
    PROCEDURE SalesAnalysisReportExcludeLinesWithShowNo@238();
    VAR
      AnalysisReportName@1000 : Record 7111;
      AnalysisLineTemplate@1002 : Record 7112;
      AnalysisLine@1003 : Record 7114;
      AnalysisColumnTemplateName@1005 : Code[10];
    BEGIN
      // [SCENARIO 359346] Verifies that Sales Analysis Line and Column with Show = No/Never is excluded from Sales Matrix page.

      // [GIVEN] Setup Analysis Report Name, Template and multiple lines
      Initialize;
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,AnalysisReportName."Analysis Area"::Sales);
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisLineTemplate."Analysis Area"::Sales);
      CreateMultipleAnalysisLines(AnalysisLine,AnalysisLineTemplate.Name);
      // [GIVEN] Set Show = No for the last Sales Analysis Line.
      SetShowNoForLastAnalysisLine(AnalysisLine,AnalysisLine.Show::No);

      // [GIVEN] Setup Analysis Column with Show = Never
      AnalysisColumnTemplateName := CreateAnalysisColumnWithShowNo;

      // [WHEN] Open Sales Analysis Report and Show Matrix
      OpenAnalysisReportSales(AnalysisReportName.Name,AnalysisLineTemplate.Name,AnalysisColumnTemplateName);

      // [THEN] The line and column with Show = No/Never is excluded. Verification done with SaleAnalysisMatrixExcludeByShowRPH
    END;

    [Test]
    PROCEDURE CustLedgerEntryWithDocumentTypeRefund@137();
    VAR
      PaymentMethod@1000 : Record 289;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      CustLedgerEntry@1006 : Record 21;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify that Customer ledger entry exist With Document Type Refund when payment method code with balancing account.

      // Setup: Create payment method and create Sales return order.
      Initialize;
      CreatePaymentMethodCode(PaymentMethod);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",CreateCustomer);
      SalesHeader.VALIDATE("Payment Method Code",PaymentMethod.Code);
      SalesHeader.MODIFY(TRUE);

      // Exercise: Post Sales Return Order.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verifing that customer ledger entry exist with document type refund.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Refund,DocumentNo);
    END;

    [Test]
    PROCEDURE VerifyBinCodeOnSalesLineAfterUpdatingQtyToAsmToOrder@138();
    VAR
      SalesLine@1005 : Record 37;
      BinCode@1000 : Code[20];
    BEGIN
      // Setup: Create sales document with bin & bin content.
      BinCode := InitSetupForSalesDocumentWithBinContent(SalesLine);

      // Exercise: Re-enter Qty. to Assemble to Order on sales line.
      UpdateQtyToAsmToOrderOnSalesLineByPage(SalesLine."Document No.",SalesLine."Qty. to Assemble to Order");

      // Verify: Verify Bin Code was not updated on Sales Line.
      VerifyBinCodeOnSalesLine(SalesLine."No.",BinCode);
    END;

    [Test]
    PROCEDURE VerifyBinCodeOnSalesLineAfterUpdatingQuantity@153();
    VAR
      SalesLine@1005 : Record 37;
      BinCode@1000 : Code[20];
    BEGIN
      // Setup: Create sales document with bin & bin content.
      BinCode := InitSetupForSalesDocumentWithBinContent(SalesLine);

      // Exercise: Re-enter Quantity on sales line.
      UpdateQuantityOnSalesLineByPage(SalesLine."Document No.",SalesLine.Quantity);

      // Verify: Verify Bin Code was not updated on Sales Line.
      VerifyBinCodeOnSalesLine(SalesLine."No.",BinCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyPostedInvShptDateOrderNonConfirm@154();
    VAR
      SalesHeader@1000 : Record 36;
      SalesShipmentHeader@1007 : Record 110;
      CustomerNo@1009 : Code[20];
      PostedDocNo@1004 : Code[20];
      InitialPostingDate@1006 : Date;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Sales Invoice and Shipment with Date Order enabled and user not accepted confirmation

      Initialize;

      // [GIVEN] Posted Sales Invoice with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimpleSalesDocument(SalesHeader."Document Type"::Invoice,CustomerNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreateSalesDocumentWithPostingNo(
        SalesHeader,LibrarySales.CreateCustomerNo,
        LibraryRandom.RandInt(5),PostedDocNo);
      InitialPostingDate := SalesHeader."Posting Date";
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Posted Sales Invoice to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeader,DocType::"Posted Invoice",PostedDocNo);
      SalesHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,SalesHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Sales Shipment to Sales Document with Include Header = TRUE
      SalesShipmentHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesShipmentHeader.FINDFIRST;
      LibraryVariableStorage.Enqueue(FALSE);
      CopyDocument(SalesHeader,DocType::"Posted Shipment",SalesShipmentHeader."No.");
      SalesHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,SalesHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyPostedCrMemoRetRecDateOrderNonConfirm@196();
    VAR
      SalesHeader@1000 : Record 36;
      ReturnReceiptHeader@1006 : Record 6660;
      CustomerNo@1005 : Code[20];
      PostedDocNo@1004 : Code[20];
      InitialPostingDate@1009 : Date;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Sales Credit Memo and Return Receipt with Date Order enabled and user not accepted confirmation

      Initialize;

      // [GIVEN] Posted Credit Memo with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimpleSalesDocument(SalesHeader."Document Type"::"Return Order",CustomerNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreateSalesDocumentWithPostingNo(
        SalesHeader,LibrarySales.CreateCustomerNo,
        LibraryRandom.RandInt(5),PostedDocNo);
      InitialPostingDate := SalesHeader."Posting Date";
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Posted Sales Cr. Memo to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeader,DocType::"Posted Credit Memo",PostedDocNo);

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      SalesHeader.FIND;
      Assert.AreEqual(InitialPostingDate,SalesHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Return Receipt to Sales Document with Include Header = TRUE
      ReturnReceiptHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      ReturnReceiptHeader.FINDFIRST;
      LibraryVariableStorage.Enqueue(FALSE);
      CopyDocument(SalesHeader,DocType::"Posted Return Receipt",ReturnReceiptHeader."No.");
      SalesHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,SalesHeader."Posting Date",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyQuoteDateOrderNonConfirm@166();
    VAR
      SalesHeaderSrc@1000 : Record 36;
      SalesHeaderDst@1008 : Record 36;
      CustomerNo@1005 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Sales Quote with Date Order enabled and user not accepted confirmation

      Initialize;

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Quote with Posting Date = "X"
      LibrarySales.CreateSalesHeader(
        SalesHeaderSrc,SalesHeaderSrc."Document Type"::Quote,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateSalesDocumentWithPostingNo(
        SalesHeaderDst,CustomerNo,LibraryRandom.RandInt(5),
        LibraryUtility.GenerateRandomCode(SalesHeaderDst.FIELDNO("Posting No."),DATABASE::"Sales Header"));
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Sales Quote to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeaderDst,DocType::Quote,SalesHeaderSrc."No.");

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      SalesHeaderDst.FIND;
      Assert.AreEqual(CustomerNo,SalesHeaderDst."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyPostedInvShptDateOrderConfirm@164();
    VAR
      SalesHeader1@1000 : Record 36;
      SalesHeader2@1008 : Record 36;
      SalesReceivablesSetup@1009 : Record 311;
      SalesShipmentHeader@1007 : Record 110;
      PostedDocNo@1004 : Code[20];
      CustomerNoSrc@1006 : Code[20];
      CustomerNoDst@1010 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Sales Invoice and Shipment with Date Order enabled and user accepted confirmation

      Initialize;
      SetSalesReceivablesSetupStockoutCreditWarning(
        SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      // [GIVEN] Posted Sales Invoice with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimpleSalesDocument(SalesHeader1."Document Type"::Invoice,CustomerNoSrc);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CustomerNoDst := LibrarySales.CreateCustomerNo;
      CreateSalesDocumentWithPostingNo(SalesHeader1,CustomerNoDst,LibraryRandom.RandInt(5),PostedDocNo);
      // [WHEN] Run Copy Document from Posted Sales Invoice to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeader1,DocType::"Posted Invoice",PostedDocNo);
      SalesHeader1.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(CustomerNoSrc,SalesHeader1."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Sales Shipment to Sales Document with Include Header = TRUE
      SalesShipmentHeader.SETRANGE("Sell-to Customer No.",CustomerNoSrc);
      SalesShipmentHeader.FINDFIRST;
      CreateSalesDocumentWithPostingNo(SalesHeader2,CustomerNoDst,LibraryRandom.RandInt(5),PostedDocNo);
      CopyDocument(SalesHeader2,DocType::"Posted Shipment",SalesShipmentHeader."No.");
      SalesHeader2.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(CustomerNoSrc,SalesHeader2."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyPostedCrMemoRetRecDateOrderConfirm@162();
    VAR
      SalesHeader1@1000 : Record 36;
      SalesHeader2@1008 : Record 36;
      SalesReceivablesSetup@1005 : Record 311;
      ReturnReceiptHeader@1006 : Record 6660;
      CustomerNo@1009 : Code[20];
      PostedDocNo@1004 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Sales Credit Memo and Return Receipt with Date Order enabled and user accepted confirmation

      Initialize;
      SetSalesReceivablesSetupStockoutCreditWarning(
        SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      // [GIVEN] Posted Credit Memo with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimpleSalesDocument(SalesHeader1."Document Type"::"Return Order",CustomerNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreateSalesDocumentWithPostingNo(
        SalesHeader1,LibrarySales.CreateCustomerNo,LibraryRandom.RandInt(5),PostedDocNo);

      // [WHEN] Run Copy Document from Posted Sales Cr. Memo to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeader1,DocType::"Posted Credit Memo",PostedDocNo);

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      SalesHeader1.FIND;
      Assert.AreEqual(CustomerNo,SalesHeader1."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Return Receipt to Sales Document with Include Header = TRUE
      CreateSalesDocumentWithPostingNo(
        SalesHeader2,LibrarySales.CreateCustomerNo,LibraryRandom.RandInt(5),PostedDocNo);

      ReturnReceiptHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      ReturnReceiptHeader.FINDFIRST;
      CopyDocument(SalesHeader2,DocType::"Posted Return Receipt",ReturnReceiptHeader."No.");
      SalesHeader2.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(CustomerNo,SalesHeader2."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyQuoteDateOrderConfirm@158();
    VAR
      SalesHeaderSrc@1000 : Record 36;
      SalesHeaderDst@1008 : Record 36;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Sales Quote with Date Order enabled and user accepted confirmation

      Initialize;

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Sales Quote with Posting Date = "X"
      LibrarySales.CreateSalesHeader(SalesHeaderSrc,SalesHeaderSrc."Document Type"::Quote,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreateSalesDocumentWithPostingNo(
        SalesHeaderDst,LibrarySales.CreateCustomerNo,LibraryRandom.RandInt(5),
        LibraryUtility.GenerateRandomCode(SalesHeaderDst.FIELDNO("Posting No."),DATABASE::"Sales Header"));

      // [WHEN] Run Copy Document from Sales Quote to Sales Document with Include Header = TRUE
      CopyDocument(SalesHeaderDst,DocType::Quote,SalesHeaderSrc."No.");

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      SalesHeaderDst.FIND;
      Assert.AreEqual(SalesHeaderSrc."Sell-to Customer No.",SalesHeaderDst."Sell-to Customer No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    PROCEDURE SalesOrderCreationWithCustomerLocation@170();
    VAR
      SalesHeader@1000 : Record 36;
      Customer@1001 : Record 18;
      Location@1002 : Record 14;
      OneDay@1003 : Text;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 377057] When creating Sales Order, "Outbound Whse. Handling Time" filled from Location.

      // [GIVEN] Location "L" with "Outbound Whse. Handling Time" = "X"
      Initialize;
      OneDay := '1D';
      LibraryWarehouse.CreateLocation(Location);
      EVALUATE(Location."Outbound Whse. Handling Time",OneDay);
      Location.MODIFY(TRUE);

      // [GIVEN] Customer with Location "L"
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",Location.Code);
      Customer.MODIFY(TRUE);

      WITH SalesHeader DO BEGIN
        // [WHEN] Create Sales Order with Customer.
        INIT;
        VALIDATE("Sell-to Customer No.",Customer."No.");
        INSERT(TRUE);

        // [THEN] Sales Order contains "Outbound Whse. Handling Time" = "X"
        FIND;
        Assert.AreEqual(OneDay,FORMAT("Outbound Whse. Handling Time"),HandlingTimeErr);
      END;
    END;

    [Test]
    PROCEDURE SalesHeaderReserveField@171();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // [FEATURE] [Sales Header] [UT]
      // [SCENARIO 377813] Sales Header should have init value "Optional" for field "Reserve"
      Initialize;

      SalesHeader.INIT;
      SalesHeader.TESTFIELD(Reserve,SalesHeader.Reserve::Optional);
    END;

    [Test]
    PROCEDURE SalesHeaderReserveFieldFromCustomerOnInsert@172();
    VAR
      SalesHeader@1000 : Record 36;
      Customer@1001 : Record 18;
    BEGIN
      // [FEATURE] [Sales Header] [UT]
      // [SCENARIO 377813] Sales Header should inherit field "Reserve" from Customer on Insert
      Initialize;

      // [GIVEN] Customer "C" with Reserve = Always
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Reserve,Customer.Reserve::Always);
      Customer.MODIFY(TRUE);

      // [GIVEN] Sales Header with "Sell-to Customer No." = "C"
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");

      // [WHEN] Insert Sales Header
      SalesHeader.INSERT(TRUE);

      // [THEN] Sales Header has Reserve = Always
      SalesHeader.TESTFIELD(Reserve,Customer.Reserve);
    END;

    [Test]
    PROCEDURE SalesHeaderReserveFieldFromCustomerOnValidate@178();
    VAR
      SalesHeader@1000 : Record 36;
      Customer@1001 : Record 18;
    BEGIN
      // [FEATURE] [Sales Header] [UT]
      // [SCENARIO 377813] Sales Header should inherit field "Reserve" from Customer on Validate Customer No.
      Initialize;

      // [GIVEN] Customer "C" with Reserve = Never
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Reserve,Customer.Reserve::Never);
      Customer.MODIFY(TRUE);

      // [GIVEN] Sales Header with Reserve = Optional
      SalesHeader.INIT;
      SalesHeader.INSERT(TRUE);

      // [WHEN] Set "Sell-to Customer No." to "C" in Sales Header
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");

      // [THEN] Sales Header has Reserve = Never
      SalesHeader.TESTFIELD(Reserve,Customer.Reserve);
    END;

    [Test]
    PROCEDURE AnalysisReportManagementCopyColumnsToTempRESETBeforeDELETEALL@45();
    VAR
      AnalysisLine@1003 : Record 7114;
      AnalysisColumn@1001 : Record 7118;
      TempAnalysisColumn@1002 : TEMPORARY Record 7118;
      ColumnName@1004 : ARRAY [2] OF Code[10];
    BEGIN
      // [FEATURE] [Analysis Report Management] [UT]
      // [SCENARIO 380725] AnalysisReportManagement.CopyColumnsToTemp: it should be RESET result table TempAnalysisColumn before DELETEALL it.
      Initialize;

      // [GIVEN] Analysis Line.
      CreateRandomAreaAnalysisLine(AnalysisLine);

      // [GIVEN] Two Analysis Column Template T1 and T2 with random quantity of Analysis Columns for each.
      ColumnName[1] := CreateNewTemplateAnalysisColumnRandomSet(AnalysisLine."Analysis Area");
      ColumnName[2] := CreateNewTemplateAnalysisColumnRandomSet(AnalysisLine."Analysis Area");

      // [WHEN] AnalysisReportManagement.CopyColumnsToTemp to the same temporary result table TempAnalysisColumn for each Template - first T1, then T2
      AnalysisReportManagementCopyColumnsToTemp(TempAnalysisColumn,AnalysisLine,ColumnName[1]);
      AnalysisReportManagementCopyColumnsToTemp(TempAnalysisColumn,AnalysisLine,ColumnName[2]);

      // [THEN] TempAnalysisColumn must contain the records for T2 only.
      AnalysisColumn.SETRANGE("Analysis Area",AnalysisLine."Analysis Area");
      AnalysisColumn.SETRANGE("Analysis Column Template",ColumnName[2]);
      TempAnalysisColumn.RESET;

      Assert.RecordCount(TempAnalysisColumn,AnalysisColumn.COUNT);

      TempAnalysisColumn.SETRANGE("Analysis Column Template",ColumnName[1]);
      Assert.RecordIsEmpty(TempAnalysisColumn);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesWithSpecificCrMemoValidationHandler)]
    PROCEDURE UI_GetPostedDocumentLinesToReverseFromSalesCrMemoWithItem@46();
    VAR
      SalesHeader@1000 : Record 36;
      SalesCreditMemo@1003 : TestPage 44;
      CustNo@1002 : Code[20];
      CrMemoNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [UI] [Credit Memo] [Get Posted Document Lines to Reverse]
      // [SCENARIO 382062] It is possible to get Posted Sales Credit Memo with item to reverse from new Sales Credit Memo

      Initialize;

      // [GIVEN] Posted Sales Credit Memo "X" with Item
      CustNo := LibrarySales.CreateCustomerNo;
      CrMemoNo :=
        CreateAndPostSimpleSalesDocument(SalesHeader."Document Type"::"Credit Memo",CustNo);
      LibraryVariableStorage.Enqueue(CrMemoNo); // for PostedSalesDocumentLinesWithSpecificCrMemoValidationHandler

      // [GIVEN] New Sales Credit Memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustNo);

      // [GIVEN] Opened Sales Credit Memo page with new Sales Credit Memo
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",SalesHeader."No.");

      // [WHEN] Invoke action "Get Posted Document Lines to Reverse"
      SalesCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;

      // [THEN] "Posted Sales Document Lines" is opened and Posted Sales Credit Memo "X" exists in "Posted Credit Memos" list
      // Verification done in handler PostedSalesDocumentLinesWithSpecificCrMemoValidationHandler
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateLocalData;
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateAccountingPeriod@155();
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF AccountingPeriod.GetFiscalYearStartDate(WORKDATE) = 0D THEN BEGIN
        AccountingPeriod.INIT;
        AccountingPeriod."Starting Date" := CALCDATE('<-CY>',WORKDATE);
        AccountingPeriod."New Fiscal Year" := TRUE;
        AccountingPeriod.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateAdditionalCurrencySetup@44(VAR CurrencyCode@1000 : Code[10]);
    BEGIN
      CurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      LibraryERM.RunAddnlReportingCurrency(CurrencyCode,CurrencyCode,FindGLAccountNo);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@49(VAR SalesLine@1004 : Record 37;VATPostingSetup@1002 : Record 325;GeneralPostingSetup@1001 : Record 252;DocumentType@1007 : Option;CurrencyCode@1003 : Code[10]);
    VAR
      SalesHeader@1000 : Record 36;
      CustomerNo@1005 : Code[20];
      ItemNo@1006 : Code[20];
    BEGIN
      CustomerNo :=
        CreateAndModifyCustomer(CurrencyCode,GeneralPostingSetup."Gen. Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      ItemNo := CreateAndModifyItem(GeneralPostingSetup."Gen. Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");

      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);

      // Use Random value for Quantity because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSimpleSalesDocument@156(DocumentType@1007 : Option;VAR CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CustomerNo := LibrarySales.CreateCustomerNo;
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,
        LibraryInventory.CreateItemNo,LibraryRandom.RandDec(100,2));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithStandardTextLine@110(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomer);
      SalesHeader.VALIDATE("Currency Code",CreateCurrency);
      SalesHeader.MODIFY(TRUE);
      CreateStandardTextLine(SalesLine,SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisColumnWithItemLedgerEntryType@122(ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option) : Code[10];
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisViewAnalysisArea);
      CreateAnalysisColumn(AnalysisColumnTemplate.Name,ItemAnalysisViewAnalysisArea,ItemLedgerEntryTypeFilter,ValueType);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAnalysisMultipleColumns@116(ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option;ColumnCount@1006 : Integer) : Code[10];
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
      Index@1005 : Integer;
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,ItemAnalysisViewAnalysisArea);
      FOR Index := 1 TO ColumnCount DO
        CreateAnalysisColumn(AnalysisColumnTemplate.Name,ItemAnalysisViewAnalysisArea,ItemLedgerEntryTypeFilter,ValueType);
      LibraryVariableStorage.Enqueue(ColumnCount);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAnalysisColumn@126(ColumnTemplateName@1000 : Code[10];ItemAnalysisViewAnalysisArea@1002 : Option;ItemLedgerEntryTypeFilter@1003 : Text[250];ValueType@1004 : Option);
    VAR
      AnalysisColumn@1001 : Record 7118;
    BEGIN
      LibraryERM.CreateAnalysisColumn(AnalysisColumn,ItemAnalysisViewAnalysisArea,ColumnTemplateName);
      AnalysisColumn.VALIDATE("Column No.",COPYSTR(LibraryUtility.GenerateGUID,1,AnalysisColumn.FIELDNO("Column No.")));
      AnalysisColumn.VALIDATE(
        "Column Header",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AnalysisColumn.FIELDNO("Column Header"),DATABASE::"Analysis Column"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Analysis Column",AnalysisColumn.FIELDNO("Column Header"))));
      AnalysisColumn.VALIDATE("Item Ledger Entry Type Filter",ItemLedgerEntryTypeFilter);
      AnalysisColumn.VALIDATE("Value Type",ValueType);
      AnalysisColumn.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisColumnWithShowNo@149() : Code[10];
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
      AnalysisColumn@1000 : Record 7118;
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisColumnTemplate."Analysis Area"::Sales);
      LibraryERM.CreateAnalysisColumn(AnalysisColumn,AnalysisColumn."Analysis Area"::Sales,AnalysisColumnTemplate.Name);
      AnalysisColumn.VALIDATE("Column Header",LibraryUtility.GenerateGUID);
      AnalysisColumn.VALIDATE(Show,AnalysisColumn.Show::Never);
      AnalysisColumn.MODIFY(TRUE);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAnalysisLine@121(ItemAnalysisViewAnalysisArea@1003 : Option;AnalysisLineType@1004 : Option;RangeValue@1002 : Code[20]) : Code[10];
    VAR
      AnalysisLine@1001 : Record 7114;
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,ItemAnalysisViewAnalysisArea);
      LibraryInventory.CreateAnalysisLine(AnalysisLine,ItemAnalysisViewAnalysisArea,AnalysisLineTemplate.Name);
      AnalysisLine.VALIDATE(Type,AnalysisLineType);
      AnalysisLine.VALIDATE(Range,RangeValue);
      AnalysisLine.MODIFY(TRUE);
      EXIT(AnalysisLine."Analysis Line Template Name");
    END;

    LOCAL PROCEDURE CreateRandomAreaAnalysisLine@173(VAR AnalysisLine@1001 : Record 7114);
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      LibraryInventory.CreateAnalysisLineTemplate(
        AnalysisLineTemplate,LibraryRandom.RandInt(AnalysisLineTemplate."Analysis Area"::Sales));
      LibraryInventory.CreateAnalysisLine(AnalysisLine,AnalysisLineTemplate."Analysis Area",AnalysisLineTemplate.Name);
    END;

    LOCAL PROCEDURE CreateNewTemplateAnalysisColumnRandomSet@176(AnalysisArea@1001 : Option) : Code[10];
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
      AnalysisColumn@1004 : Record 7118;
      ColumnsQty@1002 : Integer;
      i@1003 : Integer;
    BEGIN
      ColumnsQty := LibraryRandom.RandInt(10);
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisArea);
      FOR i := 1 TO ColumnsQty DO
        LibraryInventory.CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate.Name);
      EXIT(AnalysisColumnTemplate.Name);
    END;

    LOCAL PROCEDURE AnalysisReportManagementCopyColumnsToTemp@201(VAR AnalysisColumn@1000 : Record 7118;AnalysisLine@1004 : Record 7114;ColumnName@1002 : Code[10]);
    VAR
      AnalysisReportManagement@1001 : Codeunit 7110;
    BEGIN
      AnalysisLine.SETRANGE("Analysis Area",AnalysisLine."Analysis Area");
      AnalysisColumn.SETRANGE("Analysis Column Template",ColumnName);
      AnalysisReportManagement.CopyColumnsToTemp(AnalysisLine,ColumnName,AnalysisColumn);
    END;

    LOCAL PROCEDURE CreateMultipleAnalysisLines@243(VAR AnalysisLine@1000 : Record 7114;AnalysisLineTemplateName@1001 : Code[10]);
    VAR
      i@1002 : Integer;
    BEGIN
      WITH AnalysisLine DO
        FOR i := 1 TO LibraryRandom.RandIntInRange(3,5) DO BEGIN
          LibraryInventory.CreateAnalysisLine(AnalysisLine,"Analysis Area"::Sales,AnalysisLineTemplateName);
          VALIDATE("Row Ref. No.",FORMAT(i));
          MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE CreateAnalysisReport@169(VAR AnalysisReportName@1000 : Record 7111;VAR AnalysisLineTemplateName@1001 : Code[10];VAR AnalysisColumnTemplateName@1002 : Code[10];VAR ItemNo@1005 : Code[20];RoundingFactor@1008 : Decimal);
    VAR
      AnalysisLine@1003 : Record 7114;
      Item@1004 : Record 27;
      ValueEntry@1006 : Record 5802;
      AnalysisColumn@1007 : Record 7118;
    BEGIN
      ItemNo := LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,AnalysisReportName."Analysis Area"::Sales);
      AnalysisLineTemplateName :=
        CreateAnalysisLine(AnalysisLine."Analysis Area"::Sales,AnalysisLine.Type::Item,ItemNo);
      AnalysisColumnTemplateName :=
        CreateAnalysisColumnWithItemLedgerEntryType(
          AnalysisReportName."Analysis Area"::Sales,
          FORMAT(ValueEntry."Item Ledger Entry Type"::Sale),AnalysisColumn."Value Type"::"Cost Amount");
      UpdateAnalysisColumnRoundingFactor(AnalysisColumnTemplateName,RoundingFactor);
    END;

    LOCAL PROCEDURE CreateBinAndBinContent@148(VAR Bin@1000 : Record 7354;LocationCode@1006 : Code[10];ItemNo@1003 : Code[20];UnitOfMeasure@1004 : Code[10];IsDefault@1001 : Boolean);
    VAR
      BinContent@1002 : Record 7302;
      LibraryWarehouse@1005 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",'',Bin.Code,ItemNo,'',UnitOfMeasure);
      BinContent.VALIDATE(Default,IsDefault);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithBinMandatory@167() : Code[10];
    VAR
      Location@1000 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateSalesDocument@55(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1003 : Option;CustomerNo@1001 : Code[20]);
    BEGIN
      // Create Sales Order using Random Quantity for Sales Line.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithLocation@135(VAR SalesLine@1001 : Record 37;DocumentType@1004 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithPostingNo@212(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];PostingDateShift@1002 : Integer;PostingNo@1003 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",SalesHeader."Posting Date" + PostingDateShift);
      SalesHeader.VALIDATE("Posting No.",PostingNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetInvDiscForCustomer@59() : Code[20];
    VAR
      CustInvoiceDisc@1003 : Record 19;
    BEGIN
      // Setting Invoice Discount for Customer.
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CreateCustomer,'',LibraryRandom.RandInt(10));
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandInt(40));
      CustInvoiceDisc.MODIFY(TRUE);
      EXIT(CustInvoiceDisc.Code);
    END;

    LOCAL PROCEDURE CalculateInvDiscount@6(VAR SalesLine@1002 : Record 37;VAR InvoiceDiscountAmount@1001 : Decimal;SalesHeader@1000 : Record 36) DocumentNo : Code[20];
    VAR
      SalesCalcDiscount@1004 : Codeunit 60;
    BEGIN
      SalesCalcDiscount.RUN(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      InvoiceDiscountAmount := SalesLine."Line Amount" * (SalesHeader."Invoice Discount Value" / 100);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CopyDocument@14(SalesHeader@1000 : Record 36;DocumentType@1004 : Option;DocumentNo@1003 : Code[20]);
    BEGIN
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType,DocumentNo,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndModifyCustomer@66(CurrencyCode@1001 : Code[10];GenBusPostingGroup@1003 : Code[10];VATBusinessPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@1() : Code[20];
    VAR
      Customer@1001 : Record 18;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTermsCode@107() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CreateCustomer);
      Customer.VALIDATE("Payment Terms Code",CreatePaymentTermsCode);
      Customer.VALIDATE("Combine Shipments",TRUE);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateAndModifyItem@67(GenProdPostingGroup@1003 : Code[10];VATProductPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Using RANDOM value for Unit Price.
      Item.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      Item.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Unit Price",LibraryRandom.RandInt(10));  // Using RANDOM value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateValueEntry@219(ItemNo@1000 : Code[20];VAR CustomerNo@1001 : Code[20]) : Decimal;
    VAR
      ValueEntry@1003 : Record 5802;
      RecRef@1004 : RecordRef;
    BEGIN
      CustomerNo := CreateCustomer;
      WITH ValueEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(ValueEntry);
        "Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Item No." := ItemNo;
        "Posting Date" := WORKDATE;
        "Item Ledger Entry Type" := "Item Ledger Entry Type"::Sale;
        "Source Type" := "Source Type"::Customer;
        "Source No." := CustomerNo;
        "Cost Amount (Expected)" := LibraryRandom.RandDecInRange(100000,500000,2);
        INSERT;
        EXIT("Cost Amount (Expected)");
      END;
    END;

    LOCAL PROCEDURE CreatePaymentMethodCode@180(VAR PaymentMethod@1000 : Record 289);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      WITH PaymentMethod DO BEGIN
        LibraryERM.CreatePaymentMethod(PaymentMethod);
        VALIDATE("Bal. Account No.",GLAccount."No.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesLines@70(VAR SalesLine@1000 : Record 37;SalesHeader@1002 : Record 36);
    VAR
      Counter@1001 : Integer;
    BEGIN
      // Using random value because value is not important.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateStandardTextLine@100(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE(Type,SalesLine.Type::" ");
      SalesLine.VALIDATE("No.",FindStandardTextCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithPaymentTerms@109(VAR SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CreateCustomerWithPaymentTermsCode);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreatePaymentTermsCode@114() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      PaymentTerms.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithMultipleLines@133(CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLines(SalesLine,SalesHeader);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateSalesReturnOrderByCopyDocument@131(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];DocType@1002 : Option;PostedSalesHeaderNo@1003 : Code[20];IncludeHeader@1005 : Boolean;RecalcLines@1004 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      LibrarySales.CopySalesDocument(SalesHeader,DocType,PostedSalesHeaderNo,IncludeHeader,RecalcLines);
    END;

    LOCAL PROCEDURE VerifySalesLine@113(SalesHeader@1005 : Record 36;StandardTextCode@1002 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("No.",StandardTextCode);
      SalesLine.TESTFIELD(Type,SalesLine.Type::" ");
    END;

    LOCAL PROCEDURE SalesLinesWithLineDiscount@150(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;SalesLineDiscount@1003 : Record 7004);
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Using random value for the Quantity. Take Quantity greater than Sales Line Discount Minimum Quantity.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,SalesLineDiscount.Code,
          SalesLineDiscount."Minimum Quantity" + LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesLinesFromDocument@94(VAR SalesLine@1000 : Record 37;SalesLine2@1001 : Record 37;SalesHeader@1003 : Record 36);
    BEGIN
      SalesLine.FINDSET;
      REPEAT
        LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine.Type::Item,SalesLine."No.",SalesLine.Quantity);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE OpenAnalysisReportSales@120(AnalysisReportName@1000 : Code[10];AnalysisLineTemplateName@1001 : Code[10];AnalysisColumnTemplateName@1002 : Code[10]);
    VAR
      AnalysisReportSale@1003 : TestPage 9376;
    BEGIN
      AnalysisReportSale.OPENEDIT;
      AnalysisReportSale.FILTER.SETFILTER(Name,AnalysisReportName);
      AnalysisReportSale."Analysis Line Template Name".SETVALUE(AnalysisLineTemplateName);
      AnalysisReportSale."Analysis Column Template Name".SETVALUE(AnalysisColumnTemplateName);
      AnalysisReportSale.EditAnalysisReport.INVOKE;
    END;

    LOCAL PROCEDURE SumLineDiscountAmount@93(VAR SalesLine@1003 : Record 37;DocumentNo@1001 : Code[20]) LineDiscountAmount : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDSET;
      REPEAT
        LineDiscountAmount += SalesLine."Line Discount Amount";
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SumInvoiceDiscountAmount@58(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]) InvoiceDiscountAmount : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDSET;
      REPEAT
        InvoiceDiscountAmount += SalesLine."Inv. Discount Amount";
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@17(VAR CustInvoiceDisc@1001 : Record 19);
    BEGIN
      // Using random value for Minimum Amount and Discount Pct fields because value is not important.
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CreateCustomer,'',LibraryRandom.RandDec(99,2));
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(99,2));
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupLineDiscount@22(VAR SalesLineDiscount@1000 : Record 7004);
    VAR
      Item@1002 : Record 27;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");

      // Using random value for Minimum Quantity and Line Discount Pct fields because value is not important.
      Item.GET(CreateItem);
      LibraryERM.CreateLineDiscForCustomer(SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",
        SalesLineDiscount."Sales Type"::Customer,CreateCustomer,WORKDATE,'',Item."Variant Filter",
        Item."Base Unit of Measure",LibraryRandom.RandDec(10,2));
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(99,2));
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetShowNoForLastAnalysisLine@237(VAR AnalysisLine@1000 : Record 7114;NewShow@1001 : Option);
    BEGIN
      WITH AnalysisLine DO BEGIN
        VALIDATE(Show,NewShow);
        MODIFY(TRUE);
        LibraryVariableStorage.Enqueue("Row Ref. No.");
      END;
    END;

    LOCAL PROCEDURE TotalLineDiscountInGLEntry@73(VAR SalesLine@1003 : Record 37;DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GLEntry@1000 : Record 17;
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      SalesLine.FINDSET;
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Sales Line Disc. Account");
      EXIT(TotalAmountInGLEntry(GLEntry));
    END;

    LOCAL PROCEDURE TotalInvoiceDiscountInGLEntry@64(VAR SalesLine@1003 : Record 37;DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GLEntry@1000 : Record 17;
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      SalesLine.FINDSET;
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Sales Inv. Disc. Account");
      EXIT(TotalAmountInGLEntry(GLEntry));
    END;

    LOCAL PROCEDURE TotalAmountInGLEntry@18(VAR GLEntry@1000 : Record 17) TotalAmount : Decimal;
    BEGIN
      GLEntry.FINDSET;
      REPEAT
        TotalAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindSalesLines@60(VAR SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine.FINDSET;
    END;

    LOCAL PROCEDURE CopySalesLines@61(VAR SalesLine@1001 : Record 37;SalesLine2@1000 : Record 37);
    BEGIN
      FindSalesLines(SalesLine2);
      REPEAT
        SalesLine.INIT;
        SalesLine := SalesLine2;
        SalesLine.INSERT;
      UNTIL SalesLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindCustLedgerEntry@12(VAR CustLedgerEntry@1000 : Record 21;DocumentNo@1002 : Code[20];DocumentType@1001 : Option);
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE FindGLAccountNo@63() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@23(VAR GLEntry@1000 : Record 17;DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAndUpdateLocation@11(VAR Code@1002 : Code[10];RequireReceive@1001 : Boolean) OldRequireReceive : Boolean;
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      OldRequireReceive := Location."Require Receive";
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.MODIFY(TRUE);
      Code := Location.Code;
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeaderNo@47(DocumentNo@1001 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",DocumentNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesCreditMemoHeaderNo@106(PreAssignedNo@1001 : Code[20]) : Code[20];
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      SalesCrMemoHeader.FINDFIRST;
      EXIT(SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE FindShipmentHeaderNo@168(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      SalesShipmentHeader@1001 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
      EXIT(SalesShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindPostedSalesInvoiceNo@85(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindReturnReceiptHeaderNo@90(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      ReturnReceiptHeader@1001 : Record 6660;
    BEGIN
      ReturnReceiptHeader.SETRANGE("Return Order No.",OrderNo);
      ReturnReceiptHeader.FINDFIRST;
      EXIT(ReturnReceiptHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesCrMemoHeaderNo@89(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Return Order No.",OrderNo);
      SalesCrMemoHeader.FINDFIRST;
      EXIT(SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE FindStandardTextCode@96() : Code[20];
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      StandardText.NEXT(LibraryRandom.RandInt(StandardText.COUNT));
      EXIT(StandardText.Code);
    END;

    LOCAL PROCEDURE FindValueEntry@4(VAR ValueEntry@1000 : Record 5802;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindVATEntry@10(VAR VATEntry@1000 : Record 254;DocumentNo@1001 : Code[20]);
    BEGIN
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::"Credit Memo");
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVATPostingSetup@125(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindSalesCrMemoHeader@33(VAR SalesCrMemoHeader@1002 : Record 114;ReturnOrderNo@1001 : Code[20]);
    BEGIN
      SalesCrMemoHeader.SETRANGE("Return Order No.",ReturnOrderNo);
      SalesCrMemoHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@132(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Type,Type::Item);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindAndDeleteOneSalesLine@136(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader);
      SalesLine.DELETE;
    END;

    LOCAL PROCEDURE InitSetupForSalesDocumentWithBinContent@140(VAR SalesLine@1001 : Record 37) : Code[20];
    VAR
      Item@1003 : Record 27;
      DefaultBin@1000 : Record 7354;
      Bin@1002 : Record 7354;
    BEGIN
      // Create Assembly Item with Bin Content.
      Initialize;
      LibraryInventory.CreateItem(Item);
      UpdateItemParameters(Item,Item."Replenishment System"::Assembly,Item."Assembly Policy"::"Assemble-to-Order");
      CreateBinAndBinContent(DefaultBin,CreateLocationWithBinMandatory,Item."No.",Item."Base Unit of Measure",TRUE); // True for Default Bin.
      CreateBinAndBinContent(Bin,DefaultBin."Location Code",Item."No.",Item."Base Unit of Measure",FALSE); // False for not Default Bin.

      // Create Sales Document with Location and update Bin Code.
      CreateSalesDocumentWithLocation(SalesLine,SalesLine."Document Type"::Order,Item."No.",DefaultBin."Location Code");
      SalesLine.VALIDATE("Bin Code",Bin.Code);
      SalesLine.MODIFY(TRUE);
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE ModifySalesAndReceivableSetup@25(ArchiveQuotesAndOrders@1002 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Archive Quotes and Orders",ArchiveQuotesAndOrders);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifySalesLineQtyToShip@34(VAR SalesLine@1010 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",SalesLine."Qty. to Ship" / 2);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetSalesandReceivablesSetup@38();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;  // Fix for Number Series Error.
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetNoSeriesDateOrder@206(DateOrder@1000 : Boolean) OldDateOrder : Boolean;
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      NoSeries@1001 : Record 308;
    BEGIN
      SalesReceivablesSetup.GET;
      NoSeries.GET(SalesReceivablesSetup."Posted Invoice Nos.");
      OldDateOrder := NoSeries."Date Order";
      NoSeries.VALIDATE("Date Order",DateOrder);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@91(VAR GeneralPostingSetup@1000 : Record 252;AccountNo@1001 : Code[20]);
    BEGIN
      GeneralPostingSetup.VALIDATE("Sales Pmt. Disc. Debit Acc.",AccountNo);
      GeneralPostingSetup.VALIDATE("Sales Pmt. Disc. Credit Acc.",AccountNo);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRemainingPmtDiscPossible@82(VAR CustLedgerEntry@1000 : Record 21;DocumentNo@1001 : Code[20]);
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(
        CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      CustLedgerEntry.CALCFIELDS(Amount);
      CustLedgerEntry.VALIDATE("Remaining Pmt. Disc. Possible",CustLedgerEntry.Amount / 2);
      CustLedgerEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVATPostingSetup@52(VAR VATPostingSetup@1000 : Record 325;VAR OldAdjustForPaymentDiscount@1001 : Boolean;NewAdjustForPaymentDiscount@1002 : Boolean;NewVATPercentage@1003 : Decimal) OldVATPercentage : Decimal;
    BEGIN
      OldAdjustForPaymentDiscount := VATPostingSetup."Adjust for Payment Discount";
      OldVATPercentage := VATPostingSetup."VAT %";
      VATPostingSetup.VALIDATE("Adjust for Payment Discount",NewAdjustForPaymentDiscount);
      VATPostingSetup.VALIDATE("VAT %",NewVATPercentage);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExactCostReversingMandatory@129(NewExactCostReversingMandatory@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",NewExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLineByPage@147(DocumentNo@1000 : Code[20];Qty@1002 : Decimal);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",DocumentNo);
      SalesOrder.SalesLines.Quantity.SETVALUE(Qty); // Required for test to update it on page.
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateQtyToAsmToOrderOnSalesLineByPage@152(DocumentNo@1000 : Code[20];QtyToAssemble@1003 : Decimal);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",DocumentNo);
      SalesOrder.SalesLines."Qty. to Assemble to Order".SETVALUE(QtyToAssemble); // Required for test to update it on page.
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateItemParameters@143(VAR Item@1000 : Record 27;ReplenishmentSystem@1002 : Option;AssemblyPolicy@1003 : Option);
    BEGIN
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Assembly Policy",AssemblyPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAnalysisColumnRoundingFactor@260(AnalysisColumnTemplateName@1001 : Code[10];RoundingFactor@1002 : Integer);
    VAR
      AnalysisColumn@1000 : Record 7118;
    BEGIN
      AnalysisColumn.SETRANGE("Analysis Area",AnalysisColumn."Analysis Area"::Sales);
      AnalysisColumn.SETRANGE("Analysis Column Template",AnalysisColumnTemplateName);
      AnalysisColumn.FINDLAST;
      CASE RoundingFactor OF
        0:
          AnalysisColumn."Rounding Factor" := AnalysisColumn."Rounding Factor"::None;
        1:
          AnalysisColumn."Rounding Factor" := AnalysisColumn."Rounding Factor"::"1";
        1000:
          AnalysisColumn."Rounding Factor" := AnalysisColumn."Rounding Factor"::"1000";
        1000000:
          AnalysisColumn."Rounding Factor" := AnalysisColumn."Rounding Factor"::"1000000";
      END;
      AnalysisColumn.MODIFY;
    END;

    LOCAL PROCEDURE RoundCostAmount@151(Amount@1000 : Decimal;RoundingFactor@1001 : Integer) : Decimal;
    BEGIN
      CASE RoundingFactor OF
        0:
          EXIT(Amount);
        1:
          EXIT(ROUND(Amount,1));
        1000:
          EXIT(ROUND(Amount / 1000,0.1));
        1000000:
          EXIT(ROUND(Amount / 1000000,0.1));
      END;
    END;

    LOCAL PROCEDURE AnalysisReportSalePageOpen@302(VAR SalesAnalysisReport@1000 : TestPage 7117;AnalysisReportName@1002 : Record 7111;AnalysisLineTemplateName@1003 : Code[10];AnalysisColumnTemplateName@1004 : Code[10]);
    VAR
      AnalysisReportSale@1001 : TestPage 9376;
    BEGIN
      AnalysisReportSale.OPENVIEW;
      AnalysisReportSale.GOTORECORD(AnalysisReportName);
      AnalysisReportSale."Analysis Line Template Name".SETVALUE(AnalysisLineTemplateName);
      AnalysisReportSale."Analysis Column Template Name".SETVALUE(AnalysisColumnTemplateName);
      SalesAnalysisReport.TRAP;
      AnalysisReportSale.EditAnalysisReport.INVOKE;
    END;

    LOCAL PROCEDURE SalesAnalysisReportPageShowMatrix@304(SalesAnalysisReport@1000 : TestPage 7117;CustomerNo@1001 : Code[20]);
    VAR
      SalesPeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      Sourcetypefilter@1002 : ',Customer,Vendor,Item';
    BEGIN
      SalesAnalysisReport.PeriodType.SETVALUE(SalesPeriodType::Year);
      SalesAnalysisReport.CurrentSourceTypeFilter.SETVALUE(Sourcetypefilter::Customer);
      SalesAnalysisReport.CurrentSourceTypeNoFilter.SETVALUE(CustomerNo);
      SalesAnalysisReport.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE SetSalesReceivablesSetupStockoutCreditWarning@165(CreditWarnings@1001 : Option;StockoutWarning@1002 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAmountOnGLEntry@57(DocumentNo@1000 : Code[20];GLAccountNo@1003 : Code[20];Amount2@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          Amount2,
          Amount,
          LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateError,FIELDCAPTION(Amount),Amount2,TABLECAPTION,FIELDCAPTION("Entry No."),"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyACYAmountOnGLEntry@80(DocumentNo@1000 : Code[20];GLAccountNo@1003 : Code[20];Amount2@1001 : Decimal;CurrencyCode@1004 : Code[10]);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        FindGLEntry(GLEntry,DocumentNo,GLAccountNo);
        Amount2 := LibraryERM.ConvertCurrency(Amount2,'',CurrencyCode,WORKDATE);
        Assert.AreNearlyEqual(
          Amount2,"Additional-Currency Amount",LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateError,FIELDCAPTION("Additional-Currency Amount"),Amount,
            TABLECAPTION,FIELDCAPTION("Entry No."),"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyAmountLCYOnCustLedger@62(DocumentNo@1001 : Code[20];AmountLCY@1002 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        CALCFIELDS("Amount (LCY)");
        Assert.AreNearlyEqual(
          AmountLCY,
          "Amount (LCY)",
          LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateError,FIELDCAPTION("Amount (LCY)"),AmountLCY,TABLECAPTION,FIELDCAPTION("Entry No."),"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyBinCodeOnSalesLine@142(ItemNo@1002 : Code[20];BinCode@1000 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDFIRST;
      Assert.AreEqual(BinCode,SalesLine."Bin Code",UpdateBinCodeErr);
    END;

    LOCAL PROCEDURE VerifyRemainingAmountOnLedger@48(DocumentNo@1001 : Code[20];DocumentType@1003 : Option;RemainingAmount@1002 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        CALCFIELDS("Remaining Amount");
        Assert.AreNearlyEqual(
          RemainingAmount,
          "Remaining Amount",
          LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(
            ValidateError,FIELDCAPTION("Remaining Amount"),RemainingAmount,TABLECAPTION,FIELDCAPTION("Entry No."),"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@28(ReturnOrderNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
      GeneralLedgerSetup@1004 : Record 98;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      FindCustLedgerEntry(CustLedgerEntry,SalesCrMemoHeader."No.",CustLedgerEntry."Document Type"::"Credit Memo");
      Assert.AreNearlyEqual(Amount,CustLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,CustLedgerEntry.FIELDCAPTION(Amount),Amount,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@19(ReturnOrderNo@1002 : Code[20];Amount@1006 : Decimal;AccountNo@1003 : Code[20]);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GLEntry@1000 : Record 17;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      FindGLEntry(GLEntry,SalesCrMemoHeader."No.",AccountNo);
      Assert.AreNearlyEqual(Amount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscountAmount@3(SalesLine@1005 : Record 37;InvoiceDiscountAmount@1003 : Decimal;DocumentNo@1004 : Code[20]);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      GeneralPostingSetup@1001 : Record 252;
      GLEntry@1000 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Sales Inv. Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),InvoiceDiscountAmount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@30(ReturnOrderNo@1001 : Code[20];VATAmount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      VATEntry@1003 : Record 254;
      SalesCrMemoHeader@1002 : Record 114;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      FindVATEntry(VATEntry,SalesCrMemoHeader."No.");
      Assert.AreNearlyEqual(VATAmount,-VATEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(VATAmountError,VATEntry.FIELDCAPTION(Amount),VATEntry.Amount,VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntries@2(ReturnOrderNo@1001 : Code[20];CostAmount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      ValueEntry@1003 : Record 5802;
      SalesCrMemoHeader@1002 : Record 114;
      TotalCostAmount@1005 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      FindValueEntry(ValueEntry,ValueEntry."Document Type"::"Sales Credit Memo",SalesCrMemoHeader."No.");
      REPEAT
        TotalCostAmount += ValueEntry."Sales Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(-CostAmount,TotalCostAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,ValueEntry.FIELDCAPTION("Cost Amount (Actual)"),TotalCostAmount,ValueEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLocationOnCreditMemo@31(ReturnOrderNo@1002 : Code[20];LocationCode@1003 : Code[20]);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      SalesCrMemoLine.FINDFIRST;
      Assert.AreEqual(
        LocationCode,SalesCrMemoLine."Location Code",
        STRSUBSTNO(FieldError,SalesCrMemoLine.FIELDCAPTION("Location Code"),
          LocationCode,SalesCrMemoLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCurrencyOnPostedOrder@32(ReturnOrderNo@1002 : Code[20];CurrencyCode@1003 : Code[10]);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      FindSalesCrMemoHeader(SalesCrMemoHeader,ReturnOrderNo);
      SalesCrMemoHeader.GET(SalesCrMemoHeader."No.");
      Assert.AreEqual(
        CurrencyCode,SalesCrMemoHeader."Currency Code",
        STRSUBSTNO(
          FieldError,
          SalesCrMemoHeader.FIELDCAPTION("Currency Code"),
          CurrencyCode,SalesCrMemoHeader.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPartialSalesOrder@76(SalesLine@1006 : Record 37;DocumentNo@1005 : Code[20];QuantityShipped@1001 : Decimal);
    VAR
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      // Verify Quantity Shipped in Sales Line and Posted Sales Invoice Line.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Quantity Shipped",QuantityShipped);

      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Quantity,QuantityShipped);
    END;

    LOCAL PROCEDURE VerifyPostedReturnOrderLine@15(VAR SalesLine@1000 : Record 37);
    VAR
      SalesCrMemoHeader@1006 : Record 114;
      SalesCrMemoLine@1005 : Record 115;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Return Order No.",SalesLine."Document No.");
      SalesCrMemoHeader.FINDFIRST;
      REPEAT
        SalesCrMemoLine.GET(SalesCrMemoHeader."No.",SalesLine."Line No.");
        SalesCrMemoLine.TESTFIELD(Quantity,SalesLine.Quantity);
        SalesCrMemoLine.TESTFIELD("Unit Price",SalesLine."Unit Price");
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesShipmentLine@105(SalesLine@1003 : Record 37;DocumentNo@1004 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.FINDFIRST;
      SalesShipmentLine.TESTFIELD("No.",SalesLine."No.");
      SalesShipmentLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceLine@83(SalesLine@1003 : Record 37;PostedInvoiceNo@1000 : Code[20]);
    VAR
      SalesInvoiceLine@1002 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",PostedInvoiceNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("No.",SalesLine."No.");
      SalesInvoiceLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyVATOnSalesCreditMemo@26(SalesLine@1000 : Record 37);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      VATAmountSalesLine@1001 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesLines(SalesLine);
      REPEAT
        VATAmountSalesLine := SalesLine."Line Amount" * (1 + SalesLine."VAT %" / 100);
        Assert.AreNearlyEqual(
          VATAmountSalesLine,SalesLine."Amount Including VAT",GeneralLedgerSetup."Amount Rounding Precision",
          STRSUBSTNO(FieldError,SalesLine.FIELDCAPTION("Amount Including VAT"),VATAmountSalesLine,SalesLine.TABLECAPTION));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryForCreditMemo@65(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'>0');
      Assert.AreNearlyEqual(
        Amount,TotalAmountInGLEntry(GLEntry),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLedgerEntry@88(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(
        Amount,-CustLedgerEntry."Amount (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(FieldError,CustLedgerEntry.FIELDCAPTION("Amount (LCY)"),Amount,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLineDiscountOnCreditMemo@144(SalesLine@1000 : Record 37);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      LineDiscountAmount@1001 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesLines(SalesLine);
      REPEAT
        LineDiscountAmount := ROUND(SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100);
        Assert.AreNearlyEqual(
          LineDiscountAmount,SalesLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
          STRSUBSTNO(FieldError,SalesLine.FIELDCAPTION("Line Discount Amount"),LineDiscountAmount,SalesLine.TABLECAPTION));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscount@159(SalesLine@1000 : Record 37;CustInvoiceDisc@1001 : Record 19);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      InvoiceDiscountAmount@1002 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      FindSalesLines(SalesLine);
      REPEAT
        InvoiceDiscountAmount := ROUND(SalesLine."Line Amount" * CustInvoiceDisc."Discount %" / 100);
        Assert.AreNearlyEqual(
          InvoiceDiscountAmount,SalesLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
          STRSUBSTNO(FieldError,SalesLine.FIELDCAPTION("Inv. Discount Amount"),InvoiceDiscountAmount,SalesLine.TABLECAPTION));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@81(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReturnReceiptLine@103(SalesLine@1003 : Record 37;DocumentNo@1004 : Code[20]);
    VAR
      ReturnReceiptLine@1001 : Record 6661;
    BEGIN
      ReturnReceiptLine.SETRANGE("Document No.",DocumentNo);
      ReturnReceiptLine.FINDFIRST;
      ReturnReceiptLine.TESTFIELD("No.",SalesLine."No.");
      ReturnReceiptLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySalesCrMemoLine@102(SalesLine@1003 : Record 37;PostedInvoiceNo@1000 : Code[20]);
    VAR
      SalesCrMemoLine@1002 : Record 115;
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",PostedInvoiceNo);
      SalesCrMemoLine.FINDFIRST;
      SalesCrMemoLine.TESTFIELD("No.",SalesLine."No.");
      SalesCrMemoLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPaymentDiscountOnSalesInvoice@112(SalesHeaderOrder@1004 : Record 36);
    VAR
      SalesHeaderInvoice@1000 : Record 36;
    BEGIN
      SalesHeaderInvoice.SETRANGE("Document Type",SalesHeaderInvoice."Document Type"::Invoice);
      SalesHeaderInvoice.SETRANGE("Sell-to Customer No.",SalesHeaderOrder."Sell-to Customer No.");
      SalesHeaderInvoice.SETRANGE("Payment Terms Code",SalesHeaderOrder."Payment Terms Code");
      SalesHeaderInvoice.FINDFIRST;
      SalesHeaderInvoice.TESTFIELD("Payment Discount %",SalesHeaderOrder."Payment Discount %");
    END;

    LOCAL PROCEDURE VerifySalesReturnOrderLine@139(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader);
      SalesLine.TESTFIELD("Appl.-from Item Entry");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@41(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler for the Confirmation message and always send reply as TRUE.
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReturnReceiptHandler@98(VAR GetReturnReceiptLines@1000 : TestPage 6638);
    BEGIN
      GetReturnReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesHandler@97(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      StandardTextCode@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StandardTextCode);
      PostedSalesDocumentLines.PostedInvoices.FILTER.SETFILTER("No.",StandardTextCode);
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesWithSpecificCrMemoValidationHandler@175(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.PostedCrMemos."Document No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CombineShipmentRequestPageHandler@95(VAR CombineShipments@1000 : TestRequestPage 295);
    BEGIN
      CombineShipments.PostingDate.SETVALUE(CALCDATE('<1M>',WORKDATE));
      CombineShipments.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@104(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [MessageHandler]
    PROCEDURE MessageVerificationHandler@141(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      ExpectedMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ExpectedMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [PageHandler]
    PROCEDURE EditAnalysisReportSaleRequestPageHandler@124(VAR SalesAnalysisReport@1000 : TestPage 7117);
    VAR
      SalesPeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      SalesAnalysisReport.PeriodType.SETVALUE(SalesPeriodType::Year);
      SalesAnalysisReport.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE EnqueueAnalysisColumnHeader@145(AnalysisColumnTemplateName@1000 : Code[10]);
    VAR
      AnalysisColumn@1001 : Record 7118;
    BEGIN
      WITH AnalysisColumn DO BEGIN
        SETRANGE("Analysis Area","Analysis Area"::Sales);
        SETRANGE("Analysis Column Template",AnalysisColumnTemplateName);
        FINDFIRST;
        LibraryVariableStorage.Enqueue("Column Header");
      END;
    END;

    [ModalPageHandler]
    PROCEDURE SaleAnalysisMatrixRequestPageHandler@123(VAR SalesAnalysisMatrix@1000 : TestPage 9207);
    VAR
      CostAmountExpected@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CostAmountExpected);
      SalesAnalysisMatrix.Field1.ASSERTEQUALS(CostAmountExpected);
    END;

    [PageHandler]
    PROCEDURE SalesAnalysisReportSaleRequestPageHandler@160(VAR SalesAnalysisReport@1000 : TestPage 7117);
    VAR
      SalesPeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      Sourcetypefilter@1002 : ',Customer,Vendor,Item';
    BEGIN
      SalesAnalysisReport.PeriodType.SETVALUE(SalesPeriodType::Year);
      SalesAnalysisReport.CurrentSourceTypeFilter.SETVALUE(Sourcetypefilter::Customer);
      SalesAnalysisReport.CurrentSourceTypeNoFilter.SETVALUE(CreateCustomer);
      SalesAnalysisReport.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisMatrixRequestPageHandler@161(VAR SalesAnalysisMatrix@1000 : TestPage 9207);
    VAR
      SalesAnalysisMatrixField1Caption@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesAnalysisMatrixField1Caption);
      Assert.AreEqual(SalesAnalysisMatrixField1Caption,SalesAnalysisMatrix.Field1.CAPTION,ColumnCaptionErr);
    END;

    [ModalPageHandler]
    PROCEDURE SaleAnalysisMatrixColumnsRPH@127(VAR MatrixForm@1000 : TestPage 9207);
    VAR
      CountVar@1002 : Variant;
      FieldVisibilityArray@1001 : ARRAY [32] OF Boolean;
      Count@1003 : Integer;
      Index@1004 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(CountVar);
      Count := CountVar;

      FieldVisibilityArray[1] := MatrixForm.Field1.VISIBLE;
      FieldVisibilityArray[2] := MatrixForm.Field2.VISIBLE;
      FieldVisibilityArray[3] := MatrixForm.Field3.VISIBLE;
      FieldVisibilityArray[4] := MatrixForm.Field4.VISIBLE;
      FieldVisibilityArray[5] := MatrixForm.Field5.VISIBLE;
      FieldVisibilityArray[6] := MatrixForm.Field6.VISIBLE;
      FieldVisibilityArray[7] := MatrixForm.Field7.VISIBLE;
      FieldVisibilityArray[8] := MatrixForm.Field8.VISIBLE;
      FieldVisibilityArray[9] := MatrixForm.Field9.VISIBLE;
      FieldVisibilityArray[10] := MatrixForm.Field10.VISIBLE;
      FieldVisibilityArray[11] := MatrixForm.Field11.VISIBLE;
      FieldVisibilityArray[12] := MatrixForm.Field12.VISIBLE;
      FieldVisibilityArray[13] := MatrixForm.Field13.VISIBLE;
      FieldVisibilityArray[14] := MatrixForm.Field14.VISIBLE;
      FieldVisibilityArray[15] := MatrixForm.Field15.VISIBLE;
      FieldVisibilityArray[16] := MatrixForm.Field16.VISIBLE;
      FieldVisibilityArray[17] := MatrixForm.Field17.VISIBLE;
      FieldVisibilityArray[18] := MatrixForm.Field18.VISIBLE;
      FieldVisibilityArray[19] := MatrixForm.Field19.VISIBLE;
      FieldVisibilityArray[20] := MatrixForm.Field20.VISIBLE;
      FieldVisibilityArray[21] := MatrixForm.Field21.VISIBLE;
      FieldVisibilityArray[22] := MatrixForm.Field22.VISIBLE;
      FieldVisibilityArray[23] := MatrixForm.Field23.VISIBLE;
      FieldVisibilityArray[24] := MatrixForm.Field24.VISIBLE;
      FieldVisibilityArray[25] := MatrixForm.Field25.VISIBLE;
      FieldVisibilityArray[26] := MatrixForm.Field26.VISIBLE;
      FieldVisibilityArray[27] := MatrixForm.Field27.VISIBLE;
      FieldVisibilityArray[28] := MatrixForm.Field28.VISIBLE;
      FieldVisibilityArray[29] := MatrixForm.Field29.VISIBLE;
      FieldVisibilityArray[30] := MatrixForm.Field30.VISIBLE;
      FieldVisibilityArray[31] := MatrixForm.Field31.VISIBLE;
      FieldVisibilityArray[32] := MatrixForm.Field32.VISIBLE;

      FOR Index := 1 TO Count DO
        Assert.AreEqual(TRUE,FieldVisibilityArray[Index],STRSUBSTNO(ColumnWrongVisibilityErr,Index));
    END;

    [ModalPageHandler]
    PROCEDURE SaleAnalysisMatrixExcludeByShowRPH@157(VAR SalesAnalysisMatrix@1000 : TestPage 9207);
    VAR
      UnexpectedRowNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(UnexpectedRowNo);
      WITH SalesAnalysisMatrix DO BEGIN
        FIRST;
        REPEAT
          Assert.AreNotEqual(FORMAT(UnexpectedRowNo),"Row Ref. No.".VALUE,STRSUBSTNO(RowVisibleErr,"Row Ref. No."));
        UNTIL NOT NEXT;
      END;

      Assert.AreEqual('',SalesAnalysisMatrix.Field1.CAPTION,ColumnShowNeverInitializedErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmCopyDocDateOrderHandlerVerify@189(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedConfirmText@1002 : Text;
    BEGIN
      ExpectedConfirmText := CopyDocDateOrderConfirmMsg;
      Assert.AreEqual(ExpectedConfirmText,Question,WrongConfirmationMsgErr);
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Sales]
      Unsupported version tags:
      CH: Unable to Execute (TFS ID: 51204)

      Check the functionalities of Sales Return Order.
      1. Check if the system allows creating a New Sales Return Order .
      2. Create and Post Sales Return Order while verifying G/L entry, Customer Ledger Entry ,Value Entry and VAT Entry.
      3. Check Invoice Discount on Sales Return Order and in G/L entry after posting.
      4. Check Line Discount on Sales Return Order.
      5. Check if Return Order can be applied against any document.
      6. Check that Posted Credit Memo has Correct Location after Posting Sales Return Order.
      7. Check that Currency has been posted correctly on Posted Credit Memo after Post Sales Return Order.
      8. Check Copy Document Functionalities from Sales Return Order.
      9. Calculate and Check VAT Amount on Sales Return Order.
      10. Create a Partial Sales Order and verify Quantity Shipped after posting.
      11. Test if the system calculates applicable VAT in Sales Credit Memo.
      12. Test if system create Sales Invoice Line after posting and create appropriate G/L Entry, VAT Entry, Value Entry
          and Customer Ledger Entry.
      13. Test if the system calculates Line Discount on Sales Credit Memo.
      14. Test if the system creates GL Entry for the Line Discount on Sales Credit Memo.
      15. Test if the system calculates Invoice Discount on Sales Credit Memo.
      16. Test if the system creates GL Entry for the Invoice Discount on Sales Credit Memo.
      17. Test if a Sales Credit Memo can be applied against any document.
      18. Check GL Entry after Posting Partial Sales Order.
      19. Check Sales Order Posting Error Message when amount is Negative.
      20. Check Sales Line Archive for Archive Version after Posting Partial Sales Order.
      21. Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Invoice with ACY.
      22. Verify Remaining Amount on Customer Ledger Entry after posting payment against Remaining Payment Discount Ledger Entry with ACY.
      23. Check GL And Customer Ledger Entry for Amount and SalesPerson Code after Posting Sales Invoice.
      24. Verify that program should show those value on YTD which one is posted in Current year and the caption as Total Sales (LCY)
          in Customer Statistics-Bill to Customer Fact Box on Customer Card.
      25. Verify that program should show those value on YTD which one is posted in Current year and the caption as Total Sales (LCY)
          in Customer Statistics-Bill to Customer Fact Box on Customer Card.
      26. Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Credit Memo with Adjust for Payment Disc.
      27. Verify Amount on G/L Entry and Amount LCY on Customer Ledger Entry after posting Sales Invoice with Adjust for Payment Disc.
      28. Verifying that the posted Sales Shipment and posted Sales invoice have been created after posting.
      29. Verifying that the posted Return receipt and posted Sales Credit Memo have been created after posting return order.
      30. Verify Item Ledger Entry after receiving the Sales Return Order.
      31. Check Unit Price Incl VAT field in Sales Credit Memo Line created by using the function Get Return Recipt lines When Price
          Including VAT is True.
      32. Verify that after doing GetPostedDocumentLinesToReverse, system successfully generates the sales line for Standard Text code in Sales Return order.
      33. Test Payment Discount % on Sales Invoice after running Combine Shipments Report.
      34. Check Cost Amount(Expected) on Sales Analysis Matrix when Item Ledger Entry Type Filter Sales.
      35. Check Sales Amount on Sales Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      36. Check Cost Amount(Expected) on Sales Analysis Matrix when Item Ledger Entry Type Filter Purchase.
      37. Verify that bin code exist on sales order line,when re-enter the item no removes the default bin.
      38. Verify unapplied lines can be copied by copy document in Sales Return Order with Exact Cost Reversing Mandatory.
      39. Verify that Customer ledger entry exist With Document Type Refund when payment method code with balancing account.
      40. Check Sales Analysis Matrix open succefully when selecting the Source Type Filter And Source Number.
      41. Verify that Bin Code was not updated on Sales Line when re-enter the Qty. to Assemble to Order.
      42. Verify that Bin Code was not updated on Sales Line when re-enter the Quantity.

      Covers Test Cases for WI - 238096
      ------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ------------------------------------------------------------------------------------
      SalesReturnOrderCreation                                122331
      VATAmountOnReturnOrder                                  122345
      RecieveandInvoiceReturnOrder                            122335,122336,122338,122339,122340,122341,122343,122345
      InvoiceDiscountReturnOrder                              122346,122347
      LineDiscountReturnOrder                                 122344
      ApplyInvoiceFromReturnOrder                             122351
      LocationforReturnOrder                                  122342
      CurrencyOnReturnOrder                                   122348,122349
      CopyDocumentFromReturnOrder                             122350

       Covers Test Cases for WI - 244499
      ------------------------------------------------------------------------------
       Test Function Name                                                  TFS ID
      ------------------------------------------------------------------------------
       PartialSalesOrder                                                   127903

      Covers Test Cases for WI - 238092
      ----------------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------------------
      VATAmountOnCreditMemo                                   122353
      PostSalesReturnOrder                                    122355,122356,122358,122359,122360,122361,122363
      LineDiscountOnCreditMemo                                122364
      LineDiscountOnGLEntry                                   122365
      InvoiceDiscountOnCreditMemo                             122366
      InvoiceDiscountOnGLEntry                                122367
      ApplyInvoiceFromCreditMemo                              122371

      Covers Test Cases for WI - 254826
      ----------------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------------------
      PostPartialSalesOrder,SalesOrderNegativeErrorMsg        237609

      Covers Test Cases for WI - 254825
      ----------------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------------------
      ArchieveVersionSalesOrder                                251123

      Covers Test Cases: 252933
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      SalesInvoiceWithACY                                     125007
      RemainingPmtDiscPossibleACY                             125008

      Covers Test Cases: 256664
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      SalesPersonCodeSalesInvoice                         236604

      Covers Test Cases for WI: 258352
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      CustomerStatisticsYearToDate                            253357,244965

      Covers Test Cases: 253884
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      SalesCreditMemoWithACY                                  126236
      SalesCreditMemoWithPaymentDisc                          126236
      SalesInvoiceWithPaymentDisc                             126236

      Cover Test Cases: 259817
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      SalesShipmentInvoice                                    129645
      SalesRetOrderReceiptCreditMemo                          129647

      Covers Test Cases: 258334
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      ReceiveSalesReturnOrder,UnitPriceInclVATOnSalesCrMemo   254089

      BUG ID 314887
      ----------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------
      CheckStandardTextLineOnSalesReturnOrder                  313132

      Bug ID = 314881
      Covers Test cases:
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      PaymentDiscountPercentAfterRunningCombineShipment          313016

      Covers Test cases for Bug Id - 325373
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      SalesAnalysisReportWithItemLedgerEntryTypeSales,
      SalesAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeSale,
      SalesAnalysisReportWithItemLedgerEntryTypePurchaseAndValueTypeCost             325374

      BUG ID 332644
      -------------------------------------------------------------------------------------
      Test Function Name                                                           TFS ID
      -------------------------------------------------------------------------------------
      VerifyDefaultBinOnSalesLine

      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      SalesAnalysisReportMultipleColumns                         54413

      BUG ID 55373
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      CopyUnappliedSalesLineToSalesReturnOrderByCopyDocument

      BUG ID 57766
      -------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------
      CustLedgerEntryWithDocumentTypeRefund

      BUG ID 73286
      -------------------------------------------------------------------
      Test Function Name
      -------------------------------------------------------------------
      SalesAnalysisReportWithSourceNoFilter

      BUG ID 97175
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      CopyUnappliedSalesLineToSalesReturnOrderByCopyDocument     351642

      SalesAnalysisReportExcludeLinesWithShowNo                  359346
      VerifyBinCodeOnSalesLineAfterUpdatingQtyToAsmToOrder
      VerifyBinCodeOnSalesLineAfterUpdatingQuantity
    }
    END.
  }
}

