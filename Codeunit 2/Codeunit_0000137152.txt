OBJECT Codeunit 137152 SCM Warehouse - Receiving
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ConsumptionItemJournalTemplate@1049 : Record 82;
      ConsumptionItemJournalBatch@1044 : Record 233;
      OutputItemJournalTemplate@1047 : Record 82;
      OutputItemJournalBatch@1045 : Record 233;
      ItemJournalTemplate@1018 : Record 82;
      ItemJournalBatch@1017 : Record 233;
      LocationWhite@1001 : Record 14;
      LocationWhite2@1019 : Record 14;
      LocationWhite3@1000 : Record 14;
      LocationOrange@1015 : Record 14;
      LocationSilver@1024 : Record 14;
      LocationSilver2@1042 : Record 14;
      LocationWhite4@1033 : Record 14;
      LocationRed@1032 : Record 14;
      LocationRed2@1051 : Record 14;
      LocationBlue@1031 : Record 14;
      LocationGreen@1034 : Record 14;
      LocationBrown@1039 : Record 14;
      LocationInTransit@1028 : Record 14;
      LocationWithRequirePick@1007 : Record 14;
      LocationWithRequirePick2@1053 : Record 14;
      WarehouseJournalTemplate@1005 : Record 7309;
      WarehouseJournalBatch@1004 : Record 7310;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1038 : Codeunit 131004;
      LibraryAssembly@1066 : Codeunit 132207;
      LibraryPlanning@1040 : Codeunit 132203;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryManufacturing@1048 : Codeunit 132202;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1065 : Codeunit 130502;
      LibraryPurchase@1011 : Codeunit 130512;
      LibrarySales@1037 : Codeunit 130509;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryDimension@1056 : Codeunit 131001;
      LibraryRandom@1006 : Codeunit 130440;
      isInitialized@1008 : Boolean;
      InvPutAwayMessage@1022 : TextConst 'ENU=Number of Invt. Put-away activities created';
      InvPickMessage@1021 : TextConst 'ENU=Number of Invt. Pick activities created';
      NothingToCreateMessage@1052 : TextConst 'ENU=There is nothing to create.';
      InventoryPickActivitiesCreatedMessage@1012 : TextConst 'ENU=Number of Invt. Pick activities created: 2 out of a total of 3.';
      NotEnoughBinCapacityError@1013 : TextConst 'ENU=There is not enough bin capacity for items.';
      UnexpectedError@1014 : TextConst 'ENU=Unexpected Error.';
      WhseActivityDelete@1003 : TextConst 'ENU=All related Warehouse Activity Lines are deleted';
      PutAwayActivityCreatedMessage@1023 : TextConst 'ENU=Put-away activity no.';
      PickActivityCreatedMessage@1025 : TextConst 'ENU="Pick activity no. "';
      CannotHandleMoreUnitsError@1026 : TextConst 'ENU=You cannot handle more than the outstanding';
      ExceedsAvailableCapacity@1029 : TextConst '@@@="%1= Field Caption,%2= Current capacity value,%3= Available Capacity,%4= Table Caption, %5= Field value.";ENU=%1 to place (%2) exceeds the available capacity (%3) on %4 %5.\Do you still want to use this %4 ?';
      ExceedsMaximumCubage@1027 : TextConst '@@@="%1 = Cubage Value, %2 = Maximum Quantity, %3 =  Maximum Cubage Caption, %4 = Maximum Cubage Value, %5 = Bin Table Caption";ENU=The total cubage %1 of the %2 for the %5 exceeds the %3 %4 of the %5.\Do you still want enter this %2?';
      TransferOrderDeletedMessage@1036 : TextConst 'ENU=The transfer order %1 has been deleted.';
      WarehouseRequestCreatedMessage@1041 : TextConst 'ENU=Inbound Whse. Requests are created.';
      QuantityMustBeSame@1043 : TextConst 'ENU=Quantity must be same.';
      NoOfLinesMustBeGreater@1046 : TextConst 'ENU=No. of lines must be greater on Header.';
      NothingToHandle@1054 : TextConst 'ENU=Nothing to handle.';
      CancelAllReservationsConfirm@1055 : TextConst 'ENU=Do you want to cancel all reservations';
      QuantityBaseError@1057 : TextConst '@@@="%1 = Quantity, %2 = Location Code, %3 = Bin Code, %4 = Item No., %5 = Unit of Measure Code";ENU="Quantity (Base) must not be %1 in Bin Content Location Code=''%2'',Bin Code=''%3'',Item No.=''%4'',Variant Code='''',Unit of Measure Code=''%5''."';
      ItemNoMustNotBeChangedWhenWarehouseActivityLineExists@1058 : TextConst '@@@="%1 = Item No.,%2 = Table Caption, %3 = Document No., %4 = Line No.";ENU=%1 must not be changed when a Warehouse Activity Line for this %2 exists';
      NegativeAdjustmentConfirmMessage@1020 : TextConst 'ENU=One or more reservation entries exist for the item with';
      PostJournalLinesConfirmationMessage@1060 : TextConst 'ENU=Do you want to post the journal lines';
      JournalLinesPostedMessage@1059 : TextConst 'ENU=The journal lines were successfully posted';
      ItemLedgerEntryErr@1061 : TextConst 'ENU=It should generate the right count Item Ledger Entry';
      ShipmentBinCodeErr@1063 : TextConst 'ENU=Bin Code Should be Shipment Bin Code of Location';
      ReceiptBinCodeErr@1062 : TextConst 'ENU=Bin Code Should be Receipt Bin Code of Location';
      PickQuantityBaseErr@1064 : TextConst 'ENU=Pick Quantity (Base) was Calculated incorrectly';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE NothingToCreateForInventoryPuAwayWithRequirePick@49();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      WarehouseRequest@1002 : Record 5765;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Setup: Create Item and Post Item Journal. Create Sales Order with multiple lines with Shipping Advice Complete.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(
        Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",LibraryRandom.RandDec(10,2),LocationWithRequirePick.Code,
        FALSE);
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Complete,Item."No.",Item."No.",LibraryRandom.RandDec(10,2),
        LocationWithRequirePick.Code,TRUE);
      LibraryVariableStorage.Enqueue(NothingToCreateMessage);  // Handled in Message Handler.

      // Exercise: Invoke Create Inventory Put-Away and handle the Message.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",LocationWithRequirePick.Code,TRUE,FALSE);

      // Verify: Nothing to Create Message in the Message Handler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateInventoryPickWithDifferentShippingAdvice@8();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ItemJournalLine@1009 : Record 83;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesHeader3@1004 : Record 36;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseRequest@1006 : Record 5765;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create two Items. Post Item Journal line for one Item. Create and release Sales Orders with different Shipping Advice.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndPostItemJournalLine(
        Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",100 + LibraryRandom.RandDec(10,2),
        LocationWithRequirePick2.Code,FALSE);  // Large value required for the test.
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Partial,Item."No.",'',Quantity,LocationWithRequirePick2.Code,FALSE);
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader2,SalesHeader."Shipping Advice"::Complete,Item."No.",Item2."No.",Quantity,LocationWithRequirePick2.Code,TRUE);
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader3,SalesHeader."Shipping Advice"::Partial,Item."No.",Item2."No.",Quantity,LocationWithRequirePick2.Code,TRUE);
      LibraryVariableStorage.Enqueue(InventoryPickActivitiesCreatedMessage);  // Handled in Message Handler.

      // Exercise: Create Inventory Pick for all Sales Orders on the Location.
      WarehouseRequest.SETRANGE("Location Code",LocationWithRequirePick2.Code);
      WarehouseRequest.FINDFIRST;
      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,FALSE,TRUE,FALSE);

      // Verify: Warehouse Activity Lines.
      ASSERTERROR FindWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Pick");
      Assert.AssertNothingInsideFilter;
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::" ",Item."No.",
        Quantity,LocationWithRequirePick2.Code,Item."Base Unit of Measure",'','','');
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader3."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::" ",Item."No.",
        Quantity,LocationWithRequirePick2.Code,Item."Base Unit of Measure",'','','');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PartialPostInventoryPutAwayWithLotAndBin@13();
    VAR
      Bin@1006 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PostedInvtPutAwayLine@1007 : Record 7341;
      WarehouseRequest@1003 : Record 5765;
      LotNo@1004 : Variant;
      Quantity@1001 : Decimal;
      ItemTrackingMode@1005 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Item with Lot Specific Tracking. Create and release Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      FindBin(Bin,LocationSilver.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationSilver.Code,Bin.Code,Item."No.",Quantity,Item."Base Unit of Measure",TRUE);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Enqueue(InvPutAwayMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationSilver.Code,TRUE,FALSE);

      // Exercise: Update Bin Code and Lot No. on Inventory Put-Away line and Post with Partial Quantity.
      PostInventoryPutAwayWithPartialQuantity(PurchaseHeader."No.",Bin.Code,LotNo,Quantity / 2);  // Value required for the test.
      PostInventoryPutAwayWithPartialQuantity(PurchaseHeader."No.",Bin.Code,LotNo,Quantity / 2);  // Value required for the test.

      // Verify: Posted Inventory Put-Away line.
      VerifyPostedInventoryPutLine(
        PostedInvtPutAwayLine."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationSilver.Code,Item."No.",Quantity / 2,
        Item."Base Unit of Measure",LotNo);  // Value required for the test.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPutAwayErrorWithCarryOutActionMessagePlan@25();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1006 : Record 36;
      WarehouseRequest@1007 : Record 5765;
      Quantity@1009 : Decimal;
    BEGIN
      // Setup: Create Item with Reordering Policy as Order. Post Item Journal line. Create and Release Sales Order.
      Initialize;
      CreateItemWithOrderReorderingPolicy(Item);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,LocationOrange.Code,FALSE);
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationOrange.Code,Item."No.",Quantity,FALSE);

      // Exercise: Calculate Plan on Requisition line and Carry out Action Message to create a Purchase Order.
      CarryOutActionMessageAfterCalculatePlanOnRequisitionLine(Item);

      // Verify: Reserved Quantity on Purchase Line.
      VerifyReservedQuantityOnPurchaseLine(Item."No.",Quantity);

      // Exercise: Create Inventory Put-Away from Sales Order.
      CreateAndReleaseSalesDocument(SalesHeader2,SalesHeader."Document Type"::Order,LocationOrange.Code,Item."No.",Quantity,FALSE);
      LibraryVariableStorage.Enqueue(NothingToCreateMessage);  // Handled in Message Handler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",LocationOrange.Code,TRUE,FALSE);

      // Verify: Nothing to Create Message in the Message Handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PartialPostInventoryPickWithLotNo@11();
    VAR
      Bin@1003 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1006 : Record 36;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseRequest@1007 : Record 5765;
      LotNo@1004 : Variant;
      Quantity@1002 : Decimal;
      ItemTrackingMode@1005 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Item with Lot Specific Tracking. Release and Post Purchase Order with Lot No. Create and Release Sales Order.
      // Create Inventory Pick. Update Lot No. and Quantity to Handle on Inventory Pick Line.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      FindBin(Bin,LocationSilver.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationSilver.Code,Bin.Code,Item."No.",Quantity,Item."Base Unit of Measure",TRUE);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationSilver.Code,Item."No.",Quantity,FALSE);
      LibraryVariableStorage.Enqueue(InvPickMessage);  // Handled in Message Handler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",LocationSilver.Code,FALSE,TRUE);
      UpdatePartialQuantityOnInventoryPickLine(WarehouseActivityHeader,SalesHeader."No.",LotNo,Quantity / 2);

      // Exercise: Post Inventory Pick with Partial Quantity.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Ship.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Ship.

      // Verify: Posted Inventory Pick Lines.
      VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver.Code,Item."No.",Quantity / 2,LotNo,0D,FALSE);  // Value required for the test.
      VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver.Code,Item."No.",Quantity / 2,LotNo,0D,TRUE);  // Value required for the test.
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,PutAwaySelectionPageHandler)]
    PROCEDURE BinCapacityErrorForCreatePutAwayFromPutAwayWorksheet@1();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PutAwayWorksheet@1005 : TestPage 7352;
      SortActivity@1002 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item. Set Maximum Quantity in Bin Content of Receive Bin of Location. Update Item Inventory using Warehouse Journal. Create and Release Purchase Order.
      // Create and Post the Warehouse Receipt. Open Put Away Worksheet page and invoke Get Warehouse Document.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandInt(10);
      FindBinWithBinTypeCode(Bin,LocationWhite2.Code,TRUE,FALSE,FALSE,FALSE);  // Find Receive Bin.
      CreateBinContentWithMaxQuantity(Bin,Item,Quantity);
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      CreatePurchaseOrderAndPostWarehouseReceipt(
        PurchaseHeader,LocationWhite2.Code,Item."No.",Quantity + LibraryRandom.RandDec(10,2),Item."Base Unit of Measure");
      PutAwayWorksheet.OPENEDIT;
      PutAwayWorksheet.GetWarehouseDocuments.INVOKE;
      COMMIT;  // Commit is required here.

      // Exercise: Invoke Create Put-Away from Put-Away Worksheet and handle the Error.
      LibraryVariableStorage.Enqueue(SortActivity);  // Enqueue for WhseSourceCreateDocumentHandler.
      ASSERTERROR PutAwayWorksheet.CreatePutAway.INVOKE;

      // Verify: Error Message.
      Assert.AreEqual(STRSUBSTNO(NotEnoughBinCapacityError),GETLASTERRORTEXT,UnexpectedError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PutAwayFromPutAwayWorksheetWithSKU@22();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseActivityHeader@1003 : Record 5766;
      WhseWorksheetLine@1007 : Record 7326;
      Quantity@1008 : Decimal;
      SortActivity@1005 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Item with different Put-Away Unit of Measure. Create Stock keeping Unit. Create and Release Purchase Order with multiple lines.
      // Create and Post Warehouse Receipt. Delete the Warehouse Put-Away.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithDifferentPutAwayUnitOfMeasure(Item,ItemUnitOfMeasure);
      CreateStockkeepingUnit(LocationWhite.Code,Item."No.",LocationWhite."Put-away Template Code");
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",ItemUnitOfMeasure.Code,
        '','');
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code);
      LibraryVariableStorage.Enqueue(WhseActivityDelete);  // Handled in Message Handler.
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMessage);  // Handled in Message Handler.
      DeleteWarehouseActivityLine(PurchaseHeader."No.");
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.

      // Exercise: Create Put-Away From Put-Away Worksheet.
      CreatePutAwayFromPutAwayWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity,FALSE);  // Taking 0 for Quantity.

      // Verify: Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,
        LocationWhite.Code,ItemUnitOfMeasure.Code,LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,
        LocationWhite.Code,ItemUnitOfMeasure.Code,Bin.Code,'','');
    END;

    [Test]
    PROCEDURE SortingByActionTypeOnPutAwayFromPutAwayWorksheet@143();
    VAR
      Item@1000 : Record 27;
      Item2@1005 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      WarehouseActivityLine@1006 : Record 5767;
      WhseWorksheetLine@1008 : Record 7326;
      Quantity@1002 : Decimal;
      OldUsePutAwayWorksheet@1003 : Boolean;
      SortActivity@1007 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Modify Use Put-Away Worksheet as True on Location. Create Items. Create Put-Away from two Purchase Orders.
      Initialize;
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      CreatePurchaseOrderAndPostWarehouseReceipt(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure");
      CreatePurchaseOrderAndPostWarehouseReceipt(PurchaseHeader2,LocationWhite.Code,Item2."No.",Quantity,Item2."Base Unit of Measure");

      // Exercise.
      CreatePutAwayFromPutAwayWorksheet(
        WhseWorksheetLine,LocationWhite.Code,Item."No.",Item2."No.",0,SortActivity::"Action Type",FALSE);  // Taking 0 for Quantity.

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",PurchaseHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
      VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType(WarehouseActivityLine,Item2."No.",Item."No.",Quantity);

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    [HandlerFunctions(WhseShipmentCreatePickHandler,MessageHandler)]
    PROCEDURE SortingByActionTypeOnPickFromGetSourceDocumentOnWarehouseShipment@148();
    VAR
      Item@1000 : Record 27;
      Item2@1005 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1004 : Record 38;
      SalesHeader@1009 : Record 36;
      SalesHeader2@1010 : Record 36;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentHeader@1012 : Record 7320;
      WarehouseShipmentLine@1016 : Record 7321;
      WarehouseSourceFilter@1013 : Record 5771;
      Quantity@1002 : Decimal;
      SortActivity@1007 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
      ItemTrackingMode@1014 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Items. Create and register Put-Away from two Purchase Orders. Create two Sales Orders. Get Source Documents on Warehouse Shipment.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite3.Code,Item."No.",Quantity,Item."Base Unit of Measure",FALSE,ItemTrackingMode,'');
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader2,LocationWhite3.Code,Item2."No.",Quantity,Item2."Base Unit of Measure",FALSE,ItemTrackingMode,'');
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationWhite3.Code,Item."No.",Quantity,FALSE);  // New Location required for the test.
      CreateAndReleaseSalesDocument(SalesHeader2,SalesHeader."Document Type"::Order,LocationWhite3.Code,Item2."No.",Quantity,FALSE);
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationWhite3.Code);
      WarehouseSourceFilter.SETFILTER("Source No. Filter",'%1|%2',SalesHeader."No.",SalesHeader2."No.");
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationWhite3.Code);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      LibraryVariableStorage.Enqueue(SortActivity::"Action Type");  // Enqueue for WhseSourceCreateDocumentHandler.
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETFILTER("Source No.",'%1|%2',SalesHeader."No.",SalesHeader2."No.");
      LibraryVariableStorage.Enqueue(PickActivityCreatedMessage);  // Enqueue for Message Handler.

      // Exercise: Create Pick from Warehouse Shipment with Sort Activity as Action Type.
      WarehouseShipmentLine.CreatePickDoc(WarehouseShipmentLine,WarehouseShipmentHeader);

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",SalesHeader2."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType(WarehouseActivityLine,Item2."No.",Item."No.",Quantity);
      VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,WhseSourceCreateDocumentHandler)]
    PROCEDURE SortingByActionTypeOnPutAwayFromInternalPutAway@160();
    VAR
      Bin@1004 : Record 7354;
      Item@1000 : Record 27;
      Item2@1009 : Record 27;
      WarehouseActivityLine@1006 : Record 5767;
      WhseInternalPutAwayLine@1001 : Record 7332;
      Quantity@1002 : Decimal;
      SortActivity@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Items. Create and Release Warehouse Internal Put-Away.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      FindAdjustmentBin(Bin,LocationWhite);
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,'');
      CreateAndReleaseWarehouseInternalPutAway(WhseInternalPutAwayLine,Bin,Item."No.",Item2."No.",Quantity,Quantity);
      LibraryVariableStorage.Enqueue(SortActivity::"Action Type");  // Enqueue for WhseSourceCreateDocumentHandler.
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMessage);  // Enqueue for MessageHandler.
      WhseInternalPutAwayLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");

      // Exercise: Create Put-Away from Internal Put-Away.
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      WarehouseActivityLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'','',WarehouseActivityLine."Activity Type"::"Put-away");
      VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
      VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,WhseSourceCreateDocumentHandler)]
    PROCEDURE SortingByActionTypeOnPickFromInternalPick@158();
    VAR
      Bin@1004 : Record 7354;
      Item@1000 : Record 27;
      Item2@1009 : Record 27;
      WarehouseActivityLine@1006 : Record 5767;
      WhseInternalPickHeader@1001 : Record 7333;
      WhseInternalPickLine@1007 : Record 7334;
      WhseInternalPutAwayLine@1011 : Record 7332;
      Quantity@1002 : Decimal;
      SortActivity@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Items. Update Inventory using Warehouse Item Journal. Create Put-Away from Warehouse Internal Put-Away and Register it.
      // Create and Release Warehouse Internal Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      FindAdjustmentBin(Bin,LocationWhite);
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,'');
      CreateAndReleaseWarehouseInternalPutAway(WhseInternalPutAwayLine,Bin,Item."No.",Item2."No.",Quantity,Quantity);
      LibraryVariableStorage.Enqueue(SortActivity::" ");  // Enqueue for WhseSourceCreateDocumentHandler.
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMessage);  // Enqueue for MessageHandler.
      WhseInternalPutAwayLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);
      WarehouseActivityLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleaseWarehouseInternalPick(WhseInternalPickHeader,WhseInternalPickLine,Bin,Item."No.",Item2."No.",Quantity,Quantity);
      LibraryVariableStorage.Enqueue(SortActivity::"Action Type");  // Enqueue for WhseSourceCreateDocumentHandler.
      LibraryVariableStorage.Enqueue(PickActivityCreatedMessage);  // Enqueue for MessageHandler.
      WhseInternalPickLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");

      // Exercise: Create Pick from Warehouse Internal Pick.
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      WarehouseActivityLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",'',
        WarehouseActivityLine."Activity Type"::Pick);
      VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
      VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
    END;

    [Test]
    PROCEDURE SortingByActionTypeOnMovementFromMovementWorksheet@159();
    VAR
      Bin@1004 : Record 7354;
      Bin2@1001 : Record 7354;
      Item@1000 : Record 27;
      Item2@1009 : Record 27;
      WarehouseActivityLine@1006 : Record 5767;
      WhseWorksheetLine@1007 : Record 7326;
      WhseWorksheetName@1018 : Record 7327;
      Quantity@1002 : Decimal;
      SortActivity@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Items. Update Inventory using Warehouse Item Journal. Create Movement Worksheet Lines for both Items.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      FindAdjustmentBin(Bin,LocationWhite);
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,'');
      FindBinWithBinTypeCode(Bin2,LocationWhite.Code,FALSE,TRUE,FALSE,FALSE);  // Find BULK Bin.
      CreateWarehouseWorksheetNameForMovement(WhseWorksheetName);
      CreateMovementWorksheetLine(WhseWorksheetName,Item."No.",Bin,Bin2,Quantity);
      CreateMovementWorksheetLine(WhseWorksheetName,Item2."No.",Bin,Bin2,Quantity);

      // Exercise: Create Movement from Movement Worksheet Lines.
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,SortActivity::"Action Type",FALSE,FALSE,FALSE);

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      WarehouseActivityLine.SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'','',WarehouseActivityLine."Activity Type"::Movement);
      VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
      VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType(WarehouseActivityLine,Item."No.",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterPutAwayWithPurchaseUnitOfMeasureAndLotNo@20();
    VAR
      Bin@1008 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      RegisteredWhseActivityLine@1007 : Record 5773;
      LotNo@1006 : Variant;
      Quantity@1003 : Decimal;
      ItemTrackingMode@1004 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Item with Lot specific Tracking and different Purchase Unit of Measure.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking 0 for Blank Length.
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.

      // Exercise: Create and Register Put-Away from Purchase Order with Lot No.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,ItemUnitOfMeasure.Code,TRUE,ItemTrackingMode::"Assign Lot No.",Bin.Code);  // Taking True for Item Tracking.
      LibraryVariableStorage.Dequeue(LotNo);

      // Verify: Registered Warehouse Activity Lines and Bin Content.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,ItemUnitOfMeasure.Code,LotNo,'',
        LocationWhite."Receipt Bin Code");
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity,ItemUnitOfMeasure.Code,LotNo,'',Bin.Code);
      VerifyBinContent(LocationWhite.Code,Bin.Code,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for the test.
    END;

    [Test]
    PROCEDURE QuantityToReceiveMoreThanOutstandingOnWarehouseReceiptError@37();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1004 : Record 38;
      WarehouseReceiptHeader@1001 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Purchase Order. Create Warehouse Receipt Header and Get Source Document to create Receipt line.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",FALSE);
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,TRUE,FALSE,FALSE,Item."No.",Item."No.");
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptHeader."No.");
      WarehouseReceiptLine.FINDFIRST;

      // Exercise: Enter Quantity to Receive more than the Quantity in Purchase Line.
      ASSERTERROR WarehouseReceiptLine.VALIDATE("Qty. to Receive",Quantity + LibraryRandom.RandDec(10,2));  // Value is required to generate the Error.

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(CannotHandleMoreUnitsError));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE RegisterPutAwayWithSerialAndLot@34();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      RegisteredWhseActivityLine@1004 : Record 5773;
      LotNo@1005 : Variant;
      Quantity@1001 : Decimal;
      ItemTrackingMode@1003 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Item with Serial and Lot specific Tracking.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithItemTrackingCode(Item,TRUE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Serial and Lot.

      // Exercise: Create and register Put-Away from Purchase Order.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",TRUE,
        ItemTrackingMode::"Assign Lot And Serial",'');
      LibraryVariableStorage.Dequeue(LotNo);

      // Verify.
      VerifyLotAndSerialOnRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Take,LotNo,0D);  // Use 0D for blank Expiration Date.
      VerifyLotAndSerialOnRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place,LotNo,0D);  // Use 0D for blank Expiration Date.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE BinMaximumCubageConfirmWithWarehouseReceipt@65();
    BEGIN
      // Setup.
      Initialize;
      BinMaximumCubageAndMaximumQuantityConfirmWithWarehouseReceipt(FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE BinContentMaximumQuantityConfirmWithWarehouseReceipt@66();
    BEGIN
      // Setup.
      Initialize;
      BinMaximumCubageAndMaximumQuantityConfirmWithWarehouseReceipt(TRUE);  // Taking True for Maximum Quantity Confirm Message.
    END;

    LOCAL PROCEDURE BinMaximumCubageAndMaximumQuantityConfirmWithWarehouseReceipt@43(MaximumQuantityConfirm@1012 : Boolean);
    VAR
      Bin@1004 : Record 7354;
      BinContent@1014 : Record 7302;
      Item@1002 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1007 : Record 38;
      Zone@1003 : Record 7300;
      Quantity@1006 : Decimal;
      Quantity2@1013 : Decimal;
      OldBinCapacityPolicy@1010 : Option;
    BEGIN
      // Update Bin Capacity Policy on Location. Create Item with different Item Unit of Measure. Create Bin for Receive Zone with Maximum Cubage. Create Warehouse Receipt from Purchase Order.
      UpdateBinCapacityPolicyOnLocation(
        LocationWhite,OldBinCapacityPolicy,LocationWhite."Bin Capacity Policy"::"Prohibit More Than Max. Cap.");
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5));  // Taking Width and Height as Length as value is not important for test.
      Quantity := LibraryRandom.RandInt(5);
      Quantity2 := Quantity + LibraryRandom.RandInt(5);  // Value required for the test.
      FindZone(Zone,LocationWhite.Code,TRUE,FALSE,FALSE);  // Find Receive Zone.
      CreateBinWithMaximumCubage(Bin,Zone,Quantity * ItemUnitOfMeasure.Cubage);  // Value required for the test.
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity2,ItemUnitOfMeasure.Code);

      // Values required for the test. Enqueue for MessageHandler.
      LibraryVariableStorage.Enqueue(
        STRSUBSTNO(
          ExceedsAvailableCapacity,ItemUnitOfMeasure.FIELDCAPTION(Cubage),Quantity2 * ItemUnitOfMeasure.Cubage,Bin."Maximum Cubage",
          Bin.TABLECAPTION,Bin.Code));

      // Exercise: Validate Bin Code on Warehouse Receipt Line to generate a Confirm Message.
      UpdateBinCodeOnWarehouseReceiptLine(PurchaseHeader."No.",Bin.Code,'',LocationWhite.Code);

      // Verify: Verification is done by Confirm Handler.

      IF MaximumQuantityConfirm THEN BEGIN
        // Exercise: Create Bin Content and validate Maximum Quantity to generate a Confirm Message.
        LibraryWarehouse.CreateBinContent(
          BinContent,LocationWhite.Code,Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");

        // Enqueue for MessageHandler. Values required for the test.
        LibraryVariableStorage.Enqueue(
          STRSUBSTNO(
            ExceedsMaximumCubage,Quantity2 * ItemUnitOfMeasure.Cubage,BinContent.FIELDCAPTION("Max. Qty."),
            Bin.FIELDCAPTION("Maximum Cubage"),Bin."Maximum Cubage",Bin.TABLECAPTION));
        BinContent.VALIDATE("Max. Qty.",Quantity2);

        // Verify: Verification is done by Confirm Handler.
      END;

      // Tear Down.
      UpdateBinCapacityPolicyOnLocation(LocationWhite,OldBinCapacityPolicy,OldBinCapacityPolicy);
    END;

    [Test]
    PROCEDURE ChangingFromUnitofMeasureInMovementWorksheetLine@262();
    VAR
      Item@1002 : Record 27;
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      // [FEATURE] [Whse. Worksheet]
      // [SCENARIO 378278] Field "From Unit of Measure Code" in Whse. Worksheet Line should be validated successfully when "Unit of Measure" is not set for this line.

      // [GIVEN] Create Item and Item Unit of Measure assigned with this item.
      Initialize;
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create Whse. Worksheet Line.
      CreateMovementWorksheetLineWithNoUoM(WhseWorksheetLine,Item."No.");

      // [WHEN] Validate "From Unit of Measure Code" on warehouse worksheet line.
      WhseWorksheetLine.VALIDATE("From Unit of Measure Code",Item."Base Unit of Measure");

      // [THEN] Field "From Unit of Measure Code" should be validated successfully.
      WhseWorksheetLine.TESTFIELD("From Unit of Measure Code",Item."Base Unit of Measure");
    END;

    [Test]
    PROCEDURE SetBlankFromUnitofMeasureInMovementWorksheetLine@276();
    VAR
      Item@1002 : Record 27;
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      // [FEATURE] [Whse. Worksheet]
      // [SCENARIO 378278] Field "Qty. per From Unit of Measure" in Whse. Worksheet Line should be equal to "1" when "From Unit of Measure Code" is blank

      // [GIVEN] Create Item and Item Unit of Measure assigned to this item.
      Initialize;
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create Whse. Worksheet Line.
      CreateMovementWorksheetLineWithNoUoM(WhseWorksheetLine,Item."No.");

      // [WHEN] Set blank "From Unit of Measure Code"
      WhseWorksheetLine.VALIDATE("From Unit of Measure Code",'');

      // [THEN] Field "Qty. per From Unit of Measure" should be "1"
      WhseWorksheetLine.TESTFIELD("Qty. per From Unit of Measure",1);
    END;

    [Test]
    PROCEDURE PutAwayFromPurchaseOrderUsingMultipleBinsWithMaximumCubageAndWeight@58();
    VAR
      Bin@1007 : Record 7354;
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
      ItemUnitOfMeasure2@1004 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      Zone@1008 : Record 7300;
      Quantity@1002 : Decimal;
      Cubage@1005 : Decimal;
    BEGIN
      // Setup: Create Item with different Put-Away Unit of Measure. Update Cubage and Weight on both Item Units of Measures. Create Zone with Bin Type as Put-Away and Pick. Create Warehouse Receipt from Purchase Order.
      Initialize;
      Cubage := LibraryRandom.RandInt(5);
      Quantity := LibraryRandom.RandInt(5);
      CreateItemWithDifferentPutAwayUnitOfMeasure(Item,ItemUnitOfMeasure);
      ItemUnitOfMeasure2.GET(Item."No.",Item."Base Unit of Measure");
      UpdateCubageAndWeightOnItemUnitOfMeasure(ItemUnitOfMeasure2,Cubage);
      UpdateCubageAndWeightOnItemUnitOfMeasure(ItemUnitOfMeasure,Cubage * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for the test.
      CreateBinsForPickZoneWithBinRanking(Zone,LocationWhite4.Code,Quantity);
      UpdateMaximumCubageAndWeightOnBins(Bin,Zone,Cubage * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for the test.
      CreateWarehouseReceiptFromPurchaseOrder(
        PurchaseHeader,LocationWhite4.Code,Item."No.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        Item."Base Unit of Measure");  // Value required for the test.

      // Exercise.
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite4.Code);

      // Verify: Put-Away lines.
      VerifyPutAwayLinesWithMultipleBins(
        Bin,Item,ItemUnitOfMeasure,LocationWhite4,PurchaseHeader."No.",Quantity,ItemUnitOfMeasure2."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostInventoryPutAwayFromReleasedProductionOrderWithDifferentUnitOfMeasureAndLotNo@69();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      ProductionOrder@1002 : Record 5405;
      PostedInvtPutAwayLine@1008 : Record 7341;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseRequest@1005 : Record 5765;
      LotNo@1004 : Code[20];
    BEGIN
      // Setup: Create Item with Lot specific Tracking. Create and refresh Production Order with different Unit of Measure. Create Inbound Warehouse Request and create Inventory Put-Away.
      Initialize;
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking Blank Length.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2),LocationBrown.Code);
      UpdateUnitOfMeasureOnProductionOrderLine(ProductionOrder,ItemUnitOfMeasure.Code);
      LibraryVariableStorage.Enqueue(WarehouseRequestCreatedMessage);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInboundWhseReqFromProdO(ProductionOrder);
      LibraryVariableStorage.Enqueue(InvPutAwayMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Prod. Output",ProductionOrder."No.",LocationBrown.Code,TRUE,FALSE);
      LotNo := LibraryUtility.GenerateGUID;
      UpdateLotNoAndQuantityToHandleOnInventoryPutAwayLine(WarehouseActivityHeader,ProductionOrder."No.",LotNo);

      // Exercise.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);

      // Verify.
      VerifyPostedInventoryPutLine(
        PostedInvtPutAwayLine."Source Document"::"Prod. Output",ProductionOrder."No.",LocationBrown.Code,Item."No.",
        ProductionOrder.Quantity,ItemUnitOfMeasure.Code,LotNo);
    END;

    [Test]
    PROCEDURE PutAwayFromPurchaseOrderWithMultipleLocationsAndVariantCode@55();
    VAR
      Bin@1005 : Record 7354;
      Item@1002 : Record 27;
      ItemVariant@1004 : Record 5401;
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item with Variant. Create and release Purchase Order with multiple lines of different locations. Create Warehouse Receipts from Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationGreen.Code,Item."No.",Quantity,Item."Base Unit of Measure",
        Item."Base Unit of Measure",ItemVariant.Code,'');
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.

      // Exercise.
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationGreen.Code);

      // Verify.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",ItemVariant.Code,'');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,ItemVariant.Code,'');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::" ",
        Item."No.",Quantity,LocationGreen.Code,Item."Base Unit of Measure",'','','');
    END;

    [Test]
    PROCEDURE GetSourceDocumentOnWarehouseReceiptWithMultiplePurchaseOrders@54();
    VAR
      Bin@1006 : Record 7354;
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseHeader2@1003 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Items. Create and release two Purchase Orders. Get Source Document on Warehouse Receipt for both Purchase Orders.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",FALSE);
      CreateAndReleasePurchaseOrder(PurchaseHeader2,LocationWhite.Code,'',Item2."No.",Quantity,Item2."Base Unit of Measure",FALSE);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,TRUE,FALSE,FALSE,Item."No.",Item2."No.");

      // Exercise.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item2."No.",Quantity,LocationWhite.Code,Item2."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item2."No.",Quantity,LocationWhite.Code,Item2."Base Unit of Measure",Bin.Code,'','');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GetSourceDocumentOnWarehouseReceiptWithMultipleTransferOrdersFromDifferentLocations@53();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      TransferHeader@1002 : Record 5740;
      TransferHeader2@1003 : Record 5740;
      ItemJournalLine@1007 : Record 83;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item. Post Item Journal on two Locations. Create and Post two Transfer Orders. Get Source Document on Warehouse Receipt for both Transfer Orders.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,LocationBlue.Code,FALSE);
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,LocationRed.Code,FALSE);
      CreateAndShipTransferOrder(TransferHeader,LocationBlue.Code,LocationWhite.Code,Item."No.",Quantity,FALSE);
      CreateAndShipTransferOrder(TransferHeader2,LocationRed.Code,LocationWhite.Code,Item."No.",Quantity,FALSE);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,FALSE,TRUE,FALSE,Item."No.",Item."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedMessage,TransferHeader."No."));  // Enqueue for MessageHandler.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedMessage,TransferHeader2."No."));  // Enqueue for MessageHandler.

      // Exercise.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
    END;

    [Test]
    PROCEDURE GetSourceDocumentOnWarehouseReceiptWithMultipleSalesReturnOrders@52();
    VAR
      Bin@1006 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1003 : Record 36;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release two Sales Return Orders. Get Source Document on Warehouse Receipt for both Sales Return Orders.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Return Order",LocationWhite.Code,Item."No.",Quantity,FALSE);
      CreateAndReleaseSalesDocument(
        SalesHeader2,SalesHeader."Document Type"::"Return Order",LocationWhite.Code,Item."No.",Quantity,FALSE);
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,FALSE,FALSE,TRUE,Item."No.",Item."No.");
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.

      // Exercise.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Return Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Return Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Return Order",SalesHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'','');
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Return Order",SalesHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE PostInventoryPutAwayAndPickWithSerialLotAndExpirationDateOnPurchaseOrder@83();
    BEGIN
      Initialize;
      PostInventoryPutAwayAndPickWithSerialLotAndExpirationDate(FALSE);  // Expiration Date on Inventory Put Away as FALSE.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE PostInventoryPutAwayAndPickWithSerialLotAndExpirationDateModifiedOnInventoryPutAway@82();
    BEGIN
      Initialize;
      PostInventoryPutAwayAndPickWithSerialLotAndExpirationDate(TRUE);  // Expiration Date on Inventory Put Away as TRUE.
    END;

    LOCAL PROCEDURE PostInventoryPutAwayAndPickWithSerialLotAndExpirationDate@81(ExpirationDateOnInventoryPutAway@1008 : Boolean);
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseRequest@1004 : Record 5765;
      WarehouseActivityLine@1003 : Record 5767;
      SalesHeader@1002 : Record 36;
      LotNo@1009 : Variant;
      Quantity@1001 : Decimal;
      ExpirationDate@1000 : Date;
    BEGIN
      // Setup: Create Items with Item Tracking Code, create and release Purchase Order with Tracking, update Expiration Date on Reservation Entry. Create Inventory Put Away. Modify Expiration Date on Put Away, Post Inventory Put Away.
      // Create and Release Sales Order with Tracking. Create Inventory Pick.
      Quantity := LibraryRandom.RandInt(5);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // Taking True for Serial.
      CreateItemWithItemTrackingCode(Item2,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      CreateAndReleasePurchaseOrderWithTrackingOnMultipleLines(PurchaseHeader,Item."No.",Quantity,Item2."No.",LocationSilver2.Code);
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue for ItemTrackingPageHandler.
      UpdateExpirationDateOnReservationEntry(Item."No.",WORKDATE);
      UpdateExpirationDateOnReservationEntry(Item2."No.",WORKDATE);
      LibraryVariableStorage.Enqueue(InvPutAwayMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationSilver2.Code,TRUE,FALSE);
      IF ExpirationDateOnInventoryPutAway THEN BEGIN
        ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
        UpdateExpirationDateOnInventoryPutAway(PurchaseHeader."No.",Item."No.",ExpirationDate);
        UpdateExpirationDateOnInventoryPutAway(PurchaseHeader."No.",Item2."No.",ExpirationDate);
      END;
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away",TRUE);  // Post as Invoice.
      CreateAndReleaseSalesOrderWithMultipleLines(SalesHeader,LocationSilver2.Code,Item."No.",Item2."No.",'','',Quantity,TRUE);
      LibraryVariableStorage.Enqueue(InvPickMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",LocationSilver2.Code,FALSE,TRUE);
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // Exercise: Post Inventory Pick.
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick",
        TRUE);  // Post as Invoice.

      // Verify: Posted Inventory Pick Lines for Expiration Date.
      IF ExpirationDateOnInventoryPutAway THEN BEGIN
        VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver2.Code,Item2."No.",Quantity,LotNo,ExpirationDate,FALSE);
        VerifyPostedInventoryPickLineForSerialNo(SalesHeader."No.",Item."No.",LocationSilver2.Code,ExpirationDate,Quantity);
      END ELSE BEGIN
        VerifyPostedInventoryPickLine(SalesHeader."No.",LocationSilver2.Code,Item2."No.",Quantity,LotNo,WORKDATE,FALSE);
        VerifyPostedInventoryPickLineForSerialNo(SalesHeader."No.",Item."No.",LocationSilver2.Code,WORKDATE,Quantity);
      END;
    END;

    [Test]
    PROCEDURE RegisterPutAwayWithUpdatingBinAsCrossDock@80();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      Bin@1005 : Record 7354;
    BEGIN
      // Setup: Create and Post Warehouse Receipt. Update Cross-Dock Bin on Warehouse Put Away.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrderAndPostWarehouseReceipt(
        PurchaseHeader,LocationWhite.Code,Item."No.",LibraryRandom.RandDec(10,2),Item."Base Unit of Measure");
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");  // Get Cross-Dock Bin.
      UpdateBinCodeOnPutAwayLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise: Register Warehouse Put Away after Updating Cross-Dock Bin.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify: Warehouse Entry for Cross-Dock.
      VerifyWarehouseEntry(Bin,Item."No.",WarehouseActivityLine.Quantity);
    END;

    [Test]
    PROCEDURE PostWareHouseReceiptWithChangedPutAwayTemplate@77();
    VAR
      PutAwayTemplateHeader@1000 : Record 7307;
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1004 : Record 5766;
      Bin@1005 : Record 7354;
      OldPutAwayTemplateCode@1006 : Code[10];
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Item with Put-Away Unit of Measure.Create Bin and update Bin Content. Create Put-Away Template.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      UpdatePutAwayUnitOfMeasureOnItem(Item,Item."Base Unit of Measure");
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,TRUE);  // Taking TRUE for Fixed Bin.
      CreatePutAwayTemplate(PutAwayTemplateHeader,TRUE,FALSE,TRUE,TRUE);  // Taking TRUE for Fixed and FindBinLessthanMinQty.
      OldPutAwayTemplateCode := UpdatePutAwayTemplateCodeOnLocation(LocationWhite,PutAwayTemplateHeader.Code);

      // Exercise.
      CreatePurchaseOrderAndPostWarehouseReceipt(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure");

      // Verify: Bin is Placed According to Put Away Template Code in Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",
        Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');

      // TearDown: Update Location with Old Put-Away Template Code.
      UpdatePutAwayTemplateCodeOnLocation(LocationWhite,OldPutAwayTemplateCode);
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptWithDifferentPutAwayTemplateItem@74();
    BEGIN
      Initialize;
      PostWarehouseReceiptWithDifferentPutAwayTemplate(FALSE);  // Taking False for UsestockKeepingUnit.
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptWithDifferentPutAwayTemplateSKU@70();
    BEGIN
      Initialize;
      PostWarehouseReceiptWithDifferentPutAwayTemplate(TRUE);  // Taking True for UsestockKeepingUnit.
    END;

    LOCAL PROCEDURE PostWarehouseReceiptWithDifferentPutAwayTemplate@62(UseStockKeepingUnit@1011 : Boolean);
    VAR
      PutAwayTemplateHeader@1000 : Record 7307;
      PutAwayTemplateHeader2@1012 : Record 7307;
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1004 : Record 5766;
      Bin@1005 : Record 7354;
      Bin2@1010 : Record 7354;
      OldPutAwayTemplateCode@1007 : Code[10];
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Put-Away Template. Create purchase order and Post Partial Warehouse Receipt. Update Put-Away Template.
      Quantity := LibraryRandom.RandInt(50) + 10;  // Value Required for Test.
      LibraryInventory.CreateItem(Item);
      UpdatePutAwayUnitOfMeasureOnItem(Item,Item."Base Unit of Measure");
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,TRUE);  // Taking TRUE for Fixed Bin.
      CreatePutAwayTemplate(PutAwayTemplateHeader,TRUE,FALSE,TRUE,TRUE);  // Taking TRUE for Fixed.
      CreateBinAndUpdateBinContent(Bin2,Item,LocationWhite.Code,0,FALSE);
      CreatePutAwayTemplate(PutAwayTemplateHeader2,FALSE,TRUE,FALSE,TRUE);  // Taking TRUE for FindFloatingBin.
      OldPutAwayTemplateCode := UpdatePutAwayTemplateCodeOnLocation(LocationWhite,PutAwayTemplateHeader.Code);
      IF UseStockKeepingUnit THEN
        UpdatePutAwayTemplateCodeOnItem(Item."No.",PutAwayTemplateHeader2.Code);
      CreateAndPostPartialWarehouseReceipt(PurchaseHeader,Item,LocationWhite.Code,Quantity);
      IF UseStockKeepingUnit THEN
        CreateStockkeepingUnit(LocationWhite.Code,Item."No.",PutAwayTemplateHeader.Code)
      ELSE
        UpdatePutAwayTemplateCodeOnItem(Item."No.",PutAwayTemplateHeader2.Code);

      // Exercise: Post Partial Warehouse Receipt With Different Put-Away Template.
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);

      // Verify.
      IF UseStockKeepingUnit THEN
        VerifyWarehouseActivityLine(
          WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",
          Quantity / 4,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','')
      ELSE
        VerifyWarehouseActivityLine(
          WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",
          Quantity / 4,LocationWhite.Code,Item."Base Unit of Measure",Bin2.Code,'','');  // Value required for the test as Quantity To Receive is Update Twice on Warehouse Receipt Line.

      // TearDown: Update Location with Old Put-Away Template Code.
      UpdatePutAwayTemplateCodeOnLocation(LocationWhite,OldPutAwayTemplateCode);
    END;

    [Test]
    PROCEDURE SortingByDueDateOnPutAwayFromPutAwayWorksheet@109();
    VAR
      Bin@1008 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WhseWorksheetLine@1009 : Record 7326;
      Quantity@1003 : Decimal;
      OldUsePutAwayWorksheet@1004 : Boolean;
      SortActivity@1005 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
      DueDate@1006 : Date;
      ExpectedReceiptDate@1001 : Date;
    BEGIN
      // Setup: Create Purchase Order with two lines. Create Warehouse Receipt and update different Due dates on two Receipt lines. Post the Warehouse Receipt.
      Initialize;
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,TRUE);  // Taking TRUE for Fixed Bin.
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",
        Item."Base Unit of Measure",'','');
      CreateWarehouseReceipt(PurchaseHeader);
      GetExpectedReceiptDateFromPurchaseLine(ExpectedReceiptDate,PurchaseHeader."No.");
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ExpectedReceiptDate);
      UpdateDueDateOnWarehouseReceiptLine(PurchaseHeader."No.",LocationWhite.Code,DueDate);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);

      // Exercise.
      CreatePutAwayFromPutAwayWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity::"Due Date",FALSE);  // Taking 0 for Quantity.

      // Verify: Put-Away lines get sorted by Due Date.
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",'',
        WarehouseActivityLine."Activity Type"::"Put-away");
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Quantity,LocationWhite."Receipt Bin Code",ExpectedReceiptDate,FALSE);
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin.Code,ExpectedReceiptDate,TRUE);  // TRUE for NextLine.
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Quantity,LocationWhite."Receipt Bin Code",DueDate,TRUE);  // TRUE for NextLine.
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin.Code,DueDate,TRUE);  // TRUE for NextLine.

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    PROCEDURE SortingByBinRankingOnPutAwayFromPutAwayWorksheet@108();
    VAR
      Bin@1001 : Record 7354;
      Bin2@1010 : Record 7354;
      Bin3@1006 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WhseWorksheetLine@1009 : Record 7326;
      Quantity@1003 : Decimal;
      OldUsePutAwayWorksheet@1004 : Boolean;
      SortActivity@1005 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
      ExpectedReceiptDate@1008 : Date;
    BEGIN
      // Setup: Create Purchase Order with two lines. Create Warehouse Receipt and update Bin Codes with different Bin Ranking on two Receipt lines. Post the Warehouse Receipt.
      Initialize;
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,TRUE);  // Taking TRUE for Fixed Bin.
      CreateBinForReceiveZoneWithBinRanking(Bin2,LocationWhite.Code,LibraryRandom.RandInt(50));
      CreateBinForReceiveZoneWithBinRanking(Bin3,LocationWhite.Code,Bin2."Bin Ranking" + LibraryRandom.RandInt(10));  // Greater value required for the test.
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",
        Item."Base Unit of Measure",'','');
      CreateWarehouseReceipt(PurchaseHeader);
      UpdateBinCodeOnWarehouseReceiptLine(PurchaseHeader."No.",Bin3.Code,Bin2.Code,LocationWhite.Code);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);
      GetExpectedReceiptDateFromPurchaseLine(ExpectedReceiptDate,PurchaseHeader."No.");

      // Exercise.
      CreatePutAwayFromPutAwayWorksheet(
        WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity::"Bin Ranking",FALSE);  // Taking 0 for Quantity.

      // Verify: Put-Away lines get sorted by Bin Ranking.
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",'',
        WarehouseActivityLine."Activity Type"::"Put-away");
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin2.Code,ExpectedReceiptDate,FALSE);
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin3.Code,ExpectedReceiptDate,TRUE);  // TRUE for NextLine.
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin.Code,ExpectedReceiptDate,TRUE);  // TRUE for NextLine.
      VerifyDueDateAndBinCodeOnWarehouseActivityLine(WarehouseActivityLine,Item."No.",Quantity,Bin.Code,ExpectedReceiptDate,TRUE);  // TRUE for NextLine.

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    PROCEDURE PutAwayFromPutAwayWorksheetWithBreakBulkFilterTrueOnCreatePutAwayPage@107();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1009 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityHeader@1011 : Record 5766;
      WhseWorksheetLine@1001 : Record 7326;
      Quantity@1003 : Decimal;
      OldUsePutAwayWorksheet@1004 : Boolean;
      SortActivity@1005 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Purchase Order with different Unit of Measure. Create Warehouse Receipt and post it.
      Initialize;
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking 0 for Blank Length.
      UpdatePutAwayUnitOfMeasureOnItem(Item,Item."Base Unit of Measure");
      CreatePurchaseOrderAndPostWarehouseReceipt(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,ItemUnitOfMeasure.Code);

      // Exercise.
      CreatePutAwayFromPutAwayWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity,TRUE);  // Taking 0 for Quantity and TRUE for BreakBulkFilter.

      // Verify: Break Bulk Filter is TRUE on Warehouse Activity Header. Also, No. of lines on Warehouse Activity Header is greater than that on Warehouse Put-Away page.
      VerifyBreakBulkFilterOnPutAway(WarehouseActivityHeader,PurchaseHeader."No.");
      WarehouseActivityHeader.CALCFIELDS("No. of Lines");
      VerifyNoOfLinesOnPutAway(WarehouseActivityHeader."No.",WarehouseActivityHeader."No. of Lines");

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterPutAwayFromPurchaseOrderWithMultipleLotNo@105();
    VAR
      Bin@1008 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      RegisteredWhseActivityLine@1007 : Record 5773;
      WarehouseActivityLine@1006 : Record 5767;
      LotNo@1005 : Variant;
      LotNo2@1004 : Variant;
      Quantity@1001 : Decimal;
      ItemTrackingMode@1003 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Setup: Create Purchase Order with multiple Lot No for partial Quantity. Create Warehouse Receipt and post it.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Multiple Lot No");
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",TRUE);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(LotNo2);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      UpdateBinCodeOnPutAwayLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity / 2,
        Item."Base Unit of Measure",LotNo,'',LocationWhite."Receipt Bin Code");  // Value required for the test.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity / 2,
        Item."Base Unit of Measure",LotNo,'',Bin.Code);  // Value required for the test.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity / 2,
        Item."Base Unit of Measure",LotNo2,'',LocationWhite."Receipt Bin Code");  // Value required for the test.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity / 2,
        Item."Base Unit of Measure",LotNo2,'',Bin.Code);  // Value required for the test.
    END;

    [Test]
    PROCEDURE PutAwayItemAccordingToBinMaximumQuantity@122();
    VAR
      Item@1001 : Record 27;
      Bin@1002 : Record 7354;
      Bin2@1003 : Record 7354;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1006 : Record 5766;
      Quantity@1000 : Decimal;
      Quantity2@1007 : Decimal;
    BEGIN
      // Setup: Create Bins with Maximum Quantity. Create and Release Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);
      Quantity2 := LibraryRandom.RandInt(50);
      LibraryInventory.CreateItem(Item);
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,Quantity,TRUE);
      CreateBinAndUpdateBinContent(Bin2,Item,LocationWhite.Code,Quantity2,TRUE);

      // Exercise.
      CreatePurchaseOrderAndPostWarehouseReceipt(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity + Quantity2,Item."Base Unit of Measure");  // Value Required for test cases.

      // Verify: Item is placed in Bin According to Bin Quantity.
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",
        Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');  // Value required for the test.
      VerifyWarehouseActivityLine(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",
        Quantity2,LocationWhite.Code,Item."Base Unit of Measure",Bin2.Code,'','');  // Value required for the test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryHandler,MessageHandler)]
    PROCEDURE WarehouseReceiptFromTransferOrderWithLot@121();
    VAR
      Bin@1005 : Record 7354;
      ItemJournalLine@1004 : Record 83;
      Item@1000 : Record 27;
      TransferHeader@1002 : Record 5740;
      WarehouseActivityLine@1006 : Record 5767;
      LotNo@1008 : Variant;
      Quantity@1001 : Decimal;
      ItemTrackingMode@1003 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries';
    BEGIN
      // Setup: Create and Post Item Journal Line, Transfer Order from Red location to White location.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      FindBinAndCreateBinContent(Bin,Item,LocationWhite.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,LocationRed.Code,TRUE);
      LibraryVariableStorage.Dequeue(LotNo);  // Lot No. value required in the test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      CreateAndShipTransferOrder(TransferHeader,LocationRed.Code,LocationWhite.Code,Item."No.",Quantity,TRUE);

      // Exercise: Post Warehouse Receipt from Transfer Order.
      CreateAndPostWarehouseReceiptFromTransferOrder(TransferHeader,LocationWhite.Code);

      // Verify: Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",LocationWhite."Receipt Bin Code",'',LotNo);
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
        Item."No.",Quantity,LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'',LotNo);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentPageHandler,MessageHandler)]
    PROCEDURE PutAwayFromWarehouseInternalPutAwayAfterOutputJournalAndProductionOrder@114();
    VAR
      Item@1002 : Record 27;
      ItemVariant@1003 : Record 5401;
      Bin@1005 : Record 7354;
      Bin2@1000 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1008 : Record 83;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Variant and Flushing Method Forward, Find Bin, Create and Refresh Released Production Order. Create and Post Output Journal.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);  // Using Random for Quantity.
      CreateItemwithReplenishment(Item,'');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");  // Update Variant on Item.
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateBinAndUpdateBinContent(Bin2,Item,LocationWhite.Code,0,FALSE);
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",Quantity,LocationWhite.Code);
      CreateAndPostOutputJournal(ItemJournalLine,Item."No.",ProductionOrder."No.",ItemVariant.Code,Bin.Code,Quantity);

      // Exercise: Create Put Away From Warehouse Internal Put Away.
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMessage);
      CreatePutAwayFromWhseInternalPutAway(Bin,Item."No.",ItemVariant.Code,Quantity);

      // Verify: Warehouse Activity Line.
      VerifyWarehouseActivityLine(WarehouseActivityLine."Source Document"::" ",'',
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,
        LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,ItemVariant.Code,'');
      VerifyWarehouseActivityLine(WarehouseActivityLine."Source Document"::" ",'',
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,
        LocationWhite.Code,Item."Base Unit of Measure",Bin2.Code,ItemVariant.Code,'');
    END;

    [Test]
    PROCEDURE PutAwayFromPurchaseOrderWithItemPutAwayTemplateCode@128();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1004 : Record 38;
      ItemUnitOfMeasure@1006 : Record 5404;
      WarehouseActivityLine@1005 : Record 5767;
      RegisteredWhseActivityLine@1000 : Record 5773;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Put Away Template Code and UOM, Find Bin. Create Warehouse Receipt from Purchase Order. Post Warehouse Receipt.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);  // Using Random for Quantity.
      CreateItemWithDifferentPutAwayUnitOfMeasure(Item,ItemUnitOfMeasure);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure");
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);

      // Exercise: Register Warehouse Activity.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify: Registered Warehouse Activity Line.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,Item."Base Unit of Measure",'','',
        LocationWhite."Receipt Bin Code");
    END;

    [Test]
    PROCEDURE PutAwayFromPutAwayWorksheetAfterDeletingWarehouseActivity@146();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseReceiptHeader@1006 : Record 7316;
      WarehouseActivityLine@1007 : Record 5767;
      Bin@1002 : Record 7354;
      WhseWorksheetLine@1008 : Record 7326;
      Quantity@1005 : Decimal;
      SortActivity@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // [FEATURE] [Put-away] [Unit of Measure] [Bin Content]
      // [SCENARIO 362996] UOM of Whse. Receipt Line is used for getting Bin Content while creating Put-Away from Posted Whse. Receipt when Directed Put-away is set
      // Setup: Create Item with UOM. Create and Release Purchase Order for Multiple Lines with different UOM. Create and Post Warehouse Receipt. Delete Put Away.
      Initialize;

      // [GIVEN] Location with "Directed Put-away and Pick" = TRUE
      Quantity := LibraryRandom.RandDec(10,2);  // Using Random for Quantity.

      // [GIVEN] Tracked Item "I" with Base UOM = "X" and additional UOM = "Y"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking 0 for Blank Length.
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,FALSE);

      // [GIVEN] Posted Whse. Receipt for Item "I" with 2 lines: first -> UOM = "X"; second -> UOM = "Y"
      // [GIVEN] Bin Content "A" with UOM = "X"
      // [GIVEN] Bin Content "B" with UOM = "Y"
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",ItemUnitOfMeasure.Code,
        '','');
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,TRUE,FALSE,FALSE,Item."No.",Item."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      DeletePutAway(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // [WHEN] Create Put-away for Item "I" from Posted Whse. Receipt
      CreatePutAwayFromPutAwayWorksheet(
        WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity::"Action Type",FALSE);  // Taking 0 for Quantity.

      // Verify: Warehouse Activity Line.
      // [THEN] Put-away is created with 2 Lines: first -> UOM = "X"; second -> UOM = "Y"
      VerifyWarehouseActivityLine(WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,
        LocationWhite.Code,ItemUnitOfMeasure.Code,Bin.Code,'','');
      VerifyWarehouseActivityLine(WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,
        LocationWhite.Code,Item."Base Unit of Measure",Bin.Code,'','');
    END;

    [Test]
    [HandlerFunctions(MessageHandler,WhseSourceCreateDocumentHandler)]
    PROCEDURE RegisterPutAwayFromInternalPutAwayAfterCalculateAndPostConsumptionJournalForComponentItemWithVariant@132();
    VAR
      Bin@1004 : Record 7354;
      Bin2@1013 : Record 7354;
      ComponentItem@1001 : Record 27;
      ParentItem@1000 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemVariant@1011 : Record 5401;
      RegisteredWhseActivityLine@1012 : Record 5773;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1002 : Decimal;
      QuantityPer@1003 : Decimal;
      SortActivity@1007 : ' ,Item,Document,Shelf or Bin,Due Date,,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Item with Production BOM. Create and register Pick from Production Order. Calculate and post Consumption Journal for partial Quantity. Create Put-Away from Internal Put-Away for remaining Quantity.
      Initialize;
      QuantityPer := LibraryRandom.RandInt(5);
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ItemVariant,QuantityPer);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem,Quantity * QuantityPer,ItemVariant.Code);  // Value required for the test.
      CreatePickFromProductionOrder(ProductionOrder,ParentItem."No.",Quantity,LocationWhite.Code);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      CalculateAndPostConsumptionJournal(ProductionOrder."No.",Quantity * QuantityPer / 2);  // Value required for the test.
      Bin2.GET(LocationWhite.Code,LocationWhite."From-Production Bin Code");
      LibraryVariableStorage.Enqueue(SortActivity);  // Enqueue for WhseSourceCreateDocumentHandler.
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMessage);  // Enqueue for MessageHandler.
      CreatePutAwayFromWhseInternalPutAway(Bin2,ComponentItem."No.",ItemVariant.Code,Quantity * QuantityPer / 2);  // Value required for the test.

      // Exercise: Update Bin on Put-Away line and register it.
      WarehouseActivityLine.SETRANGE("Item No.",ComponentItem."No.");
      UpdateBinCodeOnPutAwayLine(WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::" ",'');
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document",'',RegisteredWhseActivityLine."Action Type"::Take,ComponentItem."No.",
        Quantity * QuantityPer / 2,ComponentItem."Base Unit of Measure",'',ItemVariant.Code,Bin2.Code);  // Value required for the test.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document",'',RegisteredWhseActivityLine."Action Type"::Place,ComponentItem."No.",
        Quantity * QuantityPer / 2,ComponentItem."Base Unit of Measure",'',ItemVariant.Code,Bin.Code);  // Value required for the test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterPutAwayWithPartialQuantityFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder@147();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder(FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterPutAwayWithRemainingQuantityFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder@144();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder(TRUE);  // TRUE for Register Put-Away for remaining Quantity.
    END;

    LOCAL PROCEDURE RegisterPutAwayFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder@142(RegisterPutAwayForRemainingQuantity@1012 : Boolean);
    VAR
      Bin@1011 : Record 7354;
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      RegisteredWhseActivityLine@1010 : Record 5773;
      WarehouseActivityLine@1008 : Record 5767;
      WhseWorksheetLine@1009 : Record 7326;
      LotNo@1005 : Variant;
      LotNo2@1006 : Variant;
      ItemTrackingMode@1004 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
      OldUsePutAwayWorksheet@1000 : Boolean;
      Quantity@1003 : Decimal;
      SortActivity@1007 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Create and release Purchase Order with multiple Lot No. Create and Post Warehouse Receipt. Create and register Put-Away from Put-Away Worksheet for partial Quantity.
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Multiple Lot No");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",TRUE);  // TRUE for Item Tracking.
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(LotNo2);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code);
      CreatePutAwayFromPutAwayWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",Quantity / 2,SortActivity,FALSE);  // Value required for the test.
      UpdateBinCodeOnPutAwayLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Take,Item."No.",
        Quantity / 2,Item."Base Unit of Measure",LotNo,'',LocationWhite."Receipt Bin Code");  // Value required for the test.
      VerifyRegisteredPutAwayLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Place,Item."No.",
        Quantity / 2,Item."Base Unit of Measure",LotNo,'',Bin.Code);  // Value required for the test.

      IF RegisterPutAwayForRemainingQuantity THEN BEGIN
        // Exercise: Create and register Put-Away for remaining Quantity.
        LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,SortActivity,FALSE,FALSE,FALSE);
        UpdateBinCodeOnPutAwayLine(
          WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify.
        VerifyRegisteredPutAwayLine(
          RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          RegisteredWhseActivityLine."Action Type"::Take,Item."No.",
          Quantity / 2,Item."Base Unit of Measure",LotNo2,'',LocationWhite."Receipt Bin Code");  // Value required for the test.
        VerifyRegisteredPutAwayLine(
          RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          RegisteredWhseActivityLine."Action Type"::Place,Item."No.",
          Quantity / 2,Item."Base Unit of Measure",LotNo2,'',Bin.Code);  // Value required for the test.
      END;

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptFromPurchaseOrderWithMultipleItemVariant@149();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptAndWarehouseShipmentWithMultipleItemVariant(FALSE,FALSE);  // Use RegisterPick as False and PostWhseShipment as False.
    END;

    [Test]
    PROCEDURE WarehouseShipmentAfterRegisterPickWithMultipleItemVariant@178();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptAndWarehouseShipmentWithMultipleItemVariant(TRUE,FALSE);  // Use RegisterPick as True and PostWhseShipment as False.
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentAfterRegisterPickWithMultipleItemVariant@179();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptAndWarehouseShipmentWithMultipleItemVariant(TRUE,TRUE);  // Use RegisterPick as True and PostWhseShipment as True.
    END;

    LOCAL PROCEDURE PostWarehouseReceiptAndWarehouseShipmentWithMultipleItemVariant@151(RegisterPick@1009 : Boolean;PostWhseShipment@1010 : Boolean);
    VAR
      Item@1008 : Record 27;
      ItemVariant@1007 : Record 5401;
      ItemVariant2@1006 : Record 5401;
      PostedWhseReceiptLine@1011 : Record 7319;
      PostedWhseShipmentLine@1012 : Record 7323;
      PurchaseHeader@1005 : Record 38;
      SalesHeader@1003 : Record 36;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1013 : Record 7321;
      Quantity@1000 : Decimal;
    BEGIN
      // Create and release Purchase Order with multiple Item Variant. Create Warehouse Receipt. Update Quantity to Receive on Warehouse Receipt Line for One Item Variant.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,Item."No.");
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",
        Item."Base Unit of Measure",ItemVariant.Code,ItemVariant2.Code);
      CreateWarehouseReceipt(PurchaseHeader);
      UpdateQuantityOnWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",LocationWhite.Code,ItemVariant.Code,0);  // Use 0 for Quantity to Receive required for test.

      // Exercise.
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);

      // Verify.
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Item."No.",ItemVariant2.Code,Quantity);
      VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",LocationWhite.Code,ItemVariant.Code,Quantity,0);  // Use 0 for Quantity to Receive required for test.

      IF RegisterPick THEN BEGIN
        // Exercise.
        RegisterPutAwayAfterUpdatingBinCodeOnPutAwayLine(PurchaseHeader."No.");
        CreateAndReleaseSalesOrderWithMultipleLines(
          SalesHeader,LocationWhite.Code,Item."No.",Item."No.",ItemVariant.Code,ItemVariant2.Code,Quantity,FALSE);
        CreateWarehouseShipmentFromSalesOrder(SalesHeader);
        CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyWarehouseShipmentLine(ItemVariant,SalesHeader."No.",Quantity,0);  // Use 0 for Quantity to Ship required for test.
        VerifyWarehouseShipmentLine(ItemVariant2,SalesHeader."No.",Quantity,Quantity);
      END;

      IF PostWhseShipment THEN BEGIN
        // Exercise.
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.

        // Verify.
        VerifyWarehouseShipmentLine(ItemVariant,SalesHeader."No.",Quantity,0);  // Use 0 for Quantity to Ship required for test.
        VerifyPostedWarehouseShipmentLine(
          PostedWhseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",ItemVariant2.Code,Quantity);
      END;
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick@171();
    BEGIN
      // Setup.
      Initialize;
      PostWhseShipmentAndWhseReceiptFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick(
        FALSE);  // Use WarehouseReceipt as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostWarehouseReceiptFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick@183();
    BEGIN
      // Setup.
      Initialize;
      PostWhseShipmentAndWhseReceiptFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick(TRUE);  // Use WarehouseReceipt as True.
    END;

    LOCAL PROCEDURE PostWhseShipmentAndWhseReceiptFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick@176(WarehouseReceipt@1008 : Boolean);
    VAR
      Item@1007 : Record 27;
      PostedWhseReceiptLine@1006 : Record 7319;
      ItemJournalLine@1009 : Record 83;
      PostedWhseShipmentLine@1005 : Record 7323;
      TransferHeader@1004 : Record 5740;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
      Quantity@1000 : Decimal;
    BEGIN
      // Create and post Item Journal Line with Location having Require Shipment. Create Warehouse Shipment from Transfer Order.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,LocationRed2.Code,FALSE);
      CreateWarehouseShipmentFromTransferOrder(TransferHeader,LocationRed2.Code,LocationWhite.Code,Item."No.",Quantity);

      // Exercise.
      ReleaseWarehouseShipment(
        WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.

      // Verify.
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",'',Quantity);

      IF WarehouseReceipt THEN BEGIN
        // Exercise.
        GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,LocationWhite.Code,FALSE,TRUE,FALSE,Item."No.",Item."No.");
        LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedMessage,TransferHeader."No."));  // Enqueue for MessageHandler.
        LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

        // Verify.
        VerifyPostedWarehouseReceiptLine(
          PostedWhseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.",Item."No.",'',Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ErrorOnCreatePickFromTransferOrderBeforeCancelReservationOnSalesOrder@173();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentFromTransferOrderForQuantityReservedAgainstSalesOrder(FALSE);  // Use CancelReservation as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE PostWarehouseShipmentFromTransferOrderAfterCancelReservationOnSalesOrder@219();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentFromTransferOrderForQuantityReservedAgainstSalesOrder(TRUE);  // Use CancelReservation as True.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentFromTransferOrderForQuantityReservedAgainstSalesOrder@215(CancelReservation@1012 : Boolean);
    VAR
      Bin@1011 : Record 7354;
      Item@1010 : Record 27;
      PostedWhseShipmentLine@1009 : Record 7323;
      PurchaseHeader@1008 : Record 38;
      SalesHeader@1007 : Record 36;
      TransferHeader@1005 : Record 5740;
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1001 : Decimal;
      ItemTrackingMode@1013 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Create and register Put Away from Purchase Order. Create and release Sales Order with reservation. Create Warehouse Shipment from Transfer Order.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure",FALSE,ItemTrackingMode,Bin.Code);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",LocationWhite.Code,Quantity);
      CreateWarehouseShipmentFromTransferOrder(TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Quantity);

      // Exercise.
      ASSERTERROR CreatePick(
          WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

      // Verify.
      Assert.ExpectedError(NothingToHandle);

      IF CancelReservation THEN BEGIN
        // Exercise.
        CancelReservationOnSalesOrder(SalesHeader."No.");
        CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.

        // Verify.
        VerifyPostedWarehouseShipmentLine(
          PostedWhseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",'',Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(CalculateInventoryPageHandler,DimensionSelectionPageHandler)]
    PROCEDURE CalculateInventoryOnPhysicalInventoryJournalUsingDimension@227();
    VAR
      DimensionValue@1000 : Record 349;
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PhysInventoryJournal@1006 : TestPage 392;
      Quantity@1007 : Decimal;
    BEGIN
      // Setup: Create Item with Default Dimension. Create and post Purchase Order as receive.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateDefaultDimensionItem(DimensionValue,Item."No.");
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationBlue.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as receive.

      // Exercise.
      LibraryVariableStorage.Enqueue(Item."No.");  // Enqueue for CalculateInventoryPageHandler.
      PhysInventoryJournal.OPENEDIT;
      PhysInventoryJournal.CalculateInventory.INVOKE;

      // Verify.
      VerifyItemJournalLine(Item."No.",DimensionValue.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE QuantityBaseErrorOnPostInventoryPickWithLotItemTracking@187();
    VAR
      Bin@1008 : Record 7354;
      Item@1006 : Record 27;
      SalesHeader@1011 : Record 36;
      WarehouseActivityLine@1004 : Record 5767;
      LotNo@1002 : Variant;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create and post Inventory Put Away from Purchase Order using multiple Bin and Lot. Create Inventory Pick from Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // Taking True for Lot.
      CreateAndPostInventoryPutAwayFromPurchaseOrderUsingMultipleBinAndLot(Bin,LotNo,Item."No.",LocationSilver.Code,Quantity);
      CreateInventoryPickFromSalesOrder(SalesHeader,Item."No.",Bin."Location Code",Quantity);
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      UpdateLotNoOnInventoryPickLine(SalesHeader."No.",LotNo);

      // Exercise: Post Inventory Pick.
      ASSERTERROR PostInventoryActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Pick",TRUE);  // Post as Invoice.

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(QuantityBaseError,-Quantity,Bin."Location Code",Bin.Code,Item."No.",Item."Base Unit of Measure"))
    END;

    [Test]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAway@181();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheet(FALSE);  // Use RegisterPutAway as False.
    END;

    [Test]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAway@200();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheet(TRUE);  // Use RegisterPutAway as True.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheet@192(RegisterPutAway@1008 : Boolean);
    VAR
      Bin@1007 : Record 7354;
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      WhseWorksheetName@1001 : Record 7327;
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseShipmentLine@1009 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // Create and post Warehouse Receipt from Purchase Order. Create and release Warehouse Shipment from Sales Order.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrderAndPostWarehouseReceipt(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,Item."Base Unit of Measure");
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationWhite.Code,Item."No.",Quantity,FALSE);
      CreateWarehouseShipmentFromSalesOrder(SalesHeader);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise.
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // Verify.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,0);  // Value required for test.

      IF RegisterPutAway THEN BEGIN
        // Exercise.
        FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
        UpdateBinCodeOnPutAwayLine(
          WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetBeforeCancelReservationOnSalesOrder@204();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetWithSalesOrderReservation(FALSE);  // Use CancelReservation as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterCancelReservationOnSalesOrder@234();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetWithSalesOrderReservation(TRUE);  // Use CancelReservation as True.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheetWithSalesOrderReservation@229(CancelReservation@1011 : Boolean);
    VAR
      Bin@1010 : Record 7354;
      Item@1009 : Record 27;
      PurchaseHeader@1008 : Record 38;
      SalesHeader@1007 : Record 36;
      SalesHeader2@1006 : Record 36;
      WhseWorksheetName@1004 : Record 7327;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1013 : Record 7321;
      Quantity@1002 : Decimal;
      ItemTrackingMode@1012 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Create and register Put Away from Purchase Order. Create and release two Sales Orders with reservation. Create and release Warehouse Shipment from second Sales Order.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity + Quantity,Item."Base Unit of Measure",FALSE,ItemTrackingMode,Bin.Code);  // Value required for test.
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",LocationWhite.Code,Quantity);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader2,Item."No.",LocationWhite.Code,Quantity);
      CreateWarehouseShipmentFromSalesOrder(SalesHeader2);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader2."No.");

      // Exercise.
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // Verify.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity);

      IF CancelReservation THEN BEGIN
        // Exercise.
        CancelReservationOnSalesOrder(SalesHeader."No.");

        // Verify.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity + Quantity);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ErrorChangingItemOnPurchaseOrderAfterCreateInventoryPutAway@189();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Setup: Create Inventory Put Away from Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateInventoryPutAwayFromPurchaseOrder(PurchaseHeader,Item,LocationSilver.Code,LibraryRandom.RandDec(100,2));

      // Exercise.
      ASSERTERROR UpdateItemNoOnPurchaseLineAfterReopenPurchaseOrder(PurchaseHeader);

      // Verify: Verify error Item No. must not be changed on Purchase Line when Warehouse Activity Line exists.
      Assert.IsTrue(
        STRPOS(
          GETLASTERRORTEXT,
          STRSUBSTNO(ItemNoMustNotBeChangedWhenWarehouseActivityLineExists,PurchaseLine.FIELDCAPTION("No."),PurchaseLine.TABLECAPTION)) >
        0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ErrorChangingItemOnSalesOrderAfterCreateInventoryPick@206();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1004 : Record 38;
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create and post Inventory Put Away from Purchase Order. Create Inventory Pick from Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateInventoryPutAwayFromPurchaseOrder(PurchaseHeader,Item,LocationSilver.Code,Quantity);
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityHeader.Type::"Invt. Put-away",FALSE);
      CreateInventoryPickFromSalesOrder(SalesHeader,Item."No.",LocationSilver.Code,Quantity);

      // Exercise.
      ASSERTERROR UpdateItemNoOnSalesLineAfterReopenSalesOrder(SalesHeader);

      // Verify: Verify error Item No. must not be changed on Sales Line when Warehouse Activity Line exists.
      Assert.IsTrue(
        STRPOS(
          GETLASTERRORTEXT,
          STRSUBSTNO(ItemNoMustNotBeChangedWhenWarehouseActivityLineExists,SalesLine.FIELDCAPTION("No."),SalesLine.TABLECAPTION)) >
        0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ErrorChangingItemOnTransferOrderAfterCreateInventoryPick@257();
    VAR
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      TransferHeader@1003 : Record 5740;
      TransferLine@1007 : Record 5741;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseRequest@1004 : Record 5765;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create and post Inventory Put Away from Purchase Order. Create Inventory Pick from Transfer Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateInventoryPutAwayFromPurchaseOrder(PurchaseHeader,Item,LocationSilver.Code,Quantity);
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityHeader.Type::"Invt. Put-away",FALSE);
      CreateAndReleaseTransferOrder(TransferHeader,LocationSilver.Code,LocationBlue.Code,Item."No.",Quantity,FALSE);
      LibraryVariableStorage.Enqueue(InvPickMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferHeader."No.",LocationSilver.Code,FALSE,TRUE);

      // Exercise.
      ASSERTERROR UpdateItemNoOnTransferLineAfterReopenTransferOrder(TransferHeader);

      // Verify: Verify error Item No. must not be changed on Transfer Line when Warehouse Activity Line exists.
      Assert.IsTrue(
        STRPOS(
          GETLASTERRORTEXT,
          STRSUBSTNO(
            ItemNoMustNotBeChangedWhenWarehouseActivityLineExists,TransferLine.FIELDCAPTION("Item No."),TransferLine.TABLECAPTION)) >
        0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE RegisterWhseJournalWithNegQtyAfterRegisterPutAway@197();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      WarehouseJournalLine@1003 : Record 7311;
      Bin@1004 : Record 7354;
      Bin2@1009 : Record 7354;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item with Order Reordering Policy. Create and Release Sales Order. Carry Out Action Message after Calculate Plan On Requisition Line. Register Put away from Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithOrderReorderingPolicy(Item);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE);  // Find Receive Bin.
      Bin2.GET(LocationWhite.Code,LocationWhite."Receipt Bin Code");
      CreateAndUpdateBinContent(Bin,Item,Quantity,TRUE);  // Fixed as TRUE.
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationWhite.Code,Item."No.",Quantity,FALSE);
      CarryOutActionMessageAfterCalculatePlanOnRequisitionLine(Item);
      RegisterPutAwayFromPurchaseOrder(Item."No.",LocationWhite.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",-Quantity);

      // Exercise.
      LibraryVariableStorage.Enqueue(NegativeAdjustmentConfirmMessage);  // Enqueue is used for Confirm Handler.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);  // UseBatchJob as TRUE.

      // Verify.
      VerifyWarehouseEntry(Bin,Item."No.",Quantity);
      VerifyWarehouseEntry(Bin2,Item."No.",-Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ExpirationDateOnPutAwayAfterPostWarehouseReceipt@211();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickAfterRegisterPutAway(FALSE,FALSE,FALSE);  // Register Put Away, Warehouse Pick and Register Pick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ExpirationDateOnRegisteredPutAway@208();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickAfterRegisterPutAway(TRUE,FALSE,FALSE);  // Register Put Away as True. Warehouse Pick and Register Pick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ExpirationDateOnPickAfterCreateWarehouseShipment@212();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickAfterRegisterPutAway(TRUE,TRUE,FALSE);  // Register Put Away and Warehouse Pick as True. Register Pick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ExpirationDateOnRegisteredPick@214();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickAfterRegisterPutAway(TRUE,TRUE,TRUE);  // Register Put Away, Warehouse Pick and Register Pick as True.
    END;

    LOCAL PROCEDURE CreateAndRegisterPickAfterRegisterPutAway@218(RegisterPutAway@1011 : Boolean;WarehousePick@1012 : Boolean;RegisterPick@1013 : Boolean);
    VAR
      WarehouseActivityLine@1010 : Record 5767;
      SalesHeader@1008 : Record 36;
      Item@1005 : Record 27;
      PurchaseHeader@1004 : Record 38;
      LotNo@1001 : Variant;
      Quantity@1003 : Decimal;
      ExpirationDate@1002 : Date;
      ItemTrackingMode@1000 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      // Create Item with Lot and Serial tracking. Create and Release Purchase Order. Update Expiration Date on Reservation Entry.
      CreateItemWithItemTrackingCode(Item,TRUE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode);  // Lot and Serial as TRUE.
      Quantity := LibraryRandom.RandInt(10);
      ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot And Serial");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",Quantity,Item."Base Unit of Measure",TRUE);  // Use Tracking as TRUE.
      LibraryVariableStorage.Dequeue(LotNo);
      UpdateExpirationDateOnReservationEntry(Item."No.",ExpirationDate);

      // Exercise.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code);

      // Verify.
      VerifyWarehouseActivityWithExpirationDate(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",ExpirationDate);

      IF RegisterPutAway THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify.
        VerifyLotAndSerialOnRegisteredWhseActivityLine(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,LotNo,ExpirationDate);
        VerifyLotAndSerialOnRegisteredWhseActivityLine(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,LotNo,ExpirationDate);
      END;

      IF WarehousePick THEN BEGIN
        // Exercise.
        CreatePickFromSalesOrder(SalesHeader,Item."No.",LocationWhite.Code,Quantity);

        // Verify.
        VerifyWarehouseActivityWithExpirationDate(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
          ExpirationDate);
      END;

      IF RegisterPick THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyLotAndSerialOnRegisteredWhseActivityLine(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
          WarehouseActivityLine."Action Type"::Take,LotNo,ExpirationDate);
        VerifyLotAndSerialOnRegisteredWhseActivityLine(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
          WarehouseActivityLine."Action Type"::Place,LotNo,ExpirationDate);
      END;
    END;

    [Test]
    [HandlerFunctions(ProductionJournalHandler,ReservationPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE ErrorOnPostNegOutputOnprodJnlAfterReserveSalesOrd@221();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostNegativeOutputOnProductionJournal(TRUE,FALSE);  // Show Error as TRUE and Cancel Reservation as FALSE.
    END;

    [Test]
    [HandlerFunctions(ProductionJournalHandler,ReservationPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PostNegOutputOnProdJnlAfterCancelReservOnSalesOrd@230();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostNegativeOutputOnProductionJournal(FALSE,TRUE);  // Show Error as FALSE and Cancel Reservation as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostNegativeOutputOnProductionJournal@242(ShowError@1012 : Boolean;CancelReservation@1010 : Boolean);
    VAR
      RoutingHeader@1009 : Record 99000763;
      Item@1006 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      SalesHeader@1003 : Record 36;
      ItemLedgerEntry@1001 : Record 32;
      Quantity@1011 : Decimal;
    BEGIN
      // Create Item with routing and post Production Journal. Create and release Sales Order with Reservation.
      Quantity := LibraryRandom.RandInt(10);
      CreateRoutingSetup(RoutingHeader);
      CreateItemwithReplenishment(Item,RoutingHeader."No.");
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",Quantity,'');
      PostProductionJournal(ProductionOrder,Quantity);
      CreateAndPostItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::"Negative Adjmt.",Quantity,'',FALSE);
      PostProductionJournal(ProductionOrder,Quantity / 2);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",'',Quantity / 2);  // Calculated Value Required.
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");

      IF ShowError THEN BEGIN
        // Exercise.
        LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessage);  // Enqueue for ConfirmHandler.
        LibraryVariableStorage.Enqueue(NegativeAdjustmentConfirmMessage);  // Enqueue for ConfirmHandler.
        ASSERTERROR CreateAndPostProductionJournal(ProductionOrder."No.",Item."No.",-Quantity / 2,ItemLedgerEntry."Entry No.");  // Calculated Value Required.

        // Verify: Verification is covered in Confirm Handler.
      END;

      IF CancelReservation THEN BEGIN
        // Exercise.
        CancelReservationOnSalesOrder(SalesHeader."No.");
        LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessage);  // Enqueue for ConfirmHandler.
        LibraryVariableStorage.Enqueue(JournalLinesPostedMessage);  // Enqueue for MessageHandler.
        CreateAndPostProductionJournal(ProductionOrder."No.",Item."No.",-Quantity / 2,ItemLedgerEntry."Entry No.");  // Calculated Value required.

        // Verify.
        VerifyItemLedgerEntry(Item."No.",-Quantity / 2,0);  // Calculated Value required, Use 0 for Remaining Quantity.
      END;
    END;

    [Test]
    PROCEDURE SortingByBinRankingOnMovementFromMovementWorksheet@236();
    VAR
      FromBin@1005 : Record 7354;
      ToBin@1001 : Record 7354;
      ToBin2@1004 : Record 7354;
      Item@1000 : Record 27;
      WarehouseActivityLine@1006 : Record 5767;
      WhseWorksheetLine@1007 : Record 7326;
      WhseWorksheetName@1018 : Record 7327;
      Quantity@1002 : Decimal;
      SortActivity@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Item
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);

      // Create 1 Bins for Ajustment Zone and 2 Bins for Pick Zone with Bin Ranking Value
      // The Bin Ranking value from low to High is : ToBin, FromBin, ToBin2
      CreateBinForPickZoneWithBinRanking(ToBin,LocationWhite.Code,LibraryRandom.RandInt(10));
      CreateBinForAdjustmentZoneWithBinRanking(FromBin,LocationWhite.Code,ToBin."Bin Ranking" + LibraryRandom.RandInt(10));
      CreateBinForPickZoneWithBinRanking(ToBin2,LocationWhite.Code,FromBin."Bin Ranking" + LibraryRandom.RandInt(10));

      // Update Inventory and create movement worksheet line
      UpdateInventoryUsingWhseJournal(FromBin,Item,2 * Quantity,''); // Will create 2 movement worksheet line, each line with 1 Quantity of Item

      CreateWarehouseWorksheetNameForMovement(WhseWorksheetName);
      CreateMovementWorksheetLine(WhseWorksheetName,Item."No.",FromBin,ToBin2,Quantity);
      CreateMovementWorksheetLine(WhseWorksheetName,Item."No.",FromBin,ToBin,Quantity);

      // Exercise: Create Movement from Movement Worksheet Lines.
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,SortActivity::"Bin Ranking",FALSE,FALSE,FALSE);

      // Verify: Warehouse Activity Lines gets sorted with Action Type.
      WarehouseActivityLine.SETFILTER("Item No.",Item."No.");
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'','',WarehouseActivityLine."Activity Type"::Movement);

      // Expected Line sequence is like below
      // 1. Take: FromBin
      // 2. Take: FromBin
      // 3. Place: ToBin
      // 4: Place: ToBin2
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",FromBin.Code,WarehouseActivityLine."Action Type"::Take,0,Quantity,FALSE); // Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",FromBin.Code,WarehouseActivityLine."Action Type"::Take,0,Quantity,TRUE); // TRUE for NextLine. Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",ToBin.Code,WarehouseActivityLine."Action Type"::Place,0,Quantity,TRUE); // TRUE for NextLine. Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",ToBin2.Code,WarehouseActivityLine."Action Type"::Place,0,Quantity,TRUE); // TRUE for NextLine. Breakbulk No. is 0
    END;

    [Test]
    PROCEDURE SortingByBinRankingOnPutAwayFromPutAwayWorksheetWithBreakBulk@244();
    VAR
      Bin@1001 : Record 7354;
      Bin2@1010 : Record 7354;
      Bin3@1006 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1011 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WhseWorksheetLine@1009 : Record 7326;
      Quantity@1003 : Decimal;
      BreakBulkQty@1012 : Decimal;
      OldUsePutAwayWorksheet@1004 : Boolean;
      SortActivity@1005 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
    BEGIN
      // Setup: Create Item, Unit Of Measure, which is multiple of Base Unit of Measure. Set Put Away Unit of Measure
      Initialize;
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking 0 for Blank Length.
      UpdatePutAwayUnitOfMeasureOnItem(Item,Item."Base Unit of Measure");

      // Create 3 Bins,Bin Ranking value from low to High is: Bin, Bin2, Bin3
      CreateBinAndUpdateBinContent(Bin,Item,LocationWhite.Code,0,TRUE);  // Taking TRUE for Fixed Bin.
      CreateBinForReceiveZoneWithBinRanking(Bin2,LocationWhite.Code,LibraryRandom.RandInt(50));
      CreateBinForReceiveZoneWithBinRanking(Bin3,LocationWhite.Code,Bin2."Bin Ranking" + LibraryRandom.RandInt(10));  // Greater value required for the test.

      // Create Purchase Order with two lines. The first line with base unit of measure of the item.
      // The second line with another Unit of Measure, multiple of base unit of measure. Make sure breakbulk lines will be generated during put away
      CreateAndReleasePurchaseOrderWithMultipleLines(
        PurchaseHeader,LocationWhite.Code,LocationWhite.Code,
        Item."No.",Quantity,Item."Base Unit of Measure",ItemUnitOfMeasure.Code,'','');

      // Create Warehouse Receipt and update Bin Codes with different Bin Ranking on two Receipt lines. Post the Warehouse Receipt.
      CreateWarehouseReceipt(PurchaseHeader);
      UpdateBinCodeOnWarehouseReceiptLine(PurchaseHeader."No.",Bin3.Code,Bin2.Code,LocationWhite.Code);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationWhite.Code);

      // Exercise.
      CreatePutAwayFromPutAwayWorksheet(
        WhseWorksheetLine,LocationWhite.Code,Item."No.",Item."No.",0,SortActivity::"Bin Ranking",FALSE);  // Taking 0 for Quantity.

      // Verify: Put-Away lines get sorted by Bin Ranking.
      FindWarehouseActivityLineForMultipleSourceDocuments(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",'',
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Expected Line sequence is like below
      // 1. Take: Bin2    Breakbulk No. is 1
      // 2. Place: Bin2   Breakbulk No. is 1
      // 3. Take: Bin2    Breakbulk No. is 0
      // 4. Take: Bin3    Breakbulk No. is 0
      // 5. Place: Bin    Breakbulk No. is 0
      // 6: Place: Bin    Breakbulk No. is 0
      BreakBulkQty := Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure";
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin2.Code,WarehouseActivityLine."Action Type"::Take,1,Quantity,FALSE); // Breakbulk No. is 1
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin2.Code,WarehouseActivityLine."Action Type"::Place,1,BreakBulkQty,TRUE); // TRUE for NextLine. Breakbulk No. is 1
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin2.Code,WarehouseActivityLine."Action Type"::Take,0,BreakBulkQty,TRUE); // TRUE for NextLine. Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin3.Code,WarehouseActivityLine."Action Type"::Take,0,Quantity,TRUE); // TRUE for NextLine. Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin.Code,WarehouseActivityLine."Action Type"::Place,0,Quantity,TRUE); // TRUE for NextLine. Breakbulk No. is 0
      VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine(
        WarehouseActivityLine,Item."No.",Bin.Code,WarehouseActivityLine."Action Type"::Place,0,BreakBulkQty,TRUE); // TRUE for NextLine. Breakbulk No. is 0

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationWhite,OldUsePutAwayWorksheet,OldUsePutAwayWorksheet);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PostPurchaseOrderWithSerialLotAndExpirationCalculation@232();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      LotNo@1002 : Variant;
      ItemTrackingMode@1006 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
      Quantity@1003 : Integer;
    BEGIN
      // Setup: Create Item with Item Tracking and Expiration Calculation.
      Initialize;
      CreateItemWithItemTrackingCode(Item,TRUE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode); // Lot and Serial as TRUE.
      UpdateExpirationCalculationOnItem(Item);
      Quantity := LibraryRandom.RandIntInRange(2,10); // Integer type was reuqired for Serial Tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot And Serial"); // Enqueue value for ItemTrackingPageHandler.

      // Exercise: Create and post Purchase Order with Lot and Serial Tracking.
      CreateAndPostPurchaseOrder(PurchaseHeader,Item."No.",Quantity,TRUE);
      LibraryVariableStorage.Dequeue(LotNo);

      // Verify the Count of Item Ledger Entry.
      // 1 quantity has one serial. So it generate Quantity Item Ledger Entry.
      VerifyNoOfLinesOfItemLedgerEntry(Item."No.",LotNo,Quantity);
    END;

    [Test]
    PROCEDURE BinCodeOnWhseShipmentByGetSourceDocument@248();
    VAR
      Item@1000 : Record 27;
      Location@1003 : Record 14;
      SalesHeader@1009 : Record 36;
      WarehouseShipmentHeader@1012 : Record 7320;
    BEGIN
      // Setup: Create Item. Create Location with Shipment Bin Code. Create and release Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateLocationSetupWithBins(Location,FALSE,TRUE,FALSE,TRUE,TRUE); // Create Location with Require Pick and Require Shipment and Bin Mandatory.
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,Location.Code,Item."No.",LibraryRandom.RandDec(10,2),FALSE);

      // Exercise: Create Warehouse Shipment and Get Source Document to create Shipment line.
      GetSourceDocumentOnWarehouseShipment(WarehouseShipmentHeader,Location.Code,TRUE,FALSE,FALSE,Item."No.");

      // Verify: Verify the Bin Code on Warehouse Shipment Header and Warehouse Shipment Line shoule be the Shipment Bin Code of Location.
      Assert.AreEqual(WarehouseShipmentHeader."Bin Code",Location."Shipment Bin Code",ShipmentBinCodeErr);
      VerifyBinCodeForWarehouseShipmentLine(SalesHeader."No.",Location."Shipment Bin Code");
    END;

    [Test]
    PROCEDURE BinCodeOnWhseReceiptByGetSourceDocument@245();
    VAR
      Item@1002 : Record 27;
      Location@1000 : Record 14;
      PurchaseHeader@1004 : Record 38;
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      // Setup: Create Item. Create Location with Receipt Bin Code. Create and release Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateLocationSetupWithBins(Location,TRUE,FALSE,TRUE,FALSE,TRUE); // Create Location with Require Put-away and Require Receive and Bin Mandatory.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,Location.Code,'',Item."No.",LibraryRandom.RandDec(10,2),Item."Base Unit of Measure",FALSE);

      // Exercise: Create Warehouse Receipt and Get Source Document to create Receipt line.
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,Location.Code,TRUE,FALSE,FALSE,Item."No.",Item."No.");

      // Verify: Verify the Bin Code on Warehouse Receipt Header and Warehouse Receipt Line shoule be the Receipt Bin Code of Location.
      Assert.AreEqual(Location."Receipt Bin Code",WarehouseReceiptHeader."Bin Code",ReceiptBinCodeErr);
      VerifyBinCodeForWarehouseReceiptLine(PurchaseHeader."No.",Location."Receipt Bin Code",Location.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingFromReceiptHandler)]
    PROCEDURE NonDirectedPutAwayUsesItemsBaseUOMforGettingBinContent@249();
    VAR
      Location@1007 : Record 14;
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1003 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1004 : Record 5767;
      WhseWorksheetLine@1008 : Record 7326;
    BEGIN
      // [FEATURE] [Put-away] [Unit of Measure] [Bin Content]
      // [SCENARIO 362996] Base UOM of Item is used for getting Bin Content while creating Put-Away from Posted Whse. Receipt when Directed Put-away is not set
      Initialize;

      // [GIVEN] Location with "Directed Put-away and Pick" = FALSE
      CreateLocationSetupWithBins(Location,TRUE,TRUE,TRUE,TRUE,TRUE);

      // [GIVEN] Tracked Item "I" with Base UOM = "X" and additional UOM = "Y"
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5));

      // [GIVEN] Posted Whse. Receipt for Item "I" with UOM = "Y"
      // [GIVEN] Bin Content "B" with UOM = "X"
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,Location.Code,'',Item."No.",LibraryRandom.RandDec(9,2),ItemUnitOfMeasure.Code,FALSE);
      CreatedAndPostWarehouseReceiptWithTracking(Location,PurchaseHeader."No.",Item."No.");
      DeletePutAway(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // [WHEN] Create Put-away for Item "I" from Posted Whse. Receipt
      CreatePutAwayFromPutAwayWorksheet(
        WhseWorksheetLine,Location.Code,Item."No.",Item."No.",0,0,FALSE);

      // [THEN] Put-away is created using BinContent "B".
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,"Source Document"::"Purchase Order",PurchaseHeader."No.","Activity Type"::"Put-away");
        TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(SimpleMessageHandler)]
    PROCEDURE CreatePickFromWhseShipmentWithAssemblyAndPickWorksheet@73();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      WarehouseShipmentHeader@1007 : Record 7320;
      WhseWorksheetName@1008 : Record 7327;
      WarehouseShipmentLine@1009 : Record 7321;
      SalesHeaderNo@1002 : Code[20];
      Qty@1003 : Decimal;
      QtyPer@1004 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse Pick] [Warehouse Shipment] [Assembly Order]
      // [SCENARIO 371965] Creating Pick from Warehouse Shipment with Assembly while having Pick Worksheet from that Shipment should be prohibited
      Initialize;

      Qty := LibraryRandom.RandInt(10);
      QtyPer := LibraryRandom.RandInt(10);

      // [GIVEN] Assembed Item "AI" and Component Item "CI" on Location with "Directed Put-Away and Pick"
      CreateAssembledItem(ParentItem,ComponentItem,QtyPer);
      PostItemJournalThroughCalculateWhseAdjmt(ComponentItem,Qty * QtyPer);

      // [GIVEN] Sales Order "SO" with two Lines for "AI" and "CI" respectively
      SalesHeaderNo := CreateAndReleaseSalesOrderWithAssembly(ParentItem,ComponentItem,Qty);

      // [GIVEN] Warehouse Shipment "WS" for "SO"
      GetSourceDocumentOnWarehouseShipment(
        WarehouseShipmentHeader,LocationWhite.Code,TRUE,FALSE,FALSE,STRSUBSTNO('%1|%2',ParentItem."No.",ComponentItem."No."));
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // [GIVEN] Pick Worksheet for "WS"
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // [WHEN] Create Pick from "WS"
      ASSERTERROR CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderNo);

      // [THEN] Error is thrown: "Nothing to handle."
      Assert.ExpectedError(NothingToHandle);
    END;

    [Test]
    PROCEDURE PickQuantityBaseIsFilteredByUOMWhileDirectedPutAwayAndPickIsOn@255();
    VAR
      UnitOfMeasure@1003 : Record 204;
      BinContent@1000 : Record 7302;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // [FEATURE] [Bin Content]
      // [SCENARIO 363334] FlowField "Pick Quantity (Base)" of Bin Content table is filtered by UOM of Whse. Active Line while "Directed Put-Away and Pick" = TRUE
      Initialize;

      // [GIVEN] Location with "Directed Put-away and Pick" = TRUE
      // [GIVEN] Warehouse Activity Line with "Item Unit of Measure" = "X" and "Qty. Outstanding (Base)" = "Q"
      CreateWarehouseActivityLine(WarehouseActivityLine,LocationWhite.Code);

      // [GIVEN] Bin Content with "Item Unit of Measure" = "Y"
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      WITH BinContent DO BEGIN
        "Location Code" := LocationWhite.Code;
        "Unit of Measure Code" := UnitOfMeasure.Code;
        INSERT;

        // [WHEN] Calculate Field "Pick Quantity (Base)" on Bin Content
        SetFilterOnUnitOfMeasure;
        CALCFIELDS("Pick Quantity (Base)");

        // [THEN] "Pick Quantity (Base)" = 0
        Assert.AreEqual(0,"Pick Quantity (Base)",PickQuantityBaseErr);
      END;
    END;

    [Test]
    PROCEDURE PickQuantityBaseIsNotFilteredByUOMWhileDirectedPutAwayAndPickIsOff@373();
    VAR
      Location@1002 : Record 14;
      UnitOfMeasure@1003 : Record 204;
      BinContent@1000 : Record 7302;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // [FEATURE] [Bin Content]
      // [SCENARIO 363334] FlowField "Pick Quantity (Base)" of Bin Content table is not filtered by UOM of Whse. Active Line while "Directed Put-Away and Pick" = FALSE
      Initialize;

      // [GIVEN] Location with "Directed Put-away and Pick" = FALSE
      CreateLocationSetupWithBins(Location,TRUE,TRUE,TRUE,TRUE,TRUE);

      // [GIVEN] Warehouse Activity Line with "Item Unit of Measure" = "X" and "Qty. Outstanding (Base)" = "Q"
      CreateWarehouseActivityLine(WarehouseActivityLine,Location.Code);

      // [GIVEN] Bin Content with "Item Unit of Measure" = "Y"
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      WITH BinContent DO BEGIN
        "Location Code" := Location.Code;
        "Unit of Measure Code" := UnitOfMeasure.Code;
        INSERT;

        // [WHEN] Calculate Field "Pick Quantity (Base)" on Bin Content
        SetFilterOnUnitOfMeasure;
        CALCFIELDS("Pick Quantity (Base)");

        // [THEN] "Pick Quantity (Base)" = "Q"
        Assert.AreEqual(WarehouseActivityLine."Qty. Outstanding (Base)","Pick Quantity (Base)",PickQuantityBaseErr);
      END;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.CreateVATData;

      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup(ItemJournalTemplate,ItemJournalBatch,ItemJournalTemplate.Type::Item);
      ItemJournalSetup(OutputItemJournalTemplate,OutputItemJournalBatch,OutputItemJournalTemplate.Type::Output);
      WarehouseJournalSetup(LocationWhite2.Code);
      WarehouseJournalSetup(LocationWhite.Code);
      ConsumptionJournalSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@39(VAR ItemJournalTemplate@1002 : Record 82;VAR ItemJournalBatch@1001 : Record 233;ItemJournalTemplateType@1000 : Option);
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@226();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,FALSE);

      CreateWhiteLocationWithTwoZones;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite2.Code,TRUE);

      CreateFullWarehouseSetup(LocationWhite3);  // Location: White3.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite3.Code,FALSE);

      CreateFullWarehouseSetup(LocationWhite4);  // Location: White4.

      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,TRUE,TRUE,FALSE,FALSE);  // Location Silver with Require Put Away, Require Pick and Bin Mandatory.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value required.

      LibraryWarehouse.CreateLocationWMS(LocationSilver2,FALSE,TRUE,TRUE,FALSE,FALSE);  // Location Silver with Require Put Away and Require Pick.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver2.Code,FALSE);

      LibraryWarehouse.CreateLocationWMS(LocationOrange,FALSE,TRUE,TRUE,FALSE,FALSE);  // Location Orange with Require Put Away and Require Pick.
      LibraryWarehouse.CreateLocationWMS(LocationWithRequirePick,FALSE,FALSE,TRUE,FALSE,FALSE);  // Location with Require Pick.
      LibraryWarehouse.CreateLocationWMS(LocationWithRequirePick2,FALSE,FALSE,TRUE,FALSE,FALSE);  // Location with Require Pick.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationRed);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateLocationWMS(LocationGreen,FALSE,TRUE,TRUE,TRUE,TRUE);  // Location Green with Require Put Away, Require Pick, Require Receive and Require Shipment.
      LibraryWarehouse.CreateLocationWMS(LocationBrown,FALSE,TRUE,FALSE,FALSE,FALSE);  // Location Brown with Require Put-Away.
      LibraryWarehouse.CreateLocationWMS(LocationRed2,FALSE,FALSE,FALSE,FALSE,TRUE);  // Location Red with Require Shipment.

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationRed2.Code,FALSE);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);  // Location: Location In Transit.
    END;

    LOCAL PROCEDURE CreateLocationSetupWithBins@252(VAR Location@1001 : Record 14;RequirePutAway@1007 : Boolean;RequirePick@1006 : Boolean;RequireReceive@1005 : Boolean;RequireShipment@1004 : Boolean;BinMandatory@1003 : Boolean);
    VAR
      Bin@1002 : Record 7354;
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',LibraryRandom.RandInt(3),FALSE); // Value required.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      IF RequireReceive THEN BEGIN
        LibraryWarehouse.FindBin(Bin,Location.Code,'',1); // Use 1 for Bin Index.
        Location.VALIDATE("Receipt Bin Code",Bin.Code);
        Location.MODIFY(TRUE);
      END;
      IF RequireShipment THEN BEGIN
        LibraryWarehouse.FindBin(Bin,Location.Code,'',1); // Use 1 for Bin Index.
        Location.VALIDATE("Shipment Bin Code",Bin.Code);
        Location.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AutoFillQtyToHandleOnWarehouseActivityLine@85(SourceDocument@1004 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CalculateAndPostConsumptionJournal@141(ProductionOrderNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Journal Template Name",ConsumptionItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",ConsumptionItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CancelReservationOnSalesOrder@253(DocumentNo@1001 : Code[20]);
    VAR
      ReservationMode@1000 : 'ReserveFromCurrentLine,CancelReservationCurrentLine';
    BEGIN
      LibraryVariableStorage.Enqueue(ReservationMode::CancelReservationCurrentLine);  // Enqueue for ReservationPageHandler.
      LibraryVariableStorage.Enqueue(CancelAllReservationsConfirm);  // Enqueue for ConfirmHandler.
      ShowReservationOnSalesLine(DocumentNo);
    END;

    LOCAL PROCEDURE CreateWhiteLocationWithTwoZones@19();
    VAR
      Zone@1003 : Record 7300;
      Bin@1002 : Record 7354;
      PutAwayTemplateHeader@1001 : Record 7307;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(LocationWhite2,TRUE,TRUE,TRUE,TRUE,TRUE);
      LocationWhite2.VALIDATE("Directed Put-away and Pick",TRUE);
      LocationWhite2.MODIFY(TRUE);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite2.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,FALSE,FALSE),'','',0,FALSE);  // Value required for test.
      LibraryWarehouse.CreateNumberOfBins(
        LocationWhite2.Code,Zone.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,FALSE,FALSE),1,FALSE);  // Value required for the No. of Bin in the test.
      LibraryWarehouse.FindBin(Bin,LocationWhite2.Code,Zone.Code,1);
      LocationWhite2.VALIDATE("Adjustment Bin Code",Bin.Code);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite2.Code,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE),'','',10,FALSE);  // Value required for test.
      LibraryWarehouse.CreateNumberOfBins(
        LocationWhite2.Code,Zone.Code,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE),1,FALSE);  // Value required for the No. of Bin in the test.
      LibraryWarehouse.FindBin(Bin,LocationWhite2.Code,Zone.Code,1);
      LocationWhite2.VALIDATE("Receipt Bin Code",Bin.Code);
      CreatePutAwayTemplate(PutAwayTemplateHeader,TRUE,FALSE,TRUE,FALSE);  // Taking Fixed Bin.
      LocationWhite2.VALIDATE("Put-away Template Code",PutAwayTemplateHeader.Code);
      LocationWhite2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyBOM@188(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ItemVariant@1006 : Record 5401;UnitOfMeasureCode@1002 : Code[10];QuantityPer@1004 : Decimal);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemVariant."Item No.",QuantityPer);
      ProductionBOMLine.VALIDATE("Variant Code",ItemVariant.Code);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CarryOutActionMessageAfterCalculatePlanOnRequisitionLine@3(Item@1002 : Record 27);
    VAR
      RequisitionWkshName@1001 : Record 245;
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::"Req.");
      RequisitionWkshName.FINDFIRST;
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,WORKDATE);
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@71(VAR ProductionOrder@1002 : Record 5405;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      LibraryManufacturing@1004 : Codeunit 132202;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostInventoryPutAwayFromPurchaseOrderUsingMultipleBinAndLot@207(VAR Bin@1004 : Record 7354;VAR LotNo@1007 : Variant;ItemNo@1002 : Code[20];LocationCode@1011 : Code[10];Quantity@1003 : Decimal);
    VAR
      Bin2@1005 : Record 7354;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseActivityHeader@1010 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      ItemTrackingMode@1006 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      FindBin(Bin,LocationCode);
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithTracking(
        PurchaseLine,PurchaseHeader,ItemNo,Quantity,Bin."Location Code",ItemTrackingMode::"Assign Lot No.",Bin.Code);
      LibraryVariableStorage.Dequeue(LotNo);
      CreatePurchaseLineWithTracking(
        PurchaseLine,PurchaseHeader,ItemNo,Quantity,Bin2."Location Code",ItemTrackingMode::"Assign Lot No.",Bin2.Code);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryVariableStorage.Enqueue(InvPutAwayMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationSilver.Code,TRUE,FALSE);
      AutoFillQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityHeader.Type::"Invt. Put-away",TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@40(ItemNo@1005 : Code[20];EntryType@1001 : Option;Quantity@1004 : Decimal;LocationCode@1003 : Code[10];UseTracking@1002 : Boolean);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,EntryType,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      IF UseTracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@209(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1000 : Decimal;ItemTracking@1002 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      IF ItemTracking THEN
        PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPartialWarehouseReceipt@102(VAR PurchaseHeader@1000 : Record 38;Item@1002 : Record 27;LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,'',Item."No.",Quantity,Item."Base Unit of Measure",FALSE);
      CreateWarehouseReceipt(PurchaseHeader);
      UpdateQuantityOnWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",LocationCode,'',Quantity / 2);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationCode);
      UpdateQuantityOnWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",LocationCode,'',Quantity / 4);  // Value required for the test.
    END;

    LOCAL PROCEDURE CreateAndPostProductionJournal@233(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;EntryNo@1004 : Integer);
    VAR
      ItemJournalLine@1000 : Record 83;
      ProdOrderRoutingLine@1005 : Record 5409;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Output,ItemNo,0);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrderNo);
      ItemJournalLine.VALIDATE("Order Line No.",FindProductionOrderLine(ProductionOrderNo));

      FindProdOrderRoutingLine(ProdOrderRoutingLine,ItemJournalLine);
      ItemJournalLine.VALIDATE("Operation No.",ProdOrderRoutingLine."Operation No.");

      ItemJournalLine.VALIDATE("Output Quantity",Quantity);
      ItemJournalLine.VALIDATE("Applies-to Entry",EntryNo);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.PostingItemJnlFromProduction(FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@129(VAR ItemJournalLine@1001 : Record 83;ItemNo@1004 : Code[20];ProductionOrderNo@1000 : Code[20];VariantCode@1002 : Code[10];BinCode@1003 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(OutputItemJournalBatch,'');
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(
        ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,ItemNo,ProductionOrderNo);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.VALIDATE("Output Quantity",Quantity);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatedAndPostWarehouseReceiptWithTracking@284(Location@1007 : Record 14;PurchaseHeaderNo@1000 : Code[20];ItemNo@1006 : Code[20]);
    VAR
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      GetSourceDocumentOnWarehouseReceipt(WarehouseReceiptHeader,Location.Code,TRUE,FALSE,FALSE,ItemNo,ItemNo);
      WITH WarehouseReceiptLine DO BEGIN
        FindWarehouseReceiptLine(WarehouseReceiptLine,"Source Document"::"Purchase Order",PurchaseHeaderNo,Location.Code);
        "Bin Code" := Location."Shipment Bin Code";
        MODIFY;
        OpenItemTrackingLines; // Assign "Lot No." through ItemTrackingFromReceiptHandler
      END;
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@24(PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10]);
    BEGIN
      CreateWarehouseReceipt(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationCode);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromTransferOrder@125(TransferHeader@1000 : Record 5740;LocationCode@1001 : Code[10]);
    VAR
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      FindWarehouseReceiptLine(
        WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.",LocationCode);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedMessage,TransferHeader."No."));  // Enqueue for MessageHandler.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrder@41(VAR PurchaseHeader@1009 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1007 : Decimal;UnitOfMeasure@1006 : Code[10];ItemTracking@1003 : Boolean;ItemTrackingMode@1004 : Option;BinCode@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseReceiptLine@1005 : Record 7317;
      Bin@1010 : Record 7354;
    BEGIN
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity,UnitOfMeasure);
      IF ItemTracking THEN BEGIN
        FindWarehouseReceiptLine(
          WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationCode);
        LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for ItemTrackingPageHandler.
        WarehouseReceiptLine.OpenItemTrackingLines;  // Item Tracking Lines page is handled using ItemTrackingLinesHandlerWithSerialNo
      END;
      PostWarehouseReceipt(PurchaseHeader."No.",LocationCode);
      IF BinCode <> '' THEN BEGIN
        Bin.GET(LocationCode,BinCode);
        UpdateBinCodeOnPutAwayLine(
          WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      END;
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice@42(VAR SalesHeader@1000 : Record 36;ShippingAdvice@1009 : Option;ItemNo@1002 : Code[20];ItemNo2@1005 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];MultipleLines@1006 : Boolean);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipping Advice",ShippingAdvice);   // Handling the Confirm Dialog.
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,'',Quantity);
      IF MultipleLines THEN
        CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo2,'',Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocument@21(VAR SalesHeader@1005 : Record 36;DocumentType@1004 : Option;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal;UseTraking@1006 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
      ItemTrackingMode@1007 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,'',Quantity);
      IF UseTraking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");
        SalesLine.OpenItemTrackingLines;
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;LocationCode@1003 : Code[10];BinCode@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1000 : Decimal;UnitOfMeasureCode@1007 : Code[10];ItemTracking@1002 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.MODIFY(TRUE);
      IF ItemTracking THEN
        PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleLines@28(VAR PurchaseHeader@1000 : Record 38;LocationCode@1003 : Code[10];LocationCode2@1001 : Code[10];ItemNo@1005 : Code[20];Quantity@1006 : Decimal;UnitOfMeasureCode@1004 : Code[10];UnitOfMeasureCode2@1007 : Code[10];VariantCode@1002 : Code[10];VariantCode2@1008 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithUOMLocationAndVariantCode(PurchaseHeader,ItemNo,Quantity,UnitOfMeasureCode,LocationCode,VariantCode);
      CreatePurchaseLineWithUOMLocationAndVariantCode(PurchaseHeader,ItemNo,Quantity,UnitOfMeasureCode2,LocationCode2,VariantCode2);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithTrackingOnMultipleLines@118(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;ItemNo2@1004 : Code[20];LocationCode@1005 : Code[10]);
    VAR
      PurchaseLine@1006 : Record 39;
      ItemTrackingMode@1003 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithTracking(
        PurchaseLine,PurchaseHeader,ItemNo,Quantity,LocationCode,ItemTrackingMode::"Assign Serial No.",'');
      CreatePurchaseLineWithTracking(PurchaseLine,PurchaseHeader,ItemNo2,Quantity,LocationCode,ItemTrackingMode::"Assign Lot No.",'');
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLines@139(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1006 : Code[20];VariantCode@1009 : Code[10];VariantCode2@1010 : Code[10];Quantity@1004 : Decimal;Tracking@1008 : Boolean);
    VAR
      SalesLine@1005 : Record 37;
      SalesLine2@1001 : Record 37;
      ItemTrackingMode@1007 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,VariantCode,Quantity);
      CreateSalesLine(SalesHeader,SalesLine2,LocationCode,ItemNo2,VariantCode2,Quantity);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
        SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on First line.
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
        SalesLine2.OpenItemTrackingLines; // Assign Item Tracking on second line.
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@247(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      ReservationMode@1004 : 'ReserveFromCurrentLine,CancelReservationCurrentLine';
    BEGIN
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationCode,ItemNo,Quantity,FALSE);
      LibraryVariableStorage.Enqueue(ReservationMode::ReserveFromCurrentLine);  // Enqueue for ReservationPageHandler.
      ShowReservationOnSalesLine(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@186(VAR TransferHeader@1000 : Record 5740;FromLocation@1001 : Code[10];ToLocation@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;UseTracking@1006 : Boolean);
    VAR
      TransferLine@1003 : Record 5741;
      Direction@1007 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      IF UseTracking THEN
        TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseInternalPutAway@163(VAR WhseInternalPutAwayLine@1002 : Record 7332;Bin@1000 : Record 7354;ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];Quantity@1005 : Decimal;Quantity2@1006 : Decimal);
    VAR
      WhseInternalPutAwayHeader@1001 : Record 7331;
      WhseIntPutAwayRelease@1007 : Codeunit 7316;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,Bin."Location Code");
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",Bin."Zone Code");
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",Bin.Code);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo,Quantity);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo2,Quantity2);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseInternalPick@162(VAR WhseInternalPickHeader@1007 : Record 7333;VAR WhseInternalPickLine@1001 : Record 7334;Bin@1000 : Record 7354;ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];Quantity@1005 : Decimal;Quantity2@1006 : Decimal);
    VAR
      WhseInternalPickRelease@1002 : Codeunit 7315;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,Bin."Location Code");
      WhseInternalPickHeader.VALIDATE("To Zone Code",Bin."Zone Code");
      WhseInternalPickHeader.VALIDATE("To Bin Code",Bin.Code);
      WhseInternalPickHeader.MODIFY(TRUE);
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo2,Quantity2);
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreateAndShipTransferOrder@68(VAR TransferHeader@1001 : Record 5740;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1005 : Code[20];Quantity@1006 : Decimal;UseTracking@1004 : Boolean);
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,FromLocation,ToLocation,ItemNo,Quantity,UseTracking);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Post as Ship.
    END;

    LOCAL PROCEDURE CreateAndUpdateBinContent@100(Bin@1000 : Record 7354;Item@1001 : Record 27;MaxQuantity@1002 : Decimal;Fixed@1004 : Boolean);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE("Bin Type Code",Bin."Bin Type Code");
      BinContent.VALIDATE("Max. Qty.",MaxQuantity);
      BinContent.VALIDATE(Fixed,Fixed);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinAndUpdateBinContent@94(VAR Bin@1000 : Record 7354;Item@1001 : Record 27;LocationCode@1002 : Code[10];Quantity@1005 : Decimal;Fixed@1003 : Boolean);
    VAR
      Zone@1004 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,FALSE,TRUE,TRUE);  // Find PICK Bin.
      LibraryWarehouse.CreateBin(Bin,Zone."Location Code",LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      CreateAndUpdateBinContent(Bin,Item,Quantity,Fixed);
    END;

    LOCAL PROCEDURE CreateBinForReceiveZoneWithBinRanking@116(VAR Bin@1001 : Record 7354;LocationCode@1002 : Code[10];BinRanking@1003 : Integer);
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,TRUE,FALSE,FALSE); // Find RECEIVE Zone.
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      Bin.VALIDATE("Bin Ranking",BinRanking);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinForAdjustmentZoneWithBinRanking@239(VAR Bin@1001 : Record 7354;LocationCode@1002 : Code[10];BinRanking@1003 : Integer);
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,FALSE,FALSE,FALSE); // Find Adjustment Zone.
      CreateBinForZoneWithBinRanking(Bin,Zone,LocationCode,BinRanking);
    END;

    LOCAL PROCEDURE CreateBinForPickZoneWithBinRanking@223(VAR Bin@1001 : Record 7354;LocationCode@1002 : Code[10];BinRanking@1003 : Integer);
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,FALSE,TRUE,TRUE); // Find PICK Zone.
      CreateBinForZoneWithBinRanking(Bin,Zone,LocationCode,BinRanking);
    END;

    LOCAL PROCEDURE CreateBinForZoneWithBinRanking@220(VAR Bin@1001 : Record 7354;Zone@1000 : Record 7300;LocationCode@1002 : Code[10];BinRanking@1003 : Integer);
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      Bin.VALIDATE("Bin Ranking",BinRanking);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinWithMaximumCubage@61(VAR Bin@1000 : Record 7354;Zone@1001 : Record 7300;MaximumCubage@1002 : Decimal);
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Zone."Location Code",LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      Bin.VALIDATE("Maximum Cubage",MaximumCubage);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinContentWithMaxQuantity@17(Bin@1000 : Record 7354;Item@1001 : Record 27;MaxQuantity@1002 : Decimal);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE("Max. Qty.",MaxQuantity);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinsForPickZoneWithBinRanking@97(VAR Zone@1002 : Record 7300;LocationCode@1000 : Code[10];NoOfBins@1001 : Integer);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      FindZone(Zone,LocationCode,FALSE,TRUE,TRUE);  // Find Pick Zone.
      LibraryWarehouse.CreateNumberOfBins(LocationCode,Zone.Code,Zone."Bin Type Code",NoOfBins,FALSE);
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.MODIFYALL("Bin Ranking",LibraryRandom.RandInt(100),TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionItem@191(VAR DimensionValue@1001 : Record 349;ItemNo@1003 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateItemWithOrderReorderingPolicy@199(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateReorderingPolicyAsOrderInItem(Item);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@133(VAR ParentItem@1002 : Record 27;VAR ComponentItem@1001 : Record 27;VAR ItemVariant@1004 : Record 5401;QuantityPer@1003 : Decimal);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      LibraryInventory.CreateItem(ComponentItem);
      LibraryInventory.CreateItemVariant(ItemVariant,ComponentItem."No.");
      CreateAndCertifyBOM(ProductionBOMHeader,ItemVariant,ParentItem."Base Unit of Measure",QuantityPer);
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemwithReplenishment@127(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@99(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1002 : Code[20];Length@1003 : Integer);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1 + LibraryRandom.RandInt(5));
      ItemUnitOfMeasure.VALIDATE(Length,Length);
      ItemUnitOfMeasure.VALIDATE(Width,Length);  // Taking Width as Length.
      ItemUnitOfMeasure.VALIDATE(Height,Length);  // Taking Height as Length.
      ItemUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssembledItem@280(VAR ParentItem@1001 : Record 27;VAR ComponentItem@1000 : Record 27;QtyPer@1003 : Decimal);
    VAR
      BOMComponent@1002 : Record 90;
    BEGIN
      LibraryAssembly.CreateItem(ComponentItem,ComponentItem."Costing Method",ComponentItem."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateItem(ParentItem,ParentItem."Costing Method",ParentItem."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ComponentItem."No.",ParentItem."No.",'',BOMComponent."Resource Usage Type",QtyPer,TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDifferentPutAwayUnitOfMeasure@101(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1002 : Record 5404);
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",0);  // Taking 0 for Blank Length.
      UpdatePutAwayUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@9(VAR Item@1000 : Record 27;Serial@1002 : Boolean;Lot@1003 : Boolean;SerialNos@1004 : Code[10];LotNos@1005 : Code[10]);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@5(VAR ItemTrackingCode@1003 : Record 6502;Serial@1000 : Boolean;Lot@1001 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingLine@145(VAR ItemTrackingLines@1000 : TestPage 6510;Quantity@1001 : Decimal);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
    END;

    LOCAL PROCEDURE CreateInventoryActivity@78(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];LocationCode@1005 : Code[10];PutAway@1003 : Boolean;Pick@1002 : Boolean);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Source Document",SourceDocument);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.SETRANGE("Location Code",LocationCode);
      WarehouseRequest.FINDFIRST;
      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,PutAway,Pick,FALSE);
    END;

    LOCAL PROCEDURE CreateInventoryPickFromSalesOrder@210(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseRequest@1004 : Record 5765;
    BEGIN
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationCode,ItemNo,Quantity,FALSE);
      LibraryVariableStorage.Enqueue(InvPickMessage);  // Handled in Message Handler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",LocationCode,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryPutAwayFromPurchaseOrder@224(VAR PurchaseHeader@1001 : Record 38;Item@1002 : Record 27;LocationCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      Bin@1000 : Record 7354;
      WarehouseRequest@1003 : Record 5765;
    BEGIN
      FindBin(Bin,LocationCode);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Bin."Location Code",Bin.Code,Item."No.",Quantity,Item."Base Unit of Measure",FALSE);
      LibraryVariableStorage.Enqueue(InvPutAwayMessage);  // Enqueue for MessageHandler.
      CreateInventoryActivity(
        WarehouseRequest."Source Document"::"Purchase Order",PurchaseHeader."No.",LocationSilver.Code,TRUE,FALSE);  // Use True for Put Away.
    END;

    LOCAL PROCEDURE CreateMovementWorksheetLine@165(WhseWorksheetName@1005 : Record 7327;ItemNo@1003 : Code[20];Bin@1001 : Record 7354;Bin2@1002 : Record 7354;Quantity@1004 : Decimal);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Bin."Location Code",
        WhseWorksheetLine."Whse. Document Type"::"Whse. Mov.-Worksheet");
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE("From Zone Code",Bin."Zone Code");
      WhseWorksheetLine.VALIDATE("From Bin Code",Bin.Code);
      WhseWorksheetLine.VALIDATE("To Zone Code",Bin2."Zone Code");
      WhseWorksheetLine.VALIDATE("To Bin Code",Bin2.Code);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMovementWorksheetLineWithNoUoM@263(VAR WhseWorksheetLine@1001 : Record 7326;ItemNo@1002 : Code[20]);
    VAR
      WhseWorksheetName@1000 : Record 7327;
    BEGIN
      CreateWarehouseWorksheetNameForMovement(WhseWorksheetName);
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,WhseWorksheetName."Location Code",0);
      WhseWorksheetLine."Item No." := ItemNo;
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePick@175(VAR WarehouseShipmentHeader@1002 : Record 7320;SourceDocument@1003 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickFromProductionOrder@140(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      SortActivity@1004 : Option;
    BEGIN
      CreateAndRefreshProductionOrder(ProductionOrder,ItemNo,Quantity,LocationCode);
      LibraryVariableStorage.Enqueue(SortActivity);  // Enqueue for WhseShipmentCreatePickHandler.
      LibraryVariableStorage.Enqueue(PickActivityCreatedMessage);  // Enqueue for MessageHandler.
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);  // SetBreakBulkFilter,DoNotFillQtyToHandle and PrintDocument False.
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrder@217(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseShipmentLine@1005 : Record 7321;
    BEGIN
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,LocationCode,ItemNo,Quantity,TRUE);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePutAwayFromPutAwayWorksheet@29(VAR WhseWorksheetLine@1004 : Record 7326;LocationCode@1002 : Code[10];ItemNo@1008 : Code[20];ItemNo2@1009 : Code[20];QuantityToHandle@1005 : Decimal;SortActivity@1006 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';BreakbulkFilter@1007 : Boolean);
    VAR
      WhseWorksheetName@1003 : Record 7327;
      WhsePutAwayRequest@1001 : Record 7324;
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::"Put-away");
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePutAwayRequest.SETRANGE("Completely Put Away",FALSE);
      WhsePutAwayRequest.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.GetInboundSourceDocuments(WhsePutAwayRequest,WhseWorksheetName,LocationCode);
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplate.Name);
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETFILTER("Item No.",ItemNo + '|' + ItemNo2);
      WhseWorksheetLine.FINDFIRST;
      IF QuantityToHandle <> 0 THEN BEGIN
        WhseWorksheetLine.VALIDATE("Qty. to Handle",QuantityToHandle);
        WhseWorksheetLine.MODIFY(TRUE);
      END;
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,SortActivity,FALSE,FALSE,BreakbulkFilter);
    END;

    LOCAL PROCEDURE CreatePutAwayFromWhseInternalPutAway@130(Bin@1001 : Record 7354;ItemNo@1005 : Code[20];VariantCode@1007 : Code[10];Quantity@1006 : Decimal);
    VAR
      WhseInternalPutAwayHeader@1003 : Record 7331;
      WhseInternalPutAwayLine@1008 : Record 7332;
    BEGIN
      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,Bin."Location Code",Bin."Zone Code",Bin.Code);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo,Quantity);
      WhseInternalPutAwayLine.VALIDATE("Variant Code",VariantCode);
      WhseInternalPutAwayLine.MODIFY(TRUE);
      LibraryWarehouse.ReleaseWarehouseInternalPutAway(WhseInternalPutAwayHeader);
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);
    END;

    LOCAL PROCEDURE CreatePutAwayTemplate@95(VAR PutAwayTemplateHeader@1001 : Record 7307;Fixed@1004 : Boolean;FindFloatingBin@1005 : Boolean;FindBinLessthanMinQty@1003 : Boolean;FindEmptyBin@1002 : Boolean);
    VAR
      PutAwayTemplateLine@1000 : Record 7308;
    BEGIN
      LibraryWarehouse.CreatePutAwayTemplateHeader(PutAwayTemplateHeader);
      LibraryWarehouse.CreatePutAwayTemplateLine(
        PutAwayTemplateHeader,PutAwayTemplateLine,Fixed,FindFloatingBin,TRUE,TRUE,FindBinLessthanMinQty,FindEmptyBin);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithTracking@138(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];ItemTrackingMode@1005 : Option;BinCode@1006 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithUOMLocationAndVariantCode@30(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10];LocationCode@1006 : Code[10];VariantCode@1005 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndPostWarehouseReceipt@152(VAR PurchaseHeader@1001 : Record 38;LocationCode@1000 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10]);
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,'',ItemNo,Quantity,UnitOfMeasureCode,FALSE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationCode);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@231(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      WorkCenter.FINDFIRST;
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,WorkCenter."No.",FORMAT(LibraryRandom.RandInt(5)),LibraryRandom.RandInt(5),
        LibraryRandom.RandInt(5));
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@26(LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];PutAwayTemplateCode@1001 : Code[10]);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');  // Variant Code as Blank.
      StockkeepingUnit.VALIDATE("Put-away Template Code",PutAwayTemplateCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@23(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1004 : Record 37;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1003 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPutawayHeader@134(VAR WhseInternalPutAwayHeader@1000 : Record 7331;LocationCode@1003 : Code[10];FromZonecode@1001 : Code[10];FromBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationCode);
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",FromZonecode);
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",FromBinCode);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseActivityLine@380(VAR WarehouseActivityLine@1001 : Record 5767;LocationCode@1000 : Code[10]);
    VAR
      UnitOfMeasure@1002 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      WITH WarehouseActivityLine DO BEGIN
        "Activity Type" := "Activity Type"::"Invt. Pick";
        "No." := LibraryUtility.GenerateGUID;
        "Location Code" := LocationCode;
        "Action Type" := "Action Type"::Take;
        "Unit of Measure Code" := UnitOfMeasure.Code;
        "Qty. Outstanding (Base)" := LibraryRandom.RandDec(10,2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeaderWithLocation@45(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeaderWithLocation@76(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrder@168(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromTransferOrder@194(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,FromLocationCode,ToLocationCode,ItemNo,Quantity,FALSE);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@115(VAR PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10]);
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,'',ItemNo,Quantity,UnitOfMeasureCode,FALSE);
      CreateWarehouseReceipt(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceipt@201(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseWorksheetNameForMovement@164(VAR WhseWorksheetName@1001 : Record 7327);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationWhite.Code);
    END;

    LOCAL PROCEDURE DeleteWarehouseActivityLine@35(SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.DELETE(TRUE);  // Delete the Put-Away.
    END;

    LOCAL PROCEDURE DeletePutAway@153(SourceNo@1001 : Code[20];Type@1002 : Option);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,Type);
      WarehouseActivityHeader.GET(Type,WarehouseActivityLine."No.");
      WarehouseActivityHeader.DELETE(TRUE);  // Delete the Put Away.
    END;

    LOCAL PROCEDURE FindAdjustmentBin@161(VAR Bin@1001 : Record 7354;Location@1000 : Record 14);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindZone(Zone,Location.Code,FALSE,FALSE,FALSE);
      Bin.SETFILTER(Code,'<>%1',Location."Adjustment Bin Code");
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBin@64(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinAndCreateBinContent@124(VAR Bin@1000 : Record 7354;Item@1001 : Record 27;LocationCode@1002 : Code[10]);
    BEGIN
      FindBinWithBinTypeCode(Bin,LocationCode,FALSE,TRUE,TRUE,TRUE);  // Find Last Bin in PICK Zone.
      CreateAndUpdateBinContent(Bin,Item,0,TRUE);
    END;

    LOCAL PROCEDURE FindBinWithBinTypeCode@137(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10];Receive@1004 : Boolean;PutAway@1003 : Boolean;Pick@1005 : Boolean;FindLastBin@1006 : Boolean);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,Receive,PutAway,Pick);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,RANDOM(Bin.COUNT));  // Find Random Bin.
      IF FindLastBin THEN
        Bin.FINDLAST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@241(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      ItemLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE FindProdOrderRoutingLine@261(VAR ProdOrderRoutingLine@1000 : Record 5409;ItemJournalLine@1001 : Record 83);
    BEGIN
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ItemJournalLine."Order No.");
      ProdOrderRoutingLine.SETRANGE("Routing Reference No.",ItemJournalLine."Routing Reference No.");
      ProdOrderRoutingLine.SETRANGE("Routing No.",ItemJournalLine."Routing No.");
      ProdOrderRoutingLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@238(ProductionOrderNo@1001 : Code[20]) : Integer;
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderLine.FINDFIRST;
      EXIT(ProdOrderLine."Line No.");
    END;

    LOCAL PROCEDURE FindRegisteredWarehouseActivityLine@51(VAR RegisteredWhseActivityLine@1000 : Record 5773;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindZone@87(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];Receive@1003 : Boolean;PutAway@1002 : Boolean;Pick@1004 : Boolean);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(Receive,FALSE,PutAway,Pick));
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@2(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      FilterWarehouseActiviyLines(WarehouseActivityLine,SourceDocument,SourceNo,'',ActivityType);
    END;

    LOCAL PROCEDURE FindWarehouseActivityLineForMultipleSourceDocuments@154(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];SourceNo2@1004 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");  // Setting the current key for validation.
      FilterWarehouseActiviyLines(WarehouseActivityLine,SourceDocument,SourceNo,SourceNo2,ActivityType);
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@56(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20];LocationCode@1001 : Code[10]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.SETRANGE("Location Code",LocationCode);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@156(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterPostedInvtPickLine@90(VAR PostedInvtPickLine@1000 : Record 7343;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      PostedInvtPickLine.SETRANGE("Source Document",PostedInvtPickLine."Source Document"::"Sales Order");
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Item No.",ItemNo);
      PostedInvtPickLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterWarehouseActiviyLines@174(VAR WarehouseActivityLine@1003 : Record 5767;SourceDocument@1002 : Option;SourceNo@1001 : Code[20];SourceNo2@1000 : Code[20];ActivityType@1004 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETFILTER("Source No.",'%1|%2',SourceNo,SourceNo2);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE GetExpectedReceiptDateFromPurchaseLine@111(VAR ExpectedReceiptDate@1001 : Date;DocumentNo@1002 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
      ExpectedReceiptDate := PurchaseLine."Expected Receipt Date";
    END;

    LOCAL PROCEDURE GetSourceDocumentOnWarehouseReceipt@38(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10];PurchaseOrders@1005 : Boolean;InboundTransfers@1006 : Boolean;SalesReturnOrders@1007 : Boolean;ItemNo@1002 : Code[20];ItemNo2@1004 : Code[20]);
    VAR
      WarehouseSourceFilter@1003 : Record 5771;
    BEGIN
      CreateWarehouseReceiptHeaderWithLocation(WarehouseReceiptHeader,LocationCode);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Inbound);
      WarehouseSourceFilter.VALIDATE("Purchase Orders",PurchaseOrders);
      WarehouseSourceFilter.VALIDATE("Inbound Transfers",InboundTransfers);
      WarehouseSourceFilter.VALIDATE("Sales Return Orders",SalesReturnOrders);
      WarehouseSourceFilter.VALIDATE("Item No. Filter",ItemNo + '|' + ItemNo2);
      WarehouseSourceFilter.MODIFY(TRUE);
      LibraryWarehouse.GetSourceDocumentsReceipt(WarehouseReceiptHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE GetSourceDocumentOnWarehouseShipment@250(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10];SalesOrders@1005 : Boolean;OutboundTransfers@1006 : Boolean;PurchaseReturnOrders@1007 : Boolean;ItemNo@1002 : Code[100]);
    VAR
      WarehouseSourceFilter@1003 : Record 5771;
    BEGIN
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Outbound);
      WITH WarehouseSourceFilter DO BEGIN
        VALIDATE("Sales Orders",SalesOrders);
        VALIDATE("Outbound Transfers",OutboundTransfers);
        VALIDATE("Purchase Return Orders",PurchaseReturnOrders);
        VALIDATE("Item No. Filter",ItemNo);
        MODIFY(TRUE);
      END;
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnPickWorksheet@198(VAR WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      WhsePickRequest@1003 : Record 7325;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE(Status,WhsePickRequest.Status::Released);
      WhsePickRequest.SETRANGE("Completely Picked",FALSE);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE PostProductionJournal@235(VAR ProductionOrder@1000 : Record 5405;Quantity@1001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue for Production Journal Handler.
      LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessage);  // Enqueue for Confirm Handler.
      LibraryVariableStorage.Enqueue(JournalLinesPostedMessage);  // Enqueue for Message Handler.
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,FindProductionOrderLine(ProductionOrder."No."));
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1005 : Option;SourceNo@1002 : Code[20];ActivityType@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE PostInventoryActivity@47(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;Invoice@1005 : Boolean);
    VAR
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,Invoice);
    END;

    LOCAL PROCEDURE PostInventoryPutAwayWithPartialQuantity@16(SourceNo@1002 : Code[20];BinCode@1003 : Code[20];LotNo@1005 : Code[20];QuantityToHandle@1004 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityHeader.Type::"Invt. Put-away");
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QuantityToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,WarehouseActivityHeader.Type::"Invt. Put-away",FALSE);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@32(SourceNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
      WarehouseReceiptHeader@1000 : Record 7316;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostItemJournalThroughCalculateWhseAdjmt@272(Item@1000 : Record 27;Qty@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
      Bin@1002 : Record 7354;
    BEGIN
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,TRUE); // Find Bin for PICK
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        LocationWhite.Code,'',Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithAssembly@258(ParentItem@1002 : Record 27;ComponentItem@1003 : Record 27;Qty@1005 : Decimal) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesLine2@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,LocationWhite.Code,ParentItem."No.",'',Qty);
      SalesLine.VALIDATE("Qty. to Assemble to Order",Qty);
      SalesLine.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine2,LocationWhite.Code,ComponentItem."No.",'',LibraryRandom.RandInt(10));
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE RegisterPutAwayAfterUpdatingBinCodeOnPutAwayLine@167(SourceNo@1002 : Code[20]);
    VAR
      Bin@1000 : Record 7354;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE,FALSE);  // Find PICK Bin.
      UpdateBinCodeOnPutAwayLine(WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE RegisterPutAwayFromPurchaseOrder@205(ItemNo@1003 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.",LocationCode);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityHeader.Type::"Put-away");
    END;

    LOCAL PROCEDURE ReleaseWarehouseShipment@190(VAR WarehouseShipmentHeader@1002 : Record 7320;SourceDocument@1003 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE ShowReservationOnSalesLine@222(DocumentNo@1001 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE UpdatePutAwayUnitOfMeasureOnItem@131(VAR Item@1000 : Record 27;UnitOfMeasureCode@1002 : Code[10]);
    BEGIN
      Item.VALIDATE("Put-away Unit of Measure Code",UnitOfMeasureCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnWarehouseReceiptLine@98(SourceNo@1001 : Code[20];ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];QtyToReceive@1002 : Decimal);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.SETRANGE("Variant Code",VariantCode);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      WarehouseReceiptLine.VALIDATE("Qty. to Receive",QtyToReceive);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoAndQuantityToHandleOnInventoryPutAwayLine@75(VAR WarehouseActivityHeader@1005 : Record 5766;SourceNo@1003 : Code[20];LotNo@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Prod. Output");
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE UpdateUnitOfMeasureOnProductionOrderLine@72(ProductionOrder@1000 : Record 5405;UnitOfMeasureCode@1001 : Code[10]);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeOnWarehouseReceiptLine@57(SourceNo@1001 : Code[20];BinCode@1000 : Code[20];BinCode2@1004 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      WarehouseReceiptLine.VALIDATE("Bin Code",BinCode);
      WarehouseReceiptLine.MODIFY(TRUE);
      IF BinCode2 <> '' THEN BEGIN
        WarehouseReceiptLine.NEXT;
        WarehouseReceiptLine.VALIDATE("Bin Code",BinCode2);
        WarehouseReceiptLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateBinCodeOnPutAwayLine@44(VAR WarehouseActivityLine@1000 : Record 5767;Bin@1003 : Record 7354;SourceDocument@1002 : Option;SourceNo@1001 : Code[20]);
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
        WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateBinCapacityPolicyOnLocation@48(VAR Location@1000 : Record 14;VAR OldBinCapacityPolicy@1001 : Option;NewBinCapacityPolicy@1002 : Option);
    BEGIN
      OldBinCapacityPolicy := Location."Bin Capacity Policy";
      Location.VALIDATE("Bin Capacity Policy",NewBinCapacityPolicy);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDueDateOnWarehouseReceiptLine@112(SourceNo@1002 : Code[20];LocationCode@1000 : Code[10];DueDate@1001 : Date);
    VAR
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      WarehouseReceiptLine.VALIDATE("Due Date",DueDate);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationCalculationOnItem@228(VAR Item@1000 : Record 27);
    VAR
      ExpirationCalculation@1001 : DateFormula;
    BEGIN
      EVALUATE(ExpirationCalculation,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      Item.VALIDATE("Expiration Calculation",ExpirationCalculation);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnInventoryPutAway@84(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@136(ItemNo@1000 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);  // Value required for test.
    END;

    LOCAL PROCEDURE UpdateCubageAndWeightOnItemUnitOfMeasure@59(VAR ItemUnitOfMeasure@1000 : Record 5404;Cubage@1002 : Decimal);
    BEGIN
      ItemUnitOfMeasure.VALIDATE(Cubage,Cubage);
      ItemUnitOfMeasure.VALIDATE(Weight,Cubage);  // Taking Weight as Cubage.
      ItemUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;Quantity@1003 : Decimal;VariantCode@1004 : Code[10]);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.VALIDATE("Variant Code",VariantCode);
      WarehouseJournalLine.MODIFY(TRUE);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemNoOnPurchaseLineAfterReopenPurchaseOrder@243(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1002 : Record 39;
      Item@1001 : Record 27;
    BEGIN
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      LibraryInventory.CreateItem(Item);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("No.",Item."No.");
    END;

    LOCAL PROCEDURE UpdateItemNoOnSalesLineAfterReopenSalesOrder@237(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
      Item@1001 : Record 27;
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      LibraryInventory.CreateItem(Item);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE("No.",Item."No.");
    END;

    LOCAL PROCEDURE UpdateItemNoOnTransferLineAfterReopenTransferOrder@196(TransferHeader@1000 : Record 5740);
    VAR
      TransferLine@1001 : Record 5741;
      Item@1002 : Record 27;
    BEGIN
      LibraryWarehouse.ReopenTransferOrder(TransferHeader);
      LibraryInventory.CreateItem(Item);
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDFIRST;
      TransferLine.VALIDATE("Item No.",Item."No.");
    END;

    LOCAL PROCEDURE UpdateLotNoOnInventoryPickLine@213(SourceNo@1001 : Code[20];LotNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePutAwayTemplateCodeOnLocation@103(VAR Location@1000 : Record 14;PutAwayTemplateCode@1001 : Code[10]) OldPutAwayTemplateCode : Code[10];
    BEGIN
      OldPutAwayTemplateCode := Location."Put-away Template Code";
      Location.VALIDATE("Put-away Template Code",PutAwayTemplateCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateMaximumCubageAndWeightOnBins@63(VAR Bin@1002 : Record 7354;Zone@1000 : Record 7300;MaximumCubage@1003 : Decimal);
    BEGIN
      Bin.SETRANGE("Location Code",Zone."Location Code");
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.FINDSET;
      REPEAT
        Bin.VALIDATE("Maximum Cubage",MaximumCubage);
        Bin.VALIDATE("Maximum Weight",MaximumCubage);  // Taking Maximum Weight as Maximum Cubage.
        Bin.MODIFY(TRUE);
      UNTIL Bin.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@126(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseUnitOfMeasureOnItem@50(VAR Item@1000 : Record 27;ItemUnitOfMeasureCode@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Purch. Unit of Measure",ItemUnitOfMeasureCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePutAwayTemplateCodeOnItem@96(ItemNo@1001 : Code[20];PutAwayTemplateCode@1000 : Code[10]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.VALIDATE("Put-away Template Code",PutAwayTemplateCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQuantityOnInventoryPickLine@10(VAR WarehouseActivityHeader@1003 : Record 5766;SourceNo@1000 : Code[20];LotNo@1002 : Code[20];QuantityToHandle@1001 : Decimal);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QuantityToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE UpdateReorderingPolicyAsOrderInItem@6(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUsePutAwayWorksheetOnLocation@150(VAR Location@1000 : Record 14;VAR OldUsePutAwayWorksheet@1002 : Boolean;NewUsePutAwayWorksheet@1001 : Boolean);
    BEGIN
      OldUsePutAwayWorksheet := Location."Use Put-away Worksheet";
      Location.VALIDATE("Use Put-away Worksheet",NewUsePutAwayWorksheet);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyBinContent@184(LocationCode@1005 : Code[10];BinCode@1001 : Code[20];ItemNo@1000 : Code[20];Quantity@1002 : Decimal;QuantityBase@1004 : Decimal);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
      BinContent.CALCFIELDS("Quantity (Base)");
      BinContent.TESTFIELD("Quantity (Base)",QuantityBase);
    END;

    LOCAL PROCEDURE VerifyBreakBulkFilterOnPutAway@119(VAR WarehouseActivityHeader@1001 : Record 5766;SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityHeader.TESTFIELD("Breakbulk Filter",TRUE);
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@202(ItemNo@1001 : Code[20];ShortcutDimension1Code@1002 : Code[20];QtyCalculated@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      ItemJournalLine.TESTFIELD("Qty. (Calculated)",QtyCalculated);
    END;

    LOCAL PROCEDURE VerifyNoOfLinesOfItemLedgerEntry@246(ItemNo@1001 : Code[20];LotNo@1003 : Code[10];ItemLedgerEntryCount@1002 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type","Entry Type"::Purchase);
        SETFILTER("Lot No.",LotNo);
        Assert.AreEqual(COUNT,ItemLedgerEntryCount,ItemLedgerEntryErr)
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@240(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;RemainingQuantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Remaining Quantity",RemainingQuantity);
    END;

    LOCAL PROCEDURE VerifyNoOfLinesOnPutAway@120(WarehousePutAwayNo@1003 : Code[20];WarehouseActivityHeaderLinesCount@1004 : Integer);
    VAR
      WarehousePutAway@1000 : TestPage 5770;
      WarehousePutAwayLinesCount@1002 : Integer;
    BEGIN
      WarehousePutAway.OPENEDIT;
      WarehousePutAway.FILTER.SETFILTER("No.",WarehousePutAwayNo);
      WarehousePutAwayLinesCount := 1;
      REPEAT
        WarehousePutAwayLinesCount += 1;
      UNTIL WarehousePutAway.WhseActivityLines.NEXT;
      Assert.IsTrue(WarehouseActivityHeaderLinesCount > WarehousePutAwayLinesCount,NoOfLinesMustBeGreater);
    END;

    LOCAL PROCEDURE VerifyPickWorksheetLine@203(WhseWorksheetName@1001 : Record 7327;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;AvailableQtyToPick@1004 : Decimal);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",WhseWorksheetName."Location Code");
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      Assert.AreEqual(AvailableQtyToPick,WhseWorksheetLine.AvailableQtyToPick,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPutLine@316(SourceDocument@1007 : Option;SourceNo@1006 : Code[20];LocationCode@1004 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : Decimal;UnitOfMeasureCode@1001 : Code[20];LotNo@1000 : Code[20]);
    VAR
      PostedInvtPutAwayLine@1005 : Record 7341;
    BEGIN
      PostedInvtPutAwayLine.SETRANGE("Source Document",SourceDocument);
      PostedInvtPutAwayLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPutAwayLine.FINDFIRST;
      PostedInvtPutAwayLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPutAwayLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPutAwayLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPutAwayLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      PostedInvtPutAwayLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@110(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LotNo@1007 : Code[20];ExpirationDate@1004 : Date;NextLine@1006 : Boolean);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      FilterPostedInvtPickLine(PostedInvtPickLine,SourceNo,ItemNo);
      IF NextLine THEN
        PostedInvtPickLine.NEXT;
      PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPickLine.TESTFIELD("Lot No.",LotNo);
      PostedInvtPickLine.TESTFIELD("Expiration Date",ExpirationDate);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLineForSerialNo@86(SourceNo@1004 : Code[20];ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];ExpirationDate@1007 : Date;Quantity@1003 : Decimal);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
      TrackingQuantity@1002 : Decimal;
    BEGIN
      FilterPostedInvtPickLine(PostedInvtPickLine,SourceNo,ItemNo);
      REPEAT
        PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
        PostedInvtPickLine.TESTFIELD("Expiration Date",ExpirationDate);
        PostedInvtPickLine.TESTFIELD("Serial No.");
        TrackingQuantity += PostedInvtPickLine.Quantity;
      UNTIL PostedInvtPickLine.NEXT = 0;
      Assert.AreEqual(TrackingQuantity,Quantity,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseReceiptLine@172(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];ItemNo@1004 : Code[20];VariantCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      PostedWhseReceiptLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseReceiptLine.SETRANGE("Source No.",SourceNo);
      PostedWhseReceiptLine.SETRANGE("Item No.",ItemNo);
      PostedWhseReceiptLine.SETRANGE("Variant Code",VariantCode);
      PostedWhseReceiptLine.FINDFIRST;
      PostedWhseReceiptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseShipmentLine@195(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];VariantCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      PostedWhseShipmentLine@1000 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.SETRANGE("Variant Code",VariantCode);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPutAwayLinesWithMultipleBins@67(VAR Bin@1002 : Record 7354;Item@1004 : Record 27;ItemUnitOfMeasure@1005 : Record 5404;Location@1001 : Record 14;SourceNo@1000 : Code[20];Quantity@1003 : Decimal;Quantity2@1007 : Decimal);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
    BEGIN
      VerifyWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,WarehouseActivityLine."Activity Type"::"Put-away",
        WarehouseActivityLine."Action Type"::Take,
        Item."No.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",Location.Code,Item."Base Unit of Measure",
        Location."Receipt Bin Code",'','');  // Value required for the test.

      REPEAT
        VerifyWarehouseActivityLine(
          WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,WarehouseActivityLine."Activity Type"::"Put-away",
          WarehouseActivityLine."Action Type"::Place,
          Item."No.",Quantity2,Location.Code,ItemUnitOfMeasure.Code,Bin.Code,'','');  // Value required for the test.
        Bin.NEXT(-1);
        Quantity -= 1;
      UNTIL Quantity = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityWithExpirationDate@216(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ExpirationDate@1004 : Date);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      REPEAT
        WarehouseActivityLine.TESTFIELD("Expiration Date",ExpirationDate);
        WarehouseActivityLine.TESTFIELD("Serial No.");
        WarehouseActivityLine.TESTFIELD("Lot No.");
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReservedQuantityOnPurchaseLine@12(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.CALCFIELDS("Reserved Qty. (Base)");
      PurchaseLine.TESTFIELD("Reserved Qty. (Base)",Quantity);
    END;

    LOCAL PROCEDURE VerifyRegisteredPutAwayLine@89(SourceDocument@1006 : Option;SourceNo@1001 : Code[20];ActionType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[20];LotNo@1007 : Code[10];VariantCode@1008 : Code[10];BinCode@1009 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine,SourceDocument,SourceNo,RegisteredWhseActivityLine."Activity Type"::"Put-away",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Lot No.",LotNo);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.FINDFIRST;
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      RegisteredWhseActivityLine.TESTFIELD("Variant Code",VariantCode);
      RegisteredWhseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyLotAndSerialOnRegisteredWhseActivityLine@79(SourceDocument@1004 : Option;SourceNo@1009 : Code[20];ActivityType@1005 : Option;ActionType@1000 : Option;LotNo@1001 : Code[20];ExpirationDate@1003 : Date);
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
    BEGIN
      FindRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine,SourceDocument,SourceNo,
        ActivityType,ActionType);
      REPEAT
        RegisteredWhseActivityLine.TESTFIELD("Lot No.",LotNo);
        RegisteredWhseActivityLine.TESTFIELD("Serial No.");
        RegisteredWhseActivityLine.TESTFIELD(Quantity,1);  // Value required for the Quantity.
        RegisteredWhseActivityLine.TESTFIELD("Expiration Date",ExpirationDate);
      UNTIL RegisteredWhseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDueDateAndBinCodeOnWarehouseActivityLine@117(VAR WarehouseActivityLine@1004 : Record 5767;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;BinCode@1003 : Code[20];DueDate@1005 : Date;NextLine@1000 : Boolean);
    BEGIN
      IF NextLine THEN
        WarehouseActivityLine.NEXT;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
      WarehouseActivityLine.TESTFIELD("Due Date",DueDate);
    END;

    LOCAL PROCEDURE VerifyActionTypeBinCodeAndBreakbulkOnWarehouseActivityLine@259(VAR WarehouseActivityLine@1004 : Record 5767;ItemNo@1002 : Code[20];BinCode@1003 : Code[20];ActionType@1005 : Option;BreakbulkNo@1006 : Integer;Quantity@1007 : Decimal;NextLine@1000 : Boolean);
    BEGIN
      IF NextLine THEN
        WarehouseActivityLine.NEXT;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
      WarehouseActivityLine.TESTFIELD("Action Type",ActionType);
      WarehouseActivityLine.TESTFIELD("Breakbulk No.",BreakbulkNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@36(SourceDocument@1009 : Option;SourceNo@1003 : Code[20];ActivityType@1001 : Option;ActionType@1002 : Option;ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1006 : Code[10];UnitOfMeasureCode@1007 : Code[10];BinCode@1008 : Code[20];VariantCode@1010 : Code[10];LotNo@1011 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Bin Code",BinCode);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Variant Code",VariantCode);
      WarehouseActivityLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLineWithActionType@155(VAR WarehouseActivityLine@1000 : Record 5767;ActionType@1003 : Option;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;NextLine@1004 : Boolean);
    BEGIN
      IF NextLine THEN
        WarehouseActivityLine.NEXT;
      WarehouseActivityLine.TESTFIELD("Action Type",ActionType);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLinesForMultipleItemsWithTakeActionType@169(VAR WarehouseActivityLine@1000 : Record 5767;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      VerifyWarehouseActivityLineWithActionType(WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,ItemNo,Quantity,FALSE);
      VerifyWarehouseActivityLineWithActionType(WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,ItemNo2,Quantity,TRUE);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLinesForMultipleItemsWithPlaceActionType@33(VAR WarehouseActivityLine@1000 : Record 5767;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      VerifyWarehouseActivityLineWithActionType(WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,ItemNo,Quantity,TRUE);
      VerifyWarehouseActivityLineWithActionType(
        WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,ItemNo2,Quantity,TRUE);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@88(Bin@1000 : Record 7354;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseEntry@1003 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",Bin."Location Code");
      WarehouseEntry.SETRANGE("Zone Code",Bin."Zone Code");
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.VALIDATE("Bin Code",Bin.Code);
      WarehouseEntry.VALIDATE(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptLine@180(SourceNo@1005 : Code[20];ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];VariantCode@1002 : Code[10];Quantity@1006 : Decimal;QtyToReceive@1001 : Decimal);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.SETRANGE("Variant Code",VariantCode);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      WarehouseReceiptLine.TESTFIELD(Quantity,Quantity);
      WarehouseReceiptLine.TESTFIELD("Qty. to Receive",QtyToReceive);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@185(ItemVariant@1000 : Record 5401;SourceNo@1002 : Code[20];Quantity@1003 : Decimal;QtyToShip@1004 : Decimal);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Item No.",ItemVariant."Item No.");
      WarehouseShipmentLine.SETRANGE("Variant Code",ItemVariant.Code);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
      WarehouseShipmentLine.TESTFIELD("Qty. to Ship",QtyToShip);
    END;

    LOCAL PROCEDURE VerifyBinCodeForWarehouseShipmentLine@251(SourceNo@1002 : Code[20];BinCode@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      Assert.AreEqual(BinCode,WarehouseShipmentLine."Bin Code",ShipmentBinCodeErr);
    END;

    LOCAL PROCEDURE VerifyBinCodeForWarehouseReceiptLine@254(SourceNo@1002 : Code[20];BinCode@1000 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo,LocationCode);
      Assert.AreEqual(BinCode,WarehouseReceiptLine."Bin Code",ReceiptBinCodeErr);
    END;

    [RequestPageHandler]
    PROCEDURE CalculateInventoryPageHandler@193(VAR CalculateInventory@1000 : TestRequestPage 790);
    VAR
      DequeueVariable@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CalculateInventory.ByDimensions.ASSISTEDIT;
      CalculateInventory.Item.SETFILTER("No.",DequeueVariable);
      CalculateInventory.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionPageHandler@182(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingFromReceiptHandler@260(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Lot No.".INVOKE;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@14(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1001 : Variant;
      ItemTrackingMode@1002 : 'Assign Lot No.,Assign Lot And Serial,Assign Serial No.,Select Entries,Assign Multiple Lot No';
      TrackingQuantity@1003 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Lot No.":
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Lot No. value required in the test.
          END;
        ItemTrackingMode::"Assign Lot And Serial":
          BEGIN
            LibraryVariableStorage.Enqueue(TRUE);
            ItemTrackingLines."Assign Serial No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Lot No. value required in the test.
          END;
        ItemTrackingMode::"Assign Serial No.":
          BEGIN
            LibraryVariableStorage.Enqueue(FALSE);
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::"Assign Multiple Lot No":
          BEGIN
            TrackingQuantity := ItemTrackingLines.Quantity3.ASDECIMAL;
            CreateItemTrackingLine(ItemTrackingLines,TrackingQuantity / 2);
            ItemTrackingLines.NEXT;
            CreateItemTrackingLine(ItemTrackingLines,TrackingQuantity / 2);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@93(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@123(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    VAR
      DequeueVariable@1002 : Variant;
      CreateNewLotNo@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CreateNewLotNo := DequeueVariable;
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@104(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@18(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(ConfirmMessage,LocalMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PutAwaySelectionPageHandler@7(VAR PutAwaySelection@1000 : TestPage 7334);
    BEGIN
      PutAwaySelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalHandler@225(VAR ProductionJournal@1000 : TestPage 5510);
    VAR
      DequeueVariable@1001 : Variant;
      Quantity@1002 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      Quantity := DequeueVariable;
      ProductionJournal."Output Quantity".SETVALUE(Quantity);
      ProductionJournal.Post.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@177(VAR Reservation@1000 : TestPage 498);
    VAR
      DequeueVariable@1002 : Variant;
      ReservationMode@1001 : 'ReserveFromCurrentLine,CancelReservationCurrentLine';
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ReservationMode := DequeueVariable;
      Reservation.LAST;
      CASE ReservationMode OF
        ReservationMode::ReserveFromCurrentLine:
          Reservation."Reserve from Current Line".INVOKE;
        ReservationMode::CancelReservationCurrentLine:
          Reservation.CancelReservationCurrentLine.INVOKE;
      END;
      Reservation.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentHandler@170(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    VAR
      SortActivity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SortActivity);
      WhseSourceCreateDocument.SortingMethodForActivityLines.SETVALUE(SortActivity);
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseShipmentCreatePickHandler@166(VAR WhseShipmentCreatePick@1000 : TestRequestPage 7318);
    VAR
      SortActivity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SortActivity);
      WhseShipmentCreatePick.SortingMethodForActivityLines.SETVALUE(SortActivity);
      WhseShipmentCreatePick.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentPageHandler@135(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE SimpleMessageHandler@267(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
      1. Test to check the Nothing to Create message while creating Inventory Put-Away from Sales Order on Location with Require Pick.
      2. Test the creation of Inventory Picks from Sales Orders with different Shipping Advice.
      3. Test the functionality of Partial posting of Inventory Put-Away with Lot No. and Bin Code.
      4. Test to check the Nothing to Create message while creating Inventory Put-Away from Purchase Order created after Carry out Action Message Plan.
      5. Test the functionality of Partial posting of Inventory Pick with Lot No.
      6. Test the Bin Capacity Error while creating Put-Away from Put-Away Worksheet.
      7. Test the functionality of creating Put-Away from Put-Away Worksheet with Stock keeping unit.
      8. Test that the Put Away Lines gets sorted by Action Type on Put-Away created by Put-Away Worksheet.
      9. Test that the Pick Lines gets sorted by Action Type on Pick created by Get Source Document on Warehouse Shipment Header.
      10. Test that the Put Away Lines gets sorted by Action Type on Put-Away created by Internal Put-Away.
      11. Test that the Pick Lines gets sorted by Action Type on Pick created by Internal Pick.
      12. Test that the Movement Lines gets sorted by Action Type on Movement created by Movement Worksheet.
      13. Test the functionality of register Put-Away for Item with different Purchase Unit of Measure and Lot No.
      14. Test the Error Cannot handle more than the outstanding units while updating more Quantity to Receive in Warehouse Receipt.
      15. Test the functionality of register Put-Away with both Serial and Lot tracking.
      16. Test the Confirm message on Warehouse Receipt with Maximum Cubage on Receive Bin.
      17. Test the Confirm message on Bin Content with Maximum Quantity after setting Maximum Cubage Bin on Warehouse Receipt.
      18. Test the functionality of creating Put-Away from Purchase Order using multiple Bins with Maximum Cubage and Weight.
      19. Test the functionality of posting Inventory Put-Away from Released Production Order with different Unit of Measure and Lot No.
      20. Test the functionality of creating Put-Away from Purchase Order with multiple Locations and Variant Code.
      21. Test the functionality of Get Source Document on Warehouse Receipt with multiple Purchase Orders.
      22. Test the functionality of Get Source Document on Warehouse Receipt with multiple Transfer Orders on different Locations.
      23. Test the functionality of Get Source Document on Warehouse Receipt with multiple Sales Return Orders.
      24. Test to verify that the Expiration Date is same on Posted Inventory Pick Line as Purchase Order using Serial and Lot.
      25. Test to verify that the Expiration Date is same on Posted Inventory Pick Line as Inventory Put Away with Purchase Order using Serial and Lot.
      26. Update Cross-Dock on Warehouse Put-Away and Register. Verify Warehouse Entry.
      27. Update Location with Put-Away Template. Post Warehouse Receipt and Verify Bin is placed according to Put-Away Template.
      28. Post Partial Warehouse Receipt. Update Put-Away Template on Item and Post Warehouse Receipt. Verify Bin is placed according to Put-Away Template on Item.
      29. Post Partial Warehouse Receipt. Create SKU and Update Put-Away Template on Item Post Warehouse Receipt. Verify Bin is placed according to Put-Away Template on SKU.
      30. Test that the Put Away Lines gets sorted by Due Date on Put-Away created by Put Away Worksheet.
      31. Test that the Put Away Lines gets sorted by Bin Ranking on Put-Away created by Put Away Worksheet.
      32. Test that the Put Away Lines gets filtered by checking Break bulk filter on Create Put-Away page invoked from Put Away Worksheet.
      33. Test the functionality of register Put-Away from Purchase Order with multiple Lot No. assigned on Purchase line.
      34. Create Bin Content with Maximum Quantity and Verify Items are Placed According to Maximum Quantity.
      35. Create and Post Warehouse Receipt from Transfer Order with Lot.
      36. Test to verify Warehouse Activity Line after Released Production Order, Output Journal and Put Away from Warehouse Internal Put Away with Item Variant.
      37. Test to verify Registered Warehouse Activity Line after creating Put Away from Purchase Order with Item as Put Away Template Code.
      38. Test to verify Warehouse Activity Line with Item as Multiple Unit of Measure and Put Away created from Put Away worksheet after deleting Warehouse Activity.
      39. Test the functionality of register Put-Away from Internal Put-Away after Calculate and Post Consumption Journal for Component Item with Variant.
      40. Test the functionality of register Put-Away with partial Quantity from Put-Away Worksheet with multiple Lot No on Purchase Order.
      41. Test the functionality of register Put-Away with remaining Quantity from Put-Away Worksheet with multiple Lot No on Purchase Order.
      42. Test and verify post Warehouse Receipt from Purchase Order with multiple Item Variants.
      43. Test and verify Warehouse Shipment after register Pick with multiple Item Variants.
      44. Test and verify post Warehouse Shipment after register Pick with multiple Item Variants.
      45. Test and verify post Warehouse Shipment from Transfer Order using from Location with Require Shipment and to Location with Directed Put Away and Pick.
      46. Test and verify post Warehouse Receipt from Transfer Order using from Location with Require Shipment and to Location with Directed Put Away and Pick.
      47. Test and verify error on create Pick from Transfer Order before cancel Reservation on Sales Order.
      48. Test and verify post Warehouse Shipment from Transfer Order after cancel Reservation on Sales Order.
      49. Test and verify Calculate Inventory on Physical Inventory Journal using Dimension.
      50. Test and verify Quantity Base error on post Inventory Pick with Lot Item Tracking.
      51. Test and verify Available Quantity to Pick on Pick Worksheet before Register Put Away.
      52. Test and verify Available Quantity to Pick on Pick Worksheet after Register Put Away.
      53. Test and verify Available Quantity to Pick on Pick Worksheet before cancel Reservation on Sales Order.
      54. Test and verify Available Quantity To Pick on Pick Worksheet after cancel Reservation on Sales Order.
      55. Test and verify error on changing Item on Purchase Order after Create Inventory Put Away.
      56. Test and verify error on changing Item on Sales Order after Create Inventory Pick.
      57. Test and verify error on changing Item on Transfer Order after Create Inventory Pick.
      58. Test and verify Confirmation on Register negative quantity after register put away.
      59. Test and verify Expiration Date on Put Away after Post warehouse Receipt.
      60. Test and verify Expiration Date on Registered Put Away after Post warehouse Receipt.
      61. Test and verify Expiration Date on Pick from Warehouse Shipment.
      62. Test and verify Expiration Date on registered pick.
      63. Test and Verify error on post negative output on Production Journal after reservation on Sales Order.
      64. Test and Verify post negative output on Production Journal after cancel reservation on Sales Order.
      65. Test that the Movement Lines gets sorted by Bin Ranking on Movement created by Movement Worksheet.
      66. Test that the Put Away Lines gets sorted by Bin Ranking on Put-Away created by Put Away Worksheet with Break Bulk.
      67. Test and Verify post Purchase Order with both Serial and Lot tracking with Expiration Calculation.
      68. Test and Verify default "Shipment Bin Code" should be populated on the Warehouse Shipment when it is manually created.
      69. Test and Verify default "Receipt Bin Code" should be populated on the Warehouse Receipt when it is manually created.

      Covers Test Cases for WI - 294071
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      NothingToCreateForInventoryPuAwayWithRequirePick                   127549
      CreateInventoryPickWithDifferentShippingAdvice                     127550
      PartialPostInventoryPutAwayWithLotAndBin                           127611
      InventoryPutAwayErrorWithCarryOutActionMessagePlan                 135449
      PartialPostInventoryPickWithLotNo                                  135547

      Covers Test Cases for WI - 294075
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      BinCapacityErrorForCreatePutAwayFromPutAwayWorksheet               128764
      PutAwayFromPutAwayWorksheetWithSKU                                 128789

      Covers Test Cases for WI -  295008
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      SortingByActionTypeOnPutAwayFromPutAwayWorksheet                          128756
      SortingByActionTypeOnPickFromGetSourceDocumentOnWarehouseShipment         128756
      SortingByActionTypeOnPutAwayFromInternalPutAway                           128756
      SortingByActionTypeOnPickFromInternalPick                                 128756
      SortingByActionTypeOnMovementFromMovementWorksheet                        128756

      Covers Test Cases for WI -  295219
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      RegisterPutAwayWithPurchaseUnitOfMeasureAndLotNo                          128772
      QuantityToReceiveMoreThanOutstandingOnWarehouseReceiptError               128763
      RegisterPutAwayWithSerialAndLot                                           128841
      BinMaximumCubageConfirmWithWarehouseReceipt                               128847
      BinContentMaximumQuantityConfirmWithWarehouseReceipt                      128847

      Covers Test Cases for WI - 298663
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                         TFS ID
      --------------------------------------------------------------------------------------------------
      PutAwayFromPurchaseOrderUsingMultipleBinsWithMaximumCubageAndWeight                        135504
      PostInventoryPutAwayFromReleasedProductionOrderWithDifferentUnitOfMeasureAndLotNo          135557

      Covers Test Cases for WI - 295220
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                         TFS ID
      --------------------------------------------------------------------------------------------------
      PutAwayFromPurchaseOrderWithMultipleLocationsAndVariantCode                                128829
      GetSourceDocumentOnWarehouseReceiptWithMultiplePurchaseOrders                              128829
      GetSourceDocumentOnWarehouseReceiptWithMultipleTransferOrdersFromDifferentLocations        128829
      GetSourceDocumentOnWarehouseReceiptWithMultipleSalesReturnOrders                           128829

      Covers Test Cases for WI - 286473
      ---------------------------------------------------------------------------------------------------
      Test Function Name                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------
      PostInventoryPutAwayAndPickWithSerialLotAndExpirationDateOnPurchaseOrder              141430,141431
      PostInventoryPutAwayAndPickWithSerialLotAndExpirationDateModifiedOnInventoryPutAway   141515,141516

      Covers Test Cases for WI - 299464
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      RegisterPutAwayWithUpdatingBinAsCrossDock                                 128827

      Covers Test Cases for WI - 301185
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostWareHouseReceiptWithChangedPutAwayTemplate                            128784
      PostWarehouseReceiptWithDifferentPutAwayTemplateItem                      128784
      PostWarehouseReceiptWithDifferentPutAwayTemplateSKU                       128784

      Covers Test Cases for WI - 301702
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      SortingByDueDateOnPutAwayFromPutAwayWorksheet                             128849
      SortingByBinRankingOnPutAwayFromPutAwayWorksheet                          128849
      PutAwayFromPutAwayWorksheetWithBreakBulkFilterTrueOnCreatePutAwayPage     128849

      Covers Test Cases for WI - 301703
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      RegisterPutAwayFromPurchaseOrderWithMultipleLotNo                         128853

      Covers Test Cases for WI - 301706
      -----------------------------------------------------------------------------------------
      Test Function Name                                                               TFS ID
      -----------------------------------------------------------------------------------------
      PutAwayItemAccordingToBinMaximumQuantity                                         128785

      Covers Test Cases for WI - 299171
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                               TFS ID
      ------------------------------------------------------------------------------------------------
      WarehouseReceiptFromTransferOrderWithLot                                  127691,135482,135543

      Covers Test Cases for WI - 286372
      -------------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -------------------------------------------------------------------------------------------
      PutAwayFromWarehouseInternalPutAwayAfterOutputJournalAndProductionOrder            128835

      Covers Test Cases for WI - 286394
      -------------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -------------------------------------------------------------------------------------------
      PutAwayFromPurchaseOrderWithItemPutAwayTemplateCode                                128786

      Covers Test Cases for WI - 290427
      -------------------------------------------------------------------------------------------
      Test Function Name                                                                 TFS ID
      -------------------------------------------------------------------------------------------
      PutAwayFromPutAwayWorksheetAfterDeletingWarehouseActivity                          128788

      Covers Test Cases for WI - 301704
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      RegisterPutAwayFromInternalPutAwayAfterCalculateAndPostConsumptionJournalForComponentItemWithVariant                128834

      Covers Test Cases for WI - 303158
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      RegisterPutAwayWithPartialQuantityFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder                              302436
      RegisterPutAwayWithRemainingQuantityFromPutAwayWorksheetWithMultipleLotNoOnPurchaseOrder                            302436                                                                                   302436

      Covers Test Cases for WI - 299022
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      PostWarehouseReceiptFromPurchaseOrderWithMultipleItemVariant                                                        127951
      WarehouseShipmentAfterRegisterPickWithMultipleItemVariant                                                           127951
      PostWarehouseShipmentAfterRegisterPickWithMultipleItemVariant                                                       127951
      PostWarehouseShipmentFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick   127951
      PostWarehouseReceiptFromTransferOrderUsingFromLocationWithRequireShipmentAndToLocationWithDirectedPutAwayAndPick    127951
      ErrorOnCreatePickFromTransferOrderBeforeCancelReservationOnSalesOrder                                               127951
      PostWarehouseShipmentFromTransferOrderAfterCancelReservationOnSalesOrder                                            127951
      CalculateInventoryOnPhysicalInventoryJournalUsingDimension                                                          127951
      QuantityBaseErrorOnPostInventoryPickWithLotItemTracking                                                             127951
      AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAway                                                         127951
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAway                                                          127951
      AvailableQuantityToPickOnPickWorksheetBeforeCancelReservationOnSalesOrder                                           127951
      AvailableQuantityToPickOnPickWorksheetAfterCancelReservationOnSalesOrder                                            127951
      ErrorChangingItemOnPurchaseOrderAfterCreateInventoryPutAway                                                         127951
      ErrorChangingItemOnSalesOrderAfterCreateInventoryPick                                                               127951
      ErrorChangingItemOnTransferOrderAfterCreateInventoryPick                                                            127951

      Covers Test Cases for WI - 316371
      --------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------
      RegisterWhseJournalWithNegQtyAfterRegisterPutAway                                                                   284399
      ExpirationDateOnPutAwayAfterPostWarehouseReceipt                                                                    141429
      ExpirationDateOnRegisteredPutAway                                                                                   141429
      ExpirationDateOnPickAfterCreateWarehouseShipment                                                                    141429
      ExpirationDateOnRegisteredPick                                                                                      141429
      ErrorOnPostNegOutputOnprodJnlAfterReserveSalesOrd                                                                   143106
      PostNegOutputOnProdJnlAfterCancelReservOnSalesOrd                                                                   143106

      Covers Test Cases for Sicily Bug
      --------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------
      SortingByBinRankingOnMovementFromMovementWorksheet                                                                  6764
      SortingByBinRankingOnPutAwayFromPutAwayWorksheetWithBreakBulk                                                       6764

      Covers Test Cases for Sicily Bug
      --------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------
      PostPurchaseOrderWithSerialLotAndExpirationCalculation                                                               70606

      Covers Test Cases for merge bug - 94676
      --------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                  TFS ID
      --------------------------------------------------------------------------------------------------------------------------
      BinCodeOnWhseShipmentByGetSourceDocument                                                                            94676
      BinCodeOnWhseReceiptByGetSourceDocument                                                                             94676
    }
    END.
  }
}

