OBJECT Codeunit 137051 SCM Warehouse - III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1007 : Record 82;
      OutputItemJournalTemplate@1039 : Record 82;
      GlobalItemLedgerEntry@1018 : Record 32;
      ItemJournalBatch@1017 : Record 233;
      OutputItemJournalBatch@1040 : Record 233;
      LocationWhite@1020 : Record 14;
      LocationSilver@1014 : Record 14;
      LocationSilver2@1019 : Record 14;
      LocationSilver3@1056 : Record 14;
      LocationGreen@1015 : Record 14;
      LocationOrange@1041 : Record 14;
      LocationYellow@1043 : Record 14;
      LocationYellow2@1048 : Record 14;
      LocationRed@1044 : Record 14;
      LocationGreen2@1049 : Record 14;
      LocationOrange2@1058 : Record 14;
      LocationIntransit@1045 : Record 14;
      WarehouseJournalTemplate@1033 : Record 7309;
      WarehouseJournalBatch@1028 : Record 7310;
      Assert@1010 : Codeunit 130000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1008 : Codeunit 132201;
      LibraryItemTracking@1055 : Codeunit 130502;
      LibraryPurchase@1013 : Codeunit 130512;
      LibrarySales@1024 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryManufacturing@1032 : Codeunit 132202;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryRandom@1005 : Codeunit 130440;
      Counter@1001 : Integer;
      IsInitialized@1000 : Boolean;
      TrackingAction@1003 : 'SerialNo,LotNo,All,SelectEntries,AssignLotNo';
      PostJournalLines@1002 : TextConst 'ENU=Do you want to post the journal lines';
      LinesPosted@1011 : TextConst 'ENU=The journal lines were successfully posted';
      PickActivitiesCreated@1004 : TextConst 'ENU=Number of Invt. Pick activities created';
      HandlingError@1016 : TextConst 'ENU=Nothing to handle.';
      Quantity2@1021 : Decimal;
      WarehouseShipmentNo@1022 : Code[20];
      QuantityError@1026 : TextConst 'ENU=Quantity must be %1 in %2.';
      SourceNo@1027 : Code[20];
      SourceNoError@1031 : TextConst 'ENU=You cannot change Source No. because one or more lines exist.';
      SourceDocumentError@1030 : TextConst 'ENU=You cannot change Source Document because one or more lines exist.';
      GetSourceDocumentError@1029 : TextConst 'ENU=You cannot use this function if the lines already exist.';
      BinError@1034 : TextConst 'ENU=Bin Code must be %1 in %2.';
      ReleasedProdOrderCreated@1037 : TextConst 'ENU=Released Prod. Order';
      LocationCode@1042 : Code[10];
      PutAwayCreated@1046 : TextConst 'ENU=Number of Invt. Put-away activities created';
      NothingToCreate@1047 : TextConst 'ENU=There is nothing to create';
      ValidationError@1057 : TextConst 'ENU=Validation error for Field:';
      WorkCenterError@1054 : TextConst 'ENU=Location %1 must be set up with Bin Mandatory if the Work Center %2 uses it.';
      EditableError@1053 : TextConst 'ENU=Can Be Edited.';
      EnabledError@1052 : TextConst 'ENU=Field is Enabled.';
      WantToContinueMessage@1051 : TextConst 'ENU=Are you sure that you want to continue?';
      BinErrorOnMachineCenter@1050 : TextConst 'ENU=%1 must be equal to %2';
      UseAsInTransitEditableErr@1038 : TextConst 'ENU=Field ''Use As In-Transit'' in Location Card Page should be editable when creating new Location';
      FieldMustNotBeEmptyErr@1059 : TextConst 'ENU=Field %1 in table %2 must not be empty.';
      WrongNoOfWhseActivityLinesErr@1023 : TextConst '@@@=%1 - Quantity, %2 - Item Lot No. (E.g.: 2 warehouse activity lines must be created for lot L0001);ENU=%1 warehouse activity lines must be created for lot %2';
      QtyInPickErr@1025 : TextConst 'ENU=Incorrect quantity in Pick.';
      ItemTrackingErr@1061 : TextConst '@@@=Item tracking numbers should not be higher than the item quantity.;ENU=Item tracking numbers defined for item %1 in the %2 are higher than the item quantity.';
      TwoFieldsOfTableMustBeEqualErr@1035 : TextConst '@@@=%1 - Field 1, %2 - field 2, %3 - table.;ENU=Field %1 must be equal to field %2 in table %3.';
      NoWarehouseActivityLineErr@1036 : TextConst 'ENU=There is no Warehouse Activity Line within the filter.';
      UnexpectedSourceNoErr@1060 : TextConst 'ENU=Unexpected value of Source No. field.';
      LocationRequireReceiveErr@1062 : TextConst 'ENU=Source Document must be equal to ''Prod. Output''  in Warehouse Activity Header:';

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickActivitiesMessageHandler)]
    PROCEDURE InvtPickFromPurchReturnOrderWithStrictExpiration@60();
    BEGIN
      Initialize;
      InventoryPickFromPurchaseReturnOrder(TRUE);  // Strict Expiration Posting True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickActivitiesMessageHandler)]
    PROCEDURE InvtPickFromPurchReturnOrderWithoutStrictExpiration@32();
    BEGIN
      Initialize;
      InventoryPickFromPurchaseReturnOrder(FALSE);  // Strict Expiration Posting False.
    END;

    LOCAL PROCEDURE InventoryPickFromPurchaseReturnOrder@196(StrictExpirationPosting@1007 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      PurchaseHeader@1003 : Record 38;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item, assign Serial No. on Item Journal Line and post Item Journal. Create a Purchase Return Order;
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateTrackedItem(Item,FALSE,TRUE,StrictExpirationPosting,FALSE);
      Quantity := LibraryRandom.RandInt(5) + 2;  // Integer Value required.
      CreateItemJournaLine(Item."No.",LocationSilver.Code,Bin.Code,Quantity);
      AssignSerialNoAndPostItemJournal(Item."No.",LocationSilver.Code);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",Quantity,LocationSilver.Code);

      // Exercise: Create Inventory Pick. If Strict Expiration - True then post Inventory Pick as well.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Return Order",PurchaseHeader."No.",FALSE,TRUE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      IF StrictExpirationPosting THEN
        PostInventoryPick(PurchaseHeader."No.");

      // Verify: Verify the values on Inventory Pick with or without posting.
      IF StrictExpirationPosting THEN
        VerifyPostedInventorytPickLine(PurchaseHeader."No.",LocationSilver.Code,Item."No.",WORKDATE,Bin.Code)
      ELSE
        VerifyInventoryPutAwayPick(WarehouseActivityLine,PurchaseHeader."No.",LocationSilver.Code,Item."No.",Bin.Code,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickActivitiesMessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithStrictExpiration@10();
    BEGIN
      Initialize;
      InventoryPickFromSalesOrder(TRUE);  // Strict Expiration Posting True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickActivitiesMessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithoutStrictExpiration@27();
    BEGIN
      Initialize;
      InventoryPickFromSalesOrder(FALSE);  // Strict Expiration Posting False.
    END;

    LOCAL PROCEDURE InventoryPickFromSalesOrder@236(StrictExpirationPosting@1008 : Boolean);
    VAR
      Bin@1007 : Record 7354;
      Item@1006 : Record 27;
      SalesHeader@1003 : Record 36;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item, assign Serial No. on Item Journal Line and post Item Journal. Create a Sales Order, create Inventory Pick.
      LibraryWarehouse.FindBin(Bin,LocationSilver2.Code,'',1);  // Find Bin of Index 1.
      CreateTrackedItem(Item,FALSE,TRUE,StrictExpirationPosting,FALSE);

      Quantity := LibraryRandom.RandInt(5) + 2 ;  // Integer Value required.
      CreateItemJournaLine(Item."No.",LocationSilver2.Code,Bin.Code,Quantity);
      AssignSerialNoAndPostItemJournal(Item."No.",LocationSilver2.Code);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationSilver2.Code);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);

      // Exercise: Create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationSilver2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      IF StrictExpirationPosting THEN
        PostInventoryPick(SalesHeader."No.");

      // Verify: Verify the values on Inventory Pick with or without posting.
      IF StrictExpirationPosting THEN
        VerifyPostedInventorytPickLine(SalesHeader."No.",LocationSilver2.Code,Item."No.",WORKDATE,Bin.Code)
      ELSE
        VerifyInventoryPutAwayPick(WarehouseActivityLine,SalesHeader."No.",LocationSilver2.Code,Item."No.",Bin.Code,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,ShipmentMessageHandler)]
    PROCEDURE PickErrorWhseShipmentWithoutStrictExpiration@107();
    BEGIN
      Initialize;
      PickErrorOnWarehouseShipment(FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,ShipmentMessageHandler)]
    PROCEDURE PickErrorWhseShipmentWithStrictExpiration@109();
    BEGIN
      Initialize;
      PickErrorOnWarehouseShipment(TRUE);
    END;

    LOCAL PROCEDURE PickErrorOnWarehouseShipment@1(StrictExpirationPosting@1011 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      Item@1002 : Record 27;
      WarehouseShipmentHeader@1005 : Record 7320;
      Customer@1003 : Record 18;
      SalesHeader@1000 : Record 36;
      Quantity@1010 : Decimal;
      WarehouseShipmentNo@1009 : Code[20];
    BEGIN
      // Setup: Create Item with Item Tracking Code, assign Serial No. on Item Journal Line and post Item Journal. Create a Sales Order, create Warehouse shipment.
      LibrarySales.CreateCustomer(Customer);
      LibraryWarehouse.FindBin(Bin,LocationGreen.Code,'',1);  // Find Bin of Index 1.
      CreateTrackedItem(Item,FALSE,TRUE,StrictExpirationPosting,FALSE);

      Quantity := LibraryRandom.RandInt(5) + 2 ;  // Integer Value required.
      CreateItemJournaLine(Item."No.",LocationGreen.Code,Bin.Code,Quantity);
      AssignSerialNoAndPostItemJournal(Item."No.",LocationGreen.Code);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationGreen.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Exercise : Create Pick from Warehouse Shipment Header.
      ASSERTERROR CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);
    END;

    [Test]
    PROCEDURE PickWithoutDelete@218();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1009 : Record 36;
      PurchaseHeader@1001 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Setup: Create Item and update Inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);

      // Exercise: Create Pick.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,Quantity2,SalesHeader."No.",LocationWhite.Code);
    END;

    [Test]
    PROCEDURE PickWithChangedDocumentAfterDelete@219();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1009 : Record 36;
      SalesHeader2@1008 : Record 36;
      PurchaseHeader@1006 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityLine2@1000 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Create Item, update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      // Update Quantity on Pick, register and delete it. Create and release Sales Order, create Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      UpdateActivityLineAndDeletePartially(WarehouseActivityLine,SalesHeader."No.");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader2,WarehouseShipmentHeader,Item."No.",Quantity2 / 2,LocationWhite.Code);  // Using partial Quantity as on Whse Activity Line.

      // Exercise: Create Pick.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine2,Quantity2 / 2,SalesHeader2."No.",LocationWhite.Code);  // Verify the Quantity half of the Whse Activity Line.
    END;

    [Test]
    PROCEDURE PickWithHandlingError@220();
    VAR
      Item@1011 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1009 : Record 36;
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      // Setup: Update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);

      // Exercise: Create Pick.
      ASSERTERROR CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);
    END;

    [Test]
    PROCEDURE PickWithHandlingErrorAfterDeleteShipment@35();
    VAR
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesHeader2@1003 : Record 36;
      PurchaseHeader@1002 : Record 38;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Setup: Update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      // Delete Warehouse Shipment Lines and again create the Sales Order and create and release Wraehouse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);
      DeleteWarehouseShipmentLines(WarehouseShipmentHeader);
      CreateAndPostWarehouseShipmentFromSO(SalesHeader2,WarehouseShipmentHeader,Item."No.",Quantity2 / 2,LocationWhite.Code);  // Using partial Quantity as on Whse Activity Line.

      // Exercise: Create Pick.
      ASSERTERROR CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);
    END;

    [Test]
    PROCEDURE PickRecreatedAfterDeletion@96();
    VAR
      Item@1010 : Record 27;
      SalesHeader@1008 : Record 36;
      PurchaseHeader@1001 : Record 38;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Setup: Update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Exercise: Update Whse Activity Line and create Pick.
      CLEAR(WarehouseActivityLine);
      UpdateAndCreatePick(WarehouseActivityLine,SalesHeader."No.");

      // Verify: Verify the values on Warehouse Activity.
      VerifyWhseActivityLine(WarehouseActivityLine,(Quantity2 / 2) + (Quantity2 / 4),SalesHeader."No.",LocationWhite.Code);  // Pick created for Half Quantity updated Added to the Updated Quantity on Whse Activity Line.
    END;

    [Test]
    PROCEDURE PickWithReducedQuantityFromSalesOrder@44();
    VAR
      Item@1008 : Record 27;
      SalesHeader@1007 : Record 36;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",2 * Quantity2,LocationWhite.Code);  // Value required for the test.

      // Exercise: Create Pick.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,Quantity2,SalesHeader."No.",LocationWhite.Code);  // Pick created for half the Quantity as on Sales Order.
    END;

    [Test]
    PROCEDURE PickWithDeletionAndRecreateShipment@45();
    VAR
      Item@1008 : Record 27;
      SalesHeader@1007 : Record 36;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Update Item inventory, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",2 * Quantity2,LocationWhite.Code);  // Value required for the test.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Update Quantity on Pick, register and delete it. Post Whse Shipment and delete it. Create and release Sales Order, create Whse Shipment.
      UpdateActivityLineAndDeletePartially(WarehouseActivityLine,SalesHeader."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
      DeleteWarehouseShipmentLines(WarehouseShipmentHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // Exercise: Create Pick.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Whse Shipment created for total Quantity on Sales Order reduced by Quantity To Handle on Whse Activity Line.
      VerifyWarehouseShipmentLine(WarehouseShipmentNo,Item."No.",2 * Quantity2 - (Quantity2 / 2));
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE ChangeSourceNoOnInventoryMovement@24();
    VAR
      ProductionOrder@1004 : Record 5405;
      WarehouseActivityHeader@1005 : Record 5766;
    BEGIN
      // Setup: Create Item Movement Setup.
      Initialize;
      CreateItemMovementSetup(ProductionOrder,WarehouseActivityHeader);

      // Exercise: Change Source No On Inventory Movement.
      FindWarehouseActivityHeader(WarehouseActivityHeader,ProductionOrder."No.");
      ASSERTERROR WarehouseActivityHeader.VALIDATE("Source No.",LibraryUtility.GenerateGUID);

      // Verify: Verify the error message on changing Source No.
      Assert.ExpectedError(SourceNoError);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE ChangeSourceDocOnInventoryMovement@20();
    VAR
      ProductionOrder@1004 : Record 5405;
      WarehouseActivityHeader@1005 : Record 5766;
    BEGIN
      // Setup: Create Item Movement Setup.
      Initialize;
      CreateItemMovementSetup(ProductionOrder,WarehouseActivityHeader);

      // Exercise: Change Source Document for Inventory movement.
      FindWarehouseActivityHeader(WarehouseActivityHeader,ProductionOrder."No.");
      ASSERTERROR WarehouseActivityHeader.VALIDATE("Source Document",WarehouseActivityHeader."Source Document"::"Assembly Order");

      // Verify: Verify the error Message on changing Source Doc.
      Assert.ExpectedError(SourceDocumentError);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE GetSourceDocTwiceOnInventoryMovement@19();
    VAR
      ProductionOrder@1004 : Record 5405;
      WarehouseActivityHeader@1005 : Record 5766;
      InventoryMovement@1001 : TestPage 7382;
    BEGIN
      // Setup: Create Item Movement Setup.
      Initialize;
      CreateItemMovementSetup(ProductionOrder,WarehouseActivityHeader);

      // Exercise: Get Source Document for already created Inventory movement.
      OpenInventoryMovement(InventoryMovement,WarehouseActivityHeader."No.",ProductionOrder."No.");
      ASSERTERROR InventoryMovement.GetSourceDocument.INVOKE;

      // Verify: Verify Error Message for Get Source Document.
      Assert.ExpectedError(GetSourceDocumentError);
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickFromWhseShipmentUsingProdOrderWithoutBin@231();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2) + 10;  // Small value required.
      PickFromWhseShipmentUsingProdOrder(FALSE,Quantity);  // No updation of Bin on Whse Activity Line.
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickFromWhseShipmentUsingProdOrderWithBin@232();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2) + 10;  // Small value required.
      PickFromWhseShipmentUsingProdOrder(TRUE,Quantity);  // Updating Bin on Whse Activity Line.
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickTwiceQuantityFromWhseShipmentUsingProdOrderWithoutBin@63();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2) + 100;  // Large value required.
      PickFromWhseShipmentUsingProdOrder(FALSE,Quantity);  // No updation of Bin on Whse Activity Line.
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickTwiceQuantityFromWhseShipmentUsingProdOrderWithBin@85();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2) + 100;  // Large value required.
      PickFromWhseShipmentUsingProdOrder(TRUE,Quantity);  // Updating Bin on Whse Activity Line.
    END;

    LOCAL PROCEDURE PickFromWhseShipmentUsingProdOrder@33(UpdateBin@1009 : Boolean;Quantity@1001 : Decimal);
    VAR
      RoutingHeader@1012 : Record 99000763;
      Item@1013 : Record 27;
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      ProdOrderLine@1006 : Record 5406;
      WarehouseActivityLine@1008 : Record 5767;
      OrderType@1003 : 'ItemOrder,ProjectOrder';
    BEGIN
      // Update Location Setup, create Manufacturing Setup. Create Sales Order and post Whse Shipment.
      // Create production Order from sales Order, update Bin on Production Order Line, explode routing and Post Output Journal.
      UpdateLocationSetup(TRUE);  // Always Create Pick Line as TRUE.
      CreateManufacturingSetup(RoutingHeader,Item);
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity,LocationWhite.Code);  // Value required for the test.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProdOrderLine.Status::Released,OrderType::ItemOrder);
      UpdateProductionOrderLine(ProdOrderLine,Item."No.");
      ExplodeRoutingAndPostOutputJournal(ProdOrderLine,Quantity);

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line. Verify the Bin Code value as blank on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,Quantity,SalesHeader."No.",LocationWhite.Code);  // Pick created for the Quantity as on Sales Order.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationWhite.Code,SalesHeader."No.",'');

      IF UpdateBin THEN BEGIN
        UpdateBinOnActivityLine(WarehouseActivityLine,'',ProdOrderLine."Bin Code");

        // Exercise: Register Whse Activity.
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

        // Verify: Verify the values on Registered Whse Activity Line.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Quantity);
      END;

      // Tear Down: Restore the original value for Location.
      UpdateLocationSetup(FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickWithReservationUsingProdOrder@17();
    VAR
      RoutingHeader@1012 : Record 99000763;
      Item@1013 : Record 27;
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      ProdOrderLine@1006 : Record 5406;
      WarehouseActivityLine@1008 : Record 5767;
      OrderType@1002 : 'ItemOrder,ProjectOrder';
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Update Location Setup, create Manufacturing Setup. Create Sales Order and post Whse Shipment.
      // Create production Order from sales Order, update Bin on Production Order Line, explode routing and Post Output Journal.
      Initialize;
      UpdateLocationSetup(TRUE);  // Always Create Pick Line as TRUE.
      CreateManufacturingSetup(RoutingHeader,Item);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWhseJournal(LocationWhite,Item,2 * Quantity);  // Value required for the test.
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationWhite.Code);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProdOrderLine.Status::Released,OrderType::ItemOrder);
      UpdateProductionOrderLine(ProdOrderLine,Item."No.");
      ExplodeRoutingAndPostOutputJournal(ProdOrderLine,Quantity);

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,2 * Quantity,SalesHeader."No.",LocationWhite.Code);  // Pick created for twice Quantity as on sales Order.

      // Tear Down: Restore the original value for Location.
      UpdateLocationSetup(FALSE);
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickHandlingErrorWithProdOrder@190();
    BEGIN
      // Setup.
      Initialize;
      PickHandlingWithProductionOrder(FALSE,TRUE);  // AlwaysCreatePickLine-FALSE, OutputJournal-TRUE.
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickUsingProdOrderWithReducedOutputQuantity@285();
    BEGIN
      // Setup.
      Initialize;
      PickHandlingWithProductionOrder(TRUE,TRUE);  // AlwaysCreatePickLine-TRUE, OutputJournal-TRUE.
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE PickUsingProdOrderWithoutOutputJournal@138();
    BEGIN
      // Setup.
      Initialize;
      PickHandlingWithProductionOrder(TRUE,FALSE);  // AlwaysCreatePickLine-TRUE, OutputJournal-FALSE.
    END;

    LOCAL PROCEDURE PickHandlingWithProductionOrder@58(AlwaysCreatePickLine@1003 : Boolean;OutputJournal@1009 : Boolean);
    VAR
      RoutingHeader@1008 : Record 99000763;
      Item@1007 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1005 : Record 7320;
      ProdOrderLine@1004 : Record 5406;
      WarehouseActivityLine@1001 : Record 5767;
      OrderType@1002 : 'ItemOrder,ProjectOrder';
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Update Location Setup, create Manufacturing Setup. Create Sales Order and post Whse Shipment.
      // Create production Order from sales Order, update Bin on Production Order Line.
      UpdateLocationSetup(AlwaysCreatePickLine);
      CreateManufacturingSetup(RoutingHeader,Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity,LocationWhite.Code);  // Value required for the test.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProdOrderLine.Status::Released,OrderType::ItemOrder);
      UpdateProductionOrderLine(ProdOrderLine,Item."No.");
      IF OutputJournal THEN
        ExplodeRoutingAndPostOutputJournal(ProdOrderLine,Quantity / 2);  // Reduce the Output Quantity on Output Journal.

      // Exercise: Create Pick.
      IF AlwaysCreatePickLine THEN
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader)
      ELSE
        ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line. Verify the Bin code On Whse Activity Line as blank.
      IF  AlwaysCreatePickLine THEN BEGIN
        VerifyWhseActivityLine(WarehouseActivityLine,Quantity,SalesHeader."No.",LocationWhite.Code);
        VerifyBinCode(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationWhite.Code,SalesHeader."No.",
          '');
      END ELSE
        Assert.ExpectedError(HandlingError);  // Verify the Nothing To Handle Error.

      // Tear Down: Restore the original value for Location.
      UpdateLocationSetup(FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWhseShipmentWithReservation@98();
    BEGIN
      // Setup.
      Initialize;
      PickFromMultipleSources(FALSE);  // Pick From Pick WorkSheet FALSE.
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler,ReservationPageHandler)]
    PROCEDURE PickFromPickWorksheetWithReservation@97();
    BEGIN
      // Setup.
      Initialize;
      PickFromMultipleSources(TRUE);  // Pick From Pick WorkSheet TRUE.
    END;

    LOCAL PROCEDURE PickFromMultipleSources@139(PickFromWorkSheet@1009 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1018 : Record 36;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine2@1007 : Record 5767;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item, Update Inventory, create Sales Order with reservation, create Warehouse Shipment.
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWhseJournal(LocationWhite,Item,Quantity);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationWhite.Code);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,Quantity,SalesHeader."No.",LocationWhite.Code);  // Verify the Quantity on the Whse Activity Line.

      // Exercise: Delete Whse Activity Line, create Pick from Pick Worksheet for partial Quantity.
      IF PickFromWorkSheet THEN BEGIN
        DeleteWarehouseActivity(WarehouseActivityLine);
        LocationCode := LocationWhite.Code;  // Assign value to global variable.
        CreatePickFromPickWorksheet(LocationWhite.Code,Quantity / 2);  // Partial Quantity.

        // Verify: Verify the Pick created from Pick Worksheet.
        VerifyWhseActivityLine(WarehouseActivityLine2,Quantity / 2,SalesHeader."No.",LocationWhite.Code);  // Verify the partial Quantity on the Whse Activity Line.
      END;
    END;

    [Test]
    PROCEDURE PutAwayRegisterWithUpdatedBinOnSource@69();
    BEGIN
      // Setup.
      Initialize;
      PickUsingMultipleBins(TRUE,FALSE,FALSE);  // Updating Bin On Put away.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickRegisterWithUpdatedBinOnSource@66();
    BEGIN
      // Setup.
      Initialize;
      PickUsingMultipleBins(FALSE,TRUE,FALSE);  // UpdateBinAndPostWhseShipment set to TRUE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE MultiplePickCreationWithUpdatedBinOnSource@279();
    BEGIN
      // Setup.
      Initialize;
      PickUsingMultipleBins(FALSE,TRUE,TRUE);  // MultiplePick set to TRUE.
    END;

    LOCAL PROCEDURE PickUsingMultipleBins@164(UpdateBinOnActivityLine@1013 : Boolean;UpdateBinAndPostWhseShipment@1016 : Boolean;MultiplePicks@1017 : Boolean);
    VAR
      Item@1000 : Record 27;
      Bin@1001 : Record 7354;
      Bin2@1015 : Record 7354;
      Bin3@1012 : Record 7354;
      SalesHeader@1011 : Record 36;
      SalesHeader2@1004 : Record 36;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseActivityLine2@1010 : Record 5767;
      WarehouseShipmentHeader@1006 : Record 7320;
      Quantity@1014 : Decimal;
    BEGIN
      // Setup: Find Bin, create Item, update Item Inventory, create purchase order, create Warehouse Receipt, update Bin Code on Warehouse receipt.
      // Post Warehouse Receipt, update Quantity To Handle on Activity Line, create Sales Order and release it Update Bin on Whse Shipment Line.
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);  // Find bin of Index 1.
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2) + 100;
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);  // Value required.
      LibraryWarehouse.FindBin(Bin2,LocationOrange.Code,'',2);  // Find bin of Index 2.
      CreateAndPostWhseReceiptFromPOWithBin(PurchaseHeader,Item."No.",Bin2.Code);
      LibraryWarehouse.FindBin(Bin3,LocationOrange.Code,'',3);  // Find bin of Index 3.

      IF UpdateBinOnActivityLine THEN BEGIN
        // Exercise: Update Quantity To Handle and Bin on Whse. Activity Line.
        UpdateQuantityToHandleAndBinOnActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,PurchaseHeader."No.",Quantity / 2,
          WarehouseActivityLine."Activity Type"::"Put-away",Bin3.Code);
        UpdateQuantityToHandleAndBinOnActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Quantity / 2,
          WarehouseActivityLine."Activity Type"::"Put-away",Bin3.Code);

        // Verify: Verify the Updated Bin Code on Whse. Activity Line. Verify the registered Quantity On Whse. Activity Line.
        WarehouseActivityLine.TESTFIELD("Bin Code",Bin3.Code);
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Quantity / 2);  // Verify the Updated Quantity on Registered Whse Activity Line.
      END;

      IF UpdateBinAndPostWhseShipment THEN BEGIN
        CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationOrange.Code);
        CreateAndPostWarehouseShipmentFromSO(SalesHeader2,WarehouseShipmentHeader,Item."No.",Quantity,LocationOrange.Code);  // Value required for the test.
        CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
        LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
        UpdateBinOnWhseShipmentLine(SalesHeader."No.",Bin3.Code);

        // Exercise: Create Pick.
        LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::Pick,LocationOrange.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type"::Take);
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine2."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Verify the Quantity on registered Pick.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine2,Quantity);
      END;

      IF MultiplePicks THEN BEGIN
        // Exercise: Create Pick.
        ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

        // Verify: Verify that Pick is not created.
        Assert.ExpectedError(HandlingError);
      END;
    END;

    [Test]
    [HandlerFunctions(ShipmentWithProductionOrderMessageHandler)]
    PROCEDURE MultiplePickErrorFromWhseShipmentUsingProdOrder@64();
    VAR
      Item@1013 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      ProdOrderLine@1006 : Record 5406;
      OrderType@1003 : 'ItemOrder,ProjectOrder';
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Update Location Setup, create Manufacturing Setup. Create Sales Order and post Whse Shipment.
      // Create production Order from sales Order, update Bin on Production Order Line, explode routing and Post Output Journal.
      Initialize;
      UpdateLocationSetup(TRUE);  // Always Create Pick Line as TRUE.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateManufacturingSetup(RoutingHeader,Item);
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity,LocationWhite.Code);  // Value required for the test.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProdOrderLine.Status::Released,OrderType::ItemOrder);
      UpdateProductionOrderLine(ProdOrderLine,Item."No.");
      ExplodeRoutingAndPostOutputJournal(ProdOrderLine,Quantity);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Exercise: Create Pick.
      ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);

      // Tear Down: Restore the original value for Location.
      UpdateLocationSetup(FALSE);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE DeletePickPartiallyAndRecreateFromWhseWorksheet@75();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1009 : Record 36;
      SalesHeader2@1008 : Record 36;
      PurchaseHeader@1006 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityLine2@1000 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Create Item, update Item inventory, create and release Purchase Order, create and post Whse Receipt, create Put Away, create and release Sales Order, create and release Whse Shipment.
      // create Pick and update Quantity on Pick, register and delete it. Create and release Sales Order, create Whse Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,'');  // Creating Item without Item Tracking Code for the test.
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      UpdateActivityLineAndDeletePartially(WarehouseActivityLine,SalesHeader."No.");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader2,WarehouseShipmentHeader,Item."No.",Quantity2 / 2,LocationWhite.Code);  // Using partial Quantity as on Whse Activity Line.
      LocationCode := LocationWhite.Code;  // Assign value to global variable.

      // Exercise: Create Pick from Pick Worksheet.
      CreatePickFromPickWorksheet(LocationWhite.Code,Quantity2 / 2);  // Partial Quantity.

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine2,Quantity2 / 2,SalesHeader2."No.",LocationWhite.Code);  // Verify the updated partial Quantity on the Whse Activity Line.
    END;

    [Test]
    [HandlerFunctions(ShipmentMessageHandler,ItemTrackingPageHandler,ConfirmHandler,SelectEntriesHandler)]
    PROCEDURE PickFromWhseShipmentWithLotNo@83();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithLotNo(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ShipmentMessageHandler,ItemTrackingPageHandler,ConfirmHandler,PickSelectionPageHandler,SelectEntriesHandler)]
    PROCEDURE DeletePickAndRecreateFromPickWorksheetWithLotNo@88();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithLotNo(TRUE,FALSE);  // Delete and recreate Pick using Pick Worksheet.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler,PickSelectionPageHandler,ShipmentMessageHandler,SelectEntriesHandler)]
    PROCEDURE MultiplePicksErrorWithLotNo@89();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithLotNo(TRUE,TRUE);  // Delete and recreate using Pick Worksheet and recreate from Whse Shipment.
    END;

    LOCAL PROCEDURE PickUsingPickWorksheetWithLotNo@74(DeleteAndRecreate@1009 : Boolean;MultiplePicks@1011 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseActivityLine2@1008 : Record 5767;
      SalesOrder@1003 : TestPage 42;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, create Item Journal Line and assign Lot No and post it. Create and release sales Order.
      // Assign Lot No to Sales Order. Create and release Whse Shipment.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      CreateItemJournaLine(Item."No.",LocationYellow.Code,'',Quantity);
      AssignLotNoAndPostItemJournal(FALSE);

      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationYellow.Code);
      AssignTrackingForSalesOrder(SalesOrder,SalesHeader."No.");
      LocationCode := LocationYellow.Code;  // Assign value to global variable.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";  // Assign Global variable for Page Handler.

      // Exercise: Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Lines.
      VerifyMultipleWhseActivityLines(WarehouseActivityLine,Quantity,SalesHeader."No.",LocationYellow.Code);

      IF DeleteAndRecreate THEN BEGIN
        // Exercise: Delete the Whse Activity Line. Create Pick using Pick Worrksheet.
        DeleteWarehouseActivity(WarehouseActivityLine);
        CreatePickFromPickWorksheet(LocationYellow.Code,Quantity / 2);  // Partial Quantity.

        // Verify: Verify the values on Whse Activity Lines.
        VerifyMultipleWhseActivityLines(WarehouseActivityLine2,Quantity / 2,SalesHeader."No.",LocationYellow.Code);
      END;
      IF MultiplePicks THEN BEGIN
        // Exercise: Create Pick from Whse Shipment.
        ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

        // Verify: Verify that Pick is not created.
        Assert.ExpectedError(HandlingError);
      END;
    END;

    [Test]
    [HandlerFunctions(ShipmentMessageHandler,ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,SelectEntriesHandler)]
    PROCEDURE PickFromWhseShipmentWithSerialNo@91();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithSerialNo(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ShipmentMessageHandler,ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickSelectionPageHandler,SelectEntriesHandler)]
    PROCEDURE DeletePickAndRecreateFromPickWorksheetWithSerialNo@93();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithSerialNo(TRUE,FALSE);  // Delete and recreate Pick using Pick Worksheet.
    END;

    [Test]
    [HandlerFunctions(ShipmentMessageHandler,ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandler,PickSelectionPageHandler,SelectEntriesHandler)]
    PROCEDURE MultiplePicksErrorWithSerialNo@99();
    BEGIN
      // Setup.
      Initialize;
      PickUsingPickWorksheetWithSerialNo(TRUE,TRUE);  // Delete and recreate Pick using Pick Worksheet and recreate from Whse Shipment.
    END;

    LOCAL PROCEDURE PickUsingPickWorksheetWithSerialNo@70(DeleteAndRecreate@1009 : Boolean;MultiplePicks@1011 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseActivityLine2@1008 : Record 5767;
      SalesOrder@1003 : TestPage 42;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Item Tracking Code, create Item Journal Line and assign Serial No and post it. Create and release Sales Order.
      // Assign Serial No to Sales Order. Create and release Whse Shipment.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateTrackedItem(Item,FALSE,TRUE,FALSE,FALSE);
      CreateItemJournaLine(Item."No.",LocationYellow.Code,'',Quantity);
      AssignSerialNoAndPostItemJournal(Item."No.",LocationYellow.Code);

      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationYellow.Code);
      AssignTrackingForSalesOrder(SalesOrder,SalesHeader."No.");
      LocationCode := LocationYellow.Code;  // Assign value to global variable.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";  // Assign Global variable for Page Handler.

      // Exercise: Create Pick from Whse Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Lines. Verify the Serial Tracked Quantities.
      VerifyMultipleWhseActivityLines(WarehouseActivityLine,1,SalesHeader."No.",LocationYellow.Code);

      IF DeleteAndRecreate THEN BEGIN
        // Exercise: Delete Whse Activity Lines and recreate the Pick using Pick Worksheet.
        DeleteWarehouseActivity(WarehouseActivityLine);
        CreatePickFromPickWorksheet(LocationYellow.Code,Quantity / 2);  // Partial Quantity.

        // Verify: Verify the values on Whse Activity Lines. Verify the Serial Tracked Quantities.
        VerifyMultipleWhseActivityLines(WarehouseActivityLine2,1,SalesHeader."No.",LocationYellow.Code);
      END;
      IF MultiplePicks THEN BEGIN
        // Exercise: Create Pick from Whse Shipment.
        ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

        // Verify: Verify that Pick is not created.
        Assert.ExpectedError(HandlingError);
      END;
    END;

    [Test]
    [HandlerFunctions(PutAwayMessageHandler)]
    PROCEDURE InventoryPutAwayUsingWhseBatchJob@208();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPutAwayPickUsingWhseBatchJob(TRUE,FALSE,FALSE,FALSE);  // Inventory Put-Away TRUE.
    END;

    [Test]
    [HandlerFunctions(PutAwayMessageHandler)]
    PROCEDURE MultipleInventoryPutAwayUsingWhseBatchJob@209();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPutAwayPickUsingWhseBatchJob(TRUE,TRUE,FALSE,FALSE);  // Multiple Inventory Put-Away TRUE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PutAwayWithPickActivitiesMessageHandler)]
    PROCEDURE InventoryPickUsingWhseBatchJob@210();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPutAwayPickUsingWhseBatchJob(TRUE,FALSE,TRUE,FALSE);  // Inventory Put-Away and Pick with reservation TRUE.
    END;

    [Test]
    [HandlerFunctions(PutAwayWithPickActivitiesMessageHandler)]
    PROCEDURE InventoryPickUsingWhseBatchJobWithTransferOrder@211();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPutAwayPickUsingWhseBatchJob(TRUE,FALSE,FALSE,TRUE);  // Inventory Put-Away and Pick with Transfer Order TRUE.
    END;

    LOCAL PROCEDURE CreateInventoryPutAwayPickUsingWhseBatchJob@77(InventoryPutAway@1008 : Boolean;MultipleInventoryPutAway@1009 : Boolean;InventoryPickWithReservation@1015 : Boolean;InventoryPickWithTransferOrder@1016 : Boolean);
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1012 : Record 36;
      SalesHeader2@1013 : Record 36;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseActivityLine2@1007 : Record 5767;
      WarehouseActivityLine3@1014 : Record 5767;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item, update Item Inventory at the Location, create and release Purchase Order.
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2) + 100;  // Large value required.
      UpdateItemInventory(Item."No.",LocationYellow2.Code,'',Quantity);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationYellow2.Code);

      IF InventoryPutAway THEN BEGIN
        // Exercise: Create Inventory Put-Away.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);

        // Verify: Verify the values on Whse Activity Line.
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",LocationYellow2.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type");
        VerifyInventoryPutAwayPick(WarehouseActivityLine,PurchaseHeader."No.",LocationYellow2.Code,Item."No.",'',Quantity);
      END;

      IF MultipleInventoryPutAway THEN
        // Exercise: Create Inventory Put-Away.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);

      // Verify: Verify that Inventory Put-Away is not created in MessageHandler.

      IF InventoryPickWithReservation THEN BEGIN
        CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationYellow2.Code);
        // Exercise: Create Inventory Pick.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

        // Verify: Verify the values on Whse Activity Line.
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::"Invt. Pick",LocationYellow2.Code,SalesHeader."No.",
          WarehouseActivityLine2."Action Type");
        VerifyInventoryPutAwayPick(WarehouseActivityLine2,SalesHeader."No.",LocationYellow2.Code,Item."No.",'',Quantity);
      END;

      IF InventoryPickWithTransferOrder THEN BEGIN
        // Create Transfer Order, Sales Order.
        UpdateItemInventory(Item."No.",LocationRed.Code,'',Quantity);
        CreateAndReleaseTransferOrder(LocationYellow2.Code,LocationRed.Code,Item."No.",Quantity);
        CreateAndReleaseSalesOrder(SalesHeader2,Item."No.",Quantity,LocationRed.Code);

        // Exercise: Create Inventory Pick.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",FALSE,TRUE,FALSE);

        // Verify: Verify the values on Whse Activity Line.
        FindWhseActivityLine(
          WarehouseActivityLine3,WarehouseActivityLine3."Activity Type"::"Invt. Pick",LocationRed.Code,SalesHeader2."No.",
          WarehouseActivityLine3."Action Type");
        VerifyInventoryPutAwayPick(WarehouseActivityLine3,SalesHeader2."No.",LocationRed.Code,Item."No.",'',Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PutAwayWithPickActivitiesMessageHandler)]
    PROCEDURE InventoryPickUsingProdOrderWithReservation@392();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPickUsingWhseBatchJobWithProdOrder(FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PutAwayWithPickActivitiesMessageHandler)]
    PROCEDURE InventoryPickUsingProdOrderWithTransferOrder@393();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPickUsingWhseBatchJobWithProdOrder(TRUE);  // Using Transfer Order TRUE.
    END;

    LOCAL PROCEDURE CreateInventoryPickUsingWhseBatchJobWithProdOrder@72(UseTransferOrder@1017 : Boolean);
    VAR
      Item@1005 : Record 27;
      Item2@1019 : Record 27;
      Vendor@1006 : Record 23;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1012 : Record 36;
      SalesHeader2@1013 : Record 36;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      ProductionBOMHeader@1015 : Record 99000771;
      ProductionOrder@1014 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Parent and Child Item, Update the Inventory, create and release Purchase Order.
      Initialize;
      CreateItem(Item,'');
      CreateItem(Item2,'');
      LibraryPurchase.CreateVendor(Vendor);
      Quantity := LibraryRandom.RandDec(100,2) + 100;  // Large value required.
      UpdateItemInventory(Item."No.",LocationYellow2.Code,'',Quantity);  // Value required.
      UpdateItemInventory(Item2."No.",LocationYellow2.Code,'',Quantity);  // Value required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationYellow2.Code);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity,LocationYellow2.Code);

      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Quantity,Item."Base Unit of Measure");
      Item.FIND;
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",LocationYellow2.Code,Quantity);

      // Exercise: Create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Verify: Verify the values on Whse Activity Line.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationYellow2.Code,ProductionOrder."No.",
        WarehouseActivityLine."Action Type");
      VerifyInventoryPutAwayPick(WarehouseActivityLine,ProductionOrder."No.",LocationYellow2.Code,Item2."No.",'',Quantity);

      IF UseTransferOrder THEN BEGIN
        CreateAndReleaseTransferOrder(LocationYellow2.Code,LocationRed.Code,Item."No.",Quantity);
        CreateAndReleaseSalesOrder(SalesHeader2,Item."No.",Quantity,LocationRed.Code);

        // Exercise: Create Inventory Pick.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",FALSE,TRUE,FALSE);

        // Verify: Verify that Inventory Pick is not created in MessageHandler.
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ReceiptWithPickActivitiesMessageHandler)]
    PROCEDURE AvailableInventoryPickFromSalesOrder@290();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithSalesOrder(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ReceiptWithPickActivitiesMessageHandler)]
    PROCEDURE MultipleInventoryPickFromSalesOrder@291();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithSalesOrder(TRUE,FALSE);  // Error creating multiple Inventory Picks.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ReceiptWithPickActivitiesMessageHandler)]
    PROCEDURE PostInventoryPickWithUpdatedActivityLine@292();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithSalesOrder(TRUE,TRUE);  // Update and Post Inventory Pick.
    END;

    LOCAL PROCEDURE InventoryPickWithSalesOrder@104(MultipleInventoryPick@1008 : Boolean;UpdateAndPost@1009 : Boolean);
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1012 : Record 36;
      SalesHeader2@1013 : Record 36;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item, create and release Purchase Order, create and post Whse Receipt. Create and release a Sales Order with reservations.
      // Create another Sales Order without reservations for the same Location.
      CreateItem(Item,'');
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationGreen2.Code,Item."No.");
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity2 / 4,LocationGreen2.Code);  // Value required.
      CreateAndReleaseSalesOrder(SalesHeader2,Item."No.",Quantity2,LocationGreen2.Code);

      // Exercise: Create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify: Verify the Inventory Pick created.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationGreen2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type");
      VerifyInventoryPutAwayPick(WarehouseActivityLine,SalesHeader."No.",LocationGreen2.Code,Item."No.",'',Quantity2 - Quantity2 / 2 );

      IF MultipleInventoryPick THEN
        // Exercise: Create Inventory Pick.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",FALSE,TRUE,FALSE);

      // Verify: Verify that Pick is not created in MessageHandler.

      IF UpdateAndPost THEN BEGIN
        // Exercise: Update Quantity on Inventory Pick and Post it.
        UpdateQuantityOnActivityLine(WarehouseActivityLine,Quantity2 / 2);  // Partial Quantity.
        PostInventoryPick(SalesHeader."No.");

        // Verify: Verify the Posted Inventory Pick Line. Expiration Date is blank.
        VerifyPostedInventorytPickLine(SalesHeader."No.",LocationGreen2.Code,Item."No.",0D,'')
      END;
    END;

    [Test]
    [HandlerFunctions(PutAwayWithPickActivitiesMessageHandler,ReservationPageHandler)]
    PROCEDURE AvailableInventoryPickWithReservation@293();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPickWithReservation(FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PutAwayWithPickActivitiesTwiceMessageHandler)]
    PROCEDURE AvailableInventoryPickWithReservationAfterCreateInventoryPick@294();
    BEGIN
      // Setup.
      Initialize;
      CreateInventoryPickWithReservation(TRUE);  // Available Inventory Pick after reservation.
    END;

    LOCAL PROCEDURE CreateInventoryPickWithReservation@258(ReserveAfterPick@1008 : Boolean);
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1012 : Record 36;
      SalesHeader2@1013 : Record 36;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseActivityLine2@1007 : Record 5767;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item, update Item Inventory at the Location, create and release Purchase Order. Create Inventory Put-Away.
      // Create two Sales Orders with reservations.
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2) + 100;  // Large value required.
      UpdateItemInventory(Item."No.",LocationYellow2.Code,'',Quantity);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationYellow2.Code);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity / 2,LocationYellow2.Code);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader2,Item."No.",Quantity / 4,LocationYellow2.Code);  // Value required.

      // Exercise: Create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify: Verify the Inventory Pick. Available Qty to Pick is verified with reservation.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationYellow2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type");
      VerifyInventoryPutAwayPick(
        WarehouseActivityLine,SalesHeader."No.",LocationYellow2.Code,Item."No.",'',Quantity / 2 + Quantity / 4);

      IF ReserveAfterPick THEN BEGIN
        // Exercise: Create Inventory Pick.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",FALSE,TRUE,FALSE);

        // Verify: Verify the Inventory Pick Line. Available Qty to Pick is verified with reservation.
        FindWhseActivityLine(
          WarehouseActivityLine2,WarehouseActivityLine2."Activity Type"::"Invt. Pick",LocationYellow2.Code,SalesHeader2."No.",
          WarehouseActivityLine2."Action Type");
        VerifyInventoryPutAwayPick(
          WarehouseActivityLine2,SalesHeader2."No.",LocationYellow2.Code,Item."No.",'',Quantity / 2 - Quantity / 4);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWhseShipmentWithReservationAndPartialDelete@100();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1009 : Record 36;
      SalesHeader2@1008 : Record 36;
      PurchaseHeader@1006 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityLine2@1000 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Create Item, create and release Purchase Order, create Put Away, create and release Sales Order, create and release Whse Shipment.
      // Update Quantity on Pick, register and delete it. Create and release Sales Order, create Whse Shipment.
      Initialize;
      CreateItem(Item,'');
      CreateAndPostWarehouseReceiptFromPO(PurchaseHeader,LocationWhite.Code,Item."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity2 / 2,LocationWhite.Code);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      UpdateActivityLineAndDeletePartially(WarehouseActivityLine,SalesHeader."No.");
      CreateAndPostWarehouseShipmentFromSO(SalesHeader2,WarehouseShipmentHeader,Item."No.",Quantity2,LocationWhite.Code);  // Using partial Quantity as on Whse Activity Line.

      // Exercise: Create Pick from Whse Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify the values on Whse Activity Line. Available Quantity to Pick and Ship is verified.
      VerifyWhseActivityLine(WarehouseActivityLine2,Quantity2 - Quantity2 / 2,SalesHeader2."No.",LocationWhite.Code);
    END;

    [Test]
    PROCEDURE LocationWithMultipleBins@108();
    VAR
      Bin@1004 : Record 7354;
      LocationCard@1005 : TestPage 5703;
    BEGIN
      // Setup: Create Multiple Bins for a Location and create Bin for another Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');

      // Exercise: Enter Bins present on Location Silver at Open Shop Floor Bin Code, To-Production Bin Code and From-Production Bin Code.
      SetBinOnLocationCard(LocationCard,LocationSilver.Code,Bin.Code);

      // Verify: Verify Bin on Location.
      VerifyBinOnLocationCard(LocationSilver.Code,Bin.Code);
    END;

    [Test]
    PROCEDURE LocationBinErrorWithChangedBin@128();
    VAR
      Bin@1007 : Record 7354;
      Bin2@1006 : Record 7354;
      LocationCard@1003 : TestPage 5703;
    BEGIN
      // Setup: Create Multiple Bins for a Location and create Bin for another Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBin(
        Bin2,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin2.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');

      // Exercise: Set Bin on Open Shop Floor Bin Code, To-Production Bin Code and From-Production Bin Code of Location which is not at the Location .
      ASSERTERROR SetBinOnLocationCard(LocationCard,LocationSilver.Code,Bin2.Code);

      // Verify: Verify that Bin not present in Location cannot be populated on Open Shop Floor Bin Code,To-Production Bin Code and From-Production Bin Code of Location.
      Assert.ExpectedError(ValidationError);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE LocationWithoutBinMandatoryWithDisabledBinCodes@137();
    VAR
      Bin@1004 : Record 7354;
      LocationCard@1005 : TestPage 5703;
      BinMandatory@1000 : Boolean;
    BEGIN
      // Setup: Create multiple Bins for a Location and update Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      OpenLocationCard(LocationCard,LocationOrange2.Code);

      // Exercise: Update Bin Mandatory false on Location.
      BinMandatory := LocationCard."Bin Mandatory".ASBOOLEAN;
      LocationCard."Bin Mandatory".SETVALUE(FALSE);

      // Verify: Verify Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code are disabled.
      Assert.IsFalse(LocationCard."Open Shop Floor Bin Code".ENABLED,EditableError);
      Assert.IsFalse(LocationCard."To-Production Bin Code".ENABLED,EditableError);
      Assert.IsFalse(LocationCard."From-Production Bin Code".ENABLED,EditableError);
      LocationCard."Bin Mandatory".SETVALUE(BinMandatory);
    END;

    [Test]
    PROCEDURE WorkCenterWithMultipleBins@121();
    VAR
      Bin@1000 : Record 7354;
      WorkCenter@1003 : Record 99000754;
      WorkCenterCard@1001 : TestPage 99000754;
    BEGIN
      // Setup: Create multiple Bins for a Location, create Bin for another Location and create Work center with Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationSilver.Code);

      // Exercise: Enter Bins present on Location at Open Shop Floor Bin Code, To Production Bin Code and From-Production Bin Code of Work Center.
      SetBinOnWorkCenterCard(WorkCenterCard,LocationSilver.Code,Bin.Code);

      // Verify: Verify Bin on Work Center.
      VerifyBinOnWorkCenterCard(LocationSilver.Code,Bin.Code);
    END;

    [Test]
    PROCEDURE WorkCenterBinErrorWithChangedBin@154();
    VAR
      Bin@1009 : Record 7354;
      Bin2@1008 : Record 7354;
      WorkCenter@1005 : Record 99000754;
      WorkCenterCard@1004 : TestPage 99000754;
    BEGIN
      // Setup: Create multiple Bins for a Location, create Bin for another Location and create Work center with Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBin(
        Bin2,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin2.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationSilver.Code);

      // Exercise: Set Bin on Work Center which is not at the Location of Work Center.
      ASSERTERROR SetBinOnWorkCenterCard(WorkCenterCard,LocationSilver.Code,Bin2.Code);

      // Verify: Verify that Bin not present in Location cannot be populated on Open Shop Floor Bin Code, To-Production Bin Code and From-Production Bin Code of Work Center.
      Assert.ExpectedError(ValidationError);
    END;

    [Test]
    PROCEDURE WorkCenterWithBinMandatoryErrorOnChangeLocation@130();
    VAR
      Bin@1003 : Record 7354;
      WorkCenter@1000 : Record 99000754;
    BEGIN
      // Setup: Create multiple Bins for Location and create Work Center with that Location.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationOrange2.Code);

      // Exercise: Update Location for Bin Mandatory False.
      ASSERTERROR UpdateLocationForBinMandatory(LocationOrange2,FALSE);  // Bin Mandatory FALSE.

      // Verify: Verify Error for Bin Mandatory False, if the location is used by Work Center.
      Assert.ExpectedError(STRSUBSTNO(WorkCenterError,LocationOrange2.Code,WorkCenter."No."));
    END;

    [Test]
    PROCEDURE WorkCenterAndLocationUneditableOnMachineCenter@131();
    VAR
      Bin@1006 : Record 7354;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1000 : Record 99000758;
      MachineCenterCard@1011 : TestPage 99000760;
      MachineCenterCard2@1009 : TestPage 99000760;
    BEGIN
      // Setup: Create multiple Bins for a Location, create Bin for another Location, create Work Center With Location  and create Machine Center for that Work center.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationOrange2.Code);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandInt(10));

      // Exercise: Enter Bins present on Location at Open Shop Floor Bin Code, To Production Bin Code and From-Production Bin Code of Work Center.
      OpenMachineCenterCard(MachineCenterCard,WorkCenter."No.");
      SetBinOnMachineCenterCard(MachineCenterCard2,WorkCenter."No.",Bin.Code);

      // Verify: Verify Location Code is disabled on Machine Center and Bin on Machine Center.
      Assert.IsFalse(MachineCenterCard."Location Code".EDITABLE,EditableError);
      VerifyBinOnMachineCenterCard(WorkCenter."No.",Bin.Code);
    END;

    [Test]
    PROCEDURE MachineCenterBinErrorWithChangedBin@152();
    VAR
      Bin@1011 : Record 7354;
      Bin2@1010 : Record 7354;
      WorkCenter@1007 : Record 99000754;
      MachineCenter@1006 : Record 99000758;
      MachineCenterCard@1005 : TestPage 99000760;
    BEGIN
      // Setup: Create multiple Bins for a Location, create Bin for another Location, create Work Center With Location  and create Machine Center for that Work center.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBin(
        Bin2,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin2.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationSilver.Code);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandInt(10));

      // Exercise: Set Bin on Machine Center which is not at the location of Work Center.
      ASSERTERROR SetBinOnMachineCenterCard(MachineCenterCard,WorkCenter."No.",Bin2.Code);

      // Verify: Verify that Bin not present in Location cannot be populated on Open Shop Floor Bin Code,To-Production Bin Code and From-Production Bin Code of Machine Center.
      Assert.ExpectedError(ValidationError);
    END;

    [Test]
    PROCEDURE WorkCenterWithouLocationAndLocationOnMachineCenterWithBins@116();
    VAR
      WorkCenter@1005 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
      MachineCenterCard@1004 : TestPage 99000760;
      WorkCenterCard@1000 : TestPage 99000754;
    BEGIN
      // Setup: Create Work Center without Location and create Machine Center for that Machine Center.
      Initialize;
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,'');
      OpenWorkCenterCard(WorkCenterCard,LocationSilver.Code);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandInt(10));

      // Exercise: Open Machine Center Card.
      OpenMachineCenterCard(MachineCenterCard,WorkCenter."No.");

      // Verify: Location Code is empty and uneditable. Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code is disabled.
      MachineCenterCard."Location Code".ASSERTEQUALS('');
      Assert.IsFalse(MachineCenterCard."Location Code".EDITABLE,EditableError);
      Assert.IsFalse(MachineCenterCard."Open Shop Floor Bin Code".ENABLED,EnabledError);
      Assert.IsFalse(MachineCenterCard."To-Production Bin Code".ENABLED,EnabledError);
      Assert.IsFalse(MachineCenterCard."From-Production Bin Code".ENABLED,EnabledError);
    END;

    [Test]
    PROCEDURE WorkCenterChangeLocationWithoutBin@142();
    VAR
      WorkCenter@1004 : Record 99000754;
      MachineCenter@1001 : Record 99000758;
    BEGIN
      // Setup: Create Work Center With Location and create Machine Center of that Work Center not having Bin Code on it.
      Initialize;
      CreateWorkCenterSetup(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandInt(10));

      // Exercise: Update Work Center on new Location.
      UpdateLocationOnWorkCenter(WorkCenter,LocationOrange2.Code);

      // Verify: Verify Location is updated on Work Center.
      VerifyLocationOnWorkCenter(WorkCenter."No.",LocationOrange2.Code);
    END;

    [Test]
    [HandlerFunctions(ChangeLocationConfirmHandler)]
    PROCEDURE WorkCenterChangeLocationWithBinError@140();
    VAR
      Bin@1008 : Record 7354;
      WorkCenter@1005 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
    BEGIN
      // Setup: Create Bin for a Location, create Work Center With Location  and create Machine Center of that Work Center having Bin Code on it.
      Initialize;
      LibraryWarehouse.CreateBin(
        Bin,LocationOrange2.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      CreateWorkCenterSetup(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationOrange2.Code);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandInt(10));
      MachineCenter.VALIDATE("To-Production Bin Code",Bin.Code);
      MachineCenter.MODIFY(TRUE);

      // Exercise: Update Work Center on new Location.
      ASSERTERROR UpdateLocationOnWorkCenter(WorkCenter,LocationOrange.Code);

      // Verify: Bin error on rejectng the Change Location Confirm Handler.
      Assert.ExpectedError(STRSUBSTNO(BinErrorOnMachineCenter,MachineCenter.FIELDCAPTION("To-Production Bin Code"),''));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE QuantityOnItemLedgerEntriesWhenPickAccordingToFEFOTrue@162();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseActivityHeader@1006 : Record 5766;
      Quantity@1002 : Decimal;
    BEGIN
      // Verify Quantity on Item Ledger Entry when Inventory Activity Posted with Expiration Date on Item Tracking Lines.

      // Setup: Create LocationCode,Item with tracking Code and Purchase Document with Inventory Put away / Pick away.
      Initialize;
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,TRUE);
      CreateBinContent(Bin,Item."No.",Item."Base Unit of Measure");
      Quantity := CreatePurchaseDocumentWithItemTrackingLines(PurchaseHeader,Item."No.",Bin."Location Code");
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);

      // Exercise: Auto fill the the Quantity on Inventory Activity and Post.
      AutoFillQuantityAndPostInventoryActivity(Bin."Location Code");

      // Verify: Verify The Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(Item."No.",Bin."Location Code",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,SelectEntriesHandler,MessageHandler)]
    PROCEDURE QuantityOnInventoryActivityLinesWhenPickAccordingToFEFOTrue@125();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      WarehouseActivityHeader@1007 : Record 5766;
    BEGIN
      // Verify Quantity WareHouse Inventory Activity Lines when Sales Order created with Inventory Put away / Pick away.

      // Setup: Create LocationCode,Item with tracking Code and Purchase Document with Inventory Put away / Pick away.
      Initialize;
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,TRUE);
      CreateBinContent(Bin,Item."No.",Item."Base Unit of Measure");
      CreatePurchaseDocumentWithItemTrackingLines(PurchaseHeader,Item."No.",Bin."Location Code");
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      AutoFillQuantityAndPostInventoryActivity(Bin."Location Code");
      CreateSalesOrderWithItemTrackingLines(SalesHeader,SalesLine,Item."No.",Bin."Location Code");

      // Exercise: Create Sales Order with Inventory Put away / Pick away.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify: Verify The Quantity on WareHouse Inventory Activity Lines.
      SalesLine.TESTFIELD(Quantity,GetQuantityFromWareHouseInventoryActivityLines(Bin."Location Code",Item."No.",SalesHeader."No."));
    END;

    [Test]
    PROCEDURE FieldUseAsInTransitInLocationCardPageIsEditableWhenCreatingNewLocation@5();
    VAR
      LocationCard@1000 : TestPage 5703;
    BEGIN
      // [FEATURE] [Locations]
      // [SCENARIO] Field "Use As In-Transit" in Location Card Page should be editable when creating new Location

      // [WHEN] Create new Location
      LocationCard.OPENNEW;

      // [THEN] Field "Use As In-Transit" on Location Card Page is editable
      Assert.IsTrue(LocationCard."Use As In-Transit".EDITABLE,UseAsInTransitEditableErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,PickSelectionPageHandler)]
    PROCEDURE LotNoAndExpirationDateFilledInWhseActivityLineAfterPartialPost@149();
    VAR
      Item@1001 : Record 27;
      Location@1006 : Record 14;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      WhseWorksheetLine@1012 : Record 7326;
      Quantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Tracking] [FEFO] [Pick] [Pick Worksheet]
      // [SCENARIO 362753]

      Initialize;

      // [GIVEN] Warehouse location with FEFO enabled
      CreateFullWhseLocationWithFEFO(Location);

      // [GIVEN] Item "I" with tracking by Lot No.
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,TRUE);

      // [GIVEN] Receive "X" pieces of item "I" with lot no. and expiration date
      TrackingAction := TrackingAction::LotNo;
      Quantity := CreatePurchaseDocumentWithItemTrackingLines(PurchaseHeader,Item."No.",Location.Code);
      CreateAndPostWhseReceiptAndRegisterPutAwayFromPO(PurchaseHeader);

      // [GIVEN] Create sales order for item "I"
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,Location.Code);
      // [GIVEN] Create warehouse shipment from sales order
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // [GIVEN] Open pick worksheet and create a new pick from whse. shipment. Item "I", quantity = X / 2
      LocationCode := Location.Code;
      CreatePickFromPickWorksheet(Location.Code,Quantity / 2);
      // [GIVEN] Register pick
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // [WHEN] Create a new pick from pick worksheet for the remaining quantity of item "I"
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
      UpdateQuantityOnWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetLine."Qty. Outstanding");
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // [THEN] Lot No. and expiration date on pick lines are not empty
      VerifyLotAndExpirationDateOnWhseActivityLines(SalesHeader."Document Type",SalesHeader."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingPageHandler,ConfirmHandler,ReservationPageHandler)]
    PROCEDURE PickLotNoWithReservationsUsingFEFO@30();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseShipmentHeader@1008 : Record 7320;
      LotNo@1004 : Code[20];
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Reservation] [FEFO] [Warehouse Pick]
      // [SCENARIO 364373] When shipping Sales Order "SO", using FEFO, Lot No should be assigned after Pick, Quantity reserved fully, including reservation for "SO".

      // [GIVEN] Warehouse location with FEFO enabled, Lot tracked Item available on stock of quantity "Q"
      Initialize;

      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',2); // Find Bin of Index 2.
      LocationSilver3.VALIDATE("Shipment Bin Code",Bin.Code);
      LocationSilver3.MODIFY;

      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      Quantity := LibraryRandom.RandIntInRange(10,100);
      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',1); // Find Bin of Index 1.
      CreateItemJournaLine(Item."No.",LocationSilver3.Code,Bin.Code,2 * Quantity);
      AssignLotNoAndPostItemJournal(FALSE);
      LotNo := GetLotNoFromItemEntry(Item."No.");

      // [GIVEN] Create and release Sales Order "SO1" of Quantity = "Q" / 2, fully reserve.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationSilver3.Code);
      ReservationFromSalesOrder(SalesHeader."No.");

      // [GIVEN] Create and release Sales Order "SO2" of Quantity = "Q" / 2, fully reserve.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity,LocationSilver3.Code);
      ReservationFromSalesOrder(SalesHeader."No.");

      // [GIVEN] Create and release warehouse shipment from sales order "SO2"
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // [WHEN] Create Pick from warehouse shipment
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // [THEN] Quantity "Q" / 2 picked, Lot No filled in Pick lines.
      VerifyWhseActivityLotNo(LocationSilver3.Code,Item."No.",Quantity,LotNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE PickItemWithPickedLotUsingFEFO@199();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine@1009 : Record 5767;
      SalesHeaderNo@1006 : ARRAY [2] OF Code[20];
      LotNo@1010 : Code[20];
      PartQty@1002 : Decimal;
      SmallQty@1004 : Decimal;
    BEGIN
      // [FEATURE] [FEFO] [Warehouse Pick] [Lot Tracked Item]
      // [SCENARIO 372295] Pick should contain Lot No for Sales Order Line if stock available and there are Lots partially picked.

      // [GIVEN] Warehouse location with FEFO enabled, Lot tracked Item available on stock: Lot "XL", quantity 200, Lot "L" of quantity 100
      Initialize;

      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',3); // Find Bin of Index 3.
      LocationSilver3.VALIDATE("Shipment Bin Code",Bin.Code);
      LocationSilver3.MODIFY;

      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      PartQty := LibraryRandom.RandIntInRange(10,50);
      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',1); // Find Bin of Index 1.
      CreateItemJournaLine(Item."No.",LocationSilver3.Code,Bin.Code,4 * PartQty);
      AssignLotNoExpirationAndPostItemJournal(Item."No.",CALCDATE('<+5Y>',WORKDATE));

      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',2); // Find Bin of Index 2.
      CreateItemJournaLine(Item."No.",LocationSilver3.Code,Bin.Code,2 * PartQty);
      AssignLotNoExpirationAndPostItemJournal(Item."No.",CALCDATE('<+5Y+1D>',WORKDATE));
      LotNo := GetLotNoFromItemEntry(Item."No.");

      // [GIVEN] Create Sales Order "SO1" for Item of quantity 150, create Warehouse Shipment and Pick.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",3 * PartQty,LocationSilver3.Code);
      SalesHeaderNo[1] := SalesHeader."No.";
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeaderNo[1]);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentHeader."No.");

      // [GIVEN] Create Sales Order "SO2" for Item with two lines: first line Quantity = 50, second line Quantity = 100.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationSilver3.Code,PartQty);
      SalesHeaderNo[2] := SalesHeader."No.";
      WITH SalesLine DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type::Item,Item."No.",2 * PartQty);
        VALIDATE("Location Code",LocationSilver3.Code);
        MODIFY(TRUE);
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [GIVEN] Create Warehouse Shipment and Pick.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeaderNo[2]);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentHeader."No.");

      // [GIVEN] Open  Pick for "SO1", set "Qty. to Handle" to 100, register Pick.
      WITH WarehouseActivityLine DO BEGIN
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo[1],"Action Type"::Take);
        VALIDATE("Qty. to Handle",2 * PartQty);
        MODIFY(TRUE);
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo[1],"Action Type"::Place);
        VALIDATE("Qty. to Handle",2 * PartQty);
        MODIFY(TRUE);
        RegisterWarehouseActivity(SalesHeaderNo[1],"Activity Type"::Pick);
      END;

      // [GIVEN] Open Pick for "SO2", set first line "Qty. to Handle" to 10, set second line "Qty. to Handle" to 0, register Pick.
      CLEAR(WarehouseActivityLine);
      WITH WarehouseActivityLine DO BEGIN
        SmallQty := LibraryRandom.RandIntInRange(5,10);
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo[2],"Action Type"::Take);
        VALIDATE("Qty. to Handle",SmallQty);
        MODIFY(TRUE);
        NEXT;
        VALIDATE("Qty. to Handle",0);
        MODIFY(TRUE);
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo[2],"Action Type"::Place);
        VALIDATE("Qty. to Handle",SmallQty);
        MODIFY(TRUE);
        NEXT;
        VALIDATE("Qty. to Handle",0);
        MODIFY(TRUE);
        RegisterWarehouseActivity(SalesHeaderNo[2],"Activity Type"::Pick);
      END;

      // [GIVEN] Delete Pick for "SO2".
      DeleteWarehouseActivity(WarehouseActivityLine);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeaderNo[2]);

      // [WHEN] Create Pick for "SO2".
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentHeader."No.");

      // [THEN] Created Pick contains Lot "L" of Quantity 100 for second Sales Order Line.
      CLEAR(WarehouseActivityLine);
      WITH WarehouseActivityLine DO BEGIN
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo[2],"Action Type"::Take);
        NEXT;
        TESTFIELD(Quantity,2 * PartQty);
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE PickItemWithShippedLotUsingFEFO@172();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine@1009 : Record 5767;
      SalesHeaderNo@1006 : Code[20];
      LotNo@1010 : Code[20];
      PartQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [FEFO] [Warehouse Pick] [Lot Tracked Item]
      // [SCENARIO 372295] Pick should contain Lot No for Sales Order Line if stock available and there are Lots partially picked and shipped.

      // [GIVEN] Warehouse location with FEFO enabled, Lot tracked Item available on stock: Lot "L", quantity 200
      Initialize;

      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',3); // Find Bin of Index 3.
      LocationSilver3.VALIDATE("Shipment Bin Code",Bin.Code);
      LocationSilver3.MODIFY;

      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      PartQty := LibraryRandom.RandIntInRange(10,50);
      LibraryWarehouse.FindBin(Bin,LocationSilver3.Code,'',1); // Find Bin of Index 1.
      CreateItemJournaLine(Item."No.",LocationSilver3.Code,Bin.Code,2 * PartQty);
      AssignLotNoExpirationAndPostItemJournal(Item."No.",CALCDATE('<+5Y>',WORKDATE));
      LotNo := GetLotNoFromItemEntry(Item."No.");

      // [GIVEN] Create Sales Order "SO" for Item of quantity 200, create Warehouse Shipment and Pick.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",2 * PartQty,LocationSilver3.Code);
      SalesHeaderNo := SalesHeader."No.";
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeaderNo);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentHeader."No.");

      // [GIVEN] Open  Pick for "SO", set "Qty. to Handle" to 100, register Pick, ship from Warehouse Shipment, then delete Pick.
      WITH WarehouseActivityLine DO BEGIN
        UpdateQuantityToHandleOnActivityLine(
          WarehouseActivityLine,"Action Type"::Take,LocationSilver3.Code,SalesHeaderNo,PartQty);
        UpdateQuantityToHandleOnActivityLine(
          WarehouseActivityLine,"Action Type"::Place,LocationSilver3.Code,SalesHeaderNo,PartQty);
        RegisterWarehouseActivity(SalesHeaderNo,"Activity Type"::Pick);
      END;
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
      DeleteWarehouseActivity(WarehouseActivityLine);

      // [WHEN] Create Pick for "SO".
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentHeader."No.");

      // [THEN] Created Pick contains Lot "L" of Quantity 100.
      CLEAR(WarehouseActivityLine);
      WITH WarehouseActivityLine DO BEGIN
        FindWhseActivityLine(
          WarehouseActivityLine,"Activity Type"::Pick,LocationSilver3.Code,SalesHeaderNo,"Action Type"::Take);
        NEXT;
        TESTFIELD(Quantity,PartQty);
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler,ConfirmHandler2)]
    PROCEDURE InventoryMovementTwoItemsWithSameLotNo@157();
    VAR
      Bin@1005 : Record 7354;
      Bin2@1008 : Record 7354;
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      InternalMovementHeader@1001 : Record 7346;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseActivityHeader@1009 : Record 5766;
      RegisteredInvtMovementLine@1010 : Record 7345;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Lot] [Internal Movement] [Inventory Movement]
      // [SCENARIO] Can register Inventory Movement from Internal Movement when two Items have the same "Lot No" code.

      // [GIVEN] Two Items with Lot specific tracking, including warehouse tracking, both on inventory, "Lot No." codes are equal.
      Initialize;
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      Qty := LibraryRandom.RandIntInRange(5,10);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateItemJournaLine(Item."No.",LocationSilver.Code,Bin.Code,Qty);
      GlobalItemLedgerEntry."Lot No." := LibraryUtility.GenerateGUID;
      GlobalItemLedgerEntry.Quantity := Qty;
      AssignLotNoAndPostItemJournal(TRUE);

      CreateItemWithItemTrackingCode(Item2,Item."Item Tracking Code");
      LibraryWarehouse.FindBin(Bin2,LocationSilver.Code,'',2);  // Find Bin of Index 2.
      CreateItemJournaLine(Item2."No.",LocationSilver.Code,Bin.Code,Qty);
      AssignLotNoAndPostItemJournal(TRUE);

      // [GIVEN] Create Internal Movement with two items, create Inventoty Movement from Internal Movement.
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,LocationSilver.Code,Bin2.Code);
      LibraryWarehouse.GetBinContentInternalMovement(
        InternalMovementHeader,LocationSilver.Code,STRSUBSTNO('%1|%2',Item."No.",Item2."No."),Bin.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Invt. Movement");
        SETRANGE("Location Code",LocationSilver.Code);
        SETFILTER("Item No.",'%1|%2',Item."No.",Item2."No.");
        AutofillQtyToHandle(WarehouseActivityLine);
      END;

      // [WHEN] Register Inventory Movement
      WITH WarehouseActivityHeader DO BEGIN
        SETRANGE(Type,Type::"Invt. Movement");
        SETRANGE("No.",WarehouseActivityLine."No.");
        FINDFIRST;
        LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      END;

      // [THEN] Registered successfully
      WITH RegisteredInvtMovementLine DO BEGIN
        SETRANGE("Location Code",LocationSilver.Code);
        SETRANGE("Item No.",Item."No.");
        FINDFIRST;
        TESTFIELD(Quantity,Qty);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE CreatePutAwayFromPostedWhseReceiptDoesNotCombineLotNo@23();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      WarehouseActivityLine@1002 : Record 5767;
      I@1004 : Integer;
      LotNo@1005 : ARRAY [3] OF Code[20];
    BEGIN
      // [FEATURE] [Warehouse] [Item Tracking] [Put-Away]
      // [SCENARIO] Put-away created from a posted warehouse receipt is not combined with other receipts for the same lot no.

      Initialize;

      // [GIVEN] Item "I" with Lot No. tracking
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      // [GIVEN] Location with put-away worksheet setup
      CreateLocationForPutAwayWorksheet(Location);

      FOR I := 1 TO ARRAYLEN(LotNo) DO
        LotNo[I] := LibraryUtility.GenerateGUID;

      // [GIVEN] Post 1st warehouse receipt with 2 pcs of item "I": 1 - "LotA" and 1 - "LotB"
      PostPurchaseReceiptWithItemTracking(Item,LotNo,Location.Code);
      // [GIVEN] Post 2nd warehouse receipt with 2 pcs of item "I" and the same tracking lines "LotA" and "LotB"
      PostPurchaseReceiptWithItemTracking(Item,LotNo,Location.Code);

      // [WHEN] Create warehouse put-away from the first posted receipt
      CreatePutAway(Item."No.");

      // [THEN] Put-away document created containing 2 activity lines for LotA, and 2 lines for LotB
      FOR I := 1 TO ARRAYLEN(LotNo) DO BEGIN
        WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
        WarehouseActivityLine.SETRANGE("Item No.",Item."No.");
        WarehouseActivityLine.SETRANGE("Lot No.",LotNo[I]);
        Assert.AreEqual(2,WarehouseActivityLine.COUNT,STRSUBSTNO(WrongNoOfWhseActivityLinesErr,2,LotNo[I]));
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PickNotCreatedMessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithShippingAdviceComplete@92();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityHeader@1003 : Record 5766;
      SalesHeader@1004 : Record 36;
      Quantity@1001 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Pick] [Shipping Advice]
      // [SCENARIO 377991] Inventory Pick should not be created if Quantity is not fully sufficient with Shipping Advice Complete
      Initialize;

      // [GIVEN] Sales Order for Item with Shipping Advice = "Complete", Quantity = "X"
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrderWithShippingAdvice(
        SalesHeader,Item."No.",Quantity + 1,LocationYellow2.Code,SalesHeader."Shipping Advice"::Complete);

      // [GIVEN] Purchase Order with Reserved Quantity against Saless Order, Quantity = "X" - 1
      CreateAndReleasePurchaseOrderWithReservation(PurchaseHeader,Item."No.",Quantity,LocationYellow2.Code,WORKDATE);

      // [GIVEN] Positive Adjustment for Item
      UpdateItemInventory(Item."No.",LocationYellow2.Code,'',Quantity);

      // [WHEN] Create Inventory Pick from Sales Order
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // [THEN] Message "Nothing to handle" is thrown
      // Verify in PickNotCreatedMessageHandler
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,PickCreatedMessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithShippingAdvicePartial@178();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityHeader@1003 : Record 5766;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      PickQty@1006 : Decimal;
      Quantity@1001 : Decimal;
    BEGIN
      // [FEATURE] [Inventory Pick] [Shipping Advice]
      // [SCENARIO 377991] Inventory Pick should be created if Quantity is not fully sufficient with Shipping Advice Partial
      Initialize;

      // [GIVEN] Sales Order for Item with Shipping Advice = "Partial", Quantity = "X"
      PickQty := LibraryRandom.RandInt(10);
      Quantity := LibraryRandom.RandInt(10);
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrderWithShippingAdvice(
        SalesHeader,Item."No.",Quantity + PickQty,LocationYellow2.Code,SalesHeader."Shipping Advice"::Partial);

      // [GIVEN] Purchase Order with Reserved Quantity against Saless Order, Quantity = "X" - "Y"
      CreateAndReleasePurchaseOrderWithReservation(PurchaseHeader,Item."No.",Quantity,LocationYellow2.Code,WORKDATE);

      // [GIVEN] Positive Adjustment for Item "Y"
      UpdateItemInventory(Item."No.",LocationYellow2.Code,'',PickQty);

      // [WHEN] Create Inventory Pick from Sales Order
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // [THEN] Pick is created with Quantity = "Y"
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Pick",LocationYellow2.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type");
      Assert.AreEqual(PickQty,WarehouseActivityLine.Quantity,STRSUBSTNO(QuantityError,PickQty,WarehouseActivityLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2,ConfirmHandler2)]
    PROCEDURE PickItemWithReservedAndBlockedLot@171();
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Item Tracking]
      // [SCENARIO 379663] Pick created from Sales Shipment should contain all available required quantity excluding reserved and blocked Lot.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order with Item Tracking for Lots "L1", "L2" and "L3".
      // [GIVEN] Warehouse Shipment for Sales Order.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Lot "L1" is reserved.
      SetLotReserved(ItemNo,LocationCode,LotNos,1,ARRAYLEN(LotNos) * QuantityPerLotPerBin);

      // [GIVEN] Lot "L1" is blocked.
      SetLotBlocked(ItemNo,LotNos,1);

      // [WHEN] Create Pick for the Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Pick does not contain Lot "L1".
      // [THEN] Pick contains purchased quantity of Lots "L2" and "L3" in Bins "B1", "B2", "B3".
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,LotNos[1],'');
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,STRSUBSTNO('<>%1',LotNos[1]),'');
        CALCSUMS(Quantity);
        Assert.AreEqual((ARRAYLEN(LotNos) - 1) * NoOfBins * QuantityPerLotPerBin,Quantity,QtyInPickErr); // two lots in three bins
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2,ConfirmHandler2)]
    PROCEDURE PickItemWithReservedLotAndBlockedBin@179();
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1003 : Record 5767;
      ItemNo@1010 : Code[20];
      LocationCode@1009 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1002 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 379664] Pick created from Sales Shipment should contain all available required quantity excluding reserved Lot and blocked Bin.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order with Item Tracking for Lots "L1", "L2" and "L3".
      // [GIVEN] Warehouse Shipment for Sales Order.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Lot "L1" is reserved.
      SetLotReserved(ItemNo,LocationCode,LotNos,1,ARRAYLEN(LotNos) * QuantityPerLotPerBin);

      // [GIVEN] Bin Content for "B1" is blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);

      // [WHEN] Create Pick for the Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Pick contains neither Lot "L1" nor Bin "B1".
      // [THEN] Pick contains purchased quantity of Lots "L2" and "L3" in Bins "B2" and "B3".
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'',BinCode);
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'',STRSUBSTNO('<>%1',BinCode));
        CALCSUMS(Quantity);
        Assert.AreEqual((ARRAYLEN(LotNos) - 1) * (NoOfBins - 1) * QuantityPerLotPerBin,Quantity,QtyInPickErr); // two lots in two bins
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE PickItemWithBlockedLotAndBlockedBin@198();
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1003 : Record 5767;
      ItemNo@1010 : Code[20];
      LocationCode@1009 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1002 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 379664] Pick created from Sales Shipment should contain all available required quantity excluding blocked Lot and blocked Bin.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order with Item Tracking for Lots "L1", "L2" and "L3".
      // [GIVEN] Warehouse Shipment for Sales Order.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Lot "L1" is blocked.
      SetLotBlocked(ItemNo,LotNos,1);

      // [GIVEN] Bin Content for "B1" is blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);

      // [WHEN] Create Pick for the Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Pick contains neither Bin "B1" nor Lot "L1".
      // [THEN] Pick contains purchased quantity of Lots "L2" and "L3" in Bins "B2" and "B3".
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'',BinCode);
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,LotNos[1],'');
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,
          STRSUBSTNO('<>%1',LotNos[1]),STRSUBSTNO('<>%1',BinCode));
        CALCSUMS(Quantity);
        Assert.AreEqual((ARRAYLEN(LotNos) - 1) * (NoOfBins - 1) * QuantityPerLotPerBin,Quantity,QtyInPickErr); // two lots in two bins
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2,ConfirmHandler2)]
    PROCEDURE PickItemWithReservedAndBlockedLotAndBlockedBin@206();
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1003 : Record 5767;
      ItemNo@1010 : Code[20];
      LocationCode@1009 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1002 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1001 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 379664] Pick created from Sales Shipment should contain all available required quantity excluding reserved Lot, blocked Lot and blocked Bin.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order with Item Tracking for Lots "L1", "L2" and "L3".
      // [GIVEN] Warehouse Shipment for Sales Order.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Lot "L1" is reserved.
      SetLotReserved(ItemNo,LocationCode,LotNos,1,ARRAYLEN(LotNos) * QuantityPerLotPerBin);

      // [GIVEN] Lot "L2" is blocked.
      SetLotBlocked(ItemNo,LotNos,2);

      // [GIVEN] Bin Content for "B1" is blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);

      // [WHEN] Create Pick for the Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Pick contain neither Lot "L1" nor Lot "L2" nor Bin "B1".
      // [THEN] Pick contains purchased quantity of Lot "L3" in Bins "B2" and "B3".
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'',BinCode);
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,LotNos[1],'');
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,LotNos[2],'');
        Assert.RecordIsEmpty(WarehouseActivityLine);

        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,
          STRSUBSTNO('<>%1&<>%2',LotNos[1],LotNos[2]),STRSUBSTNO('<>%1',BinCode));
        CALCSUMS(Quantity);
        Assert.AreEqual((ARRAYLEN(LotNos) - 2) * (NoOfBins - 1) * QuantityPerLotPerBin,Quantity,QtyInPickErr); // one lot in two bins
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE AvailableQtyToPickWithOneBlockedBinAndQtyReservedByOtherOrder@225();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 380216] Available quantity to pick created from Sales Shipment includes neither quantity in blocked Bin nor quantity reserved by other Sales Order.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots.
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order "SO1" with released Warehouse Shipment.
      // [GIVEN] Quantity per each Lot per each Bin = "Q". Full quantity = 9Q. Quantity stored in each Bin = 3Q.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndNotTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Sales Order "SO2" with Quantity = 10Q and reserved Quantity = 2Q.
      SetQtyReserved(SalesHeader,ItemNo,LocationCode,10 * QuantityPerLotPerBin,2 * QuantityPerLotPerBin);

      // [GIVEN] Bin Content for "B1" is blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);

      // [WHEN] Create Pick for the Shipment of Sales Order "SO1".
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Available quantity to pick = 4Q (9Q total - 3Q in blocked bin - 2Q reserved).
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'','');
        CALCSUMS(Quantity);
        Assert.AreEqual(4 * QuantityPerLotPerBin,Quantity,QtyInPickErr);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE AvailableQtyToPickWithTwoBlockedBinsAndQtyReservedByOtherOrder@239();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 380216] Available quantity to pick created from Sales Shipment includes neither quantity in blocked Bins nor quantity reserved from not blocked bin.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots.
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Sales Order "SO1" with released Warehouse Shipment.
      // [GIVEN] Quantity per each Lot per each Bin = "Q". Full quantity = 9Q. Quantity stored in each Bin = 3Q.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndNotTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Sales Order "SO2" with Quantity = 10Q and reserved Quantity = 2Q.
      SetQtyReserved(SalesHeader,ItemNo,LocationCode,10 * QuantityPerLotPerBin,2 * QuantityPerLotPerBin);

      // [GIVEN] Bin Contents for "B1" and "B2" are blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);
      SetBinContentBlocked(BinCode,2,LocationCode,ItemNo);

      // [WHEN] Create Pick for the Shipment of Sales Order "SO1".
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Available quantity to pick = 2Q (9Q total - 6Q in blocked bins - 1Q reserved from not blocked bin).
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'','');
        CALCSUMS(Quantity);
        Assert.AreEqual(2 * QuantityPerLotPerBin,Quantity,QtyInPickErr);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE AvailableQtyToPickWithBlockedLotAndQtyReservedByOtherOrder@246();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Item Tracking]
      // [SCENARIO 380216] Available quantity to pick created from Sales Shipment includes neither quantity in blocked Lot nor quantity reserved by other Sales Order.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins.
      // [GIVEN] Sales Order "SO1" with released Warehouse Shipment.
      // [GIVEN] Quantity per each Lot per each Bin = "Q". Full quantity = 9Q. Quantity of each Lot = 3Q.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      PrepareInventoryAndNotTrackedSalesDocumentForPick(
        WarehouseShipmentHeader,LocationCode,ItemNo,LotNos,NoOfBins,QuantityPerLotPerBin);

      // [GIVEN] Sales Order "SO2" with Quantity = 10Q and reserved Quantity = 3Q.
      SetQtyReserved(SalesHeader,ItemNo,LocationCode,10 * QuantityPerLotPerBin,3 * QuantityPerLotPerBin);

      // [GIVEN] Lot "L2" is blocked.
      SetLotBlocked(ItemNo,LotNos,2);

      // [WHEN] Create Pick for the Shipment of Sales Order "SO1".
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Available quantity to pick = 3Q (9Q total - 3Q in blocked lot - 3Q reserved).
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'','');
        CALCSUMS(Quantity);
        Assert.AreEqual(3 * QuantityPerLotPerBin,Quantity,QtyInPickErr);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE AvailableQtyToPickWithBlockedBinAndQtyReservedByThisOrder@235();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      BinCode@1000 : Code[20];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
      FullQuantity@1006 : Decimal;
      LotQuantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Bin Content] [Item Tracking]
      // [SCENARIO 380216] Available quantity to pick created from Sales Shipment does not include quantity in blocked Bin.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots.
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins "B1", "B2", "B3".
      // [GIVEN] Quantity per each Lot per each Bin = "Q". Full quantity = 9Q. Quantity stored in each Bin = 3Q.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      MakeInventoryDistributedByLotsAndBins(LocationCode,ItemNo,LotNos,NoOfBins,LotQuantity,FullQuantity,QuantityPerLotPerBin);

      // [GIVEN] Released Sales Order with Quantity = 10Q and reserved Quantity = 2Q.
      // [GIVEN] Released Warehouse Shipment.
      SetQtyReserved(SalesHeader,ItemNo,LocationCode,10 * QuantityPerLotPerBin,2 * QuantityPerLotPerBin);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // [GIVEN] Bin Content for "B1" is blocked for all movement.
      SetBinContentBlocked(BinCode,1,LocationCode,ItemNo);

      // [WHEN] Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Available quantity to pick = 6Q (9Q total - 3Q in blocked bin).
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'','');
        CALCSUMS(Quantity);
        Assert.AreEqual(6 * QuantityPerLotPerBin,Quantity,QtyInPickErr);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE AvailableQtyToPickWithBlockedLotAndQtyReservedByThisOrder@247();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemNo@1009 : Code[20];
      LocationCode@1010 : Code[10];
      LotNos@1001 : ARRAY [3] OF Code[20];
      NoOfBins@1008 : Integer;
      QuantityPerLotPerBin@1007 : Decimal;
      FullQuantity@1006 : Decimal;
      LotQuantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Item Tracking]
      // [SCENARIO 380216] Available quantity to pick created from Sales Shipment does not include quantity in blocked Lot.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Full WMS Location.
      // [GIVEN] Posted Purchase Receipt with three lots "L1", "L2", "L3".
      // [GIVEN] Registered Put-away with lines evenly split by lots and bins.
      // [GIVEN] Quantity per each Lot per each Bin = "Q". Full quantity = 9Q. Quantity of each Lot = 3Q.
      QuantityPerLotPerBin := LibraryRandom.RandInt(10);
      MakeInventoryDistributedByLotsAndBins(LocationCode,ItemNo,LotNos,NoOfBins,LotQuantity,FullQuantity,QuantityPerLotPerBin);

      // [GIVEN] Released Sales Order with Quantity = 10Q and reserved Quantity = 2Q.
      // [GIVEN] Released Warehouse Shipment.
      SetQtyReserved(SalesHeader,ItemNo,LocationCode,10 * QuantityPerLotPerBin,2 * QuantityPerLotPerBin);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // [GIVEN] Lot "L2" is blocked.
      SetLotBlocked(ItemNo,LotNos,2);

      // [WHEN] Create Pick.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Available quantity to pick = 6Q (9Q total - 3Q in blocked lot).
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,ItemNo,LocationCode,"Activity Type"::Pick,"Action Type"::Take,'','');
        CALCSUMS(Quantity);
        Assert.AreEqual(6 * QuantityPerLotPerBin,Quantity,QtyInPickErr);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler,ConfirmHandler2)]
    PROCEDURE InternalMovementQtyLessItemTracking@250();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      InternalMovementHeader@1001 : Record 7346;
      InternalMovementLine@1003 : Record 7347;
      Qty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Lot] [Internal Movement]
      // [SCENARIO 379358] Internal Movement Quantity should not be less than Item Tracking if Lot Warehouse Tracking is checked.

      // [GIVEN] Item with Lot Warehouse Tracking Code.
      Initialize;
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      // [GIVEN] "Lot No." with Item Inventory of "Qty".
      Qty := LibraryRandom.RandIntInRange(15,25);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      CreateItemJournaLine(Item."No.",LocationSilver.Code,Bin.Code,Qty);
      GlobalItemLedgerEntry."Lot No." := LibraryUtility.GenerateGUID;
      GlobalItemLedgerEntry.Quantity := Qty;
      AssignLotNoAndPostItemJournal(TRUE);
      // [GIVEN] Create Internal Movement with Item and Get Bin Content.
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,LocationSilver.Code,Bin.Code);
      LibraryWarehouse.GetBinContentInternalMovement(
        InternalMovementHeader,LocationSilver.Code,STRSUBSTNO('%1',Item."No."),Bin.Code);
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.FINDFIRST;

      // [WHEN] Change Quantity to a value less than "Qty".
      ASSERTERROR InternalMovementLine.VALIDATE(Quantity,Qty - LibraryRandom.RandInt(10));

      // [THEN] Get an error message "Item tracking defined for item more than the quantity you have entered".
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingErr,InternalMovementLine."Item No.",InternalMovementLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE WhseWorksheetLineQtytoHandleRounding@187();
    VAR
      Item@1001 : Record 27;
      WhseWorksheetLine@1012 : Record 7326;
      Quantity@1003 : Decimal;
      QuantityBase@1013 : Decimal;
      QuantityPerUoM@1014 : Decimal;
      NonBaseItemUnitofMeasureCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Warehouse Worksheet] [Unit of Measure]
      // [SCENARIO 380191] "Qty. to Handle" must be equal to "Qty. Outstanding" if "Qty. to Handle (Base)" is equal to "Qty. Outstanding (Base)"
      Initialize;

      // [GIVEN] Item with non Base Unit Of Measure, "Qty. per Unit of Measure" = 0.33333
      QuantityPerUoM := 0.33333;
      NonBaseItemUnitofMeasureCode := CreateItemWithNonBaseUnitOfMeasure(Item,QuantityPerUoM);

      // [GIVEN] Item Quantity in non Base Unit Of Measure = 403.92
      Quantity := 403.92;

      // [GIVEN] Item Quantity in Base Unit Of Measure = 135
      QuantityBase := ROUND(Quantity * QuantityPerUoM,1,'>');

      // [GIVEN] Item Inventory  = 135, Whse. Worksheet Line
      CreateItemInventoryAndWhseWorksheetInternalPickLineWithUOM(
        WhseWorksheetLine,Item."No.",NonBaseItemUnitofMeasureCode,QuantityBase);

      // [GIVEN] "Qty. Outstanding" in non Base Unit Of Measure = 403.92
      WhseWorksheetLine.VALIDATE("Qty. Outstanding",Quantity);

      // [WHEN] VALIDATE "Qty. to Handle" in non Base Unit Of Measure = 403.92
      WhseWorksheetLine.VALIDATE("Qty. to Handle",Quantity);

      // [THEN] "Qty. to Handle" must be equal to "Qty. Outstanding" for Whse. Worksheet Line
      Assert.AreEqual(
        WhseWorksheetLine."Qty. Outstanding",WhseWorksheetLine."Qty. to Handle",
        STRSUBSTNO(
          TwoFieldsOfTableMustBeEqualErr,WhseWorksheetLine.FIELDNAME("Qty. to Handle"),
          WhseWorksheetLine.FIELDNAME("Qty. Outstanding"),WhseWorksheetLine.TABLENAME));
    END;

    [Test]
    PROCEDURE WhseActivityPutAwayLocationRequireReceiveIsNotChecked@68();
    VAR
      Location@1000 : Record 14;
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      // [FEATURE] [Inventory Put-away]
      // [SCENARIO 380898] On validate of Location Code for Warehouse Activity of Type Inventory Put-away Location."Require Receive" isn't checked.
      Initialize;

      // [GIVEN] Location "L" with "Require Receive" enabled.
      CreateLocationRequireReceive(Location);

      // [GIVEN] Warehouse Activity of Type Inventory Put-away - WAIP.
      WarehouseActivityHeader.VALIDATE(Type,WarehouseActivityHeader.Type::"Invt. Put-away");

      // [WHEN] validate WAIP."Location Code" with L.Code
      WarehouseActivityHeader.VALIDATE("Location Code",Location.Code);

      // [THEN] No error occurs.

      // [WHEN] try to validate WAIP."Source Document" with "Purchase Order" option
      ASSERTERROR WarehouseActivityHeader.VALIDATE("Source Document",WarehouseActivityHeader."Source Document"::"Purchase Order");

      // [THEN] Error "Source Document must be equal to 'Prod. Output'  in Warehouse Activity Header: ..." occurs.
      Assert.ExpectedError(LocationRequireReceiveErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE WhseActivityPutAwayLocationRequireReceiveProductionOrder@254();
    VAR
      Location@1000 : Record 14;
      WarehouseActivityHeader@1002 : Record 5766;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // [FEATURE] [Inventory Put-away][Production]
      // [SCENARIO 380898] Inventory Put-away can be created for a production order on a location with "Require Receipt" enabled.
      Initialize;

      // [GIVEN] Location "L" with "Require Receive" enabled.
      CreateLocationRequireReceive(Location);

      // [GIVEN] Refreshed Production Order with Inbound Warehouse Request.
      CreateRefreshedProductionOrderAndInbndWhseRequest(ProductionOrder,Location.Code);

      // [WHEN] Create Inventory Put-away
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Prod. Output",ProductionOrder."No.",TRUE,FALSE,FALSE);

      // [THEN] Corresponding Whse. Activity Line is created.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",Location.Code,ProductionOrder."No.",
        WarehouseActivityLine."Action Type");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE WhseActivityPutAwayLocationRequireReceivePurchaseOrder@306();
    VAR
      Location@1000 : Record 14;
      WarehouseActivityHeader@1002 : Record 5766;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // [FEATURE] [Inventory Put-away][Purchase]
      // [SCENARIO 380898] Inventory Put-away can't be created for a purchase order on a location with "Require Receipt" enabled.
      Initialize;

      // [GIVEN] Location with "Require Receive" enabled.
      CreateLocationRequireReceive(Location);

      // [GIVEN] Released Purchase Order on this Location.
      CreateReleasedPurchaseOrder(PurchaseHeader,Location.Code);

      // [WHEN] Create Inventory Put-away
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);

      // [THEN] Corresponding Whse. Activity Line isn't created.
      ASSERTERROR
        FindWhseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Invt. Put-away",Location.Code,PurchaseHeader."No.",
          WarehouseActivityLine."Action Type");
      Assert.ExpectedError(NoWarehouseActivityLineErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,SourceDocumentsGetSourceNoPageHandler)]
    PROCEDURE WhseActivityPutAwayLocationRequireReceiveGetSourceProductionOrder@315();
    VAR
      Location@1000 : Record 14;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      // [FEATURE] [Inventory Put-away][Production]
      // [SCENARIO 380898] Inventory Put-away can be created for a Production Order on a location with "Require Receipt" enabled and this Production Order is shown in Source Documents list.
      Initialize;

      // [GIVEN] Location "L" with "Require Receive" enabled.
      CreateLocationRequireReceive(Location);

      // [GIVEN] Refreshed Production Order PO with Inbound Warehouse Request.
      CreateRefreshedProductionOrderAndInbndWhseRequest(ProductionOrder,Location.Code);

      // [GIVEN] Inventory Put-away Header "Location Code" is validated with L.Code
      CreateInventoryPutAwayHeaderWithLocationCode(WarehouseActivityHeader,Location.Code);

      // [WHEN] Invoke Inventory Put-away Get Source Document action
      CODEUNIT.RUN(CODEUNIT::"Create Inventory Put-away",WarehouseActivityHeader);

      // [THEN] "No." of Production Order PO is present in the list of source documents.
      Assert.AreEqual(ProductionOrder."No.",LibraryVariableStorage.DequeueText,UnexpectedSourceNoErr);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsGetSourceNoPageHandler)]
    PROCEDURE WhseActivityPutAwayLocationRequireReceiveGetSourcePurchaseOrder@233();
    VAR
      Location@1000 : Record 14;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      // [FEATURE] [Inventory Put-away][Purchase]
      // [SCENARIO 380898] Inventory Put-away can't be created for a purchase order on a location with "Require Receipt" enabled and this purchase order isn't shown in Source Documents list.
      Initialize;

      // [GIVEN] Location L with "Require Receive" enabled.
      CreateLocationRequireReceive(Location);

      // [GIVEN] Released Purchase Order PO.
      CreateReleasedPurchaseOrder(PurchaseHeader,Location.Code);

      // [GIVEN] Void Inventory Put-away "Location Code" is validated with L.Code
      CreateInventoryPutAwayHeaderWithLocationCode(WarehouseActivityHeader,Location.Code);

      // [WHEN] Invoke Inventory Put-away Get Source Document action
      CODEUNIT.RUN(CODEUNIT::"Create Inventory Put-away",WarehouseActivityHeader);

      // [THEN] "No." of Purchase Order PO isn't present in the list of source documents.
      Assert.AreEqual('',LibraryVariableStorage.DequeueText,UnexpectedSourceNoErr);
    END;

    [Test]
    PROCEDURE ReservedQtyNotDistributedOnAdjustmentBinOnCreatePick@141();
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
      Item@1002 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // [FEATURE] [Sales Order] [Pick] [Reservation] [Adjustment Bin]
      // [SCENARIO 208295] Reserved quantity should not be distributed to the adjustment bin on creating warehouse pick.
      Initialize;

      // [GIVEN] Full WMS location "L" with adjustment bin "A-01".
      CreateFullWarehouseSetup(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // [GIVEN] Item is placed to bin "Z-01" on location "L".
      CreateItem(Item,'');
      UpdateInventoryUsingWhseJournal(Location,Item,LibraryRandom.RandIntInRange(50,100));

      // [GIVEN] Part of the inventory of "I" is written-off from "Z-01" and thereby automatically placed to the adjustment bin "A-01".
      // [GIVEN] Calculate Whse. Adjustment job has not been run.
      // It is important that the adjustment bin has "A-01" code which goes before "Z-01" on the list of bins on "L".
      CreateAndRegisterWhseJournalLine(Location.Code,Location."Cross-Dock Bin Code",Item."No.",-LibraryRandom.RandInt(10));

      // [GIVEN] Sales order on "L" is released and reserved.
      // [GIVEN] Warehouse shipment for the sales order is created.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Location.Code,LibraryRandom.RandIntInRange(10,20));
      LibrarySales.AutoReserveSalesLine(SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);

      // [WHEN] Create pick from the warehouse shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Warehouse pick for the reserved quantity from bin "A-01" is created.
      SalesLine.CALCFIELDS("Reserved Quantity");
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,Location.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.TESTFIELD("Bin Code",Location."Cross-Dock Bin Code");
      WarehouseActivityLine.TESTFIELD(Quantity,SalesLine."Reserved Quantity");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE CreatePickFunctionPicksAllAvailableInventoryWhenFEFOEnabledAtLocation@336();
    VAR
      Item@1001 : Record 27;
      Location@1013 : Record 14;
      WarehouseEmployee@1000 : Record 7301;
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1003 : Record 38;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ReservationEntry@1012 : Record 337;
      LotNos@1015 : ARRAY [3] OF Code[20];
      i@1016 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Pick] [FEFO] [Item Tracking]
      // [SCENARIO 218658] Create Pick function should pick all required quantity from available inventory when "Pick According to FEFO" is enabled at location.
      Initialize;

      // [GIVEN] WMS location with FEFO enabled.
      CreateFullWhseLocationWithFEFO(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // [GIVEN] Lot-tracked item.
      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);

      // [GIVEN] Lots "L1", "L2", "L3" are purchased and put-away. Quantity of each lot = 20 pcs.
      // [GIVEN] The lots are arranged by their expiration dates - "L1" has the earliest date, "L3" has the latest.
      FOR i := 1 TO ARRAYLEN(LotNos) DO
        LotNos[i] := LibraryUtility.GenerateGUID;
      CreatePurchaseWithMultipleLotTracking(PurchaseHeader,Item."No.",LotNos,Location.Code,60);
      FOR i := 1 TO ARRAYLEN(LotNos) DO BEGIN
        ReservationEntry.SETRANGE("Item No.",Item."No.");
        ReservationEntry.SETRANGE("Lot No.",LotNos[i]);
        ReservationEntry.FINDFIRST;
        ReservationEntry.VALIDATE("Expiration Date",WORKDATE + i);
        ReservationEntry.MODIFY(TRUE);
      END;
      CreateAndPostWhseReceiptAndRegisterPutAwayFromPO(PurchaseHeader);

      // [GIVEN] Sales order "SO1" for 30 pcs.
      // [GIVEN] Warehouse shipment and pick are created for "SO1".
      // [GIVEN] The warehouse pick is registered, so that 20 pcs of "L1" and 10 pcs of "L2" are now in ship zone.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",30,Location.Code);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // [GIVEN] Sales order "SO2" for 20 pcs.
      // [GIVEN] Warehouse shipment is created for "SO2"
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",20,Location.Code);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");

      // [WHEN] Create pick for the shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] 10 pcs of "L2" and 10 pcs of "L3" are picked.
      VerifyQtyOnWhseActivityLinesByLotNo(Location.Code,Item."No.",LotNos[2],10);
      VerifyQtyOnWhseActivityLinesByLotNo(Location.Code,Item."No.",LotNos[3],10);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      CLEAR(TrackingAction);
      CLEAR(GlobalItemLedgerEntry);
      CLEAR(Quantity2);
      CLEAR(WarehouseShipmentNo);
      CLEAR(SourceNo);
      CLEAR(LocationCode);
      CLEAR(Counter);
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AutoFillQuantityAndPostInventoryActivity@12(LocationCode@1001 : Code[10]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE("Location Code",LocationCode);
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@7();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      CreateAndUpdateLocation(LocationSilver,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE);  // Location Silver: Pick According To FEFO TRUE.
      CreateAndUpdateLocation(LocationSilver2,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE);  // Location Silver2: Pick According To FEFO FALSE.
      CreateAndUpdateLocation(LocationSilver3,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location Silver: Pick According To FEFO TRUE.
      CreateAndUpdateLocation(LocationGreen,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Green: Bin Mandatory TRUE.
      CreateAndUpdateLocation(LocationOrange,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Orange: Bin Mandatory TRUE.
      CreateAndUpdateLocation(LocationYellow,FALSE,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Yellow: Bin Mandatory FALSE.
      CreateAndUpdateLocation(LocationYellow2,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE);  // Location Yellow2: Require Shipment and Receive FALSE.
      CreateAndUpdateLocation(LocationRed,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE);  // Location Red: Require Shipment and Receive FALSE.
      CreateAndUpdateLocation(LocationGreen2,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);  // Location Green2: Bin Mandatory FALSE, Require Shipment FALSE.
      CreateAndUpdateLocation(LocationOrange2,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE);  // Location Orange2: Bin Mandatory TRUE, Require PIck FALSE.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver2.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value required.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver3.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value required.
      LibraryWarehouse.CreateNumberOfBins(LocationGreen.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value required.
      LibraryWarehouse.CreateNumberOfBins(LocationOrange.Code,'','',LibraryRandom.RandInt(5) + 2,FALSE);  // 2 is required as minimun number of Bin must be 2.

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationIntransit);
      LocationIntransit.VALIDATE("Use As In-Transit",TRUE);
      LocationIntransit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@29(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1002 : Record 311;
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@9();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required.
    END;

    LOCAL PROCEDURE OutputJournalSetup@67();
    BEGIN
      CLEAR(OutputItemJournalTemplate);
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      OutputItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      OutputItemJournalTemplate.MODIFY(TRUE);

      CLEAR(OutputItemJournalBatch);
      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
      OutputItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@205(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,
        LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@28(VAR Item@1001 : Record 27;ProductionBOMNo@1003 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2),Item."Reordering Policy"::Order,
        Item."Flushing Method",'',ProductionBOMNo);
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandDec(100,2));  // Value Required.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@26(ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateActivityLineAndDeletePartially@90(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20]);
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SourceNo,
        WarehouseActivityLine."Action Type"::Take);
      // Updated the Quantity half of the Quantity on Whse Activity Line.
      UpdateQuantityToHandleOnActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,LocationWhite.Code,SourceNo,Quantity2 / 2);
      UpdateQuantityToHandleOnActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,LocationWhite.Code,SourceNo,Quantity2 / 2);
      RegisterWarehouseActivity(SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      DeleteWarehouseActivity(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@50(VAR ProductionBOMHeader@1000 : Record 99000771;ItemNo2@1006 : Code[20];QuantityPer@1005 : Decimal;UnitOfMeasureCode@1002 : Code[10]);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      // Choose any unit of measure.
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);

      // Create component lines in the BOM.
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo2,QuantityPer);

      // Certify BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemMovementSetup@170(VAR ProductionOrder@1001 : Record 5405;VAR WarehouseActivityHeader@1000 : Record 5766);
    VAR
      InventorySetup@1004 : Record 313;
      Item@1003 : Record 27;
      Item2@1002 : Record 27;
    BEGIN
      // Create Item, update Inventory, create and refresh released Production Order and create Inventory Movement, get Source Document.
      CreateItemSetup(Item,Item2);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",LocationSilver.Code,LibraryRandom.RandDec(10,2));
      SourceNo := ProductionOrder."No.";
      LibraryInventory.NoSeriesSetup(InventorySetup);
      LibraryWarehouse.CreateInventoryMovementHeader(WarehouseActivityHeader,LocationSilver.Code);
      LibraryWarehouse.GetSourceDocInventoryMovement(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE CreateItemSetup@25(VAR Item@1007 : Record 27;VAR Item2@1008 : Record 27);
    VAR
      ProductionBOMHeader@1006 : Record 99000771;
      Bin@1000 : Record 7354;
    BEGIN
      UpdateBinOnLocation;
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',2);  // Find Bin Of Index 2.
      CreateItem(Item,'');
      CreateItem(Item2,'');
      CreateAndCertifyProductionBOM(
        ProductionBOMHeader,Item2."No.",LibraryRandom.RandDec(100,2),Item."Base Unit of Measure");
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
      UpdateItemInventory(Item2."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(100,2) + 100);
    END;

    LOCAL PROCEDURE CreateProdOrder@55(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,SourceNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@76(VAR ProductionOrder@1000 : Record 5405;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      CreateProdOrder(ProductionOrder,ProductionOrder.Status::Released,SourceType,SourceNo,LocationCode,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationForPutAwayWorksheet@204(VAR Location@1000 : Record 14);
    BEGIN
      CreateAndUpdateLocation(Location,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE);
      Location.VALIDATE("Use Put-away Worksheet",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',1,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationRequireReceive@238(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateTrackedItem@173(VAR Item@1000 : Record 27;Lot@1005 : Boolean;Serial@1004 : Boolean;StrictExpirationPosting@1003 : Boolean;ManExpirDateEntryReqd@1002 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Lot,Serial,StrictExpirationPosting,ManExpirDateEntryReqd);
      CreateItemWithItemTrackingCode(Item,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE OpenInventoryMovement@39(VAR InventoryMovement@1002 : TestPage 7382;No@1000 : Code[20];SourceNo@1001 : Code[20]);
    BEGIN
      InventoryMovement.OPENEDIT;
      InventoryMovement.FILTER.SETFILTER("No.",No);
      InventoryMovement.FILTER.SETFILTER("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE AssignSerialNoAndPostItemJournal@37(ItemNo@1000 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      ItemJournal@1001 : TestPage 40;
    BEGIN
      ItemJournal.OPENEDIT;
      TrackingAction := TrackingAction::SerialNo;  // Setting tracking action to execute Assign Serial No. Action on Item Tracking Lines Page.
      ItemJournal.ItemTrackingLines.INVOKE;

      // Update Reservation Entry to differentiate among Expiration Dates.
      UpdateReservationEntry(ItemNo,CALCDATE('<' + '-' + FORMAT(RANDOM(5)) + 'M>',WORKDATE),LocationCode);  // Value required.
      ItemJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE AssignNoSeriesForItemJournalBatch@62(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignTrackingForSalesOrder@101(VAR SalesOrder@1001 : TestPage 42;No@1000 : Code[20]);
    BEGIN
      OpenSalesOrder(SalesOrder,No);
      TrackingAction := TrackingAction::SelectEntries;
      SalesOrder.SalesLines.ItemTrackingLines.INVOKE;  // Open Item Tracking Line.
    END;

    LOCAL PROCEDURE AssignLotNoAndPostItemJournal@252(PredefinedLot@1000 : Boolean);
    VAR
      ItemJournal@1001 : TestPage 40;
    BEGIN
      ItemJournal.OPENEDIT;
      IF PredefinedLot THEN
        TrackingAction := TrackingAction::AssignLotNo // for ItemTrackingPageHandler.
      ELSE
        TrackingAction := TrackingAction::LotNo; // for ItemTrackingPageHandler.
      ItemJournal.ItemTrackingLines.INVOKE;
      ItemJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE AssignLotNoExpirationAndPostItemJournal@181(ItemNo@1003 : Code[20];ExpirationDate@1000 : Date);
    VAR
      ReservationEntry@1002 : Record 337;
      ItemJournal@1001 : TestPage 40;
    BEGIN
      ItemJournal.OPENEDIT;
      TrackingAction := TrackingAction::LotNo;  // Setting tracking action to execute on Item Tracking Lines Page.
      ItemJournal.ItemTrackingLines.INVOKE;

      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Expiration Date",0D);
        MODIFYALL("Expiration Date",ExpirationDate,TRUE);
      END;

      ItemJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@3(VAR Location@1004 : Record 14;BinMandatory@1000 : Boolean;RequirePutAway@1001 : Boolean;RequirePick@1002 : Boolean;RequireReceive@1003 : Boolean;RequireShipment@1005 : Boolean;PickAccordingToFEFO@1006 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      Location.VALIDATE("Pick According to FEFO",PickAccordingToFEFO);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournaLine@15(ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Document No.",LibraryUtility.GenerateGUID);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@4(VAR Item@1001 : Record 27;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);

      IF ItemTrackingCode <> '' THEN BEGIN
        Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
        Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        Item.MODIFY(TRUE);
      END ELSE BEGIN
        // Update Inventory.
        CreateItemJournaLine(Item."No.",LocationWhite.Code,'',LibraryRandom.RandDec(100,2));
        LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      END;
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@22(VAR ItemTrackingCode@1003 : Record 6502;Lot@1001 : Boolean;Serial@1002 : Boolean;StrictExpirationPosting@1000 : Boolean;ManExpirDateEntryReqd@1004 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManExpirDateEntryReqd);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFullWhseLocationWithFEFO@166(VAR Location@1000 : Record 14);
    BEGIN
      CreateFullWarehouseSetup(Location);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineAndAssignLotNo@119(VAR PurchaseHeader@1004 : Record 38;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1002 : Decimal) : Decimal;
    VAR
      PurchaseLine@1003 : Record 39;
      ReservationEntry@1005 : Record 337;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      UpdateLocationOnPurchaseLine(PurchaseLine,LocationCode);
      LibraryVariableStorage.Enqueue(TRUE);
      PurchaseLine.OpenItemTrackingLines;
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",CALCDATE('<CY+1D>',WORKDATE),TRUE);
      EXIT(PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@256(VAR PurchaseHeader@1004 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      UpdateLocationOnPurchaseLine(PurchaseLine,LocationCode);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@16(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePick@47(VAR WarehouseShipmentHeader@1000 : Record 7320;WarehouseShipmentNo@1001 : Code[20]);
    BEGIN
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrder@168(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,0D);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@59(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,
        LibraryRandom.RandDec(100,2),LocationCode,0D);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPO@105(VAR PurchaseHeader@1006 : Record 38;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,ItemNo);
      Quantity2 := PurchaseLine.Quantity;  // Assign value to global variable.
      CreateWhseReceiptFromPurchaseOrder(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseShipmentFromSO@43(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1001 : Record 7320;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,ItemNo,Quantity,LocationCode);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShipment@21(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1002 : Record 7320);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";  // Assign value to global variable.
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndCertifyRoutingSetup@53(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenterSetup(WorkCenter);
      CreateRouting(RoutingHeader,RoutingLine,WorkCenter."No.",RoutingHeader.Type::Serial);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingSetup@136(VAR RoutingHeader@1000 : Record 99000763;VAR Item@1001 : Record 27);
    BEGIN
      CreateAndCertifyRoutingSetup(RoutingHeader);
      CreateItem(Item,'');
    END;

    LOCAL PROCEDURE CreateRouting@150(VAR RoutingHeader@1000 : Record 99000763;VAR RoutingLine@1002 : Record 99000764;WorkCenterNo@1003 : Code[20];Type@1004 : Option);
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,Type);
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,WorkCenterNo,RoutingLine."Operation No.",LibraryRandom.RandInt(10),
        LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateWorkCenterSetup@54(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-2M>',WORKDATE),CALCDATE('<2M>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateWhseReceiptFromPurchaseOrder@216(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@176(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,ItemNo,Quantity,LocationCode);
      ReservationFromSalesOrder(SalesHeader."No.");  // Reserve Full Quantity on Sales Order.
      LibrarySales.ReopenSalesDocument(SalesHeader);
      UpdateSalesLines(SalesLine,SalesHeader."No.",2 * Quantity);  // Update Quantity to twice for partial reservation.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithShippingAdvice@192(VAR SalesHeader@1003 : Record 36;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1000 : Code[10];ShippingAdvice@1005 : Option);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,Quantity);
      SalesHeader.VALIDATE("Shipping Advice",ShippingAdvice);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptFromPOWithBin@124(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];BinCode@1004 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,ItemNo);
      CreateWhseReceiptFromPurchaseOrder(PurchaseHeader);
      UpdateBinAndPostWhseReceiptLine(PurchaseHeader."No.",BinCode);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseWithReceiptAndPutaway@189(ItemNo@1001 : Code[20];LotNos@1002 : ARRAY [3] OF Code[20];NoOfBins@1006 : Integer;LocationCode@1003 : Code[10];QuantityPerLotPerBin@1004 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1005 : Record 7317;
    BEGIN
      CreatePurchaseWithMultipleLotTracking(
        PurchaseHeader,ItemNo,LotNos,LocationCode,NoOfBins * ARRAYLEN(LotNos) * QuantityPerLotPerBin);
      CreateWhseReceiptFromPurchaseOrder(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      SplitAndRegisterPutAwayLines(PurchaseHeader."No.",LocationCode,LotNos,NoOfBins,QuantityPerLotPerBin);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptAndRegisterPutAwayFromPO@322(VAR PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      CreateWhseReceiptFromPurchaseOrder(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@73(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@127(VAR PurchaseHeader@1004 : Record 38;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1001 : Code[10]);
    BEGIN
      CreateAndReleasePurchaseOrderWithReceiptDate(PurchaseHeader,ItemNo,Quantity,LocationCode,WORKDATE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithReceiptDate@184(VAR PurchaseHeader@1004 : Record 38;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1001 : Code[10];ReceiptDate@1000 : Date);
    VAR
      Vendor@1011 : Record 23;
      PurchaseLine@1007 : Record 39;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      UpdateLocationOnPurchaseLine(PurchaseLine,LocationCode);
      PurchaseLine.VALIDATE("Expected Receipt Date",ReceiptDate);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithReservation@174(VAR PurchaseHeader@1004 : Record 38;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1001 : Code[10];ReceiptDate@1000 : Date);
    VAR
      PurchaseOrder@1005 : TestPage 50;
    BEGIN
      CreateAndReleasePurchaseOrderWithReceiptDate(PurchaseHeader,ItemNo,Quantity,LocationCode,ReceiptDate);
      PurchaseOrder.OPENVIEW;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines.Reserve.INVOKE;
      PurchaseOrder.CLOSE;
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@167(FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndModifyLocationCode@153() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateBinContent@155(VAR Bin@1003 : Record 7354;ItemNo@1001 : Code[20];BaseUnitOfMeasure@1002 : Code[10]);
    VAR
      BinContent@1004 : Record 7302;
      WarehouseEmployee@1005 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,CreateAndModifyLocationCode,FALSE);
      LibraryWarehouse.CreateBin(
        Bin,WarehouseEmployee."Location Code",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBinContent(BinContent,WarehouseEmployee."Location Code",'',Bin.Code,ItemNo,'',BaseUnitOfMeasure);
      BinContent.VALIDATE(Fixed,FALSE);
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithItemTrackingLines@160(VAR PurchaseHeader@1003 : Record 38;ItemNo@1001 : Code[20];LocationCode@1000 : Code[10]) Quantity : Decimal;
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      Quantity :=
        CreatePurchaseLineAndAssignLotNo(PurchaseHeader,ItemNo,LocationCode,LibraryRandom.RandDecInDecimalRange(100,200,2));
      CreatePurchaseLineAndAssignLotNo(PurchaseHeader,ItemNo,LocationCode,LibraryRandom.RandDecInDecimalRange(10,20,2));
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      EXIT(Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseWithMultipleLotTracking@182(VAR PurchaseHeader@1007 : Record 38;ItemNo@1000 : Code[20];LotNos@1001 : ARRAY [3] OF Code[20];LocationCode@1002 : Code[10];Quantity@1006 : Integer);
    VAR
      PurchaseLine@1003 : Record 39;
      i@1005 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,WORKDATE);

      LibraryVariableStorage.Enqueue(ARRAYLEN(LotNos));
      FOR i := 1 TO ARRAYLEN(LotNos) DO BEGIN
        LibraryVariableStorage.Enqueue(LotNos[i]);
        LibraryVariableStorage.Enqueue(Quantity / ARRAYLEN(LotNos));
      END;

      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithItemTrackingLines@158(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1006 : Record 37;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10]);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,LibraryRandom.RandDecInRange(10,15,2));
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LibraryRandom.RandDec(5,2));
      SalesLine.OpenItemTrackingLines;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesWithMultipleLotTracking@228(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1009 : Record 37;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];SalesQty@1004 : Decimal;NoOfLots@1005 : Integer;LotNos@1006 : ARRAY [3] OF Code[20];LotQty@1007 : Decimal);
    VAR
      i@1008 : Integer;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,SalesQty);
      LibraryVariableStorage.Enqueue(NoOfLots);
      FOR i := 1 TO NoOfLots DO BEGIN
        LibraryVariableStorage.Enqueue(LotNos[i]);
        LibraryVariableStorage.Enqueue(LotQty);
      END;
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE ChangeBinCodeOnActivityLine@78(BinCode@1000 : Code[20];SourceNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@82(LocationCode@1000 : Code[10];QtyToHandle@1004 : Decimal);
    VAR
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetLine@1003 : Record 7326;
      GetSourceDocOutbound@1002 : Codeunit 5752;
    BEGIN
      CreateWhseWorksheetName(WhseWorksheetName,LocationCode);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode);
      UpdateQuantityOnWhseWorksheetLine(WhseWorksheetLine,QtyToHandle);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreatePutAway@194(ItemNo@1001 : Code[20]);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      WITH PostedWhseReceiptLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        SETRANGE("No.","No.");
        SetHideValidationDialog(TRUE);
        CreatePutAwayDoc(PostedWhseReceiptLine,'');
      END;
    END;

    LOCAL PROCEDURE CreateRefreshedProductionOrderAndInbndWhseRequest@263(VAR ProductionOrder@1003 : Record 5405;LocationCode@1004 : Code[10]);
    VAR
      ParentItem@1005 : Record 27;
      ComponentItem@1019 : Record 27;
      ProductionBOMHeader@1015 : Record 99000771;
      Quantity@1000 : Decimal;
    BEGIN
      CreateItem(ParentItem,'');
      CreateItem(ComponentItem,'');
      Quantity := LibraryRandom.RandInt(10);
      UpdateItemInventory(ComponentItem."No.",LocationCode,'',Quantity);

      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem."No.",Quantity,ParentItem."Base Unit of Measure");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,ParentItem."No.",LocationCode,Quantity);
      LibraryWarehouse.CreateInboundWhseReqFromProdO(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateReleasedPurchaseOrder@309(VAR PurchaseHeader@1003 : Record 38;LocationCode@1004 : Code[10]);
    VAR
      Item@1005 : Record 27;
      PurchaseLine@1001 : Record 39;
      Quantity@1000 : Decimal;
    BEGIN
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandInt(10);
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,
        LibraryPurchase.CreateVendorNo,Item."No.",Quantity,LocationCode,WORKDATE);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseJournalLine@221(LocationCode@1002 : Code[10];BinCode@1005 : Code[20];ItemNo@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,'',
        BinCode,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,TRUE);
    END;

    LOCAL PROCEDURE SplitAndRegisterPutAwayLines@201(SourceNo@1003 : Code[20];LocationCode@1001 : Code[10];LotNos@1004 : ARRAY [3] OF Code[20];NoOfBins@1008 : Integer;QuantityPerLotPerBin@1005 : Integer);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
      Bin@1006 : Record 7354;
      i@1007 : Integer;
      j@1009 : Integer;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityHeader.Type::"Put-away",WarehouseActivityLine."No.");

      FOR i := 1 TO ARRAYLEN(LotNos) DO
        FOR j := 1 TO NoOfBins DO BEGIN
          FindPlaceActivityLine(WarehouseActivityLine,WarehouseActivityHeader."No.",LotNos[i]);
          IF j <> NoOfBins THEN // for N put-away lines we should perform N-1 splitting operations
            SplitActivityLine(WarehouseActivityLine,QuantityPerLotPerBin);
          LibraryWarehouse.FindBin(Bin,LocationCode,'PICK',j);
          UpdateBinOnActivityLine(WarehouseActivityLine,'PICK',Bin.Code);
        END;

      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE FindPlaceActivityLine@202(VAR WarehouseActivityLine@1000 : Record 5767;WarehouseActivityNo@1002 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        RESET;
        SETRANGE("Action Type","Action Type"::Place);
        SETRANGE("No.",WarehouseActivityNo);
        SETRANGE("Lot No.",LotNo);
        FINDLAST;
      END;
    END;

    LOCAL PROCEDURE SplitActivityLine@203(VAR WarehouseActivityLine@1000 : Record 5767;QtyToHandle@1001 : Decimal);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        VALIDATE("Qty. to Handle",QtyToHandle);
        MODIFY(TRUE);
        SplitLine(WarehouseActivityLine);
      END;
    END;

    LOCAL PROCEDURE GetLotNoFromItemEntry@186(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDLAST;
        EXIT("Lot No.");
      END;
    END;

    LOCAL PROCEDURE DeleteWarehouseActivity@111(WarehouseActivityLine@1002 : Record 5767);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE("No.",WarehouseActivityLine."No.");
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteWarehouseShipmentLines@113(WarehouseShipmentHeader@1000 : Record 7320);
    BEGIN
      WarehouseShipmentHeader.SETRANGE("No.",WarehouseShipmentNo);
      WarehouseShipmentHeader.FINDFIRST;
      LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
      WarehouseShipmentHeader.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ExplodeRoutingAndPostOutputJournal@156(ProdOrderLine@1001 : Record 5406;Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      OutputJournalExplodeRouting(ItemJournalLine,ProdOrderLine."Prod. Order No.",Quantity,FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE FindWhseActivityLine@18(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20];ActionType@1004 : Option);
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,ActivityType);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityLine."No.");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@2(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentNo@8() : Code[20];
    VAR
      WarehouseSetup@1000 : Record 5769;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      WarehouseSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Ship Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@40(VAR WarehouseActivityHeader@1000 : Record 5766;SourceNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityHeader.SETRANGE("Source No.",SourceNo);
      WarehouseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisterWarehouseActivityLine@52(VAR RegisteredWhseActivityLine@1000 : Record 5773;ActivityType@1001 : Option;ActionType@1003 : Option;LocationCode@1002 : Code[10];SourceNo@1004 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Location Code",LocationCode);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBin@230(VAR Bin@1000 : Record 7354);
    BEGIN
      Bin.SETRANGE("Location Code",LocationWhite.Code);
      Bin.SETRANGE("Adjustment Bin",FALSE);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseWorksheetLine@79(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@87(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      FilterWarehouseShipmentLine(WarehouseShipmentLine,SourceNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE FilterWarehouseShipmentLine@102(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
    END;

    LOCAL PROCEDURE FilterWarehouseActivityLine@185(VAR WarehouseActivityLine@1000 : Record 5767;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];ActivityType@1003 : Option;ActionType@1004 : Option;LotNoFilter@1005 : Text;BinCodeFilter@1006 : Text);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code","Unit of Measure Code","Breakbulk No.",
          "Activity Type","Lot No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Action Type",ActionType);
        SETFILTER("Lot No.",LotNoFilter);
        SETFILTER("Bin Code",BinCodeFilter);
      END;
    END;

    LOCAL PROCEDURE GetQuantityFromWareHouseInventoryActivityLines@123(LocationCode@1002 : Code[10];ItemNo@1005 : Code[20];SalesHeaderNo@1003 : Code[20]) WarehouseActivityLineQuantity : Decimal;
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityHeader.SETRANGE("Location Code",LocationCode);
      WarehouseActivityHeader.SETRANGE("Source Document",WarehouseActivityHeader."Source Document"::"Sales Order");
      WarehouseActivityHeader.SETRANGE("Source No.",SalesHeaderNo);
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLineQuantity += WarehouseActivityLine.Quantity;
      UNTIL WarehouseActivityLine.NEXT = 0;
      EXIT(WarehouseActivityLineQuantity);
    END;

    LOCAL PROCEDURE PostInventoryPick@200(SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::"Invt. Pick");
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@57(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      FindWarehouseReceiptNo(WarehouseReceiptLine,SourceDocument,SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE MakeInventoryDistributedByLotsAndBins@215(VAR LocationCode@1004 : Code[10];VAR ItemNo@1003 : Code[20];VAR LotNos@1002 : ARRAY [3] OF Code[20];VAR NoOfBins@1001 : Integer;VAR LotQuantity@1008 : Decimal;VAR FullQuantity@1009 : Decimal;QuantityPerLotPerBin@1000 : Decimal);
    VAR
      Item@1005 : Record 27;
      Location@1006 : Record 14;
      i@1007 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(LotNos) DO
        LotNos[i] := LibraryUtility.GenerateGUID;
      NoOfBins := ARRAYLEN(LotNos);
      LotQuantity := NoOfBins * QuantityPerLotPerBin;
      FullQuantity := ARRAYLEN(LotNos) * LotQuantity;

      CreateTrackedItem(Item,TRUE,FALSE,FALSE,FALSE);
      LibraryWarehouse.CreateFullWMSLocation(Location,NoOfBins);
      ItemNo := Item."No.";
      LocationCode := Location.Code;

      CreateAndPostPurchaseWithReceiptAndPutaway(ItemNo,LotNos,NoOfBins,LocationCode,QuantityPerLotPerBin);
    END;

    LOCAL PROCEDURE PrepareInventoryAndTrackedSalesDocumentForPick@180(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR LocationCode@1002 : Code[10];VAR ItemNo@1008 : Code[20];VAR LotNos@1009 : ARRAY [3] OF Code[20];VAR NoOfBins@1007 : Integer;QuantityPerLotPerBin@1003 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      FullQuantity@1001 : Decimal;
      LotQuantity@1004 : Decimal;
    BEGIN
      MakeInventoryDistributedByLotsAndBins(LocationCode,ItemNo,LotNos,NoOfBins,LotQuantity,FullQuantity,QuantityPerLotPerBin);

      CreateSalesWithMultipleLotTracking(
        SalesHeader,SalesLine,ItemNo,LocationCode,FullQuantity,ARRAYLEN(LotNos),LotNos,LotQuantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE PrepareInventoryAndNotTrackedSalesDocumentForPick@217(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR LocationCode@1002 : Code[10];VAR ItemNo@1008 : Code[20];VAR LotNos@1009 : ARRAY [3] OF Code[20];VAR NoOfBins@1007 : Integer;QuantityPerLotPerBin@1003 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      FullQuantity@1004 : Decimal;
      LotQuantity@1001 : Decimal;
    BEGIN
      MakeInventoryDistributedByLotsAndBins(LocationCode,ItemNo,LotNos,NoOfBins,LotQuantity,FullQuantity,QuantityPerLotPerBin);

      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,FullQuantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWhseShipment(SalesHeader,WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceNo@1002 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,Type);
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("No.",WarehouseActivityLine."No.");
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE UpdateReservationEntry@237(ItemNo@1000 : Code[20];ExpirationDate@1001 : Date;LocationCode@1003 : Code[10]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Expiration Date",ExpirationDate);
      ReservationEntry.MODIFY(TRUE);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETFILTER("Expiration Date",'<>%1',ExpirationDate);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.VALIDATE("Expiration Date",WORKDATE);
      UNTIL ReservationEntry.NEXT = 0;
      ReservationEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnActivityLine@151(VAR WarehouseActivityLine@1001 : Record 5767;ActionType@1000 : Option;LocationCode@1005 : Code[10];SourceNo@1003 : Code[20];QtyToHandle@1004 : Decimal);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationCode,SourceNo,ActionType);
      UpdateQuantityOnActivityLine(WarehouseActivityLine,QtyToHandle);
    END;

    LOCAL PROCEDURE UpdateAndCreatePick@95(WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseShipmentHeader@1003 : Record 7320;
    BEGIN
      // Update Quantity to Handle on Whse Activity Line to half on Whse Activity Line.
      UpdatePick(WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,SourceNo,Quantity2 / 4);
      UpdatePick(WarehouseActivityLine,WarehouseActivityLine."Action Type"::Place,SourceNo,Quantity2 / 4);
      RegisterWarehouseActivity(SourceNo,WarehouseActivityHeader.Type::Pick);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
    END;

    LOCAL PROCEDURE UpdatePick@84(WarehouseActivityLine@1000 : Record 5767;ActionType@1003 : Option;SourceNo@1001 : Code[20];QtyToHandle@1002 : Decimal);
    BEGIN
      UpdateQuantityToHandleOnActivityLine(
        WarehouseActivityLine,ActionType,LocationWhite.Code,SourceNo,QtyToHandle);
      WarehouseActivityLine.VALIDATE("Qty. Outstanding",0);  // Making rest of availability i,e Qty. Outstanding to be nullified for the test.
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnLocation@94();
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);
      LocationSilver.VALIDATE("To-Production Bin Code" ,Bin.Code);
      LocationSilver.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationSetup@48(AlwaysCreatePickLine@1000 : Boolean);
    BEGIN
      LocationWhite.VALIDATE("Always Create Pick Line",AlwaysCreatePickLine);
      LocationWhite.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalExplodeRouting@61(VAR ItemJournalLine@1001 : Record 83;ProductionOrderNo@1000 : Code[20];Quantity@1004 : Decimal;UpdateItemJournalLine@1005 : Boolean);
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Output,'',0);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrderNo);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
      IF UpdateItemJournalLine THEN BEGIN
        ItemJournalLine.VALIDATE("Output Quantity",Quantity);
        ItemJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE OpenSalesOrder@81(VAR SalesOrder@1000 : TestPage 42;No@1001 : Code[20]);
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE OpenLocationCard@118(VAR LocationCard@1000 : TestPage 5703;LocationCode@1001 : Code[10]);
    BEGIN
      LocationCard.OPENEDIT;
      LocationCard.FILTER.SETFILTER(Code,LocationCode);
    END;

    LOCAL PROCEDURE OpenWorkCenterCard@129(VAR WorkcenterCard@1001 : TestPage 99000754;LocationCode@1002 : Code[20]);
    BEGIN
      WorkcenterCard.OPENEDIT;
      WorkcenterCard.FILTER.SETFILTER("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE OpenMachineCenterCard@135(VAR MachineCenterCard@1000 : TestPage 99000760;WorkCenterNo@1001 : Code[20]);
    BEGIN
      MachineCenterCard.OPENEDIT;
      MachineCenterCard.FILTER.SETFILTER("Work Center No.",WorkCenterNo);
    END;

    LOCAL PROCEDURE CreateInventoryPutAwayHeaderWithLocationCode@262(VAR WarehouseActivityHeader@1000 : Record 5766;LocationCode@1001 : Code[10]);
    BEGIN
      WarehouseActivityHeader.VALIDATE(Type,WarehouseActivityHeader.Type::"Invt. Put-away");
      WarehouseActivityHeader.VALIDATE("Location Code",LocationCode);
      WarehouseActivityHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseReceiptWithItemTracking@175(Item@1001 : Record 27;LotNo@1000 : ARRAY [3] OF Code[20];LocationCode@1009 : Code[10]);
    VAR
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseReceiptLine@1007 : Record 7317;
      Bin@1008 : Record 7354;
    BEGIN
      CreatePurchaseWithMultipleLotTracking(PurchaseHeader,Item."No.",LotNo,LocationCode,3);

      CreateWhseReceiptFromPurchaseOrder(PurchaseHeader);
      FindWarehouseReceiptNo(
        WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");

      LibraryWarehouse.FindBin(Bin,LocationCode,'',1);
      WarehouseReceiptLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptLine.MODIFY(TRUE);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE ReservationFromSalesOrder@36(No@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.SalesLines.Reserve.INVOKE;
      SalesOrder.CLOSE;
    END;

    LOCAL PROCEDURE UpdateProductionOrderLine@223(VAR ProdOrderLine@1002 : Record 5406;ItemNo@1000 : Code[20]);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      FindBin(Bin);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Bin Code",Bin.Code);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLines@261(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@51(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1003 : Decimal);
    BEGIN
      WarehouseJournalSetup(Location.Code);
      CreateAndRegisterWhseJournalLine(Location.Code,Location."Cross-Dock Bin Code",Item."No.",Quantity);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required.
    END;

    LOCAL PROCEDURE UpdateBinOnActivityLine@122(VAR WarehouseActivityLine@1000 : Record 5767;ZoneCode@1002 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      WarehouseActivityLine.VALIDATE("Zone Code",ZoneCode);
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinAndPostWhseReceiptLine@106(SourceNo@1002 : Code[20];BinCode@1001 : Code[20]);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptLine.VALIDATE("Bin Code",BinCode);
      WarehouseReceiptLine.MODIFY(TRUE);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
    END;

    LOCAL PROCEDURE UpdateBinOnWhseShipmentLine@117(SourceNo@1002 : Code[20];BinCode@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Source Document","Source Document"::"Sales Order");
        SETRANGE("Source No.",SourceNo);
        FINDFIRST;
        VALIDATE("Bin Code",BinCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleAndBinOnActivityLine@71(VAR WarehouseActivityLine@1002 : Record 5767;ActionType@1000 : Option;SourceNo@1003 : Code[20];QtyToHandle@1004 : Decimal;ActivityType@1005 : Option;BinCode@1001 : Code[20]);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationOrange.Code,SourceNo,ActionType);
      ChangeBinCodeOnActivityLine(BinCode,SourceNo,LocationOrange.Code);
      UpdateQuantityOnActivityLine(WarehouseActivityLine,QtyToHandle);
    END;

    LOCAL PROCEDURE UpdateQuantityOnWhseWorksheetLine@86(VAR WhseWorksheetLine@1000 : Record 7326;QtyToHandle@1001 : Decimal);
    BEGIN
      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnActivityLine@159(VAR WarehouseActivityLine@1000 : Record 5767;QtyToHandle@1001 : Decimal);
    BEGIN
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.VALIDATE("Qty. to Handle (Base)",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationForBinMandatory@120(VAR Location@1001 : Record 14;BinMandatory@1000 : Boolean);
    BEGIN
      Location.VALIDATE("Bin Mandatory",BinMandatory);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationOnWorkCenter@143(WorkCenter@1004 : Record 99000754;LocationCode@1000 : Code[10]);
    BEGIN
      WorkCenter.VALIDATE("Location Code",LocationCode);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationOnPurchaseLine@147(VAR PurchaseLine@1000 : Record 39;LocationCode@1001 : Code[10]);
    BEGIN
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBinOnLocationCard@145(VAR LocationCard@1004 : TestPage 5703;LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      OpenLocationCard(LocationCard,LocationCode);
      LocationCard."Open Shop Floor Bin Code".SETVALUE(BinCode);
      LocationCard."To-Production Bin Code".SETVALUE(BinCode);
      LocationCard."From-Production Bin Code".SETVALUE(BinCode);
      LocationCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE SetBinOnWorkCenterCard@144(VAR WorkCenterCard@1002 : TestPage 99000754;No@1001 : Code[20];BinCode@1000 : Code[20]);
    BEGIN
      OpenWorkCenterCard(WorkCenterCard,No);
      WorkCenterCard."Open Shop Floor Bin Code".SETVALUE(BinCode);
      WorkCenterCard."To-Production Bin Code".SETVALUE(BinCode);
      WorkCenterCard."From-Production Bin Code".SETVALUE(BinCode);
      WorkCenterCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE SetBinOnMachineCenterCard@134(VAR MachineCenterCard@1000 : TestPage 99000760;WorkCenterNo@1001 : Code[20];BinCode@1002 : Code[20]);
    BEGIN
      OpenMachineCenterCard(MachineCenterCard,WorkCenterNo);
      MachineCenterCard."Open Shop Floor Bin Code".SETVALUE(BinCode);
      MachineCenterCard."To-Production Bin Code".SETVALUE(BinCode);
      MachineCenterCard."From-Production Bin Code".SETVALUE(BinCode);
      MachineCenterCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateItemWithNonBaseUnitOfMeasure@197(VAR Item@1000 : Record 27;QtyPerUoM@1002 : Decimal) : Code[10];
    VAR
      ItemUnitOfMeasure@1003 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",QtyPerUoM);
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE PostItemPurchaseAndRegisterPutAway@275(ItemNo@1000 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,
        LibraryPurchase.CreateVendorNo,ItemNo,Quantity,LocationCode,WORKDATE);
      CreateAndPostWhseReceiptAndRegisterPutAwayFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateItemSalesOrderAndReleaseShipment@278(ItemNo@1000 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      SalesHeader@1009 : Record 36;
      WarehouseShipmentHeader@1008 : Record 7320;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,ItemNo,Quantity,LocationCode);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      WarehouseShipmentNo := WarehouseShipmentHeader."No.";
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateItemWhseWorksheetInternalPickLineWithUOM@284(VAR WhseWorksheetLine@1000 : Record 7326;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];ItemUnitofMeasureCode@1002 : Code[10]);
    VAR
      WhseWorksheetName@1004 : Record 7327;
    BEGIN
      CreateWhseWorksheetName(WhseWorksheetName,LocationCode);
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,WhseWorksheetLine."Whse. Document Type"::"Internal Pick");

      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE("Unit of Measure Code",ItemUnitofMeasureCode);
    END;

    LOCAL PROCEDURE CreateItemInventoryAndWhseWorksheetInternalPickLineWithUOM@188(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1003 : Code[20];ItemUnitofMeasureCode@1002 : Code[10];Quantity@1005 : Decimal);
    VAR
      Location@1006 : Record 14;
    BEGIN
      CreateFullWarehouseSetup(Location);
      PostItemPurchaseAndRegisterPutAway(ItemNo,Quantity,Location.Code);
      CreateItemSalesOrderAndReleaseShipment(ItemNo,Quantity,Location.Code);
      CreateItemWhseWorksheetInternalPickLineWithUOM(WhseWorksheetLine,Location.Code,ItemNo,ItemUnitofMeasureCode);
    END;

    LOCAL PROCEDURE SetQtyReserved@226(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];SalesQty@1004 : Decimal;ReservedQty@1006 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,ReservedQty);
      LibrarySales.AutoReserveSalesLine(SalesLine);
      SalesLine.VALIDATE(Quantity,SalesQty);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetLotReserved@213(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];LotNos@1004 : ARRAY [3] OF Code[20];LotNoIndex@1005 : Integer;LotQuantity@1006 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesWithMultipleLotTracking(
        SalesHeader,SalesLine,ItemNo,LocationCode,LotQuantity,LotNoIndex,LotNos,LotQuantity);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE SetLotBlocked@191(ItemNo@1001 : Code[20];LotNos@1002 : ARRAY [3] OF Code[20];LotNoIndex@1003 : Integer);
    VAR
      LotNoInformation@1000 : Record 6505;
    BEGIN
      LibraryItemTracking.CreateLotNoInformation(LotNoInformation,ItemNo,'',LotNos[LotNoIndex]);
      LotNoInformation.VALIDATE(Blocked,TRUE);
      LotNoInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBinContentBlocked@207(VAR BinCode@1003 : Code[20];BinIndex@1002 : Integer;LocationCode@1000 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      BinContent@1001 : Record 7302;
    BEGIN
      LibraryWarehouse.FindBin(Bin,LocationCode,'PICK',BinIndex);
      BinCode := Bin.Code;
      Item.GET(ItemNo);
      BinContent.GET(LocationCode,BinCode,ItemNo,'',Item."Base Unit of Measure");
      BinContent.VALIDATE("Block Movement",BinContent."Block Movement"::All);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyInventoryPutAwayPick@34(WarehouseActivityLine@1004 : Record 5767;SourceNo@1002 : Code[20];LocationCode@1003 : Code[10];ItemNo@1001 : Code[20];BinCode@1005 : Code[20];Quantity@1006 : Decimal);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedInventorytPickLine@316(SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];ExpirationDate@1003 : Date;BinCode@1004 : Code[20]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",LocationCode);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Expiration Date",ExpirationDate);
      PostedInvtPickLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWhseActivityLine@65(VAR WarehouseActivityLine@1000 : Record 5767;ExpectedQuantity@1003 : Decimal;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Take);
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine."Qty. Outstanding",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyQtyOnWhseActivityLinesByLotNo@317(LocationCode@1001 : Code[10];ItemNo@1000 : Code[20];LotNo@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      FilterWarehouseActivityLine(
        WarehouseActivityLine,ItemNo,LocationCode,WarehouseActivityLine."Activity Type"::Pick,
        WarehouseActivityLine."Action Type"::Take,'','');
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      WarehouseActivityLine.CALCSUMS("Qty. Outstanding (Base)");
      WarehouseActivityLine.TESTFIELD("Qty. Outstanding (Base)",Qty);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@165(No@1000 : Code[20];ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@103(WarehouseActivityLine@1000 : Record 5767;ExpectedQuantity@1003 : Decimal);
    VAR
      RegisteredWhseActivityLine@1004 : Record 5773;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindRegisterWarehouseActivityLine(
        RegisteredWhseActivityLine,WarehouseActivityLine."Activity Type",WarehouseActivityLine."Action Type",
        WarehouseActivityLine."Location Code",WarehouseActivityLine."Source No.");
      Assert.AreNearlyEqual(
        ExpectedQuantity,RegisteredWhseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyBinCode@49(ActivityType@1003 : Option;ActionType@1000 : Option;LocationCode@1004 : Code[10];SourceNo@1005 : Code[20];ExpectedBinCode@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      Assert.AreEqual(
        ExpectedBinCode,WarehouseActivityLine."Bin Code",STRSUBSTNO(BinError,ExpectedBinCode,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyMultipleWhseActivityLines@115(VAR WarehouseActivityLine@1000 : Record 5767;ExpectedQuantity@1003 : Decimal;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationCode,SourceNo,WarehouseActivityLine."Action Type");
      REPEAT
        WarehouseActivityLine.TESTFIELD(Quantity,ExpectedQuantity);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBinOnLocationCard@114(LocationCode@1003 : Code[10];BinCode@1002 : Code[20]);
    VAR
      LocationCard@1004 : TestPage 5703;
    BEGIN
      OpenLocationCard(LocationCard,LocationCode);
      LocationCard."Open Shop Floor Bin Code".ASSERTEQUALS(BinCode);
      LocationCard."To-Production Bin Code".ASSERTEQUALS(BinCode);
      LocationCard."From-Production Bin Code".ASSERTEQUALS(BinCode);
    END;

    LOCAL PROCEDURE VerifyBinOnWorkCenterCard@126(LocationCode@1001 : Code[10];BinCode@1000 : Code[20]);
    VAR
      WorkCenterCard@1002 : TestPage 99000754;
    BEGIN
      OpenWorkCenterCard(WorkCenterCard,LocationCode);
      WorkCenterCard."Open Shop Floor Bin Code".ASSERTEQUALS(BinCode);
      WorkCenterCard."To-Production Bin Code".ASSERTEQUALS(BinCode);
      WorkCenterCard."From-Production Bin Code".ASSERTEQUALS(BinCode);
    END;

    LOCAL PROCEDURE VerifyBinOnMachineCenterCard@133(WorkCenterNo@1001 : Code[20];BinCode@1000 : Code[20]);
    VAR
      MachineCenterCard@1002 : TestPage 99000760;
    BEGIN
      OpenMachineCenterCard(MachineCenterCard,WorkCenterNo);
      MachineCenterCard."Open Shop Floor Bin Code".ASSERTEQUALS(BinCode);
      MachineCenterCard."To-Production Bin Code".ASSERTEQUALS(BinCode);
      MachineCenterCard."From-Production Bin Code".ASSERTEQUALS(BinCode);
    END;

    LOCAL PROCEDURE VerifyLocationOnWorkCenter@161(No@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      WorkCenter.SETRANGE("No.",No);
      WorkCenter.FINDFIRST;
      WorkCenter.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@132(ItemNo@1000 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyLotAndExpirationDateOnWhseActivityLines@148(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",DocumentType);
        SETRANGE("Source No.",DocumentNo);
        FINDSET;
        REPEAT
          Assert.AreNotEqual('',"Lot No.",STRSUBSTNO(FieldMustNotBeEmptyErr,FIELDCAPTION("Lot No."),TABLECAPTION));
          Assert.AreNotEqual(0D,"Expiration Date",STRSUBSTNO(FieldMustNotBeEmptyErr,FIELDCAPTION("Expiration Date"),TABLECAPTION))
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyWhseActivityLotNo@183(LocationCode@1003 : Code[10];ItemNo@1001 : Code[20];ExpectedQuantity@1006 : Decimal;ExpectedLotNo@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        TESTFIELD(Quantity,ExpectedQuantity);
        TESTFIELD("Lot No.",ExpectedLotNo);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE SelectEntriesHandler@169(VAR ItemTrackingSummaryPage@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummaryPage.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@14(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,PostJournalLines) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler2@193(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ChangeLocationConfirmHandler@146(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,WantToContinueMessage) > 0,ConfirmMessage);
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@11(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE TrackingAction OF
        TrackingAction::SerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::LotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::All:
          BEGIN
            GlobalItemLedgerEntry.FINDFIRST;
            ItemTrackingLines."Serial No.".SETVALUE(GlobalItemLedgerEntry."Serial No.");
            ItemTrackingLines."Lot No.".SETVALUE(GlobalItemLedgerEntry."Lot No.");
            ItemTrackingLines."Quantity (Base)".SETVALUE(1);  // Assign Quantity Base as 1 for every Line.
            ItemTrackingLines."Appl.-from Item Entry".SETVALUE(GlobalItemLedgerEntry."Entry No.");
          END;
        TrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingAction::AssignLotNo:
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(GlobalItemLedgerEntry."Lot No.");
            ItemTrackingLines."Quantity (Base)".SETVALUE(GlobalItemLedgerEntry.Quantity);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE PickActivitiesMessageHandler@13(Message@1000 : Text[1024]);
    BEGIN
      Counter += 1;
      CASE Counter OF
        1:
          Assert.IsTrue(STRPOS(Message,LinesPosted) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,PickActivitiesCreated) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,NothingToCreate) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE ShipmentMessageHandler@195(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,LinesPosted) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE ShipmentWithProductionOrderMessageHandler@253(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,ReleasedProdOrderCreated) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE PutAwayMessageHandler@240(Message@1000 : Text[1024]);
    BEGIN
      Counter += 1;
      CASE Counter OF
        1:
          Assert.IsTrue(STRPOS(Message,PutAwayCreated) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,NothingToCreate) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE PutAwayWithPickActivitiesMessageHandler@251(Message@1000 : Text[1024]);
    BEGIN
      Counter += 1;
      CASE Counter OF
        1:
          Assert.IsTrue(STRPOS(Message,PutAwayCreated) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,PickActivitiesCreated) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,NothingToCreate) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE ReceiptWithPickActivitiesMessageHandler@112(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PickActivitiesCreated) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE PutAwayWithPickActivitiesTwiceMessageHandler@330(Message@1000 : Text[1024]);
    BEGIN
      Counter += 1;
      CASE Counter OF
        1:
          Assert.IsTrue(STRPOS(Message,PutAwayCreated) > 0,Message);
        2,3:
          Assert.IsTrue(STRPOS(Message,PickActivitiesCreated) > 0,Message);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@212(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentsPageHandler@41(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Location Code",LocationSilver.Code);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.FINDFIRST;
      SourceDocuments.SETRECORD(WarehouseRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@38(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@80(VAR PickSelection@1000 : Page 7343;VAR Response@1001 : Action);
    VAR
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      WhsePickRequest.SETRANGE("Document No.",WarehouseShipmentNo);
      WhsePickRequest.FINDFIRST;
      PickSelection.SETRECORD(WhsePickRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@163(VAR ItemtrackingLines@1000 : TestPage 6510);
    VAR
      Handler@1002 : Variant;
      QtyToHandleBase@1001 : Variant;
      Handler2@1003 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(Handler);
      Handler2 := Handler;  // Assign Variant to Boolean variable.
      IF Handler2 THEN
        ItemtrackingLines."Assign Lot No.".INVOKE
      ELSE BEGIN
        ItemtrackingLines."Select Entries".INVOKE;
        LibraryVariableStorage.Dequeue(QtyToHandleBase);
        ItemtrackingLines."Qty. to Handle (Base)".SETVALUE(QtyToHandleBase);
        ItemtrackingLines.OK.INVOKE;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@110(Message@1000 : Text[1024]);
    BEGIN
      // Dummy Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler2@42(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      I@1001 : Integer;
    BEGIN
      FOR I := 1 TO LibraryVariableStorage.DequeueInteger DO BEGIN
        ItemTrackingLines.NEW;
        ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
        ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueInteger);
      END;
    END;

    [MessageHandler]
    PROCEDURE PickNotCreatedMessageHandler@177(Message@1001 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,NothingToCreate) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE PickCreatedMessageHandler@224(Message@1001 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PickActivitiesCreated) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentsGetSourceNoPageHandler@214(VAR SourceDocuments@1000 : TestPage 5793);
    BEGIN
      LibraryVariableStorage.Enqueue(SourceDocuments."Source No.".VALUE);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
        1. Test create inventory pick for purchase return order with Pick According to FEFO checked and Strict Expiration Posting checked.
        2. Test create inventory pick for purchase return order with Pick According to FEFO checked and Strict Expiration Posting unchecked.
        3. Test create inventory pick for sales order with Pick According to FEFO unchecked and Strict Expiration Posting checked.
        4. Test create inventory pick for sales order with Pick According to FEFO unchecked and Strict Expiration Posting unchecked.
        5. Test create pick from from warehouse Shipment with Pick According to FEFO unchecked and Strict Expiration Posting checked.
        6. Test create pick from from warehouse Shipment with Pick According to FEFO unchecked and Strict Expiration Posting Unchecked.
        7. Test to verify that the pick is created for same Quantity if Sales Order is created for more Quantity.
        8. Test to verify that the Pick is created after partial delete and recreated for partial Quantity.
        9. Test to verify that deleted pick lines are no longer included in availability calculations.
       10. To verify delete and recreate pick does not affect availability.
       11. To verify delete and recreate pick does not affect availability.
       12. Test to verify that deleted shipment does not affect availability.
       13. To verify that delete and recreate shipment does not affect availability.
       14. Test to verify the error when changing the Source No for Inventory Movement.
       15. Test to verify the error when changing the Source Doc for Inventory Movement.
       16. Test to verify the error getting the Source Document twice with new Released Production Order for Inventory Movement.
       17. Test to verify that Pick is created with blank Bin Code on Take Line using Production Order.
       18. Test to verify that Pick is successfully registered with Bin Code updated on Take Line using Production Order.
       19. Test to verify that Pick is created with twice Quantity with blank Bin Code on Take Line using Production Order.
       20. Test to verify that Pick is created with twice Quantity and successfully registered with Bin Code updated on Take Line using Production Order.
       21. Test to verify that Pick is created for Quantity left after reservation on Sales Order using Production Order.
       22. Test to verify that Pick is not created when Always Create Pick Line is False on Location With Production Order.
       23. Test to verify that Pick is created for the same Quantity as on Production Order even if the Output Quantity is reduced when Always Create Pick Line is TRUE.
       24. Test to verify that Pick is created for the same Quantity as on Production Order if the Output Journal is not posted when Always Create Pick Line is TRUE.
       25. Test to verify the Pick is created from Whse Shipment with reservations.
       26. Test to verify that Pick is created from Pick Worksheet with reservations.
       27. Test to verify that Put away created is registered successfully with updated Bin on Whse Receipt Line and on Whse Activity Line.
       28. Test to verify that Pick created is registered successfully with updated Bin on Whse Shipment Line and on Whse Activity Line.
       29. Test to verify that Pick is not created after creating Pick with updated Bin on Whse Shipment Line and on Whse Activity Line.
       30. Test to verify that Pick is not created after creating Pick using Production Order.
       31. Test to verify that partially deleted Pick can be recreated from Pick Worksheet.
       32. Test to verify that Pick is created from Whse Shipment with Lot Tracked Item.
       33. Test to verify that deleted Pick can be recreated from Pick Worksheet with Lot Tracked Item.
       34. Test to verify that deleted Pick can not be recreated from Whse Shipment with Lot Tracked Item using Pick Worksheet.
       35. Test to verify that Pick is created from Whse Shipment with Serial No. Tracked Item.
       36. Test to verify that deleted Pick can be recreated from Pick Worksheet with Serial No. Tracked Item.
       37. Test to verify that deleted Pick can not be recreated from Whse Shipment with Lot Tracked Item using Pick Worksheet.
       38. Test to verify that Inventory Put-Away is created successfully using Whse. Batch job.
       39. Test to verify that multiple Inventory Put-Away are not created using Whse. Batch job after creating Put-Away.
       40. Test to verify that Inventory Pick is created using Whse. Batch job through a Sales Order with reservations.
       41. Test to verify that Inventory Pick is created using Whse. Batch job through a Sales Order using Transfer Order.
       42. Test to verify that Inventory Pick is created using Whse. Batch job through a Sales Order using Production Order.
       43. Test to verify that Inventory Pick is created using Whse. Batch job through a Sales Order using Transfer Order involving Production Order
       44. Test to verify the available Quantity To Pick on Inventory Pick.
       45. Test to verify the error creating multiple Inventory Picks from Sales Order.
       46. Test to verify that Quantity To Handle is updated successfully and Inventory Pick is posted successfully.
       47. Test to verify the available Quantity To Pick is correct when creating Inventory Pick using multiple reservations.
       48. Test to verify the available Quantity To Pick is correct when creating Inventory Pick using reservation after creating Inventory Pick.
       49. Test to verify that reserved Pick Ship Quantity after creating Pick from Whse Shipment.
       50. Test to verify that All the Bins present on Location can be selected for Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code of Location.
       51. Test to verify that the Bins  not present on Location can not be selected for Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code of Location.
       52. Test to verify if Bin mandatory field is false, then Outbound Production Bin Code, Inbound Production Bin Code and Open Shop floor Bin Code will be disabled.
       53. Test to verify that all the Bins present on Work Center can be selected for Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code of Work Center.
       54. Test to verify that Bins not present on Work Center can not be selected for Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code of Work Center.
       55. Test to verify Change Bin Mandatory False on Location will produce the error that the Location is used by a Work Center.
       56. Test to verify that Location Code is uneditable on Machine Center and Outbound Production Bin Code, Inbound Production Bin Code and Open Shop floor Bin Code of Machine Center can be selected for that Location.
       57. Test to verify that Bins not present on Location of Work Center can not be selected for Open Shop Floor Bin Code, To Production Bin Code and From Production Bin Code of Machine Center.
       58. Test to verify if Location is blank on WorkCenter then Location on Machine Center will be empty and disabled and other Bins related Fields will be uneditable.
       59. Test to verify if Work Center and its machine Center do not have Bins on their fields, then location can be changed on Work center.
       60. Test to verify if either Work Center or its any Machine Center have Bin on their Fields, then Location can not be change on Work Center.
       61. Verify Quantity on Item Ledger Entry when Inventory Activity Posted with Auto Filled.
       62. Verify Quantity on WareHouse Inventory Activity Lines when Sales Order created with Inventory Put away / Pick away.
       63. When shipping Sales Order "SO", using FEFO, Lot No should be assigned after Pick, Quantity reserved fully, including reservation for "SO".
       64. Pick should contain Lot No for Sales Order Line if stock available and there are Lots partially picked.

        Covers Test Cases for WI - 265618
        -----------------------------------------------------------------
        Test Function Name                                      TFS ID
        -----------------------------------------------------------------
        InvtPickFromPurchReturnOrderWithStrictExpiration        229335
        InvtPickFromPurchReturnOrderWithoutStrictExpiration     229337
        InventoryPickFromSalesOrderWithStrictExpiration         229339
        InventoryPickFromSalesOrderWithoutStrictExpiration      229341
        PickErrorWhseShipmentWithoutStrictExpiration            229345
        PickErrorWhseShipmentWithStrictExpiration               229345

        Covers Test Cases for WI - 268032
        -------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        -------------------------------------------------------------------------------------
        PickWithoutDelete, PickWithChangedDocumentAfterDelete, PickWithHandlingError   164061
        PickWithHandlingErrorAfterDeleteShipment, PickRecreatedAfterDeletion           164058
        PickWithReducedQuantityFromSalesOrder, PickWithDeletionAndRecreateShipment     164062

        Covers Test Cases for WI - 264950
        -----------------------------------------------------------------
        Test Function Name                                      TFS ID
        -----------------------------------------------------------------
        ChangeSourceNoOnInventoryMovement                       184936
        ChangeSourceDocOnInventoryMovement                      184653
        GetSourceDocTwiceOnInventoryMovement                    184952

        Covers Test Cases for WI - 268038
        ----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                   TFS ID
        ----------------------------------------------------------------------------------------------------------------------------
        PickFromWhseShipmentUsingProdOrderWithoutBin, PickFromWhseShipmentUsingProdOrderWithBin                              164064
        PickTwiceQuantityFromWhseShipmentUsingProdOrderWithoutBin, PickTwiceQuantityFromWhseShipmentUsingProdOrderWithBin    164064
        PickWithReservationUsingProdOrder, PickHandlingErrorWithProdOrder                                                    164064

        Covers Test Cases for WI - 268758
        ---------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ---------------------------------------------------------------------------------------------------
        PickUsingProdOrderWithReducedOutputQuantity, PickUsingProdOrderWithoutOutputJournal          164065

        Covers Test Cases for WI - 268039
        -----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                     TFS ID
        -----------------------------------------------------------------------------------------------------------------------------
        PickFromWhseShipmentWithReservation, PickFromPickWorksheetWithReservation                                              143059
        PutAwayRegisterWithUpdatedBinOnSource, PickRegisterWithUpdatedBinOnSource, MultiplePickCreationWithUpdatedBinOnSource  164103
        MultiplePickErrorFromWhseShipmentUsingProdOrder                                                                        164066

        Covers Test Cases for WI - 273248
        ------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                   TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------
        DeletePickPartiallyAndRecreateFromWhseWorksheet                                                                      164124
        PickFromWhseShipmentWithLotNo, DeletePickAndRecreateFromPickWorksheetWithLotNo, MultiplePicksErrorWithLotNo          164071, 164124
        PickFromWhseShipmentWithSerialNo, DeletePickAndRecreateFromPickWorksheetWithSerialNo, MultiplePicksErrorWithSerialNo 164071

        Covers Test Cases for WI - 273249
        ------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                  TFS ID
        ------------------------------------------------------------------------------------------------------------
        InventoryPutAwayUsingWhseBatchJob, MultipleInventoryPutAwayUsingWhseBatchJob                        164146
        InventoryPickUsingWhseBatchJob, InventoryPickUsingWhseBatchJobWithTransferOrder                     164147
        InventoryPickUsingProdOrderWithReservation, InventoryPickUsingProdOrderWithTransferOrder            164148

        Covers Test Cases for WI - 273252
        --------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                    TFS ID
        --------------------------------------------------------------------------------------------------------------
        AvailableInventoryPickFromSalesOrder, PostInventoryPickWithUpdatedActivityLine                        203792
        MultipleInventoryPickFromSalesOrder                                                                   203794
        AvailableInventoryPickWithReservation, AvailableInventoryPickWithReservationAfterCreateInventoryPick  163935
        PickFromWhseShipmentWithReservationAndPartialDelete                                                   163936

        Covers Test Cases for WI - 273278
        -------------------------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                                   TFS ID
        -------------------------------------------------------------------------------------------------------------------------------------------------------------------
        LocationWithMultipleBins, LocationBinErrorWithChangedBin, LocationWithoutBinMandatoryWithDisabledBinCodes                                            185626
        WorkCenterWithMultipleBins,WorkCenterBinErrorWithChangedBin, WorkCenterWithBinMandatoryErrorOnChangeLocation                                         185627, 185628
        WorkCenterAndLocationUneditableOnMachineCenter, MachineCenterBinErrorWithChangedBin, WorkCenterWithouLocationAndLocationOnMachineCenterWithBins      185627, 185628
        WorkCenterChangeLocationWithoutBin, WorkCenterChangeLocationWithBinError                                                                             185627

        Covers Test cases: Bug ID - 316549
        --------------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        --------------------------------------------------------------------------------------
        QuantityOnItemLedgerEntriesWhenPickAccordingToFEFOTrue,
        QuantityOnInventoryActivityLinesWhenPickAccordingToFEFOTrue         316065

        Covers Test cases: Bug ID - 371585
        --------------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        --------------------------------------------------------------------------------------
        PickLotNoWithReservationsUsingFEFO                                  371585
        PickItemWithPickedLotUsingFEFO                                      371784
    }
    END.
  }
}

