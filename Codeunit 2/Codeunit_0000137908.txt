OBJECT Codeunit 137908 SCM Assembly Order
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 910=rimd,
                TableData 7312=rimd;
    Subtype=Test;
    OnRun=VAR
            MfgSetup@1000 : Record 99000765;
          BEGIN
            MfgSetup.GET;
            WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryAssembly@1001 : Codeunit 132207;
      CnfmRefreshLines@1006 : TextConst 'ENU=This assembly order may have customized lines. Are you sure that you want to reset the lines according to the assembly BOM?';
      MSGAssertLineCount@1007 : TextConst 'ENU=Bad Line count of Order: %1 expected %2, got %3';
      LibraryKitting@1000 : Codeunit 132205;
      LibraryInventory@2000 : Codeunit 132201;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryRandom@1013 : Codeunit 130440;
      LibraryUtility@1004 : Codeunit 131000;
      WorkDate2@1008 : Date;
      Initialized@1010 : Boolean;
      TXTQtyPerNoChange@1012 : TextConst 'ENU=You cannot change Quantity per when Type is '' ''.';

    [Normal]
    LOCAL PROCEDURE Initialize@50();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BUG232108TwoUOM@41();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1004 : Record 901;
      BOMComp@1001 : Record 90;
      Item@1003 : Record 27;
      childItem@2000 : Record 27;
      ItemUOM@1008 : Record 5404;
      NonBaseUOM@2001 : Record 204;
      parent@1000 : Code[20];
      BOMQtyPer@1005 : Decimal;
      HeaderQty@1006 : Decimal;
      ParentQtyPerUOM@1007 : Decimal;
    BEGIN
      Initialize;
      BOMQtyPer := 3;
      HeaderQty := 2;
      ParentQtyPerUOM := 15;

      parent := MakeItemWithLot;
      Item.GET(parent);
      LibraryInventory.CreateUnitOfMeasureCode(NonBaseUOM);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,Item."No.",NonBaseUOM.Code,ParentQtyPerUOM);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",BOMQtyPer,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,HeaderQty));
      AssemblyHeader.VALIDATE("Unit of Measure Code",NonBaseUOM.Code);

      validateQuantityonLines(AssemblyHeader."No.",HeaderQty * ParentQtyPerUOM * BOMQtyPer);
      ValidateTotalQuantityToConsume(AssemblyHeader,HeaderQty * ParentQtyPerUOM * BOMQtyPer);

      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateQuantityPer(AssemblyLine,ParentQtyPerUOM * BOMQtyPer);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BUG232108TwoUOMUOMbeforeQty@46();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1004 : Record 901;
      BOMComp@1001 : Record 90;
      Item@1003 : Record 27;
      ItemUOM@1008 : Record 5404;
      NonBaseUOM@2000 : Record 204;
      childItem@2001 : Record 27;
      parent@1000 : Code[20];
      BOMQtyPer@1007 : Decimal;
      HeaderQty@1006 : Decimal;
      ParentQtyPerUOM@1005 : Decimal;
    BEGIN
      Initialize;
      BOMQtyPer := 3;
      HeaderQty := 2;
      ParentQtyPerUOM := 15;

      parent := MakeItemWithLot;
      Item.GET(parent);
      LibraryInventory.CreateUnitOfMeasureCode(NonBaseUOM);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,Item."No.",NonBaseUOM.Code,ParentQtyPerUOM);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",BOMQtyPer,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,0)); // No asm lines
      AssemblyHeader.VALIDATE("Unit of Measure Code",NonBaseUOM.Code);
      AssemblyHeader.VALIDATE(Quantity,HeaderQty);

      validateQuantityonLines(AssemblyHeader."No.",HeaderQty * ParentQtyPerUOM * BOMQtyPer);
      ValidateTotalQuantityToConsume(AssemblyHeader,HeaderQty * ParentQtyPerUOM * BOMQtyPer);

      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateQuantityPer(AssemblyLine,ParentQtyPerUOM * BOMQtyPer);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE OneOrderNoLine@11();
    VAR
      AssemblyHeader@1001 : Record 900;
      Parent@1003 : Code[20];
    BEGIN
      Initialize;
      Parent := MakeItemWithLot;
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,Parent,1));

      AssemblyHeader.RefreshBOM;
      validateCount(AssemblyHeader."No.",0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderAddOneLine@10();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@1003 : Record 27;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.RefreshBOM;
      validateCount(AssemblyHeader."No.",1);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderOneLine@13();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",1);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderTwoLine@15();
    VAR
      AssemblyHeader@1002 : Record 900;
      BOMComp@1001 : Record 90;
      childItem@2000 : Record 27;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(ConfirmItemChange,AvailabilityWindowHandler)]
    PROCEDURE OneOrderTwoLineChangeItem@28();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      parent@1000 : Code[20];
      SecondParent@1003 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      SecondParent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,SecondParent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,SecondParent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,SecondParent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,SecondParent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);

      AssemblyHeader.VALIDATE("Item No.",SecondParent);
      validateCount(AssemblyHeader."No.",4);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderOneItemOneResource@14();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2001 : Record 27;
      resource@2000 : Record 156;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderOneItemandResourceandT@37();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      resource@2001 : Record 156;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure");
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::" ",'',0,'');
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",3);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,ConfirmRefreshLines)]
    PROCEDURE OneOrderTwoLineRefreshOneLine@4();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      resource@2001 : Record 156;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      AssemblyHeader.RefreshBOM;
      validateCount(AssemblyHeader."No.",3);

      ASSERTERROR ERROR('') // roll back
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmRefreshLines@2(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,CnfmRefreshLines) > 0,Question);
      Reply := TRUE;
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneOrderTwoLineDelete@6();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      parent@1000 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);
      AssemblyHeader.DELETE(TRUE);
      validateDeleted(AssemblyHeader,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneCompAverage@34();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1000 : Record 90;
      Item@1003 : Record 27;
      childItem@2000 : Record 27;
      parent@1002 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      Item.GET(parent);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(10,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",10,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      AssemblyHeader.UpdateUnitCost;
      ValidateOrderUnitCost(AssemblyHeader,100);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE BomWithResourceUsageType@29();
    VAR
      AssemblyHeader@1001 : Record 900;
      AssemblyLine@1003 : Record 901;
      BOMComp@1000 : Record 90;
      resource@2000 : Record 156;
      parent@1002 : Code[20];
    BEGIN
      Initialize;
      parent := MakeItemWithLot;
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure");
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure");
      BOMComp.VALIDATE("Resource Usage Type",BOMComp."Resource Usage Type"::Fixed);
      BOMComp.MODIFY(TRUE);

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",2);
      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateLineResourceTypeUsage(AssemblyLine,AssemblyLine."Resource Usage Type"::Direct);
      AssemblyLine.NEXT;
      ValidateLineResourceTypeUsage(AssemblyLine,AssemblyLine."Resource Usage Type"::Fixed);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE BomWithResourceUsageTypeFixed@31();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1001 : Record 901;
      BOMComp@1000 : Record 90;
      resource@2000 : Record 156;
      parent@1003 : Code[20];
      ParentQty@1004 : Decimal;
      BomQty@1005 : Decimal;
    BEGIN
      Initialize;
      ParentQty := 5;
      BomQty := 2;

      parent := MakeItemWithLot;
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",BomQty,resource."Base Unit of Measure");
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Resource,resource."No.",BomQty,resource."Base Unit of Measure");
      BOMComp.VALIDATE("Resource Usage Type",BOMComp."Resource Usage Type"::Fixed);
      BOMComp.MODIFY(TRUE);

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,ParentQty));
      validateCount(AssemblyHeader."No.",2);
      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateLineResourceTypeUsage(AssemblyLine,AssemblyLine."Resource Usage Type"::Direct);
      ValidateQuantity(AssemblyLine,BomQty * ParentQty);
      AssemblyLine.VALIDATE("Resource Usage Type",AssemblyLine."Resource Usage Type"::Fixed);
      ValidateQuantity(AssemblyLine,BomQty);

      AssemblyLine.NEXT;
      ValidateLineResourceTypeUsage(AssemblyLine,AssemblyLine."Resource Usage Type"::Fixed);
      ValidateQuantity(AssemblyLine,BomQty);
      AssemblyLine.VALIDATE("Resource Usage Type",AssemblyLine."Resource Usage Type"::Direct);
      ValidateQuantity(AssemblyLine,BomQty * ParentQty);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE OneResourceFixedChange@32();
    VAR
      BOMComp@1005 : Record 90;
      AssemblyHeader@1001 : Record 900;
      AssemblyLine@1002 : Record 901;
      resource@2000 : Record 156;
      Parent@1000 : Code[20];
      ParentQty@1003 : Decimal;
      BomQty@1004 : Decimal;
    BEGIN
      Initialize;
      Parent := LibraryKitting.CreateItemWithLotAndNewUOM(500,700,10);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,Parent,BOMComp.Type::Resource,resource."No.",5,resource."Base Unit of Measure");
      BOMComp.VALIDATE("Resource Usage Type",BOMComp."Resource Usage Type"::Fixed);
      BOMComp.MODIFY(TRUE);

      ParentQty := 5;
      BomQty := 5;

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,Parent,ParentQty));
      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateQuantity(AssemblyLine,BomQty);

      AssemblyHeader.VALIDATE(Quantity,10);
      AssemblyLine.FINDFIRST;
      ValidateQuantity(AssemblyLine,BomQty);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE ChangeUnitCost@16();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      childItem@2000 : Record 27;
      AssemblyLine@1003 : Record 901;
      parent@1000 : Code[20];
      Costprice@1004 : Decimal;
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      Costprice := 500;
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(Costprice,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",1);
      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateLineUnitCost(AssemblyLine,Costprice);

      ASSERTERROR AssemblyLine.VALIDATE("Unit Cost",100);
    END;

    [Test]
    PROCEDURE QuantityPerline@5();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1001 : Record 901;
      item@2000 : Record 27;
      parent@1004 : Code[20];
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,10));
      item.GET(LibraryKitting.CreateItemWithNewUOM(100,700));
      LibraryAssembly.CreateAssemblyLine(
        AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,item."No.",item."Base Unit of Measure",20,1,'Test QuantityPer ');

      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateQuantityPer(AssemblyLine,1);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE QuantityPerlineChange@17();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1001 : Record 901;
      item@2000 : Record 27;
      parent@1004 : Code[20];
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,5));
      item.GET(LibraryKitting.CreateItemWithNewUOM(100,700));
      LibraryKitting.AddLine(AssemblyHeader,AssemblyLine.Type::Item,item."No.",item."Base Unit of Measure",20,0,'Test QuantityPer');

      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      AssemblyLine.VALIDATE("Quantity per",0);
      ValidateQuantityPer(AssemblyLine,0); // BUG252757 Change to 0 allowed
      AssemblyLine.VALIDATE("Quantity per",10);
      ValidateQuantityPer(AssemblyLine,10);
      ValidateQuantity(AssemblyLine,5 * 10);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE BUG252757QtyPerInitValue@121();
    VAR
      AssemblyLine@1000 : Record 901;
      ItemNo@1005 : Code[20];
    BEGIN
      Initialize;
      // BUG252757 Qty per on the Assembly Line cannot be set to 0
      ItemNo := LibraryKitting.CreateItemWithNewUOM(100,700);
      AssemblyLine.INIT;
      AssemblyLine.Type := AssemblyLine.Type::Item;
      AssemblyLine.VALIDATE("No.",ItemNo);

      ValidateQuantityPer(AssemblyLine,0);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE ChangeUOMHeader@33();
    VAR
      AssemblyHeader@1004 : Record 900;
      AssemblyLine@1002 : Record 901;
      Item@1006 : Record 27;
      childItem@1007 : Record 27;
      ItemUOM@1003 : Record 5404;
      NonBaseUOM@2000 : Record 204;
      Costprice@1001 : Decimal;
      parent@1005 : Code[20];
    BEGIN
      Initialize;
      Costprice := 400;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(Costprice,700,1);
      Item.GET(parent);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,5));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(100,700));
      LibraryKitting.AddLine(
        AssemblyHeader,AssemblyLine.Type::Item,childItem."No.",childItem."Base Unit of Measure",20,4,'Test UOM Header');

      AssemblyHeader.UpdateUnitCost;
      ValidateOrderUnitCost(AssemblyHeader,400);
      LibraryInventory.CreateUnitOfMeasureCode(NonBaseUOM);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,Item."No.",NonBaseUOM.Code,6);
      AssemblyHeader.VALIDATE("Unit of Measure Code",NonBaseUOM.Code);
      AssemblyHeader.UpdateUnitCost;
      ValidateOrderUnitCost(AssemblyHeader,2400);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE Bug233632ChangeUOMConsume@39();
    VAR
      AssemblyHeader@1004 : Record 900;
      AssemblyLine@1002 : Record 901;
      Item@1006 : Record 27;
      ItemUOM@1003 : Record 5404;
      NonBaseUOM@2000 : Record 204;
      Costprice@1001 : Decimal;
      parent@1005 : Code[20];
    BEGIN
      Initialize;
      Costprice := 400;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(Costprice,700,1);
      Item.GET(parent);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      LibraryInventory.CreateUnitOfMeasureCode(NonBaseUOM);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,Item."No.",NonBaseUOM.Code,2);

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,10));
      Item.GET(LibraryKitting.CreateItemWithNewUOM(100,700));

      AssemblyHeader.VALIDATE("Quantity to Assemble",3);
      AssemblyHeader.VALIDATE("Unit of Measure Code",NonBaseUOM.Code);

      LibraryKitting.AddLine(AssemblyHeader,AssemblyLine.Type::Item,Item."No.",Item."Base Unit of Measure",10,1,'Test UOM consume');

      LibraryAssembly.SetLinkToLines(AssemblyHeader,AssemblyLine);
      AssemblyLine.FINDFIRST;
      ValidateQuantityPer(AssemblyLine,1);
      ValidateQuantityToConsume(AssemblyLine,10);

      AssemblyHeader.VALIDATE("Quantity to Assemble",3);

      LibraryAssembly.SetLinkToLines(AssemblyHeader,AssemblyLine);
      AssemblyLine.FINDFIRST;
      ValidateQuantityPer(AssemblyLine,1);
      ValidateQuantity(AssemblyLine,10);
      ValidateQuantityToConsume(AssemblyLine,3);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE ValidateQuantityPerOrder@26();
    VAR
      BOMComp@1002 : Record 90;
      AssemblyHeader@1001 : Record 900;
      AssemblyLine@1003 : Record 901;
      childItem@2000 : Record 27;
      parent@1000 : Code[20];
      OrderQuantity@1004 : Decimal;
      BomQuantity@1005 : Decimal;
    BEGIN
      Initialize;
      OrderQuantity := 5;
      BomQuantity := 1;

      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(100,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",BomQuantity,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,OrderQuantity));

      validateCount(AssemblyHeader."No.",1);
      AsmLineFindFirst(AssemblyHeader,AssemblyLine);
      ValidateQuantityPer(AssemblyLine,BomQuantity);
      validateQuantityonLines(AssemblyHeader."No.",OrderQuantity * BomQuantity);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE PartiallypostedRefresh@20();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1000 : Record 90;
      childItem@2000 : Record 27;
      parent@1002 : Code[20];
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,4));
      validateCount(AssemblyHeader."No.",1);
      AssemblyHeader."Remaining Quantity (Base)" := 3;
      AssemblyHeader.VALIDATE(Quantity,2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE QuantityToAssemble@21();
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      Initialize;
      AssemblyHeader.INIT;
      AssemblyHeader.Quantity := 10;
      AssemblyHeader."Remaining Quantity" := 2;
      AssemblyHeader."Qty. per Unit of Measure" := 1;
      AssemblyHeader.VALIDATE("Quantity to Assemble",2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE QuantityToAssembleFail@22();
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      Initialize;
      AssemblyHeader.INIT;
      AssemblyHeader.Quantity := 10;
      AssemblyHeader."Remaining Quantity" := 2;
      ASSERTERROR AssemblyHeader.VALIDATE("Quantity to Assemble",3);
    END;

    [Test]
    PROCEDURE QuantityToConsume@48();
    VAR
      AssemblyLine@1000 : Record 901;
    BEGIN
      Initialize;
      AssemblyLine.INIT;
      AssemblyLine."Remaining Quantity" := 2;
      AssemblyLine."Qty. per Unit of Measure" := 1;
      AssemblyLine.VALIDATE("Quantity to Consume",2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE QuantityToConsumeFail@47();
    VAR
      AssemblyLine@1000 : Record 901;
    BEGIN
      Initialize;
      AssemblyLine.INIT;
      AssemblyLine."Remaining Quantity" := 2;
      ASSERTERROR AssemblyLine.VALIDATE("Quantity to Consume",3);
    END;

    LOCAL PROCEDURE CreatePostedAssemblyHeader@3(VAR PostedAsmHeader@1000 : Record 910;AssemblyHeader@1006 : Record 900);
    VAR
      AssemblySetup@1005 : Record 905;
      NoSeriesManagement@1001 : Codeunit 396;
      PostedAssemblyNos@1003 : Code[10];
    BEGIN
      PostedAssemblyNos := LibraryUtility.GetGlobalNoSeriesCode;
      AssemblySetup.GET;
      IF AssemblySetup."Posted Assembly Order Nos." <> PostedAssemblyNos THEN BEGIN
        AssemblySetup."Posted Assembly Order Nos." := PostedAssemblyNos;
        AssemblySetup.MODIFY;
      END;

      CLEAR(PostedAsmHeader);
      PostedAsmHeader."No." := NoSeriesManagement.GetNextNo(PostedAssemblyNos,0D,TRUE);
      PostedAsmHeader.TRANSFERFIELDS(AssemblyHeader);
      PostedAsmHeader."Order No." := AssemblyHeader."No.";
      PostedAsmHeader.INSERT;
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE ChangeQuantity@25();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1000 : Record 90;
      childItem@1003 : Record 27;
      parent@1002 : Code[20];
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,1));
      validateCount(AssemblyHeader."No.",1);
      AssemblyHeader.VALIDATE(Quantity,2);
      validateCount(AssemblyHeader."No.",1);
      validateQuantityonLines(AssemblyHeader."No.",2);

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE ZeroQuantity@24();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1000 : Record 90;
      childItem@2000 : Record 27;
      parent@1002 : Code[20];
    BEGIN
      Initialize;
      parent := LibraryKitting.CreateStdCostItemWithNewUOM(500,700,1);
      childItem.GET(MakeItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parent,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parent,0));
      validateCount(AssemblyHeader."No.",0);

      ASSERTERROR ERROR('') // roll back
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@43(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    LOCAL PROCEDURE ValidateLineUnitCost@19(AssemblyLine@1000 : Record 901;ExpectedCost@1001 : Decimal);
    BEGIN
      Assert.AreEqual(AssemblyLine."Unit Cost",ExpectedCost,
        STRSUBSTNO('Bad Unit Cost of Assembly Line %1 Expected %2, got %3',
          AssemblyLine."Document No.",
          ExpectedCost,
          AssemblyLine."Unit Cost"));
    END;

    LOCAL PROCEDURE ValidateOrderUnitCost@36(AssemblyHeader@1000 : Record 900;ExpectedCost@1001 : Decimal);
    BEGIN
      Assert.AreEqual(AssemblyHeader."Unit Cost",ExpectedCost,
        STRSUBSTNO('Bad Unit Cost of Assembly Order %1 Expected %2, got %3',
          AssemblyHeader."No.",
          ExpectedCost,
          AssemblyHeader."Unit Cost"));
    END;

    LOCAL PROCEDURE ValidateLineResourceTypeUsage@30(AssemblyLine@1001 : Record 901;ExpectedUsageType@1000 : Integer);
    VAR
      Value@1002 : Integer;
    BEGIN
      Value := AssemblyLine."Resource Usage Type";
      Assert.AreEqual(Value,ExpectedUsageType,
        STRSUBSTNO('Bad Resource Usage Type in Assembly line %1 Expected %2 got %3',
          AssemblyLine."Document No.",
          ExpectedUsageType,
          Value));
    END;

    [Normal]
    LOCAL PROCEDURE validateCount@7(OrderNo@1000 : Code[20];Count@1001 : Integer);
    VAR
      AssemblyHeader@1002 : Record 900;
    BEGIN
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,OrderNo);
      Assert.AreEqual(Count,LibraryAssembly.LineCount(AssemblyHeader),
        STRSUBSTNO(MSGAssertLineCount,OrderNo,Count,LibraryAssembly.LineCount(AssemblyHeader)));
    END;

    [Normal]
    LOCAL PROCEDURE validateDeleted@12(AsmHeader@1000 : Record 900;Count@1001 : Integer);
    VAR
      AssemblyHeader@1002 : Record 900;
    BEGIN
      Assert.IsFalse(AssemblyHeader.GET(AsmHeader."Document Type"::Order,AsmHeader."No."),
        STRSUBSTNO('Order %1 Existed',AsmHeader."No."));

      Assert.AreEqual(LibraryAssembly.LineCount(AssemblyHeader),Count,
        STRSUBSTNO(MSGAssertLineCount,AsmHeader."No.",Count,LibraryAssembly.LineCount(AssemblyHeader)))
    END;

    [Normal]
    LOCAL PROCEDURE validateQuantityonLines@23(OrderNo@1000 : Code[20];Count@1001 : Integer);
    VAR
      AssemblyHeader@1002 : Record 900;
    BEGIN
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,OrderNo);
      Assert.AreEqual(Count,LibraryKitting.TotalQuantity(AssemblyHeader),
        STRSUBSTNO('Bad Line Quantity of Order: %1 expected %2, got %3',OrderNo,Count,LibraryKitting.TotalQuantity(AssemblyHeader)));
    END;

    LOCAL PROCEDURE ValidateQuantityPer@27(AsmLine@1000 : Record 901;ValidQuantity@1001 : Decimal);
    BEGIN
      Assert.AreEqual(ValidQuantity,AsmLine."Quantity per",'Bad Quantity Per');
    END;

    LOCAL PROCEDURE ValidateQuantity@18(AsmLine@1000 : Record 901;ValidQuantity@1001 : Decimal);
    BEGIN
      Assert.AreEqual(AsmLine.Quantity,ValidQuantity,
        STRSUBSTNO('Bad Quantity : expected %1 got %2',ValidQuantity,AsmLine.Quantity))
    END;

    LOCAL PROCEDURE ValidateQuantityToConsume@40(AsmLine@1003 : Record 901;Expected@1002 : Decimal);
    BEGIN
      Assert.AreEqual(AsmLine."Quantity to Consume",Expected,
        STRSUBSTNO('Bad Quantity to Consume: expected %1 got %2',Expected,AsmLine."Quantity to Consume"))
    END;

    LOCAL PROCEDURE ValidateTotalQuantityToConsume@44(AsmHeader@1001 : Record 900;Expected@1000 : Decimal);
    VAR
      Actual@1002 : Decimal;
    BEGIN
      Actual := TotalToConsume(AsmHeader);
      Assert.AreEqual(Expected,Actual,
        STRSUBSTNO('Bad Total Quantity to Consume: expected %1 got %2',Expected,Actual))
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmItemChange@38(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    LOCAL PROCEDURE TotalToConsume@42(AsmHeader@1002 : Record 900) : Decimal;
    VAR
      AsmLine@1000 : Record 901;
      TempCount@1001 : Decimal;
    BEGIN
      LibraryAssembly.SetLinkToLines(AsmHeader,AsmLine);
      TempCount := 0;
      IF AsmLine.FINDSET THEN
        REPEAT
          TempCount += AsmLine."Quantity to Consume";
        UNTIL AsmLine.NEXT <= 0;
      EXIT(TempCount);
    END;

    LOCAL PROCEDURE MakeItem@52() : Code[20];
    BEGIN
      EXIT(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
    END;

    LOCAL PROCEDURE MakeItemWithLot@45() : Code[20];
    BEGIN
      EXIT(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
    END;

    LOCAL PROCEDURE AsmLineFindFirst@49(AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1002 : Record 901);
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.FINDFIRST;
    END;

    [Test]
    PROCEDURE VSTF289825@51();
    VAR
      Item@1000 : Record 27;
      AsmLine@1001 : Record 901;
    BEGIN
      // SETUP
      Initialize;
      LibraryInventory.CreateItem(Item);

      // Create a blank asm line with Type blank to trigger the code
      AsmLine.INIT;
      AsmLine.Type := AsmLine.Type::" ";

      // EXERCISE
      ASSERTERROR AsmLine.VALIDATE("Quantity per",1);

      // VERIFY
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,TXTQtyPerNoChange) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE VSTF294294@53();
    VAR
      Item@1002 : Record 27;
      Location@1003 : Record 14;
      Bin@1004 : Record 7354;
      BinContent@1005 : Record 7302;
      AsmHeader@1007 : Record 900;
      WhseEntry@1006 : Record 7312;
      WhseEntry2@1008 : Record 7312;
      PostedAsmHeader@1001 : Record 910;
      UndoPostingManagement@1000 : Codeunit 5817;
    BEGIN
      // SETUP
      Initialize;
      LibraryInventory.CreateItem(Item);

      LibraryWarehouse.CreateLocation(Location);
      Location."Bin Mandatory" := TRUE;
      Location.MODIFY;

      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
      Bin.VALIDATE(Dedicated,TRUE);
      Bin.MODIFY;

      LibraryWarehouse.CreateBinContent(BinContent,Location.Code,'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.Dedicated := Bin.Dedicated;
      BinContent.MODIFY;

      // Simulate posting
      LibraryAssembly.CreateAssemblyHeader(AsmHeader,WORKDATE,Item."No.",Location.Code,LibraryRandom.RandInt(10),'');
      AsmHeader."Bin Code" := Bin.Code;

      WhseEntry2.FINDLAST;
      WhseEntry.INIT;
      WhseEntry."Entry No." := WhseEntry2."Entry No." + 1;
      WhseEntry."Source Type" := DATABASE::"Assembly Header";
      WhseEntry."Source Subtype" := AsmHeader."Document Type";
      WhseEntry."Source No." := AsmHeader."No.";
      WhseEntry."Source Line No." := 0;
      WhseEntry."Location Code" := AsmHeader."Location Code";
      WhseEntry."Item No." := AsmHeader."Item No.";
      WhseEntry."Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      WhseEntry."Bin Code" := AsmHeader."Bin Code";
      WhseEntry."Qty. (Base)" := AsmHeader."Quantity (Base)";
      WhseEntry.INSERT;

      CreatePostedAssemblyHeader(PostedAsmHeader,AsmHeader);

      // EXERCISE
      UndoPostingManagement.TestAsmHeader(PostedAsmHeader);

      // VERIFY
      // no error has occured

      ASSERTERROR ERROR('') // roll back
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [SCM]
    }
    END.
  }
}

