OBJECT Codeunit 137059 SCM RTAM Item Tracking-II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalBatch@1037 : Record 233;
      ItemJournalTemplate@1036 : Record 82;
      OutputItemJournalTemplate@1013 : Record 82;
      OutputItemJournalBatch@1011 : Record 233;
      ConsumptionItemJournalTemplate@1044 : Record 82;
      ConsumptionItemJournalBatch@1038 : Record 233;
      WarehouseJournalTemplate@1034 : Record 7309;
      WarehouseJournalBatch@1025 : Record 7310;
      LocationYellow2@1052 : Record 14;
      LocationYellow@1049 : Record 14;
      LocationSilver@1047 : Record 14;
      LocationBlue@1019 : Record 14;
      LocationWhite@1008 : Record 14;
      LocationIntransit@1014 : Record 14;
      ItemTrackingCodeSerialSpecificWithWarehouse@1053 : Record 6502;
      ItemTrackingCodeSerialSpecific@1005 : Record 6502;
      ItemTrackingCodeLotSpecific@1018 : Record 6502;
      ItemTrackingCodeLotSpecificWithWarehouse@1057 : Record 6502;
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1056 : Codeunit 130502;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1024 : Codeunit 130509;
      LibraryPlanning@1061 : Codeunit 132203;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryManufacturing@1009 : Codeunit 132202;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryVariableStorage@1021 : Codeunit 131004;
      LibrarySetupStorage@1063 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      UpdateTracking@1012 : Boolean;
      CreateNewLotNo@1007 : Boolean;
      PartialTracking@1029 : Boolean;
      ItemTrackingSummaryCancel@1058 : Boolean;
      AssignTracking@1035 : 'None,SerialNo,LotNo,SelectTrackingEntries';
      ItemTrackingAction@1050 : 'None,AvailabilitySerialNo,AvailabilityLotNo';
      TrackingQuantity@1023 : Decimal;
      MessageCounter@1042 : Integer;
      NumberOfLineEqualError@1039 : TextConst 'ENU=Number of Lines must be same.';
      GlobalDocumentNo@1040 : Code[20];
      SynchronizeItemTracking@1041 : TextConst 'ENU=Do you want to synchronize item tracking on the line with item tracking on the related drop shipment sales order line?';
      AvailabilityWarnings@1043 : TextConst 'ENU=There are availability warnings on one or more lines.';
      SynchronizationCancelled@1062 : TextConst 'ENU=Synchronization cancel';
      ItemTrackingNotMatch@1060 : TextConst 'ENU=Item Tracking does not match.';
      PostPurchaseOrderError@1059 : TextConst 'ENU=You cannot invoice this purchase order before the associated sales orders have been invoiced. Please invoice sales order %1 before invoicing this purchase order.';
      GlobalItemNo@1015 : Code[20];
      QuantityBase@1001 : Decimal;
      WarehouseActivityLineError@1020 : TextConst 'ENU=There is no Warehouse Activity Line within the filter.';
      NosOfLineError@1026 : TextConst 'ENU=Nos of Line must be same.';
      PickActivityCreated@1028 : TextConst 'ENU="Pick activity no. "';
      PutAwayActivityCreated@1027 : TextConst 'ENU="Put-away activity no. "';
      MovementActivityCreated@1030 : TextConst 'ENU=Movement activity no';
      TransferOrderDeleted@1031 : TextConst 'ENU=The transfer order';
      SerialNoError@1032 : TextConst 'ENU=Serial No does not exist.';
      LotNoError@1033 : TextConst 'ENU=Lot No does not exist.';
      WhseItemTrackingNotEnabledError@1017 : TextConst 'ENU=Warehouse item tracking is not enabled for No. %1.';
      PostJournalLines@1045 : TextConst 'ENU=Do you want to post the journal lines?';
      JournalLinesSuccessfullyPosted@1046 : TextConst 'ENU=The journal lines were successfully posted.';
      SerialNumberRequiredError@1048 : TextConst '@@@=%1 - Item No.;ENU=You must assign a serial number for item %1.';
      SerialNoValueError@1051 : TextConst 'ENU=Serial No. must have a value in Warehouse Activity Line';
      ValueNotEqual@1054 : TextConst 'ENU=The Cost Amount(Actual) is not equal to Amount';
      ItemTracingOutputErr@1055 : TextConst 'ENU=There is no Parent Item Output Entry on Item Tracing Page.';
      IncorrectShippedQtyMsg@1022 : TextConst '@@@=%1: Field(Quantity Shipped), %2: Field(Qty. to Ship);ENU=%1 is not equal to %2 of the original Sales Line.';

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,SalesListPageHandler,ItemTrackingConfirmHandler,SynchronizeMessageHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentSerialNoSynchronizationError@257();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithDropShipmentSerialNo(FALSE);  // Post Sales Order -False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,SalesListPageHandler,AvailabilityConfirmHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentSerialNoWithoutPostSalesOrderError@256();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithDropShipmentSerialNo(TRUE);  // Post Sales Order -True.
    END;

    LOCAL PROCEDURE PurchaseOrderWithDropShipmentSerialNo@255(PostSalesOrder@1006 : Boolean);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1000 : Record 27;
      PurchaseHeader@1005 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Serial Specific Tracking Code, Create Sales Order with Purchasing Code, Create Purchase Order and Drop Shipment.
      Quantity := 10 * LibraryRandom.RandInt(5);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",'',Quantity,FALSE);  // Multiple line as False.

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Assign Tracking as SerialNo.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      CreatePurchaseHeaderAndGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,0);  // Assign Global variable for Page Handler. PartialTracking as True.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Update Tracking on Page Handler ItemTrackingDropShipmentPageHandler.

      IF PostSalesOrder THEN BEGIN
        PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);
        // Exercise.
        ASSERTERROR PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);
        // Verify: Verify Error for Posting Purchase Invoice without Post Sales with Invoice Option.
        Assert.ExpectedError(STRSUBSTNO(PostPurchaseOrderError,SalesHeader."No."));
      END ELSE BEGIN
        // Exercise.
        ASSERTERROR PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);
        // Verify: Verify Error for Posting Purchase Invoice for cancelled Synchronization message.
        Assert.ExpectedError(ItemTrackingNotMatch);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,SalesListPageHandler,AvailabilityConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentPartialChangedSerialNo@254();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1000 : Record 27;
      PurchaseHeader@1005 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code, Create Purchase Order and Drop Shipment.
      Initialize;
      Quantity := 10 * LibraryRandom.RandInt(5);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",'',Quantity,FALSE);  // Multiple line as False.

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Assign Tracking as SerialNo.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      CreatePurchaseHeaderAndGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,0);  // Assign Global variable for Page Handler. PartialTracking as True.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Update Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,Quantity / 2);  // UpdateTracking as True and Tracking Quantity.
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;

      SalesLine.OpenItemTrackingLines;  // Change Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      UpdateQtyToInvoiceOnSalesLine(SalesHeader."No.",Quantity / 2);  // Partial Qty to Invoice.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Change Tracking line on page handler ItemTrackingDropShipmentPageHandler.
      UpdateQtyToInvoiceOnPurchaseLine(PurchaseHeader."No.",Quantity / 2);  // Update Quantity to Invoice Partially on Purchase Order.

      // Exercise: Post Purchase Order as Invoice.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,SalesListPageHandler,QuantityToCreatePageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrderWithMultipleLinesDropShipmentSerialNo@253();
    VAR
      Item@1004 : Record 27;
      Item2@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1005 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Items with Tracking Code, Create Sales Order with two Lines with Purchasing Code, Create Purchase Order and Drop Shipment.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",Item2."No.",Quantity,TRUE);  // Multiple line as True.
      CreatePurchaseHeaderAndGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Assign Tracking as SerialNo.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking line on page handler ItemTrackingDropShipmentPageHandler.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);

      // Exercise: Post Purchase Order as Invoice.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,SalesListPageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentPartialLotNo@252();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1000 : Record 27;
      PurchaseHeader@1005 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code, Create Purchase Order and Drop Shipment.
      Initialize;
      Quantity := 10 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",'',Quantity,FALSE);  // Multiple line as false.
      QuantityBase := Quantity;  // Assign Global Variable for Page Handler.
      CreatePurchaseHeaderAndGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0);  // Assign Global variable for Page Handler. Assign Tracking as Lot No.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking line on page handler ItemTrackingDropShipmentPageHandler.

      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity / 2);  // Assign Global variable for Page Handler. PartialTracking as True and Tracking Quantity.
      ItemTrackingAction := ItemTrackingAction::AvailabilityLotNo;  // Assign Global variable for Page Handler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking line on page handler ItemTrackingDropShipmentPageHandler.
      SelectSalesLine(SalesLine,SalesHeader."No.");
      UpdateQtyToShipOnSalesLine(SalesLine,Quantity / 2);  // Partial Quantity for ship.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,Quantity / 2);  // Assign Global variable for Page Handler. Update Tracking as True and Tracking Quantity.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // Exercise: Post Purchase Order as Invoice.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Lot No in Posted Sales Invoice and Purchase Invoice.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0);
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,SalesListPageHandler,QuantityToCreatePageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrderWithMultipleLinesDropShipmentPartialSerialNoLotNo@251();
    VAR
      Item@1004 : Record 27;
      Item2@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1007 : Record 39;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Items with Tracking Code, Create Sales Order with Purchasing Code, Create Purchase Order and Drop Shipment.
      Initialize;
      Quantity := 10 * LibraryRandom.RandInt(5);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",Item2."No.",Quantity,TRUE);  // Multiple line as True.
      CreatePurchaseHeaderAndGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True and assign Tracking as SerialNo.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");

      SetGlobalValue(Item."No.",TRUE,FALSE,TRUE,AssignTracking::None,Quantity / 2);  // Create New Lot as True,PartialTracking - True and Tracking Quantity.
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global variable for Page Handler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Tracking on Page handler ItemTrackingDropShipmentPageHandler.
      UpdateQuantityToReceiveOnMultiplePurchaseLines(PurchaseLine,PurchaseHeader."No.",Quantity / 2);  // Partial Quantity.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);

      // Exercise: Post Purchase Order and Sales Order as Invoice.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,AvailabilityConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE RequisitionWorksheetWithDropShipmentSerialNo@250();
    VAR
      RequisitionLine@1001 : Record 246;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code, Drop Shipment for Sales Line on Requisition Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",'',Quantity,FALSE);

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Assign Tracking as SerialNo.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,FALSE);  // Drop Shipment On Requisition Line.
      FindPurchaseHeader(PurchaseHeader,Item."No.");
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);

      // Exercise: Post Purchase Order as Invoice and Sales Order with Ship and Invoice Option.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE RequisitionWorksheetWithDropShipmentForMultipleLinesSerialNo@249();
    VAR
      RequisitionLine@1001 : Record 246;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code on multiple Lines, Drop Shipment for Sales Line on Requisition Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",Item."No.",Quantity,TRUE);

      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,FALSE);  // Drop Shipment On Requisition Line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Assign Tracking as SerialNo.
      FindPurchaseHeader(PurchaseHeader,Item."No.");
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);  // Post with Ship and Invoice option.
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);  // Update Vendor Invoice No On Purchase order created.

      // Exercise: Post Purchase Order with Invoice option.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE RequisitionWorksheetWithDropShipmentPartialLotNo@248();
    VAR
      RequisitionLine@1001 : Record 246;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code on multiple Lines, Drop Shipment for Sales Line on Requisition Worksheet.
      Initialize;
      Quantity := 10 * LibraryRandom.RandInt(5);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",'',Quantity,FALSE);
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,FALSE);  // Drop Shipment On Requisition Line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0);  // Assign Global variable for Page Handler. Assign Tracking as LotNo.
      FindPurchaseHeader(PurchaseHeader,Item."No.");
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.

      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity / 2);  // PartialTracking as True and Tracking Quantity.
      ItemTrackingAction := ItemTrackingAction::AvailabilityLotNo;  // Assign Global variable for Page Handler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");
      SelectSalesLine(SalesLine,SalesHeader."No.");
      UpdateQtyToShipOnSalesLine(SalesLine,Quantity / 2);  // Partial Quantity to ship.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);

      // Exercise: Post Purchase Order and Sales Order with Invoice Option.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Lot No in Posted Sales Invoice and Purchase Invoice.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0);
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE RequisitionWorksheetWithDropShipmentForMultipleLinesPartialSerialNoLotNo@245();
    VAR
      RequisitionLine@1001 : Record 246;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1008 : Record 39;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code on multiple Lines, Drop Shipment for Sales Line on Requisition Worksheet.
      Initialize;
      Quantity := 10 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",Item."No.",Quantity,TRUE);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True and assign Tracking as SerialNo.
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,TRUE);  // Drop Shipment On Requisition Line and Assign Serial No.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity / 2);  // Assign Global variable for Page Handler. PartialTracking as True and Tracking Quantity.
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global variable for Page Handler.
      FindPurchaseHeader(PurchaseHeader,Item."No.");
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");

      FindPurchaseHeader(PurchaseHeader,Item."No.");
      UpdateQuantityToReceiveOnMultiplePurchaseLines(PurchaseLine,PurchaseHeader."No.",Quantity / 2);
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);  // Partially Receive.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);

      // Exercise: Post Purchase Orders with Invoice option.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No in Posted Sales Invoice and Purchase Invoice.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.");
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PickSelectionPageHandler,PostedLinesPageHandler)]
    PROCEDURE PostedSalesShipmentPartialPickFromPickWorksheetSerialLotNo@8();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetSerialLotNo(TRUE);  // Partial Pick - True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PickSelectionPageHandler,PostedLinesPageHandler)]
    PROCEDURE PostedSalesShipmentPickFromPickWorksheetSerialLotNo@3();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetSerialLotNo(FALSE);  // Partial Pick - False.
    END;

    LOCAL PROCEDURE PickFromPickWorksheetSerialLotNo@76(PartialPick@1013 : Boolean);
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WhseWorksheetName@1008 : Record 7327;
      WhseWorksheetLine@1010 : Record 7326;
      WarehouseShipmentLine@1012 : Record 7321;
      WhseWorksheetTemplate@1011 : Record 7328;
      GetSourceDocOutbound@1009 : Codeunit 5752;
      Quantity@1016 : Decimal;
    BEGIN
      // Create Item with SN Specific, Post Warehouse Receipt from Purchase Order with Tracking, Warehouse Shipment form Sales Order with Tracking, Create and Register Pick from Pick Worksheet.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,TRUE,FALSE);  // Post Receipt as True.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);  // Assign Global variable for Page Handler. Assign Tracking as SelectTrackingEntries.
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationWhite.Code,Quantity,TRUE);  // Tracking as True.
      GlobalDocumentNo := WarehouseShipmentHeader."No.";  // Assign Global variable for Page Handler.

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Pick);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationWhite.Code);
      IF PartialPick THEN BEGIN
        UpdateQtyToHandleCreateAndRegisterPickFromPickWorksheet(
          WhseWorksheetLine,WhseWorksheetName,SalesHeader."No.",Item."No.",LocationWhite.Code,Quantity / 2);  // Partial.
        UpdateQtyToHandleCreateAndRegisterPickFromPickWorksheet(
          WhseWorksheetLine,WhseWorksheetName,SalesHeader."No.",Item."No.",LocationWhite.Code,Quantity / 2);  // Partial.
        SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity / 2);  // Assign Global variable for Page Handler. PartialTracking as True and Tracking Quantity.
        ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global variable for Page Handler.
        UpdateQtyToShipAndPostWhseShipment(WarehouseShipmentHeader,SalesHeader."No.",Quantity / 2);  // Partial Shipment Posting.
      END ELSE BEGIN
        FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationWhite.Code);
        LibraryWarehouse.CreatePickFromPickWorksheet(
          WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
          LocationWhite.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
        RegisterWarehouseActivity(
          SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order",LocationWhite.Code,Item."No.",
          WarehouseActivityLine."Activity Type"::Pick,TRUE);
      END;
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify Tracking line on Posted Sales Shipments.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      VerifyTrackingOnSalesShipment(SalesHeader."No.",PartialPick);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,WhseSourceCreateDocumentReportHandler,WarehouseActivityMessageHandler)]
    PROCEDURE MovementAndPickFromInternalPickSerialLotNo@11();
    VAR
      Item@1001 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      WhseWorksheetName@1008 : Record 7327;
      WhseInternalPutAwayLine@1016 : Record 7332;
      Bin@1015 : Record 7354;
      WhseWorksheetTemplate@1020 : Record 7328;
      WhseInternalPickHeader@1022 : Record 7333;
      WhseInternalPickLine@1023 : Record 7334;
      ProductionOrder@1002 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Production Order and Post Output with Tracking, Create Internal Put-away, Create and Register Put-away, Movement and Create Internal Pick.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.

      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateProductionOrderAndPostOutputJournalWithTracking(ProductionOrder,Item."No.",LocationWhite.Code,Bin.Code,Quantity);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,Quantity);  // Tracking Quantity.
      CreateWhseInternalPutawayWithTracking(WhseInternalPutAwayLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,TRUE);  // Tracking as True.
      CreatePutAwayDocAndRegisterWarehouseActivity(WhseInternalPutAwayLine,WarehouseActivityLine,Item."No.",LocationWhite.Code,TRUE);  // Register Activity as True.

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Movement);
      CreateMovementFormMovementWorkSheet(WhseWorksheetName,WarehouseActivityLine,Item."No.",LocationWhite.Code,Quantity);
      RegisterWarehouseActivity(
        WhseWorksheetName."Worksheet Template Name",WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::Movement,FALSE);  // AutoFillQuantity as False.

      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreateWhseInternalPick(WhseInternalPickHeader,WhseInternalPickLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,TRUE);  // Tracking as True.

      // Exercise.
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);

      // Verify: Verify Serial and Lot No on Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WhseInternalPickHeader."No.",WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",Quantity,
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,PutAwaySelectionPageHandler,WhseSourceCreateDocumentReportHandler,PickSelectionPageHandler,WarehouseActivityMessageHandler)]
    PROCEDURE MovementAndPickFromPickWorksheetSerialLotNo@41();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickFromPickWorksheet(FALSE);  // Delete Pick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,PutAwaySelectionPageHandler,WhseSourceCreateDocumentReportHandler,PickSelectionPageHandler,WarehouseActivityMessageHandler)]
    PROCEDURE MovementAndPickFromPickWorksheetRecreatePickSerialLotNo@97();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickFromPickWorksheet(TRUE);  // Delete Pick as True.
    END;

    LOCAL PROCEDURE MovementAndPickFromPickWorksheet@10(DeletePick@1005 : Boolean);
    VAR
      Item@1001 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      WhseWorksheetName@1008 : Record 7327;
      WhseInternalPutAwayLine@1016 : Record 7332;
      Bin@1015 : Record 7354;
      WhseWorksheetTemplate@1020 : Record 7328;
      WhseInternalPickHeader@1022 : Record 7333;
      WhseInternalPickLine@1023 : Record 7334;
      WarehouseActivityHeader@1002 : Record 5766;
      ProductionOrder@1003 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with SN Specific, Production Order and Post Output with Tracking,Create Internal Put-away,Create Put-away for worksheet,Create Movement,Internal Pick and Create Pick for Pick Worksheet.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");

      CreateProductionOrderAndPostOutputJournalWithTracking(ProductionOrder,Item."No.",LocationWhite.Code,Bin.Code,Quantity);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,Quantity);  // Tracking Quantity.
      CreateWhseInternalPutawayWithTracking(WhseInternalPutAwayLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,FALSE);  // Tracking as False.
      GlobalDocumentNo := WhseInternalPutAwayLine."No.";  // Assign Global variable for Page Handler.

      CreatePutAwayFromPutAwayWorksheet(WarehouseActivityLine,LocationWhite.Code,Item."No.",TRUE);  // Tracking as True.
      RegisterWarehouseActivity(
        '',WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",FALSE);  // AutoFillQuantity as False.
      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Movement);
      CreateMovementFormMovementWorkSheet(WhseWorksheetName,WarehouseActivityLine,Item."No.",LocationWhite.Code,Quantity);
      RegisterWarehouseActivity(
        WhseWorksheetName."Worksheet Template Name",WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::Movement,FALSE);  // AutoFillQuantity as False.

      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreateWhseInternalPick(WhseInternalPickHeader,WhseInternalPickLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,FALSE);
      GlobalDocumentNo := WhseInternalPickHeader."No.";  // Assign Global variable for Page Handler.
      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Pick);

      // Exercise: Create Pick from Pick Worksheet, Delete Pick and Recreate.
      CreatePickFromPickWorksheet(WhseWorksheetName,LocationWhite.Code,Item."No.",TRUE);  // Tracking as True.
      IF DeletePick THEN BEGIN
        FindWarehouseActivityHeader(
          WarehouseActivityHeader,'',WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        WarehouseActivityHeader.DELETE(TRUE);
        CreatePickFromPickWorksheet(WhseWorksheetName,LocationWhite.Code,Item."No.",FALSE);
      END;

      // Verify: Verify Serial and Lot No on Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        '',WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",Quantity,
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,WhseSourceCreateDocumentReportHandler,PutAwaySelectionPageHandler,PutAwayActivityMessageHandler)]
    PROCEDURE PutAwayFromPutAwayWorksheetRecreatePutAwaySerialLotNo@22();
    VAR
      Item@1001 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      WhseInternalPutAwayLine@1016 : Record 7332;
      Bin@1015 : Record 7354;
      WarehouseActivityHeader@1019 : Record 5766;
      ProductionOrder@1002 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Production Order and Post Output with Tracking, Create Internal Put-away, Create Movement and Delete Put-away.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.

      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateProductionOrderAndPostOutputJournalWithTracking(ProductionOrder,Item."No.",LocationWhite.Code,Bin.Code,Quantity);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,Quantity);  // Tracking Quantity.
      CreateWhseInternalPutawayWithTracking(WhseInternalPutAwayLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,TRUE);  // Tracking as True.
      GlobalDocumentNo := WhseInternalPutAwayLine."No.";  // Assign Global variable for Page Handler.

      CreatePutAwayDocAndRegisterWarehouseActivity(WhseInternalPutAwayLine,WarehouseActivityLine,Item."No.",LocationWhite.Code,FALSE);  // RegisterActivity as False.
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityHeader.DELETE(TRUE);

      // Exercise: Recreate Put-away from Put-away Worksheet.
      CreatePutAwayFromPutAwayWorksheet(WarehouseActivityLine,LocationWhite.Code,Item."No.",FALSE);  // Tracking false.

      // Verify: Verify Serial and Lot No on Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        '',WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",Quantity,
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,WhseSourceCreateDocumentReportHandler,PutAwayMovementMessageHandler)]
    PROCEDURE MovementFromMovementWorksheetRecreateMovementSerialLotNo@53();
    VAR
      Item@1001 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseActivityLine2@1025 : Record 5767;
      WhseWorksheetName@1008 : Record 7327;
      WhseInternalPutAwayLine@1016 : Record 7332;
      Bin@1015 : Record 7354;
      WarehouseActivityHeader@1019 : Record 5766;
      WhseWorksheetTemplate@1020 : Record 7328;
      ProductionOrder@1002 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Production Order and Post Output with Tracking,Create Internal Put-away,Create Movement and Delete Movement.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.

      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateProductionOrderAndPostOutputJournalWithTracking(ProductionOrder,Item."No.",LocationWhite.Code,Bin.Code,Quantity);
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,Quantity);  // Tracking Quantity..
      CreateWhseInternalPutawayWithTracking(WhseInternalPutAwayLine,Bin."Zone Code",Bin.Code,Item."No.",Quantity,TRUE);  // Tracking as True.
      CreatePutAwayDocAndRegisterWarehouseActivity(WhseInternalPutAwayLine,WarehouseActivityLine2,Item."No.",LocationWhite.Code,TRUE);  // RegisterActivity as True.

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Movement);
      CreateMovementFormMovementWorkSheet(WhseWorksheetName,WarehouseActivityLine2,Item."No.",LocationWhite.Code,Quantity);
      FindWarehouseActivityHeader(
        WarehouseActivityHeader,WhseWorksheetName."Worksheet Template Name",WarehouseActivityLine."Source Document"::" ",
        LocationWhite.Code,Item."No.",WarehouseActivityLine."Activity Type"::Movement);
      WarehouseActivityHeader.DELETE(TRUE);

      // Exercise: Recreate Movement From Movement Worksheet.
      CreateMovementFormMovementWorkSheet(WhseWorksheetName,WarehouseActivityLine2,Item."No.",LocationWhite.Code,Quantity);

      // Verify: Verify Serial and Lot No on Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WhseWorksheetName."Worksheet Template Name",WarehouseActivityLine."Source Document"::" ",LocationWhite.Code,Item."No.",
        Quantity,WarehouseActivityLine."Activity Type"::Movement);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PutAwayErrorWhenUsePutAwayWorksheetSerialLotNo@25();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1012 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      // Setup: Update White location,Create Item with SN Specific, Create and Post Warehouse Receipt from Purchase Order.
      Initialize;
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,TRUE,TRUE);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10),FALSE,FALSE);  // PostReceipt as False.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Exercise: Find Warehouse Activity line for Put-away.
      ASSERTERROR FindWarehouseActivityLine(
          WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,
          Item."No.",'',WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify: Verify error message.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,WarehouseActivityLineError) > 0,GETLASTERRORTEXT);

      // Tear Down.
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,PutAwaySelectionPageHandler,WhseSourceCreateDocumentReportHandler,WhseReceiptPutAwayMessageHandler)]
    PROCEDURE PutAwayUsingWorksheetWhenUsePutAwayWorksheetSerialLotNo@21();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1012 : Record 7316;
      WarehouseActivityLine@1003 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Update White location,Create Item with SN Specific, Create and Post Warehouse Receipt from Purchase Order.
      Initialize;
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,TRUE,TRUE);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,FALSE,FALSE);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      FindPostedWhseReceiptHeader(WarehouseReceiptHeader."No.");

      // Exercise: Create Put-away from Put-away Worksheet.
      CreatePutAwayFromPutAwayWorksheet(WarehouseActivityLine,LocationWhite.Code,Item."No.",FALSE);

      // Verify: Verify Warehouse Activity Line for Put-away.
      VerifyWarehouseActivityLine(
        PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,Item."No.",Quantity,
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Tear Down.
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PutAwaySelectionPageHandler,WhseSourceCreateDocumentReportHandler,TransferOrderMessageHandler)]
    PROCEDURE PutAwayUsingWorksheetForTransferWhenUsePutAwayWorksheetSerialLotNo@27();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1012 : Record 7316;
      TransferHeader@1018 : Record 5740;
      WarehouseActivityLine@1004 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Update White location,Create Item with SN Specific,Create and Post Purchase Order,Create Transfer Order and Post Warehouse Receipt.
      Initialize;
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,TRUE,TRUE);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity);

      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);  // Assign Global variable for Page Handler.Assign Tracking as Select Tracking Entries.
      CreateTransferOrderAndPostWhseReceipt(
        TransferHeader,WarehouseReceiptHeader,LocationBlue.Code,LocationWhite.Code,Item."No.",Quantity);
      FindPostedWhseReceiptHeader(WarehouseReceiptHeader."No.");

      // Exercise: Create Put-away from Putaway Worksheet.
      CreatePutAwayFromPutAwayWorksheet(WarehouseActivityLine,LocationWhite.Code,Item."No.",FALSE);

      // Verify: Verify Warehouse Activity Line for Put-away.
      VerifyWarehouseActivityLine(
        TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",LocationWhite.Code,Item."No.",Quantity,
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Tear Down.
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,TransferOrderMessageHandler)]
    PROCEDURE TransferReceiptAndRegisterPutAwaySerialLotNo@26();
    VAR
      Item@1001 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseActivityHeader@1002 : Record 5766;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1012 : Record 7316;
      TransferHeader@1018 : Record 5740;
      RegisteredWhseActivityLine@1003 : Record 5773;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Update White location,Create Item with SN Specific,Create and Post Purchase Order,Create Transfer Order and Post Warehouse Receipt.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity);

      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);  // Assign Global variable for Page Handler.Assign Tracking as Select Tracking Entries.
      CreateTransferOrderAndPostWhseReceipt(
        TransferHeader,WarehouseReceiptHeader,LocationBlue.Code,LocationWhite.Code,Item."No.",Quantity);
      FindWarehouseActivityHeader(
        WarehouseActivityHeader,TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",LocationWhite.Code,
        Item."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);

      // Exercise: Create Put-away from Put-away Worksheet.
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify Registered Warehouse Activity Line for Put-away.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Source Document"::"Inbound Transfer",
        Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(CustomizedSerialPageHandler,ItemTrackingCustomizedPageHandler)]
    PROCEDURE PurchaseOrderWithCustomizedTrackingForSerialNo@77();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithCustomizedTracking(FALSE,AssignTracking::SerialNo);  // New Lot No as false.
    END;

    [Test]
    [HandlerFunctions(CustomizedSerialPageHandler,ItemTrackingCustomizedPageHandler)]
    PROCEDURE PurchaseOrderWithCustomizedTrackingForSerialLotNo@105();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithCustomizedTracking(TRUE,AssignTracking::LotNo);  // New Lot No as false.
    END;

    LOCAL PROCEDURE PurchaseOrderWithCustomizedTracking@15(NewLotNo@1000 : Boolean;ItemTrackingAction2@1002 : Option);
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      Quantity@1003 : Decimal;
    BEGIN
      // Create Item With SN Specific and Create a Purchase Order.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity);
      SetGlobalValue(Item."No.",NewLotNo,FALSE,FALSE,AssignTracking::SerialNo,0);

      // Exercise: Assign Customized SN Tracking on Purchase line.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign tracking on Page handler ItemTrackingCustomizedPageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,Quantity);
      ItemTrackingAction := ItemTrackingAction2;

      // Verify: Verify Customized Tracking on Page handler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Verify Tracking on Page handler ItemTrackingCustomizedPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,PickSelectionPageHandler)]
    PROCEDURE PickForProductionOrderSerialLotNo@5();
    VAR
      Item2@1013 : Record 27;
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      WhseWorksheetName@1008 : Record 7327;
      WhseWorksheetLine@1010 : Record 7326;
      WhseWorksheetTemplate@1011 : Record 7328;
      ProductionOrder@1000 : Record 5405;
      RegisteredWhseActivityLine@1020 : Record 5773;
      ProductionBOMHeader@1005 : Record 99000771;
      GetSourceDocOutbound@1009 : Codeunit 5752;
      Quantity@1016 : Decimal;
      ComponentsAtLocation@1007 : Code[10];
    BEGIN
      // Setup: Create Item With SN Specific Tracking include SN Warehouse Tracking, Post Warehouse Receipt from Purchase Order with Tracking, Create Production Order, Create and Register Pick.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");

      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,TRUE,FALSE);  // Post Receipt as True.
      CreateAndRefreshReleasedProductionOrder(
        ProductionOrder,Item2."No.",LocationWhite.Code,LocationWhite."To-Production Bin Code",Quantity);
      GlobalDocumentNo := ProductionOrder."No.";  // Assign Global variable for Page Handler.

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Pick);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationWhite.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationWhite.Code);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationWhite.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      UpdateSerialAndLotNoOnWarehouseActivityLine(
        Item."No.",ProductionOrder."No.",LocationWhite.Code,WarehouseActivityLine."Action Type"::Place);
      UpdateSerialAndLotNoOnWarehouseActivityLine(
        Item."No.",ProductionOrder."No.",LocationWhite.Code,WarehouseActivityLine."Action Type"::Take);

      // Exercise.
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::Pick,TRUE);

      // Verify: Verify Registered Warehouse Activity Line for Pick.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",
        Item."No.",Quantity);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,WhseSourceCreateDocumentReportHandler,WhseReceiptPutAwayMessageHandler)]
    PROCEDURE PutAwayFromProductionOrderSerialLotNo@28();
    VAR
      Item2@1013 : Record 27;
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      ProductionOrder@1000 : Record 5405;
      RegisteredWhseActivityLine@1020 : Record 5773;
      Bin@1021 : Record 7354;
      WhseInternalPutAwayLine@1023 : Record 7332;
      WhseInternalPutAwayHeader@1024 : Record 7331;
      ProductionBOMHeader@1007 : Record 99000771;
      Quantity@1005 : Decimal;
      ComponentsAtLocation@1008 : Code[10];
    BEGIN
      // Setup: Create Item With SN Specific Tracking include SN Warehouse Tracking, Post Warehouse Receipt from Purchase Order with Tracking, Create Production Order, Create Internal Put-Away.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");

      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler. Create New Lot as True,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,TRUE,FALSE);  // Post Receipt as True.
      CreateAndRefreshReleasedProductionOrder(
        ProductionOrder,Item2."No.",LocationWhite.Code,LocationWhite."To-Production Bin Code",Quantity);
      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,Bin."Zone Code",Bin.Code);
      WhseGetBinContentAndReleaseWhseIntPutAway(WhseInternalPutAwayHeader,LocationWhite.Code);
      FindWhseInternalPutAwayLine(WhseInternalPutAwayLine,WhseInternalPutAwayHeader."No.",Item."No.");

      // Exercise.
      CreatePutAwayDocAndRegisterWarehouseActivity(WhseInternalPutAwayLine,WarehouseActivityLine,Item."No.",LocationWhite.Code,TRUE);

      // Verify: Verify Registered Warehouse Activity Line for Put-away.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Source Document"::"Purchase Order",
        Item."No.",Quantity);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE TrackingLineOnInternalPutAwayWithoutSNWarehouseTrackingError@33();
    VAR
      Item@1001 : Record 27;
      Bin@1021 : Record 7354;
      WhseInternalPutAwayLine@1023 : Record 7332;
      WhseInternalPutAwayHeader@1024 : Record 7331;
    BEGIN
      // Setup : Create Item with SN Specific, Create Warehouse Internal Put-Away.
      Initialize;
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,Bin."Zone Code",Bin.Code);
      LibraryWarehouse.CreateWhseInternalPutawayLine(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,Item."No.",LibraryRandom.RandInt(10));

      // Exercise: Open Tracking line from Warehouse Internal Put-Away line.
      ASSERTERROR WhseInternalPutAwayLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));
    END;

    [Test]
    PROCEDURE TrackingLineOnInternalPickWithoutSNWarehouseTrackingError@106();
    VAR
      Item@1001 : Record 27;
      Bin@1021 : Record 7354;
      WhseInternalPickLine@1023 : Record 7334;
      WhseInternalPickHeader@1024 : Record 7333;
    BEGIN
      // Setup: Create Item with SN Specific, Create Warehouse Internal Pick.
      Initialize;
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateWhseInternalPickHeader(WhseInternalPickHeader,Bin."Zone Code",Bin.Code);
      LibraryWarehouse.CreateWhseInternalPickLine(
        WhseInternalPickHeader,WhseInternalPickLine,Item."No.",LibraryRandom.RandInt(10));

      // Exercise: Open Tracking line from Warehouse Internal Pick Line.
      ASSERTERROR WhseInternalPickLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,PutAwaySelectionPageHandler)]
    PROCEDURE TrackingLineOnPutAwayWorksheetWithoutSNWarehouseTrackingError@119();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1012 : Record 7316;
      WhseWorksheetName@1007 : Record 7327;
      WhseWorksheetLine@1006 : Record 7326;
      WhseWorksheetTemplate@1004 : Record 7328;
      GetSourceDocInbound@1002 : Codeunit 5751;
    BEGIN
      // Setup: Update White location,Create Item with SN Specific, Create and Post Warehouse Receipt from Purchase Order, Create Put-away from Put-away Worksheet.
      Initialize;
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,TRUE,TRUE);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10),FALSE,FALSE);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      FindPostedWhseReceiptHeader(WarehouseReceiptHeader."No.");

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::"Put-away");
      FilterOnWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationWhite.Code,Item."No.");
      GetSourceDocInbound.GetSingleWhsePutAwayDoc(
        WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationWhite.Code);
      WhseWorksheetLine.FINDFIRST;

      // Exercise: Open Tracking line from Warehouse Worksheet Line.
      ASSERTERROR WhseWorksheetLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));

      // Tear Down.
      UpdateWarehouseAndBinPoliciesOnLocation(LocationWhite,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PickSelectionPageHandler)]
    PROCEDURE TrackingLineOnPickWorksheetWithoutSNWarehouseTrackingError@150();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WhseWorksheetName@1008 : Record 7327;
      WhseWorksheetLine@1010 : Record 7326;
      WhseWorksheetTemplate@1011 : Record 7328;
      GetSourceDocOutbound@1006 : Codeunit 5752;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Create and Post Warehouse Receipt from Purchase Order, Create Warehouse Shipment from Sales Order, Create Pick from Pick Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler,Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,TRUE,FALSE);  // Post Receipt as True.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);  // Assign Global variable for Page Handler. Assign Tracking as SelectTrackingEntries.
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationWhite.Code,Quantity,TRUE);  // Tracking as True.
      GlobalDocumentNo := WarehouseShipmentHeader."No.";  // Assign Global variable for Page Handler.

      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Pick);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationWhite.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationWhite.Code);

      // Exercise: Open Tracking line from Warehouse Worksheet Line.
      ASSERTERROR WhseWorksheetLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));
    END;

    [Test]
    PROCEDURE TrackingLineOnMovementWorksheetWithoutSNWarehouseTrackingError@162();
    VAR
      Item@1001 : Record 27;
      WhseWorksheetName@1000 : Record 7327;
      WhseWorksheetTemplate@1002 : Record 7328;
      WhseWorksheetLine@1003 : Record 7326;
    BEGIN
      // Setup: Create Item with SN Specific, Create Warehouse Worksheet line.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateWhseWorksheetName(WhseWorksheetName,LocationWhite.Code,WhseWorksheetTemplate.Type::Movement);
      CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        WhseWorksheetLine."Whse. Document Type"::"Whse. Mov.-Worksheet",Item."No.",LocationWhite.Code,
        LibraryRandom.RandInt(10));

      // Exercise: Open Tracking line from Warehouse Worksheet Line.
      ASSERTERROR WhseWorksheetLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));
    END;

    [Test]
    PROCEDURE TrackingLineOnWarehouseJournalLineWithoutSNWarehouseTrackingError@173();
    VAR
      Item@1001 : Record 27;
      WarehouseJournalLine@1004 : Record 7311;
    BEGIN
      // Setup : Create Item with SN Specific, Create Warehouse Journal line.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      WarehouseJournalSetup(LocationWhite.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,'','',
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(10));

      // Exercise: Open Tracking line from Warehouse Journal Line.
      ASSERTERROR WarehouseJournalLine.OpenItemTrackingLines;

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledError,Item."No."));
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler)]
    PROCEDURE RegisterWhseJournalLineWithSNWarehouseTracking@43();
    VAR
      Item@1001 : Record 27;
      Bin@1021 : Record 7354;
      WarehouseJournalLine@1004 : Record 7311;
      WarehouseEntry@1005 : Record 7312;
    BEGIN
      // Setup: Create Item With SN Specific Tracking include SN Warehouse Tracking, Create Warehouse Journal line and Assign Tracking.
      Initialize;
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      WarehouseJournalSetup(LocationWhite.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",
        LibraryRandom.RandInt(10) + 5);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,WarehouseJournalLine.Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;

      // Exercise.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify: Verify Registered Warehouse Activity Line for Put-away.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",WarehouseJournalLine.Quantity,1);  // 1 as Positive Sign Factor.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE QuantityShipFromItemJournalLineWithoutSNWarehouseTracking@103();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1008 : Record 32;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      ItemJournalLine@1004 : Record 83;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific,Create and Post Warehouse Receipt from Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler, Assign Tracking as SerialNo.
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationYellow2.Code,Quantity,FALSE,FALSE);  // Post Receipt as True.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Exercise: Create and Post Item Journal line for Sales with Tracking.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::Sale,Item."No.",LocationYellow2.Code,Quantity,0,AssignTracking::SelectTrackingEntries);

      // Verify: Verify Serial Number in Item Ledger Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Sale,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostJournalLinesMessageHandler,PostJournalConfirmHandler)]
    PROCEDURE QuantityShipFromOutputJournalWithoutSNWarehouseTracking@49();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemLedgerEntry@1008 : Record 32;
      ProductionBOMHeader@1002 : Record 99000771;
      OutputJournal@1007 : TestPage 99000823;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Create Released Production Order and Post Output with Tracking and again create Output journal with negative Quantity.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Large Random Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler, Assign Tracking as SerialNo.

      CreateProductionOrderAndPostOutputJournalWithTracking(ProductionOrder,Item2."No.",LocationYellow2.Code,'',Quantity);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);  // Assign Global variable for Page Handler,Assign Tracking as SelectTrackingEntries.
      CreateOutputJournalWithTracking(ProductionOrder."No.",Item2."No.",-Quantity + 1);  // Reducing Output Quantity with Negative Quantity.

      // Exercise: Post Output Journal.
      OutputJournal.OPENEDIT;
      OutputJournal.CurrentJnlBatchName.SETVALUE(OutputItemJournalBatch.Name);
      OutputJournal.Post.INVOKE;  // Use Page Testability for Apply Entry code on page.

      // Verify: Verify Serial Number in Item Ledger Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item2."No.",2 * Quantity - 1);  // Total Quantity including Positive and Negative.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE QuantityShipFromConsumptionJournalLineWithoutSNWarehouseTracking@60();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1007 : Record 32;
      ProductionBOMHeader@1002 : Record 99000771;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific, Create and Post Item Journal line, Create Released Production Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler,Assign Tracking as SerialNo.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationYellow2.Code,Quantity,0,AssignTracking::SerialNo);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item2."No.",LocationYellow2.Code,'',Quantity);

      // Exercise: Create and Post Consumption Journal with Tracking.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,Quantity);  // Assign Global variable for Page Handler, Assign Tracking as SelectTrackingEntries, Tracking Quantity required.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Verify: Verify Serial Number in Item Ledger Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Consumption,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE QuantityReceiveFromItemJournalLineWithSNWarehouseTracking@70();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1008 : Record 32;
      ItemJournalLine@1004 : Record 83;
      Bin@1007 : Record 7354;
      WarehouseEntry@1009 : Record 7312;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Item With SN Specific Tracking include SN Warehouse Tracking, Create Bin and Bin Content.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateBinAndBinContent(Bin,Item,LocationSilver.Code);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler,Assign Tracking as SerialNo.

      // Exercise. Create and Post Item journal Line with Tracking.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::Purchase,Item."No.",LocationSilver.Code,Quantity,0,AssignTracking::SerialNo);

      // Verify: Verify Serial Number in Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Quantity);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,1);  // 1 as Positive Sing Factor,
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE QuantityReceiveFromOutputJournalWithSNWarehouseTracking@115();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemLedgerEntry@1008 : Record 32;
      Bin@1011 : Record 7354;
      WarehouseEntry@1013 : Record 7312;
      ProductionBOMHeader@1000 : Record 99000771;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup : Create Item With SN Specific Tracking include SN Warehouse Tracking , Create Bin,Bin Content and Production BOM, Create Released Prodcution Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateBinAndBinContent(Bin,Item,LocationSilver.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item2."No.",LocationSilver.Code,Bin.Code,Quantity);

      // Exercise: Create and Post Output journal with Tracking.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);  // Assign Global variable for Page Handler,Assign Tracking as SerialNo.
      CreateAndPostOutputJournalWithTracking(ProductionOrder."No.");

      // Verify: Verify Serial Number in Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item2."No.",Quantity);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity,1);  // 1 as Positive Sing Factor,
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE QuantityReceiveFromConsumptionJournalLineWithSNWarehouseTracking@83();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1007 : Record 32;
      Bin@1011 : Record 7354;
      WarehouseEntry@1010 : Record 7312;
      ProductionBOMHeader@1000 : Record 99000771;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup : Create Item With SN Specific Tracking include SN Warehouse Tracking , Create Bin,Bin Content and Production BOM, Create and Post Item journal Line, Create Released Prodcution Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateItem(Item2,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateBinAndBinContent(Bin,Item,LocationSilver.Code);

      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.");
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationSilver.Code,Quantity,0,AssignTracking::SerialNo);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item2."No.",LocationSilver.Code,Bin.Code,Quantity);

      // Exercise: Create and Post Consumption journal with Tracking.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,Quantity);  // Tracking Quantity required.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Verify: Verify Serial Number in Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Consumption,Item."No.",Quantity);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",Quantity,-1);  // -1 as Negative Sing Factor,
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WarehouseReceiptFromPurchaseOrderWithoutSNWarehouseTracking@75();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromPurchaseOrderSerialNo(ItemTrackingCodeSerialSpecific.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WarehouseReceiptFromPurchaseOrderWithSNWarehouseTracking@116();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromPurchaseOrderSerialNo(ItemTrackingCodeSerialSpecificWithWarehouse.Code);
    END;

    LOCAL PROCEDURE WarehouseReceiptFromPurchaseOrderSerialNo@227(ItemTrackingCode@1005 : Code[10]);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseSetup@1004 : Record 5769;
      PostingPolicy@1006 : Integer;
    BEGIN
      // Create Item with SN Tracking, Create Warehouse Receipt from Purchase Order.
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCode);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Exercise: Assign Tracking on Warehouse Receipt line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Tracking on Purchase line on Page handler.
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,WarehouseReceiptLine.Quantity);  // Update Trackig as True,Tracking Quantity required.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Verify Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WarehouseReceiptFromSalesReturnOrderWithoutSNWarehouseTracking@136();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromSalesReturnOrderSerialNo(ItemTrackingCodeSerialSpecific.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WarehouseReceiptFromSalesReturnOrderWithSNWarehouseTracking@112();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromSalesReturnOrderSerialNo(ItemTrackingCodeSerialSpecificWithWarehouse.Code);
    END;

    LOCAL PROCEDURE WarehouseReceiptFromSalesReturnOrderSerialNo@228(ItemTrackingCode@1007 : Code[10]);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseSetup@1003 : Record 5769;
      WarehouseReceiptLine@1005 : Record 7317;
      PostingPolicy@1006 : Integer;
    BEGIN
      // Create Item with SN Tracking, Create Warehouse Receipt from Sales Retrun Order.
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCode);
      CreateAndReleaseSalesReturnOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);

      // Exercise: Assign Tracking on Warehouse Receipt line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,SalesHeader."No.",WarehouseReceiptLine."Source Document"::"Sales Return Order");
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Tracking on Sales Line line on Page handler.
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,SalesLine.Quantity);  // Update Trackig as True,Tracking Quantity required.
      SalesLine.OpenItemTrackingLines;  // Verify Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehouseShipmentFromSalesOrderWithoutSNWarehouseTracking@132();
    VAR
      Item@1000 : Record 27;
      WarehouseSetup@1004 : Record 5769;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ItemJournalLine@1003 : Record 83;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1008 : Record 5767;
      PostingPolicy@1005 : Integer;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Sales Order.
      Initialize;
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationYellow2.Code,10 + LibraryRandom.RandInt(10),0,
        AssignTracking::SerialNo);  // Large Random value for Quantity.
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationYellow2.Code,LibraryRandom.RandInt(10),FALSE);  // Tracking as False.

      // Exercise: Assign Tracking on Warehouse Shipment line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Tracking on Purchase line on Page handler.
      SelectSalesLine(SalesLine,SalesHeader."No.");
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,SalesLine.Quantity);  // Update Trackig as True,Tracking Quantity required.
      SalesLine.OpenItemTrackingLines;  // Verify Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,AvailabilityConfirmHandler)]
    PROCEDURE WarehouseShipmentFromPurchaseReturnOrderWithoutSNWarehouseTracking@95();
    VAR
      Item@1000 : Record 27;
      WarehouseSetup@1004 : Record 5769;
      PurchaseLine@1002 : Record 39;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1008 : Record 5767;
      PurchaseHeader@1009 : Record 38;
      PostingPolicy@1001 : Integer;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Purchase Return Order.
      Initialize;
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationYellow2.Code,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);

      // Exercise: Assign Tracking on Warehouse Shipment line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0);
      SelectWarehouseShipmentLine(
        WarehouseShipmentLine,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order");
      WarehouseShipmentLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Tracking on Purchase line on Page handler.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,PurchaseLine.Quantity);  // Update Trackig as True,Tracking Quantity required.
      ClearGlobals;
      PurchaseLine.OpenItemTrackingLines;  // Verify Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE RegisterPickForSalesOrderWithSNWarehouseTrackingError@163();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ItemJournalLine@1003 : Record 83;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
    BEGIN
      // Setup: Create Item With SN Specific Tracking include SN Warehouse Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Sales Order and Pick.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationYellow.Code,10 + LibraryRandom.RandInt(10),0,
        AssignTracking::SerialNo);  // Large Random value for Quantity.
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationYellow.Code,LibraryRandom.RandInt(10),FALSE);  // Tracking as false.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Exercise: Register Pick.
      ASSERTERROR RegisterWarehouseActivity(
          SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order",LocationYellow.Code,Item."No.",
          WarehouseActivityLine."Activity Type"::Pick,FALSE);

      // Verify: Verify error message.
      Assert.ExpectedError(SerialNoValueError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE RegisterPickForPurchaseReturnOrderWithSNWarehouseTrackingError@160();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1003 : Record 83;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      PurchaseHeader@1009 : Record 38;
    BEGIN
      // Setup: Create Item With SN Specific Tracking include SN Warehouse Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Purchase Return Order and Pick.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationYellow.Code,10 + LibraryRandom.RandInt(10),0,
        AssignTracking::SerialNo);  // Large Random value for Quantity.
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationYellow.Code,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);

      FindWarehouseShipmentHeader(
        WarehouseShipmentHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Exercise: Register Pick.
      ASSERTERROR RegisterWarehouseActivity(
          PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order",LocationYellow.Code,Item."No.",
          WarehouseActivityLine."Activity Type"::Pick,FALSE);

      // Verify: Verify error message.
      Assert.ExpectedError(SerialNoValueError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostInventoryPickForSalesOrderWithBindingOrderToOrder@14();
    VAR
      Item@1002 : Record 27;
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
      SalesLine@1005 : Record 37;
      ReservationEntry@1007 : Record 337;
      DummyWarehouseActivityLine@1010 : Record 5767;
      QtyToShip@1003 : Integer;
    BEGIN
      // [FEATURE] [SN Warehouse Tracking] [Inventory Pick] [Binding]
      // [SCENARIO 380088] Inventory Pick should perform successful partial shipment of Sales Line, which is linked to a supply by Binding = "Order-to-Order".
      Initialize;

      // [GIVEN] Location that requires Pick.
      // [GIVEN] Item with Serial Nos. tracking.
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      CreateItem(Item,ItemTrackingCodeSerialSpecificWithWarehouse.Code);

      // [GIVEN] Posted Purchase with tracking.
      // [GIVEN] Released and fully reserved Sales Order, which is set to be shipped partially ("Qty. to Ship" = "X").
      CreateAndPostTrackedPurchaseAndCreateSalesOrderWithPartialShip(SalesLine,Item."No.",Location.Code);
      QtyToShip := SalesLine."Qty. to Ship";

      // [GIVEN] Binding in Reservation Entries of Sale is set to "Order-to-Order".
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      ReservationEntry.MODIFYALL(Binding,ReservationEntry.Binding::"Order-to-Order");

      // [GIVEN] Inventory Pick for quantity "X".
      CreateInventoryPick(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.");

      // [WHEN] Post Inventory Pick.
      PostInventoryActivity(
        SalesLine."Document No.",DummyWarehouseActivityLine."Source Document"::"Sales Order",Location.Code,Item."No.",
        DummyWarehouseActivityLine."Activity Type"::"Invt. Pick");

      // [THEN] "Quantity Shipped" on Sales Line = "X".
      WITH SalesLine DO BEGIN
        FIND;
        Assert.AreEqual(
          QtyToShip,"Quantity Shipped",
          STRSUBSTNO(IncorrectShippedQtyMsg,FIELDCAPTION("Quantity Shipped"),FIELDCAPTION("Qty. to Ship")));
      END;
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptFromPurchaseOrderWithoutSNWarehouseTrackingError@133();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptFromPurchaseOrder(ItemTrackingCodeSerialSpecific.Code);
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptFromPurchaseOrderWithSNWarehouseTrackingError@131();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptFromPurchaseOrder(ItemTrackingCodeSerialSpecificWithWarehouse.Code);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptFromPurchaseOrder@125(ItemTrackingCode@1005 : Code[10]);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseReceiptHeader@1002 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseSetup@1004 : Record 5769;
      PostingPolicy@1006 : Integer;
    BEGIN
      // Create Item with SN Tracking, Create Warehouse Receipt from Purchase Order.
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCode);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptHeader(WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");

      // Exercise.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredError,Item."No."));

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptFromSalesReturnOrderWithoutSNWarehouseTrackingError@118();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptFromSalesReturnOrder(ItemTrackingCodeSerialSpecific.Code);
    END;

    [Test]
    PROCEDURE PostWarehouseReceiptFromSalesReturnOrderWithSNWarehouseTrackingError@117();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseReceiptFromSalesReturnOrder(ItemTrackingCodeSerialSpecificWithWarehouse.Code);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptFromSalesReturnOrder@104(ItemTrackingCode@1007 : Code[10]);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseSetup@1003 : Record 5769;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseReceiptLine@1005 : Record 7317;
      PostingPolicy@1006 : Integer;
    BEGIN
      // Create Item with SN Tracking, Create Warehouse Receipt from Sales Retrun Order.
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCode);
      CreateAndReleaseSalesReturnOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,LibraryRandom.RandInt(10),TRUE);
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);
      FindWarehouseReceiptHeader(
        WarehouseReceiptHeader,SalesHeader."No.",WarehouseReceiptLine."Source Document"::"Sales Return Order");

      // Exercise.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredError,Item."No."));

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PostWarehouseShipmentFromSalesOrderWithoutSNWarehouseTrackingError@100();
    VAR
      Item@1000 : Record 27;
      WarehouseSetup@1004 : Record 5769;
      SalesHeader@1001 : Record 36;
      ItemJournalLine@1003 : Record 83;
      WarehouseShipmentHeader@1006 : Record 7320;
      PostingPolicy@1005 : Integer;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Sales Order.
      Initialize;
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationYellow2.Code,10 + LibraryRandom.RandInt(10),0,
        AssignTracking::SerialNo);  // Large Random value for Quantity.
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationYellow2.Code,LibraryRandom.RandInt(10),FALSE);  // Tracking as False.

      // Exercise.
      ASSERTERROR  LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredError,Item."No."));

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentFromPurchaseReturnOrderWithoutSNWarehouseTrackingError@52();
    VAR
      Item@1000 : Record 27;
      WarehouseSetup@1004 : Record 5769;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      PurchaseHeader@1009 : Record 38;
      PostingPolicy@1001 : Integer;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post Positive Adjustment, Create Warehouse Shipment from Purchase Return Order.
      Initialize;
      PostingPolicy :=
        UpdateWarehouseSetupPostingPolicy(WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationYellow2.Code,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      FindWarehouseShipmentHeader(
        WarehouseShipmentHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order");

      // Exercise.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredError,Item."No."));

      // Tear Down.
      UpdateWarehouseSetupPostingPolicy(PostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE RoundCostAmountOnItemLedgerEntryWithItemJournaForlPositiveAdjustment@135();
    VAR
      ItemLedgerEntry@1002 : Record 32;
      Item@1001 : Record 27;
      ItemJournalLine@1000 : Record 83;
      Quantity@1004 : Decimal;
      Amount@1003 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post ItemJournal with Positive Adjustment.
      Initialize;
      Quantity := LibraryRandom.RandInt(10); // For Random Value
      Amount := LibraryRandom.RandDec(10,2); // For Random Value
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);

      // Exercise: Create and Post Item Journal line for Positive Adjmt. with Item Tracking.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,Amount,AssignTracking::SerialNo);

      // Verify: Verify Cost Amont(Actual) in Item Ledger Entry.
      VerifyCostAmountInItemLedgerEntryType(ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Amount);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE RoundCostAmountOnItemLedgerEntryWithItemJournalForPurchase@147();
    VAR
      ItemLedgerEntry@1002 : Record 32;
      Item@1001 : Record 27;
      ItemJournalLine@1000 : Record 83;
      Quantity@1004 : Decimal;
      Amount@1003 : Decimal;
    BEGIN
      // Setup: Create Item with SN Specific Tracking, Create and Post ItemJournal with Purchase.
      Initialize;
      Quantity := LibraryRandom.RandInt(10); // For Random Value
      Amount := LibraryRandom.RandDec(10,2); // For Random Value
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code);

      // Exercise: Create and Post Item Journal line for Positive Adjmt. with Item Tracking.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::Purchase,Item."No.",LocationBlue.Code,Quantity,Amount,AssignTracking::SerialNo);

      // Verify: Verify Cost Amont(Actual) in Item Ledger Entry.
      VerifyCostAmountInItemLedgerEntryType(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Amount);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ProductionJournalPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ParentItemOutputOnItemTracingPage@134();
    VAR
      ChildItem@1001 : Record 27;
      ParentItem@1003 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      ProductionBOMHeader@1002 : Record 99000771;
      ItemTracing@1006 : TestPage 6520;
      Quantity@1000 : Decimal;
      EntryType@1010 : 'Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output';
    BEGIN
      // [SCENARIO] Verify Parent Item Output is present on Item Tracing Page when run trace by SN No. assigned to Consumption Item
      Initialize;
      Quantity := LibraryRandom.RandInt(10);

      // [GIVEN] Create SN-specific ChildItem 'CI' and simple ParentItem 'PI' with Production BOM that uses 'CI'
      CreateItem(ChildItem,ItemTrackingCodeSerialSpecific.Code);
      LibraryInventory.CreateItem(ParentItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItem."No.");
      UpdateProductionBOMNoOnItem(ParentItem,ProductionBOMHeader."No.");

      // [GIVEN] Make positive Adjustment for 'CI', Create and Refresh Released Production Order for 'PI'
      SetGlobalValue(ChildItem."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0); // Assign Global variable for Page Handler,Assign Tracking as SerialNo.
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ChildItem."No.",LocationYellow2.Code,Quantity,0,AssignTracking::SerialNo);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ParentItem."No.",LocationYellow2.Code,'',Quantity);

      // [GIVEN] Create and Post Consumption for 'CI', Post Production Output for 'PI'
      SetGlobalValue(ChildItem."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,Quantity); // Assign Global variable for Page Handler, Assign Tracking as SelectTrackingEntries, Tracking Quantity required.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,10000);

      // [WHEN] Run Item Tracing Page with SN filter used in 'CI'
      RunItemTracing(ItemTracing,ChildItem."No.");

      // [THEN] Item 'PI' is present on Item Tracing lines
      ItemTracing.FILTER.SETFILTER("Item No.",ParentItem."No.");
      ItemTracing.FILTER.SETFILTER("Entry Type",FORMAT(EntryType::Output));
      Assert.IsTrue(ItemTracing.FIRST,ItemTracingOutputErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE KeepExpirationDateLotTrackedItem@148();
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1005 : Record 38;
      WarehouseReceiptHeader@1004 : Record 7316;
      SalesHeader@1002 : Record 36;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      ExpirationDate@1011 : Date;
      Quantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Warehouse] [Expiration Date]
      // [SCENARIO 376162] Expiration Date is preserved in Pick Line when lookup in Pick is cancelled.

      // [GIVEN] Lot tracked Item on stock with Lot and Expiration Date.
      Initialize;
      CreateItem(Item,ItemTrackingCodeLotSpecificWithWarehouse.Code);
      Quantity := LibraryRandom.RandDecInRange(10,100,2);
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::LotNo,Quantity);
      CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking(
        PurchaseHeader,WarehouseReceiptHeader,Item."No.",LocationWhite.Code,Quantity,TRUE,TRUE);

      // [GIVEN] Create Sales Order, Warehouse Shipment and Pick.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SelectTrackingEntries,0);
      CreateAndReleaseWhseShipmentFromSalesOrderWithTracking(
        SalesHeader,WarehouseShipmentHeader,Item."No.",LocationWhite.Code,Quantity,TRUE);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [WHEN] Open Pick, lookup "Lot No." on a line, then press Cancel.
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,SalesHeader."No.","Source Document"::"Sales Order",LocationWhite.Code,
          Item."No.",'',"Activity Type"::Pick);
        ExpirationDate := "Expiration Date";
      END;

      ItemTrackingSummaryCancel := TRUE; // Cancel in ItemTrackingSummaryPageHandler
      WITH WarehouseActivityLine DO BEGIN
        LookUpTrackingSummary(
          WarehouseActivityLine,
          ("Activity Type" <= "Activity Type"::Movement) OR ("Action Type" <> "Action Type"::Place),
          -1,1); // LOOKUP

        // [THEN] "Expiration Date" is preserved in Pick lines.
        FINDSET;
        REPEAT
          TESTFIELD("Expiration Date",ExpirationDate);
        UNTIL NEXT = 0;
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingDropShipmentPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE RegisterInventoryMovementWithLotTrackingWhenBinTypesDoesNotExist@151();
    VAR
      ItemJournalLine@1006 : Record 83;
      Bin@1002 : Record 7354;
      BinType@1004 : Record 7303;
      TempBinType@1000 : TEMPORARY Record 7303;
      WarehouseEmployee@1009 : Record 7301;
      WarehouseActivityLine@1007 : Record 5767;
      ItemNo@1011 : Code[20];
      LotNo@1008 : Code[20];
    BEGIN
      // [FEATURE] [Warehouse] [Lot Tracking] [Inventory Movement]
      // [SCENARIO 378930] Inventory movement is registered for item with Lot Tracking and Bin Code when Bin Types does not exist

      Initialize;
      // [GIVEN] No Bin Types in current database
      MoveFromBinTypeToBinType(BinType,TempBinType);

      // [GIVEN] Item with "Lot Tracking"
      ItemNo := CreateItemWithLotTracking;

      // [GIVEN] Posted positive adjustment with "Lot Tracking" and location "SILVER"
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      PostItemJnlLineWithLotTrackingAndBinCode(ItemJournalLine,LocationSilver.Code,ItemNo,Bin.Code);
      LotNo := GetLotNoFromItemLedgEntry(ItemJournalLine."Item No.",ItemJournalLine."Document No.");

      // [GIVEN] Inventory movement created from Internal Movement
      CreateInvtMvtFromInternalMvtWithLotNo(LocationSilver.Code,ItemNo,Bin.Code,LotNo);

      // [WHEN] Register Inventory Movement
      RegisterWarehouseActivity('',0,LocationSilver.Code,ItemNo,WarehouseActivityLine."Activity Type"::"Invt. Movement",TRUE);

      // [THEN] Inventory movement is registered
      VerifyRegistedInvtMovementLine(ItemNo,LotNo,Bin.Code);

      // Tear down
      MoveFromBinTypeToBinType(TempBinType,BinType);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLotPageHandler,MessageHandler)]
    PROCEDURE PutAwayForPartiallyPutAwayReceiptWhenItemEntryDoesNotMatchWhseEntry@158();
    VAR
      Item@1000 : Record 27;
      TransferHeader@1004 : Record 5740;
      WarehouseReceiptHeader@1007 : Record 7316;
      WarehouseActivityLine@1010 : Record 5767;
      LotNo@1013 : Code[20];
      Qty@1015 : Decimal;
      QtyRemToPutaway@1016 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Posted Whse. Receipt] [Put-away] [Transfer Order]
      // [SCENARIO 206372] Put-away can be created from partially put-away posted warehouse receipt in case the way item entries and warehouse entries are split by quantity is different for these two ledgers.
      Initialize;

      // [GIVEN] Lot-tracked item, lot warehouse tracking is enabled.
      CreateItem(Item,ItemTrackingCodeLotSpecificWithWarehouse.Code);

      LotNo := LibraryUtility.GenerateGUID;
      Qty := 3 * 2 * LibraryRandom.RandIntInRange(20,40);
      QtyRemToPutaway := LibraryRandom.RandIntInRange(5,10);

      // [GIVEN] The item is purchased on location "L1". The Purchase Order has three lines, each for "2Q" pcs. Overall purchased qty. = "6Q".
      CreateAndPostPurchaseOrderWithLotTrackedLines(LocationBlue.Code,Item."No.",LotNo,Qty / 3,3);

      // [GIVEN] The item is transferred from location "L1" to WMS-location "L2". The Transfer Order has two lines, each for "3Q" pcs. Overall transferred qty. = "6Q".
      CreateAndShipTransferOrderWithLotTrackedLines(
        TransferHeader,LocationBlue.Code,LocationWhite.Code,LocationIntransit.Code,Item."No.",LotNo,Qty / 2,2);
      CreateAndPostWhseReceiptFromInboundTransfer(TransferHeader,WarehouseReceiptHeader);

      // [GIVEN] After the receipt to "L2" is posted, two pairs of put-away lines are created.
      // [GIVEN] "Qty. to Handle" in the first pair = "3Q", in the second pair = "3Q" - "Delta".
      UpdateQtyToHandleOnWhsePutawayLine(
        TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",LocationWhite.Code,
        Item."No.",LotNo,Qty / 2 - QtyRemToPutaway);

      // [GIVEN] The put-away is registered and deleted.
      RegisterAndDeleteWarehouseActivity(
        TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // [WHEN] Create put-away from the posted receipt to "L2".
      CreatePutAwayFromPostedWhseReceipt(WarehouseReceiptHeader."No.");

      // [THEN] Put-away for quantity = "Delta" is created.
      FindWarehouseActivityLine(
        WarehouseActivityLine,TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",LocationWhite.Code,
        Item."No.",LotNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.TESTFIELD("Qty. (Base)",QtyRemToPutaway);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLotPageHandler)]
    PROCEDURE HandledQtyForEachLotIsCalculatedSeparately@45();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseReceiptHeader@1007 : Record 7316;
      WarehouseReceiptLine@1008 : Record 7317;
      WarehouseActivityLine@1009 : Record 5767;
      LotNo@1001 : ARRAY [2] OF Code[20];
      Qty@1005 : ARRAY [2] OF Decimal;
      QtyRemToPutaway@1006 : ARRAY [2] OF Decimal;
      i@1002 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Posted Whse. Receipt] [Put-away]
      // [SCENARIO 206372] "Qty. (Base)" on put-away lines created from partially put-away posted warehouse receipt should be equal to quantity left to be handled for each lot.
      Initialize;

      // [GIVEN] Lot-tracked item, lot warehouse tracking is enabled.
      CreateItem(Item,ItemTrackingCodeLotSpecificWithWarehouse.Code);

      // [GIVEN] Purchase Order for the item with two lot-tracked lines. Lot Nos. "L1" and "L2".
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      FOR i := 1 TO 2 DO BEGIN
        LotNo[i] := LibraryUtility.GenerateGUID;
        Qty[i] := LibraryRandom.RandIntInRange(50,100);
        QtyRemToPutaway[i] := LibraryRandom.RandIntInRange(5,10);
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",LocationWhite.Code,Qty[i]);
        LibraryVariableStorage.Enqueue(LotNo[i]);
        LibraryVariableStorage.Enqueue(Qty[i]);
        PurchaseLine.OpenItemTrackingLines;
      END;

      // [GIVEN] The Purchase Order is released, Whse. Receipt is created and posted.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptHeader(WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // [GIVEN] Set "Qty. to Handle" < "Qty. (Base)" on put-away lines, the remaining quantity to be put-away for lot "L1" = "Rem1", for lot "L2" = "Rem2".
      FOR i := 1 TO 2 DO
        UpdateQtyToHandleOnWhsePutawayLine(
          PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,
          Item."No.",LotNo[i],Qty[i] - QtyRemToPutaway[i]);

      // [GIVEN] The put-away is registered and deleted.
      RegisterAndDeleteWarehouseActivity(
        PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,Item."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // [WHEN] Create put-away from the posted warehouse receipt.
      CreatePutAwayFromPostedWhseReceipt(WarehouseReceiptHeader."No.");

      // [THEN] "Qty. (Base)" for lot "L1" in the new put-away is equal to "Rem1", for lot "L2" = "Rem2".
      FOR i := 1 TO 2 DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,
          Item."No.",LotNo[i],WarehouseActivityLine."Activity Type"::"Put-away");
        WarehouseActivityLine.TESTFIELD("Qty. (Base)",QtyRemToPutaway[i]);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLotPageHandler,MessageHandler)]
    PROCEDURE PutAwayForWhseReceiptWhenLotConsistsOfSeveralItemEntries@126();
    VAR
      Item@1009 : Record 27;
      WarehouseReceiptHeader@1006 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      TransferHeader@1011 : Record 5740;
      LotNo@1003 : ARRAY [2] OF Code[20];
      i@1000 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Whse. Receipt] [Put-away] [Transfer Order]
      // [SCENARIO 209278] Put-away should be created for all lots in whse. receipt line, if quantity of each lot consists of several item entries.
      Initialize;

      // [GIVEN] Lot-tracked item, lot warehouse tracking is enabled.
      CreateItem(Item,ItemTrackingCodeLotSpecificWithWarehouse.Code);
      FOR i := 1 TO 2 DO
        LotNo[i] := LibraryUtility.GenerateGUID;

      // [GIVEN] Two purchase orders of the item: "PO1" and "PO2".
      // [GIVEN] "PO1" has three lines with lot = "L1" and quantity = 2 pcs.
      // [GIVEN] "PO2" has two lines with lot = "L2" and quantity = 3 pcs.
      // [GIVEN] Transfer all purchased quantity of the item to the WMS-location. Transfer Order No. = "TO".
      // [GIVEN] "TO" has one line with "L1" and "L2" lots and quantity = 12 pcs.
      // [GIVEN] "TO" is shipped.
      CreateAndPostTrackedPurchaseLinesAndTransferFullQtyInSingleLine(TransferHeader,Item."No.",LotNo);

      // [WHEN] Create and post warehouse receipt of "TO".
      CreateAndPostWhseReceiptFromInboundTransfer(TransferHeader,WarehouseReceiptHeader);

      // [THEN] Put-away is created for both "L1" and "L2" lots, each for 6 pcs.
      FOR i := 1 TO 2 DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",
          LocationWhite.Code,Item."No.",LotNo[i],WarehouseActivityLine."Activity Type"::"Put-away");
        WarehouseActivityLine.TESTFIELD("Qty. (Base)",2 * 3);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLotPageHandler,MessageHandler)]
    PROCEDURE PutAwayForPostedWhseReceiptWhenLotConsistsOfSeveralItemEntries@166();
    VAR
      Item@1005 : Record 27;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      TransferHeader@1002 : Record 5740;
      LotNo@1001 : ARRAY [2] OF Code[20];
      i@1000 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Posted Whse. Receipt] [Put-away]
      // [SCENARIO 209278] Put-away should be created for all lots in posted whse. receipt line, if quantity of each lot consists of several item entries.
      Initialize;

      // [GIVEN] Lot-tracked item, lot warehouse tracking is enabled.
      CreateItem(Item,ItemTrackingCodeLotSpecificWithWarehouse.Code);
      FOR i := 1 TO 2 DO
        LotNo[i] := LibraryUtility.GenerateGUID;

      // [GIVEN] Two purchase orders of the item: "PO1" and "PO2".
      // [GIVEN] "PO1" has three lines with lot = "L1" and quantity = 2 pcs.
      // [GIVEN] "PO2" has two lines with lot = "L2" and quantity = 3 pcs.
      // [GIVEN] Transfer all purchased quantity of the item to the WMS-location. Transfer Order No. = "TO".
      // [GIVEN] "TO" has one line with "L1" and "L2" lots and quantity = 12 pcs.
      // [GIVEN] "TO" is shipped.
      CreateAndPostTrackedPurchaseLinesAndTransferFullQtyInSingleLine(TransferHeader,Item."No.",LotNo);

      // [GIVEN] Create and post warehouse receipt of "TO".
      CreateAndPostWhseReceiptFromInboundTransfer(TransferHeader,WarehouseReceiptHeader);

      // [GIVEN] Delete put-away.
      FindWarehouseActivityHeader(
        WarehouseActivityHeader,TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",
        LocationWhite.Code,Item."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.DELETE(TRUE);

      // [WHEN] Create put-away from the posted warehouse receipt.
      CreatePutAwayFromPostedWhseReceipt(WarehouseReceiptHeader."No.");

      // [THEN] Put-away is created for both "L1" and "L2" lots, each for 6 pcs.
      FOR i := 1 TO 2 DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,TransferHeader."No.",WarehouseActivityLine."Source Document"::"Inbound Transfer",
          LocationWhite.Code,Item."No.",LotNo[i],WarehouseActivityLine."Activity Type"::"Put-away");
        WarehouseActivityLine.TESTFIELD("Qty. (Base)",2 * 3);
      END;
    END;

    [Test]
    PROCEDURE DropShipmentSalesArchiveThroughPostPurchase@420();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      Item@1005 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesLineArchive@1009 : Record 5108;
      RequisitionLine@1010 : Record 246;
      OrderQty@1007 : Decimal;
      ResidualQty@1008 : Decimal;
      ShipReceiveQty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Drop Shipment] [Sales] [Archive]
      // [SCENARIO 225698] When partly post Drop Shipment Sales through Purchase Order "Sales Line Archive"."Qty. to Ship" = "Purchase Line"."Qty. to Receive"
      Initialize;

      // [GIVEN] "Archive Quotes and Orders" set in "Sales & Receivables Setup", "Default Quantity to Ship" = Remainder
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Default Quantity to Ship",SalesReceivablesSetup."Default Quantity to Ship"::Remainder);
      SalesReceivablesSetup.MODIFY(TRUE);

      ShipReceiveQty := LibraryRandom.RandIntInRange(10,20);
      ResidualQty := LibraryRandom.RandIntInRange(10,20);
      OrderQty := ShipReceiveQty + ResidualQty;

      // [GIVEN] Drop Shipment Sales Order "DSO"
      CreateItemWithVendorNo(Item);
      CreateSalesOrderWithDropShipment(SalesHeader,SalesLine,LibrarySales.CreateCustomerNo,Item."No.",OrderQty);
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,FALSE);

      // [WHEN] Post receive of corresponding Purchase Order "PO" with "Qty. to Receive" < "DSO"."Quantity"
      FindPurchaseLine(PurchaseLine,Item."No.");
      PurchaseLine.VALIDATE("Qty. to Receive",ShipReceiveQty);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] "Sales Line Archive" is created, "Qty. to Ship" = "PO"."Qty. to Receive"
      SalesLineArchive.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLineArchive.FINDFIRST;
      SalesLineArchive.TESTFIELD("Qty. to Ship",ShipReceiveQty);
    END;

    [Test]
    PROCEDURE DropShipmentPurchaseArchiveThroughPostSales@419();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      Item@1005 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PurchaseLineArchive@1009 : Record 5110;
      RequisitionLine@1003 : Record 246;
      OrderQty@1007 : Decimal;
      ResidualQty@1008 : Decimal;
      ShipReceiveQty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Drop Shipment] [Purchase] [Archive]
      // [SCENARIO 225698] When partly post Drop Shipment Purchase through Sales Order "Sales Line Archive"."Qty. to Ship" = "Purchase Line"."Qty. to Receive"
      Initialize;

      // [GIVEN] "Archive Quotes and Orders" set in "Purchases & Payables Setup", "Default Qty. to Receive" = Remainder
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Default Qty. to Receive",PurchasesPayablesSetup."Default Qty. to Receive"::Remainder);
      PurchasesPayablesSetup.MODIFY(TRUE);

      ShipReceiveQty := LibraryRandom.RandIntInRange(10,20);
      ResidualQty := LibraryRandom.RandIntInRange(10,20);
      OrderQty := ShipReceiveQty + ResidualQty;

      // [GIVEN] Drop Shipment Sales Order "DSO"
      CreateItemWithVendorNo(Item);
      CreateSalesOrderWithDropShipment(SalesHeader,SalesLine,LibrarySales.CreateCustomerNo,Item."No.",OrderQty);
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine,FALSE);

      // [WHEN] Post shipment of "DSO" with "Qty. to Ship" < "Quantity"
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Ship",ShipReceiveQty);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] "Purchase Line Archive" is created, "Qty. to Receive" = "DSO"."Qty. to Ship"
      PurchaseLineArchive.SETRANGE("No.",Item."No.");
      PurchaseLineArchive.FINDFIRST;
      PurchaseLineArchive.TESTFIELD("Qty. to Receive",ShipReceiveQty);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      ClearGlobals;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      NoSeriesSetup;
      ItemTrackingCodeSetup;
      ItemJournalSetup;
      CreateLocationSetup;
      OutputJournalSetup;
      ConsumptionJournalSetup;

      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
    END;

    LOCAL PROCEDURE ClearGlobals@50();
    BEGIN
      CLEAR(CreateNewLotNo);
      CLEAR(UpdateTracking);
      CLEAR(AssignTracking);
      CLEAR(PartialTracking);
      CLEAR(TrackingQuantity);
      CLEAR(MessageCounter);
      CLEAR(GlobalDocumentNo);
      CLEAR(ItemTrackingAction);
      CLEAR(QuantityBase);
      CLEAR(GlobalItemNo);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1001 : Record 311;
      WarehouseSetup@1003 : Record 5769;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Return Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
    END;

    LOCAL PROCEDURE CreateLocationSetup@7();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(LocationWhite,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateInTransitLocation(LocationIntransit);

      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,FALSE,FALSE,FALSE,FALSE);
      LibraryWarehouse.CreateLocationWMS(LocationYellow,FALSE,TRUE,TRUE,TRUE,TRUE);
      LibraryWarehouse.CreateLocationWMS(LocationYellow2,FALSE,FALSE,FALSE,TRUE,TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow2.Code,FALSE);
    END;

    LOCAL PROCEDURE ItemTrackingCodeSetup@20();
    BEGIN
      CreateItemTrackingCode(ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("SN Specific Tracking"),TRUE);  // Tracking for SN Specific Tracking.
      CreateItemTrackingCode(
        ItemTrackingCodeSerialSpecificWithWarehouse,ItemTrackingCodeSerialSpecificWithWarehouse.FIELDNO("SN Specific Tracking"),TRUE);
      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecificWithWarehouse,ItemTrackingCodeSerialSpecific.FIELDNO("SN Warehouse Tracking"),TRUE);
      CreateItemTrackingCode(ItemTrackingCodeLotSpecific,ItemTrackingCodeLotSpecific.FIELDNO("Lot Specific Tracking"),TRUE);  // Tracking for Lot Specific Tracking.
      CreateItemTrackingCode(
        ItemTrackingCodeLotSpecificWithWarehouse,ItemTrackingCodeLotSpecificWithWarehouse.FIELDNO("Lot Specific Tracking"),TRUE);
      UpdateItemTrackingCode(
        ItemTrackingCodeLotSpecificWithWarehouse,ItemTrackingCodeLotSpecificWithWarehouse.FIELDNO("Lot Warehouse Tracking"),TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@81();
    BEGIN
      CLEAR(OutputItemJournalTemplate);
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);

      CLEAR(OutputItemJournalBatch);
      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@205(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@29();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",'');
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      CLEAR(ConsumptionItemJournalTemplate);
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      CLEAR(ConsumptionItemJournalBatch);
      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@140(VAR ItemTrackingCode@1000 : Record 6502;FieldNo@1002 : Integer;Value@1001 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      UpdateItemTrackingCode(ItemTrackingCode,FieldNo,Value);
    END;

    LOCAL PROCEDURE UpdateItemTrackingCode@94(VAR ItemTrackingCode@1000 : Record 6502;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Item Tracking Code based on Field and its corresponding value.
      RecRef.GETTABLE(ItemTrackingCode);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ItemTrackingCode);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetGlobalValue@36(ItemNo@1000 : Code[20];NewLotNo@1001 : Boolean;UpdateTrackingValue@1002 : Boolean;PartialTrackingValue@1003 : Boolean;AssignTrackingValue@1008 : Option;TrackingQuantity2@1004 : Decimal);
    BEGIN
      GlobalItemNo := ItemNo;
      CreateNewLotNo := NewLotNo;
      UpdateTracking := UpdateTrackingValue;
      PartialTracking := PartialTrackingValue;
      AssignTracking := AssignTrackingValue;
      TrackingQuantity := TrackingQuantity2;
    END;

    LOCAL PROCEDURE CreateItem@2(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);  // Assign Tracking Code.
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithLotTracking@214() : Code[20];
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCode(
        ItemTrackingCode,ItemTrackingCode.FIELDNO("Lot Specific Tracking"),TRUE);
      UpdateItemTrackingCode(
        ItemTrackingCode,ItemTrackingCode.FIELDNO("Lot Warehouse Tracking"),TRUE);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithVendorNo@167(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@39(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Purchase Order.
      CreateAndReleasePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,ItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@121(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@127(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Purchase Return Order.
      CreateAndReleasePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseDocument@130(VAR PurchaseHeader@1000 : Record 38;DocumentType@1005 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,DocumentType,'',ItemNo,Quantity,LocationCode,0D);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithDropShipment@201(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseDocument@145(DocumentType@1004 : Option;No@1000 : Code[20];Receive@1001 : Boolean;Invoice@1002 : Boolean);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      PurchaseHeader.GET(DocumentType,No);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithLotTrackedLines@233(LocationCode@1005 : Code[10];ItemNo@1004 : Code[20];LotNo@1002 : Code[20];Qty@1003 : Decimal;NoOfLines@1007 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      i@1006 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      FOR i := 1 TO NoOfLines DO BEGIN
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Qty);
        LibraryVariableStorage.Enqueue(LotNo);
        LibraryVariableStorage.Enqueue(Qty);
        PurchaseLine.OpenItemTrackingLines;
      END;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@85(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;Release@1005 : Boolean);
    BEGIN
      // Create Sales Order
      CreateAndReleaseSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,Release);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesReturnOrder@143(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;Release@1005 : Boolean);
    BEGIN
      // Create Sales Order
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity,Release);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocument@141(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;DocumentType@1006 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;Release@1005 : Boolean);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,DocumentType,'',ItemNo,Quantity,LocationCode,0D);
      IF Release THEN
        LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDropShipment@168(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;CustomerNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1005 : Decimal);
    VAR
      Purchasing@1000 : Record 5721;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,SalesLine.Type::Item,CustomerNo,ItemNo,Quantity,'');
      CreatePurchasingCodeWithDropShipment(Purchasing);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@178(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1007 : Option;Type@1006 : Option;CustomerNo@1002 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1005 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,Type,ItemNo,Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesLine@180(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;Type@1005 : Option;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;LocationCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToShipOnSalesLine@78(VAR SalesLine@1000 : Record 37;QtyToShip@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostSalesDocument@62(DocumentType@1004 : Option;No@1001 : Code[20];Ship@1002 : Boolean;Invoice@1003 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(DocumentType,No);
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
    END;

    LOCAL PROCEDURE CreateAndShipTransferOrderWithLotTrackedLines@236(VAR TransferHeader@1007 : Record 5740;LocationFromCode@1004 : Code[10];LocationToCode@1005 : Code[10];LocationInTransitCode@1006 : Code[10];ItemNo@1003 : Code[20];LotNo@1002 : Code[20];Qty@1001 : Decimal;NoOfLines@1000 : Integer);
    VAR
      TransferLine@1008 : Record 5741;
      i@1010 : Integer;
    BEGIN
      LibraryInventory.CreateTransferHeader(TransferHeader,LocationFromCode,LocationToCode,LocationInTransitCode);
      FOR i := 1 TO NoOfLines DO BEGIN
        LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Qty);
        AddItemTrackingToTransferLine(TransferLine,LotNo,Qty);
      END;
      LibraryInventory.ReleaseTransferOrder(TransferHeader);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE AddItemTrackingToTransferLine@216(VAR TransferLine@1000 : Record 5741;LotNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      Direction@1003 : 'Outbound,Inbound';
    BEGIN
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Qty);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE SelectSalesLine@46(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchaseLine@47(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchInvHeader@38(VAR PurchInvHeader@1000 : Record 122;OrderNo@1001 : Code[20]);
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchInvLine@35(VAR PurchInvLine@1000 : Record 123;OrderNo@1001 : Code[20]);
    VAR
      PurchInvHeader@1002 : Record 122;
    BEGIN
      FindPurchInvHeader(PurchInvHeader,OrderNo);
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.SETRANGE(Type,PurchInvLine.Type::Item);
      PurchInvLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@120(VAR SalesInvoiceHeader@1000 : Record 112;OrderNo@1001 : Code[20]);
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesInvoiceLine@64(VAR SalesInvoiceLine@1001 : Record 113;OrderNo@1002 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      FindSalesInvoiceHeader(SalesInvoiceHeader,OrderNo);
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@17(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
    END;

    LOCAL PROCEDURE UpdatePurchasingCodeOnSalesLine@200(DocumentNo@1000 : Code[20];PurchasingCode@1003 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      REPEAT
        SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AssignTrackingOnRequisitionLine@280(VAR RequisitionLine@1000 : Record 246;ReqWkshTemplateName@1003 : Code[10];RequisitionWkshNameName@1004 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",ReqWkshTemplateName);
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshNameName);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.FINDFIRST;
      REPEAT
        RequisitionLine.OpenItemTrackingLines;
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@273(VAR ReqWkshTemplate@1002 : Record 244;VAR RequisitionWkshName@1001 : Record 245);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::Planning);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE UpdateQtyToInvoiceOnSalesLine@288(DocumentNo@1000 : Code[20];QtyToInvoice@1002 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      SalesLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToInvoiceOnPurchaseLine@289(DocumentNo@1001 : Code[20];QtyToInvoice@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToReceiveOnPurchaseLine@298(VAR PurchaseLine@1000 : Record 39;QtyToReceive@1001 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNoOnPurchaseHeader@302(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");  // Get Latest Instance, Important for Test.
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignTrackingOnPurchaseLine@283(DocumentNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      REPEAT
        PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg@275(VAR SalesLine@1002 : Record 37;VAR RequisitionLine@1003 : Record 246;TrackingOnRequisition@1005 : Boolean);
    VAR
      ReqWkshTemplate@1001 : Record 244;
      RequisitionWkshName@1000 : Record 245;
      RetrieveDimensionsFrom@1004 : 'Item,Sales Line';
    BEGIN
      CreateRequisitionWorksheetName(ReqWkshTemplate,RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate.Name,RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");

      IF TrackingOnRequisition THEN
        AssignTrackingOnRequisitionLine(RequisitionLine,ReqWkshTemplate.Name,RequisitionWkshName.Name);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE UpdateQuantityToReceiveOnMultiplePurchaseLines@316(VAR PurchaseLine@1001 : Record 39;DocumentNo@1002 : Code[20];QtyToReceive@1000 : Decimal);
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      REPEAT
        UpdateQtyToReceiveOnPurchaseLine(PurchaseLine,PurchaseLine.Quantity - QtyToReceive);  // Update Quantity to receive partially on Purchase lines.
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPurchasingCode@32(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];Quantity@1004 : Decimal;MultipleLines@1006 : Boolean);
    VAR
      Purchasing@1005 : Record 5721;
    BEGIN
      CreatePurchasingCodeWithDropShipment(Purchasing);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,'',Quantity,FALSE);
      IF MultipleLines THEN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo2,Quantity);
      UpdatePurchasingCodeOnSalesLine(SalesHeader."No.",Purchasing.Code);
      GlobalDocumentNo := SalesHeader."No.";  // Assign Global Variable for page handler.
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderAndGetDropShipment@56(VAR PurchaseHeader@1000 : Record 38;SellToCustomerNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.GetDropShipment(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostTrackedPurchaseAndCreateSalesOrderWithPartialShip@91(VAR SalesLine@1000 : Record 37;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(0);
      CreateAndPostItemJournalLineWithTracking(
        ItemJournalLine."Entry Type"::Purchase,ItemNo,LocationCode,LibraryRandom.RandIntInRange(20,30),0,0);

      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,ItemNo,LocationCode,LibraryRandom.RandIntInRange(11,20),TRUE);
      LibrarySales.AutoReserveSalesLine(SalesLine);
      WITH SalesLine DO BEGIN
        VALIDATE("Qty. to Ship",LibraryRandom.RandInt(10));
        MODIFY(TRUE);
        LibraryVariableStorage.Enqueue(FALSE);
        LibraryVariableStorage.Enqueue(Quantity - "Qty. to Ship");
        OpenItemTrackingLines;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostTrackedPurchaseLinesAndTransferFullQtyInSingleLine@235(VAR TransferHeader@1003 : Record 5740;ItemNo@1006 : Code[20];LotNo@1001 : ARRAY [2] OF Code[20]);
    VAR
      TransferLine@1002 : Record 5741;
      i@1000 : Integer;
    BEGIN
      CreateAndPostPurchaseOrderWithLotTrackedLines(LocationBlue.Code,ItemNo,LotNo[1],2,3); // 3 lines, each for 2 pcs
      CreateAndPostPurchaseOrderWithLotTrackedLines(LocationBlue.Code,ItemNo,LotNo[2],3,2); // 2 lines, each for 3 pcs

      LibraryInventory.CreateTransferHeader(TransferHeader,LocationBlue.Code,LocationWhite.Code,LocationIntransit.Code);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,ItemNo,2 * 3 + 3 * 2);
      FOR i := 1 TO 2 DO
        AddItemTrackingToTransferLine(TransferLine,LotNo[i],2 * 3);
      LibraryInventory.ReleaseTransferOrder(TransferHeader);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE FindWarehouseReceiptHeader@190(VAR WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1002 : Code[20];SourceDocument@1003 : Option);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      SelectWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,SourceDocument);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE SelectWarehouseReceiptLine@93(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@6(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];SourceDocument@1002 : Option;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];LotNoFilter@1006 : Text;ActivityType@1005 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETFILTER("Lot No.",LotNoFilter);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@9(VAR WarehouseActivityHeader@1001 : Record 5766;SourceNo@1002 : Code[20];SourceDocument@1003 : Option;LocationCode@1006 : Code[10];ItemNo@1005 : Code[20];ActivityType@1004 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,LocationCode,ItemNo,'',ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindPurchaseLine@172(VAR PurchaseLine@1000 : Record 39;No@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@18(SourceNo@1001 : Code[20];SourceDocument@1002 : Option;LocationCode@1005 : Code[10];ItemNo@1004 : Code[20];ActivityType@1003 : Option;AutoFillQuantity@1006 : Boolean) WhseActivityHeaderNo : Code[20];
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo,SourceDocument,LocationCode,ItemNo,ActivityType);
      IF AutoFillQuantity THEN
        LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      WhseActivityHeaderNo := WarehouseActivityHeader."No.";
    END;

    LOCAL PROCEDURE RegisterAndDeleteWarehouseActivity@204(SourceNo@1005 : Code[20];SourceDocument@1004 : Option;LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];ActivityType@1001 : Option);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.GET(
        ActivityType,RegisterWarehouseActivity(SourceNo,SourceDocument,LocationCode,ItemNo,ActivityType,FALSE));
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE PostInventoryActivity@42(SourceNo@1001 : Code[20];SourceDocument@1002 : Option;LocationCode@1005 : Code[10];ItemNo@1004 : Code[20];ActivityType@1003 : Option);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo,SourceDocument,LocationCode,ItemNo,ActivityType);
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE PostWhseReceiptAndRegisterWarehouseActivity@48(WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1001 : Code[20];SourceDocument@1002 : Option;LocationCode@1005 : Code[10];ItemNo@1004 : Code[20];ActivityType@1003 : Option;AutoFillQuantity@1006 : Boolean);
    BEGIN
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      RegisterWarehouseActivity(SourceNo,SourceDocument,LocationCode,ItemNo,ActivityType,AutoFillQuantity);
    END;

    LOCAL PROCEDURE SelectWarehouseShipmentLine@108(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1002 : Code[20];SourceDocument@1003 : Option);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@107(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1002 : Code[20];SourceDocument@1004 : Option);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,SourceDocument);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@73(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10];Type@1003 : Option);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,Type);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE FindWhseWorksheetLine@79(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@185(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1006 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalWithTracking@86(ProductionOrderNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ProductionOrderNo);
      SelectItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking on Page handler ItemTrackingDropShipmentPageHandler.
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBin@13(VAR Zone@1001 : Record 7300;VAR Bin@1002 : Record 7354;ZoneCode@1003 : Code[10];BinCode@1004 : Code[20];LocationCode@1000 : Code[10]);
    BEGIN
      Zone.GET(LocationWhite.Code,ZoneCode);
      Bin.SETRANGE(Code,'<>%1',BinCode);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,1);  // Index.
    END;

    LOCAL PROCEDURE CreateWhseInternalPutawayHeader@161(VAR WhseInternalPutAwayHeader@1000 : Record 7331;FromZonecode@1001 : Code[10];FromBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationWhite.Code);
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",FromZonecode);
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",FromBinCode);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickHeader@16(VAR WhseInternalPickHeader@1000 : Record 7333;FromZonecode@1001 : Code[10];FromBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationWhite.Code);
      WhseInternalPickHeader.VALIDATE("To Zone Code",FromZonecode);
      WhseInternalPickHeader.VALIDATE("To Bin Code",FromBinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@19(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1002 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE CreateWhseWorksheetLine@34(VAR WhseWorksheetLine@1000 : Record 7326;WorksheetTemplateName@1001 : Code[10];Name@1002 : Code[10];WhseDocumentType@1007 : Option;ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibraryWarehouse.CreateWhseWorksheetLine(WhseWorksheetLine,WorksheetTemplateName,Name,LocationCode,WhseDocumentType);
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinAndZoneCodeOnWhseWorksheetLine@72(VAR WhseWorksheetLine@1000 : Record 7326;FromZoneCode@1001 : Code[10];FromBinCode@1002 : Code[20];ToZoneCode@1003 : Code[10];ToBinCode@1004 : Code[20]);
    BEGIN
      WhseWorksheetLine.VALIDATE("From Zone Code",FromZoneCode);
      WhseWorksheetLine.VALIDATE("From Bin Code",FromBinCode);
      WhseWorksheetLine.VALIDATE("To Zone Code",ToZoneCode);
      WhseWorksheetLine.VALIDATE("To Bin Code",ToBinCode);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FilterOnWhseWorksheetLine@84(VAR WhseWorksheetLine@1000 : Record 7326;WorksheetTemplateName@1001 : Code[10];Name@1002 : Code[10];LocationCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WorksheetTemplateName);
      WhseWorksheetLine.SETRANGE(Name,Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE SelectWarehouseActivityLine@109(VAR WarehouseActivityLine@1000 : Record 5767;ItemNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@170(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrderWithTracking@57(VAR PurchaseHeader@1005 : Record 38;VAR WarehouseReceiptHeader@1004 : Record 7316;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;PostReceipt@1007 : Boolean;SetExpirationDate@1008 : Boolean);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity);
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page handler ItemTrackingDropShipmentPageHandler.
      IF SetExpirationDate THEN
        UpdateReservationEntry(ItemNo,CALCDATE('<+1Y>',WORKDATE));
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptHeader(WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      IF PostReceipt THEN
        PostWhseReceiptAndRegisterWarehouseActivity(
          WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",LocationWhite.Code,
          ItemNo,WarehouseActivityLine."Activity Type"::"Put-away",TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShipmentFromSalesOrderWithTracking@87(VAR SalesHeader@1004 : Record 36;VAR WarehouseShipmentHeader@1008 : Record 7320;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;Tracking@1000 : Boolean);
    VAR
      SalesLine@1005 : Record 37;
      WarehouseActivityLine@1006 : Record 5767;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,Quantity,TRUE);  // Release.
      IF Tracking THEN
        SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingDropShipmentPageHandler.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleOnWhseWorksheetLine@24(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];QtyToHandle@1003 : Decimal);
    BEGIN
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode);
      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToShipOnWarehouseShipmentLine@58(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20];QtyToShip@1002 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,WarehouseActivityLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QtyToShip);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionOrderAndPostOutputJournalWithTracking@51(VAR ProductionOrder@1005 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ItemNo,LocationCode,BinCode,Quantity);
      CreateAndPostOutputJournalWithTracking(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateWhseInternalPutawayWithTracking@66(VAR WhseInternalPutAwayLine@1001 : Record 7332;ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;Tracking@1006 : Boolean);
    VAR
      WhseInternalPutAwayHeader@1000 : Record 7331;
      WhseIntPutAwayRelease@1007 : Codeunit 7316;
    BEGIN
      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,ZoneCode,BinCode);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo,Quantity);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global variable for Page Handler.
      IF Tracking THEN
        WhseInternalPutAwayLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingPageHandler.
    END;

    LOCAL PROCEDURE CreatePutAwayDocAndRegisterWarehouseActivity@69(WhseInternalPutAwayLine@1000 : Record 7332;VAR WarehouseActivityLine@1002 : Record 5767;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];RegisterActivity@1004 : Boolean);
    BEGIN
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);
      SelectWarehouseActivityLine(WarehouseActivityLine,ItemNo);
      IF RegisterActivity THEN
        RegisterWarehouseActivity(
          '',WarehouseActivityLine."Source Document"::" ",LocationCode,ItemNo,WarehouseActivityLine."Activity Type"::"Put-away",FALSE);
    END;

    LOCAL PROCEDURE CreatePutAwayFromPutAwayWorksheet@40(VAR WarehouseActivityLine@1004 : Record 5767;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Tracking@1006 : Boolean);
    VAR
      WhseWorksheetName@1000 : Record 7327;
      WhseWorksheetLine@1003 : Record 7326;
      WhseWorksheetTemplate@1005 : Record 7328;
      GetSourceDocInbound@1008 : Codeunit 5751;
    BEGIN
      CreateWhseWorksheetName(WhseWorksheetName,LocationCode,WhseWorksheetTemplate.Type::"Put-away");
      FilterOnWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode,ItemNo);
      GetSourceDocInbound.GetSingleWhsePutAwayDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      WhseWorksheetLine.FINDFIRST;

      WhseWorksheetLine.AutofillQtyToHandle(WhseWorksheetLine);
      IF Tracking THEN
        WhseWorksheetLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingPageHandler.
      COMMIT;  // Commit is requried for Test Cases.
      WhseWorksheetLine.PutAwayCreate(WhseWorksheetLine);
      SelectWarehouseActivityLine(WarehouseActivityLine,ItemNo);
    END;

    LOCAL PROCEDURE CreatePutAwayFromPostedWhseReceipt@272(WhseReceiptNo@1002 : Code[20]);
    VAR
      PostedWhseReceiptHeader@1000 : Record 7318;
      PostedWhseReceiptLine@1001 : Record 7319;
    BEGIN
      PostedWhseReceiptHeader.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      PostedWhseReceiptHeader.FINDFIRST;

      PostedWhseReceiptLine.SetHideValidationDialog(TRUE);
      PostedWhseReceiptLine.SETRANGE("No.",PostedWhseReceiptHeader."No.");
      PostedWhseReceiptLine.FINDFIRST;
      PostedWhseReceiptLine.CreatePutAwayDoc(PostedWhseReceiptLine,'');
    END;

    LOCAL PROCEDURE CreateMovementFormMovementWorkSheet@68(WhseWorksheetName@1001 : Record 7327;WarehouseActivityLine@1004 : Record 5767;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1005 : Decimal);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
      WhseWorksheetLine2@1006 : Record 7326;
      Bin@1007 : Record 7354;
      Zone@1008 : Record 7300;
    BEGIN
      FindBin(Zone,Bin,WarehouseActivityLine."Zone Code",WarehouseActivityLine."Bin Code",LocationCode);
      CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        WhseWorksheetLine."Whse. Document Type"::"Whse. Mov.-Worksheet",ItemNo,LocationCode,Quantity);
      UpdateBinAndZoneCodeOnWhseWorksheetLine(
        WhseWorksheetLine,WarehouseActivityLine."Zone Code",WarehouseActivityLine."Bin Code",Zone.Code,Bin.Code);
      FilterOnWhseWorksheetLine(
        WhseWorksheetLine2,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode,ItemNo);
      WhseWorksheetLine.AutofillQtyToHandle(WhseWorksheetLine2);
      WhseWorksheetLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingPageHandler.
      WhseWorksheetLine.MovementCreate(WhseWorksheetLine2);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@99(WhseWorksheetName@1000 : Record 7327;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];Tracking@1005 : Boolean);
    VAR
      WhseWorksheetLine@1002 : Record 7326;
      GetSourceDocOutbound@1004 : Codeunit 5752;
    BEGIN
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      FilterOnWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode,ItemNo);
      WhseWorksheetLine.FINDFIRST;
      IF Tracking THEN
        WhseWorksheetLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingPageHandler.
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPick@128(VAR WhseInternalPickHeader@1000 : Record 7333;VAR WhseInternalPickLine@1001 : Record 7334;ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;Tracking@1006 : Boolean);
    VAR
      WhseInternalPickRelease@1007 : Codeunit 7315;
    BEGIN
      CreateWhseInternalPickHeader(WhseInternalPickHeader,ZoneCode,BinCode);
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      IF Tracking THEN
        WhseInternalPickLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingPageHandler.
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreateInventoryPick@159(SourceType@1002 : Integer;SourceSubtype@1003 : Option;SourceNo@1004 : Code[20]);
    VAR
      WarehouseRequest@1000 : Record 5765;
      CreateInvtPutAwayPickMvmt@1001 : Report 7323;
    BEGIN
      WarehouseRequest.SETRANGE("Source Type",SourceType);
      WarehouseRequest.SETRANGE("Source Subtype",SourceSubtype);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      COMMIT;
      CreateInvtPutAwayPickMvmt.InitializeRequest(FALSE,TRUE,FALSE,FALSE,FALSE);
      CreateInvtPutAwayPickMvmt.SuppressMessages(TRUE);
      CreateInvtPutAwayPickMvmt.USEREQUESTPAGE(FALSE);
      CreateInvtPutAwayPickMvmt.SETTABLEVIEW(WarehouseRequest);
      CreateInvtPutAwayPickMvmt.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateWarehouseAndBinPoliciesOnLocation@144(VAR Location@1000 : Record 14;UsePutAwayWorksheet@1001 : Boolean;AlwaysCreatePutAwayLine@1002 : Boolean);
    BEGIN
      Location.VALIDATE("Use Put-away Worksheet",UsePutAwayWorksheet);
      Location.VALIDATE("Always Create Put-away Line",AlwaysCreatePutAwayLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrderAndPostWhseReceipt@122(VAR TransferHeader@1009 : Record 5740;VAR WarehouseReceiptHeader@1008 : Record 7316;FromLocation@1005 : Code[10];ToLocation@1004 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      TransferLine@1001 : Record 5741;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,TransferLine,FromLocation,ToLocation,ItemNo,Quantity);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);  // Assign Tracking on Page handler ItemTrackingDropShipmentPageHandler.
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      CreateAndPostWhseReceiptFromInboundTransfer(TransferHeader,WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptFromInboundTransfer@240(VAR TransferHeader@1000 : Record 5740;VAR WarehouseReceiptHeader@1002 : Record 7316);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      FindWarehouseReceiptHeader(
        WarehouseReceiptHeader,TransferHeader."No.",WarehouseReceiptLine."Source Document"::"Inbound Transfer");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleCreateAndRegisterPickFromPickWorksheet@37(VAR WhseWorksheetLine@1003 : Record 7326;WhseWorksheetName@1002 : Record 7327;SourceNo@1004 : Code[20];ItemNo@1005 : Code[20];LocationCode@1001 : Code[10];QtyToHandle@1000 : Decimal);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
    BEGIN
      UpdateQtyToHandleOnWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode,QtyToHandle);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      RegisterWarehouseActivity(
        SourceNo,WarehouseActivityLine."Source Document"::"Sales Order",LocationCode,ItemNo,
        WarehouseActivityLine."Activity Type"::Pick,TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleOnWhsePutawayLine@261(SourceNo@1002 : Code[20];SourceDocument@1003 : Option;LocationCode@1000 : Code[10];ItemNo@1004 : Code[20];LotNo@1007 : Code[20];QtyToHandle@1006 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      i@1005 : Integer;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,SourceNo,SourceDocument,LocationCode,ItemNo,LotNo,"Activity Type"::"Put-away");
        FOR i := "Action Type"::Take TO "Action Type"::Place DO BEGIN
          SETRANGE("Action Type",i);
          FINDLAST;
          VALIDATE("Qty. to Handle",QtyToHandle);
          MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateQtyToShipAndPostWhseShipment@59(WarehouseShipmentHeader@1003 : Record 7320;SourceNo@1001 : Code[20];QtyToShip@1000 : Decimal);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      UpdateQtyToShipOnWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,QtyToShip);
      WarehouseShipmentLine.OpenItemTrackingLines;  // Assign Tracking on Page handler ItemTrackingDropShipmentPageHandler.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE UpdateSerialAndLotNoOnWarehouseActivityLine@67(ItemNo@1000 : Code[20];ProductionOrderNo@1001 : Code[20];LocationCode@1002 : Code[10];ActionType@1003 : Option);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",LocationCode,ItemNo,'',
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
        WarehouseActivityLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
        WarehouseActivityLine.MODIFY(TRUE);
        ItemLedgerEntry.NEXT;
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindPostedWhseReceiptHeader@63(WhseReceiptNo@1001 : Code[20]);
    VAR
      PostedWhseReceiptHeader@1000 : Record 7318;
    BEGIN
      PostedWhseReceiptHeader.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      PostedWhseReceiptHeader.FINDFIRST;
      GlobalDocumentNo := PostedWhseReceiptHeader."No.";  // Assign Global variable for Page Handler.
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1006 : Record 99000771;BaseUnitOfMeasure@1000 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetupComponentsAtLocation@113(NewComponentsAtLocation@1000 : Code[10]) ComponentsAtLocation : Code[10];
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ComponentsAtLocation := ManufacturingSetup."Components at Location";
      ManufacturingSetup.VALIDATE("Components at Location",NewComponentsAtLocation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithTracking@54(EntryType@1001 : Option;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal;Amount@1007 : Decimal;AssignTrackingValue@1005 : Option);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJnlLine(ItemJournalLine,EntryType,ItemNo,LocationCode,Quantity,Amount);
      AssignTracking := AssignTrackingValue;  // Assign Global variable for Page Handler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking on Page Handler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignTracking := AssignTracking::None;  // Assign Global variable for Page Handler.
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      UpdateItemJnlLineDocNo(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      SelectItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking Line on Page Handler.
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateBinAndBinContent@123(VAR Bin@1000 : Record 7354;Item@1001 : Record 27;LocationCode@1002 : Code[10]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      LibraryWarehouse.CreateBin(
        Bin,LocationSilver.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBinContent(BinContent,LocationCode,'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemJnlLineDocNo@174(JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.MODIFYALL("Document No.",LibraryUtility.GenerateGUID);
    END;

    LOCAL PROCEDURE UpdateWarehouseSetupPostingPolicy@149(NewPostingPolicy@1002 : Option) PostingPolicy : Integer;
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      PostingPolicy := WarehouseSetup."Shipment Posting Policy";
      WarehouseSetup.VALIDATE("Shipment Posting Policy",NewPostingPolicy);
      WarehouseSetup.VALIDATE("Receipt Posting Policy",NewPostingPolicy);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WhseGetBinContentAndReleaseWhseIntPutAway@209(VAR WhseInternalPutAwayHeader@1001 : Record 7331;LocationCode@1000 : Code[10]);
    VAR
      BinContent@1003 : Record 7302;
      WhseWorksheetLine@1004 : Record 7326;
      WhseIntPutAwayRelease@1005 : Codeunit 7316;
    BEGIN
      WhseWorksheetLine.INIT;  // Required for PRECAL.
      BinContent.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,1);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithTracking@239(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];OutputQuantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(
        ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,ItemNo,ProductionOrderNo);
      ItemJournalLine.VALIDATE("Output Quantity",OutputQuantity);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    LOCAL PROCEDURE FindWhseInternalPutAwayLine@215(VAR WhseInternalPutAwayLine@1000 : Record 7332;No@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      WhseInternalPutAwayLine.SETRANGE("No.",No);
      WhseInternalPutAwayLine.SETRANGE("Item No.",ItemNo);
      WhseInternalPutAwayLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@92(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunItemTracing@175(VAR ItemTracing@1000 : TestPage 6520;ItemNo@1002 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      ShowComponents@1005 : 'No,Item-tracked Only,All';
      TraceMethod@1004 : 'Origin->Usage,Usage->Origin';
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Consumption,ItemNo);
      ItemTracing.OPENVIEW;
      ItemTracing.SerialNoFilter.SETVALUE(ItemLedgerEntry."Serial No.");
      ItemTracing.ShowComponents.SETVALUE(ShowComponents::All);
      ItemTracing.TraceMethod.SETVALUE(TraceMethod::"Origin->Usage");
      ItemTracing.Trace.INVOKE;
    END;

    LOCAL PROCEDURE UpdateReservationEntry@295(ItemNo@1001 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoOnInventoryMovementLine@182(ActionType@1001 : Option;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];LotNo@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Action Type",ActionType);
        FindWarehouseActivityLine(
          WarehouseActivityLine,'',0,LocationCode,ItemNo,'',"Activity Type"::"Invt. Movement");
        VALIDATE("Lot No.",LotNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE MoveFromBinTypeToBinType@156(VAR BinType@1001 : Record 7303;VAR BinTypeBuffer@1000 : Record 7303);
    BEGIN
      BinTypeBuffer.RESET;
      BinTypeBuffer.DELETEALL;

      BinType.RESET;
      IF BinType.FINDSET THEN
        REPEAT
          BinTypeBuffer := BinType;
          BinTypeBuffer.INSERT;
        UNTIL BinType.NEXT = 0;
      BinType.DELETEALL;
    END;

    LOCAL PROCEDURE GetLotNoFromItemLedgEntry@186(ItemNo@1000 : Code[20];DocNo@1001 : Code[20]) : Code[20];
    VAR
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Document No.",DocNo);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        EXIT("Lot No.");
      END;
    END;

    LOCAL PROCEDURE CreateInvtMvtFromInternalMvtWithLotNo@218(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];BinCode@1003 : Code[20];LotNo@1004 : Code[20]);
    VAR
      InternalMovementHeader@1000 : Record 7346;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,LocationCode,BinCode);
      LibraryWarehouse.GetBinContentInternalMovement(
        InternalMovementHeader,LocationCode,ItemNo,BinCode);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Take,LocationCode,ItemNo,LotNo);
      UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Place,LocationCode,ItemNo,LotNo);
    END;

    LOCAL PROCEDURE PostItemJnlLineWithLotTrackingAndBinCode@196(VAR ItemJournalLine@1000 : Record 83;LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];BinCode@1001 : Code[20]);
    BEGIN
      CreateItemJnlLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LocationCode,LibraryRandom.RandInt(100),0);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      SetGlobalValue(ItemNo,TRUE,FALSE,FALSE,AssignTracking::LotNo,0);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateItemJnlLine@154(VAR ItemJournalLine@1000 : Record 83;EntryType@1003 : Option;ItemNo@1004 : Code[20];LocationCode@1001 : Code[10];Quantity@1005 : Decimal;Amount@1002 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Document No.",LibraryUtility.GenerateGUID);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE(Amount,Amount);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedSalesInvoice@124(OrderNo@1000 : Code[20]);
    VAR
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      // Verify Tracking line.
      SelectSalesInvoiceLine(SalesInvoiceLine,OrderNo);
      REPEAT
        TrackingQuantity := SalesInvoiceLine.Quantity;  // Assign Global Variable for Page Handler.
        SalesInvoiceLine.ShowItemTrackingLines;  // Open Item Tracking Line for Verify on PostedLinesPageHandler.
      UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedPurchaseInvoice@269(OrderNo@1001 : Code[20]);
    VAR
      PurchInvLine@1003 : Record 123;
    BEGIN
      // Verify Tracking line.
      SelectPurchInvLine(PurchInvLine,OrderNo);
      REPEAT
        TrackingQuantity := PurchInvLine.Quantity;  // Assign Global Variable for Page Handler.
        PurchInvLine.ShowItemTrackingLines;  // Open Item Tracking Line for Verify on PostedLinesPageHandler.
      UNTIL PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTrackingOnSalesShipmentLine@74(VAR SalesShipmentLine@1000 : Record 111;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
      SalesShipmentLine.FINDFIRST;
      TrackingQuantity := SalesShipmentLine.Quantity;  // Assign Global Variable for Page handler.
      SalesShipmentLine.ShowItemTrackingLines;  // Open Item Tracking Line for Verify on PostedLinesPageHandler.
    END;

    LOCAL PROCEDURE VerifyTrackingOnSalesShipment@82(OrderNo@1000 : Code[20];Partial@1001 : Boolean);
    VAR
      SalesShipmentHeader@1002 : Record 110;
      SalesShipmentLine@1003 : Record 111;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDSET;
      VerifyTrackingOnSalesShipmentLine(SalesShipmentLine,SalesShipmentHeader."No.");
      IF Partial THEN BEGIN
        SalesShipmentHeader.NEXT;
        VerifyTrackingOnSalesShipmentLine(SalesShipmentLine,SalesShipmentHeader."No.");
      END;
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@164(SourceNo@1004 : Code[20];SourceDocument@1003 : Option;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1006 : Decimal;ActivityType@1000 : Option);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,LocationCode,ItemNo,'',ActivityType);
      Assert.AreEqual(2 * Quantity,WarehouseActivityLine.COUNT,NosOfLineError);  // Value is important for Test. Multiply 2 for take and place.
      REPEAT
        WarehouseActivityLine.TESTFIELD("Serial No.");
        WarehouseActivityLine.TESTFIELD("Lot No." );
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@179(ActivityType@1003 : Option;SourceDocument@1004 : Option;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.FINDSET;
      Assert.AreEqual(2 * Quantity,RegisteredWhseActivityLine.COUNT,NosOfLineError);  // Value is important for Test. Multiply 2 for take and place.
      REPEAT
        RegisteredWhseActivityLine.TESTFIELD("Serial No.");
        RegisteredWhseActivityLine.TESTFIELD("Lot No." );
      UNTIL RegisteredWhseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRegistedInvtMovementLine@203(ItemNo@1001 : Code[20];LotNo@1002 : Code[20];BinCode@1003 : Code[20]);
    VAR
      DummyRegisteredInvtMovementLine@1000 : Record 7345;
    BEGIN
      WITH DummyRegisteredInvtMovementLine DO BEGIN
        INIT;
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        SETRANGE("Bin Code",BinCode);
        Assert.RecordIsNotEmpty(DummyRegisteredInvtMovementLine);
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@55(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      LineCount@1004 : Integer;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.TESTFIELD("Serial No.");
        LineCount += 1;
      UNTIL ItemLedgerEntry.NEXT = 0;
      Assert.AreEqual(Quantity,LineCount,NumberOfLineEqualError);  // Verify Number of line - Tracking Line.
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@90(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;SignFactor@1004 : Integer);
    VAR
      WarehouseEntry@1000 : Record 7312;
      LineCount@1005 : Integer;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.FINDSET;
      REPEAT
        WarehouseEntry.TESTFIELD(Quantity,SignFactor);
        WarehouseEntry.TESTFIELD("Serial No.");
        LineCount += 1;
      UNTIL WarehouseEntry.NEXT = 0;
      Assert.AreEqual(Quantity,LineCount,NumberOfLineEqualError);  // Verify Number of line - Tracking Line.
    END;

    LOCAL PROCEDURE VerifyCostAmountInItemLedgerEntryType@146(EntryType@1003 : Option;ItemNo@1002 : Code[20];Amount@1000 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      SumCostAmountActual@1001 : Decimal;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        SumCostAmountActual += ItemLedgerEntry."Cost Amount (Actual)";
      UNTIL ItemLedgerEntry.NEXT = 0;
      Assert.AreEqual(SumCostAmountActual,Amount,ValueNotEqual);  // Veriy that sum of Cost Amount(Actual) equals to assigned amount.
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@12(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CustomizedSerialPageHandler@23(VAR EnterCustomizedSN@1000 : TestPage 6515);
    BEGIN
      EnterCustomizedSN.CustomizedSN.SETVALUE(LibraryRandom.RandInt(10));  // Random Value for Serial No.
      EnterCustomizedSN.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterCustomizedSN.Increment.SETVALUE(LibraryRandom.RandInt(10));  // Random Value for Increment.
      EnterCustomizedSN.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedLinesPageHandler@139(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      LineCount@1001 : Integer;
    BEGIN
      // Verify Quantity and Number of Line on Tracking Page.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            PostedItemTrackingLines.FIRST;
            REPEAT
              PostedItemTrackingLines.Quantity.ASSERTEQUALS(1);  // Using One for Serial No.
              LineCount += 1;
            UNTIL NOT PostedItemTrackingLines.NEXT;
            Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualError);  // Verify Number of line Tracking Line.
          END;
        AssignTracking::LotNo:
          PostedItemTrackingLines.Quantity.ASSERTEQUALS(TrackingQuantity);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE SalesListPageHandler@88(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.FILTER.SETFILTER("No.",GlobalDocumentNo);
      SalesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSerialNoPageHandler@114(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LineCount@1003 : Integer;
    BEGIN
      // Assign Serial and Lot No based on requirements.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
        AssignTracking::SelectTrackingEntries:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;  // Open Page Item Tracking Summary for Select Line on Page handler ItemTrackingSummaryPageHandler.
            ItemTrackingLines.OK.INVOKE;
          END;
      END;

      IF UpdateTracking THEN BEGIN
        ItemTrackingLines.LAST;
        REPEAT
          ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          Assert.IsTrue(ItemTrackingLines."Serial No.".VALUE > ' ',SerialNoError);
          LineCount += 1;
        UNTIL NOT ItemTrackingLines.PREVIOUS;
        Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualError);  // Verify Number of line - Tracking Line.
        ItemTrackingLines.OK.INVOKE;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLotPageHandler@165(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Qty@1001 : Decimal;
    BEGIN
      ItemTrackingLines.LAST;
      ItemTrackingLines.NEXT;
      ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      Qty := LibraryVariableStorage.DequeueDecimal;
      ItemTrackingLines."Quantity (Base)".SETVALUE(Qty);
      ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(Qty);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingDropShipmentPageHandler@1(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      SerialNoInformation@1001 : Record 6504;
      TrackingQuantity2@1002 : Decimal;
    BEGIN
      // Assign Serial and Lot No based on requirements.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
        AssignTracking::LotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
        AssignTracking::SelectTrackingEntries:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;  // Open Page Item Tracking Summary for Select Line on Page handler ItemTrackingSummaryPageHandler.
            ItemTrackingLines.OK.INVOKE;
          END;
      END;

      IF PartialTracking THEN
        CASE ItemTrackingAction OF
          ItemTrackingAction::None:
            BEGIN
              ItemTrackingLines.LAST;
              ItemTrackingLines."Serial No.".SETVALUE(
                LibraryUtility.GenerateRandomCode(SerialNoInformation.FIELDNO("Serial No."),DATABASE::"Serial No. Information"));
              ItemTrackingLines.OK.INVOKE;
            END;
          ItemTrackingAction::AvailabilitySerialNo:
            BEGIN
              TrackingQuantity2 := TrackingQuantity;
              ItemTrackingLines.LAST;
              WHILE TrackingQuantity2 > 0 DO BEGIN
                TrackingQuantity2 -= 1;
                ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);  // Set Value to partially track the Items.
                ItemTrackingLines.PREVIOUS;
              END;
            END;
          ItemTrackingAction::AvailabilityLotNo:
            BEGIN
              ItemTrackingLines.FIRST;
              ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(TrackingQuantity);
              ItemTrackingLines.OK.INVOKE;
            END;
        END;

      IF UpdateTracking THEN
        CASE ItemTrackingAction OF
          ItemTrackingAction::AvailabilitySerialNo:
            BEGIN
              TrackingQuantity2 := TrackingQuantity;
              ItemTrackingLines.LAST;
              WHILE TrackingQuantity2 > 0 DO BEGIN
                TrackingQuantity2 -= 1;
                ItemTrackingLines."Qty. to Invoice (Base)".SETVALUE(0);  // Set Value to partially track the Items.
                ItemTrackingLines.PREVIOUS;
              END;
              ItemTrackingLines.OK.INVOKE;
            END;
          ItemTrackingAction::AvailabilityLotNo:
            BEGIN
              ItemTrackingLines.FIRST;
              ItemTrackingLines."Quantity (Base)".SETVALUE(QuantityBase);
              ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(TrackingQuantity);
              ItemTrackingLines.OK.INVOKE;
            END;
        END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingCustomizedPageHandler@96(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LineCount@1003 : Integer;
    BEGIN
      // Assign Serial and Lot No based on requirements.
      IF AssignTracking = AssignTracking::SerialNo THEN BEGIN
        ItemTrackingLines.CreateCustomizedSN.INVOKE;  // Open Page "Enter Customized SN" on Page handler CustomizedSerialPageHandler
        ItemTrackingLines.OK.INVOKE;
      END ELSE BEGIN  // Verify Tracking Line.
        ItemTrackingLines.LAST;
        REPEAT
          ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          Assert.IsTrue(ItemTrackingLines."Serial No.".VALUE > ' ',SerialNoError);
          IF ItemTrackingAction = ItemTrackingAction::AvailabilitySerialNo THEN
            Assert.IsFalse(ItemTrackingLines."Lot No.".VALUE > ' ',LotNoError)
          ELSE
            Assert.IsTrue(ItemTrackingLines."Lot No.".VALUE > ' ',SerialNoError);
          LineCount += 1;
        UNTIL NOT ItemTrackingLines.PREVIOUS;
        Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualError);  // Verify Number of line - Tracking Line.
        ItemTrackingLines.OK.INVOKE;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@44(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      IsAssign@1001 : Boolean;
      QtyNotToHandle@1002 : Integer;
    BEGIN
      IsAssign := LibraryVariableStorage.DequeueBoolean;
      QtyNotToHandle := LibraryVariableStorage.DequeueInteger;

      IF IsAssign THEN
        ItemTrackingLines."Assign Serial No.".INVOKE
      ELSE BEGIN
        ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingLines.LAST;
        WHILE QtyNotToHandle > 0 DO BEGIN
          QtyNotToHandle -= 1;
          ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);
          ItemTrackingLines.PREVIOUS;
        END;
      END;

      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@30(VAR WhseItemTrackingLine@1000 : TestPage 6550);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      TrackingQuantity2@1002 : Decimal;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Output,GlobalItemNo);
      TrackingQuantity2 := TrackingQuantity;
      WHILE TrackingQuantity2 > 0 DO BEGIN
        TrackingQuantity2 -= 1;
        WhseItemTrackingLine.NEW;
        WhseItemTrackingLine."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
        WhseItemTrackingLine."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
        WhseItemTrackingLine.Quantity.SETVALUE(1);  // Using One for Serial No.
        ItemLedgerEntry.NEXT;
      END;
      COMMIT;  // Commit required for Test Cases.
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingPageHandler@71(VAR WhseItemTrackingLine@1000 : TestPage 6550);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      TrackingQuantity2@1002 : Decimal;
    BEGIN
      IF AssignTracking = AssignTracking::SerialNo THEN BEGIN
        TrackingQuantity2 := TrackingQuantity;
        WHILE TrackingQuantity2 > 0 DO BEGIN
          TrackingQuantity2 -= 1;
          WhseItemTrackingLine.NEW;
          WhseItemTrackingLine."Serial No.".SETVALUE(TrackingQuantity2 + AssignTracking);
          WhseItemTrackingLine.Quantity.SETVALUE(1);  // Using One for Serial No.
          ItemLedgerEntry.NEXT;
        END;
      END;
      COMMIT;  // Commit required for Test Cases.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@61(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      IF ItemTrackingSummaryCancel THEN
        ItemTrackingSummary.Cancel.INVOKE
      ELSE
        ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE SynchronizeMessageHandler@259(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,SynchronizationCancelled) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE SynchronizeItemTrackingConfirmHandler@157(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,SynchronizeItemTracking) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ItemTrackingConfirmHandler@268(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          BEGIN
            Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarnings) > 0,ConfirmMessage);
            Reply := TRUE;
          END;
        2:
          BEGIN
            Assert.IsTrue(STRPOS(ConfirmMessage,SynchronizeItemTracking) > 0,ConfirmMessage);
            Reply := FALSE;
          END;
      END;
    END;

    [MessageHandler]
    PROCEDURE TransferOrderMessageHandler@129(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,TransferOrderDeleted) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,PutAwayActivityCreated) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE WhseReceiptPutAwayMessageHandler@101(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PutAwayActivityCreated) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE WarehouseActivityMessageHandler@89(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,PutAwayActivityCreated) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MovementActivityCreated) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,PickActivityCreated) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE PutAwayActivityMessageHandler@169(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PutAwayActivityCreated) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE PutAwayMovementMessageHandler@194(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,PutAwayActivityCreated) > 0,Message);
        2,3:
          Assert.IsTrue(STRPOS(Message,MovementActivityCreated) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE PostJournalLinesMessageHandler@102(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,JournalLinesSuccessfullyPosted) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityConfirmHandler@260(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarnings) > 0,ConfirmMessage);
        2:
          Assert.IsTrue(STRPOS(ConfirmMessage,SynchronizeItemTracking) > 0,ConfirmMessage);
      END;
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE PostJournalConfirmHandler@110(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,PostJournalLines) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@80(VAR PickSelection@1000 : TestPage 7343);
    BEGIN
      PickSelection.FILTER.SETFILTER("Location Code",LocationWhite.Code);
      PickSelection.FILTER.SETFILTER("Document No.",GlobalDocumentNo);
      PickSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PutAwaySelectionPageHandler@65(VAR PutAwaySelection@1000 : TestPage 7334);
    BEGIN
      PutAwaySelection.FILTER.SETFILTER("Location Code",LocationWhite.Code);
      PutAwaySelection.FILTER.SETFILTER("Document No.",GlobalDocumentNo);
      PutAwaySelection.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentReportHandler@111(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@152(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.Post.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@137(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@153(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [SCM]
      Test SCM RTAM-II.

      01. Verify Error for Posted Purchase for canceled synchronization message for Serial/Lot, Using Drop Shipment.
      02. Verify Error for Purchase Invoice posting without Sales invoice for Serial/Lot, Using Drop Shipment.
      03. Verify Posted Sales and Purchase Invoice Line for Serial/Lot, Using Drop Shipment for changed Serial No.
      04. Verify Posted Sales and Purchase Invoice Line for Serial No, Using Drop Shipment for multiple Sales Line for different Items.
      05. Verify Posted Sales and Purchase Invoice Line for Lot, Using Drop Shipment.
      06. Verify Posted Sales and Purchase Invoice Line for Serial/Lot, Using Drop Shipment for multiple Sales Line for different Items.
      07. Verify Posted Sales and Purchase Invoice Line for Serial No, Using Drop Shipment on Requisition Worksheet.
      08. Verify Posted Sales and Purchase Invoice Line for different Purchase Orders for Serial, Using Drop Shipment on Requisition Worksheet.
      09. Verify Posted Sales and Purchase Invoice Line for different Purchase Orders for Lot, Using Drop Shipment on Requisition Worksheet.
      10. Verify Posted Sales and Purchase Invoice Line for different Purchase Orders for Serial/Lot, Using Drop Shipment on Requisition Worksheet.
      11. Verify Posted Sales Shipment for Serial/Lot, Partial Create And Register Pick From Pick Worksheet.
      12. Verify Posted Sales Shipment for Serial/Lot, Create And Register Pick From Pick Worksheet.
      13. Verify Warehouse Activity Line for Pick Serial/Lot, Internal Put-away, Movement and picked from Internal Pick.
      14. Verify Warehouse Activity Line for Pick Serial/Lot, Internal Put-away, Movement and picked from Pick worksheet.
      15. Verify Warehouse Activity Line for Pick Serial/Lot,Internal Put-away, Movement and picked from Pick worksheet,Delete and Recreate Pick.
      16. Verify Warehouse Activity Line for Put-away Serial/Lot,Create Put-away from Put-away Worksheet,Delete and Recreate Put-away.
      17. Verify Warehouse Activity Line for Movement Serial/Lot,Create Movement from Movement Worksheet,Delete and Recreate Movement.
      18. Verify Put-away not created on Posting of Whse Receipt for Serial/Lot if Location have "Use Put-away Worksheet" and "Always Create Put-away Line" as True.
      19. Verify Warehouse Activity Line for Put-away Serial/Lot, Create Put-away from Put-away Worksheet if Location have "Use Put-away Worksheet" and "Always Create Put-away Line" as True.
      20. Verify Warehouse Activity Line for Put-away Serial/Lot, Create Put-away from Put-away Worksheet using Transfer Order if Location have "Use Put-away Worksheet" and "Always Create Put-away Line" as True.
      21. Verify Registered Warehouse Activity Line for Put-away Serial/Lot,Post Transfer Receipt and Register created Put-away.
      22. Verify Tracking line for Purchase Order using Create Customized SN for Serial No.
      23. Verify Tracking line for Purchase Order using Create Customized SN for Serial and Lot No.
      24. Verify Registered Whse. Activity Line for Pick Serial/Lot, Create Pick for Production.
      25. Verify Registered Whse. Activity Line for Put-away Serial/Lot, Create Put-away from production.
      26. Verify Error Message for Serial No, Assign Tracking on Internal Put-away without SN Warehouse Tracking.
      27. Verify Error Message for Serial No, Assign Tracking on Internal Pick without SN Warehouse Tracking.
      28. Verify Error Message for Serial No, Assign Tracking on Put-away Worksheet without SN Warehouse Tracking.
      29. Verify Error Message for Serial No, Assign Tracking on Pick Worksheet without SN Warehouse Tracking.
      30. Verify Error Message for Serial No, Assign Tracking on Movement Worksheet without SN Warehouse Tracking.
      31. Verify Error Message for Serial No, Assign Tracking on Warehouse Journal Line without SN Warehouse Tracking.
      32. Verify Warehouse Entry for Serial No,Register Warehouse Journal Line With SN Warehouse Tracking.
      33. Verify Item Ledger Entry for Serial No,Shipping the item of a Warehouse-enabled location using Item Journal without SN Warehouse Tracking.
      34. Verify Item Ledger Entry for Serial No, Shipping the item of a Warehouse-enabled location using negative Output Journal without SN Warehouse Tracking.
      35. Verify Item Ledger Entry for Serial No, Shipping the item of a Warehouse-enabled location using Consumption Journal lines without SN Warehouse Tracking.
      36. Verify Item Ledger Entry and Warehouse Entry for Serial No,Receive the item of a Warehouse-enabled location using Item Journal with SN Warehouse Tracking.
      37. Verify Item Ledger Entry and Warehouse Entry for Serial No, Receive the item of a Warehouse-enabled location using negative Output Journal with SN Warehouse Tracking.
      38. Verify Item Ledger Entry and Warehouse Entry for Serial No, Receive the item of a Warehouse-enabled location using Consumption Journal lines with SN Warehouse Tracking.
      39. Verify Error message and Tracking line for Serial No,Receive the item into a warehouse-enabled location for source document Purchase Order with SN Warehouse Tracking.
      40. Verify Tracking line for Serial No,Receive the item into a warehouse-enabled location for source document Purchase Order without SN Warehouse Tracking.
      41. Verify Tracking line for Serial No,Receive the item into a warehouse-enabled location for source document Sales Return Order with SN Warehouse Tracking.
      42. Verify Tracking line for Serial No,Receive the item into a warehouse-enabled location for source document Sales Return Order without SN Warehouse Tracking.
      43. Verify Tracking line for Serial No,Shipping the item into a warehouse-enabled location for source document Sales Order without SN Warehouse Tracking.
      44. Verify Tracking line for Serial No,Shipping the item into a warehouse-enabled location for source document Purchase Return Order without SN Warehouse Tracking.
      45. Verify Error message for Serial No,Shipping the item into a warehouse-enabled location for source document Sales Order with SN Warehouse Tracking.
      46. Verify Error message for Serial No,Shipping the item into a warehouse-enabled location for source document Purchase Return Order with SN Warehouse Tracking.
      47. Verify Error message,Receive the item into a warehouse-enabled location for source document Purchase Order with SN Warehouse Tracking.
      48. Verify Error message for Receive the item into a warehouse-enabled location for source document Purchase Order without SN Warehouse Tracking.
      49. Verify Error message for Receive the item into a warehouse-enabled location for source document Sales Return Order with SN Warehouse Tracking.
      50. Verify Error message for Receive the item into a warehouse-enabled location for source document Sales Return Order without SN Warehouse Tracking.
      51. Verify Error message for Shipping the item into a warehouse-enabled location for source document Sales Order without SN Warehouse Tracking.
      52. Verify Error message for Shipping the item into a warehouse-enabled location for source document Purchase Return Order without SN Warehouse Tracking.
      53. Verify as Program applies Rounding for Cost Amount when posting of Item journal with Entry Type Positive Adjmt for Serial Tracked Item.
      54. Verify Parent Item Output is present on Item Tracing Page when run trace by SN No. assigned to Consumption Item

          Covers Test cases :
        ---------------------------------------------------------------------------------------------------
         Test Function                                                                         TFS ID
        ---------------------------------------------------------------------------------------------------
        PurchaseOrderWithDropShipmentSerialNoSynchronizationError                              129269
        PurchaseOrderWithDropShipmentSerialNoWithoutPostSalesOrderError                        129269
        PurchaseOrderWithDropShipmentPartialChangedSerialNo                                    129269
        PurchaseOrderWithMultipleLinesDropShipmentSerialNo                                     129269
        PurchaseOrderWithDropShipmentPartialLotNo                                              129269
        PurchaseOrderWithMultipleLinesDropShipmentPartialSerialNoLotNo                         129269
        RequisitionWorksheetWithDropShipmentSerialNo                                           129269
        RequisitionWorksheetWithDropShipmentForMultipleLinesSerialNo                           129269
        RequisitionWorksheetWithDropShipmentPartialLotNo                                       129269
        RequisitionWorksheetWithDropShipmentForMultipleLinesPartialSerialNoLotNo               129269

          Covers Test cases :
        -----------------------------------------------------------------------------------------------------------
         Test Function                                                                               TFS ID
        -----------------------------------------------------------------------------------------------------------
        PostedSalesShipmentPartialPickFromPickWorksheetSerialLotNo                            128755,129268,129273
        PostedSalesShipmentPickFromPickWorksheetSerialLotNo                                   128755,129268,129273
        MovementAndPickFromInternalPickSerialLotNo                                            128755,129268,129273
        MovementAndPickFromPickWorksheetSerialLotNo                                           128755,129268,129273
        MovementAndPickFromPickWorksheetRecreatePickSerialLotNo                               128755,129268,129273
        PutAwayFromPutAwayWorksheetRecreatePutAwaySerialLotNo                                 128755,129268,129273
        MovementFromMovementWorksheetRecreateMovementSerialLotNo                              128755,129268,129273
        PutAwayErrorWhenUsePutAwayWorksheetSerialLotNo                                        128755,129268,129273
        PutAwayUsingWorksheetWhenUsePutAwayWorksheetSerialLotNo                               128755,129268,129273
        PutAwayUsingWorksheetForTransferWhenUsePutAwayWorksheetSerialLotNo                    128755,129268,129273
        TransferReceiptAndRegisterPutAwaySerialLotNo                                          128755,129268,129273
        PurchaseOrderWithCustomizedTrackingForSerialNo                                        129272
        PurchaseOrderWithCustomizedTrackingForSerialLotNo                                     129272

          Covers Test cases :
        -----------------------------------------------------------------------------------------------------------
         Test Function                                                                               TFS ID
        -----------------------------------------------------------------------------------------------------------
        PickForProductionOrderSerialLotNo                                                            126133
        PutAwayFromProductionOrderSerialLotNo                                                        126133
        TrackingLineOnInternalPutAwayWithoutSNWarehouseTrackingError                                 129271
        TrackingLineOnInternalPickWithoutSNWarehouseTrackingError                                    129271
        TrackingLineOnPutAwayWorksheetWithoutSNWarehouseTrackingError                                129271
        TrackingLineOnPickWorksheetWithoutSNWarehouseTrackingError                                   129271
        TrackingLineOnMovementWorksheetWithoutSNWarehouseTrackingError                               129271
        TrackingLineOnWarehouseJournalLineWithoutSNWarehouseTrackingError                            129271
        RegisterWhseJournalLineWithSNWarehouseTracking                                               129271
        QuantityShipFromItemJournalLineWithoutSNWarehouseTracking                                    129271
        QuantityShipFromOutputJournalWithoutSNWarehouseTracking                                      129271
        QuantityShipFromConsumptionJournalLineWithoutSNWarehouseTracking                             129271
        QuantityReceiveFromItemJournalLineWithSNWarehouseTracking                                    129271
        QuantityReceiveFromOutputJournalWithSNWarehouseTracking                                      129271
        QuantityReceiveFromConsumptionJournalLineWithSNWarehouseTracking                             129271
        WarehouseReceiptFromPurchaseOrderWithoutSNWarehouseTracking                                  129271
        WarehouseReceiptFromPurchaseOrderWithSNWarehouseTracking                                     129271
        WarehouseReceiptFromSalesReturnOrderWithoutSNWarehouseTracking                               129271
        WarehouseReceiptFromSalesReturnOrderWithSNWarehouseTracking                                  129271
        WarehouseShipmentFromSalesOrderWithoutSNWarehouseTracking                                    129271
        WarehouseShipmentFromPurchaseReturnOrderWithoutSNWarehouseTracking                           129271
        RegisterPickForSalesOrderWithSNWarehouseTrackingError                                        129271
        RegisterPickForPurchaseReturnOrderWithSNWarehouseTrackingError                               129271
        PostWarehouseReceiptFromPurchaseOrderWithoutSNWarehouseTrackingError                         129271
        PostWarehouseReceiptFromPurchaseOrderWithSNWarehouseTrackingError                            129271
        PostWarehouseReceiptFromSalesReturnOrderWithoutSNWarehouseTrackingError                      129271
        PostWarehouseReceiptFromSalesReturnOrderWithSNWarehouseTrackingError                         129271
        PostWarehouseShipmentFromSalesOrderWithoutSNWarehouseTrackingError                           129271
        PostWarehouseShipmentFromPurchaseReturnOrderWithoutSNWarehouseTrackingError                  129271
        RoundCostAmountOnItemLedgerEntryWithItemJournaForlPositiveAdjustment                         264906
        RoundCostAmountOnItemLedgerEntryWithItemJournalForPurchase                                   264906

        ParentItemOutputOnItemTracingPage                                                            109051
    }
    END.
  }
}

