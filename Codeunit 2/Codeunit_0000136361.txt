OBJECT Codeunit 136361 UT C Copy Job
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryJob@1010 : Codeunit 131920;
      LibraryUtility@1012 : Codeunit 131000;
      LibrarySales@1013 : Codeunit 130509;
      IsInitialized@1009 : Boolean;
      JobWithManualNoNotCreatedErr@1014 : TextConst 'ENU=Job with manual number is not created.';

    [Test]
    PROCEDURE TestFunctionCopyJob@10();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      SourceJobPlanningLine@1000 : Record 1003;
      TargetJob@1003 : Record 167;
      CopyJob@1004 : Codeunit 1006;
      NewJobNo@1005 : Code[20];
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      NewJobNo := LibraryUtility.GenerateGUID;
      CopyJob.CopyJob(SourceJob,NewJobNo,'','');
      TargetJob.GET(NewJobNo);
      CompareJobFields(SourceJob,TargetJob);
    END;

    [Test]
    PROCEDURE TestFunctionCopyJobTask@3();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      SourceJobPlanningLine@1000 : Record 1003;
      TargetJob@1004 : Record 167;
      TargetJobTask@1003 : Record 1001;
      CopyJob@1005 : Codeunit 1006;
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",'');
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobTasks(SourceJob,TargetJob);
      TargetJobTask.GET(TargetJob."No.",SourceJobTask."Job Task No.");
      CompareJobTaskFields(SourceJobTask,TargetJobTask);
    END;

    [Test]
    PROCEDURE TestFunctionCopyJobPlanningLine@4();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      SourceJobPlanningLine@1000 : Record 1003;
      TargetJob@1004 : Record 167;
      TargetJobTask@1005 : Record 1001;
      TargetJobPlanningLine@1003 : Record 1003;
      CopyJob@1006 : Codeunit 1006;
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",'');

      TargetJobTask.INIT;
      TargetJobTask."Job No." := TargetJob."No.";
      TargetJobTask."Job Task No." := SourceJobTask."Job Task No.";
      TargetJobTask.INSERT;

      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);
      TargetJobPlanningLine.GET(TargetJob."No.",TargetJobTask."Job Task No.",SourceJobPlanningLine."Line No.");
      CompareJobPlanningLineFields(SourceJobPlanningLine,TargetJobPlanningLine,TRUE);
    END;

    [Test]
    PROCEDURE TestFunctionCopyJobPlanningLineWithoutQuantity@12();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      SourceJobPlanningLine@1000 : Record 1003;
      TargetJob@1004 : Record 167;
      TargetJobTask@1005 : Record 1001;
      TargetJobPlanningLine@1003 : Record 1003;
      CopyJob@1006 : Codeunit 1006;
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",'');

      TargetJobTask.INIT;
      TargetJobTask."Job No." := TargetJob."No.";
      TargetJobTask."Job Task No." := SourceJobTask."Job Task No.";
      TargetJobTask.INSERT;

      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.SetCopyQuantity(FALSE);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);
      TargetJobPlanningLine.GET(TargetJob."No.",TargetJobTask."Job Task No.",SourceJobPlanningLine."Line No.");
      CompareJobPlanningLineFields(SourceJobPlanningLine,TargetJobPlanningLine,FALSE);
    END;

    [Test]
    PROCEDURE CopyJobTaskPreserveWIPMethod@5();
    VAR
      SourceJob@1004 : Record 167;
      SourceJobTask@1003 : Record 1001;
      SourceJobPlanningLine@1002 : Record 1003;
      TargetJob@1005 : Record 167;
      TargetJobTask@1006 : Record 1001;
      JobTask@1000 : Record 1001;
      JobWIPMethod@1001 : Record 1006;
      CopyJob@1007 : Codeunit 1006;
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);

      UpdateJobTaskLines(SourceJob."No.",JobTask."Job Task Type"::Posting);

      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",JobWIPMethod.Code);

      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobTasks(SourceJob,TargetJob);
      TargetJobTask.GET(TargetJob."No.",SourceJobTask."Job Task No.");
      TargetJobTask.TESTFIELD("WIP Method",TargetJob."WIP Method");
    END;

    [Test]
    PROCEDURE CopyJobModifyDescriptionAndCustomer@13();
    VAR
      SourceJob@1004 : Record 167;
      SourceJobTask@1003 : Record 1001;
      SourceJobPlanningLine@1002 : Record 1003;
      TargetJob@1005 : Record 167;
      CopyJob@1006 : Codeunit 1006;
      NewCustNo@1001 : Code[20];
      NewJobNo@1007 : Code[20];
      NewDescription@1000 : Text[50];
    BEGIN
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      NewDescription := LibraryUtility.GenerateGUID;
      NewCustNo := CreateCustomer;
      SourceJob.VALIDATE(Status,SourceJob.Status::Planning);
      SourceJob.MODIFY;

      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      NewJobNo := LibraryUtility.GenerateGUID;
      CopyJob.CopyJob(SourceJob,NewJobNo,NewDescription,NewCustNo);
      TargetJob.GET(NewJobNo);

      Assert.AreEqual(NewDescription,TargetJob.Description,'');
      Assert.AreEqual(NewCustNo,TargetJob."Bill-to Customer No.",'');
    END;

    [Test]
    PROCEDURE CopyJobWithSeriesNoAndDisabledManualNos@14();
    VAR
      SourceJob@1003 : Record 167;
      CopyJob@1004 : Codeunit 1006;
      ExpectedJobNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 108995] Job with disabled "Manual Nos" in "Job No. Series" can be copied
      Initialize;

      // [GIVEN] Job
      LibraryJob.CreateJob(SourceJob);

      // [GIVEN] Disable "Manual Nos" for "Job No. Series"
      SetupManualNos(FALSE);

      // [GIVEN] Next "No." from "Job No. Series"
      ExpectedJobNo := LibraryUtility.GenerateGUID;

      // [WHEN] Copy the job
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJob(SourceJob,ExpectedJobNo,'','');

      // [THEN] New job created with "Job No." assigned from "Job No. Series"
      Assert.IsTrue(SourceJob.GET(ExpectedJobNo),JobWithManualNoNotCreatedErr);

      // TearDown
      SetupManualNos(TRUE);
    END;

    [Test]
    PROCEDURE WIPMethodNotCopiedFromJobWhenOriginalValueIsBlank@15();
    VAR
      SourceJob@1003 : Record 167;
      SourceJobTask@1002 : Record 1001;
      SourceJobPlanningLine@1001 : Record 1003;
      TargetJob@1004 : Record 167;
      TargetJobTask@1005 : Record 1001;
      JobWIPMethod@1000 : Record 1006;
      CopyJob@1006 : Codeunit 1006;
    BEGIN
      // [SCENARIO 377532] "WIP Method" shouldn't be copied to Job Task if it was not defined in the original Job Task

      // [GIVEN] Source Job with Job Task "A" where "WIP Method" is not defined
      Initialize;
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      // [GIVEN] Target job with "WIP Method"
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);
      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",JobWIPMethod.Code);

      // [WHEN] Copy Source Job to Target Job
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobTasks(SourceJob,TargetJob);

      // [THEN] "WIP Method" in copied Job Task is blank
      TargetJobTask.GET(TargetJob."No.",SourceJobTask."Job Task No.");
      TargetJobTask.TESTFIELD("WIP Method",'');
    END;

    [Test]
    PROCEDURE JobPlanningLineWithUnevenLineNoTwice@2();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      SourceJobPlanningLine@1000 : Record 1003;
      TargetJob@1004 : Record 167;
      TargetJobTask@1005 : Record 1001;
      CopyJob@1006 : Codeunit 1006;
    BEGIN
      // [SCENARIO 195862] Job Planning Line with uneven "Line No." can be copied to new Job Task twice

      Initialize;

      // [GIVEN] Source Job Task and Job Planning Line
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      // [GIVEN] Additional Job Planning Line with "Line No." = 10625 for Source Job Task
      SourceJobPlanningLine."Line No." := 10625;
      SourceJobPlanningLine.INSERT;

      // [GIVEN] Target Job Task
      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",'');
      MockJobTask(TargetJobTask,TargetJob."No.",SourceJobTask."Job Task No.");

      // [GIVEN] Job Planning Line copied from Source to Target Job Task
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);

      // [WHEN] Copy Job Planning Line from Source to Target Job Task second time
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);

      // [THEN] 4 Job Planning Lines are copied to Target Job Task
      VerifyJobPlanningLineCount(TargetJob."No.",TargetJobTask."Job Task No.",4);
    END;

    [Test]
    PROCEDURE JobPlanningLineWithLineNoCloseToZeroTwice@17();
    VAR
      SourceJob@1002 : Record 167;
      SourceJobTask@1001 : Record 1001;
      TargetJob@1004 : Record 167;
      TargetJobTask@1005 : Record 1001;
      CopyJob@1006 : Codeunit 1006;
    BEGIN
      // [SCENARIO 195862] Job Planning Line with "Line No." close to zero can be copied to new Job Task twice

      Initialize;

      // [GIVEN] Source Job and Job Task
      LibraryJob.CreateJob(SourceJob);
      LibraryJob.CreateJobTask(SourceJob,SourceJobTask);

      // [GIVEN] Job Planning Lines with "Line No." = 1 and "Line No." = 2
      MockJobPlanningLineWithSpecificLineNo(SourceJobTask,1);
      MockJobPlanningLineWithSpecificLineNo(SourceJobTask,2);

      // [GIVEN] Target Job Task
      InitJobTask(TargetJob,SourceJob."Bill-to Customer No.",'');
      MockJobTask(TargetJobTask,TargetJob."No.",SourceJobTask."Job Task No.");

      // [GIVEN] Job Planning Line copied from Source to Target Job Task
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);

      // [WHEN] Copy Job Planning Line from Source to Target Job Task second time
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);

      // [THEN] 4 Job Planning Lines are copied to Target Job Task
      VerifyJobPlanningLineCount(TargetJob."No.",TargetJobTask."Job Task No.",4);
    END;

    [Test]
    PROCEDURE CopyJobPlanningLinesFromSameJob@19();
    VAR
      SourceJob@1005 : Record 167;
      SourceJobTask@1004 : Record 1001;
      SourceJobPlanningLine@1003 : Record 1003;
      CopyJob@1000 : Codeunit 1006;
    BEGIN
      // [SCENARIO 382032] Copy Job Planning Lines from the same Job Task

      Initialize;

      // [GIVEN] Source Job Task and Job Planning Line
      SetUp(SourceJob,SourceJobTask,SourceJobPlanningLine);

      // [WHEN] Copy Job Planning Line from Source to Source Job Task
      CopyJob.SetCopyOptions(TRUE,TRUE,TRUE,0,0,0);
      CopyJob.CopyJobPlanningLines(SourceJobTask,SourceJobTask);

      // [THEN] Source Job Task have 2 Job Planning Lines
      VerifyJobPlanningLineCount(SourceJob."No.",SourceJobTask."Job Task No.",2);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE SetUp@1(VAR SourceJob@1005 : Record 167;VAR SourceJobTask@1004 : Record 1001;VAR SourceJobPlanningLine@1000 : Record 1003);
    BEGIN
      LibraryJob.CreateJob(SourceJob);

      LibraryJob.CreateJobTask(SourceJob,SourceJobTask);

      LibraryJob.CreateJobPlanningLine(
        SourceJobPlanningLine."Line Type"::"Both Schedule and Contract",SourceJobPlanningLine.Type::Item,SourceJobTask,
        SourceJobPlanningLine);
      SourceJobPlanningLine.VALIDATE(Quantity,RANDOM(1000));
      SourceJobPlanningLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateJobTaskLines@7(JobNo@1002 : Code[20];JobTaskType@1003 : Option);
    VAR
      JobWIPMethod@1000 : Record 1006;
      JobTask@1001 : Record 1001;
    BEGIN
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);

      WITH JobTask DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task Type",JobTaskType);
        FINDSET(TRUE);
        REPEAT
          "WIP-Total" := "WIP-Total"::Total;
          "WIP Method" := JobWIPMethod.Code;
          MODIFY;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@23() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CompareJobFields@8(SourceJob@1000 : Record 167;TargetJob@1001 : Record 167);
    BEGIN
      Assert.AreEqual(SourceJob."Search Description",TargetJob."Search Description",'');
      Assert.AreEqual(SourceJob.Description,TargetJob.Description,'');
      Assert.AreEqual(SourceJob."Description 2",TargetJob."Description 2",'');
      Assert.AreEqual(SourceJob."Bill-to Customer No.",TargetJob."Bill-to Customer No.",'');
      Assert.AreEqual(TargetJob."Creation Date",TODAY,'');
      Assert.AreEqual(SourceJob."Starting Date",TargetJob."Starting Date",'');
      Assert.AreEqual(SourceJob."Ending Date",TargetJob."Ending Date",'');
      Assert.AreEqual(TargetJob.Status,TargetJob.Status::Planning,'');
      Assert.AreEqual(SourceJob."Person Responsible",TargetJob."Person Responsible",'');
      Assert.AreEqual(SourceJob."Global Dimension 1 Code",TargetJob."Global Dimension 1 Code",'');
      Assert.AreEqual(SourceJob."Global Dimension 2 Code",TargetJob."Global Dimension 2 Code",'');
      Assert.AreEqual(SourceJob."Job Posting Group",TargetJob."Job Posting Group",'');
      Assert.AreEqual(SourceJob.Blocked,TargetJob.Blocked,'');
      Assert.AreEqual(TargetJob."Last Date Modified",TODAY,'');
      Assert.AreEqual(SourceJob."Customer Disc. Group",TargetJob."Customer Disc. Group",'');
      Assert.AreEqual(SourceJob."Customer Price Group",TargetJob."Customer Price Group",'');
      Assert.AreEqual(SourceJob."Language Code",TargetJob."Language Code",'');
      Assert.AreEqual(SourceJob."Bill-to Name",TargetJob."Bill-to Name",'');
      Assert.AreEqual(SourceJob."Bill-to Address",TargetJob."Bill-to Address",'');
      Assert.AreEqual(SourceJob."Bill-to Address 2",TargetJob."Bill-to Address 2",'');
      Assert.AreEqual(SourceJob."Bill-to City",TargetJob."Bill-to City",'');
      Assert.AreEqual(SourceJob."Bill-to County",TargetJob."Bill-to County",'');
      Assert.AreEqual(SourceJob."Bill-to Post Code",TargetJob."Bill-to Post Code",'');
      Assert.AreEqual(SourceJob."No. Series",TargetJob."No. Series",'');
      Assert.AreEqual(SourceJob."Bill-to Country/Region Code",TargetJob."Bill-to Country/Region Code",'');
      Assert.AreEqual(SourceJob."Bill-to Name 2",TargetJob."Bill-to Name 2",'');
      Assert.AreEqual(SourceJob.Reserve,TargetJob.Reserve,'');
      Assert.AreEqual(SourceJob."WIP Method",TargetJob."WIP Method",'');
      Assert.AreEqual(SourceJob."Currency Code",TargetJob."Currency Code",'');
      Assert.AreEqual(SourceJob."Bill-to Contact No.",TargetJob."Bill-to Contact No.",'');
      Assert.AreEqual(SourceJob."Bill-to Contact",TargetJob."Bill-to Contact",'');
      Assert.AreEqual(SourceJob."WIP Posting Date",TargetJob."WIP Posting Date",'');
      Assert.AreEqual(SourceJob."Invoice Currency Code",TargetJob."Invoice Currency Code",'');
      Assert.AreEqual(SourceJob."Exch. Calculation (Cost)",TargetJob."Exch. Calculation (Cost)",'');
      Assert.AreEqual(SourceJob."Exch. Calculation (Price)",TargetJob."Exch. Calculation (Price)",'');
      Assert.AreEqual(SourceJob."Allow Schedule/Contract Lines",TargetJob."Allow Schedule/Contract Lines",'');
      Assert.AreEqual(SourceJob.Complete,TargetJob.Complete,'');
      Assert.AreEqual(SourceJob."Apply Usage Link",TargetJob."Apply Usage Link",'');
      Assert.AreEqual(SourceJob."WIP Posting Method",TargetJob."WIP Posting Method",'');
      Assert.AreEqual(SourceJob."Resource Filter",TargetJob."Resource Filter",'');
      Assert.AreEqual(SourceJob."Posting Date Filter",TargetJob."Posting Date Filter",'');
      Assert.AreEqual(SourceJob."Resource Gr. Filter",TargetJob."Resource Gr. Filter",'');
      Assert.AreEqual(SourceJob."Planning Date Filter",TargetJob."Planning Date Filter",'');

      SourceJob.CALCFIELDS(Comment,
        "Scheduled Res. Qty.",
        "Scheduled Res. Gr. Qty.",
        "Total WIP Cost Amount",
        "Total WIP Cost G/L Amount",
        "WIP Entries Exist",
        "WIP G/L Posting Date");

      SourceJob.CALCFIELDS("Recog. Sales Amount",
        "Recog. Sales G/L Amount",
        "Recog. Costs Amount",
        "Recog. Costs G/L Amount",
        "Total WIP Sales Amount",
        "Total WIP Sales G/L Amount",
        "WIP Completion Calculated",
        "Next Invoice Date",
        "WIP Warnings",
        "Applied Costs G/L Amount",
        "Applied Sales G/L Amount",
        "Calc. Recog. Sales Amount",
        "Calc. Recog. Costs Amount",
        "Calc. Recog. Sales G/L Amount",
        "Calc. Recog. Costs G/L Amount",
        "WIP Completion Posted");

      TargetJob.CALCFIELDS(Comment,
        "Scheduled Res. Qty.",
        "Scheduled Res. Gr. Qty.",
        "Total WIP Cost Amount",
        "Total WIP Cost G/L Amount",
        "WIP Entries Exist",
        "WIP G/L Posting Date");

      TargetJob.CALCFIELDS("Recog. Sales Amount",
        "Recog. Sales G/L Amount",
        "Recog. Costs Amount",
        "Recog. Costs G/L Amount",
        "Total WIP Sales Amount",
        "Total WIP Sales G/L Amount",
        "WIP Completion Calculated",
        "Next Invoice Date",
        "WIP Warnings",
        "Applied Costs G/L Amount",
        "Applied Sales G/L Amount",
        "Calc. Recog. Sales Amount",
        "Calc. Recog. Costs Amount",
        "Calc. Recog. Sales G/L Amount",
        "Calc. Recog. Costs G/L Amount",
        "WIP Completion Posted");

      Assert.AreEqual(SourceJob.Comment,TargetJob.Comment,'');
      Assert.AreEqual(SourceJob."Scheduled Res. Qty.",TargetJob."Scheduled Res. Qty.",'');
      Assert.AreEqual(SourceJob."Scheduled Res. Gr. Qty.",TargetJob."Scheduled Res. Gr. Qty.",'');
      Assert.AreEqual(SourceJob."Total WIP Cost Amount",TargetJob."Total WIP Cost Amount",'');
      Assert.AreEqual(SourceJob."Total WIP Cost G/L Amount",TargetJob."Total WIP Cost G/L Amount",'');
      Assert.AreEqual(SourceJob."WIP Entries Exist",TargetJob."WIP Entries Exist",'');
      Assert.AreEqual(SourceJob."WIP G/L Posting Date",TargetJob."WIP G/L Posting Date",'');
      Assert.AreEqual(SourceJob."Recog. Sales Amount",TargetJob."Recog. Sales Amount",'');
      Assert.AreEqual(SourceJob."Recog. Sales G/L Amount",TargetJob."Recog. Sales G/L Amount",'');
      Assert.AreEqual(SourceJob."Recog. Costs Amount",TargetJob."Recog. Costs Amount",'');
      Assert.AreEqual(SourceJob."Recog. Costs G/L Amount",TargetJob."Recog. Costs G/L Amount",'');
      Assert.AreEqual(SourceJob."Total WIP Sales Amount",TargetJob."Total WIP Sales Amount",'');
      Assert.AreEqual(SourceJob."Total WIP Sales G/L Amount",TargetJob."Total WIP Sales G/L Amount",'');
      Assert.AreEqual(SourceJob."WIP Completion Calculated",TargetJob."WIP Completion Calculated",'');
      Assert.AreEqual(SourceJob."Next Invoice Date",TargetJob."Next Invoice Date",'');
      Assert.AreEqual(SourceJob."WIP Warnings",TargetJob."WIP Warnings",'');
      Assert.AreEqual(SourceJob."Applied Costs G/L Amount",TargetJob."Applied Costs G/L Amount",'');
      Assert.AreEqual(SourceJob."Applied Sales G/L Amount",TargetJob."Applied Sales G/L Amount",'');
      Assert.AreEqual(SourceJob."Calc. Recog. Sales Amount",TargetJob."Calc. Recog. Sales Amount",'');
      Assert.AreEqual(SourceJob."Calc. Recog. Costs Amount",TargetJob."Calc. Recog. Costs Amount",'');
      Assert.AreEqual(SourceJob."Calc. Recog. Sales G/L Amount",TargetJob."Calc. Recog. Sales G/L Amount",'');
      Assert.AreEqual(SourceJob."Calc. Recog. Costs G/L Amount",TargetJob."Calc. Recog. Costs G/L Amount",'');
      Assert.AreEqual(SourceJob."WIP Completion Posted",TargetJob."WIP Completion Posted",'');
    END;

    LOCAL PROCEDURE CompareJobTaskFields@9(SourceJobTask@1000 : Record 1001;TargetJobTask@1001 : Record 1001);
    BEGIN
      Assert.AreEqual(SourceJobTask."Job Task No.",TargetJobTask."Job Task No.",'');
      Assert.AreEqual(SourceJobTask.Description,TargetJobTask.Description,'');
      Assert.AreEqual(SourceJobTask."Job Task Type",TargetJobTask."Job Task Type",'');
      Assert.AreEqual(SourceJobTask."WIP-Total",TargetJobTask."WIP-Total",'');
      Assert.AreEqual(SourceJobTask."Job Posting Group",TargetJobTask."Job Posting Group",'');
      Assert.AreEqual(SourceJobTask."WIP Method",TargetJobTask."WIP Method",'');
      Assert.AreEqual(SourceJobTask.Totaling,TargetJobTask.Totaling,'');
      Assert.AreEqual(SourceJobTask."New Page",TargetJobTask."New Page",'');
      Assert.AreEqual(SourceJobTask."No. of Blank Lines",TargetJobTask."No. of Blank Lines",'');
      Assert.AreEqual(SourceJobTask.Indentation,TargetJobTask.Indentation,'');
      Assert.AreEqual(SourceJobTask."Recognized Sales Amount",TargetJobTask."Recognized Sales Amount",'');
      Assert.AreEqual(SourceJobTask."Recognized Costs Amount",TargetJobTask."Recognized Costs Amount",'');
      Assert.AreEqual(SourceJobTask."Recognized Sales G/L Amount",TargetJobTask."Recognized Sales G/L Amount",'');
      Assert.AreEqual(SourceJobTask."Recognized Costs G/L Amount",TargetJobTask."Recognized Costs G/L Amount",'');
      Assert.AreEqual(SourceJobTask."Global Dimension 1 Code",TargetJobTask."Global Dimension 1 Code",'');
      Assert.AreEqual(SourceJobTask."Global Dimension 2 Code",TargetJobTask."Global Dimension 2 Code",'');
      Assert.AreEqual(SourceJobTask."Posting Date Filter",TargetJobTask."Posting Date Filter",'');
      Assert.AreEqual(SourceJobTask."Planning Date Filter",TargetJobTask."Planning Date Filter",'');

      SourceJobTask.CALCFIELDS(
        "Schedule (Total Cost)",
        "Schedule (Total Price)",
        "Usage (Total Cost)",
        "Usage (Total Price)",
        "Contract (Total Cost)",
        "Contract (Total Price)",
        "Contract (Invoiced Price)",
        "Contract (Invoiced Cost)",
        "Outstanding Orders",
        "Amt. Rcd. Not Invoiced",
        "Remaining (Total Cost)",
        "Remaining (Total Price)");

      TargetJobTask.CALCFIELDS(
        "Schedule (Total Cost)",
        "Schedule (Total Price)",
        "Usage (Total Cost)",
        "Usage (Total Price)",
        "Contract (Total Cost)",
        "Contract (Total Price)",
        "Contract (Invoiced Price)",
        "Contract (Invoiced Cost)",
        "Outstanding Orders",
        "Amt. Rcd. Not Invoiced",
        "Remaining (Total Cost)",
        "Remaining (Total Price)");

      Assert.AreEqual(SourceJobTask."Schedule (Total Cost)",TargetJobTask."Schedule (Total Cost)",'');
      Assert.AreEqual(SourceJobTask."Schedule (Total Price)",TargetJobTask."Schedule (Total Price)",'');
      Assert.AreEqual(SourceJobTask."Usage (Total Cost)",TargetJobTask."Usage (Total Cost)",'');
      Assert.AreEqual(SourceJobTask."Usage (Total Price)",TargetJobTask."Usage (Total Price)",'');
      Assert.AreEqual(SourceJobTask."Contract (Total Cost)",TargetJobTask."Contract (Total Cost)",'');
      Assert.AreEqual(SourceJobTask."Contract (Total Price)",TargetJobTask."Contract (Total Price)",'');
      Assert.AreEqual(SourceJobTask."Contract (Invoiced Price)",TargetJobTask."Contract (Invoiced Price)",'');
      Assert.AreEqual(SourceJobTask."Contract (Invoiced Cost)",TargetJobTask."Contract (Invoiced Cost)",'');
      Assert.AreEqual(SourceJobTask."Outstanding Orders",TargetJobTask."Outstanding Orders",'');
      Assert.AreEqual(SourceJobTask."Amt. Rcd. Not Invoiced",TargetJobTask."Amt. Rcd. Not Invoiced",'');
      Assert.AreEqual(SourceJobTask."Remaining (Total Cost)",TargetJobTask."Remaining (Total Cost)",'');
      Assert.AreEqual(SourceJobTask."Remaining (Total Price)",TargetJobTask."Remaining (Total Price)",'');
    END;

    LOCAL PROCEDURE CompareJobPlanningLineFields@11(SourceJobPlanningLine@1001 : Record 1003;TargetJobPlanningLine@1002 : Record 1003;QuantityCopied@1000 : Boolean);
    BEGIN
      Assert.AreEqual(TargetJobPlanningLine."Planning Date",WORKDATE,'');
      Assert.AreEqual(SourceJobPlanningLine."Document No.",TargetJobPlanningLine."Document No.",'');
      Assert.AreEqual(SourceJobPlanningLine.Type,TargetJobPlanningLine.Type,'');
      Assert.AreEqual(SourceJobPlanningLine."No.",TargetJobPlanningLine."No.",'');
      Assert.AreEqual(SourceJobPlanningLine.Description,TargetJobPlanningLine.Description,'');
      IF QuantityCopied THEN
        Assert.AreEqual(SourceJobPlanningLine.Quantity,TargetJobPlanningLine.Quantity,'')
      ELSE
        Assert.AreEqual(TargetJobPlanningLine.Quantity,0,'');
      Assert.AreEqual(SourceJobPlanningLine."Direct Unit Cost (LCY)",TargetJobPlanningLine."Direct Unit Cost (LCY)",'');
      Assert.AreEqual(SourceJobPlanningLine."Unit Cost (LCY)",TargetJobPlanningLine."Unit Cost (LCY)",'');
      IF QuantityCopied THEN
        Assert.AreEqual(SourceJobPlanningLine."Total Cost (LCY)",TargetJobPlanningLine."Total Cost (LCY)",'')
      ELSE
        Assert.AreEqual(TargetJobPlanningLine."Total Cost (LCY)",0,'');
      Assert.AreEqual(SourceJobPlanningLine."Unit Price (LCY)",TargetJobPlanningLine."Unit Price (LCY)",'');
      IF QuantityCopied THEN
        Assert.AreEqual(SourceJobPlanningLine."Total Price (LCY)",TargetJobPlanningLine."Total Price (LCY)",'')
      ELSE
        Assert.AreEqual(TargetJobPlanningLine."Total Price (LCY)",0,'');
      Assert.AreEqual(SourceJobPlanningLine."Resource Group No.",TargetJobPlanningLine."Resource Group No.",'');
      Assert.AreEqual(SourceJobPlanningLine."Unit of Measure Code",TargetJobPlanningLine."Unit of Measure Code",'');
      Assert.AreEqual(SourceJobPlanningLine."Location Code",TargetJobPlanningLine."Location Code",'');
    END;

    LOCAL PROCEDURE SetupManualNos@16(ManualNos@1000 : Boolean);
    VAR
      JobsSetup@1003 : Record 315;
      NoSeries@1001 : Record 308;
    BEGIN
      JobsSetup.GET;
      NoSeries.GET(JobsSetup."Job Nos.");
      NoSeries."Manual Nos." := ManualNos;
      NoSeries.MODIFY;
    END;

    LOCAL PROCEDURE InitJobTask@37(VAR TargetJob@1001 : Record 167;CustNo@1000 : Code[20];WIPMethodCode@1002 : Code[20]);
    BEGIN
      TargetJob.INIT;
      TargetJob."No." := LibraryUtility.GenerateGUID;
      TargetJob.VALIDATE("Bill-to Customer No.",CustNo);
      TargetJob."WIP Method" := WIPMethodCode;
      TargetJob.INSERT;
    END;

    LOCAL PROCEDURE MockJobTask@22(VAR JobTask@1000 : Record 1001;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20]);
    BEGIN
      JobTask.INIT;
      JobTask."Job No." := JobNo;
      JobTask."Job Task No." := JobTaskNo;
      JobTask.INSERT;
    END;

    LOCAL PROCEDURE MockJobPlanningLineWithSpecificLineNo@18(JobTask@1001 : Record 1001;LineNo@1002 : Integer);
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.VALIDATE("Job No.",JobTask."Job No.");
      JobPlanningLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.VALIDATE("Line No.",LineNo);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.VALIDATE("No.",LibraryJob.FindConsumable(JobPlanningLine.Type::Item));
      JobPlanningLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE VerifyJobPlanningLineCount@26(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];ExpectedCount@1003 : Integer);
    VAR
      DummyJobPlanningLine@1002 : Record 1003;
    BEGIN
      DummyJobPlanningLine.SETRANGE("Job No.",JobNo);
      DummyJobPlanningLine.SETRANGE("Job Task No.",JobTaskNo);
      Assert.RecordCount(DummyJobPlanningLine,ExpectedCount);
    END;

    BEGIN
    {
      // [FEATURE] [Copy Job] [Job] [UT]
      This unit test codeunit tests all public functions in code unit 1006 - Copy Job (except setter/getter methods):

      CopyJob
      CopyJobTasks
      CopyJobPlanningLines

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      MISSING:
      -Dimension Test
      -Job Prices Test
      -Copy Job Ledger Entry to Job Planning Line
      -Remaining Job Planning Line Fields

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

