OBJECT Codeunit 134139 ERM Reverse Blocked Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseInvoice@42();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Vendor after Posting Invoice with Random Amount, Reverse posted entry.
      Initialize;
      ReverseBlockedVendorDocument(GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseCreditMemo@10();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Vendor after Posting Credit Memo with Random Amount, Reverse posted entry.
      Initialize;
      ReverseBlockedVendorDocument(GenJournalLine."Document Type"::"Credit Memo",LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFinanceChargeMemo@31();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Vendor after Posting Finance Charge Memo with Random Amount, Reverse posted entry.
      Initialize;
      ReverseBlockedVendorDocument(GenJournalLine."Document Type"::"Finance Charge Memo",-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseReminder@32();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Vendor after Posting Reminder with Random Amount, Reverse posted entry.
      Initialize;
      ReverseBlockedVendorDocument(GenJournalLine."Document Type"::Reminder,-LibraryRandom.RandDec(50,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRefund@33();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Balance of Vendor after Posting Refund with Random Amount, Reverse posted entry.
      Initialize;
      ReverseBlockedVendorDocument(GenJournalLine."Document Type"::Refund,-LibraryRandom.RandDec(50,2));
    END;

    LOCAL PROCEDURE ReverseBlockedVendorDocument@2(DocumentType@1010 : Option;Amount@1011 : Decimal);
    VAR
      GLRegister@1001 : Record 45;
      ReversalEntry@1000 : Record 179;
      Vendor@1003 : Record 23;
      LibraryPurchase@1006 : Codeunit 130512;
    BEGIN
      // Setup: Create a Vendor. Create and Post General Journal Line. Block Vendor for Payment.
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostGenJournalLine(Vendor."No.",DocumentType,Amount);
      BlockVendorByOption(Vendor,Vendor.Blocked::Payment);

      // Exercise: Reverse the posted entries and clear Vendor Blocked field.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");
      BlockVendorByOption(Vendor,Vendor.Blocked::" ");

      // Verify: Verify that Balance is Zero for the Vendor after Reversing the posted entries.
      Vendor.CALCFIELDS(Balance);
      Vendor.TESTFIELD(Balance,0);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@13(VendorNo@1009 : Code[20];DocumentType@1000 : Option;Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1002 : Record 81;
      LibraryERM@1003 : Codeunit 131300;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE BlockVendorByOption@22(VAR Vendor@1000 : Record 23;Blocked@1001 : Option);
    BEGIN
      // Modify value of Blocked field for Vendor as per Option selected.
      Vendor.VALIDATE(Blocked,Blocked);
      Vendor.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Blocked] [Vendor]
      Test Vendor Balance after posting multiple documents with a Vendor blocked by Payment and Reverse the entries posted.
         1. Test Vendor after Posting Invoice and Reversing posted entry.
         2. Test Vendor after Posting Credit Memo and Reversing posted entry.
         3. Test Vendor after Posting Finance Charge Memo and Reversing posted entry.
         4. Test Vendor after Posting Reminder and Reversing posted entry.
         5. Test Vendor after Posting Refund and Reversing posted entry.

      Covers Test Case:
        ------------------------------------------------------------------
          Test Function Name                              TFS ID
        ------------------------------------------------------------------
          ReverseInvoice                          125710, 125711, 125713.
          ReverseCreditMemo                       125710, 125711, 125713.
          ReverseFinanceChargeMemo                125710, 125711, 125713.
          ReverseReminder                         125710, 125711, 125713.
          ReverseRefund                           125710, 125711, 125713.
    }
    END.
  }
}

