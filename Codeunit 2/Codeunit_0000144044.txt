OBJECT Codeunit 144044 Service Tax FCY
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500004 : Codeunit 130000;
      LibraryERM@1500010 : Codeunit 131300;
      LibraryServiceTax@1500007 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxFCYHelper@1500005 : Codeunit 143002;
      ServiceTaxVerify@1500011 : Codeunit 143004;
      isInitialized@1500001 : Boolean;
      ReverseChargeTypeOption@1500000 : ' ,Standard,GTA';
      BlockedPostOfRevChDocInFCYErr@1500014 : TextConst 'ENU=You cannot post the document because amounts are in foreign currency and one or more of the lines uses service group %1, which has a service tax reverse charge percentage.';
      BlockedApplicationFCYToLCYErr@1500016 : TextConst 'ENU=You cannot apply a document that has service tax with the amount in foreign currency to a document that has the amount in local currency.';
      BlockedPostNoPoTDocInFCYErr@1500017 : TextConst 'ENU=You cannot post the document because amounts are in foreign currency and the %1 field is not selected.';

    [Test]
    PROCEDURE BlockPurchInvGenJnlRevChrg@1500086();
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Service Type (Rev. Chrg.)"::Inward,
        ReverseChargeTypeOption::Standard,FALSE,100);
      ServiceTaxFCYHelper.SetCurrencyOnGenJnl(GenJournalLine);

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      Assert.ExpectedError(
        STRSUBSTNO(BlockedPostOfRevChDocInFCYErr,GenJournalLine."Service Tax Group Code"));
    END;

    [Test]
    PROCEDURE BlockPurchInvRevChrg@1500087();
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      Initialize;

      PurchaseHeader."Currency Code" := ReverseServiceTaxHelper.FindCurrencyCode;
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,
        ReverseChargeTypeOption::Standard,100,FALSE);

      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      Assert.ExpectedError(
        STRSUBSTNO(BlockedPostOfRevChDocInFCYErr,PurchaseLine."Service Tax Group"));
    END;

    [Test]
    PROCEDURE BlockPurchInvGenJnlNoPoT@1500088();
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ReverseChargeTypeOption::" ",FALSE,0);
      ServiceTaxFCYHelper.SetCurrencyOnGenJnl(GenJournalLine);

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      Assert.ExpectedError(
        STRSUBSTNO(BlockedPostNoPoTDocInFCYErr,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE BlockPurchInvNoPoT@1500084();
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      Initialize;

      PurchaseHeader."Currency Code" := ReverseServiceTaxHelper.FindCurrencyCode;
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,
        ReverseChargeTypeOption::" ",0,FALSE);

      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      Assert.ExpectedError(
        STRSUBSTNO(BlockedPostNoPoTDocInFCYErr,PurchaseHeader.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE BlockApplyPurchInvFCYPmtLCYPoT@1500083();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      GenJournalLine."Currency Code" := '';
      ReverseServiceTaxHelper.CreatePaymentWithOnlineAppl(
        GenJournalLine,ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"),-GenJournalLine.Amount);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      Assert.ExpectedError(BlockedApplicationFCYToLCYErr);
    END;

    [Test]
    PROCEDURE BlockApplyPurchInvLCYPmtFCYPoT@1500113();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ReverseChargeTypeOption::" ",TRUE,0);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      GenJournalLine."Currency Code" := ReverseServiceTaxHelper.FindCurrencyCode;
      ReverseServiceTaxHelper.CreatePaymentWithOnlineAppl(
        GenJournalLine,ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"),-GenJournalLine.Amount);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      Assert.ExpectedError(BlockedApplicationFCYToLCYErr);
    END;

    [Test]
    PROCEDURE PoTInvoice@1500001();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PoTDoc(GenJournalLine."Document Type"::Invoice)
    END;

    [Test]
    PROCEDURE PoTCrMemo@1500008();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PoTDoc(GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE PoTAdvPmt@1500021();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PoTAdvDoc(GenJournalLine."Document Type"::Payment)
    END;

    [Test]
    PROCEDURE PoTAdvRef@1500020();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PoTAdvDoc(GenJournalLine."Document Type"::Refund);
    END;

    [Test]
    PROCEDURE PoTApplyAdvPmtToInv@1500006();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine@1500003 : Record 81;
      VendLedgEntry@1500002 : Record 25;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostPartialDoc(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1,ApplyGenJournalLine);

      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        VendLedgEntry."Document Type"::Payment,GenJournalLine."Document No.",
        VendLedgEntry."Document Type"::Invoice,ApplyGenJournalLine."Document No.");

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE PoTApplyInvToCrMemo@1500003();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostPartialApplyingDoc(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1);

      VerifyCancelledDocs(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTApplyInvToCrMemoAdjExchR@1500023();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      RunAdjustExchangeRates(GenJournalLine);

      PostPartialApplyingDoc(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1);

      VerifyCancelledDocs(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTApplyInvTo2CrMemos@1500007();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostTwoApplyingDocs(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");

      VerifyCancelledDocs(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTApplyInvTo2CrMemosAdjExchR@1500015();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      RunAdjustExchangeRates(GenJournalLine);

      PostTwoApplyingDocs(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");

      VerifyCancelledDocs(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTApplyInvToAdvPmt@1500000();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostPartialApplyingDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1);

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE PoTApplyInvToAdvPmtAdjExchR@1500026();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      RunAdjustExchangeRates(GenJournalLine);

      PostPartialApplyingDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1);

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE PoTApplyInvTo2AdvPmts@1500013();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostTwoApplyingDocs(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE PoTApplyInvTo2AdvPmtsAdjExchR@1500018();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      RunAdjustExchangeRates(GenJournalLine);

      PostTwoApplyingDocs(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE PoTUnapplyAdvPmtToInv@1500016();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine@1500003 : Record 81;
      VendLedgEntry@1500002 : Record 25;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);

      PostPartialDoc(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1,ApplyGenJournalLine);

      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        VendLedgEntry."Document Type"::Payment,GenJournalLine."Document No.",
        VendLedgEntry."Document Type"::Invoice,ApplyGenJournalLine."Document No.");

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(GenJournalLine."Document No.");

      Verify2UnappliedDocs(GenJournalLine,ApplyGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTUnapplyInvAndCrMemo@1500005();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1,ApplyGenJournalLine);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(GenJournalLine."Document No.");

      Verify2UnappliedDocs(GenJournalLine,ApplyGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTUnapplyInvAndAdvPmt@1500032();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),1,ApplyGenJournalLine);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(GenJournalLine."Document No.");

      Verify2UnappliedDocs(GenJournalLine,ApplyGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTUnapplyInvAnd2CrMemos@1500038();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine1@1500003 : Record 81;
      ApplyGenJournalLine2@1500002 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),LibraryRandom.RandDec(1,1),ApplyGenJournalLine1);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ServiceTaxFCYHelper.GetThirdDocDate(GenJournalLine."Posting Date"),1,ApplyGenJournalLine2);

      ReverseServiceTaxHelper.UnapplyTwice(GenJournalLine."Document No.");

      Verify3UnappliedDocs(GenJournalLine,ApplyGenJournalLine1,ApplyGenJournalLine2,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PoTUnapplyInvAnd2AdvPmts@1500037();
    VAR
      GenJournalLine@1500001 : Record 81;
      ApplyGenJournalLine1@1500003 : Record 81;
      ApplyGenJournalLine2@1500002 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ServiceTaxFCYHelper.SetupExchangeRates(GenJournalLine);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),LibraryRandom.RandDec(1,1),
        ApplyGenJournalLine1);
      PostPartialApplyingDocReturn(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ServiceTaxFCYHelper.GetThirdDocDate(GenJournalLine."Posting Date"),1,
        ApplyGenJournalLine2);

      ReverseServiceTaxHelper.UnapplyTwice(GenJournalLine."Document No.");

      Verify3UnappliedDocs(GenJournalLine,ApplyGenJournalLine1,ApplyGenJournalLine2,LastTransactionNo);
    END;

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;
      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE CreatePartialApplyingDoc@1500010(GenJournalLine@1500000 : Record 81;DocumentType@1500007 : Option;PostingDate@1500005 : Date;PartialFactor@1500003 : Decimal;VAR ApplyGenJournalLine@1500008 : Record 81);
    VAR
      GenJournalBatch@1500002 : Record 232;
      ServiceTaxSetup@1500006 : Record 16472;
      ApplyingDocAmount@1500004 : Decimal;
    BEGIN
      ApplyingDocAmount := ReverseServiceTaxHelper.GetRemainingAmount(GenJournalLine."Document Type",GenJournalLine."Document No.");
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ApplyingDocAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
        ApplyingDocAmount,0,ReverseChargeTypeOption::" ",ServiceTaxSetup);

      IF PartialFactor <> 1 THEN
        ApplyingDocAmount := ReverseServiceTaxHelper.RoundServTax(ApplyingDocAmount * PartialFactor)
      ELSE
        ApplyingDocAmount := ApplyingDocAmount + 1; // make sure that the last document closes the first document

      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH GenJournalLine DO
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(
          ApplyGenJournalLine,GenJournalBatch,DocumentType,"Service Type (Rev. Chrg.)",
          "Account No.",-ApplyingDocAmount,PostingDate,
          "Service Tax Registration No.","Service Tax Group Code");
      ApplyGenJournalLine.VALIDATE(PoT,TRUE);
      ApplyGenJournalLine.VALIDATE("Currency Code",GenJournalLine."Currency Code");
      ApplyGenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostAdvDocGenJnlPoT@1500022(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,DocumentType,TRUE,GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ReverseChargeTypeOption::" ",0);
      ServiceTaxFCYHelper.SetCurrencyOnGenJnl(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostPartialApplyingDoc@1500004(GenJournalLine@1500000 : Record 81;DocumentType@1500007 : Option;PostingDate@1500005 : Date;PartialFactor@1500003 : Decimal);
    VAR
      ApplyGenJournalLine@1500001 : Record 81;
    BEGIN
      PostPartialApplyingDocReturn(GenJournalLine,DocumentType,PostingDate,PartialFactor,ApplyGenJournalLine);
    END;

    LOCAL PROCEDURE PostPartialApplyingDocReturn@1500024(GenJournalLine@1500000 : Record 81;DocumentType@1500007 : Option;PostingDate@1500005 : Date;PartialFactor@1500003 : Decimal;VAR ApplyGenJournalLine@1500008 : Record 81);
    BEGIN
      CreatePartialApplyingDoc(GenJournalLine,DocumentType,PostingDate,PartialFactor,ApplyGenJournalLine);
      ApplyGenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Document Type");
      ApplyGenJournalLine.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      ApplyGenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(ApplyGenJournalLine);
    END;

    LOCAL PROCEDURE PostPartialDoc@1500014(GenJournalLine@1500000 : Record 81;DocumentType@1500007 : Option;PostingDate@1500005 : Date;PartialFactor@1500003 : Decimal;VAR ApplyGenJournalLine@1500001 : Record 81) : Code[20];
    BEGIN
      CreatePartialApplyingDoc(GenJournalLine,DocumentType,PostingDate,PartialFactor,ApplyGenJournalLine);
      LibraryERM.PostGeneralJnlLine(ApplyGenJournalLine);
    END;

    LOCAL PROCEDURE PostTwoApplyingDocs@1500025(GenJournalLine@1500000 : Record 81;DocumentType@1500007 : Option);
    BEGIN
      PostPartialApplyingDoc(GenJournalLine,DocumentType,
        ServiceTaxFCYHelper.GetSecondDocDate(GenJournalLine."Posting Date"),LibraryRandom.RandDec(1,1));
      PostPartialApplyingDoc(GenJournalLine,DocumentType,
        ServiceTaxFCYHelper.GetThirdDocDate(GenJournalLine."Posting Date"),1);
    END;

    LOCAL PROCEDURE PostDocGenJnlPoT@1500002(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,DocumentType,GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ReverseChargeTypeOption::" ",TRUE,0);
      ServiceTaxFCYHelper.SetCurrencyOnGenJnl(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PoTAdvDoc@1500019(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvDocGenJnlPoT(GenJournalLine,DocumentType);

      ServiceTaxFCYHelper.VerifyServiceTaxAdvPmtBalances(GenJournalLine,LastTransactionNo,FALSE);
    END;

    LOCAL PROCEDURE PoTDoc@1500009(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostDocGenJnlPoT(GenJournalLine,DocumentType);

      ServiceTaxFCYHelper.VerifyServiceTaxInvBalances(GenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE RunAdjustExchangeRates@1170000001(GenJournalLine@1170000000 : Record 81);
    VAR
      Currency@1170000002 : Record 4;
      AdjustExchangeRates@1170000001 : Report 595;
    BEGIN
      WITH GenJournalLine DO BEGIN
        Currency.SETRANGE(Code,"Currency Code");
        AdjustExchangeRates.SETTABLEVIEW(Currency);
        AdjustExchangeRates.InitializeRequest2(0D,ServiceTaxFCYHelper.GetSecondDocDate("Posting Date"),
          'Test',"Posting Date","Document No.",TRUE,FALSE);
        AdjustExchangeRates.USEREQUESTPAGE(FALSE);
        AdjustExchangeRates.RUN;
      END;
    END;

    LOCAL PROCEDURE VerifyCancelledDocs@1500011(GenJournalLine@1500002 : Record 81;LastTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.SBCRecAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.SBCRecInterimAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.KKCRecAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.KKCRecInterimAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,0);

      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDetailsKKCRemainingCredit(LastTransactionNo,0);

      ServiceTaxVerify.PostedInvoiceRounding(GenJournalLine."Posting Group",LastTransactionNo);
    END;

    LOCAL PROCEDURE Verify2UnappliedDocs@1500017(GenJournalLine1@1500008 : Record 81;GenJournalLine2@1500002 : Record 81;LastTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
      ServiceTaxAmount@1500009 : ARRAY [2] OF Decimal;
      InterimServiceTaxAmount@1500001 : Decimal;
      SBCAmount@1500004 : ARRAY [2] OF Decimal;
      InterimSBCAmount@1500003 : Decimal;
      KKCAmount@1500007 : ARRAY [2] OF Decimal;
      InterimKKCAmount@1500005 : Decimal;
    BEGIN
      GenJournalLine1.Amount := ServiceTaxFCYHelper.ConvertFCYAmountToLCY(GenJournalLine1);
      GenJournalLine2.Amount := ServiceTaxFCYHelper.ConvertFCYAmountToLCY(GenJournalLine2);

      ServiceTaxSetup.FindOnDate(GenJournalLine1."Service Tax Group Code",GenJournalLine1."Posting Date");
      ServiceTaxAmount[1] := ReverseServiceTaxHelper.CalculateServTaxTotal(
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      ServiceTaxAmount[2] := ReverseServiceTaxHelper.CalculateServTaxTotal(
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);
      SBCAmount[1] :=
        ReverseServiceTaxHelper.CalculateSBC(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      SBCAmount[2] :=
        ReverseServiceTaxHelper.CalculateSBC(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);
      KKCAmount[1] :=
        ReverseServiceTaxHelper.CalculateKKCess(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      KKCAmount[2] :=
        ReverseServiceTaxHelper.CalculateKKCess(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);

      IF GenJournalLine1."Document Type" = GenJournalLine1."Document Type"::Payment THEN BEGIN
        InterimServiceTaxAmount := -ServiceTaxAmount[1];
        InterimSBCAmount := -SBCAmount[1];
        InterimKKCAmount := -KKCAmount[1];
      END;

      VerifyUnappliedAmts(ServiceTaxSetup,LastTransactionNo,ServiceTaxAmount[1] + ServiceTaxAmount[2],InterimServiceTaxAmount);
      VerifyUnappliedSBCKKCAmts(
        ServiceTaxSetup,LastTransactionNo,
        SBCAmount[1] + SBCAmount[2],InterimSBCAmount,KKCAmount[1] + KKCAmount[2],InterimKKCAmount);
      ServiceTaxVerify.PostedInvoiceRounding(GenJournalLine1."Posting Group",LastTransactionNo);
    END;

    LOCAL PROCEDURE Verify3UnappliedDocs@1500040(GenJournalLine1@1500008 : Record 81;GenJournalLine2@1500002 : Record 81;GenJournalLine3@1500001 : Record 81;LastTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
      ServiceTaxAmount@1500009 : ARRAY [3] OF Decimal;
      InterimServiceTaxAmount@1500003 : Decimal;
      SBCAmount@1500010 : ARRAY [3] OF Decimal;
      InterimSBCAmount@1500007 : Decimal;
      KKCAmount@1500005 : ARRAY [3] OF Decimal;
      InterimKKCAmount@1500004 : Decimal;
    BEGIN
      GenJournalLine1.Amount := ServiceTaxFCYHelper.ConvertFCYAmountToLCY(GenJournalLine1);
      GenJournalLine2.Amount := ServiceTaxFCYHelper.ConvertFCYAmountToLCY(GenJournalLine2);
      GenJournalLine3.Amount := ServiceTaxFCYHelper.ConvertFCYAmountToLCY(GenJournalLine3);

      ServiceTaxSetup.FindOnDate(GenJournalLine1."Service Tax Group Code",GenJournalLine1."Posting Date");
      ServiceTaxAmount[1] := ReverseServiceTaxHelper.CalculateServTaxTotal(
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      ServiceTaxAmount[2] := ReverseServiceTaxHelper.CalculateServTaxTotal(
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);
      ServiceTaxAmount[3] := ReverseServiceTaxHelper.CalculateServTaxTotal(
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine3),ServiceTaxSetup);
      SBCAmount[1] :=
        ReverseServiceTaxHelper.CalculateSBC(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      SBCAmount[2] :=
        ReverseServiceTaxHelper.CalculateSBC(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);
      SBCAmount[3] :=
        ReverseServiceTaxHelper.CalculateSBC(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine3),ServiceTaxSetup);
      KKCAmount[1] :=
        ReverseServiceTaxHelper.CalculateKKCess(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine1),ServiceTaxSetup);
      KKCAmount[2] :=
        ReverseServiceTaxHelper.CalculateKKCess(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine2),ServiceTaxSetup);
      KKCAmount[3] :=
        ReverseServiceTaxHelper.CalculateKKCess(ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine3),ServiceTaxSetup);

      IF GenJournalLine1."Document Type" = GenJournalLine1."Document Type"::Payment THEN BEGIN
        InterimServiceTaxAmount := -ServiceTaxAmount[1];
        InterimSBCAmount := -SBCAmount[1];
        InterimKKCAmount := -KKCAmount[1];
      END;

      VerifyUnappliedAmts(ServiceTaxSetup,LastTransactionNo,ServiceTaxAmount[1] + ServiceTaxAmount[2] + ServiceTaxAmount[3],
        InterimServiceTaxAmount);
      VerifyUnappliedSBCKKCAmts(
        ServiceTaxSetup,LastTransactionNo,
        SBCAmount[1] + SBCAmount[2] + SBCAmount[3],InterimSBCAmount,
        KKCAmount[1] + KKCAmount[2] + KKCAmount[3],InterimKKCAmount);
      ServiceTaxVerify.PostedInvoiceRounding(GenJournalLine1."Posting Group",LastTransactionNo);
    END;

    LOCAL PROCEDURE VerifyUnappliedAmts@1500041(ServiceTaxSetup@1500008 : Record 16472;LastTransactionNo@1500000 : Integer;TotalServiceTaxAmount@1500002 : Decimal;InterimServiceTaxAmount@1500003 : Decimal);
    BEGIN
      ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,TotalServiceTaxAmount);
      ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,InterimServiceTaxAmount);

      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,TotalServiceTaxAmount);
      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,TotalServiceTaxAmount);
    END;

    LOCAL PROCEDURE VerifyUnappliedSBCKKCAmts@1500012(ServiceTaxSetup@1500008 : Record 16472;LastTransactionNo@1500000 : Integer;TotalSBCAmount@1500004 : Decimal;InterimSBCAmount@1500001 : Decimal;TotalKKCAmount@1500006 : Decimal;InterimKKCAmount@1500005 : Decimal);
    BEGIN
      ServiceTaxVerify.SBCRecAccBalance(ServiceTaxSetup,TotalSBCAmount);
      ServiceTaxVerify.SBCRecInterimAccBalance(ServiceTaxSetup,InterimSBCAmount);
      ServiceTaxVerify.KKCRecAccBalance(ServiceTaxSetup,TotalKKCAmount);
      ServiceTaxVerify.KKCRecInterimAccBalance(ServiceTaxSetup,InterimKKCAmount);

      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,TotalSBCAmount);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,TotalKKCAmount);

      ServiceTaxVerify.STEntryDetailsKKCRemainingCredit(LastTransactionNo,TotalKKCAmount);
    END;

    BEGIN
    END.
  }
}

