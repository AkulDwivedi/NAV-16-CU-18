OBJECT Codeunit 144039 STax Pmt Application Offline
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500007 : Codeunit 130000;
      LibraryERM@1500006 : Codeunit 131300;
      LibraryServiceTax@1500005 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxVerify@1500015 : Codeunit 143004;
      InvoiceAmountIs@1500008 : 'Equal,Greater,Smaller';
      ServiceTaxType@1500001 : ' ,Standard,GTA';
      isInitialized@1500000 : Boolean;
      PoTErr@1500014 : TextConst 'ENU=You cannot apply a document with PoT to a document without PoT.';
      RevAndPotTogetherErr@1500012 : TextConst 'ENU=You must set the %1 field to No when the service tax reverse charge is 100 percent.';
      ServiceTaxApplicationErr@1500013 : TextConst 'ENU=You cannot apply a document with service tax to a document without service tax.';
      ServiceTaxGroupCodeErr@1500010 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Group Codes.';
      ServiceTaxRegNoErr@1500011 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Registration Nos.';

    [Test]
    PROCEDURE ApplyPaymentToInvoicePoT@1500000();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPayment(PurchaseHeader."Document Type"::Invoice,TRUE)
    END;

    [Test]
    PROCEDURE ApplyPaymentToOrderPoT@1500001();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPayment(PurchaseHeader."Document Type"::Order,TRUE)
    END;

    [Test]
    PROCEDURE ApplyPaymentToInvoiceRevChrg@1500004();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPayment(PurchaseHeader."Document Type"::Invoice,FALSE)
    END;

    [Test]
    PROCEDURE ApplyPaymentToOrderRevChrg@1500005();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPayment(PurchaseHeader."Document Type"::Order,FALSE)
    END;

    [Test]
    PROCEDURE Apply2PaymentsToInvoiceRevChrg@1500009();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPartialPayments(PurchaseHeader."Document Type"::Invoice,ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE Apply2PaymentsToOrderRevChrg@1500050();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocAndPartialPayments(PurchaseHeader."Document Type"::Order,ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyPaymentTo2InvoicesRevChrg@1500012();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPartialDocsAndPayment(PurchaseHeader."Document Type"::Invoice,ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyPaymentTo2OrdersRevChrg@1500056();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyPartialDocsAndPayment(PurchaseHeader."Document Type"::Order,ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyRefundOnCrMRevChrg@1500035();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyRefundOnCrM(PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyAdvPmtToInvSrvTaxPoT@1500041();
    BEGIN
      ApplyAdvPayment(ServiceTaxType::" ",TRUE);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToInvTakeSalesCrdtPoT@1500044();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      LastTransactionNo@1500001 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      AppAdvPmtToInvTakeSalesCredit(TRUE,InvoiceAmountIs::Equal,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToBigInvSalesCrdtPoT@1500028();
    VAR
      ServiceTaxSetup@1500007 : Record 16472;
      TotalSTEntryDetails@1500002 : Record 16474;
      LastTransactionNo@1500000 : Integer;
      RemainingServiceTaxAmount@1500001 : Decimal;
      KKCRemainingAmount@1500003 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      AppAdvPmtToInvTakeSalesCredit(TRUE,InvoiceAmountIs::Greater,ServiceTaxSetup);

      ServiceTaxVerify.CalcSTEntryDetailsBalances(LastTransactionNo,TotalSTEntryDetails);
      RemainingServiceTaxAmount := TotalSTEntryDetails.FullRemainingCredit;
      KKCRemainingAmount := TotalSTEntryDetails.KKCessRemainingCredit;
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,RemainingServiceTaxAmount,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,KKCRemainingAmount,0,0,0);
      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,RemainingServiceTaxAmount);
      ServiceTaxVerify.STEntryDetailsKKCRemainingCredit(LastTransactionNo,KKCRemainingAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToSmallInvSalesCrPoT@1500098();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      RemainingServiceTaxAmount@1500001 : Decimal;
      LastTransactionNo@1500002 : Integer;
      KKCRemainingAmount@1500003 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      AppAdvPmtToInvTakeSalesCredit(TRUE,InvoiceAmountIs::Smaller,ServiceTaxSetup);

      RemainingServiceTaxAmount := ServiceTaxVerify.CalcRemainingTaxAmount(LastTransactionNo);
      KKCRemainingAmount := ServiceTaxVerify.CalcKKCRemainingAmount(LastTransactionNo);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,-RemainingServiceTaxAmount,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,-KKCRemainingAmount,0,0);

      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyAdvPayToInvSrvTaxRevChrg@1500038();
    BEGIN
      ApplyAdvPayment(ServiceTaxType::Standard,FALSE);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToInvTakeSalesCrdtRC@1500031();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      LastTransactionNo@1500001 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      AppAdvPmtToInvTakeSalesCredit(FALSE,InvoiceAmountIs::Equal,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);

      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToBigInvSalesCrdtRC@1500066();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      RemainingServiceTaxAmount@1500001 : Decimal;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      RemainingServiceTaxAmount :=
        AppAdvPmtToInvTakeSalesCredit(FALSE,InvoiceAmountIs::Greater,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,RemainingServiceTaxAmount,0,-RemainingServiceTaxAmount);
      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppAdvPmtToSmallInvSalesCrdtRC@1500040();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      RemainingServiceTaxAmount@1500001 : Decimal;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      RemainingServiceTaxAmount :=
        AppAdvPmtToInvTakeSalesCredit(FALSE,InvoiceAmountIs::Smaller,ServiceTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,RemainingServiceTaxAmount,0,0,0);
      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,RemainingServiceTaxAmount);
    END;

    [Test]
    PROCEDURE ApplyAdvPayToInvNoSrvTaxPoT@1500051();
    BEGIN
      ApplyAdvPaymentToInvWOSrvTax(TRUE);
    END;

    [Test]
    PROCEDURE ApplyAdvPayToInvNoSrvTaxRevChg@1500047();
    BEGIN
      ApplyAdvPaymentToInvWOSrvTax(FALSE)
    END;

    [Test]
    PROCEDURE ApplyAdvPayTo2InvNoRevCharge@1500089();
    BEGIN
      ApplyAdvPaymentTo2InvNoPoT(ServiceTaxType::" ");
    END;

    [Test]
    PROCEDURE ApplyAdvPayTo2InvRevCharge@1500081();
    BEGIN
      ApplyAdvPaymentTo2InvNoPoT(ServiceTaxType::Standard);
    END;

    [Test]
    PROCEDURE ApplyAdvPaySrvTaxRegNoErrNoRC@1500065();
    BEGIN
      ApplyAdvPaySvTaxRegNoMismatch(ServiceTaxType::" ")
    END;

    [Test]
    PROCEDURE ApplyAdvPaySrvTaxRegNoErrRevC@1500053();
    BEGIN
      ApplyAdvPaySvTaxRegNoMismatch(ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyAdvPaySrvTaxGroupErrNoRC@1500070();
    BEGIN
      ApplyAdvPaySvTaxGrCodeMismatch(ServiceTaxType::" ")
    END;

    [Test]
    PROCEDURE ApplyAdvPaySrvTaxGroupErrRevC@1500058();
    BEGIN
      ApplyAdvPaySvTaxGrCodeMismatch(ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE ApplyAdvPayPoTMismatchErrNoRC@1500052();
    BEGIN
      ApplyAdvPayPoTMismatch(TRUE,FALSE)
    END;

    [Test]
    PROCEDURE ApplyAdvPayPoTMismatchErrRevC@1500082();
    VAR
      GenJournalLine@1500005 : Record 81;
      ReverseChargeType@1500006 : Option;
    BEGIN
      ReverseChargeType := ServiceTaxType::Standard;
      ASSERTERROR
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
          GenJournalLine,TRUE,ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);
      Assert.ExpectedError(STRSUBSTNO(RevAndPotTogetherErr,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE ApplyPurchDPoTMismatchErrNoRC@1500085();
    BEGIN
      ApplyAdvPayPoTMismatch(FALSE,TRUE)
    END;

    [Test]
    PROCEDURE ApplyPurchDPoTMismatchErrRevC@1500083();
    VAR
      GenJournalLine@1500006 : Record 81;
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ReverseChargeType@1500000 : Option;
    BEGIN
      ReverseChargeType := ServiceTaxType::Standard;
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,FALSE,ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      ASSERTERROR
        PostPurchaseDocForAdvPayment(
          PurchaseHeader,PurchaseLine,GenJournalLine,PurchaseHeader."Document Type"::Invoice,
          ReverseChargeType,TRUE,LibraryRandom.RandDec(1000,2));
      Assert.ExpectedError(STRSUBSTNO(RevAndPotTogetherErr,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE ApplyAdvPayAdvRefundRevC@1500068();
    BEGIN
      ApplyAdvPaymentToAdvRefund(ServiceTaxType::Standard)
    END;

    [Test]
    PROCEDURE AdvPmtRefOfflAppDiffServGrpErr@1500015();
    VAR
      GenJournalLine@1500001 : Record 81;
      VendorLedgerEntry@1500000 : Record 25;
      AdvPaymentDocNo@1500003 : Code[20];
      AdvRefundDocNo@1500002 : Code[20];
    BEGIN
      Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ServiceTaxType::Standard),ServiceTaxType::Standard,100);

      // Post Advance Refund with different Service Tax Group
      ReverseServiceTaxHelper.AlterServiceTaxGrpInJnlLine(GenJournalLine);
      AdvRefundDocNo := PostJournalDocForAdvPayment(GenJournalLine,GenJournalLine."Document Type"::Refund,-GenJournalLine.Amount,TRUE);

      // Try to apply
      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Refund,AdvRefundDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);

      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE AdvPmtRefOfflAppDiffSRegNoErr@1500034();
    VAR
      GenJournalLine@1500005 : Record 81;
      VendorLedgerEntry@1500004 : Record 25;
      AdvPaymentDocNo@1500002 : Code[20];
      AdvRefundDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ServiceTaxType::Standard),ServiceTaxType::Standard,100);

      // Post Advance Refund with different service tax registration no.
      ReverseServiceTaxHelper.AlterServiceTaxRegNoInJnlLine(GenJournalLine);
      AdvRefundDocNo := PostJournalDocForAdvPayment(GenJournalLine,GenJournalLine."Document Type"::Refund,-GenJournalLine.Amount,TRUE);

      // Try to Apply
      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Refund,AdvRefundDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);

      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE AdvPmtAndInvPayAdvPmtRCToGov@1500079(VAR PostedAdvancePaymentDocNo@1500008 : Code[20];VAR PostedPurchInvoiceDocNo@1500007 : Code[20];VAR ServiceTaxSetup@1500006 : Record 16472;InvoiceAmountIs@1500002 : Option;ReverseChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      GenJournalLine@1500011 : Record 81;
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500009 : Record 39;
      PurchInvoiceBaseAmount@1500003 : Decimal;
      AdvancePaymentBaseAmount@1500005 : Decimal;
    BEGIN
      // Post Advance Payment
      PostedAdvancePaymentDocNo :=
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
          GenJournalLine,PoT,ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Pay Reverse Charge to Gov, so that the Reverse Charge Remaining Credit moves to Remaining Credit
      IF ReverseChargeType = ServiceTaxType::Standard THEN
        ReverseServiceTaxHelper.PayServiceTax(
          GenJournalLine."Service Tax Registration No.",GenJournalLine."Service Tax Group Code",TRUE);

      // Post Invoice with Service Tax
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      AdvancePaymentBaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ReverseChargeType,ServiceTaxSetup);
      ReverseServiceTaxHelper.CalculateServTaxTotal(AdvancePaymentBaseAmount,ServiceTaxSetup);

      PurchInvoiceBaseAmount := AdvancePaymentBaseAmount * ReverseServiceTaxHelper.GetPurchInvAmountFactor(InvoiceAmountIs);

      PostedPurchInvoiceDocNo :=
        PostPurchaseDocForAdvPayment(
          PurchaseHeader,PurchaseLine,GenJournalLine,GenJournalLine."Document Type"::Invoice,
          ReverseChargeType,PoT,PurchInvoiceBaseAmount);

      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        GenJournalLine."Document Type"::Invoice,PostedPurchInvoiceDocNo,
        GenJournalLine."Document Type"::Payment,PostedAdvancePaymentDocNo);
    END;

    LOCAL PROCEDURE ApplyAdvPaymentTo2InvNoPoT@1500074(ReverseChargeType@1500012 : Option);
    VAR
      GenJournalLine@1500010 : Record 81;
      PurchaseHeader1@1500009 : Record 38;
      PurchaseHeader2@1500013 : Record 38;
      PurchaseLine@1500008 : Record 39;
      ServiceTaxSetup@1500007 : Record 16472;
      VendorLedgerEntry@1500006 : Record 25;
      GLSetup@1500014 : Record 98;
      BaseAmount@1500004 : Decimal;
      PartialInvoiceFactor@1500005 : Decimal;
      ServiceTaxAmount@1500000 : Decimal;
      AdvPaymentDocNo@1500001 : Code[20];
      PostedDocNo1@1500002 : Code[20];
      PostedDocNo2@1500011 : Code[20];
      LastTransactionNo@1500003 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      PartialInvoiceFactor := LibraryRandom.RandDec(1,1);
      LibraryServiceTax.SetServiceTaxRounding;
      GLSetup.GET;
      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post 2 Invoice with Service Tax
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      BaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ReverseChargeType,ServiceTaxSetup);

      PostedDocNo1 := PostPurchaseDocForAdvPayment(PurchaseHeader1,PurchaseLine,GenJournalLine,
          PurchaseHeader1."Document Type"::Invoice,ReverseChargeType,FALSE,PartialInvoiceFactor * BaseAmount);
      PostedDocNo2 := PostPurchaseDocForAdvPayment(PurchaseHeader2,PurchaseLine,GenJournalLine,
          PurchaseHeader1."Document Type"::Invoice,ReverseChargeType,FALSE,(1 - PartialInvoiceFactor) * BaseAmount);

      // Exercise: Apply the 2 Invoices to Advance Payment
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader1."Document Type"::Invoice,PostedDocNo1,
        VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader1."Document Type"::Invoice,PostedDocNo2,
        VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);

      // Verify:
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.AdvPmtGLBalance(ServiceTaxSetup,ServiceTaxAmount,ReverseChargeType);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo1,FALSE);
      ServiceTaxVerify.VendorLedgerEntryRemAmt(PostedDocNo2,-
        GLSetup."Service Tax Rounding Precision");
      ServiceTaxVerify.VendorLedgerEntryOpen(AdvPaymentDocNo,FALSE);

      ServiceTaxVerify.STEntriesAppln(LastTransactionNo,GenJournalLine,BaseAmount,ReverseChargeType);
    END;

    LOCAL PROCEDURE ApplyAdvPaymentToAdvRefund@1500063(ReverseChargeType@1500007 : Option);
    VAR
      GenJournalLine@1500006 : Record 81;
      ServiceTaxSetup@1500004 : Record 16472;
      VendorLedgerEntry@1500003 : Record 25;
      AdvPaymentDocNo@1500002 : Code[20];
      AdvRefundDocNo@1500009 : Code[20];
      BaseAmount@1500005 : Decimal;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post Advance Refund
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      BaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ReverseChargeType,ServiceTaxSetup);
      AdvRefundDocNo := PostJournalDocForAdvPayment(GenJournalLine,GenJournalLine."Document Type"::Refund,-BaseAmount,TRUE);

      // Exercise: Apply Advance Refund to Advance Payment
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Refund,AdvRefundDocNo,
        VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);

      // Verify Advance Refund:
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);

      ServiceTaxVerify.STEntriesCanceledDocument(LastTransactionNo);

      ServiceTaxVerify.VendorLedgerEntryOpen(AdvRefundDocNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(AdvPaymentDocNo,FALSE);
    END;

    LOCAL PROCEDURE ApplyAdvPaymentToInvWOSrvTax@1500061(PoT@1500001 : Boolean);
    VAR
      GenJournalLine@1500006 : Record 81;
      PurchaseHeader@1500005 : Record 38;
      VendorLedgerEntry@1500004 : Record 25;
      AdvPaymentDocNo@1500003 : Code[20];
      PostedDocNo@1500002 : Code[20];
      ReverseChargeType@1500000 : Option;
    BEGIN
      Initialize;

      // Post Advance Payment
      ReverseChargeType := GetReverseChargeType(PoT);
      AdvPaymentDocNo :=
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
          GenJournalLine,PoT,ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post Invoice without Service Tax
      PostedDocNo :=
        ReverseServiceTaxHelper.PostPurchaseDocWOServTax(
          PurchaseHeader."Document Type"::Invoice,GenJournalLine."Account No.");

      // Exercise: Apply Invoice to Advance Payment
      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          VendorLedgerEntry."Document Type"::Invoice,PostedDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);
      Assert.ExpectedError(ServiceTaxApplicationErr)
    END;

    LOCAL PROCEDURE ApplyAdvPayPoTMismatch@1500071(PoTOnAdvPayment@1500000 : Boolean;PoTOnDoc@1500001 : Boolean);
    VAR
      GenJournalLine@1500009 : Record 81;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500007 : Record 39;
      VendorLedgerEntry@1500005 : Record 25;
      PostedDocNo@1500004 : Code[20];
      AdvPaymentDocNo@1500003 : Code[20];
    BEGIN
      Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,PoTOnAdvPayment,0,0,0);

      // Post Invoice
      PostedDocNo :=
        PostPurchaseDocForAdvPayment(
          PurchaseHeader,PurchaseLine,GenJournalLine,PurchaseHeader."Document Type"::Invoice,
          0,PoTOnDoc,LibraryRandom.RandDec(1000,2));

      // Exercise: Apply Invoice to Advance Payment
      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          VendorLedgerEntry."Document Type"::Invoice,PostedDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);
      Assert.ExpectedError(PoTErr)
    END;

    LOCAL PROCEDURE ApplyAdvPaySvTaxRegNoMismatch@1500059(ReverseChargeType@1500000 : Option);
    VAR
      GenJournalLine@1500007 : Record 81;
      PurchaseHeader@1500006 : Record 38;
      VendorLedgerEntry@1500003 : Record 25;
      PostedDocNo@1500002 : Code[20];
      AdvPaymentDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post Invoice with different Service Tax Reg No
      PostedDocNo := PostPurchaseDocSrvTaxDetails(PurchaseHeader."Document Type"::Invoice,GenJournalLine."Account No.",
          GenJournalLine."Service Tax Group Code",ReverseServiceTaxHelper.CreateServTaxRegNo,ReverseChargeType);

      // Exercise: Apply Invoice to Advance Payment
      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,PostedDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);
      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    LOCAL PROCEDURE ApplyAdvPaySvTaxGrCodeMismatch@1500067(ReverseChargeType@1500000 : Option);
    VAR
      GenJournalLine@1500007 : Record 81;
      PurchaseHeader@1500006 : Record 38;
      ServiceTaxGroup@1500008 : Record 16471;
      VendorLedgerEntry@1500003 : Record 25;
      PostedDocNo@1500002 : Code[20];
      AdvPaymentDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Post Advance Payment
      AdvPaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post Invoice with different Service Tax Reg No
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      PostedDocNo := PostPurchaseDocSrvTaxDetails(PurchaseHeader."Document Type"::Invoice,GenJournalLine."Account No.",
          ServiceTaxGroup.Code,GenJournalLine."Service Tax Registration No.",ReverseChargeType);

      // Exercise: Apply Invoice to Advance Payment
      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          VendorLedgerEntry."Document Type"::Invoice,PostedDocNo,
          VendorLedgerEntry."Document Type"::Payment,AdvPaymentDocNo);
      Assert.ExpectedError(ServiceTaxGroupCodeErr)
    END;

    LOCAL PROCEDURE PostSalesInvAndTakeCredit@1500046(PostedPurchDocNo@1500001 : Code[20]) PostedSalesInvoiceDocNo : Code[20];
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedPurchDocNo);

      PostedSalesInvoiceDocNo := ReverseServiceTaxHelper.PostEqualAmountSalesDoc(ServiceTaxEntryDetails);
      LibraryServiceTax.PayServiceTax(
        ServiceTaxEntryDetails."Service Tax Registration No.",ServiceTaxEntryDetails."Service Tax Group Code",FALSE);
    END;

    LOCAL PROCEDURE AppAdvPmtToInvTakeSalesCredit@1500045(PoT@1500007 : Boolean;InvAmountIs@1500006 : Option;VAR ServiceTaxSetup@1500010 : Record 16472) RemainingServiceTaxAmount : Decimal;
    VAR
      PostedPurchInvoiceDocNo@1500001 : Code[20];
      PostedAdvancePaymentDocNo@1500002 : Code[20];
    BEGIN
      AdvPmtAndInvPayAdvPmtRCToGov(
        PostedAdvancePaymentDocNo,PostedPurchInvoiceDocNo,ServiceTaxSetup,InvAmountIs,GetReverseChargeType(PoT),PoT);
      RemainingServiceTaxAmount :=
        ReverseServiceTaxHelper.CalcRemFullTaxAmountOnDocs(PostedAdvancePaymentDocNo,PostedPurchInvoiceDocNo);

      PostSalesInvAndTakeCredit(PostedAdvancePaymentDocNo);
    END;

    LOCAL PROCEDURE ApplyAdvPayment@1500042(ReverseChargeType@1500003 : Option;PoT@1500007 : Boolean);
    VAR
      PurchaseHeader@1500013 : Record 38;
      ServiceTaxSetup@1500010 : Record 16472;
      VendorLedgerEntry@1500008 : Record 25;
      GenJournalLine@1500000 : Record 81;
      AdvancePaymentBaseAmount@1500004 : Decimal;
      ServiceTaxAmountInAdvancePmt@1500005 : Decimal;
      PostedPurchInvoiceDocNo@1500001 : Code[20];
      PostedAdvancePaymentDocNo@1500002 : Code[20];
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvancePaymentAndInvoice(
        PostedAdvancePaymentDocNo,PostedPurchInvoiceDocNo,ServiceTaxSetup,
        AdvancePaymentBaseAmount,ServiceTaxAmountInAdvancePmt,ReverseChargeType,PoT,GenJournalLine);

      // Exercise: Apply Invoice to Advance Payment
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,PostedPurchInvoiceDocNo,
        VendorLedgerEntry."Document Type"::Payment,PostedAdvancePaymentDocNo);

      // Verify:
      ServiceTaxVerify.AdvPmtGLBalance(ServiceTaxSetup,ServiceTaxAmountInAdvancePmt,ReverseChargeType);
      ServiceTaxVerify.STEntriesAppln(LastTransactionNo,GenJournalLine,AdvancePaymentBaseAmount,ReverseChargeType);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchInvoiceDocNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedAdvancePaymentDocNo,FALSE);
    END;

    LOCAL PROCEDURE ApplyDocAndPayment@1500020(DocumentType@1500000 : Option;PoT@1500014 : Boolean);
    VAR
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
      ServiceTaxSetup@1500007 : Record 16472;
      VendorLedgerEntry@1500010 : Record 25;
      PostedDocNo@1500006 : Code[20];
      PaymentDocNo@1500005 : Code[20];
      BaseAmount@1500003 : Decimal;
      ServiceTaxAmount@1500002 : Decimal;
      ReverseChargePercentage@1500015 : Integer;
      ReverseChargeType@1500001 : Option;
      KKCAmount@1500004 : Decimal;
      SBCAmount@1500011 : Decimal;
    BEGIN
      Initialize;

      ReverseChargeType := GetReverseChargeType(PoT);
      IF NOT PoT THEN
        ReverseChargePercentage := 100;

      // Post Purchase Invoice
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDocForVendor(
          PurchaseHeader,PurchaseLine,ReverseServiceTaxHelper.CreateVendor,DocumentType,ReverseChargeType,PoT);

      // Post Payment
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PaymentDocNo :=
        ReverseServiceTaxHelper.PostPayment(
          PurchaseHeader."Pay-to Vendor No.",
          ReverseServiceTaxHelper.CalculatePayment(
            PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,ReverseChargePercentage),
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));

      // Exercise:
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        VendorLedgerEntry."Document Type"::Invoice,PostedDocNo,
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo);

      // Verify:
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentDocNo,FALSE);

      IF PoT THEN BEGIN
        ServiceTaxVerify.GLBalanceReceivablesOnly(ServiceTaxSetup,ServiceTaxAmount);
        ServiceTaxVerify.GLSBCBalanceReceivablesOnly(ServiceTaxSetup,SBCAmount);
        ServiceTaxVerify.GLKKCBalanceReceivablesOnly(ServiceTaxSetup,KKCAmount);
      END ELSE BEGIN
        VerifyCreditClosed(ServiceTaxSetup,BaseAmount,PaymentDocNo,ReverseChargeType);
        ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup,ServiceTaxAmount);
        ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup,SBCAmount);
        ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup,KKCAmount);
      END;
    END;

    LOCAL PROCEDURE ApplyDocAndPartialPayments@1500039(DocumentType@1500001 : Option;ReverseChargeType@1500000 : Option);
    VAR
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
      ServiceTaxSetup@1500007 : Record 16472;
      VendorLedgerEntry@1500012 : Record 25;
      PostedDocNo@1500006 : Code[20];
      PaymentDocNo1@1500005 : Code[20];
      PaymentDocNo2@1500010 : Code[20];
      BaseAmount@1500003 : Decimal;
      ServiceTaxAmount@1500002 : Decimal;
      PartialPaymentFactor@1500011 : Decimal;
      RevChargeCreditClosed@1500013 : Boolean;
      RealCreditClosed@1500014 : Boolean;
    BEGIN
      Initialize;

      // Post Purchase Invoice
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDocForVendor(
          PurchaseHeader,PurchaseLine,ReverseServiceTaxHelper.CreateVendor,DocumentType,ReverseChargeType,FALSE);
      PartialPaymentFactor := LibraryRandom.RandDec(1,1);

      // Post Partial Payment 1
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PaymentDocNo1 := ReverseServiceTaxHelper.PostPayment(PurchaseHeader."Pay-to Vendor No.",
          PartialPaymentFactor * ReverseServiceTaxHelper.CalculatePayment(
            PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100),
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));

      // Post Partial Payment 2
      ServiceTaxSetup.FindOnDate(PurchaseLine."Service Tax Group",PurchaseHeader."Posting Date");
      PaymentDocNo2 := ReverseServiceTaxHelper.PostPayment(PurchaseHeader."Pay-to Vendor No.",
          (1 - PartialPaymentFactor) * ReverseServiceTaxHelper.CalculatePayment(
            PurchaseLine."Document Type",PurchaseLine."Line Amount",ServiceTaxSetup,100),
          PurchaseHeader."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));

      // Exercise:
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,PostedDocNo,
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo1);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,PostedDocNo,
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo2);

      // Verify:
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine."Line Amount",DocumentType);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup,ServiceTaxAmount);

      RevChargeCreditClosed := ReverseChargeType = ServiceTaxType::" ";
      RealCreditClosed := ReverseChargeType <> ServiceTaxType::" ";
      ServiceTaxVerify.STEntryDetailsPartialPay(PaymentDocNo1,BaseAmount,ServiceTaxSetup,PartialPaymentFactor,0,FALSE,
        RevChargeCreditClosed,RealCreditClosed);
      ServiceTaxVerify.STEntryDetailsPartialPay(
        PaymentDocNo2,BaseAmount,ServiceTaxSetup,1 - PartialPaymentFactor,0,FALSE,
        RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentDocNo1,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentDocNo2,FALSE);
    END;

    LOCAL PROCEDURE ApplyPartialDocsAndPayment@1500054(DocumentType@1500000 : Option;ReverseChargeType@1500001 : Option);
    VAR
      PurchaseHeader1@1500011 : Record 38;
      PurchaseHeader2@1500006 : Record 38;
      PurchaseLine1@1500010 : Record 39;
      PurchaseLine2@1500013 : Record 39;
      ServiceTaxSetup1@1500009 : Record 16472;
      ServiceTaxSetup2@1500014 : Record 16472;
      VendorLedgerEntry@1500002 : Record 25;
      VendorNo@1500015 : Code[20];
      PostedDocNo1@1500008 : Code[20];
      PostedDocNo2@1500012 : Code[20];
      PaymentDocNo@1500007 : Code[20];
      AccountNo@1500005 : Code[20];
      BaseAmount@1500016 : Decimal;
      ServiceTaxAmount@1500003 : Decimal;
      RevChargeCreditClosed@1500004 : Boolean;
      RealCreditClosed@1500017 : Boolean;
      SBCAmount@1500018 : Decimal;
      KKCAmount@1500019 : Decimal;
    BEGIN
      Initialize;

      // Post Purchase Invoice 1
      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      PostedDocNo1 := ReverseServiceTaxHelper.PostPurchaseDocForVendor(
          PurchaseHeader1,PurchaseLine1,VendorNo,DocumentType,ReverseChargeType,FALSE);
      PostedDocNo2 := ReverseServiceTaxHelper.PostPurchaseDocForVendor(
          PurchaseHeader2,PurchaseLine2,VendorNo,DocumentType,ReverseChargeType,FALSE);

      // Post Payment
      ServiceTaxSetup1.FindOnDate(PurchaseLine1."Service Tax Group",PurchaseHeader1."Posting Date");
      ServiceTaxSetup2.FindOnDate(PurchaseLine2."Service Tax Group",PurchaseHeader2."Posting Date");
      PaymentDocNo := ReverseServiceTaxHelper.PostPayment(PurchaseHeader1."Pay-to Vendor No.",
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine1."Document Type",PurchaseLine1."Line Amount",ServiceTaxSetup1,100) +
          ReverseServiceTaxHelper.CalculatePayment(PurchaseLine2."Document Type",PurchaseLine2."Line Amount",ServiceTaxSetup2,100),
          PurchaseHeader1."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));

      // Exercise:
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader1."Document Type"::Invoice,PostedDocNo1,
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader1."Document Type"::Invoice,PostedDocNo2,
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo);

      // Verify:
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine1."Line Amount",DocumentType);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup1);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup1);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup1);
      ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup1,ServiceTaxAmount);
      ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup1,SBCAmount);
      ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup1,KKCAmount);

      RevChargeCreditClosed := ReverseChargeType = ServiceTaxType::" ";
      RealCreditClosed := ReverseChargeType <> ServiceTaxType::" ";
      AccountNo := ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup1);
      ServiceTaxVerify.STEntryDetailsForAccount(PaymentDocNo,AccountNo,BaseAmount,ServiceTaxSetup1,
        RevChargeCreditClosed,RealCreditClosed);

      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLine2."Line Amount",DocumentType);
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup2);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup2);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup2);

      ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup2,ServiceTaxAmount);
      ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup2,SBCAmount);
      ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup2,KKCAmount);

      AccountNo := ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup2);
      ServiceTaxVerify.STEntryDetailsForAccount(PaymentDocNo,AccountNo,BaseAmount,ServiceTaxSetup2,
        RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo1,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo2,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentDocNo,FALSE);
    END;

    LOCAL PROCEDURE ApplyRefundOnCrM@1500037(ServiceTypeReverseCharge@1500016 : Option;ReverseChargeType@1500011 : Option);
    VAR
      ServiceTaxGroup@1500010 : Record 16471;
      PurchaseHeaderCrM@1500007 : Record 38;
      PurchaseLineCrM@1500005 : Record 39;
      VendorLedgerEntry@1500006 : Record 25;
      ServiceTaxSetup@1500013 : Record 16472;
      ServRegNo@1500004 : Code[20];
      VendorNo@1500003 : Code[20];
      PostedRefundNo@1500002 : Code[20];
      PostedCrMNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
      BaseAmount@1500014 : Decimal;
      ServiceTaxAmount@1500015 : Decimal;
      SBCAmount@1500008 : Decimal;
      KKCAmount@1500009 : Decimal;
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      ServRegNo := ReverseServiceTaxHelper.CreateServTaxRegNo;
      Amount := LibraryRandom.RandDec(10000,2);

      // Post Credit Memo
      PostedCrMNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(PurchaseHeaderCrM,PurchaseLineCrM,VendorNo,
          PurchaseHeaderCrM."Document Type"::"Credit Memo",ServiceTypeReverseCharge,ReverseChargeType,FALSE,
          ServRegNo,ServiceTaxGroup.Code,Amount);

      // Post Refund
      ServiceTaxSetup.FindOnDate(PurchaseLineCrM."Service Tax Group",PurchaseHeaderCrM."Posting Date");
      PostedRefundNo := ReverseServiceTaxHelper.PostPayment(VendorNo,-Amount,
          PurchaseHeaderCrM."Posting Date",VendorLedgerEntry."Document Type"::Refund);

      // Exercise:
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Refund,PostedRefundNo,
        VendorLedgerEntry."Document Type"::"Credit Memo",PostedCrMNo);

      // Verify:
      BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(PurchaseLineCrM."Line Amount",
          PurchaseHeaderCrM."Document Type"::"Credit Memo");
      ServiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.GLBalanceRevCharge(ServiceTaxSetup,ServiceTaxAmount);
      ServiceTaxVerify.GLSBCBalanceRevCharge(ServiceTaxSetup,SBCAmount);
      ServiceTaxVerify.GLKKCBalanceRevCharge(ServiceTaxSetup,KKCAmount);

      ServiceTaxVerify.ServTaxEntry(PostedCrMNo,BaseAmount,ServiceTaxSetup);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedCrMNo,FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedRefundNo,FALSE);

      VerifyCreditClosed(ServiceTaxSetup,BaseAmount,PostedRefundNo,ReverseChargeType);
    END;

    LOCAL PROCEDURE GetReverseChargeType@1500018(PoT@1500000 : Boolean) : Integer;
    BEGIN
      IF PoT THEN
        EXIT(ServiceTaxType::" ");
      EXIT(ServiceTaxType::Standard);
    END;

    LOCAL PROCEDURE PostAdvancePaymentAndInvoice@1500105(VAR PostedAdvancePaymentDocNo@1500000 : Code[20];VAR PostedPurchInvoiceDocNo@1500001 : Code[20];VAR ServiceTaxSetup@1500002 : Record 16472;VAR AdvancePaymentBaseAmount@1500003 : Decimal;VAR ServiceTaxAmountInAdvancePmt@1500004 : Decimal;ReverseChargeType@1500007 : Option;PoT@1500006 : Boolean;VAR GenJournalLine@1500010 : Record 81) : Code[20];
    VAR
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500009 : Record 39;
    BEGIN
      Initialize;

      // Post Advance Payment
      PostedAdvancePaymentDocNo := ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,PoT,
          ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,100);

      // Post Invoice with Service Tax
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      AdvancePaymentBaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ReverseChargeType,ServiceTaxSetup);
      ServiceTaxAmountInAdvancePmt := ReverseServiceTaxHelper.CalculateServTaxTotal(AdvancePaymentBaseAmount,ServiceTaxSetup);

      PostedPurchInvoiceDocNo := PostPurchaseDocForAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
          PurchaseHeader."Document Type"::Invoice,ReverseChargeType,PoT,AdvancePaymentBaseAmount);

      EXIT(GenJournalLine."Account No.");
    END;

    LOCAL PROCEDURE PostJournalDocForAdvPayment@1500016(AdvPaymentJnlLine@1500000 : Record 81;DocumentType@1500005 : Option;BaseAmount@1500006 : Decimal;ServiceTaxOnAdvPayment@1500004 : Boolean) : Code[20];
    VAR
      GenJournalLine@1500001 : Record 81;
      GenJournalBatch@1500003 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH AdvPaymentJnlLine DO BEGIN
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(
          GenJournalLine,GenJournalBatch,DocumentType,
          "Service Type (Rev. Chrg.)","Account No.",BaseAmount,"Posting Date",
          "Service Tax Registration No.","Service Tax Group Code");
        GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",ServiceTaxOnAdvPayment);
      END;
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE PostPurchaseDocForAdvPayment@1500043(VAR PurchaseHeader@1500004 : Record 38;VAR PurchaseLine@1500003 : Record 39;GenJournalLine@1500006 : Record 81;DocumentType@1500000 : Option;ReverseChargeType@1500005 : Option;PoT@1500001 : Boolean;Amount@1500002 : Decimal) : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocForAdvPayment(
        PurchaseHeader,PurchaseLine,GenJournalLine,DocumentType,ReverseChargeType,100,PoT,Amount);
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader))
    END;

    LOCAL PROCEDURE PostPurchaseDocSrvTaxDetails@1500062(DocumentType@1500000 : Option;VendorNo@1500004 : Code[20];ServiceTaxGroupCode@1500002 : Code[20];ServiceTaxRegNo@1500001 : Code[20];ReverseChargeType@1500003 : Option) : Code[20];
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500006 : Record 39;
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseHeaderByVendor(PurchaseHeader,DocumentType,ReverseChargeType,FALSE,VendorNo);
      ReverseServiceTaxHelper.CreatePurchaseLineWithAmount(PurchaseLine,PurchaseHeader,ServiceTaxGroupCode,ServiceTaxRegNo,
        ReverseChargeType,100,LibraryRandom.RandDec(1000,2));
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader))
    END;

    LOCAL PROCEDURE VerifyCreditClosed@1500088(ServiceTaxSetup@1500000 : Record 16472;Amount@1500002 : Decimal;DocumentNumber@1500001 : Code[20];ReverseChargeType@1500003 : Option);
    VAR
      RevChargeCreditClosed@1500005 : Boolean;
      RealCreditClosed@1500004 : Boolean;
    BEGIN
      RevChargeCreditClosed := ReverseChargeType = ServiceTaxType::" ";
      RealCreditClosed := ReverseChargeType <> ServiceTaxType::" ";
      ServiceTaxVerify.ServTaxEntryDetails(DocumentNumber,Amount,ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxHandler@1500073(VAR PayServiceTax@1500000 : TestPage 16477);
    BEGIN
      LibraryServiceTax.SetValuesForPaymentUseCreditAvailable(PayServiceTax);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500002(Message@1500000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

