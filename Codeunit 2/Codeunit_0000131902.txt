OBJECT Codeunit 131902 Library - Service
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServicePeriodOneMonth@1000 : TextConst 'ENU=<1M>';
      PaymentChannel@1001 : TextConst 'ENU=Payment Channel';
      LibraryERM@1003 : Codeunit 131300;
      NonWorkDayWorkDaySequenceNotFound@1005 : TextConst 'ENU=No non-working day followed by a working day found within an interval of %1 days.';
      LibraryInventory@1006 : Codeunit 132201;
      LibraryResource@1007 : Codeunit 130511;
      LibrarySales@1004 : Codeunit 130509;
      LibraryUtility@1002 : Codeunit 131000;

    PROCEDURE CreateBaseCalendar@15(VAR BaseCalendar@1000 : Record 7600);
    BEGIN
      BaseCalendar.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      BaseCalendar.VALIDATE(Code,LibraryUtility.GenerateRandomCode(BaseCalendar.FIELDNO(Code),DATABASE::"Base Calendar"));
      BaseCalendar.INSERT(TRUE);
    END;

    PROCEDURE CreateContractGroup@10(VAR ContractGroup@1000 : Record 5966);
    BEGIN
      ContractGroup.INIT;

      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ContractGroup.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ContractGroup.FIELDNO(Code),DATABASE::"Base Calendar"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Base Calendar",ContractGroup.FIELDNO(Code))));
      ContractGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateContractLineCreditMemo@99(VAR ServiceContractLine@1000 : Record 5964;Deleting@1001 : Boolean) : Code[20];
    VAR
      ServContractManagement@1003 : Codeunit 5940;
      CreditMemoNo@1004 : Code[20];
    BEGIN
      CreditMemoNo := ServContractManagement.CreateContractLineCreditMemo(ServiceContractLine,Deleting);
      EXIT(CreditMemoNo);
    END;

    PROCEDURE CreateContractServiceDiscount@20(VAR ContractServiceDiscount@1000 : Record 5972;ServiceContractHeader@1001 : Record 5965;Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      ContractServiceDiscount.INIT;
      ContractServiceDiscount.VALIDATE("Contract Type",ServiceContractHeader."Contract Type");
      ContractServiceDiscount.VALIDATE("Contract No.",ServiceContractHeader."Contract No.");
      ContractServiceDiscount.VALIDATE(Type,Type);
      ContractServiceDiscount.VALIDATE("No.",No);
      ContractServiceDiscount.VALIDATE("Starting Date",ServiceContractHeader."Starting Date");
      ContractServiceDiscount.VALIDATE("Discount %",RANDOM(100));  // Validating as random because value is not important.
      ContractServiceDiscount.INSERT(TRUE);
    END;

    PROCEDURE CreateExtendedTextForItem@27(ItemNo@1000 : Code[20]) : Text;
    VAR
      ExtendedTextHeader@1001 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,LibraryUtility.GenerateGUID);
      ExtendedTextLine.MODIFY;
      EXIT(ExtendedTextLine.Text);
    END;

    PROCEDURE CreateExtendedTextHeaderItem@51(VAR ExtendedTextHeader@1000 : Record 279;ItemNo@1001 : Code[20]);
    BEGIN
      ExtendedTextHeader.INIT;
      ExtendedTextHeader.VALIDATE("Table Name",ExtendedTextHeader."Table Name"::Item);
      ExtendedTextHeader.VALIDATE("No.",ItemNo);
      ExtendedTextHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateExtendedTextLineItem@54(VAR ExtendedTextLine@1002 : Record 280;ExtendedTextHeader@1000 : Record 279);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      ExtendedTextLine.INIT;
      ExtendedTextLine.VALIDATE("Table Name",ExtendedTextHeader."Table Name");
      ExtendedTextLine.VALIDATE("No.",ExtendedTextHeader."No.");
      ExtendedTextLine.VALIDATE("Language Code",ExtendedTextHeader."Language Code");
      ExtendedTextLine.VALIDATE("Text No.",ExtendedTextHeader."Text No.");
      RecRef.GETTABLE(ExtendedTextLine);
      ExtendedTextLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ExtendedTextLine.FIELDNO("Line No.")));
      ExtendedTextLine.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateFaultArea@73(VAR FaultArea@1001 : Record 5915);
    BEGIN
      FaultArea.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      FaultArea.VALIDATE(Code,LibraryUtility.GenerateRandomCode(FaultArea.FIELDNO(Code),DATABASE::"Fault Area"));
      FaultArea.VALIDATE(Description,FaultArea.Code);  // Validating Code as Description because value is not important.
      FaultArea.INSERT(TRUE);
    END;

    PROCEDURE CreateFaultCode@33(VAR FaultCode@1000 : Record 5918;FaultAreaCode@1001 : Code[10];SymptomCode@1002 : Code[10]);
    BEGIN
      FaultCode.INIT;
      FaultCode.VALIDATE("Fault Area Code",FaultAreaCode);
      FaultCode.VALIDATE("Symptom Code",SymptomCode);
      FaultCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(FaultCode.FIELDNO(Code),DATABASE::"Fault Code"));
      FaultCode.VALIDATE(Description,FaultCode.Code);  // Validating Code as Description because value is not important.
      FaultCode.INSERT(TRUE);
    END;

    PROCEDURE CreateFaultReasonCode@155(VAR FaultReasonCode@1000 : Record 5917;ExcludeWarrantyDiscount@1001 : Boolean;ExcludeContractDiscount@1002 : Boolean);
    BEGIN
      WITH FaultReasonCode DO BEGIN
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Fault Reason Code"));
        VALIDATE(Description,Code);
        VALIDATE("Exclude Warranty Discount",ExcludeWarrantyDiscount);
        VALIDATE("Exclude Contract Discount",ExcludeContractDiscount);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateFaultResolCodesRlship@36(VAR FaultResolCodRelationship@1000 : Record 5920;FaultCode@1001 : Record 5918;ResolutionCode@1002 : Code[10];ServiceItemGroupCode@1003 : Code[10]);
    BEGIN
      FaultResolCodRelationship.INIT;
      FaultResolCodRelationship.VALIDATE("Fault Area Code",FaultCode."Fault Area Code");
      FaultResolCodRelationship.VALIDATE("Symptom Code",FaultCode."Symptom Code");
      FaultResolCodRelationship.VALIDATE("Fault Code",FaultCode.Code);
      FaultResolCodRelationship.VALIDATE("Resolution Code",ResolutionCode);
      FaultResolCodRelationship.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      FaultResolCodRelationship.INSERT(TRUE);
    END;

    PROCEDURE CreateLoaner@18(VAR Loaner@1000 : Record 5913);
    BEGIN
      Loaner.INIT;
      Loaner.INSERT(TRUE);
    END;

    PROCEDURE CreateReasonCode@43(VAR ReasonCode@1000 : Record 231);
    BEGIN
      ReasonCode.INIT;
      ReasonCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ReasonCode.FIELDNO(Code),DATABASE::"Reason Code"));
      ReasonCode.VALIDATE(Description,ReasonCode.Code);  // Validating Code as Description because value is not important.
      ReasonCode.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateRepairStatus@46(VAR RepairStatus@1001 : Record 5927);
    BEGIN
      RepairStatus.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      RepairStatus.VALIDATE(Code,LibraryUtility.GenerateRandomCode(RepairStatus.FIELDNO(Code),DATABASE::"Repair Status"));
      RepairStatus.VALIDATE(Description,RepairStatus.Code);  // Validating Code as Description because value is not important.
      RepairStatus.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateResolutionCode@85(VAR ResolutionCode@1001 : Record 5919);
    BEGIN
      ResolutionCode.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ResolutionCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ResolutionCode.FIELDNO(Code),DATABASE::"Resolution Code"));
      ResolutionCode.VALIDATE(Description,ResolutionCode.Code);  // Validating Code as Description because value is not important.
      ResolutionCode.INSERT(TRUE);
    END;

    PROCEDURE CreateResponsibilityCenter@49(VAR ResponsibilityCenter@1000 : Record 5714);
    BEGIN
      ResponsibilityCenter.INIT;
      ResponsibilityCenter.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ResponsibilityCenter.FIELDNO(Code),DATABASE::"Responsibility Center"));
      ResponsibilityCenter.VALIDATE(Name,ResponsibilityCenter.Code);  // Validating Code as Name because value is not important.
      ResponsibilityCenter.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceCommentLine@22(VAR ServiceCommentLine@1000 : Record 5906;TableName@1001 : Option;TableSubtype@1002 : Option;No@1003 : Code[20];Type@1004 : Option;TableLineNo@1005 : Integer);
    VAR
      RecRef@1006 : RecordRef;
    BEGIN
      ServiceCommentLine.INIT;
      ServiceCommentLine.VALIDATE("Table Name",TableName);
      ServiceCommentLine.VALIDATE("Table Subtype",TableSubtype);
      ServiceCommentLine.VALIDATE("No.",No);
      ServiceCommentLine.VALIDATE(Type,Type);
      ServiceCommentLine.VALIDATE("Table Line No.",TableLineNo);
      RecRef.GETTABLE(ServiceCommentLine);
      ServiceCommentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceCommentLine.FIELDNO("Line No.")));
      ServiceCommentLine.INSERT(TRUE);
      // Validate Comment as primary key to enable user to distinguish between comments because value is not important.
      ServiceCommentLine.VALIDATE(
        Comment,FORMAT(ServiceCommentLine."Table Name") + FORMAT(ServiceCommentLine."Table Subtype") + ServiceCommentLine."No." +
        FORMAT(ServiceCommentLine.Type) + FORMAT(ServiceCommentLine."Table Line No.") + FORMAT(ServiceCommentLine."Line No."));
      ServiceCommentLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateCommentLineForServHeader@28(VAR ServiceCommentLine@1000 : Record 5906;ServiceItemLine@1001 : Record 5901;Type@1002 : Option);
    BEGIN
      CreateServiceCommentLine(
        ServiceCommentLine,ServiceCommentLine."Table Name"::"Service Header",ServiceItemLine."Document Type",
        ServiceItemLine."Document No.",Type,ServiceItemLine."Line No.");
    END;

    PROCEDURE CreateCommentLineForServCntrct@32(VAR ServiceCommentLine@1002 : Record 5906;ServiceContractLine@1001 : Record 5964;Type@1000 : Option);
    BEGIN
      CreateServiceCommentLine(
        ServiceCommentLine,ServiceCommentLine."Table Name"::"Service Contract",ServiceContractLine."Contract Type",
        ServiceContractLine."Contract No.",Type,ServiceContractLine."Line No.");
    END;

    PROCEDURE CreateOrderFromQuote@44(ServiceHeader@1000 : Record 5900);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Service-Quote to Order",ServiceHeader);
    END;

    PROCEDURE CreateServiceContractAcctGrp@7(VAR ServiceContractAccountGroup@1000 : Record 5973);
    BEGIN
      // Create Service Contract Account Group.
      ServiceContractAccountGroup.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ServiceContractAccountGroup.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ServiceContractAccountGroup.FIELDNO(Code),DATABASE::"Service Contract Account Group"));
      ServiceContractAccountGroup.INSERT(TRUE);

      // Input Accounts as they are mandatory.
      ServiceContractAccountGroup.VALIDATE("Non-Prepaid Contract Acc.",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceContractAccountGroup.VALIDATE("Prepaid Contract Acc.",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceContractAccountGroup.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceContractHeader@1(VAR ServiceContractHeader@1000 : Record 5965;ContractType@1001 : Option;CustomerNo@1002 : Code[20]);
    VAR
      ServiceContractAccountGroup@1004 : Record 5973;
    BEGIN
      ServiceContractHeader.INIT;
      ServiceContractHeader.VALIDATE("Contract Type",ContractType);
      ServiceContractHeader.INSERT(TRUE);
      IF CustomerNo = '' THEN
        CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceContractHeader.VALIDATE("Customer No.",CustomerNo);
      // Validate one month as the default value of the Service Period.
      EVALUATE(ServiceContractHeader."Service Period",ServicePeriodOneMonth);
      // Validate default value of Service Contract Acc. Gr. Code. This field is a mandatory field for signing Contract.
      CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.VALIDATE("Your Reference",ServiceContractHeader."Customer No."); // Value is not important.
      UpdatePaymentChannelContract(ServiceContractHeader);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceContractLine@6(VAR ServiceContractLine@1000 : Record 5964;ServiceContractHeader@1001 : Record 5965;ServiceItemNo@1003 : Code[20]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      ServiceContractLine.INIT;
      ServiceContractLine.VALIDATE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractLine.VALIDATE("Contract No.",ServiceContractHeader."Contract No.");
      RecRef.GETTABLE(ServiceContractLine);
      // Use the function GetLastLineNo to get the value of the Line No. field.
      ServiceContractLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceContractLine.FIELDNO("Line No.")));
      ServiceContractLine.VALIDATE("Customer No.",ServiceContractHeader."Customer No.");
      ServiceContractLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceContractLine.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceContractTemplate@14(VAR ServiceContractTemplate@1000 : Record 5968;DefaultServicePeriod@1001 : DateFormula);
    VAR
      ServiceContractAccountGroup@1002 : Record 5973;
    BEGIN
      FindContractAccountGroup(ServiceContractAccountGroup);

      ServiceContractTemplate.INIT;
      ServiceContractTemplate.VALIDATE("Default Service Period",DefaultServicePeriod);
      // Service Contract Account Group is required for signing Contracts.
      ServiceContractTemplate.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceCost@31(VAR ServiceCost@1000 : Record 5905);
    BEGIN
      ServiceCost.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ServiceCost.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ServiceCost.FIELDNO(Code),DATABASE::"Service Cost"));
      ServiceCost.VALIDATE(Description,ServiceCost.Code);  // Validating Code as Description because value is not important.
      ServiceCost.VALIDATE("Account No.",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceCost.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceCreditMemoHeaderUsingPage@90() ServiceCreditMemoNo : Code[20];
    VAR
      ServiceCreditMemo@1002 : TestPage 5935;
    BEGIN
      ServiceCreditMemo.OPENNEW;
      ServiceCreditMemo."Customer No.".ACTIVATE;
      ServiceCreditMemoNo := ServiceCreditMemo."No.".VALUE;
      ServiceCreditMemo.OK.INVOKE;
    END;

    PROCEDURE CreateServiceHeader@4(VAR ServiceHeader@1000 : Record 5900;DocumentType@1001 : Option;CustomerNo@1002 : Code[20]);
    VAR
      PaymentMethod@1004 : Record 289;
      PaymentTerms@1005 : Record 3;
    BEGIN
      ServiceHeader.INIT;
      ServiceHeader.VALIDATE("Document Type",DocumentType);
      ServiceHeader.INSERT(TRUE);
      IF CustomerNo = '' THEN
        CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceHeader.VALIDATE("Customer No.",CustomerNo);
      ServiceHeader.VALIDATE("Your Reference",ServiceHeader."Customer No.");
      // Input mandatory fields for local builds.
      IF ServiceHeader."Payment Terms Code" = '' THEN BEGIN
        LibraryERM.FindPaymentTerms(PaymentTerms);
        ServiceHeader.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      END;
      IF ServiceHeader."Payment Method Code" = '' THEN BEGIN
        LibraryERM.FindPaymentMethod(PaymentMethod);
        ServiceHeader.VALIDATE("Payment Method Code",PaymentMethod.Code);
      END;
      UpdatePaymentChannel(ServiceHeader);
      SetCorrDocNoService(ServiceHeader);
      ServiceHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceOrderHeaderUsingPage@92() ServiceOrderNo : Code[20];
    VAR
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      ServiceOrder.OPENNEW;
      ServiceOrder."Customer No.".ACTIVATE;
      ServiceOrderNo := ServiceOrder."No.".VALUE;
      ServiceOrder.OK.INVOKE;
    END;

    PROCEDURE CreateDefaultServiceHour@25(VAR ServiceHour@1000 : Record 5910;Day@1001 : Option);
    BEGIN
      ServiceHour.INIT;
      // Use a random Starting Time that does not cause Ending Time to fall in the next day.
      ServiceHour.VALIDATE("Starting Time",000000T + RANDOM(LibraryUtility.ConvertHoursToMilliSec(12)));
      // Use a random Ending Time that does not fall in the next day.
      ServiceHour.VALIDATE("Ending Time",ServiceHour."Starting Time" + RANDOM(LibraryUtility.ConvertHoursToMilliSec(12)) - 1);
      ServiceHour.VALIDATE(Day,Day);
      ServiceHour.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceHour@23(VAR ServiceHour@1000 : Record 5910;ServiceContractHeader@1001 : Record 5965;Day@1002 : Option);
    BEGIN
      ServiceHour.INIT;
      ServiceHour.VALIDATE("Service Contract Type",ServiceContractHeader."Contract Type" + 1);
      ServiceHour.VALIDATE("Service Contract No.",ServiceContractHeader."Contract No.");
      ServiceHour.VALIDATE("Starting Date",ServiceContractHeader."Starting Date");
      // Use a random Starting Time that does not cause Ending Time to fall in the next day.
      ServiceHour.VALIDATE("Starting Time",000000T + RANDOM(LibraryUtility.ConvertHoursToMilliSec(12)));
      // Use a random Ending Time that does not fall in the next day.
      ServiceHour.VALIDATE("Ending Time",ServiceHour."Starting Time" + RANDOM(LibraryUtility.ConvertHoursToMilliSec(12)) - 1);
      ServiceHour.VALIDATE(Day,Day);
      ServiceHour.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceItem@2(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20]);
    BEGIN
      ServiceItem.INIT;
      ServiceItem.INSERT(TRUE);
      IF CustomerNo = '' THEN
        CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceItem.VALIDATE("Customer No.",CustomerNo);
      ServiceItem.VALIDATE(Description,ServiceItem."No.");  // Validating No. as Description because value is not important.
      ServiceItem.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceItemComponent@39(VAR ServiceItemComponent@1004 : Record 5941;ServiceItemNo@1000 : Code[20];Type@1001 : Option;No@1002 : Code[20]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      ServiceItemComponent.INIT;
      ServiceItemComponent.VALIDATE(Active,TRUE);
      ServiceItemComponent.VALIDATE("Parent Service Item No.",ServiceItemNo);
      RecRef.GETTABLE(ServiceItemComponent);
      ServiceItemComponent.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceItemComponent.FIELDNO("Line No.")));
      ServiceItemComponent.VALIDATE(Type,Type);
      ServiceItemComponent.VALIDATE("No.",No);
      ServiceItemComponent.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceItemGroup@9(VAR ServiceItemGroup@1000 : Record 5904);
    BEGIN
      ServiceItemGroup.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ServiceItemGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ServiceItemGroup.FIELDNO(Code),DATABASE::"Service Item Group"));
      ServiceItemGroup.VALIDATE(Description,ServiceItemGroup.Code);  // Validating Code as Description because value is not important.
      ServiceItemGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceItemLine@5(VAR ServiceItemLine@1000 : Record 5901;ServiceHeader@1002 : Record 5900;ServiceItemNo@1003 : Code[20]);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      ServiceItemLine.INIT;
      ServiceItemLine.VALIDATE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.VALIDATE("Document No.",ServiceHeader."No.");
      RecRef.GETTABLE(ServiceItemLine);
      // Use the function GetLastLineNo to get the value of the Line No. field.
      ServiceItemLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceItemLine.FIELDNO("Line No.")));
      ServiceItemLine.INSERT(TRUE);
      ServiceItemLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceItemLine.VALIDATE(
        Description,FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + FORMAT(ServiceItemLine."Line No."));
      ServiceItemLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceLineWithQuantity@13(VAR ServiceLine@1003 : Record 5902;ServiceHeader@1002 : Record 5900;Type@1001 : Option;No@1000 : Code[20];Quantity@1004 : Integer);
    BEGIN
      CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceLine@3(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900;Type@1003 : Option;No@1004 : Code[20]);
    VAR
      Item@1005 : Record 27;
      Customer@1006 : Record 18;
      VATPostingSetup@1007 : Record 325;
      LibraryJob@1008 : Codeunit 131920;
      RecRef@1002 : RecordRef;
      GeneralPostingSetup@1500000 : Record 252;
    BEGIN
      // Create Service Line.
      CLEAR(ServiceLine);
      ServiceLine.INIT;
      ServiceLine.VALIDATE("Document Type",ServiceHeader."Document Type");
      ServiceLine.VALIDATE("Document No.",ServiceHeader."No.");
      RecRef.GETTABLE(ServiceLine);
      IF (Type = ServiceLine.Type::Item) AND (Item.GET(No) AND Customer.GET(ServiceHeader."Customer No.")) THEN BEGIN
        VATPostingSetup.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
        VATPostingSetup.SETFILTER("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");
        IF FALSE = VATPostingSetup.FINDFIRST THEN
          LibraryJob.CreateVATPostingSetup(Customer."VAT Bus. Posting Group",Item."VAT Prod. Posting Group",VATPostingSetup);
        Customer.MODIFY(TRUE);
      END;

      // Use the function GetLastLineNo to get the value of the Line No. field.
      ServiceLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ServiceLine.FIELDNO("Line No.")));
      ServiceLine.INSERT(TRUE);
      ServiceLine.VALIDATE(Type,Type);
      CASE Type OF
        ServiceLine.Type::Item:
          IF No = '' THEN
            No := LibraryInventory.CreateItemNo;
        ServiceLine.Type::Resource:
          IF No = '' THEN
            No := LibraryResource.CreateResourceNo;
      END;
      ServiceLine.VALIDATE("No.",No);
      ServiceLine.MODIFY(TRUE);

      //Create Gen.Posting Setup
      GeneralPostingSetup.SETRANGE("Gen. Bus. Posting Group",ServiceLine."Gen. Bus. Posting Group");
      GeneralPostingSetup.SETFILTER("Gen. Prod. Posting Group",ServiceLine."Gen. Prod. Posting Group");
      IF FALSE = GeneralPostingSetup.FINDFIRST THEN
        LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,ServiceLine."Gen. Bus. Posting Group",ServiceLine."Gen. Prod. Posting Group");
    END;

    PROCEDURE CreateServiceOrderFromReport@98(ServiceContractHeader@1001 : Record 5965;StartDate@1005 : Date;EndDate@1006 : Date;UseRequestPage@1007 : Boolean);
    VAR
      CreateContractServiceOrders@1004 : Report 6036;
    BEGIN
      CreateContractServiceOrders.SETTABLEVIEW(ServiceContractHeader);
      CreateContractServiceOrders.InitializeRequest(StartDate,EndDate,0);
      CreateContractServiceOrders.USEREQUESTPAGE(UseRequestPage);
      CreateContractServiceOrders.RUNMODAL;
    END;

    PROCEDURE CreateServiceOrderType@64(VAR ServiceOrderType@1000 : Record 5903);
    BEGIN
      ServiceOrderType.INIT;
      ServiceOrderType.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ServiceOrderType.FIELDNO(Code),DATABASE::"Service Order Type"));
      ServiceOrderType.VALIDATE(Description,ServiceOrderType.Code);  // Validating Code as Description because value is not important.
      ServiceOrderType.INSERT(TRUE);
    END;

    PROCEDURE CreateServicePriceGroup@45(VAR ServicePriceGroup@1000 : Record 6080);
    BEGIN
      ServicePriceGroup.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ServicePriceGroup.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ServicePriceGroup.FIELDNO(Code),DATABASE::"Service Price Group"));
      ServicePriceGroup.VALIDATE(Description,ServicePriceGroup.Code);  // Validating Code as Description because value is not important.
      ServicePriceGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateServPriceAdjustmntDetail@52(VAR ServPriceAdjustmentDetail@1000 : Record 6083;ServPriceAdjmtGrCode@1001 : Code[10];Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      ServPriceAdjustmentDetail.INIT;
      ServPriceAdjustmentDetail.VALIDATE("Serv. Price Adjmt. Gr. Code",ServPriceAdjmtGrCode);
      ServPriceAdjustmentDetail.VALIDATE(Type,Type);
      ServPriceAdjustmentDetail.VALIDATE("No.",No);
      ServPriceAdjustmentDetail.INSERT(TRUE);
    END;

    PROCEDURE CreateServPriceAdjustmentGroup@57(VAR ServicePriceAdjustmentGroup@1000 : Record 6082);
    BEGIN
      ServicePriceAdjustmentGroup.INIT;
      ServicePriceAdjustmentGroup.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ServicePriceAdjustmentGroup.FIELDNO(Code),DATABASE::"Service Price Adjustment Group"));
      ServicePriceAdjustmentGroup.VALIDATE(
        Description,ServicePriceAdjustmentGroup.Code);  // Validating Code as Description because value is not important.
      ServicePriceAdjustmentGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateServPriceGroupSetup@37(VAR ServPriceGroupSetup@1000 : Record 6081;ServicePriceGroupCode@1001 : Code[10];FaultAreaCode@1002 : Code[10];CustPriceGroupCode@1003 : Code[10]);
    BEGIN
      ServPriceGroupSetup.INIT;
      ServPriceGroupSetup.VALIDATE("Service Price Group Code",ServicePriceGroupCode);
      ServPriceGroupSetup.VALIDATE("Fault Area Code",FaultAreaCode);
      ServPriceGroupSetup.VALIDATE("Cust. Price Group Code",CustPriceGroupCode);
      ServPriceGroupSetup.VALIDATE("Starting Date",WORKDATE);
      ServPriceGroupSetup.VALIDATE(Amount,RANDOM(100));  // Validating as random because value is not important.
      ServPriceGroupSetup.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceZone@16(VAR ServiceZone@1000 : Record 5957);
    BEGIN
      ServiceZone.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      ServiceZone.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ServiceZone.FIELDNO(Code),DATABASE::"Service Zone"));
      ServiceZone.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateStandardServiceCode@48(VAR StandardServiceCode@1000 : Record 5996);
    BEGIN
      StandardServiceCode.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      StandardServiceCode.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(StandardServiceCode.FIELDNO(Code),DATABASE::"Standard Service Code"));
      // Validating Code as Description because value is not important.
      StandardServiceCode.VALIDATE(Description,StandardServiceCode.Code);
      StandardServiceCode.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardServiceLine@47(VAR StandardServiceLine@1000 : Record 5997;StandardServiceCode@1001 : Code[10]);
    VAR
      RecRef@1006 : RecordRef;
    BEGIN
      StandardServiceLine.INIT;
      StandardServiceLine.VALIDATE("Standard Service Code",StandardServiceCode);
      RecRef.GETTABLE(StandardServiceLine);
      StandardServiceLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,StandardServiceLine.FIELDNO("Line No.")));
      StandardServiceLine.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardServiceItemGr@50(VAR StandardServiceItemGrCode@1003 : Record 5998;ServiceItemGroupCode@1000 : Code[10];StandardServiceCode@1001 : Code[10]);
    BEGIN
      StandardServiceItemGrCode.INIT;
      StandardServiceItemGrCode.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      StandardServiceItemGrCode.VALIDATE(Code,StandardServiceCode);
      StandardServiceItemGrCode.INSERT(TRUE);
    END;

    [Normal]
    PROCEDURE CreateSymptomCode@82(VAR SymptomCode@1001 : Record 5916);
    BEGIN
      SymptomCode.INIT;
      // Use the function GenerateRandomCode to get random and unique value for the Code field.
      SymptomCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(SymptomCode.FIELDNO(Code),DATABASE::"Symptom Code"));
      SymptomCode.VALIDATE(Description,SymptomCode.Code);  // Validating Code as Description because value is not important.
      SymptomCode.INSERT(TRUE);
    END;

    PROCEDURE CreateTroubleshootingHeader@17(VAR TroubleshootingHeader@1000 : Record 5943);
    BEGIN
      TroubleshootingHeader.INIT;
      TroubleshootingHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateTroubleshootingLine@21(VAR TroubleshootingLine@1000 : Record 5944;TroubleshootingHeaderNo@1001 : Code[20]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      TroubleshootingLine.INIT;
      TroubleshootingLine.VALIDATE("No.",TroubleshootingHeaderNo);
      RecRef.GETTABLE(TroubleshootingLine);
      TroubleshootingLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,TroubleshootingLine.FIELDNO("Line No.")));

      // Comment is blank so validate the Comment as a string containing the Troubleshooting Header No. and the Line No. as the
      // text for Comment is not important here. This enables the user to distinguish between different Comments.
      TroubleshootingLine.VALIDATE(Comment,TroubleshootingLine."No." + FORMAT(TroubleshootingLine."Line No."));
      TroubleshootingLine.INSERT(TRUE);
    END;

    PROCEDURE CreateTroubleshootingSetup@19(VAR TroubleshootingSetup@1000 : Record 5945;Type@1001 : Option;No@1002 : Code[20];TroubleshootingNo@1003 : Code[20]);
    BEGIN
      TroubleshootingSetup.INIT;
      TroubleshootingSetup.VALIDATE(Type,Type);
      TroubleshootingSetup.VALIDATE("No.",No);
      TroubleshootingSetup.VALIDATE("Troubleshooting No.",TroubleshootingNo);
      TroubleshootingSetup.INSERT(TRUE);
    END;

    PROCEDURE ChangeCustomer@11(ServiceContractHeader@1000 : Record 5965;NewCustomerNo@1002 : Code[20]);
    VAR
      ServContractManagement@1001 : Codeunit 5940;
    BEGIN
      // Change Customer on Service Contract.
      ServContractManagement.ChangeCustNoOnServContract(NewCustomerNo,'',ServiceContractHeader)
    END;

    PROCEDURE FindContractAccountGroup@24(VAR ServiceContractAccountGroup@1000 : Record 5973);
    BEGIN
      // Filter Service Contract Account Group so that errors are not generated due to mandatory fields.
      ServiceContractAccountGroup.SETFILTER("Non-Prepaid Contract Acc.",'<>''''');
      ServiceContractAccountGroup.SETFILTER("Prepaid Contract Acc.",'<>''''');

      ServiceContractAccountGroup.FINDSET;
    END;

    PROCEDURE FindServiceCost@26(VAR ServiceCost@1000 : Record 5905);
    BEGIN
      // Filter Service Cost so that errors are not generated due to mandatory fields.
      ServiceCost.SETFILTER("Account No.",'<>''''');
      ServiceCost.SETRANGE("Service Zone Code",'');

      ServiceCost.FINDSET;
    END;

    [Normal]
    PROCEDURE FindServiceItemGroup@56(VAR ServiceItemGroup@1000 : Record 5904);
    BEGIN
      ServiceItemGroup.FINDSET;
    END;

    [Normal]
    PROCEDURE FindResolutionCode@130(VAR ResolutionCode@1000 : Record 5919);
    BEGIN
      ResolutionCode.FINDSET;
    END;

    PROCEDURE FindFaultReasonCode@63(VAR FaultReasonCode@1000 : Record 5917);
    BEGIN
      FaultReasonCode.FINDSET;
    END;

    PROCEDURE PostServiceOrder@8(VAR ServiceHeader@1000 : Record 5900;Ship@1002 : Boolean;Consume@1003 : Boolean;Invoice@1004 : Boolean);
    VAR
      TempServiceLine@1001 : TEMPORARY Record 5902;
      ServicePost@1005 : Codeunit 5980;
    BEGIN
      ServiceHeader.FIND;
      SetCorrDocNoService(ServiceHeader);
      ServicePost.PostWithLines(ServiceHeader,TempServiceLine,Ship,Consume,Invoice);
    END;

    PROCEDURE PostServiceOrderWithPassedLines@53(VAR ServiceHeader@1000 : Record 5900;VAR TempServiceLine@1001 : TEMPORARY Record 5902;Ship@1002 : Boolean;Consume@1003 : Boolean;Invoice@1004 : Boolean);
    VAR
      ServicePost@1005 : Codeunit 5980;
    BEGIN
      ServiceHeader.FIND;
      SetCorrDocNoService(ServiceHeader);
      ServicePost.PostWithLines(ServiceHeader,TempServiceLine,Ship,Consume,Invoice);
    END;

    PROCEDURE ReleaseServiceDocument@78(VAR ServiceHeader@1000 : Record 5900);
    VAR
      ReleaseServiceDoc@1001 : Codeunit 416;
    BEGIN
      ReleaseServiceDoc.PerformManualRelease(ServiceHeader);
    END;

    PROCEDURE ReopenServiceDocument@59(VAR ServiceHeader@1000 : Record 5900);
    VAR
      ReleaseServiceDoc@1001 : Codeunit 416;
    BEGIN
      ReleaseServiceDoc.PerformManualReopen(ServiceHeader);
    END;

    PROCEDURE SetCorrDocNoService@58(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      IF ServiceHeader."Document Type" = ServiceHeader."Document Type"::"Credit Memo" THEN;
    END;

    PROCEDURE SetupServiceMgtNoSeries@12();
    VAR
      ServiceMgtSetup@1000 : Record 5911;
      BaseCalender@1001 : Record 7600;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      // Setup Service Management.
      ServiceMgtSetup.GET;

      // Use GetGlobalNoSeriesCode to get No. Series code.
      IF ServiceMgtSetup."Service Item Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Service Item Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Service Order Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Service Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Posted Service Shipment Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Posted Service Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Posted Service Invoice Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Posted Service Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Troubleshooting Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Troubleshooting Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Service Contract Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Service Contract Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Service Quote Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Service Quote Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Contract Invoice Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Contract Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Contract Credit Memo Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Contract Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Prepaid Posting Document Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Prepaid Posting Document Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Contract Credit Memo Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Contract Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Posted Service Shipment Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Posted Service Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Contract Template Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Contract Template Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF ServiceMgtSetup."Loaner Nos." = '' THEN
        ServiceMgtSetup.VALIDATE("Loaner Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      ServiceMgtSetup.VALIDATE("Contract Serv. Ord.  Max. Days",365);  // Using Default 365 Days.

      // Create and Validate Base Calendar.
      IF ServiceMgtSetup."Base Calendar Code" = '' THEN BEGIN
        CreateBaseCalendar(BaseCalender);
        ServiceMgtSetup.VALIDATE("Base Calendar Code",BaseCalender.Code);
      END;

      ServiceMgtSetup.MODIFY(TRUE);

      LibrarySales.SetCreditWarningsToNoWarnings;
    END;

    [Normal]
    PROCEDURE GetFirstWorkingDay@42(WorkingDate@1004 : Date) : Date;
    VAR
      ServiceHour@1000 : Record 5910;
    BEGIN
      // Gets the first working day.
      WHILE NOT (IsWorking(WorkingDate) AND GetServiceHourForDate(ServiceHour,WorkingDate)) DO
        WorkingDate := CALCDATE('<1D>',WorkingDate);
      EXIT(WorkingDate);
    END;

    PROCEDURE GetNextWorkingDay@41(WorkingDate@1000 : Date) : Date;
    VAR
      ServiceHour@1001 : Record 5910;
    BEGIN
      // Gets the next working day from the specified date.
      REPEAT
        WorkingDate := CALCDATE('<1D>',WorkingDate);
      UNTIL (
             IsWorking(WorkingDate) AND GetServiceHourForDate(ServiceHour,WorkingDate)) OR
            (NOT IsWorking(WorkingDate) AND IsValidOnHolidays(WorkingDate));
      EXIT(WorkingDate);
    END;

    [Normal]
    PROCEDURE GetNonWrkngDayFollwdByWrkngDay@34() : Date;
    VAR
      ServiceHour@1000 : Record 5910;
      WorkingDate@1001 : Date;
      LoopCounter@1002 : Integer;
      MaxLoops@1003 : Integer;
    BEGIN
      // Returns a non-working day followed by a working day.
      WorkingDate := WORKDATE;
      LoopCounter := 0;
      MaxLoops := 366;
      REPEAT
        LoopCounter += 1;
        IF LoopCounter > MaxLoops THEN
          ERROR(STRSUBSTNO(NonWorkDayWorkDaySequenceNotFound,MaxLoops));
        WorkingDate := CALCDATE('<1D>',WorkingDate);
      UNTIL
            NOT (IsWorking(WorkingDate) OR IsValidOnHolidays(WorkingDate)) AND
            (IsWorking(CALCDATE('<1D>',WorkingDate)) AND GetServiceHourForDate(ServiceHour,CALCDATE('<1D>',WorkingDate)));
      EXIT(WorkingDate);
    END;

    [Normal]
    PROCEDURE GetServiceHourForDate@40(VAR ServiceHour@1003 : Record 5910;OrderDate@1004 : Date) : Boolean;
    VAR
      Date@1001 : Record 2000000007;
    BEGIN
      // Finds the Service Hour related to the Date and returns a Boolean.
      Date.GET(Date."Period Type"::Date,OrderDate);
      ServiceHour.SETRANGE("Service Contract Type",ServiceHour."Service Contract Type"::" ");
      ServiceHour.SETRANGE("Service Contract No.",'');
      ServiceHour.SETFILTER(Day,Date."Period Name");
      EXIT(ServiceHour.FINDFIRST);
    END;

    PROCEDURE GetServiceOrderReportGrossAmount@100(ServiceLine@1001 : Record 5902) : Decimal;
    VAR
      CustInvDisc@1002 : Record 19;
    BEGIN
      CustInvDisc.GET(ServiceLine."Customer No.",ServiceLine."Currency Code",0);
      EXIT(ServiceLine."Amount Including VAT" - (ServiceLine."Amount Including VAT" * CustInvDisc."Discount %" / 100));
    END;

    PROCEDURE IsWorking@35(DateToCheck@1003 : Date) : Boolean;
    VAR
      CustomizedCalendarChange@1001 : Record 7602;
      ServiceMgtSetup@1002 : Record 5911;
      CalendarManagement@1000 : Codeunit 7600;
      Description@1004 : Text[30];
    BEGIN
      // Checks if the day is a working day.
      ServiceMgtSetup.GET;
      EXIT(
        NOT CalendarManagement.CheckCustomizedDateStatus(
          CustomizedCalendarChange."Source Type"::Service,'','',ServiceMgtSetup."Base Calendar Code",DateToCheck,Description));
    END;

    PROCEDURE IsValidOnHolidays@38(DateToCheck@1000 : Date) : Boolean;
    VAR
      ServiceHour@1001 : Record 5910;
    BEGIN
      // Checks if the Service Hour for the date has Valid on Holidays checked.
      IF GetServiceHourForDate(ServiceHour,DateToCheck) THEN
        EXIT(ServiceHour."Valid on Holidays");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdatePaymentChannel@62(VAR ServiceHeader@1000 : Record 5900);
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      IF LibraryUtility.CheckFieldExistenceInTable(DATABASE::"Service Header",PaymentChannel) THEN BEGIN
        RecRef.GETTABLE(ServiceHeader);
        FieldRef := RecRef.FIELD(LibraryUtility.FindFieldNoInTable(DATABASE::"Service Header",PaymentChannel));
        FieldRef.VALIDATE(2);  // Input Option as Account Transfer.
        RecRef.SETTABLE(ServiceHeader);
      END;
    END;

    LOCAL PROCEDURE UpdatePaymentChannelContract@29(VAR ServiceContractHeader@1003 : Record 5965);
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      IF LibraryUtility.CheckFieldExistenceInTable(DATABASE::"Service Contract Header",PaymentChannel) THEN BEGIN
        RecRef.GETTABLE(ServiceContractHeader);
        FieldRef := RecRef.FIELD(LibraryUtility.FindFieldNoInTable(DATABASE::"Service Contract Header",PaymentChannel));
        FieldRef.VALIDATE(2);  // Input Option as Account Transfer.
        RecRef.SETTABLE(ServiceContractHeader);
      END;
    END;

    PROCEDURE AutoReserveServiceLine@30(ServiceLine@1000 : Record 5902);
    BEGIN
      ServiceLine.AutoReserve;
    END;

    PROCEDURE UndoShipmentLinesByServiceOrderNo@77(ServiceOrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",ServiceOrderNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);
    END;

    PROCEDURE UndoShipmentLinesByServiceDocNo@108(ServiceDocumentNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Document No.",ServiceDocumentNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);
    END;

    [Normal]
    PROCEDURE CreateDefaultYellowLocation@65(VAR Location@1000 : Record 14) : Code[10];
    VAR
      WarehouseEmployee@1001 : Record 7301;
      LibraryWarehouse@1002 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      WITH Location DO BEGIN
        VALIDATE("Require Receive",TRUE);
        VALIDATE("Require Shipment",TRUE);
        VALIDATE("Require Put-away",TRUE);
        VALIDATE("Require Pick",TRUE);

        VALIDATE("Bin Mandatory",FALSE);
        VALIDATE("Use Put-away Worksheet",FALSE);
        VALIDATE("Directed Put-away and Pick",FALSE);
        VALIDATE("Use ADCS",FALSE);

        MODIFY(TRUE);
      END;

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      EXIT(Location.Code);
    END;

    [Normal]
    PROCEDURE CreateFullWarehouseLocation@70(VAR Location@1000 : Record 14;NumberOfBinsPerZone@1003 : Integer);
    VAR
      WarehouseEmployee@1001 : Record 7301;
      LibraryWarehouse@1002 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,NumberOfBinsPerZone);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    PROCEDURE CreateCustomizedCalendarChange@55(BaseCalendarCode@1000 : Code[10];VAR CustomizedCalendarChange@1001 : Record 7602;SourceType@1002 : Option;SourceCode@1003 : Code[10];AdditionalSourceCode@1004 : Code[10];RecurringSystem@1005 : Option;WeekDay@1006 : Option;IsNonWorking@1007 : Boolean);
    BEGIN
      WITH CustomizedCalendarChange DO BEGIN
        INIT;
        VALIDATE("Source Type",SourceType);
        VALIDATE("Source Code",SourceCode);
        VALIDATE("Additional Source Code",AdditionalSourceCode);
        VALIDATE("Base Calendar Code",BaseCalendarCode);
        VALIDATE("Recurring System",RecurringSystem);
        VALIDATE(Day,WeekDay);
        VALIDATE(Nonworking,IsNonWorking);
        INSERT(TRUE);
      END;
    END;

    BEGIN
    {
      Contains all utility functions related to Service.
    }
    END.
  }
}

