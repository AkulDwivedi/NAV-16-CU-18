OBJECT Codeunit 134088 ERM Pmt Disc for Cust/Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1000 : Codeunit 131300;
      LibrarySales@1001 : Codeunit 130509;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryPmtDiscSetup@1012 : Codeunit 131303;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryService@1022 : Codeunit 131902;
      LibraryVariableStorage@1009 : Codeunit 131004;
      LibraryRandom@1006 : Codeunit 130440;
      LibrarySetupStorage@1011 : Codeunit 131009;
      Assert@1007 : Codeunit 130000;
      isInitialized@1002 : Boolean;
      AmountLCYErr@1003 : TextConst '@@@=.;ENU=%1 should be %2 in %3.';
      UnappliedErr@1008 : TextConst '@@@="%1 = Detailed Customer Ledger Entry or Detailed Vendor Ledger Entry table caption. %2 = Unapplied field caption";ENU=%1 %2 field must be true after Unapply entries.';
      ExpectedValueErr@1010 : TextConst '@@@=.;ENU=Expected value %1 must exist.';
      WrongCountErr@1013 : TextConst '@@@=.;ENU=Wrong number of %1.';

    [Test]
    PROCEDURE UnapplyWithPmtDiscCalcOnCrMemosForCustomer@16();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      VATPostingSetup@1002 : Record 325;
      GenJnlLine@1005 : Record 81;
      PmtDocNo@1000 : Code[20];
      OldAdjustforPaymentDiscount@1001 : Boolean;
    BEGIN
      // Create Invoice and Credit Memo with the same amount, apply payments with the same document no., unapply payments and
      // check Unpplied and Remaining Amount on Detailed Customer Ledger Entry.

      Initialize;
      GeneralLedgerSetup.GET;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldAdjustforPaymentDiscount := ModifySetup(VATPostingSetup,TRUE,GeneralLedgerSetup."Unrealized VAT");

      PmtDocNo := PostApplyUnapplyCustPaymentsToInvCrMemoWithPmtDisc;

      VerifyUnappliedDtldCustLedgEntry(PmtDocNo,GenJnlLine."Document Type"::Payment);
      VerifyCustLedgerEntryForRemAmt(GenJnlLine."Document Type"::Payment,PmtDocNo);
      VerifyUnappliedDtldCustLedgEntry(PmtDocNo,GenJnlLine."Document Type"::Refund);
      VerifyCustLedgerEntryForRemAmt(GenJnlLine."Document Type"::Refund,PmtDocNo);

      UpdateVATPostingSetup(VATPostingSetup,OldAdjustforPaymentDiscount);
    END;

    [Test]
    PROCEDURE UnapplyWithPmtDiscCalcOnCrMemosForVendor@48();
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      VATPostingSetup@1003 : Record 325;
      GenJnlLine@1002 : Record 81;
      PmtDocNo@1001 : Code[20];
      OldAdjustforPaymentDiscount@1000 : Boolean;
    BEGIN
      // Create Invoice and Credit Memo with the same amount, apply payments with the same document no., unapply payments and
      // check Unpplied and Remaining Amount on Detailed Customer Ledger Entry.

      Initialize;
      GeneralLedgerSetup.GET;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldAdjustforPaymentDiscount := ModifySetup(VATPostingSetup,TRUE,GeneralLedgerSetup."Unrealized VAT");

      PmtDocNo := PostApplyUnapplyVendPaymentsToInvCrMemoWithPmtDisc;

      VerifyUnappliedDtldVendLedgEntry(PmtDocNo,GenJnlLine."Document Type"::Payment);
      VerifyVendLedgerEntryForRemAmt(GenJnlLine."Document Type"::Payment,PmtDocNo);
      VerifyUnappliedDtldVendLedgEntry(PmtDocNo,GenJnlLine."Document Type"::Refund);
      VerifyVendLedgerEntryForRemAmt(GenJnlLine."Document Type"::Refund,PmtDocNo);

      UpdateVATPostingSetup(VATPostingSetup,OldAdjustforPaymentDiscount);
    END;

    [Test]
    PROCEDURE PaymentTermsCreation@51();
    VAR
      PaymentTerms@1000 : Record 3;
      DueDateCalculation@1001 : DateFormula;
      DiscountPct@1002 : Decimal;
    BEGIN
      // Create Payment Terms and check it's creation.

      // Setup.
      Initialize;

      // Exercise: Create Payment Terms and Set Parameters.
      LibraryERM.CreatePaymentTerms(PaymentTerms);

      // Calculating DueDateCalculation using LibraryRandom.
      EVALUATE(DueDateCalculation,STRSUBSTNO('%1D',LibraryRandom.RandInt(10)));
      DiscountPct := LibraryRandom.RandDec(10,2);
      SetParameters(PaymentTerms,DueDateCalculation,DiscountPct);

      // Verify: Verify Payment Terms.
      VerifyPaymentTerms(PaymentTerms.Code,DueDateCalculation,DiscountPct);
    END;

    [Test]
    PROCEDURE GLAccountDirectPosting@50();
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      // Check whether Direct Posting can be set as TRUE on G/L account.

      // Setup: Create a G/L Account.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);

      // Exercise: Set Direct Posting as True in G/L Account.
      GLAccount.VALIDATE("Direct Posting",TRUE);
      GLAccount.MODIFY(TRUE);

      // Verify: Verify Direct Posting as True in G/L Account.
      GLAccount.GET(GLAccount."No.");
      GLAccount.TESTFIELD("Direct Posting",TRUE);
    END;

    [Test]
    PROCEDURE PaymentDiscountForVendor@39();
    VAR
      VATPostingSetup@1001 : Record 325;
      GeneralLedgerSetup@1000 : Record 98;
      GenJournalLine@1003 : Record 81;
      DetailedVendorLedgEntry@1006 : Record 380;
      DiscountAmountLCY@1004 : Decimal;
      OldAdjustforPaymentDiscount@1002 : Boolean;
    BEGIN
      // Check Payment Discount Amount for Vendor after posting Invoice and Payment entries.

      // Setup: Modify Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      OldAdjustforPaymentDiscount := ModifySetup(VATPostingSetup,TRUE,TRUE);

      // Create and post General Journal Line with Currency with Random values.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,CreateVendorWithApplication,
        -LibraryRandom.RandDec(100,2),CreateCurrency);

      // Exercise: Create and Post Payment with Currency for Vendor and calculate Payment Discount Amount.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",
        -GenJournalLine.Amount,GenJournalLine."Currency Code");
      DiscountAmountLCY := CalculatePaymentDiscountAmount(GenJournalLine,GenJournalLine."Payment Terms Code");

      // Verify: Verify Payment Discount Amount.
      VerifyDetailedVendLedgerEntryAmount(
        GenJournalLine."Document No.",DiscountAmountLCY,DetailedVendorLedgEntry."Entry Type"::"Payment Discount");

      // TearDown: Cleanup the Setups done.
      UpdateVATPostingSetup(VATPostingSetup,OldAdjustforPaymentDiscount);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE ApplyCustEntriesOnCashRcptJnl@67();
    VAR
      Customer@1002 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalTemplate@1005 : Record 80;
      PmtDiscAmount@1003 : Decimal;
    BEGIN
      // Verify Payment Discount Amount on Apply Customer Entries Page.

      // Setup: Create and post General Journal  Line, Create Cash Receipt Journal.
      Initialize;
      Customer.GET(CreateCustomerWithPaymentTerms);

      // Use Random large value for Amount as Payment Term Percent is small, blank value for Currency Code.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Customer,Customer."No.",
        -(100 + LibraryRandom.RandDec(100,2)),'');
      PmtDiscAmount := -(GetPmtTermDisc(Customer."Payment Terms Code") * GenJournalLine.Amount) / 100;
      CreateGeneralJournalDocument(GenJournalLine,GenJournalTemplate.Type::"Cash Receipts");
      LibraryVariableStorage.Enqueue(PmtDiscAmount);  // Enqueue variable for ApplyCustEntryPageHandler.

      // Exercise: Apply Customer Entries with Set Applies to ID.
      SetAppliesToIDToCashRcptJnl(GenJournalLine."Journal Batch Name");

      // Verify: Verification for Payment Discount Amount done on ApplyCustEntryPageHandler.
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE ApplyAndPostCustEntriesOnCashRcptJnl@84();
    VAR
      Customer@1005 : Record 18;
      GenJournalLine@1004 : Record 81;
      GenJournalTemplate@1000 : Record 80;
      Amount@1002 : Decimal;
      PmtDiscAmount@1001 : Decimal;
    BEGIN
      // Verify General Ledger Entry After Posting Cash Receipt Journal.

      // Setup: Create and post General Journal Line, Create Cash Receipt Journal.
      Initialize;
      Customer.GET(CreateCustomerWithPaymentTerms);

      // Use Random large value for Amount as Payment Term Percent is small, blank value for Currency Code.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Customer,Customer."No.",
        -(100 + LibraryRandom.RandDec(100,2)),'');
      Amount := GenJournalLine.Amount;
      PmtDiscAmount := -(GetPmtTermDisc(Customer."Payment Terms Code") * Amount) / 100;
      CreateGeneralJournalDocument(GenJournalLine,GenJournalTemplate.Type::"Cash Receipts");
      LibraryVariableStorage.Enqueue(PmtDiscAmount);  // Enqueue variable for ApplyCustEntryPageHandler.
      SetAppliesToIDToCashRcptJnl(GenJournalLine."Journal Batch Name");
      ModifyGenJnlLine(GenJournalLine);

      // Exercise: Post Cash Receipt Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify General ledger Entries.
      VerifyGLEntries(GenJournalLine,-Amount,0);  // Use value 0 for Credit Amount.
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE ApplyVendEntriesOnPmtJnl@132();
    VAR
      GenJournalLine@1004 : Record 81;
      GenJournalTemplate@1000 : Record 80;
      Vendor@1001 : Record 23;
      PmtDiscAmount@1002 : Decimal;
    BEGIN
      // Verify Payment Discount Amount on Apply Vendor Entries Page.

      // Setup: Create and post General Journal Line, Create Purchase Journal.
      Initialize;
      Vendor.GET(CreateVendorWithPaymentTerms);

      // Use Random large value for Amount as Payment Term Percent is small, blank value for Currency Code.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,Vendor."No.",
        100 + LibraryRandom.RandDec(100,2),'');
      PmtDiscAmount := -(GetPmtTermDisc(Vendor."Payment Terms Code") * GenJournalLine.Amount) / 100;
      CreateGeneralJournalDocument(GenJournalLine,GenJournalTemplate.Type::Purchases);
      LibraryVariableStorage.Enqueue(PmtDiscAmount);  // Enqueue variable for ApplyVendorPageHandler.

      // Exercise: Apply Vendor Entries with Set Applies to ID.
      SetAppliesToIDToPmtJnl(GenJournalLine."Journal Batch Name");

      // Verify: Verification done on ApplyVendorPageHandler.
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE ApplyAndPostVendEntriesOnPmtJnl@136();
    VAR
      GenJournalLine@1004 : Record 81;
      GenJournalTemplate@1000 : Record 80;
      Vendor@1005 : Record 23;
      Amount@1002 : Decimal;
      PmtDiscAmount@1001 : Decimal;
    BEGIN
      // Verify General Ledger Entry after posting Payment Journal.

      // Setup: Create and post General Journal Line, Create Purchase Journal.
      Initialize;
      Vendor.GET(CreateVendorWithPaymentTerms);

      // Use Random large value for Amount as Payment Term Percent is small, blank value for Currency Code.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,Vendor."No.",
        100 + LibraryRandom.RandDec(100,2),'');
      Amount := GenJournalLine.Amount;
      PmtDiscAmount := -(GetPmtTermDisc(Vendor."Payment Terms Code") * Amount) / 100;
      CreateGeneralJournalDocument(GenJournalLine,GenJournalTemplate.Type::Purchases);
      LibraryVariableStorage.Enqueue(PmtDiscAmount);  // Enqueue variable for ApplyVendorPageHandler.
      SetAppliesToIDToPmtJnl(GenJournalLine."Journal Batch Name");
      ModifyGenJnlLine(GenJournalLine);

      // Exercise: Post Purchase Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify General Ledger Entries.
      VerifyGLEntries(GenJournalLine,0,Amount);   // Use value 0 for Debit Amount.
    END;

    [Test]
    PROCEDURE VendorCountyWithCityPostCode@73();
    VAR
      CountryRegion@1001 : Record 9;
      Vendor@1000 : Record 23;
      FormatAddress@1003 : Codeunit 365;
      CountryRegionName@1004 : Text[50];
      AddrArray@1002 : ARRAY [8] OF Text[50];
    BEGIN
      // Verify ExpectedCounty when Vendor CountryRegion Address Format is City+Post Code.

      // Setup: Create Vendor and Update Address format on Vendor Country/Region.
      Initialize;
      CreateVendorWithAddress(Vendor);
      CountryRegionName := UpdateCountryRegion(Vendor."Country/Region Code",CountryRegion."Address Format"::"City+Post Code");

      // Exercise: Get Vendor Address Array Values from Format Address.
      FormatAddress.Vendor(AddrArray,Vendor);

      // Verify: Verify County and PostCodeCity are equal with Vendor Card County Post Code and City in the Array.
      VerifyArrayValuesWithCityPostcode(Vendor,CountryRegionName,AddrArray);
    END;

    [Test]
    PROCEDURE VendorCountyWithBalnkLinePostCodeCity@68();
    VAR
      CountryRegion@1001 : Record 9;
      Vendor@1002 : Record 23;
      FormatAddress@1003 : Codeunit 365;
      AddrArray@1000 : ARRAY [8] OF Text[50];
    BEGIN
      // Verify ExpectedCounty when Vendor CountryRegion Address Format is Blank Line+Post Code+City.

      // Setup: Create Vendor and Update Address format on Vendor Country/Region.
      Initialize;
      CreateVendorWithAddress(Vendor);
      UpdateCountryRegion(Vendor."Country/Region Code",CountryRegion."Address Format"::"Blank Line+Post Code+City");

      // Exercise: Get Vendor Address Array Values from Format Address.
      FormatAddress.Vendor(AddrArray,Vendor);

      // Verify: Verify County and PostCodeCity are equal with Vendor Card County Post Code and City in the array.
      VerifyArrayValuesWithBlankLinePostCodeCity(Vendor,AddrArray);
    END;

    [Test]
    PROCEDURE SalesPmtDiscountDateWhenUseZeroPmtDisc@1();
    VAR
      PaymentTerms@1000 : Record 3;
      SalesHeader@1001 : Record 36;
      ExpectedPmtDiscDate@1002 : Date;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 378178] Payment Discount Date should be calculated according to "Discount Date Calculation" of Payment Terms

      Initialize;
      // [GIVEN] Payment Terms "X" with "Discount %" = 0, "Due Date Calculation" = 10 days, "Pmt. Discount Date Calculation" = 5 days
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,FALSE);
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY(TRUE);

      // [GIVEN] Sales Invoice with "Posting Date" = 01.01
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      ExpectedPmtDiscDate := CALCDATE(PaymentTerms."Discount Date Calculation",SalesHeader."Posting Date");

      // [WHEN] Assign Payment Terms "X" to Sales Invoice
      SalesHeader.VALIDATE("Payment Terms Code",PaymentTerms.Code);

      // [THEN] "Pmt. Discount Date" = 06.01 in Sales Invoice
      SalesHeader.TESTFIELD("Pmt. Discount Date",ExpectedPmtDiscDate);
    END;

    [Test]
    PROCEDURE PurchPmtDiscountDateWhenUseZeroPmtDisc@12();
    VAR
      PaymentTerms@1000 : Record 3;
      PurchHeader@1001 : Record 38;
      ExpectedPmtDiscDate@1002 : Date;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378178] Payment Discount Date should be calculated according to "Discount Date Calculation" of Payment Terms

      Initialize;
      // [GIVEN] Payment Terms "X" with "Discount %" = 0, "Due Date Calculation" = 10 days, "Pmt. Discount Date Calculation" = 5 days
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,FALSE);
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY(TRUE);

      // [GIVEN] Purchase Invoice with "Posting Date" = 01.01
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      ExpectedPmtDiscDate := CALCDATE(PaymentTerms."Discount Date Calculation",PurchHeader."Posting Date");

      // [WHEN] Assign Payment Terms "X" to Purchase Invoice
      PurchHeader.VALIDATE("Payment Terms Code",PaymentTerms.Code);

      // [THEN] "Pmt. Discount Date" = 06.01 in Purchase Invoice
      PurchHeader.TESTFIELD("Pmt. Discount Date",ExpectedPmtDiscDate);
    END;

    [Test]
    PROCEDURE ServPmtDiscountDateWhenUseZeroPmtDisc@36();
    VAR
      PaymentTerms@1000 : Record 3;
      ServHeader@1001 : Record 5900;
      ExpectedPmtDiscDate@1002 : Date;
    BEGIN
      // [FEATURE] [Service]
      // [SCENARIO 378178] Payment Discount Date should be calculated according to "Discount Date Calculation" of Payment Terms

      Initialize;
      // [GIVEN] Payment Terms "X" with "Discount %" = 0, "Due Date Calculation" = 10 days, "Pmt. Discount Date Calculation" = 5 days
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,FALSE);
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY(TRUE);

      // [GIVEN] Service Invoice with "Posting Date" = 01.01
      LibraryService.CreateServiceHeader(ServHeader,ServHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo);
      ExpectedPmtDiscDate := CALCDATE(PaymentTerms."Discount Date Calculation",ServHeader."Posting Date");

      // [WHEN] Assign Payment Terms "X" to Service Invoice
      ServHeader.VALIDATE("Payment Terms Code",PaymentTerms.Code);

      // [THEN] "Pmt. Discount Date" = 06.01 in Service Invoice
      ServHeader.TESTFIELD("Pmt. Discount Date",ExpectedPmtDiscDate);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryPurchase.SetInvoiceRounding(FALSE);
      LibrarySales.SetInvoiceRounding(FALSE);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInVendorPostingGroups;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateVATPostingSetup;

      FindUpdateVATPostingSetupVATPct(GetW1VATPct);
      FindUpdateGeneralPostingSetupAccounts;

      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@11(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentNo2@1001 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,CustLedgerEntry2."Document Type"::Invoice,DocumentNo2);
      CustLedgerEntry2.CALCFIELDS("Remaining Amount");
      CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
      CustLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyAndPostVendorEntry@20(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentNo2@1001 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,VendorLedgerEntry2."Document Type"::Invoice,DocumentNo2);
      VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
      VendorLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE CalculatePaymentDiscountAmount@43(GenJournalLine@1000 : Record 81;PaymentTermsCode@1004 : Code[10]) : Decimal;
    VAR
      PaymentTerms@1003 : Record 3;
    BEGIN
      PaymentTerms.GET(PaymentTermsCode);
      EXIT(
        LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',GenJournalLine."Posting Date") *
        PaymentTerms."Discount %" / 100);
    END;

    LOCAL PROCEDURE PostApplyUnapplyCustPaymentsToInvCrMemoWithPmtDisc@44() PmtDocNo : Code[20];
    VAR
      GenJnlLine@1005 : Record 81;
      CustomerNo@1006 : Code[20];
      InvNo@1002 : Code[20];
      CrMemoNo@1004 : Code[20];
      Amount@1001 : Decimal;
    BEGIN
      CustomerNo := CreateCustomerWithPaymentTerms;
      Amount := LibraryRandom.RandDec(100,2);

      CreatePostPairedInvoiceAndCrMemo(GenJnlLine."Account Type"::Customer,CustomerNo,Amount,InvNo,CrMemoNo);

      PreparePaymentLine(GenJnlLine,GenJnlLine."Account Type"::Customer,CustomerNo);
      CreatePmtLineAppliedToDoc(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Invoice,InvNo,-Amount);
      CreatePmtLineAppliedToDoc(
        GenJnlLine,GenJnlLine."Document Type"::Refund,GenJnlLine."Document Type"::"Credit Memo",CrMemoNo,Amount);

      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      PmtDocNo := GenJnlLine."Document No.";
      UnapplyCustLedgerEntry(GenJnlLine."Document Type"::Payment,PmtDocNo);
      UnapplyCustLedgerEntry(GenJnlLine."Document Type"::Refund,PmtDocNo);
    END;

    LOCAL PROCEDURE PostApplyUnapplyVendPaymentsToInvCrMemoWithPmtDisc@49() PmtDocNo : Code[20];
    VAR
      GenJnlLine@1003 : Record 81;
      VendorNo@1005 : Code[20];
      InvNo@1002 : Code[20];
      CrMemoNo@1001 : Code[20];
      Amount@1000 : Decimal;
    BEGIN
      VendorNo := CreateVendorWithPaymentTerms;
      Amount := LibraryRandom.RandDec(100,2);

      CreatePostPairedInvoiceAndCrMemo(GenJnlLine."Account Type"::Vendor,VendorNo,-Amount,InvNo,CrMemoNo);

      PreparePaymentLine(GenJnlLine,GenJnlLine."Account Type"::Vendor,VendorNo);
      CreatePmtLineAppliedToDoc(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Invoice,InvNo,Amount);
      CreatePmtLineAppliedToDoc(
        GenJnlLine,GenJnlLine."Document Type"::Refund,GenJnlLine."Document Type"::"Credit Memo",CrMemoNo,-Amount);

      PostGenJnlLineFromBatch(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      PmtDocNo := GenJnlLine."Document No.";
      UnapplyVendLedgerEntry(GenJnlLine."Document Type"::Payment,PmtDocNo);
      UnapplyVendLedgerEntry(GenJnlLine."Document Type"::Refund,PmtDocNo);
    END;

    LOCAL PROCEDURE CreateVendorWithAddress@76(VAR Vendor@1000 : Record 23);
    VAR
      PostCode@1003 : Record 225;
      CountryRegion@1001 : Record 9;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Country/Region Code",CountryRegion.Code);
      Vendor.VALIDATE("Post Code",PostCode.Code);
      Vendor.VALIDATE(County,LibraryUtility.GenerateGUID);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@7(VAR SalesHeader@1001 : Record 36;CustomerNo@1000 : Code[20];CurrencyCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
      CreateSalesInvoiceLine(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceLine@6(SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1000 : Record 37;
      Counter@1003 : Integer;
    BEGIN
      // Create Random Sales Invoice Line more than 1 with Random Quantity and unit Price in Decimal.
      FOR Counter := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::"G/L Account",
          LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandIntInRange(2,10));
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,2000,2));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceCurrency@28(VAR PurchaseHeader@1003 : Record 38;VendorNo@1001 : Code[20];CurrencyCode@1000 : Code[10]);
    VAR
      LibraryPurchase@1002 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseInvoiceLine(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceLine@27(PurchaseHeader@1002 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
      Counter@1003 : Integer;
    BEGIN
      // Create Random Purchase Invoice Line more than 1 with Random Quantity and Direct Unit cost in Decimal.
      FOR Counter := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
          LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandIntInRange(2,10));
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PreparePaymentLine@57(VAR PmtGenJnlLine@1000 : Record 81;AccountType@1001 : Option;CVNo@1002 : Code[20]);
    VAR
      GenJournalBatch@1003 : Record 232;
    BEGIN
      WITH PmtGenJnlLine DO BEGIN
        CreateGeneralJournalBatch(GenJournalBatch);
        INIT;
        "Journal Template Name" := GenJournalBatch."Journal Template Name";
        "Journal Batch Name" := GenJournalBatch.Name;
        "Document Type" := "Document Type"::Payment;
        "Document No." :=
          COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"),1,MAXSTRLEN("Document No."));
        "Account Type" := AccountType;
        "Account No." := CVNo;
      END;
    END;

    LOCAL PROCEDURE CreatePmtLineAppliedToDoc@59(PmtGenJnlLine@1000 : Record 81;DocType@1005 : Option;AppliesToDocType@1001 : Option;AppliesToDocNo@1002 : Code[20];PmtAmount@1003 : Decimal);
    VAR
      BankAccount@1006 : Record 270;
    BEGIN
      LibraryERM.FindBankAccount(BankAccount);
      CreatePmtLine(
        PmtGenJnlLine,DocType,PmtGenJnlLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",AppliesToDocType,AppliesToDocNo,PmtAmount);
    END;

    LOCAL PROCEDURE CreatePmtLine@86(PmtGenJnlLine@1000 : Record 81;DocType@1005 : Option;BalAccountType@1006 : Option;BalAccountNo@1007 : Code[20];AppliesToDocType@1001 : Option;AppliesToDocNo@1002 : Code[20];PmtAmount@1003 : Decimal);
    VAR
      GenJnlLine@1004 : Record 81;
    BEGIN
      WITH GenJnlLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,PmtGenJnlLine."Journal Template Name",PmtGenJnlLine."Journal Batch Name",DocType,
          PmtGenJnlLine."Account Type",PmtGenJnlLine."Account No.",PmtAmount);
        VALIDATE("Bal. Account Type",BalAccountType);
        VALIDATE("Bal. Account No.",BalAccountNo);
        VALIDATE("Document No.",PmtGenJnlLine."Document No.");
        VALIDATE("Applies-to Doc. Type",AppliesToDocType);
        VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePostGeneralJournalLine@17(VAR GenJournalLine@1001 : Record 81;DocumentType@1005 : Option;AccountType@1002 : Option;AccountNo@1003 : Code[20];Amount@1006 : Decimal;CurrencyCode@1004 : Code[10]);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostPairedInvoiceAndCrMemo@56(AccountType@1000 : Option;CVNo@1001 : Code[20];Amount@1002 : Decimal;VAR InvNo@1003 : Code[20];VAR CrMemoNo@1004 : Code[20]);
    VAR
      GenJournalBatch@1006 : Record 232;
      GenJnlLine@1005 : Record 81;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      InvNo := CreateGenJnlLineWithBalAcc(GenJournalBatch,GenJnlLine."Document Type"::Invoice,AccountType,CVNo,Amount);
      CrMemoNo := CreateGenJnlLineWithBalAcc(GenJournalBatch,GenJnlLine."Document Type"::"Credit Memo",AccountType,CVNo,-Amount);
      PostGenJnlLineFromBatch(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithBalAcc@66(GenJournalBatch@1001 : Record 232;DocumentType@1002 : Option;AccountType@1003 : Option;CVNo@1004 : Code[20];Amount@1005 : Decimal) : Code[20];
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJnlLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,CVNo,
        Amount);
      FillBalAccountData(GenJnlLine);
      EXIT(GenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE FillBalAccountData@54(VAR GenJnlLine@1000 : Record 81);
    VAR
      GeneralPostingSetup@1003 : Record 252;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);

      WITH GenJnlLine DO BEGIN
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Bal. Gen. Posting Type",GetGenPostingType("Account Type"));
        VALIDATE("Bal. Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("Bal. Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
        VALIDATE("Bal. VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
        VALIDATE("Bal. VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetGenPostingType@60(AccountType@1000 : Option) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      WITH GenJnlLine DO
        CASE AccountType OF
          "Account Type"::Customer:
            EXIT("Bal. Gen. Posting Type"::Sale);
          "Account Type"::Vendor:
            EXIT("Bal. Gen. Posting Type"::Purchase);
        END;
    END;

    LOCAL PROCEDURE PostGenJnlLineFromBatch@61(JnlTemplName@1000 : Code[10];JnlBatchName@1001 : Code[10]);
    VAR
      GenJnlLine@1002 : Record 81;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := JnlTemplName;
      GenJnlLine."Journal Batch Name" := JnlBatchName;
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE CreatePaymentTermsWithDiscountAndCalcPmtDiscOnCrMemos@42() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      // Take Random Values for Payment Terms.
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE CreateCurrency@25() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("EMU Currency",TRUE);
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@13() : Code[20];
    VAR
      Customer@1001 : Record 18;
      GeneralPostingSetup@1000 : Record 252;
      PaymentTerms@1002 : Record 3;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerms@45() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",CreatePaymentTermsWithDiscountAndCalcPmtDiscOnCrMemos);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@29() : Code[20];
    VAR
      GeneralPostingSetup@1000 : Record 252;
      VATPostingSetup@1003 : Record 325;
      Vendor@1001 : Record 23;
      PaymentTerms@1002 : Record 3;
    BEGIN
      FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@58() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",CreatePaymentTermsWithDiscountAndCalcPmtDiscOnCrMemos);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithApplication@47() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      Vendor.GET(CreateVendor);
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::"Apply to Oldest");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@63(VAR GenJournalBatch@1000 : Record 232) : Code[10];
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      EXIT(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalDocument@62(VAR GenJournalLine@1003 : Record 81;Type@1001 : Option);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,FindTemplateName(Type));
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type",GenJournalLine."Account No.",0);
    END;

    LOCAL PROCEDURE CreatePostApplyCustGenJournalLine@34(VAR PmtDiscAmount@1001 : Decimal;AccountNo@1003 : Code[20];PostedDocumentNo@1000 : Code[20];CurrencyCode@1005 : Code[10]) : Code[20];
    VAR
      GenJournalLine@1002 : Record 81;
      Amount@1004 : Decimal;
    BEGIN
      Amount := GetSalesInvoiceHeaderAmt(PmtDiscAmount,PostedDocumentNo);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,AccountNo,-Amount,CurrencyCode);
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.",GenJournalLine.Amount,PostedDocumentNo);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreatePostApplyVendGenJournalLine@100(VAR PmtDiscAmount@1001 : Decimal;AccountNo@1003 : Code[20];PostedDocumentNo@1000 : Code[20];CurrencyCode@1005 : Code[10]) : Code[20];
    VAR
      GenJournalLine@1002 : Record 81;
      Amount@1004 : Decimal;
    BEGIN
      Amount := GetPurchaseInvoiceHeaderAmt(PmtDiscAmount,PostedDocumentNo);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,AccountNo,Amount,CurrencyCode);
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",GenJournalLine.Amount,PostedDocumentNo);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreatePostTwoPaymentsWithoutBalAcc@102(GenJournalLine@1000 : Record 81;InvoiceDocNo@1001 : ARRAY [2] OF Code[20];PaymentAmt@1002 : ARRAY [2] OF Decimal);
    VAR
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO
        CreatePmtLine(
          GenJournalLine,GenJournalLine."Document Type"::Payment,0,'',
          GenJournalLine."Applies-to Doc. Type"::Invoice,InvoiceDocNo[i],PaymentAmt[i]);
      GenJournalLine."Account Type" := GenJournalLine."Account Type"::"G/L Account";
      GenJournalLine."Account No." := LibraryERM.CreateGLAccountNo;
      CreatePmtLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,0,'',0,'',-(PaymentAmt[1] + PaymentAmt[2]));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@33(CustomerNo@1000 : Code[20];CurrencyCode@1013 : Code[10]) : Code[20];
    VAR
      SalesHeader@1010 : Record 36;
    BEGIN
      CreateSalesInvoice(SalesHeader,CustomerNo,CurrencyCode);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePostTwoSalesInvoices@97(CustomerNo@1004 : Code[20];VAR InvoiceDocNo@1001 : ARRAY [2] OF Code[20];VAR PaymentAmt@1002 : ARRAY [2] OF Decimal);
    VAR
      DiscountAmt@1000 : ARRAY [2] OF Decimal;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO BEGIN
        InvoiceDocNo[i] := CreateAndPostSalesInvoice(CustomerNo,'');
        PaymentAmt[i] := -GetSalesInvoiceHeaderAmt(DiscountAmt[i],InvoiceDocNo[i]);
      END;
    END;

    LOCAL PROCEDURE CreatePostTwoPurchInvoices@93(VendorNo@1004 : Code[20];VAR InvoiceDocNo@1001 : ARRAY [2] OF Code[20];VAR PaymentAmt@1002 : ARRAY [2] OF Decimal);
    VAR
      DiscountAmt@1000 : ARRAY [2] OF Decimal;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO BEGIN
        InvoiceDocNo[i] := CreateAndPostPurchaseInvoice(VendorNo,'');
        PaymentAmt[i] := GetPurchaseInvoiceHeaderAmt(DiscountAmt[i],InvoiceDocNo[i]);
      END;
    END;

    LOCAL PROCEDURE CreateExchangeRate@40(CurrencyCode@1000 : Code[10]);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Use Random Number Generator for Exchange Rate.
      FindCurrencyExchangeRate(CurrencyExchangeRate,CurrencyCode);
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,WORKDATE);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandInt(100));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostDocument@41(VAR DocumentNo@1002 : Code[20];CurrencyCode@1013 : Code[10]) PmtDiscAmount : Decimal;
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      PostedDocumentNo@1003 : Code[20];
      SelltoCustomerNo@1007 : Code[20];
    BEGIN
      SelltoCustomerNo := CreateCustomer;
      PostedDocumentNo := CreateAndPostSalesInvoice(SelltoCustomerNo,CurrencyCode);
      CreateExchangeRate(CurrencyCode);
      FindCurrencyExchangeRate(CurrencyExchangeRate,CurrencyCode);
      LibraryERM.RunAdjustExchangeRatesSimple(CurrencyCode,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Starting Date");
      DocumentNo := CreatePostApplyCustGenJournalLine(PmtDiscAmount,SelltoCustomerNo,PostedDocumentNo,CreateCurrency);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@24(VendorNo@1000 : Code[20];CurrencyCode@1003 : Code[10]) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseInvoiceCurrency(PurchaseHeader,VendorNo,CurrencyCode);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE UnapplyCustLedgerEntry@74(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyCustomerLedgerEntry(CustLedgerEntry);
    END;

    LOCAL PROCEDURE UnapplyVendLedgerEntry@55(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      VendLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyVendorLedgerEntry(VendLedgerEntry);
    END;

    LOCAL PROCEDURE UpdateCountryRegion@89(CountryRegionCode@1001 : Code[10];AddressFormat@1002 : Option) : Text[50];
    VAR
      CountryRegion@1000 : Record 9;
    BEGIN
      CountryRegion.GET(CountryRegionCode);
      CountryRegion.VALIDATE("Address Format",AddressFormat);
      CountryRegion.MODIFY(TRUE);
      EXIT(CountryRegion.Name);
    END;

    LOCAL PROCEDURE FindTemplateName@85(Type@1000 : Option) : Code[10];
    VAR
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,Type);
      GenJournalTemplate.FINDFIRST;
      EXIT(GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE FindVATAmount@19(VATPostingSetup@1000 : Record 325;Amount@1002 : Decimal) VATAmount : Decimal;
    BEGIN
      VATAmount := ROUND(Amount * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"));
    END;

    LOCAL PROCEDURE FindCurrencyExchangeRate@35(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10]);
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGeneralPostingSetup@14(VAR GeneralPostingSetup@1000 : Record 252);
    BEGIN
      GeneralPostingSetup.SETFILTER("Sales Pmt. Disc. Credit Acc.",'<>%1','');
      GeneralPostingSetup.SETFILTER("Sales Pmt. Disc. Debit Acc.",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purch. Pmt. Disc. Credit Acc.",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purch. Pmt. Disc. Debit Acc.",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
    END;

    LOCAL PROCEDURE FindVATPostingSetup@46(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Adjust for Payment Discount",TRUE);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindDetailedCustLedgerEntry@81(VAR DetailedCustLedgEntry@1000 : Record 379;DocumentNo@1001 : Code[20];DocumentType@1002 : Option;EntryType@1003 : Option);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindDetailedVendLedgerEntry@72(VAR DetailedVendLedgEntry@1000 : Record 380;DocumentNo@1001 : Code[20];DocumentType@1002 : Option;EntryType@1003 : Option);
    BEGIN
      DetailedVendLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedVendLedgEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindUpdateGeneralPostingSetupAccounts@21();
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      // Using assignment to avoid error in ES.
      WITH GeneralPostingSetup DO BEGIN
        IF "Sales Pmt. Disc. Credit Acc." = '' THEN
          "Sales Pmt. Disc. Credit Acc." := LibraryERM.CreateGLAccountNo;
        IF "Sales Pmt. Disc. Debit Acc." = '' THEN
          "Sales Pmt. Disc. Debit Acc." := LibraryERM.CreateGLAccountNo;
        IF "Purch. Pmt. Disc. Credit Acc." = '' THEN
          "Purch. Pmt. Disc. Credit Acc." := LibraryERM.CreateGLAccountNo;
        IF "Purch. Pmt. Disc. Debit Acc." = '' THEN
          "Purch. Pmt. Disc. Debit Acc." := LibraryERM.CreateGLAccountNo;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindUpdateVATPostingSetupVATPct@87(NewVATPct@1001 : Decimal);
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.UpdateVATPostingSetup(VATPostingSetup,NewVATPct);
    END;

    LOCAL PROCEDURE GetSalesInvoiceHeaderAmt@10(VAR DiscountAmount@1002 : Decimal;SalesInvoiceNo@1000 : Code[20]) Amount : Decimal;
    VAR
      SalesInvoiceHeader@1004 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET(SalesInvoiceNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      DiscountAmount := ROUND(SalesInvoiceHeader."Amount Including VAT" * SalesInvoiceHeader."Payment Discount %" / 100);
      Amount := SalesInvoiceHeader."Amount Including VAT" - DiscountAmount;
    END;

    LOCAL PROCEDURE GetPmtTermDisc@77(Code@1001 : Code[10]) : Decimal;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.GET(Code);
      EXIT(PaymentTerms."Discount %")
    END;

    LOCAL PROCEDURE GetPurchaseInvoiceHeaderAmt@18(VAR DiscountAmount@1002 : Decimal;PurchaseInvoiceNo@1001 : Code[20]) Amount : Decimal;
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      PurchInvHeader.GET(PurchaseInvoiceNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      DiscountAmount := ROUND(PurchInvHeader."Amount Including VAT" * PurchInvHeader."Payment Discount %" / 100);
      Amount := PurchInvHeader."Amount Including VAT" - DiscountAmount;
    END;

    LOCAL PROCEDURE GetCurrencyExchRateAmount@31(Amount@1000 : Decimal;CurrencyCode@1002 : Code[10]) : Decimal;
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      Amount := LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE);
      FindCurrencyExchangeRate(CurrencyExchangeRate,CurrencyCode);
      Amount := LibraryERM.ConvertCurrency(Amount,CurrencyExchangeRate."Relational Currency Code",'',WORKDATE);
      EXIT(Amount);
    END;

    LOCAL PROCEDURE GetW1VATPct@94() : Decimal;
    BEGIN
      EXIT(25);
    END;

    LOCAL PROCEDURE ModifyGenJnlLine@98(VAR GenJournalLine@1000 : Record 81);
    VAR
      Amount@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Amount);  // Dequeue value from ApplyVendorPageHandler.
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyExchangeRate@30(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      FindCurrencyExchangeRate(CurrencyExchangeRate,CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Relational Currency Code",CreateCurrency);
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifySetup@38(VAR VATPostingSetup@1000 : Record 325;AdjustforPaymentDisc@1003 : Boolean;UnrealizedVAT@1001 : Boolean) OldAdjustforPaymentDiscount : Boolean;
    BEGIN
      ModifyGeneralLedgerSetup(AdjustforPaymentDisc,UnrealizedVAT);
      OldAdjustforPaymentDiscount := UpdateVATPostingSetup(VATPostingSetup,TRUE);
    END;

    LOCAL PROCEDURE ModifyGeneralLedgerSetup@2(AdjustForPaymentDisc@1001 : Boolean;UnrealizedVAT@1000 : Boolean);
    BEGIN
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(AdjustForPaymentDisc);
      LibraryERM.SetUnrealizedVAT(UnrealizedVAT);
    END;

    LOCAL PROCEDURE ModifyVATPostingSetupUnrealizedType@83(VAR VATPostingSetup@1001 : Record 325;NewUnrealizedVATType@1000 : Option) OldUnrealizedVATType : Integer;
    BEGIN
      WITH VATPostingSetup DO BEGIN
        OldUnrealizedVATType := "Unrealized VAT Type";
        VALIDATE("Unrealized VAT Type",NewUnrealizedVATType);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SalesInvoiceWithPaymentDisc@37(VAR DocumentNo@1002 : Code[20];CurrencyCode@1013 : Code[10]) PmtDiscAmount : Decimal;
    VAR
      PostedDocumentNo@1003 : Code[20];
      SelltoCustomerNo@1000 : Code[20];
    BEGIN
      // Setup: Create Sales Invoice and Post it.
      SelltoCustomerNo := CreateCustomer;
      PostedDocumentNo := CreateAndPostSalesInvoice(SelltoCustomerNo,CurrencyCode);

      // Exercise: Make a Payment entry from General Journal Line, Apply Payment on Invoice from Customer Ledger Entries.
      DocumentNo := CreatePostApplyCustGenJournalLine(PmtDiscAmount,SelltoCustomerNo,PostedDocumentNo,CurrencyCode);
    END;

    LOCAL PROCEDURE SetParameters@52(PaymentTerms@1000 : Record 3;DueDateCalculation@1003 : DateFormula;DiscountPct@1004 : Decimal);
    BEGIN
      // Setting Parameters, Due Date Calculation and Discount %.
      PaymentTerms.VALIDATE("Due Date Calculation",DueDateCalculation);
      PaymentTerms.VALIDATE("Discount %",DiscountPct);
      PaymentTerms.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetAppliesToIDToCashRcptJnl@88(JournalBatchName@1001 : Code[10]);
    VAR
      CashReceiptJournal@1000 : TestPage 255;
    BEGIN
      COMMIT;  // Commit is require for opening Cash Receipt Journal Page.
      CashReceiptJournal.OPENEDIT;
      CashReceiptJournal.CurrentJnlBatchName.SETVALUE := JournalBatchName;
      CashReceiptJournal.FILTER.SETFILTER("Document Type",JournalBatchName);
      CashReceiptJournal."Codeunit Gen. Jnl.-Apply".INVOKE;
    END;

    LOCAL PROCEDURE SetAppliesToIDToPmtJnl@95(JournalBatchName@1001 : Code[10]);
    VAR
      PurchaseJournal@1002 : TestPage 254;
    BEGIN
      COMMIT;  // Commit is require for opening Cash Receipt Journal Page.
      PurchaseJournal.OPENEDIT;
      PurchaseJournal.CurrentJnlBatchName.SETVALUE := JournalBatchName;
      PurchaseJournal.FILTER.SETFILTER("Document Type",JournalBatchName);
      PurchaseJournal."Codeunit Gen. Jnl.-Apply".INVOKE;
    END;

    LOCAL PROCEDURE UpdateVATPostingSetup@5(VAR VATPostingSetup@1000 : Record 325;AdjustforPaymentDiscount@1001 : Boolean) OldAdjustforPaymentDiscount : Boolean;
    BEGIN
      OldAdjustforPaymentDiscount := VATPostingSetup."Adjust for Payment Discount";
      VATPostingSetup.VALIDATE("Adjust for Payment Discount",AdjustforPaymentDiscount);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPmtDiscDetailedCustLedgEntries@32(DocumentNo@1001 : Code[20];PmtDiscAmount@1004 : Decimal;PmtDiscAmountVAT@1002 : Decimal);
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      VerifyDetailedCustLedgerEntryAmount(
        DocumentNo,PmtDiscAmount - PmtDiscAmountVAT,DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)");
      VerifyDetailedCustLedgerEntryAmount(
        DocumentNo,PmtDiscAmountVAT,DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)");
    END;

    LOCAL PROCEDURE VerifyPmtDiscDetailedVendLedgEntries@64(DocumentNo@1001 : Code[20];PmtDiscAmount@1004 : Decimal;PmtDiscAmountVAT@1002 : Decimal);
    VAR
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      VerifyDetailedVendLedgerEntryAmount(
        DocumentNo,PmtDiscAmount - PmtDiscAmountVAT,DetailedVendLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)");
      VerifyDetailedVendLedgerEntryAmount(
        DocumentNo,PmtDiscAmountVAT,DetailedVendLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)");
    END;

    LOCAL PROCEDURE VerifyDetailedCustLedgerEntryAmount@3(DocumentNo@1001 : Code[20];AmountLCY@1004 : Decimal;EntryType@1005 : Option);
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      WITH DetailedCustLedgEntry DO BEGIN
        SETRANGE("Entry Type",EntryType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          AmountLCY,"Amount (LCY)",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(AmountLCYErr,FIELDCAPTION("Entry No."),AmountLCY,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyDetailedVendLedgerEntryAmount@22(DocumentNo@1001 : Code[20];AmountLCY@1004 : Decimal;EntryType@1005 : Option);
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
    BEGIN
      WITH DetailedVendorLedgEntry DO BEGIN
        SETRANGE("Entry Type",EntryType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          AmountLCY,"Amount (LCY)",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(AmountLCYErr,FIELDCAPTION("Entry No."),AmountLCY,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntries@119(GenJournalLine@1001 : Record 81;DebitAmount@1002 : Decimal;CreditAmount@1003 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Bal. Account Type",GenJournalLine."Account Type");
      GLEntry.SETRANGE("Bal. Account No.",GenJournalLine."Account No.");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        DebitAmount,GLEntry."Debit Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountLCYErr,GLEntry.FIELDCAPTION("Debit Amount"),GLEntry."Debit Amount",GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        CreditAmount,GLEntry."Credit Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountLCYErr,GLEntry.FIELDCAPTION("Credit Amount"),GLEntry."Credit Amount",GLEntry.TABLECAPTION))
    END;

    LOCAL PROCEDURE VerifyUnappliedDtldCustLedgEntry@80(DocumentNo@1002 : Code[20];DocumentType@1003 : Option);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      FindDetailedCustLedgerEntry(DetailedCustLedgEntry,DocumentNo,DocumentType,DetailedCustLedgEntry."Entry Type"::Application);
      REPEAT
        Assert.IsTrue(
          DetailedCustLedgEntry.Unapplied,
          STRSUBSTNO(UnappliedErr,DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION(Unapplied)));
      UNTIL DetailedCustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCustLedgerEntryForRemAmt@79(DocumentType@1001 : Option;DocumentNo@1003 : Code[20]);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      REPEAT
        CustLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
        CustLedgerEntry.TESTFIELD("Remaining Amount",CustLedgerEntry.Amount);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPaymentTerms@53(PaymentTermsCode@1000 : Code[10];DueDateCalculation@1002 : DateFormula;DiscountPct@1003 : Decimal);
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      PaymentTerms.GET(PaymentTermsCode);
      PaymentTerms.TESTFIELD("Due Date Calculation",DueDateCalculation);
      PaymentTerms.TESTFIELD("Discount %",DiscountPct);
    END;

    LOCAL PROCEDURE VerifyUnappliedDtldVendLedgEntry@71(DocumentNo@1002 : Code[20];DocumentType@1003 : Option);
    VAR
      DetailedVendLedgEntry@1001 : Record 380;
    BEGIN
      FindDetailedVendLedgerEntry(DetailedVendLedgEntry,DocumentNo,DocumentType,DetailedVendLedgEntry."Entry Type"::Application);
      REPEAT
        Assert.IsTrue(
          DetailedVendLedgEntry.Unapplied,STRSUBSTNO(UnappliedErr,DetailedVendLedgEntry.TABLECAPTION,DetailedVendLedgEntry.Unapplied));
      UNTIL DetailedVendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVendLedgerEntryForRemAmt@70(DocumentType@1001 : Option;DocumentNo@1003 : Code[20]);
    VAR
      VendLedgerEntry@1002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,DocumentType,DocumentNo);
      REPEAT
        VendLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
        VendLedgerEntry.TESTFIELD("Remaining Amount",VendLedgerEntry.Amount);
      UNTIL VendLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyArrayValuesWithCityPostcode@65(Vendor@1001 : Record 23;CountryRegionName@1000 : Text[50];AddrArray@1003 : ARRAY [8] OF Text[50]);
    BEGIN
      Assert.AreEqual(AddrArray[1],Vendor."No.",STRSUBSTNO(ExpectedValueErr,Vendor."No."));
      Assert.AreEqual(AddrArray[2],STRSUBSTNO('%1, %2',Vendor.City,Vendor."Post Code"),STRSUBSTNO(ExpectedValueErr,Vendor.City));
      Assert.AreEqual(AddrArray[3],Vendor.County,STRSUBSTNO(ExpectedValueErr,Vendor.County));
      Assert.AreEqual(AddrArray[4],CountryRegionName,STRSUBSTNO(ExpectedValueErr,CountryRegionName));
    END;

    LOCAL PROCEDURE VerifyArrayValuesWithBlankLinePostCodeCity@69(Vendor@1002 : Record 23;AddrArray@1000 : ARRAY [8] OF Text[50]);
    BEGIN
      Assert.AreEqual(AddrArray[1],Vendor."No.",STRSUBSTNO(ExpectedValueErr,Vendor."No."));
      Assert.AreEqual(AddrArray[2],'',STRSUBSTNO(ExpectedValueErr,Vendor.City));
      Assert.AreEqual(AddrArray[3],STRSUBSTNO('%1 %2',Vendor."Post Code",Vendor.City),STRSUBSTNO(ExpectedValueErr,Vendor.City));
      Assert.AreEqual(AddrArray[4],Vendor.County,STRSUBSTNO(ExpectedValueErr,Vendor.County));
    END;

    LOCAL PROCEDURE VerifyGLEntryGenPostingType@107(DocumentNo@1001 : Code[20];GLAccountNo@1003 : Code[20];IsPositiveAmount@1002 : Boolean;ExpectedGenPostingType@1004 : Option);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      WITH DummyGLEntry DO BEGIN
        INIT;
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        IF IsPositiveAmount THEN
          SETFILTER(Amount,'>%1',0)
        ELSE
          SETFILTER(Amount,'<%1',0);
        SETRANGE("Gen. Posting Type",ExpectedGenPostingType);
        Assert.RecordIsNotEmpty(DummyGLEntry);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntryPageHandler@92(VAR ApplyCustomerEntries@1000 : TestPage 232);
    VAR
      PmtDiscAmount@1001 : Variant;
    BEGIN
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      LibraryVariableStorage.Dequeue(PmtDiscAmount);  // Dequeue variable.
      ApplyCustomerEntries.PmtDiscAmount.ASSERTEQUALS(PmtDiscAmount);  // Verify Payment Discount Amount.
      LibraryVariableStorage.Enqueue(ApplyCustomerEntries.AppliedAmount.ASDECIMAL);  // Enqueue Applied Amount.
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorPageHandler@134(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      PmtDiscAmount@1001 : Variant;
    BEGIN
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      LibraryVariableStorage.Dequeue(PmtDiscAmount);  // Dequeue variable.
      ApplyVendorEntries.PmtDiscAmount.ASSERTEQUALS(PmtDiscAmount);  // Verify Payment Discount Amount.
      LibraryVariableStorage.Enqueue(ApplyVendorEntries.AppliedAmount.ASDECIMAL);  // Enqueue Applied Amount.
    END;

    BEGIN
    {
      // [FEATURE] [Payment Discount] [Detailed Ledger Entry]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      DE: Unable to Execute
      SE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50700)

      Test Sales Invoice and Purchase Invoice for Payment Discount.
        1. Create Sales Invoice without Currency and Apply Payment from General Journal Line and Check Detailed Customer Ledger Entry.
        2. Create Sales Invoice with Currency and Apply Payment from General Journal Line and Check Detailed Customer Ledger Entry.
        3. Create Purchase Invoice and Apply Payment from General Journal Line and Check Detailed Vendor Ledger Entry.
        4. Create Sales Invoice with Currency, run Adjust Exchange Rate Batch Job, Apply Payment from General Journal Line, Unapply
           Payment and Check Detailed Customer Ledger Entry.
        5. Create Purchase Invoice with Currency, run Adjust Exchange Rate Batch Job, Apply Payment from General Journal Line, Unapply
           Payment and Check Detailed Vendor Ledger Entry.
        6. Create Payment Terms and check it's creation.
        7. Check whether Direct Posting can be set as TRUE on G/L account.
        8. Check Payment Discount Amount for Vendor after posting Invoice and Payment entries.
        9. Verify Payment Discount Amount on Apply Customer Entries Page.
       10. Verify General Ledger Entry After Posting Cash receipt Journal.
       11. Verify Payment Discount Amount on Apply Vendor Entries Page.
       12. Verify General Ledger Entry After Posting Payment Journal.
       13. Verify ExpectedCounty when Vendor CountryRegion Address Format is City + Post Code.
       14. Verify ExpectedCounty when Vendor CountryRegion Address Format is BalnkLinePostCodeCity.

        Covers Test Cases:
        ------------------------------------------------------------------
        Test Function Name                        TFS ID
        ------------------------------------------------------------------
        SalePaymentDiscWithOutCurrency    125023 to 125026
        SalePaymentDiscWithCurrency       125031 to 125033, 127760, 127762
        PurchasePaymentDisc               125027 to 125030

        Covers Test Cases: 237584
        ------------------------------------------------------------------
        Test Function Name                        TFS ID
        ------------------------------------------------------------------
        UnapplyWithPmtDiscForCustomer      123347, 125348

        Covers Test Cases: 237585
        ------------------------------------------------------------------
        Test Function Name                        TFS ID
        ------------------------------------------------------------------
        UnapplyWithPmtDiscForVendor       126663, 126664

        Covers Test Cases: 242336
        ------------------------------------------------------------------
        Test Function Name                        TFS ID
        ------------------------------------------------------------------
        PaymentTermsCreation              121699
        GLAccountDirectPosting            121713

        Covers Test cases: 245818
        ------------------------------------------------------------------
        Test Function Name                        TFS ID
        ------------------------------------------------------------------
        PaymentDiscountForVendor                  126235

        SE Merge Test Cases
        ------------------------------------------------------------------
        Test Function Name                                      TFS ID
        ------------------------------------------------------------------
        UnapplyWithPmtDiscCalcOnCrMemosForCustomer,
        UnapplyWithPmtDiscCalcOnCrMemosForVendor                297177

        TFS_TS_ID = 320046
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        ApplyCustEntriesOnCashRcptJnl, ApplyAndPostCustEntriesOnCashRcptJnl
        ApplyVendEntriesOnPmtJnl, ApplyAndPostVendEntriesOnPmtJnl               309904

        Test cases for Bug ID - 27449
        -------------------------------------------------------------------------------------
        Test Function Name                                                            TFS ID
        -------------------------------------------------------------------------------------
        VendorCountyWithCityPostCode,VendorCountyWithBalnkLinePostCodeCity
    }
    END.
  }
}

