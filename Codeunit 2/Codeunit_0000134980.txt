OBJECT Codeunit 134980 ERM Insurance Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryFixedAsset@1003 : Codeunit 131330;
      LibraryReportDataset@1010 : Codeunit 131007;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      OverUnderInsuredCaption@1008 : TextConst 'ENU=Over-/Underinsured';
      ValidationError@1009 : TextConst 'ENU="%1 must be %2 "';
      RowNotFoundErr@1011 : TextConst '@@@="%1=Field Caption;%2=Field Value";ENU=There is no dataset row corresponding to Element Name %1 with value %2';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(InsuranceUninsuredFAsReqPageHandler)]
    PROCEDURE InsuranceUninsuredFixedAsset@46();
    VAR
      GenJournalLine@1005 : Record 81;
      FixedAsset@1004 : Record 5600;
      FixedAsset2@1000 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      FADepreciationBook2@1001 : Record 5612;
      GenJournalBatch@1002 : Record 232;
      InsuranceUninsuredFAs@1007 : Report 5626;
    BEGIN
      // Test and verify Insurance Uninsured Fixed Asset Report.

      // 1.Setup: Create Two Fixed Asset, Two Fixed Asset Depreciation Book, General Journal Batch,
      // Two Fixed Asset Journal Lines and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateFAGLJournalLines(GenJournalLine,FADepreciationBook,GenJournalBatch);
      CreateFAGLJournalLines(GenJournalLine,FADepreciationBook2,GenJournalBatch);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      CLEAR(InsuranceUninsuredFAs);
      InsuranceUninsuredFAs.SETTABLEVIEW(FixedAsset);
      COMMIT;
      InsuranceUninsuredFAs.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyFixedAssetLineValues(FADepreciationBook);
      VerifyFixedAssetLineValues(FADepreciationBook2);
      VerifyTotalAmount(FADepreciationBook,FADepreciationBook2);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(InsuranceAnalysisReqPageHandler)]
    PROCEDURE InsuranceAnalysisPrintDetails@68();
    VAR
      FADepreciationBook@1006 : Record 5612;
      FADepreciationBook2@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Insurance@1008 : Record 5628;
      Insurance2@1009 : Record 5628;
      FixedAsset@1001 : Record 5600;
      FixedAsset2@1010 : Record 5600;
      InsuranceAnalysis@1005 : Report 5620;
    BEGIN
      // Test and verify Insurance Analysis Report with Print Details.

      // 1.Setup: Create Two Fixed Asset, Two Fixed Asset Depreciation Book, Two Insurance,
      // General Journal Batch, Two Fixed Asset Journal Lines with Insurance and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2);
      CreateInsurance(Insurance);
      CreateInsurance(Insurance2);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook,Insurance."No.");
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook2,Insurance2."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      Insurance.SETFILTER("No.",'%1|%2',Insurance."No.",Insurance2."No.");
      CLEAR(InsuranceAnalysis);
      InsuranceAnalysis.InitializeRequest(TRUE);
      InsuranceAnalysis.SETTABLEVIEW(Insurance);
      COMMIT;
      InsuranceAnalysis.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceAnalysisLine(Insurance);
      VerifyInsuranceAnalysisLine(Insurance2);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(InsuranceAnalysisReqPageHandler)]
    PROCEDURE InsuranceAnalysis@4();
    VAR
      FADepreciationBook@1006 : Record 5612;
      FADepreciationBook2@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Insurance@1008 : Record 5628;
      Insurance2@1009 : Record 5628;
      FixedAsset@1001 : Record 5600;
      FixedAsset2@1010 : Record 5600;
      InsuranceAnalysis@1005 : Report 5620;
    BEGIN
      // Test and verify Insurance Analysis Report without Print Details.

      // 1.Setup: Create Two Fixed Asset, Two Fixed Asset Depreciation Book, Two Insurance,
      // General Journal Batch, Two Fixed Asset Journal Lines with Insurance and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2);
      CreateInsurance(Insurance);
      CreateInsurance(Insurance2);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook,Insurance."No.");
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook2,Insurance2."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      Insurance.SETFILTER("No.",'%1|%2',Insurance."No.",Insurance2."No.");
      CLEAR(InsuranceAnalysis);
      InsuranceAnalysis.InitializeRequest(FALSE);
      InsuranceAnalysis.SETTABLEVIEW(Insurance);
      COMMIT;
      InsuranceAnalysis.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceAnalysisTotal(Insurance,Insurance2);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(InsuranceListReqPageHandler)]
    PROCEDURE InsuranceList@64();
    VAR
      Insurance@1008 : Record 5628;
      InsuranceList@1005 : Report 5621;
    BEGIN
      // Test and verify Insurance List Report.

      // 1.Setup: Create Insurance.
      Initialize;
      CreateInsurance(Insurance);

      // 2.Exercise: Run the Report.
      Insurance.SETRANGE("No.",Insurance."No.");
      CLEAR(InsuranceList);
      InsuranceList.SETTABLEVIEW(Insurance);
      COMMIT;
      InsuranceList.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceList(Insurance);
    END;

    [Test]
    [HandlerFunctions(InsuranceRegisterReqPageHandler)]
    PROCEDURE InsuranceRegister@41();
    VAR
      FADepreciationBook@1006 : Record 5612;
      FADepreciationBook2@1009 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Insurance@1008 : Record 5628;
      InsuranceRegister2@1002 : Record 5636;
      FixedAsset@1001 : Record 5600;
      FixedAsset2@1010 : Record 5600;
      InsuranceRegister@1005 : Report 5623;
    BEGIN
      // Test and verify Insurance Register Report.

      // 1.Setup: Create Two Fixed Asset, Two Fixed Asset Depreciation Book, Insurance, General Journal Batch,
      // Two Fixed Asset Journal Lines with Insurance and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2);
      CreateInsurance(Insurance);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook,Insurance."No.");
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook2,Insurance."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      InsuranceRegister2.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      CLEAR(InsuranceRegister);
      InsuranceRegister.SETTABLEVIEW(InsuranceRegister2);
      COMMIT;
      InsuranceRegister.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceRegisterLine(FixedAsset."No.");
      VerifyInsuranceRegisterLine(FixedAsset2."No.");
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(InsuranceCoverageDetailsReqPageHandler)]
    PROCEDURE InsuranceCoverageDetails@33();
    VAR
      FADepreciationBook@1006 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Insurance@1008 : Record 5628;
      FixedAsset@1001 : Record 5600;
      InsuranceCoverageDetails@1002 : Report 5624;
    BEGIN
      // Test and verify Insurance Coverage Details Report.

      // 1.Setup: Create Fixed Asset, Fixed Asset Depreciation Book, Insurance, General Journal Batch,
      // Fixed Asset Journal Lines and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateInsurance(Insurance);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook,Insurance."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      Insurance.SETRANGE("No.",Insurance."No.");
      CLEAR(InsuranceCoverageDetails);
      InsuranceCoverageDetails.SETTABLEVIEW(Insurance);
      COMMIT;
      InsuranceCoverageDetails.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceCoverageDetails(Insurance);
    END;

    [Test]
    [HandlerFunctions(InsuranceTotValueInsuredReqPageHandler)]
    PROCEDURE InsuranceTotalValueInsured@15();
    VAR
      FADepreciationBook@1006 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Insurance@1008 : Record 5628;
      FixedAsset@1001 : Record 5600;
      InsuranceTotValueInsured@1002 : Report 5625;
    BEGIN
      // Test and verify Insurance Total Value Insured Report.

      // 1.Setup: Create Fixed Asset, Fixed Asset Depreciation Book, Insurance, General Journal Batch,
      // Fixed Asset Journal Lines and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      CreateInsurance(Insurance);
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateJournalLineWithInsurance(GenJournalLine,GenJournalBatch,FADepreciationBook,Insurance."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Report.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      CLEAR(InsuranceTotValueInsured);
      InsuranceTotValueInsured.SETTABLEVIEW(FixedAsset);
      COMMIT;
      InsuranceTotValueInsured.RUN;

      // 3.Verify: Verify values on Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyInsuranceValueInsured(FixedAsset."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreateFADepreciationBook@56(VAR FADepreciationBook@1000 : Record 5612;FixedAsset@1001 : Record 5600);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",LibraryFixedAsset.GetDefaultDeprBook);
      UpdateDateFADepreciationBook(FADepreciationBook);
      FADepreciationBook.VALIDATE("FA Posting Group",FixedAsset."FA Posting Group");
      FADepreciationBook.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateFAGLJournalLines@51(VAR GenJournalLine@1000 : Record 81;FADepreciationBook@1001 : Record 5612;GenJournalBatch@1002 : Record 232);
    BEGIN
      // Using Random Number Generator for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2));

      // Using Random Number Generator for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook,GenJournalLine."FA Posting Type"::Depreciation,
        -GenJournalLine.Amount / 2);
    END;

    [Normal]
    LOCAL PROCEDURE CreateGeneralJournalBatch@16(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    [Normal]
    LOCAL PROCEDURE CreateGeneralJournalLine@14(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1004 : Record 232;FADepreciationBook@1001 : Record 5612;FAPostingType@1000 : Option;Amount@1002 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",FADepreciationBook."FA No.",Amount);
      DepreciationBookGeneralJournal(GenJournalLine,FADepreciationBook."Depreciation Book Code");
      PostingSetupFAGLJournalLine(GenJournalLine,FAPostingType);
    END;

    LOCAL PROCEDURE CreateInsurance@21(VAR Insurance@1000 : Record 5628);
    BEGIN
      LibraryFixedAsset.CreateInsurance(Insurance);
      UpdateValuesOnInsurance(Insurance);
    END;

    [Normal]
    LOCAL PROCEDURE CreateJournalLineWithInsurance@1(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1004 : Record 232;FADepreciationBook@1001 : Record 5612;InsuranceNo@1000 : Code[20]);
    BEGIN
      // Using Random Number Generator for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,
        GenJournalBatch,
        FADepreciationBook,
        GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2));

      GenJournalLine.VALIDATE("Insurance No.",InsuranceNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE DepreciationBookGeneralJournal@55(VAR GenJournalLine@1000 : Record 81;DepreciationBookCode@1001 : Code[10]);
    BEGIN
      GenJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE PostingSetupFAGLJournalLine@7(VAR GenJournalLine@1000 : Record 81;FAPostingType@1003 : Option);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.SETFILTER("Gen. Posting Type",'<>%1',GLAccount."Gen. Posting Type"::" ");
      LibraryERM.FindGLAccount(GLAccount);
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name" + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateDateFADepreciationBook@48(VAR FADepreciationBook@1000 : Record 5612);
    BEGIN
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Random Number Generator for Ending date.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
    END;

    LOCAL PROCEDURE UpdateValuesOnInsurance@5(VAR Insurance@1000 : Record 5628);
    BEGIN
      Insurance.VALIDATE("Effective Date",WORKDATE);

      // Using Random Number Generator for Annual Premium and Policy Coverage.
      Insurance.VALIDATE("Annual Premium",LibraryRandom.RandDec(10000,2));
      Insurance.VALIDATE("Policy Coverage",LibraryRandom.RandDec(10000,2));
      Insurance.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyFixedAssetLineValues@2(FADepreciationBook@1001 : Record 5612);
    BEGIN
      FADepreciationBook.CALCFIELDS("Acquisition Cost",Depreciation,"Book Value");
      LibraryReportDataset.SetRange('No_FixedAsset',FADepreciationBook."FA No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_FixedAsset',FADepreciationBook."FA No."));
      LibraryReportDataset.AssertCurrentRowValue('Amounts1',FADepreciationBook."Acquisition Cost");
      LibraryReportDataset.AssertCurrentRowValue('Amounts2',FADepreciationBook.Depreciation);
      LibraryReportDataset.AssertCurrentRowValue('Amounts3',FADepreciationBook."Book Value");
    END;

    LOCAL PROCEDURE VerifyInsuranceAnalysisLine@6(Insurance@1000 : Record 5628);
    BEGIN
      Insurance.CALCFIELDS("Total Value Insured");
      LibraryReportDataset.SetRange('Insurance__No__',Insurance."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Insurance__No__',Insurance."No."));
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Annual_Premium_',Insurance."Annual Premium");
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Policy_Coverage_',Insurance."Policy Coverage");
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Total_Value_Insured_',Insurance."Total Value Insured");
      LibraryReportDataset.AssertCurrentRowValue('OverUnderInsured',Insurance."Policy Coverage" - Insurance."Total Value Insured");
    END;

    LOCAL PROCEDURE VerifyInsuranceAnalysisTotal@42(Insurance@1001 : Record 5628;Insurance2@1000 : Record 5628);
    VAR
      AnnualPremium@1003 : Decimal;
      PolicyCoverage@1004 : Decimal;
      TotalValueInsured@1006 : Decimal;
      OverUnderInsured@1007 : Decimal;
    BEGIN
      Insurance.CALCFIELDS("Total Value Insured");
      Insurance2.CALCFIELDS("Total Value Insured");
      AnnualPremium := LibraryReportDataset.Sum('Insurance__Annual_Premium_');
      PolicyCoverage := LibraryReportDataset.Sum('Insurance__Policy_Coverage_');
      TotalValueInsured := LibraryReportDataset.Sum('Insurance__Total_Value_Insured_');
      OverUnderInsured := LibraryReportDataset.Sum('OverUnderInsured');
      Assert.AreEqual(
        Insurance."Annual Premium" + Insurance2."Annual Premium",
        AnnualPremium,
        STRSUBSTNO(ValidationError,Insurance.FIELDCAPTION("Annual Premium"),AnnualPremium));
      Assert.AreEqual(
        Insurance."Policy Coverage" + Insurance2."Policy Coverage",
        PolicyCoverage,
        STRSUBSTNO(ValidationError,Insurance.FIELDCAPTION("Policy Coverage"),PolicyCoverage));
      Assert.AreEqual(
        Insurance."Total Value Insured" + Insurance2."Total Value Insured",
        TotalValueInsured,
        STRSUBSTNO(ValidationError,Insurance.FIELDCAPTION("Total Value Insured"),TotalValueInsured));
      Assert.AreEqual(
        Insurance."Policy Coverage" -
        Insurance."Total Value Insured" + Insurance2."Policy Coverage" - Insurance2."Total Value Insured",
        OverUnderInsured,
        STRSUBSTNO(ValidationError,OverUnderInsuredCaption,OverUnderInsured));
    END;

    LOCAL PROCEDURE VerifyInsuranceCoverageDetails@110(Insurance@1000 : Record 5628);
    VAR
      InsCoverageLedgerEntry@1002 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("Insurance No.",Insurance."No.");
      InsCoverageLedgerEntry.FINDFIRST;
      LibraryReportDataset.SetRange('Ins__Coverage_Ledger_Entry__Posting_Date_',FORMAT(InsCoverageLedgerEntry."Posting Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Ins__Coverage_Ledger_Entry__Posting_Date_',FORMAT(InsCoverageLedgerEntry."Posting Date")));
      LibraryReportDataset.AssertCurrentRowValue('Insurance__No__',Insurance."No.");
      LibraryReportDataset.AssertCurrentRowValue('Ins__Coverage_Ledger_Entry_Amount',InsCoverageLedgerEntry.Amount);
    END;

    LOCAL PROCEDURE VerifyInsuranceList@17(Insurance@1000 : Record 5628);
    BEGIN
      LibraryReportDataset.SetRange('Insurance__No__',Insurance."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Insurance__No__',Insurance."No."));
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Annual_Premium_',Insurance."Annual Premium");
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Policy_Coverage_',Insurance."Policy Coverage");
    END;

    LOCAL PROCEDURE VerifyInsuranceRegisterLine@158(FANo@1000 : Code[20]);
    VAR
      InsCoverageLedgerEntry@1001 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("FA No.",FANo);
      InsCoverageLedgerEntry.FINDFIRST;
      LibraryReportDataset.SetRange('Ins__Coverage_Ledger_Entry__FA_No__',FANo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Ins__Coverage_Ledger_Entry__FA_No__',FANo));
      LibraryReportDataset.AssertCurrentRowValue('Ins__Coverage_Ledger_Entry__Insurance_No__',InsCoverageLedgerEntry."Insurance No.");
      LibraryReportDataset.AssertCurrentRowValue('Ins__Coverage_Ledger_Entry_Amount',InsCoverageLedgerEntry.Amount);
      LibraryReportDataset.AssertCurrentRowValue('Ins__Coverage_Ledger_Entry__Entry_No__',InsCoverageLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE VerifyInsuranceValueInsured@104(FANo@1001 : Code[20]);
    VAR
      InsCoverageLedgerEntry@1002 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("FA No.",FANo);
      InsCoverageLedgerEntry.FINDFIRST;
      LibraryReportDataset.SetRange('FANo',FANo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'FANo',FANo));
      LibraryReportDataset.AssertCurrentRowValue('Ins__Coverage_Ledger_Entry__Insurance_No__',InsCoverageLedgerEntry."Insurance No.");
      LibraryReportDataset.AssertCurrentRowValue('Insurance__Total_Value_Insured_',InsCoverageLedgerEntry.Amount);
    END;

    LOCAL PROCEDURE VerifyTotalAmount@47(FADepreciationBook@1001 : Record 5612;FADepreciationBook2@1002 : Record 5612);
    BEGIN
      FADepreciationBook.CALCFIELDS("Acquisition Cost",Depreciation,"Book Value");
      FADepreciationBook2.CALCFIELDS("Acquisition Cost",Depreciation,"Book Value");
      LibraryReportDataset.SetRange('No_FixedAsset',FADepreciationBook2."FA No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_FixedAsset',FADepreciationBook2."FA No."));
      LibraryReportDataset.AssertCurrentRowValue('TotalAmounts1',
        FADepreciationBook."Acquisition Cost" + FADepreciationBook2."Acquisition Cost");
      LibraryReportDataset.AssertCurrentRowValue('TotalAmounts2',FADepreciationBook.Depreciation + FADepreciationBook2.Depreciation);
      LibraryReportDataset.AssertCurrentRowValue('TotalAmounts3',FADepreciationBook."Book Value" + FADepreciationBook2."Book Value");
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceUninsuredFAsReqPageHandler@11(VAR InsuranceUninsuredFAs@1000 : TestRequestPage 5626);
    BEGIN
      InsuranceUninsuredFAs.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceAnalysisReqPageHandler@70(VAR InsuranceAnalysis@1000 : TestRequestPage 5620);
    BEGIN
      InsuranceAnalysis.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceListReqPageHandler@106(VAR InsuranceList@1000 : TestRequestPage 5621);
    BEGIN
      InsuranceList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceRegisterReqPageHandler@123(VAR InsuranceRegister@1000 : TestRequestPage 5623);
    BEGIN
      InsuranceRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceCoverageDetailsReqPageHandler@150(VAR InsuranceCoverageDetails@1000 : TestRequestPage 5624);
    BEGIN
      InsuranceCoverageDetails.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InsuranceTotValueInsuredReqPageHandler@189(VAR InsuranceTotValueInsured@1000 : TestRequestPage 5625);
    BEGIN
      InsuranceTotValueInsured.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset] [Insurance]
      Test and Verify Dynamics Nav Reports: Insurance.
      1. Test and verify Insurance Uninsured Fixed Asset Report.
      2. Test and verify Insurance Total Value Insured Report.
      3. Test and verify Insurance Coverage Details Report.
      4. Test and verify Insurance Register Report.
      5. Test and verify Insurance List Report.
      6. Test and verify Insurance Analysis Report with Print Details.
      7. Test and verify Insurance Analysis Report without Print Details.

      TFS_TS_ID = 237340
      --------------------------------------------------------------------------
      Test Function Name                                             Test TFS ID
      --------------------------------------------------------------------------
      InsuranceUninsuredFixedAsset                                        139500
      InsuranceAnalysisPrintDetails,InsuranceAnalysis                     139600
      InsuranceList                                                       139601
      InsuranceRegister                                                   139602
      InsuranceCoverageDetails                                            139603
      InsuranceTotalValueInsured                                          139604
    }
    END.
  }
}

