OBJECT Codeunit 144020 ERM TDS Nature Of Deduction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1000 : Codeunit 130512;
      LibraryERM@1001 : Codeunit 131300;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryTDS@1500000 : Codeunit 143000;
      LibraryWarehouse@1500005 : Codeunit 132204;
      LibraryVariableStorage@1500007 : Codeunit 131004;
      Assert@1004 : Codeunit 130000;
      CreditAmountError@1007 : TextConst 'ENU=The expected value is %1 and the actual value is %2.';
      ExpectedTANNoError@1500001 : TextConst 'ENU="T.A.N. No. must have a value in TDS Entry: Entry No.=%1. It cannot be zero or empty."';
      ExpectedTANNoErrorOnCompInfo@1500002 : TextConst 'ENU="T.A.N. No. must have a value in Company Information: Primary Key=. It cannot be zero or empty."';
      ErrorMustMatch@1500003 : TextConst 'ENU=Errors must match.';
      AmountErr@1500004 : TextConst 'ENU=%1 is incorrect in %2.';
      ServiceTaxAsExciseHelper@1500008 : Codeunit 143003;
      AmountErrorMessage@1500009 : TextConst 'ENU=%1 must be %2 in %3 %4 %5.';
      GLSetup@1500006 : Record 98;
      isInitialized@1500010 : Boolean;
      LibraryUtility@1500376 : Codeunit 131000;

    [Test]
    PROCEDURE BankPaymentVoucherWithTDSAndWorktax@1();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      TDSNatureDeduction2@1010 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      TDSSetup@1500001 : Record 13728;
      Amount@1012 : Decimal;
      DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      DocumentNo@1013 : Code[20];
    BEGIN
      // Create Setup, Post General Journal Lines and Verify Posted Entries.
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(1000,2); // For Random Value.
      LibraryERM.CreateAssesseeCode(AssesseeCode); // Generate Assessee Code.
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction2,TDSSetup,TDSNatureDeduction2."TDS Group"::Others,AssesseeCode.Code);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,TDSNatureDeduction2.Code);

      // Exercise: Create & Post Bank Payment Voucher.
      DocumentNo := CreateAndPostBankPaymentVoucher(Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,TDSNatureDeduction2.Code);

      // Verify: Verify Credit Amount On GL Entry.
      VerifyGLEntry(DocumentType::Payment,DocumentNo,Amount);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithApplyVendorEntries@2();
    VAR
      PurchaseHeader@1014 : Record 38;
      AssesseeCode@1015 : Record 13727;
      TDSNatureDeduction@1016 : Record 13726;
      TDSNatureDeduction2@1017 : Record 13726;
      NODNOCHeader@1018 : Record 13786;
      PurchaseLine@1500000 : Record 39;
      TDSSetup@1500001 : Record 13728;
      DocumentNo@1019 : Code[20];
      PostedDocumentNo@1020 : Code[20];
      Amount@1021 : Decimal;
    BEGIN
      // Create Setup, Post General Journal Lines with Document Type Payment and Create Purchase Order with apply Entries and verify GL Entries.
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(1000,2); // For Random Value.
      LibraryERM.CreateAssesseeCode(AssesseeCode); // Generate Assessee Code.
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction2,TDSSetup,TDSNatureDeduction2."TDS Group"::Others,AssesseeCode.Code);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,TDSNatureDeduction2.Code);
      DocumentNo := CreateAndPostBankPaymentVoucher(Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,TDSNatureDeduction2.Code);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,TDSNatureDeduction2.Code);

      // Exercise: Apply and post Purchase Order.
      PostedDocumentNo := ApplyAndPostPurchaseOrder(PurchaseHeader,DocumentNo);

      // Verify: Verify GL Entry.
      VerifyGLEntryWithTDS(PostedDocumentNo,Amount);
    END;

    [Test]
    PROCEDURE GeneralJournalWithTDS@1500000();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      DocumentNo@1013 : Code[20];
      GenJournalLine@1500000 : Record 81;
      ExpectedTDSEntry@1500001 : Record 13729;
      ServiceTaxWithTDSHelper@1500002 : Codeunit 143005;
      TDSSetup@1500003 : Record 13728;
    BEGIN
      // [SCENARIO 64550] Create Setup, Post General Journal with TDS and Verify GL-TDS Posted Entries.
      // [FEATURE] [TDS][General Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post General Journal.
      CreateGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Payment,NODNOCHeader."No.",Amount,
                               TDSNatureDeduction.Code,'');
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE PurchaseJournalWithTDS@1500001();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      DocumentNo@1013 : Code[20];
      GenJournalLine@1500000 : Record 81;
      ExpectedTDSEntry@1500001 : Record 13729;
      ServiceTaxWithTDSHelper@1500002 : Codeunit 143005;
      GenJournalTemplate@1500003 : Record 80;
      TDSSetup@1500004 : Record 13728;
    BEGIN
      // [SCENARIO 64551] Create Setup, Post Purchase Journal with TDS and Verify GL-TDS Posted Entries.
      // [FEATURE] [TDS][Purchase Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Purchase Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",Amount,
        TDSNatureDeduction.Code);
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE GeneralJournalInvoiceWithTDS@1500002();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      DocumentNo@1013 : Code[20];
      GenJournalLine@1500000 : Record 81;
      TDSSetup@1500001 : Record 13728;
    BEGIN
      //[SCENARIO 64545] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:General Journal
      //[FEATURE] [TDS][General Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post General Journal.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,NODNOCHeader."No.",-Amount,TDSNatureDeduction.Code,'');
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Invoice,DocumentNo,Amount);
    END;

    [Test]
    PROCEDURE PurchaseJournalInvoiceWithTDS@1500004();
    VAR
      AssesseeCode@1008 : Record 13727;
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      DocumentNo@1013 : Code[20];
      GenJournalLine@1500000 : Record 81;
      ExpectedTDSEntry@1500001 : Record 13729;
      ServiceTaxWithTDSHelper@1500002 : Codeunit 143005;
      GenJournalTemplate@1500003 : Record 80;
      TDSSetup@1500004 : Record 13728;
    BEGIN
      //[SCENARIO 64546] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in: Purchase Journal
      //[FEATURE] [TDS][Purchase Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Purchase Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,-GenJournalLine.Amount,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Invoice,DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithTDS@1500006();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      DocumentNo@1500004 : Code[20];
      ServiceTaxWithTDSHelper@1500007 : Codeunit 143005;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ExpectedTDSEntry@1500012 : Record 13729;
      TDSSetup@1500005 : Record 13728;
    BEGIN
      //[SCENARIO 64547] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:Purchase Order
      //[FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Purchase Order
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithTDS@1500003();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      DocumentNo@1500004 : Code[20];
      ServiceTaxWithTDSHelper@1500007 : Codeunit 143005;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ExpectedTDSEntry@1500012 : Record 13729;
      TDSSetup@1500005 : Record 13728;
    BEGIN
      //[SCENARIO 64548] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:PurchaseInvoice
      //[FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CashPaymentVoucherWithTDS@1500008();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Amount@1500004 : Decimal;
      DocumentNo@1500003 : Code[20];
      GenJournalLine@1500002 : Record 81;
      ExpectedTDSEntry@1500001 : Record 13729;
      ServiceTaxWithTDSHelper@1500000 : Codeunit 143005;
      GenJournalTemplate@1500008 : Record 80;
      TDSSetup@1500009 : Record 13728;
    BEGIN
      // [SCENARIO 64552] Create Setup, Post Cash Payment voucher and Verify Posted Entries.
      // [FEATURE] [TDS][Cash Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Cash Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE BankPaymentVoucherWithTDS@1500012();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Amount@1500004 : Decimal;
      DocumentNo@1500003 : Code[20];
      GenJournalLine@1500002 : Record 81;
      ExpectedTDSEntry@1500001 : Record 13729;
      ServiceTaxWithTDSHelper@1500000 : Codeunit 143005;
      GenJournalTemplate@1500008 : Record 80;
      TDSSetup@1500009 : Record 13728;
    BEGIN
      // [SCENARIO 64553] Create Setup, Post Bank Payment voucher and Verify Posted Entries.
      // [FEATURE] [TDS][Bank Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Create & Post Bank Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(GenJournalLine."Document Type"::Payment,DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE CheckBlankTANOnGeneralJournal@1500007();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from General Journal Line.
      //[FEATURE] [TDS][General Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted General Journal.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,NODNOCHeader."No.",-Amount,TDSNatureDeduction.Code,'');
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTANOnCompanyInfoWithGeneralJournal@1500026();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from Company Information Card.
      //[FEATURE] [TDS][General Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted General Journal.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,NODNOCHeader."No.",-Amount,TDSNatureDeduction.Code,'');
      GenJournalLine.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckBlankTANOnPurchaseJournal@1500016();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from General Journal Line.
      //[FEATURE] [TDS][Purchase Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Purchase Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTANOnCompanyInfoWithPurchaseJournal@1500043();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from Company Information Card.
      //[FEATURE] [TDS][Purchase Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Create & Post Purchase Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      GenJournalLine.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckBlankTANOnPaymentJournal@1500033();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from General Journal Line.
      //[FEATURE] [TDS][Payment Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Payment Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Payments,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTANOnCompanyInfoWithPaymentJournal@1500035();
    VAR
      Amount@1500006 : Decimal;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      TDSEntry@1500000 : Record 13729;
    BEGIN
      //[SCENARIO 64516] Validate T.A.N. error when T.A.N No. is deleted from Company Information Card.
      //[FEATURE] [TDS][Payment Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Payment Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Payments,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      GenJournalLine.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckBlankTANOnCashPaymentVoucher@1500014();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      TDSEntry@1500010 : Record 13729;
    BEGIN
      // [SCENARIO 64517] Validate T.A.N. error when T.A.N No. is deleted from General Journal Line.
      // [FEATURE] [TDS][Cash Payment Voucher]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Cash Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTANOnCompanyInfoWithCashPaymentVoucher@1500044();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      TDSEntry@1500010 : Record 13729;
    BEGIN
      // [SCENARIO 64517] Validate T.A.N. error when T.A.N No. is deleted from Company Information Card.
      // [FEATURE] [TDS][Cash Payment Voucher]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Create & Post Cash Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      GenJournalLine.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckBlankTANOnBankPaymentVoucher@1500022();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      TDSEntry@1500010 : Record 13729;
    BEGIN
      // [SCENARIO 64517] Validate T.A.N. error when T.A.N No. is deleted from General Journal Line.
      // [FEATURE] [TDS][Bank Payment Voucher]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Create & Post Bank Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTANOnCompanyInfoWithBankPaymentVoucher@1500045();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      TDSEntry@1500010 : Record 13729;
    BEGIN
      // [SCENARIO 64517] Validate T.A.N. error when T.A.N No. is deleted from Company Information Card.
      // [FEATURE] [TDS][Bank Payment Voucher]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Bank Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalLine.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify Expected Error should match with Actual Error.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTDSWithBlankTANOnComapnyInfoGeneralJournal@1500015();
    VAR
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      GenJournalLine@1500000 : Record 81;
      GeneralLedgerSetup@1500001 : Record 98;
    BEGIN
      //[SCENARIO 64519] Validate TDS related fields when the T.A.N No. is deleted in Company Information Card.
      //[FEATURE] [TDS][General Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup without Threshold and Surcharge.
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Created General Journal.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,NODNOCHeader."No.",-Amount,TDSNatureDeduction.Code,'');

      // [THEN] Verify Expected Error should match with Actual Error.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."Amount Rounding Precision",ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTDSWithBlankTANOnComapnyInfoPurchaseJournal@1500037();
    VAR
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      GenJournalLine@1500000 : Record 81;
      GeneralLedgerSetup@1500001 : Record 98;
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      //[SCENARIO 64519] Validate TDS related fields when the T.A.N No. is deleted in Company Information Card.
      //[FEATURE] [TDS][Purchase Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Created Purchase Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);

      // [THEN] Verify Expected Error should match with Actual Error.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."Amount Rounding Precision",ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CheckTDSWithBlankTANOnComapnyInfoPaymentJournal@1500038();
    VAR
      TDSNatureDeduction@1009 : Record 13726;
      NODNOCHeader@1011 : Record 13786;
      Amount@1012 : Decimal;
      GenJournalLine@1500000 : Record 81;
      GeneralLedgerSetup@1500001 : Record 98;
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      //[SCENARIO 64519] Validate TDS related fields when the T.A.N No. is deleted in Company Information Card.
      //[FEATURE] [TDS][Payment Journal]
      Initialize;

      //[GIVEN] Created Vendor and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Created Payment Journal.
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Payments,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);

      // [THEN] Verify Expected Error should match with Actual Error.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."Amount Rounding Precision",ErrorMustMatch);
    END;

    [Test]
    PROCEDURE TANWithLocationOnPurchasOrder@1500017();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
    BEGIN
      //[SCENARIO 64518] Creating Purchase Order and verify TAN No validation.
      //[FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateInitialSetupWithLocation(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Created & Posted Purchase Order
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');

      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Expected result with Actual result.
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE TANWithLocationOnPurchaseInvoice@1500049();
    VAR
      Amount@1500000 : Decimal;
      ActualTANNoErrorOnPurchaseOrder@1500003 : Text;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
    BEGIN
      //[SCENARIO 64518] Creating Purchase Invoice and verify TAN No validation.
      //[FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateInitialSetupWithLocation(NODNOCHeader,TDSNatureDeduction,Amount,TRUE);

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');

      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Expected result with Actual result.
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoErrorOnCompInfo),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE TANWithBlankLocationPurchaseOrder@1500047();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      TDSEntry@1500006 : Record 13729;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
    BEGIN
      //[SCENARIO 64518] Creating Purchase Order and verify TAN No validation.
      //[FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateInitialSetupWithLocation(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Create & Post Purchase Order
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');

      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Expected result with Actual result.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE TANWithBlankLocationPurchaseInvoice@1500051();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      TDSEntry@1500006 : Record 13729;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
    BEGIN
      //[SCENARIO 64518] Creating Purchase Invoice and verify TAN No validation.
      //[FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateInitialSetupWithLocation(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Create & Post Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');

      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Expected result with Actual result.
      TDSEntry.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ExpectedTANNoError,TDSEntry."Entry No." + 1),GETLASTERRORTEXT,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE BankPaymentVoucherWithZeroTDS@1500024();
    VAR
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Amount@1500004 : Decimal;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      GeneralLedgerSetup@1500009 : Record 98;
    BEGIN
      // [SCENARIO 64520] Create Setup, Create Bank Payment Voucher and Verify TDS on Gen. Journal Line.
      // [FEATURE] [TDS][Bank Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Created Bank Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher");

      // [THEN] Verify Expected Amount should match with Actual Amount.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."Amount Rounding Precision",ErrorMustMatch);
    END;

    [Test]
    PROCEDURE CashPaymentVoucherWithZeroTDS@1500032();
    VAR
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Amount@1500004 : Decimal;
      GenJournalLine@1500002 : Record 81;
      GenJournalTemplate@1500008 : Record 80;
      GeneralLedgerSetup@1500009 : Record 98;
    BEGIN
      // [SCENARIO 64520] Create Setup, Create Cash Payment Voucher and Verify TDS on Gen. Journal Line.
      // [FEATURE] [TDS][Cash Payment Voucher]
      Initialize;

      // [GIVEN] Created Assesse Code, TDS Nature of Deduction and TDS Setup
      CreateInitialSetup(NODNOCHeader,TDSNatureDeduction,Amount,FALSE);

      // [WHEN] Created Cash Payment Voucher.
      CreatePaymentLines(
        GenJournalLine,NODNOCHeader."No.",Amount,TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher");

      // [THEN] Verify Expected Amount should match with Actual Amount.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."Amount Rounding Precision",ErrorMustMatch);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithMultipleLineTypesTDSAndForeignCurrency@1500028();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      TDSSetup@1500005 : Record 13728;
      Currency@1500006 : Record 4;
      ExpectedPurchaseLine@1500013 : Record 39;
      Vendor@1500014 : Record 23;
      Amount@1500000 : Decimal;
      Quantity@1500011 : Decimal;
    BEGIN
      //[SCENARIO 64535] Create Purchase Order using Foreign currency with Multiple Line Types and check TDS related fields
      //[FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      UpdateTANNoOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      Quantity := LibraryRandom.RandInt(5);
      CreateCurrencyAndExchangeRate(Currency);
      CreateNonDomesticVendor(Vendor,Currency.Code);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetupCountry(
        TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,
        Vendor."Country/Region Code");
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created Purchase Order with Type: Item, G/L Account, Fixed Asset and Charge (Item)
      CreatePurchaseHeader(PurchaseHeader,Vendor."No.",Currency.Code,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      // [THEN] Verify TDS related Amount fields.
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        REPEAT
          CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine,TDSSetup);
          VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsMPH)]
    PROCEDURE LineDiscountOnPurchaseInvoiceWithTDS@21();
    VAR
      TDSNatureDeduction@1500011 : Record 13726;
      NODNOCHeader@1500010 : Record 13786;
      AssesseeCode@1500009 : Record 13727;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500007 : Record 39;
      TDSSetup@1500006 : Record 13728;
      PostedDocumentNo@1500000 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      //[SCENARIO 65524] Test Line Discount on Purchase Invoice, Post Invoice and verify TDS Amount on Statistics Page and Posted GL Entry.
      //[FEATURE] [TDS][Line Discount][Purchase Invoice]

      // [GIVEN] Created TDS and Line Discount Setup.
      Initialize;

      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created and Posted Invoice.
      CreatePurchaseHeader(PurchaseHeader,NODNOCHeader."No.",'',PurchaseHeader."Document Type"::Invoice);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',1,LibraryRandom.RandDec(100,2),
        TDSNatureDeduction.Code,LibraryRandom.RandDec(15,2));
      UpdateGeneralPostingSetup(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      VerifyPurchaseOrderStatistics(PurchaseLine,TDSSetup);
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Purchase Line and Posted G/L Entry for Line Discount Amount.
      VerifyLineDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * PurchaseLine."Line Discount %" / 100);
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsMPH)]
    PROCEDURE PurchaseInvoiceWithTDSAndPANApplied@1500057();
    VAR
      Amount@1500000 : Decimal;
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      DocumentNo@1500004 : Code[20];
      ServiceTaxWithTDSHelper@1500007 : Codeunit 143005;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      ExpectedTDSEntry@1500012 : Record 13729;
      TDSSetup@1500005 : Record 13728;
      PurchInvHeader@1500006 : Record 122;
    BEGIN
      //[SCENARIO 65532] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor with PANAPPLIED in:PurchaseInvoice
      //[FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC and Assessee Code
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendorWithLocation('',TRUE),AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created & Posted Purchase Invoice
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",FindGLAccountNo,Amount,
        TDSNatureDeduction.Code,'');
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,FALSE);
      VerifyPurchaseInvoiceStatistics(ExpectedTDSEntry,PurchaseLine,TDSSetup);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify 3 GL Entries are created, Credit Amount On GL Entry, TDS Entry Amounts and Vendor Ledger Entry Amount.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      VerifyVendorLedgerEntry(-(PurchInvHeader."Amount Including VAT" - ExpectedTDSEntry."Total TDS Including SHE CESS"),DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithMultipleLineTypesTDSAndForeignCurrency@1500009();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      TDSSetup@1500005 : Record 13728;
      Currency@1500006 : Record 4;
      ExpectedPurchaseLine@1500013 : Record 39;
      Vendor@1500014 : Record 23;
      Amount@1500000 : Decimal;
      Quantity@1500011 : Decimal;
    BEGIN
      //[SCENARIO 64536] Create Purchase Invoice using Foreign currency with Multiple Line Types and check TDS related fields
      //[FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Foreign Vendor, Currency, Setup for NODNOC and Assessee Code.
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      UpdateTANNoOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      Quantity := LibraryRandom.RandInt(5);
      CreateCurrencyAndExchangeRate(Currency);
      CreateNonDomesticVendor(Vendor,Currency.Code);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetupCountry(
        TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,
        Vendor."Country/Region Code");
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created Purchase Invoice with Type: Item, G/L Account, Fixed Asset and Charge (Item)
      CreatePurchaseHeader(PurchaseHeader,Vendor."No.",Currency.Code,PurchaseHeader."Document Type"::Invoice);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",'',Quantity,LibraryRandom.RandDec(10,2),TDSNatureDeduction.Code,
        0);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      // [THEN] Verify TDS related Amount fields in Purchase Line.
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        REPEAT
          CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine,TDSSetup);
          VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    [Test]
    PROCEDURE CheckTDSOnGeneralJournalWithForeignCurrency@1500036();
    VAR
      TDSNatureDeduction@1500010 : Record 13726;
      NODNOCHeader@1500009 : Record 13786;
      AssesseeCode@1500008 : Record 13727;
      TDSSetup@1500007 : Record 13728;
      Currency@1500006 : Record 4;
      Vendor@1500005 : Record 23;
      GenJournalLine@1500004 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      Amount@1500000 : Decimal;
    BEGIN
      //[SCENARIO 64537] Created General Journal using Foreign currency and check TDS related fields
      //[FEATURE] [TDS][General Journal]
      Initialize;

      // [GIVEN] Created Foreign Vendor, Currency, Setup for NODNOC and Assessee Code.
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      CreateCurrencyAndExchangeRate(Currency);
      CreateNonDomesticVendor(Vendor,Currency.Code);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetupCountry(
        TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,
        Vendor."Country/Region Code");
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created General Journal
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,NODNOCHeader."No.",-Amount,TDSNatureDeduction.Code,'');
      CalcExpectedTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS related Amount fields in General Journal Line.
      Assert.AreNearlyEqual(
        GenJournalLine2."Total TDS/TCS Incl. SHE CESS",ABS(GenJournalLine."Total TDS/TCS Incl. SHE CESS"),GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),GenJournalLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CheckTDSOnPurchaseJournalWithForeignCurrency@1500048();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      AssesseeCode@1500003 : Record 13727;
      TDSSetup@1500005 : Record 13728;
      Currency@1500006 : Record 4;
      Vendor@1500014 : Record 23;
      GenJournalLine@1500009 : Record 81;
      GenJournalLine2@1500008 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      Amount@1500000 : Decimal;
    BEGIN
      //[SCENARIO 64537] Created Purchase Journal using Foreign currency and check TDS related fields
      //[FEATURE] [TDS][Purchase Journal]
      Initialize;

      // [GIVEN] Created Foreign Vendor, Currency, Setup for NODNOC and Assessee Code.
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      CreateCurrencyAndExchangeRate(Currency);
      CreateNonDomesticVendor(Vendor,Currency.Code);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetupCountry(
        TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,
        Vendor."Country/Region Code");
      CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",AssesseeCode.Code,TDSNatureDeduction.Code,'');

      // [WHEN] Created Purchase Journal
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,NODNOCHeader."No.",-Amount,
        TDSNatureDeduction.Code);
      CalcExpectedTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS related Amount fields in Purchase Journal Line.
      Assert.AreNearlyEqual(
        GenJournalLine2."Total TDS/TCS Incl. SHE CESS",ABS(GenJournalLine."Total TDS/TCS Incl. SHE CESS"),GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),GenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE Initialize@3();
    BEGIN
      LibraryRandom.SetSeed(1);  // Use Random Number Generator to generate the seed for RANDOM function.

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      GLSetup.GET;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyAndPostPurchaseOrder@4(VAR PurchaseHeader@1023 : Record 38;AppliesToDocumentNo@1024 : Code[20]) : Code[20];
    VAR
      PostedDocumentNo@1025 : Code[20];
    BEGIN
      PurchaseHeader.VALIDATE("Applies-to Doc. Type",PurchaseHeader."Applies-to Doc. Type"::Payment);
      PurchaseHeader.VALIDATE("Applies-to Doc. No.",AppliesToDocumentNo);
      PurchaseHeader.MODIFY(TRUE);

      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      EXIT(PostedDocumentNo)
    END;

    LOCAL PROCEDURE CreateAndPostBankPaymentVoucher@5(Amount@1026 : Decimal;VendorNo@1027 : Code[20];CodeContractor@1028 : Code[10];CodeOthers@1029 : Code[10]) DocumentNo : Code[20];
    VAR
      GenJournalLine@1030 : Record 81;
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Payment,VendorNo,Amount,CodeContractor,CodeOthers);
      DocumentNo := GenJournalLine."Document No.";

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateBankAccount@6() : Code[20];
    VAR
      BankAccount@1032 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreatePaymentLines@1500013(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500001 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500003 : Code[10];BalAccType@1500004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';SubType@1500005 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher');
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      CASE SubType OF
        SubType::"Bank Payment Voucher":
          GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
        SubType::"Cash Payment Voucher":
          GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      END;
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",CreateBankAccount);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@19();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryERM.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      END;
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1033 : Record 81;DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';VendorNo@1034 : Code[20];Amount@1035 : Decimal;CodeContractor@1036 : Code[10];CodeOthers@1037 : Code[10]);
    VAR
      GenJournalBatch@1039 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      IF CodeOthers <> '' THEN BEGIN
        GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
        GenJournalLine.VALIDATE("Bal. Account No.",CreateBankAccount);
      END ELSE BEGIN
        GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
        GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      END;
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Work Tax Nature Of Deduction",CodeOthers);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBatch@1500005(VAR GenJournalLine@1033 : Record 81;DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';JournalTemplateName@1500001 : Code[10];JournalBatchName@1500000 : Code[10];VendorNo@1034 : Code[20];Amount@1035 : Decimal;CodeContractor@1036 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,JournalTemplateName,JournalBatchName,DocumentType,GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseJournalDocument@62(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Type@1001 : Option;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal;CodeContractor@1500000 : Code[10]);
    VAR
      GenJournalTemplate@1500004 : Record 80;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLineWithBatch(
        GenJournalLine,DocumentType,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,VendorNo,Amount,CodeContractor);
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@8(VAR NODNOCHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10];CodeOthers@1045 : Code[10]);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor);
      IF CodeOthers <> '' THEN
        LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeOthers);
      UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type::Vendor);
    END;

    LOCAL PROCEDURE CreateNODNOCSetupWithoutSurcharge@1500025(VAR NODNOCHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10]);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor);
      UpdateThresholdSurcharge(NODNOCLines,NODNOCHeader.Type::Vendor);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@25();
    VAR
      IncomeTaxAccountingPeriod@1000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@22(IncomeTaxAccountingPeriodNo@1000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@9(VAR PurchaseHeader@1047 : Record 38;VAR PurchaseLine@1500000 : Record 39;DocumentType@1500001 : 'Order,Invoice';VendorNo@1048 : Code[20];GLAccountNo@1049 : Code[20];Amount@1050 : Decimal;CodeContractor@1051 : Code[10];CodeOthers@1052 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,1); // Quantity 1 For Test case Type - G/L Account.
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.VALIDATE("Work Tax Nature Of Deduction",CodeOthers);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1500023(VAR PurchaseHeader@1500000 : Record 38;VendorNo@1500004 : Code[20];CurrencyCode@1500003 : Code[10];DocType@1500005 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500020(VAR PurchaseLine@1500000 : Record 39;VAR PurchaseHeader@1500001 : Record 38;Type@1500008 : Option;No@1500002 : Code[20];Quantity@1500003 : Decimal;DirectUnitCost@1500004 : Decimal;TDSNatureOfDeduction@1500005 : Code[10];LineDiscountPercent@1500006 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNatureOfDeduction);
      IF LineDiscountPercent <> 0 THEN
        PurchaseLine.VALIDATE("Line Discount %",LineDiscountPercent);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetup@10(VAR TDSNatureDeduction@1055 : Record 13726;VAR TDSSetup@1500000 : Record 13728;TDSGroup@1056 : Option;AssesseeCode@1057 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      CreateTDSSetUp(TDSSetup,TDSNatureDeduction.Code,AssesseeCode);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetupCountry@1500027(VAR TDSNatureDeduction@1055 : Record 13726;VAR TDSSetup@1500000 : Record 13728;TDSGroup@1056 : Option;AssesseeCode@1057 : Code[10];CountryCode@1500001 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      IF TDSNatureDeduction."TDS Group" = TDSNatureDeduction."TDS Group"::"Payable to Non Residents" THEN BEGIN
        LibraryTDS.CreateTDSSetup(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,TODAY,'','',0,CountryCode);
        TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
        TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
        TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
        TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
        TDSSetup.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTDSSetUp@11(VAR TDSSetup@1060 : Record 13728;TDSNatureDeductionCode@1061 : Code[10];AssesseeCode@1062 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,TODAY,'');
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5)); // Using Random Value for TDS %.
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5)); // Using Random Value for Non PAN TDS %.
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5)); // Using Random Value for Surcharge %.
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5)); // Using Random Value for eCESS %.
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5)); // Using Random Value for SHE Cess %.
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithTAN@1500039(VAR Location@1500000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@12() : Code[20];
    VAR
      Vendor@1063 : Record 23;
      GeneralPostingSetup@1064 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No. is required
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithLocation@1500030(LocationCode@1500000 : Code[10];HasPANApplied@1500001 : Boolean) : Code[20];
    VAR
      Vendor@1063 : Record 23;
      GeneralPostingSetup@1064 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      IF LocationCode <> '' THEN
        Vendor.VALIDATE("Location Code",LocationCode);
      IF HasPANApplied THEN BEGIN
        Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
        Vendor.VALIDATE("P.A.N. Reference No.",
          LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      END ELSE
        Vendor.VALIDATE("P.A.N. No.",'ACFPH4256B');
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateNonDomesticVendor@1500053(VAR Vendor@1500001 : Record 23;CurrencyCode@1500002 : Code[10]);
    VAR
      GeneralPostingSetup@1064 : Record 252;
      CountryRegion@1500000 : Record 9;
    BEGIN
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",'ACFPH4256B');
      Vendor.VALIDATE("Country/Region Code",CountryRegion.Code);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE CreateInitialSetup@1500021(VAR NODNOCHeader@1500000 : Record 13786;VAR TDSNatureDeduction@1500001 : Record 13726;VAR Amount@1500002 : Decimal;HasSurcharge@1500003 : Boolean);
    VAR
      AssesseeCode@1500004 : Record 13727;
      TDSSetup@1500005 : Record 13728;
    BEGIN
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      UpdateTANNoOnCompanyInformation;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      IF HasSurcharge THEN
        CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code,'')
      ELSE
        CreateNODNOCSetupWithoutSurcharge(
          NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendor,AssesseeCode.Code,TDSNatureDeduction.Code);
    END;

    PROCEDURE CreateInitialSetupWithLocation@1500018(VAR NODNOCHeader@1500000 : Record 13786;VAR TDSNatureDeduction@1500001 : Record 13726;VAR Amount@1500002 : Decimal;HasLocation@1500003 : Boolean);
    VAR
      AssesseeCode@1500004 : Record 13727;
      Location@1500005 : Record 14;
      TDSSetup@1500006 : Record 13728;
    BEGIN
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      UpdateTANNoOnCompanyInformation;
      CreateLocationWithTAN(Location);
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSSetup,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code);
      IF HasLocation THEN
        CreateNODNOCSetup(
          NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendorWithLocation(Location.Code,FALSE),AssesseeCode.Code,
          TDSNatureDeduction.Code,'')
      ELSE
        CreateNODNOCSetup(
          NODNOCHeader,NODNOCHeader.Type::Vendor,CreateVendorWithLocation('',FALSE),AssesseeCode.Code,TDSNatureDeduction.Code,'');
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@1500010(VAR Currency@1500001 : Record 4);
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      Currency.MODIFY(TRUE);

      // Create Currency Exchange Rate.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSEntry@1500001 : Record 13729;TDSSetup@1500002 : Record 13728;TaxBaseAmount@1500003 : Decimal;HasPAN@1500000 : Boolean);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        IF HasPAN THEN
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount")
        ELSE
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500042(VAR ExpectedPurchaseLine@1500000 : Record 39;PurchaseLine@1500001 : Record 39;TDSSetup@1500002 : Record 13728);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := PurchaseLine."TDS Base Amount";
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * PurchaseLine.Amount));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmountsforJournalLine@1500040(VAR GenJournalLine@1500003 : Record 81;TDSSetup@1500005 : Record 13728;TaxBaseAmount@1500004 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        "TDS/TCS %" := TDSSetup."TDS %";
        "TDS/TCS Base Amount" := TaxBaseAmount;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS/TCS Base Amount");
        "Surcharge %" := TDSSetup."Surcharge %";
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount");
        "eCESS %" := TDSSetup."eCESS %";
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "Total TDS/TCS Incl. SHE CESS" :=
          "TDS/TCS Amount" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE FindGLAccountNo@13() : Code[20];
    VAR
      GLAccount@1065 : Record 15;
      GeneralPostingSetup@1066 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@14(VAR GLEntry@1067 : Record 17;DocumentType@1068 : Option;DocumentNo@1069 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE GetRequiredDateFromWorkDate@26(Days@1000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@15(VAR NODNOCLines@1070 : Record 13785;Type@1071 : Option);
    BEGIN
      NODNOCLines.SETRANGE("No.",NODNOCLines."No.");
      NODNOCLines.SETRANGE(Type,Type);
      NODNOCLines.FINDSET;
      NODNOCLines.MODIFYALL("Monthly Certificate",TRUE);
      NODNOCLines.MODIFYALL("Threshold Overlook",TRUE);
      NODNOCLines.MODIFYALL("Surcharge Overlook",TRUE);
    END;

    LOCAL PROCEDURE UpdateThresholdSurcharge@1500019(VAR NODNOCLines@1070 : Record 13785;Type@1071 : Option);
    BEGIN
      NODNOCLines.SETRANGE("No.",NODNOCLines."No.");
      NODNOCLines.SETRANGE(Type,Type);
      NODNOCLines.FINDSET;
      NODNOCLines.MODIFYALL("Monthly Certificate",TRUE);
      NODNOCLines.MODIFYALL("Threshold Overlook",FALSE);
      NODNOCLines.MODIFYALL("Surcharge Overlook",FALSE);
    END;

    LOCAL PROCEDURE UpdateTANNoOnCompanyInformation@1500011();
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("T.A.N. No.",'');
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@1500029(GenBusPostingGroup@1002 : Code[10];GenProdPostingGroup@1003 : Code[10]);
    VAR
      GeneralPostingSetup@1000 : Record 252;
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralPostingSetup.GET(GenBusPostingGroup,GenProdPostingGroup);
      GeneralPostingSetup.VALIDATE("Purch. Line Disc. Account",GLAccount."No.");
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralPostingSetup.VALIDATE("Sales Line Disc. Account",GLAccount."No.");
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderStatisticsMPH@1500034(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500018.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE VerifyGLEntry@17(DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1072 : Code[20];Amount@1073 : Decimal);
    VAR
      GLEntry@1074 : Record 17;
      CreditAmount@1075 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountError,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryWithTDS@18(DocumentNo@1077 : Code[20];Amount@1078 : Decimal);
    VAR
      GLEntry@1079 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@32(DocumentNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(ExpectedPurchaseLineTDSValue@1500005 : Record 39;PurchaseLine@1500007 : Record 39);
    BEGIN
       Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."TDS %",PurchaseLine."TDS %",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS %"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Amount",PurchaseLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Base Amount",PurchaseLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS Base Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."eCESS % on TDS",PurchaseLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("eCESS % on TDS"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."eCESS on TDS Amount",PurchaseLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("eCESS on TDS Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess % On TDS",PurchaseLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("SHE Cess % On TDS"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess on TDS Amount",PurchaseLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("SHE Cess on TDS Amount"),PurchaseLine.TABLECAPTION));
       Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."Total TDS Including SHE CESS",PurchaseLine."Total TDS Including SHE CESS",
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("Total TDS Including SHE CESS"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500031(PurchaseLine@1500000 : Record 39;TDSSetup@1500001 : Record 13728);
    BEGIN
      WITH PurchaseLine DO BEGIN
        LibraryVariableStorage.Enqueue(LibraryTDS.RoundTDS("Line Amount" * TDSSetup."TDS %"/100));
        LibraryVariableStorage.Enqueue("Line Amount" - LibraryTDS.RoundTDS("Line Amount" * TDSSetup."TDS %"/100));
      END;

      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceStatistics@1500050(ExpTDSEntry@1500000 : Record 13729;PurchaseLine@1500002 : Record 39;TDSSetup@1500001 : Record 13728);
    BEGIN
      WITH ExpTDSEntry DO BEGIN
        CLEAR(LibraryVariableStorage);
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
        LibraryVariableStorage.Enqueue(PurchaseLine."Line Amount" - "Total TDS Including SHE CESS");
      END;

      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmount@23(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];LineDiscountAmount@1002 : Decimal);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GeneralPostingSetup@1004 : Record 252;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Line Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        -LineDiscountAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        LineDiscountAmount,PurchaseLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Line Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@1500062(Amount@1004 : Decimal;DocumentNo@1002 : Code[20]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(Amount,VendorLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErrorMessage,VendorLedgerEntry.FIELDCAPTION(Amount),Amount,VendorLedgerEntry.TABLECAPTION,
          VendorLedgerEntry.FIELDCAPTION("Entry No."),VendorLedgerEntry."Entry No."));
    END;

    BEGIN
    {
      Test for ERM - With TDS Setup
        1. Create and Post General Journal Lines with TDS Setup.
        2. Create and Post Purchase Order & Apply Payment with TDS Amount.

        Covers Test cases: 281561
        ---------------------------------------------------------------------------------
        Test Function Name                                                         TFS ID
        ---------------------------------------------------------------------------------
        BankPaymentVoucherWithTDSAndWorktax,PurchaseOrderWithApplyVendorEntries    281561
    }
    END.
  }
}

