OBJECT Codeunit 134393 ERM Sales Subform
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySales@1014 : Codeunit 130509;
      LibraryERM@1008 : Codeunit 131300;
      LibraryERMCountryData@1011 : Codeunit 131305;
      LibraryInventory@1012 : Codeunit 132201;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibraryDimension@1016 : Codeunit 131001;
      LibrarySetupStorage@1017 : Codeunit 131009;
      Assert@1009 : Codeunit 130000;
      SalesCalcDiscountByType@1010 : Codeunit 56;
      LibraryUtility@1005 : Codeunit 131000;
      isInitialized@1001 : Boolean;
      ChangeConfirmMsg@1004 : TextConst 'ENU=Do you want';
      ZeroInvMsg@1003 : TextConst 'ENU=is now set to zero because the total has changed';
      CalculateInvoiceDiscountQst@1006 : TextConst 'ENU=Do you want to calculate the invoice discount?';
      QuoteMsg@1013 : TextConst 'ENU=has been changed to order';
      BlanketOrderMsg@1007 : TextConst 'ENU=has been created from blanket order';
      ExternalDocNoErr@1015 : TextConst 'ENU="""External Doc. No."" is not available on the ""Blanket Sales Order"" page"';
      UpdateInvDiscountQst@1019 : TextConst 'ENU=One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?';

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE InvoiceAddingLinesUpdatesTotals@1();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      SalesInvoice@1001 : TestPage 43;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateInvoceWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesInvoice);

      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE InvoiceAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@10();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesInvoice@1002 : TestPage 43;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateInvoceWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesInvoice);

      ValidateInvoiceInvoiceDiscountAmountIsReadOnly(SalesInvoice);
      SalesInvoiceRefreshTotals(SalesInvoice);

      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE InvoiceModifyingLineUpdatesTotalsAndInvDiscTypePct@67();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesInvoice@1002 : TestPage 43;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateInvoceWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesInvoice);

      SalesInvoice.SalesLines.FIRST;
      ItemQuantity := ItemQuantity * 2;
      SalesInvoice.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);

      SalesInvoice.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);

      TotalAmount := 2 * TotalAmount;
      SalesInvoice.SalesLines."Line Amount".SETVALUE(TotalAmount);
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);

      SalesInvoice.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);

      SalesInvoice.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;

      ValidateInvoiceInvoiceDiscountAmountIsReadOnly(SalesInvoice);
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceModifyingLineUpdatesTotalsAndSetsInvDiscTypeAmountToZero@29();
    VAR
      Customer@1009 : Record 18;
      Item@1000 : Record 27;
      SalesInvoice@1002 : TestPage 43;
      ItemQuantity@1001 : Decimal;
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateInvoceWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesInvoice);

      SalesInvoice.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      ItemQuantity := ItemQuantity * 2;
      SalesInvoice.SalesLines.Quantity.SETVALUE(ItemQuantity);
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;

      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);

      SalesInvoice.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE InvioceDiscountTypePercentageIsSetWhenInvoiceIsOpened@66();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesInvoice@1006 : TestPage 43;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesInvoice(SalesHeader,SalesInvoice);

      ValidateInvoiceInvoiceDiscountAmountIsReadOnly(SalesInvoice);
      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE InvioceDiscountTypeAmountIsSetWhenInvoiceIsOpened@91();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesInvoice@1006 : TestPage 43;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);
      SalesInvoice.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@106();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesInvoice@1007 : TestPage 43;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);

      AnswerYesToAllConfirmDialogs;

      SalesInvoice."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesInvoiceRefreshTotals(SalesInvoice);
      ValidateInvoiceInvoiceDiscountAmountIsReadOnly(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@107();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesInvoice@1008 : TestPage 43;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);
      SalesInvoice.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesInvoice."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceChangingSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@101();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesInvoice@1001 : TestPage 43;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);

      AnswerYesToAllConfirmDialogs;
      SalesInvoice."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceModifyindFieldOnHeaderRecalculatesForInvoiceDiscountTypePercentage@8();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesInvoice@1007 : TestPage 43;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustomerDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustomerDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustomerDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);

      AnswerYesToAllConfirmDialogs;
      SalesInvoice."Bill-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesInvoiceRefreshTotals(SalesInvoice);
      ValidateInvoiceInvoiceDiscountAmountIsReadOnly(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@12();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesInvoice@1008 : TestPage 43;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustomerDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustomerDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustomerDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);
      SalesInvoice.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesInvoice."Bill-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesInvoiceRefreshTotals(SalesInvoice);
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    PROCEDURE InvoicePostSalesInvoiceWithDiscountAmount@9();
    VAR
      SalesHeader@1005 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesInvoiceHeader@1003 : Record 112;
      PostedSalesInvoice@1009 : TestPage 132;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NumberOfLines@1008 : Integer;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);

      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",SalesHeader."No.");
      Assert.IsTrue(SalesInvoiceHeader.FINDFIRST,'Posted Invoice was not found');

      PostedSalesInvoice.OPENEDIT;
      PostedSalesInvoice.GOTORECORD(SalesInvoiceHeader);

      CheckPostedInvoiceStatistics(PostedSalesInvoice);
    END;

    [Test]
    PROCEDURE InvoicePostSalesInvoiceWithDiscountPrecentage@27();
    VAR
      SalesHeader@1008 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesInvoiceHeader@1010 : Record 112;
      PostedSalesInvoice@1009 : TestPage 132;
      NumberOfLines@1003 : Integer;
      ItemQuantity@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",SalesHeader."No.");
      Assert.IsTrue(SalesInvoiceHeader.FINDFIRST,'Posted Invoice was not found');

      PostedSalesInvoice.OPENEDIT;
      PostedSalesInvoice.GOTORECORD(SalesInvoiceHeader);

      CheckPostedInvoiceStatistics(PostedSalesInvoice);
    END;

    [Test]
    PROCEDURE InvoiceLocalCurrencySignIsSetOnTotals@73();
    VAR
      Customer@1006 : Record 18;
      SalesInvoice@1009 : TestPage 43;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      SalesInvoice.OPENNEW;

      SalesInvoice."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesInvoice.SalesLines.NEW;

      SalesInvoice.SalesLines.Description.SETVALUE('Test Description');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE InvoiceApplyManualDiscount@25();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesInvoice@1001 : TestPage 43;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateInvoiceWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesInvoice(SalesHeader,SalesInvoice);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      SalesInvoice.CalculateInvoiceDiscount.INVOKE;
      CheckInvoiceStatistics(SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderAddingLinesUpdatesTotals@112();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      SalesOrder@1001 : TestPage 42;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesOrder);

      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@110();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesOrder@1002 : TestPage 42;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesOrder);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderModifyingLineUpdatesTotalsAndInvDiscTypePct@108();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesOrder@1002 : TestPage 42;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesOrder);

      SalesOrder.SalesLines.FIRST;
      ItemQuantity := ItemQuantity * 2;
      SalesOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;
      CheckOrderStatistics(SalesOrder);

      SalesOrder.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;
      CheckOrderStatistics(SalesOrder);

      TotalAmount := 2 * TotalAmount;
      SalesOrder.SalesLines."Line Amount".SETVALUE(TotalAmount);
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;
      CheckOrderStatistics(SalesOrder);

      SalesOrder.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;
      CheckOrderStatistics(SalesOrder);

      SalesOrder.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderModifyingLineUpdatesTotalsAndSetsInvDiscTypeAmountToZero@104();
    VAR
      Customer@1009 : Record 18;
      Item@1000 : Record 27;
      SalesOrder@1002 : TestPage 42;
      ItemQuantity@1001 : Decimal;
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesOrder);

      SalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      ItemQuantity := ItemQuantity * 2;
      SalesOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
      SalesOrder.SalesLines.NEXT;
      SalesOrder.SalesLines.FIRST;

      CheckOrderStatistics(SalesOrder);

      SalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderChangingSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@95();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesOrder@1001 : TestPage 42;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);

      AnswerYesToAllConfirmDialogs;
      SalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");
      SalesOrderRefreshTotals(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderDiscountTypePercentageIsSetWhenInvoiceIsOpened@103();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesOrder@1006 : TestPage 42;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesOrder(SalesHeader,SalesOrder);
      SalesOrderRefreshTotals(SalesOrder);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderDiscountTypeAmountIsSetWhenInvoiceIsOpened@102();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesOrder@1006 : TestPage 42;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);
      SalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@100();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesOrder@1007 : TestPage 42;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);

      AnswerYesToAllConfirmDialogs;

      SalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");
      SalesOrderRefreshTotals(SalesOrder);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@99();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesOrder@1008 : TestPage 42;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);
      SalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");
      SalesOrderRefreshTotals(SalesOrder);

      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderModifyindFieldOnHeaderUpdatesTotalsAndDiscountsForInvoiceDiscountTypePercentage@88();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1011 : Record 27;
      Customer@1002 : Record 18;
      SalesOrder@1010 : TestPage 42;
      NumberOfLines@1009 : Integer;
      ItemQuantity@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesOrder(SalesHeader,SalesOrder);

      AnswerYesToConfirmDialog;
      SalesOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);
      SalesOrderRefreshTotals(SalesOrder);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@87();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesOrder@1005 : TestPage 42;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);
      SalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToConfirmDialog;
      SalesOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);
      SalesOrderRefreshTotals(SalesOrder);

      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    PROCEDURE OrderPostSalesInvoiceWithDiscountAmount@84();
    VAR
      SalesHeader@1005 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesInvoiceHeader@1003 : Record 112;
      PostedSalesInvoice@1009 : TestPage 132;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NumberOfLines@1008 : Integer;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
      SalesHeader.VALIDATE(Invoice,TRUE);
      SalesHeader.VALIDATE(Ship,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesInvoiceHeader.SETFILTER("Order No.",SalesHeader."No.");
      Assert.IsTrue(SalesInvoiceHeader.FINDFIRST,'Posted Order was not found');

      PostedSalesInvoice.OPENEDIT;
      PostedSalesInvoice.GOTORECORD(SalesInvoiceHeader);

      CheckPostedInvoiceStatistics(PostedSalesInvoice);
    END;

    [Test]
    PROCEDURE OrderPostSalesInvoiceWithDiscountPrecentage@81();
    VAR
      SalesHeader@1008 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesInvoiceHeader@1010 : Record 112;
      PostedSalesInvoice@1009 : TestPage 132;
      NumberOfLines@1003 : Integer;
      ItemQuantity@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      SalesHeader.VALIDATE(Invoice,TRUE);
      SalesHeader.VALIDATE(Ship,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesInvoiceHeader.SETFILTER("Order No.",SalesHeader."No.");
      Assert.IsTrue(SalesInvoiceHeader.FINDFIRST,'Posted Order was not found');

      PostedSalesInvoice.OPENEDIT;
      PostedSalesInvoice.GOTORECORD(SalesInvoiceHeader);

      CheckPostedInvoiceStatistics(PostedSalesInvoice);
    END;

    [Test]
    PROCEDURE OrderSetLocalCurrencySignOnTotals@79();
    VAR
      Customer@1006 : Record 18;
      SalesOrder@1000 : TestPage 42;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      SalesOrder.OPENNEW;

      SalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesOrder.SalesLines.NEW;

      SalesOrder.SalesLines.Description.SETVALUE('Test Description');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE OrderApplyManualDiscount@250();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesOrder@1001 : TestPage 42;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesOrder(SalesHeader,SalesOrder);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      SalesOrder.CalculateInvoiceDiscount.INVOKE;
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE QuoteAddingLinesUpdatesTotals@40();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      SalesQuote@1001 : TestPage 41;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateQuoteWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesQuote);

      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE QuoteAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@39();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesQuote@1002 : TestPage 41;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateQuoteWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesQuote);

      ValidateQuoteInvoiceDiscountAmountIsReadOnly(SalesQuote);
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE QuoteModifyingLineUpdatesTotalsAndInvDiscTypePct@38();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesQuote@1002 : TestPage 41;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateQuoteWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesQuote);

      ItemQuantity := ItemQuantity * 2;
      SalesQuote.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);

      SalesQuote.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);

      TotalAmount := 2 * TotalAmount;
      SalesQuote.SalesLines."Line Amount".SETVALUE(TotalAmount);
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);

      SalesQuote.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);

      SalesQuote.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;

      ValidateQuoteInvoiceDiscountAmountIsReadOnly(SalesQuote);
      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE QuoteDiscountTypePercentageIsSetWhenInvoiceIsOpened@36();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesQuote@1002 : TestPage 41;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesQuote(SalesHeader,SalesQuote);

      SalesQuoteRefreshTotals(SalesQuote);
      ValidateQuoteInvoiceDiscountAmountIsReadOnly(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE QuoteDiscountTypeAmountIsSetWhenInvoiceIsOpened@35();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesQuote@1001 : TestPage 41;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);
      SalesQuote.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE QuoteChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@32();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesQuote@1005 : TestPage 41;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);

      AnswerYesToAllConfirmDialogs;
      SalesQuote."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesQuoteRefreshTotals(SalesQuote);
      ValidateQuoteInvoiceDiscountAmountIsReadOnly(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE QuoteChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@30();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesQuote@1005 : TestPage 41;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);
      SalesQuote.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesQuote."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE QuoteChangingSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@49();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesQuote@1001 : TestPage 41;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);

      AnswerYesToAllConfirmDialogs;
      SalesQuote."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE QuoteModifyindFieldOnHeaderUpdatesTotalsAndDiscountsForInvoiceDiscountTypePercentage@22();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1011 : Record 27;
      Customer@1002 : Record 18;
      SalesLine@1001 : Record 37;
      SalesQuote@1003 : TestPage 41;
      NumberOfLines@1009 : Integer;
      ItemQuantity@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesQuote(SalesHeader,SalesQuote);

      AnswerYesToConfirmDialog;
      SalesQuote."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesQuoteRefreshTotals(SalesQuote);
      ValidateQuoteInvoiceDiscountAmountIsReadOnly(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE QuoteModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@21();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesLine@1002 : Record 37;
      SalesQuote@1006 : TestPage 41;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);
      SalesQuote.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesQuote."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesQuoteRefreshTotals(SalesQuote);
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,QuoteConvertedMessageHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE QuoteMakeOrderDiscountTypePercentageIsKept@13();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesQuote@1002 : TestPage 41;
      SalesOrder@1006 : TestPage 42;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesQuote(SalesHeader,SalesQuote);
      SalesQuoteRefreshTotals(SalesQuote);

      AnswerYesToAllConfirmDialogs;
      SalesQuote."Make Order".INVOKE;

      SalesHeader.RESET;
      SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesHeader.FINDFIRST;

      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    PROCEDURE QuoteSetLocalCurrencySignOnTotals@89();
    VAR
      Customer@1006 : Record 18;
      SalesQuote@1009 : TestPage 41;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      SalesQuote.OPENNEW;

      SalesQuote."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesQuote.SalesLines.NEW;

      SalesQuote.SalesLines.Description.SETVALUE('Test Description');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE QuoteApplyManualDiscount@251();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesQuote@1001 : TestPage 41;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateQuoteWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesQuote(SalesHeader,SalesQuote);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      SalesQuote.CalculateInvoiceDiscount.INVOKE;
      CheckQuoteStatistics(SalesQuote);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderAddingLinesUpdatesTotals@134();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      BlanketSalesOrder@1001 : TestPage 507;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateBlanketOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@133();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      BlanketSalesOrder@1002 : TestPage 507;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateBlanketOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,BlanketSalesOrder);

      ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly(BlanketSalesOrder);

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderModifyingLineUpdatesTotalsAndInvDiscTypePct@132();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      BlanketSalesOrder@1002 : TestPage 507;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateBlanketOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,BlanketSalesOrder);

      ItemQuantity := ItemQuantity * 2;
      BlanketSalesOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);

      BlanketSalesOrder.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);

      TotalAmount := 2 * TotalAmount;
      BlanketSalesOrder.SalesLines."Line Amount".SETVALUE(TotalAmount);
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);

      BlanketSalesOrder.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);

      BlanketSalesOrder.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderDiscountTypePercentageIsSetWhenInvoiceIsOpened@131();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      BlanketSalesOrder@1006 : TestPage 507;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderDiscountTypeAmountIsSetWhenInvoiceIsOpened@130();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      BlanketSalesOrder@1001 : TestPage 507;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);
      BlanketSalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrdereChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@128();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      BlanketSalesOrder@1005 : TestPage 507;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);

      AnswerYesToAllConfirmDialogs;
      BlanketSalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@127();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      BlanketSalesOrder@1005 : TestPage 507;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);
      BlanketSalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      BlanketSalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderChangeSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@126();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      BlanketSalesOrder@1001 : TestPage 507;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);

      AnswerYesToAllConfirmDialogs;
      BlanketSalesOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderModifyindFieldOnHeaderUpdatesTotalsAndDiscountsForInvoiceDiscountTypePercentage@123();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1011 : Record 27;
      Customer@1002 : Record 18;
      SalesLine@1001 : Record 37;
      BlanketSalesOrder@1003 : TestPage 507;
      NumberOfLines@1009 : Integer;
      ItemQuantity@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);

      AnswerYesToConfirmDialog;
      BlanketSalesOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@122();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesLine@1002 : Record 37;
      BlanketSalesOrder@1005 : TestPage 507;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);
      BlanketSalesOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      BlanketSalesOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,BlanketOrderConvertedMessageHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderMakeOrderDiscountTypePercentageIsKept@121();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      BlanketSalesOrder@1002 : TestPage 507;
      SalesOrder@1006 : TestPage 42;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);

      AnswerYesToAllConfirmDialogs;
      BlanketSalesOrder.MakeOrder.INVOKE;

      SalesHeader.RESET;
      SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesHeader.FINDFIRST;

      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);

      ValidateOrderInvoiceDiscountAmountIsReadOnly(SalesOrder);
      CheckOrderStatistics(SalesOrder);
    END;

    [Test]
    PROCEDURE BlanketOrderSetLocalCurrencySignOnTotals@120();
    VAR
      Customer@1006 : Record 18;
      BlanketSalesOrder@1000 : TestPage 507;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      BlanketSalesOrder.OPENNEW;

      BlanketSalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      BlanketOrderCheckCurrencyOnTotals(BlanketSalesOrder,Customer."Currency Code");

      BlanketSalesOrder.SalesLines.NEW;
      BlanketOrderCheckCurrencyOnTotals(BlanketSalesOrder,Customer."Currency Code");

      BlanketSalesOrder.SalesLines.Description.SETVALUE('Test Description');
      BlanketOrderCheckCurrencyOnTotals(BlanketSalesOrder,Customer."Currency Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE BlanketOrderApplyManualDiscount@252();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      BlanketSalesOrder@1001 : TestPage 507;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateBlanketOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenBlanketOrder(SalesHeader,BlanketSalesOrder);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      BlanketSalesOrder.CalculateInvoiceDiscount.INVOKE;
      CheckBlanketOrderStatistics(BlanketSalesOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderAddingLinesUpdatesTotals@172();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      SalesReturnOrder@1001 : TestPage 6630;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateReturnOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@171();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesReturnOrder@1003 : TestPage 6630;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateReturnOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesReturnOrder);

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      ValidateReturnOrderInvoiceDiscountAmountIsReadOnly(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderModifyingLineUpdatesTotalsAndInvDiscTypePct@170();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesReturnOrder@1005 : TestPage 6630;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateReturnOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesReturnOrder);

      SalesReturnOrder.SalesLines.FIRST;
      ItemQuantity := ItemQuantity * 2;
      SalesReturnOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;
      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);

      SalesReturnOrder.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;
      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);

      TotalAmount := 2 * TotalAmount;
      SalesReturnOrder.SalesLines."Line Amount".SETVALUE(TotalAmount);
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;
      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);

      SalesReturnOrder.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;
      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);

      SalesReturnOrder.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      ValidateReturnOrderInvoiceDiscountAmountIsReadOnly(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderModifyingLineUpdatesTotalsAndSetsInvDiscTypeAmountToZero@169();
    VAR
      Customer@1009 : Record 18;
      Item@1000 : Record 27;
      SalesReturnOrder@1004 : TestPage 6630;
      ItemQuantity@1001 : Decimal;
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateReturnOrderWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesReturnOrder);

      SalesReturnOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      ItemQuantity := ItemQuantity * 2;
      SalesReturnOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);

      SalesReturnOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderDiscountTypePercentageIsSetWhenInvoiceIsOpened@168();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesReturnOrder@1002 : TestPage 6630;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderDiscountTypeAmountIsSetWhenInvoiceIsOpened@167();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesReturnOrder@1001 : TestPage 6630;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);
      SalesReturnOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@165();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesReturnOrder@1005 : TestPage 6630;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);

      AnswerYesToAllConfirmDialogs;

      SalesReturnOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      ValidateReturnOrderInvoiceDiscountAmountIsReadOnly(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@164();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesReturnOrder@1005 : TestPage 6630;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);
      SalesReturnOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesReturnOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderChangeSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@163();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesReturnOrder@1001 : TestPage 6630;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);

      AnswerYesToAllConfirmDialogs;
      SalesReturnOrder."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderModifyindFieldOnHeaderUpdatesTotalsAndDiscountsForInvoiceDiscountTypePercentage@160();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1011 : Record 27;
      Customer@1002 : Record 18;
      SalesLine@1001 : Record 37;
      SalesReturnOrder@1003 : TestPage 6630;
      NumberOfLines@1009 : Integer;
      ItemQuantity@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);

      AnswerYesToConfirmDialog;
      SalesReturnOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      ValidateReturnOrderInvoiceDiscountAmountIsReadOnly(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@159();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesLine@1002 : Record 37;
      SalesReturnOrder@1006 : TestPage 6630;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);
      SalesReturnOrder.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToConfirmDialog;
      SalesReturnOrder."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    PROCEDURE ReturnOrderPostInvoiceDiscountAmount@158();
    VAR
      SalesHeader@1005 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesCrMemoHeader@1003 : Record 114;
      PostedSalesCreditMemo@1009 : TestPage 134;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NumberOfLines@1008 : Integer;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
      SalesHeader.VALIDATE(Invoice,TRUE);
      SalesHeader.VALIDATE(Receive,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesCrMemoHeader.SETFILTER("Sell-to Customer No.",Customer."No.");
      Assert.IsTrue(SalesCrMemoHeader.FINDFIRST,'Posted ReturnOrder was not found');

      PostedSalesCreditMemo.OPENEDIT;
      PostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);
      CheckPostedCreditMemoStatistics(PostedSalesCreditMemo);
    END;

    [Test]
    PROCEDURE ReturnOrderPostInvoiceDiscountPrecentage@157();
    VAR
      SalesHeader@1008 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesCrMemoHeader@1005 : Record 114;
      PostedSalesCreditMemo@1004 : TestPage 134;
      NumberOfLines@1003 : Integer;
      ItemQuantity@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      SalesHeader.VALIDATE(Invoice,TRUE);
      SalesHeader.VALIDATE(Receive,TRUE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesCrMemoHeader.SETFILTER("Sell-to Customer No.",Customer."No.");
      Assert.IsTrue(SalesCrMemoHeader.FINDFIRST,'Posted ReturnOrder was not found');

      PostedSalesCreditMemo.OPENEDIT;
      PostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);

      CheckPostedCreditMemoStatistics(PostedSalesCreditMemo);
    END;

    [Test]
    PROCEDURE ReturnOrderSetLocalCurrencySignOnTotals@156();
    VAR
      Customer@1006 : Record 18;
      SalesReturnOrder@1000 : TestPage 6630;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      SalesReturnOrder.OPENNEW;

      SalesReturnOrder."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesReturnOrder.SalesLines.NEW;

      SalesReturnOrder.SalesLines.Description.SETVALUE('Test Description');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesOrderStatisticsModalHandler)]
    PROCEDURE ReturnOrderApplyManualDiscount@253();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesReturnOrder@1001 : TestPage 6630;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateReturnOrderWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesReturnOrder(SalesHeader,SalesReturnOrder);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      SalesReturnOrder.CalculateInvoiceDiscount.INVOKE;
      CheckReturnOrderStatistics(SalesReturnOrder);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoAddingLinesUpdatesTotals@62();
    VAR
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      SalesCreditMemo@1001 : TestPage 44;
      ItemQuantity@1000 : Decimal;
      ItemUnitPrice@1004 : Decimal;
    BEGIN
      Initialize;
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      ItemUnitPrice := LibraryRandom.RandDecInRange(1,100,2);

      CreateCustomer(Customer);
      CreateItem(Item,ItemUnitPrice);

      CreateCreditMemoWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesCreditMemo);

      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@61();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      SalesCreditMemo@1003 : TestPage 44;
      ItemQuantity@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateCreditMemoWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesCreditMemo);

      ValidateCreditMemoInvoiceDiscountAmountIsReadOnly(SalesCreditMemo);
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoModifyingLineUpdatesTotalsAndInvDiscTypePct@60();
    VAR
      Item@1000 : Record 27;
      Customer@1007 : Record 18;
      UnitOfMeasure@1002 : Record 204;
      ItemUOM@1006 : Record 5404;
      SalesCreditMemo@1005 : TestPage 44;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateCreditMemoWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesCreditMemo);

      ItemQuantity := ItemQuantity * 2;
      SalesCreditMemo.SalesLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Price";
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);

      SalesCreditMemo.SalesLines."Unit Price".SETVALUE(2 * Item."Unit Price");
      TotalAmount := 2 * TotalAmount;
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);

      UnitOfMeasure.INIT;
      UnitOfMeasure.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(UnitOfMeasure.FIELDNO(Code),DATABASE::"Unit of Measure"));
      UnitOfMeasure.INSERT;

      ItemUOM.INIT;
      ItemUOM.VALIDATE("Item No.",Item."No.");
      ItemUOM.VALIDATE(Code,UnitOfMeasure.Code);
      ItemUOM.VALIDATE("Qty. per Unit of Measure",5);
      ItemUOM.INSERT;
      SalesCreditMemo.SalesLines."Unit of Measure Code".SETVALUE(ItemUOM.Code);
      TotalAmount := ItemQuantity * Item."Unit Price" * 5;
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);

      TotalAmount := 2 * TotalAmount;
      SalesCreditMemo.SalesLines."Line Amount".SETVALUE(TotalAmount);
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);

      SalesCreditMemo.SalesLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);

      SalesCreditMemo.SalesLines."No.".SETVALUE('');
      TotalAmount := 0;
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      ValidateCreditMemoInvoiceDiscountAmountIsReadOnly(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoInvioceDiscountTypePercentageIsSetWhenInvoiceIsOpened@58();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesCreditMemo@1002 : TestPage 44;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      ValidateCreditMemoInvoiceDiscountAmountIsReadOnly(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoInvioceDiscountTypeAmountIsSetWhenInvoiceIsOpened@57();
    VAR
      SalesHeader@1003 : Record 36;
      Item@1004 : Record 27;
      Customer@1008 : Record 18;
      SalesCreditMemo@1001 : TestPage 44;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);
      SalesCreditMemo.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoChangingSellToCustomerRecalculatesForInvoiceDiscountTypePercentage@53();
    VAR
      SalesHeader@1009 : Record 36;
      Item@1008 : Record 27;
      Customer@1001 : Record 18;
      NewCustomer@1010 : Record 18;
      SalesCreditMemo@1005 : TestPage 44;
      NumberOfLines@1006 : Integer;
      ItemQuantity@1003 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);

      AnswerYesToAllConfirmDialogs;

      SalesCreditMemo."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      ValidateCreditMemoInvoiceDiscountAmountIsReadOnly(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoChangingSellToCustomerSetsDiscountToZeroForInvoiceDiscountTypeAmount@51();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesCreditMemo@1005 : TestPage 44;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateCustomerWithDiscount(NewCustomer,NewCustDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);
      SalesCreditMemo.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToAllConfirmDialogs;
      SalesCreditMemo."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoChangeSellToCustomerToCustomerWithoutDiscountsSetDiscountAndCustDiscPctToZero@50();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      NewCustomer@1000 : Record 18;
      SalesCreditMemo@1001 : TestPage 44;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      CreateCustomer(NewCustomer);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);

      AnswerYesToAllConfirmDialogs;
      SalesCreditMemo."Sell-to Customer No.".SETVALUE(NewCustomer."No.");

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoModifyindFieldOnHeaderUpdatesTotalsAndDiscountsForInvoiceDiscountTypePercentage@47();
    VAR
      SalesHeader@1012 : Record 36;
      Item@1011 : Record 27;
      Customer@1002 : Record 18;
      SalesLine@1001 : Record 37;
      SalesCreditMemo@1003 : TestPage 44;
      NumberOfLines@1009 : Integer;
      ItemQuantity@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);

      AnswerYesToConfirmDialog;
      SalesCreditMemo."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      ValidateCreditMemoInvoiceDiscountAmountIsReadOnly(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,InvoiceDiscountAmountSetToZeroHander,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoModifyindFieldOnHeaderSetsDiscountToZeroForInvoiceDiscountTypeAmount@41();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesLine@1002 : Record 37;
      SalesCreditMemo@1005 : TestPage 44;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);
      SalesCreditMemo.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToConfirmDialog;
      SalesCreditMemo."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;

      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoPostInvoiceDiscountAmount@20();
    VAR
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesCrMemoHeader@1005 : Record 114;
      SalesCreditMemo@1003 : TestPage 44;
      PostedSalesCreditMemo@1004 : TestPage 134;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Customer,InvoiceDiscountAmount);

      CreateCreditMemoWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesCreditMemo);
      SalesCreditMemo.SalesLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      AnswerYesToConfirmDialog;
      SalesCreditMemo.Post.INVOKE;

      SalesCrMemoHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesCrMemoHeader.FINDLAST;

      PostedSalesCreditMemo.OPENEDIT;
      PostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);

      CheckPostedCreditMemoStatistics(PostedSalesCreditMemo);
    END;

    [Test]
    PROCEDURE CreditMemoPostInvoiceDiscountPrecentage@18();
    VAR
      SalesHeader@1008 : Record 36;
      Item@1007 : Record 27;
      Customer@1006 : Record 18;
      SalesCrMemoHeader@1010 : Record 114;
      PostedSalesCreditMemo@1009 : TestPage 134;
      NumberOfLines@1003 : Integer;
      ItemQuantity@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);

      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);

      SalesCrMemoHeader.SETFILTER("Pre-Assigned No.",SalesHeader."No.");
      Assert.IsTrue(SalesCrMemoHeader.FINDFIRST,'Posted CreditMemo was not found');

      PostedSalesCreditMemo.OPENEDIT;
      PostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);

      CheckPostedCreditMemoStatistics(PostedSalesCreditMemo);
    END;

    [Test]
    PROCEDURE CreditMemoSetLocalCurrencySignOnTotals@90();
    VAR
      Customer@1006 : Record 18;
      SalesCreditMemo@1009 : TestPage 44;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Currency Code" := GetDifferentCurrencyCode;
      Customer.MODIFY(TRUE);
      SalesCreditMemo.OPENNEW;

      SalesCreditMemo."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesCreditMemo.SalesLines.NEW;

      SalesCreditMemo.SalesLines.Description.SETVALUE('Test Description');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SalesStatisticsModalHandler)]
    PROCEDURE CreditMemoApplyManualDiscount@254();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      SalesCreditMemo@1001 : TestPage 44;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      SetAllowManualDisc;

      CreateCreditMemoWithRandomNumberOfLines(SalesHeader,Item,Customer,ItemQuantity,NumberOfLines);
      OpenSalesCreditMemo(SalesHeader,SalesCreditMemo);

      LibraryVariableStorage.Enqueue(CalculateInvoiceDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      SalesCreditMemo.CalculateInvoiceDiscount.INVOKE;
      CheckCreditMemoStatistics(SalesCreditMemo);
    END;

    [Test]
    PROCEDURE ExternalDocNoBlanketSalesOrderPage@16();
    VAR
      BlanketSalesOrder@1000 : TestPage 507;
    BEGIN
      // [FEATURE] [Blanket Order] [Sales]
      // [SCENARIO 375875] Blanket Sales Order Page should have "External Document No." enabled
      Initialize;

      BlanketSalesOrder.TRAP;
      BlanketSalesOrder.OPENNEW;

      Assert.IsTrue(BlanketSalesOrder."External Document No.".ENABLED,ExternalDocNoErr);
    END;

    [Test]
    PROCEDURE DimensionSetTreeNodeOnCalculatingTotals@28();
    VAR
      SalesHeader@1010 : Record 36;
      Item@1009 : Record 27;
      Customer@1003 : Record 18;
      DimSetTreeNode@1002 : Record 481;
      SalesCreditMemo@1004 : TestPage 44;
      GLAccountNo@1000 : Code[20];
      ItemQuantity@1001 : Decimal;
      DimValueID@1005 : Integer;
    BEGIN
      // [FEATURE] [Totals] [Dimension]
      // [SCENARIO 376946] No Dimension Set Tree Node should be created on calculating Totals
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      // [GIVEN] Sales Credit Memo with Invoice Discount but not Dimensions
      GLAccountNo := CreateGLAccountForInvoiceRounding(Customer."Customer Posting Group");

      CreateCreditMemoWithOneLineThroughTestPage(Customer,Item,ItemQuantity,SalesCreditMemo);

      SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.FINDFIRST;
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [GIVEN] Create Default Dimension "D" on invoice rounding G/L Account
      DimValueID := CreateDimOnGLAccount(GLAccountNo);

      // [WHEN] Calculate Totals by Open Sales Credit Memo Page
      SalesCreditMemo.CLOSE;
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.GOTORECORD(SalesHeader);
      SalesCreditMemo.CLOSE;

      // [THEN] No Dimension Set Tree Node is created for "D"
      DimSetTreeNode.INIT; // PreCAL trick
      DimSetTreeNode.SETRANGE("Dimension Value ID",DimValueID);
      Assert.RecordIsEmpty(DimSetTreeNode);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DeclineConfirmationOnChangingInvDiscountAmountInSalesOrderWithPostedLine@24();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 208219] When a line of Sales Order is posted and "Inv. Discount Amount" is updated at subpage, then confirmation appears. If confirmation is declined, then "Inv. Discount Amount" is not changed.

      Initialize;

      // [GIVEN] Sales Order with 2 lines
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Line 1 has "Qty. to Ship" = "Qty. to Invoice" = "Quantity"
      CreateItem(Item,LibraryRandom.RandIntInRange(100,1000));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);

      // [GIVEN] Sales Line 2 has "Qty. to Ship" = "Qty. to Invoice" = 0
      CreateItem(Item,LibraryRandom.RandIntInRange(100,1000));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Sales Line 1 is posted
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [GIVEN] "Inv. Discount Amount" is updated in Sales Order Subform
      LibraryVariableStorage.Enqueue(UpdateInvDiscountQst);
      LibraryVariableStorage.Enqueue(FALSE);
      SetInvDiscAmountInSalesOrderSubPage(SalesHeader."No.");

      // [GIVEN] Confirmation appears: "One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?"
      // Message check is performed in Confirm handler

      // [WHEN] Confirmation declined
      // FALSE is passed to Confirm handler

      // [THEN] "Inv. Discount Amount" is not changed
      VerifyInvDiscAmountInSalesOrderSubpage(SalesHeader."No.",0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE AceptConfirmationOnChangingInvDiscountAmountInSalesOrderWithPostedLine@37();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      InvDiscountAmount@1004 : Integer;
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 208219] When a line of Sales Order is posted and "Inv. Discount Amount" is updated at subpage, then confirmation appears. If confirmation is acepted, then "Inv. Discount Amount" is changed.

      Initialize;

      // [GIVEN] Sales Order with 2 lines
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Line 1 has "Qty. to Ship" = "Qty. to Invoice" = "Quantity"
      CreateItem(Item,LibraryRandom.RandIntInRange(100,1000));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);

      // [GIVEN] Sales Line 2 has "Qty. to Ship" = "Qty. to Invoice" = 0
      CreateItem(Item,LibraryRandom.RandIntInRange(100,1000));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Sales Line 1 is posted
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [GIVEN] "Inv. Discount Amount" is updated in Sales Order Subform
      LibraryVariableStorage.Enqueue(UpdateInvDiscountQst);
      LibraryVariableStorage.Enqueue(TRUE);
      InvDiscountAmount := SetInvDiscAmountInSalesOrderSubPage(SalesHeader."No.");

      // [GIVEN] Confirmation appears: "One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?"
      // Message check is performed in Confirm handler

      // [WHEN] Confirmation acepted
      // TRUE is passed to Confirm handler

      // [THEN] "Inv. Discount Amount" is changed
      VerifyInvDiscAmountInSalesOrderSubpage(SalesHeader."No.",InvDiscountAmount);
    END;

    [Test]
    PROCEDURE NoConfirmationOnChangingInvDiscountAmountInSalesOrderWithoutPostedLines@31();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      InvDiscountAmount@1004 : Integer;
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 208219] When a line of Sales Order is posted and "Inv. Discount Amount" is updated at subpage, then confirmation appears

      Initialize;

      // [GIVEN] Sales Order
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);

      // [GIVEN] Sales Line has "Qty. to Ship" = "Qty. to Invoice" = "Quantity"
      CreateItem(Item,LibraryRandom.RandIntInRange(100,1000));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);

      // [WHEN] "Inv. Discount Amount" is updated in Sales Order Subform
      InvDiscountAmount := SetInvDiscAmountInSalesOrderSubPage(SalesHeader."No.");

      // [THEN] No confirmation appears and "Inv. Discount Amount" is changed
      // No Confirm handler is risen
      VerifyInvDiscAmountInSalesOrderSubpage(SalesHeader."No.",InvDiscountAmount);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      SalesSetup@1002 : Record 311;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;

      SalesSetup.GET;
      SalesSetup."Stockout Warning" := FALSE;
      SalesSetup."Calc. Inv. Discount" := TRUE;
      SalesSetup.MODIFY;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomerWithDiscount@19(VAR Customer@1003 : Record 18;DiscPct@1002 : Decimal;minAmount@1001 : Decimal);
    BEGIN
      CreateCustomer(Customer);
      AddInvoiceDiscToCustomer(Customer,minAmount,DiscPct);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomer@7(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.Name := Customer."No.";
      Customer.MODIFY;
    END;

    LOCAL PROCEDURE CreateItem@44(VAR Item@1000 : Record 27;UnitPrice@1001 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item."Unit Price" := UnitPrice;
      Item.MODIFY;
    END;

    LOCAL PROCEDURE CheckInvoiceStatistics@97(SalesInvoice@1003 : TestPage 43);
    BEGIN
      SalesInvoiceRefreshTotals(SalesInvoice);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SalesInvoice.SalesLines."Invoice Discount Amount".ASDECIMAL);
      SalesInvoice.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckOrderStatistics@17(SalesOrder@1003 : TestPage 42);
    BEGIN
      SalesOrderRefreshTotals(SalesOrder);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SalesOrder.SalesLines."Invoice Discount Amount".ASDECIMAL);
      SalesOrder.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckQuoteStatistics@78(SalesQuote@1003 : TestPage 41);
    BEGIN
      SalesQuoteRefreshTotals(SalesQuote);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SalesQuote.SalesLines."Invoice Discount Amount".ASDECIMAL);
      SalesQuote.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckBlanketOrderStatistics@136(BlanketSalesOrder@1000 : TestPage 507);
    BEGIN
      BlanketSalesOrderRefreshTotals(BlanketSalesOrder);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(BlanketSalesOrder.SalesLines."Invoice Discount Amount".ASDECIMAL);
      LibraryVariableStorage.Enqueue(BlanketSalesOrder.SalesLines."Total Amount Incl. VAT".ASDECIMAL);
      LibraryVariableStorage.Enqueue(BlanketSalesOrder.SalesLines."Total VAT Amount".ASDECIMAL);
      BlanketSalesOrder.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckReturnOrderStatistics@173(SalesReturnOrder@1003 : TestPage 6630);
    BEGIN
      SalesReturnOrderRefreshTotals(SalesReturnOrder);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SalesReturnOrder.SalesLines."Invoice Discount Amount".ASDECIMAL);
      SalesReturnOrder.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckCreditMemoStatistics@82(SalesCreditMemo@1003 : TestPage 44);
    BEGIN
      SalesCreditMemoRefreshTotals(SalesCreditMemo);
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SalesCreditMemo.SalesLines."Invoice Discount Amount".ASDECIMAL);
      SalesCreditMemo.Statistics.INVOKE; // opens the statistics page an code "jumps" to modal page handler
    END;

    LOCAL PROCEDURE CheckPostedInvoiceStatistics@3(PostedSalesInvoice@1003 : TestPage 132);
    VAR
      SalesInvoiceStatistics@1000 : TestPage 397;
    BEGIN
      SalesInvoiceStatistics.TRAP;
      PostedSalesInvoice.Statistics.INVOKE; // opens the non modal statistics page

      Assert.AreNearlyEqual(PostedSalesInvoice.SalesInvLines."Invoice Discount Amount".ASDECIMAL,
        SalesInvoiceStatistics.InvDiscAmount.ASDECIMAL,0.1,'Invoice Discount Amount is not correct');
    END;

    LOCAL PROCEDURE CheckPostedCreditMemoStatistics@96(PostedSalesCreditMemo@1003 : TestPage 134);
    VAR
      SalesCreditMemoStatistics@1000 : TestPage 398;
    BEGIN
      SalesCreditMemoStatistics.TRAP;
      PostedSalesCreditMemo.Statistics.INVOKE; // opens the statistics non modal page

      Assert.AreNearlyEqual(PostedSalesCreditMemo.SalesCrMemoLines."Invoice Discount Amount".ASDECIMAL,
        SalesCreditMemoStatistics.InvDiscAmount.ASDECIMAL,0.1,'Invoice Discount Amount is not correct');
    END;

    LOCAL PROCEDURE ValidateOrderInvoiceDiscountAmountIsReadOnly@135(VAR SalesOrder@1000 : TestPage 42);
    BEGIN
      Assert.IsFalse(SalesOrder.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE ValidateInvoiceInvoiceDiscountAmountIsReadOnly@33(VAR SalesInvoice@1000 : TestPage 43);
    BEGIN
      Assert.IsFalse(SalesInvoice.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE ValidateQuoteInvoiceDiscountAmountIsReadOnly@146(VAR SalesQuote@1000 : TestPage 41);
    BEGIN
      Assert.IsFalse(SalesQuote.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE ValidateCreditMemoInvoiceDiscountAmountIsReadOnly@144(VAR SalesCreditMemo@1000 : TestPage 44);
    BEGIN
      Assert.IsFalse(SalesCreditMemo.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE ValidateBlanketOrderInvoiceDiscountAmountIsReadOnly@145(VAR BlanketSalesOrder@1000 : TestPage 507);
    BEGIN
      Assert.IsFalse(BlanketSalesOrder.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE ValidateReturnOrderInvoiceDiscountAmountIsReadOnly@147(VAR SalesReturnOrder@1000 : TestPage 6630);
    BEGIN
      Assert.IsFalse(SalesReturnOrder.SalesLines."Invoice Discount Amount".EDITABLE,'Invoce discount amount shoud not be editable');
    END;

    LOCAL PROCEDURE BlanketOrderCheckCurrencyOnTotals@138(BlanketSalesOrder@1000 : TestPage 507;ExpectedCurrencySign@1001 : Code[10]);
    BEGIN
      Assert.AreNotEqual(
        0,STRPOS(BlanketSalesOrder.SalesLines."Total Amount Excl. VAT".CAPTION,ExpectedCurrencySign),
        'Currency sign is wrong on totals for Amount Exc. VAT');
      Assert.AreNotEqual(
        0,STRPOS(BlanketSalesOrder.SalesLines."Total Amount Incl. VAT".CAPTION,ExpectedCurrencySign),
        'Currency sign is wrong on totals for Amount Inc. VAT');
      Assert.AreNotEqual(
        0,STRPOS(BlanketSalesOrder.SalesLines."Total VAT Amount".CAPTION,ExpectedCurrencySign),
        'Currency sign is wrong on totals for VAT Amount');
    END;

    LOCAL PROCEDURE CreateInvoceWithOneLineThroughTestPage@23(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR SalesInvoice@1001 : TestPage 43);
    BEGIN
      SalesInvoice.OPENNEW;
      SalesInvoice."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesInvoice.SalesLines.FIRST;
      SalesInvoice.SalesLines.Type.SETVALUE('Item');
      SalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      SalesInvoice.SalesLines.Quantity.SETVALUE(ItemQuantity);

      // Trigger Save
      SalesInvoice.SalesLines.NEXT;
      SalesInvoice.SalesLines.FIRST;
    END;

    LOCAL PROCEDURE CreateOrderWithOneLineThroughTestPage@113(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR SalesOrder@1001 : TestPage 42);
    BEGIN
      SalesOrder.OPENNEW;
      SalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesOrder.SalesLines.FIRST;
      SalesOrder.SalesLines.Type.SETVALUE('Item');
      SalesOrder.SalesLines."No.".SETVALUE(Item."No.");
      SalesOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);
    END;

    LOCAL PROCEDURE CreateQuoteWithOneLineThroughTestPage@42(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR SalesQuote@1001 : TestPage 41);
    BEGIN
      SalesQuote.OPENNEW;
      SalesQuote."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesQuote.SalesLines.FIRST;
      SalesQuote.SalesLines.Type.SETVALUE('Item');
      SalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      SalesQuote.SalesLines.Quantity.SETVALUE(ItemQuantity);

      // Trigger Save
      SalesQuote.SalesLines.NEXT;
      SalesQuote.SalesLines.FIRST;
    END;

    LOCAL PROCEDURE CreateBlanketOrderWithOneLineThroughTestPage@139(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR BlanketSalesOrder@1001 : TestPage 507);
    BEGIN
      BlanketSalesOrder.OPENNEW;
      BlanketSalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");

      BlanketSalesOrder.SalesLines.FIRST;
      BlanketSalesOrder.SalesLines.Type.SETVALUE('Item');
      BlanketSalesOrder.SalesLines."No.".SETVALUE(Item."No.");
      BlanketSalesOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);

      // Trigger Save
      BlanketSalesOrder.SalesLines.NEXT;
      BlanketSalesOrder.SalesLines.FIRST;
    END;

    LOCAL PROCEDURE CreateReturnOrderWithOneLineThroughTestPage@177(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR SalesReturnOrder@1002 : TestPage 6630);
    BEGIN
      SalesReturnOrder.OPENNEW;
      SalesReturnOrder."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesReturnOrder.SalesLines.FIRST;
      SalesReturnOrder.SalesLines.Type.SETVALUE('Item');
      SalesReturnOrder.SalesLines."No.".SETVALUE(Item."No.");
      SalesReturnOrder.SalesLines.Quantity.SETVALUE(ItemQuantity);

      // Trigger Save
      SalesReturnOrder.SalesLines.NEXT;
      SalesReturnOrder.SalesLines.FIRST;
    END;

    LOCAL PROCEDURE CreateCreditMemoWithOneLineThroughTestPage@63(Customer@1000 : Record 18;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR SalesCreditMemo@1001 : TestPage 44);
    BEGIN
      SalesCreditMemo.OPENNEW;
      SalesCreditMemo."Sell-to Customer No.".SETVALUE(Customer."No.");

      SalesCreditMemo.SalesLines.FIRST;
      SalesCreditMemo.SalesLines.Type.SETVALUE('Item');
      SalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");
      SalesCreditMemo.SalesLines.Quantity.SETVALUE(ItemQuantity);

      // Trigger Save
      SalesCreditMemo.SalesLines.NEXT;
      SalesCreditMemo.SalesLines.FIRST;
    END;

    LOCAL PROCEDURE CreateGLAccountForInvoiceRounding@43(CustomerPostingGroupCode@1007 : Code[10]) : Code[20];
    VAR
      GLAccount@1003 : Record 15;
      CustomerPostingGroup@1004 : Record 92;
      GeneralPostingSetup@1001 : Record 252;
      VATPostingSetup@1000 : Record 325;
      SalesSetup@1002 : Record 311;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      SalesSetup.GET;
      SalesSetup."Invoice Rounding" := TRUE;
      SalesSetup.MODIFY;

      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Inv. Rounding Precision (LCY)" := 1;
      GeneralLedgerSetup.MODIFY;

      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      CustomerPostingGroup.VALIDATE("Invoice Rounding Account",GLAccount."No.");
      CustomerPostingGroup.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateDimOnGLAccount@45(GLAccountNo@1002 : Code[20]) : Integer;
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1000 : Record 352;
    BEGIN
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionGLAcc(
        DefaultDimension,GLAccountNo,DimensionValue."Dimension Code",DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Same Code");
      DefaultDimension.MODIFY;
      EXIT(DimensionValue."Dimension Value ID");
    END;

    LOCAL PROCEDURE GetDifferentCurrencyCode@11() : Code[10];
    BEGIN
      EXIT(LibraryERM.CreateCurrencyWithRandomExchRates);
    END;

    LOCAL PROCEDURE AddInvoiceDiscToCustomer@75(Customer@1001 : Record 18;MinimumAmount@1002 : Decimal;Percentage@1003 : Decimal);
    VAR
      CustInvoiceDisc@1000 : Record 19;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,Customer."No.",Customer."Currency Code",MinimumAmount);
      CustInvoiceDisc.VALIDATE("Discount %",Percentage);
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenSalesInvoice@52(SalesHeader@1000 : Record 36;VAR SalesInvoice@1001 : TestPage 43);
    BEGIN
      SalesInvoice.OPENEDIT;
      SalesInvoice.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE OpenSalesOrder@116(SalesHeader@1000 : Record 36;VAR SalesOrder@1001 : TestPage 42);
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE OpenSalesCreditMemo@70(SalesHeader@1000 : Record 36;VAR SalesCreditMemo@1002 : TestPage 44);
    BEGIN
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE OpenSalesQuote@14(SalesHeader@1000 : Record 36;VAR SalesQuote@1001 : TestPage 41);
    BEGIN
      SalesQuote.OPENEDIT;
      SalesQuote.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE OpenBlanketOrder@140(SalesHeader@1000 : Record 36;VAR BlanketSalesOrder@1001 : TestPage 507);
    BEGIN
      BlanketSalesOrder.OPENEDIT;
      BlanketSalesOrder.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE OpenSalesReturnOrder@178(SalesHeader@1000 : Record 36;VAR SalesReturnOrder@1002 : TestPage 6630);
    BEGIN
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.GOTORECORD(SalesHeader);
    END;

    LOCAL PROCEDURE CreateInvoiceWithRandomNumberOfLines@85(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    LOCAL PROCEDURE CreateOrderWithRandomNumberOfLines@115(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");

      FOR I := 1 TO NumberOfLines DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
        SalesLine.VALIDATE("Qty. to Invoice",SalesLine.Quantity);
      END;
    END;

    LOCAL PROCEDURE CreateCreditMemoWithRandomNumberOfLines@69(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    LOCAL PROCEDURE CreateQuoteWithRandomNumberOfLines@5(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    LOCAL PROCEDURE CreateBlanketOrderWithRandomNumberOfLines@141(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    LOCAL PROCEDURE CreateReturnOrderWithRandomNumberOfLines@179(VAR SalesHeader@1000 : Record 36;VAR Item@1002 : Record 27;VAR Customer@1003 : Record 18;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      SalesLine@1006 : Record 37;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",Customer."No.");

      FOR I := 1 TO NumberOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",ItemQuantity);
    END;

    LOCAL PROCEDURE SalesInvoiceRefreshTotals@129(VAR SalesInvoice@1000 : TestPage 43);
    BEGIN
      SalesInvoice.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE SalesOrderRefreshTotals@180(VAR SalesOrder@1000 : TestPage 42);
    BEGIN
      SalesOrder.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE SalesQuoteRefreshTotals@188(SalesQuote@1000 : TestPage 41);
    BEGIN
      SalesQuote.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE SalesCreditMemoRefreshTotals@193(VAR SalesCreditMemo@1000 : TestPage 44);
    BEGIN
      SalesCreditMemo.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE BlanketSalesOrderRefreshTotals@183(VAR BlanketSalesOrder@1000 : TestPage 507);
    BEGIN
      BlanketSalesOrder.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE SalesReturnOrderRefreshTotals@191(VAR SalesReturnOrder@1000 : TestPage 6630);
    BEGIN
      SalesReturnOrder.SalesLines.RefreshTotals.DRILLDOWN;
    END;

    LOCAL PROCEDURE SetInvDiscAmountInSalesOrderSubPage@143(DocNo@1000 : Code[20]) InvDiscountAmount : Integer;
    VAR
      SalesOrderSubform@1001 : TestPage 46;
    BEGIN
      SalesOrderSubform.OPENEDIT;
      SalesOrderSubform.FILTER.SETFILTER("Document No.",DocNo);
      InvDiscountAmount := LibraryRandom.RandInt(100);
      SalesOrderSubform."Invoice Discount Amount".SETVALUE(InvDiscountAmount);
    END;

    LOCAL PROCEDURE SetupDataForDiscountTypePct@54(VAR Item@1000 : Record 27;VAR ItemQuantity@1007 : Decimal;VAR Customer@1002 : Record 18);
    VAR
      MinAmt@1005 : Decimal;
      ItemUnitPrice@1001 : Decimal;
      DiscPct@1003 : Decimal;
    BEGIN
      ItemUnitPrice := LibraryRandom.RandDecInDecimalRange(100,10000,2);
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      MinAmt := LibraryRandom.RandDecInDecimalRange(ItemUnitPrice,ItemUnitPrice * 2,2);
      DiscPct := LibraryRandom.RandDecInDecimalRange(1,100,2);

      CreateItem(Item,ItemUnitPrice);
      CreateCustomerWithDiscount(Customer,DiscPct,MinAmt);
    END;

    LOCAL PROCEDURE SetupDataForDiscountTypeAmt@64(VAR Item@1000 : Record 27;VAR ItemQuantity@1007 : Decimal;VAR Customer@1002 : Record 18;VAR InvoiceDiscountAmount@1004 : Decimal);
    BEGIN
      SetAllowManualDisc;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Customer);
      InvoiceDiscountAmount := LibraryRandom.RandDecInRange(1,ROUND(Item."Unit Price" * ItemQuantity,1,'<'),2);
    END;

    LOCAL PROCEDURE VerifyInvDiscAmountInSalesOrderSubpage@154(DocNo@1000 : Code[20];InvDiscountAmount@1001 : Integer);
    VAR
      SalesOrderSubform@1002 : TestPage 46;
    BEGIN
      SalesOrderSubform.OPENEDIT;
      SalesOrderSubform.FILTER.SETFILTER("Document No.",DocNo);
      SalesOrderSubform."Invoice Discount Amount".ASSERTEQUALS(InvDiscountAmount);
    END;

    LOCAL PROCEDURE AnswerYesToConfirmDialog@34();
    BEGIN
      AnswerYesToConfirmDialogs(1);
    END;

    LOCAL PROCEDURE AnswerYesToConfirmDialogs@26(ExpectedNumberOfDialogs@1001 : Integer);
    VAR
      I@1000 : Integer;
    BEGIN
      FOR I := 1 TO ExpectedNumberOfDialogs DO BEGIN
        LibraryVariableStorage.Enqueue(ChangeConfirmMsg);
        LibraryVariableStorage.Enqueue(TRUE);
      END;
    END;

    LOCAL PROCEDURE AnswerYesToAllConfirmDialogs@71();
    BEGIN
      AnswerYesToConfirmDialogs(10);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@56(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
      Answer@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      LibraryVariableStorage.Dequeue(Answer);
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := Answer;
    END;

    LOCAL PROCEDURE SetAllowManualDisc@74();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Calc. Inv. Discount",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [MessageHandler]
    PROCEDURE QuoteConvertedMessageHandler@77(Msg@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage(QuoteMsg,Msg);
    END;

    [MessageHandler]
    PROCEDURE BlanketOrderConvertedMessageHandler@137(Msg@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage(BlanketOrderMsg,Msg);
    END;

    [ModalPageHandler]
    PROCEDURE SalesStatisticsModalHandler@59(VAR SalesStatistics@1000 : TestPage 160);
    VAR
      InvDiscAmount@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(InvDiscAmount);

      Assert.AreNearlyEqual(InvDiscAmount,SalesStatistics.InvDiscountAmount.ASDECIMAL,
        0.2,'Invoice Discount Amount is not correct');
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderStatisticsModalHandler@83(VAR SalesOrderStatistics@1000 : TestPage 402);
    VAR
      InvDiscAmount@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(InvDiscAmount);

      Assert.AreEqual(InvDiscAmount,SalesOrderStatistics.InvDiscountAmount_General.ASDECIMAL,
        'Invoice Discount Amount is not correct');
    END;

    [MessageHandler]
    PROCEDURE InvoiceDiscountAmountSetToZeroHander@76(Message@1000 : Text);
    BEGIN
      Assert.IsTrue(STRPOS(Message,ZeroInvMsg) > 0,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Statistics] [Sales]
    }
    END.
  }
}

