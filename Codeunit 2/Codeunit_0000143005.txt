OBJECT Codeunit 143005 Service Tax With TDS Helper
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500002 : Codeunit 130000;
      LibraryERM@1500007 : Codeunit 131300;
      LibraryServiceTax@1500001 : Codeunit 143001;
      LibraryTDS@1500004 : Codeunit 143000;
      LibraryRandom@1500006 : Codeunit 130440;
      ReverseServiceTaxHelper@1500000 : Codeunit 143006;
      AmountErr@1500003 : TextConst 'ENU=%1 is incorrect in %2.';
      ServiceTaxVerify@1500009 : Codeunit 143004;
      ServiceTaxFCYHelper@1500010 : Codeunit 143002;
      ReverseChargeTypeOption@1500008 : ' ,Standard,GTA';
      TDSBaseRoundingErr@1500005 : TextConst 'ENU=TDS Base Amount should be equal to posted Service Tax Base Amount.';

    PROCEDURE UseTDSTax@1500007() : Boolean;
    VAR
      TestSetup@1500000 : Record 143000;
    BEGIN
      TestSetup.GET;
      EXIT(TestSetup."Use TDS Tax");
    END;

    PROCEDURE UseWorkTax@1500008() : Boolean;
    VAR
      TestSetup@1500000 : Record 143000;
    BEGIN
      TestSetup.GET;
      EXIT(TestSetup."Use Work Tax");
    END;

    PROCEDURE SetTDSTaxType@1500002(TDSTax@1500000 : Boolean;WorkTax@1500001 : Boolean);
    VAR
      TestSetup@1500002 : Record 143000;
    BEGIN
      IF TestSetup.GET THEN BEGIN
        UpdateTestSetupTaxType(TestSetup,TDSTax,WorkTax);
        TestSetup.MODIFY;
      END ELSE BEGIN
        TestSetup.INIT;
        UpdateTestSetupTaxType(TestSetup,TDSTax,WorkTax);
        TestSetup.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateTestSetupTaxType@1500001(VAR TestSetup@1500000 : Record 143000;TDSTax@1500001 : Boolean;WorkTax@1500002 : Boolean);
    BEGIN
      TestSetup."Use TDS Tax" := TDSTax;
      TestSetup."Use Work Tax" := WorkTax;
    END;

    PROCEDURE AddLineToNODNOCSetup@1500088(VAR NODNOCHeader@1040 : Record 13786;CodeContractor@1044 : Code[10]);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor,TRUE,'',0);
    END;

    PROCEDURE AddPoTToAdvPmtAmount@1500095(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount + CalcPoTForAdvPmt(GenJournalLine));
      GenJournalLine.MODIFY;
    END;

    PROCEDURE AdvPaymentPoT@1500042(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyTDSPostingAdvPmt(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE AdvPaymentRevChrg@1500047(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyTDSPostingAdvPmt(GenJournalLine,FALSE);
    END;

    PROCEDURE AdvPaymentSplit@1500052(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtSplit(GenJournalLine);
      GenJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(100000,2));
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyServTaxSplitAdvPmt(GenJournalLine);
      VerifyTDSPostingAdvPmt(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE AdvPmtApplyBigInvGenJnlRevChrg@1500103();
    VAR
      GenJournalLine@1500003 : Record 81;
      PmtGenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      LibraryServiceTax.SetServiceTaxRounding;
      CreateAdvPmtRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      PmtGenJournalLine := GenJournalLine;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      ApplyAndPostBiggerInvGenJnl(GenJournalLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(PmtGenJournalLine,GenJournalLine,FALSE);
      IF UseTDSTax THEN
        VerifyTDSPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,FALSE);
      IF UseWorkTax THEN
        VerifyWTaxPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,FALSE);
    END;

    PROCEDURE AdvPmtApplyBiggerInvDocPoT@1500085();
    VAR
      GenJournalLine@1500003 : Record 81;
      PmtGenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PmtGenJournalLine := GenJournalLine;
      // Exercise
      GenJournalLine.Amount := GetBiggerAmount(GenJournalLine.Amount);
      ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(PmtGenJournalLine,GenJournalLine,FALSE);
      IF UseTDSTax THEN
        VerifyTDSPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,TRUE);
      IF UseWorkTax THEN
        VerifyWTaxPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,TRUE);
    END;

    PROCEDURE AdvPmtApplyBiggerInvDocPoTFcy@1500043(VAR GenJournalLine@1500001 : Record 81;VAR PmtGenJournalLine@1500000 : Record 81);
    BEGIN
      // Setup
      CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      ServiceTaxFCYHelper.SetFCYNonResPmtOnJnlLine(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PmtGenJournalLine := GenJournalLine;
      // Exercise
      GenJournalLine.Amount := GetBiggerAmount(GenJournalLine.Amount);
      ApplyAndPostInvoiceDoc(GenJournalLine);

      // Restore
      ServiceTaxFCYHelper.SetNonResidentPmtOnTDSGroup(GenJournalLine,FALSE);
    END;

    PROCEDURE AdvPmtApplyBiggerInvDocRevChrg@1500099();
    VAR
      GenJournalLine@1500003 : Record 81;
      PmtGenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PmtGenJournalLine := GenJournalLine;

      // Exercise
      GenJournalLine.Amount := GetBiggerAmount(GenJournalLine.Amount);
      ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(PmtGenJournalLine,GenJournalLine,FALSE);
      IF UseTDSTax THEN
        VerifyTDSPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,FALSE);
      IF UseWorkTax THEN
        VerifyWTaxPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,FALSE);
    END;

    PROCEDURE AdvPmtApplyBiggerInvGenJnlPoT@1560060(TDSBaseInclServTax@1500001 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
      PmtGenJournalLine@1500000 : Record 81;
    BEGIN
      // Exercise
      PostInvAppliesToAdvPmtPoT(GenJournalLine,PmtGenJournalLine,TDSBaseInclServTax);

      // Verify
      VerifyPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,TDSBaseInclServTax);
    END;

    PROCEDURE AdvPmtApplyInvGenJnl@1500063(PoT@1500001 : Boolean;RevCharge@1500002 : Boolean);
    VAR
      AdvPmtGenJnlLine@1500003 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
    BEGIN
      VerifyParameterIntegrity(PoT,RevCharge);
      // Setup
      IF PoT THEN
        CreateAdvPmtPoT(AdvPmtGenJnlLine);
      IF RevCharge THEN
        CreateAdvPmtRevChrg(AdvPmtGenJnlLine);

      LibraryTDS.SetInclServTaxOptionInGenJnl(AdvPmtGenJnlLine,TRUE);
      LibraryERM.PostGeneralJnlLine(AdvPmtGenJnlLine);

      // Exercise
      InvoiceGenJnlLine := AdvPmtGenJnlLine;
      ApplyAndPostInvoiceGenJnl(InvoiceGenJnlLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(AdvPmtGenJnlLine,InvoiceGenJnlLine,FALSE);
      IF RevCharge THEN
        VerifyTDSPostingAppliedInvoice(InvoiceGenJnlLine,FALSE)
      ELSE
        VerifyTDSPostingAppliedInvoice(InvoiceGenJnlLine,TRUE);
    END;

    PROCEDURE ApplyAndPostBiggerInvGenJnl@1500061(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      CreateInvoiceFromGenJournal(GenJournalLine);
      GenJournalLine.VALIDATE(Amount,GetBiggerAmount(GenJournalLine.Amount));
      GenJournalLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE ApplyAndPostInvoiceDoc@1500057(VAR GenJournalLine@1500000 : Record 81);
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ServiceTaxSetup@1500004 : Record 16472;
      ServiceTaxType@1500003 : Option;
      BaseAmount@1500005 : Decimal;
      InvoiceDocumentNo@1500006 : Code[20];
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxType := ReverseServiceTaxHelper.GetServTaxType(
          GenJournalLine."Service Tax Group Code",GenJournalLine."Account No.",GenJournalLine."Service Tax Registration No.");
      BaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine);

      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        PurchaseHeader."Document Type"::Invoice,ServiceTaxType,
        ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),GenJournalLine.PoT,BaseAmount);

      ValidatePurchLineNOD(PurchaseLine,GenJournalLine."TDS Nature of Deduction",GenJournalLine."Work Tax Nature Of Deduction");

      UpdateInclServTaxOption(PurchaseHeader,GenJournalLine."Include Serv. Tax in TDS Base");

      InvoiceDocumentNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ConvertDocToJnlLine(
        PurchaseHeader,PurchaseLine,InvoiceDocumentNo,GenJournalLine);
    END;

    PROCEDURE ApplyAndPostInvoiceGenJnl@1500065(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      CreateInvoiceFromGenJournal(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE ApplyAndPostPayment@1500040(GenJournalLine@1500000 : Record 81;PaymentAmount@1500001 : Decimal) : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreatePaymentWithOnlineAppl(
        GenJournalLine,ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"),PaymentAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    PROCEDURE AdvPmtApplyBiggerInvSplit@1500054(IncludeServiceTaxInTDSBase@1500001 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
      PmtGenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtSplit(GenJournalLine);
      GenJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(20000,2));
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServiceTaxInTDSBase);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PmtGenJournalLine := GenJournalLine;

      // Exercise
      GenJournalLine.Amount := GetBiggerAmount(GenJournalLine.Amount);
      ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(PmtGenJournalLine,GenJournalLine,FALSE);

      IF UseTDSTax THEN
        VerifyTDSPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,IncludeServiceTaxInTDSBase);
      IF UseWorkTax THEN
        VerifyWTaxPostingAppliedBigInv(GenJournalLine,PmtGenJournalLine,IncludeServiceTaxInTDSBase);
    END;

    PROCEDURE AdvPmtApplyInvDocSplit@1500055(IncludeServiceTaxInTDSBase@1500000 : Boolean);
    VAR
      AdvPmtGenJnlLine@1500003 : Record 81;
      InvoiceGenJnlLine@1500001 : Record 81;
    BEGIN
      // Setup
      CreateAdvPmtSplit(AdvPmtGenJnlLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(AdvPmtGenJnlLine,IncludeServiceTaxInTDSBase);
      LibraryERM.PostGeneralJnlLine(AdvPmtGenJnlLine);

      // Exercise
      InvoiceGenJnlLine := AdvPmtGenJnlLine;
      ApplyAndPostInvoiceDoc(InvoiceGenJnlLine);

      // Verify
      ServiceTaxVerify.AppliedDocServiceTax(AdvPmtGenJnlLine,InvoiceGenJnlLine,FALSE);
      VerifyTDSPostingAppliedInvoice(InvoiceGenJnlLine,IncludeServiceTaxInTDSBase);
      VerifyServTaxSplit(InvoiceGenJnlLine);
    END;

    PROCEDURE CalcPaymentAmount@1500083(GenJournalLine@1500000 : Record 81;IncludeServTax@1500001 : Boolean) : Decimal;
    VAR
      ExpectedTDSAmounts@1500003 : Record 13729;
      VendorLEAmount@1500002 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedTDSAmounts,GenJournalLine,VendorLEAmount,IncludeServTax);
      EXIT(VendorLEAmount);
    END;

    LOCAL PROCEDURE CalcPoTForAdvPmt@1500017(GenJournalLine@1500001 : Record 81) : Decimal;
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      PoTAmount@1500007 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcServTaxAmounts(GenJournalLine,GenJournalLine.Amount,PoTAmount,ServiceTaxSetup);
      EXIT(PoTAmount);
    END;

    LOCAL PROCEDURE CalcSplitAmounts@1500036(GenJournalLine@1500005 : Record 81;VAR PoTAmount@1500003 : Decimal;VAR RevChrgAmount@1500002 : Decimal;ServiceTaxSetup@1500000 : Record 16472);
    VAR
      BaseAmount@1500008 : Decimal;
      Percentage@1500004 : Integer;
    BEGIN
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(GenJournalLine,BaseAmount,PoTAmount,RevChrgAmount,Percentage,ServiceTaxSetup);
    END;

    PROCEDURE CalcTDSAmounts@1500022(VAR ExpectedTDSAmounts@1500013 : Record 13729;GenJournalLine@1500000 : Record 81;VAR VendorLEAmount@1500007 : Decimal;IncludeServTax@1500003 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxBase@1500004 : Decimal;
      TaxBaseAmount@1500006 : Decimal;
      PoTAmount@1500001 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcServTaxAmounts(GenJournalLine,ServTaxBase,PoTAmount,ServiceTaxSetup);

      WITH ExpectedTDSAmounts DO BEGIN
        TaxBaseAmount := ServTaxBase;
        IF IncludeServTax THEN
          TaxBaseAmount += PoTAmount;
        "Base Includes Service Tax" := IncludeServTax;

        CalcTDSAmountsFromBase(ExpectedTDSAmounts,GenJournalLine,TaxBaseAmount);

        VendorLEAmount := ServTaxBase + PoTAmount - "Total TDS Including SHE CESS" - "Work Tax Amount";
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSAmounts@1500001 : Record 13729;GenJournalLine@1500000 : Record 81;TaxBaseAmount@1500003 : Decimal);
    VAR
      TDSSetup@1500002 : Record 13728;
      WorkTaxTDSSetup@1500008 : Record 13728;
    BEGIN
      WITH ExpectedTDSAmounts DO BEGIN
        GetTDSSetup(TDSSetup,GenJournalLine);
        GetWorkTaxTDSSetup(WorkTaxTDSSetup,GenJournalLine);

        IF UseTDSTax THEN BEGIN
          "TDS Base Amount" := TaxBaseAmount;
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
          "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * "TDS Amount");
          "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * "TDS Amount");
          "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount";
        END;
        IF UseWorkTax THEN BEGIN
          "Work Tax Base Amount" := TaxBaseAmount;
          "Work Tax Amount" := LibraryTDS.RoundTDS(WorkTaxTDSSetup."TDS %" / 100 * "Work Tax Base Amount");
        END;
      END;
    END;

    PROCEDURE ConvertDocToJnlLine@1500021(PurchaseHeader@1500000 : Record 38;PurchaseLine@1500002 : Record 39;PostedDocNo@1500003 : Code[20];VAR GenJnlLine@1500001 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJnlLine);
      WITH GenJnlLine DO BEGIN
        "Include Serv. Tax in TDS Base" := FindFirstInclSTaxOptInStruct(PurchaseHeader.Structure);
        "TDS Group" := PurchaseLine."TDS Group";
        "Work Tax Group" := PurchaseLine."Work Tax Group";
        "TDS Nature of Deduction" := PurchaseLine."TDS Nature of Deduction";
        "Work Tax Nature Of Deduction" := PurchaseLine."Work Tax Nature Of Deduction";
        "Assessee Code" := PurchaseLine."Assessee Code";
        "Concessional Code" := PurchaseLine."Concessional Code";
        "System-Created Entry" := TRUE; // marker for a converted doc
        "Posting Group" := PurchaseLine."Posting Group";
        "Currency Code" := PurchaseHeader."Currency Code";
        IF "Currency Code" <> '' THEN
          "Amount (LCY)" :=
            LibraryERM.ConvertCurrency(Amount,"Currency Code",'',"Posting Date");
      END;
    END;

    PROCEDURE CreateAdvPmt@1500050(VAR GenJournalLine@1500003 : Record 81;ReverseChargePercentage@1500006 : Integer;ReverseChargeType@1500004 : Option;PoT@1500005 : Boolean) : Code[20];
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500002 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(GenJournalLine,GenJournalLine."Document Type"::Payment,
        ReverseChargeType,PoT,ReverseChargePercentage,VendorNo);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);
      AddPoTToAdvPmtAmount(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    PROCEDURE CreateAdvPmtPoT@1500045(VAR GenJournalLine@1500003 : Record 81) : Code[20];
    BEGIN
      EXIT(CreateAdvPmt(GenJournalLine,0,ReverseChargeTypeOption::" ",TRUE));
    END;

    PROCEDURE CreateAdvPmtRevChrg@1500051(VAR GenJournalLine@1500003 : Record 81);
    BEGIN
      CreateAdvPmt(GenJournalLine,100,ReverseChargeTypeOption::Standard,FALSE);
    END;

    PROCEDURE CreateAdvPmtSplit@1500060(VAR GenJournalLine@1500003 : Record 81) : Code[20];
    BEGIN
      EXIT(CreateAdvPmt(GenJournalLine,LibraryRandom.RandIntInRange(10,90),ReverseChargeTypeOption::Standard,TRUE));
    END;

    PROCEDURE CreateAdvRefundPoT@1500046(VAR GenJournalLine@1500003 : Record 81);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500002 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(GenJournalLine,GenJournalLine."Document Type"::Refund,
        ReverseChargeTypeOption::" ",TRUE,0,VendorNo);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreateCrMemoDocPoT@1500016(VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500002 : Record 39);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500004 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      ReverseServiceTaxHelper.CreatePurchaseDocForVendor(PurchaseHeader,PurchaseLine,VendorNo,
        PurchaseHeader."Document Type"::"Credit Memo",ReverseChargeTypeOption::" ",0,TRUE);
      ValidatePurchLineNOD(PurchaseLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreateCrMemoGenJnlPoT@1500029(VAR GenJournalLine@1500003 : Record 81);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500002 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        ReverseChargeTypeOption::" ",TRUE,0,VendorNo);
      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500150();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryERM.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      END;
      CompanyInformation.MODIFY(TRUE);
    END;

    PROCEDURE CreateGenJnlForVendor@1500013(VAR GenJournalLine@1500004 : Record 81;DocumentType@1500003 : Option;ReverseChargeType@1500002 : Option;PoT@1500001 : Boolean;Percentage@1500000 : Integer;VendorNo@1500010 : Code[20]);
    VAR
      GenJournalBatch@1500005 : Record 232;
      ServTaxRegNos@1500007 : Record 16475;
      ServiceTaxGroup@1500009 : Record 16471;
      ServiceTaxReturnPeriod@1500008 : Record 16588;
      Amount@1500006 : Decimal;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      Amount := ReverseServiceTaxHelper.GetAmountSignInJournalLine(DocumentType) * LibraryRandom.RandDec(100000,2);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServTaxRegNos);
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      ReverseServiceTaxHelper.GetServiceTaxReturnPeriod(ServiceTaxReturnPeriod);
      ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(
        GenJournalLine,GenJournalBatch,DocumentType,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),VendorNo,Amount,
        LibraryServiceTax.GetDateWithinSrvTaxPeriod(ServiceTaxReturnPeriod),ServTaxRegNos.Code,ServiceTaxGroup.Code);
      ReverseServiceTaxHelper.CreateSTRevChrgSetupFromJnl(GenJournalLine,ReverseChargeType,Percentage);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE(PoT,PoT);
      GenJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateInvoiceFromGenJournal@1500067(VAR GenJournalLine@1500000 : Record 81);
    VAR
      GenJournalBatch@1500002 : Record 232;
      GenJournalLine2@1500001 : Record 81;
      ServiceTaxSetup@1500006 : Record 16472;
      BaseAmount@1500003 : Decimal;
      ServiceTaxType@1500005 : Option;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxType :=
        ReverseServiceTaxHelper.GetServTaxType(
          GenJournalLine."Service Tax Group Code",GenJournalLine."Account No.",GenJournalLine."Service Tax Registration No.");
      BaseAmount :=
        ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(ABS(GenJournalLine.Amount),
          ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ServiceTaxType,ServiceTaxSetup);
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(GenJournalLine2,GenJournalBatch,"Document Type"::Invoice,
          "Service Type (Rev. Chrg.)","Account No.",-BaseAmount,"Posting Date","Service Tax Registration No.",
          "Service Tax Group Code");
        GenJournalLine2.VALIDATE("Party Type","Party Type"::Vendor);
        GenJournalLine2.VALIDATE("Party Code","Account No.");
        GenJournalLine2.VALIDATE(PoT,PoT);
        GenJournalLine2.VALIDATE("Applies-to Doc. Type","Document Type");
        GenJournalLine2.VALIDATE("Applies-to Doc. No.","Document No.");
        GenJournalLine2.VALIDATE("TDS Nature of Deduction","TDS Nature of Deduction");
        GenJournalLine2.VALIDATE("Work Tax Nature Of Deduction","Work Tax Nature Of Deduction");
        GenJournalLine2.VALIDATE("Include Serv. Tax in TDS Base","Include Serv. Tax in TDS Base");
        GenJournalLine2.VALIDATE("Currency Code","Currency Code");
      END;
      GenJournalLine2.MODIFY(TRUE);
      GenJournalLine := GenJournalLine2;
    END;

    PROCEDURE CreateNODNOCSetup@3(VAR NODNOCHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10]);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,Type,No,AssesseeCode);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor,TRUE,'',0);
    END;

    PROCEDURE CreatePurchaseDocPoT@1500003(VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500002 : Record 39;PoT@1500004 : Boolean);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500005 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      ReverseServiceTaxHelper.CreatePurchaseDocForVendor(PurchaseHeader,PurchaseLine,VendorNo,
        PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,PoT);
      ValidatePurchLineNOD(PurchaseLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreatePurchaseDocGenJnlPoT@1500012(VAR GenJournalLine@1500003 : Record 81;PoT@1500002 : Boolean);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500004 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",PoT,0,VendorNo);

      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);

      GenJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchaseDocRevChrg@1500005(VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500002 : Record 39);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500004 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      ReverseServiceTaxHelper.CreatePurchaseDocForVendor(PurchaseHeader,PurchaseLine,VendorNo,
        PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,100,FALSE);
      ValidatePurchLineNOD(PurchaseLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreatePurchaseDocGenJnlRevChrg@1500006(VAR GenJournalLine@1500003 : Record 81);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500002 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ReverseChargeTypeOption::Standard,FALSE,100,VendorNo);
      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreatePurchaseDocSplit@1500028(VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500002 : Record 39);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500004 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      ReverseServiceTaxHelper.CreatePurchaseDocForVendor(PurchaseHeader,PurchaseLine,VendorNo,
        PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::Standard,LibraryRandom.RandIntInRange(10,90),TRUE);
      ValidatePurchLineNOD(PurchaseLine,TDSNODCode,WorkTaxNODCode);
    END;

    PROCEDURE CreatePurchaseDocGenJnlSplit@1500027(VAR GenJournalLine@1500003 : Record 81);
    VAR
      VendorNo@1500001 : Code[20];
      TDSNODCode@1500000 : Code[10];
      WorkTaxNODCode@1500002 : Code[10];
    BEGIN
      SetupTax(VendorNo,TDSNODCode,WorkTaxNODCode);
      CreateGenJnlForVendor(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        ReverseChargeTypeOption::Standard,TRUE,LibraryRandom.RandIntInRange(10,90),VendorNo);
      ValidateGenJnlNOD(GenJournalLine,TDSNODCode,WorkTaxNODCode);
    END;

    LOCAL PROCEDURE CreateTDSSetup@7(VAR TDSSetup@1060 : Record 13728;NatureOfDeductionCode@1061 : Code[10];VAR AsseesseeCode@1500001 : Code[10];EffectiveDate@1500000 : Date;UseECessSHECess@1500002 : Boolean);
    BEGIN
      IF AsseesseeCode = '' THEN
        AsseesseeCode := LibraryTDS.CreateAssesseeCode;

      LibraryTDS.CreateTDSSetup(TDSSetup,NatureOfDeductionCode,AsseesseeCode,EffectiveDate,'','',0,'');

      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandIntInRange(15,25));
      TDSSetup.VALIDATE("Surcharge %",0);
      IF UseECessSHECess THEN BEGIN
        TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandIntInRange(1,5));
        TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandIntInRange(1,5));
      END;

      TDSSetup.MODIFY(TRUE);
    END;

    PROCEDURE CreateVendorWithPANNo@1500058() : Code[20];
    VAR
      Vendor@1500000 : Record 23;
    BEGIN
      Vendor.GET(ReverseServiceTaxHelper.CreateVendor);
      Vendor.VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No. is required
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindFirstInclSTaxOptInStruct@1500015(Structure@1500001 : Code[10]) : Boolean;
    VAR
      StructureDetails@1500002 : Record 13793;
    BEGIN
      StructureDetails.SETRANGE(Code,Structure);
      StructureDetails.FINDFIRST;
      EXIT(StructureDetails."Include in TDS Base");
    END;

    PROCEDURE GetBiggerAmount@1500076(Amount@1500000 : Decimal) : Decimal;
    BEGIN
      EXIT(Amount * (100 + LibraryRandom.RandIntInRange(10,200)) / 100);
    END;

    LOCAL PROCEDURE GetEffectiveDate@1500066() : Date;
    VAR
      ServiceTaxReturnPeriod@1500000 : Record 16588;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxReturnPeriod(ServiceTaxReturnPeriod);
      EXIT(LibraryServiceTax.GetSrvTaxReturnPeriodStartDate(ServiceTaxReturnPeriod));
    END;

    LOCAL PROCEDURE GetTDSAccount@1500019(GenJournalLine@1500000 : Record 81) : Code[20];
    VAR
      TDSGroup@1500002 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",GenJournalLine."TDS Group");
      TDSGroup.SETFILTER("Effective Date",STRSUBSTNO('<=%1',GenJournalLine."Posting Date"));
      TDSGroup.FINDLAST;
      EXIT(TDSGroup."TDS Account");
    END;

    LOCAL PROCEDURE GetTDSSetup@1500023(VAR TDSSetup@1500001 : Record 13728;GenJournalLine@1500002 : Record 81);
    BEGIN
      TDSSetup.RESET;
      IF GenJournalLine."TDS Nature of Deduction" <> '' THEN
        TDSSetup.SETRANGE("TDS Nature of Deduction",GenJournalLine."TDS Nature of Deduction");
      TDSSetup.SETRANGE("Assessee Code",GenJournalLine."Assessee Code");
      TDSSetup.SETFILTER("Effective Date",STRSUBSTNO('<=%1',GenJournalLine."Posting Date"));
      TDSSetup.SETRANGE("Concessional Code",GenJournalLine."Concessional Code");
      TDSSetup.FINDLAST;
    END;

    LOCAL PROCEDURE GetWorkTaxTDSSetup@1500020(VAR TDSSetup@1500001 : Record 13728;GenJournalLine@1500002 : Record 81);
    BEGIN
      TDSSetup.RESET;
      IF GenJournalLine."Work Tax Nature Of Deduction" <> '' THEN
        TDSSetup.SETRANGE("TDS Nature of Deduction",GenJournalLine."Work Tax Nature Of Deduction");
      TDSSetup.SETRANGE("Assessee Code",GenJournalLine."Assessee Code");
      TDSSetup.SETFILTER("Effective Date",STRSUBSTNO('<=%1',GenJournalLine."Posting Date"));
      TDSSetup.SETRANGE("Concessional Code",GenJournalLine."Concessional Code");
      TDSSetup.FINDLAST;
    END;

    LOCAL PROCEDURE GetWorkTaxTDSAccount@1500030(GenJournalLine@1500000 : Record 81) : Code[20];
    VAR
      TDSGroup@1500002 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",GenJournalLine."Work Tax Group");
      TDSGroup.SETFILTER("Effective Date",STRSUBSTNO('<=%1',GenJournalLine."Posting Date"));
      TDSGroup.FINDLAST;
      EXIT(TDSGroup."TDS Account");
    END;

    PROCEDURE InvDocPoT@1500018(IncludeServTax@1500004 : Boolean);
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      GenJournalLine@1500003 : Record 81;
      PostedDocNo@1500002 : Code[20];
    BEGIN
      // Setup
      CreatePurchaseDocPoT(PurchaseHeader,PurchaseLine,TRUE);
      UpdateInclServTaxOption(PurchaseHeader,IncludeServTax);

      // Exercise
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE InvDocPoTAppliesToPmt@1500075();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      GenJournalLine@1500003 : Record 81;
      PostedDocNo@1500002 : Code[20];
      PmtDocNo@1500005 : Code[20];
      IncludeServTax@1500004 : Boolean;
    BEGIN
      // Setup
      IncludeServTax := TRUE;
      CreatePurchaseDocPoT(PurchaseHeader,PurchaseLine,TRUE);
      UpdateInclServTaxOption(PurchaseHeader,IncludeServTax);
      ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      PmtDocNo := PostPayment(GenJournalLine,IncludeServTax);
      PurchaseHeader.VALIDATE("Applies-to Doc. Type",PurchaseHeader."Applies-to Doc. Type"::Payment);
      PurchaseHeader.VALIDATE("Applies-to Doc. No.",PmtDocNo);
      PurchaseHeader.MODIFY;
      // Exercise
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE InvDocRevChrg@1500033(IncludeServTax@1500004 : Boolean);
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
      GenJournalLine@1500003 : Record 81;
      PostedDocNo@1500002 : Code[20];
    BEGIN
      // Setup
      CreatePurchaseDocRevChrg(PurchaseHeader,PurchaseLine);
      UpdateInclServTaxOption(PurchaseHeader,IncludeServTax);

      // Exercise
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyTDSPostingInvoice(GenJournalLine,FALSE);
    END;

    PROCEDURE InvDocSplit@1500037(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      InvDocSplitGenJnl(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE InvDocSplitGenJnl@1500044(VAR GenJournalLine@1500005 : Record 81;IncludeServTax@1500004 : Boolean) PostedDocNo : Code[20];
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
    BEGIN
      // Setup
      LibraryServiceTax.SetServiceTaxRounding;
      CreatePurchaseDocSplit(PurchaseHeader,PurchaseLine);
      UpdateInclServTaxOption(PurchaseHeader,IncludeServTax);

      // Exercise
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE InvGenJnlPoT@1500032(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      CreatePurchaseDocGenJnlPoT(GenJournalLine,TRUE);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE InvGenJnlPoTAppliesToPmt@1500104(VAR GenJournalLine@1500001 : Record 81;IncludeServTax@1500000 : Boolean);
    VAR
      PmtDocNo@1500002 : Code[20];
    BEGIN
      // Setup
      IncludeServTax := TRUE;
      CreatePurchaseDocGenJnlPoT(GenJournalLine,TRUE);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);
      PmtDocNo := PostPayment(GenJournalLine,IncludeServTax);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Payment);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",PmtDocNo);
      GenJournalLine.MODIFY;

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE InvGenJnlRevChrg@1500034(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      // Setup
      CreatePurchaseDocGenJnlRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyTDSPostingInvoice(GenJournalLine,FALSE);
    END;

    PROCEDURE InvGenJnlSplit@1500038(IncludeServTax@1500004 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // Setup
      CreatePurchaseDocGenJnlSplit(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,IncludeServTax);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    PROCEDURE OfflineAppSplit@1500049(LastTransactionNo@1500001 : Integer;ApplyToInvoice@1500005 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
      InvoiceDocNo@1500004 : Code[20];
      PaymentDocNo@1500014 : Code[20];
      IncludeServiceTax@1500006 : Boolean;
    BEGIN
      IncludeServiceTax := TRUE;

      // Setup
      InvoiceDocNo := InvDocSplitGenJnl(GenJournalLine,IncludeServiceTax);
      PaymentDocNo := PostPayment(GenJournalLine,IncludeServiceTax);

      // Exercise - apply offline
      IF ApplyToInvoice THEN
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          GenJournalLine."Document Type"::Invoice,InvoiceDocNo,
          GenJournalLine."Document Type"::Payment,PaymentDocNo)
      ELSE
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          GenJournalLine."Document Type"::Payment,PaymentDocNo,
          GenJournalLine."Document Type"::Invoice,InvoiceDocNo);

      // Verify
      GenJournalLine."Document No." := InvoiceDocNo;
      ServiceTaxVerify.SplitApplication(GenJournalLine,PaymentDocNo,LastTransactionNo);
    END;

    PROCEDURE PostAdvPaymentPoT@1500071(VAR GenJournalLine@1500001 : Record 81;VAR TDSBaseInclServTax@1500000 : Boolean);
    BEGIN
      CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TDSBaseInclServTax);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE PostInvoiceGenJnl@1500056(VAR GenJournalLine@1500000 : Record 81) : Code[20];
    BEGIN
      CreateInvoiceFromGenJournal(GenJournalLine);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",0);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",'');
      GenJournalLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    PROCEDURE PostInvAppliesToAdvPmtPoT@1500069(VAR InvoiceGenJournalLine@1500002 : Record 81;VAR PaymentGenJournalLine@1500001 : Record 81;TDSBaseInclServTax@1500000 : Boolean);
    BEGIN
      // Setup
      PostAdvPaymentPoT(PaymentGenJournalLine,TDSBaseInclServTax);

      // Exercise
      InvoiceGenJournalLine := PaymentGenJournalLine;
      ApplyAndPostBiggerInvGenJnl(InvoiceGenJournalLine);
    END;

    PROCEDURE PostPayment@1500082(GenJournalLine@1500000 : Record 81;IncludeServTax@1500001 : Boolean) : Code[20];
    VAR
      PaymentAmount@1500003 : Decimal;
    BEGIN
      PaymentAmount := CalcPaymentAmount(GenJournalLine,IncludeServTax);
      EXIT(
        ReverseServiceTaxHelper.PostPayment(
          GenJournalLine."Account No.",PaymentAmount,GenJournalLine."Posting Date",GenJournalLine."Document Type"::Payment));
    END;

    PROCEDURE RemoveTDSFromGenJournal@1500026(VAR GeneralJournalLine@1500000 : Record 81;ModifyRecord@1500001 : Boolean);
    BEGIN
      WITH GeneralJournalLine DO BEGIN
        VALIDATE("TDS Nature of Deduction",'');
        VALIDATE("TDS/TCS Amt Incl Surcharge",0);
        VALIDATE("TDS/TCS %",0);
        VALIDATE("TDS/TCS Amount",0);
        VALIDATE("TDS/TCS Base Amount",0);
        VALIDATE("Bal. TDS/TCS Including SHECESS",0);
        VALIDATE("Balance TDS/TCS Amount",0);
        IF ModifyRecord THEN
          MODIFY(TRUE)
      END;
    END;

    PROCEDURE RemoveWorkTaxFromGenJournal@1500025(VAR GeneralJournalLine@1500000 : Record 81;ModifyRecord@1500001 : Boolean);
    BEGIN
      WITH GeneralJournalLine DO BEGIN
        VALIDATE("Work Tax Nature Of Deduction",'');
        VALIDATE("Work Tax Base Amount",0);
        VALIDATE("Work Tax %",0);
        VALIDATE("Work Tax Amount",0);
        VALIDATE("Balance Work Tax Amount",0);
        IF ModifyRecord THEN
          MODIFY(TRUE)
      END;
    END;

    PROCEDURE SetupIncomeTaxAccountingPeriod@1500004();
    VAR
      IncomeTaxAccPeriod@1500000 : Record 13724;
      ServiceTaxReturnPeriod@1500001 : Record 16588;
    BEGIN
      ReverseServiceTaxHelper.GetServiceTaxReturnPeriod(ServiceTaxReturnPeriod);
      LibraryTDS.CreateTDSTCSFiscalYear(IncomeTaxAccPeriod,LibraryServiceTax.GetSrvTaxReturnPeriodStartDate(ServiceTaxReturnPeriod));
      LibraryTDS.CreateIncomeTaxPeriodQuarters(IncomeTaxAccPeriod."No.");
    END;

    LOCAL PROCEDURE SetupTax@1500014(VAR VendorNo@1500003 : Code[20];VAR TDSNODCode@1500007 : Code[10];VAR WorkTaxNODCode@1500001 : Code[10]);
    VAR
      NODNOCHeader@1500006 : Record 13786;
      NatureOfDeduction@1500000 : Record 13726;
      TDSSetup@1500002 : Record 13728;
      AsseesseeCode@1500004 : Code[10];
    BEGIN
      VendorNo := CreateVendorWithPANNo;

      IF UseTDSTax THEN BEGIN
        TDSNODCode := LibraryTDS.CreateTDSNatureDeduction(NatureOfDeduction."TDS Group"::Contractor);
        CreateTDSSetup(TDSSetup,TDSNODCode,AsseesseeCode,GetEffectiveDate,TRUE);
        CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,VendorNo,TDSSetup."Assessee Code",TDSNODCode);
      END;

      IF UseWorkTax THEN BEGIN
        WorkTaxNODCode := LibraryTDS.CreateTDSNatureDeduction(NatureOfDeduction."TDS Group"::Others);
        CreateTDSSetup(TDSSetup,WorkTaxNODCode,AsseesseeCode,GetEffectiveDate,FALSE);

        IF NODNOCHeader."No." = '' THEN
          CreateNODNOCSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,VendorNo,TDSSetup."Assessee Code",WorkTaxNODCode)
        ELSE
          AddLineToNODNOCSetup(NODNOCHeader,WorkTaxNODCode);
      END;
    END;

    PROCEDURE UpdateInclServTaxOption@1500009(VAR PurchaseHeader@1500001 : Record 38;Value@1500000 : Boolean);
    VAR
      PoT@1500003 : Boolean;
    BEGIN
      LibraryTDS.SetInclServTaxOptionInStruct(PurchaseHeader.Structure,Value);
      PoT := PurchaseHeader.PoT;
      PurchaseHeader.VALIDATE(Structure);
      PurchaseHeader.VALIDATE(PoT,PoT);
      PurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE ValidateGenJnlNOD@1500010(VAR GenJournalLine@1500000 : Record 81;TDSNODCode@1500001 : Code[10];WorkTaxNODCode@1500002 : Code[10]);
    BEGIN
      IF UseTDSTax THEN
        GenJournalLine.VALIDATE("TDS Nature of Deduction",TDSNODCode);
      IF UseWorkTax THEN
        GenJournalLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxNODCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidatePurchLineNOD@1500011(VAR PurchaseLine@1500000 : Record 39;TDSNODCode@1500001 : Code[10];WorkTaxNODCode@1500002 : Code[10]);
    BEGIN
      IF UseTDSTax THEN
        PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNODCode);
      IF UseWorkTax THEN
        PurchaseLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxNODCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE VerifyNoTDSOnAppliedInvoice@1500079(GenJournalLine@1500000 : Record 81);
    VAR
      TDSEntry@1500004 : Record 13729;
    BEGIN
      WITH GenJournalLine DO BEGIN
        TDSEntry.SETRANGE("Document Type","Document Type");
        TDSEntry.SETRANGE("Document No.","Document No.");
        Assert.IsTrue(TDSEntry.ISEMPTY,STRSUBSTNO('There must be no TDS Entry for %1 %2',"Document Type","Document No."));
      END;
    END;

    LOCAL PROCEDURE VerifyParameterIntegrity@1500062(PoT@1500000 : Boolean;ReverseCharge@1500001 : Boolean);
    BEGIN
      IF NOT (PoT XOR ReverseCharge) THEN
        Assert.Fail('Test defect: incorrect use of function - either PoT or RevCharge should be TRUE');
    END;

    PROCEDURE VerifyServTaxRevChrg@1500039(GenJournalLine@1500000 : Record 81);
    VAR
      ServTaxSetup@1500001 : Record 16472;
      ServTaxAmount@1500002 : Decimal;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServTaxAmount :=
        ReverseServiceTaxHelper.CalculateServTaxTotal(
          ReverseServiceTaxHelper.CalculateServTaxBase(
            ABS(GenJournalLine.Amount),GenJournalLine."Document Type"),
          ServTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServTaxSetup,0,ServTaxAmount,-ServTaxAmount,0);
    END;

    PROCEDURE VerifyServTaxSplit@1500035(GenJournalLine@1500000 : Record 81);
    VAR
      ServTaxSetup@1500001 : Record 16472;
      RevChrgAmount@1500002 : Decimal;
      PoTAmount@1500003 : Decimal;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      CalcSplitAmounts(GenJournalLine,PoTAmount,RevChrgAmount,ServTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServTaxSetup,PoTAmount,RevChrgAmount,-RevChrgAmount,0);
    END;

    PROCEDURE VerifyServTaxSplitAdvPmt@1500059(GenJournalLine@1500000 : Record 81);
    VAR
      ServTaxSetup@1500001 : Record 16472;
      RevChrgAmount@1500002 : Decimal;
      PoTAmount@1500003 : Decimal;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      CalcSplitAmounts(GenJournalLine,PoTAmount,RevChrgAmount,ServTaxSetup);

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServTaxSetup,PoTAmount,RevChrgAmount - PoTAmount,-RevChrgAmount,0);
    END;

    PROCEDURE VerifySTEntryDetail@1500031(GenJournalLine@1500005 : Record 81;PaymentDocNo@1500006 : Code[20];PartialPaymentFactor@1500003 : Decimal);
    VAR
      ServTaxEntryDetail@1500007 : Record 16474;
      ServTaxSetup@1500002 : Record 16472;
      GLSetup@1500008 : Record 98;
      PoTAmount@1500000 : Decimal;
      RevChrgAmount@1500001 : Decimal;
      ServTaxAmount@1500004 : Decimal;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      CalcSplitAmounts(GenJournalLine,PoTAmount,RevChrgAmount,ServTaxSetup);
      ServTaxEntryDetail.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      ServTaxEntryDetail.SETRANGE("Document No.",PaymentDocNo);
      ServTaxEntryDetail.SETRANGE("Reverse Charge",TRUE);
      ServTaxEntryDetail.FINDLAST;
      ServTaxAmount := ServTaxEntryDetail."Service Tax Amount" + ServTaxEntryDetail."Service Tax eCess Amount" +
        ServTaxEntryDetail."Service Tax SHE Cess Amount";
      GLSetup.GET;
      Assert.AreNearlyEqual(
        ReverseServiceTaxHelper.RoundAmount(RevChrgAmount * PartialPaymentFactor),ServTaxAmount,
        GLSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,'Total Service Tax Amount',ServTaxEntryDetail.TABLECAPTION));
    END;

    PROCEDURE VerifySTBaseIsTDSBase@1500048(DocumentNo@1500000 : Code[20];IncludeServTax@1500006 : Boolean;STRoundingPrecision@1500003 : Boolean);
    BEGIN
      VerifySTBaseIsTDSBaseRounding(DocumentNo,IncludeServTax,STRoundingPrecision,FALSE);
    END;

    PROCEDURE VerifySTBaseIsTDSBaseRounding@1500077(DocumentNo@1500000 : Code[20];IncludeServTax@1500006 : Boolean;STRoundingPrecision@1500003 : Boolean;DoubleRounding@1500008 : Boolean);
    VAR
      TDSEntry@1500001 : Record 13729;
      ServiceTaxEntry@1500002 : Record 16473;
      GLSetup@1500007 : Record 98;
      ExpectedTDSBase@1500005 : Decimal;
      RoundingPrecision@1500004 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      IF NOT TDSEntry.FINDLAST OR (TDSEntry."TDS Base Amount" = 0) THEN
        EXIT;

      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      IF ServiceTaxEntry.FINDSET THEN
        REPEAT
          IF NOT ServiceTaxEntry."Reverse Charge" AND IncludeServTax THEN
            ExpectedTDSBase += ServiceTaxEntry."Amount Including Service Tax"
          ELSE
            ExpectedTDSBase += ServiceTaxEntry."Service Tax Base Amount";
        UNTIL ServiceTaxEntry.NEXT = 0
      ELSE
        EXIT;

      GLSetup.GET;
      RoundingPrecision := GLSetup."Amount Rounding Precision";
      IF STRoundingPrecision THEN
        RoundingPrecision := GLSetup."Service Tax Rounding Precision";
      IF DoubleRounding THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedTDSBase,TDSEntry."TDS Base Amount",RoundingPrecision,TDSBaseRoundingErr)
    END;

    PROCEDURE VerifyTDSEntry@1500078(ExpectedTDSEntryAmounts@1500005 : Record 13729;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      TDSEntry@1500002 : Record 13729;
      GLSetup@1500003 : Record 98;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Document Type",DocumentType);
      TDSEntry.FINDLAST;

      GLSetup.GET;
      RoundingPrecision := GLSetup."Service Tax Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."Base Includes Service Tax",TDSEntry."Base Includes Service Tax",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Base Includes Service Tax"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."TDS Amount",TDSEntry."TDS Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Base Amount",TDSEntry."TDS Base Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."eCESS Amount",TDSEntry."eCESS Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."Work Tax Amount",TDSEntry."Work Tax Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Work Tax Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."Work Tax Base Amount",TDSEntry."Work Tax Base Amount",
        GLSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Work Tax Base Amount"),TDSEntry.TABLECAPTION));
    END;

    PROCEDURE VerifyTDSEntryFromBase@1500053(GenJournalLine@1500000 : Record 81);
    VAR
      ExpectedTDSEntry@1500005 : Record 13729;
      GLSetup@1500003 : Record 98;
      TDSEntry@1500002 : Record 13729;
      RoundingPrecision@1500001 : Decimal;
    BEGIN
      CalcTDSAmountsFromBase(ExpectedTDSEntry,GenJournalLine,GenJournalLine.Amount);

      GLSetup.GET;
      RoundingPrecision := GLSetup."Service Tax Rounding Precision";

      TDSEntry.SETRANGE("Document Type",GenJournalLine."Document Type");
      TDSEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      TDSEntry.FINDLAST;

      Assert.AreEqual(
        ExpectedTDSEntry."TDS Base Amount",TDSEntry."TDS Base Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."TDS Amount",TDSEntry."TDS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."eCESS Amount",TDSEntry."eCESS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."SHE Cess Amount",TDSEntry."SHE Cess Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
    END;

    PROCEDURE VerifyTDSPostingAdvPmt@1500041(GenJournalLine@1500000 : Record 81;IncludeServTax@1500003 : Boolean);
    VAR
      ExpectedTDSAmounts@1500006 : Record 13729;
      VendorLEAmount@1500001 : Decimal;
      BankLEAmount@1500005 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedTDSAmounts,GenJournalLine,BankLEAmount,IncludeServTax);
      VendorLEAmount :=
        BankLEAmount + ExpectedTDSAmounts."Total TDS Including SHE CESS" + ExpectedTDSAmounts."Work Tax Amount";

      IF UseTDSTax THEN
        ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
          GetTDSAccount(GenJournalLine),
          -ExpectedTDSAmounts."Total TDS Including SHE CESS");

      IF UseWorkTax THEN
        ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
          GetWorkTaxTDSAccount(GenJournalLine),
          -ExpectedTDSAmounts."Work Tax Amount");

      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),
        -BankLEAmount);

      VerifyTDSEntry(ExpectedTDSAmounts,GenJournalLine."Document No.",GenJournalLine."Document Type",FALSE);
      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetVendorPostingAccount(GenJournalLine."Account No."),
        VendorLEAmount);
    END;

    PROCEDURE VerifyTDSPostingAppliedInvoice@1500064(GenJournalLine@1500000 : Record 81;IncludeServTax@1500003 : Boolean);
    VAR
      ExpectedTDSAmounts@1500002 : Record 13729;
      ZeroTDSAmounts@1500004 : Record 13729;
      VendorLEAmount@1500001 : Decimal;
      BankLEAmount@1500005 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedTDSAmounts,GenJournalLine,BankLEAmount,IncludeServTax);
      VendorLEAmount :=
        BankLEAmount + ExpectedTDSAmounts."Total TDS Including SHE CESS" + ExpectedTDSAmounts."Work Tax Amount";

      // Entries with Amount = 0 created Purchase Invoice
      IF UseTDSTax THEN BEGIN
        IF GenJournalLine."System-Created Entry" THEN
          ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",GetTDSAccount(GenJournalLine),0)
        ELSE
          ServiceTaxVerify.GLEntryDoesNotExist(GenJournalLine."Document No.",GetTDSAccount(GenJournalLine));
        ZeroTDSAmounts.INIT;
        ZeroTDSAmounts."Base Includes Service Tax" := IncludeServTax;
        VerifyTDSEntry(ZeroTDSAmounts,GenJournalLine."Document No.",GenJournalLine."Document Type",FALSE);
      END;

      IF UseWorkTax THEN
        ServiceTaxVerify.GLEntryDoesNotExist(
          GenJournalLine."Document No.",GetWorkTaxTDSAccount(GenJournalLine));

      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetVendorPostingAccount(GenJournalLine."Account No."),
        -VendorLEAmount);

      VerifySTBaseIsTDSBase(GenJournalLine."Document No.",IncludeServTax,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    PROCEDURE VerifyTDSPostingAppliedBigInv@1500072(InvoiceGenJournalLine@1500000 : Record 81;PmtGenJournalLine@1500006 : Record 81;IncludeServTax@1500003 : Boolean);
    BEGIN
      VerifyTDSPostingBigInv(InvoiceGenJournalLine,PmtGenJournalLine,IncludeServTax);
      VerifySTBaseIsTDSBase(InvoiceGenJournalLine."Document No.",IncludeServTax,TRUE);
    END;

    PROCEDURE VerifyTDSPostingBigInv@1500073(InvoiceGenJournalLine@1500000 : Record 81;PmtGenJournalLine@1500006 : Record 81;IncludeServTax@1500003 : Boolean);
    VAR
      ExpectedTDSAmounts@1500002 : Record 13729;
      ExpectedPmtTDSAmounts@1500007 : Record 13729;
      BankLEAmount@1500005 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedPmtTDSAmounts,PmtGenJournalLine,BankLEAmount,IncludeServTax);
      CalcTDSAmounts(ExpectedTDSAmounts,InvoiceGenJournalLine,BankLEAmount,IncludeServTax);

      ExpectedTDSAmounts."TDS Base Amount" -= ExpectedPmtTDSAmounts."TDS Base Amount";
      CalcTDSAmountsFromBase(ExpectedTDSAmounts,InvoiceGenJournalLine,ExpectedTDSAmounts."TDS Base Amount");

      ServiceTaxVerify.GLEntry(InvoiceGenJournalLine."Document No.",
        GetTDSAccount(InvoiceGenJournalLine),-ExpectedTDSAmounts."Total TDS Including SHE CESS");

      ServiceTaxVerify.VendorLedgerEntryOpen(PmtGenJournalLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(InvoiceGenJournalLine."Document No.",TRUE);

      VerifyTDSEntry(ExpectedPmtTDSAmounts,PmtGenJournalLine."Document No.",PmtGenJournalLine."Document Type",TRUE);
      VerifyTDSEntry(ExpectedTDSAmounts,InvoiceGenJournalLine."Document No.",InvoiceGenJournalLine."Document Type",TRUE);
    END;

    PROCEDURE VerifyTDSPostingBigInvRounding@1500070(InvoiceGenJournalLine@1500000 : Record 81;PmtGenJournalLine@1500006 : Record 81;IncludeServTax@1500003 : Boolean);
    BEGIN
      VerifyTDSPostingBigInv(InvoiceGenJournalLine,PmtGenJournalLine,IncludeServTax);
      VerifySTBaseIsTDSBaseRounding(InvoiceGenJournalLine."Document No.",IncludeServTax,TRUE,TRUE);
    END;

    PROCEDURE VerifyTDSPostingInvoice@1500000(GenJournalLine@1500000 : Record 81;IncludeServTax@1500003 : Boolean);
    VAR
      ExpectedTDSAmounts@1500002 : Record 13729;
      VendorLEAmount@1500001 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedTDSAmounts,GenJournalLine,VendorLEAmount,IncludeServTax);

      IF UseTDSTax THEN
        ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
          GetTDSAccount(GenJournalLine),
          -ExpectedTDSAmounts."Total TDS Including SHE CESS");

      IF UseWorkTax THEN
        ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
          GetWorkTaxTDSAccount(GenJournalLine),
          -ExpectedTDSAmounts."Work Tax Amount");

      ServiceTaxVerify.AccountBalanceByDocNo(
        ReverseServiceTaxHelper.GetVendorPostingAccount(GenJournalLine."Account No."),
        GenJournalLine."Document No.",-VendorLEAmount);

      VerifyTDSEntry(ExpectedTDSAmounts,GenJournalLine."Document No.",GenJournalLine."Document Type",FALSE);
      VerifySTBaseIsTDSBase(GenJournalLine."Document No.",IncludeServTax,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    PROCEDURE VerifyPostingAppliedBigInv@1500068(InvoiceGenJournalLine@1500000 : Record 81;PaymentGenJournalLine@1500006 : Record 81;TDSBaseInclServTax@1500003 : Boolean);
    BEGIN
      ServiceTaxVerify.AppliedDocServiceTax(PaymentGenJournalLine,InvoiceGenJournalLine,FALSE);
      IF UseTDSTax THEN
        VerifyTDSPostingAppliedBigInv(InvoiceGenJournalLine,PaymentGenJournalLine,TDSBaseInclServTax);
      IF UseWorkTax THEN
        VerifyWTaxPostingAppliedBigInv(InvoiceGenJournalLine,PaymentGenJournalLine,TDSBaseInclServTax);
    END;

    PROCEDURE VerifyWTaxPostingAppliedBigInv@1500024(GenJournalLine@1500000 : Record 81;PmtGenJournalLine@1500006 : Record 81;IncludeServTax@1500003 : Boolean);
    VAR
      ExpectedTDSAmounts@1500002 : Record 13729;
      ExpectedPmtTDSAmounts@1500007 : Record 13729;
      BankLEAmount@1500005 : Decimal;
    BEGIN
      CalcTDSAmounts(ExpectedPmtTDSAmounts,PmtGenJournalLine,BankLEAmount,IncludeServTax);
      CalcTDSAmounts(ExpectedTDSAmounts,GenJournalLine,BankLEAmount,IncludeServTax);

      ExpectedTDSAmounts."Work Tax Base Amount" -= ExpectedPmtTDSAmounts."Work Tax Base Amount";
      CalcTDSAmountsFromBase(ExpectedTDSAmounts,GenJournalLine,ExpectedTDSAmounts."Work Tax Base Amount");

      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        GetWorkTaxTDSAccount(GenJournalLine),-ExpectedTDSAmounts."Work Tax Amount");

      ServiceTaxVerify.VendorLedgerEntryOpen(PmtGenJournalLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Document No.",TRUE);

      VerifySTBaseIsTDSBase(GenJournalLine."Document No.",IncludeServTax,TRUE);
      VerifyTDSEntry(ExpectedPmtTDSAmounts,PmtGenJournalLine."Document No.",PmtGenJournalLine."Document Type",FALSE);
      VerifyTDSEntry(ExpectedTDSAmounts,GenJournalLine."Document No.",GenJournalLine."Document Type",FALSE);
    END;

    BEGIN
    END.
  }
}

